00000000                            ;  =========================================================================
00000000                            ; |           Sonic the Hedgehog Disassembly for Sega Mega Drive            |
00000000                            ;  =========================================================================
00000000                            ;
00000000                            ; Disassembly created by Hivebrain
00000000                            ; thanks to drx, Stealth and Esrael L.G. Neto
00000000                            
00000000                            ; ===========================================================================
00000000                            
00000000                            	include	"_s1smps2asm_inc.asm"
00000000                            ; =============================================================================================
00000000                            ; Created by Flamewing, based on S1SMPS2ASM version 1.1 by Marc Gordon (AKA Cinossu)
00000000                            ; =============================================================================================
00000000 =00000001                  SourceDriver = 1 ; Please don't modify the value.
00000000                            ; PSG conversion to S3/S&K/S3D drivers require a tone shift of 12 semi-tones.
00000000 =0000000C                  psgdelta	EQU 12
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Standard Octave Pitch Equates
00000000 =00000088                  smpsPitch10lo	EQU $88
00000000 =00000094                  smpsPitch09lo	EQU $94
00000000 =000000A0                  smpsPitch08lo	EQU $A0
00000000 =000000AC                  smpsPitch07lo	EQU $AC
00000000 =000000B8                  smpsPitch06lo	EQU $B8
00000000 =000000C4                  smpsPitch05lo	EQU $C4
00000000 =000000D0                  smpsPitch04lo	EQU $D0
00000000 =000000DC                  smpsPitch03lo	EQU $DC
00000000 =000000E8                  smpsPitch02lo	EQU $E8
00000000 =000000F4                  smpsPitch01lo	EQU $F4
00000000 =00000000                  smpsPitch00		EQU $00
00000000 =0000000C                  smpsPitch01hi	EQU $0C
00000000 =00000018                  smpsPitch02hi	EQU $18
00000000 =00000024                  smpsPitch03hi	EQU $24
00000000 =00000030                  smpsPitch04hi	EQU $30
00000000 =0000003C                  smpsPitch05hi	EQU $3C
00000000 =00000048                  smpsPitch06hi	EQU $48
00000000 =00000054                  smpsPitch07hi	EQU $54
00000000 =00000060                  smpsPitch08hi	EQU $60
00000000 =0000006C                  smpsPitch09hi	EQU $6C
00000000 =00000078                  smpsPitch10hi	EQU $78
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Note Equates
00000000 =00000080                  nRst		EQU	$80
00000000 =00000081                  nC0			EQU	$81
00000000 =00000082                  nCs0		EQU	$82
00000000 =00000083                  nD0			EQU	$83
00000000 =00000084                  nEb0		EQU	$84
00000000 =00000085                  nE0			EQU	$85
00000000 =00000086                  nF0			EQU	$86
00000000 =00000087                  nFs0		EQU	$87
00000000 =00000088                  nG0			EQU	$88
00000000 =00000089                  nAb0		EQU	$89
00000000 =0000008A                  nA0			EQU	$8A
00000000 =0000008B                  nBb0		EQU	$8B
00000000 =0000008C                  nB0			EQU	$8C
00000000 =0000008D                  nC1			EQU	$8D
00000000 =0000008E                  nCs1		EQU	$8E
00000000 =0000008F                  nD1			EQU	$8F
00000000 =00000090                  nEb1		EQU	$90
00000000 =00000091                  nE1			EQU	$91
00000000 =00000092                  nF1			EQU	$92
00000000 =00000093                  nFs1		EQU	$93
00000000 =00000094                  nG1			EQU	$94
00000000 =00000095                  nAb1		EQU	$95
00000000 =00000096                  nA1			EQU	$96
00000000 =00000097                  nBb1		EQU	$97
00000000 =00000098                  nB1			EQU	$98
00000000 =00000099                  nC2			EQU	$99
00000000 =0000009A                  nCs2		EQU	$9A
00000000 =0000009B                  nD2			EQU	$9B
00000000 =0000009C                  nEb2		EQU	$9C
00000000 =0000009D                  nE2			EQU	$9D
00000000 =0000009E                  nF2			EQU	$9E
00000000 =0000009F                  nFs2		EQU	$9F
00000000 =000000A0                  nG2			EQU	$A0
00000000 =000000A1                  nAb2		EQU	$A1
00000000 =000000A2                  nA2			EQU	$A2
00000000 =000000A3                  nBb2		EQU	$A3
00000000 =000000A4                  nB2			EQU	$A4
00000000 =000000A5                  nC3			EQU	$A5
00000000 =000000A6                  nCs3		EQU	$A6
00000000 =000000A7                  nD3			EQU	$A7
00000000 =000000A8                  nEb3		EQU	$A8
00000000 =000000A9                  nE3			EQU	$A9
00000000 =000000AA                  nF3			EQU	$AA
00000000 =000000AB                  nFs3		EQU	$AB
00000000 =000000AC                  nG3			EQU	$AC
00000000 =000000AD                  nAb3		EQU	$AD
00000000 =000000AE                  nA3			EQU	$AE
00000000 =000000AF                  nBb3		EQU	$AF
00000000 =000000B0                  nB3			EQU	$B0
00000000 =000000B1                  nC4			EQU	$B1
00000000 =000000B2                  nCs4		EQU	$B2
00000000 =000000B3                  nD4			EQU	$B3
00000000 =000000B4                  nEb4		EQU	$B4
00000000 =000000B5                  nE4			EQU	$B5
00000000 =000000B6                  nF4			EQU	$B6
00000000 =000000B7                  nFs4		EQU	$B7
00000000 =000000B8                  nG4			EQU	$B8
00000000 =000000B9                  nAb4		EQU	$B9
00000000 =000000BA                  nA4			EQU	$BA
00000000 =000000BB                  nBb4		EQU	$BB
00000000 =000000BC                  nB4			EQU	$BC
00000000 =000000BD                  nC5			EQU	$BD
00000000 =000000BE                  nCs5		EQU	$BE
00000000 =000000BF                  nD5			EQU	$BF
00000000 =000000C0                  nEb5		EQU	$C0
00000000 =000000C1                  nE5			EQU	$C1
00000000 =000000C2                  nF5			EQU	$C2
00000000 =000000C3                  nFs5		EQU	$C3
00000000 =000000C4                  nG5			EQU	$C4
00000000 =000000C5                  nAb5		EQU	$C5
00000000 =000000C6                  nA5			EQU	$C6
00000000 =000000C7                  nBb5		EQU	$C7
00000000 =000000C8                  nB5			EQU	$C8
00000000 =000000C9                  nC6			EQU	$C9
00000000 =000000CA                  nCs6		EQU	$CA
00000000 =000000CB                  nD6			EQU	$CB
00000000 =000000CC                  nEb6		EQU	$CC
00000000 =000000CD                  nE6			EQU	$CD
00000000 =000000CE                  nF6			EQU	$CE
00000000 =000000CF                  nFs6		EQU	$CF
00000000 =000000D0                  nG6			EQU	$D0
00000000 =000000D1                  nAb6		EQU	$D1
00000000 =000000D2                  nA6			EQU	$D2
00000000 =000000D3                  nBb6		EQU	$D3
00000000 =000000D4                  nB6			EQU	$D4
00000000 =000000D5                  nC7			EQU	$D5
00000000 =000000D6                  nCs7		EQU	$D6
00000000 =000000D7                  nD7			EQU	$D7
00000000 =000000D8                  nEb7		EQU	$D8
00000000 =000000D9                  nE7			EQU	$D9
00000000 =000000DA                  nF7			EQU	$DA
00000000 =000000DB                  nFs7		EQU	$DB
00000000 =000000DC                  nG7			EQU	$DC
00000000 =000000DD                  nAb7		EQU	$DD
00000000 =000000DE                  nA7			EQU	$DE
00000000 =000000DF                  nBb7		EQU	$DF
00000000                            ; SMPS2ASM uses nMaxPSG for songs from S1/S2 drivers.
00000000                            ; nMaxPSG1 and nMaxPSG2 are used only for songs from S3/S&K/S3D drivers.
00000000                            ; The use of psgdelta is intended to undo the effects of PSGPitchConvert
00000000                            ; and ensure that the ending note is indeed the maximum PSG frequency.
00000000 =000000C6                  nMaxPSG				EQU nA5
00000000 =000000D2                  nMaxPSG1			EQU nA5+psgdelta
00000000 =000000D2                  nMaxPSG2			EQU nA5+psgdelta
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; PSG Flutter Equates
00000000 =00000000                  fTone_00	EQU	$00
00000000 =00000001                  fTone_01	EQU	$01
00000000 =00000002                  fTone_02	EQU	$02
00000000 =00000003                  fTone_03	EQU	$03
00000000 =00000004                  fTone_04	EQU	$04
00000000 =00000005                  fTone_05	EQU	$05
00000000 =00000006                  fTone_06	EQU	$06
00000000 =00000007                  fTone_07	EQU	$07
00000000 =00000008                  fTone_08	EQU	$08
00000000 =00000009                  fTone_09	EQU	$09
00000000 =00000007                  fTone_0A	EQU	$07
00000000 =00000005                  fTone_0B	EQU	$05
00000000 =00000000                  fTone_0C	EQU	$00
00000000                            ;fTone_0D	EQU	$00
00000000 =00000002                  sTone_01	EQU	$02
00000000 =00000002                  sTone_02	EQU	$02
00000000 =00000005                  sTone_03	EQU	$05
00000000 =00000003                  sTone_04	EQU	$03
00000000 =00000001                  sTone_05	EQU	$01
00000000 =00000003                  sTone_06	EQU	$03
00000000 =00000000                  sTone_07	EQU	$00	; SFX envelope, probably unused in S3K
00000000 =00000009                  sTone_08	EQU	$09
00000000 =00000005                  sTone_09	EQU	$05
00000000 =00000007                  sTone_0A	EQU	$07
00000000 =00000000                  sTone_0B	EQU	$00	; For FM volume envelopes
00000000 =00000009                  sTone_0C	EQU	$09
00000000 =00000000                  sTone_0D	EQU	$00	; This time it matches 100%
00000000 =00000002                  sTone_0E	EQU	$02	; Duplicate of 01
00000000 =00000002                  sTone_0F	EQU	$02	; Duplicate of 02
00000000 =00000000                  sTone_10	EQU	$00
00000000 =00000006                  sTone_11	EQU	$06
00000000 =00000001                  sTone_12	EQU	$01	; Duplicate of 05
00000000 =00000003                  sTone_13	EQU	$03	; Duplicate of 06
00000000 =00000000                  sTone_14	EQU	$00	; SFX envelope, probably unused in S3K
00000000 =00000009                  sTone_15	EQU	$09	; Duplicate of 08
00000000 =00000005                  sTone_16	EQU	$05	; Duplicate of 09
00000000 =00000007                  sTone_17	EQU	$07	; Duplicate of 0A
00000000 =00000000                  sTone_18	EQU	$00	; For FM volume envelopes
00000000 =00000009                  sTone_19	EQU	$09	; Duplicate of 0C
00000000 =00000002                  sTone_1A	EQU	$02
00000000 =00000009                  sTone_1B	EQU	$09	; Duplicate of 0C
00000000 =00000006                  sTone_1C	EQU	$06
00000000 =00000007                  sTone_1D	EQU	$07
00000000 =00000002                  sTone_1E	EQU	$02
00000000 =00000004                  sTone_1F	EQU	$04
00000000 =00000000                  sTone_20	EQU	$00	; This time it matches 100%
00000000 =00000009                  sTone_21	EQU	$09
00000000 =00000004                  sTone_22	EQU	$04
00000000 =00000007                  sTone_23	EQU	$07
00000000 =00000002                  sTone_24	EQU	$02
00000000 =00000009                  sTone_25	EQU	$09
00000000 =00000007                  sTone_26	EQU	$07
00000000 =00000003                  sTone_27	EQU	$03
00000000                            ;sTone_28	EQU	$09
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; DAC Equates
00000000 =00000081                  dKick equ $81
00000000 =00000082                  dSnare equ $82
00000000 =00000085                  dCrashCymbal equ $85
00000000 =00000088                  dHiTimpani equ $88
00000000 =00000089                  dMidTimpani equ $89
00000000 =0000008A                  dLowTimpani equ $8A
00000000 =0000008B                  dVLowTimpani equ $8B
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Channel IDs for SFX
00000000 =00000080                  cPSG1				EQU $80
00000000 =000000A0                  cPSG2				EQU $A0
00000000 =000000C0                  cPSG3				EQU $C0
00000000 =000000E0                  cNoise				EQU $E0	; Not for use in S3/S&K/S3D
00000000 =00000002                  cFM3				EQU $02
00000000 =00000004                  cFM4				EQU $04
00000000 =00000005                  cFM5				EQU $05
00000000 =00000006                  cFM6				EQU $06	; Only in S3/S&K/S3D, overrides DAC
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Conversion macros and functions
00000000                            
00000000                            ;conv0To256  macro val 
00000000                            	;if val<$01
00000000                            		;dc.b (256-val+$FF)&$FF
00000000                            	;else	
00000000                            		;dc.b (256-val)&$FF	
00000000                            	;endc
00000000                            	;endm
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Header Macros
00000000                            smpsHeaderStartSong macro ver
00000000                            SourceDriver set ver
00000000                            songStart set *
00000000                            	endm
00000000                            
00000000                            smpsHeaderStartSongConvert macro ver
00000000                            SourceDriver set ver
00000000                            songStart set *
00000000                            	endm
00000000                            
00000000                            smpsHeaderVoiceNull macro
00000000                            	if songStart<>*
00000000                            		fatal "Missing smpsHeaderStartSong or smpsHeaderStartSongConvert"
00000000                            	endif
00000000                            	dc.w	$0000
00000000                            	endm
00000000                            
00000000                            ; Header - Set up Voice Location
00000000                            ; Common to music and SFX
00000000                            smpsHeaderVoice macro loc
00000000                            	if songStart<>*
00000000                            		fatal "Missing smpsHeaderStartSong or smpsHeaderStartSongConvert"
00000000                            	endif
00000000                            	dc.w	loc-songStart
00000000                            	endm
00000000                            
00000000                            ; Header macros for music (not for SFX)
00000000                            ; Header - Set up Channel Usage
00000000                            smpsHeaderChan macro fm,psg
00000000                            	dc.b	fm,psg
00000000                            	endm
00000000                            
00000000                            ; Header - Set up Tempo
00000000                            smpsHeaderTempo macro div,mod
00000000                            	dc.b	div
00000000                            tempoDivider set div
00000000                            	dc.b    mod
00000000                            	endm
00000000                            
00000000                            ; Header - Set up DAC Channel
00000000                            smpsHeaderDAC macro loc,pitch,vol
00000000                            	dc.w	loc-songStart
00000000                            	if (narg=2)
00000000                            		dc.b	pitch
00000000                            		if (narg=3)
00000000                            			dc.b	vol
00000000                            		else
00000000                            			dc.b	$00
00000000                            		endif
00000000                            	else
00000000                            		dc.w	$00
00000000                            	endif
00000000                            	endm
00000000                            
00000000                            ; Header - Set up FM Channel
00000000                            smpsHeaderFM macro loc,pitch,vol
00000000                            	dc.w	loc-songStart
00000000                            	dc.b	pitch,vol
00000000                            	endm
00000000                            
00000000                            ; Header - Set up PSG Channel
00000000                            smpsHeaderPSG macro loc,pitch,vol,mod,voice
00000000                            	dc.w	loc-songStart
00000000                            	if SourceDriver>=3
00000000                            		dc.b	(pitch-psgdelta)&$FF
00000000                            	else
00000000                            		dc.b	pitch
00000000                            	endif
00000000                            	dc.b	vol,mod,voice
00000000                            	endm
00000000                            
00000000                            ; Header macros for SFX (not for music)
00000000                            ; Header - Set up Tempo
00000000                            smpsHeaderTempoSFX macro div
00000000                            	dc.b	div
00000000                            	endm
00000000                            
00000000                            ; Header - Set up Channel Usage
00000000                            smpsHeaderChanSFX macro chan
00000000                            	dc.b	chan
00000000                            	endm
00000000                            
00000000                            ; Header - Set up FM Channel
00000000                            smpsHeaderSFXChannel macro chanid,loc,pitch,vol
00000000                            	if (chanid=cNoise)
00000000                            		fatal "Using channel ID of FM6 ($06) in Sonic 1 or Sonic 2 drivers is unsupported. Change it to another channel."
00000000                            	endif
00000000                            	dc.b	$80,chanid
00000000                            	dc.w	loc-songStart
00000000                            	if (chanid&$80)<>0
00000000                            	if SourceDriver>=3
00000000                            		dc.b	(pitch-psgdelta)&$FF
00000000                            	else
00000000                            		dc.b	pitch
00000000                            	endif
00000000                            	else
00000000                            		dc.b	pitch
00000000                            	endif
00000000                            	dc.b	vol
00000000                            	endm
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Co-ord Flag Macros and Equates
00000000                            ; E0xx - Panning, AMS, FMS
00000000                            smpsPan macro direction,amsfms
00000000                            panNone set $00
00000000                            panRight set $40
00000000                            panLeft set $80
00000000                            panCentre set $C0
00000000                            panCenter set $C0 ; silly Americans :U
00000000                            	dc.b $E0,direction+amsfms
00000000                            	endm
00000000                            
00000000                            ; E1xx - Set channel frequency displacement to xx
00000000                            smpsAlterNote macro val
00000000                            	dc.b	$E1,val
00000000                            	endm
00000000                            
00000000                            smpsDetune macro val
00000000                            	dc.b		$E1, val
00000000                            	endm
00000000                            
00000000                            ; E2xx - Useless
00000000                            smpsNop macro val
00000000                            	dc.b	$E2,val
00000000                            	endm
00000000                            
00000000                            ; Return (used after smpsCall)
00000000                            smpsReturn macro val
00000000                            	dc.b	$E3
00000000                            	endm
00000000                            
00000000                            ; Fade in previous song (ie. 1-Up)
00000000                            smpsFade macro val
00000000                            	dc.b	$E4
00000000                            	endm
00000000                            
00000000                            ; E5xx - Set channel tempo divider to xx
00000000                            smpsChanTempoDiv macro val
00000000                            	dc.b	$E5,val
00000000                            	endm
00000000                            
00000000                            ; E6xx - Alter Volume by xx
00000000                            smpsAlterVol macro val
00000000                            	dc.b	$E6,val
00000000                            	endm
00000000 =000000E6                  sVol	EQU $E6
00000000                            
00000000                            ; E7 - Prevent attack of next note
00000000 =000000E7                  smpsNoAttack	EQU $E7
00000000 =000000E7                  smpsNA	EQU smpsNoAttack
00000000 =000000E7                  sNA	EQU smpsNoAttack
00000000                            
00000000                            ; E8xx - Set note fill to xx
00000000                            smpsNoteFill macro val
00000000                            	dc.b	$E8,val
00000000                            	endm
00000000                            
00000000                            ; Add xx to channel pitch
00000000                            smpsAlterPitch macro val
00000000                            	dc.b	$E9,val
00000000                            	endm
00000000                            
00000000                            smpsChangeTransposition macro val
00000000                            	if SourceDriver>=3
00000000                            		dc.b	$FF,val
00000000                            	else
00000000                            		dc.b	$E9,val
00000000                            	endif
00000000                            	endm
00000000                            
00000000                            ; Set music tempo modifier to xx
00000000                            smpsSetTempoMod macro val
00000000                            	dc.b	$EA
00000000                            	dc.b    val
00000000                            	endm
00000000                            
00000000                            ; Set music tempo divider to xx
00000000                            smpsSetTempoDiv macro val
00000000                            	dc.b	$EB,val
00000000                            	endm
00000000                            
00000000                            ; ECxx - Set Volume to xx
00000000                            smpsSetVol macro val
00000000                            	fatal "Coord. Flag to set volume (instead of volume attenuation) does not exist in S1 or S2 drivers. Complain to Flamewing to add it."
00000000                            	endm
00000000                            
00000000                            ; Works on all drivers
00000000                            smpsPSGAlterVol macro vol
00000000                            	dc.b	$EC,vol
00000000                            	endm
00000000 =000000EC                  spVol	EQU $EC
00000000                            
00000000                            ; Clears pushing sound flag in S1
00000000                            smpsClearPush macro
00000000                            	dc.b	$ED
00000000                            	endm
00000000                            
00000000                            ; Stops special SFX (S1 only) and restarts overridden music track
00000000                            smpsStopSpecial macro
00000000                            	dc.b	$EE
00000000                            	endm
00000000                            
00000000                            ; EFxx[yy] - Set Voice of FM channel to xx; xx < 0 means yy present
00000000                            smpsSetvoice macro voice,songID
00000000                            	dc.b	$EF,voice
00000000                            	endm
00000000                            
00000000                            ; EFxx - Set Voice of FM channel to xx
00000000                            smpsFMvoice macro voice
00000000                            	dc.b	$EF,voice
00000000                            	endm
00000000                            
00000000                            ; F0wwxxyyzz - Modulation - ww: wait time - xx: modulation speed - yy: change per step - zz: number of steps
00000000                            smpsModSet macro wait,speed,change,step
00000000                            	dc.b	$F0
00000000                            	if SourceDriver>=3
00000000                            		dc.b	wait+1,speed,change,(step*speed-1)&$FF
00000000                            	else
00000000                            		dc.b	wait,speed,change,step
00000000                            	endif
00000000                            	;dc.b	speed,change,step
00000000                            	endm
00000000                            
00000000                            ; Turn on Modulation
00000000                            smpsModOn macro
00000000                            	dc.b	$F1
00000000                            	endm
00000000                            
00000000                            ; F2 - End of channel
00000000                            smpsStop macro
00000000                            	dc.b	$F2
00000000                            	endm
00000000                            
00000000                            ; F3xx - PSG waveform to xx
00000000                            smpsPSGform macro form
00000000                            	dc.b	$F3,form
00000000                            	endm
00000000                            
00000000                            ; Turn off Modulation
00000000                            smpsModOff macro
00000000                            	dc.b	$F4
00000000                            	endm
00000000                            
00000000                            ; F5xx - PSG voice to xx
00000000                            smpsPSGvoice macro voice
00000000                            	dc.b	$F5,voice
00000000                            	endm
00000000                            
00000000                            ; F6xxxx - Jump to xxxx
00000000                            smpsJump macro loc
00000000                            	dc.b	$F6
00000000                            	dc.w	loc-*-1
00000000                            	endm
00000000                            
00000000                            ; F7xxyyzzzz - Loop back to zzzz yy times, xx being the loop index for loop recursion fixing
00000000                            smpsLoop macro index,loops,loc
00000000                            	dc.b	$F7
00000000                            	dc.b	index,loops
00000000                            	dc.w	loc-*-1
00000000                            	endm
00000000                            
00000000                            ; F8xxxx - Call pattern at xxxx, saving return point
00000000                            smpsCall macro loc
00000000                            	dc.b	$F8
00000000                            	dc.w	loc-*-1
00000000                            	endm
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Alter Volume
00000000                            smpsFMAlterVol macro val1,val2
00000000                            	dc.b	$E6,val1
00000000                            	endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; S1/S2 only coordination flag
00000000                            ; Sets D1L to maximum volume (minimum attenuation) and RR to maximum for operators 3 and 4 of FM1
00000000                            smpsWeirdD1LRR macro
00000000                            	dc.b	$F9
00000000                            	endm
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Macros for FM instruments
00000000                            ; Voices - Feedback
00000000                            smpsVcFeedback macro val
00000000                            vcFeedback set val
00000000                            	endm
00000000                            
00000000                            ; Voices - Algorithm
00000000                            smpsVcAlgorithm macro val
00000000                            vcAlgorithm set val
00000000                            	endm
00000000                            
00000000                            smpsVcUnusedBits macro val
00000000                            vcUnusedBits set val
00000000                            	endm
00000000                            
00000000                            ; Voices - Detune
00000000                            smpsVcDetune macro op1,op2,op3,op4
00000000                            vcDT1 set op1
00000000                            vcDT2 set op2
00000000                            vcDT3 set op3
00000000                            vcDT4 set op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Coarse-Frequency
00000000                            smpsVcCoarseFreq macro op1,op2,op3,op4
00000000                            vcCF1 set op1
00000000                            vcCF2 set op2
00000000                            vcCF3 set op3
00000000                            vcCF4 set op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Rate Scale
00000000                            smpsVcRateScale macro op1,op2,op3,op4
00000000                            vcRS1 set op1
00000000                            vcRS2 set op2
00000000                            vcRS3 set op3
00000000                            vcRS4 set op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Attack Rate
00000000                            smpsVcAttackRate macro op1,op2,op3,op4
00000000                            vcAR1 set op1
00000000                            vcAR2 set op2
00000000                            vcAR3 set op3
00000000                            vcAR4 set op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Amplitude Modulation
00000000                            smpsVcAmpMod macro op1,op2,op3,op4
00000000                            vcAM1 set op1
00000000                            vcAM2 set op2
00000000                            vcAM3 set op3
00000000                            vcAM4 set op4
00000000                            	endm
00000000                            
00000000                            ; Voices - First Decay Rate
00000000                            smpsVcDecayRate1 macro op1,op2,op3,op4
00000000                            vcD1R1 set op1
00000000                            vcD1R2 set op2
00000000                            vcD1R3 set op3
00000000                            vcD1R4 set op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Second Decay Rate
00000000                            smpsVcDecayRate2 macro op1,op2,op3,op4
00000000                            vcD2R1 set op1
00000000                            vcD2R2 set op2
00000000                            vcD2R3 set op3
00000000                            vcD2R4 set op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Decay Level
00000000                            smpsVcDecayLevel macro op1,op2,op3,op4
00000000                            vcDL1 set op1
00000000                            vcDL2 set op2
00000000                            vcDL3 set op3
00000000                            vcDL4 set op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Release Rate
00000000                            smpsVcReleaseRate macro op1,op2,op3,op4
00000000                            vcRR1 set op1
00000000                            vcRR2 set op2
00000000                            vcRR3 set op3
00000000                            vcRR4 set op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Total Level
00000000                            smpsVcTotalLevel macro op1,op2,op3,op4
00000000                            vcTL1 set op1
00000000                            vcTL2 set op2
00000000                            vcTL3 set op3
00000000                            vcTL4 set op4
00000000                            	dc.b	(vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
00000000                            	dc.b	(vcDT4<<4)+vcCF4, (vcDT3<<4)+vcCF3, (vcDT2<<4)+vcCF2, (vcDT1<<4)+vcCF1
00000000                            	dc.b	(vcRS4<<6)+vcAR4, (vcRS3<<6)+vcAR3, (vcRS2<<6)+vcAR2, (vcRS1<<6)+vcAR1
00000000                            	dc.b	(vcAM4<<5)+vcD1R4, (vcAM3<<5)+vcD1R3, (vcAM2<<5)+vcD1R2, (vcAM1<<5)+vcD1R1
00000000                            	dc.b	vcD2R4, vcD2R3, vcD2R2, vcD2R1
00000000                            	dc.b	(vcDL4<<4)+vcRR4, (vcDL3<<4)+vcRR3, (vcDL2<<4)+vcRR2, (vcDL1<<4)+vcRR1
00000000                            	;dc.b	vcTL4|vcTLMask4, vcTL3|vcTLMask3, vcTL2|vcTLMask2, vcTL1|vcTLMask1
00000000                            	if vcAlgorithm=7
00000000                            		dc.b	op4|$80
00000000                            	else
00000000                            		dc.b	op4
00000000                            	endif
00000000                            
00000000                            	if vcAlgorithm>=4
00000000                            		dc.b    op3|$80
00000000                            	else
00000000                            		dc.b    op3
00000000                            	endif
00000000                            
00000000                            	if vcAlgorithm>=5
00000000                            		dc.b    op2|$80
00000000                            	else
00000000                            		dc.b    op2
00000000                            	endif
00000000                            		dc.b    op1|$80
00000000                            	endm
00000000                            
00000000                            
00000000                            	include	"Constants.asm"
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; Constants
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000 =00006978                  Size_of_SegaPCM:		equ $6978
00000000                            
00000000                            ; VDP addressses
00000000 =00C00000                  vdp_data_port:		equ $C00000
00000000 =00C00004                  vdp_control_port:	equ $C00004
00000000 =00C00008                  vdp_counter:		equ $C00008
00000000                            
00000000 =00C00011                  psg_input:		equ $C00011
00000000                            
00000000                            ; Z80 addresses
00000000 =00A00000                  z80_ram:		equ $A00000	; start of Z80 RAM
00000000 =00A000EA                  z80_dac3_pitch:		equ $A000EA
00000000 =00A01FFD                  z80_dac_status:		equ $A01FFD
00000000 =00A01FFF                  z80_dac_sample:		equ $A01FFF
00000000 =00A02000                  z80_ram_end:		equ $A02000	; end of non-reserved Z80 RAM
00000000 =00A10001                  z80_version:		equ $A10001
00000000 =00A10002                  z80_port_1_data:	equ $A10002
00000000 =00A10008                  z80_port_1_control:	equ $A10008
00000000 =00A1000A                  z80_port_2_control:	equ $A1000A
00000000 =00A1000C                  z80_expansion_control:	equ $A1000C
00000000 =00A11100                  z80_bus_request:	equ $A11100
00000000 =00A11200                  z80_reset:		equ $A11200
00000000 =00A04000                  ym2612_a0:		equ $A04000
00000000 =00A04001                  ym2612_d0:		equ $A04001
00000000 =00A04002                  ym2612_a1:		equ $A04002
00000000 =00A04003                  ym2612_d1:		equ $A04003
00000000                            
00000000 =00A14000                  security_addr:		equ $A14000
00000000                            
00000000                            ; Sound driver constants
00000000 =00000000                  TrackPlaybackControl:	equ 0		; All tracks
00000000 =00000001                  TrackVoiceControl:	equ 1		; All tracks
00000000 =00000002                  TrackTempoDivider:	equ 2		; All tracks
00000000 =00000004                  TrackDataPointer:	equ 4		; All tracks (4 bytes)
00000000 =00000008                  TrackTranspose:		equ 8		; FM/PSG only (sometimes written to as a word, to include TrackVolume)
00000000 =00000009                  TrackVolume:		equ 9		; FM/PSG only
00000000 =0000000A                  TrackAMSFMSPan:		equ $A		; FM/DAC only
00000000 =0000000B                  TrackVoiceIndex:	equ $B		; FM/PSG only
00000000 =0000000C                  TrackVolEnvIndex:	equ $C		; PSG only
00000000 =0000000D                  TrackStackPointer:	equ $D		; All tracks
00000000 =0000000E                  TrackDurationTimeout:	equ $E		; All tracks
00000000 =0000000F                  TrackSavedDuration:	equ $F		; All tracks
00000000 =00000010                  TrackSavedDAC:		equ $10		; DAC only
00000000 =00000010                  TrackFreq:		equ $10		; FM/PSG only (2 bytes)
00000000 =00000012                  TrackNoteTimeout:	equ $12		; FM/PSG only
00000000 =00000013                  TrackNoteTimeoutMaster:equ $13		; FM/PSG only
00000000 =00000014                  TrackModulationPtr:	equ $14		; FM/PSG only (4 bytes)
00000000 =00000018                  TrackModulationWait:	equ $18		; FM/PSG only
00000000 =00000019                  TrackModulationSpeed:	equ $19		; FM/PSG only
00000000 =0000001A                  TrackModulationDelta:	equ $1A		; FM/PSG only
00000000 =0000001B                  TrackModulationSteps:	equ $1B		; FM/PSG only
00000000 =0000001C                  TrackModulationVal:	equ $1C		; FM/PSG only (2 bytes)
00000000 =0000001E                  TrackDetune:		equ $1E		; FM/PSG only
00000000 =0000001F                  TrackPSGNoise:		equ $1F		; PSG only
00000000 =0000001F                  TrackFeedbackAlgo:	equ $1F		; FM only
00000000 =00000020                  TrackVoicePtr:		equ $20		; FM SFX only (4 bytes)
00000000 =00000024                  TrackLoopCounters:	equ $24		; All tracks (multiple bytes)
00000000                            TrackGoSubStack:	equ TrackSz	; All tracks (multiple bytes. This constant won't get to be used because of an optimisation that just uses zTrackSz)
00000000                            
00000000 =00000030                  TrackSz:	equ $30
00000000                            
00000000                            ; VRAM data
00000000 =0000C000                  vram_fg:	equ $C000	; foreground namespace
00000000 =0000E000                  vram_bg:	equ $E000	; background namespace
00000000 =0000F000                  vram_sonic:	equ $F000	; Sonic graphics
00000000 =0000F800                  vram_sprites:	equ $F800	; sprite table
00000000 =0000FC00                  vram_hscroll:	equ $FC00	; horizontal scroll table
00000000                            
00000000                            ; Game modes
00000000                            id_Sega:	equ ptr_GM_Sega-GameModeArray	; $00
00000000                            id_Title:	equ ptr_GM_Title-GameModeArray	; $04
00000000                            id_Demo:	equ ptr_GM_Demo-GameModeArray	; $08
00000000                            id_Level:	equ ptr_GM_Level-GameModeArray	; $0C
00000000                            id_Special:	equ ptr_GM_Special-GameModeArray; $10
00000000                            id_Continue:	equ ptr_GM_Cont-GameModeArray	; $14
00000000                            id_Ending:	equ ptr_GM_Ending-GameModeArray	; $18
00000000                            id_Credits:	equ ptr_GM_Credits-GameModeArray; $1C
00000000                            
00000000                            ; Levels
00000000 =00000000                  id_GHZ:		equ 0
00000000 =00000001                  id_LZ:		equ 1
00000000 =00000002                  id_MZ:		equ 2
00000000 =00000003                  id_SLZ:		equ 3
00000000 =00000004                  id_SYZ:		equ 4
00000000 =00000005                  id_SBZ:		equ 5
00000000 =00000006                  id_EndZ:	equ 6
00000000 =00000007                  id_SS:		equ 7
00000000                            
00000000                            ; colors
00000000 =00000000                  cBlack:		equ $000		; color black
00000000 =00000EEE                  cWhite:		equ $EEE		; color white
00000000 =00000E00                  cBlue:		equ $E00		; color blue
00000000 =000000E0                  cGreen:		equ $0E0		; color green
00000000 =0000000E                  cRed:		equ $00E		; color red
00000000 =000000EE                  cYellow:	equ cGreen+cRed		; color yellow
00000000 =00000EE0                  cAqua:		equ cGreen+cBlue	; color aqua
00000000 =00000E0E                  cMagenta:	equ cBlue+cRed		; color magenta
00000000                            
00000000                            ; Joypad input
00000000 =00000080                  btnStart:	equ %10000000 ; Start button	($80)
00000000 =00000040                  btnA:		equ %01000000 ; A		($40)
00000000 =00000020                  btnC:		equ %00100000 ; C		($20)
00000000 =00000010                  btnB:		equ %00010000 ; B		($10)
00000000 =00000008                  btnR:		equ %00001000 ; Right		($08)
00000000 =00000004                  btnL:		equ %00000100 ; Left		($04)
00000000 =00000002                  btnDn:		equ %00000010 ; Down		($02)
00000000 =00000001                  btnUp:		equ %00000001 ; Up		($01)
00000000 =0000000F                  btnDir:		equ %00001111 ; Any direction	($0F)
00000000 =00000070                  btnABC:		equ %01110000 ; A, B or C	($70)
00000000 =00000007                  bitStart:	equ 7
00000000 =00000006                  bitA:		equ 6
00000000 =00000005                  bitC:		equ 5
00000000 =00000004                  bitB:		equ 4
00000000 =00000003                  bitR:		equ 3
00000000 =00000002                  bitL:		equ 2
00000000 =00000001                  bitDn:		equ 1
00000000 =00000000                  bitUp:		equ 0
00000000                            
00000000                            ; Object variables
00000000 =00000001                  obRender:	equ 1	; bitfield for x/y flip, display mode
00000000 =00000002                  obGfx:		equ 2	; palette line & VRAM setting (2 bytes)
00000000 =00000004                  obMap:		equ 4	; mappings address (4 bytes)
00000000 =00000008                  obX:		equ 8	; x-axis position (2-4 bytes)
00000000 =0000000A                  obScreenY:	equ $A	; y-axis position for screen-fixed items (2 bytes)
00000000 =0000000C                  obY:		equ $C	; y-axis position (2-4 bytes)
00000000 =00000010                  obVelX:		equ $10	; x-axis velocity (2 bytes)
00000000 =00000012                  obVelY:		equ $12	; y-axis velocity (2 bytes)
00000000 =00000020                  obInertia:	equ $20	; potential speed (2 bytes)
00000000 =00000016                  obHeight:	equ $16	; height/2
00000000 =00000017                  obWidth:	equ $17	; width/2
00000000 =00000018                  obPriority:	equ $18	; sprite stack priority -- 0 is front
00000000 =00000014                  obActWid:	equ $14	; action width
00000000 =0000001A                  obFrame:	equ $1A	; current frame displayed
00000000 =0000001B                  obAniFrame:	equ $1B	; current frame in animation script
00000000 =0000001C                  obAnim:		equ $1C	; current animation
00000000 =0000001D                  obNextAni:	equ $1D	; next animation
00000000 =0000001E                  obTimeFrame:	equ $1E	; time to next frame
00000000 =0000001F                  obDelayAni:	equ $1F	; time to delay animation
00000000 =00000020                  obColType:	equ $20	; collision response type
00000000 =00000021                  obColProp:	equ $21	; collision extra property
00000000 =00000022                  obStatus:	equ $22	; orientation or mode
00000000 =00000023                  obRespawnNo:	equ $23	; respawn list index number
00000000 =00000024                  obRoutine:	equ $24	; routine number
00000000 =00000025                  ob2ndRout:	equ $25	; secondary routine number
00000000 =00000026                  obAngle:	equ $26	; angle
00000000 =00000028                  obSubtype:	equ $28	; object subtype
00000000 =00000025                  obSolid:	equ ob2ndRout ; solid status flag
00000000                            
00000000                            ; Object variables used by Sonic
00000000 =00000030                  flashtime:	equ $30	; time between flashes after getting hit
00000000 =00000032                  invtime:	equ $32	; time left for invincibility
00000000 =00000034                  shoetime:	equ $34	; time left for speed shoes
00000000                            
00000000                            ; Object variables (Sonic 2 disassembly nomenclature)
00000000 =00000001                  render_flags:	equ 1	; bitfield for x/y flip, display mode
00000000 =00000002                  art_tile:	equ 2	; palette line & VRAM setting (2 bytes)
00000000 =00000004                  mappings:	equ 4	; mappings address (4 bytes)
00000000 =00000008                  x_pos:		equ 8	; x-axis position (2-4 bytes)
00000000 =0000000C                  y_pos:		equ $C	; y-axis position (2-4 bytes)
00000000 =00000010                  x_vel:		equ $10	; x-axis velocity (2 bytes)
00000000 =00000012                  y_vel:		equ $12	; y-axis velocity (2 bytes)
00000000 =00000016                  y_radius:	equ $16	; height/2
00000000 =00000017                  x_radius:	equ $17	; width/2
00000000 =00000018                  priority:	equ $18	; sprite stack priority -- 0 is front
00000000 =00000014                  width_pixels:	equ $14	; action width
00000000 =0000001A                  mapping_frame:	equ $1A	; current frame displayed
00000000 =0000001B                  anim_frame:	equ $1B	; current frame in animation script
00000000 =0000001C                  anim:		equ $1C	; current animation
00000000 =0000001D                  next_anim:	equ $1D	; next animation
00000000 =0000001E                  anim_frame_duration: equ $1E ; time to next frame
00000000 =00000020                  collision_flags: equ $20 ; collision response type
00000000 =00000021                  collision_property: equ $21 ; collision extra property
00000000 =00000022                  status:		equ $22	; orientation or mode
00000000 =00000023                  respawn_index:	equ $23	; respawn list index number
00000000 =00000024                  routine:	equ $24	; routine number
00000000 =00000025                  routine_secondary: equ $25 ; secondary routine number
00000000 =00000026                  angle:		equ $26	; angle
00000000 =00000028                  subtype:	equ $28	; object subtype
00000000                            
00000000                            ; Animation flags
00000000 =000000FF                  afEnd:		equ $FF	; return to beginning of animation
00000000 =000000FE                  afBack:		equ $FE	; go back (specified number) bytes
00000000 =000000FD                  afChange:	equ $FD	; run specified animation
00000000 =000000FC                  afRoutine:	equ $FC	; increment routine counter
00000000 =000000FB                  afReset:	equ $FB	; reset animation and 2nd object routine counter
00000000 =000000FA                  af2ndRoutine:	equ $FA	; increment 2nd routine counter
00000000                            
00000000                            ; Background music
00000000 =00000081                  bgm__First:	equ $81
00000000                            bgm_GHZ:	equ ((ptr_mus81-MusicIndex)/4)+bgm__First
00000000                            bgm_LZ:		equ ((ptr_mus82-MusicIndex)/4)+bgm__First
00000000                            bgm_MZ:		equ ((ptr_mus83-MusicIndex)/4)+bgm__First
00000000                            bgm_SLZ:	equ ((ptr_mus84-MusicIndex)/4)+bgm__First
00000000                            bgm_SYZ:	equ ((ptr_mus85-MusicIndex)/4)+bgm__First
00000000                            bgm_SBZ:	equ ((ptr_mus86-MusicIndex)/4)+bgm__First
00000000                            bgm_Invincible:	equ ((ptr_mus87-MusicIndex)/4)+bgm__First
00000000                            bgm_ExtraLife:	equ ((ptr_mus88-MusicIndex)/4)+bgm__First
00000000                            bgm_SS:		equ ((ptr_mus89-MusicIndex)/4)+bgm__First
00000000                            bgm_Title:	equ ((ptr_mus8A-MusicIndex)/4)+bgm__First
00000000                            bgm_Ending:	equ ((ptr_mus8B-MusicIndex)/4)+bgm__First
00000000                            bgm_Boss:	equ ((ptr_mus8C-MusicIndex)/4)+bgm__First
00000000                            bgm_FZ:		equ ((ptr_mus8D-MusicIndex)/4)+bgm__First
00000000                            bgm_GotThrough:	equ ((ptr_mus8E-MusicIndex)/4)+bgm__First
00000000                            bgm_GameOver:	equ ((ptr_mus8F-MusicIndex)/4)+bgm__First
00000000                            bgm_Continue:	equ ((ptr_mus90-MusicIndex)/4)+bgm__First
00000000                            bgm_Credits:	equ ((ptr_mus91-MusicIndex)/4)+bgm__First
00000000                            bgm_Drowning:	equ ((ptr_mus92-MusicIndex)/4)+bgm__First
00000000                            bgm_Emerald:	equ ((ptr_mus93-MusicIndex)/4)+bgm__First
00000000                            bgm_Pinch:		equ ((ptr_mus94-MusicIndex)/4)+bgm__First
00000000                            bgm_Seaside:	equ ((ptr_mus95-MusicIndex)/4)+bgm__First
00000000                            bgm_SBZ3:		equ ((ptr_mus96-MusicIndex)/4)+bgm__First
00000000                            bgm_Granada:	equ ((ptr_mus97-MusicIndex)/4)+bgm__First
00000000                            bgm_Options:	equ ((ptr_mus98-MusicIndex)/4)+bgm__First
00000000                            bgm_ToxicLandfill:	equ ((ptr_mus99-MusicIndex)/4)+bgm__First
00000000                            bgm__Last:	equ ((ptr_musend-MusicIndex-4)/4)+bgm__First
00000000                            
00000000                            ; Sound effects
00000000 =000000A0                  sfx__First:	equ $A0
00000000                            sfx_Jump:	equ ((ptr_sndA0-SoundIndex)/4)+sfx__First
00000000                            sfx_Lamppost:	equ ((ptr_sndA1-SoundIndex)/4)+sfx__First
00000000                            sfx_A2:		equ ((ptr_sndA2-SoundIndex)/4)+sfx__First
00000000                            sfx_Death:	equ ((ptr_sndA3-SoundIndex)/4)+sfx__First
00000000                            sfx_Skid:	equ ((ptr_sndA4-SoundIndex)/4)+sfx__First
00000000                            sfx_LRingBox:	equ ((ptr_sndA5-SoundIndex)/4)+sfx__First
00000000                            sfx_HitSpikes:	equ ((ptr_sndA6-SoundIndex)/4)+sfx__First
00000000                            sfx_Push:	equ ((ptr_sndA7-SoundIndex)/4)+sfx__First
00000000                            sfx_SSGoal:	equ ((ptr_sndA8-SoundIndex)/4)+sfx__First
00000000                            sfx_SSItem:	equ ((ptr_sndA9-SoundIndex)/4)+sfx__First
00000000                            sfx_Splash:	equ ((ptr_sndAA-SoundIndex)/4)+sfx__First
00000000                            sfx_FireShield:	equ ((ptr_FireShield-SoundIndex)/4)+sfx__First
00000000                            sfx_HitBoss:	equ ((ptr_sndAC-SoundIndex)/4)+sfx__First
00000000                            sfx_Bubble:	equ ((ptr_sndAD-SoundIndex)/4)+sfx__First
00000000                            sfx_Fireball:	equ ((ptr_sndAE-SoundIndex)/4)+sfx__First
00000000                            sfx_Shield:	equ ((ptr_sndAF-SoundIndex)/4)+sfx__First
00000000                            sfx_Saw:	equ ((ptr_sndB0-SoundIndex)/4)+sfx__First
00000000                            sfx_Electric:	equ ((ptr_sndB1-SoundIndex)/4)+sfx__First
00000000                            sfx_Drown:	equ ((ptr_sndB2-SoundIndex)/4)+sfx__First
00000000                            sfx_Flamethrower:equ ((ptr_sndB3-SoundIndex)/4)+sfx__First
00000000                            sfx_Bumper:	equ ((ptr_sndB4-SoundIndex)/4)+sfx__First
00000000                            sfx_Ring:	equ ((ptr_sndB5-SoundIndex)/4)+sfx__First
00000000                            sfx_SpikesMove:	equ ((ptr_sndB6-SoundIndex)/4)+sfx__First
00000000                            sfx_Rumbling:	equ ((ptr_sndB7-SoundIndex)/4)+sfx__First
00000000                            sfx_B8:		equ ((ptr_sndB8-SoundIndex)/4)+sfx__First
00000000                            sfx_Collapse:	equ ((ptr_sndB9-SoundIndex)/4)+sfx__First
00000000                            sfx_SSGlass:	equ ((ptr_sndBA-SoundIndex)/4)+sfx__First
00000000                            sfx_Door:	equ ((ptr_sndBB-SoundIndex)/4)+sfx__First
00000000                            sfx_Teleport:	equ ((ptr_sndBC-SoundIndex)/4)+sfx__First
00000000                            sfx_ChainStomp:	equ ((ptr_sndBD-SoundIndex)/4)+sfx__First
00000000                            sfx_Roll:	equ ((ptr_sndBE-SoundIndex)/4)+sfx__First
00000000                            sfx_Continue:	equ ((ptr_sndBF-SoundIndex)/4)+sfx__First
00000000                            sfx_Basaran:	equ ((ptr_sndC0-SoundIndex)/4)+sfx__First
00000000                            sfx_BreakItem:	equ ((ptr_sndC1-SoundIndex)/4)+sfx__First
00000000                            sfx_Warning:	equ ((ptr_sndC2-SoundIndex)/4)+sfx__First
00000000                            sfx_GiantRing:	equ ((ptr_sndC3-SoundIndex)/4)+sfx__First
00000000                            sfx_Bomb:	equ ((ptr_sndC4-SoundIndex)/4)+sfx__First
00000000                            sfx_Cash:	equ ((ptr_sndC5-SoundIndex)/4)+sfx__First
00000000                            sfx_RingLoss:	equ ((ptr_sndC6-SoundIndex)/4)+sfx__First
00000000                            sfx_ChainRise:	equ ((ptr_sndC7-SoundIndex)/4)+sfx__First
00000000                            sfx_Burning:	equ ((ptr_sndC8-SoundIndex)/4)+sfx__First
00000000                            sfx_Bonus:	equ ((ptr_sndC9-SoundIndex)/4)+sfx__First
00000000                            sfx_EnterSS:	equ ((ptr_sndCA-SoundIndex)/4)+sfx__First
00000000                            sfx_WallSmash:	equ ((ptr_sndCB-SoundIndex)/4)+sfx__First
00000000                            sfx_Spring:	equ ((ptr_sndCC-SoundIndex)/4)+sfx__First
00000000                            sfx_Switch:	equ ((ptr_sndCD-SoundIndex)/4)+sfx__First
00000000                            sfx_RingLeft:	equ ((ptr_sndCE-SoundIndex)/4)+sfx__First
00000000                            sfx_Signpost:	equ ((ptr_sndCF-SoundIndex)/4)+sfx__First
00000000                            sfx__Last:	equ ((ptr_sndend-SoundIndex-4)/4)+sfx__First
00000000                            
00000000                            ; Special sound effects
00000000 =000000D0                  spec__First:	equ $D0
00000000                            sfx_Waterfall:	equ ((ptr_sndD0-SpecSoundIndex)/4)+spec__First
00000000                            sfx_LightningShield:	equ ((ptr_sndD1-SpecSoundIndex)/4)+spec__First
00000000                            sfx_Peelout:	equ ((ptr_sndD2-SpecSoundIndex)/4)+spec__First
00000000                            sfx_PeeloutRelease:	equ ((ptr_sndD3-SpecSoundIndex)/4)+spec__First
00000000                            sfx_PeeloutStop:	equ ((ptr_sndD4-SpecSoundIndex)/4)+spec__First
00000000                            sfx_Spindash:	equ ((ptr_sndD5-SpecSoundIndex)/4)+spec__First
00000000                            spec__Last:	equ ((ptr_specend-SpecSoundIndex-4)/4)+spec__First
00000000                            
00000000 =000000E0                  flg__First:	equ $E0
00000000                            bgm_Fade:	equ ((ptr_flgE0-Sound_ExIndex)/4)+flg__First
00000000                            sfx_Sega:	equ ((ptr_flgE1-Sound_ExIndex)/4)+flg__First
00000000                            bgm_Speedup:	equ ((ptr_flgE2-Sound_ExIndex)/4)+flg__First
00000000                            bgm_Slowdown:	equ ((ptr_flgE3-Sound_ExIndex)/4)+flg__First
00000000                            bgm_Stop:	equ ((ptr_flgE4-Sound_ExIndex)/4)+flg__First
00000000                            flg__Last:	equ ((ptr_flgend-Sound_ExIndex-4)/4)+flg__First
00000000                            
00000000                            ; Sonic frame IDs
00000000 =00000000                  fr_Null:	equ 0
00000000 =00000001                  fr_Stand:	equ 1
00000000 =00000002                  fr_Blink:	equ 2
00000000 =00000003                  fr_Wait1:	equ 3
00000000 =00000004                  fr_Wait2:	equ 4
00000000 =00000005                  fr_Wait3:	equ 5
00000000 =00000006                  fr_Wait4:	equ 6
00000000 =00000007                  fr_Wait5:	equ 7
00000000 =00000008                  fr_Wait6:	equ 8
00000000 =00000009                  fr_Wait7:	equ 9
00000000 =0000000A                  fr_Wait8:	equ $A
00000000 =0000000B                  fr_Wait9:	equ $B
00000000 =0000000C                  fr_LookUp1:	equ $C
00000000 =0000000D                  fr_LookUp2:	equ $D
00000000 =0000000E                  fr_Walk11:	equ $E
00000000 =0000000F                  fr_Walk12:	equ $F
00000000 =00000010                  fr_Walk13:	equ $10
00000000 =00000011                  fr_Walk14:	equ $11
00000000 =00000012                  fr_Walk15:	equ $12
00000000 =00000013                  fr_Walk16:	equ $13
00000000 =00000014                  fr_Walk17:	equ $14
00000000 =00000015                  fr_Walk18:	equ $15
00000000 =00000016                  fr_Walk21:	equ $16
00000000 =00000017                  fr_Walk22:	equ $17
00000000 =00000018                  fr_Walk23:	equ $18
00000000 =00000019                  fr_Walk24:	equ $19
00000000 =0000001A                  fr_Walk25:	equ $1A
00000000 =0000001B                  fr_Walk26:	equ $1B
00000000 =0000001C                  fr_Walk27:	equ $1C
00000000 =0000001D                  fr_Walk28:	equ $1D
00000000 =0000001E                  fr_Walk31:	equ $1E
00000000 =0000001F                  fr_Walk32:	equ $1F
00000000 =00000020                  fr_Walk33:	equ $20
00000000 =00000021                  fr_Walk34:	equ $21
00000000 =00000022                  fr_Walk35:	equ $22
00000000 =00000023                  fr_Walk36:	equ $23
00000000 =00000024                  fr_Walk37:	equ $24
00000000 =00000025                  fr_Walk38:	equ $25
00000000 =00000026                  fr_Walk41:	equ $26
00000000 =00000027                  fr_Walk42:	equ $27
00000000 =00000028                  fr_Walk43:	equ $28
00000000 =00000029                  fr_Walk44:	equ $29
00000000 =0000002A                  fr_Walk45:	equ $2A
00000000 =0000002B                  fr_Walk46:	equ $2B
00000000 =0000002C                  fr_Walk47:	equ $2C
00000000 =0000002D                  fr_Walk48:	equ $2D
00000000 =0000002E                  fr_Run11:	equ $2E
00000000 =0000002F                  fr_Run12:	equ $2F
00000000 =00000030                  fr_Run13:	equ $30
00000000 =00000031                  fr_Run14:	equ $31
00000000 =00000032                  fr_Run15:	equ $32
00000000 =00000033                  fr_Run16:	equ $33
00000000 =00000034                  fr_Run17:	equ $34
00000000 =00000035                  fr_Run18:	equ $35
00000000 =00000036                  fr_Run21:	equ $36
00000000 =00000037                  fr_Run22:	equ $37
00000000 =00000038                  fr_Run23:	equ $38
00000000 =00000039                  fr_Run24:	equ $39
00000000 =0000003A                  fr_Run25:	equ $3A
00000000 =0000003B                  fr_Run26:	equ $3B
00000000 =0000003C                  fr_Run27:	equ $3C
00000000 =0000003D                  fr_Run28:	equ $3D
00000000 =0000003E                  fr_Run31:	equ $3E
00000000 =0000003F                  fr_Run32:	equ $3F
00000000 =00000040                  fr_Run33:	equ $40
00000000 =00000041                  fr_Run34:	equ $41
00000000 =00000042                  fr_Run35:	equ $42
00000000 =00000043                  fr_Run36:	equ $43
00000000 =00000044                  fr_Run37:	equ $44
00000000 =00000045                  fr_Run38:	equ $45
00000000 =00000046                  fr_Run41:	equ $46
00000000 =00000047                  fr_Run42:	equ $47
00000000 =00000048                  fr_Run43:	equ $48
00000000 =00000049                  fr_Run44:	equ $49
00000000 =0000004A                  fr_Run45:	equ $4A
00000000 =0000004B                  fr_Run46:	equ $4B
00000000 =0000004C                  fr_Run47:	equ $4C
00000000 =0000004D                  fr_Run48:	equ $4D
00000000 =0000004E                  fr_peelout11:	equ $4E
00000000 =0000004F                  fr_peelout12:	equ $4F
00000000 =00000050                  fr_peelout13:	equ $50
00000000 =00000051                  fr_peelout14:	equ $51
00000000 =00000052                  fr_peelout21:	equ $52
00000000 =00000053                  fr_peelout22:	equ $53
00000000 =00000054                  fr_peelout23:	equ $54
00000000 =00000055                  fr_peelout24:	equ $55
00000000 =00000056                  fr_peelout31:	equ $56
00000000 =00000057                  fr_peelout32:	equ $57
00000000 =00000058                  fr_peelout33:	equ $58
00000000 =00000059                  fr_peelout34:	equ $59
00000000 =0000005A                  fr_peelout41:	equ $5A
00000000 =0000005B                  fr_peelout42:	equ $5B
00000000 =0000005C                  fr_peelout43:	equ $5C
00000000 =0000005D                  fr_peelout44:	equ $5D
00000000 =0000005E                  fr_Roll1:	equ $5E
00000000 =00000060                  fr_Roll2:	equ $60
00000000 =00000062                  fr_Roll3:	equ $62
00000000 =00000064                  fr_Roll4:	equ $64
00000000 =00000066                  fr_Roll5:	equ $66
00000000 =0000005F                  fr_Roll6:	equ $5F
00000000 =00000061                  fr_Roll7:	equ $61
00000000 =00000063                  fr_Roll8:	equ $63
00000000 =00000065                  fr_Roll9:	equ $65
00000000 =00000067                  fr_Warp1:	equ $67
00000000 =00000068                  fr_Warp2:	equ $68
00000000 =00000069                  fr_Warp3:	equ $69
00000000 =0000006A                  fr_Warp4:	equ $6A
00000000 =0000006B                  fr_Stop1:	equ $6B
00000000 =0000006C                  fr_Stop2:	equ $6C
00000000 =0000006D                  fr_Stop3:	equ $6D
00000000 =0000006E                  fr_Stop4:	equ $6E
00000000 =0000006F                  fr_Duck3:	equ $6F
00000000 =00000070                  fr_Duck2:	equ $70
00000000 =00000071                  fr_Duck:	equ $71
00000000 =00000072                  fr_Balance1:	equ $72
00000000 =00000073                  fr_Balance2:	equ $73
00000000 =00000074                  fr_Balance3:	equ $74
00000000 =00000075                  fr_Balance4:	equ $75
00000000 =00000076                  fr_Balance5:	equ $76
00000000 =00000077                  fr_Blank:		equ $77
00000000 =00000078                  fr_VHang1:		equ $78
00000000 =00000079                  fr_VHang2:		equ $79
00000000 =0000007A                  fr_VHang3:		equ $7A
00000000                            
00000000 =0000007C                  fr_Float1:	equ $7C
00000000 =0000007E                  fr_Float2:	equ $7E
00000000 =00000081                  fr_Float3:	equ $81
00000000 =00000082                  fr_Float4:	equ $82
00000000 =00000080                  fr_Float5:	equ $80
00000000 =0000007B                  fr_Float6:	equ $7B
00000000 =0000007D                  fr_float7:	equ $7D
00000000 =0000007F                  fr_float8:	equ $7F
00000000 =00000083                  fr_Spring:	equ $83
00000000 =00000084                  fr_Spring2:	equ $84
00000000 =00000085                  fr_Hang1:	equ $85
00000000 =00000086                  fr_Hang2:	equ $86
00000000 =00000087                  fr_Leap1:	equ $87
00000000 =00000088                  fr_Leap2:	equ $88
00000000 =00000089                  fr_Push1:	equ $89
00000000 =0000008A                  fr_Push2:	equ $8A
00000000 =0000008B                  fr_Push3:	equ $8B
00000000 =0000008C                  fr_Push4:	equ $8C
00000000 =0000008D                  fr_Push5:	equ $8D
00000000 =0000008E                  fr_Push6:	equ $8E
00000000 =0000008F                  fr_Push7:	equ $8F
00000000 =00000090                  fr_Push8:	equ $90
00000000 =00000091                  fr_Surf:	equ $91
00000000 =00000092                  fr_Burnt:	equ $92
00000000 =00000093                  fr_Drown:	equ $93
00000000 =00000094                  fr_Death:	equ $94
00000000 =00000095                  fr_GetAir:	equ $95
00000000 =00000096                  fr_Injury:	equ $96
00000000 =00000097                  fr_WaterSlide:	equ $97
00000000 =00000098                  fr_skele1:	equ $98
00000000 =00000099                  fr_skele2:	equ $99
00000000 =0000009A                  fr_skele3:	equ $9A
00000000 =0000009B                  fr_Spindash1	equ $9B
00000000 =0000009C                  fr_Spindash2	equ $9C
00000000 =0000009D                  fr_Spindash3	equ $9D
00000000 =0000009E                  fr_Spindash4	equ $9E
00000000 =0000009F                  fr_Spindash5	equ $9F
00000000 =000000A0                  fr_Spindash6	equ $A0
00000000 =000000A0                  fr_Spindash6	equ $A0
00000000                            	include	"Variables.asm"
00000000                            ; Variables (v) and Flags (f)
00000000                            
00000000 =FFFFFC00                  v_regbuffer:	equ $FFFFFC00	; stores registers d0-a7 during an error event ($40 bytes)
00000000 =FFFFFC40                  v_spbuffer:	equ $FFFFFC40	; stores most recent sp address (4 bytes)
00000000 =FFFFFC44                  v_errortype:	equ $FFFFFC44	; error type
00000000                            
00000000 =00FF0000                  v_256x256:	equ   $FF0000	; 256x256 tile mappings ($A400 bytes)
00000000 =FFFFA400                  v_lvllayout:	equ $FFFFA400	; level and background layouts ($400 bytes)
00000000 =FFFFA800                  v_bgscroll_buffer:	equ	$FFFFA800	; background scroll buffer ($200 bytes)
00000000 =FFFFAA00                  v_ngfx_buffer:	equ $FFFFAA00	; Nemesis graphics decompression buffer ($200 bytes)
00000000 =FFFFAC00                  v_spritequeue:	equ $FFFFAC00	; sprite display queue, in order of priority ($400 bytes)
00000000 =FFFFB000                  v_16x16:		equ $FFFFB000	; 16x16 tile mappings
00000000 =FFFFC800                  VDP_Command_Buffer:	equ $FFFFC800
00000000                            
00000000 =FFFFC8FC                  VDP_Command_Buffer_Slot:equ VDP_Command_Buffer+7*$12*2
00000000 =FFFFC800                  v_sgfx_buffer:	equ $FFFFC800	; buffered Sonic graphics ($17 cells) ($2E0 bytes)
00000000 =FFFFCB00                  v_tracksonic:	equ $FFFFCB00	; position tracking data for Sonic ($100 bytes)
00000000 =FFFFCC00                  v_hscrolltablebuffer:	equ $FFFFCC00 ; scrolling table data (actually $380 bytes, but $400 is reserved for it)
00000000 =FFFFD000                  v_objspace:	equ $FFFFD000	; object variable space ($40 bytes per object) ($2000 bytes)
00000000 =FFFFD000                  v_player:	equ v_objspace	; object variable space for Sonic ($40 bytes)
00000000 =FFFFD800                  v_lvlobjspace:	equ $FFFFD800	; level object variable space ($1800 bytes)
00000000 =FFFFF015                  v_palmuscounter:	equ $FFFFF015
00000000 =FFFFF000                  v_snddriver_ram:	equ $FFFFF000 ; start of RAM for the sound driver data ($5C0 bytes)
00000000                            
00000000                            ; =================================================================================
00000000                            ; From here on, until otherwise stated, all offsets are relative to v_snddriver_ram
00000000                            ; =================================================================================
00000000 =00000000                  v_startofvariables:	equ $000
00000000 =00000000                  v_sndprio:		equ $000	; sound priority (priority of new music/SFX must be higher or equal to this value or it won't play; bit 7 of priority being set prevents this value from changing)
00000000 =00000001                  v_main_tempo_timeout:	equ $001	; Counts down to zero; when zero, resets to next value and delays song by 1 frame
00000000 =00000002                  v_main_tempo:		equ $002	; Used for music only
00000000 =00000003                  f_pausemusic:		equ $003	; flag set to stop music when paused
00000000 =00000004                  v_fadeout_counter:	equ $004
00000000                            
00000000 =00000006                  v_fadeout_delay:	equ $006
00000000 =00000007                  v_communication_byte:	equ $007	; used in Ristar to sync with a boss' attacks; unused here
00000000 =00000008                  f_updating_dac:		equ $008	; $80 if updating DAC, $00 otherwise
00000000 =00000009                  v_sound_id:		equ $009	; sound or music copied from below
00000000 =0000000A                  v_soundqueue0:		equ $00A	; sound or music to play
00000000 =0000000B                  v_soundqueue1:		equ $00B	; special sound to play
00000000 =0000000C                  v_soundqueue2:		equ $00C	; unused sound to play
00000000                            
00000000 =0000000E                  f_voice_selector:	equ $00E	; $00 = use music voice pointer; $40 = use special voice pointer; $80 = use track voice pointer
00000000                            
00000000 =00000018                  v_voice_ptr:		equ $018	; voice data pointer (4 bytes)
00000000                            
00000000 =00000020                  v_special_voice_ptr:	equ $020	; voice data pointer for special SFX ($D0-$DF) (4 bytes)
00000000                            
00000000 =00000024                  f_fadein_flag:		equ $024	; Flag for fade in
00000000 =00000025                  v_fadein_delay:		equ $025
00000000 =00000026                  v_fadein_counter:	equ $026	; Timer for fade in/out
00000000 =00000027                  f_1up_playing:		equ $027	; flag indicating 1-up song is playing
00000000 =00000028                  v_tempo_mod:		equ $028	; music - tempo modifier
00000000 =00000029                  v_speeduptempo:		equ $029	; music - tempo modifier with speed shoes
00000000 =0000002A                  f_speedup:		equ $02A	; flag indicating whether speed shoes tempo is on ($80) or off ($00)
00000000 =0000002B                  v_ring_speaker:		equ $02B	; which speaker the "ring" sound is played in (00 = right; 01 = left)
00000000 =0000002C                  f_push_playing:		equ $02C	; if set, prevents further push sounds from playing
00000000                            
00000000 =00000040                  v_music_track_ram:	equ $040	; Start of music RAM
00000000                            
00000000 =00000040                  v_music_fmdac_tracks:	equ v_music_track_ram+TrackSz*0
00000000 =00000040                  v_music_dac_track:	equ v_music_fmdac_tracks+TrackSz*0
00000000 =00000070                  v_music_fm_tracks:	equ v_music_fmdac_tracks+TrackSz*1
00000000 =00000070                  v_music_fm1_track:	equ v_music_fm_tracks+TrackSz*0
00000000 =000000A0                  v_music_fm2_track:	equ v_music_fm_tracks+TrackSz*1
00000000 =000000D0                  v_music_fm3_track:	equ v_music_fm_tracks+TrackSz*2
00000000 =00000100                  v_music_fm4_track:	equ v_music_fm_tracks+TrackSz*3
00000000 =00000130                  v_music_fm5_track:	equ v_music_fm_tracks+TrackSz*4
00000000 =00000160                  v_music_fm6_track:	equ v_music_fm_tracks+TrackSz*5
00000000 =00000190                  v_music_fm_tracks_end:	equ v_music_fm_tracks+TrackSz*6
00000000 =00000190                  v_music_fmdac_tracks_end:	equ v_music_fm_tracks_end
00000000 =00000190                  v_music_psg_tracks:	equ v_music_fmdac_tracks_end
00000000 =00000190                  v_music_psg1_track:	equ v_music_psg_tracks+TrackSz*0
00000000 =000001C0                  v_music_psg2_track:	equ v_music_psg_tracks+TrackSz*1
00000000 =000001F0                  v_music_psg3_track:	equ v_music_psg_tracks+TrackSz*2
00000000 =00000220                  v_music_psg_tracks_end:	equ v_music_psg_tracks+TrackSz*3
00000000 =00000220                  v_music_track_ram_end:	equ v_music_psg_tracks_end
00000000                            
00000000 =00000220                  v_sfx_track_ram:	equ v_music_track_ram_end	; Start of SFX RAM, straight after the end of music RAM
00000000                            
00000000 =00000220                  v_sfx_fm_tracks:	equ v_sfx_track_ram+TrackSz*0
00000000 =00000220                  v_sfx_fm3_track:	equ v_sfx_fm_tracks+TrackSz*0
00000000 =00000250                  v_sfx_fm4_track:	equ v_sfx_fm_tracks+TrackSz*1
00000000 =00000280                  v_sfx_fm5_track:	equ v_sfx_fm_tracks+TrackSz*2
00000000 =000002B0                  v_sfx_fm_tracks_end:	equ v_sfx_fm_tracks+TrackSz*3
00000000 =000002B0                  v_sfx_psg_tracks:	equ v_sfx_fm_tracks_end
00000000 =000002B0                  v_sfx_psg1_track:	equ v_sfx_psg_tracks+TrackSz*0
00000000 =000002E0                  v_sfx_psg2_track:	equ v_sfx_psg_tracks+TrackSz*1
00000000 =00000310                  v_sfx_psg3_track:	equ v_sfx_psg_tracks+TrackSz*2
00000000 =00000340                  v_sfx_psg_tracks_end:	equ v_sfx_psg_tracks+TrackSz*3
00000000 =00000340                  v_sfx_track_ram_end:	equ v_sfx_psg_tracks_end
00000000                            
00000000 =00000340                  v_spcsfx_track_ram:	equ v_sfx_track_ram_end	; Start of special SFX RAM, straight after the end of SFX RAM
00000000                            
00000000 =00000340                  v_spcsfx_fm4_track:	equ v_spcsfx_track_ram+TrackSz*0
00000000 =00000370                  v_spcsfx_psg3_track:	equ v_spcsfx_track_ram+TrackSz*1
00000000 =000003A0                  v_spcsfx_track_ram_end:	equ v_spcsfx_track_ram+TrackSz*2
00000000                            
00000000 =000003A0                  v_1up_ram_copy:		equ v_spcsfx_track_ram_end
00000000                            
00000000                            ; =================================================================================
00000000                            ; From here on, no longer relative to sound driver RAM
00000000                            ; =================================================================================
00000000                            
00000000 =FFFFF600                  v_gamemode:	equ $FFFFF600	; game mode (00=Sega; 04=Title; 08=Demo; 0C=Level; 10=SS; 14=Cont; 18=End; 1C=Credit; +8C=PreLevel)
00000000 =FFFFF602                  v_jpadhold2:	equ $FFFFF602	; joypad input - held, duplicate
00000000 =FFFFF603                  v_jpadpress2:	equ $FFFFF603	; joypad input - pressed, duplicate
00000000 =FFFFF604                  v_jpadhold1:	equ $FFFFF604	; joypad input - held
00000000 =FFFFF605                  v_jpadpress1:	equ $FFFFF605	; joypad input - pressed
00000000                            
00000000 =FFFFF60C                  v_vdp_buffer1:	equ $FFFFF60C	; VDP instruction buffer (2 bytes)
00000000                            
00000000 =FFFFF614                  v_demolength:	equ $FFFFF614	; the length of a demo in frames (2 bytes)
00000000 =FFFFF616                  v_scrposy_dup:	equ $FFFFF616	; screen position y (duplicate) (2 bytes)
00000000 =FFFFF618                  v_bgscrposy_dup:	equ $FFFFF618	; background screen position y (duplicate) (2 bytes)
00000000 =FFFFF61A                  v_scrposx_dup:	equ $FFFFF61A	; screen position x (duplicate) (2 bytes)
00000000 =FFFFF61C                  v_bgscreenposx_dup_unused:	equ $FFFFF61C	; background screen position x (duplicate) (2 bytes)
00000000 =FFFFF61E                  v_bg3screenposy_dup_unused:	equ $FFFFF61E	; (2 bytes)
00000000 =FFFFF620                  v_bg3screenposx_dup_unused:	equ $FFFFF620	; (2 bytes)
00000000                            
00000000 =FFFFF624                  v_hbla_hreg:	equ $FFFFF624	; VDP H.interrupt register buffer (8Axx) (2 bytes)
00000000 =FFFFF625                  v_hbla_line:	equ $FFFFF625	; screen line where water starts and palette is changed by HBlank
00000000 =FFFFF626                  v_pfade_start:	equ $FFFFF626	; palette fading - start position in bytes
00000000 =FFFFF627                  v_pfade_size:	equ $FFFFF627	; palette fading - number of colors
00000000 =FFFFF62A                  v_vbla_routine:	equ $FFFFF62A	; VBlank - routine counter
00000000 =FFFFF62C                  v_spritecount:	equ $FFFFF62C	; number of sprites on-screen
00000000 =FFFFF632                  v_pcyc_num:	equ $FFFFF632	; palette cycling - current reference number (2 bytes)
00000000 =FFFFF634                  v_pcyc_time:	equ $FFFFF634	; palette cycling - time until the next change (2 bytes)
00000000 =FFFFF636                  v_random:	equ $FFFFF636	; pseudo random number buffer (4 bytes)
00000000 =FFFFF63A                  f_pause:		equ $FFFFF63A	; flag set to pause the game (2 bytes)
00000000 =FFFFF640                  v_vdp_buffer2:	equ $FFFFF640	; VDP instruction buffer (2 bytes)
00000000 =FFFFF644                  f_hbla_pal:	equ $FFFFF644	; flag set to change palette during HBlank (0000 = no; 0001 = change) (2 bytes)
00000000 =FFFFF646                  v_waterpos1:	equ $FFFFF646	; water height, actual (2 bytes)
00000000 =FFFFF648                  v_waterpos2:	equ $FFFFF648	; water height, ignoring sway (2 bytes)
00000000 =FFFFF64A                  v_waterpos3:	equ $FFFFF64A	; water height, next target (2 bytes)
00000000 =FFFFF64C                  f_water:		equ $FFFFF64C	; flag set for water
00000000 =FFFFF64D                  v_wtr_routine:	equ $FFFFF64D	; water event - routine counter
00000000 =FFFFF64E                  f_wtr_state:	equ $FFFFF64E	; water palette state when water is above/below the screen (00 = partly/all dry; 01 = all underwater)
00000000                            
00000000 =FFFFF650                  v_pal_buffer:	equ $FFFFF650	; palette data buffer (used for palette cycling) ($30 bytes)
00000000 =FFFFF680                  v_plc_buffer:	equ $FFFFF680	; pattern load cues buffer (maximum $10 PLCs) ($60 bytes)
00000000 =FFFFF6E0                  v_ptrnemcode:	equ $FFFFF6E0	; pointer for nemesis decompression code ($1502 or $150C) (4 bytes)
00000000                            
00000000 =FFFFF6F8                  f_plc_execute:	equ $FFFFF6F8	; flag set for pattern load cue execution (2 bytes)
00000000                            
00000000 =FFFFF700                  v_screenposx:	equ $FFFFF700	; screen position x (2 bytes)
00000000 =FFFFF704                  v_screenposy:	equ $FFFFF704	; screen position y (2 bytes)
00000000 =FFFFF708                  v_bgscreenposx:	equ $FFFFF708	; background screen position x (2 bytes)
00000000 =FFFFF70C                  v_bgscreenposy:	equ $FFFFF70C	; background screen position y (2 bytes)
00000000 =FFFFF710                  v_bg2screenposx:	equ $FFFFF710	; 2 bytes
00000000 =FFFFF714                  v_bg2screenposy:	equ $FFFFF714	; 2 bytes
00000000 =FFFFF718                  v_bg3screenposx:	equ $FFFFF718	; 2 bytes
00000000 =FFFFF71C                  v_bg3screenposy:	equ $FFFFF71C	; 2 bytes
00000000                            
00000000 =FFFFF720                  v_limitleft1:	equ $FFFFF720	; left level boundary (2 bytes)
00000000 =FFFFF722                  v_limitright1:	equ $FFFFF722	; right level boundary (2 bytes)
00000000 =FFFFF724                  v_limittop1:	equ $FFFFF724	; top level boundary (2 bytes)
00000000 =FFFFF726                  v_limitbtm1:	equ $FFFFF726	; bottom level boundary (2 bytes)
00000000 =FFFFF728                  v_limitleft2:	equ $FFFFF728	; left level boundary (2 bytes)
00000000 =FFFFF72A                  v_limitright2:	equ $FFFFF72A	; right level boundary (2 bytes)
00000000 =FFFFF72C                  v_limittop2:	equ $FFFFF72C	; top level boundary (2 bytes)
00000000 =FFFFF72E                  v_limitbtm2:	equ $FFFFF72E	; bottom level boundary (2 bytes)
00000000                            
00000000 =FFFFF732                  v_limitleft3:	equ $FFFFF732	; left level boundary, at the end of an act (2 bytes)
00000000                            
00000000 =FFFFF73A                  v_scrshiftx:	equ $FFFFF73A	; x-screen shift (new - last) * $100
00000000 =FFFFF73C                  v_scrshifty:	equ $FFFFF73C	; y-screen shift (new - last) * $100
00000000                            
00000000 =FFFFF73E                  v_lookshift:	equ $FFFFF73E	; screen shift when Sonic looks up/down (2 bytes)
00000000 =FFFFF742                  v_dle_routine:	equ $FFFFF742	; dynamic level event - routine counter
00000000 =FFFFF744                  f_nobgscroll:	equ $FFFFF744	; flag set to cancel background scrolling
00000000                            
00000000 =FFFFF74A                  v_fg_xblock:	equ	$FFFFF74A	; foreground x-block parity (for redraw)
00000000 =FFFFF74B                  v_fg_yblock:	equ	$FFFFF74B	; foreground y-block parity (for redraw)
00000000 =FFFFF74C                  v_bg1_xblock:	equ	$FFFFF74C	; background x-block parity (for redraw)
00000000 =FFFFF74D                  v_bg1_yblock:	equ	$FFFFF74D	; background y-block parity (for redraw)
00000000 =FFFFF74E                  v_bg2_xblock:	equ	$FFFFF74E	; secondary background x-block parity (for redraw)
00000000 =FFFFF74F                  v_bg2_yblock:	equ	$FFFFF74F	; secondary background y-block parity (unused)
00000000 =FFFFF750                  v_bg3_xblock:	equ	$FFFFF750	; teritary background x-block parity (for redraw)
00000000 =FFFFF751                  v_bg3_yblock:	equ	$FFFFF751	; teritary background y-block parity (unused)
00000000                            
00000000 =FFFFF754                  v_fg_scroll_flags:	equ $FFFFF754	; screen redraw flags for foreground
00000000 =FFFFF756                  v_bg1_scroll_flags:	equ $FFFFF756	; screen redraw flags for background 1
00000000 =FFFFF758                  v_bg2_scroll_flags:	equ $FFFFF758	; screen redraw flags for background 2
00000000 =FFFFF75A                  v_bg3_scroll_flags:	equ $FFFFF75A	; screen redraw flags for background 3
00000000 =FFFFF75C                  f_bgscrollvert:	equ $FFFFF75C	; flag for vertical background scrolling
00000000 =FFFFF760                  v_sonspeedmax:	equ $FFFFF760	; Sonic's maximum speed (2 bytes)
00000000 =FFFFF762                  v_sonspeedacc:	equ $FFFFF762	; Sonic's acceleration (2 bytes)
00000000 =FFFFF764                  v_sonspeeddec:	equ $FFFFF764	; Sonic's deceleration (2 bytes)
00000000 =FFFFF766                  v_sonframenum:	equ $FFFFF766	; frame to display for Sonic
00000000 =FFFFF767                  f_sonframechg:	equ $FFFFF767	; flag set to update Sonic's sprite frame
00000000 =FFFFF768                  v_anglebuffer:	equ $FFFFF768	; angle of collision block that Sonic or object is standing on
00000000                            
00000000 =FFFFF76C                  v_opl_routine:	equ $FFFFF76C	; ObjPosLoad - routine counter
00000000 =FFFFF76E                  v_opl_screen:	equ $FFFFF76E	; ObjPosLoad - screen variable
00000000 =FFFFF770                  v_opl_data:	equ $FFFFF770	; ObjPosLoad - data buffer ($10 bytes)
00000000                            
00000000 =FFFFF780                  v_ssangle:	equ $FFFFF780	; Special Stage angle (2 bytes)
00000000 =FFFFF782                  v_ssrotate:	equ $FFFFF782	; Special Stage rotation speed (2 bytes)
00000000 =FFFFF790                  v_btnpushtime1:	equ $FFFFF790	; button push duration - in level (2 bytes)
00000000 =FFFFF792                  v_btnpushtime2:	equ $FFFFF792	; button push duration - in demo (2 bytes)
00000000 =FFFFF794                  v_palchgspeed:	equ $FFFFF794	; palette fade/transition speed (0 is fastest) (2 bytes)
00000000 =FFFFF796                  v_collindex:	equ $FFFFF796	; ROM address for collision index of current level (4 bytes)
00000000 =FFFFF79A                  v_palss_num:	equ $FFFFF79A	; palette cycling in Special Stage - reference number (2 bytes)
00000000 =FFFFF79C                  v_palss_time:	equ $FFFFF79C	; palette cycling in Special Stage - time until next change (2 bytes)
00000000                            
00000000 =FFFFF7A0                  v_camera_pan:	equ $FFFFF7A0    ; Extended Camera - how far the camera/view is panned to the left or right of Sonic (2 bytes)
00000000                            
00000000 =FFFFF7A4                  v_obj31ypos:	equ $FFFFF7A4	; y-position of object 31 (MZ stomper) (2 bytes)
00000000 =FFFFF7A7                  v_bossstatus:	equ $FFFFF7A7	; status of boss and prison capsule (01 = boss defeated; 02 = prison opened)
00000000 =FFFFF7A8                  v_trackpos:	equ $FFFFF7A8	; position tracking reference number (2 bytes)
00000000 =FFFFF7A9                  v_trackbyte:	equ $FFFFF7A9	; low byte for position tracking
00000000 =FFFFF7AA                  f_lockscreen:	equ $FFFFF7AA	; flag set to lock screen during bosses
00000000 =FFFFF7AC                  v_256loop1:	equ $FFFFF7AC	; 256x256 level tile which contains a loop (GHZ/SLZ)
00000000 =FFFFF7AD                  v_256loop2:	equ $FFFFF7AD	; 256x256 level tile which contains a loop (GHZ/SLZ)
00000000 =FFFFF7AE                  v_256roll1:	equ $FFFFF7AE	; 256x256 level tile which contains a roll tunnel (GHZ)
00000000 =FFFFF7AF                  v_256roll2:	equ $FFFFF7AF	; 256x256 level tile which contains a roll tunnel (GHZ)
00000000 =FFFFF7B0                  v_lani0_frame:	equ $FFFFF7B0	; level graphics animation 0 - current frame
00000000 =FFFFF7B1                  v_lani0_time:	equ $FFFFF7B1	; level graphics animation 0 - time until next frame
00000000 =FFFFF7B2                  v_lani1_frame:	equ $FFFFF7B2	; level graphics animation 1 - current frame
00000000 =FFFFF7B3                  v_lani1_time:	equ $FFFFF7B3	; level graphics animation 1 - time until next frame
00000000 =FFFFF7B4                  v_lani2_frame:	equ $FFFFF7B4	; level graphics animation 2 - current frame
00000000 =FFFFF7B5                  v_lani2_time:	equ $FFFFF7B5	; level graphics animation 2 - time until next frame
00000000 =FFFFF7B6                  v_lani3_frame:	equ $FFFFF7B6	; level graphics animation 3 - current frame
00000000 =FFFFF7B7                  v_lani3_time:	equ $FFFFF7B7	; level graphics animation 3 - time until next frame
00000000 =FFFFF7B8                  v_lani4_frame:	equ $FFFFF7B8	; level graphics animation 4 - current frame
00000000 =FFFFF7B9                  v_lani4_time:	equ $FFFFF7B9	; level graphics animation 4 - time until next frame
00000000 =FFFFF7BA                  v_lani5_frame:	equ $FFFFF7BA	; level graphics animation 5 - current frame
00000000 =FFFFF7BB                  v_lani5_time:	equ $FFFFF7BB	; level graphics animation 5 - time until next frame
00000000 =FFFFF7BE                  v_gfxbigring:	equ $FFFFF7BE	; settings for giant ring graphics loading (2 bytes)
00000000 =FFFFF7C0                  f_conveyrev:	equ $FFFFF7C0	; flag set to reverse conveyor belts in LZ/SBZ
00000000 =FFFFF7C1                  v_obj63:		equ $FFFFF7C1	; object 63 (LZ/SBZ platforms) variables (6 bytes)
00000000 =FFFFF7C7                  f_wtunnelmode:	equ $FFFFF7C7	; LZ water tunnel mode
00000000 =FFFFF7C8                  f_lockmulti:	equ $FFFFF7C8	; flag set to lock controls, lock Sonic's position & animation
00000000 =FFFFF7C9                  f_wtunnelallow:	equ $FFFFF7C9	; LZ water tunnels (00 = enabled; 01 = disabled)
00000000 =FFFFF7CA                  f_jumponly:	equ $FFFFF7CA	; flag set to lock controls apart from jumping
00000000 =FFFFF7CB                  v_obj6B:		equ $FFFFF7CB	; object 6B (SBZ stomper) variable
00000000 =FFFFF7CC                  f_lockctrl:	equ $FFFFF7CC	; flag set to lock controls during ending sequence
00000000 =FFFFF7CD                  f_bigring:	equ $FFFFF7CD	; flag set when Sonic collects the giant ring
00000000 =FFFFF7D0                  v_itembonus:	equ $FFFFF7D0	; item bonus from broken enemies, blocks etc. (2 bytes)
00000000 =FFFFF7D2                  v_timebonus:	equ $FFFFF7D2	; time bonus at the end of an act (2 bytes)
00000000 =FFFFF7D4                  v_ringbonus:	equ $FFFFF7D4	; ring bonus at the end of an act (2 bytes)
00000000 =FFFFF7D6                  f_endactbonus:	equ $FFFFF7D6	; time/ring bonus update flag at the end of an act
00000000 =FFFFF7D7                  v_sonicend:	equ $FFFFF7D7	; routine counter for Sonic in the ending sequence
00000000 =FFFFF7D8                  v_lz_deform:	equ	$FFFFF7D8	; LZ deformtaion offset, in units of $80 (2 bytes)
00000000 =FFFFF7E0                  f_switch:	equ $FFFFF7E0	; flags set when Sonic stands on a switch ($10 bytes)
00000000 =FFFFF7F0                  v_scroll_block_1_size:	equ $FFFFF7F0	; (2 bytes)
00000000 =FFFFF7F2                  v_scroll_block_2_size:	equ $FFFFF7F2	; unused (2 bytes)
00000000 =FFFFF7F4                  v_scroll_block_3_size:	equ $FFFFF7F4	; unused (2 bytes)
00000000 =FFFFF7F6                  v_scroll_block_4_size:	equ $FFFFF7F6	; unused (2 bytes)
00000000                            
00000000 =FFFFF800                  v_spritetablebuffer:	equ $FFFFF800 ; sprite table ($280 bytes, last $80 bytes are overwritten by v_pal_water_dup)
00000000 =FFFFFA00                  v_pal_water_dup:	equ $FFFFFA00 ; duplicate underwater palette, used for transitions ($80 bytes)
00000000 =FFFFFA80                  v_pal_water:	equ $FFFFFA80	; main underwater palette ($80 bytes)
00000000 =FFFFFB00                  v_pal_dry:	equ $FFFFFB00	; main palette ($80 bytes)
00000000 =FFFFFB80                  v_pal_dry_dup:	equ $FFFFFB80	; duplicate palette, used for transitions ($80 bytes)
00000000 =FFFFFC00                  v_objstate:	equ $FFFFFC00	; object state list ($200 bytes)
00000000                            
00000000                            
00000000 =FFFFFE00                  v_systemstack:	equ $FFFFFE00
00000000 =FFFFFE02                  f_restart:	equ $FFFFFE02	; restart level flag (2 bytes)
00000000 =FFFFFE04                  v_framecount:	equ $FFFFFE04	; frame counter (adds 1 every frame) (2 bytes)
00000000 =FFFFFE05                  v_framebyte:	equ v_framecount+1; low byte for frame counter
00000000 =FFFFFE06                  v_debugitem:	equ $FFFFFE06	; debug item currently selected (NOT the object number of the item)
00000000 =FFFFFE08                  v_debuguse:	equ $FFFFFE08	; debug mode use & routine counter (when Sonic is a ring/item) (2 bytes)
00000000 =FFFFFE0A                  v_debugxspeed:	equ $FFFFFE0A	; debug mode - horizontal speed
00000000 =FFFFFE0B                  v_debugyspeed:	equ $FFFFFE0B	; debug mode - vertical speed
00000000 =FFFFFE0C                  v_vbla_count:	equ $FFFFFE0C	; vertical interrupt counter (adds 1 every VBlank) (4 bytes)
00000000 =FFFFFE0E                  v_vbla_word:	equ v_vbla_count+2 ; low word for vertical interrupt counter (2 bytes)
00000000 =FFFFFE0F                  v_vbla_byte:	equ v_vbla_word+1	; low byte for vertical interrupt counter
00000000 =FFFFFE10                  v_zone:		equ $FFFFFE10	; current zone number
00000000 =FFFFFE11                  v_act:		equ $FFFFFE11	; current act number
00000000 =FFFFFE12                  v_lives:		equ $FFFFFE12	; number of lives
00000000 =FFFFFE14                  v_air:		equ $FFFFFE14	; air remaining while underwater (2 bytes)
00000000 =FFFFFE15                  v_airbyte:	equ v_air+1	; low byte for air
00000000 =FFFFFE16                  v_lastspecial:	equ $FFFFFE16	; last special stage number
00000000 =FFFFFE18                  v_continues:	equ $FFFFFE18	; number of continues
00000000 =FFFFFE1A                  f_timeover:	equ $FFFFFE1A	; time over flag
00000000 =FFFFFE1B                  v_lifecount:	equ $FFFFFE1B	; lives counter value (for actual number, see "v_lives")
00000000 =FFFFFE1C                  f_lifecount:	equ $FFFFFE1C	; lives counter update flag
00000000 =FFFFFE1D                  f_ringcount:	equ $FFFFFE1D	; ring counter update flag
00000000 =FFFFFE1E                  f_timecount:	equ $FFFFFE1E	; time counter update flag
00000000 =FFFFFE1F                  f_scorecount:	equ $FFFFFE1F	; score counter update flag
00000000 =FFFFFE20                  v_rings:		equ $FFFFFE20	; rings (2 bytes)
00000000 =FFFFFE21                  v_ringbyte:	equ v_rings+1	; low byte for rings
00000000 =FFFFFE22                  v_time:		equ $FFFFFE22	; time (4 bytes)
00000000 =FFFFFE23                  v_timemin:	equ $FFFFFE23	; time - minutes
00000000 =FFFFFE24                  v_timesec:	equ $FFFFFE24	; time - seconds
00000000 =FFFFFE25                  v_timecent:	equ $FFFFFE25	; time - centiseconds
00000000 =FFFFFE26                  v_score:		equ $FFFFFE26	; score (4 bytes)
00000000 =FFFFFE2C                  v_shield:	equ $FFFFFE2C	; shield status (00 = no; 01 = yes)
00000000 =FFFFFE2D                  v_invinc:	equ $FFFFFE2D	; invinciblity status (00 = no; 01 = yes)
00000000 =FFFFFE2E                  v_shoes:		equ $FFFFFE2E	; speed shoes status (00 = no; 01 = yes)
00000000 =FFFFFE30                  v_lastlamp:	equ $FFFFFE30	; number of the last lamppost you hit
00000000 =FFFFFE32                  v_lamp_xpos:	equ v_lastlamp+2	; x-axis for Sonic to respawn at lamppost (2 bytes)
00000000 =FFFFFE34                  v_lamp_ypos:	equ v_lastlamp+4	; y-axis for Sonic to respawn at lamppost (2 bytes)
00000000 =FFFFFE36                  v_lamp_rings:	equ v_lastlamp+6	; rings stored at lamppost (2 bytes)
00000000 =FFFFFE38                  v_lamp_time:	equ v_lastlamp+8	; time stored at lamppost (2 bytes)
00000000 =FFFFFE3C                  v_lamp_dle:	equ v_lastlamp+$C	; dynamic level event routine counter at lamppost
00000000 =FFFFFE3E                  v_lamp_limitbtm:	equ v_lastlamp+$E	; level bottom boundary at lamppost (2 bytes)
00000000 =FFFFFE40                  v_lamp_scrx:	equ v_lastlamp+$10 ; x-axis screen at lamppost (2 bytes)
00000000 =FFFFFE42                  v_lamp_scry:	equ v_lastlamp+$12 ; y-axis screen at lamppost (2 bytes)
00000000                            
00000000 =FFFFFE50                  v_lamp_wtrpos:	equ v_lastlamp+$20 ; water position at lamppost (2 bytes)
00000000 =FFFFFE52                  v_lamp_wtrrout:	equ v_lastlamp+$22 ; water routine at lamppost
00000000 =FFFFFE53                  v_lamp_wtrstat:	equ v_lastlamp+$23 ; water state at lamppost
00000000 =FFFFFE54                  v_lamp_lives:	equ v_lastlamp+$24 ; lives counter at lamppost
00000000 =FFFFFE57                  v_emeralds:	equ $FFFFFE57	; number of chaos emeralds
00000000 =FFFFFE58                  v_emldlist:	equ $FFFFFE58	; which individual emeralds you have (00 = no; 01 = yes) (6 bytes)
00000000 =FFFFFE5E                  v_oscillate:	equ $FFFFFE5E	; values which oscillate - for swinging platforms, et al ($42 bytes)
00000000 =FFFFFEC0                  v_ani0_time:	equ $FFFFFEC0	; synchronised sprite animation 0 - time until next frame (used for synchronised animations)
00000000 =FFFFFEC1                  v_ani0_frame:	equ $FFFFFEC1	; synchronised sprite animation 0 - current frame
00000000 =FFFFFEC2                  v_ani1_time:	equ $FFFFFEC2	; synchronised sprite animation 1 - time until next frame
00000000 =FFFFFEC3                  v_ani1_frame:	equ $FFFFFEC3	; synchronised sprite animation 1 - current frame
00000000 =FFFFFEC4                  v_ani2_time:	equ $FFFFFEC4	; synchronised sprite animation 2 - time until next frame
00000000 =FFFFFEC5                  v_ani2_frame:	equ $FFFFFEC5	; synchronised sprite animation 2 - current frame
00000000 =FFFFFEC6                  v_ani3_time:	equ $FFFFFEC6	; synchronised sprite animation 3 - time until next frame
00000000 =FFFFFEC7                  v_ani3_frame:	equ $FFFFFEC7	; synchronised sprite animation 3 - current frame
00000000 =FFFFFEC8                  v_ani3_buf:	equ $FFFFFEC8	; synchronised sprite animation 3 - info buffer (2 bytes)
00000000 =FFFFFEC9                  v_ani4_frame:	equ $FFFFFEC9	; synchronised sprite animation 4 - current frame
00000000 =FFFFFEF0                  v_limittopdb:	equ $FFFFFEF0	; level upper boundary, buffered for debug mode (2 bytes)
00000000 =FFFFFEF2                  v_limitbtmdb:	equ $FFFFFEF2	; level bottom boundary, buffered for debug mode (2 bytes)
00000000                            
00000000 =FFFFFF10                  v_screenposx_dup:	equ $FFFFFF10	; screen position x (duplicate) (2 bytes)
00000000 =FFFFFF14                  v_screenposy_dup:	equ $FFFFFF14	; screen position y (duplicate) (2 bytes)
00000000 =FFFFFF18                  v_bgscreenposx_dup:	equ $FFFFFF18	; background screen position x (duplicate) (2 bytes)
00000000 =FFFFFF1C                  v_bgscreenposy_dup:	equ $FFFFFF1C	; background screen position y (duplicate) (2 bytes)
00000000 =FFFFFF20                  v_bg2screenposx_dup:	equ $FFFFFF20	; 2 bytes
00000000 =FFFFFF24                  v_bg2screenposy_dup:	equ $FFFFFF24	; 2 bytes
00000000 =FFFFFF28                  v_bg3screenposx_dup:	equ $FFFFFF28	; 2 bytes
00000000 =FFFFFF2C                  v_bg3screenposy_dup:	equ $FFFFFF2C	; 2 bytes
00000000 =FFFFFF30                  v_fg_scroll_flags_dup:	equ $FFFFFF30
00000000 =FFFFFF32                  v_bg1_scroll_flags_dup:	equ $FFFFFF32
00000000 =FFFFFF34                  v_bg2_scroll_flags_dup:	equ $FFFFFF34
00000000 =FFFFFF36                  v_bg3_scroll_flags_dup:	equ $FFFFFF36
00000000                            
00000000 =FFFFFF80                  v_levseldelay:	equ $FFFFFF80	; level select - time until change when up/down is held (2 bytes)
00000000 =FFFFFF82                  v_levselitem:	equ $FFFFFF82	; level select - item selected (2 bytes)
00000000 =FFFFFF84                  v_levselsound:	equ $FFFFFF84	; level select - sound selected (2 bytes)
00000000 =FFFFFFB0                  Title_screen_option:	equ $FFFFFFB0
00000000 =FFFFFFC0                  v_scorecopy:	equ $FFFFFFC0	; score, duplicate (4 bytes)
00000000 =FFFFFFC0                  v_scorelife:	equ $FFFFFFC0	; points required for an extra life (4 bytes) (JP1 only)
00000000 =FFFFFFE0                  f_levselcheat:	equ $FFFFFFE0	; level select cheat flag
00000000 =FFFFFFE1                  f_slomocheat:	equ $FFFFFFE1	; slow motion & frame advance cheat flag
00000000 =FFFFFFE2                  f_debugcheat:	equ $FFFFFFE2	; debug mode cheat flag
00000000 =FFFFFFE3                  f_creditscheat:	equ $FFFFFFE3	; hidden credits & press start cheat flag
00000000 =FFFFFFE4                  v_title_dcount:	equ $FFFFFFE4	; number of times the d-pad is pressed on title screen (2 bytes)
00000000 =FFFFFFE6                  v_title_ccount:	equ $FFFFFFE6	; number of times C is pressed on title screen (2 bytes)
00000000                            
00000000 =FFFFFFF0                  f_demo:		equ $FFFFFFF0	; demo mode flag (0 = no; 1 = yes; $8001 = ending) (2 bytes)
00000000 =FFFFFFF2                  v_demonum:	equ $FFFFFFF2	; demo level number (not the same as the level number) (2 bytes)
00000000 =FFFFFFF4                  v_creditsnum:	equ $FFFFFFF4	; credits index number (2 bytes)
00000000 =FFFFFFF8                  v_megadrive:	equ $FFFFFFF8	; Megadrive machine type
00000000 =FFFFFFFA                  f_debugmode:	equ $FFFFFFFA	; debug mode flag (sometimes 2 bytes)
00000000 =FFFFFFFC                  v_init:		equ $FFFFFFFC	; 'init' text string (4 bytes)
00000000                            
00000000 =FFFFF5C3                  f_emeraldm:	equ $FFFFF5C3
00000000 =FFFFF5C4                  v_tagwater:    	equ $FFFFF5C4   ; TIS  
00000000 =FFFFFF92                  v_watersplashpos:    equ $FFFFFF92    ; TIS  
00000000 =00000039                  f_spindash	= $39
00000000 =FFFFF5C6                  v_Saved_music:	equ $FFFFF5C6
00000000 =FFFFF5C8                  v_rshield:	equ $FFFFF5C8	; shield status (00 = no; 01 = yes)
00000000 =FFFFF5C9                  v_gshield:	equ $FFFFF5C9	; shield status (00 = no; 01 = yes)
00000000 =FFFFF5CA                  v_spshield:	equ $FFFFF5CA	; shield status (00 = no; 01 = yes)
00000000                            
00000000 =FFFFFF8C                  Options_menu_box:	equ  $FFFFFF8C
00000000 =FFFFFF8C                  Options_menu_box:	equ  $FFFFFF8C
00000000                            	include	"Macros.asm"
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; reads ASCII strings and passes them to character generator
00000000                            ; ---------------------------------------------------------------------------
00000000                            asc        macro str
00000000                            ct =    0                            ; accumulates the total num of characters
00000000                                rept narg                        ; repeat for every argumeny
00000000                            lc =        0                        ; the position in the string
00000000                            
00000000                                dc.b strlen(\str)-1                    ; put the string length before the string itself
00000000                                rept strlen(\str)                    ; repeat for each character in string
00000000                            cc         substr lc+1,lc+1,\str                ; get a single character into cc
00000000                            arg =        '\cc'                        ; convert it to a character
00000000                                        char.b arg                ; put the character into the ROM (as byte)
00000000                            
00000000                            lc =        lc+1                        ; go to the next character
00000000                            ct =        ct+1                        ; increment character count
00000000                                    endr
00000000                                shift
00000000                                endr
00000000                                endm
00000000                            
00000000                            ; translates ASCII character to proper hex value
00000000                            char        macro c
00000000                                if c=' '
00000000                                    dc.\0 0                        ; example 1: single letters
00000000                            
00000000                                elseif c='*'
00000000                                    dc.\0 $1A                        ; example 1: single letters
00000000                            
00000000                                elseif (c>='0')&(c<='9')
00000000                                    dc.\0 \c-'0'+$20                ; example 2: range of letters ; gem note: '0' = $30. it's the ascii representation
00000000                            
00000000                                elseif (c>='A')&(c<='Z')
00000000                                    dc.\0 \c-$41+$1E                ; example 2: range of letters ; gem note: '0' = $30. it's the ascii representation
00000000                            
00000000                                else
00000000                                    dc.\0 \c                    ; example 3: any other character
00000000                                endif
00000000                                endm	
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; Align and pad
00000000                            ; input: length to align to, value to use as padding (default is 0)
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            align:	macro
00000000                            	if (narg=1)
00000000                            	dcb.b \1-(*%\1),0
00000000                            	else
00000000                            	dcb.b \1-(*%\1),\2
00000000                            	endc
00000000                            	endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; Set a VRAM address via the VDP control port.
00000000                            ; input: 16-bit VRAM address, control port (default is ($C00004).l)
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            locVRAM:	macro loc,controlport
00000000                            		if (narg=1)
00000000                            		move.l	#($40000000+((loc&$3FFF)<<16)+((loc&$C000)>>14)),(vdp_control_port).l
00000000                            		else
00000000                            		move.l	#($40000000+((loc&$3FFF)<<16)+((loc&$C000)>>14)),controlport
00000000                            		endc
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; DMA copy data from 68K (ROM/RAM) to the VRAM
00000000                            ; input: source, length, destination
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            writeVRAM:	macro
00000000                            		lea	(vdp_control_port).l,a5
00000000                            		move.l	#$94000000+(((\2>>1)&$FF00)<<8)+$9300+((\2>>1)&$FF),(a5)
00000000                            		move.l	#$96000000+(((\1>>1)&$FF00)<<8)+$9500+((\1>>1)&$FF),(a5)
00000000                            		move.w	#$9700+((((\1>>1)&$FF0000)>>16)&$7F),(a5)
00000000                            		move.w	#$4000+(\3&$3FFF),(a5)
00000000                            		move.w	#$80+((\3&$C000)>>14),(v_vdp_buffer2).w
00000000                            		move.w	(v_vdp_buffer2).w,(a5)
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; DMA copy data from 68K (ROM/RAM) to the CRAM
00000000                            ; input: source, length, destination
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            writeCRAM:	macro
00000000                            		lea	(vdp_control_port).l,a5
00000000                            		move.l	#$94000000+(((\2>>1)&$FF00)<<8)+$9300+((\2>>1)&$FF),(a5)
00000000                            		move.l	#$96000000+(((\1>>1)&$FF00)<<8)+$9500+((\1>>1)&$FF),(a5)
00000000                            		move.w	#$9700+((((\1>>1)&$FF0000)>>16)&$7F),(a5)
00000000                            		move.w	#$C000+(\3&$3FFF),(a5)
00000000                            		move.w	#$80+((\3&$C000)>>14),(v_vdp_buffer2).w
00000000                            		move.w	(v_vdp_buffer2).w,(a5)
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; DMA fill VRAM with a value
00000000                            ; input: value, length, destination
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            fillVRAM:	macro value,length,loc
00000000                            		lea	(vdp_control_port).l,a5
00000000                            		move.w	#$8F01,(a5)
00000000                            		move.l	#$94000000+((length&$FF00)<<8)+$9300+(length&$FF),(a5)
00000000                            		move.w	#$9780,(a5)
00000000                            		move.l	#$40000080+((loc&$3FFF)<<16)+((loc&$C000)>>14),(a5)
00000000                            		move.w	#value,(vdp_data_port).l
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; Copy a tilemap from 68K (ROM/RAM) to the VRAM without using DMA
00000000                            ; input: source, destination, width [cells], height [cells]
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            copyTilemap:	macro source,loc,width,height
00000000                            		lea	(source).l,a1
00000000                            		move.l	#$40000000+((loc&$3FFF)<<16)+((loc&$C000)>>14),d0
00000000                            		moveq	#width,d1
00000000                            		moveq	#height,d2
00000000                            		jsr	TilemapToVRAM
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; stop the Z80
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            stopZ80:	macro
00000000                            		move.w	#$100,(z80_bus_request).l
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; wait for Z80 to stop
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            waitZ80:	macro
00000000                            	@wait:	btst	#0,(z80_bus_request).l
00000000                            		bne.s	@wait
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; reset the Z80
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            resetZ80:	macro
00000000                            		move.w	#$100,(z80_reset).l
00000000                            		endm
00000000                            
00000000                            resetZ80a:	macro
00000000                            		move.w	#0,(z80_reset).l
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; start the Z80
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            startZ80:	macro
00000000                            		move.w	#0,(z80_bus_request).l
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; disable interrupts
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            disable_ints:	macro
00000000                            		move	#$2700,sr
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; enable interrupts
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            enable_ints:	macro
00000000                            		move	#$2300,sr
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; long conditional jumps
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            jhi:		macro loc
00000000                            		bls.s	@nojump
00000000                            		jmp	loc
00000000                            	@nojump:
00000000                            		endm
00000000                            
00000000                            jcc:		macro loc
00000000                            		bcs.s	@nojump
00000000                            		jmp	loc
00000000                            	@nojump:
00000000                            		endm
00000000                            
00000000                            jhs:		macro loc
00000000                            		jcc	loc
00000000                            		endm
00000000                            
00000000                            jls:		macro loc
00000000                            		bhi.s	@nojump
00000000                            		jmp	loc
00000000                            	@nojump:
00000000                            		endm
00000000                            
00000000                            jcs:		macro loc
00000000                            		bcc.s	@nojump
00000000                            		jmp	loc
00000000                            	@nojump:
00000000                            		endm
00000000                            
00000000                            jlo:		macro loc
00000000                            		jcs	loc
00000000                            		endm
00000000                            
00000000                            jeq:		macro loc
00000000                            		bne.s	@nojump
00000000                            		jmp	loc
00000000                            	@nojump:
00000000                            		endm
00000000                            
00000000                            jne:		macro loc
00000000                            		beq.s	@nojump
00000000                            		jmp	loc
00000000                            	@nojump:
00000000                            		endm
00000000                            
00000000                            jgt:		macro loc
00000000                            		ble.s	@nojump
00000000                            		jmp	loc
00000000                            	@nojump:
00000000                            		endm
00000000                            
00000000                            jge:		macro loc
00000000                            		blt.s	@nojump
00000000                            		jmp	loc
00000000                            	@nojump:
00000000                            		endm
00000000                            
00000000                            jle:		macro loc
00000000                            		bgt.s	@nojump
00000000                            		jmp	loc
00000000                            	@nojump:
00000000                            		endm
00000000                            
00000000                            jlt:		macro loc
00000000                            		bge.s	@nojump
00000000                            		jmp	loc
00000000                            	@nojump:
00000000                            		endm
00000000                            
00000000                            jpl:		macro loc
00000000                            		bmi.s	@nojump
00000000                            		jmp	loc
00000000                            	@nojump:
00000000                            		endm
00000000                            
00000000                            jmi:		macro loc
00000000                            		bpl.s	@nojump
00000000                            		jmp	loc
00000000                            	@nojump:
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; check if object moves out of range
00000000                            ; input: location to jump to if out of range, x-axis pos (obX(a0) by default)
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            out_of_range:	macro exit,pos
00000000                            		if (narg=2)
00000000                            		move.w	pos,d0		; get object position (if specified as not obX)
00000000                            		else
00000000                            		move.w	obX(a0),d0	; get object position
00000000                            		endc
00000000                            		andi.w	#$FF80,d0	; round down to nearest $80
00000000                            		move.w	(v_screenposx).w,d1 ; get screen position
00000000                            		subi.w	#128,d1
00000000                            		andi.w	#$FF80,d1
00000000                            		sub.w	d1,d0		; approx distance between object and screen
00000000                            		cmpi.w	#128+320+192,d0
00000000                            		bhi.\0	exit
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; play a sound effect or music
00000000                            ; input: track, terminate routine, branch or jump, move operand size
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            music:		macro track,terminate,branch,byte
00000000                            		  if OptimiseSound=1
00000000                            			move.b	#track,(v_snddriver_ram+v_playsnd1).l
00000000                            		    if terminate=1
00000000                            			rts
00000000                            		    endc
00000000                            		  else
00000000                            	 	    if byte=1
00000000                            			move.b	#track,d0
00000000                            		    else
00000000                            			move.w	#track,d0
00000000                            		    endc
00000000                            		    if branch=1
00000000                            		      if terminate=0
00000000                            			bsr.w	PlaySound
00000000                            		      else
00000000                            			bra.w	PlaySound
00000000                            		      endc
00000000                            		    else
00000000                            		      if terminate=0
00000000                            			jsr	(PlaySound).l
00000000                            		      else
00000000                            			jmp	(PlaySound).l
00000000                            		      endc
00000000                            		    endc
00000000                            		  endc
00000000                            		endm
00000000                            
00000000                            sfx:		macro track,terminate,branch,byte
00000000                            		  if OptimiseSound=1
00000000                            			move.b	#track,(v_snddriver_ram+v_playsnd2).l
00000000                            		    if terminate=1
00000000                            			rts
00000000                            		    endc
00000000                            		  else
00000000                            	 	    if byte=1
00000000                            			move.b	#track,d0
00000000                            		    else
00000000                            			move.w	#track,d0
00000000                            		    endc
00000000                            		    if branch=1
00000000                            		      if terminate=0
00000000                            			bsr.w	PlaySound_Special
00000000                            		      else
00000000                            			bra.w	PlaySound_Special
00000000                            		      endc
00000000                            		    else
00000000                            		      if terminate=0
00000000                            			jsr	(PlaySound_Special).l
00000000                            		      else
00000000                            			jmp	(PlaySound_Special).l
00000000                            		      endc
00000000                            		    endc
00000000                            		  endc
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; bankswitch between SRAM and ROM
00000000                            ; (remember to enable SRAM in the header first!)
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            gotoSRAM:	macro
00000000                            		move.b  #1,($A130F1).l
00000000                            		endm
00000000                            
00000000                            gotoROM:	macro
00000000                            		move.b  #0,($A130F1).l
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; compare the size of an index with ZoneCount constant
00000000                            ; (should be used immediately after the index)
00000000                            ; input: index address, element size
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            zonewarning:	macro loc,elementsize
00000000                            	@end:
00000000                            		if (@end-loc)-(ZoneCount*elementsize)<>0
00000000                            		inform 1,"Size of \loc ($%h) does not match ZoneCount ($\#ZoneCount).",(@end-loc)/elementsize
00000000                            		endc
00000000                            		endm
00000000                            		endm
00000000                            
00000000 =00000000                  EnableSRAM:	equ 0	; change to 1 to enable SRAM
00000000 =00000001                  BackupSRAM:	equ 1
00000000 =00000003                  AddressSRAM:	equ 3	; 0 = odd+even; 2 = even only; 3 = odd only
00000000                            
00000000                            ; Change to 0 to build the original version of the game, dubbed REV00
00000000                            ; Change to 1 to build the later vesion, dubbed REV01, which includes various bugfixes and enhancements
00000000                            ; Change to 2 to build the version from Sonic Mega Collection, dubbed REVXB, which fixes the infamous "spike bug"
00000000 =00000002                  Revision:	equ 2
00000000                            
00000000 =00000006                  ZoneCount:	equ 6	; discrete zones are: GHZ, MZ, SYZ, LZ, SLZ, and SBZ
00000000                            
00000000 =00000000                  OptimiseSound:	equ 0	; change to 1 to optimise sound queuing
00000000                            
00000000                            ; ===========================================================================
00000000                            
00000000                            StartOfRom:
00000000 00FF FE00                  Vectors:	dc.l v_systemstack&$FFFFFF	; Initial stack pointer value
00000004 0000 0000                  		dc.l EntryPoint			; Start of program
00000008 0000 0000                  		dc.l BusError			; Bus error
0000000C 0000 0000                  		dc.l AddressError		; Address error (4)
00000010 0000 0000                  		dc.l IllegalInstr		; Illegal instruction
00000014 0000 0000                  		dc.l ZeroDivide			; Division by zero
00000018 0000 0000                  		dc.l ChkInstr			; CHK exception
0000001C 0000 0000                  		dc.l TrapvInstr			; TRAPV exception (8)
00000020 0000 0000                  		dc.l PrivilegeViol		; Privilege violation
00000024 0000 0000                  		dc.l Trace				; TRACE exception
00000028 0000 0000                  		dc.l Line1010Emu		; Line-A emulator
0000002C 0000 0000                  		dc.l Line1111Emu		; Line-F emulator (12)
00000030 0000 0000                  		dc.l ErrorExcept		; Unused (reserved)
00000034 0000 0000                  		dc.l ErrorExcept		; Unused (reserved)
00000038 0000 0000                  		dc.l ErrorExcept		; Unused (reserved)
0000003C 0000 0000                  		dc.l ErrorExcept		; Unused (reserved) (16)
00000040 0000 0000                  		dc.l ErrorExcept		; Unused (reserved)
00000044 0000 0000                  		dc.l ErrorExcept		; Unused (reserved)
00000048 0000 0000                  		dc.l ErrorExcept		; Unused (reserved)
0000004C 0000 0000                  		dc.l ErrorExcept		; Unused (reserved) (20)
00000050 0000 0000                  		dc.l ErrorExcept		; Unused (reserved)
00000054 0000 0000                  		dc.l ErrorExcept		; Unused (reserved)
00000058 0000 0000                  		dc.l ErrorExcept		; Unused (reserved)
0000005C 0000 0000                  		dc.l ErrorExcept		; Unused (reserved) (24)
00000060 0000 0000                  		dc.l ErrorExcept		; Spurious exception
00000064 0000 0000                  		dc.l ErrorTrap			; IRQ level 1
00000068 0000 0000                  		dc.l ErrorTrap			; IRQ level 2
0000006C 0000 0000                  		dc.l ErrorTrap			; IRQ level 3 (28)
00000070 0000 0000                  		dc.l HBlank				; IRQ level 4 (horizontal retrace interrupt)
00000074 0000 0000                  		dc.l ErrorTrap			; IRQ level 5
00000078 0000 0000                  		dc.l VBlank				; IRQ level 6 (vertical retrace interrupt)
0000007C 0000 0000                  		dc.l ErrorTrap			; IRQ level 7 (32)
00000080 0000 0000                  		dc.l ErrorTrap			; TRAP #00 exception
00000084 0000 0000                  		dc.l ErrorTrap			; TRAP #01 exception
00000088 0000 0000                  		dc.l ErrorTrap			; TRAP #02 exception
0000008C 0000 0000                  		dc.l ErrorTrap			; TRAP #03 exception (36)
00000090 0000 0000                  		dc.l ErrorTrap			; TRAP #04 exception
00000094 0000 0000                  		dc.l ErrorTrap			; TRAP #05 exception
00000098 0000 0000                  		dc.l ErrorTrap			; TRAP #06 exception
0000009C 0000 0000                  		dc.l ErrorTrap			; TRAP #07 exception (40)
000000A0 0000 0000                  		dc.l ErrorTrap			; TRAP #08 exception
000000A4 0000 0000                  		dc.l ErrorTrap			; TRAP #09 exception
000000A8 0000 0000                  		dc.l ErrorTrap			; TRAP #10 exception
000000AC 0000 0000                  		dc.l ErrorTrap			; TRAP #11 exception (44)
000000B0 0000 0000                  		dc.l ErrorTrap			; TRAP #12 exception
000000B4 0000 0000                  		dc.l ErrorTrap			; TRAP #13 exception
000000B8 0000 0000                  		dc.l ErrorTrap			; TRAP #14 exception
000000BC 0000 0000                  		dc.l ErrorTrap			; TRAP #15 exception (48)
000000C0 0000 0000                  		dc.l ErrorTrap			; Unused (reserved)
000000C4 0000 0000                  		dc.l ErrorTrap			; Unused (reserved)
000000C8 0000 0000                  		dc.l ErrorTrap			; Unused (reserved)
000000CC 0000 0000                  		dc.l ErrorTrap			; Unused (reserved)
000000D0 0000 0000                  		dc.l ErrorTrap			; Unused (reserved)
000000D4 0000 0000                  		dc.l ErrorTrap			; Unused (reserved)
000000D8 0000 0000                  		dc.l ErrorTrap			; Unused (reserved)
000000DC 0000 0000                  		dc.l ErrorTrap			; Unused (reserved)
000000E0                            loc_E0:
000000E0                            		; Relocated code from Spik_Hurt. REVXB was a nasty hex-edit.
000000E0 2628 000C                  		move.l	obY(a0),d3
000000E4 3028 0012                  		move.w	obVelY(a0),d0
000000E8 48C0                       		ext.l	d0
000000EA E180                       		asl.l	#8,d0
000000EC 4EF9 0000 0000             		jmp	(loc_D5A2).l
000000F2                            
000000F2 0000                       		dc.w ErrorTrap
000000F4 0000 0000                  		dc.l ErrorTrap
000000F8 0000 0000                  		dc.l ErrorTrap
000000FC 0000 0000                  		dc.l ErrorTrap
00000100 5345 4741 204D 4547 4120+  Console:	dc.b "SEGA MEGA DRIVE " ; Hardware system ID (Console name)
00000110 2843 2953 4547 4120 3139+  Date:		dc.b "(C)SEGA 1991.APR" ; Copyright holder and release date (generally year)
00000120 534F 4E49 4320 5355 4E56+  Title_Local:	dc.b "SONIC SUNVENTURE                                " ; Domestic name
00000150 534F 4E49 4320 5355 4E56+  Title_Int:	dc.b "SONIC SUNVENTURE                                " ; International name
00000180 474D 2030 3030 3034 3034+  			dc.b "GM 00004049-01" ; Serial/version number (Rev non-0)
0000018E 0000                       Checksum: dc.w $0
00000190 4A20 2020 2020 2020 2020+  		dc.b "J               " ; I/O support
000001A0 0000 0000                  RomStartLoc:	dc.l StartOfRom		; Start address of ROM
000001A4 0000 0000                  RomEndLoc:	dc.l EndOfRom-1		; End address of ROM
000001A8 00FF 0000                  RamStartLoc:	dc.l $FF0000		; Start address of RAM
000001AC 00FF FFFF                  RamEndLoc:	dc.l $FFFFFF		; End address of RAM
000001B0 2020 2020                  		dc.l $20202020
000001B4 2020 2020                  		dc.l $20202020		; SRAM start ($200001)
000001B8 2020 2020                  		dc.l $20202020		; SRAM end ($20xxxx)
000001BC 2020 2020 2020 2020 2020+  Notes:		dc.b "                                                    " ; Notes (unused, anything can be put in this space, but it has to be 52 bytes.)
000001F0 4A55 4520 2020 2020 2020+  Region:		dc.b "JUE             " ; Region (Country code)
00000200                            EndOfHeader:
00000200                            
00000200                            ; ===========================================================================
00000200                            ; Crash/Freeze the 68000. Unlike Sonic 2, Sonic 1 uses the 68000 for playing music, so it stops too
00000200                            
00000200                            ErrorTrap:
00000200 4E71                       		nop	
00000202 4E71                       		nop	
00000204 60FA                       		bra.s	ErrorTrap
00000206                            ; ===========================================================================
00000206                            
00000206                            EntryPoint:
00000206 4AB9 00A1 0008             		tst.l	(z80_port_1_control).l ; test port A & B control registers
0000020C 6600                       		bne.s	PortA_Ok
0000020E 4A79 00A1 000C             		tst.w	(z80_expansion_control).l ; test port C control register
00000214                            
00000214                            PortA_Ok:
00000214 6600                       		bne.s	SkipSetup ; Skip the VDP and Z80 setup code if port A, B or C is ok...?
00000216 4BFA 0000                  		lea	SetupValues(pc),a5	; Load setup values array address.
0000021A 4C9D 00E0                  		movem.w	(a5)+,d5-d7
0000021E 4CDD 1F00                  		movem.l	(a5)+,a0-a4
00000222 1029 EF01                  		move.b	-$10FF(a1),d0	; get hardware version (from $A10001)
00000226 0200 000F                  		andi.b	#$F,d0
0000022A 6700                       		beq.s	SkipSecurity	; If the console has no TMSS, skip the security stuff.
0000022C 237C 5345 4741 2F00        		move.l	#'SEGA',$2F00(a1) ; move "SEGA" to TMSS register ($A14000)
00000234                            
00000234                            SkipSecurity:
00000234 3014                       		move.w	(a4),d0	; clear write-pending flag in VDP to prevent issues if the 68k has been reset in the middle of writing a command long word to the VDP.
00000236 7000                       		moveq	#0,d0	; clear d0
00000238 2C40                       		movea.l	d0,a6	; clear a6
0000023A 4E66                       		move.l	a6,usp	; set usp to $0
0000023C                            
0000023C 7217                       		moveq	#$17,d1
0000023E                            VDPInitLoop:
0000023E 1A1D                       		move.b	(a5)+,d5	; add $8000 to value
00000240 3885                       		move.w	d5,(a4)		; move value to	VDP register
00000242 DA47                       		add.w	d7,d5		; next register
00000244 51C9 FFF8                  		dbf	d1,VDPInitLoop
00000248                            		
00000248 289D                       		move.l	(a5)+,(a4)
0000024A 3680                       		move.w	d0,(a3)		; clear	the VRAM
0000024C 3287                       		move.w	d7,(a1)		; stop the Z80
0000024E 3487                       		move.w	d7,(a2)		; reset	the Z80
00000250                            
00000250                            WaitForZ80:
00000250 0111                       		btst	d0,(a1)		; has the Z80 stopped?
00000252 66FC                       		bne.s	WaitForZ80	; if not, branch
00000254                            
00000254 7425                       		moveq	#$25,d2
00000256                            Z80InitLoop:
00000256 10DD                       		move.b	(a5)+,(a0)+
00000258 51CA FFFC                  		dbf	d2,Z80InitLoop
0000025C                            		
0000025C 3480                       		move.w	d0,(a2)
0000025E 3280                       		move.w	d0,(a1)		; start	the Z80
00000260 3487                       		move.w	d7,(a2)		; reset	the Z80
00000262                            
00000262                            ClrRAMLoop:
00000262 2D00                       		move.l	d0,-(a6)	; clear 4 bytes of RAM
00000264 51CE FFFC                  		dbf	d6,ClrRAMLoop	; repeat until the entire RAM is clear
00000268 289D                       		move.l	(a5)+,(a4)	; set VDP display mode and increment mode
0000026A 289D                       		move.l	(a5)+,(a4)	; set VDP to CRAM write
0000026C                            
0000026C 761F                       		moveq	#$1F,d3	; set repeat times
0000026E                            ClrCRAMLoop:
0000026E 2680                       		move.l	d0,(a3)	; clear 2 palettes
00000270 51CB FFFC                  		dbf	d3,ClrCRAMLoop	; repeat until the entire CRAM is clear
00000274 289D                       		move.l	(a5)+,(a4)	; set VDP to VSRAM write
00000276                            
00000276 7813                       		moveq	#$13,d4
00000278                            ClrVSRAMLoop:
00000278 2680                       		move.l	d0,(a3)	; clear 4 bytes of VSRAM.
0000027A 51CC FFFC                  		dbf	d4,ClrVSRAMLoop	; repeat until the entire VSRAM is clear
0000027E 7A03                       		moveq	#3,d5
00000280                            
00000280                            PSGInitLoop:
00000280 175D 0011                  		move.b	(a5)+,$11(a3)	; reset	the PSG
00000284 51CD FFFA                  		dbf	d5,PSGInitLoop	; repeat for other channels
00000288 3480                       		move.w	d0,(a2)
0000028A 4CD6 7FFF                  		movem.l	(a6),d0-a6	; clear all registers
0000028E 46FC 2700                  		disable_ints
00000292                            
00000292                            SkipSetup:
00000292 6000                       		bra.s	GameProgram	; begin game
00000294                            
00000294                            ; ===========================================================================
00000294 8000                       SetupValues:	dc.w $8000		; VDP register start number
00000296 3FFF                       		dc.w $3FFF		; size of RAM/4
00000298 0100                       		dc.w $100		; VDP register diff
0000029A                            
0000029A 00A0 0000                  		dc.l z80_ram		; start	of Z80 RAM
0000029E 00A1 1100                  		dc.l z80_bus_request	; Z80 bus request
000002A2 00A1 1200                  		dc.l z80_reset		; Z80 reset
000002A6 00C0 0000                  		dc.l vdp_data_port	; VDP data
000002AA 00C0 0004                  		dc.l vdp_control_port	; VDP control
000002AE                            
000002AE 04                         		dc.b 4			; VDP $80 - 8-colour mode
000002AF 14                         		dc.b $14		; VDP $81 - Megadrive mode, DMA enable
000002B0 30                         		dc.b ($C000>>10)	; VDP $82 - foreground nametable address
000002B1 3C                         		dc.b ($F000>>10)	; VDP $83 - window nametable address
000002B2 07                         		dc.b ($E000>>13)	; VDP $84 - background nametable address
000002B3 6C                         		dc.b ($D800>>9)		; VDP $85 - sprite table address
000002B4 00                         		dc.b 0			; VDP $86 - unused
000002B5 00                         		dc.b 0			; VDP $87 - background colour
000002B6 00                         		dc.b 0			; VDP $88 - unused
000002B7 00                         		dc.b 0			; VDP $89 - unused
000002B8 FF                         		dc.b 255		; VDP $8A - HBlank register
000002B9 00                         		dc.b 0			; VDP $8B - full screen scroll
000002BA 81                         		dc.b $81		; VDP $8C - 40 cell display
000002BB 37                         		dc.b ($DC00>>10)	; VDP $8D - hscroll table address
000002BC 00                         		dc.b 0			; VDP $8E - unused
000002BD 01                         		dc.b 1			; VDP $8F - VDP increment
000002BE 01                         		dc.b 1			; VDP $90 - 64 cell hscroll size
000002BF 00                         		dc.b 0			; VDP $91 - window h position
000002C0 00                         		dc.b 0			; VDP $92 - window v position
000002C1 FFFF                       		dc.w $FFFF		; VDP $93/94 - DMA length
000002C3 0000                       		dc.w 0			; VDP $95/96 - DMA source
000002C5 80                         		dc.b $80		; VDP $97 - DMA fill VRAM
000002C6 4000 0080                  		dc.l $40000080		; VRAM address 0
000002CA                            
000002CA AF                         		dc.b $AF		; xor	a
000002CB 01D9 1F                    		dc.b $01, $D9, $1F	; ld	bc,1fd9h
000002CE 1127 00                    		dc.b $11, $27, $00	; ld	de,0027h
000002D1 2126 00                    		dc.b $21, $26, $00	; ld	hl,0026h
000002D4 F9                         		dc.b $F9		; ld	sp,hl
000002D5 77                         		dc.b $77		; ld	(hl),a
000002D6 EDB0                       		dc.b $ED, $B0		; ldir
000002D8 DDE1                       		dc.b $DD, $E1		; pop	ix
000002DA FDE1                       		dc.b $FD, $E1		; pop	iy
000002DC ED47                       		dc.b $ED, $47		; ld	i,a
000002DE ED4F                       		dc.b $ED, $4F		; ld	r,a
000002E0 D1                         		dc.b $D1		; pop	de
000002E1 E1                         		dc.b $E1		; pop	hl
000002E2 F1                         		dc.b $F1		; pop	af
000002E3 08                         		dc.b $08		; ex	af,af'
000002E4 D9                         		dc.b $D9		; exx
000002E5 C1                         		dc.b $C1		; pop	bc
000002E6 D1                         		dc.b $D1		; pop	de
000002E7 E1                         		dc.b $E1		; pop	hl
000002E8 F1                         		dc.b $F1		; pop	af
000002E9 F9                         		dc.b $F9		; ld	sp,hl
000002EA F3                         		dc.b $F3		; di
000002EB ED56                       		dc.b $ED, $56		; im1
000002ED 36E9                       		dc.b $36, $E9		; ld	(hl),e9h
000002EF E9                         		dc.b $E9		; jp	(hl)
000002F0                            
000002F0 8104                       		dc.w $8104		; VDP display mode
000002F2 8F02                       		dc.w $8F02		; VDP increment
000002F4 C000 0000                  		dc.l $C0000000		; CRAM write mode
000002F8 4000 0010                  		dc.l $40000010		; VSRAM address 0
000002FC                            
000002FC 9FBF DFFF                  		dc.b $9F, $BF, $DF, $FF	; values for PSG channel volumes
00000300                            ; ===========================================================================
00000300                            
00000300                            GameProgram:
00000300 4A79 00C0 0004             		tst.w	(vdp_control_port).l
00000306 0839 0006 00A1 000D        		btst	#6,($A1000D).l
0000030E 6700                       		beq.s	CheckSumCheck
00000310 0CB8 696E 6974 FFFC        		cmpi.l	#'init',(v_init).w ; has checksum routine already run?
00000318 6700 0000                  		beq.w	GameInit	; if yes, branch
0000031C                            
0000031C                            CheckSumCheck:
0000031C 207C 0000 0200             		movea.l	#EndOfHeader,a0	; start	checking bytes after the header	($200)
00000322 227C 0000 01A4             		movea.l	#RomEndLoc,a1	; stop at end of ROM
00000328 2011                       		move.l	(a1),d0
0000032A 7200                       		moveq	#0,d1
0000032C                            
0000032C                            	@loop:
0000032C D258                       		add.w	(a0)+,d1
0000032E B088                       		cmp.l	a0,d0
00000330 64FA                       		bhs.s	@loop
00000332 227C 0000 018E             		movea.l	#Checksum,a1	; read the checksum
00000338 B251                       		cmp.w	(a1),d1		; compare checksum in header to ROM
0000033A 6600 0000                  		bne.w	CheckSumError	; if they don't match, branch
0000033E                            
0000033E                            	CheckSumOk:
0000033E 4DF8 FE00                  		lea	($FFFFFE00).w,a6
00000342 7E00                       		moveq	#0,d7
00000344 3C3C 007F                  		move.w	#$7F,d6
00000348                            	@clearRAM:
00000348 2CC7                       		move.l	d7,(a6)+
0000034A 51CE FFFC                  		dbf	d6,@clearRAM	; clear RAM ($FE00-$FFFF)
0000034E                            
0000034E 1039 00A1 0001             		move.b	(z80_version).l,d0
00000354 0200 00C0                  		andi.b	#$C0,d0
00000358 11C0 FFF8                  		move.b	d0,(v_megadrive).w ; get region setting
0000035C 21FC 696E 6974 FFFC        		move.l	#'init',(v_init).w ; set flag so checksum won't run again
00000364                            
00000364                            GameInit:
00000364 4DF9 00FF 0000             		lea	($FF0000).l,a6
0000036A 7E00                       		moveq	#0,d7
0000036C 3C3C 3F7F                  		move.w	#$3F7F,d6
00000370                            	@clearRAM:
00000370 2CC7                       		move.l	d7,(a6)+
00000372 51CE FFFC                  		dbf	d6,@clearRAM	; clear RAM ($0000-$FDFF)
00000376 4EB9 0000 0000                     jsr	(InitDMAQueue).l	
0000037C 6100 0000                  		bsr.w	VDPSetupGame
00000380 6100 0000                  		bsr.w	SoundDriverLoad
00000384 6100 0000                  		bsr.w	JoypadInit
00000388 11FC 0000 F600             		move.b	#id_Sega,(v_gamemode).w ; set Game Mode to Sega Screen
0000038E                            
0000038E                            MainGameLoop:
0000038E 4EB9 0000 0000             		jsr		ReadJoypads
00000394 1038 F600                  		move.b	(v_gamemode).w,d0 ; load Game Mode
00000398 0240 007C                  		andi.w	#$7C,d0	; limit Game Mode value to $1C max (change to a maximum of 7C to add more game modes)
0000039C 207B 0000                  		movea.l	GameModeArray(pc,d0.w),a0 ; jump to apt location in ROM
000003A0 4E90                       		jsr		(a0)
000003A2 60EA                       		bra.s	MainGameLoop	; loop indefinitely
000003A4                            ; ===========================================================================
000003A4                            ; ---------------------------------------------------------------------------
000003A4                            ; Main game mode array
000003A4                            ; ---------------------------------------------------------------------------
000003A4                            
000003A4                            GameModeArray:
000003A4 0000 0000                  ptr_GM_Sega:		dc.l	GM_Sega		; Sega Screen ($00)
000003A8 0000 0000                  ptr_GM_Title:		dc.l	GM_Title	; Title	Screen ($04)
000003AC 0000 0000                  ptr_GM_Demo:		dc.l	GM_Level	; Demo Mode ($08)
000003B0 0000 0000                  ptr_GM_Level:		dc.l	GM_Level	; Normal Level ($0C)
000003B4 0000 0000                  ptr_GM_Special:		dc.l	GM_Special	; Special Stage	($10)
000003B8 0000 0000                  ptr_GM_Cont:		dc.l	GM_Continue	; Continue Screen ($14)
000003BC 0000 0000                  ptr_GM_Ending:		dc.l	GM_Ending	; End of game sequence ($18)
000003C0 0000 0000                  ptr_GM_Credits:		dc.l	GM_Credits	; Credits ($1C)
000003C4 0000 0000                  ptr_GM_MenuScreen:	dc.l	MenuScreen	; Credits ($20)
000003C8 4E75                       		rts	
000003CA                            ; ===========================================================================
000003CA                            
000003CA                            CheckSumError:
000003CA 6100 0000                  		bsr.w	VDPSetupGame
000003CE 23FC C000 0000 00C0 0004   		move.l	#$C0000000,(vdp_control_port).l ; set VDP to CRAM write
000003D8 7E3F                       		moveq	#$3F,d7
000003DA                            
000003DA                            	@fillred:
000003DA 33FC 000E 00C0 0000        		move.w	#cRed,(vdp_data_port).l ; fill palette with red
000003E2 51CF FFF6                  		dbf	d7,@fillred	; repeat $3F more times
000003E6                            
000003E6                            	@endlessloop:
000003E6 60FE                       		bra.s	@endlessloop
000003E8                            ; ===========================================================================
000003E8                            
000003E8                            
000003E8                            ; ===========================================================================
000003E8                            
000003E8                            loc_43A:
000003E8 46FC 2700                  		disable_ints
000003EC 544F                       		addq.w	#2,sp
000003EE 21DF FC40                  		move.l	(sp)+,(v_spbuffer).w
000003F2 544F                       		addq.w	#2,sp
000003F4 48F8 FFFF FC00             		movem.l	d0-a7,(v_regbuffer).w
000003FA 6100 0000                  		bsr.w	ShowErrorMessage
000003FE 202F 0002                  		move.l	2(sp),d0
00000402 6100 0000                  		bsr.w	ShowErrorValue
00000406 2038 FC40                  		move.l	(v_spbuffer).w,d0
0000040A 6100 0000                  		bsr.w	ShowErrorValue
0000040E 6000                       		bra.s	loc_478
00000410                            ; ===========================================================================
00000410                            
00000410                            loc_462:
00000410 46FC 2700                  		disable_ints
00000414 48F8 FFFF FC00             		movem.l	d0-a7,(v_regbuffer).w
0000041A 6100 0000                  		bsr.w	ShowErrorMessage
0000041E 202F 0002                  		move.l	2(sp),d0
00000422 6100 0000                  		bsr.w	ShowErrorValue
00000426                            
00000426                            loc_478:
00000426 6100 0000                  		bsr.w	ErrorWaitForC
0000042A 4CF8 FFFF FC00             		movem.l	(v_regbuffer).w,d0-a7
00000430 46FC 2300                  		enable_ints
00000434 4E73                       		rte	
00000436                            
00000436                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00000436                            
00000436                            
00000436                            ShowErrorMessage:
00000436 4DF9 00C0 0000             		lea	(vdp_data_port).l,a6
00000446 41F9 0000 0000             		lea	(Art_Text).l,a0
0000044C 323C 027F                  		move.w	#$27F,d1
00000450                            	@loadgfx:
00000450 3C98                       		move.w	(a0)+,(a6)
00000452 51C9 FFFC                  		dbf	d1,@loadgfx
00000456                            
00000456 7000                       		moveq	#0,d0		; clear	d0
00000458 1038 FC44                  		move.b	(v_errortype).w,d0 ; load error code
0000045C 303B 0000                  		move.w	ErrorText(pc,d0.w),d0
00000460 41FB 0000                  		lea	ErrorText(pc,d0.w),a0
0000046E 7212                       		moveq	#$12,d1		; number of characters (minus 1)
00000470                            
00000470                            	@showchars:
00000470 7000                       		moveq	#0,d0
00000472 1018                       		move.b	(a0)+,d0
00000474 0640 0790                  		addi.w	#$790,d0
00000478 3C80                       		move.w	d0,(a6)
0000047A 51C9 FFF4                  		dbf	d1,@showchars	; repeat for number of characters
0000047E 4E75                       		rts	
00000480                            ; End of function ShowErrorMessage
00000480                            
00000480                            ; ===========================================================================
00000480 0000 0000                  ErrorText:	dc.w @exception-ErrorText, @bus-ErrorText
00000484 0000 0000                  		dc.w @address-ErrorText, @illinstruct-ErrorText
00000488 0000 0000                  		dc.w @zerodivide-ErrorText, @chkinstruct-ErrorText
0000048C 0000 0000                  		dc.w @trapv-ErrorText, @privilege-ErrorText
00000490 0000 0000                  		dc.w @trace-ErrorText, @line1010-ErrorText
00000494 0000                       		dc.w @line1111-ErrorText
00000496 4552 524F 5220 4558 4345+  @exception:	dc.b "ERROR EXCEPTION    "
000004A9 4255 5320 4552 524F 5220+  @bus:		dc.b "BUS ERROR          "
000004BC 4144 4452 4553 5320 4552+  @address:	dc.b "ADDRESS ERROR      "
000004CF 494C 4C45 4741 4C20 494E+  @illinstruct:	dc.b "ILLEGAL INSTRUCTION"
000004E2 4045 524F 2044 4956 4944+  @zerodivide:	dc.b "@ERO DIVIDE        "
000004F5 4348 4B20 494E 5354 5255+  @chkinstruct:	dc.b "CHK INSTRUCTION    "
00000508 5452 4150 5620 494E 5354+  @trapv:		dc.b "TRAPV INSTRUCTION  "
0000051B 5052 4956 494C 4547 4520+  @privilege:	dc.b "PRIVILEGE VIOLATION"
0000052E 5452 4143 4520 2020 2020+  @trace:		dc.b "TRACE              "
00000541 4C49 4E45 2031 3031 3020+  @line1010:	dc.b "LINE 1010 EMULATOR "
00000554 4C49 4E45 2031 3131 3120+  @line1111:	dc.b "LINE 1111 EMULATOR "
00000568 00                         		even
00000568                            
00000568                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00000568                            
00000568                            
00000568                            ShowErrorValue:
00000568 3CBC 07CA                  		move.w	#$7CA,(a6)	; display "$" symbol
0000056C 7407                       		moveq	#7,d2
0000056E                            
0000056E                            	@loop:
0000056E E998                       		rol.l	#4,d0
00000570 6100                       		bsr.s	@shownumber	; display 8 numbers
00000572 51CA FFFA                  		dbf	d2,@loop
00000576 4E75                       		rts	
00000578                            ; End of function ShowErrorValue
00000578                            
00000578                            
00000578                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00000578                            
00000578                            
00000578                            @shownumber:
00000578 3200                       		move.w	d0,d1
0000057A 0241 000F                  		andi.w	#$F,d1
0000057E 0C41 000A                  		cmpi.w	#$A,d1
00000582 6500                       		blo.s	@chars0to9
00000584 5E41                       		addq.w	#7,d1		; add 7 for characters A-F
00000586                            
00000586                            	@chars0to9:
00000586 0641 07C0                  		addi.w	#$7C0,d1
0000058A 3C81                       		move.w	d1,(a6)
0000058C 4E75                       		rts	
0000058E                            ; End of function sub_5CA
0000058E                            
0000058E                            
0000058E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000058E                            
0000058E                            
0000058E                            ErrorWaitForC:
0000058E 6100 0000                  		bsr.w	ReadJoypads
00000592 0C38 0020 F605             		cmpi.b	#btnC,(v_jpadpress1).w ; is button C pressed?
00000598 6600 FFF4                  		bne.w	ErrorWaitForC	; if not, branch
0000059C 4E75                       		rts	
0000059E                            ; End of function ErrorWaitForC
0000059E                            
0000059E                            ; ===========================================================================
0000059E                            
0000059E                            Art_Text:	incbin	"artunc\menutext.bin" ; text used in level select and debug mode
00000ABE                            		even
00000ABE                            
00000ABE                            ; ---------------------------------------------------------------------------
00000ABE                            ; Vertical interrupt
00000ABE                            ; ---------------------------------------------------------------------------
00000ABE                            
00000ABE                            VBlank:
00000ABE 48E7 FFFE                  		movem.l	d0-a6,-(sp)
00000AC2 4A38 F62A                  		tst.b	(v_vbla_routine).w
00000AC6 6700                       		beq.s	VBla_00
00000AC8 3039 00C0 0004             		move.w	(vdp_control_port).l,d0
00000ACE 23FC 4000 0010 00C0 0004   		move.l	#$40000010,(vdp_control_port).l
00000AD8 23F8 F616 00C0 0000        		move.l	(v_scrposy_dup).w,(vdp_data_port).l ; send screen y-axis pos. to VSRAM
00000AE0 0838 0006 FFF8             		btst	#6,(v_megadrive).w ; is Megadrive PAL?
00000AE6 6700                       		beq.s	@notPAL		; if not, branch
00000AE8                            
00000AE8 303C 0700                  		move.w	#$700,d0
00000AEC                            	@waitPAL:
00000AEC 51C8 FFFE                  		dbf	d0,@waitPAL ; wait here in a loop doing nothing for a while...
00000AF0                            
00000AF0                            	@notPAL:
00000AF0 1038 F62A                  		move.b	(v_vbla_routine).w,d0
00000AF4 11FC 0000 F62A             		move.b	#0,(v_vbla_routine).w
00000AFA 31FC 0001 F644             		move.w	#1,(f_hbla_pal).w
00000B00 0240 003E                  		andi.w	#$3E,d0
00000B04 303B 0000                  		move.w	VBla_Index(pc,d0.w),d0
00000B08 4EBB 0000                  		jsr	VBla_Index(pc,d0.w)
00000B0C                            
00000B0C                            VBla_Music:
00000B0C 4EB9 0000 0000             		jsr	(UpdateMusic).l
00000B12                            
00000B12                            VBla_Exit:
00000B12 52B8 FE0C                  		addq.l	#1,(v_vbla_count).w
00000B16 4CDF 7FFF                  		movem.l	(sp)+,d0-a6
00000B1A 4E73                       		rte	
00000B1C                            ; ===========================================================================
00000B1C 0000 0000                  VBla_Index:	dc.w VBla_00-VBla_Index, VBla_02-VBla_Index
00000B20 0000 0000                  		dc.w VBla_04-VBla_Index, VBla_06-VBla_Index
00000B24 0000 0000                  		dc.w VBla_08-VBla_Index, VBla_0A-VBla_Index
00000B28 0000 0000                  		dc.w VBla_0C-VBla_Index, VBla_0E-VBla_Index
00000B2C 0000 0000                  		dc.w VBla_10-VBla_Index, VBla_12-VBla_Index
00000B30 0000 0000                  		dc.w VBla_14-VBla_Index, VBla_16-VBla_Index
00000B34 0000                       		dc.w VBla_0C-VBla_Index
00000B36                            ; ===========================================================================
00000B36                            
00000B36                            VBla_00:
00000B36 0C38 0000 F600             		cmpi.b	#$80+id_Level,(v_gamemode).w
00000B3C 6700                       		beq.s	@islevel
00000B3E 0C38 0000 F600             		cmpi.b	#id_Level,(v_gamemode).w ; is game on a level?
00000B44 6600 FFC6                  		bne.w	VBla_Music	; if not, branch
00000B48                            
00000B48                            	@islevel:
00000B48 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w ; is level LZ ?
00000B4E 6600 FFBC                  		bne.w	VBla_Music	; if not, branch
00000B52                            
00000B52 3039 00C0 0004             		move.w	(vdp_control_port).l,d0
00000B58 0838 0006 FFF8             		btst	#6,(v_megadrive).w ; is Megadrive PAL?
00000B5E 6700                       		beq.s	@notPAL		; if not, branch
00000B60                            
00000B60 303C 0700                  		move.w	#$700,d0
00000B64                            	@waitPAL:
00000B64 51C8 FFFE                  		dbf	d0,@waitPAL
00000B68                            
00000B68                            	@notPAL:
00000B68 31FC 0001 F644             		move.w	#1,(f_hbla_pal).w ; set HBlank flag
00000B6E 33FC 0100 00A1 1100        		stopZ80
00000B76 0839 0000 00A1 1100 66F6   		waitZ80
00000B80 4A38 F64E                  		tst.b	(f_wtr_state).w	; is water above top of screen?
00000B84 6600                       		bne.s	@waterabove 	; if yes, branch
00000B86                            
00000B86 4BF9 00C0 0004 2ABC 9400+  		writeCRAM	v_pal_dry,$80,0
00000BAA 6000                       		bra.s	@waterbelow
00000BAC                            
00000BAC                            @waterabove:
00000BAC 4BF9 00C0 0004 2ABC 9400+  		writeCRAM	v_pal_water,$80,0
00000BD0                            
00000BD0                            	@waterbelow:
00000BD0 3AB8 F624                  		move.w	(v_hbla_hreg).w,(a5)
00000BD4 33FC 0000 00A1 1100        		startZ80
00000BDC 6000 FF2E                  		bra.w	VBla_Music
00000BE0                            ; ===========================================================================
00000BE0                            
00000BE0                            VBla_02:
00000BE0 6100 0000                  		bsr.w	sub_106E
00000BE4                            
00000BE4                            VBla_14:
00000BE4 4A78 F614                  		tst.w	(v_demolength).w
00000BE8 6700 0000                  		beq.w	@end
00000BEC 5378 F614                  		subq.w	#1,(v_demolength).w
00000BF0                            
00000BF0                            	@end:
00000BF0 4E75                       		rts	
00000BF2                            ; ===========================================================================
00000BF2                            
00000BF2                            VBla_04:
00000BF2 6100 0000                  		bsr.w	sub_106E
00000BF6 6100 0000                  		bsr.w	LoadTilesAsYouMove_BGOnly
00000BFA 4EB9 0000 0000             		jsr 	ProcessDMAQueue		
00000C00 6100 0000                  		bsr.w	sub_1642
00000C04 4A78 F614                  		tst.w	(v_demolength).w
00000C08 6700 0000                  		beq.w	@end
00000C0C 5378 F614                  		subq.w	#1,(v_demolength).w
00000C10                            
00000C10                            	@end:
00000C10 4E75                       		rts	
00000C12                            ; ===========================================================================
00000C12                            
00000C12                            VBla_06:
00000C12 6100 0000                  		bsr.w	sub_106E
00000C16 4E75                       		rts	
00000C18                            ; ===========================================================================
00000C18                            
00000C18                            VBla_10:
00000C18 0C38 0000 F600             		cmpi.b	#id_Special,(v_gamemode).w ; is game on special stage?
00000C1E 6700 0000                  		beq.w	VBla_0A		; if yes, branch
00000C22                            
00000C22                            VBla_08:
00000C22 33FC 0100 00A1 1100        		stopZ80
00000C2A 0839 0000 00A1 1100 66F6   		waitZ80
00000C34 6100 0000                  		bsr.w	ReadJoypads
00000C38 4A38 F64E                  		tst.b	(f_wtr_state).w
00000C3C 6600                       		bne.s	@waterabove
00000C3E                            
00000C3E 4BF9 00C0 0004 2ABC 9400+  		writeCRAM	v_pal_dry,$80,0
00000C62 6000                       		bra.s	@waterbelow
00000C64                            
00000C64                            @waterabove:
00000C64 4BF9 00C0 0004 2ABC 9400+  		writeCRAM	v_pal_water,$80,0
00000C88                            
00000C88                            	@waterbelow:
00000C88 3AB8 F624                  		move.w	(v_hbla_hreg).w,(a5)
00000C8C                            
00000C8C 4BF9 00C0 0004 2ABC 9401+  		writeVRAM	v_hscrolltablebuffer,$380,vram_hscroll
00000CB0 4BF9 00C0 0004 2ABC 9401+  		writeVRAM	v_spritetablebuffer,$280,vram_sprites
00000CD4 4EB9 0000 0000             		jsr	(ProcessDMAQueue).l
00000CDA                            
00000CDA                            	@nochg:
00000CDA 33FC 0000 00A1 1100        		startZ80
00000CE2 4CF8 00FF F700             		movem.l	(v_screenposx).w,d0-d7
00000CE8 48F8 00FF FF10             		movem.l	d0-d7,(v_screenposx_dup).w
00000CEE 4CF8 0003 F754             		movem.l	(v_fg_scroll_flags).w,d0-d1
00000CF4 48F8 0003 FF30             		movem.l	d0-d1,(v_fg_scroll_flags_dup).w
00000CFA 0C38 0060 F625             		cmpi.b	#96,(v_hbla_line).w
00000D00 6400                       		bhs.s	Demo_Time
00000D02 11FC 0001 F64F             		move.b	#1,($FFFFF64F).w
00000D08 588F                       		addq.l	#4,sp
00000D0A 6000 FE06                  		bra.w	VBla_Exit
00000D0E                            
00000D0E                            ; ---------------------------------------------------------------------------
00000D0E                            ; Subroutine to	run a demo for an amount of time
00000D0E                            ; ---------------------------------------------------------------------------
00000D0E                            
00000D0E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00000D0E                            
00000D0E                            
00000D0E                            Demo_Time:
00000D0E 6100 0000                  		bsr.w	LoadTilesAsYouMove
00000D12 4EB9 0000 0000             		jsr	(AnimateLevelGfx).l
00000D18 4EB9 0000 0000             		jsr	(HUD_Update).l
00000D1E 6100 0000                  		bsr.w	ProcessDPLC2
00000D22 4A78 F614                  		tst.w	(v_demolength).w ; is there time left on the demo?
00000D26 6700 0000                  		beq.w	@end		; if not, branch
00000D2A 5378 F614                  		subq.w	#1,(v_demolength).w ; subtract 1 from time left
00000D2E                            
00000D2E                            	@end:
00000D2E 4E75                       		rts	
00000D30                            ; End of function Demo_Time
00000D30                            
00000D30                            ; ===========================================================================
00000D30                            
00000D30                            VBla_0A:
00000D30 33FC 0100 00A1 1100        		stopZ80
00000D38 0839 0000 00A1 1100 66F6   		waitZ80
00000D42 6100 0000                  		bsr.w	ReadJoypads
00000D46 4BF9 00C0 0004 2ABC 9400+  		writeCRAM	v_pal_dry,$80,0
00000D6A 4BF9 00C0 0004 2ABC 9401+  		writeVRAM	v_spritetablebuffer,$280,vram_sprites
00000D8E 4BF9 00C0 0004 2ABC 9401+  		writeVRAM	v_hscrolltablebuffer,$380,vram_hscroll
00000DB2 33FC 0000 00A1 1100        		startZ80
00000DBA 6100 0000                  		bsr.w	PalCycle_SS
00000DBE 4EB9 0000 0000             		jsr	(ProcessDMAQueue).l
00000DC4                            
00000DC4                            	@nochg:
00000DC4 4A78 F614                  		tst.w	(v_demolength).w	; is there time left on the demo?
00000DC8 6700 0000                  		beq.w	@end	; if not, return
00000DCC 5378 F614                  		subq.w	#1,(v_demolength).w	; subtract 1 from time left in demo
00000DD0                            
00000DD0                            	@end:
00000DD0 4E75                       		rts	
00000DD2                            ; ===========================================================================
00000DD2                            
00000DD2                            VBla_0C:
00000DD2 33FC 0100 00A1 1100        		stopZ80
00000DDA 0839 0000 00A1 1100 66F6   		waitZ80
00000DE4 6100 0000                  		bsr.w	ReadJoypads
00000DE8 4A38 F64E                  		tst.b	(f_wtr_state).w
00000DEC 6600                       		bne.s	@waterabove
00000DEE                            
00000DEE 4BF9 00C0 0004 2ABC 9400+  		writeCRAM	v_pal_dry,$80,0
00000E12 6000                       		bra.s	@waterbelow
00000E14                            
00000E14                            @waterabove:
00000E14 4BF9 00C0 0004 2ABC 9400+  		writeCRAM	v_pal_water,$80,0
00000E38                            
00000E38                            	@waterbelow:
00000E38 3AB8 F624                  		move.w	(v_hbla_hreg).w,(a5)
00000E3C 4BF9 00C0 0004 2ABC 9401+  		writeVRAM	v_hscrolltablebuffer,$380,vram_hscroll
00000E60 4BF9 00C0 0004 2ABC 9401+  		writeVRAM	v_spritetablebuffer,$280,vram_sprites
00000E84 4EB9 0000 0000             		jsr	(ProcessDMAQueue).l
00000E8A                            
00000E8A                            	@nochg:
00000E8A 33FC 0000 00A1 1100        		startZ80
00000E92 4CF8 00FF F700             		movem.l	(v_screenposx).w,d0-d7
00000E98 48F8 00FF FF10             		movem.l	d0-d7,(v_screenposx_dup).w
00000E9E 4CF8 0003 F754             		movem.l	(v_fg_scroll_flags).w,d0-d1
00000EA4 48F8 0003 FF30             		movem.l	d0-d1,(v_fg_scroll_flags_dup).w
00000EAA 6100 0000                  		bsr.w	LoadTilesAsYouMove
00000EAE 4EB9 0000 0000             		jsr	(AnimateLevelGfx).l
00000EB4 4EB9 0000 0000             		jsr	(HUD_Update).l
00000EBA 6100 0000                  		bsr.w	sub_1642
00000EBE 4E75                       		rts	
00000EC0                            ; ===========================================================================
00000EC0                            
00000EC0                            VBla_0E:
00000EC0 6100 0000                  		bsr.w	sub_106E
00000EC4 5238 F628                  		addq.b	#1,($FFFFF628).w
00000EC8 11FC 000E F62A             		move.b	#$E,(v_vbla_routine).w
00000ECE 4E75                       		rts	
00000ED0                            ; ===========================================================================
00000ED0                            
00000ED0                            VBla_12:
00000ED0 6100 0000                  		bsr.w	sub_106E
00000ED4 3AB8 F624                  		move.w	(v_hbla_hreg).w,(a5)
00000ED8 6000 0000                  		bra.w	sub_1642
00000EDC                            ; ===========================================================================
00000EDC                            
00000EDC                            VBla_16:
00000EDC 33FC 0100 00A1 1100        		stopZ80
00000EE4 0839 0000 00A1 1100 66F6   		waitZ80
00000EEE 6100 0000                  		bsr.w	ReadJoypads
00000EF2 4BF9 00C0 0004 2ABC 9400+  		writeCRAM	v_pal_dry,$80,0
00000F16 4BF9 00C0 0004 2ABC 9401+  		writeVRAM	v_spritetablebuffer,$280,vram_sprites
00000F3A 4BF9 00C0 0004 2ABC 9401+  		writeVRAM	v_hscrolltablebuffer,$380,vram_hscroll
00000F5E 33FC 0000 00A1 1100        		startZ80
00000F66 4EB9 0000 0000             		jsr	(ProcessDMAQueue).l
00000F6C                            	@nochg:
00000F6C 4A78 F614                  		tst.w	(v_demolength).w
00000F70 6700 0000                  		beq.w	@end
00000F74 5378 F614                  		subq.w	#1,(v_demolength).w
00000F78                            
00000F78                            	@end:
00000F78 4E75                       		rts	
00000F7A                            
00000F7A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00000F7A                            
00000F7A                            
00000F7A                            sub_106E:
00000F7A 33FC 0100 00A1 1100        		stopZ80
00000F82 0839 0000 00A1 1100 66F6   		waitZ80
00000F8C 6100 0000                  		bsr.w	ReadJoypads
00000F90 4A38 F64E                  		tst.b	(f_wtr_state).w ; is water above top of screen?
00000F94 6600                       		bne.s	@waterabove	; if yes, branch
00000F96 4BF9 00C0 0004 2ABC 9400+  		writeCRAM	v_pal_dry,$80,0
00000FBA 6000                       		bra.s	@waterbelow
00000FBC                            
00000FBC                            	@waterabove:
00000FBC 4BF9 00C0 0004 2ABC 9400+  		writeCRAM	v_pal_water,$80,0
00000FE0                            
00000FE0                            	@waterbelow:
00000FE0 4BF9 00C0 0004 2ABC 9401+  		writeVRAM	v_spritetablebuffer,$280,vram_sprites
00001004 4BF9 00C0 0004 2ABC 9401+  		writeVRAM	v_hscrolltablebuffer,$380,vram_hscroll
00001028 33FC 0000 00A1 1100        		startZ80
00001030 4E75                       		rts	
00001032                            ; End of function sub_106E
00001032                            
00001032                            ; ---------------------------------------------------------------------------
00001032                            ; Horizontal interrupt
00001032                            ; ---------------------------------------------------------------------------
00001032                            
00001032                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001032                            
00001032                            
00001032                            HBlank:
00001032 46FC 2700                  		disable_ints
00001036 4A78 F644                  		tst.w	(f_hbla_pal).w	; is palette set to change?
0000103A 6700                       		beq.s	@nochg		; if not, branch
0000103C 31FC 0000 F644             		move.w	#0,(f_hbla_pal).w
00001042 48E7 00C0                  		movem.l	a0-a1,-(sp)
00001046 43F9 00C0 0000             		lea	(vdp_data_port).l,a1
0000104C 41F8 FA80                  		lea	(v_pal_water).w,a0 ; get palette from RAM
00001050 237C C000 0000 0004        		move.l	#$C0000000,4(a1) ; set VDP to CRAM write
00001058 2298                       		move.l	(a0)+,(a1)	; move palette to CRAM
0000105A 2298                       		move.l	(a0)+,(a1)
0000105C 2298                       		move.l	(a0)+,(a1)
0000105E 2298                       		move.l	(a0)+,(a1)
00001060 2298                       		move.l	(a0)+,(a1)
00001062 2298                       		move.l	(a0)+,(a1)
00001064 2298                       		move.l	(a0)+,(a1)
00001066 2298                       		move.l	(a0)+,(a1)
00001068 2298                       		move.l	(a0)+,(a1)
0000106A 2298                       		move.l	(a0)+,(a1)
0000106C 2298                       		move.l	(a0)+,(a1)
0000106E 2298                       		move.l	(a0)+,(a1)
00001070 2298                       		move.l	(a0)+,(a1)
00001072 2298                       		move.l	(a0)+,(a1)
00001074 2298                       		move.l	(a0)+,(a1)
00001076 2298                       		move.l	(a0)+,(a1)
00001078 2298                       		move.l	(a0)+,(a1)
0000107A 2298                       		move.l	(a0)+,(a1)
0000107C 2298                       		move.l	(a0)+,(a1)
0000107E 2298                       		move.l	(a0)+,(a1)
00001080 2298                       		move.l	(a0)+,(a1)
00001082 2298                       		move.l	(a0)+,(a1)
00001084 2298                       		move.l	(a0)+,(a1)
00001086 2298                       		move.l	(a0)+,(a1)
00001088 2298                       		move.l	(a0)+,(a1)
0000108A 2298                       		move.l	(a0)+,(a1)
0000108C 2298                       		move.l	(a0)+,(a1)
0000108E 2298                       		move.l	(a0)+,(a1)
00001090 2298                       		move.l	(a0)+,(a1)
00001092 2298                       		move.l	(a0)+,(a1)
00001094 2298                       		move.l	(a0)+,(a1)
00001096 2298                       		move.l	(a0)+,(a1)
00001098 337C 8ADF 0004             		move.w	#$8A00+223,4(a1) ; reset HBlank register
0000109E 4CDF 0300                  		movem.l	(sp)+,a0-a1
000010A2 4A38 F64F                  		tst.b	($FFFFF64F).w
000010A6 6600                       		bne.s	loc_119E
000010A8                            
000010A8                            	@nochg:
000010A8 4E73                       		rte	
000010AA                            ; ===========================================================================
000010AA                            
000010AA                            loc_119E:
000010AA 4238 F64F                  		clr.b	($FFFFF64F).w
000010AE 48E7 FFFE                  		movem.l	d0-a6,-(sp)
000010B2 6100 FC5A                  		bsr.w	Demo_Time
000010B6 4EB9 0000 0000             		jsr	(UpdateMusic).l
000010BC 4CDF 7FFF                  		movem.l	(sp)+,d0-a6
000010C0 4E73                       		rte	
000010C2                            ; End of function HBlank
000010C2                            
000010C2                            ; ---------------------------------------------------------------------------
000010C2                            ; Subroutine to	initialise joypads
000010C2                            ; ---------------------------------------------------------------------------
000010C2                            
000010C2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000010C2                            
000010C2                            
000010C2                            JoypadInit:
000010C2 33FC 0100 00A1 1100        		stopZ80
000010CA 0839 0000 00A1 1100 66F6   		waitZ80
000010D4 7040                       		moveq	#$40,d0
000010D6 13C0 00A1 0009             		move.b	d0,($A10009).l	; init port 1 (joypad 1)
000010DC 13C0 00A1 000B             		move.b	d0,($A1000B).l	; init port 2 (joypad 2)
000010E2 13C0 00A1 000D             		move.b	d0,($A1000D).l	; init port 3 (expansion/extra)
000010E8 33FC 0000 00A1 1100        		startZ80
000010F0 4E75                       		rts	
000010F2                            ; End of function JoypadInit
000010F2                            
000010F2                            ; ---------------------------------------------------------------------------
000010F2                            ; Subroutine to	read joypad input, and send it to the RAM
000010F2                            ; ---------------------------------------------------------------------------
000010F2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000010F2                            
000010F2                            
000010F2                            ReadJoypads:
000010F2 41F8 F604                  		lea	(v_jpadhold1).w,a0 ; address where joypad states are written
000010F6 43F9 00A1 0003             		lea	($A10003).l,a1	; first	joypad port
000010FC 6100                       		bsr.s	@read		; do the first joypad
000010FE 5449                       		addq.w	#2,a1		; do the second	joypad
00001100                            
00001100                            	@read:
00001100 12BC 0000                  		move.b	#0,(a1)
00001104 4E71                       		nop	
00001106 4E71                       		nop	
00001108 1011                       		move.b	(a1),d0
0000110A E508                       		lsl.b	#2,d0
0000110C 0200 00C0                  		andi.b	#$C0,d0
00001110 12BC 0040                  		move.b	#$40,(a1)
00001114 4E71                       		nop	
00001116 4E71                       		nop	
00001118 1211                       		move.b	(a1),d1
0000111A 0201 003F                  		andi.b	#$3F,d1
0000111E 8001                       		or.b	d1,d0
00001120 4600                       		not.b	d0
00001122 1210                       		move.b	(a0),d1
00001124 B101                       		eor.b	d0,d1
00001126 10C0                       		move.b	d0,(a0)+
00001128 C200                       		and.b	d0,d1
0000112A 10C1                       		move.b	d1,(a0)+
0000112C 4E75                       		rts	
0000112E                            ; End of function ReadJoypads
0000112E                            
0000112E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000112E                            
0000112E                            
0000112E                            VDPSetupGame:
0000112E 41F9 00C0 0004             		lea	(vdp_control_port).l,a0
00001134 43F9 00C0 0000             		lea	(vdp_data_port).l,a1
0000113A 45F9 0000 0000             		lea	(VDPSetupArray).l,a2
00001140 7E12                       		moveq	#$12,d7
00001142                            
00001142                            	@setreg:
00001142 309A                       		move.w	(a2)+,(a0)
00001144 51CF FFFC                  		dbf	d7,@setreg	; set the VDP registers
00001148                            
00001148 3039 0000 0000             		move.w	(VDPSetupArray+2).l,d0
0000114E 31C0 F60C                  		move.w	d0,(v_vdp_buffer1).w
00001152 31FC 8ADF F624             		move.w	#$8A00+223,(v_hbla_hreg).w	; H-INT every 224th scanline
00001158 7000                       		moveq	#0,d0
0000115A 23FC C000 0000 00C0 0004   		move.l	#$C0000000,(vdp_control_port).l ; set VDP to CRAM write
00001164 3E3C 003F                  		move.w	#$3F,d7
00001168                            
00001168                            	@clrCRAM:
00001168 3280                       		move.w	d0,(a1)
0000116A 51CF FFFC                  		dbf	d7,@clrCRAM	; clear	the CRAM
0000116E                            
0000116E 42B8 F616                  		clr.l	(v_scrposy_dup).w
00001172 42B8 F61A                  		clr.l	(v_scrposx_dup).w
00001176 2F01                       		move.l	d1,-(sp)
00001178 4BF9 00C0 0004 3ABC 8F01+  		fillVRAM	0,$FFFF,0
0000119A                            
0000119A                            	@waitforDMA:
0000119A 3215                       		move.w	(a5),d1
0000119C 0801 0001                  		btst	#1,d1		; is DMA (fillVRAM) still running?
000011A0 66F8                       		bne.s	@waitforDMA	; if yes, branch
000011A2                            
000011A2 3ABC 8F02                  		move.w	#$8F02,(a5)	; set VDP increment size
000011A6 221F                       		move.l	(sp)+,d1
000011A8 4E75                       		rts	
000011AA                            ; End of function VDPSetupGame
000011AA                            
000011AA                            ; ===========================================================================
000011AA 8004                       VDPSetupArray:	dc.w $8004		; 8-colour mode
000011AC 8134                       		dc.w $8134		; enable V.interrupts, enable DMA
000011AE 8230                       		dc.w $8200+(vram_fg>>10) ; set foreground nametable address
000011B0 8328                       		dc.w $8300+($A000>>10)	; set window nametable address
000011B2 8407                       		dc.w $8400+(vram_bg>>13) ; set background nametable address
000011B4 857C                       		dc.w $8500+(vram_sprites>>9) ; set sprite table address
000011B6 8600                       		dc.w $8600		; unused
000011B8 8700                       		dc.w $8700		; set background colour (palette entry 0)
000011BA 8800                       		dc.w $8800		; unused
000011BC 8900                       		dc.w $8900		; unused
000011BE 8A00                       		dc.w $8A00		; default H.interrupt register
000011C0 8B00                       		dc.w $8B00		; full-screen vertical scrolling
000011C2 8C81                       		dc.w $8C81		; 40-cell display mode
000011C4 8D3F                       		dc.w $8D00+(vram_hscroll>>10) ; set background hscroll address
000011C6 8E00                       		dc.w $8E00		; unused
000011C8 8F02                       		dc.w $8F02		; set VDP increment size
000011CA 9001                       		dc.w $9001		; 64-cell hscroll size
000011CC 9100                       		dc.w $9100		; window horizontal position
000011CE 9200                       		dc.w $9200		; window vertical position
000011D0                            
000011D0                            ; ---------------------------------------------------------------------------
000011D0                            ; Subroutine to	clear the screen
000011D0                            ; ---------------------------------------------------------------------------
000011D0                            
000011D0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000011D0                            
000011D0                            
000011D0                            ClearScreen:
000011D0 4BF9 00C0 0004 3ABC 8F01+  		fillVRAM	0,$FFF,vram_fg ; clear foreground namespace
000011F2                            
000011F2                            	@wait1:
000011F2 3215                       		move.w	(a5),d1
000011F4 0801 0001                  		btst	#1,d1
000011F8 66F8                       		bne.s	@wait1
000011FA                            
000011FA 3ABC 8F02                  		move.w	#$8F02,(a5)
000011FE 4BF9 00C0 0004 3ABC 8F01+  		fillVRAM	0,$FFF,vram_bg ; clear background namespace
00001220                            
00001220                            	@wait2:
00001220 3215                       		move.w	(a5),d1
00001222 0801 0001                  		btst	#1,d1
00001226 66F8                       		bne.s	@wait2
00001228                            
00001228 3ABC 8F02                  		move.w	#$8F02,(a5)
0000122C 42B8 F616                  		clr.l	(v_scrposy_dup).w
00001230 42B8 F61A                  		clr.l	(v_scrposx_dup).w
00001234                            
00001234 43F8 F800                  		lea	(v_spritetablebuffer).w,a1
00001238 7000                       		moveq	#0,d0
0000123A 323C 00A0                  		move.w	#($280/4),d1	; This should be ($280/4)-1, leading to a slight bug (first bit of v_pal_water is cleared)
0000123E                            
0000123E                            	@clearsprites:
0000123E 22C0                       		move.l	d0,(a1)+
00001240 51C9 FFFC                  		dbf	d1,@clearsprites ; clear sprite table (in RAM)
00001244                            
00001244 43F8 CC00                  		lea	(v_hscrolltablebuffer).w,a1
00001248 7000                       		moveq	#0,d0
0000124A 323C 0100                  		move.w	#($400/4),d1	; This should be ($400/4)-1, leading to a slight bug (first bit of the Sonic object's RAM is cleared)
0000124E                            
0000124E                            	@clearhscroll:
0000124E 22C0                       		move.l	d0,(a1)+
00001250 51C9 FFFC                  		dbf	d1,@clearhscroll ; clear hscroll table (in RAM)
00001254 4E75                       		rts	
00001256                            ; End of function ClearScreen
00001256                            
00001256                            ; ---------------------------------------------------------------------------
00001256                            ; Subroutine to	load the sound driver
00001256                            ; ---------------------------------------------------------------------------
00001256                            
00001256                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001256                            
00001256                            
00001256                            SoundDriverLoad:
00001256 4E71                       		nop	
00001258 33FC 0100 00A1 1100        		stopZ80
00001260 33FC 0100 00A1 1200        		resetZ80
00001268 41F9 0000 0000             		lea	(Kos_Z80).l,a0	; load sound driver
0000126E 43F9 00A0 0000             		lea	(z80_ram).l,a1	; target Z80 RAM
00001274 6100 0000                  		bsr.w	KosDec		; decompress
00001278 33FC 0000 00A1 1200        		resetZ80a
00001280 4E71                       		nop	
00001282 4E71                       		nop	
00001284 4E71                       		nop	
00001286 4E71                       		nop	
00001288 33FC 0100 00A1 1200        		resetZ80
00001290 33FC 0000 00A1 1100        		startZ80
00001298 4E75                       		rts	
0000129A                            ; End of function SoundDriverLoad
0000129A                            
0000129A                            		include	"_incObj\sub PlaySound.asm"
0000129A                            ; ---------------------------------------------------------------------------
0000129A                            ; Subroutine to	play a music track
0000129A                            
0000129A                            ; input:
0000129A                            ;	d0 = track to play
0000129A                            ; ---------------------------------------------------------------------------
0000129A                            
0000129A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000129A                            
0000129A                            
0000129A                            PlaySound:
0000129A 11C0 F00A                  		move.b	d0,(v_snddriver_ram+v_soundqueue0).w
0000129E 4E75                       		rts	
000012A0                            ; End of function PlaySound
000012A0                            
000012A0                            ; ---------------------------------------------------------------------------
000012A0                            ; Subroutine to	play a sound effect
000012A0                            ; ---------------------------------------------------------------------------
000012A0                            
000012A0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000012A0                            
000012A0                            
000012A0                            PlaySound_Special:
000012A0 11C0 F00B                  		move.b	d0,(v_snddriver_ram+v_soundqueue1).w
000012A4 4E75                       		rts	
000012A6                            ; End of function PlaySound_Special
000012A6                            
000012A6                            ; ===========================================================================
000012A6                            ; ---------------------------------------------------------------------------
000012A6                            ; Unused sound/music subroutine
000012A6                            ; ---------------------------------------------------------------------------
000012A6                            
000012A6                            PlaySound_Unused:
000012A6 11C0 F00C                  		move.b	d0,(v_snddriver_ram+v_soundqueue2).w
000012AA 4E75                       		rts	
000012AA 4E75                       		rts	
000012AC                            		include	"_inc\PauseGame.asm"
000012AC                            ; ---------------------------------------------------------------------------
000012AC                            ; Subroutine to	pause the game
000012AC                            ; ---------------------------------------------------------------------------
000012AC                            
000012AC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000012AC                            
000012AC                            
000012AC                            PauseGame:
000012AC 4E71                       		nop	
000012AE 4A38 FE12                  		tst.b	(v_lives).w	; do you have any lives	left?
000012B2 6700                       		beq.s	Unpause		; if not, branch
000012B4 4A78 F63A                  		tst.w	(f_pause).w	; is game already paused?
000012B8 6600                       		bne.s	Pause_StopGame	; if yes, branch
000012BA 0838 0007 F605             		btst	#bitStart,(v_jpadpress1).w ; is Start button pressed?
000012C0 6700                       		beq.s	Pause_DoNothing	; if not, branch
000012C2                            
000012C2                            Pause_StopGame:
000012C2 31FC 0001 F63A             		move.w	#1,(f_pause).w	; freeze time
000012C8 11FC 0001 F003             		move.b	#1,(v_snddriver_ram+f_pausemusic).w ; pause music
000012CE                            
000012CE                            Pause_Loop:
000012CE 11FC 0010 F62A             		move.b	#$10,(v_vbla_routine).w
000012D4 6100 0000                  		bsr.w	WaitForVBla
000012D8 4A38 FFE1                  		tst.b	(f_slomocheat).w ; is slow-motion cheat on?
000012DC 6700                       		beq.s	Pause_ChkStart	; if not, branch
000012DE 0838 0006 F605             		btst	#bitA,(v_jpadpress1).w ; is button A pressed?
000012E4 6700                       		beq.s	Pause_ChkBC	; if not, branch
000012E6 11FC 0000 F600             		move.b	#id_Title,(v_gamemode).w ; set game mode to 4 (title screen)
000012EC 4E71                       		nop	
000012EE 6000                       		bra.s	Pause_EndMusic
000012F0                            ; ===========================================================================
000012F0                            
000012F0                            Pause_ChkBC:
000012F0 0838 0004 F604             		btst	#bitB,(v_jpadhold1).w ; is button B pressed?
000012F6 6600                       		bne.s	Pause_SlowMo	; if yes, branch
000012F8 0838 0005 F605             		btst	#bitC,(v_jpadpress1).w ; is button C pressed?
000012FE 6600                       		bne.s	Pause_SlowMo	; if yes, branch
00001300                            
00001300                            Pause_ChkStart:
00001300 0838 0007 F605             		btst	#bitStart,(v_jpadpress1).w ; is Start button pressed?
00001306 67C6                       		beq.s	Pause_Loop	; if not, branch
00001308                            
00001308                            Pause_EndMusic:
00001308 11FC 0080 F003             		move.b	#$80,(v_snddriver_ram+f_pausemusic).w	; unpause the music
0000130E                            
0000130E                            Unpause:
0000130E 31FC 0000 F63A             		move.w	#0,(f_pause).w	; unpause the game
00001314                            
00001314                            Pause_DoNothing:
00001314 4E75                       		rts	
00001316                            ; ===========================================================================
00001316                            
00001316                            Pause_SlowMo:
00001316 31FC 0001 F63A             		move.w	#1,(f_pause).w
0000131C 11FC 0080 F003             		move.b	#$80,(v_snddriver_ram+f_pausemusic).w	; Unpause the music
00001322 4E75                       		rts	
00001324                            ; End of function PauseGame
00001324                            ; End of function PauseGame
00001324                            
00001324                            ; ---------------------------------------------------------------------------
00001324                            ; Subroutine to	copy a tile map from RAM to VRAM namespace
00001324                            
00001324                            ; input:
00001324                            ;	a1 = tile map address
00001324                            ;	d0 = VRAM address
00001324                            ;	d1 = width (cells)
00001324                            ;	d2 = height (cells)
00001324                            ; ---------------------------------------------------------------------------
00001324                            
00001324                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001324                            
00001324                            
00001324                            TilemapToVRAM:
00001324 4DF9 00C0 0000             		lea	(vdp_data_port).l,a6
0000132A 283C 0080 0000             		move.l	#$800000,d4
00001330                            
00001330                            	Tilemap_Line:
00001330 2D40 0004                  		move.l	d0,4(a6)	; move d0 to VDP_control_port
00001334 3601                       		move.w	d1,d3
00001336                            
00001336                            	Tilemap_Cell:
00001336 3C99                       		move.w	(a1)+,(a6)	; write value to namespace
00001338 51CB FFFC                  		dbf	d3,Tilemap_Cell	; next tile
0000133C D084                       		add.l	d4,d0		; goto next line
0000133E 51CA FFF0                  		dbf	d2,Tilemap_Line	; next line
00001342 4E75                       		rts	
00001344                            ; End of function TilemapToVRAM
00001344                            
00001344                            		include	"_inc\Nemesis Decompression.asm"
00001344                            ; ==============================================================================
00001344                            ; ------------------------------------------------------------------------------
00001344                            ; Nemesis decompression routine
00001344                            ; ------------------------------------------------------------------------------
00001344                            ; Optimized by vladikcomper
00001344                            ; ------------------------------------------------------------------------------
00001344                             
00001344                            NemDec_RAM:
00001344 48E7 FFDE                      movem.l d0-a1/a3-a6,-(sp)
00001348 47FA 0000                      lea NemDec_WriteRowToRAM(pc),a3
0000134C 6000                           bra.s   NemDec_Main
0000134E                             
0000134E                            ; ------------------------------------------------------------------------------
0000134E                            NemDec:
0000134E 48E7 FFDE                      movem.l d0-a1/a3-a6,-(sp)
00001352 49F9 00C0 0000                 lea $C00000,a4      ; load VDP Data Port     
00001358 47FA 0000                      lea NemPCD_WriteRowToVDP(pc),a3
0000135C                             
0000135C                            NemDec_Main:
0000135C 43F8 AA00                      lea $FFFFAA00,a1        ; load Nemesis decompression buffer
00001360 3418                           move.w  (a0)+,d2        ; get number of patterns
00001362 6A00                           bpl.s   @0          ; are we in Mode 0?
00001364 47EB 000A                      lea $A(a3),a3       ; if not, use Mode 1
00001368 E74A                       @0  lsl.w   #3,d2
0000136A 3A42                           movea.w d2,a5
0000136C 7607                           moveq   #7,d3
0000136E 7400                           moveq   #0,d2
00001370 7800                           moveq   #0,d4
00001372 6100 0000                      bsr.w   NemDec_BuildCodeTable
00001376 1A18                           move.b  (a0)+,d5        ; get first byte of compressed data
00001378 E145                           asl.w   #8,d5           ; shift up by a byte
0000137A 1A18                           move.b  (a0)+,d5        ; get second byte of compressed data
0000137C 3C3C 0010                      move.w  #$10,d6         ; set initial shift value
00001380 6100                           bsr.s   NemDec2
00001382 4CDF 7BFF                      movem.l (sp)+,d0-a1/a3-a6
00001386 4E75                           rts
00001388                             
00001388                            ; ---------------------------------------------------------------------------
00001388                            ; Part of the Nemesis decompressor, processes the actual compressed data
00001388                            ; ---------------------------------------------------------------------------
00001388                             
00001388                            NemDec2:
00001388 3E06                           move.w  d6,d7
0000138A 5147                           subq.w  #8,d7           ; get shift value
0000138C 3205                           move.w  d5,d1
0000138E EE69                           lsr.w   d7,d1           ; shift so that high bit of the code is in bit position 7
00001390 0C01 00FC                      cmpi.b  #%11111100,d1       ; are the high 6 bits set?
00001394 6400                           bcc.s   NemDec_InlineData   ; if they are, it signifies inline data
00001396 0241 00FF                      andi.w  #$FF,d1
0000139A D241                           add.w   d1,d1
0000139C 9C31 1000                      sub.b   (a1,d1.w),d6        ; ~~ subtract from shift value so that the next code is read next time around
000013A0 0C46 0009                      cmpi.w  #9,d6           ; does a new byte need to be read?
000013A4 6400                           bcc.s   @0          ; if not, branch
000013A6 5046                           addq.w  #8,d6
000013A8 E145                           asl.w   #8,d5
000013AA 1A18                           move.b  (a0)+,d5        ; read next byte
000013AC 1231 1001                  @0  move.b  1(a1,d1.w),d1
000013B0 3001                           move.w  d1,d0
000013B2 0241 000F                      andi.w  #$F,d1          ; get palette index for pixel
000013B6 0240 00F0                      andi.w  #$F0,d0
000013BA                             
000013BA                            NemDec_GetRepeatCount:
000013BA E848                           lsr.w   #4,d0           ; get repeat count
000013BC                             
000013BC                            NemDec_WritePixel:
000013BC E98C                           lsl.l   #4,d4           ; shift up by a nybble
000013BE 8801                           or.b    d1,d4           ; write pixel
000013C0 51CB 0000                      dbf d3,NemDec_WritePixelLoop; ~~
000013C4 4ED3                           jmp (a3)            ; otherwise, write the row to its destination
000013C6                            ; ---------------------------------------------------------------------------
000013C6                             
000013C6                            NemPCD_NewRow:
000013C6 7800                           moveq   #0,d4           ; reset row
000013C8 7607                           moveq   #7,d3           ; reset nybble counter
000013CA                             
000013CA                            NemDec_WritePixelLoop:
000013CA 51C8 FFF0                      dbf d0,NemDec_WritePixel
000013CE 60B8                           bra.s   NemDec2
000013D0                            ; ---------------------------------------------------------------------------
000013D0                             
000013D0                            NemDec_InlineData:
000013D0 5D46                           subq.w  #6,d6           ; 6 bits needed to signal inline data
000013D2 0C46 0009                      cmpi.w  #9,d6
000013D6 6400                           bcc.s   @0
000013D8 5046                           addq.w  #8,d6
000013DA E145                           asl.w   #8,d5
000013DC 1A18                           move.b  (a0)+,d5
000013DE 5F46                       @0  subq.w  #7,d6           ; and 7 bits needed for the inline data itself
000013E0 3205                           move.w  d5,d1
000013E2 EC69                           lsr.w   d6,d1           ; shift so that low bit of the code is in bit position 0
000013E4 3001                           move.w  d1,d0
000013E6 0241 000F                      andi.w  #$F,d1          ; get palette index for pixel
000013EA 0240 0070                      andi.w  #$70,d0         ; high nybble is repeat count for pixel
000013EE 0C46 0009                      cmpi.w  #9,d6
000013F2 64C6                           bcc.s   NemDec_GetRepeatCount
000013F4 5046                           addq.w  #8,d6
000013F6 E145                           asl.w   #8,d5
000013F8 1A18                           move.b  (a0)+,d5
000013FA 60BE                           bra.s   NemDec_GetRepeatCount
000013FC                             
000013FC                            ; ---------------------------------------------------------------------------
000013FC                            ; Subroutines to output decompressed entry
000013FC                            ; Selected depending on current decompression mode
000013FC                            ; ---------------------------------------------------------------------------
000013FC                             
000013FC                            NemPCD_WriteRowToVDP:
000013FC                            loc_1502:
000013FC 2884                           move.l  d4,(a4)         ; write 8-pixel row
000013FE 534D                           subq.w  #1,a5
00001400 380D                           move.w  a5,d4           ; have all the 8-pixel rows been written?
00001402 66C2                           bne.s   NemPCD_NewRow         ; if not, branch
00001404 4E75                           rts
00001406                            ; ---------------------------------------------------------------------------
00001406                             
00001406                            NemPCD_WriteRowToVDP_XOR:
00001406 B982                           eor.l   d4,d2           ; XOR the previous row by the current row
00001408 2882                           move.l  d2,(a4)         ; and write the result
0000140A 534D                           subq.w  #1,a5
0000140C 380D                           move.w  a5,d4
0000140E 66B6                           bne.s   NemPCD_NewRow
00001410 4E75                           rts
00001412                            ; ---------------------------------------------------------------------------
00001412                             
00001412                            NemDec_WriteRowToRAM:
00001412 28C4                           move.l  d4,(a4)+        ; write 8-pixel row
00001414 534D                           subq.w  #1,a5
00001416 380D                           move.w  a5,d4           ; have all the 8-pixel rows been written?
00001418 66AC                           bne.s   NemPCD_NewRow         ; if not, branch
0000141A 4E75                           rts
0000141C                            ; ---------------------------------------------------------------------------
0000141C                             
0000141C                            NemDec_WriteRowToRAM_XOR:
0000141C B982                           eor.l   d4,d2           ; XOR the previous row by the current row
0000141E 28C2                           move.l  d2,(a4)+        ; and write the result
00001420 534D                           subq.w  #1,a5
00001422 380D                           move.w  a5,d4
00001424 66A0                           bne.s   NemPCD_NewRow
00001426 4E75                           rts
00001428                             
00001428                            ; ---------------------------------------------------------------------------
00001428                            ; Part of the Nemesis decompressor, builds the code table (in RAM)
00001428                            ; ---------------------------------------------------------------------------
00001428                             
00001428                            NemDec_BuildCodeTable:
00001428 1018                           move.b  (a0)+,d0        ; read first byte
0000142A                             
0000142A                            @ChkEnd:
0000142A 0C00 00FF                      cmpi.b  #$FF,d0         ; has the end of the code table description been reached?
0000142E 6600                           bne.s   @NewPalIndex        ; if not, branch
00001430 4E75                           rts
00001432                            ; ---------------------------------------------------------------------------
00001432                             
00001432                            @NewPalIndex:
00001432 3E00                           move.w  d0,d7
00001434                             
00001434                            @ItemLoop:
00001434 1018                           move.b  (a0)+,d0        ; read next byte
00001436 6BF2                           bmi.s   @ChkEnd         ; ~~
00001438 1200                           move.b  d0,d1
0000143A 0247 000F                      andi.w  #$F,d7          ; get palette index
0000143E 0241 0070                      andi.w  #$70,d1         ; get repeat count for palette index
00001442 8E41                           or.w    d1,d7           ; combine the two
00001444 0240 000F                      andi.w  #$F,d0          ; get the length of the code in bits
00001448 1200                           move.b  d0,d1
0000144A E149                           lsl.w   #8,d1
0000144C 8E41                           or.w    d1,d7           ; combine with palette index and repeat count to form code table entry
0000144E 7208                           moveq   #8,d1
00001450 9240                           sub.w   d0,d1           ; is the code 8 bits long?
00001452 6600                           bne.s   @ItemShortCode      ; if not, a bit of extra processing is needed
00001454 1018                           move.b  (a0)+,d0        ; get code
00001456 D040                           add.w   d0,d0           ; each code gets a word-sized entry in the table
00001458 3387 0000                      move.w  d7,(a1,d0.w)        ; store the entry for the code
0000145C 60D6                           bra.s   @ItemLoop       ; repeat
0000145E                            ; ---------------------------------------------------------------------------
0000145E                             
0000145E                            @ItemShortCode:
0000145E 1018                           move.b  (a0)+,d0        ; get code
00001460 E368                           lsl.w   d1,d0           ; shift so that high bit is in bit position 7
00001462 D040                           add.w   d0,d0           ; get index into code table
00001464 7A01                           moveq   #1,d5
00001466 E36D                           lsl.w   d1,d5
00001468 5345                           subq.w  #1,d5           ; d5 = 2^d1 - 1
0000146A 4DF1 0000                      lea (a1,d0.w),a6        ; ~~
0000146E                             
0000146E                            @ItemShortCodeLoop:
0000146E 3CC7                           move.w  d7,(a6)+        ; ~~ store entry
00001470 51CD FFFC                      dbf d5,@ItemShortCodeLoop   ; repeat for required number of entries
00001474 60BE                           bra.s   @ItemLoop
00001474 60BE                           bra.s   @ItemLoop
00001476                            
00001476                              
00001476                                pusho	; buffer local label symbol config
00001476                                opt ws+  ; change local label symbol to '.'
00001476                            
00001476                            ; ---------------------------------------------------------------------------
00001476                            ; MACRO ResetDMAQueue
00001476                            ; Clears the DMA queue, discarding all previously-queued DMAs.
00001476                            ; ---------------------------------------------------------------------------
00001476                            ; ROUTINE Process_DMA_Queue / ProcessDMAQueue
00001476                            ; Performs all queued DMA transfers and clears the DMA queue.
00001476                            ;
00001476                            ; Output:
00001476                            ; 	a1,a5	trashed
00001476                            ; ---------------------------------------------------------------------------
00001476                            ; ROUTINE InitDMAQueue
00001476                            ; Pre-initializes the DMA queue with VDP register numbers in alternating bytes.
00001476                            ; Must be called before the queue is used, and the queue expects that only it
00001476                            ; write to this region of RAM.
00001476                            ;
00001476                            ; Output:
00001476                            ; 	a0,d0,d1	trashed
00001476                            ; ---------------------------------------------------------------------------
00001476                            ; ROUTINE Add_To_DMA_Queue / QueueDMATransfer
00001476                            ; Queues a DMA with parameters given in registers.
00001476                            ;
00001476                            ; Options:
00001476                            ; 	AssumeSourceAddressInBytes (default 1)
00001476                            ; 	AssumeSourceAddressIsRAMSafe (default 0)
00001476                            ; 	UseRAMSourceSafeDMA (default 1&(AssumeSourceAddressIsRAMSafe=0))
00001476                            ; 	Use128kbSafeDMA (default 0)
00001476                            ; 	UseVIntSafeDMA (default 0)
00001476                            ; Input:
00001476                            ; 	d1	Source address (in bytes, or in words if AssumeSourceAddressInBytes is
00001476                            ; 		set to 0)
00001476                            ; 	d2	Destination address
00001476                            ; 	d3	Transfer length (in words)
00001476                            ; Output:
00001476                            ; 	d0,d1,d2,d3,a1	trashed
00001476                            ;
00001476                            ; With the default settings, runs in:
00001476                            ; * 48(11/0) cycles if queue is full (DMA discarded)
00001476                            ; * 184(29/9) cycles otherwise (DMA queued)
00001476                            ;
00001476                            ; With Use128kbSafeDMA = 1, runs in:
00001476                            ; * 48(11/0) cycles if queue is full at the start (DMA discarded)
00001476                            ; * 200(32/9) cycles if the DMA does not cross a 128kB boundary (DMA queued)
00001476                            ; * 226(38/9) cycles if the DMA crosses a 128kB boundary, and the first piece
00001476                            ;   fills the queue (second piece is discarded)
00001476                            ; * 338(56/17) cycles if the DMA crosses a 128kB boundary, and the queue has
00001476                            ;   space for both pieces (both pieces queued)
00001476                            ;
00001476                            ; Setting UseVIntSafeDMA to 1 adds 46(6/1) cycles to all times.
00001476                            ;
00001476                            ; Setting AssumeSourceAddressInBytes to 0 reduces all times by 10(1/0) cycles,
00001476                            ; but only if the DMA is not entirely discarded. However, all callers must be
00001476                            ; edited to make sure the adresss given is correct.
00001476                            ;
00001476                            ; Setting AssumeSourceAddressIsRAMSafe to 1, or UseRAMSourceSafeDMA to 0,
00001476                            ; reduces all times by 14(2/0) cycles, but only if the DMA is not entirely
00001476                            ; discarded. However, all callers must be edited to make sure the adresss given
00001476                            ; in the correct form. You can use the dmaSource function for that.
00001476                            ; ---------------------------------------------------------------------------
00001476                            ; MACRO QueueStaticDMA
00001476                            ; Directly queues a DMA on the spot. Requires all parameters to be known at
00001476                            ; assembly time; that is, no registers. Gives assembly errors when the DMA
00001476                            ; crosses a 128kB boundary, is at an odd ROM location, or is zero length.
00001476                            ;
00001476                            ; Options:
00001476                            ; 	UseVIntSafeDMA (default 0)
00001476                            ; Input:
00001476                            ; 	Source address (in bytes), transfer length (in bytes), destination address
00001476                            ; Output:
00001476                            ; 	d0,a1	trashed
00001476                            ;
00001476                            ; With the default settings, runs in:
00001476                            ; * 32(7/0) cycles if queue is full (DMA discarded)
00001476                            ; * 122(21/8) cycles otherwise (DMA queued)
00001476                            ;
00001476                            ; Setting UseVIntSafeDMA to 1 adds 46(6/1) cycles to both cases.
00001476                            ; ===========================================================================
00001476                            ; option: AssumeSourceAddressInBytes
00001476                            ;
00001476                            ; This option makes the function work as a drop-in replacement of the original
00001476                            ; functions. If you modify all callers to supply a position in words instead of
00001476                            ; bytes (i.e., divide source address by 2) you can set this to 0 to gain 10(1/0)
00001476 =00000001                  AssumeSourceAddressInBytes = 1
00001476                            ; ===========================================================================
00001476                            ; option: AssumeSourceAddressIsRAMSafe
00001476                            ;
00001476                            ; This option (which is disabled by default) makes the DMA queue assume that the
00001476                            ; source address is given to the function in a way that makes them safe to use
00001476                            ; with RAM sources. You need to edit all callers to ensure this.
00001476                            ; Enabling this option turns off UseRAMSourceSafeDMA, and saves 14(2/0).
00001476 =00000000                  AssumeSourceAddressIsRAMSafe = 0
00001476                            ; ===========================================================================
00001476                            ; option: UseRAMSourceSafeDMA
00001476                            ;
00001476                            ; This option (which is enabled by default) makes source addresses in RAM safe
00001476                            ; at the cost of 14(2/0). If you modify all callers so as to clear the top byte
00001476                            ; of source addresses (i.e., by ANDing them with $FFFFFF).
00001476 =00000001                  UseRAMSourceSafeDMA = 1&(AssumeSourceAddressIsRAMSafe=0)
00001476                            ; ===========================================================================
00001476                            ; option: Use128kbSafeDMA
00001476                            ;
00001476                            ; This option breaks DMA transfers that crosses a 128kB block into two. It is
00001476                            ; disabled by default because you can simply align the art in ROM and avoid the
00001476                            ; issue altogether. It is here so that you have a high-performance routine to do
00001476                            ; the job in situations where you can't align it in ROM.
00001476 =00000001                  Use128kbSafeDMA = 1
00001476                            ; ===========================================================================
00001476                            ; option UseVIntSafeDMA
00001476                            ;
00001476                            ; Option to mask interrupts while updating the DMA queue. This fixes many race
00001476                            ; conditions in the DMA funcion, but it costs 46(6/1) cycles. The better way to
00001476                            ; handle these race conditions would be to make unsafe callers (such as S3&K's
00001476                            ; KosM decoder) prevent these by masking off interrupts before calling and then
00001476                            ; restore interrupts after.
00001476 =00000000                  UseVIntSafeDMA = 0
00001476                            ; ===========================================================================
00001476                            
00001476                            
00001476                            ; Convenience macros, for increased maintainability of the code.
00001476 =00000027                  DMA = %100111
00001476 =00000021                  VRAM = %100001
00001476                            ; Like vdpComm, but starting from an address contained in a register
00001476 =00000001                  vdpCommReg_defined = 1
00001476                            vdpCommReg macro reg,type,rwd,clr
00001476                            	lsl.l	#2,\reg							; Move high bits into (word-swapped) position, accidentally moving everything else
00001476                            	if ((\type&\rwd)&3)<>0
00001476                            		addq.w	#((\type&\rwd)&3),\reg			; Add upper access type bits
00001476                            	endif
00001476                            	ror.w	#2,\reg							; Put upper access type bits into place, also moving all other bits into their correct (word-swapped) places
00001476                            	swap	\reg								; Put all bits in proper places
00001476                            	if \clr <> 0
00001476                            		andi.w	#3,\reg						; Strip whatever junk was in upper word of reg
00001476                            	endif
00001476                            	if ((\type&\rwd)&$FC)=$20
00001476                            		tas.b	\reg							; Add in the DMA flag -- tas fails on memory, but works on registers
00001476                            	elseif ((\type&\rwd)&$FC)<>0
00001476                            		ori.w	#(((\type&\rwd)&$FC)<<2),\reg	; Add in missing access type bits
00001476                            	endif
00001476                            	endm
00001476                            ; ---------------------------------------------------------------------------
00001476 =00000001                  intMacros_defined = 1
00001476                            enableInts macro
00001476                            	move	#$2300,sr
00001476                            	endm
00001476                            
00001476                            disableInts macro
00001476                            	move	#$2700,sr
00001476                            	endm
00001476                            ; ---------------------------------------------------------------------------
00001476 =00000001                  DMAEntry_defined = 1
00001476                                    rsreset
00001476 =00000000                  DMAEntry.Reg94:		rs.b	1
00001476                            			  
00001476 =00000001                  DMAEntry.Size:      rs.b    0
00001476 =00000001                  DMAEntry.SizeH:		rs.b	1
00001476 =00000002                  DMAEntry.Reg93:		rs.b	1
00001476 =00000003                  DMAEntry.Source:    rs.b    0
00001476 =00000003                  DMAEntry.SizeL:		rs.b	1
00001476 =00000004                  DMAEntry.Reg97:		rs.b	1
00001476 =00000005                  DMAEntry.SrcH:		rs.b	1
00001476 =00000006                  DMAEntry.Reg96:		rs.b	1
00001476 =00000007                  DMAEntry.SrcM:		rs.b	1
00001476 =00000008                  DMAEntry.Reg95:		rs.b	1
00001476 =00000009                  DMAEntry.SrcL:		rs.b	1
00001476 =0000000A                  DMAEntry.Command:	rs.l	1
00001476 =0000000E                  DMAEntry.len:   rs.w    0
00001476                            ; ---------------------------------------------------------------------------
00001476 =00000012                  QueueSlotCount = (VDP_Command_Buffer_Slot-VDP_Command_Buffer)/DMAEntry.len
00001476                            ; ---------------------------------------------------------------------------
00001476                            						
00001476                            										   
00001476                            									   
00001476                            	  
00001476                            																			 
00001476                            							  
00001476 =00000001                  QueueStaticDMA_defined = 1
00001476                            ; Expects source address and DMA length in bytes. Also, expects source, size, and dest to be known
00001476                            ; at assembly time. Gives errors if DMA starts at an odd address, transfers
00001476                            ; crosses a 128kB boundary, or has size 0.
00001476                            QueueStaticDMA macro src,length,dest
00001476                                local   len
00001476                            		if ((\src)&1)<>0
00001476                            			inform 3,"DMA queued from odd source \1!"
00001476                            		endif
00001476                            		if ((\length)&1)<>0
00001476                            			inform 3,"DMA an odd number of bytes \2!"
00001476                            		endif
00001476                            		if (\length)=0
00001476                            			inform 3,"DMA transferring 0 bytes (becomes a 128kB transfer). If you really mean it, pass 128kB instead."
00001476                            		endif
00001476                            		if (((\src)+(\length)-1)>>17)<>((\src)>>17)
00001476                            			inform 3,"DMA crosses a 128kB boundary. You should either split the DMA manually or align the source adequately."
00001476                            		endif
00001476                            	  
00001476                            	if UseVIntSafeDMA=1
00001476                            		move.w	sr,-(sp)										; Save current interrupt mask
00001476                            		disableInts												; Mask off interrupts
00001476                            	endif ; UseVIntSafeDMA=1
00001476                            	movea.w	(VDP_Command_Buffer_Slot).w,a1
00001476                            	cmpa.w	#VDP_Command_Buffer_Slot,a1
00001476                            	beq.s	.done												; Return if there's no more room in the buffer
00001476                            	len: = ((length>>1)&$7FFF)
00001476                                move.b	#(len>>8)&$FF,DMAEntry.SizeH(a1)		; Write top byte of size/2
00001476                            	move.l	#((len&$FF)<<24)|((src>>1)&$7FFFFF),d0	; Set d0 to bottom byte of size/2 and the low 3 bytes of source/2
00001476                            	movep.l	d0,DMAEntry.SizeL(a1)								; Write it all to the queue
00001476                            	lea	DMAEntry.Command(a1),a1									; Seek to correct RAM address to store VDP DMA command
00001476                            	move.l	#$40000080,(a1)+						; Write VDP DMA command for destination address
00001476                            	move.w	a1,(VDP_Command_Buffer_Slot).w						; Write next queue slot
00001476                            .done:
00001476                            	if UseVIntSafeDMA=1
00001476                            		move.w	(sp)+,sr										; Restore interrupts to previous state
00001476                            	endif ;UseVIntSafeDMA=1
00001476                            	endm
00001476                            
00001476                                
00001476                            
00001476                            ; ---------------------------------------------------------------------------
00001476                            ResetDMAQueue: macro
00001476                            	move.w	#VDP_Command_Buffer,(VDP_Command_Buffer_Slot).w
00001476                            	endm
00001476                            ; ===========================================================================
00001476                            
00001476                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
00001476                            
00001476                            ; sub_144E: DMA_68KtoVRAM: QueueCopyToVRAM: QueueVDPCommand:
00001476                            Add_To_DMA_Queue:
00001476                            QueueDMATransfer:
00001476 3278 C8FC                  	movea.w	(VDP_Command_Buffer_Slot).w,a1
0000147A B2FC C8FC                  	cmpa.w	#VDP_Command_Buffer_Slot,a1
0000147E 6700                       	beq.s	.done											; Return if there's no more room in the buffer
00001480                            
00001480 E289                       		lsr.l	#1,d1										; Source address is in words for the VDP registers
00001482 0881 0017                  		bclr.l	#23,d1										; Make sure bit 23 is clear (68k->VDP DMA flag)
00001486 03C9 0003                  	movep.l	d1,DMAEntry.Source(a1)							; Write source address; the useless top byte will be overwritten later
0000148A 7000                       	moveq	#0,d0											; We need a zero on d0
0000148C                            
0000148C                            		; Detect if transfer crosses 128KB boundary
0000148C                            		; Using sub+sub instead of move+add handles the following edge cases:
0000148C                            		; (1) d3.w = 0 => 128kB transfer
0000148C                            		;   (a) d1.w = 0 => no carry, don't split the DMA
0000148C                            		;   (b) d1.w != 0 => carry, need to split the DMA
0000148C                            		; (2) d3.w != 0
0000148C                            		;   (a) if there is carry on d1.w + d3.w
0000148C                            		;     (* ) if d1.w + d3.w = 0 => transfer comes entirely from current 128kB block, don't split the DMA
0000148C                            		;     (**) if d1.w + d3.w != 0 => need to split the DMA
0000148C                            		;   (b) if there is no carry on d1.w + d3.w => don't split the DMA
0000148C                            		; The reason this works is that carry on d1.w + d3.w means that
0000148C                            		; d1.w + d3.w >= $10000, whereas carry on (-d3.w) - (d1.w) means that
0000148C                            		; d1.w + d3.w > $10000.
0000148C 9043                       		sub.w	d3,d0										; Using sub instead of move and add allows checking edge cases
0000148E 9041                       		sub.w	d1,d0										; Does the transfer cross over to the next 128kB block?
00001490 6500                       		bcs.s	.doubletransfer								; Branch if yes
00001492                            	; It does not cross a 128kB boundary. So just finish writing it.
00001492 0789 0001                  	movep.w	d3,DMAEntry.Size(a1)							; Write DMA length, overwriting useless top byte of source address
00001496                            
00001496                            .finishxfer:
00001496                            	; Command to specify destination address and begin DMA
00001496 3002                       	move.w	d2,d0											; Use the fact that top word of d0 is zero to avoid clearing on vdpCommReg
000014A2 43E9 000A                  	lea	DMAEntry.Command(a1),a1								; Seek to correct RAM address to store VDP DMA command
000014A6 22C0                       	move.l	d0,(a1)+										; Write VDP DMA command for destination address
000014A8 31C9 C8FC                  	move.w	a1,(VDP_Command_Buffer_Slot).w					; Write next queue slot
000014AC                            
000014AC                            .done:
000014AC 4E75                       	rts
000014AE                            ; ---------------------------------------------------------------------------
000014AE                            .doubletransfer:
000014AE                            		; We need to split the DMA into two parts, since it crosses a 128kB block
000014AE D043                       		add.w	d3,d0										; Set d0 to the number of words until end of current 128kB block
000014B0 0189 0001                  		movep.w	d0,DMAEntry.Size(a1)						; Write DMA length of first part, overwriting useless top byte of source addres
000014B4                            
000014B4 B2FC C8EE                  		cmpa.w	#VDP_Command_Buffer_Slot-DMAEntry.len,a1	; Does the queue have enough space for both parts?
000014B8 67DC                       		beq.s	.finishxfer									; Branch if not
000014BA                            
000014BA                            		; Get second transfer's source, destination, and length
000014BA 9640                       		sub.w	d0,d3										; Set d3 to the number of words remaining
000014BC D280                       		add.l	d0,d1										; Offset the source address of the second part by the length of the first part
000014BE D040                       		add.w	d0,d0										; Convert to number of bytes
000014C0 D042                       		add.w	d2,d0										; Set d0 to the VRAM destination of the second part
000014C2                            
000014C2                            		; If we know top word of d2 is clear, the following vdpCommReg can be set to not
000014C2                            		; clear it. There is, unfortunately, no faster way to clear it than this.
000014D0 2342 000A                  		move.l	d2,DMAEntry.Command(a1)						; Write VDP DMA command for destination address of first part
000014D4                            
000014D4                            		; Do second transfer
000014D4 03C9 0011                  		movep.l	d1,DMAEntry.len+DMAEntry.Source(a1)			; Write source address of second part; useless top byte will be overwritten later
000014D8 0789 000F                  		movep.w	d3,DMAEntry.len+DMAEntry.Size(a1)			; Write DMA length of second part, overwriting useless top byte of source addres
000014DC                            
000014DC                            		; Command to specify destination address and begin DMA
000014E6 43E9 0018                  		lea	DMAEntry.len+DMAEntry.Command(a1),a1			; Seek to correct RAM address to store VDP DMA command of second part
000014EA 22C0                       		move.l	d0,(a1)+									; Write VDP DMA command for destination address of second part
000014EC                            
000014EC 31C9 C8FC                  		move.w	a1,(VDP_Command_Buffer_Slot).w				; Write next queue slot
000014F0 4E75                       		rts
000014F2                            ; End of function QueueDMATransfer
000014F2                            ; ===========================================================================
000014F2                            
000014F2                            ; ---------------------------------------------------------------------------
000014F2                            ; Subroutine for issuing all VDP commands that were queued
000014F2                            ; (by earlier calls to QueueDMATransfer)
000014F2                            ; Resets the queue when it's done
000014F2                            ; ---------------------------------------------------------------------------
000014F2                            
000014F2                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
000014F2                            
000014F2                            ; sub_14AC: CopyToVRAM: IssueVDPCommands: Process_DMA:
000014F2                            Process_DMA_Queue:
000014F2                            ProcessDMAQueue:
000014F2 3278 C8FC                  	movea.w	(VDP_Command_Buffer_Slot).w,a1
000014F6 4EE9 0000                  	jmp	.jump_table-VDP_Command_Buffer(a1)
000014FA                            ; ---------------------------------------------------------------------------
000014FA                            .jump_table:
000014FA 4E75                       	rts
000014FC                            	rept 6
000014FC                            		trap	#0											; Just in case
000014FC 4E40 4E40 4E40 4E40 4E40+  	endr
00001508                            ; ---------------------------------------------------------------------------
00001508 =00000001                      c: = 1
00001508                            	rept QueueSlotCount
00001508                            		lea	(vdp_control_port).l,a5
00001508                            		lea	(VDP_Command_Buffer).w,a1
00001508                            		if c<>QueueSlotCount
00001508                            			bra.w	.jump0 - c*8
00001508                            		endif
00001508                                c: = c + 1
00001600                            ; ---------------------------------------------------------------------------
00001600                            	rept QueueSlotCount
00001600                            		move.l	(a1)+,(a5)									; Transfer length
00001600                            		move.l	(a1)+,(a5)									; Source address high
00001600                            		move.l	(a1)+,(a5)									; Source address low + destination high
00001600                            		move.w	(a1)+,(a5)									; Destination low, trigger DMA
00001600 2A99 2A99 2A99 3A99 2A99+  	endr
00001690                            
00001690                            .jump0:
00001690 31FC C800 C8FC             	ResetDMAQueue
00001696 4E75                       	rts
00001698                            ; End of function ProcessDMAQueue
00001698                            ; ===========================================================================
00001698                            
00001698                            ; ---------------------------------------------------------------------------
00001698                            ; Subroutine for initializing the DMA queue.
00001698                            ; ---------------------------------------------------------------------------
00001698                            
00001698                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
00001698                            
00001698                            InitDMAQueue:
00001698 41F8 C800                  	lea	(VDP_Command_Buffer).w,a0
0000169C 7094                       	moveq	#-$6C,d0				; fast-store $94 (sign-extended) in d0
0000169E 223C 9397 9695             	move.l	#$93979695,d1
000016A4 =00000000                      c: = 0
000016A4                            	rept QueueSlotCount
000016A4                            		move.b	d0,c + DMAEntry.Reg94(a0)
000016A4                            		movep.l	d1,c + DMAEntry.Reg93(a0)
000016A4                                c: = c + DMAEntry.len
000016A4 1080 03C8 0002 1140 000E+  	endr
00001732                            
00001732 31FC C800 C8FC             	ResetDMAQueue
00001738 4E75                       	rts
0000173A                            ; End of function ProcessDMAQueue
0000173A                            ; ===========================================================================
0000173A                            
0000173A                            
0000173A                                popo	; buffer local label symbol config
0000173A                            
0000173A                            
0000173A                            ; ---------------------------------------------------------------------------
0000173A                            ; Subroutine to load pattern load cues (aka to queue pattern load requests)
0000173A                            ; ---------------------------------------------------------------------------
0000173A                            
0000173A                            ; ARGUMENTS
0000173A                            ; d0 = index of PLC list
0000173A                            ; ---------------------------------------------------------------------------
0000173A                            
0000173A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000173A                            
0000173A                            ; LoadPLC:
0000173A                            AddPLC:
0000173A 48E7 0060                  		movem.l	a1-a2,-(sp)
0000173E 43F9 0000 0000             		lea	(ArtLoadCues).l,a1
00001744 D040                       		add.w	d0,d0
00001746 3031 0000                  		move.w	(a1,d0.w),d0
0000174A 43F1 0000                  		lea	(a1,d0.w),a1		; jump to relevant PLC
0000174E 45F8 F680                  		lea	(v_plc_buffer).w,a2 ; PLC buffer space
00001752                            
00001752                            	@findspace:
00001752 4A92                       		tst.l	(a2)		; is space available in RAM?
00001754 6700                       		beq.s	@copytoRAM	; if yes, branch
00001756 5C4A                       		addq.w	#6,a2		; if not, try next space
00001758 60F8                       		bra.s	@findspace
0000175A                            ; ===========================================================================
0000175A                            
0000175A                            @copytoRAM:
0000175A 3019                       		move.w	(a1)+,d0	; get length of PLC
0000175C 6B00                       		bmi.s	@skip
0000175E                            
0000175E                            	@loop:
0000175E 24D9                       		move.l	(a1)+,(a2)+
00001760 34D9                       		move.w	(a1)+,(a2)+	; copy PLC to RAM
00001762 51C8 FFFA                  		dbf	d0,@loop	; repeat for length of PLC
00001766                            
00001766                            	@skip:
00001766 4CDF 0600                  		movem.l	(sp)+,a1-a2 ; a1=object
0000176A 4E75                       		rts	
0000176C                            ; End of function AddPLC
0000176C                            
0000176C                            
0000176C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000176C                            ; Queue pattern load requests, but clear the PLQ first
0000176C                            
0000176C                            ; ARGUMENTS
0000176C                            ; d0 = index of PLC list (see ArtLoadCues)
0000176C                            
0000176C                            ; NOTICE: This subroutine does not check for buffer overruns. The programmer
0000176C                            ;	  (or hacker) is responsible for making sure that no more than
0000176C                            ;	  16 load requests are copied into the buffer.
0000176C                            ;	  _________DO NOT PUT MORE THAN 16 LOAD REQUESTS IN A LIST!__________
0000176C                            ;         (or if you change the size of Plc_Buffer, the limit becomes (Plc_Buffer_Only_End-Plc_Buffer)/6)
0000176C                            
0000176C                            ; LoadPLC2:
0000176C                            NewPLC:
0000176C 48E7 0060                  		movem.l	a1-a2,-(sp)
00001770 43F9 0000 0000             		lea	(ArtLoadCues).l,a1
00001776 D040                       		add.w	d0,d0
00001778 3031 0000                  		move.w	(a1,d0.w),d0
0000177C 43F1 0000                  		lea	(a1,d0.w),a1	; jump to relevant PLC
00001780 6100                       		bsr.s	ClearPLC	; erase any data in PLC buffer space
00001782 45F8 F680                  		lea	(v_plc_buffer).w,a2
00001786 3019                       		move.w	(a1)+,d0	; get length of PLC
00001788 6B00                       		bmi.s	@skip		; if it's negative, skip the next loop
0000178A                            
0000178A                            	@loop:
0000178A 24D9                       		move.l	(a1)+,(a2)+
0000178C 34D9                       		move.w	(a1)+,(a2)+	; copy PLC to RAM
0000178E 51C8 FFFA                  		dbf	d0,@loop		; repeat for length of PLC
00001792                            
00001792                            	@skip:
00001792 4CDF 0600                  		movem.l	(sp)+,a1-a2
00001796 4E75                       		rts	
00001798                            ; End of function NewPLC
00001798                            
00001798                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001798                            
00001798                            ; ---------------------------------------------------------------------------
00001798                            ; Subroutine to	clear the pattern load cues
00001798                            ; ---------------------------------------------------------------------------
00001798                            
00001798                            ; Clear the pattern load queue ($FFF680 - $FFF700)
00001798                            
00001798                            
00001798                            ClearPLC:
00001798 45F8 F680                  		lea	(v_plc_buffer).w,a2 ; PLC buffer space in RAM
0000179C 701F                       		moveq	#$1F,d0	; bytesToLcnt(v_plc_buffer_end-v_plc_buffer)
0000179E                            
0000179E                            	@loop:
0000179E 429A                       		clr.l	(a2)+
000017A0 51C8 FFFC                  		dbf	d0,@loop
000017A4 4E75                       		rts	
000017A6                            ; End of function ClearPLC
000017A6                            
000017A6                            ; ---------------------------------------------------------------------------
000017A6                            ; Subroutine to	use graphics listed in a pattern load cue
000017A6                            ; ---------------------------------------------------------------------------
000017A6                            
000017A6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000017A6                            
000017A6                            
000017A6                            RunPLC:
000017A6 4AB8 F680                  		tst.l	(v_plc_buffer).w
000017AA 6700                       		beq.s	Rplc_Exit
000017AC 4A78 F6F8                  		tst.w	(f_plc_execute).w
000017B0 6600                       		bne.s	Rplc_Exit
000017B2 2078 F680                  		movea.l	(v_plc_buffer).w,a0
000017B6 47F9 0000 13FC             		lea	(NemPCD_WriteRowToVDP).l,a3
000017BC 43F8 AA00                  		lea	(v_ngfx_buffer).w,a1
000017C0 3418                       		move.w	(a0)+,d2
000017C2 6A00                       		bpl.s	loc_160E
000017C4 D6FC 000A                  		adda.w	#$A,a3
000017C8                            
000017C8                            loc_160E:
000017C8 0242 7FFF                  		andi.w	#$7FFF,d2
000017CC 31C2 F6F8                  		move.w	d2,(f_plc_execute).w
000017D0 6100 FC56                  		bsr.w	NemDec_BuildCodeTable
000017D4 1A18                       		move.b	(a0)+,d5
000017D6 E145                       		asl.w	#8,d5
000017D8 1A18                       		move.b	(a0)+,d5
000017DA 7C10                       		moveq	#$10,d6
000017DC 7000                       		moveq	#0,d0
000017DE 21C8 F680                  		move.l	a0,(v_plc_buffer).w
000017E2 21CB F6E0                  		move.l	a3,(v_ptrnemcode).w
000017E6 21C0 F6E4                  		move.l	d0,($FFFFF6E4).w
000017EA 21C0 F6E8                  		move.l	d0,($FFFFF6E8).w
000017EE 21C0 F6EC                  		move.l	d0,($FFFFF6EC).w
000017F2 21C5 F6F0                  		move.l	d5,($FFFFF6F0).w
000017F6 21C6 F6F4                  		move.l	d6,($FFFFF6F4).w
000017FA                            
000017FA                            Rplc_Exit:
000017FA 4E75                       		rts	
000017FC                            ; End of function RunPLC
000017FC                            
000017FC                            
000017FC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000017FC                            
000017FC                            
000017FC                            sub_1642:
000017FC 4A78 F6F8                  		tst.w	(f_plc_execute).w
00001800 6700 0000                  		beq.w	locret_16DA
00001804 31FC 0009 F6FA             		move.w	#9,($FFFFF6FA).w
0000180A 7000                       		moveq	#0,d0
0000180C 3038 F684                  		move.w	($FFFFF684).w,d0
00001810 0678 0120 F684             		addi.w	#$120,($FFFFF684).w
00001816 6000                       		bra.s	loc_1676
00001818                            ; End of function sub_1642
00001818                            
00001818                            
00001818                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001818                            
00001818                            
00001818                            ; sub_165E:
00001818                            ProcessDPLC2:
00001818 4A78 F6F8                  		tst.w	(f_plc_execute).w
0000181C 6700                       		beq.s	locret_16DA
0000181E 31FC 0003 F6FA             		move.w	#3,($FFFFF6FA).w
00001824 7000                       		moveq	#0,d0
00001826 3038 F684                  		move.w	($FFFFF684).w,d0
0000182A 0678 0060 F684             		addi.w	#$60,($FFFFF684).w
00001830                            
00001830                            loc_1676:
00001830 49F9 00C0 0004             		lea	(vdp_control_port).l,a4
00001836 E588                       		lsl.l	#2,d0
00001838 E448                       		lsr.w	#2,d0
0000183A 0040 4000                  		ori.w	#$4000,d0
0000183E 4840                       		swap	d0
00001840 2880                       		move.l	d0,(a4)
00001842 594C                       		subq.w	#4,a4
00001844 2078 F680                  		movea.l	(v_plc_buffer).w,a0
00001848 2678 F6E0                  		movea.l	(v_ptrnemcode).w,a3
0000184C 2038 F6E4                  		move.l	($FFFFF6E4).w,d0
00001850 2238 F6E8                  		move.l	($FFFFF6E8).w,d1
00001854 2438 F6EC                  		move.l	($FFFFF6EC).w,d2
00001858 2A38 F6F0                  		move.l	($FFFFF6F0).w,d5
0000185C 2C38 F6F4                  		move.l	($FFFFF6F4).w,d6
00001860 43F8 AA00                  		lea	(v_ngfx_buffer).w,a1
00001864                            
00001864                            loc_16AA:
00001864 3A7C 0008                  		movea.w	#8,a5
00001868 6100 FB5C                  		bsr.w	NemPCD_NewRow
0000186C 5378 F6F8                  		subq.w	#1,(f_plc_execute).w
00001870 6700                       		beq.s	loc_16DC
00001872 5378 F6FA                  		subq.w	#1,($FFFFF6FA).w
00001876 66EC                       		bne.s	loc_16AA
00001878 21C8 F680                  		move.l	a0,(v_plc_buffer).w
0000187C 21CB F6E0                  		move.l	a3,(v_ptrnemcode).w
00001880 21C0 F6E4                  		move.l	d0,($FFFFF6E4).w
00001884 21C1 F6E8                  		move.l	d1,($FFFFF6E8).w
00001888 21C2 F6EC                  		move.l	d2,($FFFFF6EC).w
0000188C 21C5 F6F0                  		move.l	d5,($FFFFF6F0).w
00001890 21C6 F6F4                  		move.l	d6,($FFFFF6F4).w
00001894                            
00001894                            locret_16DA:
00001894 4E75                       		rts	
00001896                            ; ===========================================================================
00001896                            
00001896                            loc_16DC:
00001896 41F8 F680                  		lea	(v_plc_buffer).w,a0
0000189A 7015                       		moveq	#$15,d0
0000189C                            
0000189C                            loc_16E2:
0000189C 20E8 0006                  		move.l	6(a0),(a0)+
000018A0 51C8 FFFA                  		dbf	d0,loc_16E2
000018A4 4E75                       		rts	
000018A6                            ; End of function ProcessDPLC2
000018A6                            
000018A6                            ; ---------------------------------------------------------------------------
000018A6                            ; Subroutine to	execute	the pattern load cue
000018A6                            ; ---------------------------------------------------------------------------
000018A6                            
000018A6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000018A6                            
000018A6                            
000018A6                            QuickPLC:
000018A6 43F9 0000 0000             		lea	(ArtLoadCues).l,a1 ; load the PLC index
000018AC D040                       		add.w	d0,d0
000018AE 3031 0000                  		move.w	(a1,d0.w),d0
000018B2 43F1 0000                  		lea	(a1,d0.w),a1
000018B6 3219                       		move.w	(a1)+,d1	; get length of PLC
000018B8                            
000018B8                            	Qplc_Loop:
000018B8 2059                       		movea.l	(a1)+,a0	; get art pointer
000018BA 7000                       		moveq	#0,d0
000018BC 3019                       		move.w	(a1)+,d0	; get VRAM address
000018BE E588                       		lsl.l	#2,d0
000018C0 E448                       		lsr.w	#2,d0
000018C2 0040 4000                  		ori.w	#$4000,d0
000018C6 4840                       		swap	d0
000018C8 23C0 00C0 0004             		move.l	d0,(vdp_control_port).l ; converted VRAM address to VDP format
000018CE 6100 FA7E                  		bsr.w	NemDec		; decompress
000018D2 51C9 FFE4                  		dbf	d1,Qplc_Loop	; repeat for length of PLC
000018D6 4E75                       		rts	
000018D8                            ; End of function QuickPLC
000018D8                            
000018D8                            		include	"_inc\Enigma Decompression.asm"
000018D8                            ; ---------------------------------------------------------------------------
000018D8                            ; Enigma decompression algorithm
000018D8                            
000018D8                            ; input:
000018D8                            ;	d0 = starting art tile (added to each 8x8 before writing to destination)
000018D8                            ;	a0 = source address
000018D8                            ;	a1 = destination address
000018D8                            
000018D8                            ; usage:
000018D8                            ;	lea	(source).l,a0
000018D8                            ;	lea	(destination).l,a1
000018D8                            ;	move.w	#arttile,d0
000018D8                            ;	bsr.w	EniDec
000018D8                            
000018D8                            ; See http://www.segaretro.org/Enigma_compression for format description
000018D8                            ; ---------------------------------------------------------------------------
000018D8                            
000018D8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000018D8                            
000018D8                            
000018D8                            EniDec:
000018D8 48E7 FF7C                  		movem.l	d0-d7/a1-a5,-(sp)
000018DC 3640                       		movea.w	d0,a3		; store starting art tile
000018DE 1018                       		move.b	(a0)+,d0
000018E0 4880                       		ext.w	d0
000018E2 3A40                       		movea.w	d0,a5		; store number of bits in inline copy value
000018E4 1818                       		move.b	(a0)+,d4
000018E6 E70C                       		lsl.b	#3,d4		; store PCCVH flags bitfield
000018E8 3458                       		movea.w	(a0)+,a2
000018EA D4CB                       		adda.w	a3,a2		; store incremental copy word
000018EC 3858                       		movea.w	(a0)+,a4
000018EE D8CB                       		adda.w	a3,a4		; store literal copy word
000018F0 1A18                       		move.b	(a0)+,d5
000018F2 E145                       		asl.w	#8,d5
000018F4 1A18                       		move.b	(a0)+,d5	; get first word in format list
000018F6 7C10                       		moveq	#16,d6		; initial shift value
000018F8                            ; loc_173E:
000018F8                            Eni_Loop:
000018F8 7007                       		moveq	#7,d0		; assume a format list entry is 7 bits
000018FA 3E06                       		move.w	d6,d7
000018FC 9E40                       		sub.w	d0,d7
000018FE 3205                       		move.w	d5,d1
00001900 EE69                       		lsr.w	d7,d1
00001902 0241 007F                  		andi.w	#$7F,d1		; get format list entry
00001906 3401                       		move.w	d1,d2		; and copy it
00001908 0C41 0040                  		cmpi.w	#$40,d1		; is the high bit of the entry set?
0000190C 6400                       		bhs.s	@sevenbitentry
0000190E 7006                       		moveq	#6,d0		; if it isn't, the entry is actually 6 bits
00001910 E24A                       		lsr.w	#1,d2
00001912                            ; loc_1758:
00001912                            @sevenbitentry:
00001912 6100 0000                  		bsr.w	EniDec_FetchByte
00001916 0242 000F                  		andi.w	#$F,d2		; get repeat count
0000191A E849                       		lsr.w	#4,d1
0000191C D241                       		add.w	d1,d1
0000191E 4EFB 1000                  		jmp	EniDec_Index(pc,d1.w)
00001922                            ; End of function EniDec
00001922                            
00001922                            ; ===========================================================================
00001922                            ; loc_1768:
00001922                            EniDec_00:
00001922 32CA                       @loop:		move.w	a2,(a1)+	; copy incremental copy word
00001924 524A                       		addq.w	#1,a2		; increment it
00001926 51CA FFFA                  		dbf	d2,@loop	; repeat
0000192A 60CC                       		bra.s	Eni_Loop
0000192C                            ; ===========================================================================
0000192C                            ; loc_1772:
0000192C                            EniDec_01:
0000192C 32CC                       @loop:		move.w	a4,(a1)+	; copy literal copy word
0000192E 51CA FFFC                  		dbf	d2,@loop	; repeat
00001932 60C4                       		bra.s	Eni_Loop
00001934                            ; ===========================================================================
00001934                            ; loc_177A:
00001934                            EniDec_100:
00001934 6100 0000                  		bsr.w	EniDec_FetchInlineValue
00001938                            ; loc_177E:
00001938 32C1                       @loop:		move.w	d1,(a1)+	; copy inline value
0000193A 51CA FFFC                  		dbf	d2,@loop	; repeat
0000193E                            
0000193E 60B8                       		bra.s	Eni_Loop
00001940                            ; ===========================================================================
00001940                            ; loc_1786:
00001940                            EniDec_101:
00001940 6100 0000                  		bsr.w	EniDec_FetchInlineValue
00001944                            ; loc_178A:
00001944 32C1                       @loop:		move.w	d1,(a1)+	; copy inline value
00001946 5241                       		addq.w	#1,d1		; increment
00001948 51CA FFFA                  		dbf	d2,@loop	; repeat
0000194C                            
0000194C 60AA                       		bra.s	Eni_Loop
0000194E                            ; ===========================================================================
0000194E                            ; loc_1794:
0000194E                            EniDec_110:
0000194E 6100 0000                  		bsr.w	EniDec_FetchInlineValue
00001952                            ; loc_1798:
00001952 32C1                       @loop:		move.w	d1,(a1)+	; copy inline value
00001954 5341                       		subq.w	#1,d1		; decrement
00001956 51CA FFFA                  		dbf	d2,@loop	; repeat
0000195A                            
0000195A 609C                       		bra.s	Eni_Loop
0000195C                            ; ===========================================================================
0000195C                            ; loc_17A2:
0000195C                            EniDec_111:
0000195C 0C42 000F                  		cmpi.w	#$F,d2
00001960 6700                       		beq.s	EniDec_Done
00001962                            ; loc_17A8:
00001962 6100 0000                  @loop:		bsr.w	EniDec_FetchInlineValue	; fetch new inline value
00001966 32C1                       		move.w	d1,(a1)+	; copy it
00001968 51CA FFF8                  		dbf	d2,@loop	; and repeat
0000196C                            
0000196C 608A                       		bra.s	Eni_Loop
0000196E                            ; ===========================================================================
0000196E                            ; loc_17B4:
0000196E                            EniDec_Index:
0000196E 60B2                       		bra.s	EniDec_00
00001970 60B0                       		bra.s	EniDec_00
00001972 60B8                       		bra.s	EniDec_01
00001974 60B6                       		bra.s	EniDec_01
00001976 60BC                       		bra.s	EniDec_100
00001978 60C6                       		bra.s	EniDec_101
0000197A 60D2                       		bra.s	EniDec_110
0000197C 60DE                       		bra.s	EniDec_111
0000197E                            ; ===========================================================================
0000197E                            ; loc_17C4:
0000197E                            EniDec_Done:
0000197E 5348                       		subq.w	#1,a0		; go back by one byte
00001980 0C46 0010                  		cmpi.w	#16,d6		; were we going to start on a completely new byte?
00001984 6600                       		bne.s	@notnewbyte	; if not, branch
00001986 5348                       		subq.w	#1,a0		; and another one if needed
00001988                            ; loc_17CE:
00001988                            @notnewbyte:
00001988 3008                       		move.w	a0,d0
0000198A E248                       		lsr.w	#1,d0		; are we on an odd byte?
0000198C 6400                       		bcc.s	@evenbyte	; if not, branch
0000198E 5248                       		addq.w	#1,a0		; ensure we're on an even byte
00001990                            ; loc_17D6:
00001990                            @evenbyte:
00001990 4CDF 3EFF                  		movem.l	(sp)+,d0-d7/a1-a5
00001994 4E75                       		rts	
00001996                            
00001996                            ; ---------------------------------------------------------------------------
00001996                            ; Part of the Enigma decompressor
00001996                            ; Fetches an inline copy value and stores it in d1
00001996                            ; ---------------------------------------------------------------------------
00001996                            
00001996                            ; =============== S U B R O U T I N E =======================================
00001996                            
00001996                            ; loc_17DC:
00001996                            EniDec_FetchInlineValue:
00001996 360B                       		move.w	a3,d3		; copy starting art tile
00001998 1204                       		move.b	d4,d1		; copy PCCVH bitfield
0000199A D201                       		add.b	d1,d1		; is the priority bit set?
0000199C 6400                       		bcc.s	@skippriority	; if not, branch
0000199E 5346                       		subq.w	#1,d6
000019A0 0D05                       		btst	d6,d5		; is the priority bit set in the inline render flags?
000019A2 6700                       		beq.s	@skippriority	; if not, branch
000019A4 0043 8000                  		ori.w	#$8000,d3	; otherwise set priority bit in art tile
000019A8                            ; loc_17EE:
000019A8                            @skippriority:
000019A8 D201                       		add.b	d1,d1		; is the high palette line bit set?
000019AA 6400                       		bcc.s	@skiphighpal	; if not, branch
000019AC 5346                       		subq.w	#1,d6
000019AE 0D05                       		btst	d6,d5
000019B0 6700                       		beq.s	@skiphighpal
000019B2 0643 4000                  		addi.w	#$4000,d3	; set second palette line bit
000019B6                            ; loc_17FC:
000019B6                            @skiphighpal:
000019B6 D201                       		add.b	d1,d1		; is the low palette line bit set?
000019B8 6400                       		bcc.s	@skiplowpal	; if not, branch
000019BA 5346                       		subq.w	#1,d6
000019BC 0D05                       		btst	d6,d5
000019BE 6700                       		beq.s	@skiplowpal
000019C0 0643 2000                  		addi.w	#$2000,d3	; set first palette line bit
000019C4                            ; loc_180A:
000019C4                            @skiplowpal:
000019C4 D201                       		add.b	d1,d1		; is the vertical flip flag set?
000019C6 6400                       		bcc.s	@skipyflip	; if not, branch
000019C8 5346                       		subq.w	#1,d6
000019CA 0D05                       		btst	d6,d5
000019CC 6700                       		beq.s	@skipyflip
000019CE 0043 1000                  		ori.w	#$1000,d3	; set Y-flip bit
000019D2                            ; loc_1818:
000019D2                            @skipyflip:
000019D2 D201                       		add.b	d1,d1		; is the horizontal flip flag set?
000019D4 6400                       		bcc.s	@skipxflip	; if not, branch
000019D6 5346                       		subq.w	#1,d6
000019D8 0D05                       		btst	d6,d5
000019DA 6700                       		beq.s	@skipxflip
000019DC 0043 0800                  		ori.w	#$800,d3	; set X-flip bit
000019E0                            ; loc_1826:
000019E0                            @skipxflip:
000019E0 3205                       		move.w	d5,d1
000019E2 3E06                       		move.w	d6,d7
000019E4 9E4D                       		sub.w	a5,d7		; subtract length in bits of inline copy value
000019E6 6400                       		bcc.s	@enoughbits	; branch if a new word doesn't need to be read
000019E8 3C07                       		move.w	d7,d6
000019EA 0646 0010                  		addi.w	#16,d6
000019EE 4447                       		neg.w	d7		; calculate bit deficit
000019F0 EF69                       		lsl.w	d7,d1		; and make space for that many bits
000019F2 1A10                       		move.b	(a0),d5		; get next byte
000019F4 EF3D                       		rol.b	d7,d5		; and rotate the required bits into the lowest positions
000019F6 DE47                       		add.w	d7,d7
000019F8 CA7B 7000                  		and.w	EniDec_Masks-2(pc,d7.w),d5
000019FC D245                       		add.w	d5,d1		; combine upper bits with lower bits
000019FE                            ; loc_1844:
000019FE                            @maskvalue:
000019FE 300D                       		move.w	a5,d0		; get length in bits of inline copy value
00001A00 D040                       		add.w	d0,d0
00001A02 C27B 0000                  		and.w	EniDec_Masks-2(pc,d0.w),d1	; mask value appropriately
00001A06 D243                       		add.w	d3,d1		; add starting art tile
00001A08 1A18                       		move.b	(a0)+,d5
00001A0A E14D                       		lsl.w	#8,d5
00001A0C 1A18                       		move.b	(a0)+,d5	; get next word
00001A0E 4E75                       		rts	
00001A10                            ; ===========================================================================
00001A10                            ; loc_1856:
00001A10                            @enoughbits:
00001A10 6700                       		beq.s	@justenough	; if the word has been exactly exhausted, branch
00001A12 EE69                       		lsr.w	d7,d1	; get inline copy value
00001A14 300D                       		move.w	a5,d0
00001A16 D040                       		add.w	d0,d0
00001A18 C27B 0000                  		and.w	EniDec_Masks-2(pc,d0.w),d1	; and mask it appropriately
00001A1C D243                       		add.w	d3,d1	; add starting art tile
00001A1E 300D                       		move.w	a5,d0
00001A20 6000                       		bra.s	EniDec_FetchByte
00001A22                            ; ===========================================================================
00001A22                            ; loc_1868:
00001A22                            @justenough:
00001A22 7C10                       		moveq	#16,d6	; reset shift value
00001A24 60D8                       		bra.s	@maskvalue
00001A26                            ; ===========================================================================
00001A26                            ; word_186C:
00001A26                            EniDec_Masks:
00001A26 0001 0003 0007 000F        		dc.w	 1,    3,    7,   $F
00001A2E 001F 003F 007F 00FF        		dc.w   $1F,  $3F,  $7F,  $FF
00001A36 01FF 03FF 07FF 0FFF        		dc.w  $1FF, $3FF, $7FF, $FFF
00001A3E 1FFF 3FFF 7FFF FFFF        		dc.w $1FFF,$3FFF,$7FFF,$FFFF
00001A46                            
00001A46                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001A46                            
00001A46                            ; sub_188C:
00001A46                            EniDec_FetchByte:
00001A46 9C40                       		sub.w	d0,d6	; subtract length of current entry from shift value so that next entry is read next time around
00001A48 0C46 0009                  		cmpi.w	#9,d6	; does a new byte need to be read?
00001A4C 6400                       		bhs.s	@locret	; if not, branch
00001A4E 5046                       		addq.w	#8,d6
00001A50 E145                       		asl.w	#8,d5
00001A52 1A18                       		move.b	(a0)+,d5
00001A54                            @locret:
00001A54 4E75                       		rts	
00001A56                            ; End of function EniDec_FetchByte
00001A56                            ; End of function EniDec_FetchByte
00001A56                            		include	"_inc\Kosinski Decompression.asm"
00001A56                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
00001A56                            ; ---------------------------------------------------------------------------
00001A56                            ; KOSINSKI DECOMPRESSION PROCEDURE
00001A56                            ; (sometimes called KOZINSKI decompression)
00001A56                            ;
00001A56                            ; ARGUMENTS:
00001A56                            ; a0 = source address
00001A56                            ; a1 = destination address
00001A56                            ;
00001A56                            ; For format explanation see http://info.sonicretro.org/Kosinski@compression
00001A56                            ; New faster version by written by vladikcomper, with additional improvements by
00001A56                            ; MarkeyJester and Flamewing
00001A56                            ; Converted to ASM68K by Beta Filter.
00001A56                            ; ---------------------------------------------------------------------------
00001A56 =00000001                  Kos_UseLUT: equ 1
00001A56 =00000003                  Kos_LoopUnroll: equ 3
00001A56 =00000001                  Kos_ExtremeUnrolling: equ 1
00001A56                            
00001A56                            Kos_RunBitStream macro
00001A56                                dbra    d2,@skip\@
00001A56                                moveq   #7,d2                   ; Set repeat count to 8.
00001A56                                move.b  d1,d0                   ; Use the remaining 8 bits.
00001A56                                not.w   d3                      ; Have all 16 bits been used up?
00001A56                                bne.s   @skip\@                   ; Branch if not.
00001A56                                move.b  (a0)+,d0                ; Get desc field low-byte.
00001A56                                move.b  (a0)+,d1                ; Get desc field hi-byte.
00001A56                                if Kos_UseLUT=1
00001A56                                move.b  (a4,d0.w),d0            ; Invert bit order...
00001A56                                move.b  (a4,d1.w),d1            ; ... for both bytes.
00001A56                                endif
00001A56                            @skip\@
00001A56                                endm
00001A56                            
00001A56                            Kos_ReadBit macro
00001A56                                if Kos_UseLUT=1
00001A56                                add.b   d0,d0                   ; Get a bit from the bitstream.
00001A56                                else
00001A56                                lsr.b   #1,d0                   ; Get a bit from the bitstream.
00001A56                                endif
00001A56                                endm
00001A56                            ; ===========================================================================
00001A56                            ; KozDec@193A:
00001A56                            KosDec:
00001A56 7E07                           moveq   #(1<<Kos_LoopUnroll)-1,d7
00001A58 7000                           moveq   #0,d0
00001A5A 7200                           moveq   #0,d1
00001A5C 49FA 0000                      lea KosDec_ByteMap(pc),a4       ; Load LUT pointer.
00001A60 1018                           move.b  (a0)+,d0                ; Get desc field low-byte.
00001A62 1218                           move.b  (a0)+,d1                ; Get desc field hi-byte.
00001A64 1034 0000                      move.b  (a4,d0.w),d0            ; Invert bit order...
00001A68 1234 1000                      move.b  (a4,d1.w),d1            ; ... for both bytes.
00001A6C 7407                           moveq   #7,d2                   ; Set repeat count to 8.
00001A6E 7600                           moveq   #0,d3                   ; d3 will be desc field switcher.
00001A70 6000                           bra.s   @FetchNewCode
00001A72                            ; ---------------------------------------------------------------------------
00001A72                            @FetchCodeLoop:
00001A72                                ; Code 1 (Uncompressed byte).
00001A8A 12D8                           move.b  (a0)+,(a1)+
00001A8C                            
00001A8C                            @FetchNewCode:
00001A8E 65E2                           bcs.s   @FetchCodeLoop          ; If code = 1, branch.
00001A90                            
00001A90                                ; Codes 00 and 01.
00001A90 7AFF                           moveq   #-1,d5
00001A92 4BD1                           lea (a1),a5
00001AAE 6500 0000                      bcs.w   @Code_01
00001AB2                            
00001AB2                                ; Code 00 (Dictionary ref. short).
00001ACC 6500                           bcs.s   @Copy45
00001AE8 6500                           bcs.s   @Copy3
00001B02 1A18                           move.b  (a0)+,d5                ; d5 = displacement.
00001B04 DAC5                           adda.w  d5,a5
00001B06 12DD                           move.b  (a5)+,(a1)+
00001B08 12DD                           move.b  (a5)+,(a1)+
00001B0A 6080                           bra.s   @FetchNewCode
00001B0C                            ; ---------------------------------------------------------------------------
00001B0C                            @Copy3:
00001B24 1A18                           move.b  (a0)+,d5                ; d5 = displacement.
00001B26 DAC5                           adda.w  d5,a5
00001B28 12DD                           move.b  (a5)+,(a1)+
00001B2A 12DD                           move.b  (a5)+,(a1)+
00001B2C 12DD                           move.b  (a5)+,(a1)+
00001B2E 6000 FF5C                      bra.w   @FetchNewCode
00001B32                            ; ---------------------------------------------------------------------------
00001B32                            @Copy45:
00001B4C 6500                           bcs.s   @Copy5
00001B66 1A18                           move.b  (a0)+,d5                ; d5 = displacement.
00001B68 DAC5                           adda.w  d5,a5
00001B6A 12DD                           move.b  (a5)+,(a1)+
00001B6C 12DD                           move.b  (a5)+,(a1)+
00001B6E 12DD                           move.b  (a5)+,(a1)+
00001B70 12DD                           move.b  (a5)+,(a1)+
00001B72 6000 FF18                      bra.w   @FetchNewCode
00001B76                            ; ---------------------------------------------------------------------------
00001B76                            @Copy5:
00001B8E 1A18                           move.b  (a0)+,d5                ; d5 = displacement.
00001B90 DAC5                           adda.w  d5,a5
00001B92 12DD                           move.b  (a5)+,(a1)+
00001B94 12DD                           move.b  (a5)+,(a1)+
00001B96 12DD                           move.b  (a5)+,(a1)+
00001B98 12DD                           move.b  (a5)+,(a1)+
00001B9A 12DD                           move.b  (a5)+,(a1)+
00001B9C 6000 FEEE                      bra.w   @FetchNewCode
00001BA0                            ; ---------------------------------------------------------------------------
00001BA0                            ; ---------------------------------------------------------------------------
00001BA0                            @Code_01:
00001BA0 7800                           moveq   #0,d4                   ; d4 will contain copy count.
00001BA2                                ; Code 01 (Dictionary ref. long / special).
00001BBA 1C18                           move.b  (a0)+,d6                ; d6 = %LLLLLLLL.
00001BBC 1818                           move.b  (a0)+,d4                ; d4 = %HHHHHCCC.
00001BBE 1A04                           move.b  d4,d5                   ; d5 = %11111111 HHHHHCCC.
00001BC0 EB4D                           lsl.w   #5,d5                   ; d5 = %111HHHHH CCC00000.
00001BC2 1A06                           move.b  d6,d5                   ; d5 = %111HHHHH LLLLLLLL.
00001BC4 C847                           and.w   d7,d4                   ; d4 = %00000CCC.
00001BC6 6600                           bne.s   @StreamCopy             ; if CCC=0, branch.
00001BC8                            
00001BC8                                ; special mode (extended counter)
00001BC8 1818                           move.b  (a0)+,d4                ; Read cnt
00001BCA 6700                           beq.s   @Quit                   ; If cnt=0, quit decompression.
00001BCC 5304                           subq.b  #1,d4
00001BCE 6700 FEBC                      beq.w   @FetchNewCode           ; If cnt=1, fetch a new code.
00001BD2                            
00001BD2 DAC5                           adda.w  d5,a5
00001BD4 12DD                           move.b  (a5)+,(a1)+             ; Do 1 extra copy (to compensate +1 to copy counter).
00001BD6 3C04                           move.w  d4,d6
00001BD8 4646                           not.w   d6
00001BDA CC47                           and.w   d7,d6
00001BDC DC46                           add.w   d6,d6
00001BDE E64C                           lsr.w   #Kos_LoopUnroll,d4
00001BE0 4EFB 6000                      jmp @largecopy(pc,d6.w)
00001BE4                            ; ---------------------------------------------------------------------------
00001BE4                            @largecopy:
00001BE4                                rept (1<<Kos_LoopUnroll)
00001BE4                                move.b  (a5)+,(a1)+
00001BE4 12DD 12DD 12DD 12DD 12DD+      endr
00001BF4 51CC FFEE                      dbra    d4,@largecopy
00001BF8 6000 FE92                      bra.w   @FetchNewCode
00001BFC                            ; ---------------------------------------------------------------------------
00001BFC                            @StreamCopy:
00001BFC DAC5                           adda.w  d5,a5
00001BFE 12DD                           move.b  (a5)+,(a1)+             ; Do 1 extra copy (to compensate +1 to copy counter).
00001C00 BF44                           eor.w   d7,d4
00001C02 D844                           add.w   d4,d4
00001C04 4EFB 4000                      jmp @mediumcopy(pc,d4.w)
00001C08                            ; ---------------------------------------------------------------------------
00001C08                            @mediumcopy:
00001C08                                rept 8
00001C08                                move.b  (a5)+,(a1)+
00001C08 12DD 12DD 12DD 12DD 12DD+      endr
00001C18 6000 FE72                      bra.w   @FetchNewCode
00001C1C                            ; ---------------------------------------------------------------------------
00001C1C                            @Quit:
00001C1C 4E75                           rts                             ; End of function KosDec.
00001C1E                            ; ===========================================================================
00001C1E                            KosDec_ByteMap:
00001C1E 0080 40C0 20A0 60E0 1090+      dc.b    $00,$80,$40,$C0,$20,$A0,$60,$E0,$10,$90,$50,$D0,$30,$B0,$70,$F0
00001C2E 0888 48C8 28A8 68E8 1898+      dc.b    $08,$88,$48,$C8,$28,$A8,$68,$E8,$18,$98,$58,$D8,$38,$B8,$78,$F8
00001C3E 0484 44C4 24A4 64E4 1494+      dc.b    $04,$84,$44,$C4,$24,$A4,$64,$E4,$14,$94,$54,$D4,$34,$B4,$74,$F4
00001C4E 0C8C 4CCC 2CAC 6CEC 1C9C+      dc.b    $0C,$8C,$4C,$CC,$2C,$AC,$6C,$EC,$1C,$9C,$5C,$DC,$3C,$BC,$7C,$FC
00001C5E 0282 42C2 22A2 62E2 1292+      dc.b    $02,$82,$42,$C2,$22,$A2,$62,$E2,$12,$92,$52,$D2,$32,$B2,$72,$F2
00001C6E 0A8A 4ACA 2AAA 6AEA 1A9A+      dc.b    $0A,$8A,$4A,$CA,$2A,$AA,$6A,$EA,$1A,$9A,$5A,$DA,$3A,$BA,$7A,$FA
00001C7E 0686 46C6 26A6 66E6 1696+      dc.b    $06,$86,$46,$C6,$26,$A6,$66,$E6,$16,$96,$56,$D6,$36,$B6,$76,$F6
00001C8E 0E8E 4ECE 2EAE 6EEE 1E9E+      dc.b    $0E,$8E,$4E,$CE,$2E,$AE,$6E,$EE,$1E,$9E,$5E,$DE,$3E,$BE,$7E,$FE
00001C9E 0181 41C1 21A1 61E1 1191+      dc.b    $01,$81,$41,$C1,$21,$A1,$61,$E1,$11,$91,$51,$D1,$31,$B1,$71,$F1
00001CAE 0989 49C9 29A9 69E9 1999+      dc.b    $09,$89,$49,$C9,$29,$A9,$69,$E9,$19,$99,$59,$D9,$39,$B9,$79,$F9
00001CBE 0585 45C5 25A5 65E5 1595+      dc.b    $05,$85,$45,$C5,$25,$A5,$65,$E5,$15,$95,$55,$D5,$35,$B5,$75,$F5
00001CCE 0D8D 4DCD 2DAD 6DED 1D9D+      dc.b    $0D,$8D,$4D,$CD,$2D,$AD,$6D,$ED,$1D,$9D,$5D,$DD,$3D,$BD,$7D,$FD
00001CDE 0383 43C3 23A3 63E3 1393+      dc.b    $03,$83,$43,$C3,$23,$A3,$63,$E3,$13,$93,$53,$D3,$33,$B3,$73,$F3
00001CEE 0B8B 4BCB 2BAB 6BEB 1B9B+      dc.b    $0B,$8B,$4B,$CB,$2B,$AB,$6B,$EB,$1B,$9B,$5B,$DB,$3B,$BB,$7B,$FB
00001CFE 0787 47C7 27A7 67E7 1797+      dc.b    $07,$87,$47,$C7,$27,$A7,$67,$E7,$17,$97,$57,$D7,$37,$B7,$77,$F7
00001D0E 0F8F 4FCF 2FAF 6FEF 1F9F+      dc.b    $0F,$8F,$4F,$CF,$2F,$AF,$6F,$EF,$1F,$9F,$5F,$DF,$3F,$BF,$7F,$FF
00001D1E                            ; ===========================================================================
00001D1E                            ; ===========================================================================
00001D1E                            
00001D1E                            		include	"_inc\PaletteCycle.asm"
00001D1E                            ; ---------------------------------------------------------------------------
00001D1E                            ; Palette cycling routine loading subroutine
00001D1E                            ; ---------------------------------------------------------------------------
00001D1E                            
00001D1E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001D1E                            
00001D1E                            
00001D1E                            PaletteCycle:
00001D1E 7400                       		moveq	#0,d2
00001D20 7000                       		moveq	#0,d0
00001D22 1038 FE10                  		move.b	(v_zone).w,d0	; get level number
00001D26 D040                       		add.w	d0,d0
00001D28 303B 0000                  		move.w	PCycle_Index(pc,d0.w),d0
00001D2C 4EFB 0000                  		jmp	PCycle_Index(pc,d0.w) ; jump to relevant palette routine
00001D30                            ; End of function PaletteCycle
00001D30                            
00001D30                            ; ===========================================================================
00001D30                            ; ---------------------------------------------------------------------------
00001D30                            ; Palette cycling routines
00001D30                            ; ---------------------------------------------------------------------------
00001D30 0000                       PCycle_Index:	dc.w PCycle_GHZ-PCycle_Index
00001D32 0000                       		dc.w PCycle_LZ-PCycle_Index
00001D34 0000                       		dc.w PCycle_MZ-PCycle_Index
00001D36 0000                       		dc.w PalCycle_SLZ-PCycle_Index
00001D38 0000                       		dc.w PalCycle_SYZ-PCycle_Index
00001D3A 0000                       		dc.w PalCycle_SBZ-PCycle_Index
00001D3C 0000                       		dc.w PCycle_GHZ-PCycle_Index	; Ending
00001D3E                            
00001D3E                            
00001D3E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001D3E                            
00001D3E                            
00001D3E                            PCycle_Title:
00001D3E 41F9 0000 0000             		lea	(Pal_TitleCyc).l,a0
00001D44 6000                       		bra.s	PCycGHZ_Go
00001D46                            ; ===========================================================================
00001D46                            
00001D46                            PCycle_GHZ:
00001D46 41F9 0000 0000             		lea	(Pal_GHZCyc).l,a0
00001D4C                            
00001D4C                            PCycGHZ_Go:
00001D4C 5378 F634                  		subq.w	#1,(v_pcyc_time).w ; decrement timer
00001D50 6A00                       		bpl.s	PCycGHZ_Skip	; if time remains, branch
00001D52                            
00001D52 31FC 0003 F634             		move.w	#3,(v_pcyc_time).w ; reset timer to 5 frames
00001D58 3038 F632                  		move.w	(v_pcyc_num).w,d0 ; get cycle number
00001D5C 5278 F632                  		addq.w	#1,(v_pcyc_num).w ; increment cycle number
00001D60 0240 0003                  		andi.w	#3,d0		; if cycle > 3, reset to 0
00001D64 E748                       		lsl.w	#3,d0
00001D66 43F8 FB50                  		lea	(v_pal_dry+$50).w,a1
00001D6A 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001D6E 22B0 0004                  		move.l	4(a0,d0.w),(a1)	; copy palette data to RAM
00001D72                            
00001D72                            PCycGHZ_Skip:
00001D72 4E75                       		rts	
00001D74                            ; End of function PCycle_GHZ
00001D74                            
00001D74                            
00001D74                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001D74                            
00001D74                            
00001D74                            PCycle_LZ:
00001D74                            ; Waterfalls
00001D74 5378 F634                  		subq.w	#1,(v_pcyc_time).w ; decrement timer
00001D78 6A00                       		bpl.s	PCycLZ_Skip1	; if time remains, branch
00001D7A                            
00001D7A 31FC 0003 F634             		move.w	#3,(v_pcyc_time).w ; reset timer to 2 frames
00001D80 3038 F632                  		move.w	(v_pcyc_num).w,d0
00001D84 5278 F632                  		addq.w	#1,(v_pcyc_num).w ; increment cycle number
00001D88 0240 0003                  		andi.w	#3,d0		; if cycle > 3, reset to 0
00001D8C E748                       		lsl.w	#3,d0
00001D8E 41F9 0000 0000             		lea	(Pal_LZCyc1).l,a0
00001D94 0C38 0003 FE11             		cmpi.b	#3,(v_act).w	; check if level is SBZ3
00001D9A 6600                       		bne.s	PCycLZ_NotSBZ3
00001D9C 41F9 0000 0000             		lea	(Pal_SBZ3Cyc1).l,a0 ; load SBZ3	palette instead
00001DA2                            
00001DA2                            	PCycLZ_NotSBZ3:
00001DA2 43F8 FB56                  		lea	(v_pal_dry+$56).w,a1
00001DA6 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001DAA 22B0 0004                  		move.l	4(a0,d0.w),(a1)
00001DAE 43F8 FAD6                  		lea	(v_pal_water+$56).w,a1
00001DB2 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001DB6 22B0 0004                  		move.l	4(a0,d0.w),(a1)
00001DBA                            
00001DBA                            PCycLZ_Skip1:
00001DBA                            ; Conveyor belts
00001DBA                            		;move.w	(v_framecount).w,d0
00001DBA                            		;andi.w	#7,d0
00001DBA                            		;move.b	PCycLZ_Seq(pc,d0.w),d0 ; get byte from palette sequence
00001DBA                            		;beq.s	PCycLZ_Skip2	; if byte is 0, branch
00001DBA                            		;moveq	#1,d1
00001DBA                            		;tst.b	(f_conveyrev).w	; have conveyor belts been reversed?
00001DBA                            		;beq.s	PCycLZ_NoRev	; if not, branch
00001DBA                            		;neg.w	d1
00001DBA                            
00001DBA                            	;PCycLZ_NoRev:
00001DBA                            		;move.w	(v_pal_buffer).w,d0
00001DBA                            		;andi.w	#3,d0
00001DBA                            		;add.w	d1,d0
00001DBA                            		;cmpi.w	#3,d0
00001DBA                            		;bcs.s	loc_1A0A
00001DBA                            		;move.w	d0,d1
00001DBA                            		;moveq	#0,d0
00001DBA                            		;tst.w	d1
00001DBA                            		;bpl.s	loc_1A0A
00001DBA                            		;moveq	#2,d0
00001DBA                            
00001DBA                            ;loc_1A0A:
00001DBA                            		;move.w	d0,(v_pal_buffer).w
00001DBA                            		;add.w	d0,d0
00001DBA                            		;move.w	d0,d1
00001DBA                            		;add.w	d0,d0
00001DBA                            		;add.w	d1,d0
00001DBA                            		;lea	(Pal_LZCyc2).l,a0
00001DBA                            		;lea	(v_pal_dry+$76).w,a1
00001DBA                            		;move.l	(a0,d0.w),(a1)+
00001DBA                            		;move.w	4(a0,d0.w),(a1)
00001DBA                            		;lea	(Pal_LZCyc3).l,a0
00001DBA                            		;lea	(v_pal_water+$76).w,a1
00001DBA                            		;move.l	(a0,d0.w),(a1)+
00001DBA                            		;move.w	4(a0,d0.w),(a1)
00001DBA                            
00001DBA                            ;PCycLZ_Skip2:
00001DBA 4E75                       		rts	
00001DBC                            ; End of function PCycle_LZ
00001DBC                            
00001DBC                            ; ===========================================================================
00001DBC 0100 0001 0000 0100        PCycLZ_Seq:	dc.b 1,	0, 0, 1, 0, 0, 1, 0
00001DC4                            ; ===========================================================================
00001DC4                            
00001DC4                            PCycle_MZ:
00001DC4 4E75                       		rts	
00001DC6                            
00001DC6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001DC6                            
00001DC6                            
00001DC6                            PalCycle_SLZ:
00001DC6 5378 F634                  		subq.w	#1,(v_pcyc_time).w
00001DCA 6A00                       		bpl.s	locret_1A80
00001DCC 31FC 0007 F634             		move.w	#7,(v_pcyc_time).w
00001DD2 3038 F632                  		move.w	(v_pcyc_num).w,d0
00001DD6 5240                       		addq.w	#1,d0
00001DD8 0C40 0006                  		cmpi.w	#6,d0
00001DDC 6500                       		bcs.s	loc_1A60
00001DDE 7000                       		moveq	#0,d0
00001DE0                            
00001DE0                            loc_1A60:
00001DE0 31C0 F632                  		move.w	d0,(v_pcyc_num).w
00001DE4 3200                       		move.w	d0,d1
00001DE6 D241                       		add.w	d1,d1
00001DE8 D041                       		add.w	d1,d0
00001DEA D040                       		add.w	d0,d0
00001DEC 41F9 0000 0000             		lea	(Pal_SLZCyc).l,a0
00001DF2 43F8 FB56                  		lea	(v_pal_dry+$56).w,a1
00001DF6 32B0 0000                  		move.w	(a0,d0.w),(a1)
00001DFA 2370 0002 0004             		move.l	2(a0,d0.w),4(a1)
00001E00                            
00001E00                            locret_1A80:
00001E00 4E75                       		rts	
00001E02                            ; End of function PalCycle_SLZ
00001E02                            
00001E02                            
00001E02                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001E02                            
00001E02                            
00001E02                            PalCycle_SYZ:
00001E02 5378 F634                  		subq.w	#1,(v_pcyc_time).w
00001E06 6A00                       		bpl.s	locret_1AC6
00001E08 31FC 0005 F634             		move.w	#5,(v_pcyc_time).w
00001E0E 3038 F632                  		move.w	(v_pcyc_num).w,d0
00001E12 5278 F632                  		addq.w	#1,(v_pcyc_num).w
00001E16 0240 0003                  		andi.w	#3,d0
00001E1A E548                       		lsl.w	#2,d0
00001E1C 3200                       		move.w	d0,d1
00001E1E D040                       		add.w	d0,d0
00001E20 41F9 0000 0000             		lea	(Pal_SYZCyc1).l,a0
00001E26 43F8 FB6E                  		lea	(v_pal_dry+$6E).w,a1
00001E2A 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001E2E 22B0 0004                  		move.l	4(a0,d0.w),(a1)
00001E32 41F9 0000 0000             		lea	(Pal_SYZCyc2).l,a0
00001E38 43F8 FB76                  		lea	(v_pal_dry+$76).w,a1
00001E3C 32B0 1000                  		move.w	(a0,d1.w),(a1)
00001E40 3370 1002 0004             		move.w	2(a0,d1.w),4(a1)
00001E46                            
00001E46                            locret_1AC6:
00001E46 4E75                       		rts	
00001E48                            ; End of function PalCycle_SYZ
00001E48                            
00001E48                            
00001E48                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001E48                            
00001E48                            
00001E48                            PalCycle_SBZ:
00001E48 45F9 0000 0000             		lea	(Pal_SBZCycList2).l,a2
00001E4E 4A38 FE11                  		tst.b	(v_act).w
00001E52 6700                       		beq.s	loc_1ADA
00001E54 45F9 0000 0000             		lea	(Pal_SBZCycList2).l,a2
00001E5A                            
00001E5A                            loc_1ADA:
00001E5A 43F8 F650                  		lea	(v_pal_buffer).w,a1
00001E5E 321A                       		move.w	(a2)+,d1
00001E60                            
00001E60                            loc_1AE0:
00001E60 5311                       		subq.b	#1,(a1)
00001E62 6B00                       		bmi.s	loc_1AEA
00001E64 5489                       		addq.l	#2,a1
00001E66 5C8A                       		addq.l	#6,a2
00001E68 6000                       		bra.s	loc_1B06
00001E6A                            ; ===========================================================================
00001E6A                            
00001E6A                            loc_1AEA:
00001E6A 12DA                       		move.b	(a2)+,(a1)+
00001E6C 1011                       		move.b	(a1),d0
00001E6E 5200                       		addq.b	#1,d0
00001E70 B01A                       		cmp.b	(a2)+,d0
00001E72 6500                       		bcs.s	loc_1AF6
00001E74 7000                       		moveq	#0,d0
00001E76                            
00001E76                            loc_1AF6:
00001E76 12C0                       		move.b	d0,(a1)+
00001E78 0240 000F                  		andi.w	#$F,d0
00001E7C D040                       		add.w	d0,d0
00001E7E 305A                       		movea.w	(a2)+,a0
00001E80 365A                       		movea.w	(a2)+,a3
00001E82 36B0 0000                  		move.w	(a0,d0.w),(a3)
00001E86                            
00001E86                            loc_1B06:
00001E86 51C9 FFD8                  		dbf	d1,loc_1AE0
00001E8A 5378 F634                  		subq.w	#1,(v_pcyc_time).w
00001E8E 6A00                       		bpl.s	locret_1B64
00001E90 41F9 0000 0000             		lea	(Pal_SBZCyc4).l,a0
00001E96 31FC 0003 F634             		move.w	#3,(v_pcyc_time).w
00001E9C 4A38 FE11                  		tst.b	(v_act).w
00001EA0 6700                       		beq.s	loc_1B2E
00001EA2 41F9 0000 0000             		lea	(Pal_SBZCyc10).l,a0
00001EA8 31FC 0002 F634             		move.w	#2,(v_pcyc_time).w
00001EAE                            
00001EAE                            loc_1B2E:
00001EAE 72FF                       		moveq	#-1,d1
00001EB0 4A38 F7C0                  		tst.b	(f_conveyrev).w
00001EB4 6700                       		beq.s	loc_1B38
00001EB6 4441                       		neg.w	d1
00001EB8                            
00001EB8                            loc_1B38:
00001EB8 3038 F632                  		move.w	(v_pcyc_num).w,d0
00001EBC 0240 0003                  		andi.w	#3,d0
00001EC0 D041                       		add.w	d1,d0
00001EC2 0C40 0003                  		cmpi.w	#3,d0
00001EC6 6500                       		bcs.s	loc_1B52
00001EC8 3200                       		move.w	d0,d1
00001ECA 7000                       		moveq	#0,d0
00001ECC 4A41                       		tst.w	d1
00001ECE 6A00                       		bpl.s	loc_1B52
00001ED0 7002                       		moveq	#2,d0
00001ED2                            
00001ED2                            loc_1B52:
00001ED2 31C0 F632                  		move.w	d0,(v_pcyc_num).w
00001ED6 D040                       		add.w	d0,d0
00001ED8 43F8 FB58                  		lea	(v_pal_dry+$58).w,a1
00001EDC 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001EE0 32B0 0004                  		move.w	4(a0,d0.w),(a1)
00001EE4                            
00001EE4                            locret_1B64:
00001EE4 4E75                       		rts	
00001EE6                            ; End of function PalCycle_SBZ
00001EE6                            ; End of function PalCycle_SBZ
00001EE6                            
00001EE6                            Pal_TitleCyc:	incbin	"palette\Cycle - Title Screen Water.bin"
00001F06                            Pal_GHZCyc:	incbin	"palette\Cycle - GHZ.bin"
00001F26                            Pal_LZCyc1:	incbin	"palette\Cycle - LZ Waterfall.bin"
00001F46                            Pal_LZCyc2:	incbin	"palette\Cycle - LZ Conveyor Belt.bin"
00001F58                            Pal_LZCyc3:	incbin	"palette\Cycle - LZ Conveyor Belt Underwater.bin"
00001F6A                            Pal_SBZ3Cyc1:	incbin	"palette\Cycle - SBZ3 Waterfall.bin"
00001FD2                            Pal_SLZCyc:	incbin	"palette\Cycle - SLZ.bin"
00001FF6                            Pal_SYZCyc1:	incbin	"palette\Cycle - SYZ1.bin"
00002016                            Pal_SYZCyc2:	incbin	"palette\Cycle - SYZ2.bin"
00002026                            
00002026                            		include	"_inc\SBZ Palette Scripts.asm"
00002026                            ; ---------------------------------------------------------------------------
00002026                            ; Scrap Brain Zone palette cycling script
00002026                            ; ---------------------------------------------------------------------------
00002026                            
00002026                            mSBZp:	macro duration,colors,paladdress,ramaddress
00002026                            	dc.b duration, colors
00002026                            	dc.w paladdress, ramaddress
00002026                            	endm
00002026                            
00002026                            ; duration in frames, number of colors, palette address, RAM address
00002026                            
00002026                            Pal_SBZCycList1:
00002026 0000                       	dc.w ((end_SBZCycList1-Pal_SBZCycList1-2)/6)-1
00002028 0708 0000 FB50             	mSBZp	7,8,Pal_SBZCyc1,v_pal_dry+$50
0000202E 0D08 0000 FB52             	mSBZp	$D,8,Pal_SBZCyc2,v_pal_dry+$52
00002034 0E08 0000 FB6E             	mSBZp	$E,8,Pal_SBZCyc3,v_pal_dry+$6E
0000203A 0B08 0000 FB70             	mSBZp	$B,8,Pal_SBZCyc5,v_pal_dry+$70
00002040 0708 0000 FB72             	mSBZp	7,8,Pal_SBZCyc6,v_pal_dry+$72
00002046 1C10 0000 FB7E             	mSBZp	$1C,$10,Pal_SBZCyc7,v_pal_dry+$7E
0000204C 0303 0000 FB78             	mSBZp	3,3,Pal_SBZCyc8,v_pal_dry+$78
00002052 0303 0000 FB7A             	mSBZp	3,3,Pal_SBZCyc8+2,v_pal_dry+$7A
00002058 0303 0000 FB7C             	mSBZp	3,3,Pal_SBZCyc8+4,v_pal_dry+$7C
0000205E                            end_SBZCycList1:
0000205E                            	even
0000205E                            
0000205E                            Pal_SBZCycList2:
0000205E 0000                       	dc.w ((end_SBZCycList2-Pal_SBZCycList2-2)/6)-1
00002060 0708 0000 FB50             	mSBZp	7,8,Pal_SBZCyc1,v_pal_dry+$50
00002066 0D08 0000 FB52             	mSBZp	$D,8,Pal_SBZCyc2,v_pal_dry+$52
0000206C 0908 0000 FB70             	mSBZp	9,8,Pal_SBZCyc9,v_pal_dry+$70
00002072 0708 0000 FB72             	mSBZp	7,8,Pal_SBZCyc6,v_pal_dry+$72
00002078 0303 0000 FB78             	mSBZp	3,3,Pal_SBZCyc8,v_pal_dry+$78
0000207E 0303 0000 FB7A             	mSBZp	3,3,Pal_SBZCyc8+2,v_pal_dry+$7A
00002084 0303 0000 FB7C             	mSBZp	3,3,Pal_SBZCyc8+4,v_pal_dry+$7C
0000208A                            end_SBZCycList2:
0000208A                            	even
0000208A                            	even
0000208A                            
0000208A                            Pal_SBZCyc1:	incbin	"palette\Cycle - SBZ 1.bin"
0000209A                            Pal_SBZCyc2:	incbin	"palette\Cycle - SBZ 2.bin"
000020AA                            Pal_SBZCyc3:	incbin	"palette\Cycle - SBZ 3.bin"
000020BA                            Pal_SBZCyc4:	incbin	"palette\Cycle - SBZ 4.bin"
000020C6                            Pal_SBZCyc5:	incbin	"palette\Cycle - SBZ 5.bin"
000020D6                            Pal_SBZCyc6:	incbin	"palette\Cycle - SBZ 6.bin"
000020E6                            Pal_SBZCyc7:	incbin	"palette\Cycle - SBZ 7.bin"
00002106                            Pal_SBZCyc8:	incbin	"palette\Cycle - SBZ 8.bin"
00002110                            Pal_SBZCyc9:	incbin	"palette\Cycle - SBZ 9.bin"
00002120                            Pal_SBZCyc10:	incbin	"palette\Cycle - SBZ 10.bin"
0000212C                            ; ---------------------------------------------------------------------------
0000212C                            ; Subroutine to	fade in from black
0000212C                            ; ---------------------------------------------------------------------------
0000212C                            
0000212C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000212C                            
0000212C                            
0000212C                            PaletteFadeIn:
0000212C 31FC 003F F626             		move.w	#$003F,(v_pfade_start).w ; set start position = 0; size = $40
00002132                            
00002132                            PalFadeIn_Alt:				; start position and size are already set
00002132 7000                       		moveq	#0,d0
00002134 41F8 FB00                  		lea	(v_pal_dry).w,a0
00002138 1038 F626                  		move.b	(v_pfade_start).w,d0
0000213C D0C0                       		adda.w	d0,a0
0000213E 7200                       		moveq	#cBlack,d1
00002140 1038 F627                  		move.b	(v_pfade_size).w,d0
00002144                            
00002144                            	@fill:
00002144 30C1                       		move.w	d1,(a0)+
00002146 51C8 FFFC                  		dbf	d0,@fill 	; fill palette with black
0000214A                            
0000214A 383C 0015                  		move.w	#$15,d4
0000214E                            
0000214E                            	@mainloop:
0000214E 11FC 0012 F62A             		move.b	#$12,(v_vbla_routine).w
00002154 6100 0000                  		bsr.w	WaitForVBla
00002158 6100                       		bsr.s	FadeIn_FromBlack
0000215A 6100 F64A                  		bsr.w	RunPLC
0000215E 51CC FFEE                  		dbf	d4,@mainloop
00002162 4E75                       		rts	
00002164                            ; End of function PaletteFadeIn
00002164                            
00002164                            
00002164                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002164                            
00002164                            
00002164                            FadeIn_FromBlack:
00002164 7000                       		moveq	#0,d0
00002166 41F8 FB00                  		lea	(v_pal_dry).w,a0
0000216A 43F8 FB80                  		lea	(v_pal_dry_dup).w,a1
0000216E 1038 F626                  		move.b	(v_pfade_start).w,d0
00002172 D0C0                       		adda.w	d0,a0
00002174 D2C0                       		adda.w	d0,a1
00002176 1038 F627                  		move.b	(v_pfade_size).w,d0
0000217A                            
0000217A                            	@addcolour:
0000217A 6100                       		bsr.s	FadeIn_AddColour ; increase colour
0000217C 51C8 FFFC                  		dbf	d0,@addcolour	; repeat for size of palette
00002180                            
00002180 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w	; is level Labyrinth?
00002186 6600                       		bne.s	@exit		; if not, branch
00002188                            
00002188 7000                       		moveq	#0,d0
0000218A 41F8 FA80                  		lea	(v_pal_water).w,a0
0000218E 43F8 FA00                  		lea	(v_pal_water_dup).w,a1
00002192 1038 F626                  		move.b	(v_pfade_start).w,d0
00002196 D0C0                       		adda.w	d0,a0
00002198 D2C0                       		adda.w	d0,a1
0000219A 1038 F627                  		move.b	(v_pfade_size).w,d0
0000219E                            
0000219E                            	@addcolour2:
0000219E 6100                       		bsr.s	FadeIn_AddColour ; increase colour again
000021A0 51C8 FFFC                  		dbf	d0,@addcolour2 ; repeat
000021A4                            
000021A4                            @exit:
000021A4 4E75                       		rts	
000021A6                            ; End of function FadeIn_FromBlack
000021A6                            
000021A6                            
000021A6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000021A6                            
000021A6                            
000021A6                            FadeIn_AddColour:
000021A6                            @addblue:
000021A6 3419                       		move.w	(a1)+,d2
000021A8 3610                       		move.w	(a0),d3
000021AA B642                       		cmp.w	d2,d3		; is colour already at threshold level?
000021AC 6700                       		beq.s	@next		; if yes, branch
000021AE 3203                       		move.w	d3,d1
000021B0 0641 0200                  		addi.w	#$200,d1	; increase blue	value
000021B4 B242                       		cmp.w	d2,d1		; has blue reached threshold level?
000021B6 6200                       		bhi.s	@addgreen	; if yes, branch
000021B8 30C1                       		move.w	d1,(a0)+	; update palette
000021BA 4E75                       		rts	
000021BC                            ; ===========================================================================
000021BC                            
000021BC                            @addgreen:
000021BC 3203                       		move.w	d3,d1
000021BE 0641 0020                  		addi.w	#$20,d1		; increase green value
000021C2 B242                       		cmp.w	d2,d1
000021C4 6200                       		bhi.s	@addred
000021C6 30C1                       		move.w	d1,(a0)+	; update palette
000021C8 4E75                       		rts	
000021CA                            ; ===========================================================================
000021CA                            
000021CA                            @addred:
000021CA 5458                       		addq.w	#2,(a0)+	; increase red value
000021CC 4E75                       		rts	
000021CE                            ; ===========================================================================
000021CE                            
000021CE                            @next:
000021CE 5448                       		addq.w	#2,a0		; next colour
000021D0 4E75                       		rts	
000021D2                            ; End of function FadeIn_AddColour
000021D2                            
000021D2                            
000021D2                            ; ---------------------------------------------------------------------------
000021D2                            ; Subroutine to fade out to black
000021D2                            ; ---------------------------------------------------------------------------
000021D2                            
000021D2                            
000021D2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000021D2                            
000021D2                            
000021D2                            PaletteFadeOut:
000021D2 31FC 003F F626             		move.w	#$003F,(v_pfade_start).w ; start position = 0; size = $40
000021D8 383C 0015                  		move.w	#$15,d4
000021DC                            
000021DC                            	@mainloop:
000021DC 11FC 0012 F62A             		move.b	#$12,(v_vbla_routine).w
000021E2 6100 0000                  		bsr.w	WaitForVBla
000021E6 6100                       		bsr.s	FadeOut_ToBlack
000021E8 6100 F5BC                  		bsr.w	RunPLC
000021EC 51CC FFEE                  		dbf	d4,@mainloop
000021F0 4E75                       		rts	
000021F2                            ; End of function PaletteFadeOut
000021F2                            
000021F2                            
000021F2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000021F2                            
000021F2                            
000021F2                            FadeOut_ToBlack:
000021F2 7000                       		moveq	#0,d0
000021F4 41F8 FB00                  		lea	(v_pal_dry).w,a0
000021F8 1038 F626                  		move.b	(v_pfade_start).w,d0
000021FC D0C0                       		adda.w	d0,a0
000021FE 1038 F627                  		move.b	(v_pfade_size).w,d0
00002202                            
00002202                            	@decolour:
00002202 6100                       		bsr.s	FadeOut_DecColour ; decrease colour
00002204 51C8 FFFC                  		dbf	d0,@decolour	; repeat for size of palette
00002208                            
00002208 7000                       		moveq	#0,d0
0000220A 41F8 FA80                  		lea	(v_pal_water).w,a0
0000220E 1038 F626                  		move.b	(v_pfade_start).w,d0
00002212 D0C0                       		adda.w	d0,a0
00002214 1038 F627                  		move.b	(v_pfade_size).w,d0
00002218                            
00002218                            	@decolour2:
00002218 6100                       		bsr.s	FadeOut_DecColour
0000221A 51C8 FFFC                  		dbf	d0,@decolour2
0000221E 4E75                       		rts	
00002220                            ; End of function FadeOut_ToBlack
00002220                            
00002220                            
00002220                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002220                            
00002220                            
00002220                            FadeOut_DecColour:
00002220                            @dered:
00002220 3410                       		move.w	(a0),d2
00002222 6700                       		beq.s	@next
00002224 3202                       		move.w	d2,d1
00002226 0241 000E                  		andi.w	#$E,d1
0000222A 6700                       		beq.s	@degreen
0000222C 5558                       		subq.w	#2,(a0)+	; decrease red value
0000222E 4E75                       		rts	
00002230                            ; ===========================================================================
00002230                            
00002230                            @degreen:
00002230 3202                       		move.w	d2,d1
00002232 0241 00E0                  		andi.w	#$E0,d1
00002236 6700                       		beq.s	@deblue
00002238 0458 0020                  		subi.w	#$20,(a0)+	; decrease green value
0000223C 4E75                       		rts	
0000223E                            ; ===========================================================================
0000223E                            
0000223E                            @deblue:
0000223E 3202                       		move.w	d2,d1
00002240 0241 0E00                  		andi.w	#$E00,d1
00002244 6700                       		beq.s	@next
00002246 0458 0200                  		subi.w	#$200,(a0)+	; decrease blue	value
0000224A 4E75                       		rts	
0000224C                            ; ===========================================================================
0000224C                            
0000224C                            @next:
0000224C 5448                       		addq.w	#2,a0
0000224E 4E75                       		rts	
00002250                            ; End of function FadeOut_DecColour
00002250                            
00002250                            ; ---------------------------------------------------------------------------
00002250                            ; Subroutine to	fade in from white (Special Stage)
00002250                            ; ---------------------------------------------------------------------------
00002250                            
00002250                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002250                            
00002250                            
00002250                            PaletteWhiteIn:
00002250 31FC 003F F626             		move.w	#$003F,(v_pfade_start).w ; start position = 0; size = $40
00002256 7000                       		moveq	#0,d0
00002258 41F8 FB00                  		lea	(v_pal_dry).w,a0
0000225C 1038 F626                  		move.b	(v_pfade_start).w,d0
00002260 D0C0                       		adda.w	d0,a0
00002262 323C 0EEE                  		move.w	#cWhite,d1
00002266 1038 F627                  		move.b	(v_pfade_size).w,d0
0000226A                            
0000226A                            	@fill:
0000226A 30C1                       		move.w	d1,(a0)+
0000226C 51C8 FFFC                  		dbf	d0,@fill 	; fill palette with white
00002270                            
00002270 383C 0015                  		move.w	#$15,d4
00002274                            
00002274                            	@mainloop:
00002274 11FC 0012 F62A             		move.b	#$12,(v_vbla_routine).w
0000227A 6100 0000                  		bsr.w	WaitForVBla
0000227E 6100                       		bsr.s	WhiteIn_FromWhite
00002280 6100 F524                  		bsr.w	RunPLC
00002284 51CC FFEE                  		dbf	d4,@mainloop
00002288 4E75                       		rts	
0000228A                            ; End of function PaletteWhiteIn
0000228A                            
0000228A                            
0000228A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000228A                            
0000228A                            
0000228A                            WhiteIn_FromWhite:
0000228A 7000                       		moveq	#0,d0
0000228C 41F8 FB00                  		lea	(v_pal_dry).w,a0
00002290 43F8 FB80                  		lea	(v_pal_dry_dup).w,a1
00002294 1038 F626                  		move.b	(v_pfade_start).w,d0
00002298 D0C0                       		adda.w	d0,a0
0000229A D2C0                       		adda.w	d0,a1
0000229C 1038 F627                  		move.b	(v_pfade_size).w,d0
000022A0                            
000022A0                            	@decolour:
000022A0 6100                       		bsr.s	WhiteIn_DecColour ; decrease colour
000022A2 51C8 FFFC                  		dbf	d0,@decolour	; repeat for size of palette
000022A6                            
000022A6 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w	; is level Labyrinth?
000022AC 6600                       		bne.s	@exit		; if not, branch
000022AE 7000                       		moveq	#0,d0
000022B0 41F8 FA80                  		lea	(v_pal_water).w,a0
000022B4 43F8 FA00                  		lea	(v_pal_water_dup).w,a1
000022B8 1038 F626                  		move.b	(v_pfade_start).w,d0
000022BC D0C0                       		adda.w	d0,a0
000022BE D2C0                       		adda.w	d0,a1
000022C0 1038 F627                  		move.b	(v_pfade_size).w,d0
000022C4                            
000022C4                            	@decolour2:
000022C4 6100                       		bsr.s	WhiteIn_DecColour
000022C6 51C8 FFFC                  		dbf	d0,@decolour2
000022CA                            
000022CA                            	@exit:
000022CA 4E75                       		rts	
000022CC                            ; End of function WhiteIn_FromWhite
000022CC                            
000022CC                            
000022CC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000022CC                            
000022CC                            
000022CC                            WhiteIn_DecColour:
000022CC                            @deblue:
000022CC 3419                       		move.w	(a1)+,d2
000022CE 3610                       		move.w	(a0),d3
000022D0 B642                       		cmp.w	d2,d3
000022D2 6700                       		beq.s	@next
000022D4 3203                       		move.w	d3,d1
000022D6 0441 0200                  		subi.w	#$200,d1	; decrease blue	value
000022DA 6500                       		blo.s	@degreen
000022DC B242                       		cmp.w	d2,d1
000022DE 6500                       		blo.s	@degreen
000022E0 30C1                       		move.w	d1,(a0)+
000022E2 4E75                       		rts	
000022E4                            ; ===========================================================================
000022E4                            
000022E4                            @degreen:
000022E4 3203                       		move.w	d3,d1
000022E6 0441 0020                  		subi.w	#$20,d1		; decrease green value
000022EA 6500                       		blo.s	@dered
000022EC B242                       		cmp.w	d2,d1
000022EE 6500                       		blo.s	@dered
000022F0 30C1                       		move.w	d1,(a0)+
000022F2 4E75                       		rts	
000022F4                            ; ===========================================================================
000022F4                            
000022F4                            @dered:
000022F4 5558                       		subq.w	#2,(a0)+	; decrease red value
000022F6 4E75                       		rts	
000022F8                            ; ===========================================================================
000022F8                            
000022F8                            @next:
000022F8 5448                       		addq.w	#2,a0
000022FA 4E75                       		rts	
000022FC                            ; End of function WhiteIn_DecColour
000022FC                            
000022FC                            ; ---------------------------------------------------------------------------
000022FC                            ; Subroutine to fade to white (Special Stage)
000022FC                            ; ---------------------------------------------------------------------------
000022FC                            
000022FC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000022FC                            
000022FC                            
000022FC                            PaletteWhiteOut:
000022FC 31FC 003F F626             		move.w	#$003F,(v_pfade_start).w ; start position = 0; size = $40
00002302 383C 0015                  		move.w	#$15,d4
00002306                            
00002306                            	@mainloop:
00002306 11FC 0012 F62A             		move.b	#$12,(v_vbla_routine).w
0000230C 6100 0000                  		bsr.w	WaitForVBla
00002310 6100                       		bsr.s	WhiteOut_ToWhite
00002312 6100 F492                  		bsr.w	RunPLC
00002316 51CC FFEE                  		dbf	d4,@mainloop
0000231A 4E75                       		rts	
0000231C                            ; End of function PaletteWhiteOut
0000231C                            
0000231C                            
0000231C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000231C                            
0000231C                            
0000231C                            WhiteOut_ToWhite:
0000231C 7000                       		moveq	#0,d0
0000231E 41F8 FB00                  		lea	(v_pal_dry).w,a0
00002322 1038 F626                  		move.b	(v_pfade_start).w,d0
00002326 D0C0                       		adda.w	d0,a0
00002328 1038 F627                  		move.b	(v_pfade_size).w,d0
0000232C                            
0000232C                            	@addcolour:
0000232C 6100                       		bsr.s	WhiteOut_AddColour
0000232E 51C8 FFFC                  		dbf	d0,@addcolour
00002332                            
00002332 7000                       		moveq	#0,d0
00002334 41F8 FA80                  		lea	(v_pal_water).w,a0
00002338 1038 F626                  		move.b	(v_pfade_start).w,d0
0000233C D0C0                       		adda.w	d0,a0
0000233E 1038 F627                  		move.b	(v_pfade_size).w,d0
00002342                            
00002342                            	@addcolour2:
00002342 6100                       		bsr.s	WhiteOut_AddColour
00002344 51C8 FFFC                  		dbf	d0,@addcolour2
00002348 4E75                       		rts	
0000234A                            ; End of function WhiteOut_ToWhite
0000234A                            
0000234A                            
0000234A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000234A                            
0000234A                            
0000234A                            WhiteOut_AddColour:
0000234A                            @addred:
0000234A 3410                       		move.w	(a0),d2
0000234C 0C42 0EEE                  		cmpi.w	#cWhite,d2
00002350 6700                       		beq.s	@next
00002352 3202                       		move.w	d2,d1
00002354 0241 000E                  		andi.w	#$E,d1
00002358 0C41 000E                  		cmpi.w	#cRed,d1
0000235C 6700                       		beq.s	@addgreen
0000235E 5458                       		addq.w	#2,(a0)+	; increase red value
00002360 4E75                       		rts	
00002362                            ; ===========================================================================
00002362                            
00002362                            @addgreen:
00002362 3202                       		move.w	d2,d1
00002364 0241 00E0                  		andi.w	#$E0,d1
00002368 0C41 00E0                  		cmpi.w	#cGreen,d1
0000236C 6700                       		beq.s	@addblue
0000236E 0658 0020                  		addi.w	#$20,(a0)+	; increase green value
00002372 4E75                       		rts	
00002374                            ; ===========================================================================
00002374                            
00002374                            @addblue:
00002374 3202                       		move.w	d2,d1
00002376 0241 0E00                  		andi.w	#$E00,d1
0000237A 0C41 0E00                  		cmpi.w	#cBlue,d1
0000237E 6700                       		beq.s	@next
00002380 0658 0200                  		addi.w	#$200,(a0)+	; increase blue	value
00002384 4E75                       		rts	
00002386                            ; ===========================================================================
00002386                            
00002386                            @next:
00002386 5448                       		addq.w	#2,a0
00002388 4E75                       		rts	
0000238A                            ; End of function WhiteOut_AddColour
0000238A                            
0000238A                            ; ---------------------------------------------------------------------------
0000238A                            ; Palette cycling routine - Sega logo
0000238A                            ; ---------------------------------------------------------------------------
0000238A                            
0000238A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000238A                            
0000238A                            
0000238A                            PalCycle_Sega:
0000238A 4A38 F635                  		tst.b	(v_pcyc_time+1).w
0000238E 6600                       		bne.s	loc_206A
00002390 43F8 FB20                  		lea	(v_pal_dry+$20).w,a1
00002394 41F9 0000 0000             		lea	(Pal_Sega1).l,a0
0000239A 7205                       		moveq	#5,d1
0000239C 3038 F632                  		move.w	(v_pcyc_num).w,d0
000023A0                            
000023A0                            loc_2020:
000023A0 6A00                       		bpl.s	loc_202A
000023A2 5448                       		addq.w	#2,a0
000023A4 5341                       		subq.w	#1,d1
000023A6 5440                       		addq.w	#2,d0
000023A8 60F6                       		bra.s	loc_2020
000023AA                            ; ===========================================================================
000023AA                            
000023AA                            loc_202A:
000023AA 3400                       		move.w	d0,d2
000023AC 0242 001E                  		andi.w	#$1E,d2
000023B0 6600                       		bne.s	loc_2034
000023B2 5440                       		addq.w	#2,d0
000023B4                            
000023B4                            loc_2034:
000023B4 0C40 0060                  		cmpi.w	#$60,d0
000023B8 6400                       		bhs.s	loc_203E
000023BA 3398 0000                  		move.w	(a0)+,(a1,d0.w)
000023BE                            
000023BE                            loc_203E:
000023BE 5440                       		addq.w	#2,d0
000023C0 51C9 FFE8                  		dbf	d1,loc_202A
000023C4                            
000023C4 3038 F632                  		move.w	(v_pcyc_num).w,d0
000023C8 5440                       		addq.w	#2,d0
000023CA 3400                       		move.w	d0,d2
000023CC 0242 001E                  		andi.w	#$1E,d2
000023D0 6600                       		bne.s	loc_2054
000023D2 5440                       		addq.w	#2,d0
000023D4                            
000023D4                            loc_2054:
000023D4 0C40 0064                  		cmpi.w	#$64,d0
000023D8 6D00                       		blt.s	loc_2062
000023DA 31FC 0401 F634             		move.w	#$401,(v_pcyc_time).w
000023E0 70F4                       		moveq	#-$C,d0
000023E2                            
000023E2                            loc_2062:
000023E2 31C0 F632                  		move.w	d0,(v_pcyc_num).w
000023E6 7001                       		moveq	#1,d0
000023E8 4E75                       		rts	
000023EA                            ; ===========================================================================
000023EA                            
000023EA                            loc_206A:
000023EA 5338 F634                  		subq.b	#1,(v_pcyc_time).w
000023EE 6A00                       		bpl.s	loc_20BC
000023F0 11FC 0004 F634             		move.b	#4,(v_pcyc_time).w
000023F6 3038 F632                  		move.w	(v_pcyc_num).w,d0
000023FA 0640 000C                  		addi.w	#$C,d0
000023FE 0C40 0030                  		cmpi.w	#$30,d0
00002402 6500                       		blo.s	loc_2088
00002404 7000                       		moveq	#0,d0
00002406 4E75                       		rts	
00002408                            ; ===========================================================================
00002408                            
00002408                            loc_2088:
00002408 31C0 F632                  		move.w	d0,(v_pcyc_num).w
0000240C 41F9 0000 0000             		lea	(Pal_Sega2).l,a0
00002412 41F0 0000                  		lea	(a0,d0.w),a0
00002416 43F8 FB04                  		lea	(v_pal_dry+$04).w,a1
0000241A 22D8                       		move.l	(a0)+,(a1)+
0000241C 22D8                       		move.l	(a0)+,(a1)+
0000241E 3298                       		move.w	(a0)+,(a1)
00002420 43F8 FB20                  		lea	(v_pal_dry+$20).w,a1
00002424 7000                       		moveq	#0,d0
00002426 722C                       		moveq	#$2C,d1
00002428                            
00002428                            loc_20A8:
00002428 3400                       		move.w	d0,d2
0000242A 0242 001E                  		andi.w	#$1E,d2
0000242E 6600                       		bne.s	loc_20B2
00002430 5440                       		addq.w	#2,d0
00002432                            
00002432                            loc_20B2:
00002432 3390 0000                  		move.w	(a0),(a1,d0.w)
00002436 5440                       		addq.w	#2,d0
00002438 51C9 FFEE                  		dbf	d1,loc_20A8
0000243C                            
0000243C                            loc_20BC:
0000243C 7001                       		moveq	#1,d0
0000243E 4E75                       		rts	
00002440                            ; End of function PalCycle_Sega
00002440                            
00002440                            ; ===========================================================================
00002440                            
00002440                            Pal_Sega1:	incbin	"palette\Sega1.bin"
0000244C                            Pal_Sega2:	incbin	"palette\Sega2.bin"
0000247C                            
0000247C                            ; ---------------------------------------------------------------------------
0000247C                            ; Subroutines to load palettes
0000247C                            
0000247C                            ; input:
0000247C                            ;	d0 = index number for palette
0000247C                            ; ---------------------------------------------------------------------------
0000247C                            
0000247C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000247C                            
0000247C                            
0000247C                            ; ---------------------------------------------------------------------------
0000247C                            ; Subroutines to load pallets
0000247C                            ; ---------------------------------------------------------------------------
0000247C                            
0000247C                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
0000247C                            
0000247C                            PalLoad1:
0000247C 1238 FE11                  		move.b ($FFFFFE11),d1
00002480 43F9 0000 0000             		lea (PalPointers).l,a1
00002486 0C01 0000                  		cmp.b #0,d1
0000248A 6700 0000                  		beq.w PalLoad1_Continue
0000248E 43F9 0000 0000             		lea (PalPointers2).l,a1
00002494 0C01 0001                  		cmp.b #1,d1
00002498 6700 0000                  		beq.w PalLoad1_Continue
0000249C 43F9 0000 0000             		lea (PalPointers3).l,a1
000024A2                            
000024A2                            PalLoad1_Continue:
000024A2 E748                       		lsl.w #3,d0
000024A4 D2C0                       		adda.w d0,a1
000024A6 2459                       		movea.l (a1)+,a2
000024A8 3659                       		movea.w (a1)+,a3
000024AA D6FC 0080                  		adda.w #$80,a3
000024AE 3E19                       		move.w (a1)+,d7
000024B0                            
000024B0                            loc_2110:
000024B0 26DA                       		move.l (a2)+,(a3)+
000024B2 51CF FFFC                  		dbf d7,loc_2110
000024B6 4E75                       		rts
000024B8                             ; End of function PalLoad1
000024B8                            
000024B8                            
000024B8                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
000024B8                            
000024B8                            PalLoad2:
000024B8 1238 FE11                  		move.b ($FFFFFE11),d1
000024BC 43F9 0000 0000             		lea (PalPointers).l,a1
000024C2 0C01 0000                  		cmp.b #0,d1
000024C6 6700 0000                  		beq.w PalLoad2_Continue
000024CA 43F9 0000 0000             		lea (PalPointers2).l,a1
000024D0 0C01 0001                  		cmp.b #1,d1
000024D4 6700 0000                  		beq.w PalLoad2_Continue
000024D8 43F9 0000 0000             		lea (PalPointers3).l,a1
000024DE                            
000024DE                            
000024DE                            PalLoad2_Continue:
000024DE E748                       		lsl.w #3,d0
000024E0 D2C0                       		adda.w d0,a1
000024E2 2459                       		movea.l (a1)+,a2
000024E4 3659                       		movea.w (a1)+,a3
000024E6 3E19                       		move.w (a1)+,d7
000024E8                            
000024E8                            loc_2128:
000024E8 26DA                       		move.l (a2)+,(a3)+
000024EA 51CF FFFC                  		dbf d7,loc_2128
000024EE 4E75                       		rts
000024F0                            ; End of function PalLoad2
000024F0                            
000024F0                            ; ||||||||||||||| S U B    R O U T    I N E |||||||||||||||||||||||||||||||||||||||
000024F0                            
000024F0                            
000024F0                            PalLoad_Loop: ;Quick load - TIS
000024F0                                    
000024F0 34D9                               move.w    (a1)+,(a2)+              ;Copy pallete data to RAM
000024F2 51C8 FFFC                          dbf    d0,PalLoad_Loop               ;Loop d0 (length)
000024F6 4E75                               rts
000024F8                            
000024F8                            ; ---------------------------------------------------------------------------
000024F8                            ; Underwater pallet loading subroutine
000024F8                            ; ---------------------------------------------------------------------------
000024F8                            
000024F8                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
000024F8                            
000024F8                            PalLoad3_Water:
000024F8 1238 FE11                  		move.b ($FFFFFE11),d1
000024FC 43F9 0000 0000             		lea (PalPointers).l,a1
00002502 0C01 0000                  		cmp.b #0,d1
00002506 6700 0000                  		beq.w PalLoad3_Continue
0000250A 43F9 0000 0000             		lea (PalPointers2).l,a1
00002510 0C01 0001                  		cmp.b #1,d1
00002514 6700 0000                  		beq.w PalLoad3_Continue
00002518 43F9 0000 0000             		lea (PalPointers3).l,a1
0000251E                            
0000251E                            PalLoad3_Continue:
0000251E E748                       		lsl.w #3,d0
00002520 D2C0                       		adda.w d0,a1
00002522 2459                       		movea.l (a1)+,a2
00002524 3659                       		movea.w (a1)+,a3
00002526 96FC 0080                  		suba.w #$80,a3
0000252A 3E19                       		move.w (a1)+,d7
0000252C                            
0000252C                            loc_2144:
0000252C 26DA                       		move.l (a2)+,(a3)+
0000252E 51CF FFFC                  		dbf d7,loc_2144
00002532 4E75                       		rts
00002534                            ; End of function PalLoad3_Water
00002534                            
00002534                            
00002534                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
00002534                            
00002534                            
00002534                            PalLoad4_Water:
00002534 1238 FE11                  		move.b ($FFFFFE11),d1
00002538 43F9 0000 0000             		lea (PalPointers).l,a1
0000253E 0C01 0000                  		cmp.b #0,d1
00002542 6700 0000                  		beq.w PalLoad4_Continue
00002546 43F9 0000 0000             		lea (PalPointers2).l,a1
0000254C 0C01 0001                  		cmp.b #1,d1
00002550 6700 0000                  		beq.w PalLoad4_Continue
00002554 43F9 0000 0000             		lea (PalPointers3).l,a1
0000255A                            
0000255A                            PalLoad4_Continue:
0000255A E748                       		lsl.w #3,d0
0000255C D2C0                       		adda.w d0,a1
0000255E 2459                       		movea.l (a1)+,a2
00002560 3659                       		movea.w (a1)+,a3
00002562 96FC 0100                  		suba.w #$100,a3
00002566 3E19                       		move.w (a1)+,d7
00002568                            loc_2160:
00002568 26DA                       		move.l (a2)+,(a3)+
0000256A 51CF FFFC                  		dbf d7,loc_2160
0000256E 4E75                       		rts
00002570                             ; End of function PalLoad4_Water
00002570                            
00002570                            ; ===========================================================================
00002570                            
00002570                            		include	"_inc\Palette Pointers.asm"
00002570                            ; ---------------------------------------------------------------------------
00002570                            ; Palette pointers
00002570                            ; ---------------------------------------------------------------------------
00002570                            
00002570                            palp:	macro paladdress,ramaddress,colors
00002570                            	dc.l paladdress
00002570                            	dc.w ramaddress, (colors>>1)-1
00002570                            	endm
00002570                            
00002570                            PalPointers:
00002570                            
00002570                            ; palette address, RAM address, colors
00002570                            
00002570 0000 0000 FB00 001F        ptr_Pal_SegaBG:		palp	Pal_SegaBG,v_pal_dry,$40		; 0 - Sega logo
00002578 0000 0000 FB00 001F        ptr_Pal_Title:		palp	Pal_Title,v_pal_dry,$40		; 1 - title screen
00002580 0000 0000 FB00 001F        ptr_Pal_LevelSel:	palp	Pal_LevelSel,v_pal_dry,$40		; 2 - level select
00002588 0000 0000 FB00 0007        ptr_Pal_Sonic:		palp	Pal_Sonic,v_pal_dry,$10		; 3 - Sonic
00002590                            Pal_Levels:
00002590 0000 0000 FB20 0017        ptr_Pal_GHZ:		palp	Pal_GHZ,v_pal_dry+$20, $30		; 4 - GHZ
00002598 0000 0000 FB20 0017        ptr_Pal_LZ:		palp	Pal_LZ,v_pal_dry+$20,$30		; 5 - LZ
000025A0 0000 0000 FB20 0017        ptr_Pal_MZ:		palp	Pal_MZ,v_pal_dry+$20,$30		; 6 - MZ
000025A8 0000 0000 FB20 0017        ptr_Pal_SLZ:		palp	Pal_SLZ,v_pal_dry+$20,$30		; 7 - SLZ
000025B0 0000 0000 FB20 0017        ptr_Pal_SYZ:		palp	Pal_SYZ,v_pal_dry+$20,$30		; 8 - SYZ
000025B8 0000 0000 FB20 0017        ptr_Pal_SBZ1:		palp	Pal_SBZ1,v_pal_dry+$20,$30		; 9 - SBZ1
000025C0 0000 0000 FB00 001F        ptr_Pal_Special:	palp	Pal_Special,v_pal_dry,$40		; $A (10) - special stage
000025C8 0000 0000 FB00 001F        ptr_Pal_LZWater:	palp	Pal_LZWater,v_pal_dry,$40		; $B (11) - LZ underwater
000025D0 0000 0000 FB20 0017        ptr_Pal_SBZ3:		palp	Pal_SBZ3,v_pal_dry+$20,$30		; $C (12) - SBZ3
000025D8 0000 0000 FB00 001F        ptr_Pal_SBZ3Water:	palp	Pal_SBZ3Water,v_pal_dry,$40		; $D (13) - SBZ3 underwater
000025E0 0000 0000 FB20 0017        ptr_Pal_SBZ2:		palp	Pal_SBZ2,v_pal_dry+$20,$30		; $E (14) - SBZ2
000025E8 0000 0000 FB00 0007        ptr_Pal_LZSonWater:	palp	Pal_LZSonWater,v_pal_dry,$10	; $F (15) - LZ Sonic underwater
000025F0 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat:	palp	Pal_SBZ3SonWat,v_pal_dry,$10	; $10 (16) - SBZ3 Sonic underwater
000025F8 0000 0000 FB00 001F        ptr_Pal_SSResult:	palp	Pal_SSResult,v_pal_dry,$40		; $11 (17) - special stage results
00002600 0000 0000 FB00 000F        ptr_Pal_Continue:	palp	Pal_Continue,v_pal_dry,$20		; $12 (18) - special stage results continue
00002608 0000 0000 FB00 001F        ptr_Pal_Ending:		palp	Pal_Ending,v_pal_dry,$40		; $13 (19) - ending sequence
00002610 0000 0000 FB00 001F        ptr_Pal_Options:		palp	Pal_Options,v_pal_dry,$40		; $14 (20) - options screen
00002618 0000 0000 FB00 0007        ptr_Pal_Sonic2:		palp	Pal_Sonic2,v_pal_dry,$10		; $15 (20) - Sonic (Sonic 1)
00002620 0000 0000 FB00 0007        ptr_Pal_Sonic3:		palp	Pal_Sonic3,v_pal_dry,$10		; $16 (21) - Sonic (Beta)
00002628 0000 0000 FB00 0007        ptr_Pal_Sonic4:		palp	Pal_Sonic4,v_pal_dry,$10		; $17 (22) - Sonic (Midnight)
00002630 0000 0000 FB00 0007        ptr_Pal_Sonic5:		palp	Pal_Sonic5,v_pal_dry,$10		; $18 (23) - Sonic (C2)
00002638 0000 0000 FB00 0007        ptr_Pal_Sonic6:		palp	Pal_Sonic6,v_pal_dry,$10		; $19 (24) - Sonic (Crackers)
00002640 0000 0000 FB00 0007        ptr_Pal_Sonic7:		palp	Pal_Sonic7,v_pal_dry,$10		; $1A (25) - Sonic (RHS)
00002648 0000 0000 FB00 0007        ptr_Pal_Sonic8:		palp	Pal_Sonic8,v_pal_dry,$10		; $1B (26) - Sonic (Socket)
00002650 0000 0000 FB00 0007        ptr_Pal_Sonic9:		palp	Pal_Sonic9,v_pal_dry,$10		; $1C (27) - Sonic (Cringe)
00002658 0000 0000 FB00 0007        ptr_Pal_Sonic10:		palp	Pal_Sonic10,v_pal_dry,$10		; $1D (28) - Sonic (Darker)
00002660 0000 0000 FB00 0007        ptr_Pal_SonWater2:		palp	Pal_SonWater2,v_pal_dry,$10		; $15 (20) - Sonic Underwater (Sonic 1)
00002668 0000 0000 FB00 0007        ptr_Pal_SonWater3:		palp	Pal_SonWater3,v_pal_dry,$10		; $16 (21) - Sonic Underwater (Beta)
00002670 0000 0000 FB00 0007        ptr_Pal_SonWater4:		palp	Pal_SonWater4,v_pal_dry,$10		; $17 (22) - Sonic Underwater (Midnight)
00002678 0000 0000 FB00 0007        ptr_Pal_SonWater5:		palp	Pal_SonWater5,v_pal_dry,$10		; $18 (23) - Sonic Underwater (C2)
00002680 0000 0000 FB00 0007        ptr_Pal_SonWater6:		palp	Pal_SonWater6,v_pal_dry,$10		; $19 (24) - Sonic Underwater (Crackers)
00002688 0000 0000 FB00 0007        ptr_Pal_SonWater7:		palp	Pal_SonWater7,v_pal_dry,$10		; $1A (25) - Sonic Underwater (RHS)
00002690 0000 0000 FB00 0007        ptr_Pal_SonWater8:		palp	Pal_SonWater8,v_pal_dry,$10		; $1B (26) - Sonic Underwater (Socket)
00002698 0000 0000 FB00 0007        ptr_Pal_SonWater9:		palp	Pal_SonWater9,v_pal_dry,$10		; $1C (27) - Sonic Underwater (Cringe)
000026A0 0000 0000 FB00 0007        ptr_Pal_SonWater10:		palp	Pal_SonWater10,v_pal_dry,$10		; $1D (28) - Sonic Underwater (Darker)
000026A8 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat2:	palp	Pal_SBZ3SonWat2,v_pal_dry,$10		; $15 (20) - Sonic Underwater (Sonic 1)
000026B0 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat3:	palp	Pal_SBZ3SonWat3,v_pal_dry,$10	; $16 (21) - Sonic Underwater (Beta)
000026B8 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat4:	palp	Pal_SBZ3SonWat4,v_pal_dry,$10	; $17 (22) - Sonic Underwater (Midnight)
000026C0 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat5:	palp	Pal_SBZ3SonWat5,v_pal_dry,$10	; $18 (23) - Sonic Underwater (C2)
000026C8 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat6:	palp	Pal_SBZ3SonWat6,v_pal_dry,$10	; $19 (24) - Sonic Underwater (Crackers)
000026D0 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat7:	palp	Pal_SBZ3SonWat7,v_pal_dry,$10	; $1A (25) - Sonic Underwater (RHS)
000026D8 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat8:	palp	Pal_SBZ3SonWat8,v_pal_dry,$10	; $1B (26) - Sonic Underwater (Socket)
000026E0 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat9:	palp	Pal_SBZ3SonWat9,v_pal_dry,$10	; $1C (27) - Sonic Underwater (Cringe)
000026E8 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat10:	palp	Pal_SBZ3SonWat10,v_pal_dry,$10	; $1D (28) - Sonic Underwater (Darker)
000026F0                            			even
000026F0                            
000026F0                            PalPointers2:
000026F0                            
000026F0                            ; palette address, RAM address, colors
000026F0                            ; Note, Uses Duplicate entries to ensure they are in the correct place, but they are not needed in the IDs
000026F0 0000 0000 FB00 001F        ptr_Pal_SegaBG_D:		palp	Pal_SegaBG,v_pal_dry,$40		; 0 - Sega logo
000026F8 0000 0000 FB00 001F        ptr_Pal_Title_D:		palp	Pal_Title,v_pal_dry,$40		; 1 - title screen
00002700 0000 0000 FB00 001F        ptr_Pal_LevelSel_D:	palp	Pal_LevelSel,v_pal_dry,$40		; 2 - level select
00002708 0000 0000 FB00 0007        ptr_Pal_SonicD:		palp	Pal_Sonic,v_pal_dry,$10		; 3 - Sonic
00002710                            Pal_Levels_2:
00002710 0000 0000 FB20 0017        ptr_Pal_GHZ2:		palp	Pal_GHZ2,v_pal_dry+$20, $30		; 4 - GHZ
00002718 0000 0000 FB20 0017        ptr_Pal_LZ2:		palp	Pal_LZ2,v_pal_dry+$20,$30		; 5 - LZ
00002720 0000 0000 FB20 0017        ptr_Pal_MZ2:		palp	Pal_MZ2,v_pal_dry+$20,$30		; 6 - MZ
00002728 0000 0000 FB20 0017        ptr_Pal_SLZ2:		palp	Pal_SLZ2,v_pal_dry+$20,$30		; 7 - SLZ
00002730 0000 0000 FB20 0017        ptr_Pal_SYZ2:		palp	Pal_SYZ2,v_pal_dry+$20,$30		; 8 - SYZ
00002738 0000 0000 FB20 0017        ptr_Pal_SBZ1_D:		palp	Pal_SBZ1,v_pal_dry+$20,$30		; 9 - SBZ1
00002740 0000 0000 FB00 001F        ptr_Pal_Special_D:	palp	Pal_Special,v_pal_dry,$40		; $A (10) - special stage
00002748 0000 0000 FB00 001F        ptr_Pal_LZWatr2:	palp	Pal_LZWatr2,v_pal_dry,$40		; $B (11) - LZ underwater
00002750 0000 0000 FB20 0017        ptr_Pal_SBZ3_D:		palp	Pal_SBZ3,v_pal_dry+$20,$30		; $C (12) - SBZ3
00002758 0000 0000 FB00 001F        ptr_Pal_SBZ3Water_D:	palp	Pal_SBZ3Water,v_pal_dry,$40		; $D (13) - SBZ3 underwater
00002760 0000 0000 FB20 0017        ptr_Pal_SBZ2_D:		palp	Pal_SBZ2,v_pal_dry+$20,$30		; $E (14) - SBZ2
00002768 0000 0000 FB00 0007        ptr_Pal_LZSonWatr2:	palp	Pal_LZSonWatr2,v_pal_dry,$10	; $F (15) - LZ Sonic underwater
00002770 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat_D:	palp	Pal_SBZ3SonWat,v_pal_dry,$10	; $10 (16) - SBZ3 Sonic underwater
00002778 0000 0000 FB00 001F        ptr_Pal_SSResult_D:	palp	Pal_SSResult,v_pal_dry,$40		; $11 (17) - special stage results
00002780 0000 0000 FB00 000F        ptr_Pal_Continue_D:	palp	Pal_Continue,v_pal_dry,$20		; $12 (18) - special stage results continue
00002788 0000 0000 FB00 001F        ptr_Pal_Options_D:		palp	Pal_Options,v_pal_dry,$40		; $13 (20) - options screen
00002790 0000 0000 FB00 001F        ptr_Pal_Ending_D:		palp	Pal_Ending,v_pal_dry,$40		; $14 (21) - ending sequence
00002798 0000 0000 FB00 0007        ptr_Pal_Sonic2_D:		palp	Pal_Sonic2,v_pal_dry,$10		; $15 (22) - Sonic (Sonic 1)
000027A0 0000 0000 FB00 0007        ptr_Pal_Sonic3_D:		palp	Pal_Sonic3,v_pal_dry,$10		; $16 (23) - Sonic (Beta)
000027A8 0000 0000 FB00 0007        ptr_Pal_Sonic4_D:		palp	Pal_Sonic4,v_pal_dry,$10		; $17 (24) - Sonic (Midnight)
000027B0 0000 0000 FB00 0007        ptr_Pal_Sonic5_D:		palp	Pal_Sonic5,v_pal_dry,$10		; $18 (25) - Sonic (C2)
000027B8 0000 0000 FB00 0007        ptr_Pal_Sonic6_D:		palp	Pal_Sonic6,v_pal_dry,$10		; $19 (26) - Sonic (Crackers)
000027C0 0000 0000 FB00 0007        ptr_Pal_Sonic7_D:		palp	Pal_Sonic7,v_pal_dry,$10		; $1A (27) - Sonic (RHS)
000027C8 0000 0000 FB00 0007        ptr_Pal_Sonic8_D:		palp	Pal_Sonic8,v_pal_dry,$10		; $1B (28) - Sonic (Socket)
000027D0 0000 0000 FB00 0007        ptr_Pal_Sonic9_D:		palp	Pal_Sonic9,v_pal_dry,$10		; $1C (29) - Sonic (Cringe)
000027D8 0000 0000 FB00 0007        ptr_Pal_Sonic10_D:		palp	Pal_Sonic10,v_pal_dry,$10		; $1D (30) - Sonic (Darker)
000027E0 0000 0000 FB00 0007        ptr_Pal_SonWater2_D:		palp	Pal_SonWater2,v_pal_dry,$10		; $15 (31) - Sonic Underwater (Sonic 1)
000027E8 0000 0000 FB00 0007        ptr_Pal_SonWater3_D:		palp	Pal_SonWater3,v_pal_dry,$10		; $16 (32) - Sonic Underwater (Beta)
000027F0 0000 0000 FB00 0007        ptr_Pal_SonWater4_D:		palp	Pal_SonWater4,v_pal_dry,$10		; $17 (33) - Sonic Underwater (Midnight)
000027F8 0000 0000 FB00 0007        ptr_Pal_SonWater5_D:		palp	Pal_SonWater5,v_pal_dry,$10		; $18 (34) - Sonic Underwater (C2)
00002800 0000 0000 FB00 0007        ptr_Pal_SonWater6_D:		palp	Pal_SonWater6,v_pal_dry,$10		; $19 (35) - Sonic Underwater (Crackers)
00002808 0000 0000 FB00 0007        ptr_Pal_SonWater7_D:		palp	Pal_SonWater7,v_pal_dry,$10		; $1A (36) - Sonic Underwater (RHS)
00002810 0000 0000 FB00 0007        ptr_Pal_SonWater8_D:		palp	Pal_SonWater8,v_pal_dry,$10		; $1B (37) - Sonic Underwater (Socket)
00002818 0000 0000 FB00 0007        ptr_Pal_SonWater9_D:		palp	Pal_SonWater9,v_pal_dry,$10		; $1C (38) - Sonic Underwater (Cringe)
00002820 0000 0000 FB00 0007        ptr_Pal_SonWater10_D:		palp	Pal_SonWater10,v_pal_dry,$10		; $1D (39) - Sonic Underwater (Darker)
00002828 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat2D:	palp	Pal_SBZ3SonWat2,v_pal_dry,$10		; $15 (40) - Sonic Underwater (Sonic 1)
00002830 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat3D:	palp	Pal_SBZ3SonWat3,v_pal_dry,$10	; $16 (41) - Sonic Underwater (Beta)
00002838 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat4D:	palp	Pal_SBZ3SonWat4,v_pal_dry,$10	; $17 (42) - Sonic Underwater (Midnight)
00002840 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat5D:	palp	Pal_SBZ3SonWat5,v_pal_dry,$10	; $18 (43) - Sonic Underwater (C2)
00002848 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat6D:	palp	Pal_SBZ3SonWat6,v_pal_dry,$10	; $19 (44) - Sonic Underwater (Crackers)
00002850 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat7D:	palp	Pal_SBZ3SonWat7,v_pal_dry,$10	; $1A (45) - Sonic Underwater (RHS)
00002858 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat8D:	palp	Pal_SBZ3SonWat8,v_pal_dry,$10	; $1B (46) - Sonic Underwater (Socket)
00002860 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat9D:	palp	Pal_SBZ3SonWat9,v_pal_dry,$10	; $1C (47) - Sonic Underwater (Cringe)
00002868 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat10D:	palp	Pal_SBZ3SonWat10,v_pal_dry,$10	; $1D (48) - Sonic Underwater (Darker)
00002870                            			even
00002870                            			
00002870                            PalPointers3:
00002870                            			
00002870                            ; Note, Uses Duplicate entries to ensure they are in the correct place, but they are not needed in the IDs
00002870 0000 0000 FB00 001F        ptr_Pal_SegaBG_E:		palp	Pal_SegaBG,v_pal_dry,$40		; 0 - Sega logo
00002878 0000 0000 FB00 001F        ptr_Pal_Title_E:		palp	Pal_Title,v_pal_dry,$40		; 1 - title screen
00002880 0000 0000 FB00 001F        ptr_Pal_LevelSel_E:		palp	Pal_LevelSel,v_pal_dry,$40		; 2 - level select
00002888 0000 0000 FB00 0007        ptr_Pal_SonicE:			palp	Pal_Sonic,v_pal_dry,$10		; 3 - Sonic
00002890                            Pal_Levels_3:
00002890 0000 0000 FB20 0017        ptr_Pal_GHZ3:		palp	Pal_GHZ3,v_pal_dry+$20, $30		; 4 - GHZ
00002898 0000 0000 FB20 0017        ptr_Pal_LZ3:		palp	Pal_LZ3,v_pal_dry+$20,$30		; 5 - LZ
000028A0 0000 0000 FB20 0017        ptr_Pal_MZ3:		palp	Pal_MZ3,v_pal_dry+$20,$30		; 6 - MZ
000028A8 0000 0000 FB20 0017        ptr_Pal_SLZ3:		palp	Pal_SLZ3,v_pal_dry+$20,$30		; 7 - SLZ
000028B0 0000 0000 FB20 0017        ptr_Pal_SYZ3:		palp	Pal_SYZ3,v_pal_dry+$20,$30		; 8 - SYZ
000028B8 0000 0000 FB20 0017        ptr_Pal_SBZ1_E:		palp	Pal_SBZ1,v_pal_dry+$20,$30		; 9 - SBZ1
000028C0 0000 0000 FB00 001F        ptr_Pal_Special_E:	palp	Pal_Special,v_pal_dry,$40		; $A (10) - special stage
000028C8 0000 0000 FB00 001F        ptr_Pal_LZWatr3:	palp	Pal_LZWatr3,v_pal_dry,$40		; $B (11) - LZ underwater
000028D0 0000 0000 FB20 0017        ptr_Pal_SBZ3_E:		palp	Pal_SBZ3,v_pal_dry+$20,$30		; $C (12) - SBZ3
000028D8 0000 0000 FB00 001F        ptr_Pal_SBZ3Water_E:	palp	Pal_SBZ3Water,v_pal_dry,$40		; $D (13) - SBZ3 underwater
000028E0 0000 0000 FB20 0017        ptr_Pal_SBZ2_E:		palp	Pal_SBZ2,v_pal_dry+$20,$30		; $E (14) - SBZ2
000028E8 0000 0000 FB00 0007        ptr_Pal_LZSonWatr2E:	palp	Pal_LZSonWatr2,v_pal_dry,$10	; $F (15) - LZ Sonic underwater
000028F0 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat_E:	palp	Pal_SBZ3SonWat,v_pal_dry,$10	; $10 (16) - SBZ3 Sonic underwater
000028F8 0000 0000 FB00 001F        ptr_Pal_SSResult_E:	palp	Pal_SSResult,v_pal_dry,$40		; $11 (17) - special stage results
00002900 0000 0000 FB00 000F        ptr_Pal_Continue_E:	palp	Pal_Continue,v_pal_dry,$20		; $12 (18) - special stage results continue
00002908 0000 0000 FB00 001F        ptr_Pal_Ending_E:		palp	Pal_Ending,v_pal_dry,$40		; $13 (19) - ending sequence
00002910 0000 0000 FB00 001F        ptr_Pal_Options_E:		palp	Pal_Options,v_pal_dry,$40		; $14 (21) - options screen
00002918 0000 0000 FB00 0007        ptr_Pal_Sonic2_E:		palp	Pal_Sonic2,v_pal_dry,$10		; $15 (22) - Sonic (Sonic 1)
00002920 0000 0000 FB00 0007        ptr_Pal_Sonic3_E:		palp	Pal_Sonic3,v_pal_dry,$10		; $16 (23) - Sonic (Beta)
00002928 0000 0000 FB00 0007        ptr_Pal_Sonic4_E:		palp	Pal_Sonic4,v_pal_dry,$10		; $17 (24) - Sonic (Midnight)
00002930 0000 0000 FB00 0007        ptr_Pal_Sonic5_E:		palp	Pal_Sonic5,v_pal_dry,$10		; $18 (25) - Sonic (C2)
00002938 0000 0000 FB00 0007        ptr_Pal_Sonic6_E:		palp	Pal_Sonic6,v_pal_dry,$10		; $19 (26) - Sonic (Crackers)
00002940 0000 0000 FB00 0007        ptr_Pal_Sonic7_E:		palp	Pal_Sonic7,v_pal_dry,$10		; $1A (27) - Sonic (RHS)
00002948 0000 0000 FB00 0007        ptr_Pal_Sonic8_E:		palp	Pal_Sonic8,v_pal_dry,$10		; $1B (28) - Sonic (Socket)
00002950 0000 0000 FB00 0007        ptr_Pal_Sonic9_E:		palp	Pal_Sonic9,v_pal_dry,$10		; $1C (29) - Sonic (Cringe)
00002958 0000 0000 FB00 0007        ptr_Pal_Sonic10_E:		palp	Pal_Sonic10,v_pal_dry,$10		; $1D (30) - Sonic (Darker)
00002960 0000 0000 FB00 0007        ptr_Pal_SonWater2_E:		palp	Pal_SonWater2,v_pal_dry,$10		; $15 (31) - Sonic Underwater (Sonic 1)
00002968 0000 0000 FB00 0007        ptr_Pal_SonWater3_E:		palp	Pal_SonWater3,v_pal_dry,$10		; $16 (32) - Sonic Underwater (Beta)
00002970 0000 0000 FB00 0007        ptr_Pal_SonWater4_E:		palp	Pal_SonWater4,v_pal_dry,$10		; $17 (33) - Sonic Underwater (Midnight)
00002978 0000 0000 FB00 0007        ptr_Pal_SonWater5_E:		palp	Pal_SonWater5,v_pal_dry,$10		; $18 (34) - Sonic Underwater (C2)
00002980 0000 0000 FB00 0007        ptr_Pal_SonWater6_E:		palp	Pal_SonWater6,v_pal_dry,$10		; $19 (35) - Sonic Underwater (Crackers)
00002988 0000 0000 FB00 0007        ptr_Pal_SonWater7_E:		palp	Pal_SonWater7,v_pal_dry,$10		; $1A (36) - Sonic Underwater (RHS)
00002990 0000 0000 FB00 0007        ptr_Pal_SonWater8_E:		palp	Pal_SonWater8,v_pal_dry,$10		; $1B (37) - Sonic Underwater (Socket)
00002998 0000 0000 FB00 0007        ptr_Pal_SonWater9_E:		palp	Pal_SonWater9,v_pal_dry,$10		; $1C (38) - Sonic Underwater (Cringe)
000029A0 0000 0000 FB00 0007        ptr_Pal_SonWater10_E:		palp	Pal_SonWater10,v_pal_dry,$10		; $1D (39) - Sonic Underwater (Darker)
000029A8 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat2E:	palp	Pal_SBZ3SonWat2,v_pal_dry,$10		; $15 (40) - Sonic Underwater (Sonic 1)
000029B0 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat3E:	palp	Pal_SBZ3SonWat3,v_pal_dry,$10	; $16 (41) - Sonic Underwater (Beta)
000029B8 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat4E:	palp	Pal_SBZ3SonWat4,v_pal_dry,$10	; $17 (42) - Sonic Underwater (Midnight)
000029C0 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat5E:	palp	Pal_SBZ3SonWat5,v_pal_dry,$10	; $18 (43) - Sonic Underwater (C2)
000029C8 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat6E:	palp	Pal_SBZ3SonWat6,v_pal_dry,$10	; $19 (44) - Sonic Underwater (Crackers)
000029D0 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat7E:	palp	Pal_SBZ3SonWat7,v_pal_dry,$10	; $1A (45) - Sonic Underwater (RHS)
000029D8 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat8E:	palp	Pal_SBZ3SonWat8,v_pal_dry,$10	; $1B (46) - Sonic Underwater (Socket)
000029E0 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat9E:	palp	Pal_SBZ3SonWat9,v_pal_dry,$10	; $1C (47) - Sonic Underwater (Cringe)
000029E8 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat10E:	palp	Pal_SBZ3SonWat10,v_pal_dry,$10	; $1D (48) - Sonic Underwater (Darker)
000029F0                            			even
000029F0                            
000029F0                            
000029F0 =00000000                  palid_SegaBG:		equ (ptr_Pal_SegaBG-PalPointers)/8
000029F0 =00000001                  palid_Title:		equ (ptr_Pal_Title-PalPointers)/8
000029F0 =00000002                  palid_LevelSel:		equ (ptr_Pal_LevelSel-PalPointers)/8
000029F0 =00000003                  palid_Sonic:		equ (ptr_Pal_Sonic-PalPointers)/8
000029F0 =00000004                  palid_GHZ:		equ (ptr_Pal_GHZ-PalPointers)/8
000029F0 =00000005                  palid_LZ:		equ (ptr_Pal_LZ-PalPointers)/8
000029F0 =00000006                  palid_MZ:		equ (ptr_Pal_MZ-PalPointers)/8
000029F0 =00000007                  palid_SLZ:		equ (ptr_Pal_SLZ-PalPointers)/8
000029F0 =00000008                  palid_SYZ:		equ (ptr_Pal_SYZ-PalPointers)/8
000029F0 =00000009                  palid_SBZ1:		equ (ptr_Pal_SBZ1-PalPointers)/8
000029F0 =0000000A                  palid_Special:		equ (ptr_Pal_Special-PalPointers)/8
000029F0 =0000000B                  palid_LZWater:		equ (ptr_Pal_LZWater-PalPointers)/8
000029F0 =0000000C                  palid_SBZ3:		equ (ptr_Pal_SBZ3-PalPointers)/8
000029F0 =0000000D                  palid_SBZ3Water:	equ (ptr_Pal_SBZ3Water-PalPointers)/8
000029F0 =0000000E                  palid_SBZ2:		equ (ptr_Pal_SBZ2-PalPointers)/8
000029F0 =0000000F                  palid_LZSonWater:	equ (ptr_Pal_LZSonWater-PalPointers)/8
000029F0 =00000010                  palid_SBZ3SonWat:	equ (ptr_Pal_SBZ3SonWat-PalPointers)/8
000029F0 =00000011                  palid_SSResult:		equ (ptr_Pal_SSResult-PalPointers)/8
000029F0 =00000012                  palid_Continue:		equ (ptr_Pal_Continue-PalPointers)/8
000029F0 =00000013                  palid_Ending:		equ (ptr_Pal_Ending-PalPointers)/8
000029F0 =00000014                  palid_Options:		equ (ptr_Pal_Options-PalPointers)/8
000029F0 =00000004                  palid_GHZ2:		equ (ptr_Pal_GHZ-PalPointers)/8
000029F0 =00000005                  palid_LZ2:		equ (ptr_Pal_LZ-PalPointers)/8
000029F0 =00000006                  palid_MZ2:		equ (ptr_Pal_MZ-PalPointers)/8
000029F0 =00000007                  palid_SLZ2:		equ (ptr_Pal_SLZ-PalPointers)/8
000029F0 =00000008                  palid_SYZ2:		equ (ptr_Pal_SYZ-PalPointers)/8
000029F0 =0000003B                  palid_LZWatr2:		equ (ptr_Pal_LZWatr2-PalPointers)/8
000029F0 =0000000F                  palid_LZSonWatr2:	equ (ptr_Pal_LZSonWater-PalPointers)/8
000029F0 =00000064                  palid_GHZ3:		equ (ptr_Pal_GHZ3-PalPointers)/8
000029F0 =00000065                  palid_LZ3:		equ (ptr_Pal_LZ3-PalPointers)/8
000029F0 =00000066                  palid_MZ3:		equ (ptr_Pal_MZ3-PalPointers)/8
000029F0 =00000067                  palid_SLZ3:		equ (ptr_Pal_SLZ3-PalPointers)/8
000029F0 =00000068                  palid_SYZ3:		equ (ptr_Pal_SYZ3-PalPointers)/8
000029F0 =0000006B                  palid_LZWatr3:		equ (ptr_Pal_LZWatr3-PalPointers)/8
000029F0 =0000000F                  palid_LZSonWatr3:	equ (ptr_Pal_LZSonWater-PalPointers)/8
000029F0 =00000015                  palid_Sonic2:		equ (ptr_Pal_Sonic2-PalPointers)/8
000029F0 =00000016                  palid_Sonic3:		equ (ptr_Pal_Sonic3-PalPointers)/8
000029F0 =00000017                  palid_Sonic4:		equ (ptr_Pal_Sonic4-PalPointers)/8
000029F0 =00000018                  palid_Sonic5:		equ (ptr_Pal_Sonic5-PalPointers)/8
000029F0 =00000019                  palid_Sonic6:		equ (ptr_Pal_Sonic6-PalPointers)/8
000029F0 =0000001A                  palid_Sonic7:		equ (ptr_Pal_Sonic7-PalPointers)/8
000029F0 =0000001B                  palid_Sonic8:		equ (ptr_Pal_Sonic8-PalPointers)/8
000029F0 =0000001C                  palid_Sonic9:		equ (ptr_Pal_Sonic9-PalPointers)/8
000029F0 =0000001D                  palid_Sonic10:		equ (ptr_Pal_Sonic10-PalPointers)/8
000029F0 =0000001E                  palid_SonWater2:		equ (ptr_Pal_SonWater2-PalPointers)/8
000029F0 =0000001F                  palid_SonWater3:		equ (ptr_Pal_SonWater3-PalPointers)/8
000029F0 =00000020                  palid_SonWater4:		equ (ptr_Pal_SonWater4-PalPointers)/8
000029F0 =00000021                  palid_SonWater5:		equ (ptr_Pal_SonWater5-PalPointers)/8
000029F0 =00000022                  palid_SonWater6:		equ (ptr_Pal_SonWater6-PalPointers)/8
000029F0 =00000023                  palid_SonWater7:		equ (ptr_Pal_SonWater7-PalPointers)/8
000029F0 =00000024                  palid_SonWater8:		equ (ptr_Pal_SonWater8-PalPointers)/8
000029F0 =00000025                  palid_SonWater9:		equ (ptr_Pal_SonWater9-PalPointers)/8
000029F0 =00000026                  palid_SonWater10:		equ (ptr_Pal_SonWater10-PalPointers)/8
000029F0 =00000027                  palid_SBZ3SonWat2:		equ (ptr_Pal_SBZ3SonWat2-PalPointers)/8
000029F0 =00000028                  palid_SBZ3SonWat3:		equ (ptr_Pal_SBZ3SonWat3-PalPointers)/8
000029F0 =00000029                  palid_SBZ3SonWat4:		equ (ptr_Pal_SBZ3SonWat4-PalPointers)/8
000029F0 =0000002A                  palid_SBZ3SonWat5:		equ (ptr_Pal_SBZ3SonWat5-PalPointers)/8
000029F0 =0000002B                  palid_SBZ3SonWat6:		equ (ptr_Pal_SBZ3SonWat6-PalPointers)/8
000029F0 =0000002C                  palid_SBZ3SonWat7:		equ (ptr_Pal_SBZ3SonWat7-PalPointers)/8
000029F0 =0000002D                  palid_SBZ3SonWat8:		equ (ptr_Pal_SBZ3SonWat8-PalPointers)/8
000029F0 =0000002E                  palid_SBZ3SonWat9:		equ (ptr_Pal_SBZ3SonWat9-PalPointers)/8
000029F0 =0000002F                  palid_SBZ3SonWat10:		equ (ptr_Pal_SBZ3SonWat10-PalPointers)/8
000029F0 =0000002F                  palid_SBZ3SonWat10:		equ (ptr_Pal_SBZ3SonWat10-PalPointers)/8
000029F0                            		
000029F0                            		;include	"_inc\Palette Pointers2.asm"
000029F0                            		
000029F0                            		;include	"_inc\Palette Pointers3.asm"
000029F0                            		
000029F0                            
000029F0                            ; ---------------------------------------------------------------------------
000029F0                            ; Palette data
000029F0                            ; ---------------------------------------------------------------------------
000029F0                            Pal_SegaBG:	incbin	"palette\Sega Background.bin"
00002A70                            Pal_Title:	incbin	"palette\Title Screen.bin"
00002AF0                            Pal_LevelSel:	incbin	"palette\Level Select.bin"
00002B70                            Pal_Sonic:	incbin	"palette\Sonic Pal\01 Default.bin"
00002B90                            Pal_GHZ:	incbin	"palette\Green Hill Zone.bin"
00002BF0                            Pal_GHZ2:	incbin	"palette\Green Hill Zone2.bin"
00002C50                            Pal_GHZ3:	incbin	"palette\Green Hill Zone3.bin"
00002CB0                            Pal_LZ:		incbin	"palette\Labyrinth Zone.bin"
00002D10                            Pal_LZ2:	incbin	"palette\Labyrinth Zone2.bin"
00002D70                            Pal_LZ3:	incbin	"palette\Labyrinth Zone3.bin"
00002DD0                            Pal_LZWater:	incbin	"palette\Labyrinth Zone Underwater.bin"
00002E50                            Pal_LZWatr2:	incbin	"palette\Labyrinth Zone Underwater2.bin"
00002ED0                            Pal_LZWatr3:	incbin	"palette\Labyrinth Zone Underwater3.bin"
00002F50                            Pal_MZ:		incbin	"palette\Marble Zone.bin"
00002FB0                            Pal_MZ2:	incbin	"palette\Marble Zone2.bin"
00003010                            Pal_MZ3:	incbin	"palette\Marble Zone3.bin"
00003070                            Pal_SLZ:	incbin	"palette\Star Light Zone.bin"
000030D0                            Pal_SLZ2:	incbin	"palette\Star Light Zone2.bin"
00003130                            Pal_SLZ3:	incbin	"palette\Star Light Zone3.bin"
00003190                            Pal_SYZ:	incbin	"palette\Spring Yard Zone.bin"
000031F0                            Pal_SYZ2:	incbin	"palette\Spring Yard Zone2.bin"
00003250                            Pal_SYZ3:	incbin	"palette\Spring Yard Zone3.bin"
000032B0                            Pal_SBZ1:	incbin	"palette\SBZ Act 1.bin"
00003310                            Pal_SBZ2:	incbin	"palette\SBZ Act 2.bin"
00003370                            Pal_Special:	incbin	"palette\Special Stage.bin"
000033F0                            Pal_SBZ3:	incbin	"palette\SBZ Act 3.bin"
00003450                            Pal_SBZ3Water:	incbin	"palette\SBZ Act 3 Underwater.bin"
000034D0                            Pal_LZSonWater:	incbin	"palette\Sonic - LZ Underwater.bin"
000034F0                            Pal_LZSonWatr2:	incbin	"palette\Sonic - LZ2 Underwater.bin"
00003510                            Pal_SBZ3SonWat:	incbin	"palette\Sonic - SBZ3 Underwater.bin"
00003530                            Pal_SSResult:	incbin	"palette\Special Stage Results.bin"
000035B0                            Pal_Continue:	incbin	"palette\Special Stage Continue Bonus.bin"
000035F0                            Pal_Ending:	incbin	"palette\Ending.bin"
00003670                            Pal_Options:	incbin	"palette\Options.bin"
000036F0                            Pal_Sonic2:	incbin	"palette\Sonic Pal\02 Sonic 1.bin"
00003710                            Pal_Sonic3:	incbin	"palette\Sonic Pal\03 Beta.bin"
00003730                            Pal_Sonic4:	incbin	"palette\Sonic Pal\04 Midnight.bin"
00003750                            Pal_Sonic5:	incbin	"palette\Sonic Pal\05 C2.bin"
00003770                            Pal_Sonic6:	incbin	"palette\Sonic Pal\06 Clacker.bin"
00003790                            Pal_Sonic7:	incbin	"palette\Sonic Pal\07 Red Hot.bin"
000037B0                            Pal_Sonic8:	incbin	"palette\Sonic Pal\08 Socket.bin"
000037D0                            Pal_Sonic9:	incbin	"palette\Sonic Pal\09 Cringe.bin"
000037F0                            Pal_Sonic10:	incbin	"palette\Sonic Pal\10 Dark.bin"
00003810                            Pal_SonWater2:	incbin	"palette\Sonic Pal\02 Sonic 1 Underwater.bin"
00003830                            Pal_SonWater3:	incbin	"palette\Sonic Pal\03 Beta Underwater.bin"
00003850                            Pal_SonWater4:	incbin	"palette\Sonic Pal\04 Midnight Underwater.bin"
00003870                            Pal_SonWater5:	incbin	"palette\Sonic Pal\05 C2 Underwater.bin"
00003890                            Pal_SonWater6:	incbin	"palette\Sonic Pal\06 Clacker Underwater.bin"
000038B0                            Pal_SonWater7:	incbin	"palette\Sonic Pal\07 Red Hot Underwater.bin"
000038D0                            Pal_SonWater8:	incbin	"palette\Sonic Pal\08 Socket Underwater.bin"
000038F0                            Pal_SonWater9:	incbin	"palette\Sonic Pal\09 Cringe Underwater.bin"
00003910                            Pal_SonWater10:	incbin	"palette\Sonic Pal\10 Dark Underwater.bin"
00003930                            Pal_SBZ3SonWat2:	incbin	"palette\Sonic Pal\02 Sonic 1 SBZ3.bin"
00003950                            Pal_SBZ3SonWat3:	incbin	"palette\Sonic Pal\03 Beta SBZ3.bin"
00003970                            Pal_SBZ3SonWat4:	incbin	"palette\Sonic Pal\04 Midnight SBZ3.bin"
00003990                            Pal_SBZ3SonWat5:	incbin	"palette\Sonic Pal\05 C2 SBZ3.bin"
000039B0                            Pal_SBZ3SonWat6:	incbin	"palette\Sonic Pal\06 Clacker SBZ3.bin"
000039D0                            Pal_SBZ3SonWat7:	incbin	"palette\Sonic Pal\07 Red Hot SBZ3.bin"
000039F0                            Pal_SBZ3SonWat8:	incbin	"palette\Sonic Pal\08 Socket SBZ3.bin"
00003A10                            Pal_SBZ3SonWat9:	incbin	"palette\Sonic Pal\09 Cringe SBZ3.bin"
00003A30                            Pal_SBZ3SonWat10:	incbin	"palette\Sonic Pal\10 Dark SBZ3.bin"
00003A50                            ; ---------------------------------------------------------------------------
00003A50                            ; Subroutine to	wait for VBlank routines to complete
00003A50                            ; ---------------------------------------------------------------------------
00003A50                            
00003A50                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00003A50                            
00003A50                            
00003A50                            WaitForVBla:
00003A50 46FC 2300                  		enable_ints
00003A54                            
00003A54                            	@wait:
00003A54 4A38 F62A                  		tst.b	(v_vbla_routine).w ; has VBlank routine finished?
00003A58 66FA                       		bne.s	@wait		; if not, branch
00003A5A 4E75                       		rts	
00003A5C                            ; End of function WaitForVBla
00003A5C                            
00003A5C                            		include	"_incObj\sub RandomNumber.asm"
00003A5C                            ; ---------------------------------------------------------------------------
00003A5C                            ; Subroutine to	generate a pseudo-random number	in d0
00003A5C                            ; ---------------------------------------------------------------------------
00003A5C                            
00003A5C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00003A5C                            
00003A5C                            
00003A5C                            RandomNumber:
00003A5C 2238 F636                  		move.l	(v_random).w,d1
00003A60 6600                       		bne.s	@scramble	; if d1 is not 0, branch
00003A62 223C 2A6D 365A             		move.l	#$2A6D365A,d1	; if d1 is 0, use seed number
00003A68                            
00003A68                            	@scramble:
00003A68 2001                       		move.l	d1,d0
00003A6A E581                       		asl.l	#2,d1
00003A6C D280                       		add.l	d0,d1
00003A6E E781                       		asl.l	#3,d1
00003A70 D280                       		add.l	d0,d1
00003A72 3001                       		move.w	d1,d0
00003A74 4841                       		swap	d1
00003A76 D041                       		add.w	d1,d0
00003A78 3200                       		move.w	d0,d1
00003A7A 4841                       		swap	d1
00003A7C 21C1 F636                  		move.l	d1,(v_random).w
00003A80 4E75                       		rts	
00003A80 4E75                       		rts	
00003A82                            		include	"_incObj\sub CalcSine.asm"
00003A82                            ; ---------------------------------------------------------------------------
00003A82                            ; Subroutine calculate a sine
00003A82                            
00003A82                            ; input:
00003A82                            ;	d0 = angle
00003A82                            
00003A82                            ; output:
00003A82                            ;	d0 = sine
00003A82                            ;	d1 = cosine
00003A82                            ; ---------------------------------------------------------------------------
00003A82                            
00003A82                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00003A82                            
00003A82                            
00003A82                            CalcSine:
00003A82 0240 00FF                          andi.w  #$FF,d0
00003A86 5040                               addq.w  #8,d0
00003A88 D040                               add.w   d0,d0
00003A8A 323B 0000                          move.w  Sine_Data+($40*2)-16(pc,d0.w),d1
00003A8E 303B 0000                          move.w  Sine_Data-16(pc,d0.w),d0
00003A92 4E75                               rts
00003A94                            ; End of function CalcSine
00003A94                            
00003A94                            ; ===========================================================================
00003A94                            
00003A94                            Sine_Data:	incbin	"misc\sinewave.bin"	; values for a 360° sine wave
00003D14                            
00003D14                            ; ===========================================================================
00003D14                            ; ===========================================================================
00003D14                            		include	"_incObj\sub CalcAngle.asm"
00003D14                            ; ---------------------------------------------------------------------------
00003D14                            ; Subroutine calculate an angle
00003D14                            
00003D14                            ; input:
00003D14                            ;	d1 = x-axis distance
00003D14                            ;	d2 = y-axis distance
00003D14                            
00003D14                            ; output:
00003D14                            ;	d0 = angle
00003D14                            ; ---------------------------------------------------------------------------
00003D14                            
00003D14                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00003D14                            
00003D14                            
00003D14                            CalcAngle:
00003D14 48E7 1800                  		movem.l	d3-d4,-(sp)
00003D18 7600                       		moveq	#0,d3
00003D1A 7800                       		moveq	#0,d4
00003D1C 3601                       		move.w	d1,d3
00003D1E 3802                       		move.w	d2,d4
00003D20 8843                       		or.w	d3,d4
00003D22 6700                       		beq.s	loc_2D04
00003D24 3802                       		move.w	d2,d4
00003D26 4A43                       		tst.w	d3
00003D28 6A00 0000                  		bpl.w	loc_2CC2
00003D2C 4443                       		neg.w	d3
00003D2E                            
00003D2E                            loc_2CC2:
00003D2E 4A44                       		tst.w	d4
00003D30 6A00 0000                  		bpl.w	loc_2CCA
00003D34 4444                       		neg.w	d4
00003D36                            
00003D36                            loc_2CCA:
00003D36 B843                       		cmp.w	d3,d4
00003D38 6400 0000                  		bcc.w	loc_2CDC
00003D3C E18C                       		lsl.l	#8,d4
00003D3E 88C3                       		divu.w	d3,d4
00003D40 7000                       		moveq	#0,d0
00003D42 103B 4000                  		move.b	Angle_Data(pc,d4.w),d0
00003D46 6000                       		bra.s	loc_2CE6
00003D48                            ; ===========================================================================
00003D48                            
00003D48                            loc_2CDC:
00003D48 E18B                       		lsl.l	#8,d3
00003D4A 86C4                       		divu.w	d4,d3
00003D4C 7040                       		moveq	#$40,d0
00003D4E 903B 3000                  		sub.b	Angle_Data(pc,d3.w),d0
00003D52                            
00003D52                            loc_2CE6:
00003D52 4A41                       		tst.w	d1
00003D54 6A00 0000                  		bpl.w	loc_2CF2
00003D58 4440                       		neg.w	d0
00003D5A 0640 0080                  		addi.w	#$80,d0
00003D5E                            
00003D5E                            loc_2CF2:
00003D5E 4A42                       		tst.w	d2
00003D60 6A00 0000                  		bpl.w	loc_2CFE
00003D64 4440                       		neg.w	d0
00003D66 0640 0100                  		addi.w	#$100,d0
00003D6A                            
00003D6A                            loc_2CFE:
00003D6A 4CDF 0018                  		movem.l	(sp)+,d3-d4
00003D6E 4E75                       		rts	
00003D70                            ; ===========================================================================
00003D70                            
00003D70                            loc_2D04:
00003D70 303C 0040                  		move.w	#$40,d0
00003D74 4CDF 0018                  		movem.l	(sp)+,d3-d4
00003D78 4E75                       		rts	
00003D7A                            ; End of function CalcAngle
00003D7A                            
00003D7A                            ; ===========================================================================
00003D7A                            
00003D7A                            Angle_Data:	incbin	"misc\angles.bin"
00003E7C                            
00003E7C                            ; ===========================================================================
00003E7C                            ; ===========================================================================
00003E7C                            
00003E7C                            ; ---------------------------------------------------------------------------
00003E7C                            ; Sega screen
00003E7C                            ; ---------------------------------------------------------------------------
00003E7C                            
00003E7C                            GM_Sega:
00003E84 6100 D912                  		bsr.w	ClearPLC
00003E88 6100 E348                  		bsr.w	PaletteFadeOut
00003E8C 4DF9 00C0 0004             		lea	(vdp_control_port).l,a6
00003E92 3CBC 8004                  		move.w	#$8004,(a6)	; use 8-colour mode
00003E96 3CBC 8230                  		move.w	#$8200+(vram_fg>>10),(a6) ; set foreground nametable address
00003E9A 3CBC 8407                  		move.w	#$8400+(vram_bg>>13),(a6) ; set background nametable address
00003E9E 3CBC 8700                  		move.w	#$8700,(a6)	; set background colour (palette entry 0)
00003EA2 3CBC 8B00                  		move.w	#$8B00,(a6)	; full-screen vertical scrolling
00003EA6 4238 F64E                  		clr.b	(f_wtr_state).w
00003EAA 46FC 2700                  		disable_ints
00003EAE 3038 F60C                  		move.w	(v_vdp_buffer1).w,d0
00003EB2 0200 00BF                  		andi.b	#$BF,d0
00003EB6 33C0 00C0 0004             		move.w	d0,(vdp_control_port).l
00003EBC 6100 D312                  		bsr.w	ClearScreen
00003ECA 41F9 0000 0000             		lea	(Nem_SegaLogo).l,a0 ; load Sega	logo patterns
00003ED0 6100 D47C                  		bsr.w	NemDec
00003ED4 43F9 00FF 0000             		lea	($FF0000).l,a1
00003EDA 41F9 0000 0000             		lea	(Eni_SegaLogo).l,a0 ; load Sega	logo mappings
00003EE0 303C 0000                  		move.w	#0,d0
00003EE4 6100 D9F2                  		bsr.w	EniDec
00003EE8                            
00003EE8 43F9 00FF 0000 203C 6510+  		copyTilemap	$FF0000,$E510,$17,7
00003EFC 43F9 00FF 0180 203C 4000+  		copyTilemap	$FF0180,$C000,$27,$1B
00003F10                            
00003F10 4A38 FFF8                  			tst.b   (v_megadrive).w	; is console Japanese?
00003F14 6B00                       			bmi.s   @loadpal
00003F16 43F9 00FF 0A40 203C 453A+  			copyTilemap	$FF0A40,$C53A,2,1 ; hide "TM" with a white rectangle
00003F2A                            
00003F2A                            	@loadpal:
00003F2A 7000                       		moveq	#palid_SegaBG,d0
00003F2C 6100 E58A                  		bsr.w	PalLoad2	; load Sega logo palette
00003F30 47F9 FFFF FB80                     lea        ($FFFFFB80).l,a3
00003F36 7E3F                               moveq    #$3F,d7
00003F38                             
00003F38                                .loop:
00003F38 36FC 0000                          move.w    #cBlack,(a3)+    ; move data to RAM
00003F3C 51CF FFFA                          dbf        d7,.loop
00003F40 6100 E1EA                          bsr.w     PaletteFadeIn ; added to allow fade in			
00003F44 31FC FFF6 F632             		move.w	#-$A,(v_pcyc_num).w
00003F4A 31FC 0000 F634             		move.w	#0,(v_pcyc_time).w
00003F50 31FC 0000 F662             		move.w	#0,(v_pal_buffer+$12).w
00003F56 31FC 0000 F660             		move.w	#0,(v_pal_buffer+$10).w
00003F5C 3038 F60C                  		move.w	(v_vdp_buffer1).w,d0
00003F60 0000 0040                  		ori.b	#$40,d0
00003F64 33C0 00C0 0004             		move.w	d0,(vdp_control_port).l
00003F6A                            
00003F6A                            Sega_WaitPal:
00003F6A 11FC 0002 F62A             		move.b	#2,(v_vbla_routine).w
00003F70 6100 FADE                  		bsr.w	WaitForVBla
00003F74 6100 E414                  		bsr.w	PalCycle_Sega
00003F78 66F0                       		bne.s	Sega_WaitPal
00003F7A                            
00003F82 11FC 0014 F62A             		move.b	#$14,(v_vbla_routine).w
00003F88 6100 FAC6                  		bsr.w	WaitForVBla
00003F8C 31FC 001E F614             		move.w	#$1E,(v_demolength).w
00003F92                            
00003F92                            Sega_WaitEnd:
00003F92 11FC 0002 F62A             		move.b	#2,(v_vbla_routine).w
00003F98 6100 FAB6                  		bsr.w	WaitForVBla
00003F9C 4A78 F614                  		tst.w	(v_demolength).w
00003FA0 6700                       		beq.s	Sega_GotoTitle
00003FA2 0238 0080 F605             		andi.b	#btnStart,(v_jpadpress1).w ; is Start button pressed?
00003FA8 67E8                       		beq.s	Sega_WaitEnd	; if not, branch
00003FAA                            
00003FAA                            Sega_GotoTitle:
00003FAA 11FC 0000 F600             		move.b	#id_Title,(v_gamemode).w ; go to title screen
00003FB0 4E75                       		rts	
00003FB2                            ; ===========================================================================
00003FB2                            
00003FB2                            ; ---------------------------------------------------------------------------
00003FB2                            ; Title	screen
00003FB2                            ; ---------------------------------------------------------------------------
00003FB2                            
00003FB2                            GM_Title:
00003FBA 6100 D7DC                  		bsr.w	ClearPLC
00003FBE 6100 E212                  		bsr.w	PaletteFadeOut
00003FC2 46FC 2700                  		disable_ints
00003FC6 6100 D28E                  		bsr.w	SoundDriverLoad
00003FCA 4DF9 00C0 0004             		lea	(vdp_control_port).l,a6
00003FD0 3CBC 8004                  		move.w	#$8004,(a6)	; 8-colour mode
00003FD4 3CBC 8230                  		move.w	#$8200+(vram_fg>>10),(a6) ; set foreground nametable address
00003FD8 3CBC 8407                  		move.w	#$8400+(vram_bg>>13),(a6) ; set background nametable address
00003FDC 3CBC 9001                  		move.w	#$9001,(a6)	; 64-cell hscroll size
00003FE0 3CBC 9200                  		move.w	#$9200,(a6)	; window vertical position
00003FE4 3CBC 8B03                  		move.w	#$8B03,(a6)
00003FE8 3CBC 8720                  		move.w	#$8720,(a6)	; set background colour (palette line 2, entry 0)
00003FEC 4238 F64E                  		clr.b	(f_wtr_state).w
00003FF0 6100 D1DE                  		bsr.w	ClearScreen
00003FF4 4EB9 0000 0000             		jsr		SHC2022 
00003FFA                            
00003FFA 43F8 D000                  		lea	(v_objspace).w,a1
00003FFE 7000                       		moveq	#0,d0
00004000 323C 07FF                  		move.w	#$7FF,d1
00004004                            
00004004                            	Tit_ClrObj1:
00004004 22C0                       		move.l	d0,(a1)+
00004006 51C9 FFFC                  		dbf	d1,Tit_ClrObj1	; fill object space ($D000-$EFFF) with 0
0000400A                            
00004014 41F9 0000 0000             		lea	(Nem_JapNames).l,a0 ; load Japanese credits
0000401A 6100 D332                  		bsr.w	NemDec
00004028 41F9 0000 0000             		lea	(Nem_CreditText).l,a0 ;	load alphabet
0000402E 6100 D31E                  		bsr.w	NemDec
00004032 43F9 00FF 0000             		lea	($FF0000).l,a1
00004038 41F9 0000 0000             		lea	(Eni_JapNames).l,a0 ; load mappings for	Japanese credits
0000403E 303C 0000                  		move.w	#0,d0
00004042 6100 D894                  		bsr.w	EniDec
00004046                            
00004046 43F9 00FF 0000 203C 4000+  		copyTilemap	$FF0000,$C000,$27,$1B
0000405A                            
0000405A 43F8 FB80                  		lea	(v_pal_dry_dup).w,a1
0000405E 7000                       		moveq	#cBlack,d0
00004060 323C 001F                  		move.w	#$1F,d1
00004064                            
00004064                            	Tit_ClrPal:
00004064 22C0                       		move.l	d0,(a1)+
00004066 51C9 FFFC                  		dbf	d1,Tit_ClrPal	; fill palette with 0 (black)
0000406A                            
0000406A 4EB9 0000 0000             		jsr		LoadPlayerPal
00004070 6100 E40A                  		bsr.w	PalLoad1
00004074 11FC 0000 D080             		move.b	#id_CreditsText,(v_objspace+$80).w ; load "SONIC TEAM PRESENTS" object
0000407A 4EB9 0000 0000             		jsr	(ExecuteObjects).l
00004080 4EB9 0000 0000             		jsr	(BuildSprites).l
00004086 6100 E0A4                  		bsr.w	PaletteFadeIn
0000408A 46FC 2700                  		disable_ints
00004098 41F9 0000 0000             		lea	(Nem_TitleFg).l,a0 ; load title	screen patterns
0000409E 6100 D2AE                  		bsr.w	NemDec
000040AC 41F9 0000 0000             		lea	(Nem_TitleSonic).l,a0 ;	load Sonic title screen	patterns
000040B2 6100 D29A                  		bsr.w	NemDec
000040C0 41F9 0000 0000             		lea (Nem_TitleMenu).l,a0 ; Load Menu Text/Characters pattern
000040C6 6100 D286                  		bsr.w 	NemDec
000040CA 4DF9 00C0 0000             		lea	(vdp_data_port).l,a6
000040D8 4BF9 0000 059E             		lea	(Art_Text).l,a5	; load level select font
000040DE 323C 028F                  		move.w	#$28F,d1
000040E2                            
000040E2                            	Tit_LoadText:
000040E2 3C9D                       		move.w	(a5)+,(a6)
000040E4 51C9 FFFC                  		dbf	d1,Tit_LoadText	; load level select font
000040E8                            
000040E8 11FC 0000 FE30             		move.b	#0,(v_lastlamp).w ; clear lamppost counter
000040EE 31FC 0000 FE08             		move.w	#0,(v_debuguse).w ; disable debug item placement mode
000040F4 31FC 0000 FFF0             		move.w	#0,(f_demo).w	; disable debug mode
000040FA 31FC 0000 FFEA             		move.w	#0,($FFFFFFEA).w ; unused variable
00004100 31FC 0000 FE10             		move.w	#(id_GHZ<<8),(v_zone).w	; set level to GHZ (00)
00004106 31FC 0000 F634             		move.w	#0,(v_pcyc_time).w ; disable palette cycling
0000410C 6100 0000                  		bsr.w	LevelSizeLoad
00004110 6100 0000                  		bsr.w	DeformLayers
00004114 43F8 B000                  		lea	(v_16x16).w,a1
00004118 41F9 0000 0000             		lea	(Blk16_TS).l,a0 ; load	GHZ 16x16 mappings
0000411E 303C 0000                  		move.w	#0,d0
00004122 6100 D7B4                  		bsr.w	EniDec
00004126 41F9 0000 0000             		lea	(Blk256_TS).l,a0 ; load GHZ 256x256 mappings
0000412C 43F9 00FF 0000             		lea	(v_256x256).l,a1
00004132 6100 D922                  		bsr.w	KosDec
00004136 6100 0000                  		bsr.w	LevelLayoutLoad
0000413A 6100 E096                  		bsr.w	PaletteFadeOut
0000413E 46FC 2700                  		disable_ints
00004142 6100 D08C                  		bsr.w	ClearScreen
00004146 4BF9 00C0 0004             		lea	(vdp_control_port).l,a5
0000414C 4DF9 00C0 0000             		lea	(vdp_data_port).l,a6
00004152 47F8 F708                  		lea	(v_bgscreenposx).w,a3
00004156 49F8 A440                  		lea	(v_lvllayout+$40).w,a4
0000415A 343C 6000                  		move.w	#$6000,d2
0000415E 6100 0000                  		bsr.w	DrawChunks
00004162 43F9 00FF 0000             		lea	($FF0000).l,a1
00004168 41F9 0000 0000             		lea	(Eni_Title).l,a0 ; load	title screen mappings
0000416E 303C 0000                  		move.w	#0,d0
00004172 6100 D764                  		bsr.w	EniDec
00004176                            
00004176 43F9 00FF 0000 203C 4206+  		copyTilemap	$FF0000,$C206,$21,$15
0000418A                            
00004194 41F9 0000 0000             		lea	(Nem_TS_1st).l,a0 ; load title screen patterns
0000419A 6100 D1B2                  		bsr.w	NemDec
0000419E 7001                       		moveq	#palid_Title,d0	; load title screen palette
000041A0 6100 E2DA                  		bsr.w	PalLoad1
000041AC 11FC 0000 FFFA             		move.b	#0,(f_debugmode).w ; disable debug mode
000041B2 31FC 0900 F614             		move.w	#$900,(v_demolength).w ; run title screen for $178 frames
000041B8 43F8 D080                  		lea	(v_objspace+$80).w,a1
000041BC 7000                       		moveq	#0,d0
000041BE 323C 0007                  		move.w	#7,d1
000041C2                            
000041C2                            	Tit_ClrObj2:
000041C2 22C0                       		move.l	d0,(a1)+
000041C4 51C9 FFFC                  		dbf	d1,Tit_ClrObj2
000041C8                            
000041C8 11FC 0000 D040             		move.b	#id_TitleSonic,(v_objspace+$40).w ; load big Sonic object
000041CE 11FC 0000 D080             		move.b	#id_PSBTM,(v_objspace+$80).w ; load "PRESS START BUTTON" object
000041D4 4238 D0A4                  		clr.b	(v_objspace+$80+obRoutine).w ; The 'Mega Games 10' version of Sonic 1 added this line, to fix the 'PRESS START BUTTON' object not appearing
000041D8                            
000041D8 4A38 FFF8                  			tst.b   (v_megadrive).w	; is console Japanese?
000041DC 6A00                       			bpl.s   @isjap		; if yes, branch
000041DE                            
000041DE 11FC 0000 D0C0             		move.b	#id_PSBTM,(v_objspace+$C0).w ; load "TM" object
000041E4 11FC 0003 D0DA             		move.b	#3,(v_objspace+$C0+obFrame).w
000041EA                            	@isjap:
000041EA 11FC 0000 D100             		move.b	#id_PSBTM,(v_objspace+$100).w ; load object which hides part of Sonic
000041F0 11FC 0002 D11A             		move.b	#2,(v_objspace+$100+obFrame).w
000041F6 4EB9 0000 0000             		jsr	(ExecuteObjects).l
000041FC 6100 0000                  		bsr.w	DeformLayers
00004200 4EB9 0000 0000             		jsr	(BuildSprites).l
00004206 7000                       		moveq	#plcid_Main,d0
00004208 6100 D562                  		bsr.w	NewPLC
0000420C 31FC 0000 FFE4             		move.w	#0,(v_title_dcount).w
00004212 31FC 0000 FFE6             		move.w	#0,(v_title_ccount).w
00004218 3038 F60C                  		move.w	(v_vdp_buffer1).w,d0
0000421C 0000 0040                  		ori.b	#$40,d0
00004220 33C0 00C0 0004             		move.w	d0,(vdp_control_port).l
00004226 6100 DF04                  		bsr.w	PaletteFadeIn
0000422A                            
0000422A                            Tit_MainLoop:
0000422A 11FC 0004 F62A             		move.b	#4,(v_vbla_routine).w
00004230 6100 F81E                  		bsr.w	WaitForVBla
00004234 4EB9 0000 0000             		jsr	(ExecuteObjects).l
0000423A 6100 0000                  		bsr.w	DeformLayers
0000423E 4EB9 0000 0000             		jsr	(BuildSprites).l
00004244 6100 DAF8                  		bsr.w	PCycle_Title
00004248 6100 D55C                  		bsr.w	RunPLC
0000424C 3038 D008                  		move.w	(v_objspace+obX).w,d0
00004250 5440                       		addq.w	#2,d0
00004252 31C0 D008                  		move.w	d0,(v_objspace+obX).w ; move Sonic to the right
00004256 0C40 1C00                  		cmpi.w	#$1C00,d0	; has Sonic object passed $1C00 on x-axis?
0000425A 6500                       		blo.s	Tit_ChkRegion	; if not, branch
0000425C                            
0000425C 11FC 0000 F600             		move.b	#id_Sega,(v_gamemode).w ; go to Sega screen
00004262 4E75                       		rts	
00004264                            ; ===========================================================================
00004264                            
00004264                            Tit_ChkRegion:
00004264 4A38 FFF8                  		tst.b	(v_megadrive).w	; check	if the machine is US or	Japanese
00004268 6A00                       		bpl.s	Tit_RegionJap	; if Japanese, branch
0000426A                            
0000426A 41F9 0000 0000             		lea	(LevSelCode_US).l,a0 ; load US code
00004270 6000                       		bra.s	Tit_EnterCheat
00004272                            
00004272                            	Tit_RegionJap:
00004272 41F9 0000 0000             		lea	(LevSelCode_J).l,a0 ; load J code
00004278                            
00004278                            Tit_EnterCheat:
00004278 3038 FFE4                  		move.w	(v_title_dcount).w,d0
0000427C D0C0                       		adda.w	d0,a0
0000427E 1038 F605                  		move.b	(v_jpadpress1).w,d0 ; get button press
00004282 0200 000F                  		andi.b	#btnDir,d0	; read only UDLR buttons
00004286 B010                       		cmp.b	(a0),d0		; does button press match the cheat code?
00004288 6600                       		bne.s	Tit_ResetCheat	; if not, branch
0000428A 5278 FFE4                  		addq.w	#1,(v_title_dcount).w ; next button press
0000428E 4A00                       		tst.b	d0
00004290 6600                       		bne.s	Tit_CountC
00004292 41F8 FFE0                  		lea	(f_levselcheat).w,a0
00004296 3238 FFE6                  		move.w	(v_title_ccount).w,d1
0000429A E249                       		lsr.w	#1,d1
0000429C 0241 0003                  		andi.w	#3,d1
000042A0 6700                       		beq.s	Tit_PlayRing
000042A2 4A38 FFF8                  		tst.b	(v_megadrive).w
000042A6 6A00                       		bpl.s	Tit_PlayRing
000042A8 7201                       		moveq	#1,d1
000042AA 1181 1001                  		move.b	d1,1(a0,d1.w)	; cheat depends on how many times C is pressed
000042AE                            
000042AE                            	Tit_PlayRing:
000042AE 11BC 0001 1000             		move.b	#1,(a0,d1.w)	; activate cheat
000042BC 6000                       		bra.s	Tit_CountC
000042BE                            ; ===========================================================================
000042BE                            
000042BE                            Tit_ResetCheat:
000042BE 4A00                       		tst.b	d0
000042C0 6700                       		beq.s	Tit_CountC
000042C2 0C78 0009 FFE4             		cmpi.w	#9,(v_title_dcount).w
000042C8 6700                       		beq.s	Tit_CountC
000042CA 31FC 0000 FFE4             		move.w	#0,(v_title_dcount).w ; reset UDLR counter
000042D0                            
000042D0                            Tit_CountC:
000042D0 1038 F605                  		move.b	(v_jpadpress1).w,d0
000042D4 0200 0020                  		andi.b	#btnC,d0	; is C button pressed?
000042D8 6700                       		beq.s	loc_3230	; if not, branch
000042DA 5278 FFE6                  		addq.w	#1,(v_title_ccount).w ; increment C counter
000042DE                            		
000042DE                            loc_3230:
000042DE 4A78 F614                  		tst.w	(v_demolength).w
000042E2 6700 0000                  		beq.w	GotoDemo
000042E6 0238 0080 F605             		andi.b	#btnStart,(v_jpadpress1).w ; check if Start is pressed
000042EC 6700 FF3C                  		beq.w	Tit_MainLoop	; if not, branch
000042F0                            
000042F0                            Tit_ChkLevSel:
000042F0 4A38 FFE0                  		tst.b	(f_levselcheat).w ; check if level select code is on
000042F4 6700 0000                  		beq.w	@cont	; if not, play level
000042F8 0838 0006 F604             		btst	#bitA,(v_jpadhold1).w ; check if A is pressed
000042FE 6700 0000                  		beq.w	@cont	; if not, play level
00004302 6000 0000                  		bra.w	Tit_LevelSelect
00004306                            
00004306                            	@cont:		
00004306 0C38 0006 D0A4             		cmp.b	#6,($FFFFD0A4).w   ; is Title Menu on
0000430C 6700 FF1C                  		beq.w	Tit_MainLoop         ; if it not was deleted, branch  	
00004310 7400                       		moveq	#0,d2
00004312 1438 FFB0                  		move.b	(Title_screen_option).w,d2   ; load the choice
00004316 D442                       		add.w	d2,d2            ; multiply by 2
00004318 343B 2000                  		move.w	Tit_Menu_Choice(pc,d2.w),d2
0000431C 4EFB 2000                  		jmp   Tit_Menu_Choice(pc,d2.w)   ; jump to the choice code
00004320                            
00004320                            ; ===========================================================================
00004320                            Tit_Menu_Choice:
00004320 0000                       		dc.w PlayLevel-Tit_Menu_Choice   ; 0
00004322 0000                       		dc.w Menu_Options-Tit_Menu_Choice  ; 2
00004324                            ; ===========================================================================
00004324                            
00004324                            Menu_Options:
00004324 11FC 0020 F600             		move.b	#$20,(v_gamemode).w
0000432A 4E75                       		rts
0000432C                            
0000432C                            Tit_LevelSelect:	
0000432C 7002                       		moveq	#palid_LevelSel,d0
0000432E 6100 E188                  		bsr.w	PalLoad2	; load level select palette
00004332 43F8 CC00                  		lea	(v_hscrolltablebuffer).w,a1
00004336 7000                       		moveq	#0,d0
00004338 323C 00DF                  		move.w	#$DF,d1
0000433C                            
0000433C                            	Tit_ClrScroll1:
0000433C 22C0                       		move.l	d0,(a1)+
0000433E 51C9 FFFC                  		dbf	d1,Tit_ClrScroll1 ; clear scroll data (in RAM)
00004342                            
00004342 21C0 F616                  		move.l	d0,(v_scrposy_dup).w
00004346 46FC 2700                  		disable_ints
0000434A 4DF9 00C0 0000             		lea	(vdp_data_port).l,a6
0000435A 323C 03FF                  		move.w	#$3FF,d1
0000435E                            
0000435E                            	Tit_ClrScroll2:
0000435E 2C80                       		move.l	d0,(a6)
00004360 51C9 FFFC                  		dbf	d1,Tit_ClrScroll2 ; clear scroll data (in VRAM)
00004364                            
00004364 6100 0000                  		bsr.w	LevSelTextLoad
00004368                            
00004368                            ; ---------------------------------------------------------------------------
00004368                            ; Level	Select
00004368                            ; ---------------------------------------------------------------------------
00004368                            
00004368                            LevelSelect:
00004368 11FC 0004 F62A             		move.b	#4,(v_vbla_routine).w
0000436E 6100 F6E0                  		bsr.w	WaitForVBla
00004372 6100 0000                  		bsr.w	LevSelControls
00004376 6100 D42E                  		bsr.w	RunPLC
0000437A 4AB8 F680                  		tst.l	(v_plc_buffer).w
0000437E 66E8                       		bne.s	LevelSelect
00004380 0238 00F0 F605             		andi.b	#btnABC+btnStart,(v_jpadpress1).w ; is A, B, C, or Start pressed?
00004386 67E0                       		beq.s	LevelSelect	; if not, branch
00004388 3038 FF82                  		move.w	(v_levselitem).w,d0
0000438C 0C40 0014                  		cmpi.w	#$14,d0		; have you selected item $14 (sound test)?
00004390 6600                       		bne.s	LevSel_Level_SS	; if not, go to	Level/SS subroutine
00004392 3038 FF84                  		move.w	(v_levselsound).w,d0
00004396 0640 0080                  		addi.w	#$80,d0
0000439A 0C40 009F                  		cmpi.w	#$9F,d0		; is sound $9F being played?
0000439E 6700                       		beq.s	LevSel_Ending	; if yes, branch
000043A0 0C40 009E                  		cmpi.w	#$9E,d0		; is sound $9E being played?
000043A4 6700                       		beq.s	LevSel_Credits	; if yes, branch
000043A6                            
000043A6                            LevSel_PlaySnd:
000043A6 6100 CEF8                  		bsr.w	PlaySound_Special
000043AA 60BC                       		bra.s	LevelSelect
000043AC                            ; ===========================================================================
000043AC                            
000043AC                            LevSel_Ending:
000043AC 11FC 0000 F600             		move.b	#id_Ending,(v_gamemode).w ; set screen mode to $18 (Ending)
000043B2 31FC 0600 FE10             		move.w	#(id_EndZ<<8),(v_zone).w ; set level to 0600 (Ending)
000043B8 4E75                       		rts	
000043BA                            ; ===========================================================================
000043BA                            
000043BA                            LevSel_Credits:
000043BA 11FC 0000 F600             		move.b	#id_Credits,(v_gamemode).w ; set screen mode to $1C (Credits)
000043C8 31FC 0000 FFF4             		move.w	#0,(v_creditsnum).w
000043CE 4E75                       		rts	
000043D0                            ; ===========================================================================
000043D0                            
000043D0                            LevSel_Level_SS:
000043D0 D040                       		add.w	d0,d0
000043D2 303B 0000                  		move.w	LevSel_Ptrs(pc,d0.w),d0 ; load level number
000043D6 6B00 FF90                  		bmi.w	LevelSelect
000043DA 0C40 0700                  		cmpi.w	#id_SS*$100,d0	; check	if level is 0700 (Special Stage)
000043DE 6600                       		bne.s	LevSel_Level	; if not, branch
000043E0 11FC 0000 F600             		move.b	#id_Special,(v_gamemode).w ; set screen mode to $10 (Special Stage)
000043E6 4278 FE10                  		clr.w	(v_zone).w	; clear	level
000043EA 11FC 0003 FE12             		move.b	#3,(v_lives).w	; set lives to 3
000043F0 7000                       		moveq	#0,d0
000043F2 31C0 FE20                  		move.w	d0,(v_rings).w	; clear rings
000043F6 21C0 FE22                  		move.l	d0,(v_time).w	; clear time
000043FA 21C0 FE26                  		move.l	d0,(v_score).w	; clear score
000043FE 21FC 0000 1388 FFC0        			move.l	#5000,(v_scorelife).w ; extra life is awarded at 50000 points
00004406 4E75                       		rts	
00004408                            ; ===========================================================================
00004408                            
00004408                            LevSel_Level:
00004408 0240 3FFF                  		andi.w	#$3FFF,d0
0000440C 31C0 FE10                  		move.w	d0,(v_zone).w	; set level number
00004410                            
00004410                            PlayLevel:
00004410 11FC 0000 F600             		move.b	#id_Level,(v_gamemode).w ; set screen mode to $0C (level)
00004416 11FC 0003 FE12             		move.b	#3,(v_lives).w	; set lives to 3
0000441C 7000                       		moveq	#0,d0
0000441E 31C0 FE20                  		move.w	d0,(v_rings).w	; clear rings
00004422 21C0 FE22                  		move.l	d0,(v_time).w	; clear time
00004426 21C0 FE26                  		move.l	d0,(v_score).w	; clear score
0000442A 11C0 FE16                  		move.b	d0,(v_lastspecial).w ; clear special stage number
0000442E 11C0 FE57                  		move.b	d0,(v_emeralds).w ; clear emeralds
00004432 21C0 FE58                  		move.l	d0,(v_emldlist).w ; clear emeralds
00004436 21C0 FE5C                  		move.l	d0,(v_emldlist+4).w ; clear emeralds
0000443A 11FC 0001 FE18             		move.b	#1,(v_continues).w ; set continues to 1
00004440 21FC 0000 1388 FFC0        			move.l	#5000,(v_scorelife).w ; extra life is awarded at 50000 points
00004450 4E75                       		rts	
00004452                            ; ===========================================================================
00004452                            ; ---------------------------------------------------------------------------
00004452                            ; Level	select - level pointers
00004452                            ; ---------------------------------------------------------------------------
00004452                            		; correct level order
00004452 0000                       		dc.b id_GHZ, 0
00004454 0001                       		dc.b id_GHZ, 1
00004456 0002                       		dc.b id_GHZ, 2
00004458 0200                       		dc.b id_MZ, 0
0000445A 0201                       		dc.b id_MZ, 1
0000445C 0202                       		dc.b id_MZ, 2
0000445E 0400                       		dc.b id_SYZ, 0
00004460 0401                       		dc.b id_SYZ, 1
00004462 0402                       		dc.b id_SYZ, 2
00004464 0100                       		dc.b id_LZ, 0
00004466 0101                       		dc.b id_LZ, 1
00004468 0102                       		dc.b id_LZ, 2
0000446A 0300                       		dc.b id_SLZ, 0
0000446C 0301                       		dc.b id_SLZ, 1
0000446E 0302                       		dc.b id_SLZ, 2
00004470 0500                       		dc.b id_SBZ, 0
00004472 0501                       		dc.b id_SBZ, 1
00004474 0103                       		dc.b id_LZ, 3
00004476 0502                       		dc.b id_SBZ, 2
00004478 0700                       		dc.b id_SS, 0		; Special Stage
0000447A 8000                       		dc.w $8000		; Sound Test
0000447C                            		even
0000447C                            ; ---------------------------------------------------------------------------
0000447C                            ; Level	select codes
0000447C                            ; ---------------------------------------------------------------------------
0000447C 0102 0202 0408 00FF        		dc.b btnUp,btnDn,btnDn,btnDn,btnL,btnR,0,$FF
00004484                            		even
00004484                            
00004484 0102 0408 00FF             LevSelCode_US:	dc.b btnUp,btnDn,btnL,btnR,0,$FF
0000448A                            		even
0000448A                            ; ===========================================================================
0000448A                            
0000448A                            ; ---------------------------------------------------------------------------
0000448A                            ; Demo mode
0000448A                            ; ---------------------------------------------------------------------------
0000448A                            
0000448A                            GotoDemo:
0000448A 31FC 001E F614             		move.w	#$1E,(v_demolength).w
00004490                            
00004490                            loc_33B6:
00004490 11FC 0004 F62A             		move.b	#4,(v_vbla_routine).w
00004496 6100 F5B8                  		bsr.w	WaitForVBla
0000449A 6100 0000                  		bsr.w	DeformLayers
0000449E 6100 D87E                  		bsr.w	PaletteCycle
000044A2 6100 D302                  		bsr.w	RunPLC
000044A6 3038 D008                  		move.w	(v_objspace+obX).w,d0
000044AA 5440                       		addq.w	#2,d0
000044AC 31C0 D008                  		move.w	d0,(v_objspace+obX).w
000044B0 0C40 1C00                  		cmpi.w	#$1C00,d0
000044B4 6500                       		blo.s	loc_33E4
000044B6 11FC 0000 F600             		move.b	#id_Sega,(v_gamemode).w
000044BC 4E75                       		rts	
000044BE                            ; ===========================================================================
000044BE                            
000044BE                            loc_33E4:
000044BE 0238 0080 F605             		andi.b	#btnStart,(v_jpadpress1).w ; is Start button pressed?
000044C4 6600 FE2A                  		bne.w	Tit_ChkLevSel	; if yes, branch
000044C8 4A78 F614                  		tst.w	(v_demolength).w
000044CC 6600 FFC2                  		bne.w	loc_33B6
000044D8 3038 FFF2                  		move.w	(v_demonum).w,d0 ; load	demo number
000044DC 0240 0007                  		andi.w	#7,d0
000044E0 D040                       		add.w	d0,d0
000044E2 303B 0000                  		move.w	Demo_Levels(pc,d0.w),d0	; load level number for	demo
000044E6 31C0 FE10                  		move.w	d0,(v_zone).w
000044EA 5278 FFF2                  		addq.w	#1,(v_demonum).w ; add 1 to demo number
000044EE 0C78 0004 FFF2             		cmpi.w	#4,(v_demonum).w ; is demo number less than 4?
000044F4 6500                       		blo.s	loc_3422	; if yes, branch
000044F6 31FC 0000 FFF2             		move.w	#0,(v_demonum).w ; reset demo number to	0
000044FC                            
000044FC                            loc_3422:
000044FC 31FC 0001 FFF0             		move.w	#1,(f_demo).w	; turn demo mode on
00004502 11FC 0000 F600             		move.b	#id_Demo,(v_gamemode).w ; set screen mode to 08 (demo)
00004508 0C40 0600                  		cmpi.w	#$600,d0	; is level number 0600 (special	stage)?
0000450C 6600                       		bne.s	Demo_Level	; if not, branch
0000450E 11FC 0000 F600             		move.b	#id_Special,(v_gamemode).w ; set screen mode to $10 (Special Stage)
00004514 4278 FE10                  		clr.w	(v_zone).w	; clear	level number
00004518 4238 FE16                  		clr.b	(v_lastspecial).w ; clear special stage number
0000451C                            
0000451C                            Demo_Level:
0000451C 11FC 0003 FE12             		move.b	#3,(v_lives).w	; set lives to 3
00004522 7000                       		moveq	#0,d0
00004524 31C0 FE20                  		move.w	d0,(v_rings).w	; clear rings
00004528 21C0 FE22                  		move.l	d0,(v_time).w	; clear time
0000452C 21C0 FE26                  		move.l	d0,(v_score).w	; clear score
00004530 21FC 0000 1388 FFC0        			move.l	#5000,(v_scorelife).w ; extra life is awarded at 50000 points
00004538 4E75                       		rts	
0000453A                            ; ===========================================================================
0000453A                            ; ---------------------------------------------------------------------------
0000453A                            ; Levels used in demos
0000453A                            ; ---------------------------------------------------------------------------
0000453A                            Demo_Levels:	incbin	"misc\Demo Level Order - Intro.bin"
00004542                            		even
00004542                            
00004542                            ; ---------------------------------------------------------------------------
00004542                            ; Subroutine to	change what you're selecting in the level select
00004542                            ; ---------------------------------------------------------------------------
00004542                            
00004542                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004542                            
00004542                            
00004542                            LevSelControls:
00004542 1238 F605                  		move.b	(v_jpadpress1).w,d1
00004546 0201 0003                  		andi.b	#btnUp+btnDn,d1	; is up/down pressed and held?
0000454A 6600                       		bne.s	LevSel_UpDown	; if yes, branch
0000454C 5378 FF80                  		subq.w	#1,(v_levseldelay).w ; subtract 1 from time to next move
00004550 6A00                       		bpl.s	LevSel_SndTest	; if time remains, branch
00004552                            
00004552                            LevSel_UpDown:
00004552 31FC 000B FF80             		move.w	#$B,(v_levseldelay).w ; reset time delay
00004558 1238 F604                  		move.b	(v_jpadhold1).w,d1
0000455C 0201 0003                  		andi.b	#btnUp+btnDn,d1	; is up/down pressed?
00004560 6700                       		beq.s	LevSel_SndTest	; if not, branch
00004562 3038 FF82                  		move.w	(v_levselitem).w,d0
00004566 0801 0000                  		btst	#bitUp,d1	; is up	pressed?
0000456A 6700                       		beq.s	LevSel_Down	; if not, branch
0000456C 5340                       		subq.w	#1,d0		; move up 1 selection
0000456E 6400                       		bhs.s	LevSel_Down
00004570 7014                       		moveq	#$14,d0		; if selection moves below 0, jump to selection	$14
00004572                            
00004572                            LevSel_Down:
00004572 0801 0001                  		btst	#bitDn,d1	; is down pressed?
00004576 6700                       		beq.s	LevSel_Refresh	; if not, branch
00004578 5240                       		addq.w	#1,d0		; move down 1 selection
0000457A 0C40 0015                  		cmpi.w	#$15,d0
0000457E 6500                       		blo.s	LevSel_Refresh
00004580 7000                       		moveq	#0,d0		; if selection moves above $14,	jump to	selection 0
00004582                            
00004582                            LevSel_Refresh:
00004582 31C0 FF82                  		move.w	d0,(v_levselitem).w ; set new selection
00004586 6100 0000                  		bsr.w	LevSelTextLoad	; refresh text
0000458A 4E75                       		rts	
0000458C                            ; ===========================================================================
0000458C                            
0000458C                            LevSel_SndTest:
0000458C 0C78 0014 FF82             		cmpi.w	#$14,(v_levselitem).w ; is item $14 selected?
00004592 6600                       		bne.s	LevSel_NoMove	; if not, branch
00004594 1238 F605                  		move.b	(v_jpadpress1).w,d1
00004598 0201 000C                  		andi.b	#btnR+btnL,d1	; is left/right	pressed?
0000459C 6700                       		beq.s	LevSel_NoMove	; if not, branch
0000459E 3038 FF84                  		move.w	(v_levselsound).w,d0
000045A2 0801 0002                  		btst	#bitL,d1	; is left pressed?
000045A6 6700                       		beq.s	LevSel_Right	; if not, branch
000045A8 5340                       		subq.w	#1,d0		; subtract 1 from sound	test
000045AA 6400                       		bhs.s	LevSel_Right
000045AC 7055                       		moveq	#$55,d0		; if sound test	moves below 0, set to $55
000045AE                            
000045AE                            LevSel_Right:
000045AE 0801 0003                  		btst	#bitR,d1	; is right pressed?
000045B2 6700                       		beq.s	LevSel_Refresh2	; if not, branch
000045B4 5240                       		addq.w	#1,d0		; add 1	to sound test
000045B6 0C40 0056                  		cmpi.w	#$56,d0
000045BA 6500                       		blo.s	LevSel_Refresh2
000045BC 7000                       		moveq	#0,d0		; if sound test	moves above $55, set to	0
000045BE                            
000045BE                            LevSel_Refresh2:
000045BE 31C0 FF84                  		move.w	d0,(v_levselsound).w ; set sound test number
000045C2 6100 0000                  		bsr.w	LevSelTextLoad	; refresh text
000045C6                            
000045C6                            LevSel_NoMove:
000045C6 4E75                       		rts	
000045C8                            ; End of function LevSelControls
000045C8                            
000045C8                            ; ---------------------------------------------------------------------------
000045C8                            ; Subroutine to load level select text
000045C8                            ; ---------------------------------------------------------------------------
000045C8                            
000045C8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000045C8                            
000045C8                            
000045C8                            LevSelTextLoad:
000045C8                            
000045C8 =62100003                  	textpos:	= ($40000000+(($E210&$3FFF)<<16)+(($E210&$C000)>>14))
000045C8                            					; $E210 is a VRAM address
000045C8                            
000045C8 43F9 0000 0000             		lea	(LevelMenuText).l,a1
000045CE 4DF9 00C0 0000             		lea	(vdp_data_port).l,a6
000045D4 283C 6210 0003             		move.l	#textpos,d4	; text position on screen
000045DA 363C E680                  		move.w	#$E680,d3	; VRAM setting (4th palette, $680th tile)
000045DE 7214                       		moveq	#$14,d1		; number of lines of text
000045E0                            
000045E0                            	LevSel_DrawAll:
000045E0 2D44 0004                  		move.l	d4,4(a6)
000045E4 6100 0000                  		bsr.w	LevSel_ChgLine	; draw line of text
000045E8 0684 0080 0000             		addi.l	#$800000,d4	; jump to next line
000045EE 51C9 FFF0                  		dbf	d1,LevSel_DrawAll
000045F2                            
000045F2 7000                       		moveq	#0,d0
000045F4 3038 FF82                  		move.w	(v_levselitem).w,d0
000045F8 3200                       		move.w	d0,d1
000045FA 283C 6210 0003             		move.l	#textpos,d4
00004600 EF48                       		lsl.w	#7,d0
00004602 4840                       		swap	d0
00004604 D880                       		add.l	d0,d4
00004606 43F9 0000 0000             		lea	(LevelMenuText).l,a1
0000460C E749                       		lsl.w	#3,d1
0000460E 3001                       		move.w	d1,d0
00004610 D241                       		add.w	d1,d1
00004612 D240                       		add.w	d0,d1
00004614 D2C1                       		adda.w	d1,a1
00004616 363C C680                  		move.w	#$C680,d3	; VRAM setting (3rd palette, $680th tile)
0000461A 2D44 0004                  		move.l	d4,4(a6)
0000461E 6100 0000                  		bsr.w	LevSel_ChgLine	; recolour selected line
00004622 363C E680                  		move.w	#$E680,d3
00004626 0C78 0014 FF82             		cmpi.w	#$14,(v_levselitem).w
0000462C 6600                       		bne.s	LevSel_DrawSnd
0000462E 363C C680                  		move.w	#$C680,d3
00004632                            
00004632                            LevSel_DrawSnd:
0000463C 3038 FF84                  		move.w	(v_levselsound).w,d0
00004640 0640 0080                  		addi.w	#$80,d0
00004644 1400                       		move.b	d0,d2
00004646 E808                       		lsr.b	#4,d0
00004648 6100 0000                  		bsr.w	LevSel_ChgSnd	; draw 1st digit
0000464C 1002                       		move.b	d2,d0
0000464E 6100 0000                  		bsr.w	LevSel_ChgSnd	; draw 2nd digit
00004652 4E75                       		rts	
00004654                            ; End of function LevSelTextLoad
00004654                            
00004654                            
00004654                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004654                            
00004654                            
00004654                            LevSel_ChgSnd:
00004654 0240 000F                  		andi.w	#$F,d0
00004658 0C00 000A                  		cmpi.b	#$A,d0		; is digit $A-$F?
0000465C 6500                       		blo.s	LevSel_Numb	; if not, branch
0000465E 5E00                       		addi.b	#7,d0		; use alpha characters
00004660                            
00004660                            	LevSel_Numb:
00004660 D043                       		add.w	d3,d0
00004662 3C80                       		move.w	d0,(a6)
00004664 4E75                       		rts	
00004666                            ; End of function LevSel_ChgSnd
00004666                            
00004666                            
00004666                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004666                            
00004666                            
00004666                            LevSel_ChgLine:
00004666 7417                       		moveq	#$17,d2		; number of characters per line
00004668                            
00004668                            	LevSel_LineLoop:
00004668 7000                       		moveq	#0,d0
0000466A 1019                       		move.b	(a1)+,d0	; get character
0000466C 6A00                       		bpl.s	LevSel_CharOk	; branch if valid
0000466E 3CBC 0000                  		move.w	#0,(a6)		; use blank character
00004672 51CA FFF4                  		dbf	d2,LevSel_LineLoop
00004676 4E75                       		rts	
00004678                            
00004678                            
00004678                            	LevSel_CharOk:
00004678 D043                       		add.w	d3,d0		; combine char with VRAM setting
0000467A 3C80                       		move.w	d0,(a6)		; send to VRAM
0000467C 51CA FFEA                  		dbf	d2,LevSel_LineLoop
00004680 4E75                       		rts	
00004682                            ; End of function LevSel_ChgLine
00004682                            
00004682                            ; ===========================================================================
00004682                            ; ---------------------------------------------------------------------------
00004682                            ; Level	select menu text
00004682                            ; ---------------------------------------------------------------------------
00004682                            		incbin	"misc\Level Select Text (JP1).bin"
0000487A                            		even
0000487A                            ; ---------------------------------------------------------------------------
0000487A                            ; Music	playlist
0000487A                            ; ---------------------------------------------------------------------------
0000487A                            MusicList:
0000487A 00                         			dc.b bgm_GHZ    ; GHZ1
0000487B 00                                 	dc.b bgm_LZ    ; GHZ2
0000487C 00                                 	dc.b bgm_Seaside   ; GHZ3
0000487D 00                                 	dc.b bgm_LZ    ; GHZ4
0000487E 00                                 	dc.b bgm_Stop    ; LZ1
0000487F 00                                 	dc.b bgm_Stop   ; LZ2
00004880 00                                 	dc.b bgm_Stop    ; LZ3
00004881 00                                 	dc.b bgm_SBZ3    ; LZ4
00004882 00                                 	dc.b bgm_MZ    ; MZ1
00004883 00                                 	dc.b bgm_SBZ    ; MZ2
00004884 00                                 	dc.b bgm_ToxicLandfill   ; MZ3
00004885 00                                 	dc.b bgm_SBZ    ; MZ4
00004886 00                                 	dc.b bgm_LZ    ; SLZ1
00004887 00                                 	dc.b bgm_LZ    ; SLZ2
00004888 00                                 	dc.b bgm_LZ    ; SLZ3
00004889 00                                 	dc.b bgm_LZ    ; SLZ4
0000488A 00                                 	dc.b bgm_SYZ    ; SYZ1
0000488B 00                                 	dc.b bgm_SLZ    ; SYZ2
0000488C 00                                 	dc.b bgm_SLZ    ; SYZ3
0000488D 00                                 	dc.b bgm_SLZ    ; SYZ4
0000488E 00                                 	dc.b bgm_SBZ    ; SBZ1
0000488F 00                                 	dc.b bgm_SBZ    ; SBZ2
00004890 00                                 	dc.b bgm_FZ		; SBZ3
00004891 00                                 	dc.b bgm_SBZ    ; SBZ4
00004892 00                                 	dc.b bgm_GHZ    ; GHZ1
00004893 00                                 	dc.b bgm_GHZ    ; GHZ1
00004894 00                                 	dc.b bgm_GHZ    ; GHZ1
00004895 00                                 	dc.b bgm_GHZ    ; GHZ1
00004896                                    	even
00004896                            ; ===========================================================================
00004896                            
00004896                            ; ---------------------------------------------------------------------------
00004896                            ; Level
00004896                            ; ---------------------------------------------------------------------------
00004896                            
00004896                            GM_Level:
00004896 08F8 0007 F600             		bset	#7,(v_gamemode).w ; add $80 to screen mode (for pre level sequence)
0000489C 4A78 FFF0                  		tst.w	(f_demo).w
000048A0 6B00                       		bmi.s	Level_NoMusicFade
000048AA                            
000048AA                            	Level_NoMusicFade:
000048AA 6100 CEEC                  		bsr.w	ClearPLC
000048AE 6100 D922                  		bsr.w	PaletteFadeOut
000048B2 4A78 FFF0                  		tst.w	(f_demo).w	; is an ending sequence demo running?
000048B6 6B00                       		bmi.s	Level_ClrRam	; if yes, branch
000048B8 46FC 2700                  		disable_ints
000048C6 41F9 0000 0000             		lea	(Nem_TitleCard).l,a0 ; load title card patterns
000048CC 6100 CA80                  		bsr.w	NemDec
000048D0 46FC 2300                  		enable_ints
000048D4 7000                       		moveq	#0,d0
000048D6 1038 FE10                  		move.b	(v_zone).w,d0
000048DA E948                       		lsl.w	#4,d0
000048DC 45F9 0000 0000             		lea	(LevelHeaders).l,a2
000048E2 45F2 0000                  		lea	(a2,d0.w),a2
000048E6 7000                       		moveq	#0,d0
000048E8 1012                       		move.b	(a2),d0
000048EA 6700                       		beq.s	loc_37FC
000048EC 6100 CE4C                  		bsr.w	AddPLC		; load level patterns
000048F0                            
000048F0                            loc_37FC:
000048F0 7000                       		moveq	#plcid_Main2,d0
000048F2 6100 CE46                  		bsr.w	AddPLC		; load standard	patterns
000048F6                            
000048F6                            Level_ClrRam:
000048F6 43F8 D000                  		lea	(v_objspace).w,a1
000048FA 7000                       		moveq	#0,d0
000048FC 323C 07FF                  		move.w	#$7FF,d1
00004900                            
00004900                            	Level_ClrObjRam:
00004900 22C0                       		move.l	d0,(a1)+
00004902 51C9 FFFC                  		dbf	d1,Level_ClrObjRam ; clear object RAM
00004906                            
00004906 43F8 F628                  		lea	($FFFFF628).w,a1
0000490A 7000                       		moveq	#0,d0
0000490C 323C 0015                  		move.w	#$15,d1
00004910                            
00004910                            	Level_ClrVars1:
00004910 22C0                       		move.l	d0,(a1)+
00004912 51C9 FFFC                  		dbf	d1,Level_ClrVars1 ; clear misc variables
00004916                            
00004916 43F8 F700                  		lea	(v_screenposx).w,a1
0000491A 7000                       		moveq	#0,d0
0000491C 323C 003F                  		move.w	#$3F,d1
00004920                            
00004920                            	Level_ClrVars2:
00004920 22C0                       		move.l	d0,(a1)+
00004922 51C9 FFFC                  		dbf	d1,Level_ClrVars2 ; clear misc variables
00004926                            
00004926 43F8 FE60                  		lea	(v_oscillate+2).w,a1
0000492A 7000                       		moveq	#0,d0
0000492C 323C 0047                  		move.w	#$47,d1
00004930                            
00004930                            	Level_ClrVars3:
00004930 22C0                       		move.l	d0,(a1)+
00004932 51C9 FFFC                  		dbf	d1,Level_ClrVars3 ; clear object variables
00004936                            
00004936 46FC 2700                  		disable_ints
0000493A 6100 C894                  		bsr.w	ClearScreen
0000493E 4DF9 00C0 0004             		lea	(vdp_control_port).l,a6
00004944 3CBC 8B03                  		move.w	#$8B03,(a6)	; line scroll mode
00004948 3CBC 8230                  		move.w	#$8200+(vram_fg>>10),(a6) ; set foreground nametable address
0000494C 3CBC 8407                  		move.w	#$8400+(vram_bg>>13),(a6) ; set background nametable address
00004950 3CBC 857C                  		move.w	#$8500+(vram_sprites>>9),(a6) ; set sprite table address
00004954 3CBC 9001                  		move.w	#$9001,(a6)		; 64-cell hscroll size
00004958 3CBC 8004                  		move.w	#$8004,(a6)		; 8-colour mode
0000495C 3CBC 8720                  		move.w	#$8720,(a6)		; set background colour (line 3; colour 0)
00004960 31FC 8ADF F624             		move.w	#$8A00+223,(v_hbla_hreg).w ; set palette change position (for water)
00004966 3CB8 F624                  		move.w	(v_hbla_hreg).w,(a6)
0000496A 31FC C800 C8FC             		ResetDMAQueue	
00004970 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w ; is level LZ?
00004976 6600                       		bne.s	Level_LoadPal	; if not, branch
00004978                            
00004978 3CBC 8014                  		move.w	#$8014,(a6)	; enable H-interrupts
0000497C 7000                       		moveq	#0,d0
0000497E 1038 FE11                  		move.b	(v_act).w,d0
00004982 D040                       		add.w	d0,d0
00004984 43F9 0000 0000             		lea	(WaterHeight).l,a1 ; load water	height array
0000498A 3031 0000                  		move.w	(a1,d0.w),d0
0000498E 31C0 F646                  		move.w	d0,(v_waterpos1).w ; set water heights
00004992 31C0 F648                  		move.w	d0,(v_waterpos2).w
00004996 31C0 F64A                  		move.w	d0,(v_waterpos3).w
0000499A 4238 F64D                  		clr.b	(v_wtr_routine).w ; clear water routine counter
0000499E 4238 F64E                  		clr.b	(f_wtr_state).w	; clear	water state
000049A2 11FC 0001 F64C             		move.b	#1,(f_water).w	; enable water
000049A8                            
000049A8                            Level_LoadPal:
000049A8 31FC 001E FE14             		move.w	#$1E,($FFFFFE14).w
000049AE 46FC 2300                  		move	#$2300,sr
000049B2 4EB9 0000 0000             		jsr		LoadPlayerPal
000049B8 6100 DAFE                  		bsr.w	PalLoad2	; load Sonic's pallet line
000049BC 0C38 0001 F64C             		cmp.b	#1,(f_water).w ; Is water enabled?
000049C2 6600                       		bne.s	Level_GetBgm	; if not, branch
000049C4 4EB9 0000 0000             		jsr		LoadPlayerWaterPal
000049CA 6100 DB2C                  		bsr.w	PalLoad3_Water	; load underwater pallet (see d0)
000049CE 4A38 FE30                  		tst.b	($FFFFFE30).w
000049D2 6700                       		beq.s	Level_GetBgm
000049D4 11F8 FE53 F64E             		move.b	($FFFFFE53).w,($FFFFF64E).w
000049DA                            
000049DA                            	Level_GetBgm:
000049DA 4A78 FFF0                  		tst.w	(f_demo).w
000049DE 6B00                               	bmi.s	Level_SkipTtlCard
000049E0 7000                               	moveq	#0,d0
000049E2 3038 FE10                  		move.w	(v_zone).w,d0
000049E6 E418                       		ror.b	#2,d0
000049E8 EC48                       		lsr.w   #6,d0
000049EA 43F9 0000 487A                     	lea	(MusicList).l,a1 ; load    music playlist
000049F0 1031 0000                          	move.b	(a1,d0.w),d0
000049F4 11C0 F5C6                  		move.b	d0,((v_Saved_music)).w
000049F8 6100 C8A0                          	bsr.w	PlaySound    ; play music
000049FC 11FC 0000 D080                     	move.b	#id_TitleCard,(v_objspace+$80).w ; load title card object
00004A02                            
00004A02                            
00004A02                            Level_TtlCardLoop:
00004A02 11FC 000C F62A             		move.b	#$C,(v_vbla_routine).w
00004A08 6100 F046                  		bsr.w	WaitForVBla
00004A0C 4EB9 0000 0000             		jsr	(ExecuteObjects).l
00004A12 4EB9 0000 0000             		jsr	(BuildSprites).l
00004A18 6100 CD8C                  		bsr.w	RunPLC
00004A1C 3038 D108                  		move.w	(v_objspace+$108).w,d0
00004A20 B078 D130                  		cmp.w	(v_objspace+$130).w,d0 ; has title card sequence finished?
00004A24 66DC                       		bne.s	Level_TtlCardLoop ; if not, branch
00004A26 4AB8 F680                  		tst.l	(v_plc_buffer).w ; are there any items in the pattern load cue?
00004A2A 66D6                       		bne.s	Level_TtlCardLoop ; if yes, branch
00004A2C 4EB9 0000 0000             		jsr	(Hud_Base).l	; load basic HUD gfx
00004A32                            
00004A32                            	Level_SkipTtlCard:
00004A32 4EB9 0000 0000             		jsr		LoadPlayerPal
00004A38 6100 DA42                  		bsr.w	PalLoad1	; load Sonic's palette
00004A3C 6100 0000                  		bsr.w	LevelSizeLoad
00004A40 6100 0000                  		bsr.w	DeformLayers
00004A44 08F8 0002 F754             		bset	#2,(v_fg_scroll_flags).w
00004A4A 6100 0000                  		bsr.w	LevelDataLoad ; load block mappings and palettes
00004A4E 6100 0000                  		bsr.w	LoadTilesFromStart
00004A52 4EB9 0000 0000             		jsr	(FloorLog_Unk).l
00004A58 6100 0000                  		bsr.w	ColIndexLoad
00004A5C 6100 0000                  		bsr.w	LZWaterFeatures
00004A60 11FC 0000 D000             		move.b	#id_SonicPlayer,(v_player).w ; load Sonic object
00004A66 4A78 FFF0                  		tst.w	(f_demo).w
00004A6A 6B00                       		bmi.s	Level_ChkDebug
00004A6C 11FC 0000 D040             		move.b	#id_HUD,(v_objspace+$40).w ; load HUD object
00004A72                            
00004A72                            Level_ChkDebug:
00004A72 4A38 FFE2                  		tst.b	(f_debugcheat).w ; has debug cheat been entered?
00004A76 6700                       		beq.s	Level_ChkWater	; if not, branch
00004A78 0838 0006 F604             		btst	#bitA,(v_jpadhold1).w ; is A button held?
00004A7E 6700                       		beq.s	Level_ChkWater	; if not, branch
00004A80 11FC 0001 FFFA             		move.b	#1,(f_debugmode).w ; enable debug mode
00004A86                            
00004A86                            Level_ChkWater:
00004A86 31FC 0000 F602             		move.w	#0,(v_jpadhold2).w
00004A8C 31FC 0000 F604             		move.w	#0,(v_jpadhold1).w
00004A92 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w ; is level LZ?
00004A98 6600                       		bne.s	Level_LoadObj	; if not, branch
00004A9A 11FC 0000 D780             		move.b	#id_WaterSurface,(v_objspace+$780).w ; load water surface object
00004AA0 31FC 0060 D788             		move.w	#$60,(v_objspace+$780+obX).w
00004AA6 11FC 0000 D7C0             		move.b	#id_WaterSurface,(v_objspace+$7C0).w
00004AAC 31FC 0120 D7C8             		move.w	#$120,(v_objspace+$7C0+obX).w
00004AB2                            
00004AB2                            Level_LoadObj:
00004AB2 4EB9 0000 0000             		jsr	(ObjPosLoad).l
00004AB8 4EB9 0000 0000             		jsr	(ExecuteObjects).l
00004ABE 4EB9 0000 0000             		jsr	(BuildSprites).l
00004AC4 7000                       		moveq	#0,d0
00004AC6 4A38 FE30                  		tst.b	(v_lastlamp).w	; are you starting from	a lamppost?
00004ACA 6600                       		bne.s	Level_SkipClr	; if yes, branch
00004ACC 31C0 FE20                  		move.w	d0,(v_rings).w	; clear rings
00004AD0 21C0 FE22                  		move.l	d0,(v_time).w	; clear time
00004AD4 11C0 FE1B                  		move.b	d0,(v_lifecount).w ; clear lives counter
00004AD8                            
00004AD8                            	Level_SkipClr:
00004AD8 11C0 FE1A                  		move.b	d0,(f_timeover).w
00004ADC 11C0 FE2C                  		move.b	d0,(v_shield).w	; clear shield
00004AE0 11C0 F5C8                  		move.b	d0,(v_rshield).w; clear red shield
00004AE4 11C0 F5C9                  		move.b	d0,(v_gshield).w; clear gold shield
00004AE8 11C0 F5CA                  		move.b	d0,(v_spshield).w; clear gold shield
00004AEC 11C0 FE2D                  		move.b	d0,(v_invinc).w	; clear invincibility
00004AF0 11C0 FE2E                  		move.b	d0,(v_shoes).w	; clear speed shoes
00004AF4 11C0 FE2F                  		move.b	d0,($FFFFFE2F).w
00004AF8 31C0 FE08                  		move.w	d0,(v_debuguse).w
00004AFC 31C0 FE02                  		move.w	d0,(f_restart).w
00004B00 31C0 FE04                  		move.w	d0,(v_framecount).w
00004B04 6100 0000                  		bsr.w	OscillateNumInit
00004B08 11FC 0001 FE1F             		move.b	#1,(f_scorecount).w ; update score counter
00004B0E 11FC 0001 FE1D             		move.b	#1,(f_ringcount).w ; update rings counter
00004B14 11FC 0001 FE1E             		move.b	#1,(f_timecount).w ; update time counter
00004B1A 31FC 0000 F790             		move.w	#0,(v_btnpushtime1).w
00004B20 43F9 0000 0000             		lea	(DemoDataPtr).l,a1 ; load demo data
00004B26 7000                       		moveq	#0,d0
00004B28 1038 FE10                  		move.b	(v_zone).w,d0
00004B2C E548                       		lsl.w	#2,d0
00004B2E 2271 0000                  		movea.l	(a1,d0.w),a1
00004B32 4A78 FFF0                  		tst.w	(f_demo).w	; is demo mode on?
00004B36 6A00                       		bpl.s	Level_Demo	; if yes, branch
00004B38 43F9 0000 0000             		lea	(DemoEndDataPtr).l,a1 ; load ending demo data
00004B3E 3038 FFF4                  		move.w	(v_creditsnum).w,d0
00004B42 5340                       		subq.w	#1,d0
00004B44 E548                       		lsl.w	#2,d0
00004B46 2271 0000                  		movea.l	(a1,d0.w),a1
00004B4A                            
00004B4A                            Level_Demo:
00004B4A 11E9 0001 F792             		move.b	1(a1),(v_btnpushtime2).w ; load key press duration
00004B50 5338 F792                  		subq.b	#1,(v_btnpushtime2).w ; subtract 1 from duration
00004B54 31FC 0708 F614             		move.w	#1800,(v_demolength).w
00004B5A 4A78 FFF0                  		tst.w	(f_demo).w
00004B5E 6A00                       		bpl.s	Level_ChkWaterPal
00004B60 31FC 021C F614             		move.w	#540,(v_demolength).w
00004B66 0C78 0004 FFF4             		cmpi.w	#4,(v_creditsnum).w
00004B6C 6600                       		bne.s	Level_ChkWaterPal
00004B6E 31FC 01FE F614             		move.w	#510,(v_demolength).w
00004B74                            
00004B74                            Level_ChkWaterPal:
00004B74 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w ; is level LZ/SBZ3?
00004B7A 6600                       		bne.s	Level_Delay	; if not, branch
00004B7C 700B                       		moveq	#palid_LZWater,d0 ; palette $B (LZ underwater)
00004B7E 0C38 0003 FE11             		cmpi.b	#3,(v_act).w	; is level SBZ3?
00004B84 6600                       		bne.s	Level_WtrNotSbz	; if not, branch
00004B86 700D                       		moveq	#palid_SBZ3Water,d0 ; palette $D (SBZ3 underwater)
00004B88                            
00004B88                            	Level_WtrNotSbz:
00004B88 6100 D9AA                  		bsr.w	PalLoad4_Water
00004B8C                            
00004B8C                            Level_Delay:
00004B8C 323C 0003                  		move.w	#3,d1
00004B90                            
00004B90                            	Level_DelayLoop:
00004B90 11FC 0008 F62A             		move.b	#8,(v_vbla_routine).w
00004B96 6100 EEB8                  		bsr.w	WaitForVBla
00004B9A 51C9 FFF4                  		dbf	d1,Level_DelayLoop
00004B9E                            
00004B9E 31FC 202F F626             		move.w	#$202F,(v_pfade_start).w ; fade in 2nd, 3rd & 4th palette lines
00004BA4 6100 D58C                  		bsr.w	PalFadeIn_Alt
00004BA8 4A78 FFF0                  		tst.w	(f_demo).w	; is an ending sequence demo running?
00004BAC 6B00                       		bmi.s	Level_ClrCardArt ; if yes, branch
00004BAE 5438 D0A4                  		addq.b	#2,(v_objspace+$80+obRoutine).w ; make title card move
00004BB2 5838 D0E4                  		addq.b	#4,(v_objspace+$C0+obRoutine).w
00004BB6 5838 D124                  		addq.b	#4,(v_objspace+$100+obRoutine).w
00004BBA 5838 D164                  		addq.b	#4,(v_objspace+$140+obRoutine).w
00004BBE 6000                       		bra.s	Level_StartGame
00004BC0                            ; ===========================================================================
00004BC0                            
00004BC0                            Level_ClrCardArt:
00004BC0 7000                       		moveq	#plcid_Explode,d0
00004BC2 4EB9 0000 173A             		jsr	(AddPLC).l	; load explosion gfx
00004BC8 7000                       		moveq	#0,d0
00004BCA 1038 FE10                  		move.b	(v_zone).w,d0
00004BCE 0640 0000                  		addi.w	#plcid_GHZAnimals,d0
00004BD2 4EB9 0000 173A             		jsr	(AddPLC).l	; load animal gfx (level no. + $15)
00004BD8                            
00004BD8                            Level_StartGame:
00004BD8 08B8 0007 F600             		bclr	#7,(v_gamemode).w ; subtract $80 from mode to end pre-level stuff
00004BDE                            
00004BDE                            ; ---------------------------------------------------------------------------
00004BDE                            ; Main level loop (when	all title card and loading sequences are finished)
00004BDE                            ; ---------------------------------------------------------------------------
00004BDE                            
00004BDE                            Level_MainLoop:
00004BDE 6100 C6CC                  		bsr.w	PauseGame
00004BE2 11FC 0008 F62A             		move.b	#8,(v_vbla_routine).w
00004BE8 6100 EE66                  		bsr.w	WaitForVBla
00004BEC 5278 FE04                  		addq.w	#1,(v_framecount).w ; add 1 to level timer
00004BF0 6100 0000                  		bsr.w	MoveSonicInDemo
00004BF4 6100 0000                  		bsr.w	LZWaterFeatures
00004BF8 4EB9 0000 0000             		jsr	(ExecuteObjects).l
00004BFE 4A78 FE02                  			tst.w   (f_restart).w
00004C02 6600 FC92                  			bne     GM_Level
00004C06 4A78 FE08                  		tst.w	(v_debuguse).w	; is debug mode being used?
00004C0A 6600                       		bne.s	Level_DoScroll	; if yes, branch
00004C0C 0C38 0006 D024             		cmpi.b	#6,(v_player+obRoutine).w ; has Sonic just died?
00004C12 6400                       		bhs.s	Level_SkipScroll ; if yes, branch
00004C14                            
00004C14                            	Level_DoScroll:
00004C14 6100 0000                  		bsr.w	DeformLayers
00004C18                            
00004C18                            	Level_SkipScroll:
00004C18 4EB9 0000 0000             		jsr	(BuildSprites).l
00004C1E 4EB9 0000 0000             		jsr	(ObjPosLoad).l
00004C24 6100 D0F8                  		bsr.w	PaletteCycle
00004C28 6100 CB7C                  		bsr.w	RunPLC
00004C2C 6100 0000                  		bsr.w	OscillateNumDo
00004C30 6100 0000                  		bsr.w	SynchroAnimate
00004C34 6100 0000                  		bsr.w	SignpostArtLoad
00004C38                            
00004C38 0C38 0000 F600             		cmpi.b	#id_Demo,(v_gamemode).w
00004C3E 6700                       		beq.s	Level_ChkDemo	; if mode is 8 (demo), branch
00004C40 0C38 0000 F600             		cmpi.b	#id_Level,(v_gamemode).w
00004C46 6700 FF96                  		beq.w	Level_MainLoop	; if mode is $C (level), branch
00004C4A 4E75                       		rts	
00004C4C                            ; ===========================================================================
00004C4C                            
00004C4C                            Level_ChkDemo:
00004C4C 4A78 FE02                  		tst.w	(f_restart).w	; is level set to restart?
00004C50 6600                       		bne.s	Level_EndDemo	; if yes, branch
00004C52 4A78 F614                  		tst.w	(v_demolength).w ; is there time left on the demo?
00004C56 6700                       		beq.s	Level_EndDemo	; if not, branch
00004C58 0C38 0000 F600             		cmpi.b	#id_Demo,(v_gamemode).w
00004C5E 6700 FF7E                  		beq.w	Level_MainLoop	; if mode is 8 (demo), branch
00004C62 11FC 0000 F600             		move.b	#id_Sega,(v_gamemode).w ; go to Sega screen
00004C68 4E75                       		rts	
00004C6A                            ; ===========================================================================
00004C6A                            
00004C6A                            Level_EndDemo:
00004C6A 0C38 0000 F600             		cmpi.b	#id_Demo,(v_gamemode).w
00004C70 6600                       		bne.s	Level_FadeDemo	; if mode is 8 (demo), branch
00004C72 11FC 0000 F600             		move.b	#id_Sega,(v_gamemode).w ; go to Sega screen
00004C78 4A78 FFF0                  		tst.w	(f_demo).w	; is demo mode on & not ending sequence?
00004C7C 6A00                       		bpl.s	Level_FadeDemo	; if yes, branch
00004C7E 11FC 0000 F600             		move.b	#id_Credits,(v_gamemode).w ; go to credits
00004C84                            
00004C84                            Level_FadeDemo:
00004C84 31FC 003C F614             		move.w	#$3C,(v_demolength).w
00004C8A 31FC 003F F626             		move.w	#$3F,(v_pfade_start).w
00004C90 4278 F794                  		clr.w	(v_palchgspeed).w
00004C94                            
00004C94                            	Level_FDLoop:
00004C94 11FC 0008 F62A             		move.b	#8,(v_vbla_routine).w
00004C9A 6100 EDB4                  		bsr.w	WaitForVBla
00004C9E 6100 0000                  		bsr.w	MoveSonicInDemo
00004CA2 4EB9 0000 0000             		jsr	(ExecuteObjects).l
00004CA8 4EB9 0000 0000             		jsr	(BuildSprites).l
00004CAE 4EB9 0000 0000             		jsr	(ObjPosLoad).l
00004CB4 5378 F794                  		subq.w	#1,(v_palchgspeed).w
00004CB8 6A00                       		bpl.s	loc_3BC8
00004CBA 31FC 0002 F794             		move.w	#2,(v_palchgspeed).w
00004CC0 6100 D530                  		bsr.w	FadeOut_ToBlack
00004CC4                            
00004CC4                            loc_3BC8:
00004CC4 4A78 F614                  		tst.w	(v_demolength).w
00004CC8 66CA                       		bne.s	Level_FDLoop
00004CCA 4E75                       		rts	
00004CCC                            ; ===========================================================================
00004CCC                            
00004CCC                            		include	"_inc\LZWaterFeatures.asm"
00004CCC                            ; ---------------------------------------------------------------------------
00004CCC                            ; Subroutine to	do special water effects in Labyrinth Zone
00004CCC                            ; ---------------------------------------------------------------------------
00004CCC                            
00004CCC                            LZWaterFeatures:
00004CCC 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w ; check if level is LZ
00004CD2 6600                       		bne.s	@notlabyrinth	; if not, branch
00004CD4 4A38 F744                  			tst.b   (f_nobgscroll).w
00004CD8 6600                       			bne.s	@setheight
00004CDA 0C38 0006 D024             		cmpi.b	#6,(v_player+obRoutine).w ; has Sonic just died?
00004CE0 6400                       		bcc.s	@setheight	; if yes, skip other effects
00004CE2                            
00004CE2 6100 0000                  		bsr.w	LZWindTunnels
00004CE6 6100 0000                  		bsr.w	LZWaterSlides
00004CEA 6100 0000                  		bsr.w	LZDynamicWater
00004CEE                            
00004CEE                            @setheight:
00004CEE 4238 F64E                  		clr.b	(f_wtr_state).w
00004CF2 7000                       		moveq	#0,d0
00004CF4 1038 FE60                  		move.b	(v_oscillate+2).w,d0
00004CF8 E248                       		lsr.w	#1,d0
00004CFA D078 F648                  		add.w	(v_waterpos2).w,d0
00004CFE 31C0 F646                  		move.w	d0,(v_waterpos1).w
00004D02 3038 F646                  		move.w	(v_waterpos1).w,d0
00004D06 9078 F704                  		sub.w	(v_screenposy).w,d0
00004D0A 6400                       		bcc.s	@isbelow
00004D0C 4A40                       		tst.w	d0
00004D0E 6A00                       		bpl.s	@isbelow	; if water is below top of screen, branch
00004D10                            
00004D10 11FC 00DF F625             		move.b	#223,(v_hbla_line).w
00004D16 11FC 0001 F64E             		move.b	#1,(f_wtr_state).w ; screen is all underwater
00004D1C                            
00004D1C                            	@isbelow:
00004D1C 0C40 00DF                  		cmpi.w	#223,d0		; is water within 223 pixels of top of screen?
00004D20 6500                       		bcs.s	@isvisible	; if yes, branch
00004D22 303C 00DF                  		move.w	#223,d0
00004D26                            
00004D26                            	@isvisible:
00004D26 11C0 F625                  		move.b	d0,(v_hbla_line).w ; set water surface as on-screen
00004D2A                            
00004D2A                            @notlabyrinth:
00004D2A 4E75                       		rts	
00004D2C                            ; ===========================================================================
00004D2C                            ; ---------------------------------------------------------------------------
00004D2C                            ; Initial water heights
00004D2C                            ; ---------------------------------------------------------------------------
00004D2C 0420                       WaterHeight:	dc.w $420	; Labyrinth 1
00004D2E 0328                       		dc.w $328	; Labyrinth 2
00004D30 0900                       		dc.w $900	; Labyrinth 3
00004D32 0228                       		dc.w $228	; Scrap Brain 3
00004D34                            		even
00004D34                            ; ===========================================================================
00004D34                            
00004D34                            ; ---------------------------------------------------------------------------
00004D34                            ; Labyrinth dynamic water routines
00004D34                            ; ---------------------------------------------------------------------------
00004D34                            
00004D34                            LZDynamicWater:
00004D34 7000                       		moveq	#0,d0
00004D36 1038 FE11                  		move.b	(v_act).w,d0
00004D3A D040                       		add.w	d0,d0
00004D3C 303B 0000                  		move.w	DynWater_Index(pc,d0.w),d0
00004D40 4EBB 0000                  		jsr	DynWater_Index(pc,d0.w)
00004D44 7200                       		moveq	#0,d1
00004D46 1238 F64C                  		move.b	(f_water).w,d1
00004D4A 3038 F64A                  		move.w	(v_waterpos3).w,d0
00004D4E 9078 F648                  		sub.w	(v_waterpos2).w,d0
00004D52 6700                       		beq.s	@exit		; if water level is correct, branch
00004D54 6400                       		bcc.s	@movewater	; if water level is too high, branch
00004D56 4441                       		neg.w	d1		; set water to move up instead
00004D58                            
00004D58                            	@movewater:
00004D58 D378 F648                  		add.w	d1,(v_waterpos2).w ; move water up/down
00004D5C                            
00004D5C                            	@exit:
00004D5C 4E75                       		rts	
00004D5E                            ; ===========================================================================
00004D5E 0000                       DynWater_Index:	dc.w DynWater_LZ1-DynWater_Index
00004D60 0000                       		dc.w DynWater_LZ2-DynWater_Index
00004D62 0000                       		dc.w DynWater_LZ3-DynWater_Index
00004D64 0000                       		dc.w DynWater_SBZ3-DynWater_Index
00004D66                            ; ===========================================================================
00004D66                            
00004D66                            DynWater_LZ1:
00004D66 4E75                       		rts	
00004D68                            ; ===========================================================================
00004D68                            
00004D68                            DynWater_LZ2:
00004D68 3038 F700                  		move.w	(v_screenposx).w,d0
00004D6C 323C 0328                  		move.w	#$328,d1
00004D70 0C40 0500                  		cmpi.w	#$500,d0
00004D74 6500                       		bcs.s	@setwater
00004D76 323C 03C8                  		move.w	#$3C8,d1
00004D7A 0C40 0B00                  		cmpi.w	#$B00,d0
00004D7E 6500                       		bcs.s	@setwater
00004D80 323C 0428                  		move.w	#$428,d1
00004D84                            
00004D84                            	@setwater:
00004D84 31C1 F64A                  		move.w	d1,(v_waterpos3).w
00004D88 4E75                       		rts	
00004D8A                            ; ===========================================================================
00004D8A                            
00004D8A                            DynWater_LZ3:
00004D8A 3038 F700                  		move.w	(v_screenposx).w,d0
00004D8E 1438 F64D                  		move.b	(v_wtr_routine).w,d2
00004D92 6600                       		bne.s	@routine2
00004D94                            
00004D94 323C 0900                  		move.w	#$900,d1
00004D98 0C40 0600                  		cmpi.w	#$600,d0	; has screen reached position?
00004D9C 6500                       		bcs.s	@setwaterlz3	; if not, branch
00004D9E 0C78 03C0 D00C             		cmpi.w	#$3C0,(v_player+obY).w
00004DA4 6500                       		bcs.s	@setwaterlz3
00004DA6 0C78 0600 D00C             		cmpi.w	#$600,(v_player+obY).w ; is Sonic in a y-axis range?
00004DAC 6400                       		bcc.s	@setwaterlz3	; if not, branch
00004DAE                            
00004DAE 323C 04C8                  		move.w	#$4C8,d1	; set new water height
00004DB2 11FC 004B A506             		move.b	#$4B,(v_lvllayout+$106).w ; update level layout
00004DB8 11FC 0001 F64D             		move.b	#1,(v_wtr_routine).w ; use second routine next
00004DC6                            
00004DC6                            	@setwaterlz3:
00004DC6 31C1 F64A                  		move.w	d1,(v_waterpos3).w
00004DCA 31C1 F648                  		move.w	d1,(v_waterpos2).w ; change water height instantly
00004DCE 4E75                       		rts	
00004DD0                            ; ===========================================================================
00004DD0                            
00004DD0                            @routine2:
00004DD0 5302                       		subq.b	#1,d2
00004DD2 6600                       		bne.s	@routine3
00004DD4 323C 04C8                  		move.w	#$4C8,d1
00004DD8 0C40 0770                  		cmpi.w	#$770,d0
00004DDC 6500                       		bcs.s	@setwater2
00004DDE 323C 0308                  		move.w	#$308,d1
00004DE2 0C40 1400                  		cmpi.w	#$1400,d0
00004DE6 6500                       		bcs.s	@setwater2
00004DE8 0C78 0508 F64A             		cmpi.w	#$508,(v_waterpos3).w
00004DEE 6700                       		beq.s	@sonicislow
00004DF0 0C78 0600 D00C             		cmpi.w	#$600,(v_player+obY).w ; is Sonic below $600 y-axis?
00004DF6 6400                       		bcc.s	@sonicislow	; if yes, branch
00004DF8 0C78 0280 D00C             		cmpi.w	#$280,(v_player+obY).w
00004DFE 6400                       		bcc.s	@setwater2
00004E00                            
00004E00                            @sonicislow:
00004E00 323C 0508                  		move.w	#$508,d1
00004E04 31C1 F648                  		move.w	d1,(v_waterpos2).w
00004E08 0C40 1770                  		cmpi.w	#$1770,d0
00004E0C 6500                       		bcs.s	@setwater2
00004E0E 11FC 0002 F64D             		move.b	#2,(v_wtr_routine).w
00004E14                            
00004E14                            	@setwater2:
00004E14 31C1 F64A                  		move.w	d1,(v_waterpos3).w
00004E18 4E75                       		rts	
00004E1A                            ; ===========================================================================
00004E1A                            
00004E1A                            @routine3:
00004E1A 5302                       		subq.b	#1,d2
00004E1C 6600                       		bne.s	@routine4
00004E1E 323C 0508                  		move.w	#$508,d1
00004E22 0C40 1860                  		cmpi.w	#$1860,d0
00004E26 6500                       		bcs.s	@setwater3
00004E28 323C 0188                  		move.w	#$188,d1
00004E2C 0C40 1AF0                  		cmpi.w	#$1AF0,d0
00004E30 6400                       		bcc.s	@loc_3DC6
00004E32 B278 F648                  		cmp.w	(v_waterpos2).w,d1
00004E36 6600                       		bne.s	@setwater3
00004E38                            
00004E38                            	@loc_3DC6:
00004E38 11FC 0003 F64D             		move.b	#3,(v_wtr_routine).w
00004E3E                            
00004E3E                            	@setwater3:
00004E3E 31C1 F64A                  		move.w	d1,(v_waterpos3).w
00004E42 4E75                       		rts	
00004E44                            ; ===========================================================================
00004E44                            
00004E44                            @routine4:
00004E44 5302                       		subq.b	#1,d2
00004E46 6600                       		bne.s	@routine5
00004E48 323C 0188                  		move.w	#$188,d1
00004E4C 0C40 1AF0                  		cmpi.w	#$1AF0,d0
00004E50 6500                       		bcs.s	@setwater4
00004E52 323C 0900                  		move.w	#$900,d1
00004E56 0C40 1BC0                  		cmpi.w	#$1BC0,d0
00004E5A 6500                       		bcs.s	@setwater4
00004E5C 11FC 0004 F64D             		move.b	#4,(v_wtr_routine).w
00004E62 31FC 0608 F64A             		move.w	#$608,(v_waterpos3).w
00004E68 31FC 07C0 F648             		move.w	#$7C0,(v_waterpos2).w
00004E6E 11FC 0001 F7E8             		move.b	#1,(f_switch+8).w
00004E74 4E75                       		rts	
00004E76                            ; ===========================================================================
00004E76                            
00004E76                            @setwater4:
00004E76 31C1 F64A                  		move.w	d1,(v_waterpos3).w
00004E7A 31C1 F648                  		move.w	d1,(v_waterpos2).w
00004E7E 4E75                       		rts	
00004E80                            ; ===========================================================================
00004E80                            
00004E80                            @routine5:
00004E80 0C40 1E00                  		cmpi.w	#$1E00,d0	; has screen passed final position?
00004E84 6500                       		bcs.s	@dontset	; if not, branch
00004E86 31FC 0128 F64A             		move.w	#$128,(v_waterpos3).w
00004E8C                            
00004E8C                            	@dontset:
00004E8C 4E75                       		rts	
00004E8E                            ; ===========================================================================
00004E8E                            
00004E8E                            DynWater_SBZ3:
00004E8E 323C 0228                  		move.w	#$228,d1
00004E92 0C78 0F00 F700             		cmpi.w	#$F00,(v_screenposx).w
00004E98 6500                       		bcs.s	@setwater
00004E9A 323C 04C8                  		move.w	#$4C8,d1
00004E9E                            
00004E9E                            	@setwater:
00004E9E 31C1 F64A                  		move.w	d1,(v_waterpos3).w
00004EA2 4E75                       		rts
00004EA4                            
00004EA4                            ; ---------------------------------------------------------------------------
00004EA4                            ; Labyrinth Zone "wind tunnels"	subroutine
00004EA4                            ; ---------------------------------------------------------------------------
00004EA4                            
00004EA4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004EA4                            
00004EA4                            
00004EA4                            LZWindTunnels:
00004EA4 4A78 FE08                  		tst.w	(v_debuguse).w	; is debug mode	being used?
00004EA8 6600 0000                  		bne.w	@quit	; if yes, branch
00004EAC 45F9 0000 0000             		lea	(LZWind_Data+8).l,a2
00004EB2 7000                       		moveq	#0,d0
00004EB4 1038 FE11                  		move.b	(v_act).w,d0	; get act number
00004EB8 E748                       		lsl.w	#3,d0		; multiply by 8
00004EBA D4C0                       		adda.w	d0,a2		; add to address for data
00004EBC 7200                       		moveq	#0,d1
00004EBE 4A38 FE11                  		tst.b	(v_act).w	; is act number 1?
00004EC2 6600                       		bne.s	@notact1	; if not, branch
00004EC4 7201                       		moveq	#1,d1
00004EC6 514A                       		subq.w	#8,a2		; use different data for act 1
00004EC8                            
00004EC8                            	@notact1:
00004EC8 43F8 D000                  		lea	(v_player).w,a1
00004ECC                            
00004ECC                            @chksonic:
00004ECC 3029 0008                  		move.w	obX(a1),d0
00004ED0 B052                       		cmp.w	(a2),d0
00004ED2 6500 0000                  		bcs.w	@chknext
00004ED6 B06A 0004                  		cmp.w	4(a2),d0
00004EDA 6400 0000                  		bcc.w	@chknext
00004EDE 3429 000C                  		move.w	obY(a1),d2
00004EE2 B46A 0002                  		cmp.w	2(a2),d2
00004EE6 6500                       		bcs.s	@chknext
00004EE8 B46A 0006                  		cmp.w	6(a2),d2
00004EEC 6400                       		bcc.s	@chknext	; branch if Sonic is outside a range
00004EEE 1038 FE0F                  		move.b	(v_vbla_byte).w,d0
00004EF2 0200 003F                  		andi.b	#$3F,d0		; does VInt counter fall on 0, $40, $80 or $C0?
00004EF6 6600                       		bne.s	@skipsound	; if not, branch
00004F02                            
00004F02                            	@skipsound:
00004F02 4A38 F7C9                  		tst.b	(f_wtunnelallow).w ; are wind tunnels disabled?
00004F06 6600 0000                  		bne.w	@quit	; if yes, branch
00004F0A 0C29 0004 0024             		cmpi.b	#4,obRoutine(a1) ; is Sonic hurt/dying?
00004F10 6400                       		bcc.s	@clrquit	; if yes, branch
00004F12 11FC 0001 F7C7             		move.b	#1,(f_wtunnelmode).w
00004F18 0440 0080                  		subi.w	#$80,d0
00004F1C B052                       		cmp.w	(a2),d0
00004F1E 6400                       		bcc.s	@movesonic
00004F20 7002                       		moveq	#2,d0
00004F22 0C38 0001 FE11             		cmpi.b	#1,(v_act).w	; is act number 2?
00004F28 6600                       		bne.s	@notact2	; if not, branch
00004F2A 4440                       		neg.w	d0
00004F2C                            
00004F2C                            	@notact2:
00004F2C D169 000C                  		add.w	d0,obY(a1)	; adjust Sonic's y-axis for curve of tunnel
00004F30                            
00004F30                            @movesonic:
00004F30 5869 0008                  		addq.w	#4,obX(a1)
00004F34 337C 0400 0010             		move.w	#$400,obVelX(a1) ; move Sonic horizontally
00004F3A 337C 0000 0012             		move.w	#0,obVelY(a1)
00004F40 137C 0000 001C             		move.b	#id_Float2,obAnim(a1)	; use floating animation
00004F46 08E9 0001 0022             		bset	#1,obStatus(a1)
00004F4C 0838 0000 F602             		btst	#0,(v_jpadhold2).w ; is up pressed?
00004F52 6700                       		beq.s	@down		; if not, branch
00004F54 5369 000C                  		subq.w	#1,obY(a1)	; move Sonic up on pole
00004F58                            
00004F58                            	@down:
00004F58 0838 0001 F602             		btst	#1,(v_jpadhold2).w ; is down being pressed?
00004F5E 6700                       		beq.s	@end		; if not, branch
00004F60 5269 000C                  		addq.w	#1,obY(a1)	; move Sonic down on pole
00004F64                            
00004F64                            	@end:
00004F64 4E75                       		rts	
00004F66                            ; ===========================================================================
00004F66                            
00004F66                            @chknext:
00004F66 504A                       		addq.w	#8,a2		; use second set of values (act 1 only)
00004F68 51C9 FF62                  		dbf	d1,@chksonic	; on act 1, repeat for a second tunnel
00004F6C 4A38 F7C7                  		tst.b	(f_wtunnelmode).w ; is Sonic still in a tunnel?
00004F70 6700                       		beq.s	@quit		; if yes, branch
00004F72 137C 0000 001C             		move.b	#id_Walk,obAnim(a1)	; use walking animation
00004F78                            
00004F78                            @clrquit:
00004F78 4238 F7C7                  		clr.b	(f_wtunnelmode).w ; finish tunnel
00004F7C                            
00004F7C                            @quit:
00004F7C 4E75                       		rts	
00004F7E                            ; End of function LZWindTunnels
00004F7E                            
00004F7E                            ; ===========================================================================
00004F7E                            
00004F7E                            		;    left, top,  right, bottom boundaries
00004F7E 0A80 0300 0C10 0380        LZWind_Data:	dc.w $A80, $300, $C10,  $380 ; act 1 values (set 1)
00004F86 0F80 0100 1410 0180        		dc.w $F80, $100, $1410,	$180 ; act 1 values (set 2)
00004F8E 0460 0400 0710 0480        		dc.w $460, $400, $710,  $480 ; act 2 values
00004F96 0A20 0600 1610 06E0        		dc.w $A20, $600, $1610, $6E0 ; act 3 values
00004F9E 0C80 0600 13D0 0680        		dc.w $C80, $600, $13D0, $680 ; SBZ act 3 values
00004FA6                            		even
00004FA6                            
00004FA6                            ; ---------------------------------------------------------------------------
00004FA6                            ; Labyrinth Zone water slide subroutine
00004FA6                            ; ---------------------------------------------------------------------------
00004FA6                            
00004FA6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004FA6                            
00004FA6                            
00004FA6                            LZWaterSlides:
00004FA6 43F8 D000                  		lea	(v_player).w,a1
00004FAA 0829 0001 0022             		btst	#1,obStatus(a1)	; is Sonic jumping?
00004FB0 6600                       		bne.s	loc_3F6A	; if not, branch
00004FB2 3029 000C                  		move.w	obY(a1),d0
00004FB6 E248                       		lsr.w	#1,d0
00004FB8 0240 0380                  		andi.w	#$380,d0
00004FBC 1229 0008                  		move.b	obX(a1),d1
00004FC0 0241 007F                  		andi.w	#$7F,d1
00004FC4 D041                       		add.w	d1,d0
00004FC6 45F8 A400                  		lea	(v_lvllayout).w,a2
00004FCA 1032 0000                  		move.b	(a2,d0.w),d0
00004FCE 45FA 0000                  		lea	Slide_Chunks_End(pc),a2
00004FD2 7200                       		moveq	#Slide_Chunks_End-Slide_Chunks-1,d1
00004FD4                            
00004FD4                            loc_3F62:
00004FD4 B022                       		cmp.b	-(a2),d0
00004FD6 57C9 FFFC                  		dbeq	d1,loc_3F62
00004FDA 6700                       		beq.s	LZSlide_Move
00004FDC                            
00004FDC                            loc_3F6A:
00004FDC 4A38 F7CA                  		tst.b	(f_jumponly).w
00004FE0 6700                       		beq.s	locret_3F7A
00004FE2 337C 0005 003E             		move.w	#5,$3E(a1)
00004FE8 4238 F7CA                  		clr.b	(f_jumponly).w
00004FEC                            
00004FEC                            locret_3F7A:
00004FEC 4E75                       		rts	
00004FEE                            ; ===========================================================================
00004FEE                            
00004FEE                            LZSlide_Move:
00004FEE 0C41 0003                  		cmpi.w	#3,d1
00004FF2 6400                       		bcc.s	loc_3F84
00004FF4 4E71                       		nop	
00004FF6                            
00004FF6                            loc_3F84:
00004FF6 08A9 0000 0022             		bclr	#0,obStatus(a1)
00004FFC 103B 1000                  		move.b	Slide_Speeds(pc,d1.w),d0
00005000 1340 0020                  		move.b	d0,obInertia(a1)
00005004 6A00                       		bpl.s	loc_3F9A
00005006 08E9 0000 0022             		bset	#0,obStatus(a1)
0000500C                            
0000500C                            loc_3F9A:
0000500C 4229 0021                  		clr.b	obInertia+1(a1)
00005010 137C 0000 001C             		move.b	#id_WaterSlide,obAnim(a1) ; use Sonic's "sliding" animation
00005016 11FC 0001 F7CA             		move.b	#1,(f_jumponly).w ; lock controls (except jumping)
0000501C 1038 FE0F                  		move.b	(v_vbla_byte).w,d0
00005020 0200 001F                  		andi.b	#$1F,d0
00005024 6600                       		bne.s	locret_3FBE
00005030                            
00005030                            locret_3FBE:
00005030 4E75                       		rts	
00005032                            ; End of function LZWaterSlides
00005032                            
00005032                            ; ===========================================================================
00005032                            ; byte_3FC0:
00005032                            Slide_Speeds:
00005032 0AF5 0AF6 F5F4 0B          		dc.b $A, $F5, $A, $F6, $F5, $F4, $B
0000503A 00                         		even
0000503A                            
0000503A                            Slide_Chunks:
0000503A 54                         		dc.b $54 ;2, 7, 3, $4C, $4B, 8, 4
0000503B                            ; byte_3FCF
0000503B                            Slide_Chunks_End
0000503C 00                         		even
0000503C 00                         		even
0000503C                            		include	"_inc\MoveSonicInDemo.asm"
0000503C                            ; ---------------------------------------------------------------------------
0000503C                            ; Subroutine to	move Sonic in demo mode
0000503C                            ; ---------------------------------------------------------------------------
0000503C                            
0000503C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000503C                            
0000503C                            
0000503C                            MoveSonicInDemo:
0000503C 4A78 FFF0                  		tst.w	(f_demo).w	; is demo mode on?
00005040 6600                       		bne.s	MDemo_On	; if yes, branch
00005042 4E75                       		rts	
00005044                            ; ===========================================================================
00005044                            
00005044                            ; This is an unused subroutine for recording a demo
00005044                            
00005044                            DemoRecorder:
00005044 43F9 0008 0000             		lea	($80000).l,a1
0000504A 3038 F790                  		move.w	(v_btnpushtime1).w,d0
0000504E D2C0                       		adda.w	d0,a1
00005050 1038 F604                  		move.b	(v_jpadhold1).w,d0
00005054 B011                       		cmp.b	(a1),d0
00005056 6600                       		bne.s	@next
00005058 5229 0001                  		addq.b	#1,1(a1)
0000505C 0C29 00FF 0001             		cmpi.b	#$FF,1(a1)
00005062 6700                       		beq.s	@next
00005064 4E75                       		rts	
00005066                            
00005066                            	@next:
00005066 1340 0002                  		move.b	d0,2(a1)
0000506A 137C 0000 0003             		move.b	#0,3(a1)
00005070 5478 F790                  		addq.w	#2,(v_btnpushtime1).w
00005074 0278 03FF F790             		andi.w	#$3FF,(v_btnpushtime1).w
0000507A 4E75                       		rts	
0000507C                            ; ===========================================================================
0000507C                            
0000507C                            MDemo_On:
0000507C 4A38 F604                  		tst.b	(v_jpadhold1).w	; is start button pressed?
00005080 6A00                       		bpl.s	@dontquit	; if not, branch
00005082 4A78 FFF0                  		tst.w	(f_demo).w	; is this an ending sequence demo?
00005086 6B00                       		bmi.s	@dontquit	; if yes, branch
00005088 11FC 0000 F600             		move.b	#id_Title,(v_gamemode).w ; go to title screen
0000508E                            
0000508E                            	@dontquit:
0000508E 43F9 0000 0000             		lea	(DemoDataPtr).l,a1
00005094 7000                       		moveq	#0,d0
00005096 1038 FE10                  		move.b	(v_zone).w,d0
0000509A 0C38 0000 F600             		cmpi.b	#id_Special,(v_gamemode).w ; is this a special stage?
000050A0 6600                       		bne.s	@notspecial	; if not, branch
000050A2 7006                       		moveq	#6,d0		; use demo #6
000050A4                            
000050A4                            	@notspecial:
000050A4 E548                       		lsl.w	#2,d0
000050A6 2271 0000                  		movea.l	(a1,d0.w),a1	; fetch address for demo data
000050AA 4A78 FFF0                  		tst.w	(f_demo).w	; is this an ending sequence demo?
000050AE 6A00                       		bpl.s	@notcredits	; if not, branch
000050B0 43F9 0000 0000             		lea	(DemoEndDataPtr).l,a1
000050B6 3038 FFF4                  		move.w	(v_creditsnum).w,d0
000050BA 5340                       		subq.w	#1,d0
000050BC E548                       		lsl.w	#2,d0
000050BE 2271 0000                  		movea.l	(a1,d0.w),a1	; fetch address for credits demo
000050C2                            
000050C2                            	@notcredits:
000050C2 3038 F790                  		move.w	(v_btnpushtime1).w,d0
000050C6 D2C0                       		adda.w	d0,a1
000050C8 1011                       		move.b	(a1),d0
000050CA 41F8 F604                  		lea	(v_jpadhold1).w,a0
000050CE 1200                       		move.b	d0,d1
000050D0 7400                       			moveq	#0,d2
000050D2 B500                       		eor.b	d2,d0
000050D4 10C1                       		move.b	d1,(a0)+
000050D6 C001                       		and.b	d1,d0
000050D8 10C0                       		move.b	d0,(a0)+
000050DA 5338 F792                  		subq.b	#1,(v_btnpushtime2).w
000050DE 6400                       		bcc.s	@end
000050E0 11E9 0003 F792             		move.b	3(a1),(v_btnpushtime2).w
000050E6 5478 F790                  		addq.w	#2,(v_btnpushtime1).w
000050EA                            
000050EA                            	@end:
000050EA 4E75                       		rts	
000050EC                            ; End of function MoveSonicInDemo
000050EC                            
000050EC                            ; ===========================================================================
000050EC                            ; ---------------------------------------------------------------------------
000050EC                            ; Demo sequence	pointers
000050EC                            ; ---------------------------------------------------------------------------
000050EC 0000 0000                  DemoDataPtr:	dc.l Demo_GHZ		; demos run after the title screen
000050F0 0000 0000                  		dc.l Demo_GHZ
000050F4 0000 0000                  		dc.l Demo_MZ
000050F8 0000 0000                  		dc.l Demo_MZ
000050FC 0000 0000                  		dc.l Demo_SYZ
00005100 0000 0000                  		dc.l Demo_SYZ
00005104 0000 0000                  		dc.l Demo_SS
00005108 0000 0000                  		dc.l Demo_SS
0000510C                            
0000510C 0000 0000                  DemoEndDataPtr:	dc.l Demo_EndGHZ1	; demos run during the credits
00005110 0000 0000                  		dc.l Demo_EndMZ
00005114 0000 0000                  		dc.l Demo_EndSYZ
00005118 0000 0000                  		dc.l Demo_EndLZ
0000511C 0000 0000                  		dc.l Demo_EndSLZ
00005120 0000 0000                  		dc.l Demo_EndSBZ1
00005124 0000 0000                  		dc.l Demo_EndSBZ2
00005128 0000 0000                  		dc.l Demo_EndGHZ2
0000512C                            
0000512C 008B 0837 0042 085C 006A+  		dc.b 0,	$8B, 8,	$37, 0,	$42, 8,	$5C, 0,	$6A, 8,	$5F, 0,	$2F, 8,	$2C
0000513C 0021 0803 2830 0808 002E+  		dc.b 0,	$21, 8,	3, $28,	$30, 8,	8, 0, $2E, 8, $15, 0, $F, 8, $46
0000514C 001A 08FF 08CA 0000 0000+  		dc.b 0,	$1A, 8,	$FF, 8,	$CA, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0
0000515C                            		even
0000515C                            		even
0000515C                            
0000515C                            ; ---------------------------------------------------------------------------
0000515C                            ; Collision index pointer loading subroutine
0000515C                            ; ---------------------------------------------------------------------------
0000515C                            
0000515C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000515C                            
0000515C                            
0000515C                            ColIndexLoad:
0000515C 7000                       		moveq	#0,d0
0000515E 1038 FE10                  		move.b	(v_zone).w,d0
00005162 E548                       		lsl.w	#2,d0
00005164 21FB 0000 F796             		move.l	ColPointers(pc,d0.w),(v_collindex).w
0000516A 4E75                       		rts	
0000516C                            ; End of function ColIndexLoad
0000516C                            
0000516C                            ; ===========================================================================
0000516C                            ; ---------------------------------------------------------------------------
0000516C                            ; Collision index pointers
0000516C                            ; ---------------------------------------------------------------------------
0000516C 0000 0000                  ColPointers:	dc.l Col_GHZ
00005170 0000 0000                  		dc.l Col_LZ
00005174 0000 0000                  		dc.l Col_MZ
00005178 0000 0000                  		dc.l Col_SLZ
0000517C 0000 0000                  		dc.l Col_SYZ
00005180 0000 0000                  		dc.l Col_SBZ
00005184                            ;		dc.l Col_GHZ ; Pointer for Ending is missing by default.
00005184                            
00005184                            		include	"_inc\Oscillatory Routines.asm"
00005184                            ; ---------------------------------------------------------------------------
00005184                            ; Oscillating number subroutines
00005184                            ; ---------------------------------------------------------------------------
00005184                            
00005184                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00005184                            
00005184                            ; Initialise the values
00005184                            
00005184                            OscillateNumInit:
00005184 43F8 FE5E                  		lea	(v_oscillate).w,a1
00005188 45F9 0000 0000             		lea	(@baselines).l,a2
0000518E 7220                       		moveq	#$20,d1
00005190                            
00005190                            	@loop:
00005190 32DA                       		move.w	(a2)+,(a1)+	; copy baseline values to RAM
00005192 51C9 FFFC                  		dbf	d1,@loop
00005196 4E75                       		rts	
00005198                            
00005198                            
00005198                            ; ===========================================================================
00005198 007C                       @baselines:	dc.w %0000000001111100	; oscillation direction bitfield
0000519A 0080 0000                  		dc.w $80, 0
0000519E 0080 0000                  		dc.w $80, 0
000051A2 0080 0000                  		dc.w $80, 0
000051A6 0080 0000                  		dc.w $80, 0
000051AA 0080 0000                  		dc.w $80, 0
000051AE 0080 0000                  		dc.w $80, 0
000051B2 0080 0000                  		dc.w $80, 0
000051B6 0080 0000                  		dc.w $80, 0
000051BA 0080 0000                  		dc.w $80, 0
000051BE 50F0 011E                  		dc.w $50F0, $11E
000051C2 2080 00B4                  		dc.w $2080, $B4
000051C6 3080 010E                  		dc.w $3080, $10E
000051CA 5080 01C2                  		dc.w $5080, $1C2
000051CE 7080 0276                  		dc.w $7080, $276
000051D2 0080 0000                  		dc.w $80, 0
000051D6 0080 0000                  		dc.w $80, 0
000051DA                            		even
000051DA                            
000051DA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000051DA                            
000051DA                            ; Oscillate values
000051DA                            
000051DA                            OscillateNumDo:
000051DA 0C38 0006 D024             		cmpi.b	#6,(v_player+obRoutine).w ; has Sonic just died?
000051E0 6400                       		bcc.s	@end		; if yes, branch
000051E2 43F8 FE5E                  		lea	(v_oscillate).w,a1
000051E6 45F9 0000 0000             		lea	(@settings).l,a2
000051EC 3619                       		move.w	(a1)+,d3	; get oscillation direction bitfield
000051EE 720F                       		moveq	#$F,d1
000051F0                            
000051F0                            @loop:
000051F0 341A                       		move.w	(a2)+,d2	; get frequency
000051F2 381A                       		move.w	(a2)+,d4	; get amplitude
000051F4 0303                       		btst	d1,d3		; check oscillation direction
000051F6 6600                       		bne.s	@down		; branch if 1
000051F8                            
000051F8                            	@up:
000051F8 3029 0002                  		move.w	2(a1),d0	; get current rate
000051FC D042                       		add.w	d2,d0		; add frequency
000051FE 3340 0002                  		move.w	d0,2(a1)
00005202 D151                       		add.w	d0,0(a1)	; add rate to value
00005204 B811                       		cmp.b	0(a1),d4
00005206 6200                       		bhi.s	@next
00005208 03C3                       		bset	d1,d3
0000520A 6000                       		bra.s	@next
0000520C                            
0000520C                            	@down:
0000520C 3029 0002                  		move.w	2(a1),d0
00005210 9042                       		sub.w	d2,d0
00005212 3340 0002                  		move.w	d0,2(a1)
00005216 D151                       		add.w	d0,0(a1)
00005218 B811                       		cmp.b	0(a1),d4
0000521A 6300                       		bls.s	@next
0000521C 0383                       		bclr	d1,d3
0000521E                            
0000521E                            	@next:
0000521E 5849                       		addq.w	#4,a1
00005220 51C9 FFCE                  		dbf	d1,@loop
00005224 31C3 FE5E                  		move.w	d3,(v_oscillate).w
00005228                            
00005228                            @end:
00005228 4E75                       		rts	
0000522A                            ; End of function OscillateNumDo
0000522A                            
0000522A                            ; ===========================================================================
0000522A 0002 0010                  @settings:	dc.w 2,	$10	; frequency, amplitude
0000522E 0002 0018                  		dc.w 2,	$18
00005232 0002 0020                  		dc.w 2,	$20
00005236 0002 0030                  		dc.w 2,	$30
0000523A 0004 0020                  		dc.w 4,	$20
0000523E 0008 0008                  		dc.w 8,	8
00005242 0008 0040                  		dc.w 8,	$40
00005246 0004 0040                  		dc.w 4,	$40
0000524A 0002 0050                  		dc.w 2,	$50
0000524E 0002 0050                  		dc.w 2,	$50
00005252 0002 0020                  		dc.w 2,	$20
00005256 0003 0030                  		dc.w 3,	$30
0000525A 0005 0050                  		dc.w 5,	$50
0000525E 0007 0070                  		dc.w 7,	$70
00005262 0002 0010                  		dc.w 2,	$10
00005266 0002 0010                  		dc.w 2,	$10
0000526A                            		even
0000526A                            		even
0000526A                            
0000526A                            ; ---------------------------------------------------------------------------
0000526A                            ; Subroutine to	change synchronised animation variables (rings, giant rings)
0000526A                            ; ---------------------------------------------------------------------------
0000526A                            
0000526A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000526A                            
0000526A                            
0000526A                            SynchroAnimate:
0000526A                            
0000526A                            ; Used for GHZ spiked log
0000526A                            Sync1:
0000526A 5338 FEC0                  		subq.b	#1,(v_ani0_time).w ; has timer reached 0?
0000526E 6A00                       		bpl.s	Sync2		; if not, branch
00005270 11FC 000B FEC0             		move.b	#$B,(v_ani0_time).w ; reset timer
00005276 5338 FEC1                  		subq.b	#1,(v_ani0_frame).w ; next frame
0000527A 0238 0007 FEC1             		andi.b	#7,(v_ani0_frame).w ; max frame is 7
00005280                            
00005280                            ; Used for rings and giant rings
00005280                            Sync2:
00005280 5338 FEC2                  		subq.b	#1,(v_ani1_time).w
00005284 6A00                       		bpl.s	Sync3
00005286 11FC 0007 FEC2             		move.b	#7,(v_ani1_time).w
0000528C 5238 FEC3                  		addq.b	#1,(v_ani1_frame).w
00005290 0238 0003 FEC3             		andi.b	#3,(v_ani1_frame).w
00005296                            
00005296                            ; Used for nothing
00005296                            Sync3:
00005296 5338 FEC4                  		subq.b	#1,(v_ani2_time).w
0000529A 6A00                       		bpl.s	Sync4
0000529C 11FC 0007 FEC4             		move.b	#7,(v_ani2_time).w
000052A2 5238 FEC5                  		addq.b	#1,(v_ani2_frame).w
000052A6 0C38 0006 FEC5             		cmpi.b	#6,(v_ani2_frame).w
000052AC 6500                       		blo.s	Sync4
000052AE 11FC 0000 FEC5             		move.b	#0,(v_ani2_frame).w
000052B4                            
000052B4                            ; Used for bouncing rings
000052B4                            Sync4:
000052B4 4A38 FEC6                  		tst.b	(v_ani3_time).w
000052B8 6700                       		beq.s	SyncEnd
000052BA 7000                       		moveq	#0,d0
000052BC 1038 FEC6                  		move.b	(v_ani3_time).w,d0
000052C0 D078 FEC8                  		add.w	(v_ani3_buf).w,d0
000052C4 31C0 FEC8                  		move.w	d0,(v_ani3_buf).w
000052C8 EF58                       		rol.w	#7,d0
000052CA 0240 0003                  		andi.w	#3,d0
000052CE 11C0 FEC7                  		move.b	d0,(v_ani3_frame).w
000052D2 5338 FEC6                  		subq.b	#1,(v_ani3_time).w
000052D6                            
000052D6                            SyncEnd:
000052D6 4E75                       		rts	
000052D8                            ; End of function SynchroAnimate
000052D8                            
000052D8                            ; ---------------------------------------------------------------------------
000052D8                            ; End-of-act signpost pattern loading subroutine
000052D8                            ; ---------------------------------------------------------------------------
000052D8                            
000052D8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000052D8                            
000052D8                            
000052D8                            SignpostArtLoad:
000052D8 4A78 FE08                  		tst.w	(v_debuguse).w	; is debug mode	being used?
000052DC 6600 0000                  		bne.w	@exit		; if yes, branch
000052E0 0C38 0002 FE11             		cmpi.b	#2,(v_act).w	; is act number 02 (act 3)?
000052E6 6700                       		beq.s	@exit		; if yes, branch
000052E8                            
000052E8 3038 F700                  		move.w	(v_screenposx).w,d0
000052EC 3238 F72A                  		move.w	(v_limitright2).w,d1
000052F0 0441 0100                  		subi.w	#$100,d1
000052F4 B041                       		cmp.w	d1,d0		; has Sonic reached the	edge of	the level?
000052F6 6D00                       		blt.s	@exit		; if not, branch
000052F8 4A38 FE1E                  		tst.b	(f_timecount).w
000052FC 6700                       		beq.s	@exit
000052FE B278 F728                  		cmp.w	(v_limitleft2).w,d1
00005302 6700                       		beq.s	@exit
00005304 31C1 F728                  		move.w	d1,(v_limitleft2).w ; move left boundary to current screen position
00005308 7000                       		moveq	#plcid_Signpost,d0
0000530A 6000 C460                  		bra.w	NewPLC		; load signpost	patterns
0000530E                            
0000530E                            	@exit:
0000530E 4E75                       		rts	
00005310                            ; End of function SignpostArtLoad
00005310                            
00005310                            ; ===========================================================================
00005310                            Demo_GHZ:	incbin	"demodata\Intro - GHZ.bin"
00005390                            Demo_MZ:	incbin	"demodata\Intro - MZ.bin"
000054C0                            Demo_SYZ:	incbin	"demodata\Intro - SYZ.bin"
00005540                            Demo_SS:	incbin	"demodata\Intro - Special Stage.bin"
00005640                            ; ===========================================================================
00005640                            
00005640                            ; ---------------------------------------------------------------------------
00005640                            ; Special Stage
00005640                            ; ---------------------------------------------------------------------------
00005640                            
00005640                            GM_Special:
00005648 6100 CCB2                  		bsr.w	PaletteWhiteOut
0000564C 46FC 2700                  		disable_ints
00005650 4DF9 00C0 0004             		lea	(vdp_control_port).l,a6
00005656 3CBC 8B03                  		move.w	#$8B03,(a6)	; line scroll mode
0000565A 3CBC 8004                  		move.w	#$8004,(a6)	; 8-colour mode
0000565E 31FC 8AAF F624             		move.w	#$8A00+175,(v_hbla_hreg).w
00005664 3CBC 9011                  		move.w	#$9011,(a6)	; 128-cell hscroll size
00005668 3038 F60C                  		move.w	(v_vdp_buffer1).w,d0
0000566C 0200 00BF                  		andi.b	#$BF,d0
00005670 33C0 00C0 0004             		move.w	d0,(vdp_control_port).l
00005676 6100 BB58                  		bsr.w	ClearScreen
0000567A 46FC 2300                  		enable_ints
0000567E 4BF9 00C0 0004 3ABC 8F01+  		fillVRAM	0,$6FFF,$5000
000056A0                            
000056A0                            	SS_WaitForDMA:
000056A0 3215                       		move.w	(a5),d1		; read control port ($C00004)
000056A2 0801 0001                  		btst	#1,d1		; is DMA running?
000056A6 66F8                       		bne.s	SS_WaitForDMA	; if yes, branch
000056A8 3ABC 8F02                  		move.w	#$8F02,(a5)	; set VDP increment to 2 bytes
000056AC 6100 0000                  		bsr.w	SS_BGLoad
000056B0 7000                       		moveq	#plcid_SpecialStage,d0
000056B2 6100 C1F2                  		bsr.w	QuickPLC	; load special stage patterns
000056B6                            
000056B6 43F8 D000                  		lea	(v_objspace).w,a1
000056BA 7000                       		moveq	#0,d0
000056BC 323C 07FF                  		move.w	#$7FF,d1
000056C0                            	SS_ClrObjRam:
000056C0 22C0                       		move.l	d0,(a1)+
000056C2 51C9 FFFC                  		dbf	d1,SS_ClrObjRam	; clear	the object RAM
000056C6                            
000056C6 43F8 F700                  		lea	(v_screenposx).w,a1
000056CA 7000                       		moveq	#0,d0
000056CC 323C 003F                  		move.w	#$3F,d1
000056D0                            	SS_ClrRam1:
000056D0 22C0                       		move.l	d0,(a1)+
000056D2 51C9 FFFC                  		dbf	d1,SS_ClrRam1	; clear	variables
000056D6                            
000056D6 43F8 FE60                  		lea	(v_oscillate+2).w,a1
000056DA 7000                       		moveq	#0,d0
000056DC 323C 0027                  		move.w	#$27,d1
000056E0                            	SS_ClrRam2:
000056E0 22C0                       		move.l	d0,(a1)+
000056E2 51C9 FFFC                  		dbf	d1,SS_ClrRam2	; clear	variables
000056E6                            
000056E6 43F8 AA00                  		lea	(v_ngfx_buffer).w,a1
000056EA 7000                       		moveq	#0,d0
000056EC 323C 007F                  		move.w	#$7F,d1
000056F0                            	SS_ClrNemRam:
000056F0 22C0                       		move.l	d0,(a1)+
000056F2 51C9 FFFC                  		dbf	d1,SS_ClrNemRam	; clear	Nemesis	buffer
000056F6                            
000056F6 4238 F64E                  		clr.b	(f_wtr_state).w
000056FA 4278 FE02                  		clr.w	(f_restart).w
000056FE 700A                       		moveq	#palid_Special,d0
00005700 6100 CD7A                  		bsr.w	PalLoad1	; load special stage palette
00005704 4EB9 0000 0000             		jsr	(SS_Load).l		; load SS layout data
0000570A 21FC 0000 0000 F700        		move.l	#0,(v_screenposx).w
00005712 21FC 0000 0000 F704        		move.l	#0,(v_screenposy).w
0000571A 11FC 0000 D000             		move.b	#id_SonicSpecial,(v_player).w ; load special stage Sonic object
00005720 6100 0000                  		bsr.w	PalCycle_SS
00005724 4278 F780                  		clr.w	(v_ssangle).w	; set stage angle to "upright"
00005728 31FC 0040 F782             		move.w	#$40,(v_ssrotate).w ; set stage rotation speed
00005736 31FC 0000 F790             		move.w	#0,(v_btnpushtime1).w
0000573C 43F9 0000 50EC             		lea	(DemoDataPtr).l,a1
00005742 7006                       		moveq	#6,d0
00005744 E548                       		lsl.w	#2,d0
00005746 2271 0000                  		movea.l	(a1,d0.w),a1
0000574A 11E9 0001 F792             		move.b	1(a1),(v_btnpushtime2).w
00005750 5338 F792                  		subq.b	#1,(v_btnpushtime2).w
00005754 4278 FE20                  		clr.w	(v_rings).w
00005758 4238 FE1B                  		clr.b	(v_lifecount).w
0000575C 31FC 0000 FE08             		move.w	#0,(v_debuguse).w
00005762 31FC 0708 F614             		move.w	#1800,(v_demolength).w
00005768 4A38 FFE2                  		tst.b	(f_debugcheat).w ; has debug cheat been entered?
0000576C 6700                       		beq.s	SS_NoDebug	; if not, branch
0000576E 0838 0006 F604             		btst	#bitA,(v_jpadhold1).w ; is A button pressed?
00005774 6700                       		beq.s	SS_NoDebug	; if not, branch
00005776 11FC 0001 FFFA             		move.b	#1,(f_debugmode).w ; enable debug mode
0000577C                            
0000577C                            	SS_NoDebug:
0000577C 3038 F60C                  		move.w	(v_vdp_buffer1).w,d0
00005780 0000 0040                  		ori.b	#$40,d0
00005784 33C0 00C0 0004             		move.w	d0,(vdp_control_port).l
0000578A 6100 CAC4                  		bsr.w	PaletteWhiteIn
0000578E                            
0000578E                            ; ---------------------------------------------------------------------------
0000578E                            ; Main Special Stage loop
0000578E                            ; ---------------------------------------------------------------------------
0000578E                            
0000578E                            SS_MainLoop:
0000578E 6100 BB1C                  		bsr.w	PauseGame
00005792 11FC 000A F62A             		move.b	#$A,(v_vbla_routine).w
00005798 6100 E2B6                  		bsr.w	WaitForVBla
0000579C 6100 F89E                  		bsr.w	MoveSonicInDemo
000057A0 31F8 F604 F602             		move.w	(v_jpadhold1).w,(v_jpadhold2).w
000057A6 4EB9 0000 0000             		jsr	(ExecuteObjects).l
000057AC 4EB9 0000 0000             		jsr	(BuildSprites).l
000057B2 4EB9 0000 0000             		jsr	(SS_ShowLayout).l
000057B8 6100 0000                  		bsr.w	SS_BGAnimate
000057BC 4A78 FFF0                  		tst.w	(f_demo).w	; is demo mode on?
000057C0 6700                       		beq.s	SS_ChkEnd	; if not, branch
000057C2 4A78 F614                  		tst.w	(v_demolength).w ; is there time left on the demo?
000057C6 6700 0000                  		beq.w	SS_ToSegaScreen	; if not, branch
000057CA                            
000057CA                            	SS_ChkEnd:
000057CA 0C38 0000 F600             		cmpi.b	#id_Special,(v_gamemode).w ; is game mode $10 (special stage)?
000057D0 6700 FFBC                  		beq.w	SS_MainLoop	; if yes, branch
000057D4                            
000057D4 4A78 FFF0                  		tst.w	(f_demo).w	; is demo mode on?
000057D8 6600 0000                  		bne.w	SS_ToLevel
000057DC 11FC 0000 F600             		move.b	#id_Level,(v_gamemode).w ; set screen mode to $0C (level)
000057E2 0C78 0503 FE10             		cmpi.w	#(id_SBZ<<8)+3,(v_zone).w ; is level number higher than FZ?
000057E8 6500                       		blo.s	SS_Finish	; if not, branch
000057EA 4278 FE10                  		clr.w	(v_zone).w	; set to GHZ1
000057EE                            
000057EE                            SS_Finish:
000057EE 31FC 003C F614             		move.w	#60,(v_demolength).w ; set delay time to 1 second
000057F4 31FC 003F F626             		move.w	#$3F,(v_pfade_start).w
000057FA 4278 F794                  		clr.w	(v_palchgspeed).w
000057FE                            
000057FE                            	SS_FinLoop:
000057FE 11FC 0016 F62A             		move.b	#$16,(v_vbla_routine).w
00005804 6100 E24A                  		bsr.w	WaitForVBla
00005808 6100 F832                  		bsr.w	MoveSonicInDemo
0000580C 31F8 F604 F602             		move.w	(v_jpadhold1).w,(v_jpadhold2).w
00005812 4EB9 0000 0000             		jsr	(ExecuteObjects).l
00005818 4EB9 0000 0000             		jsr	(BuildSprites).l
0000581E 4EB9 0000 0000             		jsr	(SS_ShowLayout).l
00005824 6100 0000                  		bsr.w	SS_BGAnimate
00005828 5378 F794                  		subq.w	#1,(v_palchgspeed).w
0000582C 6A00                       		bpl.s	loc_47D4
0000582E 31FC 0002 F794             		move.w	#2,(v_palchgspeed).w
00005834 6100 CAE6                  		bsr.w	WhiteOut_ToWhite
00005838                            
00005838                            loc_47D4:
00005838 4A78 F614                  		tst.w	(v_demolength).w
0000583C 66C0                       		bne.s	SS_FinLoop
0000583E                            
0000583E 46FC 2700                  		disable_ints
00005842 4DF9 00C0 0004             		lea	(vdp_control_port).l,a6
00005848 3CBC 8230                  		move.w	#$8200+(vram_fg>>10),(a6) ; set foreground nametable address
0000584C 3CBC 8407                  		move.w	#$8400+(vram_bg>>13),(a6) ; set background nametable address
00005850 3CBC 9001                  		move.w	#$9001,(a6)		; 64-cell hscroll size
00005854 6100 B97A                  		bsr.w	ClearScreen
00005862 41F9 0000 0000             		lea	(Nem_TitleCard).l,a0 ; load title card patterns
00005868 6100 BAE4                  		bsr.w	NemDec
0000586C 4EB9 0000 0000             		jsr	(Hud_Base).l
00005872 31FC C800 C8FC             		ResetDMAQueue	
00005878 46FC 2300                  		enable_ints
0000587C 7011                       		moveq	#palid_SSResult,d0
0000587E 6100 CC38                  		bsr.w	PalLoad2	; load results screen palette
00005882 7000                       		moveq	#plcid_Main,d0
00005884 6100 BEE6                  		bsr.w	NewPLC
00005888 7000                       		moveq	#plcid_SSResult,d0
0000588A 6100 BEAE                  		bsr.w	AddPLC		; load results screen patterns
0000588E 11FC 0001 FE1F             		move.b	#1,(f_scorecount).w ; update score counter
00005894 11FC 0001 F7D6             		move.b	#1,(f_endactbonus).w ; update ring bonus counter
0000589A 3038 FE20                  		move.w	(v_rings).w,d0
0000589E C0FC 000A                  		mulu.w	#10,d0		; multiply rings by 10
000058A2 31C0 F7D4                  		move.w	d0,(v_ringbonus).w ; set rings bonus
000058B0                            
000058B0 43F8 D000                  		lea	(v_objspace).w,a1
000058B4 7000                       		moveq	#0,d0
000058B6 323C 07FF                  		move.w	#$7FF,d1
000058BA                            	SS_EndClrObjRam:
000058BA 22C0                       		move.l	d0,(a1)+
000058BC 51C9 FFFC                  		dbf	d1,SS_EndClrObjRam ; clear object RAM
000058C0                            
000058C0 11FC 0000 D5C0             		move.b	#id_SSResult,(v_objspace+$5C0).w ; load results screen object
000058C6                            
000058C6                            SS_NormalExit:
000058C6 6100 B9E4                  		bsr.w	PauseGame
000058CA 11FC 000C F62A             		move.b	#$C,(v_vbla_routine).w
000058D0 6100 E17E                  		bsr.w	WaitForVBla
000058D4 4EB9 0000 0000             		jsr	(ExecuteObjects).l
000058DA 4EB9 0000 0000             		jsr	(BuildSprites).l
000058E0 6100 BEC4                  		bsr.w	RunPLC
000058E4 4A78 FE02                  		tst.w	(f_restart).w
000058E8 67DC                       		beq.s	SS_NormalExit
000058EA 4AB8 F680                  		tst.l	(v_plc_buffer).w
000058EE 66D6                       		bne.s	SS_NormalExit
000058F8 6100 CA02                  		bsr.w	PaletteWhiteOut
000058FC 4E75                       		rts	
000058FE                            ; ===========================================================================
000058FE                            
000058FE                            SS_ToSegaScreen:
000058FE 11FC 0000 F600             		move.b	#id_Sega,(v_gamemode).w ; goto Sega screen
00005904 4E75                       		rts
00005906                            
00005906 0C38 0000 F600             SS_ToLevel:	cmpi.b	#id_Level,(v_gamemode).w
0000590C 67F0                       		beq.s	SS_ToSegaScreen
0000590E 4E75                       		rts
00005910                            
00005910                            ; ---------------------------------------------------------------------------
00005910                            ; Special stage	background loading subroutine
00005910                            ; ---------------------------------------------------------------------------
00005910                            
00005910                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00005910                            
00005910                            
00005910                            SS_BGLoad:
00005910 43F9 00FF 0000             		lea	($FF0000).l,a1
00005916 41F9 0000 0000             		lea	(Eni_SSBg1).l,a0 ; load	mappings for the birds and fish
0000591C 303C 4051                  		move.w	#$4051,d0
00005920 6100 BFB6                  		bsr.w	EniDec
00005924 263C 5000 0001             		move.l	#$50000001,d3
0000592A 45F9 00FF 0080             		lea	($FF0080).l,a2
00005930 7E06                       		moveq	#6,d7
00005932                            
00005932                            loc_48BE:
00005932 2003                       		move.l	d3,d0
00005934 7C03                       		moveq	#3,d6
00005936 7800                       		moveq	#0,d4
00005938 0C47 0003                  		cmpi.w	#3,d7
0000593C 6400                       		bhs.s	loc_48CC
0000593E 7801                       		moveq	#1,d4
00005940                            
00005940                            loc_48CC:
00005940 7A07                       		moveq	#7,d5
00005942                            
00005942                            loc_48CE:
00005942 224A                       		movea.l	a2,a1
00005944 0A04 0001                  		eori.b	#1,d4
00005948 6600                       		bne.s	loc_48E2
0000594A 0C47 0006                  		cmpi.w	#6,d7
0000594E 6600                       		bne.s	loc_48F2
00005950 43F9 00FF 0000             		lea	($FF0000).l,a1
00005956                            
00005956                            loc_48E2:
00005956 48E7 F800                  		movem.l	d0-d4,-(sp)
0000595A 7207                       		moveq	#7,d1
0000595C 7407                       		moveq	#7,d2
0000595E 6100 B9C4                  		bsr.w	TilemapToVRAM
00005962 4CDF 001F                  		movem.l	(sp)+,d0-d4
00005966                            
00005966                            loc_48F2:
00005966 0680 0010 0000             		addi.l	#$100000,d0
0000596C 51CD FFD4                  		dbf	d5,loc_48CE
00005970 0680 0380 0000             		addi.l	#$3800000,d0
00005976 0A04 0001                  		eori.b	#1,d4
0000597A 51CE FFC4                  		dbf	d6,loc_48CC
0000597E 0683 1000 0000             		addi.l	#$10000000,d3
00005984 6A00                       		bpl.s	loc_491C
00005986 4843                       		swap	d3
00005988 0683 0000 C000             		addi.l	#$C000,d3
0000598E 4843                       		swap	d3
00005990                            
00005990                            loc_491C:
00005990 D4FC 0080                  		adda.w	#$80,a2
00005994 51CF FF9C                  		dbf	d7,loc_48BE
00005998 43F9 00FF 0000             		lea	($FF0000).l,a1
0000599E 41F9 0000 0000             		lea	(Eni_SSBg2).l,a0 ; load	mappings for the clouds
000059A4 303C 4000                  		move.w	#$4000,d0
000059A8 6100 BF2E                  		bsr.w	EniDec
000059AC 43F9 00FF 0000             		lea	($FF0000).l,a1
000059B2 203C 4000 0003             		move.l	#$40000003,d0
000059B8 723F                       		moveq	#$3F,d1
000059BA 741F                       		moveq	#$1F,d2
000059BC 6100 B966                  		bsr.w	TilemapToVRAM
000059C0 43F9 00FF 0000             		lea	($FF0000).l,a1
000059C6 203C 5000 0003             		move.l	#$50000003,d0
000059CC 723F                       		moveq	#$3F,d1
000059CE 743F                       		moveq	#$3F,d2
000059D0 6100 B952                  		bsr.w	TilemapToVRAM
000059D4 4E75                       		rts	
000059D6                            ; End of function SS_BGLoad
000059D6                            
000059D6                            ; ---------------------------------------------------------------------------
000059D6                            ; Palette cycling routine - special stage
000059D6                            ; ---------------------------------------------------------------------------
000059D6                            
000059D6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000059D6                            
000059D6                            
000059D6                            PalCycle_SS:
000059D6 4A78 F63A                  		tst.w	(f_pause).w
000059DA 6600                       		bne.s	locret_49E6
000059DC 5378 F79C                  		subq.w	#1,(v_palss_time).w
000059E0 6A00                       		bpl.s	locret_49E6
000059E2 4DF9 00C0 0004             		lea	(vdp_control_port).l,a6
000059E8 3038 F79A                  		move.w	(v_palss_num).w,d0
000059EC 5278 F79A                  		addq.w	#1,(v_palss_num).w
000059F0 0240 001F                  		andi.w	#$1F,d0
000059F4 E548                       		lsl.w	#2,d0
000059F6 41F9 0000 0000             		lea	(byte_4A3C).l,a0
000059FC D0C0                       		adda.w	d0,a0
000059FE 1018                       		move.b	(a0)+,d0
00005A00 6A00                       		bpl.s	loc_4992
00005A02 303C 01FF                  		move.w	#$1FF,d0
00005A06                            
00005A06                            loc_4992:
00005A06 31C0 F79C                  		move.w	d0,(v_palss_time).w
00005A0A 7000                       		moveq	#0,d0
00005A0C 1018                       		move.b	(a0)+,d0
00005A0E 31C0 F7A0                  		move.w	d0,($FFFFF7A0).w
00005A12 43F9 0000 0000             		lea	(byte_4ABC).l,a1
00005A18 43F1 0000                  		lea	(a1,d0.w),a1
00005A1C 303C 8200                  		move.w	#-$7E00,d0
00005A20 1019                       		move.b	(a1)+,d0
00005A22 3C80                       		move.w	d0,(a6)
00005A24 11D1 F616                  		move.b	(a1),(v_scrposy_dup).w
00005A28 303C 8400                  		move.w	#-$7C00,d0
00005A2C 1018                       		move.b	(a0)+,d0
00005A2E 3C80                       		move.w	d0,(a6)
00005A30 23FC 4000 0010 00C0 0004   		move.l	#$40000010,(vdp_control_port).l
00005A3A 23F8 F616 00C0 0000        		move.l	(v_scrposy_dup).w,(vdp_data_port).l
00005A42 7000                       		moveq	#0,d0
00005A44 1018                       		move.b	(a0)+,d0
00005A46 6B00                       		bmi.s	loc_49E8
00005A48 43F9 0000 0000             		lea	(Pal_SSCyc1).l,a1
00005A4E D2C0                       		adda.w	d0,a1
00005A50 45F8 FB4E                  		lea	(v_pal_dry+$4E).w,a2
00005A54 24D9                       		move.l	(a1)+,(a2)+
00005A56 24D9                       		move.l	(a1)+,(a2)+
00005A58 24D9                       		move.l	(a1)+,(a2)+
00005A5A                            
00005A5A                            locret_49E6:
00005A5A 4E75                       		rts	
00005A5C                            ; ===========================================================================
00005A5C                            
00005A5C                            loc_49E8:
00005A5C 3238 F79E                  		move.w	($FFFFF79E).w,d1
00005A60 0C40 008A                  		cmpi.w	#$8A,d0
00005A64 6500                       		blo.s	loc_49F4
00005A66 5241                       		addq.w	#1,d1
00005A68                            
00005A68                            loc_49F4:
00005A68 C2FC 002A                  		mulu.w	#$2A,d1
00005A6C 43F9 0000 0000             		lea	(Pal_SSCyc2).l,a1
00005A72 D2C1                       		adda.w	d1,a1
00005A74 0240 007F                  		andi.w	#$7F,d0
00005A78 0880 0000                  		bclr	#0,d0
00005A7C 6700                       		beq.s	loc_4A18
00005A7E 45F8 FB6E                  		lea	(v_pal_dry+$6E).w,a2
00005A82 24D1                       		move.l	(a1),(a2)+
00005A84 24E9 0004                  		move.l	4(a1),(a2)+
00005A88 24E9 0008                  		move.l	8(a1),(a2)+
00005A8C                            
00005A8C                            loc_4A18:
00005A8C D2FC 000C                  		adda.w	#$C,a1
00005A90 45F8 FB5A                  		lea	(v_pal_dry+$5A).w,a2
00005A94 0C40 000A                  		cmpi.w	#$A,d0
00005A98 6500                       		blo.s	loc_4A2E
00005A9A 0440 000A                  		subi.w	#$A,d0
00005A9E 45F8 FB7A                  		lea	(v_pal_dry+$7A).w,a2
00005AA2                            
00005AA2                            loc_4A2E:
00005AA2 3200                       		move.w	d0,d1
00005AA4 D040                       		add.w	d0,d0
00005AA6 D041                       		add.w	d1,d0
00005AA8 D2C0                       		adda.w	d0,a1
00005AAA 24D9                       		move.l	(a1)+,(a2)+
00005AAC 34D9                       		move.w	(a1)+,(a2)+
00005AAE 4E75                       		rts	
00005AB0                            ; End of function PalCycle_SS
00005AB0                            
00005AB0                            ; ===========================================================================
00005AB0 0300 0792 0300 0790 0300+  byte_4A3C:	dc.b 3,	0, 7, $92, 3, 0, 7, $90, 3, 0, 7, $8E, 3, 0, 7,	$8C
00005AC0                            
00005AC0 0300 078B 0300 0780 0300+  		dc.b 3,	0, 7, $8B, 3, 0, 7, $80, 3, 0, 7, $82, 3, 0, 7,	$84
00005AD0 0300 0786 0300 0788 0708+  		dc.b 3,	0, 7, $86, 3, 0, 7, $88, 7, 8, 7, 0, 7,	$A, 7, $C
00005AE0 FF0C 0718 FF0C 0718 070A+  		dc.b $FF, $C, 7, $18, $FF, $C, 7, $18, 7, $A, 7, $C, 7,	8, 7, 0
00005AF0 0300 0688 0300 0686 0300+  		dc.b 3,	0, 6, $88, 3, 0, 6, $86, 3, 0, 6, $84, 3, 0, 6,	$82
00005B00 0300 0681 0300 068A 0300+  		dc.b 3,	0, 6, $81, 3, 0, 6, $8A, 3, 0, 6, $8C, 3, 0, 6,	$8E
00005B10 0300 0690 0300 0692 0702+  		dc.b 3,	0, 6, $90, 3, 0, 6, $92, 7, 2, 6, $24, 7, 4, 6,	$30
00005B20 FF06 063C FF06 063C 0704+  		dc.b $FF, 6, 6,	$3C, $FF, 6, 6,	$3C, 7,	4, 6, $30, 7, 2, 6, $24
00005B30                            		even
00005B30 1001 1800 1801 2000 2001+  byte_4ABC:	dc.b $10, 1, $18, 0, $18, 1, $20, 0, $20, 1, $28, 0, $28, 1
00005B3E                            		even
00005B3E                            
00005B3E                            Pal_SSCyc1:	incbin	"palette\Cycle - Special Stage 1.bin"
00005B86                            		even
00005B86                            Pal_SSCyc2:	incbin	"palette\Cycle - Special Stage 2.bin"
00005C58                            		even
00005C58                            
00005C58                            ; ---------------------------------------------------------------------------
00005C58                            ; Subroutine to	make the special stage background animated
00005C58                            ; ---------------------------------------------------------------------------
00005C58                            
00005C58                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00005C58                            
00005C58                            
00005C58                            SS_BGAnimate:
00005C58 3038 F7A0                  		move.w	($FFFFF7A0).w,d0
00005C5C 6600                       		bne.s	loc_4BF6
00005C5E 31FC 0000 F70C             		move.w	#0,(v_bgscreenposy).w
00005C64 31F8 F70C F618             		move.w	(v_bgscreenposy).w,(v_bgscrposy_dup).w
00005C6A                            
00005C6A                            loc_4BF6:
00005C6A 0C40 0008                  		cmpi.w	#8,d0
00005C6E 6400                       		bhs.s	loc_4C4E
00005C70 0C40 0006                  		cmpi.w	#6,d0
00005C74 6600                       		bne.s	loc_4C10
00005C76 5278 F718                  		addq.w	#1,(v_bg3screenposx).w
00005C7A 5278 F70C                  		addq.w	#1,(v_bgscreenposy).w
00005C7E 31F8 F70C F618             		move.w	(v_bgscreenposy).w,(v_bgscrposy_dup).w
00005C84                            
00005C84                            loc_4C10:
00005C84 7000                       		moveq	#0,d0
00005C86 3038 F708                  		move.w	(v_bgscreenposx).w,d0
00005C8A 4440                       		neg.w	d0
00005C8C 4840                       		swap	d0
00005C8E 43F9 0000 0000             		lea	(byte_4CCC).l,a1
00005C94 47F8 AA00                  		lea	(v_ngfx_buffer).w,a3
00005C98 7609                       		moveq	#9,d3
00005C9A                            
00005C9A                            loc_4C26:
00005C9A 302B 0002                  		move.w	2(a3),d0
00005C9E 6100 DDE2                  		bsr.w	CalcSine
00005CA2 7400                       		moveq	#0,d2
00005CA4 1419                       		move.b	(a1)+,d2
00005CA6 C1C2                       		muls.w	d2,d0
00005CA8 E080                       		asr.l	#8,d0
00005CAA 36C0                       		move.w	d0,(a3)+
00005CAC 1419                       		move.b	(a1)+,d2
00005CAE 4882                       		ext.w	d2
00005CB0 D55B                       		add.w	d2,(a3)+
00005CB2 51CB FFE6                  		dbf	d3,loc_4C26
00005CB6 47F8 AA00                  		lea	(v_ngfx_buffer).w,a3
00005CBA 45F9 0000 0000             		lea	(byte_4CB8).l,a2
00005CC0 6000                       		bra.s	loc_4C7E
00005CC2                            ; ===========================================================================
00005CC2                            
00005CC2                            loc_4C4E:
00005CC2 0C40 000C                  		cmpi.w	#$C,d0
00005CC6 6600                       		bne.s	loc_4C74
00005CC8 5378 F718                  		subq.w	#1,(v_bg3screenposx).w
00005CCC 47F8 AB00                  		lea	($FFFFAB00).w,a3
00005CD0 243C 0001 8000             		move.l	#$18000,d2
00005CD6 7206                       		moveq	#6,d1
00005CD8                            
00005CD8                            loc_4C64:
00005CD8 2013                       		move.l	(a3),d0
00005CDA 9082                       		sub.l	d2,d0
00005CDC 26C0                       		move.l	d0,(a3)+
00005CDE 0482 0000 2000             		subi.l	#$2000,d2
00005CE4 51C9 FFF2                  		dbf	d1,loc_4C64
00005CE8                            
00005CE8                            loc_4C74:
00005CE8 47F8 AB00                  		lea	($FFFFAB00).w,a3
00005CEC 45F9 0000 0000             		lea	(byte_4CC4).l,a2
00005CF2                            
00005CF2                            loc_4C7E:
00005CF2 43F8 CC00                  		lea	(v_hscrolltablebuffer).w,a1
00005CF6 3038 F718                  		move.w	(v_bg3screenposx).w,d0
00005CFA 4440                       		neg.w	d0
00005CFC 4840                       		swap	d0
00005CFE 7600                       		moveq	#0,d3
00005D00 161A                       		move.b	(a2)+,d3
00005D02 3438 F70C                  		move.w	(v_bgscreenposy).w,d2
00005D06 4442                       		neg.w	d2
00005D08 0242 00FF                  		andi.w	#$FF,d2
00005D0C E54A                       		lsl.w	#2,d2
00005D0E                            
00005D0E                            loc_4C9A:
00005D0E 301B                       		move.w	(a3)+,d0
00005D10 544B                       		addq.w	#2,a3
00005D12 7200                       		moveq	#0,d1
00005D14 121A                       		move.b	(a2)+,d1
00005D16 5341                       		subq.w	#1,d1
00005D18                            
00005D18                            loc_4CA4:
00005D18 2380 2000                  		move.l	d0,(a1,d2.w)
00005D1C 5842                       		addq.w	#4,d2
00005D1E 0242 03FC                  		andi.w	#$3FC,d2
00005D22 51C9 FFF4                  		dbf	d1,loc_4CA4
00005D26 51CB FFE6                  		dbf	d3,loc_4C9A
00005D2A 4E75                       		rts	
00005D2C                            ; End of function SS_BGAnimate
00005D2C                            
00005D2C                            ; ===========================================================================
00005D2C 0928 1810 2818 1030 1808+  byte_4CB8:	dc.b 9,	$28, $18, $10, $28, $18, $10, $30, $18,	8, $10,	0
00005D38                            		even
00005D38 0630 3030 2818 1818        byte_4CC4:	dc.b 6,	$30, $30, $30, $28, $18, $18, $18
00005D40                            		even
00005D40 0802 04FF 0203 08FF 0402+  byte_4CCC:	dc.b 8,	2, 4, $FF, 2, 3, 8, $FF, 4, 2, 2, 3, 8,	$FD, 4,	2, 2, 3, 2, $FF
00005D54                            		even
00005D54                            
00005D54                            ; ===========================================================================
00005D54                            
00005D54                            ; ---------------------------------------------------------------------------
00005D54                            ; Continue screen
00005D54                            ; ---------------------------------------------------------------------------
00005D54                            
00005D54                            GM_Continue:
00005D54 6100 C47C                  		bsr.w	PaletteFadeOut
00005D58 46FC 2700                  		disable_ints
00005D5C 3038 F60C                  		move.w	(v_vdp_buffer1).w,d0
00005D60 0200 00BF                  		andi.b	#$BF,d0
00005D64 33C0 00C0 0004             		move.w	d0,(vdp_control_port).l
00005D6A 4DF9 00C0 0004             		lea	(vdp_control_port).l,a6
00005D70 3CBC 8004                  		move.w	#$8004,(a6)	; 8 colour mode
00005D74 3CBC 8700                  		move.w	#$8700,(a6)	; background colour
00005D78 6100 B456                  		bsr.w	ClearScreen
00005D7C 31FC C800 C8FC             		ResetDMAQueue
00005D82 43F8 D000                  		lea	(v_objspace).w,a1
00005D86 7000                       		moveq	#0,d0
00005D88 323C 07FF                  		move.w	#$7FF,d1
00005D8C                            	Cont_ClrObjRam:
00005D8C 22C0                       		move.l	d0,(a1)+
00005D8E 51C9 FFFC                  		dbf	d1,Cont_ClrObjRam ; clear object RAM
00005D92                            
00005D9C 41F9 0000 0000             		lea	(Nem_TitleCard).l,a0 ; load title card patterns
00005DA2 6100 B5AA                  		bsr.w	NemDec
00005DB0 41F9 0000 0000             		lea	(Nem_ContSonic).l,a0 ; load Sonic patterns
00005DB6 6100 B596                  		bsr.w	NemDec
00005DC4 41F9 0000 0000             		lea	(Nem_MiniSonic).l,a0 ; load continue screen patterns
00005DCA 6100 B582                  		bsr.w	NemDec
00005DCE 720A                       		moveq	#10,d1
00005DD0 4EB9 0000 0000             		jsr	(ContScrCounter).l	; run countdown	(start from 10)
00005DD6 7012                       		moveq	#palid_Continue,d0
00005DD8 6100 C6A2                  		bsr.w	PalLoad1	; load continue	screen palette
00005DE4 31FC 0293 F614             		move.w	#659,(v_demolength).w ; set time delay to 11 seconds
00005DEA 42B8 F700                  		clr.l	(v_screenposx).w
00005DEE 21FC 0100 0000 F704        		move.l	#$1000000,(v_screenposy).w
00005DF6 11FC 0000 D000             		move.b	#id_ContSonic,(v_player).w ; load Sonic object
00005DFC 11FC 0000 D040             		move.b	#id_ContScrItem,(v_objspace+$40).w ; load continue screen objects
00005E02 11FC 0000 D080             		move.b	#id_ContScrItem,(v_objspace+$80).w
00005E08 11FC 0003 D098             		move.b	#3,(v_objspace+$80+obPriority).w
00005E0E 11FC 0004 D09A             		move.b	#4,(v_objspace+$80+obFrame).w
00005E14 11FC 0000 D0C0             		move.b	#id_ContScrItem,(v_objspace+$C0).w
00005E1A 11FC 0004 D0E4             		move.b	#4,(v_objspace+$C0+obRoutine).w
00005E20 4EB9 0000 0000             		jsr	(ExecuteObjects).l
00005E26 4EB9 0000 0000             		jsr	(BuildSprites).l
00005E2C 3038 F60C                  		move.w	(v_vdp_buffer1).w,d0
00005E30 0000 0040                  		ori.b	#$40,d0
00005E34 33C0 00C0 0004             		move.w	d0,(vdp_control_port).l
00005E3A 6100 C2F0                  		bsr.w	PaletteFadeIn
00005E3E                            
00005E3E                            ; ---------------------------------------------------------------------------
00005E3E                            ; Continue screen main loop
00005E3E                            ; ---------------------------------------------------------------------------
00005E3E                            
00005E3E                            Cont_MainLoop:
00005E3E 11FC 0016 F62A             		move.b	#$16,(v_vbla_routine).w
00005E44 6100 DC0A                  		bsr.w	WaitForVBla
00005E48 0C38 0006 D024             		cmpi.b	#6,(v_player+obRoutine).w
00005E4E 6400                       		bhs.s	loc_4DF2
00005E50 46FC 2700                  		disable_ints
00005E54 3238 F614                  		move.w	(v_demolength).w,d1
00005E58 82FC 003C                  		divu.w	#$3C,d1
00005E5C 0281 0000 000F             		andi.l	#$F,d1
00005E62 4EB9 0000 0000             		jsr	(ContScrCounter).l
00005E68 46FC 2300                  		enable_ints
00005E6C                            
00005E6C                            loc_4DF2:
00005E6C 4EB9 0000 0000             		jsr	(ExecuteObjects).l
00005E72 4EB9 0000 0000             		jsr	(BuildSprites).l
00005E78 0C78 0180 D008             		cmpi.w	#$180,(v_player+obX).w ; has Sonic run off screen?
00005E7E 6400                       		bhs.s	Cont_GotoLevel	; if yes, branch
00005E80 0C38 0006 D024             		cmpi.b	#6,(v_player+obRoutine).w
00005E86 64B6                       		bhs.s	Cont_MainLoop
00005E88 4A78 F614                  		tst.w	(v_demolength).w
00005E8C 6600 FFB0                  		bne.w	Cont_MainLoop
00005E90 11FC 0000 F600             		move.b	#id_Sega,(v_gamemode).w ; go to Sega screen
00005E96 4E75                       		rts	
00005E98                            ; ===========================================================================
00005E98                            
00005E98                            Cont_GotoLevel:
00005E98 11FC 0000 F600             		move.b	#id_Level,(v_gamemode).w ; set screen mode to $0C (level)
00005E9E 11FC 0003 FE12             		move.b	#3,(v_lives).w	; set lives to 3
00005EA4 7000                       		moveq	#0,d0
00005EA6 31C0 FE20                  		move.w	d0,(v_rings).w	; clear rings
00005EAA 21C0 FE22                  		move.l	d0,(v_time).w	; clear time
00005EAE 21C0 FE26                  		move.l	d0,(v_score).w	; clear score
00005EB2 11C0 FE30                  		move.b	d0,(v_lastlamp).w ; clear lamppost count
00005EB6 5338 FE18                  		subq.b	#1,(v_continues).w ; subtract 1 from continues
00005EBA 4E75                       		rts	
00005EBC                            ; ===========================================================================
00005EBC                            
00005EBC                            		include	"_incObj\80 Continue Screen Elements.asm"
00005EBC                            ; ---------------------------------------------------------------------------
00005EBC                            ; Object 80 - Continue screen elements
00005EBC                            ; ---------------------------------------------------------------------------
00005EBC                            
00005EBC                            ContScrItem:
00005EBC 7000                       		moveq	#0,d0
00005EBE 1028 0024                  		move.b	$24(a0),d0
00005EC2 323B 0000                  		move.w	CSI_Index(pc,d0.w),d1
00005EC6 4EFB 1000                  		jmp	CSI_Index(pc,d1.w)
00005ECA                            ; ===========================================================================
00005ECA 0000                       CSI_Index:	dc.w CSI_Main-CSI_Index
00005ECC 0000                       		dc.w CSI_Display-CSI_Index
00005ECE 0000                       		dc.w CSI_MakeMiniSonic-CSI_Index
00005ED0 0000                       		dc.w CSI_ChkDel-CSI_Index
00005ED2                            ; ===========================================================================
00005ED2                            
00005ED2                            CSI_Main:	; Routine 0
00005ED2 5428 0024                  		addq.b	#2,obRoutine(a0)
00005ED6 217C 0000 0000 0004        		move.l	#Map_ContScr,obMap(a0)
00005EDE 317C 8500 0002             		move.w	#$8500,obGfx(a0)
00005EE4 117C 0000 0001             		move.b	#0,obRender(a0)
00005EEA 117C 003C 0014             		move.b	#$3C,obActWid(a0)
00005EF0 317C 0120 0008             		move.w	#$120,obX(a0)
00005EF6 317C 00C0 000A             		move.w	#$C0,obScreenY(a0)
00005EFC 31FC 0000 FE20             		move.w	#0,(v_rings).w	; clear rings
00005F02                            
00005F02                            CSI_Display:	; Routine 2
00005F02 4EF9 0000 0000             		jmp	(DisplaySprite).l
00005F08                            ; ===========================================================================
00005F08                            
00005F08                            	CSI_MiniSonicPos:
00005F08 0116 012A 0102 013E 00EE+  		dc.w $116, $12A, $102, $13E, $EE, $152, $DA, $166, $C6
00005F1A 017A 00B2 018E 009E 01A2+  		dc.w $17A, $B2,	$18E, $9E, $1A2, $8A
00005F26                            
00005F26                            CSI_MakeMiniSonic:
00005F26                            		; Routine 4
00005F26 2248                       		movea.l	a0,a1
00005F28 45F9 0000 5F08             		lea	(CSI_MiniSonicPos).l,a2
00005F2E 7200                       		moveq	#0,d1
00005F30 1238 FE18                  		move.b	(v_continues).w,d1
00005F34 5501                       		subq.b	#2,d1
00005F36 6400                       		bcc.s	CSI_MoreThan1
00005F38 4EF9 0000 0000             		jmp	(DeleteObject).l	; cancel if you have 0-1 continues
00005F3E                            
00005F3E                            	CSI_MoreThan1:
00005F3E 7601                       		moveq	#1,d3
00005F40 0C01 000E                  		cmpi.b	#14,d1		; do you have fewer than 16 continues
00005F44 6500                       		bcs.s	CSI_FewerThan16	; if yes, branch
00005F46                            
00005F46 7600                       		moveq	#0,d3
00005F48 720E                       		moveq	#14,d1		; cap at 15 mini-Sonics
00005F4A                            
00005F4A                            	CSI_FewerThan16:
00005F4A 1401                       		move.b	d1,d2
00005F4C 0202 0001                  		andi.b	#1,d2
00005F50                            
00005F50                            CSI_MiniSonicLoop:
00005F50 12BC 0000                  		move.b	#id_ContScrItem,0(a1) ; load mini-Sonic object
00005F54 335A 0008                  		move.w	(a2)+,obX(a1)	; use above data for x-axis position
00005F58 4A02                       		tst.b	d2		; do you have an even number of continues?
00005F5A 6700                       		beq.s	CSI_Even	; if yes, branch
00005F5C 0469 000A 0008             		subi.w	#$A,obX(a1)	; shift mini-Sonics slightly to the right
00005F62                            
00005F62                            	CSI_Even:
00005F62 337C 00D0 000A             		move.w	#$D0,obScreenY(a1)
00005F68 137C 0006 001A             		move.b	#6,obFrame(a1)
00005F6E 137C 0006 0024             		move.b	#6,obRoutine(a1)
00005F74 237C 0000 0000 0004        		move.l	#Map_ContScr,obMap(a1)
00005F7C 337C 8551 0002             		move.w	#$8551,obGfx(a1)
00005F82 137C 0000 0001             		move.b	#0,obRender(a1)
00005F88 43E9 0040                  		lea	$40(a1),a1
00005F8C 51C9 FFC2                  		dbf	d1,CSI_MiniSonicLoop ; repeat for number of continues
00005F90                            
00005F90 43E9 FFC0                  		lea	-$40(a1),a1
00005F94 1343 0028                  		move.b	d3,obSubtype(a1)
00005F98                            
00005F98                            CSI_ChkDel:	; Routine 6
00005F98 4A28 0028                  		tst.b	obSubtype(a0)	; do you have 16 or more continues?
00005F9C 6700                       		beq.s	CSI_Animate	; if yes, branch
00005F9E 0C38 0006 D024             		cmpi.b	#6,(v_player+obRoutine).w ; is Sonic running?
00005FA4 6500                       		bcs.s	CSI_Animate	; if not, branch
00005FA6 1038 FE0F                  		move.b	(v_vbla_byte).w,d0
00005FAA 0200 0001                  		andi.b	#1,d0
00005FAE 6600                       		bne.s	CSI_Animate
00005FB0 4A78 D010                  		tst.w	(v_player+obVelX).w ; is Sonic running?
00005FB4 6600                       		bne.s	CSI_Delete	; if yes, goto delete
00005FB6 4E75                       		rts	
00005FB8                            
00005FB8                            CSI_Animate:
00005FB8 1038 FE0F                  		move.b	(v_vbla_byte).w,d0
00005FBC 0200 000F                  		andi.b	#$F,d0
00005FC0 6600                       		bne.s	CSI_Display2
00005FC2 0868 0000 001A             		bchg	#0,obFrame(a0)
00005FC8                            
00005FC8                            	CSI_Display2:
00005FC8 4EF9 0000 0000             		jmp	(DisplaySprite).l
00005FCE                            ; ===========================================================================
00005FCE                            
00005FCE                            CSI_Delete:
00005FCE 4EF9 0000 0000             		jmp	(DeleteObject).l
00005FCE 4EF9 0000 0000             		jmp	(DeleteObject).l
00005FD4                            		include	"_incObj\81 Continue Screen Sonic.asm"
00005FD4                            ; ---------------------------------------------------------------------------
00005FD4                            ; Object 81 - Sonic on the continue screen
00005FD4                            ; ---------------------------------------------------------------------------
00005FD4                            
00005FD4                            ContSonic:
00005FD4 7000                       		moveq	#0,d0
00005FD6 1028 0024                  		move.b	obRoutine(a0),d0
00005FDA 323B 0000                  		move.w	CSon_Index(pc,d0.w),d1
00005FDE 4EBB 1000                  		jsr	CSon_Index(pc,d1.w)
00005FE2 4EF9 0000 0000             		jmp	(DisplaySprite).l
00005FE8                            ; ===========================================================================
00005FE8 0000                       CSon_Index:	dc.w CSon_Main-CSon_Index
00005FEA 0000                       		dc.w CSon_ChkLand-CSon_Index
00005FEC 0000                       		dc.w CSon_Animate-CSon_Index
00005FEE 0000                       		dc.w CSon_Run-CSon_Index
00005FF0                            ; ===========================================================================
00005FF0                            
00005FF0                            CSon_Main:	; Routine 0
00005FF0 5428 0024                  		addq.b	#2,obRoutine(a0)
00005FF4 317C 00A0 0008             		move.w	#$A0,obX(a0)
00005FFA 317C 00C0 000C             		move.w	#$C0,obY(a0)
00006000 217C 0000 0000 0004        		move.l	#Map_Sonic,obMap(a0)
00006008 317C 0780 0002             		move.w	#$780,obGfx(a0)
0000600E 117C 0004 0001             		move.b	#4,obRender(a0)
00006014 317C 0100 0018             		move.w	#$100,obPriority(a0)
0000601A 117C 0000 001C             		move.b	#id_Float3,obAnim(a0) ; use "floating" animation
00006020 317C 0400 0012             		move.w	#$400,obVelY(a0) ; make Sonic fall from above
00006026                            
00006026                            CSon_ChkLand:	; Routine 2
00006026 0C68 01A0 000C             		cmpi.w	#$1A0,obY(a0)	; has Sonic landed yet?
0000602C 6600                       		bne.s	CSon_ShowFall	; if not, branch
0000602E                            
0000602E 5428 0024                  		addq.b	#2,obRoutine(a0)
00006032 4268 0012                  		clr.w	obVelY(a0)	; stop Sonic falling
00006036 217C 0000 0000 0004        		move.l	#Map_ContScr,obMap(a0)
0000603E 317C 8500 0002             		move.w	#$8500,obGfx(a0)
00006044 117C 0000 001C             		move.b	#id_Walk,obAnim(a0)
0000604A 6000                       		bra.s	CSon_Animate
0000604C                            
0000604C                            CSon_ShowFall:
0000604C 4EB9 0000 0000             		jsr	(SpeedToPos).l
00006052 4EB9 0000 0000             		jsr	(Sonic_Animate).l
00006058 4EF9 0000 0000             		jmp	(Sonic_LoadGfx).l
0000605E                            ; ===========================================================================
0000605E                            
0000605E                            CSon_Animate:	; Routine 4
0000605E 4A38 F605                  		tst.b	(v_jpadpress1).w ; is Start button pressed?
00006062 6B00                       		bmi.s	CSon_GetUp	; if yes, branch
00006064 43F9 0000 0000             		lea	(AniScript_CSon).l,a1
0000606A 4EF9 0000 0000             		jmp	(AnimateSprite).l
00006070                            
00006070                            CSon_GetUp:
00006070 5428 0024                  		addq.b	#2,obRoutine(a0)
00006074 217C 0000 0000 0004        		move.l	#Map_Sonic,obMap(a0)
0000607C 317C 0780 0002             		move.w	#$780,obGfx(a0)
00006082 117C 0000 001C             		move.b	#id_Float4,obAnim(a0) ; use "getting up" animation
00006088 4268 0020                  		clr.w	obInertia(a0)
0000608C 5168 000C                  		subq.w	#8,obY(a0)
00006098                            
00006098                            CSon_Run:	; Routine 6
00006098 0C68 0800 0020             		cmpi.w	#$800,obInertia(a0) ; check Sonic's inertia
0000609E 6600                       		bne.s	CSon_AddInertia	; if too low, branch
000060A0 317C 1000 0010             		move.w	#$1000,obVelX(a0) ; move Sonic to the right
000060A6 6000                       		bra.s	CSon_ShowRun
000060A8                            
000060A8                            CSon_AddInertia:
000060A8 0668 0020 0020             		addi.w	#$20,obInertia(a0) ; increase inertia
000060AE                            
000060AE                            CSon_ShowRun:
000060AE 4EB9 0000 0000             		jsr	(SpeedToPos).l
000060B4 4EB9 0000 0000             		jsr	(Sonic_Animate).l
000060BA 4EF9 0000 0000             		jmp	(Sonic_LoadGfx).l
000060BA 4EF9 0000 0000             		jmp	(Sonic_LoadGfx).l
000060C0                            		include	"_anim\Continue Screen Sonic.asm"
000060C0                            ; ---------------------------------------------------------------------------
000060C0                            ; Animation script - Sonic on the continue screen
000060C0                            ; ---------------------------------------------------------------------------
000060C0 0000                       AniScript_CSon:	dc.w A_CSon_1-AniScript_CSon
000060C2 0401 0101 0302 0203 03FF   A_CSon_1:	dc.b 4,	1, 1, 1, 3, 2, 2, 3, 3, afEnd
000060CC                            		even
000060CC                            		even
000060CC                            Map_ContScr:	include	"_maps\Continue Screen.asm"
000060CC                            ; --------------------------------------------------------------------------------
000060CC                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
000060CC                            ; --------------------------------------------------------------------------------
000060CC                            
000060CC                            SME_phED7:	
000060CC 0000 0000                  		dc.w SME_phED7_10-SME_phED7, SME_phED7_48-SME_phED7	
000060D0 0000 0000                  		dc.w SME_phED7_58-SME_phED7, SME_phED7_68-SME_phED7	
000060D4 0000 0000                  		dc.w SME_phED7_78-SME_phED7, SME_phED7_83-SME_phED7	
000060D8 0000 0000                  		dc.w SME_phED7_89-SME_phED7, SME_phED7_8F-SME_phED7	
000060DC 0B                         SME_phED7_10:	dc.b $B	
000060DD F805 0088 C4               		dc.b $F8, 5, 0, $88, $C4	
000060E2 F805 00B2 D4               		dc.b $F8, 5, 0, $B2, $D4	
000060E7 F805 00AE E4               		dc.b $F8, 5, 0, $AE, $E4	
000060EC F805 00C2 F4               		dc.b $F8, 5, 0, $C2, $F4	
000060F1 F801 00A0 04               		dc.b $F8, 1, 0, $A0, 4	
000060F6 F805 00AE 0C               		dc.b $F8, 5, 0, $AE, $C	
000060FB F805 00C6 1C               		dc.b $F8, 5, 0, $C6, $1C	
00006100 F805 0090 2C               		dc.b $F8, 5, 0, $90, $2C	
00006105 3805 2021 E8               		dc.b $38, 5, $20, $21, $E8	
0000610A 3805 2021 08               		dc.b $38, 5, $20, $21, 8	
0000610F 3605 01FC F8               		dc.b $36, 5, 1, $FC, $F8	
00006114 03                         SME_phED7_48:	dc.b 3	
00006115 0405 0015 FB               		dc.b 4, 5, 0, $15, $FB	
0000611A F40A 0006 EC               		dc.b $F4, $A, 0, 6, $EC	
0000611F F406 000F 04               		dc.b $F4, 6, 0, $F, 4	
00006124 03                         SME_phED7_58:	dc.b 3	
00006125 0405 0019 FB               		dc.b 4, 5, 0, $19, $FB	
0000612A F40A 0006 EC               		dc.b $F4, $A, 0, 6, $EC	
0000612F F406 000F 04               		dc.b $F4, 6, 0, $F, 4	
00006134 03                         SME_phED7_68:	dc.b 3	
00006135 0405 001D FB               		dc.b 4, 5, 0, $1D, $FB	
0000613A F40A 0006 EC               		dc.b $F4, $A, 0, 6, $EC	
0000613F F406 000F 04               		dc.b $F4, 6, 0, $F, 4	
00006144 02                         SME_phED7_78:	dc.b 2	
00006145 6009 2000 E8               		dc.b $60, 9, $20, 0, $E8	
0000614A 6009 2800 00               		dc.b $60, 9, $28, 0, 0	
0000614F 01                         SME_phED7_83:	dc.b 1	
00006150 0006 0012 00               		dc.b 0, 6, 0, $12, 0	
00006155 01                         SME_phED7_89:	dc.b 1	
00006156 0006 0012 00               		dc.b 0, 6, 0, $12, 0	
0000615B 01                         SME_phED7_8F:	dc.b 1	
0000615C 0006 0018 00               		dc.b 0, 6, 0, $18, 0	
00006162 00                         		even
00006162 00                         		even
00006162                            
00006162                            ; ===========================================================================
00006162                            ; ---------------------------------------------------------------------------
00006162                            ; Ending sequence in Green Hill	Zone
00006162                            ; ---------------------------------------------------------------------------
00006162                            
00006162                            GM_Ending:
0000616A 6100 C066                  		bsr.w	PaletteFadeOut
0000616E                            
0000616E 43F8 D000                  		lea	(v_objspace).w,a1
00006172 7000                       		moveq	#0,d0
00006174 323C 07FF                  		move.w	#$7FF,d1
00006178                            	End_ClrObjRam:
00006178 22C0                       		move.l	d0,(a1)+
0000617A 51C9 FFFC                  		dbf	d1,End_ClrObjRam ; clear object	RAM
0000617E                            
0000617E 43F8 F628                  		lea	($FFFFF628).w,a1
00006182 7000                       		moveq	#0,d0
00006184 323C 0015                  		move.w	#$15,d1
00006188                            	End_ClrRam1:
00006188 22C0                       		move.l	d0,(a1)+
0000618A 51C9 FFFC                  		dbf	d1,End_ClrRam1	; clear	variables
0000618E                            
0000618E 43F8 F700                  		lea	(v_screenposx).w,a1
00006192 7000                       		moveq	#0,d0
00006194 323C 003F                  		move.w	#$3F,d1
00006198                            	End_ClrRam2:
00006198 22C0                       		move.l	d0,(a1)+
0000619A 51C9 FFFC                  		dbf	d1,End_ClrRam2	; clear	variables
0000619E                            
0000619E 43F8 FE60                  		lea	(v_oscillate+2).w,a1
000061A2 7000                       		moveq	#0,d0
000061A4 323C 0047                  		move.w	#$47,d1
000061A8                            	End_ClrRam3:
000061A8 22C0                       		move.l	d0,(a1)+
000061AA 51C9 FFFC                  		dbf	d1,End_ClrRam3	; clear	variables
000061AE                            
000061AE 46FC 2700                  		disable_ints
000061B2 3038 F60C                  		move.w	(v_vdp_buffer1).w,d0
000061B6 0200 00BF                  		andi.b	#$BF,d0
000061BA 33C0 00C0 0004             		move.w	d0,(vdp_control_port).l
000061C0 6100 B00E                  		bsr.w	ClearScreen
000061C4 4DF9 00C0 0004             		lea	(vdp_control_port).l,a6
000061CA 3CBC 8B03                  		move.w	#$8B03,(a6)	; line scroll mode
000061CE 3CBC 8230                  		move.w	#$8200+(vram_fg>>10),(a6) ; set foreground nametable address
000061D2 3CBC 8407                  		move.w	#$8400+(vram_bg>>13),(a6) ; set background nametable address
000061D6 3CBC 857C                  		move.w	#$8500+(vram_sprites>>9),(a6) ; set sprite table address
000061DA 3CBC 9001                  		move.w	#$9001,(a6)		; 64-cell hscroll size
000061DE 3CBC 8004                  		move.w	#$8004,(a6)		; 8-colour mode
000061E2 3CBC 8720                  		move.w	#$8720,(a6)		; set background colour (line 3; colour 0)
000061E6 31FC 8ADF F624             		move.w	#$8A00+223,(v_hbla_hreg).w ; set palette change position (for water)
000061EC 3CB8 F624                  		move.w	(v_hbla_hreg).w,(a6)
000061F0 31FC 001E FE14             		move.w	#30,(v_air).w
000061F6 31FC 0600 FE10             		move.w	#id_EndZ<<8,(v_zone).w ; set level number to 0600 (extra flowers)
000061FC 0C38 0000 FE57             		cmpi.b	#0,(v_emeralds).w ; do you have all 6 emeralds?
00006202 6700                       		beq.s	End_LoadData	; if yes, branch
00006204 31FC 0601 FE10             		move.w	#(id_EndZ<<8)+1,(v_zone).w ; set level number to 0601 (no flowers)
0000620A                            
0000620A                            End_LoadData:
0000620A 7000                       		moveq	#plcid_Ending,d0
0000620C 6100 B698                  		bsr.w	QuickPLC	; load ending sequence patterns
00006210 4EB9 0000 0000             		jsr	(Hud_Base).l
00006216 6100 0000                  		bsr.w	LevelSizeLoad
0000621A 6100 0000                  		bsr.w	DeformLayers
0000621E 08F8 0002 F754             		bset	#2,(v_fg_scroll_flags).w
00006224 6100 0000                  		bsr.w	LevelDataLoad
00006228 6100 0000                  		bsr.w	LoadTilesFromStart
0000622C 21FC 0000 0000 F796        		move.l	#Col_GHZ,(v_collindex).w ; load collision index
00006234 46FC 2300                  		enable_ints
00006238 41F9 0000 0000             		lea	(Kos_EndFlowers).l,a0 ;	load extra flower patterns
0000623E 43F8 9400                  		lea	($FFFF9400).w,a1 ; RAM address to buffer the patterns
00006242 6100 B812                  		bsr.w	KosDec
00006246 4EB9 0000 0000             		jsr		LoadPlayerPal
0000624C 6100 C22E                  		bsr.w	PalLoad1	; load Sonic's palette
00006258 0838 0006 F604             		btst	#bitA,(v_jpadhold1).w ; is button A pressed?
0000625E 6700                       		beq.s	End_LoadSonic	; if not, branch
00006260 11FC 0001 FFFA             		move.b	#1,(f_debugmode).w ; enable debug mode
00006266                            
00006266                            End_LoadSonic:
00006266 11FC 0000 D000             		move.b	#id_SonicPlayer,(v_player).w ; load Sonic object
0000626C 08F8 0000 D022             		bset	#0,(v_player+obStatus).w ; make Sonic face left
00006272 11FC 0001 F7CC             		move.b	#1,(f_lockctrl).w ; lock controls
00006278 31FC 0400 F602             		move.w	#(btnL<<8),(v_jpadhold2).w ; move Sonic to the left
0000627E 31FC F800 D020             		move.w	#$F800,(v_player+obInertia).w ; set Sonic's speed
00006284 11FC 0000 D040             		move.b	#id_HUD,(v_objspace+$40).w ; load HUD object
0000628A 4EB9 0000 0000             		jsr	(ObjPosLoad).l
00006290 4EB9 0000 0000             		jsr	(ExecuteObjects).l
00006296 4EB9 0000 0000             		jsr	(BuildSprites).l
0000629C 7000                       		moveq	#0,d0
0000629E 31C0 FE20                  		move.w	d0,(v_rings).w
000062A2 21C0 FE22                  		move.l	d0,(v_time).w
000062A6 11C0 FE1B                  		move.b	d0,(v_lifecount).w
000062AA 11C0 FE2C                  		move.b	d0,(v_shield).w
000062AE 11C0 FE2D                  		move.b	d0,(v_invinc).w
000062B2 11C0 FE2E                  		move.b	d0,(v_shoes).w
000062B6 11C0 FE2F                  		move.b	d0,($FFFFFE2F).w
000062BA 31C0 FE08                  		move.w	d0,(v_debuguse).w
000062BE 31C0 FE02                  		move.w	d0,(f_restart).w
000062C2 31C0 FE04                  		move.w	d0,(v_framecount).w
000062C6 6100 EEBC                  		bsr.w	OscillateNumInit
000062CA 11FC 0001 FE1F             		move.b	#1,(f_scorecount).w
000062D0 11FC 0001 FE1D             		move.b	#1,(f_ringcount).w
000062D6 11FC 0000 FE1E             		move.b	#0,(f_timecount).w
000062DC 31FC 0708 F614             		move.w	#1800,(v_demolength).w
000062E2 11FC 0018 F62A             		move.b	#$18,(v_vbla_routine).w
000062E8 6100 D766                  		bsr.w	WaitForVBla
000062EC 3038 F60C                  		move.w	(v_vdp_buffer1).w,d0
000062F0 0000 0040                  		ori.b	#$40,d0
000062F4 33C0 00C0 0004             		move.w	d0,(vdp_control_port).l
000062FA 31FC 003F F626             		move.w	#$3F,(v_pfade_start).w
00006300 6100 BE2A                  		bsr.w	PaletteFadeIn
00006304                            
00006304                            ; ---------------------------------------------------------------------------
00006304                            ; Main ending sequence loop
00006304                            ; ---------------------------------------------------------------------------
00006304                            
00006304                            End_MainLoop:
00006304 6100 AFA6                  		bsr.w	PauseGame
00006308 11FC 0018 F62A             		move.b	#$18,(v_vbla_routine).w
0000630E 6100 D740                  		bsr.w	WaitForVBla
00006312 5278 FE04                  		addq.w	#1,(v_framecount).w
00006316 6100 0000                  		bsr.w	End_MoveSonic
0000631A 4EB9 0000 0000             		jsr	(ExecuteObjects).l
00006320 6100 0000                  		bsr.w	DeformLayers
00006324 4EB9 0000 0000             		jsr	(BuildSprites).l
0000632A 4EB9 0000 0000             		jsr	(ObjPosLoad).l
00006330 6100 B9EC                  		bsr.w	PaletteCycle
00006334 6100 EEA4                  		bsr.w	OscillateNumDo
00006338 6100 EF30                  		bsr.w	SynchroAnimate
0000633C 0C38 0000 F600             		cmpi.b	#id_Ending,(v_gamemode).w ; is game mode $18 (ending)?
00006342 6700                       		beq.s	End_ChkEmerald	; if yes, branch
00006344                            
00006344 11FC 0000 F600             		move.b	#id_Credits,(v_gamemode).w ; goto credits
00006352 31FC 0000 FFF4             		move.w	#0,(v_creditsnum).w ; set credits index number to 0
00006358 4E75                       		rts	
0000635A                            ; ===========================================================================
0000635A                            
0000635A                            End_ChkEmerald:
0000635A 4A78 FE02                  		tst.w	(f_restart).w	; has Sonic released the emeralds?
0000635E 6700 FFA4                  		beq.w	End_MainLoop	; if not, branch
00006362                            
00006362 4278 FE02                  		clr.w	(f_restart).w
00006366 31FC 003F F626             		move.w	#$3F,(v_pfade_start).w
0000636C 4278 F794                  		clr.w	(v_palchgspeed).w
00006370                            
00006370                            	End_AllEmlds:
00006370 6100 AF3A                  		bsr.w	PauseGame
00006374 11FC 0018 F62A             		move.b	#$18,(v_vbla_routine).w
0000637A 6100 D6D4                  		bsr.w	WaitForVBla
0000637E 5278 FE04                  		addq.w	#1,(v_framecount).w
00006382 6100 0000                  		bsr.w	End_MoveSonic
00006386 4EB9 0000 0000             		jsr	(ExecuteObjects).l
0000638C 6100 0000                  		bsr.w	DeformLayers
00006390 4EB9 0000 0000             		jsr	(BuildSprites).l
00006396 4EB9 0000 0000             		jsr	(ObjPosLoad).l
0000639C 6100 EE3C                  		bsr.w	OscillateNumDo
000063A0 6100 EEC8                  		bsr.w	SynchroAnimate
000063A4 5378 F794                  		subq.w	#1,(v_palchgspeed).w
000063A8 6A00                       		bpl.s	End_SlowFade
000063AA 31FC 0002 F794             		move.w	#2,(v_palchgspeed).w
000063B0 6100 BF6A                  		bsr.w	WhiteOut_ToWhite
000063B4                            
000063B4                            	End_SlowFade:
000063B4 4A78 FE02                  		tst.w	(f_restart).w
000063B8 6700 FFB6                  		beq.w	End_AllEmlds
000063BC 4278 FE02                  		clr.w	(f_restart).w
000063C0 31FC 2829 A480             		move.w	#$2829,(v_lvllayout+$80).w ; modify level layout
000063C6 4BF9 00C0 0004             		lea	(vdp_control_port).l,a5
000063CC 4DF9 00C0 0000             		lea	(vdp_data_port).l,a6
000063D2 47F8 F700                  		lea	(v_screenposx).w,a3
000063D6 49F8 A400                  		lea	(v_lvllayout).w,a4
000063DA 343C 4000                  		move.w	#$4000,d2
000063DE 6100 0000                  		bsr.w	DrawChunks
000063E2 7013                       		moveq	#palid_Ending,d0
000063E4 6100 C096                  		bsr.w	PalLoad1	; load ending palette
000063E8 6100 BE66                  		bsr.w	PaletteWhiteIn
000063EC 6000 FF16                  		bra.w	End_MainLoop
000063F0                            
000063F0                            ; ---------------------------------------------------------------------------
000063F0                            ; Subroutine controlling Sonic on the ending sequence
000063F0                            ; ---------------------------------------------------------------------------
000063F0                            
000063F0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000063F0                            
000063F0                            
000063F0                            End_MoveSonic:
000063F0 1038 F7D7                  		move.b	(v_sonicend).w,d0
000063F4 6600                       		bne.s	End_MoveSon2
000063F6 0C78 0090 D008             		cmpi.w	#$90,(v_player+obX).w ; has Sonic passed $90 on x-axis?
000063FC 6400                       		bhs.s	End_MoveSonExit	; if not, branch
000063FE                            
000063FE 5438 F7D7                  		addq.b	#2,(v_sonicend).w
00006402 11FC 0001 F7CC             		move.b	#1,(f_lockctrl).w ; lock player's controls
00006408 31FC 0800 F602             		move.w	#(btnR<<8),(v_jpadhold2).w ; move Sonic to the right
0000640E 4E75                       		rts	
00006410                            ; ===========================================================================
00006410                            
00006410                            End_MoveSon2:
00006410 5500                       		subq.b	#2,d0
00006412 6600                       		bne.s	End_MoveSon3
00006414 0C78 00A0 D008             		cmpi.w	#$A0,(v_player+obX).w ; has Sonic passed $A0 on x-axis?
0000641A 6500                       		blo.s	End_MoveSonExit	; if not, branch
0000641C                            
0000641C 5438 F7D7                  		addq.b	#2,(v_sonicend).w
00006420 7000                       		moveq	#0,d0
00006422 11C0 F7CC                  		move.b	d0,(f_lockctrl).w
00006426 31C0 F602                  		move.w	d0,(v_jpadhold2).w ; stop Sonic moving
0000642A 31C0 D020                  		move.w	d0,(v_player+obInertia).w
0000642E 11FC 0081 F7C8             		move.b	#$81,(f_lockmulti).w ; lock controls & position
00006434 11FC 0003 D01A             		move.b	#3,(v_player+obFrame).w
0000643A 31FC 0000 D01C             		move.w	#(id_Wait<<8)+id_Wait,(v_player+obAnim).w ; use "standing" animation
00006440 11FC 0003 D01E             		move.b	#3,(v_player+obTimeFrame).w
00006446 4E75                       		rts	
00006448                            ; ===========================================================================
00006448                            
00006448                            End_MoveSon3:
00006448 5500                       		subq.b	#2,d0
0000644A 6600                       		bne.s	End_MoveSonExit
0000644C 5438 F7D7                  		addq.b	#2,(v_sonicend).w
00006450 31FC 00A0 D008             		move.w	#$A0,(v_player+obX).w
00006456 11FC 0000 D000             		move.b	#id_EndSonic,(v_player).w ; load Sonic ending sequence object
0000645C 4278 D024                  		clr.w	(v_player+obRoutine).w
00006460                            
00006460                            End_MoveSonExit:
00006460 4E75                       		rts	
00006462                            ; End of function End_MoveSonic
00006462                            
00006462                            ; ===========================================================================
00006462                            
00006462                            		include	"_incObj\87 Ending Sequence Sonic.asm"
00006462                            ; ---------------------------------------------------------------------------
00006462                            ; Object 87 - Sonic on ending sequence
00006462                            ; ---------------------------------------------------------------------------
00006462                            
00006462                            EndSonic:
00006462 7000                       		moveq	#0,d0
00006464 1028 0025                  		move.b	ob2ndRout(a0),d0
00006468 323B 0000                  		move.w	ESon_Index(pc,d0.w),d1
0000646C 4EBB 1000                  		jsr	ESon_Index(pc,d1.w)
00006470 4EF9 0000 0000             		jmp	(DisplaySprite).l
00006476                            ; ===========================================================================
00006476 0000 0000                  ESon_Index:	dc.w ESon_Main-ESon_Index, ESon_MakeEmeralds-ESon_Index
0000647A 0000 0000                  		dc.w Obj87_Animate-ESon_Index,	Obj87_LookUp-ESon_Index
0000647E 0000 0000                  		dc.w Obj87_ClrObjRam-ESon_Index, Obj87_Animate-ESon_Index
00006482 0000 0000                  		dc.w Obj87_MakeLogo-ESon_Index, Obj87_Animate-ESon_Index
00006486 0000 0000                  		dc.w Obj87_Leap-ESon_Index, Obj87_Animate-ESon_Index
0000648A                            
0000648A =00000030                  eson_time:	equ $30	; time to wait between events
0000648A                            ; ===========================================================================
0000648A                            
0000648A                            ESon_Main:	; Routine 0
0000648A 0C38 0006 FE57             		cmpi.b	#6,(v_emeralds).w ; do you have all 6 emeralds?
00006490 6700                       		beq.s	ESon_Main2	; if yes, branch
00006492 0628 0010 0025             		addi.b	#$10,ob2ndRout(a0) ; else, skip emerald sequence
00006498 317C 00D8 0030             		move.w	#216,eson_time(a0)
0000649E 4E75                       		rts	
000064A0                            ; ===========================================================================
000064A0                            
000064A0                            ESon_Main2:
000064A0 5428 0025                  		addq.b	#2,ob2ndRout(a0)
000064A4 217C 0000 0000 0004        		move.l	#Map_ESon,obMap(a0)
000064AC 317C 03E1 0002             		move.w	#$3E1,obGfx(a0)
000064B2 117C 0004 0001             		move.b	#4,obRender(a0)
000064B8 4228 0022                  		clr.b	obStatus(a0)
000064BC 317C 0100 0018             		move.w	#$100,obPriority(a0)
000064C2 117C 0000 001A             		move.b	#0,obFrame(a0)
000064C8 317C 0050 0030             		move.w	#80,eson_time(a0) ; set duration for Sonic to pause
000064CE                            
000064CE                            ESon_MakeEmeralds:
000064CE                            		; Routine 2
000064CE 5368 0030                  		subq.w	#1,eson_time(a0) ; subtract 1 from duration
000064D2 6600                       		bne.s	ESon_Wait
000064D4 5428 0025                  		addq.b	#2,ob2ndRout(a0)
000064D8 317C 0001 001C             		move.w	#1,obAnim(a0)
000064DE 11FC 0000 D400             		move.b	#id_EndChaos,(v_objspace+$400).w ; load chaos emeralds objects
000064E4                            
000064E4                            	ESon_Wait:
000064E4 4E75                       		rts	
000064E6                            ; ===========================================================================
000064E6                            
000064E6                            Obj87_LookUp:	; Routine 6
000064E6 0C79 2000 00FF D43C        		cmpi.w	#$2000,((v_objspace&$FFFFFF)+$400+$3C).l
000064EE 6600                       		bne.s	locret_5480
000064F0 31FC 0001 FE02             		move.w	#1,(f_restart).w ; set level to	restart	(causes	flash)
000064F6 317C 005A 0030             		move.w	#90,eson_time(a0)
000064FC 5428 0025                  		addq.b	#2,ob2ndRout(a0)
00006500                            
00006500                            locret_5480:
00006500 4E75                       		rts	
00006502                            ; ===========================================================================
00006502                            
00006502                            Obj87_ClrObjRam:
00006502                            		; Routine 8
00006502 5368 0030                  		subq.w	#1,eson_time(a0)
00006506 6600                       		bne.s	ESon_Wait2
00006508 43F8 D400                  		lea	(v_objspace+$400).w,a1
0000650C 323C 00FF                  		move.w	#$FF,d1
00006510                            
00006510                            Obj87_ClrLoop:
00006510 4299                       		clr.l	(a1)+
00006512 51C9 FFFC                  		dbf	d1,Obj87_ClrLoop ; clear the object RAM
00006516 31FC 0001 FE02             		move.w	#1,(f_restart).w
0000651C 5428 0025                  		addq.b	#2,ob2ndRout(a0)
00006520 117C 0001 001C             		move.b	#1,obAnim(a0)
00006526 317C 003C 0030             		move.w	#60,eson_time(a0)
0000652C                            
0000652C                            ESon_Wait2:
0000652C 4E75                       		rts	
0000652E                            ; ===========================================================================
0000652E                            
0000652E                            Obj87_MakeLogo:	; Routine $C
0000652E 5368 0030                  		subq.w	#1,eson_time(a0)
00006532 6600                       		bne.s	ESon_Wait3
00006534 5428 0025                  		addq.b	#2,ob2ndRout(a0)
00006538 317C 00B4 0030             		move.w	#180,eson_time(a0)
0000653E 117C 0002 001C             		move.b	#2,obAnim(a0)
00006544 11FC 0000 D400             		move.b	#id_EndSTH,(v_objspace+$400).w ; load "SONIC THE HEDGEHOG" object
0000654A                            
0000654A                            ESon_Wait3:
0000654A 4E75                       		rts	
0000654C                            ; ===========================================================================
0000654C                            
0000654C                            Obj87_Animate:	; Rountine 4, $A, $E, $12
0000654C 43F9 0000 0000             		lea	(AniScript_ESon).l,a1
00006552 4EF9 0000 0000             		jmp	(AnimateSprite).l
00006558                            ; ===========================================================================
00006558                            
00006558                            Obj87_Leap:	; Routine $10
00006558 5368 0030                  		subq.w	#1,eson_time(a0)
0000655C 6600                       		bne.s	ESon_Wait4
0000655E 5428 0025                  		addq.b	#2,ob2ndRout(a0)
00006562 217C 0000 0000 0004        		move.l	#Map_ESon,obMap(a0)
0000656A 317C 03E1 0002             		move.w	#$3E1,obGfx(a0)
00006570 117C 0004 0001             		move.b	#4,obRender(a0)
00006576 4228 0022                  		clr.b	obStatus(a0)
0000657A 317C 0100 0018             		move.w	#$100,obPriority(a0)
00006580 117C 0005 001A             		move.b	#5,obFrame(a0)
00006586 117C 0002 001C             		move.b	#2,obAnim(a0)	; use "leaping"	animation
0000658C 11FC 0000 D400             		move.b	#id_EndSTH,(v_objspace+$400).w ; load "SONIC THE HEDGEHOG" object
00006592 60B8                       		bra.s	Obj87_Animate
00006594                            ; ===========================================================================
00006594                            
00006594                            ESon_Wait4:
00006594 4E75                       		rts	
00006594 4E75                       		rts	
00006596                            		include "_anim\Ending Sequence Sonic.asm"
00006596                            ; ---------------------------------------------------------------------------
00006596                            ; Animation script - Sonic on the ending sequence
00006596                            ; ---------------------------------------------------------------------------
00006596 0000                       AniScript_ESon:	dc.w byte_551C-AniScript_ESon
00006598 0000                       		dc.w byte_552A-AniScript_ESon
0000659A 0000                       		dc.w byte_5534-AniScript_ESon
0000659C 0301 0001 0001 0001 0001+  byte_551C:	dc.b 3,	1, 0, 1, 0, 1, 0, 1, 0,	1, 0, 1, 2, $FA
000065AA 0503 0403 0403 0403 FA00   byte_552A:	dc.b 5,	3, 4, 3, 4, 3, 4, 3, $FA, 0
000065B4 0305 0505 0607 FE01        byte_5534:	dc.b 3,	5, 5, 5, 6, 7, $FE, 1
000065BC                            		even
000065BC                            		even
000065BC                            		include	"_incObj\88 Ending Sequence Emeralds.asm"
000065BC                            ; ---------------------------------------------------------------------------
000065BC                            ; Object 88 - chaos emeralds on	the ending sequence
000065BC                            ; ---------------------------------------------------------------------------
000065BC                            
000065BC                            EndChaos:
000065BC 7000                       		moveq	#0,d0
000065BE 1028 0024                  		move.b	obRoutine(a0),d0
000065C2 323B 0000                  		move.w	ECha_Index(pc,d0.w),d1
000065C6 4EBB 1000                  		jsr	ECha_Index(pc,d1.w)
000065CA 4EF9 0000 0000             		jmp	(DisplaySprite).l
000065D0                            ; ===========================================================================
000065D0 0000                       ECha_Index:	dc.w ECha_Main-ECha_Index
000065D2 0000                       		dc.w ECha_Move-ECha_Index
000065D4                            
000065D4 =00000038                  echa_origX:	equ $38	; x-axis centre of emerald circle (2 bytes)
000065D4 =0000003A                  echa_origY:	equ $3A	; y-axis centre of emerald circle (2 bytes)
000065D4 =0000003C                  echa_radius:	equ $3C	; radius (2 bytes)
000065D4 =0000003E                  echa_angle:	equ $3E	; angle for rotation (2 bytes)
000065D4                            ; ===========================================================================
000065D4                            
000065D4                            ECha_Main:	; Routine 0
000065D4 0C38 0002 D01A             		cmpi.b	#2,(v_player+obFrame).w
000065DA 6700                       		beq.s	ECha_CreateEms
000065DC 588F                       		addq.l	#4,sp
000065DE 4E75                       		rts	
000065E0                            ; ===========================================================================
000065E0                            
000065E0                            ECha_CreateEms:
000065E0 3178 D008 0008             		move.w	(v_player+obX).w,obX(a0) ; match X position with Sonic
000065E6 3178 D00C 000C             		move.w	(v_player+obY).w,obY(a0) ; match Y position with Sonic
000065EC 2248                       		movea.l	a0,a1
000065EE 7600                       		moveq	#0,d3
000065F0 7401                       		moveq	#1,d2
000065F2 7205                       		moveq	#5,d1
000065F4                            
000065F4                            	ECha_LoadLoop:
000065F4 12BC 0000                  		move.b	#id_EndChaos,(a1) ; load chaos emerald object
000065F8 5429 0024                  		addq.b	#2,obRoutine(a1)
000065FC 237C 0000 0000 0004        		move.l	#Map_ECha,obMap(a1)
00006604 337C 03C5 0002             		move.w	#$3C5,obGfx(a1)
0000660A 137C 0004 0001             		move.b	#4,obRender(a1)
00006610 337C 0080 0018             		move.w	#$80,obPriority(a1)
00006616 3368 0008 0038             		move.w	obX(a0),echa_origX(a1)
0000661C 3368 000C 003A             		move.w	obY(a0),echa_origY(a1)
00006622 1342 001C                  		move.b	d2,obAnim(a1)
00006626 1342 001A                  		move.b	d2,obFrame(a1)
0000662A 5202                       		addq.b	#1,d2
0000662C 1343 0026                  		move.b	d3,obAngle(a1)
00006630 0603 002A                  		addi.b	#$100/6,d3	; angle between each emerald
00006634 43E9 0040                  		lea	$40(a1),a1
00006638 51C9 FFBA                  		dbf	d1,ECha_LoadLoop ; repeat 5 more times
0000663C                            
0000663C                            ECha_Move:	; Routine 2
0000663C 3028 003E                  		move.w	echa_angle(a0),d0
00006640 D168 0026                  		add.w	d0,obAngle(a0)
00006644 1028 0026                  		move.b	obAngle(a0),d0
00006648 4EB9 0000 3A82             		jsr	(CalcSine).l
0000664E 7800                       		moveq	#0,d4
00006650 1828 003C                  		move.b	echa_radius(a0),d4
00006654 C3C4                       		muls.w	d4,d1
00006656 E081                       		asr.l	#8,d1
00006658 C1C4                       		muls.w	d4,d0
0000665A E080                       		asr.l	#8,d0
0000665C D268 0038                  		add.w	echa_origX(a0),d1
00006660 D068 003A                  		add.w	echa_origY(a0),d0
00006664 3141 0008                  		move.w	d1,obX(a0)
00006668 3140 000C                  		move.w	d0,obY(a0)
0000666C                            
0000666C                            	ECha_Expand:
0000666C 0C68 2000 003C             		cmpi.w	#$2000,echa_radius(a0)
00006672 6700                       		beq.s	ECha_Rotate
00006674 0668 0020 003C             		addi.w	#$20,echa_radius(a0) ; expand circle of emeralds
0000667A                            
0000667A                            	ECha_Rotate:
0000667A 0C68 2000 003E             		cmpi.w	#$2000,echa_angle(a0)
00006680 6700                       		beq.s	ECha_Rise
00006682 0668 0020 003E             		addi.w	#$20,echa_angle(a0) ; move emeralds around the centre
00006688                            
00006688                            	ECha_Rise:
00006688 0C68 0140 003A             		cmpi.w	#$140,echa_origY(a0)
0000668E 6700                       		beq.s	ECha_End
00006690 5368 003A                  		subq.w	#1,echa_origY(a0) ; make circle rise
00006694                            
00006694                            ECha_End:
00006694 4E75                       		rts	
00006694 4E75                       		rts	
00006696                            		include	"_incObj\89 Ending Sequence STH.asm"
00006696                            ; ---------------------------------------------------------------------------
00006696                            ; Object 89 - "SONIC THE HEDGEHOG" text	on the ending sequence
00006696                            ; ---------------------------------------------------------------------------
00006696                            
00006696                            EndSTH:
00006696 7000                       		moveq	#0,d0
00006698 1028 0024                  		move.b	$24(a0),d0
0000669C 323B 0000                  		move.w	ESth_Index(pc,d0.w),d1
000066A0 4EBB 1000                  		jsr	ESth_Index(pc,d1.w)
000066A4 4EF9 0000 0000             		jmp	(DisplaySprite).l
000066AA                            ; ===========================================================================
000066AA 0000                       ESth_Index:	dc.w ESth_Main-ESth_Index
000066AC 0000                       		dc.w ESth_Move-ESth_Index
000066AE 0000                       		dc.w ESth_GotoCredits-ESth_Index
000066B0                            
000066B0 =00000030                  esth_time:	equ $30		; time until exit
000066B0                            ; ===========================================================================
000066B0                            
000066B0                            ESth_Main:	; Routine 0
000066B0 5428 0024                  		addq.b	#2,obRoutine(a0)
000066B4 317C FFE0 0008             		move.w	#-$20,obX(a0)	; object starts	outside	the level boundary
000066BA 317C 00D8 000A             		move.w	#$D8,obScreenY(a0)
000066C0 217C 0000 0000 0004        		move.l	#Map_ESTH,obMap(a0)
000066C8 317C 05C5 0002             		move.w	#$5C5,obGfx(a0)
000066CE 117C 0000 0001             		move.b	#0,obRender(a0)
000066D4 317C 0000 0018             		move.w	#0,obPriority(a0)
000066DA                            
000066DA                            ESth_Move:	; Routine 2
000066DA 0C68 00C0 0008             		cmpi.w	#$C0,obX(a0)	; has object reached $C0?
000066E0 6700                       		beq.s	ESth_Delay	; if yes, branch
000066E2 0668 0010 0008             		addi.w	#$10,obX(a0)	; move object to the right
000066E8 4E75                       		rts
000066EA                            
000066EA                            ESth_Delay:
000066EA 5428 0024                  		addq.b	#2,obRoutine(a0)
000066EE 317C 012C 0030             		move.w	#300,esth_time(a0) ; set duration for delay (5 seconds)
000066F4                            
000066F4                            ESth_GotoCredits:
000066F4                            		; Routine 4
000066F4 5368 0030                  		subq.w	#1,esth_time(a0) ; subtract 1 from duration
000066F8 6A00                       		bpl.s	ESth_Wait
000066FA 11FC 0000 F600             		move.b	#id_Credits,(v_gamemode).w ; exit to credits
00006700                            
00006700                            	ESth_Wait:
00006700 4E75                       		rts
00006702                            Map_ESon:	include	"_maps\Ending Sequence Sonic.asm"
00006702                            ; ---------------------------------------------------------------------------
00006702                            ; Sprite mappings - Sonic on the ending	sequence
00006702                            ; ---------------------------------------------------------------------------
00006702                            Map_ESon_internal:
00006702 0000                       		dc.w M_ESon_Hold1-Map_ESon_internal
00006704 0000                       		dc.w M_ESon_Hold2-Map_ESon_internal
00006706 0000                       		dc.w M_ESon_Up-Map_ESon_internal
00006708 0000                       		dc.w M_ESon_Conf1-Map_ESon_internal
0000670A 0000                       		dc.w M_ESon_Conf2-Map_ESon_internal
0000670C 0000                       		dc.w M_ESon_Leap1-Map_ESon_internal
0000670E 0000                       		dc.w M_ESon_Leap2-Map_ESon_internal
00006710 0000                       		dc.w M_ESon_Leap3-Map_ESon_internal
00006712 02                         M_ESon_Hold1:	dc.b 2
00006713 EC0B 0000 F8               		dc.b $EC, $B, 0, 0, $F8	; holding emeralds
00006718 0C0C 000C F0               		dc.b $C, $C, 0,	$C, $F0
0000671D 03                         M_ESon_Hold2:	dc.b 3
0000671E FC0D 0010 F0               		dc.b $FC, $D, 0, $10, $F0 ; holding emeralds (glowing)
00006723 EC0B 0000 F8               		dc.b $EC, $B, 0, 0, $F8
00006728 0C0C 000C F0               		dc.b $C, $C, 0,	$C, $F0
0000672D 02                         M_ESon_Up:	dc.b 2
0000672E EC09 0018 F8               		dc.b $EC, 9, 0,	$18, $F8 ; looking up
00006733 FC0E 001E F0               		dc.b $FC, $E, 0, $1E, $F0
00006738 02                         M_ESon_Conf1:	dc.b 2
00006739 EC09 002A F8               		dc.b $EC, 9, 0,	$2A, $F8 ; confused
0000673E FC0E 0030 F0               		dc.b $FC, $E, 0, $30, $F0
00006743 02                         M_ESon_Conf2:	dc.b 2
00006744 EC09 082A F0               		dc.b $EC, 9, 8,	$2A, $F0 ; confused #2
00006749 FC0E 0830 F0               		dc.b $FC, $E, 8, $30, $F0
0000674E 03                         M_ESon_Leap1:	dc.b 3
0000674F EC06 003C F0               		dc.b $EC, 6, 0,	$3C, $F0 ; leaping
00006754 EC06 083C 00               		dc.b $EC, 6, 8,	$3C, 0
00006759 040D 0042 F0               		dc.b 4,	$D, 0, $42, $F0
0000675E 07                         M_ESon_Leap2:	dc.b 7
0000675F B20C 004A F8               		dc.b $B2, $C, 0, $4A, $F8 ; leaping #2
00006764 BA0F 004E F0               		dc.b $BA, $F, 0, $4E, $F0
00006769 BA05 005E 10               		dc.b $BA, 5, 0,	$5E, $10
0000676E CA02 0062 10               		dc.b $CA, 2, 0,	$62, $10
00006773 DA0C 0065 F0               		dc.b $DA, $C, 0, $65, $F0
00006778 E208 0069 F8               		dc.b $E2, 8, 0,	$69, $F8
0000677D EA05 006C F8               		dc.b $EA, 5, 0,	$6C, $F8
00006782 18                         M_ESon_Leap3:	dc.b $18
00006783 800F 0070 F8               		dc.b $80, $F, 0, $70, $F8 ; leaping #3
00006788 900B 0080 E0               		dc.b $90, $B, 0, $80, $E0
0000678D 900B 008C 18               		dc.b $90, $B, 0, $8C, $18
00006792 980B 0098 30               		dc.b $98, $B, 0, $98, $30
00006797 A00F 00A4 58               		dc.b $A0, $F, 0, $A4, $58
0000679C 8800 00B4 F0               		dc.b $88, 0, 0,	$B4, $F0
000067A1 8005 00B5 18               		dc.b $80, 5, 0,	$B5, $18
000067A6 A00F 00B9 F8               		dc.b $A0, $F, 0, $B9, $F8
000067AB B00B 00C9 E0               		dc.b $B0, $B, 0, $C9, $E0
000067B0 B80F 00D5 38               		dc.b $B8, $F, 0, $D5, $38
000067B5 A805 00E5 48               		dc.b $A8, 5, 0,	$E5, $48
000067BA C002 00E9 58               		dc.b $C0, 2, 0,	$E9, $58
000067BF C00F 00EC F8               		dc.b $C0, $F, 0, $EC, $F8
000067C4 B80F 00FC 18               		dc.b $B8, $F, 0, $FC, $18
000067C9 B008 010C 18               		dc.b $B0, 8, 1,	$C, $18
000067CE D80D 010F 30               		dc.b $D8, $D, 1, $F, $30
000067D3 D808 0117 18               		dc.b $D8, 8, 1,	$17, $18
000067D8 D80F 011A D8               		dc.b $D8, $F, 1, $1A, $D8
000067DD E00D 012A F8               		dc.b $E0, $D, 1, $2A, $F8
000067E2 E000 0132 28               		dc.b $E0, 0, 1,	$32, $28
000067E7 D004 0133 E0               		dc.b $D0, 4, 1,	$33, $E0
000067EC E805 0135 C8               		dc.b $E8, 5, 1,	$35, $C8
000067F1 F80C 0139 C8               		dc.b $F8, $C, 1, $39, $C8
000067F6 F006 013D F8               		dc.b $F0, 6, 1,	$3D, $F8
000067FC 00                         		even
000067FC 00                         		even
000067FC                            Map_ECha:	include	"_maps\Ending Sequence Emeralds.asm"
000067FC                            ; --------------------------------------------------------------------------------
000067FC                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
000067FC                            ; --------------------------------------------------------------------------------
000067FC                            
000067FC                            SME_0ZTmS:	
000067FC 0000 0000                  		dc.w SME_0ZTmS_E-SME_0ZTmS, SME_0ZTmS_14-SME_0ZTmS	
00006800 0000 0000                  		dc.w SME_0ZTmS_1A-SME_0ZTmS, SME_0ZTmS_20-SME_0ZTmS	
00006804 0000 0000                  		dc.w SME_0ZTmS_26-SME_0ZTmS, SME_0ZTmS_2C-SME_0ZTmS	
00006808 0000                       		dc.w SME_0ZTmS_32-SME_0ZTmS	
0000680A 01                         SME_0ZTmS_E:	dc.b 1	
0000680B F805 0000 F8               		dc.b $F8, 5, 0, 0, $F8	
00006810 01                         SME_0ZTmS_14:	dc.b 1	
00006811 F805 0004 F8               		dc.b $F8, 5, 0, 4, $F8	
00006816 01                         SME_0ZTmS_1A:	dc.b 1	
00006817 F805 2008 F8               		dc.b $F8, 5, $20, 8, $F8	
0000681C 01                         SME_0ZTmS_20:	dc.b 1	
0000681D F805 2018 F8               		dc.b $F8, 5, $20, $18, $F8	
00006822 01                         SME_0ZTmS_26:	dc.b 1	
00006823 F805 4014 F8               		dc.b $F8, 5, $40, $14, $F8	
00006828 01                         SME_0ZTmS_2C:	dc.b 1	
00006829 F805 0008 F8               		dc.b $F8, 5, 0, 8, $F8	
0000682E 01                         SME_0ZTmS_32:	dc.b 1	
0000682F F805 000C F8               		dc.b $F8, 5, 0, $C, $F8	
00006834                            		even
00006834                            		even
00006834                            Map_ESth:	include	"_maps\Ending Sequence STH.asm"
00006834                            ; ---------------------------------------------------------------------------
00006834                            ; Sprite mappings - "SONIC THE HEDGEHOG" text on the ending sequence
00006834                            ; ---------------------------------------------------------------------------
00006834                            Map_ESth_internal:
00006834 0000                       		dc.w M_ESth_1-Map_ESth_internal
00006836 03                         M_ESth_1:	dc.b 3
00006837 F00F 0000 D0               		dc.b $F0, $F, 0, 0, $D0
0000683C F00F 0010 F0               		dc.b $F0, $F, 0, $10, $F0
00006841 F00F 0020 10               		dc.b $F0, $F, 0, $20, $10
00006846                            		even
00006846                            		even
00006846                            
00006846                            ; ===========================================================================
00006846                            ; ---------------------------------------------------------------------------
00006846                            ; Credits ending sequence
00006846                            ; ---------------------------------------------------------------------------
00006846                            
00006846                            GM_Credits:
00006846                            		
00006846 6100 AF50                  		bsr.w	ClearPLC
0000684A 6100 B986                  		bsr.w	PaletteFadeOut
0000684E 4DF9 00C0 0004             		lea	(vdp_control_port).l,a6
00006854 3CBC 8004                  		move.w	#$8004,(a6)	; use 8-colour mode
00006858 3CBC 8230                  		move.w	#$8200+(vram_fg>>10),(a6) ; set foreground nametable address
0000685C 3CBC 8407                  		move.w	#$8400+(vram_bg>>13),(a6) ; set background nametable address
00006860 3CBC 9001                  		move.w	#$9001,(a6)	; 64-cell hscroll size
00006864 3CBC 9200                  		move.w	#$9200,(a6)	; window vertical position
00006868 3CBC 8B03                  		move.w	#$8B03,(a6)	; line scroll mode
0000686C 3CBC 8720                  		move.w	#$8720,(a6)	; set background colour (line 3; colour 0)
00006870 4238 F64E                  		clr.b	(f_wtr_state).w
00006874 6100 A95A                  		bsr.w	ClearScreen
00006878                            
00006878 43F8 D000                  		lea	(v_objspace).w,a1
0000687C 7000                       		moveq	#0,d0
0000687E 323C 07FF                  		move.w	#$7FF,d1
00006882                            	TryAg_ClrObjRam:
00006882 22C0                       		move.l	d0,(a1)+
00006884 51C9 FFFC                  		dbf	d1,TryAg_ClrObjRam ; clear object RAM
00006888                            
00006888 7000                       		moveq	#plcid_TryAgain,d0
0000688A 6100 B01A                  		bsr.w	QuickPLC	; load "TRY AGAIN" or "END" patterns
0000688E                            
0000688E 43F8 FB80                  		lea	(v_pal_dry_dup).w,a1
00006892 7000                       		moveq	#0,d0
00006894 323C 001F                  		move.w	#$1F,d1
00006898                            	TryAg_ClrPal:
00006898 22C0                       		move.l	d0,(a1)+
0000689A 51C9 FFFC                  		dbf	d1,TryAg_ClrPal ; fill palette with black
0000689E                            
0000689E 7013                       		moveq	#palid_Ending,d0
000068A0 6100 BBDA                  		bsr.w	PalLoad1	; load ending palette
000068A4 4278 FBC0                  		clr.w	(v_pal_dry_dup+$40).w
000068A8 11FC 0000 D080             		move.b	#id_EndEggman,(v_objspace+$80).w ; load Eggman object
000068AE 4EB9 0000 0000             		jsr	(ExecuteObjects).l
000068B4 4EB9 0000 0000             		jsr	(BuildSprites).l
000068BA 31FC 0708 F614             		move.w	#1800,(v_demolength).w ; show screen for 30 seconds
000068C0 6100 B86A                  		bsr.w	PaletteFadeIn
000068C4                            
000068C4                            ; ---------------------------------------------------------------------------
000068C4                            ; "TRY AGAIN" and "END"	screen main loop
000068C4                            ; ---------------------------------------------------------------------------
000068C4                            TryAg_MainLoop:
000068C4 6100 A9E6                  		bsr.w	PauseGame
000068C8 11FC 0004 F62A             		move.b	#4,(v_vbla_routine).w
000068CE 6100 D180                  		bsr.w	WaitForVBla
000068D2 4EB9 0000 0000             		jsr	(ExecuteObjects).l
000068D8 4EB9 0000 0000             		jsr	(BuildSprites).l
000068DE 0238 0080 F605             		andi.b	#btnStart,(v_jpadpress1).w ; is Start button pressed?
000068E4 6600                       		bne.s	TryAg_Exit	; if yes, branch
000068E6 4A78 F614                  		tst.w	(v_demolength).w ; has 30 seconds elapsed?
000068EA 6700                       		beq.s	TryAg_Exit	; if yes, branch
000068EC 0C38 0000 F600             		cmpi.b	#id_Credits,(v_gamemode).w
000068F2 67D0                       		beq.s	TryAg_MainLoop
000068F4                            
000068F4                            TryAg_Exit:
000068F4 11FC 0000 F600             		move.b	#id_Sega,(v_gamemode).w ; goto Sega screen
000068FA 4E75                       		rts	
000068FC                            
000068FC                            ; ===========================================================================
000068FC                            
000068FC                            		include	"_incObj\8B Try Again & End Eggman.asm"
000068FC                            ; ---------------------------------------------------------------------------
000068FC                            ; Object 8B - Eggman on "TRY AGAIN" and "END"	screens
000068FC                            ; ---------------------------------------------------------------------------
000068FC                            
000068FC                            EndEggman:
000068FC 7000                       		moveq	#0,d0
000068FE 1028 0024                  		move.b	obRoutine(a0),d0
00006902 323B 0000                  		move.w	EEgg_Index(pc,d0.w),d1
00006906 4EBB 1000                  		jsr	EEgg_Index(pc,d1.w)
0000690A 4EF9 0000 0000             		jmp	(DisplaySprite).l
00006910                            ; ===========================================================================
00006910 0000                       EEgg_Index:	dc.w EEgg_Main-EEgg_Index
00006912 0000                       		dc.w EEgg_Animate-EEgg_Index
00006914 0000                       		dc.w EEgg_Juggle-EEgg_Index
00006916 0000                       		dc.w EEgg_Wait-EEgg_Index
00006918                            
00006918 =00000030                  eegg_time:	equ $30		; time between juggle motions
00006918                            ; ===========================================================================
00006918                            
00006918                            EEgg_Main:	; Routine 0
00006918 5428 0024                  		addq.b	#2,obRoutine(a0)
0000691C 317C 0120 0008             		move.w	#$120,obX(a0)
00006922 317C 00F4 000A             		move.w	#$F4,obScreenY(a0)
00006928 217C 0000 0000 0004        		move.l	#Map_EEgg,obMap(a0)
00006930 317C 03E1 0002             		move.w	#$3E1,obGfx(a0)
00006936 117C 0000 0001             		move.b	#0,obRender(a0)
0000693C 317C 0100 0018             		move.w	#$100,obPriority(a0)
00006942 117C 0002 001C             		move.b	#2,obAnim(a0)	; use "END" animation
00006948 0C38 0006 FE57             		cmpi.b	#6,(v_emeralds).w ; do you have all 6 emeralds?
0000694E 6700                       		beq.s	EEgg_Animate	; if yes, branch
00006950                            
00006950 11FC 0000 D0C0             		move.b	#id_CreditsText,(v_objspace+$C0).w ; load credits object
00006956 31FC 0009 FFF4             		move.w	#9,(v_creditsnum).w ; use "TRY AGAIN" text
0000695C 11FC 0000 D800             		move.b	#id_TryChaos,(v_objspace+$800).w ; load emeralds object on "TRY AGAIN" screen
00006962 117C 0000 001C             		move.b	#0,obAnim(a0)	; use "TRY AGAIN" animation
00006968                            
00006968                            EEgg_Animate:	; Routine 2
00006968 43F9 0000 0000             		lea	(Ani_EEgg).l,a1
0000696E 4EF9 0000 0000             		jmp	(AnimateSprite).l
00006974                            ; ===========================================================================
00006974                            
00006974                            EEgg_Juggle:	; Routine 4
00006974 5428 0024                  		addq.b	#2,obRoutine(a0)
00006978 7002                       		moveq	#2,d0
0000697A 0828 0000 001C             		btst	#0,obAnim(a0)
00006980 6700                       		beq.s	@noflip
00006982 4440                       		neg.w	d0
00006984                            
00006984                            	@noflip:
00006984 43F8 D800                  		lea	(v_objspace+$800).w,a1 ; get RAM address for emeralds
00006988 7205                       		moveq	#5,d1
0000698A                            
0000698A                            @emeraldloop:
0000698A 1340 003E                  		move.b	d0,$3E(a1)
0000698E 3400                       		move.w	d0,d2
00006990 E742                       		asl.w	#3,d2
00006992 D529 0026                  		add.b	d2,obAngle(a1)
00006996 43E9 0040                  		lea	$40(a1),a1
0000699A 51C9 FFEE                  		dbf	d1,@emeraldloop
0000699E 5228 001A                  		addq.b	#1,obFrame(a0)
000069A2 317C 0070 0030             		move.w	#112,eegg_time(a0)
000069A8                            
000069A8                            EEgg_Wait:	; Routine 6
000069A8 5368 0030                  		subq.w	#1,eegg_time(a0) ; decrement timer
000069AC 6A00                       		bpl.s	@nochg		; branch if time remains
000069AE 0868 0000 001C             		bchg	#0,obAnim(a0)
000069B4 117C 0002 0024             		move.b	#2,obRoutine(a0) ; goto EEgg_Animate next
000069BA                            
000069BA                            	@nochg:
000069BA 4E75                       		rts	
000069BA 4E75                       		rts	
000069BC                            		include "_anim\Try Again & End Eggman.asm"
000069BC                            ; ---------------------------------------------------------------------------
000069BC                            ; Animation script - Eggman on the "TRY AGAIN" and "END" screens
000069BC                            ; ---------------------------------------------------------------------------
000069BC 0000                       Ani_EEgg:	dc.w @tryagain1-Ani_EEgg
000069BE 0000                       		dc.w @tryagain2-Ani_EEgg
000069C0 0000                       		dc.w @end-Ani_EEgg
000069C2 0500 FC01                  @tryagain1:	dc.b 5,	0, afRoutine, 1
000069C6 0502 FC03                  @tryagain2:	dc.b 5,	2, afRoutine, 3
000069CA 0704 0506 0504 0506 0504+  @end:		dc.b 7,	4, 5, 6, 5, 4, 5, 6, 5,	4, 5, 6, 5, 7, 5, 6, 5,	afEnd
000069DC                            		even
000069DC                            		even
000069DC                            		include	"_incObj\8C Try Again Emeralds.asm"
000069DC                            ; ---------------------------------------------------------------------------
000069DC                            ; Object 8C - chaos emeralds on	the "TRY AGAIN"	screen
000069DC                            ; ---------------------------------------------------------------------------
000069DC                            
000069DC                            TryChaos:
000069DC 7000                       		moveq	#0,d0
000069DE 1028 0024                  		move.b	obRoutine(a0),d0
000069E2 323B 0000                  		move.w	TCha_Index(pc,d0.w),d1
000069E6 4EBB 1000                  		jsr	TCha_Index(pc,d1.w)
000069EA 4EF9 0000 0000             		jmp	(DisplaySprite).l
000069F0                            ; ===========================================================================
000069F0 0000                       TCha_Index:	dc.w TCha_Main-TCha_Index
000069F2 0000                       		dc.w TCha_Move-TCha_Index
000069F4                            ; ===========================================================================
000069F4                            
000069F4                            TCha_Main:	; Routine 0
000069F4 2248                       		movea.l	a0,a1
000069F6 7400                       		moveq	#0,d2
000069F8 7600                       		moveq	#0,d3
000069FA 7205                       		moveq	#5,d1
000069FC 9238 FE57                  		sub.b	(v_emeralds).w,d1
00006A00                            
00006A00                            @makeemerald:
00006A00 12BC 0000                  		move.b	#id_TryChaos,(a1) ; load emerald object
00006A04 5429 0024                  		addq.b	#2,obRoutine(a1)
00006A08 237C 0000 67FC 0004        		move.l	#Map_ECha,obMap(a1)
00006A10 337C 03C5 0002             		move.w	#$3C5,obGfx(a1)
00006A16 137C 0000 0001             		move.b	#0,obRender(a1)
00006A1C 337C 0080 0018             		move.w	#$80,obPriority(a1)
00006A22 337C 0104 0008             		move.w	#$104,obX(a1)
00006A28 337C 0120 0038             		move.w	#$120,$38(a1)
00006A2E 337C 00EC 000A             		move.w	#$EC,obScreenY(a1)
00006A34 3369 000A 003A             		move.w	obScreenY(a1),$3A(a1)
00006A3A 137C 001C 003C             		move.b	#$1C,$3C(a1)
00006A40 47F8 FE58                  		lea	(v_emldlist).w,a3
00006A44                            
00006A44                            	@chkemerald:
00006A44 7000                       		moveq	#0,d0
00006A46 1038 FE57                  		move.b	(v_emeralds).w,d0
00006A4A 5340                       		subq.w	#1,d0
00006A4C 6500                       		bcs.s	@loc_5B42
00006A4E                            
00006A4E                            	@chkloop:
00006A4E B433 0000                  		cmp.b	(a3,d0.w),d2
00006A52 6600                       		bne.s	@notgot
00006A54 5202                       		addq.b	#1,d2
00006A56 60EC                       		bra.s	@chkemerald
00006A58                            ; ===========================================================================
00006A58                            
00006A58                            	@notgot:
00006A58 51C8 FFF4                  		dbf	d0,@chkloop
00006A5C                            
00006A5C                            @loc_5B42:
00006A5C 1342 001A                  		move.b	d2,obFrame(a1)
00006A60 5229 001A                  		addq.b	#1,obFrame(a1)
00006A64 5202                       		addq.b	#1,d2
00006A66 137C 0080 0026             		move.b	#$80,obAngle(a1)
00006A6C 1343 001E                  		move.b	d3,obTimeFrame(a1)
00006A70 1343 001F                  		move.b	d3,obDelayAni(a1)
00006A74 0643 000A                  		addi.w	#10,d3
00006A78 43E9 0040                  		lea	$40(a1),a1
00006A7C 51C9 FF82                  		dbf	d1,@makeemerald	; repeat 5 times
00006A80                            
00006A80                            TCha_Move:	; Routine 2
00006A80 4A68 003E                  		tst.w	$3E(a0)
00006A84 6700                       		beq.s	locret_5BBA
00006A86 4A28 001E                  		tst.b	obTimeFrame(a0)
00006A8A 6700                       		beq.s	loc_5B78
00006A8C 5328 001E                  		subq.b	#1,obTimeFrame(a0)
00006A90 6600                       		bne.s	loc_5B80
00006A92                            
00006A92                            loc_5B78:
00006A92 3028 003E                  		move.w	$3E(a0),d0
00006A96 D168 0026                  		add.w	d0,obAngle(a0)
00006A9A                            
00006A9A                            loc_5B80:
00006A9A 1028 0026                  		move.b	obAngle(a0),d0
00006A9E 6700                       		beq.s	loc_5B8C
00006AA0 0C00 0080                  		cmpi.b	#$80,d0
00006AA4 6600                       		bne.s	loc_5B96
00006AA6                            
00006AA6                            loc_5B8C:
00006AA6 4268 003E                  		clr.w	$3E(a0)
00006AAA 1168 001F 001E             		move.b	obDelayAni(a0),obTimeFrame(a0)
00006AB0                            
00006AB0                            loc_5B96:
00006AB0 4EB9 0000 3A82             		jsr	(CalcSine).l
00006AB6 7800                       		moveq	#0,d4
00006AB8 1828 003C                  		move.b	$3C(a0),d4
00006ABC C3C4                       		muls.w	d4,d1
00006ABE E081                       		asr.l	#8,d1
00006AC0 C1C4                       		muls.w	d4,d0
00006AC2 E080                       		asr.l	#8,d0
00006AC4 D268 0038                  		add.w	$38(a0),d1
00006AC8 D068 003A                  		add.w	$3A(a0),d0
00006ACC 3141 0008                  		move.w	d1,obX(a0)
00006AD0 3140 000A                  		move.w	d0,obScreenY(a0)
00006AD4                            
00006AD4                            locret_5BBA:
00006AD4 4E75                       		rts	
00006AD4 4E75                       		rts	
00006AD6                            Map_EEgg:	include	"_maps\Try Again & End Eggman.asm"
00006AD6                            ; ---------------------------------------------------------------------------
00006AD6                            ; Sprite mappings - Robotnik on	the "TRY AGAIN"	and "END" screens
00006AD6                            ; ---------------------------------------------------------------------------
00006AD6                            Map_EEgg_internal:
00006AD6 0000                       		dc.w M_EEgg_Try1-Map_EEgg_internal
00006AD8 0000                       		dc.w M_EEgg_Try2-Map_EEgg_internal
00006ADA 0000                       		dc.w M_EEgg_Try3-Map_EEgg_internal
00006ADC 0000                       		dc.w M_EEgg_Try4-Map_EEgg_internal
00006ADE 0000                       		dc.w M_EEgg_End1-Map_EEgg_internal
00006AE0 0000                       		dc.w M_EEgg_End2-Map_EEgg_internal
00006AE2 0000                       		dc.w M_EEgg_End3-Map_EEgg_internal
00006AE4 0000                       		dc.w M_EEgg_End4-Map_EEgg_internal
00006AE6 08                         M_EEgg_Try1:	dc.b 8
00006AE7 E905 0000 F0               		dc.b $E9, 5, 0,	0, $F0
00006AEC F90C 0004 E0               		dc.b $F9, $C, 0, 4, $E0
00006AF1 E904 0008 00               		dc.b $E9, 4, 0,	8, 0
00006AF6 F10D 000A 00               		dc.b $F1, $D, 0, $A, 0
00006AFB 0106 0023 F0               		dc.b 1,	6, 0, $23, $F0
00006B00 0106 0823 00               		dc.b 1,	6, 8, $23, 0
00006B05 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
00006B0A 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
00006B0F 08                         M_EEgg_Try2:	dc.b 8
00006B10 E80D 0012 E0               		dc.b $E8, $D, 0, $12, $E0
00006B15 F808 001A E8               		dc.b $F8, 8, 0,	$1A, $E8
00006B1A E805 0800 00               		dc.b $E8, 5, 8,	0, 0
00006B1F F80C 0804 00               		dc.b $F8, $C, 8, 4, 0
00006B24 0006 001D F0               		dc.b 0,	6, 0, $1D, $F0
00006B29 0006 081D 00               		dc.b 0,	6, 8, $1D, 0
00006B2E 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
00006B33 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
00006B38 08                         M_EEgg_Try3:	dc.b 8
00006B39 E904 0808 F0               		dc.b $E9, 4, 8,	8, $F0
00006B3E F10D 080A E0               		dc.b $F1, $D, 8, $A, $E0
00006B43 E905 0800 00               		dc.b $E9, 5, 8,	0, 0
00006B48 F90C 0804 00               		dc.b $F9, $C, 8, 4, 0
00006B4D 0106 0023 F0               		dc.b 1,	6, 0, $23, $F0
00006B52 0106 0823 00               		dc.b 1,	6, 8, $23, 0
00006B57 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
00006B5C 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
00006B61 08                         M_EEgg_Try4:	dc.b 8
00006B62 E805 0000 F0               		dc.b $E8, 5, 0,	0, $F0
00006B67 F80C 0004 E0               		dc.b $F8, $C, 0, 4, $E0
00006B6C E80D 0812 00               		dc.b $E8, $D, 8, $12, 0
00006B71 F808 081A 00               		dc.b $F8, 8, 8,	$1A, 0
00006B76 0006 001D F0               		dc.b 0,	6, 0, $1D, $F0
00006B7B 0006 081D 00               		dc.b 0,	6, 8, $1D, 0
00006B80 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
00006B85 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
00006B8A 0C                         M_EEgg_End1:	dc.b $C
00006B8B ED0A 002B E8               		dc.b $ED, $A, 0, $2B, $E8
00006B90 F500 0034 E0               		dc.b $F5, 0, 0,	$34, $E0
00006B95 0504 0035 F0               		dc.b 5,	4, 0, $35, $F0
00006B9A 0D08 0037 E8               		dc.b $D, 8, 0, $37, $E8
00006B9F ED0A 082B 00               		dc.b $ED, $A, 8, $2B, 0
00006BA4 F500 0834 18               		dc.b $F5, 0, 8,	$34, $18
00006BA9 0504 0835 00               		dc.b 5,	4, 8, $35, 0
00006BAE 0D08 0837 00               		dc.b $D, 8, 8, $37, 0
00006BB3 100D 0073 E0               		dc.b $10, $D, 0, $73, $E0
00006BB8 100D 007B 00               		dc.b $10, $D, 0, $7B, 0
00006BBD 1C0C 005B E0               		dc.b $1C, $C, 0, $5B, $E0
00006BC2 1C0C 085B 00               		dc.b $1C, $C, 8, $5B, 0
00006BC7 0A                         M_EEgg_End2:	dc.b $A
00006BC8 D207 003A F0               		dc.b $D2, 7, 0,	$3A, $F0
00006BCD DA00 0042 E8               		dc.b $DA, 0, 0,	$42, $E8
00006BD2 F207 0043 F0               		dc.b $F2, 7, 0,	$43, $F0
00006BD7 D207 083A 00               		dc.b $D2, 7, 8,	$3A, 0
00006BDC DA00 0842 10               		dc.b $DA, 0, 8,	$42, $10
00006BE1 F207 0843 00               		dc.b $F2, 7, 8,	$43, 0
00006BE6 100D 0067 E8               		dc.b $10, $D, 0, $67, $E8
00006BEB 1005 006F 08               		dc.b $10, 5, 0,	$6F, 8
00006BF0 1C0C 005F E0               		dc.b $1C, $C, 0, $5F, $E0
00006BF5 1C0C 085F 00               		dc.b $1C, $C, 8, $5F, 0
00006BFA 0A                         M_EEgg_End3:	dc.b $A
00006BFB C40B 004B E8               		dc.b $C4, $B, 0, $4B, $E8
00006C00 E408 0057 E8               		dc.b $E4, 8, 0,	$57, $E8
00006C05 EC00 005A F0               		dc.b $EC, 0, 0,	$5A, $F0
00006C0A C40B 084B 00               		dc.b $C4, $B, 8, $4B, 0
00006C0F E408 0857 00               		dc.b $E4, 8, 8,	$57, 0
00006C14 EC00 085A 08               		dc.b $EC, 0, 8,	$5A, 8
00006C19 100D 0067 E8               		dc.b $10, $D, 0, $67, $E8
00006C1E 1005 006F 08               		dc.b $10, 5, 0,	$6F, 8
00006C23 1C0C 0063 E0               		dc.b $1C, $C, 0, $63, $E0
00006C28 1C0C 0863 00               		dc.b $1C, $C, 8, $63, 0
00006C2D 0C                         M_EEgg_End4:	dc.b $C
00006C2E F40A 002B E8               		dc.b $F4, $A, 0, $2B, $E8
00006C33 FC00 0034 E0               		dc.b $FC, 0, 0,	$34, $E0
00006C38 0C04 0035 F0               		dc.b $C, 4, 0, $35, $F0
00006C3D 1408 0037 E8               		dc.b $14, 8, 0,	$37, $E8
00006C42 F40A 082B 00               		dc.b $F4, $A, 8, $2B, 0
00006C47 FC00 0834 18               		dc.b $FC, 0, 8,	$34, $18
00006C4C 0C04 0835 00               		dc.b $C, 4, 8, $35, 0
00006C51 1408 0837 00               		dc.b $14, 8, 8,	$37, 0
00006C56 180C 0083 E0               		dc.b $18, $C, 0, $83, $E0
00006C5B 180C 0087 00               		dc.b $18, $C, 0, $87, 0
00006C60 1C0C 005B E0               		dc.b $1C, $C, 0, $5B, $E0
00006C65 1C0C 085B 00               		dc.b $1C, $C, 8, $5B, 0
00006C6A                            		even
00006C6A                            		even
00006C6A                            
00006C6A                            ; ---------------------------------------------------------------------------
00006C6A                            ; Ending sequence demos
00006C6A                            ; ---------------------------------------------------------------------------
00006C6A                            Demo_EndGHZ1:	incbin	"demodata\Ending - GHZ1.bin"
00006C98                            		even
00006C98                            Demo_EndMZ:	incbin	"demodata\Ending - MZ.bin"
00006CD8                            		even
00006CD8                            Demo_EndSYZ:	incbin	"demodata\Ending - SYZ.bin"
00006D08                            		even
00006D08                            Demo_EndLZ:	incbin	"demodata\Ending - LZ.bin"
00006D38                            		even
00006D38                            Demo_EndSLZ:	incbin	"demodata\Ending - SLZ.bin"
00006D58                            		even
00006D58                            Demo_EndSBZ1:	incbin	"demodata\Ending - SBZ1.bin"
00006D78                            		even
00006D78                            Demo_EndSBZ2:	incbin	"demodata\Ending - SBZ2.bin"
00006DA8                            		even
00006DA8                            Demo_EndGHZ2:	incbin	"demodata\Ending - GHZ2.bin"
00006DD8                            		even
00006DD8                            
00006DD8                            		include	"_inc\LevelSizeLoad & BgScrollSpeed (JP1).asm"
00006DD8                            ; ---------------------------------------------------------------------------
00006DD8                            ; Subroutine to	load level boundaries and start	locations
00006DD8                            ; ---------------------------------------------------------------------------
00006DD8                            
00006DD8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006DD8                            
00006DD8                            
00006DD8                            LevelSizeLoad:
00006DD8 7000                       		moveq	#0,d0
00006DDA 11C0 F740                  		move.b	d0,($FFFFF740).w
00006DDE 11C0 F741                  		move.b	d0,($FFFFF741).w
00006DE2 11C0 F746                  		move.b	d0,($FFFFF746).w
00006DE6 11C0 F748                  		move.b	d0,($FFFFF748).w
00006DEA 11C0 F742                  		move.b	d0,(v_dle_routine).w
00006DEE 3038 FE10                  		move.w	(v_zone).w,d0
00006DF2 ED08                       		lsl.b	#6,d0
00006DF4 E848                       		lsr.w	#4,d0
00006DF6 3200                       		move.w	d0,d1
00006DF8 D040                       		add.w	d0,d0
00006DFA D041                       		add.w	d1,d0
00006DFC 41FB 0000                  		lea	LevelSizeArray(pc,d0.w),a0 ; load level	boundaries
00006E00 3018                       		move.w	(a0)+,d0
00006E02 31C0 F730                  		move.w	d0,($FFFFF730).w
00006E06 2018                       		move.l	(a0)+,d0
00006E08 21C0 F728                  		move.l	d0,(v_limitleft2).w
00006E0C 21C0 F720                  		move.l	d0,(v_limitleft1).w
00006E10 2018                       		move.l	(a0)+,d0
00006E12 21C0 F72C                  		move.l	d0,(v_limittop2).w
00006E16 21C0 F724                  		move.l	d0,(v_limittop1).w
00006E1A 3038 F728                  		move.w	(v_limitleft2).w,d0
00006E1E 0640 0240                  		addi.w	#$240,d0
00006E22 31C0 F732                  		move.w	d0,(v_limitleft3).w
00006E26 31FC 1010 F74A             		move.w	#$1010,($FFFFF74A).w
00006E2C 3018                       		move.w	(a0)+,d0
00006E2E 31C0 F73E                  		move.w	d0,(v_lookshift).w
00006E32 31FC 00A0 F7A0             		move.w    #160,(v_camera_pan).w    ; reset the horizontal camera pan value to 160 pixels
00006E38 6000 0000                  		bra.w	LevSz_ChkLamp
00006E3C                            
00006E3C                            ; ===========================================================================
00006E3C                            ; ---------------------------------------------------------------------------
00006E3C                            ; Level size array
00006E3C                            ; ---------------------------------------------------------------------------
00006E3C                            LevelSizeArray:
00006E3C                            		; GHZ
00006E3C 0004 0000 4470 0000 0400+  		dc.w $0004, $0000, $4470, $0000, $0400, $0060
00006E48 0004 0000 2960 0000 0300+  		dc.w $0004, $0000, $2960, $0000, $0300, $0060
00006E54 0004 0000 2960 0000 0300+  		dc.w $0004, $0000, $2960, $0000, $0300, $0060
00006E60 0004 0000 7EC0 0000 0400+  		dc.w $0004, $0000, $7EC0, $0000, $0400, $0060
00006E6C                            		; LZ
00006E6C 0004 0000 19AF 0000 0530+  		dc.w $0004, $0000, $19AF, $0000, $0530, $0060
00006E78 0004 0000 10AF 0000 0720+  		dc.w $0004, $0000, $10AF, $0000, $0720, $0060
00006E84 0004 0000 202F FF00 0800+  		dc.w $0004, $0000, $202F, $FF00, $0800, $0060
00006E90 0004 0000 20BF 0000 0720+  		dc.w $0004, $0000, $20BF, $0000, $0720, $0060
00006E9C                            		; MZ
00006E9C 0004 0000 21C0 0000 0520+  		dc.w $0004, $0000, $21C0, $0000, $0520, $0060
00006EA8 0004 0000 25E0 0000 0520+  		dc.w $0004, $0000, $25E0, $0000, $0520, $0060
00006EB4 0004 0000 1800 0000 0720+  		dc.w $0004, $0000, $1800, $0000, $0720, $0060
00006EC0 0004 0000 16BF 0000 0720+  		dc.w $0004, $0000, $16BF, $0000, $0720, $0060
00006ECC                            		; SLZ
00006ECC 0004 0000 1FBF 0000 0640+  		dc.w $0004, $0000, $1FBF, $0000, $0640, $0060
00006ED8 0004 0000 1FBF 0000 0640+  		dc.w $0004, $0000, $1FBF, $0000, $0640, $0060
00006EE4 0004 0000 2000 0000 0640+  		dc.w $0004, $0000, $2000, $0000, $0640, $0060
00006EF0 0004 0000 3EC0 0000 0720+  		dc.w $0004, $0000, $3EC0, $0000, $0720, $0060
00006EFC                            		; SYZ
00006EFC 0004 0000 22C0 0000 0520+  		dc.w $0004, $0000, $22C0, $0000, $0520, $0060
00006F08 0004 0000 28C0 0000 0520+  		dc.w $0004, $0000, $28C0, $0000, $0520, $0060
00006F14 0004 0000 2C00 0000 0620+  		dc.w $0004, $0000, $2C00, $0000, $0620, $0060
00006F20 0004 0000 2EC0 0000 0620+  		dc.w $0004, $0000, $2EC0, $0000, $0620, $0060
00006F2C                            		; SBZ
00006F2C 0004 0000 21C0 0000 0720+  		dc.w $0004, $0000, $21C0, $0000, $0720, $0060
00006F38 0004 0000 1E40 0000 0800+  		dc.w $0004, $0000, $1E40, $0000, $0800, $0060
00006F44 0004 2080 2460 0510 0510+  		dc.w $0004, $2080, $2460, $0510, $0510, $0060
00006F50 0004 0000 3EC0 0000 0720+  		dc.w $0004, $0000, $3EC0, $0000, $0720, $0060
00006F5C                            		; Ending
00006F5C 0004 0000 0500 0110 0110+  		dc.w $0004, $0000, $0500, $0110, $0110, $0060
00006F68 0004 0000 0DC0 0110 0110+  		dc.w $0004, $0000, $0DC0, $0110, $0110, $0060
00006F74 0004 0000 2FFF 0000 0320+  		dc.w $0004, $0000, $2FFF, $0000, $0320, $0060
00006F80 0004 0000 2FFF 0000 0320+  		dc.w $0004, $0000, $2FFF, $0000, $0320, $0060
00006F8C                            
00006F8C                            ; ---------------------------------------------------------------------------
00006F8C                            ; Ending start location array
00006F8C                            ; ---------------------------------------------------------------------------
00006F8C                            EndingStLocArray:
00006F8C                            		include	"_inc\Start Location Array - Ending.asm"
00006F8C                            ; ---------------------------------------------------------------------------
00006F8C                            ; Ending start location array
00006F8C                            ; ---------------------------------------------------------------------------
00006F8C                            
00006F8C                            		incbin	"startpos\ghz1 (Credits demo 1).bin"
00006F90                            		incbin	"startpos\mz2 (Credits demo).bin"
00006F94                            		incbin	"startpos\syz3 (Credits demo).bin"
00006F98                            		incbin	"startpos\lz3 (Credits demo).bin"
00006F9C                            		incbin	"startpos\slz3 (Credits demo).bin"
00006FA0                            		incbin	"startpos\sbz1 (Credits demo).bin"
00006FA4                            		incbin	"startpos\sbz2 (Credits demo).bin"
00006FA8                            		incbin	"startpos\ghz1 (Credits demo 2).bin"
00006FAC                            		even
00006FAC                            		even
00006FAC                            
00006FAC                            ; ===========================================================================
00006FAC                            
00006FAC                            LevSz_ChkLamp:
00006FAC 4A38 FE30                  		tst.b	(v_lastlamp).w	; have any lampposts been hit?
00006FB0 6700                       		beq.s	LevSz_StartLoc	; if not, branch
00006FB2                            
00006FB2 4EB9 0000 0000             		jsr	(Lamp_LoadInfo).l
00006FB8 3238 D008                  		move.w	(v_player+obX).w,d1
00006FBC 3038 D00C                  		move.w	(v_player+obY).w,d0
00006FC0 6000                       		bra.s	LevSz_SkipStartPos
00006FC2                            ; ===========================================================================
00006FC2                            
00006FC2                            LevSz_StartLoc:
00006FC2 3038 FE10                  		move.w	(v_zone).w,d0
00006FC6 ED08                       		lsl.b	#6,d0
00006FC8 E848                       		lsr.w	#4,d0
00006FCA 43FB 0000                  		lea	StartLocArray(pc,d0.w),a1 ; load Sonic's start location
00006FCE 4A78 FFF0                  		tst.w	(f_demo).w	; is ending demo mode on?
00006FD2 6A00                       		bpl.s	LevSz_SonicPos	; if not, branch
00006FD4                            
00006FD4 3038 FFF4                  		move.w	(v_creditsnum).w,d0
00006FD8 5340                       		subq.w	#1,d0
00006FDA E548                       		lsl.w	#2,d0
00006FDC 43FB 00AE                  		lea	EndingStLocArray(pc,d0.w),a1 ; load Sonic's start location
00006FE0                            
00006FE0                            LevSz_SonicPos:
00006FE0 7200                       		moveq	#0,d1
00006FE2 3219                       		move.w	(a1)+,d1
00006FE4 31C1 D008                  		move.w	d1,(v_player+obX).w ; set Sonic's position on x-axis
00006FE8 7000                       		moveq	#0,d0
00006FEA 3011                       		move.w	(a1),d0
00006FEC 31C0 D00C                  		move.w	d0,(v_player+obY).w ; set Sonic's position on y-axis
00006FF0                            
00006FF0                            SetScreen:
00006FF0                            	LevSz_SkipStartPos:
00006FF0 4278 F7A8                  		clr.w (v_trackpos).w ; reset Sonic's position tracking index 
00006FF4 45F8 CB00                  		lea (v_tracksonic).w,a2 ; load the tracking array into a2 
00006FF8 743F                       		moveq #63,d2 ; begin a 64-step loop 
00006FFA                            @looppoint: 
00006FFA 34C1                       		move.w d1,(a2)+ ; fill in X 
00006FFC 34C0                       		move.w d0,(a2)+ ; fill in Y 
00006FFE 51CA FFFA                  		dbf d2,@looppoint ; loop	
00007002 0441 00A0                  		subi.w	#160,d1		; is Sonic more than 160px from left edge?
00007006 6400                       		bcc.s	SetScr_WithinLeft ; if yes, branch
00007008 7200                       		moveq	#0,d1
0000700A                            
0000700A                            	SetScr_WithinLeft:
0000700A 3438 F72A                  		move.w	(v_limitright2).w,d2
0000700E B242                       		cmp.w	d2,d1		; is Sonic inside the right edge?
00007010 6500                       		bcs.s	SetScr_WithinRight ; if yes, branch
00007012 3202                       		move.w	d2,d1
00007014                            
00007014                            	SetScr_WithinRight:
00007014 31C1 F700                  		move.w	d1,(v_screenposx).w ; set horizontal screen position
00007018                            
00007018 0440 0060                  		subi.w	#96,d0		; is Sonic within 96px of upper edge?
0000701C 6400                       		bcc.s	SetScr_WithinTop ; if yes, branch
0000701E 7000                       		moveq	#0,d0
00007020                            
00007020                            	SetScr_WithinTop:
00007020 B078 F72E                  		cmp.w	(v_limitbtm2).w,d0 ; is Sonic above the bottom edge?
00007024 6D00                       		blt.s	SetScr_WithinBottom ; if yes, branch
00007026 3038 F72E                  		move.w	(v_limitbtm2).w,d0
0000702A                            
0000702A                            	SetScr_WithinBottom:
0000702A 31C0 F704                  		move.w	d0,(v_screenposy).w ; set vertical screen position
0000702E 6100 0000                  		bsr.w	BgScrollSpeed
00007032 7000                       		moveq	#0,d0
00007034 1038 FE10                  		move.b	(v_zone).w,d0
00007038 E508                       		lsl.b	#2,d0
0000703A 21FB 0000 F7AC             		move.l	LoopTileNums(pc,d0.w),(v_256loop1).w
00007040 4E75                       		rts
00007042                            ; ===========================================================================
00007042                            ; ---------------------------------------------------------------------------
00007042                            ; Sonic start location array
00007042                            ; ---------------------------------------------------------------------------
00007042                            StartLocArray:	include	"_inc\Start Location Array - Levels.asm"
00007042                            ; ---------------------------------------------------------------------------
00007042                            ; Sonic start location array
00007042                            ; ---------------------------------------------------------------------------
00007042                            
00007042                            		incbin	"startpos\ghz1.bin"
00007046                            		incbin	"startpos\ghz2.bin"
0000704A                            		incbin	"startpos\ghz3.bin"
0000704E 0080 00A8                  		dc.w	$80,$A8
00007052                            
00007052                            		incbin	"startpos\lz1.bin"
00007056                            		incbin	"startpos\lz2.bin"
0000705A                            		incbin	"startpos\lz3.bin"
0000705E                            		incbin	"startpos\sbz3.bin"
00007062                            
00007062                            		incbin	"startpos\mz1.bin"
00007066                            		incbin	"startpos\mz2.bin"
0000706A                            		incbin	"startpos\mz3.bin"
0000706E 0080 00A8                  		dc.w	$80,$A8
00007072                            
00007072                            		incbin	"startpos\slz1.bin"
00007076                            		incbin	"startpos\slz2.bin"
0000707A                            		incbin	"startpos\slz3.bin"
0000707E 0080 00A8                  		dc.w	$80,$A8
00007082                            
00007082                            		incbin	"startpos\syz1.bin"
00007086                            		incbin	"startpos\syz2.bin"
0000708A                            		incbin	"startpos\syz3.bin"
0000708E 0080 00A8                  		dc.w	$80,$A8
00007092                            
00007092                            		incbin	"startpos\sbz1.bin"
00007096                            		incbin	"startpos\sbz2.bin"
0000709A                            		incbin	"startpos\fz.bin"
0000709E 0080 00A8                  		dc.w	$80,$A8
000070A2                            
000070A2                            
000070A2                            		incbin	"startpos\end1.bin"
000070A6                            		incbin	"startpos\end2.bin"
000070AA 0080 00A8                  		dc.w	$80,$A8
000070AE 0080 00A8                  		dc.w	$80,$A8
000070B2                            
000070B2                            		even
000070B2                            		even
000070B2                            
000070B2                            ; ---------------------------------------------------------------------------
000070B2                            ; Which	256x256	tiles contain loops or roll-tunnels
000070B2                            ; ---------------------------------------------------------------------------
000070B2                            
000070B2                            LoopTileNums:
000070B2                            
000070B2                            ; 		loop	loop	tunnel	tunnel
000070B2                            
000070B2 B5C0 1F20                  	dc.b	$B5,	$C0,	$1F,	$20	; Green Hill
000070B6 7F7F 7F7F                  	dc.b	$7F,	$7F,	$7F,	$7F	; Labyrinth
000070BA 7F7F 7F7F                  	dc.b	$7F,	$7F,	$7F,	$7F	; Marble
000070BE AAB4 7F7F                  	dc.b	$AA,	$B4,	$7F,	$7F	; Star Light
000070C2 7F7F 7F7F                  	dc.b	$7F,	$7F,	$7F,	$7F	; Spring Yard
000070C6 7F7F 7F7F                  	dc.b	$7F,	$7F,	$7F,	$7F	; Scrap Brain
000070CA 7F7F 7F7F                  	dc.b	$7F,	$7F,	$7F,	$7F	; Ending (Green Hill)
000070CE                            
000070CE                            		even
000070CE                            
000070CE                            ; ---------------------------------------------------------------------------
000070CE                            ; Subroutine to	set scroll speed of some backgrounds
000070CE                            ; ---------------------------------------------------------------------------
000070CE                            
000070CE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000070CE                            
000070CE                            
000070CE                            BgScrollSpeed:
000070CE 4A38 FE30                  		tst.b	(v_lastlamp).w
000070D2 6600                       		bne.s	loc_6206
000070D4 31C0 F70C                  		move.w	d0,(v_bgscreenposy).w
000070D8 31C0 F714                  		move.w	d0,(v_bg2screenposy).w
000070DC 31C1 F708                  		move.w	d1,(v_bgscreenposx).w
000070E0 31C1 F710                  		move.w	d1,(v_bg2screenposx).w
000070E4 31C1 F718                  		move.w	d1,(v_bg3screenposx).w
000070E8                            
000070E8                            loc_6206:
000070E8 7400                       		moveq	#0,d2
000070EA 1438 FE10                  		move.b	(v_zone).w,d2
000070EE D442                       		add.w	d2,d2
000070F0 343B 2000                  		move.w	BgScroll_Index(pc,d2.w),d2
000070F4 4EFB 2000                  		jmp	BgScroll_Index(pc,d2.w)
000070F8                            ; End of function BgScrollSpeed
000070F8                            
000070F8                            ; ===========================================================================
000070F8 0000 0000                  BgScroll_Index:	dc.w BgScroll_GHZ-BgScroll_Index, BgScroll_LZ-BgScroll_Index
000070FC 0000 0000                  		dc.w BgScroll_MZ-BgScroll_Index, BgScroll_SLZ-BgScroll_Index
00007100 0000 0000                  		dc.w BgScroll_SYZ-BgScroll_Index, BgScroll_SBZ-BgScroll_Index
00007104 0000                       		dc.w BgScroll_End-BgScroll_Index
00007106                            ; ===========================================================================
00007106                            
00007106                            BgScroll_GHZ:
00007106 42B8 F708                  		clr.l	(v_bgscreenposx).w
0000710A 42B8 F70C                  		clr.l	(v_bgscreenposy).w
0000710E 42B8 F714                  		clr.l	(v_bg2screenposy).w
00007112 42B8 F71C                  		clr.l	(v_bg3screenposy).w
00007116 45F8 A800                  		lea	($FFFFA800).w,a2
0000711A 429A                       		clr.l	(a2)+
0000711C 429A                       		clr.l	(a2)+
0000711E 429A                       		clr.l	(a2)+
00007120 4E75                       		rts
00007122                            ; ===========================================================================
00007122                            
00007122                            BgScroll_LZ:
00007122 E280                       		asr.l	#1,d0
00007124 31C0 F70C                  		move.w	d0,(v_bgscreenposy).w
00007128 4E75                       		rts	
0000712A                            ; ===========================================================================
0000712A                            
0000712A                            BgScroll_MZ:
0000712A 4E75                       		rts	
0000712C                            ; ===========================================================================
0000712C                            
0000712C                            BgScroll_SLZ:
0000712C E280                       		asr.l	#1,d0
0000712E 0640 00C0                  		addi.w	#$C0,d0
00007132 31C0 F70C                  		move.w	d0,(v_bgscreenposy).w
00007136 42B8 F708                  		clr.l	(v_bgscreenposx).w
0000713A 4E75                       		rts	
0000713C                            ; ===========================================================================
0000713C                            
0000713C                            BgScroll_SYZ:
0000713C E980                       		asl.l	#4,d0
0000713E 2400                       		move.l	d0,d2
00007140 E380                       		asl.l	#1,d0
00007142 D082                       		add.l	d2,d0
00007144 E080                       		asr.l	#8,d0
00007146 5240                       		addq.w	#1,d0
00007148 31C0 F70C                  		move.w	d0,(v_bgscreenposy).w
0000714C 42B8 F708                  		clr.l	(v_bgscreenposx).w
00007150 4E75                       		rts	
00007152                            ; ===========================================================================
00007152                            
00007152                            BgScroll_SBZ:
00007152 0240 07F8                  		andi.w	#$7F8,d0
00007156 E640                       		asr.w	#3,d0
00007158 5240                       		addq.w	#1,d0
0000715A 31C0 F70C                  		move.w	d0,(v_bgscreenposy).w
0000715E 4E75                       		rts	
00007160                            ; ===========================================================================
00007160                            
00007160                            BgScroll_End:
00007160 3038 F700                  		move.w	(v_screenposx).w,d0
00007164 E240                       		asr.w	#1,d0
00007166 31C0 F708                  		move.w	d0,(v_bgscreenposx).w
0000716A 31C0 F710                  		move.w	d0,(v_bg2screenposx).w
0000716E E440                       		asr.w	#2,d0
00007170 3200                       		move.w	d0,d1
00007172 D040                       		add.w	d0,d0
00007174 D041                       		add.w	d1,d0
00007176 31C0 F718                  		move.w	d0,(v_bg3screenposx).w
0000717A 42B8 F70C                  		clr.l	(v_bgscreenposy).w
0000717E 42B8 F714                  		clr.l	(v_bg2screenposy).w
00007182 42B8 F71C                  		clr.l	(v_bg3screenposy).w
00007186 45F8 A800                  		lea	($FFFFA800).w,a2
0000718A 429A                       		clr.l	(a2)+
0000718C 429A                       		clr.l	(a2)+
0000718E 429A                       		clr.l	(a2)+
00007190 4E75                       		rts
00007190 4E75                       		rts
00007192                            		include	"_inc\DeformLayers (JP1).asm"
00007192                            ; ---------------------------------------------------------------------------
00007192                            ; Background layer deformation subroutines
00007192                            ; ---------------------------------------------------------------------------
00007192                            
00007192                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007192                            
00007192                            
00007192                            DeformLayers:
00007192 4A38 F744                  		tst.b	(f_nobgscroll).w
00007196 6700                       		beq.s	@bgscroll
00007198 4E75                       		rts	
0000719A                            ; ===========================================================================
0000719A                            
0000719A                            	@bgscroll:
0000719A 4278 F754                  		clr.w	(v_fg_scroll_flags).w
0000719E 4278 F756                  		clr.w	(v_bg1_scroll_flags).w
000071A2 4278 F758                  		clr.w	(v_bg2_scroll_flags).w
000071A6 4278 F75A                  		clr.w	(v_bg3_scroll_flags).w
000071AA 6100 0000                  		bsr.w	ScrollHoriz
000071AE 6100 0000                  		bsr.w	ScrollVertical
000071B2 6100 0000                  		bsr.w	DynamicLevelEvents
000071B6 31F8 F704 F616             		move.w	(v_screenposy).w,(v_scrposy_dup).w
000071BC 31F8 F70C F618             		move.w	(v_bgscreenposy).w,(v_bgscrposy_dup).w
000071C2 7000                       		moveq	#0,d0
000071C4 1038 FE10                  		move.b	(v_zone).w,d0
000071C8 D040                       		add.w	d0,d0
000071CA 303B 0000                  		move.w	Deform_Index(pc,d0.w),d0
000071CE 4EFB 0000                  		jmp	Deform_Index(pc,d0.w)
000071D2                            ; End of function DeformLayers
000071D2                            
000071D2                            ; ===========================================================================
000071D2                            ; ---------------------------------------------------------------------------
000071D2                            ; Offset index for background layer deformation	code
000071D2                            ; ---------------------------------------------------------------------------
000071D2 0000 0000                  Deform_Index:	dc.w Deform_GHZ-Deform_Index, Deform_LZ-Deform_Index
000071D6 0000 0000                  		dc.w Deform_MZ-Deform_Index, Deform_SLZ-Deform_Index
000071DA 0000 0000                  		dc.w Deform_SYZ-Deform_Index, Deform_SBZ-Deform_Index
000071DE 0000                       		dc.w Deform_GHZ-Deform_Index
000071E0                            ; ---------------------------------------------------------------------------
000071E0                            ; Green	Hill Zone background layer deformation code
000071E0                            ; ---------------------------------------------------------------------------
000071E0                            
000071E0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000071E0                            
000071E0                            
000071E0                            Deform_GHZ:
000071E0                            	;cmpi.b    #id_Title,(v_gamemode).w
000071E0                            	;beq.w    Deform_Title
000071E0                            
000071E0                            ;Deform_GHZ_Stage:
000071E0                            	; block 3 - distant mountains
000071E0 3838 F73A                  		move.w	(v_scrshiftx).w,d4
000071E4 48C4                       		ext.l	d4
000071E6 EB84                       		asl.l	#5,d4
000071E8 2204                       		move.l	d4,d1
000071EA E384                       		asl.l	#1,d4
000071EC D881                       		add.l	d1,d4
000071EE 7C00                       		moveq	#0,d6
000071F0 6100 0000                  		bsr.w	BGScroll_Block3
000071F4                            	; block 2 - hills & waterfalls
000071F4 3838 F73A                  		move.w	(v_scrshiftx).w,d4
000071F8 48C4                       		ext.l	d4
000071FA EF84                       		asl.l	#7,d4
000071FC 7C00                       		moveq	#0,d6
000071FE 6100 0000                  		bsr.w	BGScroll_Block2
00007202                            	; calculate Y position
00007202 43F8 CC00                  		lea	(v_hscrolltablebuffer).w,a1
00007206 3038 F704                  		move.w	(v_screenposy).w,d0
0000720A 0240 07FF                  		andi.w	#$7FF,d0
0000720E EA48                       		lsr.w	#5,d0
00007210 4440                       		neg.w	d0
00007212 0640 0020                  		addi.w	#$20,d0
00007216 6A00                       		bpl.s	@limitY
00007218 7000                       		moveq	#0,d0
0000721A                            	@limitY:
0000721A 3800                       		move.w	d0,d4
0000721C 31C0 F618                  		move.w	d0,(v_bgscrposy_dup).w
00007220 3038 F700                  		move.w	(v_screenposx).w,d0
00007224 0C38 0000 F600             		cmpi.b	#id_Title,(v_gamemode).w
0000722A 6600                       		bne.s	@notTitle
0000722C 7000                       		moveq	#0,d0	; reset foreground position in title screen
0000722E                            	@notTitle:
0000722E 4440                       		neg.w	d0
00007230 4840                       		swap	d0
00007232                            	; auto-scroll clouds
00007232 45F8 A800                  		lea	(v_bgscroll_buffer).w,a2
00007236 069A 0001 0000             		addi.l	#$10000,(a2)+
0000723C 069A 0000 C000             		addi.l	#$C000,(a2)+
00007242 069A 0000 8000             		addi.l	#$8000,(a2)+
00007248                            	; calculate background scroll	
00007248 3038 A800                  		move.w	(v_bgscroll_buffer).w,d0
0000724C D078 F718                  		add.w	(v_bg3screenposx).w,d0
00007250 4440                       		neg.w	d0
00007252 323C 001F                  		move.w	#$1F,d1
00007256 9244                       		sub.w	d4,d1
00007258 6500                       		bcs.s	@gotoCloud2
0000725A                            	@cloudLoop1:		; upper cloud (32px)
0000725A 22C0                       		move.l	d0,(a1)+
0000725C 51C9 FFFC                  		dbf	d1,@cloudLoop1
00007260                            
00007260                            	@gotoCloud2:
00007260 3038 A804                  		move.w	(v_bgscroll_buffer+4).w,d0
00007264 D078 F718                  		add.w	(v_bg3screenposx).w,d0
00007268 4440                       		neg.w	d0
0000726A 323C 000F                  		move.w	#$F,d1
0000726E                            	@cloudLoop2:		; middle cloud (16px)
0000726E 22C0                       		move.l	d0,(a1)+
00007270 51C9 FFFC                  		dbf	d1,@cloudLoop2
00007274                            
00007274 3038 A808                  		move.w	(v_bgscroll_buffer+8).w,d0
00007278 D078 F718                  		add.w	(v_bg3screenposx).w,d0
0000727C 4440                       		neg.w	d0
0000727E 323C 000F                  		move.w	#$F,d1
00007282                            	@cloudLoop3:		; lower cloud (16px)
00007282 22C0                       		move.l	d0,(a1)+
00007284 51C9 FFFC                  		dbf	d1,@cloudLoop3
00007288                            
00007288 323C 002F                  		move.w	#$2F,d1
0000728C 3038 F718                  		move.w	(v_bg3screenposx).w,d0
00007290 4440                       		neg.w	d0
00007292                            	@mountainLoop:		; distant mountains (48px)
00007292 22C0                       		move.l	d0,(a1)+
00007294 51C9 FFFC                  		dbf	d1,@mountainLoop
00007298                            
00007298 323C 0027                  		move.w	#$27,d1
0000729C 3038 F710                  		move.w	(v_bg2screenposx).w,d0
000072A0 4440                       		neg.w	d0
000072A2                            	@hillLoop:			; hills & waterfalls (40px)
000072A2 22C0                       		move.l	d0,(a1)+
000072A4 51C9 FFFC                  		dbf	d1,@hillLoop
000072A8                            
000072A8 3038 F710                  		move.w	(v_bg2screenposx).w,d0
000072AC 3438 F700                  		move.w	(v_screenposx).w,d2
000072B0 9440                       		sub.w	d0,d2
000072B2 48C2                       		ext.l	d2
000072B4 E182                       		asl.l	#8,d2
000072B6 85FC 0068                  		divs.w	#$68,d2
000072BA 48C2                       		ext.l	d2
000072BC E182                       		asl.l	#8,d2
000072BE 7600                       		moveq	#0,d3
000072C0 3600                       		move.w	d0,d3
000072C2 323C 0047                  		move.w	#$47,d1
000072C6 D244                       		add.w	d4,d1
000072C8                            	@waterLoop:			; water deformation
000072C8 3003                       		move.w	d3,d0
000072CA 4440                       		neg.w	d0
000072CC 22C0                       		move.l	d0,(a1)+
000072CE 4843                       		swap	d3
000072D0 D682                       		add.l	d2,d3
000072D2 4843                       		swap	d3
000072D4 51C9 FFF2                  		dbf	d1,@waterLoop
000072D8 4E75                       		rts
000072DA                            ; End of function Deform_GHZ
000072DA                            
000072DA                            Deform_Title:
000072DA 3838 F73A                  		move.w	(v_scrshiftx).w,d4
000072DE 48C4                       		ext.l	d4
000072E0 EB84                       		asl.l	#5,d4
000072E2 2204                       		move.l	d4,d1
000072E4 E384                       		asl.l	#1,d4
000072E6 D881                       		add.l	d1,d4
000072E8 7A00                       		moveq	#0,d5
000072EA 6100 0000                  		bsr.w	BGScroll_Block1
000072EE 6100 0000                  		bsr.w	BGScroll_Block3
000072F2 43F8 CC00                  		lea	(v_hscrolltablebuffer).w,a1
000072F6 3038 F704                  		move.w	(v_screenposy).w,d0
000072FA 0240 07FF                  		andi.w	#$7FF,d0
000072FE EA48                       		lsr.w	#5,d0
00007300 4440                       		neg.w	d0
00007302 0640 0026                  		addi.w	#$26,d0
00007306 31C0 F714                  		move.w	d0,(v_bg2screenposy).w
0000730A 3800                       		move.w	d0,d4
0000730C 6100 0000                  		bsr.w	BGScroll_Block3
00007310 31F8 F70C F618             		move.w	(v_bgscreenposy).w,(v_bgscrposy_dup).w
00007316 323C 006F                  		move.w	#$6F,d1
0000731A 9244                       		sub.w	d4,d1
0000731C 3038 F700                  		move.w	(v_screenposx).w,d0
00007320 0C38 0000 F600             		cmpi.b	#id_Title,(v_gamemode).w
00007326 6600                       		bne.s	loc_633C
00007328 7000                       		moveq	#0,d0
0000732A                            
0000732A                            loc_633C:
0000732A 4440                       		neg.w	d0
0000732C 4840                       		swap	d0
0000732E 3038 F708                  		move.w	(v_bgscreenposx).w,d0
00007332 4440                       		neg.w	d0
00007334                            
00007334                            loc_6346:
00007334 22C0                       		move.l	d0,(a1)+
00007336 51C9 FFFC                  		dbf	d1,loc_6346
0000733A 323C 0027                  		move.w	#$27,d1
0000733E 3038 F710                  		move.w	(v_bg2screenposx).w,d0
00007342 4440                       		neg.w	d0
00007344                            
00007344                            loc_6356:
00007344 22C0                       		move.l	d0,(a1)+
00007346 51C9 FFFC                  		dbf	d1,loc_6356
0000734A 3038 F710                  		move.w	(v_bg2screenposx).w,d0
0000734E 0640 0000                  		addi.w	#0,d0
00007352 3438 F700                  		move.w	(v_screenposx).w,d2
00007356 0642 FE00                  		addi.w	#-$200,d2
0000735A 9440                       		sub.w	d0,d2
0000735C 48C2                       		ext.l	d2
0000735E E182                       		asl.l	#8,d2
00007360 85FC 0068                  		divs.w	#$68,d2
00007364 48C2                       		ext.l	d2
00007366 E182                       		asl.l	#8,d2
00007368 7600                       		moveq	#0,d3
0000736A 3600                       		move.w	d0,d3
0000736C 323C 0047                  		move.w	#$47,d1
00007370 D244                       		add.w	d4,d1
00007372                            
00007372                            loc_6384:
00007372 3003                       		move.w	d3,d0
00007374 4440                       		neg.w	d0
00007376 22C0                       		move.l	d0,(a1)+
00007378 4843                       		swap	d3
0000737A D682                       		add.l	d2,d3
0000737C 4843                       		swap	d3
0000737E 51C9 FFF2                  		dbf	d1,loc_6384
00007382 4E75                       		rts	
00007384                            
00007384                            ; ===========================================================================
00007384                            ; ---------------------------------------------------------------------------
00007384                            ; Scroll routine for Labyrinth Zone - optimised by MarkeyJester
00007384                            ; ---------------------------------------------------------------------------
00007384                             
00007384                            Deform_LZ:
00007384 7007                       		moveq	#$07,d0					; prepare multiplication 100 / 2 for BG scrolling
00007386 3838 F73A                  		move.w	(v_scrshiftx).w,d4			; load horizontal movement distance (Since last frame)
0000738A 48C4                       		ext.l	d4					; extend to long-word signed
0000738C E1A4                       		asl.l	d0,d4					; align as fixed point 16, but divide by 2 for BG
0000738E 3A38 F73C                  		move.w	(v_scrshifty).w,d5			; load vertical movement distance (Since last frame)
00007392 48C5                       		ext.l	d5					; extend to long-word signed
00007394 E1A5                       		asl.l	d0,d5					; align as fixed point 16, but divide by 2 for BG
00007396 6100 0000                  		bsr.w	BGScroll_Block1				; adjust BG scroll positions (and set draw code direction flags)
0000739A 31F8 F70C F618             		move.w	(v_bgscreenposy).w,(v_bgscrposy_dup).w		; set BG V-scroll position
000073A0 43F8 CC00                  		lea	(v_hscrolltablebuffer).w,a1			; load H-scroll buffer
000073A4 3038 F700                  		move.w	(v_screenposx).w,d0			; load FG X position
000073A8 4440                       		neg.w	d0					; reverse
000073AA 4840                       		swap	d0					; send to upper word
000073AC 3038 F708                  		move.w	(v_bgscreenposx).w,d0			; load BG X position
000073B0 4440                       		neg.w	d0					; reverse
000073B2 7600                       		moveq	#$00,d3					; clear d3
000073B4 1638 F7D8                  		move.b	(v_lz_deform).w,d3			; load wave-scroll timer
000073B8 0678 0080 F7D8             		addi.w	#$0080,(v_lz_deform).w			; increase wave-scroll timer
000073BE 343C 00E0                  		move.w	#$00E0,d2				; prepare water-line count
000073C2 3238 F646                  		move.w	(v_waterpos1).w,d1			; load water line position
000073C6 9278 F704                  		sub.w	(v_screenposy).w,d1			; minus FG Y position
000073CA 6B00                       		bmi.s	DLZ_Water				; if the screen is already underwater, branch
000073CC B242                       		cmp.w	d2,d1					; is the water line below the screen?
000073CE 6F00                       		ble.s	DLZ_NoWater				; if not, branch
000073D0 3202                       		move.w	d2,d1					; set at maximum
000073D2                             
000073D2                            DLZ_NoWater:
000073D2 9441                       		sub.w	d1,d2					; subtract from water-line count
000073D4 D601                       		add.b	d1,d3					; advance scroll wave timer to correct amount
000073D6 5301                       		subq.b	#$01,d1					; decrease above water count
000073D8 6500                       		bcs.s	DLZ_Water				; if finished, branch
000073DA                             
000073DA                            DLZ_Above:
000073DA 22C0                       		move.l	d0,(a1)+				; save scroll position to buffer
000073DC 51C9 FFFC                  		dbf	d1,DLZ_Above				; repeat for all above water lines
000073E0                             
000073E0                            DLZ_Water:
000073E0 5302                       		subq.b	#$01,d2					; decrease below water count
000073E2 6500                       		bcs.s	DLZ_Finish				; if finished, branch
000073E4 3200                       		move.w	d0,d1					; copy BG position back to d1
000073E6 4840                       		swap	d0					; move FG position back to lower word in d0
000073E8 3803                       		move.w	d3,d4					; copy sroll timer for BG use
000073EA D638 F705                  		add.b	(v_screenposy+$01).w,d3			; add FG Y position
000073EE D838 F70D                  		add.b	(v_bgscreenposy+$01).w,d4			; add BG Y position
000073F2 D643                       		add.w	d3,d3					; multiply by word size (2)
000073F4 D844                       		add.w	d4,d4					; ''
000073F6 47F9 0000 0000             		lea	(DLZ_WaveBG).l,a3			; load beginning of BG wave data
000073FC D6C4                       		adda.w	d4,a3					; advance to correct starting point
000073FE 1813                       		move.b	(a3),d4					; get current position byte
00007400 E404                       		asr.b	#$02,d4					; get only the position bits
00007402 4884                       		ext.w	d4					; extend to word
00007404 D244                       		add.w	d4,d1					; adjust BG's current position
00007406 45FB 3000                  		lea	DLZ_WaveFG(pc,d3.w),a2			; load correct starting point of FG wave data
0000740A 1812                       		move.b	(a2),d4					; get current position byte
0000740C E404                       		asr.b	#$02,d4					; get only the position bits
0000740E 4884                       		ext.w	d4					; extend to word
00007410 D044                       		add.w	d4,d0					; adjust FG's current position
00007412                             
00007412                            DLZ_Below:
00007412 D05A                       		add.w	(a2)+,d0				; alter FG horizontal position
00007414 32C0                       		move.w	d0,(a1)+				; save to scroll buffer
00007416 D25B                       		add.w	(a3)+,d1				; alter BG horizontal position
00007418 32C1                       		move.w	d1,(a1)+				; save to scroll buffer
0000741A 51CA FFF6                  		dbf	d2,DLZ_Below				; repeat for all below water lines
0000741E                             
0000741E                            DLZ_Finish:
0000741E 4E75                       		rts						; return
00007420                             
00007420                            ; ---------------------------------------------------------------------------
00007420                            ; Scroll data for the FG
00007420                            ; ---------------------------------------------------------------------------
00007420                             
00007420                            DLZ_WaveFG:
00007420                            		rept	$02
00007420                            		dc.w	$0001,$0400,$0401,$0800,$0801,$0C00,$0C00,$0C00,$0FFF,$0800,$0BFF,$0400,$07FF,$0000,$0000,$0000
00007420                            		dc.w	$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000
00007420                            		dc.w	$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000
00007420                            		dc.w	$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000
00007420                            		dc.w	$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000
00007420                            		dc.w	$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000
00007420                            		dc.w	$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000
00007420                            		dc.w	$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000
00007420                            		dc.w	$03FF,$FC00,$FFFF,$F800,$FBFF,$F400,$F400,$F400,$F401,$F800,$F801,$FC00,$FC01,$0000,$0000,$0000
00007420                            		dc.w	$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000
00007420                            		dc.w	$0001,$0400,$0401,$0800,$0801,$0C00,$0C00,$0C00,$0FFF,$0800,$0BFF,$0400,$07FF,$0000,$0000,$0000
00007420                            		dc.w	$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000
00007420                            		dc.w	$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000
00007420                            		dc.w	$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000
00007420                            		dc.w	$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000
00007420                            		dc.w	$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000
00007420 0001 0400 0401 0800 0801+  		endr
00007820                             
00007820                            ; ---------------------------------------------------------------------------
00007820                            ; Scroll data for the BG
00007820                            ; ---------------------------------------------------------------------------
00007820                             
00007820                            DLZ_WaveBG:	rept	$04
00007820                            		dc.w	$FC01,$0000,$0000,$0000,$0000,$0000,$0001,$0400,$0400,$0400,$0400,$0401,$0800,$0800,$0800,$0800
00007820                            		dc.w	$0800,$0800,$0801,$0C00,$0C00,$0C00,$0C00,$0C00,$0C00,$0C00,$0C00,$0C00,$0C00,$0C00,$0C00,$0C00
00007820                            		dc.w	$0C01,$13FF,$0C00,$0C00,$0C00,$0C00,$0C00,$0C00,$0C00,$0C00,$0C00,$0C00,$0C00,$0C00,$0C00,$0FFF
00007820                            		dc.w	$0800,$0800,$0800,$0800,$0800,$0800,$0BFF,$0400,$0400,$0400,$0400,$07FF,$0000,$0000,$0000,$0000
00007820                            		dc.w	$0000,$03FF,$FC00,$FC00,$FC00,$FC00,$FFFF,$F800,$F800,$F800,$F800,$FBFF,$F400,$F400,$F400,$F400
00007820                            		dc.w	$F400,$F400,$F7FF,$F000,$F000,$F000,$F000,$F000,$F000,$F000,$F000,$F000,$F000,$F000,$F000,$F000
00007820                            		dc.w	$F000,$F000,$F000,$F000,$F000,$F000,$F000,$F000,$F000,$F000,$F000,$F000,$F000,$F000,$F000,$F001
00007820                            		dc.w	$F400,$F400,$F400,$F400,$F400,$F400,$F401,$F800,$F800,$F800,$F800,$F801,$FC00,$FC00,$FC00,$FC00
00007820 FC01 0000 0000 0000 0000+  		endr
00007C20                             
00007C20                            ; ===========================================================================
00007C20                            ; End of function Deform_LZ
00007C20                            
00007C20                            ; ---------------------------------------------------------------------------
00007C20                            ; Marble Zone background layer deformation code
00007C20                            ; ---------------------------------------------------------------------------
00007C20                            
00007C20                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007C20                            
00007C20                            
00007C20                            Deform_MZ:
00007C20                            	; block 1 - dungeon interior
00007C20 3838 F73A                  		move.w	(v_scrshiftx).w,d4
00007C24 48C4                       		ext.l	d4
00007C26 ED84                       		asl.l	#6,d4
00007C28 2204                       		move.l	d4,d1
00007C2A E384                       		asl.l	#1,d4
00007C2C D881                       		add.l	d1,d4
00007C2E 7C02                       		moveq	#2,d6
00007C30 6100 0000                  		bsr.w	BGScroll_Block1
00007C34                            	; block 3 - mountains
00007C34 3838 F73A                  		move.w	(v_scrshiftx).w,d4
00007C38 48C4                       		ext.l	d4
00007C3A ED84                       		asl.l	#6,d4
00007C3C 7C06                       		moveq	#6,d6
00007C3E 6100 0000                  		bsr.w	BGScroll_Block3
00007C42                            	; block 2 - bushes & antique buildings
00007C42 3838 F73A                  		move.w	(v_scrshiftx).w,d4
00007C46 48C4                       		ext.l	d4
00007C48 EF84                       		asl.l	#7,d4
00007C4A 7C04                       		moveq	#4,d6
00007C4C 6100 0000                  		bsr.w	BGScroll_Block2
00007C50                            	; calculate y-position of background
00007C50 303C 0200                  		move.w	#$200,d0	; start with 512px, ignoring 2 chunks
00007C54 3238 F704                  		move.w	(v_screenposy).w,d1
00007C58 0441 01C8                  		subi.w	#$1C8,d1	; 0% scrolling when y <= 56px 
00007C5C 6500                       		bcs.s	@noYscroll
00007C5E 3401                       		move.w	d1,d2
00007C60 D241                       		add.w	d1,d1
00007C62 D242                       		add.w	d2,d1
00007C64 E441                       		asr.w	#2,d1
00007C66 D041                       		add.w	d1,d0
00007C68                            	@noYscroll:
00007C68 31C0 F714                  		move.w	d0,(v_bg2screenposy).w
00007C6C 31C0 F71C                  		move.w	d0,(v_bg3screenposy).w
00007C70 6100 0000                  		bsr.w	BGScroll_YAbsolute
00007C74 31F8 F70C F618             		move.w	(v_bgscreenposy).w,(v_bgscrposy_dup).w
00007C7A                            	; do something with redraw flags
00007C7A 1038 F756                  		move.b	(v_bg1_scroll_flags).w,d0
00007C7E 8038 F758                  		or.b	(v_bg2_scroll_flags).w,d0
00007C82 8138 F75A                  		or.b	d0,(v_bg3_scroll_flags).w
00007C86 4238 F756                  		clr.b	(v_bg1_scroll_flags).w
00007C8A 4238 F758                  		clr.b	(v_bg2_scroll_flags).w
00007C8E                            	; calculate background scroll buffer
00007C8E 43F8 A800                  		lea	(v_bgscroll_buffer).w,a1
00007C92 3438 F700                  		move.w	(v_screenposx).w,d2
00007C96 4442                       		neg.w	d2
00007C98 3002                       		move.w	d2,d0
00007C9A E440                       		asr.w	#2,d0
00007C9C 9042                       		sub.w	d2,d0
00007C9E 48C0                       		ext.l	d0
00007CA0 E780                       		asl.l	#3,d0
00007CA2 81FC 0005                  		divs.w	#5,d0
00007CA6 48C0                       		ext.l	d0
00007CA8 E980                       		asl.l	#4,d0
00007CAA E180                       		asl.l	#8,d0
00007CAC 7600                       		moveq	#0,d3
00007CAE 3602                       		move.w	d2,d3
00007CB0 E243                       		asr.w	#1,d3
00007CB2 323C 0004                  		move.w	#4,d1
00007CB6                            	@cloudLoop:		
00007CB6 32C3                       		move.w	d3,(a1)+
00007CB8 4843                       		swap	d3
00007CBA D680                       		add.l	d0,d3
00007CBC 4843                       		swap	d3
00007CBE 51C9 FFF6                  		dbf	d1,@cloudLoop
00007CC2                            
00007CC2 3038 F718                  		move.w	(v_bg3screenposx).w,d0
00007CC6 4440                       		neg.w	d0
00007CC8 323C 0001                  		move.w	#1,d1
00007CCC                            	@mountainLoop:		
00007CCC 32C0                       		move.w	d0,(a1)+
00007CCE 51C9 FFFC                  		dbf	d1,@mountainLoop
00007CD2                            
00007CD2 3038 F710                  		move.w	(v_bg2screenposx).w,d0
00007CD6 4440                       		neg.w	d0
00007CD8 323C 0008                  		move.w	#8,d1
00007CDC                            	@bushLoop:		
00007CDC 32C0                       		move.w	d0,(a1)+
00007CDE 51C9 FFFC                  		dbf	d1,@bushLoop
00007CE2                            
00007CE2 3038 F708                  		move.w	(v_bgscreenposx).w,d0
00007CE6 4440                       		neg.w	d0
00007CE8 323C 000F                  		move.w	#$F,d1
00007CEC                            	@interiorLoop:		
00007CEC 32C0                       		move.w	d0,(a1)+
00007CEE 51C9 FFFC                  		dbf	d1,@interiorLoop
00007CF2                            
00007CF2 45F8 A800                  		lea	(v_bgscroll_buffer).w,a2
00007CF6 3038 F70C                  		move.w	(v_bgscreenposy).w,d0
00007CFA 0440 0200                  		subi.w	#$200,d0	; subtract 512px (unused 2 chunks)
00007CFE 3400                       		move.w	d0,d2
00007D00 0C40 0100                  		cmpi.w	#$100,d0
00007D04 6500                       		bcs.s	@limitY
00007D06 303C 0100                  		move.w	#$100,d0
00007D0A                            	@limitY:
00007D0A 0240 01F0                  		andi.w	#$1F0,d0
00007D0E E648                       		lsr.w	#3,d0
00007D10 45F2 0000                  		lea	(a2,d0),a2
00007D14 6000 0000                  		bra.w	Bg_Scroll_X
00007D18                            ; End of function Deform_MZ
00007D18                            
00007D18                            ; ---------------------------------------------------------------------------
00007D18                            ; Star Light Zone background layer deformation code
00007D18                            ; ---------------------------------------------------------------------------
00007D18                            
00007D18                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007D18                            
00007D18                            
00007D18                            Deform_SLZ:
00007D18                            	; vertical scrolling
00007D18 3A38 F73C                  		move.w	(v_scrshifty).w,d5
00007D1C 48C5                       		ext.l	d5
00007D1E EF85                       		asl.l	#7,d5
00007D20 6100 0000                  		bsr.w	Bg_Scroll_Y
00007D24 31F8 F70C F618             		move.w	(v_bgscreenposy).w,(v_bgscrposy_dup).w
00007D2A                            	; calculate background scroll buffer
00007D2A 43F8 A800                  		lea	(v_bgscroll_buffer).w,a1
00007D2E 3438 F700                  		move.w	(v_screenposx).w,d2
00007D32 4442                       		neg.w	d2
00007D34 3002                       		move.w	d2,d0
00007D36 E640                       		asr.w	#3,d0
00007D38 9042                       		sub.w	d2,d0
00007D3A 48C0                       		ext.l	d0
00007D3C E980                       		asl.l	#4,d0
00007D3E 81FC 001C                  		divs.w	#$1C,d0
00007D42 48C0                       		ext.l	d0
00007D44 E980                       		asl.l	#4,d0
00007D46 E180                       		asl.l	#8,d0
00007D48 7600                       		moveq	#0,d3
00007D4A 3602                       		move.w	d2,d3
00007D4C 323C 001B                  		move.w	#$1B,d1
00007D50                            	@starLoop:		
00007D50 32C3                       		move.w	d3,(a1)+
00007D52 4843                       		swap	d3
00007D54 D680                       		add.l	d0,d3
00007D56 4843                       		swap	d3
00007D58 51C9 FFF6                  		dbf	d1,@starLoop
00007D5C                            
00007D5C 3002                       		move.w	d2,d0
00007D5E E640                       		asr.w	#3,d0
00007D60 3200                       		move.w	d0,d1
00007D62 E241                       		asr.w	#1,d1
00007D64 D041                       		add.w	d1,d0
00007D66 323C 0004                  		move.w	#4,d1
00007D6A                            	@buildingLoop1:		; distant black buildings
00007D6A 32C0                       		move.w	d0,(a1)+
00007D6C 51C9 FFFC                  		dbf	d1,@buildingLoop1
00007D70                            
00007D70 3002                       		move.w	d2,d0
00007D72 E440                       		asr.w	#2,d0
00007D74 323C 0004                  		move.w	#4,d1
00007D78                            	@buildingLoop2:		; closer buildings
00007D78 32C0                       		move.w	d0,(a1)+
00007D7A 51C9 FFFC                  		dbf	d1,@buildingLoop2
00007D7E                            
00007D7E 3002                       		move.w	d2,d0
00007D80 E240                       		asr.w	#1,d0
00007D82 323C 001D                  		move.w	#$1D,d1
00007D86                            	@bottomLoop:		; bottom part of background
00007D86 32C0                       		move.w	d0,(a1)+
00007D88 51C9 FFFC                  		dbf	d1,@bottomLoop
00007D8C                            
00007D8C 45F8 A800                  		lea	(v_bgscroll_buffer).w,a2
00007D90 3038 F70C                  		move.w	(v_bgscreenposy).w,d0
00007D94 3400                       		move.w	d0,d2
00007D96 0440 00C0                  		subi.w	#$C0,d0
00007D9A 0240 03F0                  		andi.w	#$3F0,d0
00007D9E E648                       		lsr.w	#3,d0
00007DA0 45F2 0000                  		lea	(a2,d0),a2
00007DA4                            ;-------------------------------------------------------------------------------
00007DA4                            ;-------------------------------------------------------------------------------
00007DA4                            Bg_Scroll_X:
00007DA4 43F8 CC00                  		lea	(v_hscrolltablebuffer).w,a1
00007DA8 323C 000E                  		move.w	#$E,d1
00007DAC 3038 F700                  		move.w	(v_screenposx).w,d0
00007DB0 4440                       		neg.w	d0
00007DB2 4840                       		swap	d0
00007DB4 0242 000F                  		andi.w	#$F,d2
00007DB8 D442                       		add.w	d2,d2
00007DBA 301A                       		move.w	(a2)+,d0
00007DBC 4EFB 2000                  		jmp	@pixelJump(pc,d2.w)		; skip pixels for first row
00007DC0                            	@blockLoop:
00007DC0 301A                       		move.w	(a2)+,d0
00007DC2                            	@pixelJump:		
00007DC2 22C0                       		move.l	d0,(a1)+
00007DC4 22C0                       		move.l	d0,(a1)+
00007DC6 22C0                       		move.l	d0,(a1)+
00007DC8 22C0                       		move.l	d0,(a1)+
00007DCA 22C0                       		move.l	d0,(a1)+
00007DCC 22C0                       		move.l	d0,(a1)+
00007DCE 22C0                       		move.l	d0,(a1)+
00007DD0 22C0                       		move.l	d0,(a1)+
00007DD2 22C0                       		move.l	d0,(a1)+
00007DD4 22C0                       		move.l	d0,(a1)+
00007DD6 22C0                       		move.l	d0,(a1)+
00007DD8 22C0                       		move.l	d0,(a1)+
00007DDA 22C0                       		move.l	d0,(a1)+
00007DDC 22C0                       		move.l	d0,(a1)+
00007DDE 22C0                       		move.l	d0,(a1)+
00007DE0 22C0                       		move.l	d0,(a1)+
00007DE2 51C9 FFDC                  		dbf	d1,@blockLoop
00007DE6 4E75                       		rts
00007DE8                            
00007DE8                            ; ---------------------------------------------------------------------------
00007DE8                            ; Spring Yard Zone background layer deformation	code
00007DE8                            ; ---------------------------------------------------------------------------
00007DE8                            
00007DE8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007DE8                            
00007DE8                            
00007DE8                            Deform_SYZ:
00007DE8                            	; vertical scrolling
00007DE8 3A38 F73C                  		move.w	(v_scrshifty).w,d5
00007DEC 48C5                       		ext.l	d5
00007DEE E985                       		asl.l	#4,d5
00007DF0 2205                       		move.l	d5,d1
00007DF2 E385                       		asl.l	#1,d5
00007DF4 DA81                       		add.l	d1,d5
00007DF6 6100 0000                  		bsr.w	Bg_Scroll_Y
00007DFA 31F8 F70C F618             		move.w	(v_bgscreenposy).w,(v_bgscrposy_dup).w
00007E00                            	; calculate background scroll buffer
00007E00 43F8 A800                  		lea	(v_bgscroll_buffer).w,a1
00007E04 3438 F700                  		move.w	(v_screenposx).w,d2
00007E08 4442                       		neg.w	d2
00007E0A 3002                       		move.w	d2,d0
00007E0C E640                       		asr.w	#3,d0
00007E0E 9042                       		sub.w	d2,d0
00007E10 48C0                       		ext.l	d0
00007E12 E780                       		asl.l	#3,d0
00007E14 81FC 0008                  		divs.w	#8,d0
00007E18 48C0                       		ext.l	d0
00007E1A E980                       		asl.l	#4,d0
00007E1C E180                       		asl.l	#8,d0
00007E1E 7600                       		moveq	#0,d3
00007E20 3602                       		move.w	d2,d3
00007E22 E243                       		asr.w	#1,d3
00007E24 323C 0007                  		move.w	#7,d1
00007E28                            	@cloudLoop:		
00007E28 32C3                       		move.w	d3,(a1)+
00007E2A 4843                       		swap	d3
00007E2C D680                       		add.l	d0,d3
00007E2E 4843                       		swap	d3
00007E30 51C9 FFF6                  		dbf	d1,@cloudLoop
00007E34                            
00007E34 3002                       		move.w	d2,d0
00007E36 E640                       		asr.w	#3,d0
00007E38 323C 0004                  		move.w	#4,d1
00007E3C                            	@mountainLoop:		
00007E3C 32C0                       		move.w	d0,(a1)+
00007E3E 51C9 FFFC                  		dbf	d1,@mountainLoop
00007E42                            
00007E42 3002                       		move.w	d2,d0
00007E44 E440                       		asr.w	#2,d0
00007E46 323C 0005                  		move.w	#5,d1
00007E4A                            	@buildingLoop:		
00007E4A 32C0                       		move.w	d0,(a1)+
00007E4C 51C9 FFFC                  		dbf	d1,@buildingLoop
00007E50                            
00007E50 3002                       		move.w	d2,d0
00007E52 3202                       		move.w	d2,d1
00007E54 E241                       		asr.w	#1,d1
00007E56 9041                       		sub.w	d1,d0
00007E58 48C0                       		ext.l	d0
00007E5A E980                       		asl.l	#4,d0
00007E5C 81FC 000E                  		divs.w	#$E,d0
00007E60 48C0                       		ext.l	d0
00007E62 E980                       		asl.l	#4,d0
00007E64 E180                       		asl.l	#8,d0
00007E66 7600                       		moveq	#0,d3
00007E68 3602                       		move.w	d2,d3
00007E6A E243                       		asr.w	#1,d3
00007E6C 323C 000D                  		move.w	#$D,d1
00007E70                            	@bushLoop:		
00007E70 32C3                       		move.w	d3,(a1)+
00007E72 4843                       		swap	d3
00007E74 D680                       		add.l	d0,d3
00007E76 4843                       		swap	d3
00007E78 51C9 FFF6                  		dbf	d1,@bushLoop
00007E7C                            
00007E7C 45F8 A800                  		lea	(v_bgscroll_buffer).w,a2
00007E80 3038 F70C                  		move.w	(v_bgscreenposy).w,d0
00007E84 3400                       		move.w	d0,d2
00007E86 0240 01F0                  		andi.w	#$1F0,d0
00007E8A E648                       		lsr.w	#3,d0
00007E8C 45F2 0000                  		lea	(a2,d0),a2
00007E90 6000 FF12                  		bra.w	Bg_Scroll_X
00007E94                            ; End of function Deform_SYZ
00007E94                            
00007E94                            ; ---------------------------------------------------------------------------
00007E94                            ; Scrap	Brain Zone background layer deformation	code
00007E94                            ; ---------------------------------------------------------------------------
00007E94                            
00007E94                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007E94                            
00007E94                            
00007E94                            Deform_SBZ:
00007E94 3838 F73A                  		move.w	(v_scrshiftx).w,d4
00007E98 48C4                       		ext.l	d4
00007E9A ED84                       		asl.l	#6,d4
00007E9C 3A38 F73C                  		move.w	(v_scrshifty).w,d5
00007EA0 48C5                       		ext.l	d5
00007EA2 E985                       		asl.l	#4,d5
00007EA4 E385                       		asl.l	#1,d5
00007EA6 6100 0000                  		bsr.w	BGScroll_XY
00007EAA 31F8 F70C F618             		move.w	(v_bgscreenposy).w,(v_bgscrposy_dup).w
00007EB0 43F8 CC00                  		lea	(v_hscrolltablebuffer).w,a1
00007EB4 323C 00DF                  		move.w	#223,d1
00007EB8 3038 F700                  		move.w	(v_screenposx).w,d0
00007EBC 4440                       		neg.w	d0
00007EBE 4840                       		swap	d0
00007EC0 3038 F708                  		move.w	(v_bgscreenposx).w,d0
00007EC4 4440                       		neg.w	d0
00007EC6                            
00007EC6                            loc_6576:
00007EC6 22C0                       		move.l	d0,(a1)+
00007EC8 51C9 FFFC                  		dbf	d1,loc_6576
00007ECC 4E75                       		rts	
00007ECE                            ;-------------------------------------------------------------------------------
00007ECE                            Deform_SBZ2:;loc_68A2:
00007ECE 3838 F73A                  		move.w	(v_scrshiftx).w,d4
00007ED2 48C4                       		ext.l	d4
00007ED4 ED84                       		asl.l	#6,d4
00007ED6 3A38 F73C                  		move.w	(v_scrshifty).w,d5
00007EDA 48C5                       		ext.l	d5
00007EDC E985                       		asl.l	#4,d5
00007EDE E385                       		asl.l	#1,d5
00007EE0 6100 0000                  		bsr.w	BGScroll_XY
00007EE4 31F8 F70C F618             		move.w	(v_bgscreenposy).w,(v_bgscrposy_dup).w
00007EEA 43F8 CC00                  		lea	(v_hscrolltablebuffer).w,a1
00007EEE 323C 00DF                  		move.w	#223,d1
00007EF2 3038 F700                  		move.w	(v_screenposx).w,d0
00007EF6 4440                       		neg.w	d0
00007EF8 4840                       		swap	d0
00007EFA 3038 F708                  		move.w	(v_bgscreenposx).w,d0
00007EFE 4440                       		neg.w	d0
00007F00                            
00007F00                            loc_6577:
00007F00 22C0                       		move.l	d0,(a1)+
00007F02 51C9 FFFC                  		dbf	d1,loc_6577
00007F06 4E75                       		rts	
00007F08                            
00007F08                            ; ---------------------------------------------------------------------------
00007F08                            ; Subroutine to	scroll the level horizontally as Sonic moves
00007F08                            ; ---------------------------------------------------------------------------
00007F08                            
00007F08                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007F08                            
00007F08                            
00007F08                            ScrollHoriz:
00007F08 3838 F700                  		move.w	(v_screenposx).w,d4 ; save old screen position
00007F0C 6100                       		bsr.s	MoveScreenHoriz
00007F0E 3038 F700                  		move.w	(v_screenposx).w,d0
00007F12 0240 0010                  		andi.w	#$10,d0
00007F16 1238 F74A                  		move.b	(v_fg_xblock).w,d1
00007F1A B300                       		eor.b	d1,d0
00007F1C 6600                       		bne.s	@return
00007F1E 0A38 0010 F74A             		eori.b	#$10,(v_fg_xblock).w
00007F24 3038 F700                  		move.w	(v_screenposx).w,d0
00007F28 9044                       		sub.w	d4,d0		; compare new with old screen position
00007F2A 6A00                       		bpl.s	@scrollRight
00007F2C                            
00007F2C 08F8 0002 F754             		bset	#2,(v_fg_scroll_flags).w ; screen moves backward
00007F32 4E75                       		rts	
00007F34                            
00007F34                            	@scrollRight:
00007F34 08F8 0003 F754             		bset	#3,(v_fg_scroll_flags).w ; screen moves forward
00007F3A                            
00007F3A                            	@return:
00007F3A 4E75                       		rts	
00007F3C                            ; End of function ScrollHoriz
00007F3C                            
00007F3C                            
00007F3C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007F3C                            
00007F3C                            MoveScreenHoriz:
00007F3C 4A38 FF8B                  		tst.b	($FFFFFF8B).w
00007F40 6700 0000                  		beq.w	@cont		
00007F44 4EF9 0000 0000             		jmp	MoveScreenHorizEXT
00007F4A                            		
00007F4A                            	@cont:		
00007F4A 3238 C904                  		move.w	($FFFFC904).w,d1
00007F4E 6700                       		beq.s	@cont1
00007F50 0441 0100                  		sub.w	#$100,d1
00007F54 31C1 C904                  		move.w	d1,($FFFFC904).w
00007F58 7200                       		moveq	#0,d1
00007F5A 1238 C904                  		move.b	($FFFFC904).w,d1
00007F5E E509                       		lsl.b	#2,d1
00007F60 5801                       		addq.b	#4,d1
00007F62 3038 F7A8                  		move.w	($FFFFF7A8).w,d0
00007F66 9001                       		sub.b	d1,d0
00007F68 43F8 CB00                  		lea	($FFFFCB00).w,a1
00007F6C 3031 0000                  		move.w	(a1,d0.w),d0
00007F70 0240 3FFF                  		and.w	#$3FFF,d0
00007F74 6000                       		bra.s	@cont2
00007F76                            		
00007F76                            @cont1:
00007F76 3038 D008                  		move.w	($FFFFD008).w,d0
00007F7A                            		
00007F7A                            @cont2:
00007F7A 9078 F700                  		sub.w	($FFFFF700).w,d0
00007F7E 0440 0090                          subi.w    #144,d0        ; is distance less than 144px?
00007F82 6500                               bcs.s    SH_BehindMid    ; if yes, branch
00007F84 0440 0010                          subi.w    #16,d0        ; is distance more than 160px?
00007F88 6400                               bcc.s    SH_AheadOfMid    ; if yes, branch
00007F8A 4278 F73A                          clr.w    (v_scrshiftx).w
00007F8E 4E75                               rts 
00007F90                            ; ===========================================================================
00007F90                            
00007F90                            SH_AheadOfMid:
00007F90 0C40 0010                          cmpi.w    #16,d0        ; is Sonic within 16px of middle area?
00007F94 6500                               bcs.s    SH_Ahead16    ; if yes, branch
00007F96 303C 0010                          move.w    #16,d0        ; set to 16 if greater
00007F9A                            
00007F9A                                SH_Ahead16:
00007F9A D078 F700                          add.w    (v_screenposx).w,d0
00007F9E B078 F72A                          cmp.w    (v_limitright2).w,d0
00007FA2 6D00                               blt.s    SH_SetScreen
00007FA4 3038 F72A                          move.w    (v_limitright2).w,d0
00007FA8                            
00007FA8                            SH_SetScreen:
00007FA8 3200                               move.w    d0,d1
00007FAA 9278 F700                          sub.w    (v_screenposx).w,d1
00007FAE E141                               asl.w    #8,d1
00007FB0 31C0 F700                          move.w    d0,(v_screenposx).w ; set new screen position
00007FB4 31C1 F73A                          move.w    d1,(v_scrshiftx).w ; set distance for screen movement
00007FB8 4E75                               rts 
00007FBA                            ; ===========================================================================
00007FBA                            
00007FBA                            SH_BehindMid:
00007FBA 0C40 FFF0                  		cmpi.w	#-$10,d0
00007FBE 6400                       		bcc.s	@cont
00007FC0 303C FFF0                  		move.w	#-$10,d0	
00007FC4                            
00007FC4                            @cont:
00007FC4 D078 F700                  		add.w	(v_screenposx).w,d0
00007FC8 B078 F728                  		cmp.w	(v_limitleft2).w,d0
00007FCC 6EDA                       		bgt.s	SH_SetScreen
00007FCE 3038 F728                  		move.w	(v_limitleft2).w,d0
00007FD2 60D4                       		bra.s	SH_SetScreen
00007FD4                            ; End of function MoveScreenHoriz
00007FD4                            ; ||||||||||||||| S U B    R O U T    I N E |||||||||||||||||||||||||||||||||||||||
00007FD4                            
00007FD4                            MoveScreenHorizEXT:
00007FD4 3238 C904                  		move.w	($FFFFC904).w,d1
00007FD8 6700                       		beq.s	@cont1
00007FDA 0441 0100                  		sub.w	#$100,d1
00007FDE 31C1 C904                  		move.w	d1,($FFFFC904).w
00007FE2 7200                       		moveq	#0,d1
00007FE4 1238 C904                  		move.b	($FFFFC904).w,d1
00007FE8 E509                       		lsl.b	#2,d1
00007FEA 5801                       		addq.b	#4,d1
00007FEC 3038 F7A8                  		move.w	($FFFFF7A8).w,d0
00007FF0 9001                       		sub.b	d1,d0
00007FF2 43F8 CB00                  		lea	($FFFFCB00).w,a1
00007FF6 3031 0000                  		move.w	(a1,d0.w),d0
00007FFA 0240 3FFF                  		and.w	#$3FFF,d0
00007FFE 6000                       		bra.s	@cont2
00008000                            		
00008000                            @cont1:
00008000 3038 D008                  		move.w	($FFFFD008).w,d0
00008004                            		
00008004                            @cont2:
00008004 9078 F700                  		sub.w	($FFFFF700).w,d0
00008008 9078 F7A0                          sub.w    (v_camera_pan).w,d0    ; Horizontal camera pan value
0000800C 6700                               beq.s    SHEXT_ProperlyFramed    ; if zero, branch
0000800E 6500                               bcs.s    SHEXT_BehindMid    ; if less than, branch
00008010 6000                               bra.s    SHEXT_AheadOfMid    ; branch
00008012                            ; ===========================================================================
00008012                            
00008012                            SHEXT_ProperlyFramed:
00008012 4278 F73A                          clr.w    (v_scrshiftx).w
00008016 4E75                               rts 
00008018                            ; ===========================================================================
00008018                            
00008018                            SHEXT_AheadOfMid:
00008018 0C40 0010                          cmpi.w    #16,d0        ; is Sonic within 16px of middle area?
0000801C 6D00                               blt.s    SHEXT_Ahead16    ; if yes, branch
0000801E 303C 0010                          move.w    #16,d0        ; set to 16 if greater
00008022                            
00008022                            SHEXT_Ahead16:
00008022 D078 F700                          add.w    (v_screenposx).w,d0
00008026 B078 F72A                          cmp.w    (v_limitright2).w,d0
0000802A 6D00                               blt.s    SHEXT_SetScreen
0000802C 3038 F72A                          move.w    (v_limitright2).w,d0
00008030                            
00008030                            SHEXT_SetScreen:
00008030 3200                               move.w    d0,d1
00008032 9278 F700                          sub.w    (v_screenposx).w,d1
00008036 E141                               asl.w    #8,d1
00008038 31C0 F700                          move.w    d0,(v_screenposx).w ; set new screen position
0000803C 31C1 F73A                          move.w    d1,(v_scrshiftx).w ; set distance for screen movement
00008040 4E75                               rts
00008042                            
00008042                            ; ===========================================================================
00008042                            
00008042                            SHEXT_BehindMid:
00008042 0C40 FFF0                          cmpi.w    #-16,d0        ; is Sonic within 16px of middle area?
00008046 6C00                               bge.s    SHEXT_Behind16    ; if no, branch
00008048 303C FFF0                          move.w    #-16,d0        ; set to -16 if less
0000804C                            
0000804C                            SHEXT_Behind16:
0000804C D078 F700                          add.w    (v_screenposx).w,d0
00008050 B078 F728                          cmp.w    (v_limitleft2).w,d0
00008054 6EDA                               bgt.s    SHEXT_SetScreen
00008056 3038 F728                          move.w    (v_limitleft2).w,d0
0000805A 60D4                               bra.s    SHEXT_SetScreen
0000805C                                  
0000805C                            ; End of function MoveScreenHoriz
0000805C                            
0000805C                            
0000805C                            ; ---------------------------------------------------------------------------
0000805C                            ; Subroutine to	scroll the level vertically as Sonic moves
0000805C                            ; ---------------------------------------------------------------------------
0000805C                            
0000805C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000805C                            
0000805C                            
0000805C                            ScrollVertical:
0000805C 7200                       		moveq	#0,d1
0000805E 3038 D00C                  		move.w	(v_player+obY).w,d0
00008062 9078 F704                  		sub.w	(v_screenposy).w,d0 ; Sonic's distance from top of screen
00008066 0838 0002 D022             		btst	#2,(v_player+obStatus).w ; is Sonic rolling?
0000806C 6700                       		beq.s	SV_NotRolling	; if not, branch
0000806E 5B40                       		subq.w	#5,d0
00008070                            
00008070                            	SV_NotRolling:
00008070 0838 0001 D022             		btst	#1,(v_player+obStatus).w ; is Sonic jumping?
00008076 6700                       		beq.s	loc_664A	; if not, branch
00008078                            
00008078 0640 0020                  		addi.w	#32,d0
0000807C 9078 F73E                  		sub.w	(v_lookshift).w,d0
00008080 6500                       		bcs.s	loc_6696
00008082 0440 0040                  		subi.w	#64,d0
00008086 6400                       		bcc.s	loc_6696
00008088 4A38 F75C                  		tst.b	(f_bgscrollvert).w
0000808C 6600                       		bne.s	loc_66A8
0000808E 6000                       		bra.s	loc_6656
00008090                            ; ===========================================================================
00008090                            
00008090                            loc_664A:
00008090 9078 F73E                  		sub.w	(v_lookshift).w,d0
00008094 6600                       		bne.s	loc_665C
00008096 4A38 F75C                  		tst.b	(f_bgscrollvert).w
0000809A 6600                       		bne.s	loc_66A8
0000809C                            
0000809C                            loc_6656:
0000809C 4278 F73C                  		clr.w	(v_scrshifty).w
000080A0 4E75                       		rts	
000080A2                            ; ===========================================================================
000080A2                            
000080A2                            loc_665C:
000080A2 0C78 0060 F73E             		cmpi.w	#$60,(v_lookshift).w
000080A8 6600                       		bne.s	loc_6684
000080AA 3238 D020                  		move.w	(v_player+obInertia).w,d1
000080AE 6A00                       		bpl.s	loc_666C
000080B0 4441                       		neg.w	d1
000080B2                            
000080B2                            loc_666C:
000080B2 0C41 0800                  		cmpi.w	#$800,d1
000080B6 6400                       		bcc.s	loc_6696
000080B8 323C 0600                  		move.w	#$600,d1
000080BC 0C40 0006                  		cmpi.w	#6,d0
000080C0 6E00                       		bgt.s	loc_66F6
000080C2 0C40 FFFA                  		cmpi.w	#-6,d0
000080C6 6D00                       		blt.s	loc_66C0
000080C8 6000                       		bra.s	loc_66AE
000080CA                            ; ===========================================================================
000080CA                            
000080CA                            loc_6684:
000080CA 323C 0200                  		move.w	#$200,d1
000080CE 0C40 0002                  		cmpi.w	#2,d0
000080D2 6E00                       		bgt.s	loc_66F6
000080D4 0C40 FFFE                  		cmpi.w	#-2,d0
000080D8 6D00                       		blt.s	loc_66C0
000080DA 6000                       		bra.s	loc_66AE
000080DC                            ; ===========================================================================
000080DC                            
000080DC                            loc_6696:
000080DC 323C 1000                  		move.w	#$1000,d1
000080E0 0C40 0010                  		cmpi.w	#$10,d0
000080E4 6E00                       		bgt.s	loc_66F6
000080E6 0C40 FFF0                  		cmpi.w	#-$10,d0
000080EA 6D00                       		blt.s	loc_66C0
000080EC 6000                       		bra.s	loc_66AE
000080EE                            ; ===========================================================================
000080EE                            
000080EE                            loc_66A8:
000080EE 7000                       		moveq	#0,d0
000080F0 11C0 F75C                  		move.b	d0,(f_bgscrollvert).w
000080F4                            
000080F4                            loc_66AE:
000080F4 7200                       		moveq	#0,d1
000080F6 3200                       		move.w	d0,d1
000080F8 D278 F704                  		add.w	(v_screenposy).w,d1
000080FC 4A40                       		tst.w	d0
000080FE 6A00 0000                  		bpl.w	loc_6700
00008102 6000 0000                  		bra.w	loc_66CC
00008106                            ; ===========================================================================
00008106                            
00008106                            loc_66C0:
00008106 4441                       		neg.w	d1
00008108 48C1                       		ext.l	d1
0000810A E181                       		asl.l	#8,d1
0000810C D2B8 F704                  		add.l	(v_screenposy).w,d1
00008110 4841                       		swap	d1
00008112                            
00008112                            loc_66CC:
00008112 B278 F72C                  		cmp.w	(v_limittop2).w,d1
00008116 6E00                       		bgt.s	loc_6724
00008118 0C41 FF00                  		cmpi.w	#-$100,d1
0000811C 6E00                       		bgt.s	loc_66F0
0000811E 0241 07FF                  		andi.w	#$7FF,d1
00008122 0278 07FF D00C             		andi.w	#$7FF,(v_player+obY).w
00008128 0278 07FF F704             		andi.w	#$7FF,(v_screenposy).w
0000812E 0278 03FF F70C             		andi.w	#$3FF,(v_bgscreenposy).w
00008134 6000                       		bra.s	loc_6724
00008136                            ; ===========================================================================
00008136                            
00008136                            loc_66F0:
00008136 3238 F72C                  		move.w	(v_limittop2).w,d1
0000813A 6000                       		bra.s	loc_6724
0000813C                            ; ===========================================================================
0000813C                            
0000813C                            loc_66F6:
0000813C 48C1                       		ext.l	d1
0000813E E181                       		asl.l	#8,d1
00008140 D2B8 F704                  		add.l	(v_screenposy).w,d1
00008144 4841                       		swap	d1
00008146                            
00008146                            loc_6700:
00008146 B278 F72E                  		cmp.w	(v_limitbtm2).w,d1
0000814A 6D00                       		blt.s	loc_6724
0000814C 0441 0800                  		subi.w	#$800,d1
00008150 6500                       		bcs.s	loc_6720
00008152 0278 07FF D00C             		andi.w	#$7FF,(v_player+obY).w
00008158 0478 0800 F704             		subi.w	#$800,(v_screenposy).w
0000815E 0278 03FF F70C             		andi.w	#$3FF,(v_bgscreenposy).w
00008164 6000                       		bra.s	loc_6724
00008166                            ; ===========================================================================
00008166                            
00008166                            loc_6720:
00008166 3238 F72E                  		move.w	(v_limitbtm2).w,d1
0000816A                            
0000816A                            loc_6724:
0000816A 3838 F704                  		move.w	(v_screenposy).w,d4
0000816E 4841                       		swap	d1
00008170 2601                       		move.l	d1,d3
00008172 96B8 F704                  		sub.l	(v_screenposy).w,d3
00008176 E09B                       		ror.l	#8,d3
00008178 31C3 F73C                  		move.w	d3,(v_scrshifty).w
0000817C 21C1 F704                  		move.l	d1,(v_screenposy).w
00008180 3038 F704                  		move.w	(v_screenposy).w,d0
00008184 0240 0010                  		andi.w	#$10,d0
00008188 1238 F74B                  		move.b	(v_fg_yblock).w,d1
0000818C B300                       		eor.b	d1,d0
0000818E 6600                       		bne.s	@return
00008190 0A38 0010 F74B             		eori.b	#$10,(v_fg_yblock).w
00008196 3038 F704                  		move.w	(v_screenposy).w,d0
0000819A 9044                       		sub.w	d4,d0
0000819C 6A00                       		bpl.s	@scrollBottom
0000819E 08F8 0000 F754             		bset	#0,(v_fg_scroll_flags).w
000081A4 4E75                       		rts	
000081A6                            ; ===========================================================================
000081A6                            
000081A6                            	@scrollBottom:
000081A6 08F8 0001 F754             		bset	#1,(v_fg_scroll_flags).w
000081AC                            
000081AC                            	@return:
000081AC 4E75                       		rts	
000081AE                            ; End of function ScrollVertical
000081AE                            
000081AE                            
000081AE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000081AE                            ; Scrolls background and sets redraw flags.
000081AE                            ; d4 - background x offset * $10000
000081AE                            ; d5 - background y offset * $10000
000081AE                            
000081AE                            BGScroll_XY:
000081AE 2438 F708                  		move.l	(v_bgscreenposx).w,d2
000081B2 2002                       		move.l	d2,d0
000081B4 D084                       		add.l	d4,d0
000081B6 21C0 F708                  		move.l	d0,(v_bgscreenposx).w
000081BA 2200                       		move.l	d0,d1
000081BC 4841                       		swap	d1
000081BE 0241 0010                  		andi.w	#$10,d1
000081C2 1638 F74C                  		move.b	(v_bg1_xblock).w,d3
000081C6 B701                       		eor.b	d3,d1
000081C8 6600                       		bne.s	BGScroll_YRelative	; no change in Y
000081CA 0A38 0010 F74C             		eori.b	#$10,(v_bg1_xblock).w
000081D0 9082                       		sub.l	d2,d0	; new - old
000081D2 6A00                       		bpl.s	@scrollRight
000081D4 08F8 0002 F756             		bset	#2,(v_bg1_scroll_flags).w
000081DA 6000                       		bra.s	BGScroll_YRelative
000081DC                            	@scrollRight:
000081DC 08F8 0003 F756             		bset	#3,(v_bg1_scroll_flags).w
000081E2                            BGScroll_YRelative:
000081E2 2638 F70C                  		move.l	(v_bgscreenposy).w,d3
000081E6 2003                       		move.l	d3,d0
000081E8 D085                       		add.l	d5,d0
000081EA 21C0 F70C                  		move.l	d0,(v_bgscreenposy).w
000081EE 2200                       		move.l	d0,d1
000081F0 4841                       		swap	d1
000081F2 0241 0010                  		andi.w	#$10,d1
000081F6 1438 F74D                  		move.b	(v_bg1_yblock).w,d2
000081FA B501                       		eor.b	d2,d1
000081FC 6600                       		bne.s	@return
000081FE 0A38 0010 F74D             		eori.b	#$10,(v_bg1_yblock).w
00008204 9083                       		sub.l	d3,d0
00008206 6A00                       		bpl.s	@scrollBottom
00008208 08F8 0000 F756             		bset	#0,(v_bg1_scroll_flags).w
0000820E 4E75                       		rts
00008210                            	@scrollBottom:
00008210 08F8 0001 F756             		bset	#1,(v_bg1_scroll_flags).w
00008216                            	@return:
00008216 4E75                       		rts
00008218                            ; End of function BGScroll_XY
00008218                            
00008218                            Bg_Scroll_Y:
00008218 2638 F70C                  		move.l	(v_bgscreenposy).w,d3
0000821C 2003                       		move.l	d3,d0
0000821E D085                       		add.l	d5,d0
00008220 21C0 F70C                  		move.l	d0,(v_bgscreenposy).w
00008224 2200                       		move.l	d0,d1
00008226 4841                       		swap	d1
00008228 0241 0010                  		andi.w	#$10,d1
0000822C 1438 F74D                  		move.b	(v_bg1_yblock).w,d2
00008230 B501                       		eor.b	d2,d1
00008232 6600                       		bne.s	@return
00008234 0A38 0010 F74D             		eori.b	#$10,(v_bg1_yblock).w
0000823A 9083                       		sub.l	d3,d0
0000823C 6A00                       		bpl.s	@scrollBottom
0000823E 08F8 0004 F756             		bset	#4,(v_bg1_scroll_flags).w
00008244 4E75                       		rts
00008246                            	@scrollBottom:
00008246 08F8 0005 F756             		bset	#5,(v_bg1_scroll_flags).w
0000824C                            	@return:
0000824C 4E75                       		rts
0000824E                            
0000824E                            
0000824E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000824E                            
0000824E                            
0000824E                            BGScroll_YAbsolute:
0000824E 3638 F70C                  		move.w	(v_bgscreenposy).w,d3
00008252 31C0 F70C                  		move.w	d0,(v_bgscreenposy).w
00008256 3200                       		move.w	d0,d1
00008258 0241 0010                  		andi.w	#$10,d1
0000825C 1438 F74D                  		move.b	(v_bg1_yblock).w,d2
00008260 B501                       		eor.b	d2,d1
00008262 6600                       		bne.s	@return
00008264 0A38 0010 F74D             		eori.b	#$10,(v_bg1_yblock).w
0000826A 9043                       		sub.w	d3,d0
0000826C 6A00                       		bpl.s	@scrollBottom
0000826E 08F8 0000 F756             		bset	#0,(v_bg1_scroll_flags).w
00008274 4E75                       		rts
00008276                            	@scrollBottom:
00008276 08F8 0001 F756             		bset	#1,(v_bg1_scroll_flags).w
0000827C                            	@return:
0000827C 4E75                       		rts
0000827E                            ; End of function BGScroll_YAbsolute
0000827E                            
0000827E                            
0000827E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000827E                            ; d6 - bit to set for redraw
0000827E                            
0000827E                            BGScroll_Block1:
0000827E 2438 F708                  		move.l	(v_bgscreenposx).w,d2
00008282 2002                       		move.l	d2,d0
00008284 D084                       		add.l	d4,d0
00008286 21C0 F708                  		move.l	d0,(v_bgscreenposx).w
0000828A 2200                       		move.l	d0,d1
0000828C 4841                       		swap	d1
0000828E 0241 0010                  		andi.w	#$10,d1
00008292 1638 F74C                  		move.b	(v_bg1_xblock).w,d3
00008296 B701                       		eor.b	d3,d1
00008298 6600                       		bne.s	@return
0000829A 0A38 0010 F74C             		eori.b	#$10,(v_bg1_xblock).w
000082A0 9082                       		sub.l	d2,d0
000082A2 6A00                       		bpl.s	@scrollRight
000082A4 0DF8 F756                  		bset	d6,(v_bg1_scroll_flags).w
000082A8 6000                       		bra.s	@return
000082AA                            	@scrollRight:
000082AA 5206                       		addq.b	#1,d6
000082AC 0DF8 F756                  		bset	d6,(v_bg1_scroll_flags).w
000082B0                            	@return:
000082B0 4E75                       		rts
000082B2                            ; End of function BGScroll_Block1
000082B2                            
000082B2                            
000082B2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000082B2                            
000082B2                            
000082B2                            BGScroll_Block2:
000082B2 2438 F710                  		move.l	(v_bg2screenposx).w,d2
000082B6 2002                       		move.l	d2,d0
000082B8 D084                       		add.l	d4,d0
000082BA 21C0 F710                  		move.l	d0,(v_bg2screenposx).w
000082BE 2200                       		move.l	d0,d1
000082C0 4841                       		swap	d1
000082C2 0241 0010                  		andi.w	#$10,d1
000082C6 1638 F74E                  		move.b	(v_bg2_xblock).w,d3
000082CA B701                       		eor.b	d3,d1
000082CC 6600                       		bne.s	@return
000082CE 0A38 0010 F74E             		eori.b	#$10,(v_bg2_xblock).w
000082D4 9082                       		sub.l	d2,d0
000082D6 6A00                       		bpl.s	@scrollRight
000082D8 0DF8 F758                  		bset	d6,(v_bg2_scroll_flags).w
000082DC 6000                       		bra.s	@return
000082DE                            	@scrollRight:
000082DE 5206                       		addq.b	#1,d6
000082E0 0DF8 F758                  		bset	d6,(v_bg2_scroll_flags).w
000082E4                            	@return:
000082E4 4E75                       		rts
000082E6                            ;-------------------------------------------------------------------------------
000082E6                            BGScroll_Block3:
000082E6 2438 F718                  		move.l	(v_bg3screenposx).w,d2
000082EA 2002                       		move.l	d2,d0
000082EC D084                       		add.l	d4,d0
000082EE 21C0 F718                  		move.l	d0,(v_bg3screenposx).w
000082F2 2200                       		move.l	d0,d1
000082F4 4841                       		swap	d1
000082F6 0241 0010                  		andi.w	#$10,d1
000082FA 1638 F750                  		move.b	(v_bg3_xblock).w,d3
000082FE B701                       		eor.b	d3,d1
00008300 6600                       		bne.s	@return
00008302 0A38 0010 F750             		eori.b	#$10,(v_bg3_xblock).w
00008308 9082                       		sub.l	d2,d0
0000830A 6A00                       		bpl.s	@scrollRight
0000830C 0DF8 F75A                  		bset	d6,(v_bg3_scroll_flags).w
00008310 6000                       		bra.s	@return
00008312                            	@scrollRight:
00008312 5206                       		addq.b	#1,d6
00008314 0DF8 F75A                  		bset	d6,(v_bg3_scroll_flags).w
00008318                            	@return:
00008318 4E75                       		rts
00008318 4E75                       		rts
0000831A                            
0000831A                            
0000831A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000831A                            
0000831A                            ; sub_6886:
0000831A                            LoadTilesAsYouMove_BGOnly:
0000831A 4BF9 00C0 0004             		lea	(vdp_control_port).l,a5
00008320 4DF9 00C0 0000             		lea	(vdp_data_port).l,a6
00008326 45F8 F756                  		lea	(v_bg1_scroll_flags).w,a2
0000832A 47F8 F708                  		lea	(v_bgscreenposx).w,a3
0000832E 49F8 A440                  		lea	(v_lvllayout+$40).w,a4
00008332 343C 6000                  		move.w	#$6000,d2
00008336 6100 0000                  		bsr.w	DrawBGScrollBlock1
0000833A 45F8 F758                  		lea	(v_bg2_scroll_flags).w,a2
0000833E 47F8 F710                  		lea	(v_bg2screenposx).w,a3
00008342 6000 0000                  		bra.w	DrawBGScrollBlock2
00008346                            ; End of function sub_6886
00008346                            
00008346                            ; ---------------------------------------------------------------------------
00008346                            ; Subroutine to	display	correct	tiles as you move
00008346                            ; ---------------------------------------------------------------------------
00008346                            
00008346                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008346                            
00008346                            
00008346                            LoadTilesAsYouMove:
00008346 4BF9 00C0 0004             		lea	(vdp_control_port).l,a5
0000834C 4DF9 00C0 0000             		lea	(vdp_data_port).l,a6
00008352                            		; First, update the background
00008352 45F8 FF32                  		lea	(v_bg1_scroll_flags_dup).w,a2	; Scroll block 1 scroll flags
00008356 47F8 FF18                  		lea	(v_bgscreenposx_dup).w,a3	; Scroll block 1 X coordinate
0000835A 49F8 A440                  		lea	(v_lvllayout+$40).w,a4
0000835E 343C 6000                  		move.w	#$6000,d2			; VRAM thing for selecting Plane B
00008362 6100 0000                  		bsr.w	DrawBGScrollBlock1
00008366 45F8 FF34                  		lea	(v_bg2_scroll_flags_dup).w,a2	; Scroll block 2 scroll flags
0000836A 47F8 FF20                  		lea	(v_bg2screenposx_dup).w,a3	; Scroll block 2 X coordinate
0000836E 6100 0000                  		bsr.w	DrawBGScrollBlock2
00008372                            		; REV01 added a third scroll block, though, technically,
00008372                            		; the RAM for it was already there in REV00
00008372 45F8 FF36                  		lea	(v_bg3_scroll_flags_dup).w,a2	; Scroll block 3 scroll flags
00008376 47F8 FF28                  		lea	(v_bg3screenposx_dup).w,a3	; Scroll block 3 X coordinate
0000837A 6100 0000                  		bsr.w	DrawBGScrollBlock3
0000837E                            		; Then, update the foreground
0000837E 45F8 FF30                  		lea	(v_fg_scroll_flags_dup).w,a2	; Foreground scroll flags
00008382 47F8 FF10                  		lea	(v_screenposx_dup).w,a3		; Foreground X coordinate
00008386 49F8 A400                  		lea	(v_lvllayout).w,a4
0000838A 343C 4000                  		move.w	#$4000,d2			; VRAM thing for selecting Plane A
0000838E                            		; The FG's update function is inlined here
0000838E 4A12                       		tst.b	(a2)
00008390 6700                       		beq.s	locret_6952	; If there are no flags set, nothing needs updating
00008392 0892 0000                  		bclr	#0,(a2)
00008396 6700                       		beq.s	loc_6908
00008398                            		; Draw new tiles at the top
00008398 78F0                       		moveq	#-16,d4	; Y coordinate. Note that 16 is the size of a block in pixels
0000839A 7AF0                       		moveq	#-16,d5 ; X coordinate
0000839C 6100 0000                  		bsr.w	Calc_VRAM_Pos
000083A0 78F0                       		moveq	#-16,d4 ; Y coordinate
000083A2 7AF0                       		moveq	#-16,d5 ; X coordinate
000083A4 6100 0000                  		bsr.w	DrawBlocks_LR
000083A8                            
000083A8                            loc_6908:
000083A8 0892 0001                  		bclr	#1,(a2)
000083AC 6700                       		beq.s	loc_6922
000083AE                            		; Draw new tiles at the bottom
000083AE 383C 00E0                  		move.w	#224,d4	; Start at bottom of the screen. Since this draws from top to bottom, we don't need 224+16
000083B2 7AF0                       		moveq	#-16,d5
000083B4 6100 0000                  		bsr.w	Calc_VRAM_Pos
000083B8 383C 00E0                  		move.w	#224,d4
000083BC 7AF0                       		moveq	#-16,d5
000083BE 6100 0000                  		bsr.w	DrawBlocks_LR
000083C2                            
000083C2                            loc_6922:
000083C2 0892 0002                  		bclr	#2,(a2)
000083C6 6700                       		beq.s	loc_6938
000083C8                            		; Draw new tiles on the left
000083C8 78F0                       		moveq	#-16,d4
000083CA 7AF0                       		moveq	#-16,d5
000083CC 6100 0000                  		bsr.w	Calc_VRAM_Pos
000083D0 78F0                       		moveq	#-16,d4
000083D2 7AF0                       		moveq	#-16,d5
000083D4 6100 0000                  		bsr.w	DrawBlocks_TB
000083D8                            
000083D8                            loc_6938:
000083D8 0892 0003                  		bclr	#3,(a2)
000083DC 6700                       		beq.s	locret_6952
000083DE                            		; Draw new tiles on the right
000083DE 78F0                       		moveq	#-16,d4
000083E0 3A3C 0140                  		move.w	#320,d5
000083E4 6100 0000                  		bsr.w	Calc_VRAM_Pos
000083E8 78F0                       		moveq	#-16,d4
000083EA 3A3C 0140                  		move.w	#320,d5
000083EE 6100 0000                  		bsr.w	DrawBlocks_TB
000083F2                            
000083F2                            locret_6952:
000083F2 4E75                       		rts	
000083F4                            ; End of function LoadTilesAsYouMove
000083F4                            
000083F4                            
000083F4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000083F4                            
000083F4                            ; sub_6954:
000083F4                            DrawBGScrollBlock1:
000083F4 4A12                       		tst.b	(a2)
000083F6 6700 0000                  		beq.w	locret_69F2
000083FA 0892 0000                  		bclr	#0,(a2)
000083FE 6700                       		beq.s	loc_6972
00008400                            		; Draw new tiles at the top
00008400 78F0                       		moveq	#-16,d4
00008402 7AF0                       		moveq	#-16,d5
00008404 6100 0000                  		bsr.w	Calc_VRAM_Pos
00008408 78F0                       		moveq	#-16,d4
0000840A 7AF0                       		moveq	#-16,d5
0000840C 6100 0000                  			bsr.w	DrawBlocks_LR
00008410                            
00008410                            loc_6972:
00008410 0892 0001                  		bclr	#1,(a2)
00008414 6700                       		beq.s	loc_698E
00008416                            		; Draw new tiles at the top
00008416 383C 00E0                  		move.w	#224,d4
0000841A 7AF0                       		moveq	#-16,d5
0000841C 6100 0000                  		bsr.w	Calc_VRAM_Pos
00008420 383C 00E0                  		move.w	#224,d4
00008424 7AF0                       		moveq	#-16,d5
00008426 6100 0000                  			bsr.w	DrawBlocks_LR
0000842A                            
0000842A                            loc_698E:
0000842A 0892 0002                  		bclr	#2,(a2)
0000842E                            
0000842E                            
0000842E 6700                       			beq.s	locj_6D56
00008430                            			; Draw new tiles on the left
00008430 78F0                       			moveq	#-16,d4
00008432 7AF0                       			moveq	#-16,d5
00008434 6100 0000                  			bsr.w	Calc_VRAM_Pos
00008438 78F0                       			moveq	#-16,d4
0000843A 7AF0                       			moveq	#-16,d5
0000843C 6100 0000                  			bsr.w	DrawBlocks_TB
00008440                            	locj_6D56:
00008440                            
00008440 0892 0003                  			bclr	#3,(a2)
00008444 6700                       			beq.s	locj_6D70
00008446                            			; Draw new tiles on the right
00008446 78F0                       			moveq	#-16,d4
00008448 3A3C 0140                  			move.w	#320,d5
0000844C 6100 0000                  			bsr.w	Calc_VRAM_Pos
00008450 78F0                       			moveq	#-16,d4
00008452 3A3C 0140                  			move.w	#320,d5
00008456 6100 0000                  			bsr.w	DrawBlocks_TB
0000845A                            	locj_6D70:
0000845A                            
0000845A 0892 0004                  			bclr	#4,(a2)
0000845E 6700                       			beq.s	locj_6D88
00008460                            			; Draw entire row at the top
00008460 78F0                       			moveq	#-16,d4
00008462 7A00                       			moveq	#0,d5
00008464 6100 0000                  			bsr.w	Calc_VRAM_Pos_2
00008468 78F0                       			moveq	#-16,d4
0000846A 7A00                       			moveq	#0,d5
0000846C 7C1F                       			moveq	#(512/16)-1,d6
0000846E 6100 0000                  			bsr.w	DrawBlocks_LR_3
00008472                            	locj_6D88:
00008472                            
00008472 0892 0005                  			bclr	#5,(a2)
00008476 6700                       			beq.s	locret_69F2
00008478                            			; Draw entire row at the bottom
00008478 383C 00E0                  			move.w	#224,d4
0000847C 7A00                       			moveq	#0,d5
0000847E 6100 0000                  			bsr.w	Calc_VRAM_Pos_2
00008482 383C 00E0                  			move.w	#224,d4
00008486 7A00                       			moveq	#0,d5
00008488 7C1F                       			moveq	#(512/16)-1,d6
0000848A 6100 0000                  			bsr.w	DrawBlocks_LR_3
0000848E                            
0000848E                            locret_69F2:
0000848E 4E75                       		rts	
00008490                            ; End of function DrawBGScrollBlock1
00008490                            
00008490                            
00008490                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008490                            
00008490                            ; Essentially, this draws everything that isn't scroll block 1
00008490                            ; sub_69F4:
00008490                            DrawBGScrollBlock2:
00008490                            
00008490 4A12                       			tst.b	(a2)
00008492 6700 0000                  			beq.w	locj_6DF2
00008496 0C38 0005 FE10             			cmpi.b	#id_SBZ,(v_zone).w
0000849C 6700 0000                  			beq.w	Draw_SBz
000084A0 0892 0000                  			bclr	#0,(a2)
000084A4 6700                       			beq.s	locj_6DD2
000084A6                            			; Draw new tiles on the left
000084A6 383C 0070                  			move.w	#224/2,d4	; Draw the bottom half of the screen
000084AA 7AF0                       			moveq	#-16,d5
000084AC 6100 0000                  			bsr.w	Calc_VRAM_Pos
000084B0 383C 0070                  			move.w	#224/2,d4
000084B4 7AF0                       			moveq	#-16,d5
000084B6 7C02                       			moveq	#3-1,d6		; Draw three rows... could this be a repurposed version of the above unused code?
000084B8 6100 0000                  			bsr.w	DrawBlocks_TB_2
000084BC                            	locj_6DD2:
000084BC 0892 0001                  			bclr	#1,(a2)
000084C0 6700                       			beq.s	locj_6DF2
000084C2                            			; Draw new tiles on the right
000084C2 383C 0070                  			move.w	#224/2,d4
000084C6 3A3C 0140                  			move.w	#320,d5
000084CA 6100 0000                  			bsr.w	Calc_VRAM_Pos
000084CE 383C 0070                  			move.w	#224/2,d4
000084D2 3A3C 0140                  			move.w	#320,d5
000084D6 7C02                       			moveq	#3-1,d6
000084D8 6100 0000                  			bsr.w	DrawBlocks_TB_2
000084DC                            	locj_6DF2:
000084DC 4E75                       			rts
000084DE                            ;===============================================================================
000084DE                            	locj_6DF4:
000084DE 0000 0000 0006 0606 0606+  			dc.b $00,$00,$00,$00,$00,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$04
000084EE 0404 0404 0404 0202 0202+  			dc.b $04,$04,$04,$04,$04,$04,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02
000084FE 0200                       			dc.b $02,$00						
00008500                            ;===============================================================================
00008500                            	Draw_SBz:
00008500 78F0                       			moveq	#-16,d4
00008502 0892 0000                  			bclr	#0,(a2)
00008506 6600                       			bne.s	locj_6E28
00008508 0892 0001                  			bclr	#1,(a2)
0000850C 6700                       			beq.s	locj_6E72
0000850E 383C 00E0                  			move.w	#224,d4
00008512                            	locj_6E28:
00008512 41F9 0000 84DF             			lea	(locj_6DF4+1).l,a0
00008518 3038 F70C                  			move.w	(v_bgscreenposy).w,d0
0000851C D044                       			add.w	d4,d0
0000851E 0240 01F0                  			andi.w	#$1F0,d0
00008522 E848                       			lsr.w	#4,d0
00008524 1030 0000                  			move.b	(a0,d0.w),d0
00008528 47F9 0000 0000             			lea	(locj_6FE4).l,a3
0000852E 3673 0000                  			movea.w	(a3,d0.w),a3
00008532 6700                       			beq.s	locj_6E5E
00008534 7AF0                       			moveq	#-16,d5
00008536 48E7 0C00                  			movem.l	d4/d5,-(sp)
0000853A 6100 0000                  			bsr.w	Calc_VRAM_Pos
0000853E 4CDF 0030                  			movem.l	(sp)+,d4/d5
00008542 6100 0000                  			bsr.w	DrawBlocks_LR
00008546 6000                       			bra.s	locj_6E72
00008548                            ;===============================================================================
00008548                            	locj_6E5E:
00008548 7A00                       			moveq	#0,d5
0000854A 48E7 0C00                  			movem.l	d4/d5,-(sp)
0000854E 6100 0000                  			bsr.w	Calc_VRAM_Pos_2
00008552 4CDF 0030                  			movem.l	(sp)+,d4/d5
00008556 7C1F                       			moveq	#(512/16)-1,d6
00008558 6100 0000                  			bsr.w	DrawBlocks_LR_3
0000855C                            	locj_6E72:
0000855C 4A12                       			tst.b	(a2)
0000855E 6600                       			bne.s	locj_6E78
00008560 4E75                       			rts
00008562                            ;===============================================================================			
00008562                            	locj_6E78:
00008562 78F0                       			moveq	#-16,d4
00008564 7AF0                       			moveq	#-16,d5
00008566 1012                       			move.b	(a2),d0
00008568 0200 00A8                  			andi.b	#$A8,d0
0000856C 6700                       			beq.s	locj_6E8C
0000856E E208                       			lsr.b	#1,d0
00008570 1480                       			move.b	d0,(a2)
00008572 3A3C 0140                  			move.w	#320,d5
00008576                            	locj_6E8C:
00008576 41F9 0000 84DE             			lea	(locj_6DF4).l,a0
0000857C 3038 F70C                  			move.w	(v_bgscreenposy).w,d0
00008580 0240 01F0                  			andi.w	#$1F0,d0
00008584 E848                       			lsr.w	#4,d0
00008586 41F0 0000                  			lea	(a0,d0.w),a0
0000858A 6000 0000                  			bra.w	locj_6FEC						
0000858E                            ;===============================================================================
0000858E                            
0000858E                            
0000858E                            	; locj_6EA4:
0000858E                            	DrawBGScrollBlock3:
0000858E 4A12                       			tst.b	(a2)
00008590 6700 0000                  			beq.w	locj_6EF0
00008594 0C38 0002 FE10             			cmpi.b	#id_MZ,(v_zone).w
0000859A 6700 0000                  			beq.w	Draw_Mz
0000859E 0892 0000                  			bclr	#0,(a2)
000085A2 6700                       			beq.s	locj_6ED0
000085A4                            			; Draw new tiles on the left
000085A4 383C 0040                  			move.w	#$40,d4
000085A8 7AF0                       			moveq	#-16,d5
000085AA 6100 0000                  			bsr.w	Calc_VRAM_Pos
000085AE 383C 0040                  			move.w	#$40,d4
000085B2 7AF0                       			moveq	#-16,d5
000085B4 7C02                       			moveq	#3-1,d6
000085B6 6100 0000                  			bsr.w	DrawBlocks_TB_2
000085BA                            	locj_6ED0:
000085BA 0892 0001                  			bclr	#1,(a2)
000085BE 6700                       			beq.s	locj_6EF0
000085C0                            			; Draw new tiles on the right
000085C0 383C 0040                  			move.w	#$40,d4
000085C4 3A3C 0140                  			move.w	#320,d5
000085C8 6100 0000                  			bsr.w	Calc_VRAM_Pos
000085CC 383C 0040                  			move.w	#$40,d4
000085D0 3A3C 0140                  			move.w	#320,d5
000085D4 7C02                       			moveq	#3-1,d6
000085D6 6100 0000                  			bsr.w	DrawBlocks_TB_2
000085DA                            	locj_6EF0:
000085DA 4E75                       			rts
000085DC                            	locj_6EF2:
000085DC 0000 0000 0000 0606 0404+  			dc.b $00,$00,$00,$00,$00,$00,$06,$06,$04,$04,$04,$04,$04,$04,$04,$04
000085EC 0402 0202 0202 0202 0202+  			dc.b $04,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02
000085FC 0202 0202 0202 0202 0202+  			dc.b $02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02
0000860C 0202 0202 0202 0202 0202+  			dc.b $02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02
0000861C 0202 0202 0202 0202 0202+  			dc.b $02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02
0000862C 0202 0202 0202 0202 0202+  			dc.b $02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02
0000863C 0200                       			dc.b $02,$00
0000863E                            ;===============================================================================
0000863E                            	Draw_Mz:
0000863E 78F0                       			moveq	#-16,d4
00008640 0892 0000                  			bclr	#0,(a2)
00008644 6600                       			bne.s	locj_6F66
00008646 0892 0001                  			bclr	#1,(a2)
0000864A 6700                       			beq.s	locj_6FAE
0000864C 383C 00E0                  			move.w	#224,d4
00008650                            	locj_6F66:
00008650 41F9 0000 85DD             			lea	(locj_6EF2+1).l,a0
00008656 3038 F70C                  			move.w	(v_bgscreenposy).w,d0
0000865A 0440 0200                  			subi.w	#$200,d0
0000865E D044                       			add.w	d4,d0
00008660 0240 07F0                  			andi.w	#$7F0,d0
00008664 E848                       			lsr.w	#4,d0
00008666 1030 0000                  			move.b	(a0,d0.w),d0
0000866A 367B 0000                  			movea.w	locj_6FE4(pc,d0.w),a3
0000866E 6700                       			beq.s	locj_6F9A
00008670 7AF0                       			moveq	#-16,d5
00008672 48E7 0C00                  			movem.l	d4/d5,-(sp)
00008676 6100 0000                  			bsr.w	Calc_VRAM_Pos
0000867A 4CDF 0030                  			movem.l	(sp)+,d4/d5
0000867E 6100 0000                  			bsr.w	DrawBlocks_LR
00008682 6000                       			bra.s	locj_6FAE
00008684                            ;===============================================================================
00008684                            	locj_6F9A:
00008684 7A00                       			moveq	#0,d5
00008686 48E7 0C00                  			movem.l	d4/d5,-(sp)
0000868A 6100 0000                  			bsr.w	Calc_VRAM_Pos_2
0000868E 4CDF 0030                  			movem.l	(sp)+,d4/d5
00008692 7C1F                       			moveq	#(512/16)-1,d6
00008694 6100 0000                  			bsr.w	DrawBlocks_LR_3
00008698                            	locj_6FAE:
00008698 4A12                       			tst.b	(a2)
0000869A 6600                       			bne.s	locj_6FB4
0000869C 4E75                       			rts
0000869E                            ;===============================================================================			
0000869E                            	locj_6FB4:
0000869E 78F0                       			moveq	#-16,d4
000086A0 7AF0                       			moveq	#-16,d5
000086A2 1012                       			move.b	(a2),d0
000086A4 0200 00A8                  			andi.b	#$A8,d0
000086A8 6700                       			beq.s	locj_6FC8
000086AA E208                       			lsr.b	#1,d0
000086AC 1480                       			move.b	d0,(a2)
000086AE 3A3C 0140                  			move.w	#320,d5
000086B2                            	locj_6FC8:
000086B2 41F9 0000 85DC             			lea	(locj_6EF2).l,a0
000086B8 3038 F70C                  			move.w	(v_bgscreenposy).w,d0
000086BC 0440 0200                  			subi.w	#$200,d0
000086C0 0240 07F0                  			andi.w	#$7F0,d0
000086C4 E848                       			lsr.w	#4,d0
000086C6 41F0 0000                  			lea	(a0,d0.w),a0
000086CA 6000 0000                  			bra.w	locj_6FEC
000086CE                            ;===============================================================================			
000086CE                            	locj_6FE4:
000086CE FF18 FF18 FF20 FF28        			dc.w v_bgscreenposx_dup, v_bgscreenposx_dup, v_bg2screenposx_dup, v_bg3screenposx_dup
000086D6                            	locj_6FEC:
000086D6 7C0F                       			moveq	#((224+16+16)/16)-1,d6
000086D8 2E3C 0080 0000             			move.l	#$800000,d7
000086DE                            	locj_6FF4:			
000086DE 7000                       			moveq	#0,d0
000086E0 1018                       			move.b	(a0)+,d0
000086E2 0112                       			btst	d0,(a2)
000086E4 6700                       			beq.s	locj_701C
000086E6 367B 00E6                  			move.w	locj_6FE4(pc,d0.w),a3
000086EA 48E7 0C80                  			movem.l	d4/d5/a0,-(sp)
000086EE 48E7 0C00                  			movem.l	d4/d5,-(sp)
000086F2 6100 0000                  			bsr.w	GetBlockData
000086F6 4CDF 0030                  			movem.l	(sp)+,d4/d5
000086FA 6100 0000                  			bsr.w	Calc_VRAM_Pos
000086FE 6100 0000                  			bsr.w	DrawBlock
00008702 4CDF 0130                  			movem.l	(sp)+,d4/d5/a0
00008706                            	locj_701C:
00008706 0644 0010                  			addi.w	#16,d4
0000870A 51CE FFD2                  			dbf	d6,locj_6FF4
0000870E 4212                       			clr.b	(a2)
00008710 4E75                       			rts			
00008712                            
00008712                            
00008712                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008712                            
00008712                            ; Don't be fooled by the name: this function's for drawing from left to right
00008712                            ; when the camera's moving up or down
00008712                            ; DrawTiles_LR:
00008712                            DrawBlocks_LR:
00008712 7C15                       		moveq	#((320+16+16)/16)-1,d6	; Draw the entire width of the screen + two extra columns
00008714                            ; DrawTiles_LR_2:
00008714                            DrawBlocks_LR_2:
00008714 2E3C 0080 0000             		move.l	#$800000,d7	; Delta between rows of tiles
0000871A 2200                       		move.l	d0,d1
0000871C                            
0000871C                            	@loop:
0000871C 48E7 0C00                  		movem.l	d4-d5,-(sp)
00008720 6100 0000                  		bsr.w	GetBlockData
00008724 2001                       		move.l	d1,d0
00008726 6100 0000                  		bsr.w	DrawBlock
0000872A 5801                       		addq.b	#4,d1		; Two tiles ahead
0000872C 0201 007F                  		andi.b	#$7F,d1		; Wrap around row
00008730 4CDF 0030                  		movem.l	(sp)+,d4-d5
00008734 0645 0010                  		addi.w	#16,d5		; Move X coordinate one block ahead
00008738 51CE FFE2                  		dbf	d6,@loop
0000873C 4E75                       		rts
0000873E                            ; End of function DrawBlocks_LR
0000873E                            
0000873E                            ; DrawTiles_LR_3:
0000873E                            DrawBlocks_LR_3:
0000873E 2E3C 0080 0000             		move.l	#$800000,d7
00008744 2200                       		move.l	d0,d1
00008746                            
00008746                            	@loop:
00008746 48E7 0C00                  		movem.l	d4-d5,-(sp)
0000874A 6100 0000                  		bsr.w	GetBlockData_2
0000874E 2001                       		move.l	d1,d0
00008750 6100 0000                  		bsr.w	DrawBlock
00008754 5801                       		addq.b	#4,d1
00008756 0201 007F                  		andi.b	#$7F,d1
0000875A 4CDF 0030                  		movem.l	(sp)+,d4-d5
0000875E 0645 0010                  		addi.w	#16,d5
00008762 51CE FFE2                  		dbf	d6,@loop
00008766 4E75                       		rts	
00008768                            ; End of function DrawBlocks_LR_3
00008768                            
00008768                            
00008768                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008768                            
00008768                            ; Don't be fooled by the name: this function's for drawing from top to bottom
00008768                            ; when the camera's moving left or right
00008768                            ; DrawTiles_TB:
00008768                            DrawBlocks_TB:
00008768 7C0F                       		moveq	#((224+16+16)/16)-1,d6	; Draw the entire height of the screen + two extra rows
0000876A                            ; DrawTiles_TB_2:
0000876A                            DrawBlocks_TB_2:
0000876A 2E3C 0080 0000             		move.l	#$800000,d7	; Delta between rows of tiles
00008770 2200                       		move.l	d0,d1
00008772                            
00008772                            	@loop:
00008772 48E7 0C00                  		movem.l	d4-d5,-(sp)
00008776 6100 0000                  		bsr.w	GetBlockData
0000877A 2001                       		move.l	d1,d0
0000877C 6100 0000                  		bsr.w	DrawBlock
00008780 0641 0100                  		addi.w	#$100,d1	; Two rows ahead
00008784 0241 0FFF                  		andi.w	#$FFF,d1	; Wrap around plane
00008788 4CDF 0030                  		movem.l	(sp)+,d4-d5
0000878C 0644 0010                  		addi.w	#16,d4		; Move X coordinate one block ahead
00008790 51CE FFE0                  		dbf	d6,@loop
00008794 4E75                       		rts	
00008796                            ; End of function DrawBlocks_TB_2
00008796                            
00008796                            
00008796                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008796                            
00008796                            ; Draws a block's worth of tiles
00008796                            ; Parameters:
00008796                            ; a0 = Pointer to block metadata (block index and X/Y flip)
00008796                            ; a1 = Pointer to block
00008796                            ; a5 = Pointer to VDP command port
00008796                            ; a6 = Pointer to VDP data port
00008796                            ; d0 = VRAM command to access plane
00008796                            ; d2 = VRAM plane A/B specifier
00008796                            ; d7 = Plane row delta
00008796                            ; DrawTiles:
00008796                            DrawBlock:
00008796 8042                       		or.w	d2,d0	; OR in that plane A/B specifier to the VRAM command
00008798 4840                       		swap	d0
0000879A 0810 0004                  		btst	#4,(a0)	; Check Y-flip bit
0000879E 6600                       		bne.s	DrawFlipY
000087A0 0810 0003                  		btst	#3,(a0)	; Check X-flip bit
000087A4 6600                       		bne.s	DrawFlipX
000087A6 2A80                       		move.l	d0,(a5)
000087A8 2C99                       		move.l	(a1)+,(a6)	; Write top two tiles
000087AA D087                       		add.l	d7,d0		; Next row
000087AC 2A80                       		move.l	d0,(a5)
000087AE 2C99                       		move.l	(a1)+,(a6)	; Write bottom two tiles
000087B0 4E75                       		rts	
000087B2                            ; ===========================================================================
000087B2                            
000087B2                            DrawFlipX:
000087B2 2A80                       		move.l	d0,(a5)
000087B4 2819                       		move.l	(a1)+,d4
000087B6 0A84 0800 0800             		eori.l	#$8000800,d4	; Invert X-flip bits of each tile
000087BC 4844                       		swap	d4		; Swap the tiles around
000087BE 2C84                       		move.l	d4,(a6)		; Write top two tiles
000087C0 D087                       		add.l	d7,d0		; Next row
000087C2 2A80                       		move.l	d0,(a5)
000087C4 2819                       		move.l	(a1)+,d4
000087C6 0A84 0800 0800             		eori.l	#$8000800,d4
000087CC 4844                       		swap	d4
000087CE 2C84                       		move.l	d4,(a6)		; Write bottom two tiles
000087D0 4E75                       		rts	
000087D2                            ; ===========================================================================
000087D2                            
000087D2                            DrawFlipY:
000087D2 0810 0003                  		btst	#3,(a0)
000087D6 6600                       		bne.s	DrawFlipXY
000087D8 2A80                       		move.l	d0,(a5)
000087DA 2A19                       		move.l	(a1)+,d5
000087DC 2819                       		move.l	(a1)+,d4
000087DE 0A84 1000 1000             		eori.l	#$10001000,d4
000087E4 2C84                       		move.l	d4,(a6)
000087E6 D087                       		add.l	d7,d0
000087E8 2A80                       		move.l	d0,(a5)
000087EA 0A85 1000 1000             		eori.l	#$10001000,d5
000087F0 2C85                       		move.l	d5,(a6)
000087F2 4E75                       		rts	
000087F4                            ; ===========================================================================
000087F4                            
000087F4                            DrawFlipXY:
000087F4 2A80                       		move.l	d0,(a5)
000087F6 2A19                       		move.l	(a1)+,d5
000087F8 2819                       		move.l	(a1)+,d4
000087FA 0A84 1800 1800             		eori.l	#$18001800,d4
00008800 4844                       		swap	d4
00008802 2C84                       		move.l	d4,(a6)
00008804 D087                       		add.l	d7,d0
00008806 2A80                       		move.l	d0,(a5)
00008808 0A85 1800 1800             		eori.l	#$18001800,d5
0000880E 4845                       		swap	d5
00008810 2C85                       		move.l	d5,(a6)
00008812 4E75                       		rts	
00008814                            ; End of function DrawBlocks
00008814                            
00008814                            ; ===========================================================================
00008814                            ; unused garbage
00008814                            
00008814                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008814                            
00008814                            ; Gets address of block at a certain coordinate
00008814                            ; Parameters:
00008814                            ; a4 = Pointer to level layout
00008814                            ; d4 = Relative Y coordinate
00008814                            ; d5 = Relative X coordinate
00008814                            ; Returns:
00008814                            ; a0 = Address of block metadata
00008814                            ; a1 = Address of block
00008814                            ; DrawBlocks:
00008814                            GetBlockData:
00008814 DA53                       			add.w	(a3),d5
00008816                            	GetBlockData_2:
00008816 D86B 0004                  			add.w	4(a3),d4
0000881A 43F8 B000                  			lea	(v_16x16).w,a1
0000881E                            		; Turn Y coordinate into index into level layout
0000881E 3604                       		move.w	d4,d3
00008820 E24B                       		lsr.w	#1,d3
00008822 0243 0380                  		andi.w	#$380,d3
00008826                            		; Turn X coordinate into index into level layout
00008826 E64D                       		lsr.w	#3,d5
00008828 3005                       		move.w	d5,d0
0000882A EA48                       		lsr.w	#5,d0
0000882C 0240 007F                  		andi.w	#$7F,d0
00008830                            		; Get chunk from level layout
00008830 D043                       		add.w	d3,d0
00008832 76FF                       		moveq	#-1,d3
00008834 1634 0000                  		move.b	(a4,d0.w),d3
00008838 6700                       		beq.s	locret_6C1E	; If chunk 00, just return a pointer to the first block (expected to be empty)
0000883A                            		; Turn chunk ID into index into chunk table
0000883A 5303                       		subq.b	#1,d3
0000883C 0243 007F                  		andi.w	#$7F,d3
00008840 EE5B                       		ror.w	#7,d3
00008842                            		; Turn Y coordinate into index into chunk
00008842 D844                       		add.w	d4,d4
00008844 0244 01E0                  		andi.w	#$1E0,d4
00008848                            		; Turn X coordinate into index into chunk
00008848 0245 001E                  		andi.w	#$1E,d5
0000884C                            		; Get block metadata from chunk
0000884C D644                       		add.w	d4,d3
0000884E D645                       		add.w	d5,d3
00008850 2043                       		movea.l	d3,a0
00008852 3610                       		move.w	(a0),d3
00008854                            		; Turn block ID into address
00008854 0243 03FF                  		andi.w	#$3FF,d3
00008858 E74B                       		lsl.w	#3,d3
0000885A D2C3                       		adda.w	d3,a1
0000885C                            
0000885C                            locret_6C1E:
0000885C 4E75                       		rts	
0000885E                            ; End of function GetBlockData
0000885E                            
0000885E                            
0000885E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000885E                            
0000885E                            ; Produces a VRAM plane access command from coordinates
0000885E                            ; Parameters:
0000885E                            ; d4 = Relative Y coordinate
0000885E                            ; d5 = Relative X coordinate
0000885E                            ; Returns VDP command in d0
0000885E                            Calc_VRAM_Pos:
0000885E DA53                       			add.w	(a3),d5
00008860                            	Calc_VRAM_Pos_2:
00008860 D86B 0004                  			add.w	4(a3),d4
00008864                            		; Floor the coordinates to the nearest pair of tiles (the size of a block).
00008864                            		; Also note that this wraps the value to the size of the plane:
00008864                            		; The plane is 64*8 wide, so wrap at $100, and it's 32*8 tall, so wrap at $200
00008864 0244 00F0                  		andi.w	#$F0,d4
00008868 0245 01F0                  		andi.w	#$1F0,d5
0000886C                            		; Transform the adjusted coordinates into a VDP command
0000886C E94C                       		lsl.w	#4,d4
0000886E E44D                       		lsr.w	#2,d5
00008870 D845                       		add.w	d5,d4
00008872 7003                       		moveq	#3,d0	; Highest bits of plane VRAM address
00008874 4840                       		swap	d0
00008876 3004                       		move.w	d4,d0
00008878 4E75                       		rts	
0000887A                            ; End of function Calc_VRAM_Pos
0000887A                            
0000887A                            
0000887A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000887A                            ; not used
0000887A                            
0000887A                            ; This is just like Calc_VRAM_Pos, but seemingly for an earlier
0000887A                            ; VRAM layout: the only difference is the high bits of the
0000887A                            ; plane's VRAM address, which are 10 instead of 11.
0000887A                            ; Both the foreground and background are at $C000 and $E000
0000887A                            ; respectively, so this one starting at $8000 makes no sense.
0000887A                            ; sub_6C3C:
0000887A                            Calc_VRAM_Pos_Unknown:
0000887A D86B 0004                  		add.w	4(a3),d4
0000887E DA53                       		add.w	(a3),d5
00008880 0244 00F0                  		andi.w	#$F0,d4
00008884 0245 01F0                  		andi.w	#$1F0,d5
00008888 E94C                       		lsl.w	#4,d4
0000888A E44D                       		lsr.w	#2,d5
0000888C D845                       		add.w	d5,d4
0000888E 7002                       		moveq	#2,d0
00008890 4840                       		swap	d0
00008892 3004                       		move.w	d4,d0
00008894 4E75                       		rts	
00008896                            ; End of function Calc_VRAM_Pos_Unknown
00008896                            
00008896                            ; ---------------------------------------------------------------------------
00008896                            ; Subroutine to	load tiles as soon as the level	appears
00008896                            ; ---------------------------------------------------------------------------
00008896                            
00008896                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008896                            
00008896                            
00008896                            LoadTilesFromStart:
00008896 4BF9 00C0 0004             		lea	(vdp_control_port).l,a5
0000889C 4DF9 00C0 0000             		lea	(vdp_data_port).l,a6
000088A2 47F8 F700                  		lea	(v_screenposx).w,a3
000088A6 49F8 A400                  		lea	(v_lvllayout).w,a4
000088AA 343C 4000                  		move.w	#$4000,d2
000088AE 6100                       		bsr.s	DrawChunks
000088B0 47F8 F708                  		lea	(v_bgscreenposx).w,a3
000088B4 49F8 A440                  		lea	(v_lvllayout+$40).w,a4
000088B8 343C 6000                  		move.w	#$6000,d2
000088BC 4A38 FE10                  			tst.b	(v_zone).w
000088C0 6700 0000                  			beq.w	Draw_GHz_Bg
000088C4 0C38 0002 FE10             			cmpi.b	#id_MZ,(v_zone).w
000088CA 6700 0000                  			beq.w	Draw_Mz_Bg
000088CE 0C78 0500 FE10             			cmpi.w	#(id_SBZ<<8)+0,(v_zone).w
000088D4 6700 0000                  			beq.w	Draw_SBz_Bg
000088D8 0C38 0006 FE10             			cmpi.b	#id_EndZ,(v_zone).w
000088DE 6700 0000                  			beq.w	Draw_GHz_Bg
000088E2                            ; End of function LoadTilesFromStart
000088E2                            
000088E2                            
000088E2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000088E2                            
000088E2                            
000088E2                            DrawChunks:
000088E2 78F0                       		moveq	#-16,d4
000088E4 7C0F                       		moveq	#((224+16+16)/16)-1,d6
000088E6                            
000088E6                            	@loop:
000088E6 48E7 0E00                  		movem.l	d4-d6,-(sp)
000088EA 7A00                       		moveq	#0,d5
000088EC 3204                       		move.w	d4,d1
000088EE 6100 FF6E                  		bsr.w	Calc_VRAM_Pos
000088F2 3801                       		move.w	d1,d4
000088F4 7A00                       		moveq	#0,d5
000088F6 7C1F                       		moveq	#(512/16)-1,d6
000088F8 6100 FE1A                  		bsr.w	DrawBlocks_LR_2
000088FC 4CDF 0070                  		movem.l	(sp)+,d4-d6
00008900 0644 0010                  		addi.w	#16,d4
00008904 51CE FFE0                  		dbf	d6,@loop
00008908 4E75                       		rts	
0000890A                            ; End of function DrawChunks
0000890A                            
0000890A                            	Draw_GHz_Bg:
0000890A 7800                       			moveq	#0,d4
0000890C 7C0F                       			moveq	#((224+16+16)/16)-1,d6
0000890E                            	locj_7224:			
0000890E 48E7 0E00                  			movem.l	d4-d6,-(sp)
00008912 41F9 0000 0000             			lea	(locj_724a),a0
00008918 3038 F70C                  			move.w	(v_bgscreenposy).w,d0
0000891C D044                       			add.w	d4,d0
0000891E 0240 00F0                  			andi.w	#$F0,d0
00008922 6100 0000                  			bsr.w	locj_72Ba
00008926 4CDF 0070                  			movem.l	(sp)+,d4-d6
0000892A 0644 0010                  			addi.w	#16,d4
0000892E 51CE FFDE                  			dbf	d6,locj_7224
00008932 4E75                       			rts
00008934                            	locj_724a:
00008934 0000 0000 0606 0604 0404+  			dc.b $00,$00,$00,$00,$06,$06,$06,$04,$04,$04,$00,$00,$00,$00,$00,$00
00008944                            ;-------------------------------------------------------------------------------
00008944                            	Draw_Mz_Bg:;locj_725a:
00008944 78F0                       			moveq	#-16,d4
00008946 7C0F                       			moveq	#((224+16+16)/16)-1,d6
00008948                            	locj_725E:			
00008948 48E7 0E00                  			movem.l	d4-d6,-(sp)
0000894C 41FA FC8F                  			lea	(locj_6EF2+1),a0
00008950 3038 F70C                  			move.w	(v_bgscreenposy).w,d0
00008954 0440 0200                  			subi.w	#$200,d0
00008958 D044                       			add.w	d4,d0
0000895A 0240 07F0                  			andi.w	#$7F0,d0
0000895E 6100 0000                  			bsr.w	locj_72Ba
00008962 4CDF 0070                  			movem.l	(sp)+,d4-d6
00008966 0644 0010                  			addi.w	#16,d4
0000896A 51CE FFDC                  			dbf	d6,locj_725E
0000896E 4E75                       			rts
00008970                            ;-------------------------------------------------------------------------------
00008970                            	Draw_SBz_Bg:;locj_7288:
00008970 78F0                       			moveq	#-16,d4
00008972 7C0F                       			moveq	#((224+16+16)/16)-1,d6
00008974                            	locj_728C:			
00008974 48E7 0E00                  			movem.l	d4-d6,-(sp)
00008978 41FA FB65                  			lea	(locj_6DF4+1),a0
0000897C 3038 F70C                  			move.w	(v_bgscreenposy).w,d0
00008980 D044                       			add.w	d4,d0
00008982 0240 01F0                  			andi.w	#$1F0,d0
00008986 6100 0000                  			bsr.w	locj_72Ba
0000898A 4CDF 0070                  			movem.l	(sp)+,d4-d6
0000898E 0644 0010                  			addi.w	#16,d4
00008992 51CE FFE0                  			dbf	d6,locj_728C
00008996 4E75                       			rts
00008998                            ;-------------------------------------------------------------------------------
00008998                            	locj_72B2:
00008998 F708 F708 F710 F718        			dc.w v_bgscreenposx, v_bgscreenposx, v_bg2screenposx, v_bg3screenposx
000089A0                            	locj_72Ba:
000089A0 E848                       			lsr.w	#4,d0
000089A2 1030 0000                  			move.b	(a0,d0.w),d0
000089A6 367B 00F0                  			movea.w	locj_72B2(pc,d0.w),a3
000089AA 6700                       			beq.s	locj_72da
000089AC 7AF0                       			moveq	#-16,d5
000089AE 48E7 0C00                  			movem.l	d4/d5,-(sp)
000089B2 6100 FEAA                  			bsr.w	Calc_VRAM_Pos
000089B6 4CDF 0030                  			movem.l	(sp)+,d4/d5
000089BA 6100 FD56                  			bsr.w	DrawBlocks_LR
000089BE 6000                       			bra.s	locj_72EE
000089C0                            	locj_72da:
000089C0 7A00                       			moveq	#0,d5
000089C2 48E7 0C00                  			movem.l	d4/d5,-(sp)
000089C6 6100 FE98                  			bsr.w	Calc_VRAM_Pos_2
000089CA 4CDF 0030                  			movem.l	(sp)+,d4/d5
000089CE 7C1F                       			moveq	#(512/16)-1,d6
000089D0 6100 FD6C                  			bsr.w	DrawBlocks_LR_3
000089D4                            	locj_72EE:
000089D4 4E75                       			rts
000089D6                            
000089D6                            ; ---------------------------------------------------------------------------
000089D6                            ; Subroutine to load basic level data
000089D6                            ; ---------------------------------------------------------------------------
000089D6                            
000089D6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000089D6                            
000089D6                            
000089D6                            LevelDataLoad:
000089D6 7000                       		moveq	#0,d0
000089D8 1038 FE10                  		move.b	(v_zone).w,d0
000089DC E948                       		lsl.w	#4,d0
000089DE 45F9 0000 0000             		lea	(LevelHeaders).l,a2
000089E4 45F2 0000                  		lea	(a2,d0.w),a2
000089E8 2F0A                       		move.l	a2,-(sp)
000089EA 588A                       		addq.l	#4,a2
000089EC 205A                       		movea.l	(a2)+,a0
000089EE 43F8 B000                  		lea	(v_16x16).w,a1	; RAM address for 16x16 mappings
000089F2 303C 0000                  		move.w	#0,d0
000089F6 6100 8EE0                  		bsr.w	EniDec
000089FA 205A                       		movea.l	(a2)+,a0
000089FC 43F9 00FF 0000             		lea	(v_256x256).l,a1 ; RAM address for 256x256 mappings
00008A02 6100 9052                  		bsr.w	KosDec
00008A06 6100 0000                  		bsr.w	LevelLayoutLoad
00008A0A 301A                       		move.w	(a2)+,d0
00008A0C 3012                       		move.w	(a2),d0
00008A0E 0240 00FF                  		andi.w	#$FF,d0
00008A12 0C78 0103 FE10             		cmpi.w	#(id_LZ<<8)+3,(v_zone).w ; is level SBZ3 (LZ4) ?
00008A18 6600                       		bne.s	@notSBZ3	; if not, branch
00008A1A 700C                       		moveq	#palid_SBZ3,d0	; use SB3 palette
00008A1C                            
00008A1C                            	@notSBZ3:
00008A1C 0C78 0501 FE10             		cmpi.w	#(id_SBZ<<8)+1,(v_zone).w ; is level SBZ2?
00008A22 6700                       		beq.s	@isSBZorFZ	; if yes, branch
00008A24 0C78 0502 FE10             		cmpi.w	#(id_SBZ<<8)+2,(v_zone).w ; is level FZ?
00008A2A 6600                       		bne.s	@normalpal	; if not, branch
00008A2C                            
00008A2C                            	@isSBZorFZ:
00008A2C 700E                       		moveq	#palid_SBZ2,d0	; use SBZ2/FZ palette
00008A2E                            
00008A2E                            	@normalpal:
00008A2E 6100 9A4C                  		bsr.w	PalLoad1	; load palette (based on d0)
00008A32 245F                       		movea.l	(sp)+,a2
00008A34 584A                       		addq.w	#4,a2		; read number for 2nd PLC
00008A36 7000                       		moveq	#0,d0
00008A38 1012                       		move.b	(a2),d0
00008A3A 6700                       		beq.s	@skipPLC	; if 2nd PLC is 0 (i.e. the ending sequence), branch
00008A3C 6100 8CFC                  		bsr.w	AddPLC		; load pattern load cues
00008A40                            
00008A40                            	@skipPLC:
00008A40 4E75                       		rts	
00008A42                            ; End of function LevelDataLoad
00008A42                            
00008A42                            ; ---------------------------------------------------------------------------
00008A42                            ; Level	layout loading subroutine
00008A42                            ; ---------------------------------------------------------------------------
00008A42                            
00008A42                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008A42                            
00008A42                            
00008A42                            LevelLayoutLoad:
00008A42 47F8 A400                  		lea	(v_lvllayout).w,a3
00008A46 323C 01FF                  		move.w	#$1FF,d1
00008A4A 7000                       		moveq	#0,d0
00008A4C                            
00008A4C                            LevLoad_ClrRam:
00008A4C 26C0                       		move.l	d0,(a3)+
00008A4E 51C9 FFFC                  		dbf	d1,LevLoad_ClrRam ; clear the RAM ($A400-A7FF)
00008A52                            
00008A52 47F8 A400                  		lea	(v_lvllayout).w,a3 ; RAM address for level layout
00008A56 7200                       		moveq	#0,d1
00008A58 6100 0000                  		bsr.w	LevelLayoutLoad2 ; load	level layout into RAM
00008A5C 47F8 A440                  		lea	(v_lvllayout+$40).w,a3 ; RAM address for background layout
00008A60 7202                       		moveq	#2,d1
00008A62                            ; End of function LevelLayoutLoad
00008A62                            
00008A62                            ; "LevelLayoutLoad2" is	run twice - for	the level and the background
00008A62                            
00008A62                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008A62                            
00008A62                            
00008A62                            LevelLayoutLoad2:
00008A62 3038 FE10                  		move.w	(v_zone).w,d0
00008A66 ED08                       		lsl.b	#6,d0
00008A68 EA48                       		lsr.w	#5,d0
00008A6A 3400                       		move.w	d0,d2
00008A6C D040                       		add.w	d0,d0
00008A6E D042                       		add.w	d2,d0
00008A70 D041                       		add.w	d1,d0
00008A72 43F9 0000 0000             		lea	(Level_Index).l,a1
00008A78 3031 0000                  		move.w	(a1,d0.w),d0
00008A7C 43F1 0000                  		lea	(a1,d0.w),a1
00008A80 7200                       		moveq	#0,d1
00008A82 3401                       		move.w	d1,d2
00008A84 1219                       		move.b	(a1)+,d1	; load level width (in tiles)
00008A86 1419                       		move.b	(a1)+,d2	; load level height (in	tiles)
00008A88                            
00008A88                            LevLoad_NumRows:
00008A88 3001                       		move.w	d1,d0
00008A8A 204B                       		movea.l	a3,a0
00008A8C                            
00008A8C                            LevLoad_Row:
00008A8C 10D9                       		move.b	(a1)+,(a0)+
00008A8E 51C8 FFFC                  		dbf	d0,LevLoad_Row	; load 1 row
00008A92 47EB 0080                  		lea	$80(a3),a3	; do next row
00008A96 51CA FFF0                  		dbf	d2,LevLoad_NumRows ; repeat for	number of rows
00008A9A 4E75                       		rts	
00008A9C                            ; End of function LevelLayoutLoad2
00008A9C                            
00008A9C                            		include	"_inc\DynamicLevelEvents.asm"
00008A9C                            ; ---------------------------------------------------------------------------
00008A9C                            ; Dynamic level events
00008A9C                            ; ---------------------------------------------------------------------------
00008A9C                            
00008A9C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008A9C                            
00008A9C                            
00008A9C                            DynamicLevelEvents:
00008A9C 7000                       		moveq	#0,d0
00008A9E 1038 FE10                  		move.b	(v_zone).w,d0
00008AA2 D040                       		add.w	d0,d0
00008AA4 303B 0000                  		move.w	DLE_Index(pc,d0.w),d0
00008AA8 4EBB 0000                  		jsr	DLE_Index(pc,d0.w) ; run level-specific events
00008AAC 7202                       		moveq	#2,d1
00008AAE 3038 F726                  		move.w	(v_limitbtm1).w,d0
00008AB2 9078 F72E                  		sub.w	(v_limitbtm2).w,d0 ; has lower level boundary changed recently?
00008AB6 6700                       		beq.s	DLE_NoChg	; if not, branch
00008AB8 6400                       		bcc.s	loc_6DAC
00008ABA                            
00008ABA 4441                       		neg.w	d1
00008ABC 3038 F704                  		move.w	(v_screenposy).w,d0
00008AC0 B078 F726                  		cmp.w	(v_limitbtm1).w,d0
00008AC4 6300                       		bls.s	loc_6DA0
00008AC6 31C0 F72E                  		move.w	d0,(v_limitbtm2).w
00008ACA 0278 FFFE F72E             		andi.w	#$FFFE,(v_limitbtm2).w
00008AD0                            
00008AD0                            loc_6DA0:
00008AD0 D378 F72E                  		add.w	d1,(v_limitbtm2).w
00008AD4 11FC 0001 F75C             		move.b	#1,(f_bgscrollvert).w
00008ADA                            
00008ADA                            DLE_NoChg:
00008ADA 4E75                       		rts	
00008ADC                            ; ===========================================================================
00008ADC                            
00008ADC                            loc_6DAC:
00008ADC 3038 F704                  		move.w	(v_screenposy).w,d0
00008AE0 5040                       		addq.w	#8,d0
00008AE2 B078 F72E                  		cmp.w	(v_limitbtm2).w,d0
00008AE6 6500                       		bcs.s	loc_6DC4
00008AE8 0838 0001 D022             		btst	#1,(v_player+obStatus).w
00008AEE 6700                       		beq.s	loc_6DC4
00008AF0 D241                       		add.w	d1,d1
00008AF2 D241                       		add.w	d1,d1
00008AF4                            
00008AF4                            loc_6DC4:
00008AF4 D378 F72E                  		add.w	d1,(v_limitbtm2).w
00008AF8 11FC 0001 F75C             		move.b	#1,(f_bgscrollvert).w
00008AFE 4E75                       		rts	
00008B00                            ; End of function DynamicLevelEvents
00008B00                            
00008B00                            ; ===========================================================================
00008B00                            ; ---------------------------------------------------------------------------
00008B00                            ; Offset index for dynamic level events
00008B00                            ; ---------------------------------------------------------------------------
00008B00 0000 0000                  DLE_Index:	dc.w DLE_GHZ-DLE_Index, DLE_LZ-DLE_Index
00008B04 0000 0000                  		dc.w DLE_MZ-DLE_Index, DLE_SLZ-DLE_Index
00008B08 0000 0000                  		dc.w DLE_SYZ-DLE_Index, DLE_SBZ-DLE_Index
00008B0C 0000                       		dc.w DLE_Ending-DLE_Index
00008B0E                            ; ===========================================================================
00008B0E                            ; ---------------------------------------------------------------------------
00008B0E                            ; Green	Hill Zone dynamic level events
00008B0E                            ; ---------------------------------------------------------------------------
00008B0E                            
00008B0E                            DLE_GHZ:
00008B0E 7000                       		moveq	#0,d0
00008B10 1038 FE11                  		move.b	(v_act).w,d0
00008B14 D040                       		add.w	d0,d0
00008B16 303B 0000                  		move.w	DLE_GHZx(pc,d0.w),d0
00008B1A 4EFB 0000                  		jmp	DLE_GHZx(pc,d0.w)
00008B1E                            ; ===========================================================================
00008B1E 0000                       DLE_GHZx:	dc.w DLE_GHZ1-DLE_GHZx
00008B20 0000                       		dc.w DLE_GHZ2-DLE_GHZx
00008B22 0000                       		dc.w DLE_GHZ3-DLE_GHZx
00008B24                            ; ===========================================================================
00008B24                            
00008B24                            DLE_GHZ1:
00008B24 0C38 0000 F600             		cmpi.b	#id_Title,(v_gamemode).w
00008B2A 6600                       		bne.s	gohere
00008B2C 31FC 0400 F726             		move.w	#$400,(v_limitbtm1).w ; set lower y-boundary
00008B32 4E75                       		rts
00008B34                            gohere:
00008B34 31FC 0400 F726             		move.w	#$400,(v_limitbtm1).w ; set lower y-boundary
00008B3A 0C78 1680 F700             		cmpi.w	#$1680,(v_screenposx).w ; has the camera reached $1780 on x-axis?
00008B40 6500                       		bcs.s	locret_6E08	; if not, branch
00008B42 31FC 0720 F726             		move.w	#$720,(v_limitbtm1).w ; set lower y-boundary
00008B48                            
00008B48                            locret_6E08:
00008B48 4E75                       		rts	
00008B4A                            ; ===========================================================================
00008B4A                            
00008B4A                            DLE_GHZ2:
00008B4A 31FC 0300 F726             		move.w	#$300,(v_limitbtm1).w
00008B50 0C78 0380 F700             		cmpi.w	#$380,(v_screenposx).w
00008B56 6500                       		bcs.s	locret_6E3A
00008B58 31FC 0310 F726             		move.w	#$310,(v_limitbtm1).w
00008B5E 0C78 0960 F700             		cmpi.w	#$960,(v_screenposx).w
00008B64 6500                       		bcs.s	locret_6E3A
00008B66 0C78 0280 F704             		cmpi.w	#$280,(v_screenposy).w
00008B6C 6500                       		bcs.s	loc_6E9A
00008B6E 31FC 0400 F726             		move.w	#$400,(v_limitbtm1).w
00008B74 0C78 1200 F700             		cmpi.w	#$1200,(v_screenposx).w
00008B7A 6400                       		bcc.s	loc_6E8F
00008B7C 31FC 04C0 F726             		move.w	#$4C0,(v_limitbtm1).w
00008B82 31FC 04C0 F72E             		move.w	#$4C0,(v_limitbtm2).w
00008B88                            
00008B88                            loc_6E8F:
00008B88 0C78 1200 F700             		cmpi.w	#$1200,(v_screenposx).w
00008B8E 6400                       		bcc.s	loc_6E9A
00008B90                            
00008B90                            locret_6E3A:
00008B90 4E75                       		rts	
00008B92                            ; ===========================================================================
00008B92                            
00008B92                            loc_6E9A:
00008B92 31FC 0300 F726             		move.w	#$300,(v_limitbtm1).w
00008B98 5438 F742                  		addq.b	#2,(v_dle_routine).w
00008B9C 4E75                       		rts		
00008B9E                            ; ===========================================================================
00008B9E                            
00008B9E                            DLE_GHZ3:
00008B9E 7000                       		moveq	#0,d0
00008BA0 1038 F742                  		move.b	(v_dle_routine).w,d0
00008BA4 303B 0000                  		move.w	off_6E4A(pc,d0.w),d0
00008BA8 4EFB 0000                  		jmp	off_6E4A(pc,d0.w)
00008BAC                            ; ===========================================================================
00008BAC 0000                       off_6E4A:	dc.w DLE_GHZ3main-off_6E4A
00008BAE 0000                       		dc.w DLE_GHZ3boss-off_6E4A
00008BB0 0000                       		dc.w DLE_GHZ3end-off_6E4A
00008BB2                            ; ===========================================================================
00008BB2                            
00008BB2                            DLE_GHZ3main:
00008BB2 31FC 0300 F726             		move.w	#$300,(v_limitbtm1).w
00008BB8 0C78 0380 F700             		cmpi.w	#$380,(v_screenposx).w
00008BBE 6500                       		bcs.s	locret_6E96
00008BC0 31FC 0310 F726             		move.w	#$310,(v_limitbtm1).w
00008BC6 0C78 0860 F700             		cmpi.w	#$860,(v_screenposx).w
00008BCC 6500                       		bcs.s	locret_6E96
00008BCE 0C78 0280 F704             		cmpi.w	#$280,(v_screenposy).w
00008BD4 6500                       		bcs.s	loc_6E98
00008BD6 31FC 0400 F726             		move.w	#$400,(v_limitbtm1).w
00008BDC 0C78 1380 F700             		cmpi.w	#$1380,(v_screenposx).w
00008BE2 6400                       		bcc.s	loc_6E8E
00008BE4 31FC 04C0 F726             		move.w	#$4C0,(v_limitbtm1).w
00008BEA 31FC 04C0 F72E             		move.w	#$4C0,(v_limitbtm2).w
00008BF0                            
00008BF0                            loc_6E8E:
00008BF0 0C78 1700 F700             		cmpi.w	#$1700,(v_screenposx).w
00008BF6 6400                       		bcc.s	loc_6E98
00008BF8                            
00008BF8                            locret_6E96:
00008BF8 4E75                       		rts	
00008BFA                            ; ===========================================================================
00008BFA                            
00008BFA                            loc_6E98:
00008BFA 31FC 0300 F726             		move.w	#$300,(v_limitbtm1).w
00008C00 5438 F742                  		addq.b	#2,(v_dle_routine).w
00008C04 4E75                       		rts	
00008C06                            ; ===========================================================================
00008C06                            
00008C06                            DLE_GHZ3boss:
00008C06 0C78 0960 F700             		cmpi.w	#$960,(v_screenposx).w
00008C0C 6400                       		bcc.s	loc_6EB0
00008C0E 5538 F742                  		subq.b	#2,(v_dle_routine).w
00008C12                            
00008C12                            loc_6EB0:
00008C12 0C78 2960 F700             		cmpi.w	#$2960,(v_screenposx).w
00008C18 6500                       		bcs.s	locret_6EE8
00008C1A 6100 0000                  		bsr.w	FindFreeObj
00008C1E 6600                       		bne.s	loc_6ED0
00008C20 12BC 0000                  		move.b	#id_BossGreenHill,0(a1) ; load GHZ boss	object
00008C24 337C 2A60 0008             		move.w	#$2A60,obX(a1)
00008C2A 337C 0280 000C             		move.w	#$280,obY(a1)
00008C30                            
00008C30                            loc_6ED0:
00008C38 11FC 0001 F7AA             		move.b	#1,(f_lockscreen).w ; lock screen
00008C3E 5438 F742                  		addq.b	#2,(v_dle_routine).w
00008C42 7000                       		moveq	#plcid_Boss,d0
00008C44 6000 8AF4                  		bra.w	AddPLC		; load boss patterns
00008C48                            ; ===========================================================================
00008C48                            
00008C48                            locret_6EE8:
00008C48 4E75                       		rts	
00008C4A                            ; ===========================================================================
00008C4A                            
00008C4A                            DLE_GHZ3end:
00008C4A 31F8 F700 F728             		move.w	(v_screenposx).w,(v_limitleft2).w
00008C50 4E75                       		rts	
00008C52                            ; ===========================================================================
00008C52                            ; ---------------------------------------------------------------------------
00008C52                            ; Labyrinth Zone dynamic level events
00008C52                            ; ---------------------------------------------------------------------------
00008C52                            
00008C52                            DLE_LZ:
00008C52 7000                       		moveq	#0,d0
00008C54 1038 FE11                  		move.b	(v_act).w,d0
00008C58 D040                       		add.w	d0,d0
00008C5A 303B 0000                  		move.w	DLE_LZx(pc,d0.w),d0
00008C5E 4EFB 0000                  		jmp	DLE_LZx(pc,d0.w)
00008C62                            ; ===========================================================================
00008C62 0000                       DLE_LZx:	dc.w DLE_LZ12-DLE_LZx
00008C64 0000                       		dc.w DLE_LZ12-DLE_LZx
00008C66 0000                       		dc.w DLE_LZ3-DLE_LZx
00008C68 0000                       		dc.w DLE_SBZ3-DLE_LZx
00008C6A                            ; ===========================================================================
00008C6A                            
00008C6A                            DLE_LZ12:
00008C6A 4E75                       		rts	
00008C6C                            ; ===========================================================================
00008C6C                            
00008C6C                            DLE_LZ3:
00008C6C 4A38 F7EF                  		tst.b	(f_switch+$F).w	; has switch $F	been pressed?
00008C70 6700                       		beq.s	loc_6F28	; if not, branch
00008C72 43F8 A506                  		lea	(v_lvllayout+$106).w,a1
00008C76 0C11 0007                  		cmpi.b	#7,(a1)
00008C7A 6700                       		beq.s	loc_6F28
00008C7C 12BC 0007                  		move.b	#7,(a1)		; modify level layout
00008C88                            
00008C88                            loc_6F28:
00008C88 4A38 F742                  		tst.b	(v_dle_routine).w
00008C8C 6600                       		bne.s	locret_6F64
00008C8E 0C78 1CA0 F700             		cmpi.w	#$1CA0,(v_screenposx).w
00008C94 6500                       		bcs.s	locret_6F62
00008C96 0C78 0600 F704             		cmpi.w	#$600,(v_screenposy).w
00008C9C 6400                       		bcc.s	locret_6F62
00008C9E 6100 0000                  		bsr.w	FindFreeObj
00008CA2 6600                       		bne.s	loc_6F4A
00008CA4 12BC 0000                  		move.b	#id_BossLabyrinth,0(a1) ; load LZ boss object
00008CA8                            
00008CA8                            loc_6F4A:
00008CB0 11FC 0001 F7AA             		move.b	#1,(f_lockscreen).w ; lock screen
00008CB6 5438 F742                  		addq.b	#2,(v_dle_routine).w
00008CBA 7000                       		moveq	#plcid_Boss,d0
00008CBC 6000 8A7C                  		bra.w	AddPLC		; load boss patterns
00008CC0                            ; ===========================================================================
00008CC0                            
00008CC0                            locret_6F62:
00008CC0 4E75                       		rts	
00008CC2                            ; ===========================================================================
00008CC2                            
00008CC2                            locret_6F64:
00008CC2 4E75                       		rts	
00008CC4                            ; ===========================================================================
00008CC4                            
00008CC4                            DLE_SBZ3:
00008CC4 0C78 0D00 F700             		cmpi.w	#$D00,(v_screenposx).w
00008CCA 6500                       		bcs.s	locret_6F8C
00008CCC 0C78 0018 D00C             		cmpi.w	#$18,(v_player+obY).w ; has Sonic reached the top of the level?
00008CD2 6400                       		bcc.s	locret_6F8C	; if not, branch
00008CD4 4238 FE30                  		clr.b	(v_lastlamp).w
00008CD8 31FC 0001 FE02             		move.w	#1,(f_restart).w ; restart level
00008CDE 31FC 0502 FE10             		move.w	#(id_SBZ<<8)+2,(v_zone).w ; set level number to 0502 (FZ)
00008CE4 11FC 0001 F7C8             		move.b	#1,(f_lockmulti).w ; freeze Sonic
00008CEA                            
00008CEA                            locret_6F8C:
00008CEA 4E75                       		rts	
00008CEC                            ; ===========================================================================
00008CEC                            ; ---------------------------------------------------------------------------
00008CEC                            ; Marble Zone dynamic level events
00008CEC                            ; ---------------------------------------------------------------------------
00008CEC                            
00008CEC                            DLE_MZ:
00008CEC 7000                       		moveq	#0,d0
00008CEE 1038 FE11                  		move.b	(v_act).w,d0
00008CF2 D040                       		add.w	d0,d0
00008CF4 303B 0000                  		move.w	DLE_MZx(pc,d0.w),d0
00008CF8 4EFB 0000                  		jmp	DLE_MZx(pc,d0.w)
00008CFC                            ; ===========================================================================
00008CFC 0000                       DLE_MZx:	dc.w DLE_MZ1-DLE_MZx
00008CFE 0000                       		dc.w DLE_MZ2-DLE_MZx
00008D00 0000                       		dc.w DLE_MZ3-DLE_MZx
00008D02                            ; ===========================================================================
00008D02                            
00008D02                            DLE_MZ1:
00008D02 31FC 0520 F726             		move.w	#$520,(v_limitbtm1).w
00008D08 0C78 1F40 F700             		cmpi.w	#$1F40,(v_screenposx).w
00008D0E 6500                       		bcs.s	locret_6FE8
00008D10 31FC 0220 F726             		move.w	#$220,(v_limitbtm1).w
00008D16                            
00008D16                            locret_6FE8:
00008D16 4E75                       		rts	
00008D18                            
00008D18                            ; ===========================================================================
00008D18                            
00008D18                            DLE_MZ2:
00008D18 31FC 0520 F726             		move.w	#$520,(v_limitbtm1).w
00008D1E 0C78 1700 F700             		cmpi.w	#$1700,(v_screenposx).w
00008D24 6500                       		bcs.s	locret_6FE9
00008D26 31FC 0110 F726             		move.w	#$110,(v_limitbtm1).w
00008D2C                            		
00008D2C                            locret_6FE9:
00008D2C 4E75                       		rts	
00008D2E                            ; ===========================================================================
00008D2E                            
00008D2E                            DLE_MZ3:
00008D2E 7000                       		moveq	#0,d0
00008D30 1038 F742                  		move.b	(v_dle_routine).w,d0
00008D34 303B 0000                  		move.w	off_7098(pc,d0.w),d0
00008D38 4EFB 0000                  		jmp	off_7098(pc,d0.w)
00008D3C                            ; ===========================================================================
00008D3C 0000                       off_7098:	dc.w DLE_MZ3boss-off_7098
00008D3E 0000                       		dc.w DLE_MZ3cutscene-off_7098
00008D40 0000                       		dc.w DLE_MZ3boss2-off_7098
00008D42 0000                       		dc.w DLE_MZ3end-off_7098
00008D44                            ; ===========================================================================
00008D44                            
00008D44                            DLE_MZ3boss:
00008D44 31FC 0300 F726             		move.w	#$300,(v_limitbtm1).w
00008D4A 0C78 0E00 F700             		cmpi.w	#$0E00,(v_screenposx).w
00008D50 6500                       		bcs.s	locret_70E8
00008D52 31FC 0210 F726             		move.w	#$210,(v_limitbtm1).w
00008D58 0C78 17F0 F700             		cmpi.w	#$17F0,(v_screenposx).w
00008D5E 6500                       		bcs.s	locret_70E8
00008D60 6100 0000                  		bsr.w	FindFreeObj
00008D64 6600                       		bne.s	loc_70D0
00008D66 12BC 0000                  		move.b	#id_BossMarble,0(a1) ; load MZ boss object
00008D6A 337C 19F0 0008             		move.w	#$19F0,obX(a1)
00008D70 337C 022C 000C             		move.w	#$22C,obY(a1)
00008D76                            
00008D76                            loc_70D0:
00008D7E 11FC 0001 F7AA             		move.b	#1,(f_lockscreen).w ; lock screen
00008D84 5438 F742                  		addq.b	#2,(v_dle_routine).w
00008D88 7000                       		moveq	#plcid_Boss,d0
00008D8A 6000 89AE                  		bra.w	AddPLC		; load boss patterns
00008D8E                            ; ===========================================================================
00008D8E                            
00008D8E                            locret_70E8:
00008D8E 4E75                       		rts	
00008D90                            ; ===========================================================================		
00008D90                            		
00008D90                            DLE_MZ3cutscene:
00008D90 0C78 19B0 F700             		cmpi.w	#$19B0,(v_screenposx).w
00008D96 6500                       		bcs.s	locret_8298
00008D98 6100 0000                  		bsr.w	FindFreeObj
00008D9C 6600                       		bne.s	locret_8298
00008D9E 12BC 0000                  		move.b	#id_FalseFloor,(a1) ; load collapsing block object
00008DA2 5438 F742                  		addq.b	#2,(v_dle_routine).w
00008DA6 7000                       		moveq	#plcid_EggmanSBZ2,d0
00008DA8 6000 8990                  		bra.w	AddPLC		; load SBZ2 Eggman patterns
00008DAC                            ; ===========================================================================
00008DAC                            
00008DAC                            locret_8298:
00008DAC 4E75                       		rts	
00008DAE                            ; ===========================================================================
00008DAE                            
00008DAE                            DLE_MZ3boss2:
00008DAE 0C78 1A60 F700             		cmpi.w	#$1A60,(v_screenposx).w
00008DB4 6500                       		bcs.s	loc_72C6
00008DB6 6100 0000                  		bsr.w	FindFreeObj
00008DBA 6600                       		bne.s	loc_72C0
00008DBC 12BC 0000                  		move.b	#id_ScrapEggman,(a1) ; load SBZ2 Eggman object
00008DC0 5438 F742                  		addq.b	#2,(v_dle_routine).w
00008DC4                            
00008DC4                            loc_72C0:
00008DC4 11FC 0001 F7AA             		move.b	#1,(f_lockscreen).w ; lock screen
00008DCA                            
00008DCA                            loc_72C6:
00008DCA 6000 0000                  		bra.w	loc_72C2
00008DCE                            ; ===========================================================================
00008DCE                            
00008DCE                            DLE_MZ3end:
00008DCE 0C78 1B50 F700             		cmpi.w	#$1B50,(v_screenposx).w
00008DD4 6500                       		bcs.s	loc_72D2
00008DD6 4E75                       		rts	
00008DD8                            ; ===========================================================================
00008DD8                            
00008DD8                            loc_72D2:
00008DD8 31F8 F700 F728             		move.w	(v_screenposx).w,(v_limitleft2).w
00008DDE 4E75                       		rts
00008DE0                            
00008DE0                            
00008DE0                            ; ===========================================================================
00008DE0                            ; ---------------------------------------------------------------------------
00008DE0                            ; Star Light Zone dynamic level events
00008DE0                            ; ---------------------------------------------------------------------------
00008DE0                            
00008DE0                            DLE_SLZ:
00008DE0 7000                       		moveq	#0,d0
00008DE2 1038 FE11                  		move.b	(v_act).w,d0
00008DE6 D040                       		add.w	d0,d0
00008DE8 303B 0000                  		move.w	DLE_SLZx(pc,d0.w),d0
00008DEC 4EFB 0000                  		jmp	DLE_SLZx(pc,d0.w)
00008DF0                            ; ===========================================================================
00008DF0 0000                       DLE_SLZx:	dc.w DLE_SLZ12-DLE_SLZx
00008DF2 0000                       		dc.w DLE_SLZ12-DLE_SLZx
00008DF4 0000                       		dc.w DLE_SLZ3-DLE_SLZx
00008DF6                            ; ===========================================================================
00008DF6                            
00008DF6                            DLE_SLZ12:
00008DF6 4E75                       		rts	
00008DF8                            ; ===========================================================================
00008DF8                            
00008DF8                            DLE_SLZ3:
00008DF8 7000                       		moveq	#0,d0
00008DFA 1038 F742                  		move.b	(v_dle_routine).w,d0
00008DFE 303B 0000                  		move.w	off_7118(pc,d0.w),d0
00008E02 4EFB 0000                  		jmp	off_7118(pc,d0.w)
00008E06                            ; ===========================================================================
00008E06 0000                       off_7118:	dc.w DLE_SLZ3main-off_7118
00008E08 0000                       		dc.w DLE_SLZ3boss-off_7118
00008E0A 0000                       		dc.w DLE_SLZ3end-off_7118
00008E0C                            ; ===========================================================================
00008E0C                            
00008E0C                            DLE_SLZ3main:
00008E0C 0C78 1E70 F700             		cmpi.w	#$1E70,(v_screenposx).w
00008E12 6500                       		bcs.s	locret_7130
00008E14 31FC 0210 F726             		move.w	#$210,(v_limitbtm1).w
00008E1A 5438 F742                  		addq.b	#2,(v_dle_routine).w
00008E1E                            
00008E1E                            locret_7130:
00008E1E 4E75                       		rts	
00008E20                            ; ===========================================================================
00008E20                            
00008E20                            DLE_SLZ3boss:
00008E20 0C78 2000 F700             		cmpi.w	#$2000,(v_screenposx).w
00008E26 6500                       		bcs.s	locret_715C
00008E28 6100 0000                  		bsr.w	FindFreeObj
00008E2C 6600                       		bne.s	loc_7144
00008E2E 12BC 0000                  		move.b	#id_BossStarLight,(a1) ; load SLZ boss object
00008E32                            
00008E32                            loc_7144:
00008E3A 11FC 0001 F7AA             		move.b	#1,(f_lockscreen).w ; lock screen
00008E40 5438 F742                  		addq.b	#2,(v_dle_routine).w
00008E44 7000                       		moveq	#plcid_Boss,d0
00008E46 6000 88F2                  		bra.w	AddPLC		; load boss patterns
00008E4A                            ; ===========================================================================
00008E4A                            
00008E4A                            locret_715C:
00008E4A 4E75                       		rts	
00008E4C                            ; ===========================================================================
00008E4C                            
00008E4C                            DLE_SLZ3end:
00008E4C 31F8 F700 F728             		move.w	(v_screenposx).w,(v_limitleft2).w
00008E52 4E75                       		rts
00008E54 4E75                       		rts
00008E56                            ; ===========================================================================
00008E56                            ; ---------------------------------------------------------------------------
00008E56                            ; Spring Yard Zone dynamic level events
00008E56                            ; ---------------------------------------------------------------------------
00008E56                            
00008E56                            DLE_SYZ:
00008E56 7000                       		moveq	#0,d0
00008E58 1038 FE11                  		move.b	(v_act).w,d0
00008E5C D040                       		add.w	d0,d0
00008E5E 303B 0000                  		move.w	DLE_SYZx(pc,d0.w),d0
00008E62 4EFB 0000                  		jmp	DLE_SYZx(pc,d0.w)
00008E66                            ; ===========================================================================
00008E66 0000                       DLE_SYZx:	dc.w DLE_SYZ1-DLE_SYZx
00008E68 0000                       		dc.w DLE_SYZ2-DLE_SYZx
00008E6A 0000                       		dc.w DLE_SYZ3-DLE_SYZx
00008E6C                            ; ===========================================================================
00008E6C                            
00008E6C                            DLE_SYZ1:
00008E6C 4E75                       		rts	
00008E6E                            ; ===========================================================================
00008E6E                            
00008E6E                            DLE_SYZ2:
00008E6E 31FC 0520 F726             		move.w	#$520,(v_limitbtm1).w
00008E74 0C78 25A0 F700             		cmpi.w	#$25A0,(v_screenposx).w
00008E7A 6500                       		bcs.s	locret_71A2
00008E7C 31FC 0420 F726             		move.w	#$420,(v_limitbtm1).w
00008E82 0C78 04D0 D00C             		cmpi.w	#$4D0,(v_player+obY).w
00008E88 6500                       		bcs.s	locret_71A2
00008E8A 31FC 0520 F726             		move.w	#$520,(v_limitbtm1).w
00008E90                            
00008E90                            locret_71A2:
00008E90 4E75                       		rts	
00008E92                            ; ===========================================================================
00008E92                            
00008E92                            DLE_SYZ3:
00008E92 7000                       		moveq	#0,d0
00008E94 1038 F742                  		move.b	(v_dle_routine).w,d0
00008E98 303B 0000                  		move.w	off_71B2(pc,d0.w),d0
00008E9C 4EFB 0000                  		jmp	off_71B2(pc,d0.w)
00008EA0                            ; ===========================================================================
00008EA0 0000                       off_71B2:	dc.w DLE_SYZ3main-off_71B2
00008EA2 0000                       		dc.w DLE_SYZ3boss-off_71B2
00008EA4 0000                       		dc.w DLE_SYZ3end-off_71B2
00008EA6                            ; ===========================================================================
00008EA6                            
00008EA6                            DLE_SYZ3main:
00008EA6 0C78 2AC0 F700             		cmpi.w	#$2AC0,(v_screenposx).w
00008EAC 6500                       		bcs.s	locret_71CE
00008EAE 6100 0000                  		bsr.w	FindFreeObj
00008EB2 6600                       		bne.s	locret_71CE
00008EB4 12BC 0000                  		move.b	#id_BossBlock,(a1) ; load blocks that boss picks up
00008EB8 5438 F742                  		addq.b	#2,(v_dle_routine).w
00008EBC                            
00008EBC                            locret_71CE:
00008EBC 4E75                       		rts	
00008EBE                            ; ===========================================================================
00008EBE                            
00008EBE                            DLE_SYZ3boss:
00008EBE 0C78 2C00 F700             		cmpi.w	#$2C00,(v_screenposx).w
00008EC4 6500                       		bcs.s	locret_7200
00008EC6 31FC 04CC F726             		move.w	#$4CC,(v_limitbtm1).w
00008ECC 6100 0000                  		bsr.w	FindFreeObj
00008ED0 6600                       		bne.s	loc_71EC
00008ED2 12BC 0000                  		move.b	#id_BossSpringYard,(a1) ; load SYZ boss	object
00008ED6 5438 F742                  		addq.b	#2,(v_dle_routine).w
00008EDA                            
00008EDA                            loc_71EC:
00008EE2 11FC 0001 F7AA             		move.b	#1,(f_lockscreen).w ; lock screen
00008EE8 7000                       		moveq	#plcid_Boss,d0
00008EEA 6000 884E                  		bra.w	AddPLC		; load boss patterns
00008EEE                            ; ===========================================================================
00008EEE                            
00008EEE                            locret_7200:
00008EEE 4E75                       		rts	
00008EF0                            ; ===========================================================================
00008EF0                            
00008EF0                            DLE_SYZ3end:
00008EF0 31F8 F700 F728             		move.w	(v_screenposx).w,(v_limitleft2).w
00008EF6 4E75                       		rts	
00008EF8                            ; ===========================================================================
00008EF8                            ; ---------------------------------------------------------------------------
00008EF8                            ; Scrap	Brain Zone dynamic level events
00008EF8                            ; ---------------------------------------------------------------------------
00008EF8                            
00008EF8                            DLE_SBZ:
00008EF8 7000                       		moveq	#0,d0
00008EFA 1038 FE11                  		move.b	(v_act).w,d0
00008EFE D040                       		add.w	d0,d0
00008F00 303B 0000                  		move.w	DLE_SBZx(pc,d0.w),d0
00008F04 4EFB 0000                  		jmp	DLE_SBZx(pc,d0.w)
00008F08                            ; ===========================================================================
00008F08 0000                       DLE_SBZx:	dc.w DLE_SBZ1-DLE_SBZx
00008F0A 0000                       		dc.w DLE_SBZ2-DLE_SBZx
00008F0C 0000                       		dc.w DLE_FZ-DLE_SBZx
00008F0E                            ; ===========================================================================
00008F0E                            
00008F0E                            DLE_SBZ1:
00008F0E 31FC 0720 F726             		move.w	#$720,(v_limitbtm1).w
00008F14 0C78 1880 F700             		cmpi.w	#$1880,(v_screenposx).w
00008F1A 6500                       		bcs.s	locret_7242
00008F1C 31FC 0620 F726             		move.w	#$620,(v_limitbtm1).w
00008F22 0C78 2000 F700             		cmpi.w	#$2000,(v_screenposx).w
00008F28 6500                       		bcs.s	locret_7242
00008F2A 31FC 02A0 F726             		move.w	#$2A0,(v_limitbtm1).w
00008F30                            
00008F30                            locret_7242:
00008F30 4E75                       		rts	
00008F32                            ; ===========================================================================
00008F32                            
00008F32                            DLE_SBZ2:
00008F32 7000                       		moveq	#0,d0
00008F34 1038 F742                  		move.b	(v_dle_routine).w,d0
00008F38 303B 0000                  		move.w	off_7252(pc,d0.w),d0
00008F3C 4EFB 0000                  		jmp	off_7252(pc,d0.w)
00008F40                            ; ===========================================================================
00008F40 0000                       off_7252:	dc.w DLE_SBZ2main-off_7252
00008F42 0000                       		dc.w DLE_SBZ2boss-off_7252
00008F44 0000                       		dc.w DLE_SBZ2boss2-off_7252
00008F46 0000                       		dc.w DLE_SBZ2end-off_7252
00008F48                            ; ===========================================================================
00008F48                            
00008F48                            DLE_SBZ2main:
00008F48 31FC 0800 F726             		move.w	#$800,(v_limitbtm1).w
00008F4E 0C78 1800 F700             		cmpi.w	#$1800,(v_screenposx).w
00008F54 6500                       		bcs.s	locret_727A
00008F56 31FC 0510 F726             		move.w	#$510,(v_limitbtm1).w
00008F5C 0C78 1E00 F700             		cmpi.w	#$1E00,(v_screenposx).w
00008F62 6500                       		bcs.s	locret_727A
00008F64 5438 F742                  		addq.b	#2,(v_dle_routine).w
00008F68                            
00008F68                            locret_727A:
00008F68 4E75                       		rts	
00008F6A                            ; ===========================================================================
00008F6A                            
00008F6A                            DLE_SBZ2boss:
00008F6A 0C78 1EB0 F700             		cmpi.w	#$1EB0,(v_screenposx).w
00008F70 6500                       		bcs.s	locret_7298
00008F72 6100 0000                  		bsr.w	FindFreeObj
00008F76 6600                       		bne.s	locret_7298
00008F78 12BC 0000                  		move.b	#id_FalseFloor,(a1) ; load collapsing block object
00008F7C 5438 F742                  		addq.b	#2,(v_dle_routine).w
00008F80 7000                       		moveq	#plcid_EggmanSBZ2,d0
00008F82 6000 87B6                  		bra.w	AddPLC		; load SBZ2 Eggman patterns
00008F86                            ; ===========================================================================
00008F86                            
00008F86                            locret_7298:
00008F86 4E75                       		rts	
00008F88                            ; ===========================================================================
00008F88                            
00008F88                            DLE_SBZ2boss2:
00008F88 0C78 1F60 F700             		cmpi.w	#$1F60,(v_screenposx).w
00008F8E 6500                       		bcs.s	loc_72B6
00008F90 6100 0000                  		bsr.w	FindFreeObj
00008F94 6600                       		bne.s	loc_72B0
00008F96 12BC 0000                  		move.b	#id_ScrapEggman,(a1) ; load SBZ2 Eggman object
00008F9A 5438 F742                  		addq.b	#2,(v_dle_routine).w
00008F9E                            
00008F9E                            loc_72B0:
00008F9E 11FC 0001 F7AA             		move.b	#1,(f_lockscreen).w ; lock screen
00008FA4                            
00008FA4                            loc_72B6:
00008FA4 6000                       		bra.s	loc_72C2
00008FA6                            ; ===========================================================================
00008FA6                            
00008FA6                            DLE_SBZ2end:
00008FA6 0C78 2050 F700             		cmpi.w	#$2050,(v_screenposx).w
00008FAC 6500                       		bcs.s	loc_72C2
00008FAE 4E75                       		rts	
00008FB0                            ; ===========================================================================
00008FB0                            
00008FB0                            loc_72C2:
00008FB0 31F8 F700 F728             		move.w	(v_screenposx).w,(v_limitleft2).w
00008FB6 4E75                       		rts	
00008FB8                            ; ===========================================================================
00008FB8                            
00008FB8                            DLE_FZ:
00008FB8 7000                       		moveq	#0,d0
00008FBA 1038 F742                  		move.b	(v_dle_routine).w,d0
00008FBE 303B 0000                  		move.w	off_72D8(pc,d0.w),d0
00008FC2 4EFB 0000                  		jmp	off_72D8(pc,d0.w)
00008FC6                            ; ===========================================================================
00008FC6 0000 0000                  off_72D8:	dc.w DLE_FZmain-off_72D8, DLE_FZboss-off_72D8
00008FCA 0000 0000                  		dc.w DLE_FZend-off_72D8, locret_7322-off_72D8
00008FCE 0000                       		dc.w DLE_FZend2-off_72D8
00008FD0                            ; ===========================================================================
00008FD0                            
00008FD0                            DLE_FZmain:
00008FD0 0C78 2148 F700             		cmpi.w	#$2148,(v_screenposx).w
00008FD6 6500                       		bcs.s	loc_72F4
00008FD8 5438 F742                  		addq.b	#2,(v_dle_routine).w
00008FDC 7000                       		moveq	#plcid_FZBoss,d0
00008FDE 6100 875A                  		bsr.w	AddPLC		; load FZ boss patterns
00008FE2                            
00008FE2                            loc_72F4:
00008FE2 60CC                       		bra.s	loc_72C2
00008FE4                            ; ===========================================================================
00008FE4                            
00008FE4                            DLE_FZboss:
00008FE4 0C78 2300 F700             		cmpi.w	#$2300,(v_screenposx).w
00008FEA 6500                       		bcs.s	loc_7312
00008FEC 6100 0000                  		bsr.w	FindFreeObj
00008FF0 6600                       		bne.s	loc_7312
00008FF2 12BC 0000                  		move.b	#id_BossFinal,(a1) ; load FZ boss object
00008FF6 5438 F742                  		addq.b	#2,(v_dle_routine).w
00008FFA 11FC 0001 F7AA             		move.b	#1,(f_lockscreen).w ; lock screen
00009000                            
00009000                            loc_7312:
00009000 60AE                       		bra.s	loc_72C2
00009002                            ; ===========================================================================
00009002                            
00009002                            DLE_FZend:
00009002 0C78 2450 F700             		cmpi.w	#$2450,(v_screenposx).w
00009008 6500                       		bcs.s	loc_7320
0000900A 5438 F742                  		addq.b	#2,(v_dle_routine).w
0000900E                            
0000900E                            loc_7320:
0000900E 60A0                       		bra.s	loc_72C2
00009010                            ; ===========================================================================
00009010                            
00009010                            locret_7322:
00009010 4E75                       		rts	
00009012                            ; ===========================================================================
00009012                            
00009012                            DLE_FZend2:
00009012 609C                       		bra.s	loc_72C2
00009014                            ; ===========================================================================
00009014                            ; ---------------------------------------------------------------------------
00009014                            ; Ending sequence dynamic level events (empty)
00009014                            ; ---------------------------------------------------------------------------
00009014                            
00009014                            DLE_Ending:
00009014 4E75                       		rts	
00009014 4E75                       		rts	
00009016                            
00009016                            		include	"_incObj\11 Bridge (part 1).asm"
00009016                            ; ---------------------------------------------------------------------------
00009016                            ; Object 11 - GHZ bridge
00009016                            ; ---------------------------------------------------------------------------
00009016                            
00009016                            Bridge:
00009016 7000                       		moveq	#0,d0
00009018 1028 0024                  		move.b	obRoutine(a0),d0
0000901C 323B 0000                  		move.w	Bri_Index(pc,d0.w),d1
00009020 4EFB 1000                  		jmp	Bri_Index(pc,d1.w)
00009024                            ; ===========================================================================
00009024 0000 0000                  Bri_Index:	dc.w Bri_Main-Bri_Index, Bri_Action-Bri_Index
00009028 0000 0000                  		dc.w Bri_Platform-Bri_Index, Bri_Delete-Bri_Index
0000902C 0000 0000                  		dc.w Bri_Delete-Bri_Index, Bri_Display-Bri_Index
00009030                            ; ===========================================================================
00009030                            
00009030                            Bri_Main:	; Routine 0
00009030 5428 0024                  		addq.b	#2,obRoutine(a0)
00009034 217C 0000 0000 0004        		move.l	#Map_Bri,obMap(a0)
0000903C 317C 438E 0002             		move.w	#$438E,obGfx(a0)
00009042 117C 0004 0001             		move.b	#4,obRender(a0)
00009048 317C 0180 0018             		move.w	#$180,obPriority(a0)
0000904E 117C 0080 0014             		move.b	#$80,obActWid(a0)
00009054 3428 000C                  		move.w	obY(a0),d2
00009058 3628 0008                  		move.w	obX(a0),d3
0000905C 1810                       		move.b	0(a0),d4	; copy object number ($11) to d4
0000905E 45E8 0028                  		lea	obSubtype(a0),a2
00009062 7200                       		moveq	#0,d1
00009064 1212                       		move.b	(a2),d1		; copy bridge length to d1
00009066 14FC 0000                  		move.b	#0,(a2)+	; clear bridge length
0000906A 3001                       		move.w	d1,d0
0000906C E248                       		lsr.w	#1,d0
0000906E E948                       		lsl.w	#4,d0
00009070 9640                       		sub.w	d0,d3		; d3 is position of leftmost log
00009072 5501                       		subq.b	#2,d1
00009074 6500                       		bcs.s	Bri_Action	; don't make more if bridge has only 1 log
00009076                            
00009076                            @buildloop:
00009076 6100 0000                  		bsr.w	FindFreeObj
0000907A 6600                       		bne.s	Bri_Action
0000907C 5228 0028                  		addq.b	#1,obSubtype(a0)
00009080 B668 0008                  		cmp.w	obX(a0),d3	; is this log the leftmost one?
00009084 6600                       		bne.s	@notleftmost	; if not, branch
00009086                            
00009086 0643 0010                  		addi.w	#$10,d3
0000908A 3142 000C                  		move.w	d2,obY(a0)
0000908E 3142 003C                  		move.w	d2,$3C(a0)
00009092 3A08                       		move.w	a0,d5
00009094 0445 D000                  		subi.w	#$D000,d5
00009098 EC4D                       		lsr.w	#6,d5
0000909A 0245 007F                  		andi.w	#$7F,d5
0000909E 14C5                       		move.b	d5,(a2)+
000090A0 5228 0028                  		addq.b	#1,obSubtype(a0)
000090A4                            
000090A4                            	@notleftmost:
000090A4 3A09                       		move.w	a1,d5
000090A6 0445 D000                  		subi.w	#$D000,d5
000090AA EC4D                       		lsr.w	#6,d5
000090AC 0245 007F                  		andi.w	#$7F,d5
000090B0 14C5                       		move.b	d5,(a2)+
000090B2 137C 000A 0024             		move.b	#$A,obRoutine(a1)
000090B8 1284                       		move.b	d4,0(a1)	; load bridge object (d4 = $11)
000090BA 3342 000C                  		move.w	d2,obY(a1)
000090BE 3342 003C                  		move.w	d2,$3C(a1)
000090C2 3343 0008                  		move.w	d3,obX(a1)
000090C6 237C 0000 0000 0004        		move.l	#Map_Bri,obMap(a1)
000090CE 337C 438E 0002             		move.w	#$438E,obGfx(a1)
000090D4 137C 0004 0001             		move.b	#4,obRender(a1)
000090DA 337C 0180 0018             		move.w	#$180,obPriority(a1)
000090E0 137C 0008 0014             		move.b	#8,obActWid(a1)
000090E6 0643 0010                  		addi.w	#$10,d3
000090EA 51C9 FF8A                  		dbf	d1,@buildloop ; repeat d1 times (length of bridge)
000090EE                            
000090EE                            Bri_Action:	; Routine 2
000090EE 6100                       		bsr.s	Bri_Solid
000090F0 4A28 003E                  		tst.b	$3E(a0)
000090F4 6700                       		beq.s	@display
000090F6 5928 003E                  		subq.b	#4,$3E(a0)
000090FA 6100 0000                  		bsr.w	Bri_Bend
000090FE                            
000090FE                            	@display:
000090FE 6100 0000                  		bsr.w	DisplaySprite
00009102 6000 0000                  		bra.w	Bri_ChkDel
00009106                            
00009106                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009106                            
00009106                            
00009106                            Bri_Solid:
00009106 7200                       		moveq	#0,d1
00009108 1228 0028                  		move.b	obSubtype(a0),d1
0000910C E749                       		lsl.w	#3,d1
0000910E 3401                       		move.w	d1,d2
00009110 5041                       		addq.w	#8,d1
00009112 D442                       		add.w	d2,d2
00009114 43F8 D000                  		lea	(v_player).w,a1
00009118 4A69 0012                  		tst.w	obVelY(a1)
0000911C 6B00 0000                  		bmi.w	Plat_Exit
00009120 3029 0008                  		move.w	obX(a1),d0
00009124 9068 0008                  		sub.w	obX(a0),d0
00009128 D041                       		add.w	d1,d0
0000912A 6B00 0000                  		bmi.w	Plat_Exit
0000912E B042                       		cmp.w	d2,d0
00009130 6400 0000                  		bcc.w	Plat_Exit
00009134 6000                       		bra.s	Plat_NoXCheck
00009136                            ; End of function Bri_Solid
00009136                            ; End of function Bri_Solid
00009136                            
00009136                            ; ---------------------------------------------------------------------------
00009136                            ; Platform subroutine
00009136                            ; ---------------------------------------------------------------------------
00009136                            
00009136                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009136                            
00009136                            PlatformObject:
00009136 43F8 D000                  		lea	(v_player).w,a1
0000913A 4A69 0012                  		tst.w	obVelY(a1)	; is Sonic moving up/jumping?
0000913E 6B00 0000                  		bmi.w	Plat_Exit	; if yes, branch
00009142                            
00009142                            ;		perform x-axis range check
00009142 3029 0008                  		move.w	obX(a1),d0
00009146 9068 0008                  		sub.w	obX(a0),d0
0000914A D041                       		add.w	d1,d0
0000914C 6B00 0000                  		bmi.w	Plat_Exit
00009150 D241                       		add.w	d1,d1
00009152 B041                       		cmp.w	d1,d0
00009154 6400 0000                  		bhs.w	Plat_Exit
00009158                            
00009158                            	Plat_NoXCheck:
00009158 3028 000C                  		move.w	obY(a0),d0
0000915C 5140                       		subq.w	#8,d0
0000915E                            
0000915E                            Platform3:
0000915E                            ;		perform y-axis range check
0000915E 3429 000C                  		move.w	obY(a1),d2
00009162 1229 0016                  		move.b	obHeight(a1),d1
00009166 4881                       		ext.w	d1
00009168 D242                       		add.w	d2,d1
0000916A 5841                       		addq.w	#4,d1
0000916C 9041                       		sub.w	d1,d0
0000916E 6200 0000                  		bhi.w	Plat_Exit
00009172 0C40 FFF0                  		cmpi.w	#-$10,d0
00009176 6500 0000                  		blo.w	Plat_Exit
0000917A                            
0000917A 4A38 F7C8                  		tst.b	(f_lockmulti).w
0000917E 6B00 0000                  		bmi.w	Plat_Exit
00009182 0C29 0006 0024             		cmpi.b	#6,obRoutine(a1)
00009188 6400 0000                  		bhs.w	Plat_Exit
0000918C D440                       		add.w	d0,d2
0000918E 5642                       		addq.w	#3,d2
00009190 3342 000C                  		move.w	d2,obY(a1)
00009194 5428 0024                  		addq.b	#2,obRoutine(a0)
00009198                            
00009198                            loc_74AE:
00009198 0829 0003 0022             		btst	#3,obStatus(a1)
0000919E 6700                       		beq.s	loc_74DC
000091A0 7000                       		moveq	#0,d0
000091A2 1029 003D                  		move.b	$3D(a1),d0
000091A6 ED48                       		lsl.w	#6,d0
000091A8 0680 00FF D000             		addi.l	#v_objspace&$FFFFFF,d0
000091AE 2440                       		movea.l	d0,a2
000091B0 08AA 0003 0022             		bclr	#3,obStatus(a2)
000091B6 422A 0025                  		clr.b	ob2ndRout(a2)
000091BA 0C2A 0004 0024             		cmpi.b	#4,obRoutine(a2)
000091C0 6600                       		bne.s	loc_74DC
000091C2 552A 0024                  		subq.b	#2,obRoutine(a2)
000091C6                            
000091C6                            loc_74DC:
000091C6 3008                       		move.w	a0,d0
000091C8 0440 D000                  		subi.w	#-$3000,d0
000091CC EC48                       		lsr.w	#6,d0
000091CE 0240 007F                  		andi.w	#$7F,d0
000091D2 1340 003D                  		move.b	d0,$3D(a1)
000091D6 137C 0000 0026             		move.b	#0,obAngle(a1)
000091DC 337C 0000 0012             		move.w	#0,obVelY(a1)
000091E2 3369 0010 0020             		move.w	obVelX(a1),obInertia(a1)
000091E8 0829 0001 0022             		btst	#1,obStatus(a1)
000091EE 6700                       		beq.s	loc_7512
000091F0 2F08                       		move.l	a0,-(sp)
000091F2 2049                       		movea.l	a1,a0
000091F4 4EB9 0000 0000             		jsr	(Sonic_ResetOnFloor).l
000091FA 205F                       		movea.l	(sp)+,a0
000091FC                            
000091FC                            loc_7512:
000091FC 08E9 0003 0022             		bset	#3,obStatus(a1)
00009202 08E8 0003 0022             		bset	#3,obStatus(a0)
00009208                            
00009208                            Plat_Exit:
00009208 4E75                       		rts	
0000920A                            ; End of function PlatformObject
0000920A                            
0000920A                            ; ---------------------------------------------------------------------------
0000920A                            ; Sloped platform subroutine (GHZ collapsing ledges and	SLZ seesaws)
0000920A                            ; ---------------------------------------------------------------------------
0000920A                            
0000920A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000920A                            
0000920A                            
0000920A                            SlopeObject:
0000920A 43F8 D000                  		lea	(v_player).w,a1
0000920E 4A69 0012                  		tst.w	obVelY(a1)
00009212 6B00 FFF4                  		bmi.w	Plat_Exit
00009216 3029 0008                  		move.w	obX(a1),d0
0000921A 9068 0008                  		sub.w	obX(a0),d0
0000921E D041                       		add.w	d1,d0
00009220 6BE6                       		bmi.s	Plat_Exit
00009222 D241                       		add.w	d1,d1
00009224 B041                       		cmp.w	d1,d0
00009226 64E0                       		bhs.s	Plat_Exit
00009228 0828 0000 0001             		btst	#0,obRender(a0)
0000922E 6700                       		beq.s	loc_754A
00009230 4640                       		not.w	d0
00009232 D041                       		add.w	d1,d0
00009234                            
00009234                            loc_754A:
00009234 E248                       		lsr.w	#1,d0
00009236 7600                       		moveq	#0,d3
00009238 1632 0000                  		move.b	(a2,d0.w),d3
0000923C 3028 000C                  		move.w	obY(a0),d0
00009240 9043                       		sub.w	d3,d0
00009242 6000 FF1A                  		bra.w	Platform3
00009246                            ; End of function SlopeObject
00009246                            
00009246                            
00009246                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009246                            
00009246                            
00009246                            Swing_Solid:
00009246 43F8 D000                  		lea	(v_player).w,a1
0000924A 4A69 0012                  		tst.w	obVelY(a1)
0000924E 6B00 FFB8                  		bmi.w	Plat_Exit
00009252 3029 0008                  		move.w	obX(a1),d0
00009256 9068 0008                  		sub.w	obX(a0),d0
0000925A D041                       		add.w	d1,d0
0000925C 6B00 FFAA                  		bmi.w	Plat_Exit
00009260 D241                       		add.w	d1,d1
00009262 B041                       		cmp.w	d1,d0
00009264 6400 FFA2                  		bhs.w	Plat_Exit
00009268 3028 000C                  		move.w	obY(a0),d0
0000926C 9043                       		sub.w	d3,d0
0000926E 6000 FEEE                  		bra.w	Platform3
00009272                            ; End of function Obj15_Solid
00009272                            
00009272                            ; ===========================================================================
00009272                            
00009272                            		include	"_incObj\11 Bridge (part 2).asm"
00009272                            
00009272                            Bri_Platform:	; Routine 4
00009272 6100                       		bsr.s	Bri_WalkOff
00009274 6100 0000                  		bsr.w	DisplaySprite
00009278 6000 0000                  		bra.w	Bri_ChkDel
0000927C                            
0000927C                            ; ---------------------------------------------------------------------------
0000927C                            ; Subroutine allowing Sonic to walk off a bridge
0000927C                            ; ---------------------------------------------------------------------------
0000927C                            
0000927C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000927C                            
0000927C                            
0000927C                            Bri_WalkOff:
0000927C 7200                       		moveq	#0,d1
0000927E 1228 0028                  		move.b	obSubtype(a0),d1
00009282 E749                       		lsl.w	#3,d1
00009284 3401                       		move.w	d1,d2
00009286 5041                       		addq.w	#8,d1
00009288 6100                       		bsr.s	ExitPlatform2
0000928A 6400                       		bcc.s	locret_75BE
0000928C E848                       		lsr.w	#4,d0
0000928E 1140 003F                  		move.b	d0,$3F(a0)
00009292 1028 003E                  		move.b	$3E(a0),d0
00009296 0C00 0040                  		cmpi.b	#$40,d0
0000929A 6700                       		beq.s	loc_75B6
0000929C 5828 003E                  		addq.b	#4,$3E(a0)
000092A0                            
000092A0                            loc_75B6:
000092A0 6100 0000                  		bsr.w	Bri_Bend
000092A4 6100 0000                  		bsr.w	Bri_MoveSonic
000092A8                            
000092A8                            locret_75BE:
000092A8 4E75                       		rts	
000092AA                            ; End of function Bri_WalkOff
000092AA                            ; End of function Bri_WalkOff
000092AA                            
000092AA                            ; ---------------------------------------------------------------------------
000092AA                            ; Subroutine allowing Sonic to walk or jump off	a platform
000092AA                            ; ---------------------------------------------------------------------------
000092AA                            
000092AA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000092AA                            
000092AA                            
000092AA                            ExitPlatform:
000092AA 3401                       		move.w	d1,d2
000092AC                            
000092AC                            ExitPlatform2:
000092AC D442                       		add.w	d2,d2
000092AE 43F8 D000                  		lea	(v_player).w,a1
000092B2 0829 0001 0022             		btst	#1,obStatus(a1)
000092B8 6600                       		bne.s	loc_75E0
000092BA 3029 0008                  		move.w	obX(a1),d0
000092BE 9068 0008                  		sub.w	obX(a0),d0
000092C2 D041                       		add.w	d1,d0
000092C4 6B00                       		bmi.s	loc_75E0
000092C6 B042                       		cmp.w	d2,d0
000092C8 6500                       		blo.s	locret_75F2
000092CA                            
000092CA                            loc_75E0:
000092CA 08A9 0003 0022             		bclr	#3,obStatus(a1)
000092D0 117C 0002 0024             		move.b	#2,obRoutine(a0)
000092D6 08A8 0003 0022             		bclr	#3,obStatus(a0)
000092DC                            
000092DC                            locret_75F2:
000092DC 4E75                       		rts	
000092DE                            ; End of function ExitPlatform
000092DE                            
000092DE                            		include	"_incObj\11 Bridge (part 3).asm"
000092DE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000092DE                            
000092DE                            
000092DE                            Bri_MoveSonic:
000092DE 7000                       		moveq	#0,d0
000092E0 1028 003F                  		move.b	$3F(a0),d0
000092E4 1030 0029                  		move.b	$29(a0,d0.w),d0
000092E8 ED48                       		lsl.w	#6,d0
000092EA 0680 00FF D000             		addi.l	#v_objspace&$FFFFFF,d0
000092F0 2440                       		movea.l	d0,a2
000092F2 43F8 D000                  		lea	(v_player).w,a1
000092F6 302A 000C                  		move.w	obY(a2),d0
000092FA 5140                       		subq.w	#8,d0
000092FC 7200                       		moveq	#0,d1
000092FE 1229 0016                  		move.b	obHeight(a1),d1
00009302 9041                       		sub.w	d1,d0
00009304 3340 000C                  		move.w	d0,obY(a1)	; change Sonic's position on y-axis
00009308 4E75                       		rts	
0000930A                            ; End of function Bri_MoveSonic
0000930A                            
0000930A                            
0000930A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000930A                            
0000930A                            
0000930A                            Bri_Bend:
0000930A 1028 003E                  		move.b	$3E(a0),d0
0000930E 6100 A772                  		bsr.w	CalcSine
00009312 3800                       		move.w	d0,d4
00009314 49F9 0000 0000             		lea	(Obj11_BendData2).l,a4
0000931A 7000                       		moveq	#0,d0
0000931C 1028 0028                  		move.b	obSubtype(a0),d0
00009320 E948                       		lsl.w	#4,d0
00009322 7600                       		moveq	#0,d3
00009324 1628 003F                  		move.b	$3F(a0),d3
00009328 3403                       		move.w	d3,d2
0000932A D640                       		add.w	d0,d3
0000932C 7A00                       		moveq	#0,d5
0000932E 4BF9 0000 0000             		lea	(Obj11_BendData).l,a5
00009334 1A35 3000                  		move.b	(a5,d3.w),d5
00009338 0243 000F                  		andi.w	#$F,d3
0000933C E94B                       		lsl.w	#4,d3
0000933E 47F4 3000                  		lea	(a4,d3.w),a3
00009342 45E8 0029                  		lea	$29(a0),a2
00009346                            
00009346                            loc_765C:
00009346 7000                       		moveq	#0,d0
00009348 101A                       		move.b	(a2)+,d0
0000934A ED48                       		lsl.w	#6,d0
0000934C 0680 00FF D000             		addi.l	#v_objspace&$FFFFFF,d0
00009352 2240                       		movea.l	d0,a1
00009354 7000                       		moveq	#0,d0
00009356 101B                       		move.b	(a3)+,d0
00009358 5240                       		addq.w	#1,d0
0000935A C0C5                       		mulu.w	d5,d0
0000935C C0C4                       		mulu.w	d4,d0
0000935E 4840                       		swap	d0
00009360 D069 003C                  		add.w	$3C(a1),d0
00009364 3340 000C                  		move.w	d0,obY(a1)
00009368 51CA FFDC                  		dbf	d2,loc_765C
0000936C 7000                       		moveq	#0,d0
0000936E 1028 0028                  		move.b	obSubtype(a0),d0
00009372 7600                       		moveq	#0,d3
00009374 1628 003F                  		move.b	$3F(a0),d3
00009378 5203                       		addq.b	#1,d3
0000937A 9600                       		sub.b	d0,d3
0000937C 4403                       		neg.b	d3
0000937E 6B00                       		bmi.s	locret_76CA
00009380 3403                       		move.w	d3,d2
00009382 E94B                       		lsl.w	#4,d3
00009384 47F4 3000                  		lea	(a4,d3.w),a3
00009388 D6C2                       		adda.w	d2,a3
0000938A 5342                       		subq.w	#1,d2
0000938C 6500                       		bcs.s	locret_76CA
0000938E                            
0000938E                            loc_76A4:
0000938E 7000                       		moveq	#0,d0
00009390 101A                       		move.b	(a2)+,d0
00009392 ED48                       		lsl.w	#6,d0
00009394 0680 00FF D000             		addi.l	#v_objspace&$FFFFFF,d0
0000939A 2240                       		movea.l	d0,a1
0000939C 7000                       		moveq	#0,d0
0000939E 1023                       		move.b	-(a3),d0
000093A0 5240                       		addq.w	#1,d0
000093A2 C0C5                       		mulu.w	d5,d0
000093A4 C0C4                       		mulu.w	d4,d0
000093A6 4840                       		swap	d0
000093A8 D069 003C                  		add.w	$3C(a1),d0
000093AC 3340 000C                  		move.w	d0,obY(a1)
000093B0 51CA FFDC                  		dbf	d2,loc_76A4
000093B4                            
000093B4                            locret_76CA:
000093B4 4E75                       		rts	
000093B6                            ; End of function Bri_Bend
000093B6                            
000093B6                            ; ===========================================================================
000093B6                            ; ---------------------------------------------------------------------------
000093B6                            ; GHZ bridge-bending data
000093B6                            ; (Defines how the bridge bends	when Sonic walks across	it)
000093B6                            ; ---------------------------------------------------------------------------
000093B6                            Obj11_BendData:	incbin	"misc\ghzbend1.bin"
000094C6                            		even
000094C6                            Obj11_BendData2:incbin	"misc\ghzbend2.bin"
000095C6                            		even
000095C6                            
000095C6                            ; ===========================================================================
000095C6                            
000095C6                            Bri_ChkDel:
000095E4 4E75                       		rts	
000095E6                            ; ===========================================================================
000095E6                            
000095E6                            @deletebridge:
000095E6 7400                       		moveq	#0,d2
000095E8 45E8 0028                  		lea	obSubtype(a0),a2 ; load bridge length
000095EC 141A                       		move.b	(a2)+,d2	; move bridge length to	d2
000095EE 5302                       		subq.b	#1,d2		; subtract 1
000095F0 6500                       		bcs.s	@delparent
000095F2                            
000095F2                            	@loop:
000095F2 7000                       		moveq	#0,d0
000095F4 101A                       		move.b	(a2)+,d0
000095F6 ED48                       		lsl.w	#6,d0
000095F8 0680 00FF D000             		addi.l	#v_objspace&$FFFFFF,d0
000095FE 2240                       		movea.l	d0,a1
00009600 B048                       		cmp.w	a0,d0
00009602 6700                       		beq.s	@skipdel
00009604 6100 0000                  		bsr.w	DeleteChild
00009608                            
00009608                            	@skipdel:
00009608 51CA FFE8                  		dbf	d2,@loop ; repeat d2 times (bridge length)
0000960C                            
0000960C                            @delparent:
0000960C 6100 0000                  		bsr.w	DeleteObject
00009610 4E75                       		rts	
00009612                            ; ===========================================================================
00009612                            
00009612                            Bri_Delete:	; Routine 6, 8
00009612 6100 0000                  		bsr.w	DeleteObject
00009616 4E75                       		rts	
00009618                            ; ===========================================================================
00009618                            
00009618                            Bri_Display:	; Routine $A
00009618 6100 0000                  		bsr.w	DisplaySprite
0000961C 4E75                       		rts	
0000961C 4E75                       		rts	
0000961E                            Map_Bri:	include	"_maps\Bridge.asm"
0000961E                            ; ---------------------------------------------------------------------------
0000961E                            ; Sprite mappings - GHZ	bridge
0000961E                            ; ---------------------------------------------------------------------------
0000961E                            Map_Bri_internal:
0000961E 0000                       		dc.w M_Bri_Log-Map_Bri_internal
00009620 0000                       		dc.w M_Bri_Stump-Map_Bri_internal
00009622 0000                       		dc.w M_Bri_Rope-Map_Bri_internal
00009624 01                         M_Bri_Log:	dc.b 1
00009625 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8	; log
0000962A 02                         M_Bri_Stump:	dc.b 2
0000962B F804 0004 F0               		dc.b $F8, 4, 0,	4, $F0	; stump & rope
00009630 000C 0006 F0               		dc.b 0,	$C, 0, 6, $F0
00009635 01                         M_Bri_Rope:	dc.b 1
00009636 FC04 0008 F8               		dc.b $FC, 4, 0,	8, $F8	; rope only
0000963C 00                         		even
0000963C 00                         		even
0000963C                            
0000963C                            		include	"_incObj\15 Swinging Platforms (part 1).asm"
0000963C                            ; ---------------------------------------------------------------------------
0000963C                            ; Object 15 - swinging platforms (GHZ, MZ, SLZ)
0000963C                            ;	    - spiked ball on a chain (SBZ)
0000963C                            ; ---------------------------------------------------------------------------
0000963C                            
0000963C                            SwingingPlatform:
0000963C 7000                       		moveq	#0,d0
0000963E 1028 0024                  		move.b	obRoutine(a0),d0
00009642 323B 0000                  		move.w	Swing_Index(pc,d0.w),d1
00009646 4EFB 1000                  		jmp	Swing_Index(pc,d1.w)
0000964A                            ; ===========================================================================
0000964A 0000 0000                  Swing_Index:	dc.w Swing_Main-Swing_Index, Swing_SetSolid-Swing_Index
0000964E 0000 0000                  		dc.w Swing_Action2-Swing_Index,	Swing_Delete-Swing_Index
00009652 0000 0000                  		dc.w Swing_Delete-Swing_Index, Swing_Display-Swing_Index
00009656 0000                       		dc.w Swing_Action-Swing_Index
00009658                            
00009658 =0000003A                  swing_origX:	equ $3A		; original x-axis position
00009658 =00000038                  swing_origY:	equ $38		; original y-axis position
00009658                            ; ===========================================================================
00009658                            
00009658                            Swing_Main:	; Routine 0
00009658 5428 0024                  		addq.b	#2,obRoutine(a0)
0000965C 217C 0000 0000 0004        		move.l	#Map_Swing_GHZ,obMap(a0) ; GHZ and MZ specific code
00009664 317C 4380 0002             		move.w	#$4380,obGfx(a0)
0000966A 117C 0004 0001             		move.b	#4,obRender(a0)
00009670 317C 0180 0018             		move.w	#$180,obPriority(a0)
00009676 117C 0018 0014             		move.b	#$18,obActWid(a0)
0000967C 117C 0008 0016             		move.b	#8,obHeight(a0)
00009682 3168 000C 0038             		move.w	obY(a0),swing_origY(a0)
00009688 3168 0008 003A             		move.w	obX(a0),swing_origX(a0)
0000968E 0C38 0003 FE10             		cmpi.b	#id_SLZ,(v_zone).w ; check if level is SLZ
00009694 6600                       		bne.s	@notSLZ
00009696                            
00009696 217C 0000 0000 0004        		move.l	#Map_Swing_SLZ,obMap(a0) ; SLZ specific code
0000969E 317C 43DC 0002             		move.w	#$43DC,obGfx(a0)
000096A4 117C 0020 0014             		move.b	#$20,obActWid(a0)
000096AA 117C 0010 0016             		move.b	#$10,obHeight(a0)
000096B0 117C 0099 0020             		move.b	#$99,obColType(a0)
000096B6                            
000096B6                            	@notSLZ:
000096B6 0C38 0005 FE10             		cmpi.b	#id_SBZ,(v_zone).w ; check if level is SBZ
000096BC 6600                       		bne.s	@length
000096BE                            
000096BE 217C 0000 0000 0004        		move.l	#Map_BBall,obMap(a0) ; SBZ specific code
000096C6 317C 0391 0002             		move.w	#$391,obGfx(a0)
000096CC 117C 0018 0014             		move.b	#$18,obActWid(a0)
000096D2 117C 0018 0016             		move.b	#$18,obHeight(a0)
000096D8 117C 0086 0020             		move.b	#$86,obColType(a0)
000096DE 117C 000C 0024             		move.b	#$C,obRoutine(a0) ; goto Swing_Action next
000096E4                            
000096E4                            @length:
000096E4 1810                       		move.b	0(a0),d4
000096E6 7200                       		moveq	#0,d1
000096E8 45E8 0028                  		lea	obSubtype(a0),a2 ; move chain length to a2
000096EC 1212                       		move.b	(a2),d1		; move a2 to d1
000096EE 3F01                       		move.w	d1,-(sp)
000096F0 0241 000F                  		andi.w	#$F,d1
000096F4 14FC 0000                  		move.b	#0,(a2)+
000096F8 3601                       		move.w	d1,d3
000096FA E94B                       		lsl.w	#4,d3
000096FC 5003                       		addq.b	#8,d3
000096FE 1143 003C                  		move.b	d3,$3C(a0)
00009702 5103                       		subq.b	#8,d3
00009704 4A28 001A                  		tst.b	obFrame(a0)
00009708 6700                       		beq.s	@makechain
0000970A 5003                       		addq.b	#8,d3
0000970C 5341                       		subq.w	#1,d1
0000970E                            
0000970E                            @makechain:
0000970E 6100 0000                  		bsr.w	FindFreeObj
00009712 6600                       		bne.s	@fail
00009714 5228 0028                  		addq.b	#1,obSubtype(a0)
00009718 3A09                       		move.w	a1,d5
0000971A 0445 D000                  		subi.w	#$D000,d5
0000971E EC4D                       		lsr.w	#6,d5
00009720 0245 007F                  		andi.w	#$7F,d5
00009724 14C5                       		move.b	d5,(a2)+
00009726 137C 000A 0024             		move.b	#$A,obRoutine(a1) ; goto Swing_Display next
0000972C 1284                       		move.b	d4,0(a1)	; load swinging	object
0000972E 2368 0004 0004             		move.l	obMap(a0),obMap(a1)
00009734 3368 0002 0002             		move.w	obGfx(a0),obGfx(a1)
0000973A 08A9 0006 0002             		bclr	#6,obGfx(a1)
00009740 137C 0004 0001             		move.b	#4,obRender(a1)
00009746 337C 0200 0018             		move.w	#$200,obPriority(a1)
0000974C 137C 0008 0014             		move.b	#8,obActWid(a1)
00009752 137C 0001 001A             		move.b	#1,obFrame(a1)
00009758 1343 003C                  		move.b	d3,$3C(a1)
0000975C 0403 0010                  		subi.b	#$10,d3
00009760 6400                       		bcc.s	@notanchor
00009762 137C 0002 001A             		move.b	#2,obFrame(a1)
00009768 337C 0180 0018             		move.w	#$180,obPriority(a1)
0000976E 08E9 0006 0002             		bset	#6,obGfx(a1)
00009774                            
00009774                            	@notanchor:
00009774 51C9 FF98                  		dbf	d1,@makechain ; repeat d1 times (chain length)
00009778                            
00009778                            	@fail:
00009778 3A08                       		move.w	a0,d5
0000977A 0445 D000                  		subi.w	#$D000,d5
0000977E EC4D                       		lsr.w	#6,d5
00009780 0245 007F                  		andi.w	#$7F,d5
00009784 14C5                       		move.b	d5,(a2)+
00009786 317C 4080 0026             		move.w	#$4080,obAngle(a0)
0000978C 317C FE00 003E             		move.w	#-$200,$3E(a0)
00009792 321F                       		move.w	(sp)+,d1
00009794 0801 0004                  		btst	#4,d1		; is object type $1X ?
00009798 6700                       		beq.s	@not1X	; if not, branch
0000979A 217C 0000 0000 0004        		move.l	#Map_GBall,obMap(a0) ; use GHZ ball mappings
000097A2 317C 43AA 0002             		move.w	#$43AA,obGfx(a0)
000097A8 117C 0001 001A             		move.b	#1,obFrame(a0)
000097AE 317C 0100 0018             		move.w	#$100,obPriority(a0)
000097B4 117C 0081 0020             		move.b	#$81,obColType(a0) ; make object hurt when touched
000097BA                            
000097BA                            	@not1X:
000097BA 0C38 0005 FE10             		cmpi.b	#id_SBZ,(v_zone).w ; is zone SBZ?
000097C0 6700                       		beq.s	Swing_Action	; if yes, branch
000097C2                            
000097C2                            Swing_SetSolid:	; Routine 2
000097C2 7200                       		moveq	#0,d1
000097C4 1228 0014                  		move.b	obActWid(a0),d1
000097C8 7600                       		moveq	#0,d3
000097CA 1628 0016                  		move.b	obHeight(a0),d3
000097CE 6100 FA76                  		bsr.w	Swing_Solid
000097D2                            
000097D2                            Swing_Action:	; Routine $C
000097D2 6100 0000                  		bsr.w	Swing_Move
000097D6 6100 0000                  		bsr.w	DisplaySprite
000097DA 6000 0000                  		bra.w	Swing_ChkDel
000097DE                            ; ===========================================================================
000097DE                            
000097DE                            Swing_Action2:	; Routine 4
000097DE 7200                       		moveq	#0,d1
000097E0 1228 0014                  		move.b	obActWid(a0),d1
000097E4 6100 FAC4                  		bsr.w	ExitPlatform
000097E8 3F28 0008                  		move.w	obX(a0),-(sp)
000097EC 6100 0000                  		bsr.w	Swing_Move
000097F0 341F                       		move.w	(sp)+,d2
000097F2 7600                       		moveq	#0,d3
000097F4 1628 0016                  		move.b	obHeight(a0),d3
000097F8 5203                       		addq.b	#1,d3
000097FA 6100 0000                  		bsr.w	MvSonicOnPtfm
000097FE 6100 0000                  		bsr.w	DisplaySprite
00009802 6000 0000                  		bra.w	Swing_ChkDel
00009806                            
00009806 4E75                       		rts
00009806 4E75                       		rts
00009808                            
00009808                            ; ---------------------------------------------------------------------------
00009808                            ; Subroutine to	change Sonic's position with a platform
00009808                            ; ---------------------------------------------------------------------------
00009808                            
00009808                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009808                            
00009808                            
00009808                            MvSonicOnPtfm:
00009808 43F8 D000                  		lea	(v_player).w,a1
0000980C 3028 000C                  		move.w	obY(a0),d0
00009810 9043                       		sub.w	d3,d0
00009812 6000                       		bra.s	MvSonic2
00009814                            ; End of function MvSonicOnPtfm
00009814                            
00009814                            ; ---------------------------------------------------------------------------
00009814                            ; Subroutine to	change Sonic's position with a platform
00009814                            ; ---------------------------------------------------------------------------
00009814                            
00009814                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009814                            
00009814                            
00009814                            MvSonicOnPtfm2:
00009814 43F8 D000                  		lea	(v_player).w,a1
00009818 3028 000C                  		move.w	obY(a0),d0
0000981C 0440 0009                  		subi.w	#9,d0
00009820                            
00009820                            MvSonic2:
00009820 4A38 F7C8                  		tst.b	(f_lockmulti).w
00009824 6B00                       		bmi.s	locret_7B62
00009826 0C38 0006 D024             		cmpi.b	#6,(v_player+obRoutine).w
0000982C 6400                       		bhs.s	locret_7B62
0000982E 4A78 FE08                  		tst.w	(v_debuguse).w
00009832 6600                       		bne.s	locret_7B62
00009834 7200                       		moveq	#0,d1
00009836 1229 0016                  		move.b	obHeight(a1),d1
0000983A 9041                       		sub.w	d1,d0
0000983C 3340 000C                  		move.w	d0,obY(a1)
00009840 9468 0008                  		sub.w	obX(a0),d2
00009844 9569 0008                  		sub.w	d2,obX(a1)
00009848                            
00009848                            locret_7B62:
00009848 4E75                       		rts	
0000984A                            ; End of function MvSonicOnPtfm2
0000984A                            
0000984A                            		include	"_incObj\15 Swinging Platforms (part 2).asm"
0000984A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000984A                            
0000984A                            
0000984A                            Swing_Move:
0000984A 1038 FE78                  		move.b	(v_oscillate+$1A).w,d0
0000984E 323C 0080                  		move.w	#$80,d1
00009852 0828 0000 0022             		btst	#0,obStatus(a0)
00009858 6700                       		beq.s	loc_7B78
0000985A 4440                       		neg.w	d0
0000985C D041                       		add.w	d1,d0
0000985E                            
0000985E                            loc_7B78:
0000985E 6000                       		bra.s	Swing_Move2
00009860                            ; End of function Swing_Move
00009860                            
00009860                            
00009860                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009860                            
00009860                            
00009860                            Obj48_Move:
00009860 4A28 003D                  		tst.b	$3D(a0)
00009864 6600                       		bne.s	loc_7B9C
00009866 3028 003E                  		move.w	$3E(a0),d0
0000986A 5040                       		addq.w	#8,d0
0000986C 3140 003E                  		move.w	d0,$3E(a0)
00009870 D168 0026                  		add.w	d0,obAngle(a0)
00009874 0C40 0200                  		cmpi.w	#$200,d0
00009878 6600                       		bne.s	loc_7BB6
0000987A 117C 0001 003D             		move.b	#1,$3D(a0)
00009880 6000                       		bra.s	loc_7BB6
00009882                            ; ===========================================================================
00009882                            
00009882                            loc_7B9C:
00009882 3028 003E                  		move.w	$3E(a0),d0
00009886 5140                       		subq.w	#8,d0
00009888 3140 003E                  		move.w	d0,$3E(a0)
0000988C D168 0026                  		add.w	d0,obAngle(a0)
00009890 0C40 FE00                  		cmpi.w	#-$200,d0
00009894 6600                       		bne.s	loc_7BB6
00009896 117C 0000 003D             		move.b	#0,$3D(a0)
0000989C                            
0000989C                            loc_7BB6:
0000989C 1028 0026                  		move.b	obAngle(a0),d0
000098A0                            ; End of function Obj48_Move
000098A0                            
000098A0                            
000098A0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000098A0                            
000098A0                            
000098A0                            Swing_Move2:
000098A0 6100 A1E0                  		bsr.w	CalcSine
000098A4 3428 0038                  		move.w	$38(a0),d2
000098A8 3628 003A                  		move.w	$3A(a0),d3
000098AC 45E8 0028                  		lea	obSubtype(a0),a2
000098B0 7C00                       		moveq	#0,d6
000098B2 1C1A                       		move.b	(a2)+,d6
000098B4                            
000098B4                            loc_7BCE:
000098B4 7800                       		moveq	#0,d4
000098B6 181A                       		move.b	(a2)+,d4
000098B8 ED4C                       		lsl.w	#6,d4
000098BA 0684 00FF D000             		addi.l	#v_objspace&$FFFFFF,d4
000098C0 2244                       		movea.l	d4,a1
000098C2 7800                       		moveq	#0,d4
000098C4 1829 003C                  		move.b	$3C(a1),d4
000098C8 2A04                       		move.l	d4,d5
000098CA C9C0                       		muls.w	d0,d4
000098CC E084                       		asr.l	#8,d4
000098CE CBC1                       		muls.w	d1,d5
000098D0 E085                       		asr.l	#8,d5
000098D2 D842                       		add.w	d2,d4
000098D4 DA43                       		add.w	d3,d5
000098D6 3344 000C                  		move.w	d4,obY(a1)
000098DA 3345 0008                  		move.w	d5,obX(a1)
000098DE 51CE FFD4                  		dbf	d6,loc_7BCE
000098E2 4E75                       		rts	
000098E4                            ; End of function Swing_Move2
000098E4                            
000098E4                            ; ===========================================================================
000098E4                            
000098E4                            Swing_ChkDel:
00009902 4E75                       		rts	
00009904                            ; ===========================================================================
00009904                            
00009904                            Swing_DelAll:
00009904 7400                       		moveq	#0,d2
00009906 45E8 0028                  		lea	obSubtype(a0),a2
0000990A 141A                       		move.b	(a2)+,d2
0000990C                            
0000990C                            Swing_DelLoop:
0000990C 7000                       		moveq	#0,d0
0000990E 101A                       		move.b	(a2)+,d0
00009910 ED48                       		lsl.w	#6,d0
00009912 0680 00FF D000             		addi.l	#v_objspace&$FFFFFF,d0
00009918 2240                       		movea.l	d0,a1
0000991A 6100 0000                  		bsr.w	DeleteChild
0000991E 51CA FFEC                  		dbf	d2,Swing_DelLoop ; repeat for length of	chain
00009922 4E75                       		rts	
00009924                            ; ===========================================================================
00009924                            
00009924                            Swing_Delete:	; Routine 6, 8
00009924 6100 0000                  		bsr.w	DeleteObject
00009928 4E75                       		rts	
0000992A                            ; ===========================================================================
0000992A                            
0000992A                            Swing_Display:	; Routine $A
0000992A 6000 0000                  		bra.w	DisplaySprite
0000992A 6000 0000                  		bra.w	DisplaySprite
0000992E                            Map_Swing_GHZ:	include	"_maps\Swinging Platforms (GHZ).asm"
0000992E                            ; ---------------------------------------------------------------------------
0000992E                            ; Sprite mappings - GHZ	and MZ swinging	platforms
0000992E                            ; ---------------------------------------------------------------------------
0000992E                            Map_Swing_GHZ_internal:
0000992E 0000                       		dc.w @block-Map_Swing_GHZ_internal
00009930 0000                       		dc.w @chain-Map_Swing_GHZ_internal
00009932 0000                       		dc.w @anchor-Map_Swing_GHZ_internal
00009934 02                         @block:		dc.b 2
00009935 F809 0004 E8               		dc.b $F8, 9, 0,	4, $E8
0000993A F809 0004 00               		dc.b $F8, 9, 0,	4, 0
0000993F 01                         @chain:		dc.b 1
00009940 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00009945 01                         @anchor:	dc.b 1
00009946 F805 000A F8               		dc.b $F8, 5, 0,	$A, $F8
0000994C 00                         		even
0000994C 00                         		even
0000994C                            Map_Swing_SLZ:	include	"_maps\Swinging Platforms (SLZ).asm"
0000994C                            ; ---------------------------------------------------------------------------
0000994C                            ; Sprite mappings - SLZ	swinging platforms
0000994C                            ; ---------------------------------------------------------------------------
0000994C                            Map_Swing_SLZ_internal:
0000994C 0000                       		dc.w @block-Map_Swing_SLZ_internal
0000994E 0000                       		dc.w @chain-Map_Swing_SLZ_internal
00009950 0000                       		dc.w @anchor-Map_Swing_SLZ_internal
00009952 08                         @block:		dc.b 8
00009953 F00F 0004 E0               		dc.b $F0, $F, 0, 4, $E0
00009958 F00F 0804 00               		dc.b $F0, $F, 8, 4, 0
0000995D F005 0014 D0               		dc.b $F0, 5, 0,	$14, $D0
00009962 F005 0814 20               		dc.b $F0, 5, 8,	$14, $20
00009967 1004 0018 E0               		dc.b $10, 4, 0,	$18, $E0
0000996C 1004 0818 10               		dc.b $10, 4, 8,	$18, $10
00009971 1001 001A F8               		dc.b $10, 1, 0,	$1A, $F8
00009976 1001 081A 00               		dc.b $10, 1, 8,	$1A, 0
0000997B 01                         @chain:		dc.b 1
0000997C F805 4000 F8               		dc.b $F8, 5, $40, 0, $F8
00009981 01                         @anchor:	dc.b 1
00009982 F805 001C F8               		dc.b $F8, 5, 0,	$1C, $F8
00009988 00                         		even
00009988 00                         		even
00009988                            		include	"_incObj\17 Spiked Pole Helix.asm"
00009988                            ; ---------------------------------------------------------------------------
00009988                            ; Object 17 - helix of spikes on a pole	(GHZ)
00009988                            ; ---------------------------------------------------------------------------
00009988                            
00009988                            Helix:
00009988 7000                       		moveq	#0,d0
0000998A 1028 0024                  		move.b	obRoutine(a0),d0
0000998E 323B 0000                  		move.w	Hel_Index(pc,d0.w),d1
00009992 4EFB 1000                  		jmp	Hel_Index(pc,d1.w)
00009996                            ; ===========================================================================
00009996 0000                       Hel_Index:	dc.w Hel_Main-Hel_Index
00009998 0000                       		dc.w Hel_Action-Hel_Index
0000999A 0000                       		dc.w Hel_Action-Hel_Index
0000999C 0000                       		dc.w Hel_Delete-Hel_Index
0000999E 0000                       		dc.w Hel_Display-Hel_Index
000099A0                            
000099A0 =0000003E                  hel_frame:	equ $3E		; start frame (different for each spike)
000099A0                            
000099A0                            ;		$29-38 are used for child object addresses
000099A0                            ; ===========================================================================
000099A0                            
000099A0                            Hel_Main:	; Routine 0
000099A0 5428 0024                  		addq.b	#2,obRoutine(a0)
000099A4 217C 0000 0000 0004        		move.l	#Map_Hel,obMap(a0)
000099AC 317C 4398 0002             		move.w	#$4398,obGfx(a0)
000099B2 117C 0007 0022             		move.b	#7,obStatus(a0)
000099B8 117C 0004 0001             		move.b	#4,obRender(a0)
000099BE 317C 0180 0018             		move.w	#$180,obPriority(a0)
000099C4 117C 0008 0014             		move.b	#8,obActWid(a0)
000099CA 3428 000C                  		move.w	obY(a0),d2
000099CE 3628 0008                  		move.w	obX(a0),d3
000099D2 1810                       		move.b	0(a0),d4
000099D4 45E8 0028                  		lea	obSubtype(a0),a2 ; move helix length to a2
000099D8 7200                       		moveq	#0,d1
000099DA 1212                       		move.b	(a2),d1		; move helix length to d1
000099DC 14FC 0000                  		move.b	#0,(a2)+	; clear subtype
000099E0 3001                       		move.w	d1,d0
000099E2 E248                       		lsr.w	#1,d0
000099E4 E948                       		lsl.w	#4,d0
000099E6 9640                       		sub.w	d0,d3		; d3 is x-axis position of leftmost spike
000099E8 5501                       		subq.b	#2,d1
000099EA 6500                       		bcs.s	Hel_Action	; skip to action if length is only 1
000099EC 7C00                       		moveq	#0,d6
000099EE                            
000099EE                            Hel_Build:
000099EE 6100 0000                  		bsr.w	FindFreeObj
000099F2 6600                       		bne.s	Hel_Action
000099F4 5228 0028                  		addq.b	#1,obSubtype(a0)
000099F8 3A09                       		move.w	a1,d5
000099FA 0445 D000                  		subi.w	#$D000,d5
000099FE EC4D                       		lsr.w	#6,d5
00009A00 0245 007F                  		andi.w	#$7F,d5
00009A04 14C5                       		move.b	d5,(a2)+	; copy child address to parent RAM
00009A06 137C 0008 0024             		move.b	#8,obRoutine(a1)
00009A0C 1284                       		move.b	d4,0(a1)
00009A0E 3342 000C                  		move.w	d2,ObY(a1)
00009A12 3343 0008                  		move.w	d3,obX(a1)
00009A16 2368 0004 0004             		move.l	obMap(a0),obMap(a1)
00009A1C 337C 4398 0002             		move.w	#$4398,obGfx(a1)
00009A22 137C 0004 0001             		move.b	#4,obRender(a1)
00009A28 337C 0180 0018             		move.w	#$180,obPriority(a1)
00009A2E 137C 0008 0014             		move.b	#8,obActWid(a1)
00009A34 1346 003E                  		move.b	d6,hel_frame(a1)
00009A38 5206                       		addq.b	#1,d6
00009A3A 0206 0007                  		andi.b	#7,d6
00009A3E 0643 0010                  		addi.w	#$10,d3
00009A42 B668 0008                  		cmp.w	obX(a0),d3	; is this spike in the centre?
00009A46 6600                       		bne.s	Hel_NotCentre	; if not, branch
00009A48                            
00009A48 1146 003E                  		move.b	d6,hel_frame(a0) ; set parent spike frame
00009A4C 5206                       		addq.b	#1,d6
00009A4E 0206 0007                  		andi.b	#7,d6
00009A52 0643 0010                  		addi.w	#$10,d3		; skip to next spike
00009A56 5228 0028                  		addq.b	#1,obSubtype(a0)
00009A5A                            
00009A5A                            	Hel_NotCentre:
00009A5A 51C9 FF92                  		dbf	d1,Hel_Build ; repeat d1 times (helix length)
00009A5E                            
00009A5E                            Hel_Action:	; Routine 2, 4
00009A5E 6100 0000                  		bsr.w	Hel_RotateSpikes
00009A62 6100 0000                  		bsr.w	DisplaySprite
00009A66 6000 0000                  		bra.w	Hel_ChkDel
00009A6A                            
00009A6A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009A6A                            
00009A6A                            
00009A6A                            Hel_RotateSpikes:
00009A6A 1038 FEC1                  		move.b	(v_ani0_frame).w,d0
00009A6E 117C 0000 0020             		move.b	#0,obColType(a0) ; make object harmless
00009A74 D028 003E                  		add.b	hel_frame(a0),d0
00009A78 0200 0007                  		andi.b	#7,d0
00009A7C 1140 001A                  		move.b	d0,obFrame(a0)	; change current frame
00009A80 6600                       		bne.s	locret_7DA6
00009A82 117C 0084 0020             		move.b	#$84,obColType(a0) ; make object harmful
00009A88                            
00009A88                            locret_7DA6:
00009A88 4E75                       		rts	
00009A8A                            ; End of function Hel_RotateSpikes
00009A8A                            
00009A8A                            ; ===========================================================================
00009A8A                            
00009A8A                            Hel_ChkDel:
00009AA8 4E75                       		rts	
00009AAA                            ; ===========================================================================
00009AAA                            
00009AAA                            Hel_DelAll:
00009AAA 7400                       		moveq	#0,d2
00009AAC 45E8 0028                  		lea	obSubtype(a0),a2 ; move helix length to a2
00009AB0 141A                       		move.b	(a2)+,d2	; move helix length to d2
00009AB2 5502                       		subq.b	#2,d2
00009AB4 6500                       		bcs.s	Hel_Delete
00009AB6                            
00009AB6                            	Hel_DelLoop:
00009AB6 7000                       		moveq	#0,d0
00009AB8 101A                       		move.b	(a2)+,d0
00009ABA ED48                       		lsl.w	#6,d0
00009ABC 0680 00FF D000             		addi.l	#v_objspace&$FFFFFF,d0
00009AC2 2240                       		movea.l	d0,a1		; get child address
00009AC4 6100 0000                  		bsr.w	DeleteChild	; delete object
00009AC8 51CA FFEC                  		dbf	d2,Hel_DelLoop ; repeat d2 times (helix length)
00009ACC                            
00009ACC                            Hel_Delete:	; Routine 6
00009ACC 6100 0000                  		bsr.w	DeleteObject
00009AD0 4E75                       		rts	
00009AD2                            ; ===========================================================================
00009AD2                            
00009AD2                            Hel_Display:	; Routine 8
00009AD2 6100 FF96                  		bsr.w	Hel_RotateSpikes
00009AD6 6000 0000                  		bra.w	DisplaySprite
00009AD6 6000 0000                  		bra.w	DisplaySprite
00009ADA                            Map_Hel:	include	"_maps\Spiked Pole Helix.asm"
00009ADA                            ; ---------------------------------------------------------------------------
00009ADA                            ; Sprite mappings - helix of spikes on a pole (GHZ)
00009ADA                            ; ---------------------------------------------------------------------------
00009ADA                            Map_Hel_internal:
00009ADA 0000                       		dc.w byte_7E08-Map_Hel_internal
00009ADC 0000                       		dc.w byte_7E0E-Map_Hel_internal
00009ADE 0000                       		dc.w byte_7E14-Map_Hel_internal
00009AE0 0000                       		dc.w byte_7E1A-Map_Hel_internal
00009AE2 0000                       		dc.w byte_7E20-Map_Hel_internal
00009AE4 0000                       		dc.w byte_7E26-Map_Hel_internal
00009AE6 0000                       		dc.w byte_7E2E-Map_Hel_internal
00009AE8 0000                       		dc.w byte_7E2C-Map_Hel_internal
00009AEA 01                         byte_7E08:	dc.b 1
00009AEB F001 0000 FC               		dc.b $F0, 1, 0,	0, $FC	; points straight up (harmful)
00009AF0 01                         byte_7E0E:	dc.b 1
00009AF1 F505 0002 F8               		dc.b $F5, 5, 0,	2, $F8	; 45 degree
00009AF6 01                         byte_7E14:	dc.b 1
00009AF7 F805 0006 F8               		dc.b $F8, 5, 0,	6, $F8	; 90 degree
00009AFC 01                         byte_7E1A:	dc.b 1
00009AFD FB05 000A F8               		dc.b $FB, 5, 0,	$A, $F8	; 45 degree
00009B02 01                         byte_7E20:	dc.b 1
00009B03 0001 000E FC               		dc.b 0,	1, 0, $E, $FC	; straight down
00009B08 01                         byte_7E26:	dc.b 1
00009B09 0400 0010 FD               		dc.b 4,	0, 0, $10, $FD	; 45 degree
00009B0E 01                         byte_7E2C:	dc.b 1
00009B0F F4                         		dc.b $F4
00009B10                            byte_7E2E:	; reads the 0 below	; not visible
00009B10 0000 11FD                  		dc.b 0, 0,	$11, $FD ; 45 degree
00009B14                            		even
00009B14                            		even
00009B14                            		include	"_incObj\18 Platforms.asm"
00009B14                            ; ---------------------------------------------------------------------------
00009B14                            ; Object 18 - platforms	(GHZ, SYZ, SLZ)
00009B14                            ; ---------------------------------------------------------------------------
00009B14                            
00009B14                            BasicPlatform:
00009B14 7000                       		moveq	#0,d0
00009B16 1028 0024                  		move.b	obRoutine(a0),d0
00009B1A 323B 0000                  		move.w	Plat_Index(pc,d0.w),d1
00009B1E 4EFB 1000                  		jmp	Plat_Index(pc,d1.w)
00009B22                            ; ===========================================================================
00009B22 0000                       Plat_Index:	dc.w Plat_Main-Plat_Index
00009B24 0000                       		dc.w Plat_Solid-Plat_Index
00009B26 0000                       		dc.w Plat_Action2-Plat_Index
00009B28 0000                       		dc.w Plat_Delete-Plat_Index
00009B2A 0000                       		dc.w Plat_Action-Plat_Index
00009B2C                            ; ===========================================================================
00009B2C                            
00009B2C                            Plat_Main:	; Routine 0
00009B2C 5428 0024                  		addq.b	#2,obRoutine(a0)
00009B30 317C 4000 0002             		move.w	#$4000,obGfx(a0)
00009B36 217C 0000 0000 0004        		move.l	#Map_Plat_GHZ,obMap(a0)
00009B3E 117C 0020 0014             		move.b	#$20,obActWid(a0)
00009B44 0C38 0004 FE10             		cmpi.b	#id_SYZ,(v_zone).w ; check if level is SYZ
00009B4A 6600                       		bne.s	@notSYZ
00009B4C                            
00009B4C 217C 0000 0000 0004        		move.l	#Map_Plat_SYZ,obMap(a0) ; SYZ specific code
00009B54 117C 0020 0014             		move.b	#$20,obActWid(a0)
00009B5A                            
00009B5A                            	@notSYZ:
00009B5A 0C38 0003 FE10             		cmpi.b	#id_SLZ,(v_zone).w ; check if level is SLZ
00009B60 6600                       		bne.s	@notSLZ
00009B62 217C 0000 0000 0004        		move.l	#Map_Plat_SLZ,obMap(a0) ; SLZ specific code
00009B6A 117C 0020 0014             		move.b	#$20,obActWid(a0)
00009B70 317C 4000 0002             		move.w	#$4000,obGfx(a0)
00009B76 117C 0003 0028             		move.b	#3,obSubtype(a0)
00009B7C                            
00009B7C                            	@notSLZ:
00009B7C 117C 0004 0001             		move.b	#4,obRender(a0)
00009B82 317C 0200 0018             		move.w	#$200,obPriority(a0)
00009B88 3168 000C 002C             		move.w	obY(a0),$2C(a0)
00009B8E 3168 000C 0034             		move.w	obY(a0),$34(a0)
00009B94 3168 0008 0032             		move.w	obX(a0),$32(a0)
00009B9A 317C 0080 0026             		move.w	#$80,obAngle(a0)
00009BA0 7200                       		moveq	#0,d1
00009BA2 1028 0028                  		move.b	obSubtype(a0),d0
00009BA6 0C00 000A                  		cmpi.b	#$A,d0		; is object type $A (large platform)?
00009BAA 6600                       		bne.s	@setframe	; if not, branch
00009BAC 5201                       		addq.b	#1,d1		; use frame #1
00009BAE 117C 0020 0014             		move.b	#$20,obActWid(a0) ; set width
00009BB4                            
00009BB4                            	@setframe:
00009BB4 1141 001A                  		move.b	d1,obFrame(a0)	; set frame to d1
00009BB8                            
00009BB8                            Plat_Solid:	; Routine 2
00009BB8 4A28 0038                  		tst.b	$38(a0)
00009BBC 6700                       		beq.s	loc_7EE0
00009BBE 5928 0038                  		subq.b	#4,$38(a0)
00009BC2                            
00009BC2                            	loc_7EE0:
00009BC2 7200                       		moveq	#0,d1
00009BC4 1228 0014                  		move.b	obActWid(a0),d1
00009BC8 6100 F56C                  		bsr.w	PlatformObject
00009BCC                            
00009BCC                            Plat_Action:	; Routine 8
00009BCC 6100 0000                  		bsr.w	Plat_Move
00009BD0 6100 0000                  		bsr.w	Plat_Nudge
00009BD4 6100 0000                  		bsr.w	DisplaySprite
00009BD8 6000 0000                  		bra.w	Plat_ChkDel
00009BDC                            ; ===========================================================================
00009BDC                            
00009BDC                            Plat_Action2:	; Routine 4
00009BDC 0C28 0040 0038             		cmpi.b	#$40,$38(a0)
00009BE2 6700                       		beq.s	loc_7F06
00009BE4 5828 0038                  		addq.b	#4,$38(a0)
00009BE8                            
00009BE8                            	loc_7F06:
00009BE8 7200                       		moveq	#0,d1
00009BEA 1228 0014                  		move.b	obActWid(a0),d1
00009BEE 6100 F6BA                  		bsr.w	ExitPlatform
00009BF2 3F28 0008                  		move.w	obX(a0),-(sp)
00009BF6 6100 0000                  		bsr.w	Plat_Move
00009BFA 6100 0000                  		bsr.w	Plat_Nudge
00009BFE 341F                       		move.w	(sp)+,d2
00009C00 6100 FC12                  		bsr.w	MvSonicOnPtfm2
00009C04 6100 0000                  		bsr.w	DisplaySprite
00009C08 6000 0000                  		bra.w	Plat_ChkDel
00009C0C                            
00009C0C 4E75                       		rts
00009C0E                            
00009C0E                            ; ---------------------------------------------------------------------------
00009C0E                            ; Subroutine to	move platform slightly when you	stand on it
00009C0E                            ; ---------------------------------------------------------------------------
00009C0E                            
00009C0E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009C0E                            
00009C0E                            
00009C0E                            Plat_Nudge:
00009C0E 1028 0038                  		move.b	$38(a0),d0
00009C12 6100 9E6E                  		bsr.w	CalcSine
00009C16 323C 0400                  		move.w	#$400,d1
00009C1A C1C1                       		muls.w	d1,d0
00009C1C 4840                       		swap	d0
00009C1E D068 002C                  		add.w	$2C(a0),d0
00009C22 3140 000C                  		move.w	d0,obY(a0)
00009C26 4E75                       		rts	
00009C28                            ; End of function Plat_Nudge
00009C28                            
00009C28                            ; ---------------------------------------------------------------------------
00009C28                            ; Subroutine to	move platforms
00009C28                            ; ---------------------------------------------------------------------------
00009C28                            
00009C28                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009C28                            
00009C28                            
00009C28                            Plat_Move:
00009C28 7000                       		moveq	#0,d0
00009C2A 1028 0028                  		move.b	obSubtype(a0),d0
00009C2E 0240 000F                  		andi.w	#$F,d0
00009C32 D040                       		add.w	d0,d0
00009C34 323B 0000                  		move.w	@index(pc,d0.w),d1
00009C38 4EFB 1000                  		jmp	@index(pc,d1.w)
00009C3C                            ; End of function Plat_Move
00009C3C                            
00009C3C                            ; ===========================================================================
00009C3C 0000 0000                  @index:		dc.w @type00-@index, @type01-@index
00009C40 0000 0000                  		dc.w @type02-@index, @type03-@index
00009C44 0000 0000                  		dc.w @type04-@index, @type05-@index
00009C48 0000 0000                  		dc.w @type06-@index, @type07-@index
00009C4C 0000 0000                  		dc.w @type08-@index, @type00-@index
00009C50 0000 0000                  		dc.w @type0A-@index, @type0B-@index
00009C54 0000                       		dc.w @type0C-@index
00009C56                            ; ===========================================================================
00009C56                            
00009C56                            @type00:
00009C56 4E75                       		rts			; platform 00 doesn't move
00009C58                            ; ===========================================================================
00009C58                            
00009C58                            @type05:
00009C58 3028 0032                  		move.w	$32(a0),d0
00009C5C 1228 0026                  		move.b	obAngle(a0),d1	; load platform-motion variable
00009C60 4401                       		neg.b	d1		; reverse platform-motion
00009C62 0601 0040                  		addi.b	#$40,d1
00009C66 6000                       		bra.s	@type01_move
00009C68                            ; ===========================================================================
00009C68                            
00009C68                            @type01:
00009C68 3028 0032                  		move.w	$32(a0),d0
00009C6C 1228 0026                  		move.b	obAngle(a0),d1	; load platform-motion variable
00009C70 0401 0040                  		subi.b	#$40,d1
00009C74                            
00009C74                            	@type01_move:
00009C74 4881                       		ext.w	d1
00009C76 D041                       		add.w	d1,d0
00009C78 3140 0008                  		move.w	d0,obX(a0)	; change position on x-axis
00009C7C 6000 0000                  		bra.w	@chgmotion
00009C80                            ; ===========================================================================
00009C80                            
00009C80                            @type0C:
00009C80 3028 0034                  		move.w	$34(a0),d0
00009C84 1238 FE6C                  		move.b	(v_oscillate+$E).w,d1 ; load platform-motion variable
00009C88 4401                       		neg.b	d1		; reverse platform-motion
00009C8A 0601 0030                  		addi.b	#$30,d1
00009C8E 6000                       		bra.s	@type02_move
00009C90                            ; ===========================================================================
00009C90                            
00009C90                            @type0B:
00009C90 3028 0034                  		move.w	$34(a0),d0
00009C94 1238 FE6C                  		move.b	(v_oscillate+$E).w,d1 ; load platform-motion variable
00009C98 0401 0030                  		subi.b	#$30,d1
00009C9C 6000                       		bra.s	@type02_move
00009C9E                            ; ===========================================================================
00009C9E                            
00009C9E                            @type06:
00009C9E 3028 0034                  		move.w	$34(a0),d0
00009CA2 1228 0026                  		move.b	obAngle(a0),d1	; load platform-motion variable
00009CA6 4401                       		neg.b	d1		; reverse platform-motion
00009CA8 0601 0040                  		addi.b	#$40,d1
00009CAC 6000                       		bra.s	@type02_move
00009CAE                            ; ===========================================================================
00009CAE                            
00009CAE                            @type02:
00009CAE 3028 0034                  		move.w	$34(a0),d0
00009CB2 1228 0026                  		move.b	obAngle(a0),d1	; load platform-motion variable
00009CB6 0401 0040                  		subi.b	#$40,d1
00009CBA                            
00009CBA                            	@type02_move:
00009CBA 4881                       		ext.w	d1
00009CBC D041                       		add.w	d1,d0
00009CBE 3140 002C                  		move.w	d0,$2C(a0)	; change position on y-axis
00009CC2 6000 0000                  		bra.w	@chgmotion
00009CC6                            ; ===========================================================================
00009CC6                            
00009CC6                            @type03:
00009CC6 4A68 003A                  		tst.w	$3A(a0)		; is time delay	set?
00009CCA 6600                       		bne.s	@type03_wait	; if yes, branch
00009CCC 0828 0003 0022             		btst	#3,obStatus(a0)	; is Sonic standing on the platform?
00009CD2 6700                       		beq.s	@type03_nomove	; if not, branch
00009CD4 317C 001E 003A             		move.w	#30,$3A(a0)	; set time delay to 0.5	seconds
00009CDA                            
00009CDA                            	@type03_nomove:
00009CDA 4E75                       		rts	
00009CDC                            
00009CDC                            	@type03_wait:
00009CDC 5368 003A                  		subq.w	#1,$3A(a0)	; subtract 1 from time
00009CE0 66F8                       		bne.s	@type03_nomove	; if time is > 0, branch
00009CE2 317C 0020 003A             		move.w	#32,$3A(a0)
00009CE8 5228 0028                  		addq.b	#1,obSubtype(a0) ; change to type 04 (falling)
00009CEC 4E75                       		rts	
00009CEE                            ; ===========================================================================
00009CEE                            
00009CEE                            @type04:
00009CEE 4A68 003A                  		tst.w	$3A(a0)
00009CF2 6700                       		beq.s	@loc_8048
00009CF4 5368 003A                  		subq.w	#1,$3A(a0)
00009CF8 6600                       		bne.s	@loc_8048
00009CFA 0828 0003 0022             		btst	#3,obStatus(a0)
00009D00 6700                       		beq.s	@loc_8042
00009D02 08E9 0001 0022             		bset	#1,obStatus(a1)
00009D08 08A9 0003 0022             		bclr	#3,obStatus(a1)
00009D0E 137C 0002 0024             		move.b	#2,obRoutine(a1)
00009D14 08A8 0003 0022             		bclr	#3,obStatus(a0)
00009D1A 4228 0025                  		clr.b	$25(a0)
00009D1E 3368 0012 0012             		move.w	obVelY(a0),obVelY(a1)
00009D24                            
00009D24                            	@loc_8042:
00009D24 117C 0008 0024             		move.b	#8,obRoutine(a0)
00009D2A                            
00009D2A                            	@loc_8048:
00009D2A 2628 002C                  		move.l	$2C(a0),d3
00009D2E 3028 0012                  		move.w	obVelY(a0),d0
00009D32 48C0                       		ext.l	d0
00009D34 E180                       		asl.l	#8,d0
00009D36 D680                       		add.l	d0,d3
00009D38 2143 002C                  		move.l	d3,$2C(a0)
00009D3C 0668 0038 0012             		addi.w	#$38,obVelY(a0)
00009D42 3038 F72E                  		move.w	(v_limitbtm2).w,d0
00009D46 0640 00E0                  		addi.w	#$E0,d0
00009D4A B068 002C                  		cmp.w	$2C(a0),d0
00009D4E 6400                       		bcc.s	@locret_8074
00009D50 117C 0006 0024             		move.b	#6,obRoutine(a0)
00009D56                            
00009D56                            	@locret_8074:
00009D56 4E75                       		rts	
00009D58                            ; ===========================================================================
00009D58                            
00009D58                            @type07:
00009D58 4A68 003A                  		tst.w	$3A(a0)		; is time delay	set?
00009D5C 6600                       		bne.s	@type07_wait	; if yes, branch
00009D5E 45F8 F7E0                  		lea	(f_switch).w,a2	; load switch statuses
00009D62 7000                       		moveq	#0,d0
00009D64 1028 0028                  		move.b	obSubtype(a0),d0 ; move object type ($x7) to d0
00009D68 E848                       		lsr.w	#4,d0		; divide d0 by 8, round	down
00009D6A 4A32 0000                  		tst.b	(a2,d0.w)	; has switch no. d0 been pressed?
00009D6E 6700                       		beq.s	@type07_nomove	; if not, branch
00009D70 317C 003C 003A             		move.w	#60,$3A(a0)	; set time delay to 1 second
00009D76                            
00009D76                            	@type07_nomove:
00009D76 4E75                       		rts	
00009D78                            
00009D78                            	@type07_wait:
00009D78 5368 003A                  		subq.w	#1,$3A(a0)	; subtract 1 from time delay
00009D7C 66F8                       		bne.s	@type07_nomove	; if time is > 0, branch
00009D7E 5228 0028                  		addq.b	#1,obSubtype(a0) ; change to type 08
00009D82 4E75                       		rts	
00009D84                            ; ===========================================================================
00009D84                            
00009D84                            @type08:
00009D84 5568 002C                  		subq.w	#2,$2C(a0)	; move platform	up
00009D88 3028 0034                  		move.w	$34(a0),d0
00009D8C 0440 0200                  		subi.w	#$200,d0
00009D90 B068 002C                  		cmp.w	$2C(a0),d0	; has platform moved $200 pixels?
00009D94 6600                       		bne.s	@type08_nostop	; if not, branch
00009D96 4228 0028                  		clr.b	obSubtype(a0)	; change to type 00 (stop moving)
00009D9A                            
00009D9A                            	@type08_nostop:
00009D9A 4E75                       		rts	
00009D9C                            ; ===========================================================================
00009D9C                            
00009D9C                            @type0A:
00009D9C 3028 0034                  		move.w	$34(a0),d0
00009DA0 1228 0026                  		move.b	obAngle(a0),d1	; load platform-motion variable
00009DA4 0401 0040                  		subi.b	#$40,d1
00009DA8 4881                       		ext.w	d1
00009DAA E241                       		asr.w	#1,d1
00009DAC D041                       		add.w	d1,d0
00009DAE 3140 002C                  		move.w	d0,$2C(a0)	; change position on y-axis
00009DB2                            
00009DB2                            @chgmotion:
00009DB2 1178 FE78 0026             		move.b	(v_oscillate+$1A).w,$26(a0) ; update platform-movement variable
00009DB8 4E75                       		rts	
00009DBA                            ; ===========================================================================
00009DBA                            
00009DBA                            Plat_ChkDel:
00009DD6 4E75                       		rts	
00009DD8                            ; ===========================================================================
00009DD8                            
00009DD8                            Plat_Delete:	; Routine 6
00009DD8 6000 0000                  		bra.w	DeleteObject
00009DD8 6000 0000                  		bra.w	DeleteObject
00009DDC                            Map_Plat_Unused:include	"_maps\Platforms (unused).asm"
00009DDC                            ; ---------------------------------------------------------------------------
00009DDC                            ; Sprite mappings - unused
00009DDC                            ; ---------------------------------------------------------------------------
00009DDC                            Map_Plat_Unused_internal:
00009DDC 0000                       		dc.w @small-Map_Plat_Unused_internal
00009DDE 0000                       		dc.w @large-Map_Plat_Unused_internal
00009DE0 02                         @small:		dc.b 2
00009DE1 F40B 003C E8               		dc.b $F4, $B, 0, $3C, $E8
00009DE6 F40B 0048 00               		dc.b $F4, $B, 0, $48, 0
00009DEB 0A                         @large:		dc.b $A
00009DEC F40F 00CA E0               		dc.b $F4, $F, 0, $CA, $E0
00009DF1 040F 00DA E0               		dc.b 4,	$F, 0, $DA, $E0
00009DF6 240F 00DA E0               		dc.b $24, $F, 0, $DA, $E0
00009DFB 440F 00DA E0               		dc.b $44, $F, 0, $DA, $E0
00009E00 640F 00DA E0               		dc.b $64, $F, 0, $DA, $E0
00009E05 F40F 08CA 00               		dc.b $F4, $F, 8, $CA, 0
00009E0A 040F 08DA 00               		dc.b 4,	$F, 8, $DA, 0
00009E0F 240F 08DA 00               		dc.b $24, $F, 8, $DA, 0
00009E14 440F 08DA 00               		dc.b $44, $F, 8, $DA, 0
00009E19 640F 08DA 00               		dc.b $64, $F, 8, $DA, 0
00009E1E                            		even
00009E1E                            		even
00009E1E                            Map_Plat_GHZ:	include	"_maps\Platforms (GHZ).asm"
00009E1E                            ; ---------------------------------------------------------------------------
00009E1E                            ; Sprite mappings - GHZ	platforms
00009E1E                            ; ---------------------------------------------------------------------------
00009E1E                            Map_Plat_GHZ_internal:
00009E1E 0000                       		dc.w @small-Map_Plat_GHZ_internal
00009E20 0000                       		dc.w @large-Map_Plat_GHZ_internal
00009E22 04                         @small:		dc.b 4
00009E23 F40B 003B E0               		dc.b $F4, $B, 0, $3B, $E0 ; small platform
00009E28 F407 003F F8               		dc.b $F4, 7, 0,	$3F, $F8
00009E2D F407 003F 08               		dc.b $F4, 7, 0,	$3F, 8
00009E32 F403 0047 18               		dc.b $F4, 3, 0,	$47, $18
00009E37 0A                         @large:		dc.b $A
00009E38 F40F 00C5 E0               		dc.b $F4, $F, 0, $C5, $E0 ; large column platform
00009E3D 040F 00D5 E0               		dc.b 4,	$F, 0, $D5, $E0
00009E42 240F 00D5 E0               		dc.b $24, $F, 0, $D5, $E0
00009E47 440F 00D5 E0               		dc.b $44, $F, 0, $D5, $E0
00009E4C 640F 00D5 E0               		dc.b $64, $F, 0, $D5, $E0
00009E51 F40F 08C5 00               		dc.b $F4, $F, 8, $C5, 0
00009E56 040F 08D5 00               		dc.b 4,	$F, 8, $D5, 0
00009E5B 240F 08D5 00               		dc.b $24, $F, 8, $D5, 0
00009E60 440F 08D5 00               		dc.b $44, $F, 8, $D5, 0
00009E65 640F 08D5 00               		dc.b $64, $F, 8, $D5, 0
00009E6A                            		even
00009E6A                            		even
00009E6A                            Map_Plat_SYZ:	include	"_maps\Platforms (SYZ).asm"
00009E6A                            ; ---------------------------------------------------------------------------
00009E6A                            ; Sprite mappings - SYZ	platforms
00009E6A                            ; ---------------------------------------------------------------------------
00009E6A                            Map_Plat_SYZ_internal:
00009E6A 0000                       		dc.w @platform-Map_Plat_SYZ_internal
00009E6C 03                         @platform:	dc.b 3
00009E6D F60B 0049 E0               		dc.b $F6, $B, 0, $49, $E0
00009E72 F607 0051 F8               		dc.b $F6, 7, 0,	$51, $F8
00009E77 F60B 0055 08               		dc.b $F6, $B, 0, $55, 8
00009E7C                            		even
00009E7C                            		even
00009E7C                            Map_Plat_SLZ:	include	"_maps\Platforms (SLZ).asm"
00009E7C                            ; ---------------------------------------------------------------------------
00009E7C                            ; Sprite mappings - SLZ	platforms
00009E7C                            ; ---------------------------------------------------------------------------
00009E7C                            Map_Plat_SLZ_internal:
00009E7C 0000                       		dc.w @platform-Map_Plat_SLZ_internal
00009E7E 02                         @platform:	dc.b 2
00009E7F F80F 0021 E0               		dc.b $F8, $F, 0, $21, $E0
00009E84 F80F 0021 00               		dc.b $F8, $F, 0, $21, 0
00009E8A 00                         		even
00009E8A 00                         		even
00009E8A                            Map_GBall:	include	"_maps\GHZ Ball.asm"
00009E8A                            ; ---------------------------------------------------------------------------
00009E8A                            ; Sprite mappings - swinging ball on a chain from GHZ boss
00009E8A                            ; ---------------------------------------------------------------------------
00009E8A                            Map_GBall_internal:
00009E8A 0000                       		dc.w @shiny-Map_GBall_internal
00009E8C 0000                       		dc.w @check1-Map_GBall_internal
00009E8E 0000                       		dc.w @check2-Map_GBall_internal
00009E90 0000                       		dc.w @check3-Map_GBall_internal
00009E92 06                         @shiny:		dc.b 6
00009E93 F004 0024 F0               		dc.b $F0, 4, 0,	$24, $F0
00009E98 F804 1024 F0               		dc.b $F8, 4, $10, $24, $F0
00009E9D E80A 0000 E8               		dc.b $E8, $A, 0, 0, $E8
00009EA2 E80A 0800 00               		dc.b $E8, $A, 8, 0, 0
00009EA7 000A 1000 E8               		dc.b 0,	$A, $10, 0, $E8
00009EAC 000A 1800 00               		dc.b 0,	$A, $18, 0, 0
00009EB1 04                         @check1:	dc.b 4
00009EB2 E80A 0009 E8               		dc.b $E8, $A, 0, 9, $E8
00009EB7 E80A 0809 00               		dc.b $E8, $A, 8, 9, 0
00009EBC 000A 1009 E8               		dc.b 0,	$A, $10, 9, $E8
00009EC1 000A 1809 00               		dc.b 0,	$A, $18, 9, 0
00009EC6 04                         @check2:	dc.b 4
00009EC7 E80A 0012 E8               		dc.b $E8, $A, 0, $12, $E8
00009ECC E80A 001B 00               		dc.b $E8, $A, 0, $1B, 0
00009ED1 000A 181B E8               		dc.b 0,	$A, $18, $1B, $E8
00009ED6 000A 1812 00               		dc.b 0,	$A, $18, $12, 0
00009EDB 04                         @check3:	dc.b 4
00009EDC E80A 081B E8               		dc.b $E8, $A, 8, $1B, $E8
00009EE1 E80A 0812 00               		dc.b $E8, $A, 8, $12, 0
00009EE6 000A 1012 E8               		dc.b 0,	$A, $10, $12, $E8
00009EEB 000A 101B 00               		dc.b 0,	$A, $10, $1B, 0
00009EF0                            		even
00009EF0                            		even
00009EF0                            		include	"_incObj\1A Collapsing Ledge (part 1).asm"
00009EF0                            ; ---------------------------------------------------------------------------
00009EF0                            ; Object 1A - GHZ collapsing ledge
00009EF0                            ; ---------------------------------------------------------------------------
00009EF0                            
00009EF0                            CollapseLedge:
00009EF0 7000                       		moveq	#0,d0
00009EF2 1028 0024                  		move.b	obRoutine(a0),d0
00009EF6 323B 0000                  		move.w	Ledge_Index(pc,d0.w),d1
00009EFA 4EFB 1000                  		jmp	Ledge_Index(pc,d1.w)
00009EFE                            ; ===========================================================================
00009EFE 0000 0000                  Ledge_Index:	dc.w Ledge_Main-Ledge_Index, Ledge_Touch-Ledge_Index
00009F02 0000 0000                  		dc.w Ledge_Collapse-Ledge_Index, Ledge_Display-Ledge_Index
00009F06 0000 0000                  		dc.w Ledge_Delete-Ledge_Index, Ledge_WalkOff-Ledge_Index
00009F0A                            
00009F0A =00000038                  ledge_timedelay:	equ $38		; time between touching the ledge and it collapsing
00009F0A =0000003A                  ledge_collapse_flag:	equ $3A		; collapse flag
00009F0A                            ; ===========================================================================
00009F0A                            
00009F0A                            Ledge_Main:	; Routine 0
00009F0A 5428 0024                  		addq.b	#2,obRoutine(a0)
00009F0E 217C 0000 0000 0004        		move.l	#Map_Ledge,obMap(a0)
00009F16 317C 4000 0002             		move.w	#$4000,obGfx(a0)
00009F1C 0028 0004 0001             		ori.b	#4,obRender(a0)
00009F22 317C 0200 0018             		move.w	#$200,obPriority(a0)
00009F28 117C 0007 0038             		move.b	#7,ledge_timedelay(a0) ; set time delay for collapse
00009F2E 117C 0064 0014             		move.b	#$64,obActWid(a0)
00009F34 1168 0028 001A             		move.b	obSubtype(a0),obFrame(a0)
00009F3A 117C 0038 0016             		move.b	#$38,obHeight(a0)
00009F40 08E8 0004 0001             		bset	#4,obRender(a0)
00009F46                            
00009F46                            Ledge_Touch:	; Routine 2
00009F46 4A28 003A                  		tst.b	ledge_collapse_flag(a0)	; is ledge collapsing?
00009F4A 6700                       		beq.s	@slope		; if not, branch
00009F4C 4A28 0038                  		tst.b	ledge_timedelay(a0)	; has time reached zero?
00009F50 6700 0000                  		beq.w	Ledge_Fragment	; if yes, branch
00009F54 5328 0038                  		subq.b	#1,ledge_timedelay(a0) ; subtract 1 from time
00009F58                            
00009F58                            	@slope:
00009F58 323C 0030                  		move.w	#$30,d1
00009F5C 45F9 0000 0000             		lea	(Ledge_SlopeData).l,a2
00009F62 6100 F2A6                  		bsr.w	SlopeObject
00009F66 6000 0000                  		bra.w	RememberState
00009F6A                            ; ===========================================================================
00009F6A                            
00009F6A                            Ledge_Collapse:	; Routine 4
00009F6A 4A28 0038                  		tst.b	ledge_timedelay(a0)
00009F6E 6700 0000                  		beq.w	loc_847A
00009F72 117C 0001 003A             		move.b	#1,ledge_collapse_flag(a0)	; set collapse flag
00009F78 5328 0038                  		subq.b	#1,ledge_timedelay(a0)
00009F7C                            
00009F7C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009F7C                            
00009F7C                            
00009F7C                            Ledge_WalkOff:	; Routine $A
00009F7C 323C 0030                  		move.w	#$30,d1
00009F80 6100 F328                  		bsr.w	ExitPlatform
00009F84 323C 0030                  		move.w	#$30,d1
00009F88 45F9 0000 0000             		lea	(Ledge_SlopeData).l,a2
00009F8E 3428 0008                  		move.w	obX(a0),d2
00009F92 6100 0000                  		bsr.w	SlopeObject2
00009F96 6000 0000                  		bra.w	RememberState
00009F9A                            ; End of function Ledge_WalkOff
00009F9A                            
00009F9A                            ; ===========================================================================
00009F9A                            
00009F9A                            Ledge_Display:	; Routine 6
00009F9A 4A28 0038                  		tst.b	ledge_timedelay(a0)	; has time delay reached zero?
00009F9E 6700                       		beq.s	Ledge_TimeZero	; if yes, branch
00009FA0 4A28 003A                  		tst.b	ledge_collapse_flag(a0)	; is ledge collapsing?
00009FA4 6600 0000                  		bne.w	loc_82D0	; if yes, branch
00009FA8 5328 0038                  		subq.b	#1,ledge_timedelay(a0) ; subtract 1 from time
00009FAC 6000 0000                  		bra.w	DisplaySprite
00009FB0                            ; ===========================================================================
00009FB0                            
00009FB0                            loc_82D0:
00009FB0 5328 0038                  		subq.b	#1,ledge_timedelay(a0)
00009FB4 6100 FFC6                  		bsr.w	Ledge_WalkOff
00009FB8 43F8 D000                  		lea	(v_player).w,a1
00009FBC 0829 0003 0022             		btst	#3,obStatus(a1)
00009FC2 6700                       		beq.s	loc_82FC
00009FC4 4A28 0038                  		tst.b	ledge_timedelay(a0)
00009FC8 6600                       		bne.s	locret_8308
00009FCA 08A9 0003 0022             		bclr	#3,obStatus(a1)
00009FD0 08A9 0005 0022             		bclr	#5,obStatus(a1)
00009FD6 137C 0001 001D             		move.b	#1,obNextAni(a1)
00009FDC                            
00009FDC                            loc_82FC:
00009FDC 117C 0000 003A             		move.b	#0,ledge_collapse_flag(a0)
00009FE2 117C 0006 0024             		move.b	#6,obRoutine(a0) ; run "Ledge_Display" routine
00009FE8                            
00009FE8                            locret_8308:
00009FE8 4E75                       		rts	
00009FEA                            ; ===========================================================================
00009FEA                            
00009FEA                            Ledge_TimeZero:
00009FEA 6100 0000                  		bsr.w	ObjectFall
00009FEE 6100 0000                  		bsr.w	DisplaySprite
00009FF2 4A28 0001                  		tst.b	obRender(a0)
00009FF6 6A00                       		bpl.s	Ledge_Delete
00009FF8 4E75                       		rts	
00009FFA                            ; ===========================================================================
00009FFA                            
00009FFA                            Ledge_Delete:	; Routine 8
00009FFA 6100 0000                  		bsr.w	DeleteObject
00009FFE 4E75                       		rts	
00009FFE 4E75                       		rts	
0000A000                            		include	"_incObj\53 Collapsing Floors.asm"
0000A000                            ; ---------------------------------------------------------------------------
0000A000                            ; Object 53 - collapsing floors	(MZ, SLZ, SBZ)
0000A000                            ; ---------------------------------------------------------------------------
0000A000                            
0000A000                            CollapseFloor:
0000A000 7000                       		moveq	#0,d0
0000A002 1028 0024                  		move.b	obRoutine(a0),d0
0000A006 323B 0000                  		move.w	CFlo_Index(pc,d0.w),d1
0000A00A 4EFB 1000                  		jmp	CFlo_Index(pc,d1.w)
0000A00E                            ; ===========================================================================
0000A00E 0000 0000                  CFlo_Index:	dc.w CFlo_Main-CFlo_Index, CFlo_Touch-CFlo_Index
0000A012 0000 0000                  		dc.w CFlo_Collapse-CFlo_Index, CFlo_Display-CFlo_Index
0000A016 0000 0000                  		dc.w CFlo_Delete-CFlo_Index, CFlo_WalkOff-CFlo_Index
0000A01A                            
0000A01A =00000038                  cflo_timedelay:		equ $38
0000A01A =0000003A                  cflo_collapse_flag:	equ $3A
0000A01A                            ; ===========================================================================
0000A01A                            
0000A01A                            CFlo_Main:	; Routine 0
0000A01A 5428 0024                  		addq.b	#2,obRoutine(a0)
0000A01E 217C 0000 0000 0004        		move.l	#Map_CFlo,obMap(a0)
0000A026 317C 42B8 0002             		move.w	#$42B8,obGfx(a0)
0000A02C 0C38 0003 FE10             		cmpi.b	#id_SLZ,(v_zone).w ; check if level is SLZ
0000A032 6600                       		bne.s	@notSLZ
0000A034                            
0000A034 317C 44E0 0002             		move.w	#$44E0,obGfx(a0) ; SLZ specific code
0000A03A 5428 001A                  		addq.b	#2,obFrame(a0)
0000A03E                            
0000A03E                            	@notSLZ:
0000A03E 0C38 0005 FE10             		cmpi.b	#id_SBZ,(v_zone).w ; check if level is SBZ
0000A044 6600                       		bne.s	@notSBZ
0000A046 317C 43F5 0002             		move.w	#$43F5,obGfx(a0) ; SBZ specific code
0000A04C                            
0000A04C                            	@notSBZ:
0000A04C 0028 0004 0001             		ori.b	#4,obRender(a0)
0000A052 317C 0200 0018             		move.w	#$200,obPriority(a0)
0000A058 117C 0007 0038             		move.b	#7,cflo_timedelay(a0)
0000A05E 117C 0044 0014             		move.b	#$44,obActWid(a0)
0000A064                            
0000A064                            CFlo_Touch:	; Routine 2
0000A064 4A28 003A                  		tst.b	cflo_collapse_flag(a0)	; has Sonic touched the	object?
0000A068 6700                       		beq.s	@solid		; if not, branch
0000A06A 4A28 0038                  		tst.b	cflo_timedelay(a0)	; has time delay reached zero?
0000A06E 6700 0000                  		beq.w	CFlo_Fragment	; if yes, branch
0000A072 5328 0038                  		subq.b	#1,cflo_timedelay(a0) ; subtract 1 from time
0000A076                            
0000A076                            	@solid:
0000A076 323C 0020                  		move.w	#$20,d1
0000A07A 6100 F0BA                  		bsr.w	PlatformObject
0000A07E 4A28 0028                  		tst.b	obSubtype(a0)
0000A082 6A00                       		bpl.s	@remstate
0000A084 0829 0003 0022             		btst	#3,obStatus(a1)
0000A08A 6700                       		beq.s	@remstate
0000A08C 08A8 0000 0001             		bclr	#0,obRender(a0)
0000A092 3029 0008                  		move.w	obX(a1),d0
0000A096 9068 0008                  		sub.w	obX(a0),d0
0000A09A 6400                       		bcc.s	@remstate
0000A09C 08E8 0000 0001             		bset	#0,obRender(a0)
0000A0A2                            
0000A0A2                            	@remstate:
0000A0A2 6000 0000                  		bra.w	RememberState
0000A0A6                            ; ===========================================================================
0000A0A6                            
0000A0A6                            CFlo_Collapse:	; Routine 4
0000A0A6 4A28 0038                  		tst.b	cflo_timedelay(a0)
0000A0AA 6700 0000                  		beq.w	loc_8458
0000A0AE 117C 0001 003A             		move.b	#1,cflo_collapse_flag(a0)	; set object as	"touched"
0000A0B4 5328 0038                  		subq.b	#1,cflo_timedelay(a0)
0000A0B8                            
0000A0B8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000A0B8                            
0000A0B8                            
0000A0B8                            CFlo_WalkOff:	; Routine $A
0000A0B8 323C 0020                  		move.w	#$20,d1
0000A0BC 6100 F1EC                  		bsr.w	ExitPlatform
0000A0C0 3428 0008                  		move.w	obX(a0),d2
0000A0C4 6100 F74E                  		bsr.w	MvSonicOnPtfm2
0000A0C8 6000 0000                  		bra.w	RememberState
0000A0CC                            ; End of function CFlo_WalkOff
0000A0CC                            
0000A0CC                            ; ===========================================================================
0000A0CC                            
0000A0CC                            CFlo_Display:	; Routine 6
0000A0CC 4A28 0038                  		tst.b	cflo_timedelay(a0)	; has time delay reached zero?
0000A0D0 6700                       		beq.s	CFlo_TimeZero	; if yes, branch
0000A0D2 4A28 003A                  		tst.b	cflo_collapse_flag(a0)	; has Sonic touched the	object?
0000A0D6 6600 0000                  		bne.w	loc_8402	; if yes, branch
0000A0DA 5328 0038                  		subq.b	#1,cflo_timedelay(a0); subtract 1 from time
0000A0DE 6000 0000                  		bra.w	DisplaySprite
0000A0E2                            ; ===========================================================================
0000A0E2                            
0000A0E2                            loc_8402:
0000A0E2 5328 0038                  		subq.b	#1,cflo_timedelay(a0)
0000A0E6 6100 FFD0                  		bsr.w	CFlo_WalkOff
0000A0EA 43F8 D000                  		lea	(v_player).w,a1
0000A0EE 0829 0003 0022             		btst	#3,obStatus(a1)
0000A0F4 6700                       		beq.s	loc_842E
0000A0F6 4A28 0038                  		tst.b	cflo_timedelay(a0)
0000A0FA 6600                       		bne.s	locret_843A
0000A0FC 08A9 0003 0022             		bclr	#3,obStatus(a1)
0000A102 08A9 0005 0022             		bclr	#5,obStatus(a1)
0000A108 137C 0001 001D             		move.b	#1,obNextAni(a1)
0000A10E                            
0000A10E                            loc_842E:
0000A10E 117C 0000 003A             		move.b	#0,cflo_collapse_flag(a0)
0000A114 117C 0006 0024             		move.b	#6,obRoutine(a0) ; run "CFlo_Display" routine
0000A11A                            
0000A11A                            locret_843A:
0000A11A 4E75                       		rts	
0000A11C                            ; ===========================================================================
0000A11C                            
0000A11C                            CFlo_TimeZero:
0000A11C 6100 0000                  		bsr.w	ObjectFall
0000A120 6100 0000                  		bsr.w	DisplaySprite
0000A124 4A28 0001                  		tst.b	obRender(a0)
0000A128 6A00                       		bpl.s	CFlo_Delete
0000A12A 4E75                       		rts	
0000A12C                            ; ===========================================================================
0000A12C                            
0000A12C                            CFlo_Delete:	; Routine 8
0000A12C 6100 0000                  		bsr.w	DeleteObject
0000A130 4E75                       		rts	
0000A132                            ; ===========================================================================
0000A132                            
0000A132                            CFlo_Fragment:
0000A132 117C 0000 003A             		move.b	#0,cflo_collapse_flag(a0)
0000A138                            
0000A138                            loc_8458:
0000A138 49F9 0000 0000             		lea	(CFlo_Data2).l,a4
0000A13E 0828 0000 0028             		btst	#0,obSubtype(a0)
0000A144 6700                       		beq.s	loc_846C
0000A146 49F9 0000 0000             		lea	(CFlo_Data3).l,a4
0000A14C                            
0000A14C                            loc_846C:
0000A14C 7207                       		moveq	#7,d1
0000A14E 5228 001A                  		addq.b	#1,obFrame(a0)
0000A152 6000                       		bra.s	loc_8486
0000A152 6000                       		bra.s	loc_8486
0000A154                            
0000A154                            ; ===========================================================================
0000A154                            
0000A154                            Ledge_Fragment:
0000A154 117C 0000 003A             		move.b	#0,ledge_collapse_flag(a0)
0000A15A                            
0000A15A                            loc_847A:
0000A15A 49F9 0000 0000             		lea	(CFlo_Data1).l,a4
0000A160 7218                       		moveq	#$18,d1
0000A162 5428 001A                  		addq.b	#2,obFrame(a0)
0000A166                            
0000A166                            loc_8486:
0000A166 7000                       		moveq	#0,d0
0000A168 1028 001A                  		move.b	obFrame(a0),d0
0000A16C D040                       		add.w	d0,d0
0000A16E 2668 0004                  		movea.l	obMap(a0),a3
0000A172 D6F3 0000                  		adda.w	(a3,d0.w),a3
0000A176 524B                       		addq.w	#1,a3
0000A178 08E8 0005 0001             		bset	#5,obRender(a0)
0000A17E 1810                       		move.b	0(a0),d4
0000A180 1A28 0001                  		move.b	obRender(a0),d5
0000A184 2248                       		movea.l	a0,a1
0000A186 137C 0006 0024             		move.b	#6,obRoutine(a1)
0000A18C 1284                       		move.b	d4,0(a1)
0000A18E 234B 0004                  		move.l	a3,obMap(a1)
0000A192 1345 0001                  		move.b	d5,obRender(a1)
0000A196 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000A19C 3368 000C 000C             		move.w	obY(a0),obY(a1)
0000A1A2 3368 0002 0002             		move.w	obGfx(a0),obGfx(a1)
0000A1A8 3368 0018 0018             		move.w	obPriority(a0),obPriority(a1)
0000A1AE 1368 0014 0014             		move.b	obActWid(a0),obActWid(a1)
0000A1B4 135C 0038                  		move.b	(a4)+,ledge_timedelay(a1)
0000A1B8 5341                       		subq.w	#1,d1
0000A1BA 43F8 D800                  		lea		(v_lvlobjspace).w,a1
0000A1BE 303C 005F                  		move.w	#$5F,d0
0000A1C2                            ; ===========================================================================
0000A1C2                            
0000A1C2                            loc_84AA:
0000A1C2 4A11                       		tst.b	(a1)
0000A1C4 6700                       		beq.s	@cont		
0000A1C6 43E9 0040                  		lea		$40(a1),a1
0000A1CA 51C8 FFF6                  		dbf		d0,loc_84AA	
0000A1CE 6600                       		bne.s	loc_84F2	
0000A1D0                            	@cont:
0000A1D0 5A4B                       		addq.w	#5,a3
0000A1D2                            
0000A1D2                            loc_84B2:
0000A1D2 137C 0006 0024             		move.b	#6,obRoutine(a1)
0000A1D8 1284                       		move.b	d4,0(a1)
0000A1DA 234B 0004                  		move.l	a3,obMap(a1)
0000A1DE 1345 0001                  		move.b	d5,obRender(a1)
0000A1E2 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000A1E8 3368 000C 000C             		move.w	obY(a0),obY(a1)
0000A1EE 3368 0002 0002             		move.w	obGfx(a0),obGfx(a1)
0000A1F4 3368 0018 0018             		move.w	obPriority(a0),obPriority(a1)
0000A1FA 1368 0014 0014             		move.b	obActWid(a0),obActWid(a1)
0000A200 135C 0038                  		move.b	(a4)+,ledge_timedelay(a1)
0000A204 6100 0000                  		bsr.w	DisplaySprite1
0000A208                            
0000A208                            loc_84EE:
0000A208 51C9 FFB8                  		dbf	d1,loc_84AA
0000A20C                            
0000A20C                            loc_84F2:
0000A20C 6100 0000                  		bsr.w	DisplaySprite
0000A21A                            ; ===========================================================================
0000A21A                            ; ---------------------------------------------------------------------------
0000A21A                            ; Disintegration data for collapsing ledges (MZ, SLZ, SBZ)
0000A21A                            ; ---------------------------------------------------------------------------
0000A21A 1C18 1410 1A16 120E 0A06+  CFlo_Data1:	dc.b $1C, $18, $14, $10, $1A, $16, $12,	$E, $A,	6, $18,	$14, $10, $C, 8, 4
0000A22A 1612 0E0A 0602 1410 0C00   		dc.b $16, $12, $E, $A, 6, 2, $14, $10, $C, 0
0000A234 1E16 0E06 1A12 0A02        CFlo_Data2:	dc.b $1E, $16, $E, 6, $1A, $12,	$A, 2
0000A23C 161E 1A12 060E 0A02        CFlo_Data3:	dc.b $16, $1E, $1A, $12, 6, $E,	$A, 2
0000A244                            
0000A244                            ; ---------------------------------------------------------------------------
0000A244                            ; Sloped platform subroutine (GHZ collapsing ledges and	MZ platforms)
0000A244                            ; ---------------------------------------------------------------------------
0000A244                            
0000A244                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000A244                            
0000A244                            
0000A244                            SlopeObject2:
0000A244 43F8 D000                  		lea	(v_player).w,a1
0000A248 0829 0003 0022             		btst	#3,obStatus(a1)
0000A24E 6700                       		beq.s	locret_856E
0000A250 3029 0008                  		move.w	obX(a1),d0
0000A254 9068 0008                  		sub.w	obX(a0),d0
0000A258 D041                       		add.w	d1,d0
0000A25A E248                       		lsr.w	#1,d0
0000A25C 0828 0000 0001             		btst	#0,obRender(a0)
0000A262 6700                       		beq.s	loc_854E
0000A264 4640                       		not.w	d0
0000A266 D041                       		add.w	d1,d0
0000A268                            
0000A268                            loc_854E:
0000A268 7200                       		moveq	#0,d1
0000A26A 1232 0000                  		move.b	(a2,d0.w),d1
0000A26E 3028 000C                  		move.w	obY(a0),d0
0000A272 9041                       		sub.w	d1,d0
0000A274 7200                       		moveq	#0,d1
0000A276 1229 0016                  		move.b	obHeight(a1),d1
0000A27A 9041                       		sub.w	d1,d0
0000A27C 3340 000C                  		move.w	d0,obY(a1)
0000A280 9468 0008                  		sub.w	obX(a0),d2
0000A284 9569 0008                  		sub.w	d2,obX(a1)
0000A288                            
0000A288                            locret_856E:
0000A288 4E75                       		rts	
0000A28A                            ; End of function SlopeObject2
0000A28A                            
0000A28A                            ; ===========================================================================
0000A28A                            ; ---------------------------------------------------------------------------
0000A28A                            ; Collision data for GHZ collapsing ledge
0000A28A                            ; ---------------------------------------------------------------------------
0000A28A                            Ledge_SlopeData:
0000A28A                            		incbin	"misc\GHZ Collapsing Ledge Heightmap.bin"
0000A2BA                            		even
0000A2BA                            
0000A2BA                            Map_Ledge:	include	"_maps\Collapsing Ledge.asm"
0000A2BA                            ; ---------------------------------------------------------------------------
0000A2BA                            ; Sprite mappings - GHZ	collapsing ledge
0000A2BA                            ; ---------------------------------------------------------------------------
0000A2BA                            Map_Ledge_internal:
0000A2BA 0000                       		dc.w @left-Map_Ledge_internal
0000A2BC 0000                       		dc.w @right-Map_Ledge_internal
0000A2BE 0000                       		dc.w @leftsmash-Map_Ledge_internal
0000A2C0 0000                       		dc.w @rightsmash-Map_Ledge_internal
0000A2C2 10                         @left:		dc.b $10
0000A2C3 C80E 0057 10               		dc.b $C8, $E, 0, $57, $10 ; ledge facing left
0000A2C8 D00D 0063 F0               		dc.b $D0, $D, 0, $63, $F0
0000A2CD E00D 006B 10               		dc.b $E0, $D, 0, $6B, $10
0000A2D2 E00D 0073 F0               		dc.b $E0, $D, 0, $73, $F0
0000A2D7 D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
0000A2DC D806 0081 D0               		dc.b $D8, 6, 0,	$81, $D0
0000A2E1 F00D 0087 10               		dc.b $F0, $D, 0, $87, $10
0000A2E6 F00D 008F F0               		dc.b $F0, $D, 0, $8F, $F0
0000A2EB F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
0000A2F0 F005 009B D0               		dc.b $F0, 5, 0,	$9B, $D0
0000A2F5 000D 009F 10               		dc.b 0,	$D, 0, $9F, $10
0000A2FA 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
0000A2FF 000D 00AB E0               		dc.b 0,	$D, 0, $AB, $E0
0000A304 0005 00B3 D0               		dc.b 0,	5, 0, $B3, $D0
0000A309 100D 00AB 10               		dc.b $10, $D, 0, $AB, $10
0000A30E 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
0000A313 10                         @right:		dc.b $10
0000A314 C80E 0057 10               		dc.b $C8, $E, 0, $57, $10 ; ledge facing right
0000A319 D00D 0063 F0               		dc.b $D0, $D, 0, $63, $F0
0000A31E E00D 006B 10               		dc.b $E0, $D, 0, $6B, $10
0000A323 E00D 0073 F0               		dc.b $E0, $D, 0, $73, $F0
0000A328 D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
0000A32D D806 00BB D0               		dc.b $D8, 6, 0,	$BB, $D0
0000A332 F00D 0087 10               		dc.b $F0, $D, 0, $87, $10
0000A337 F00D 008F F0               		dc.b $F0, $D, 0, $8F, $F0
0000A33C F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
0000A341 F005 00C1 D0               		dc.b $F0, 5, 0,	$C1, $D0
0000A346 000D 009F 10               		dc.b 0,	$D, 0, $9F, $10
0000A34B 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
0000A350 000D 00AB E0               		dc.b 0,	$D, 0, $AB, $E0
0000A355 0005 00B7 D0               		dc.b 0,	5, 0, $B7, $D0
0000A35A 100D 00AB 10               		dc.b $10, $D, 0, $AB, $10
0000A35F 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
0000A364 19                         @leftsmash:	dc.b $19
0000A365 C806 005D 20               		dc.b $C8, 6, 0,	$5D, $20 ; ledge facing	left in	pieces
0000A36A C806 0057 10               		dc.b $C8, 6, 0,	$57, $10
0000A36F D005 0067 00               		dc.b $D0, 5, 0,	$67, 0
0000A374 D005 0063 F0               		dc.b $D0, 5, 0,	$63, $F0
0000A379 E005 006F 20               		dc.b $E0, 5, 0,	$6F, $20
0000A37E E005 006B 10               		dc.b $E0, 5, 0,	$6B, $10
0000A383 E005 0077 00               		dc.b $E0, 5, 0,	$77, 0
0000A388 E005 0073 F0               		dc.b $E0, 5, 0,	$73, $F0
0000A38D D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
0000A392 D806 0081 D0               		dc.b $D8, 6, 0,	$81, $D0
0000A397 F005 008B 20               		dc.b $F0, 5, 0,	$8B, $20
0000A39C F005 0087 10               		dc.b $F0, 5, 0,	$87, $10
0000A3A1 F005 0093 00               		dc.b $F0, 5, 0,	$93, 0
0000A3A6 F005 008F F0               		dc.b $F0, 5, 0,	$8F, $F0
0000A3AB F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
0000A3B0 F005 009B D0               		dc.b $F0, 5, 0,	$9B, $D0
0000A3B5 0005 008B 20               		dc.b 0,	5, 0, $8B, $20
0000A3BA 0005 008B 10               		dc.b 0,	5, 0, $8B, $10
0000A3BF 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
0000A3C4 0005 00AB F0               		dc.b 0,	5, 0, $AB, $F0
0000A3C9 0005 00AB E0               		dc.b 0,	5, 0, $AB, $E0
0000A3CE 0005 00B3 D0               		dc.b 0,	5, 0, $B3, $D0
0000A3D3 1005 00AB 20               		dc.b $10, 5, 0,	$AB, $20
0000A3D8 1005 00AB 10               		dc.b $10, 5, 0,	$AB, $10
0000A3DD 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
0000A3E2 19                         @rightsmash:	dc.b $19
0000A3E3 C806 005D 20               		dc.b $C8, 6, 0,	$5D, $20 ; ledge facing	right in pieces
0000A3E8 C806 0057 10               		dc.b $C8, 6, 0,	$57, $10
0000A3ED D005 0067 00               		dc.b $D0, 5, 0,	$67, 0
0000A3F2 D005 0063 F0               		dc.b $D0, 5, 0,	$63, $F0
0000A3F7 E005 006F 20               		dc.b $E0, 5, 0,	$6F, $20
0000A3FC E005 006B 10               		dc.b $E0, 5, 0,	$6B, $10
0000A401 E005 0077 00               		dc.b $E0, 5, 0,	$77, 0
0000A406 E005 0073 F0               		dc.b $E0, 5, 0,	$73, $F0
0000A40B D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
0000A410 D806 00BB D0               		dc.b $D8, 6, 0,	$BB, $D0
0000A415 F005 008B 20               		dc.b $F0, 5, 0,	$8B, $20
0000A41A F005 0087 10               		dc.b $F0, 5, 0,	$87, $10
0000A41F F005 0093 00               		dc.b $F0, 5, 0,	$93, 0
0000A424 F005 008F F0               		dc.b $F0, 5, 0,	$8F, $F0
0000A429 F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
0000A42E F005 00C1 D0               		dc.b $F0, 5, 0,	$C1, $D0
0000A433 0005 008B 20               		dc.b 0,	5, 0, $8B, $20
0000A438 0005 008B 10               		dc.b 0,	5, 0, $8B, $10
0000A43D 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
0000A442 0005 00AB F0               		dc.b 0,	5, 0, $AB, $F0
0000A447 0005 00AB E0               		dc.b 0,	5, 0, $AB, $E0
0000A44C 0005 00B7 D0               		dc.b 0,	5, 0, $B7, $D0
0000A451 1005 00AB 20               		dc.b $10, 5, 0,	$AB, $20
0000A456 1005 00AB 10               		dc.b $10, 5, 0,	$AB, $10
0000A45B 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
0000A460                            		even
0000A460                            		even
0000A460                            Map_CFlo:	include	"_maps\Collapsing Floors.asm"
0000A460                            ; --------------------------------------------------------------------------------
0000A460                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0000A460                            ; --------------------------------------------------------------------------------
0000A460                            
0000A460                            SME_WNa9T:	
0000A460 0000 0000                  		dc.w SME_WNa9T_8-SME_WNa9T, SME_WNa9T_31-SME_WNa9T	
0000A464 0000 0000                  		dc.w SME_WNa9T_5A-SME_WNa9T, SME_WNa9T_6F-SME_WNa9T	
0000A468 08                         SME_WNa9T_8:	dc.b 8	
0000A469 F805 0000 E0               		dc.b $F8, 5, 0, 0, $E0	
0000A46E 0805 0004 E0               		dc.b 8, 5, 0, 4, $E0	
0000A473 F805 0000 F0               		dc.b $F8, 5, 0, 0, $F0	
0000A478 0805 0004 F0               		dc.b 8, 5, 0, 4, $F0	
0000A47D F805 0000 00               		dc.b $F8, 5, 0, 0, 0	
0000A482 0805 0004 00               		dc.b 8, 5, 0, 4, 0	
0000A487 F805 0000 10               		dc.b $F8, 5, 0, 0, $10	
0000A48C 0805 0004 10               		dc.b 8, 5, 0, 4, $10	
0000A491 08                         SME_WNa9T_31:	dc.b 8	
0000A492 F805 0000 E0               		dc.b $F8, 5, 0, 0, $E0	
0000A497 0805 0004 E0               		dc.b 8, 5, 0, 4, $E0	
0000A49C F805 0000 F0               		dc.b $F8, 5, 0, 0, $F0	
0000A4A1 0805 0004 F0               		dc.b 8, 5, 0, 4, $F0	
0000A4A6 F805 0000 00               		dc.b $F8, 5, 0, 0, 0	
0000A4AB 0805 0004 00               		dc.b 8, 5, 0, 4, 0	
0000A4B0 F805 0000 10               		dc.b $F8, 5, 0, 0, $10	
0000A4B5 0805 0004 10               		dc.b 8, 5, 0, 4, $10	
0000A4BA 04                         SME_WNa9T_5A:	dc.b 4	
0000A4BB F80D 0000 E0               		dc.b $F8, $D, 0, 0, $E0	
0000A4C0 080D 0008 E0               		dc.b 8, $D, 0, 8, $E0	
0000A4C5 F80D 0000 00               		dc.b $F8, $D, 0, 0, 0	
0000A4CA 080D 0008 00               		dc.b 8, $D, 0, 8, 0	
0000A4CF 08                         SME_WNa9T_6F:	dc.b 8	
0000A4D0 F805 0000 E0               		dc.b $F8, 5, 0, 0, $E0	
0000A4D5 F805 0004 F0               		dc.b $F8, 5, 0, 4, $F0	
0000A4DA F805 0000 00               		dc.b $F8, 5, 0, 0, 0	
0000A4DF F805 0004 10               		dc.b $F8, 5, 0, 4, $10	
0000A4E4 0805 0008 E0               		dc.b 8, 5, 0, 8, $E0	
0000A4E9 0805 000C F0               		dc.b 8, 5, 0, $C, $F0	
0000A4EE 0805 0008 00               		dc.b 8, 5, 0, 8, 0	
0000A4F3 0805 000C 10               		dc.b 8, 5, 0, $C, $10	
0000A4F8                            		even
0000A4F8                            		even
0000A4F8                            
0000A4F8                            		include	"_incObj\1C Scenery.asm"
0000A4F8                            ; ---------------------------------------------------------------------------
0000A4F8                            ; Object 1C - scenery (GHZ bridge stump, SLZ lava thrower)
0000A4F8                            ; ---------------------------------------------------------------------------
0000A4F8                            
0000A4F8                            Scenery:
0000A4F8 7000                       		moveq	#0,d0
0000A4FA 1028 0024                  		move.b	obRoutine(a0),d0
0000A4FE 323B 0000                  		move.w	Scen_Index(pc,d0.w),d1
0000A502 4EFB 1000                  		jmp	Scen_Index(pc,d1.w)
0000A506                            ; ===========================================================================
0000A506 0000                       Scen_Index:	dc.w Scen_Main-Scen_Index
0000A508 0000                       		dc.w Scen_ChkDel-Scen_Index
0000A50A                            ; ===========================================================================
0000A50A                            
0000A50A                            Scen_Main:	; Routine 0
0000A50A 5428 0024                  		addq.b	#2,obRoutine(a0)
0000A50E 7000                       		moveq	#0,d0
0000A510 1028 0028                  		move.b	obSubtype(a0),d0 ; copy object subtype to d0
0000A514 C0FC 000A                  		mulu.w	#$A,d0		; multiply by $A
0000A518 43FB 0000                  		lea	Scen_Values(pc,d0.w),a1
0000A51C 2159 0004                  		move.l	(a1)+,obMap(a0)
0000A520 3159 0002                  		move.w	(a1)+,obGfx(a0)
0000A524 0028 0004 0001             		ori.b	#4,obRender(a0)
0000A52A 1159 001A                  		move.b	(a1)+,obFrame(a0)
0000A52E 1159 0014                  		move.b	(a1)+,obActWid(a0)
0000A532 1159 0018                  		move.b	(a1)+,obPriority(a0)
0000A536 3028 0018                  		move.w obPriority(a0),d0 
0000A53A E248                       		lsr.w #1,d0 
0000A53C 0240 0380                  		andi.w #$380,d0 
0000A540 3140 0018                  		move.w d0,obPriority(a0)		
0000A544 1159 0020                  		move.b	(a1)+,obColType(a0)
0000A548                            
0000A548                            Scen_ChkDel:	; Routine 2
0000A566 6000 0000                  		bra.w	DisplaySprite
0000A56A                            ; ===========================================================================
0000A56A                            ; ---------------------------------------------------------------------------
0000A56A                            ; Variables for	object $1C are stored in an array
0000A56A                            ; ---------------------------------------------------------------------------
0000A56A 0000 0000                  Scen_Values:	dc.l Map_Scen		; mappings address
0000A56E 44D8                       		dc.w $44D8		; VRAM setting
0000A570 0008 0200                  		dc.b 0,	8, 2, 0		; frame, width,	priority, collision response
0000A574 0000 0000                  		dc.l Map_Scen
0000A578 44D8                       		dc.w $44D8
0000A57A 0008 0200                  		dc.b 0,	8, 2, 0
0000A57E 0000 0000                  		dc.l Map_Scen
0000A582 44D8                       		dc.w $44D8
0000A584 0008 0200                  		dc.b 0,	8, 2, 0
0000A588 0000 961E                  		dc.l Map_Bri
0000A58C 438E                       		dc.w $438E
0000A58E 0110 0100                  		dc.b 1,	$10, 1,	0
0000A592                            		even
0000A592                            		even
0000A592                            Map_Scen:	include	"_maps\Scenery.asm"
0000A592                            ; ---------------------------------------------------------------------------
0000A592                            ; Sprite mappings - SLZ	lava thrower
0000A592                            ; ---------------------------------------------------------------------------
0000A592                            Map_Scen_internal:
0000A592 0000                       		dc.w byte_8858-Map_Scen_internal
0000A594 01                         byte_8858:	dc.b 1
0000A595 F007 0000 F8               		dc.b $F0, 7, 0,	0, $F8
0000A59A                            		even
0000A59A                            		even
0000A59A                            
0000A59A                            		include	"_incObj\1D Unused Switch.asm"
0000A59A                            ; ---------------------------------------------------------------------------
0000A59A                            ; Object 1D - switch that activates when Sonic touches it
0000A59A                            ; (this	is not used anywhere in	the game)
0000A59A                            ; ---------------------------------------------------------------------------
0000A59A                            
0000A59A                            MagicSwitch:
0000A59A 7000                       		moveq	#0,d0
0000A59C 1028 0024                  		move.b	obRoutine(a0),d0
0000A5A0 323B 0000                  		move.w	Swi_Index(pc,d0.w),d1
0000A5A4 4EFB 1000                  		jmp	Swi_Index(pc,d1.w)
0000A5A8                            ; ===========================================================================
0000A5A8 0000                       Swi_Index:	dc.w Swi_Main-Swi_Index
0000A5AA 0000                       		dc.w Swi_Action-Swi_Index
0000A5AC 0000                       		dc.w Swi_Delete-Swi_Index
0000A5AE                            
0000A5AE =00000030                  swi_origY:	equ $30		; original y-axis position
0000A5AE                            ; ===========================================================================
0000A5AE                            
0000A5AE                            Swi_Main:	; Routine 0
0000A5AE 5428 0024                  		addq.b	#2,obRoutine(a0)
0000A5B2 217C 0000 0000 0004        		move.l	#Map_Swi,obMap(a0)
0000A5BA 317C 4000 0002             		move.w	#$4000,obGfx(a0)
0000A5C0 117C 0004 0001             		move.b	#4,obRender(a0)
0000A5C6 3168 000C 0030             		move.w	obY(a0),swi_origY(a0) ; save position on y-axis
0000A5CC 117C 0010 0014             		move.b	#$10,obActWid(a0)
0000A5D2 317C 0280 0018             		move.w	#$280,obPriority(a0)
0000A5D8                            
0000A5D8                            Swi_Action:	; Routine 2
0000A5D8 3168 0030 000C             		move.w	swi_origY(a0),obY(a0) ; restore position on y-axis
0000A5DE 323C 0010                  		move.w	#$10,d1
0000A5E2 6100 0000                  		bsr.w	Swi_ChkTouch	; check if Sonic touches the switch
0000A5E6 6700                       		beq.s	Swi_ChkDel	; if not, branch
0000A5E8                            
0000A5E8 5468 000C                  		addq.w	#2,obY(a0)	; move object 2	pixels
0000A5EC 7001                       		moveq	#1,d0
0000A5EE 31C0 F7E0                  		move.w	d0,(f_switch).w	; set switch 0 as "pressed"
0000A5F2                            
0000A5F2                            Swi_ChkDel:
0000A5F2 6100 0000                  		bsr.w	DisplaySprite
0000A614 4E75                       		rts	
0000A616                            ; ===========================================================================
0000A616                            
0000A616                            Swi_Delete:	; Routine 4
0000A616 6100 0000                  		bsr.w	DeleteObject
0000A61A 4E75                       		rts	
0000A61C                            
0000A61C                            ; ---------------------------------------------------------------------------
0000A61C                            ; Subroutine to	check if Sonic touches the object
0000A61C                            ; ---------------------------------------------------------------------------
0000A61C                            
0000A61C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000A61C                            
0000A61C                            
0000A61C                            Swi_ChkTouch:
0000A61C 43F8 D000                  		lea	(v_player).w,a1
0000A620 3029 0008                  		move.w	obX(a1),d0
0000A624 9068 0008                  		sub.w	obX(a0),d0
0000A628 D041                       		add.w	d1,d0
0000A62A 6B00                       		bmi.s	Swi_NoTouch
0000A62C D241                       		add.w	d1,d1
0000A62E B041                       		cmp.w	d1,d0
0000A630 6400                       		bcc.s	Swi_NoTouch
0000A632 3429 000C                  		move.w	obY(a1),d2
0000A636 1229 0016                  		move.b	obHeight(a1),d1
0000A63A 4881                       		ext.w	d1
0000A63C D242                       		add.w	d2,d1
0000A63E 3028 000C                  		move.w	obY(a0),d0
0000A642 0440 0010                  		subi.w	#$10,d0
0000A646 9041                       		sub.w	d1,d0
0000A648 6200                       		bhi.s	Swi_NoTouch
0000A64A 0C40 FFF0                  		cmpi.w	#-$10,d0
0000A64E 6500                       		bcs.s	Swi_NoTouch
0000A650 70FF                       		moveq	#-1,d0		; Sonic has touched it
0000A652 4E75                       		rts	
0000A654                            ; ===========================================================================
0000A654                            
0000A654                            Swi_NoTouch:
0000A654 7000                       		moveq	#0,d0		; Sonic hasn't touched it
0000A656 4E75                       		rts	
0000A658                            ; End of function Swi_ChkTouch
0000A658                            ; End of function Swi_ChkTouch
0000A658                            Map_Swi:	include	"_maps\Unused Switch.asm"
0000A658                            ; ---------------------------------------------------------------------------
0000A658                            ; Sprite mappings - Unused switch thingy
0000A658                            ; ---------------------------------------------------------------------------
0000A658                            Map_Swi_internal:
0000A658 0000                       		dc.w byte_891E-Map_Swi_internal
0000A65A 04                         byte_891E:	dc.b 4
0000A65B E807 0054 F0               		dc.b $E8, 7, 0,	$54, $F0
0000A660 0805 005C F0               		dc.b 8,	5, 0, $5C, $F0
0000A665 E807 0054 00               		dc.b $E8, 7, 0,	$54, 0
0000A66A 0805 005C 00               		dc.b 8,	5, 0, $5C, 0
0000A670 00                         		even
0000A670 00                         		even
0000A670                            
0000A670                            		include	"_incObj\2A SBZ Small Door.asm"
0000A670                            ; ---------------------------------------------------------------------------
0000A670                            ; Object 2A - small vertical door (SBZ)
0000A670                            ; ---------------------------------------------------------------------------
0000A670                            
0000A670                            AutoDoor:
0000A670 7000                       		moveq	#0,d0
0000A672 1028 0024                  		move.b	obRoutine(a0),d0
0000A676 323B 0000                  		move.w	ADoor_Index(pc,d0.w),d1
0000A67A 4EFB 1000                  		jmp	ADoor_Index(pc,d1.w)
0000A67E                            ; ===========================================================================
0000A67E 0000                       ADoor_Index:	dc.w ADoor_Main-ADoor_Index
0000A680 0000                       		dc.w ADoor_OpenShut-ADoor_Index
0000A682                            ; ===========================================================================
0000A682                            
0000A682                            ADoor_Main:	; Routine 0
0000A682 5428 0024                  		addq.b	#2,obRoutine(a0)
0000A686 217C 0000 0000 0004        		move.l	#Map_ADoor,obMap(a0)
0000A68E 317C 42EA 0002             		move.w	#$42EA,obGfx(a0)
0000A694 0028 0004 0001             		ori.b	#4,obRender(a0)
0000A69A 117C 0008 0014             		move.b	#8,obActWid(a0)
0000A6A0                            		;move.b	#4,obPriority(a0)
0000A6A0                            
0000A6A0                            ADoor_OpenShut:	; Routine 2
0000A6A0 323C 0040                  		move.w	#$40,d1		; set range for door detection
0000A6A4 4228 001C                  		clr.b	obAnim(a0)	; use "closing"	animation
0000A6A8 3038 D008                  		move.w	(v_player+obX).w,d0
0000A6AC D041                       		add.w	d1,d0
0000A6AE B068 0008                  		cmp.w	obX(a0),d0
0000A6B2 6500                       		bcs.s	ADoor_Animate
0000A6B4 9041                       		sub.w	d1,d0
0000A6B6 9041                       		sub.w	d1,d0
0000A6B8 B068 0008                  		cmp.w	obX(a0),d0	; is Sonic > $40 pixels from door?
0000A6BC 6400                       		bcc.s	ADoor_Animate	; close door
0000A6BE D041                       		add.w	d1,d0
0000A6C0 B068 0008                  		cmp.w	obX(a0),d0	; is Sonic left of the door?
0000A6C4 6400                       		bcc.s	loc_899A	; if yes, branch
0000A6C6 0828 0000 0022             		btst	#0,obStatus(a0)
0000A6CC 6600                       		bne.s	ADoor_Animate
0000A6CE 6000                       		bra.s	ADoor_Open
0000A6D0                            ; ===========================================================================
0000A6D0                            
0000A6D0                            loc_899A:
0000A6D0 0828 0000 0022             		btst	#0,obStatus(a0)
0000A6D6 6700                       		beq.s	ADoor_Animate
0000A6D8                            
0000A6D8                            ADoor_Open:
0000A6D8 117C 0001 001C             		move.b	#1,obAnim(a0)	; use "opening"	animation
0000A6DE                            
0000A6DE                            ADoor_Animate:
0000A6DE 43F9 0000 0000             		lea	(Ani_ADoor).l,a1
0000A6E4 6100 0000                  		bsr.w	AnimateSprite
0000A6E8 4A28 001A                  		tst.b	obFrame(a0)	; is the door open?
0000A6EC 6600                       		bne.s	@remember	; if yes, branch
0000A6EE 323C 0011                  		move.w	#$11,d1
0000A6F2 343C 0020                  		move.w	#$20,d2
0000A6F6 3602                       		move.w	d2,d3
0000A6F8 5243                       		addq.w	#1,d3
0000A6FA 3828 0008                  		move.w	obX(a0),d4
0000A6FE 6100 0000                  		bsr.w	SolidObject
0000A702                            
0000A702                            	@remember:
0000A702 6000 0000                  		bra.w	RememberState
0000A702 6000 0000                  		bra.w	RememberState
0000A706                            		include	"_anim\SBZ Small Door.asm"
0000A706                            ; ---------------------------------------------------------------------------
0000A706                            ; Animation script - doors (SBZ)
0000A706                            ; ---------------------------------------------------------------------------
0000A706 0000                       Ani_ADoor:	dc.w @close-Ani_ADoor
0000A708 0000                       		dc.w @open-Ani_ADoor
0000A70A 0008 0706 0504 0302 0100+  @close:		dc.b 0,	8, 7, 6, 5, 4, 3, 2, 1,	0, afBack, 1
0000A716 0000 0102 0304 0506 0708+  @open:		dc.b 0,	0, 1, 2, 3, 4, 5, 6, 7,	8, afBack, 1
0000A722                            		even
0000A722                            		even
0000A722                            Map_ADoor:	include	"_maps\SBZ Small Door.asm"
0000A722                            ; --------------------------------------------------------------------------------
0000A722                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0000A722                            ; --------------------------------------------------------------------------------
0000A722                            
0000A722                            SME_YnmwF:	
0000A722 0000 0000                  		dc.w SME_YnmwF_12-SME_YnmwF, SME_YnmwF_1D-SME_YnmwF	
0000A726 0000 0000                  		dc.w SME_YnmwF_28-SME_YnmwF, SME_YnmwF_33-SME_YnmwF	
0000A72A 0000 0000                  		dc.w SME_YnmwF_3E-SME_YnmwF, SME_YnmwF_49-SME_YnmwF	
0000A72E 0000 0000                  		dc.w SME_YnmwF_54-SME_YnmwF, SME_YnmwF_5F-SME_YnmwF	
0000A732 0000                       		dc.w SME_YnmwF_6A-SME_YnmwF	
0000A734 02                         SME_YnmwF_12:	dc.b 2	
0000A735 E007 0800 F8               		dc.b $E0, 7, 8, 0, $F8	
0000A73A 0007 0800 F8               		dc.b 0, 7, 8, 0, $F8	
0000A73F 02                         SME_YnmwF_1D:	dc.b 2	
0000A740 DC07 0800 F8               		dc.b $DC, 7, 8, 0, $F8	
0000A745 0407 0800 F8               		dc.b 4, 7, 8, 0, $F8	
0000A74A 02                         SME_YnmwF_28:	dc.b 2	
0000A74B D807 0800 F8               		dc.b $D8, 7, 8, 0, $F8	
0000A750 0807 0800 F8               		dc.b 8, 7, 8, 0, $F8	
0000A755 02                         SME_YnmwF_33:	dc.b 2	
0000A756 D407 0800 F8               		dc.b $D4, 7, 8, 0, $F8	
0000A75B 0C07 0800 F8               		dc.b $C, 7, 8, 0, $F8	
0000A760 02                         SME_YnmwF_3E:	dc.b 2	
0000A761 D007 0800 F8               		dc.b $D0, 7, 8, 0, $F8	
0000A766 1007 0800 F8               		dc.b $10, 7, 8, 0, $F8	
0000A76B 02                         SME_YnmwF_49:	dc.b 2	
0000A76C CC07 0800 F8               		dc.b $CC, 7, 8, 0, $F8	
0000A771 1407 0800 F8               		dc.b $14, 7, 8, 0, $F8	
0000A776 02                         SME_YnmwF_54:	dc.b 2	
0000A777 C807 0800 F8               		dc.b $C8, 7, 8, 0, $F8	
0000A77C 1807 0800 F8               		dc.b $18, 7, 8, 0, $F8	
0000A781 02                         SME_YnmwF_5F:	dc.b 2	
0000A782 C407 0800 F8               		dc.b $C4, 7, 8, 0, $F8	
0000A787 1C07 0800 F8               		dc.b $1C, 7, 8, 0, $F8	
0000A78C 02                         SME_YnmwF_6A:	dc.b 2	
0000A78D C007 0800 F8               		dc.b $C0, 7, 8, 0, $F8	
0000A792 2007 0800 F8               		dc.b $20, 7, 8, 0, $F8	
0000A798 00                         		even
0000A798 00                         		even
0000A798                            
0000A798                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000A798                            
0000A798                            
0000A798                            Obj44_SolidWall:
0000A798 6100 0000                  		bsr.w	Obj44_SolidWall2
0000A79C 6700                       		beq.s	loc_8AA8
0000A79E 6B00 0000                  		bmi.w	loc_8AC4
0000A7A2 4A40                       		tst.w	d0
0000A7A4 6700 0000                  		beq.w	loc_8A92
0000A7A8 6B00                       		bmi.s	loc_8A7C
0000A7AA 4A69 0010                  		tst.w	obVelX(a1)
0000A7AE 6B00                       		bmi.s	loc_8A92
0000A7B0 6000                       		bra.s	loc_8A82
0000A7B2                            ; ===========================================================================
0000A7B2                            
0000A7B2                            loc_8A7C:
0000A7B2 4A69 0010                  		tst.w	obVelX(a1)
0000A7B6 6A00                       		bpl.s	loc_8A92
0000A7B8                            
0000A7B8                            loc_8A82:
0000A7B8 9169 0008                  		sub.w	d0,obX(a1)
0000A7BC 337C 0000 0020             		move.w	#0,obInertia(a1)
0000A7C2 337C 0000 0010             		move.w	#0,obVelX(a1)
0000A7C8                            
0000A7C8                            loc_8A92:
0000A7C8 0829 0001 0022             		btst	#1,obStatus(a1)
0000A7CE 6600                       		bne.s	loc_8AB6
0000A7D0 08E9 0005 0022             		bset	#5,obStatus(a1)
0000A7D6 08E8 0005 0022             		bset	#5,obStatus(a0)
0000A7DC 4E75                       		rts	
0000A7DE                            ; ===========================================================================
0000A7DE                            
0000A7DE                            loc_8AA8:
0000A7DE 0828 0005 0022             		btst	#5,obStatus(a0)
0000A7E4 6700                       		beq.s	locret_8AC2
0000A7E6 337C 0000 001C             		move.w	#id_Run,obAnim(a1)
0000A7EC                            
0000A7EC                            loc_8AB6:
0000A7EC 08A8 0005 0022             		bclr	#5,obStatus(a0)
0000A7F2 08A9 0005 0022             		bclr	#5,obStatus(a1)
0000A7F8                            
0000A7F8                            locret_8AC2:
0000A7F8 4E75                       		rts	
0000A7FA                            ; ===========================================================================
0000A7FA                            
0000A7FA                            loc_8AC4:
0000A7FA 4A69 0012                  		tst.w	obVelY(a1)
0000A7FE 6A00                       		bpl.s	locret_8AD8
0000A800 4A43                       		tst.w	d3
0000A802 6A00                       		bpl.s	locret_8AD8
0000A804 9769 000C                  		sub.w	d3,obY(a1)
0000A808 337C 0000 0012             		move.w	#0,obVelY(a1)
0000A80E                            
0000A80E                            locret_8AD8:
0000A80E 4E75                       		rts	
0000A810                            ; End of function Obj44_SolidWall
0000A810                            
0000A810                            
0000A810                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000A810                            
0000A810                            
0000A810                            Obj44_SolidWall2:
0000A810 43F8 D000                  		lea	(v_player).w,a1
0000A814 3029 0008                  		move.w	obX(a1),d0
0000A818 9068 0008                  		sub.w	obX(a0),d0
0000A81C D041                       		add.w	d1,d0
0000A81E 6B00                       		bmi.s	loc_8B48
0000A820 3601                       		move.w	d1,d3
0000A822 D643                       		add.w	d3,d3
0000A824 B043                       		cmp.w	d3,d0
0000A826 6200                       		bhi.s	loc_8B48
0000A828 1629 0016                  		move.b	obHeight(a1),d3
0000A82C 4883                       		ext.w	d3
0000A82E D443                       		add.w	d3,d2
0000A830 3629 000C                  		move.w	obY(a1),d3
0000A834 9668 000C                  		sub.w	obY(a0),d3
0000A838 D642                       		add.w	d2,d3
0000A83A 6B00                       		bmi.s	loc_8B48
0000A83C 3802                       		move.w	d2,d4
0000A83E D844                       		add.w	d4,d4
0000A840 B644                       		cmp.w	d4,d3
0000A842 6400                       		bhs.s	loc_8B48
0000A844 4A38 F7C8                  		tst.b	(f_lockmulti).w
0000A848 6B00                       		bmi.s	loc_8B48
0000A84A 0C38 0006 D024             		cmpi.b	#6,(v_player+obRoutine).w
0000A850 6400                       		bhs.s	loc_8B48
0000A852 4A78 FE08                  		tst.w	(v_debuguse).w
0000A856 6600                       		bne.s	loc_8B48
0000A858 3A00                       		move.w	d0,d5
0000A85A B240                       		cmp.w	d0,d1
0000A85C 6400                       		bhs.s	loc_8B30
0000A85E D241                       		add.w	d1,d1
0000A860 9041                       		sub.w	d1,d0
0000A862 3A00                       		move.w	d0,d5
0000A864 4445                       		neg.w	d5
0000A866                            
0000A866                            loc_8B30:
0000A866 3203                       		move.w	d3,d1
0000A868 B443                       		cmp.w	d3,d2
0000A86A 6400                       		bhs.s	loc_8B3C
0000A86C 9644                       		sub.w	d4,d3
0000A86E 3203                       		move.w	d3,d1
0000A870 4441                       		neg.w	d1
0000A872                            
0000A872                            loc_8B3C:
0000A872 BA41                       		cmp.w	d1,d5
0000A874 6200                       		bhi.s	loc_8B44
0000A876 7801                       		moveq	#1,d4
0000A878 4E75                       		rts	
0000A87A                            ; ===========================================================================
0000A87A                            
0000A87A                            loc_8B44:
0000A87A 78FF                       		moveq	#-1,d4
0000A87C 4E75                       		rts	
0000A87E                            ; ===========================================================================
0000A87E                            
0000A87E                            loc_8B48:
0000A87E 7800                       		moveq	#0,d4
0000A880 4E75                       		rts	
0000A882                            ; End of function Obj44_SolidWall2
0000A882                            
0000A882                            ; ===========================================================================
0000A882                            
0000A882                            		include	"_incObj\1E Ball Hog.asm"
0000A882                            ; ---------------------------------------------------------------------------
0000A882                            ; Object 1E - Ball Hog enemy (SBZ)
0000A882                            ; ---------------------------------------------------------------------------
0000A882                            
0000A882                            BallHog:
0000A882 7000                       		moveq	#0,d0
0000A884 1028 0024                  		move.b	obRoutine(a0),d0
0000A888 323B 0000                  		move.w	Hog_Index(pc,d0.w),d1
0000A88C 4EFB 1000                  		jmp	Hog_Index(pc,d1.w)
0000A890                            ; ===========================================================================
0000A890 0000                       Hog_Index:	dc.w Hog_Main-Hog_Index
0000A892 0000                       		dc.w Hog_Action-Hog_Index
0000A894                            
0000A894 =00000032                  hog_launchflag:	equ $32		; 0 to launch a cannonball
0000A894                            ; ===========================================================================
0000A894                            
0000A894                            Hog_Main:	; Routine 0
0000A894 117C 0013 0016             		move.b	#$13,obHeight(a0)
0000A89A 117C 0008 0017             		move.b	#8,obWidth(a0)
0000A8A0 217C 0000 0000 0004        		move.l	#Map_Hog,obMap(a0)
0000A8A8 317C 0302 0002             		move.w	#$302,obGfx(a0)
0000A8AE 117C 0004 0001             		move.b	#4,obRender(a0)
0000A8B4 317C 0200 0018             		move.w	#$200,obPriority(a0)
0000A8BA 117C 0005 0020             		move.b	#5,obColType(a0)
0000A8C0 117C 000C 0014             		move.b	#$C,obActWid(a0)
0000A8C6 6100 0000                  		bsr.w	ObjectFall
0000A8CA 4EB9 0000 0000             		jsr	(ObjFloorDist).l	; find floor
0000A8D0 4A41                       		tst.w	d1
0000A8D2 6A00                       		bpl.s	@floornotfound
0000A8D4 D368 000C                  		add.w	d1,obY(a0)
0000A8D8 317C 0000 0012             		move.w	#0,obVelY(a0)
0000A8DE 5428 0024                  		addq.b	#2,obRoutine(a0)
0000A8E2                            
0000A8E2                            	@floornotfound:
0000A8E2 4E75                       		rts	
0000A8E4                            ; ===========================================================================
0000A8E4                            
0000A8E4                            Hog_Action:	; Routine 2
0000A8E4 43F9 0000 0000             		lea	(Ani_Hog).l,a1
0000A8EA 6100 0000                  		bsr.w	AnimateSprite
0000A8EE 0C28 0001 001A             		cmpi.b	#1,obFrame(a0)	; is final frame (01) displayed?
0000A8F4 6600                       		bne.s	@setlaunchflag	; if not, branch
0000A8F6 4A28 0032                  		tst.b	hog_launchflag(a0)	; is it	set to launch cannonball?
0000A8FA 6700                       		beq.s	@makeball	; if yes, branch
0000A8FC 6000                       		bra.s	@remember
0000A8FE                            ; ===========================================================================
0000A8FE                            
0000A8FE                            @setlaunchflag:
0000A8FE 4228 0032                  		clr.b	hog_launchflag(a0)	; set to launch	cannonball
0000A902                            
0000A902                            @remember:
0000A902 6000 0000                  		bra.w	RememberState
0000A906                            ; ===========================================================================
0000A906                            
0000A906                            @makeball:
0000A906 117C 0001 0032             		move.b	#1,hog_launchflag(a0)
0000A90C 6100 0000                  		bsr.w	FindFreeObj
0000A910 6600                       		bne.s	@fail
0000A912 12BC 0000                  		move.b	#id_Cannonball,0(a1) ; load cannonball object ($20)
0000A916 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000A91C 3368 000C 000C             		move.w	obY(a0),obY(a1)
0000A922 337C FF00 0010             		move.w	#-$100,obVelX(a1) ; cannonball bounces to the left
0000A928 337C 0000 0012             		move.w	#0,obVelY(a1)
0000A92E 70FC                       		moveq	#-4,d0
0000A930 0828 0000 0022             		btst	#0,obStatus(a0)	; is Ball Hog facing right?
0000A936 6700                       		beq.s	@noflip		; if not, branch
0000A938 4440                       		neg.w	d0
0000A93A 4469 0010                  		neg.w	obVelX(a1)	; cannonball bounces to	the right
0000A93E                            
0000A93E                            	@noflip:
0000A93E D169 0008                  		add.w	d0,obX(a1)
0000A942 0669 000C 000C             		addi.w	#$C,obY(a1)
0000A948 1368 0028 0028             		move.b	obSubtype(a0),obSubtype(a1) ; copy object type from Ball Hog
0000A94E                            
0000A94E                            	@fail:
0000A94E 60B2                       		bra.s	@remember
0000A94E 60B2                       		bra.s	@remember
0000A950                            		include	"_incObj\20 Cannonball.asm"
0000A950                            ; ---------------------------------------------------------------------------
0000A950                            ; Object 20 - cannonball that Ball Hog throws (SBZ)
0000A950                            ; ---------------------------------------------------------------------------
0000A950                            
0000A950                            Cannonball:
0000A950 7000                       		moveq	#0,d0
0000A952 1028 0024                  		move.b	obRoutine(a0),d0
0000A956 323B 0000                  		move.w	Cbal_Index(pc,d0.w),d1
0000A95A 4EFB 1000                  		jmp	Cbal_Index(pc,d1.w)
0000A95E                            ; ===========================================================================
0000A95E 0000                       Cbal_Index:	dc.w Cbal_Main-Cbal_Index
0000A960 0000                       		dc.w Cbal_Bounce-Cbal_Index
0000A962                            
0000A962 =00000030                  cbal_time:	equ $30		; time until the cannonball explodes (2 bytes)
0000A962                            ; ===========================================================================
0000A962                            
0000A962                            Cbal_Main:	; Routine 0
0000A962 5428 0024                  		addq.b	#2,obRoutine(a0)
0000A966 117C 0007 0016             		move.b	#7,obHeight(a0)
0000A96C 217C 0000 0000 0004        		move.l	#Map_Hog,obMap(a0)
0000A974 317C 2302 0002             		move.w	#$2302,obGfx(a0)
0000A97A 117C 0004 0001             		move.b	#4,obRender(a0)
0000A980 317C 0180 0018             		move.w	#$180,obPriority(a0)
0000A986 117C 0087 0020             		move.b	#$87,obColType(a0)
0000A98C 117C 0008 0014             		move.b	#8,obActWid(a0)
0000A992 7000                       		moveq	#0,d0
0000A994 1028 0028                  		move.b	obSubtype(a0),d0 ; move subtype to d0
0000A998 C0FC 003C                  		mulu.w	#60,d0		; multiply by 60 frames	(1 second)
0000A99C 3140 0030                  		move.w	d0,cbal_time(a0) ; set explosion time
0000A9A0 117C 0004 001A             		move.b	#4,obFrame(a0)
0000A9A6                            
0000A9A6                            Cbal_Bounce:	; Routine 2
0000A9A6 4EB9 0000 0000             		jsr	(ObjectFall).l
0000A9AC 4A68 0012                  		tst.w	obVelY(a0)
0000A9B0 6B00                       		bmi.s	Cbal_ChkExplode
0000A9B2 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0000A9B8 4A41                       		tst.w	d1		; has ball hit the floor?
0000A9BA 6A00                       		bpl.s	Cbal_ChkExplode	; if not, branch
0000A9BC                            
0000A9BC D368 000C                  		add.w	d1,obY(a0)
0000A9C0 317C FD00 0012             		move.w	#-$300,obVelY(a0) ; bounce
0000A9C6 4A03                       		tst.b	d3
0000A9C8 6700                       		beq.s	Cbal_ChkExplode
0000A9CA 6B00                       		bmi.s	loc_8CA4
0000A9CC 4A68 0010                  		tst.w	obVelX(a0)
0000A9D0 6A00                       		bpl.s	Cbal_ChkExplode
0000A9D2 4468 0010                  		neg.w	obVelX(a0)
0000A9D6 6000                       		bra.s	Cbal_ChkExplode
0000A9D8                            ; ===========================================================================
0000A9D8                            
0000A9D8                            loc_8CA4:
0000A9D8 4A68 0010                  		tst.w	obVelX(a0)
0000A9DC 6B00                       		bmi.s	Cbal_ChkExplode
0000A9DE 4468 0010                  		neg.w	obVelX(a0)
0000A9E2                            
0000A9E2                            Cbal_ChkExplode:
0000A9E2 5368 0030                  		subq.w	#1,cbal_time(a0) ; subtract 1 from explosion time
0000A9E6 6A00                       		bpl.s	Cbal_Animate	; if time is > 0, branch
0000A9E8                            
0000A9E8                            	Cbal_Explode:
0000A9E8 10BC 0000                  		move.b	#id_MissileDissolve,0(a0)
0000A9EC 10BC 0000                  		move.b	#id_ExplosionBomb,0(a0)	; change object	to an explosion	($3F)
0000A9F0 117C 0000 0024             		move.b	#0,obRoutine(a0) ; reset routine counter
0000A9F6 6000 0000                  		bra.w	ExplosionBomb	; jump to explosion code
0000A9FA                            ; ===========================================================================
0000A9FA                            
0000A9FA                            Cbal_Animate:
0000A9FA 5328 001E                  		subq.b	#1,obTimeFrame(a0) ; subtract 1 from frame duration
0000A9FE 6A00                       		bpl.s	Cbal_Display
0000AA00 117C 0005 001E             		move.b	#5,obTimeFrame(a0) ; set frame duration to 5 frames
0000AA06 0868 0000 001A             		bchg	#0,obFrame(a0)	; change frame
0000AA0C                            
0000AA0C                            Cbal_Display:
0000AA0C 6100 0000                  		bsr.w	DisplaySprite
0000AA10 3038 F72E                  		move.w	(v_limitbtm2).w,d0
0000AA14 0640 00E0                  		addi.w	#$E0,d0
0000AA18 B068 000C                  		cmp.w	obY(a0),d0	; has object fallen off	the level?
0000AA1C 6500 0000                  		bcs.w	DeleteObject	; if yes, branch
0000AA20 4E75                       		rts	
0000AA20 4E75                       		rts	
0000AA22                            		include	"_incObj\24, 27 & 3F Explosions.asm"
0000AA22                            ; ---------------------------------------------------------------------------
0000AA22                            ; Object 24 - buzz bomber missile vanishing (unused?)
0000AA22                            ; ---------------------------------------------------------------------------
0000AA22                            
0000AA22                            MissileDissolve:
0000AA22 7000                       		moveq	#0,d0
0000AA24 1028 0024                  		move.b	obRoutine(a0),d0
0000AA28 323B 0000                  		move.w	MDis_Index(pc,d0.w),d1
0000AA2C 4EFB 1000                  		jmp	MDis_Index(pc,d1.w)
0000AA30                            ; ===========================================================================
0000AA30 0000                       MDis_Index:	dc.w MDis_Main-MDis_Index
0000AA32 0000                       		dc.w MDis_Animate-MDis_Index
0000AA34                            ; ===========================================================================
0000AA34                            
0000AA34                            MDis_Main:	; Routine 0
0000AA34 5428 0024                  		addq.b	#2,obRoutine(a0)
0000AA38 217C 0000 0000 0004        		move.l	#Map_MisDissolve,obMap(a0)
0000AA40 317C 041C 0002             		move.w	#$41C,obGfx(a0)
0000AA46 117C 0004 0001             		move.b	#4,obRender(a0)
0000AA4C 317C 0080 0018             		move.w	#$80,obPriority(a0)
0000AA52 117C 0000 0020             		move.b	#0,obColType(a0)
0000AA58 117C 000C 0014             		move.b	#$C,obActWid(a0)
0000AA5E 117C 0009 001E             		move.b	#9,obTimeFrame(a0)
0000AA64 117C 0000 001A             		move.b	#0,obFrame(a0)
0000AA74                            
0000AA74                            MDis_Animate:	; Routine 2
0000AA74 5328 001E                  		subq.b	#1,obTimeFrame(a0) ; subtract 1 from frame duration
0000AA78 6A00                       		bpl.s	@display
0000AA7A 117C 0009 001E             		move.b	#9,obTimeFrame(a0) ; set frame duration to 9 frames
0000AA80 5228 001A                  		addq.b	#1,obFrame(a0)	; next frame
0000AA84 0C28 0004 001A             		cmpi.b	#4,obFrame(a0)	; has animation completed?
0000AA8A 6700 0000                  		beq.w	DeleteObject	; if yes, branch
0000AA8E                            
0000AA8E                            	@display:
0000AA8E 6000 0000                  		bra.w	DisplaySprite
0000AA92                            ; ===========================================================================
0000AA92                            
0000AA92                            ; ---------------------------------------------------------------------------
0000AA92                            ; Object 27 - explosion	from a destroyed enemy or monitor
0000AA92                            ; ---------------------------------------------------------------------------
0000AA92                            
0000AA92                            ExplosionItem:
0000AA92 7000                       		moveq	#0,d0
0000AA94 1028 0024                  		move.b	obRoutine(a0),d0
0000AA98 323B 0000                  		move.w	ExItem_Index(pc,d0.w),d1
0000AA9C 4EFB 1000                  		jmp	ExItem_Index(pc,d1.w)
0000AAA0                            ; ===========================================================================
0000AAA0 0000                       ExItem_Index:	dc.w ExItem_Animal-ExItem_Index
0000AAA2 0000                       		dc.w ExItem_Main-ExItem_Index
0000AAA4 0000                       		dc.w ExItem_Animate-ExItem_Index
0000AAA6                            ; ===========================================================================
0000AAA6                            
0000AAA6                            ExItem_Animal:	; Routine 0
0000AAA6 5428 0024                  		addq.b	#2,obRoutine(a0)
0000AAAA 6100 0000                  		bsr.w	FindFreeObj
0000AAAE 6600                       		bne.s	ExItem_Main
0000AAB0 12BC 0000                  		move.b	#id_Animals,0(a1) ; load animal object
0000AAB4 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000AABA 3368 000C 000C             		move.w	obY(a0),obY(a1)
0000AAC0 3368 003E 003E             		move.w	$3E(a0),$3E(a1)
0000AAC6                            
0000AAC6                            ExItem_Main:	; Routine 2
0000AAC6 5428 0024                  		addq.b	#2,obRoutine(a0)
0000AACA 217C 0000 0000 0004        		move.l	#Map_ExplodeItem,obMap(a0)
0000AAD2 317C 05A0 0002             		move.w	#$5A0,obGfx(a0)
0000AAD8 117C 0004 0001             		move.b	#4,obRender(a0)
0000AADE 317C 0080 0018             		move.w	#$80,obPriority(a0)
0000AAE4 117C 0000 0020             		move.b	#0,obColType(a0)
0000AAEA 117C 000C 0014             		move.b	#$C,obActWid(a0)
0000AAF0 117C 0007 001E             		move.b	#7,obTimeFrame(a0) ; set frame duration to 7 frames
0000AAF6 117C 0000 001A             		move.b	#0,obFrame(a0)
0000AB06                            
0000AB06                            ExItem_Animate:	; Routine 4 (2 for ExplosionBomb)
0000AB06 5528 001E                  		subq.b	#2,obTimeFrame(a0) ; subtract 1 from frame duration
0000AB0A 6A00                       		bpl.s	@display
0000AB0C 117C 0007 001E             		move.b	#7,obTimeFrame(a0) ; set frame duration to 7 frames
0000AB12 5228 001A                  		addq.b	#1,obFrame(a0)	; next frame
0000AB16 0C28 0005 001A             		cmpi.b	#5,obFrame(a0)	; is the final frame (05) displayed?
0000AB1C 6700 0000                  		beq.w	DeleteObject	; if yes, branch
0000AB20                            
0000AB20                            	@display:
0000AB20 6000 0000                  		bra.w	DisplaySprite
0000AB24                            ; ===========================================================================
0000AB24                            ; ---------------------------------------------------------------------------
0000AB24                            ; Object 3F - explosion	from a destroyed boss, bomb or cannonball
0000AB24                            ; ---------------------------------------------------------------------------
0000AB24                            
0000AB24                            ExplosionBomb:
0000AB24 7000                       		moveq	#0,d0
0000AB26 1028 0024                  		move.b	obRoutine(a0),d0
0000AB2A 323B 0000                  		move.w	ExBom_Index(pc,d0.w),d1
0000AB2E 4EFB 1000                  		jmp	ExBom_Index(pc,d1.w)
0000AB32                            ; ===========================================================================
0000AB32 0000                       ExBom_Index:	dc.w ExBom_Main-ExBom_Index
0000AB34 FFD4                       		dc.w ExItem_Animate-ExBom_Index
0000AB36                            ; ===========================================================================
0000AB36                            
0000AB36                            ExBom_Main:	; Routine 0
0000AB36 5428 0024                  		addq.b	#2,obRoutine(a0)
0000AB3A 217C 0000 0000 0004        		move.l	#Map_ExplodeBomb,obMap(a0)
0000AB42 317C 05A0 0002             		move.w	#$5A0,obGfx(a0)
0000AB48 117C 0004 0001             		move.b	#4,obRender(a0)
0000AB4E 317C 0080 0018             		move.w	#$80,obPriority(a0)
0000AB54 117C 0000 0020             		move.b	#0,obColType(a0)
0000AB5A 117C 000C 0014             		move.b	#$C,obActWid(a0)
0000AB60 117C 0007 001E             		move.b	#7,obTimeFrame(a0)
0000AB66 117C 0000 001A             		move.b	#0,obFrame(a0)
0000AB76                            		include	"_anim\Ball Hog.asm"
0000AB76                            ; ---------------------------------------------------------------------------
0000AB76                            ; Animation script - doors (SBZ)
0000AB76                            ; ---------------------------------------------------------------------------
0000AB76 0000                       Ani_Hog:	dc.w @hog-Ani_Hog
0000AB78 0900 0002 0203 0200 0002+  @hog:		dc.b 9,	0, 0, 2, 2, 3, 2, 0, 0,	2, 2, 3, 2, 0, 0, 2, 2, 3, 2, 0, 0, 1, afEnd
0000AB90 00                         		even
0000AB90 00                         		even
0000AB90                            Map_Hog:	include	"_maps\Ball Hog.asm"
0000AB90                            ; --------------------------------------------------------------------------------
0000AB90                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0000AB90                            ; --------------------------------------------------------------------------------
0000AB90                            
0000AB90                            SME_ZER01:	
0000AB90 0000 0000                  		dc.w SME_ZER01_C-SME_ZER01, SME_ZER01_17-SME_ZER01	
0000AB94 0000 0000                  		dc.w SME_ZER01_22-SME_ZER01, SME_ZER01_2D-SME_ZER01	
0000AB98 0000 0000                  		dc.w SME_ZER01_38-SME_ZER01, SME_ZER01_3E-SME_ZER01	
0000AB9C 02                         SME_ZER01_C:	dc.b 2	
0000AB9D EF09 2000 F4               		dc.b $EF, 9, $20, 0, $F4	
0000ABA2 FF0A 2006 F4               		dc.b $FF, $A, $20, 6, $F4	
0000ABA7 02                         SME_ZER01_17:	dc.b 2	
0000ABA8 EF09 2000 F4               		dc.b $EF, 9, $20, 0, $F4	
0000ABAD FF0A 200F F4               		dc.b $FF, $A, $20, $F, $F4	
0000ABB2 02                         SME_ZER01_22:	dc.b 2	
0000ABB3 F409 2000 F4               		dc.b $F4, 9, $20, 0, $F4	
0000ABB8 0409 2018 F4               		dc.b 4, 9, $20, $18, $F4	
0000ABBD 02                         SME_ZER01_2D:	dc.b 2	
0000ABBE E409 2000 F4               		dc.b $E4, 9, $20, 0, $F4	
0000ABC3 F40A 201E F4               		dc.b $F4, $A, $20, $1E, $F4	
0000ABC8 01                         SME_ZER01_38:	dc.b 1	
0000ABC9 F805 0027 F8               		dc.b $F8, 5, 0, $27, $F8	
0000ABCE 01                         SME_ZER01_3E:	dc.b 1	
0000ABCF F805 602B F8               		dc.b $F8, 5, $60, $2B, $F8	
0000ABD4                            		even
0000ABD4                            		even
0000ABD4                            Map_MisDissolve:include	"_maps\Buzz Bomber Missile Dissolve.asm"
0000ABD4                            ; ---------------------------------------------------------------------------
0000ABD4                            ; Sprite mappings - buzz bomber missile vanishing
0000ABD4                            ; ---------------------------------------------------------------------------
0000ABD4                            Map_MisDissolve_internal:
0000ABD4 0000                       		dc.w byte_8EAE-Map_MisDissolve_internal
0000ABD6 0000                       		dc.w byte_8EB4-Map_MisDissolve_internal
0000ABD8 0000                       		dc.w byte_8EBA-Map_MisDissolve_internal
0000ABDA 0000                       		dc.w byte_8EC0-Map_MisDissolve_internal
0000ABDC 01                         byte_8EAE:	dc.b 1
0000ABDD F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0000ABE2 01                         byte_8EB4:	dc.b 1
0000ABE3 F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
0000ABE8 01                         byte_8EBA:	dc.b 1
0000ABE9 F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
0000ABEE 01                         byte_8EC0:	dc.b 1
0000ABEF F40A 001B F4               		dc.b $F4, $A, 0, $1B, $F4
0000ABF4                            		even
0000ABF4                            		even
0000ABF4                            		include	"_maps\Explosions.asm"
0000ABF4                            ; ---------------------------------------------------------------------------
0000ABF4                            ; Sprite mappings - explosion from a badnik or monitor
0000ABF4                            ; ---------------------------------------------------------------------------
0000ABF4 0000 0000                  Map_ExplodeItem:dc.w byte_8ED0-Map_ExplodeItem, byte_8ED6-Map_ExplodeItem
0000ABF8 0000 0000                  		dc.w byte_8EDC-Map_ExplodeItem, byte_8EE2-Map_ExplodeItem
0000ABFC 0000                       		dc.w byte_8EF7-Map_ExplodeItem
0000ABFE 01                         byte_8ED0:	dc.b 1
0000ABFF F809 0000 F4               		dc.b $F8, 9, 0,	0, $F4
0000AC04 01                         byte_8ED6:	dc.b 1
0000AC05 F00F 0006 F0               		dc.b $F0, $F, 0, 6, $F0
0000AC0A 01                         byte_8EDC:	dc.b 1
0000AC0B F00F 0016 F0               		dc.b $F0, $F, 0, $16, $F0
0000AC10 04                         byte_8EE2:	dc.b 4
0000AC11 EC0A 0026 EC               		dc.b $EC, $A, 0, $26, $EC
0000AC16 EC05 002F 04               		dc.b $EC, 5, 0,	$2F, 4
0000AC1B 0405 182F EC               		dc.b 4,	5, $18,	$2F, $EC
0000AC20 FC0A 1826 FC               		dc.b $FC, $A, $18, $26,	$FC
0000AC25 04                         byte_8EF7:	dc.b 4
0000AC26 EC0A 0033 EC               		dc.b $EC, $A, 0, $33, $EC
0000AC2B EC05 003C 04               		dc.b $EC, 5, 0,	$3C, 4
0000AC30 0405 183C EC               		dc.b 4,	5, $18,	$3C, $EC
0000AC35 FC0A 1833 FC               		dc.b $FC, $A, $18, $33,	$FC
0000AC3A                            		even
0000AC3A                            ; ---------------------------------------------------------------------------
0000AC3A                            ; Sprite mappings - explosion from when	a boss is destroyed
0000AC3A                            ; ---------------------------------------------------------------------------
0000AC3A FFC4                       Map_ExplodeBomb:dc.w byte_8ED0-Map_ExplodeBomb
0000AC3C 0000                       		dc.w byte_8F16-Map_ExplodeBomb
0000AC3E 0000                       		dc.w byte_8F1C-Map_ExplodeBomb
0000AC40 FFD6                       		dc.w byte_8EE2-Map_ExplodeBomb
0000AC42 FFEB                       		dc.w byte_8EF7-Map_ExplodeBomb
0000AC44 01                         byte_8F16:	dc.b 1
0000AC45 F00F 0040 F0               		dc.b $F0, $F, 0, $40, $F0
0000AC4A 01                         byte_8F1C:	dc.b 1
0000AC4B F00F 0050 F0               		dc.b $F0, $F, 0, $50, $F0
0000AC50                            		even
0000AC50                            		even
0000AC50                            
0000AC50                            		include	"_incObj\28 Animals.asm"
0000AC50                            ; ---------------------------------------------------------------------------
0000AC50                            ; Object 28 - animals
0000AC50                            ; ---------------------------------------------------------------------------
0000AC50                            
0000AC50                            Animals:
0000AC50 7000                       		moveq	#0,d0
0000AC52 1028 0024                  		move.b	obRoutine(a0),d0
0000AC56 323B 0000                  		move.w	Anml_Index(pc,d0.w),d1
0000AC5A 4EFB 1000                  		jmp	Anml_Index(pc,d1.w)
0000AC5E                            ; ===========================================================================
0000AC5E 0000 0000                  Anml_Index:	dc.w Anml_Ending-Anml_Index, loc_912A-Anml_Index
0000AC62 0000 0000                  		dc.w loc_9184-Anml_Index, loc_91C0-Anml_Index
0000AC66 0000 0000                  		dc.w loc_9184-Anml_Index, loc_9184-Anml_Index
0000AC6A 0000 0000                  		dc.w loc_9184-Anml_Index, loc_91C0-Anml_Index
0000AC6E 0000 0000                  		dc.w loc_9184-Anml_Index, loc_9240-Anml_Index
0000AC72 0000 0000                  		dc.w loc_9260-Anml_Index, loc_9260-Anml_Index
0000AC76 0000 0000                  		dc.w loc_9280-Anml_Index, loc_92BA-Anml_Index
0000AC7A 0000 0000                  		dc.w loc_9314-Anml_Index, loc_9332-Anml_Index
0000AC7E 0000 0000                  		dc.w loc_9314-Anml_Index, loc_9332-Anml_Index
0000AC82 0000 0000                  		dc.w loc_9314-Anml_Index, loc_9370-Anml_Index
0000AC86 0000                       		dc.w loc_92D6-Anml_Index
0000AC88                            
0000AC88 0005 0203 0603 0405 0401+  Anml_VarIndex:	dc.b 0,	5, 2, 3, 6, 3, 4, 5, 4,	1, 0, 1
0000AC94                            
0000AC94 FE00 FC00                  Anml_Variables:	dc.w $FE00, $FC00
0000AC98 0000 0000                  		dc.l Map_Animal1
0000AC9C FE00 FD00                  		dc.w $FE00, $FD00	; horizontal speed, vertical speed
0000ACA0 0000 0000                  		dc.l Map_Animal2	; mappings address
0000ACA4 FE80 FD00                  		dc.w $FE80, $FD00
0000ACA8 0000 0000                  		dc.l Map_Animal1
0000ACAC FEC0 FE80                  		dc.w $FEC0, $FE80
0000ACB0 0000 0000                  		dc.l Map_Animal2
0000ACB4 FE40 FD00                  		dc.w $FE40, $FD00
0000ACB8 0000 0000                  		dc.l Map_Animal3
0000ACBC FD00 FC00                  		dc.w $FD00, $FC00
0000ACC0 0000 0000                  		dc.l Map_Animal2
0000ACC4 FD80 FC80                  		dc.w $FD80, $FC80
0000ACC8 0000 0000                  		dc.l Map_Animal3
0000ACCC                            
0000ACCC FBC0 FC00 FBC0 FC00 FBC0+  Anml_EndSpeed:	dc.w $FBC0, $FC00, $FBC0, $FC00, $FBC0,	$FC00, $FD00, $FC00
0000ACDC FD00 FC00 FE80 FD00 FE80+  		dc.w $FD00, $FC00, $FE80, $FD00, $FE80,	$FD00, $FEC0, $FE80
0000ACEC FE40 FD00 FE00 FD00 FD80+  		dc.w $FE40, $FD00, $FE00, $FD00, $FD80,	$FC80
0000ACF8                            
0000ACF8 0000 0000 0000 0000 0000+  Anml_EndMap:	dc.l Map_Animal2, Map_Animal2, Map_Animal2, Map_Animal1, Map_Animal1
0000AD0C 0000 0000 0000 0000 0000+  		dc.l Map_Animal1, Map_Animal1, Map_Animal2, Map_Animal3, Map_Animal2
0000AD20 0000 0000                  		dc.l Map_Animal3
0000AD24                            
0000AD24 05A5 05A5 05A5 0553 0553+  Anml_EndVram:	dc.w $5A5, $5A5, $5A5, $553, $553, $573, $573, $585, $593
0000AD36 0565 05B3                  		dc.w $565, $5B3
0000AD3A                            ; ===========================================================================
0000AD3A                            
0000AD3A                            Anml_Ending:	; Routine 0
0000AD3A 4A28 0028                  		tst.b	obSubtype(a0)	; did animal come from a destroyed enemy?
0000AD3E 6700 0000                  		beq.w	Anml_FromEnemy	; if yes, branch
0000AD42 7000                       		moveq	#0,d0
0000AD44 1028 0028                  		move.b	obSubtype(a0),d0 ; move object type to d0
0000AD48 D040                       		add.w	d0,d0		; multiply d0 by 2
0000AD4A 1140 0024                  		move.b	d0,obRoutine(a0) ; move d0 to routine counter
0000AD4E 0440 0014                  		subi.w	#$14,d0
0000AD52 317B 00D0 0002             		move.w	Anml_EndVram(pc,d0.w),obGfx(a0)
0000AD58 D040                       		add.w	d0,d0
0000AD5A 217B 009C 0004             		move.l	Anml_EndMap(pc,d0.w),obMap(a0)
0000AD60 43FA FF6A                  		lea	Anml_EndSpeed(pc),a1
0000AD64 3171 0000 0032             		move.w	(a1,d0.w),$32(a0) ; load horizontal speed
0000AD6A 3171 0000 0010             		move.w	(a1,d0.w),obVelX(a0)
0000AD70 3171 0002 0034             		move.w	2(a1,d0.w),$34(a0) ; load vertical speed
0000AD76 3171 0002 0012             		move.w	2(a1,d0.w),obVelY(a0)
0000AD7C 117C 000C 0016             		move.b	#$C,obHeight(a0)
0000AD82 117C 0004 0001             		move.b	#4,obRender(a0)
0000AD88 08E8 0000 0001             		bset	#0,obRender(a0)
0000AD8E 317C 0300 0018             		move.w	#$300,obPriority(a0)
0000AD94 117C 0008 0014             		move.b	#8,obActWid(a0)
0000AD9A 117C 0007 001E             		move.b	#7,obTimeFrame(a0)
0000ADA0 6000 0000                  		bra.w	DisplaySprite
0000ADA4                            ; ===========================================================================
0000ADA4                            
0000ADA4                            Anml_FromEnemy:
0000ADA4 5428 0024                  		addq.b	#2,obRoutine(a0)
0000ADA8 6100 8CB2                  		bsr.w	RandomNumber
0000ADAC 0240 0001                  		andi.w	#1,d0
0000ADB0 7200                       		moveq	#0,d1
0000ADB2 1238 FE10                  		move.b	(v_zone).w,d1
0000ADB6 D241                       		add.w	d1,d1
0000ADB8 D240                       		add.w	d0,d1
0000ADBA 43FA FECC                  		lea	Anml_VarIndex(pc),a1
0000ADBE 1031 1000                  		move.b	(a1,d1.w),d0
0000ADC2 1140 0030                  		move.b	d0,$30(a0)
0000ADC6 E748                       		lsl.w	#3,d0
0000ADC8 43FA FECA                  		lea	Anml_Variables(pc),a1
0000ADCC D2C0                       		adda.w	d0,a1
0000ADCE 3159 0032                  		move.w	(a1)+,$32(a0)	; load horizontal speed
0000ADD2 3159 0034                  		move.w	(a1)+,$34(a0)	; load vertical	speed
0000ADD6 2159 0004                  		move.l	(a1)+,obMap(a0)	; load mappings
0000ADDA 317C 0580 0002             		move.w	#$580,obGfx(a0)	; VRAM setting for 1st animal
0000ADE0 0828 0000 0030             		btst	#0,$30(a0)	; is 1st animal	used?
0000ADE6 6700                       		beq.s	loc_90C0	; if yes, branch
0000ADE8 317C 0592 0002             		move.w	#$592,obGfx(a0)	; VRAM setting for 2nd animal
0000ADEE                            
0000ADEE                            loc_90C0:
0000ADEE 117C 000C 0016             		move.b	#$C,obHeight(a0)
0000ADF4 117C 0004 0001             		move.b	#4,obRender(a0)
0000ADFA 08E8 0000 0001             		bset	#0,obRender(a0)
0000AE00 317C 0300 0018             		move.w	#$300,obPriority(a0)
0000AE06 117C 0008 0014             		move.b	#8,obActWid(a0)
0000AE0C 117C 0007 001E             		move.b	#7,obTimeFrame(a0)
0000AE12 117C 0002 001A             		move.b	#2,obFrame(a0)
0000AE18 317C FC00 0012             		move.w	#-$400,obVelY(a0)
0000AE1E 4A38 F7A7                  		tst.b	(v_bossstatus).w
0000AE22 6600                       		bne.s	loc_911C
0000AE24 6100 0000                  		bsr.w	FindFreeObj
0000AE28 6600                       		bne.s	Anml_Display
0000AE2A 12BC 0000                  		move.b	#id_Points,0(a1) ; load points object
0000AE2E 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000AE34 3368 000C 000C             		move.w	obY(a0),obY(a1)
0000AE3A 3028 003E                  		move.w	$3E(a0),d0
0000AE3E E248                       		lsr.w	#1,d0
0000AE40 1340 001A                  		move.b	d0,obFrame(a1)
0000AE44                            
0000AE44                            Anml_Display:
0000AE44 6000 0000                  		bra.w	DisplaySprite
0000AE48                            ; ===========================================================================
0000AE48                            
0000AE48                            loc_911C:
0000AE48 117C 0012 0024             		move.b	#$12,obRoutine(a0)
0000AE4E 4268 0010                  		clr.w	obVelX(a0)
0000AE52 6000 0000                  		bra.w	DisplaySprite
0000AE56                            ; ===========================================================================
0000AE56                            
0000AE56                            loc_912A:
0000AE56 4A28 0001                  		tst.b	obRender(a0)
0000AE5A 6A00 0000                  		bpl.w	DeleteObject
0000AE5E 6100 0000                  		bsr.w	ObjectFall
0000AE62 4A68 0012                  		tst.w	obVelY(a0)
0000AE66 6B00                       		bmi.s	loc_9180
0000AE68 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0000AE6E 4A41                       		tst.w	d1
0000AE70 6A00                       		bpl.s	loc_9180
0000AE72 D368 000C                  		add.w	d1,obY(a0)
0000AE76 3168 0032 0010             		move.w	$32(a0),obVelX(a0)
0000AE7C 3168 0034 0012             		move.w	$34(a0),obVelY(a0)
0000AE82 117C 0001 001A             		move.b	#1,obFrame(a0)
0000AE88 1028 0030                  		move.b	$30(a0),d0
0000AE8C D000                       		add.b	d0,d0
0000AE8E 5800                       		addq.b	#4,d0
0000AE90 1140 0024                  		move.b	d0,obRoutine(a0)
0000AE94 4A38 F7A7                  		tst.b	(v_bossstatus).w
0000AE98 6700                       		beq.s	loc_9180
0000AE9A 0838 0004 FE0F             		btst	#4,(v_vbla_byte).w
0000AEA0 6700                       		beq.s	loc_9180
0000AEA2 4468 0010                  		neg.w	obVelX(a0)
0000AEA6 0868 0000 0001             		bchg	#0,obRender(a0)
0000AEAC                            
0000AEAC                            loc_9180:
0000AEAC 6000 0000                  		bra.w	DisplaySprite
0000AEB0                            ; ===========================================================================
0000AEB0                            
0000AEB0                            loc_9184:
0000AEB0 6100 0000                  		bsr.w	ObjectFall
0000AEB4 117C 0001 001A             		move.b	#1,obFrame(a0)
0000AEBA 4A68 0012                  		tst.w	obVelY(a0)
0000AEBE 6B00                       		bmi.s	loc_91AE
0000AEC0 117C 0000 001A             		move.b	#0,obFrame(a0)
0000AEC6 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0000AECC 4A41                       		tst.w	d1
0000AECE 6A00                       		bpl.s	loc_91AE
0000AED0 D368 000C                  		add.w	d1,obY(a0)
0000AED4 3168 0034 0012             		move.w	$34(a0),obVelY(a0)
0000AEDA                            
0000AEDA                            loc_91AE:
0000AEDA 4A28 0028                  		tst.b	obSubtype(a0)
0000AEDE 6600                       		bne.s	loc_9224
0000AEE0 4A28 0001                  		tst.b	obRender(a0)
0000AEE4 6A00 0000                  		bpl.w	DeleteObject
0000AEE8 6000 0000                  		bra.w	DisplaySprite
0000AEEC                            ; ===========================================================================
0000AEEC                            
0000AEEC                            loc_91C0:
0000AEEC 6100 0000                  		bsr.w	SpeedToPos
0000AEF0 0668 0018 0012             		addi.w	#$18,obVelY(a0)
0000AEF6 4A68 0012                  		tst.w	obVelY(a0)
0000AEFA 6B00                       		bmi.s	loc_91FC
0000AEFC 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0000AF02 4A41                       		tst.w	d1
0000AF04 6A00                       		bpl.s	loc_91FC
0000AF06 D368 000C                  		add.w	d1,obY(a0)
0000AF0A 3168 0034 0012             		move.w	$34(a0),obVelY(a0)
0000AF10 4A28 0028                  		tst.b	obSubtype(a0)
0000AF14 6700                       		beq.s	loc_91FC
0000AF16 0C28 000A 0028             		cmpi.b	#$A,obSubtype(a0)
0000AF1C 6700                       		beq.s	loc_91FC
0000AF1E 4468 0010                  		neg.w	obVelX(a0)
0000AF22 0868 0000 0001             		bchg	#0,obRender(a0)
0000AF28                            
0000AF28                            loc_91FC:
0000AF28 5328 001E                  		subq.b	#1,obTimeFrame(a0)
0000AF2C 6A00                       		bpl.s	loc_9212
0000AF2E 117C 0001 001E             		move.b	#1,obTimeFrame(a0)
0000AF34 5228 001A                  		addq.b	#1,obFrame(a0)
0000AF38 0228 0001 001A             		andi.b	#1,obFrame(a0)
0000AF3E                            
0000AF3E                            loc_9212:
0000AF3E 4A28 0028                  		tst.b	obSubtype(a0)
0000AF42 6600                       		bne.s	loc_9224
0000AF44 4A28 0001                  		tst.b	obRender(a0)
0000AF48 6A00 0000                  		bpl.w	DeleteObject
0000AF4C 6000 0000                  		bra.w	DisplaySprite
0000AF50                            ; ===========================================================================
0000AF50                            
0000AF50                            loc_9224:
0000AF50 3028 0008                  		move.w	obX(a0),d0
0000AF54 9078 D008                  		sub.w	(v_player+obX).w,d0
0000AF58 6500                       		bcs.s	loc_923C
0000AF5A 0440 0180                  		subi.w	#$180,d0
0000AF5E 6A00                       		bpl.s	loc_923C
0000AF60 4A28 0001                  		tst.b	obRender(a0)
0000AF64 6A00 0000                  		bpl.w	DeleteObject
0000AF68                            
0000AF68                            loc_923C:
0000AF68 6000 0000                  		bra.w	DisplaySprite
0000AF6C                            ; ===========================================================================
0000AF6C                            
0000AF6C                            loc_9240:
0000AF6C 4A28 0001                  		tst.b	obRender(a0)
0000AF70 6A00 0000                  		bpl.w	DeleteObject
0000AF74 5368 0036                  		subq.w	#1,$36(a0)
0000AF78 6600 0000                  		bne.w	loc_925C
0000AF7C 117C 0002 0024             		move.b	#2,obRoutine(a0)
0000AF82 317C 0180 0018             		move.w	#$180,obPriority(a0)
0000AF88                            
0000AF88                            loc_925C:
0000AF88 6000 0000                  		bra.w	DisplaySprite
0000AF8C                            ; ===========================================================================
0000AF8C                            
0000AF8C                            loc_9260:
0000AF8C 6100 0000                  		bsr.w	sub_9404
0000AF90 6400                       		bcc.s	loc_927C
0000AF92 3168 0032 0010             		move.w	$32(a0),obVelX(a0)
0000AF98 3168 0034 0012             		move.w	$34(a0),obVelY(a0)
0000AF9E 117C 000E 0024             		move.b	#$E,obRoutine(a0)
0000AFA4 6000 FF46                  		bra.w	loc_91C0
0000AFA8                            ; ===========================================================================
0000AFA8                            
0000AFA8                            loc_927C:
0000AFA8 6000 FFA6                  		bra.w	loc_9224
0000AFAC                            ; ===========================================================================
0000AFAC                            
0000AFAC                            loc_9280:
0000AFAC 6100 0000                  		bsr.w	sub_9404
0000AFB0 6A00                       		bpl.s	loc_92B6
0000AFB2 4268 0010                  		clr.w	obVelX(a0)
0000AFB6 4268 0032                  		clr.w	$32(a0)
0000AFBA 6100 0000                  		bsr.w	SpeedToPos
0000AFBE 0668 0018 0012             		addi.w	#$18,obVelY(a0)
0000AFC4 6100 0000                  		bsr.w	loc_93C4
0000AFC8 6100 0000                  		bsr.w	loc_93EC
0000AFCC 5328 001E                  		subq.b	#1,obTimeFrame(a0)
0000AFD0 6A00                       		bpl.s	loc_92B6
0000AFD2 117C 0001 001E             		move.b	#1,obTimeFrame(a0)
0000AFD8 5228 001A                  		addq.b	#1,obFrame(a0)
0000AFDC 0228 0001 001A             		andi.b	#1,obFrame(a0)
0000AFE2                            
0000AFE2                            loc_92B6:
0000AFE2 6000 FF6C                  		bra.w	loc_9224
0000AFE6                            ; ===========================================================================
0000AFE6                            
0000AFE6                            loc_92BA:
0000AFE6 6100 0000                  		bsr.w	sub_9404
0000AFEA 6A00                       		bpl.s	loc_9310
0000AFEC 3168 0032 0010             		move.w	$32(a0),obVelX(a0)
0000AFF2 3168 0034 0012             		move.w	$34(a0),obVelY(a0)
0000AFF8 117C 0004 0024             		move.b	#4,obRoutine(a0)
0000AFFE 6000 FEB0                  		bra.w	loc_9184
0000B002                            ; ===========================================================================
0000B002                            
0000B002                            loc_92D6:
0000B002 6100 0000                  		bsr.w	ObjectFall
0000B006 117C 0001 001A             		move.b	#1,obFrame(a0)
0000B00C 4A68 0012                  		tst.w	obVelY(a0)
0000B010 6B00                       		bmi.s	loc_9310
0000B012 117C 0000 001A             		move.b	#0,obFrame(a0)
0000B018 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0000B01E 4A41                       		tst.w	d1
0000B020 6A00                       		bpl.s	loc_9310
0000B022 4628 0029                  		not.b	$29(a0)
0000B026 6600                       		bne.s	loc_9306
0000B028 4468 0010                  		neg.w	obVelX(a0)
0000B02C 0868 0000 0001             		bchg	#0,obRender(a0)
0000B032                            
0000B032                            loc_9306:
0000B032 D368 000C                  		add.w	d1,obY(a0)
0000B036 3168 0034 0012             		move.w	$34(a0),obVelY(a0)
0000B03C                            
0000B03C                            loc_9310:
0000B03C 6000 FF12                  		bra.w	loc_9224
0000B040                            ; ===========================================================================
0000B040                            
0000B040                            loc_9314:
0000B040 6100 0000                  		bsr.w	sub_9404
0000B044 6A00                       		bpl.s	loc_932E
0000B046 4268 0010                  		clr.w	obVelX(a0)
0000B04A 4268 0032                  		clr.w	$32(a0)
0000B04E 6100 0000                  		bsr.w	ObjectFall
0000B052 6100 0000                  		bsr.w	loc_93C4
0000B056 6100 0000                  		bsr.w	loc_93EC
0000B05A                            
0000B05A                            loc_932E:
0000B05A 6000 FEF4                  		bra.w	loc_9224
0000B05E                            ; ===========================================================================
0000B05E                            
0000B05E                            loc_9332:
0000B05E 6100 0000                  		bsr.w	sub_9404
0000B062 6A00                       		bpl.s	loc_936C
0000B064 6100 0000                  		bsr.w	ObjectFall
0000B068 117C 0001 001A             		move.b	#1,obFrame(a0)
0000B06E 4A68 0012                  		tst.w	obVelY(a0)
0000B072 6B00                       		bmi.s	loc_936C
0000B074 117C 0000 001A             		move.b	#0,obFrame(a0)
0000B07A 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0000B080 4A41                       		tst.w	d1
0000B082 6A00                       		bpl.s	loc_936C
0000B084 4468 0010                  		neg.w	obVelX(a0)
0000B088 0868 0000 0001             		bchg	#0,obRender(a0)
0000B08E D368 000C                  		add.w	d1,obY(a0)
0000B092 3168 0034 0012             		move.w	$34(a0),obVelY(a0)
0000B098                            
0000B098                            loc_936C:
0000B098 6000 FEB6                  		bra.w	loc_9224
0000B09C                            ; ===========================================================================
0000B09C                            
0000B09C                            loc_9370:
0000B09C 6100 0000                  		bsr.w	sub_9404
0000B0A0 6A00                       		bpl.s	loc_93C0
0000B0A2 6100 0000                  		bsr.w	SpeedToPos
0000B0A6 0668 0018 0012             		addi.w	#$18,obVelY(a0)
0000B0AC 4A68 0012                  		tst.w	obVelY(a0)
0000B0B0 6B00                       		bmi.s	loc_93AA
0000B0B2 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0000B0B8 4A41                       		tst.w	d1
0000B0BA 6A00                       		bpl.s	loc_93AA
0000B0BC 4628 0029                  		not.b	$29(a0)
0000B0C0 6600                       		bne.s	loc_93A0
0000B0C2 4468 0010                  		neg.w	obVelX(a0)
0000B0C6 0868 0000 0001             		bchg	#0,obRender(a0)
0000B0CC                            
0000B0CC                            loc_93A0:
0000B0CC D368 000C                  		add.w	d1,obY(a0)
0000B0D0 3168 0034 0012             		move.w	$34(a0),obVelY(a0)
0000B0D6                            
0000B0D6                            loc_93AA:
0000B0D6 5328 001E                  		subq.b	#1,obTimeFrame(a0)
0000B0DA 6A00                       		bpl.s	loc_93C0
0000B0DC 117C 0001 001E             		move.b	#1,obTimeFrame(a0)
0000B0E2 5228 001A                  		addq.b	#1,obFrame(a0)
0000B0E6 0228 0001 001A             		andi.b	#1,obFrame(a0)
0000B0EC                            
0000B0EC                            loc_93C0:
0000B0EC 6000 FE62                  		bra.w	loc_9224
0000B0F0                            ; ===========================================================================
0000B0F0                            
0000B0F0                            loc_93C4:
0000B0F0 117C 0001 001A             		move.b	#1,obFrame(a0)
0000B0F6 4A68 0012                  		tst.w	obVelY(a0)
0000B0FA 6B00                       		bmi.s	locret_93EA
0000B0FC 117C 0000 001A             		move.b	#0,obFrame(a0)
0000B102 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0000B108 4A41                       		tst.w	d1
0000B10A 6A00                       		bpl.s	locret_93EA
0000B10C D368 000C                  		add.w	d1,obY(a0)
0000B110 3168 0034 0012             		move.w	$34(a0),obVelY(a0)
0000B116                            
0000B116                            locret_93EA:
0000B116 4E75                       		rts	
0000B118                            ; ===========================================================================
0000B118                            
0000B118                            loc_93EC:
0000B118 08E8 0000 0001             		bset	#0,obRender(a0)
0000B11E 3028 0008                  		move.w	obX(a0),d0
0000B122 9078 D008                  		sub.w	(v_player+obX).w,d0
0000B126 6400                       		bcc.s	locret_9402
0000B128 08A8 0000 0001             		bclr	#0,obRender(a0)
0000B12E                            
0000B12E                            locret_9402:
0000B12E 4E75                       		rts	
0000B130                            
0000B130                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000B130                            
0000B130                            
0000B130                            sub_9404:
0000B130 3038 D008                  		move.w	(v_player+obX).w,d0
0000B134 9068 0008                  		sub.w	obX(a0),d0
0000B138 0440 00B8                  		subi.w	#$B8,d0
0000B13C 4E75                       		rts	
0000B13E                            ; End of function sub_9404
0000B13E                            ; End of function sub_9404
0000B13E                            		include	"_incObj\29 Points.asm"
0000B13E                            ; ---------------------------------------------------------------------------
0000B13E                            ; Object 29 - points that appear when you destroy something
0000B13E                            ; ---------------------------------------------------------------------------
0000B13E                            
0000B13E                            Points:
0000B13E 7000                       		moveq	#0,d0
0000B140 1028 0024                  		move.b	obRoutine(a0),d0
0000B144 323B 0000                  		move.w	Poi_Index(pc,d0.w),d1
0000B148 4EBB 1000                  		jsr	Poi_Index(pc,d1.w)
0000B14C 6000 0000                  		bra.w	DisplaySprite
0000B150                            ; ===========================================================================
0000B150 0000                       Poi_Index:	dc.w Poi_Main-Poi_Index
0000B152 0000                       		dc.w Poi_Slower-Poi_Index
0000B154                            ; ===========================================================================
0000B154                            
0000B154                            Poi_Main:	; Routine 0
0000B154 5428 0024                  		addq.b	#2,obRoutine(a0)
0000B158 217C 0000 0000 0004        		move.l	#Map_Poi,obMap(a0)
0000B160 317C 2565 0002             		move.w	#$2565,obGfx(a0)
0000B166 117C 0004 0001             		move.b	#4,obRender(a0)
0000B16C 317C 0080 0018             		move.w	#$80,obPriority(a0)
0000B172 117C 0008 0014             		move.b	#8,obActWid(a0)
0000B178 317C FD00 0012             		move.w	#-$300,obVelY(a0) ; move object upwards
0000B17E                            
0000B17E                            Poi_Slower:	; Routine 2
0000B17E 4A68 0012                  		tst.w	obVelY(a0)	; is object moving?
0000B182 6A00 0000                  		bpl.w	DeleteObject	; if not, delete
0000B186 6100 0000                  		bsr.w	SpeedToPos
0000B18A 0668 0018 0012             		addi.w	#$18,obVelY(a0)	; reduce object	speed
0000B190 4E75                       		rts	
0000B190 4E75                       		rts	
0000B192                            Map_Animal1:	include	"_maps\Animals 1.asm"
0000B192                            ; ---------------------------------------------------------------------------
0000B192                            ; Sprite mappings - animals
0000B192                            ; ---------------------------------------------------------------------------
0000B192                            Map_Animal1_internal:
0000B192 0000                       		dc.w byte_9472-Map_Animal1_internal
0000B194 0000                       		dc.w byte_9478-Map_Animal1_internal
0000B196 0000                       		dc.w byte_946C-Map_Animal1_internal
0000B198 01                         byte_946C:	dc.b 1
0000B199 F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
0000B19E 01                         byte_9472:	dc.b 1
0000B19F F406 0006 F8               		dc.b $F4, 6, 0,	6, $F8
0000B1A4 01                         byte_9478:	dc.b 1
0000B1A5 F406 000C F8               		dc.b $F4, 6, 0,	$C, $F8
0000B1AA                            		even
0000B1AA                            		even
0000B1AA                            Map_Animal2:	include	"_maps\Animals 2.asm"
0000B1AA                            ; ---------------------------------------------------------------------------
0000B1AA                            ; Sprite mappings - animals
0000B1AA                            ; ---------------------------------------------------------------------------
0000B1AA                            Map_Animal2_internal:
0000B1AA 0000                       		dc.w byte_948A-Map_Animal2_internal
0000B1AC 0000                       		dc.w byte_9490-Map_Animal2_internal
0000B1AE 0000                       		dc.w byte_9484-Map_Animal2_internal
0000B1B0 01                         byte_9484:	dc.b 1
0000B1B1 F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
0000B1B6 01                         byte_948A:	dc.b 1
0000B1B7 FC05 0006 F8               		dc.b $FC, 5, 0,	6, $F8
0000B1BC 01                         byte_9490:	dc.b 1
0000B1BD FC05 000A F8               		dc.b $FC, 5, 0,	$A, $F8
0000B1C2                            		even
0000B1C2                            		even
0000B1C2                            Map_Animal3:	include	"_maps\Animals 3.asm"
0000B1C2                            ; ---------------------------------------------------------------------------
0000B1C2                            ; Sprite mappings - animals
0000B1C2                            ; ---------------------------------------------------------------------------
0000B1C2                            Map_Animal3_internal:
0000B1C2 0000                       		dc.w byte_94A2-Map_Animal3_internal
0000B1C4 0000                       		dc.w byte_94A8-Map_Animal3_internal
0000B1C6 0000                       		dc.w byte_949C-Map_Animal3_internal
0000B1C8 01                         byte_949C:	dc.b 1
0000B1C9 F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
0000B1CE 01                         byte_94A2:	dc.b 1
0000B1CF FC09 0006 F4               		dc.b $FC, 9, 0,	6, $F4
0000B1D4 01                         byte_94A8:	dc.b 1
0000B1D5 FC09 000C F4               		dc.b $FC, 9, 0,	$C, $F4
0000B1DA                            		even
0000B1DA                            		even
0000B1DA                            Map_Poi:	include	"_maps\Points.asm"
0000B1DA                            ; --------------------------------------------------------------------------------
0000B1DA                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0000B1DA                            ; --------------------------------------------------------------------------------
0000B1DA                            
0000B1DA                            SME_qLvsg:	
0000B1DA 0000 0000                  		dc.w SME_qLvsg_E-SME_qLvsg, SME_qLvsg_14-SME_qLvsg	
0000B1DE 0000 0000                  		dc.w SME_qLvsg_1A-SME_qLvsg, SME_qLvsg_20-SME_qLvsg	
0000B1E2 0000 0000                  		dc.w SME_qLvsg_26-SME_qLvsg, SME_qLvsg_2C-SME_qLvsg	
0000B1E6 0000                       		dc.w SME_qLvsg_37-SME_qLvsg	
0000B1E8 01                         SME_qLvsg_E:	dc.b 1	
0000B1E9 FC04 0000 F8               		dc.b $FC, 4, 0, 0, $F8	
0000B1EE 01                         SME_qLvsg_14:	dc.b 1	
0000B1EF FC04 0002 F8               		dc.b $FC, 4, 0, 2, $F8	
0000B1F4 01                         SME_qLvsg_1A:	dc.b 1	
0000B1F5 FC04 0004 F8               		dc.b $FC, 4, 0, 4, $F8	
0000B1FA 01                         SME_qLvsg_20:	dc.b 1	
0000B1FB FC04 0006 F8               		dc.b $FC, 4, 0, 6, $F8	
0000B200 01                         SME_qLvsg_26:	dc.b 1	
0000B201 FC00 0006 FC               		dc.b $FC, 0, 0, 6, $FC	
0000B206 02                         SME_qLvsg_2C:	dc.b 2	
0000B207 FC08 0006 F4               		dc.b $FC, 8, 0, 6, $F4	
0000B20C FC04 0007 01               		dc.b $FC, 4, 0, 7, 1	
0000B211 02                         SME_qLvsg_37:	dc.b 2	
0000B212 FC08 0006 F4               		dc.b $FC, 8, 0, 6, $F4	
0000B217 FC04 0007 06               		dc.b $FC, 4, 0, 7, 6	
0000B21C                            		even
0000B21C                            		even
0000B21C                            
0000B21C                            		include	"_incObj\1F Crabmeat.asm"
0000B21C                            ; ---------------------------------------------------------------------------
0000B21C                            ; Object 1F - Crabmeat enemy (GHZ, SYZ)
0000B21C                            ; ---------------------------------------------------------------------------
0000B21C                            
0000B21C                            Crabmeat:
0000B21C 7000                       		moveq	#0,d0
0000B21E 1028 0024                  		move.b	obRoutine(a0),d0
0000B222 323B 0000                  		move.w	Crab_Index(pc,d0.w),d1
0000B226 4EFB 1000                  		jmp	Crab_Index(pc,d1.w)
0000B22A                            ; ===========================================================================
0000B22A                            Crab_Index:
0000B22A 0000                       ptr_Crab_Main:		dc.w Crab_Main-Crab_Index
0000B22C 0000                       ptr_Crab_Action:	dc.w Crab_Action-Crab_Index
0000B22E 0000                       ptr_Crab_Delete:	dc.w Crab_Delete-Crab_Index
0000B230 0000                       ptr_Crab_BallMain:	dc.w Crab_BallMain-Crab_Index
0000B232 0000                       ptr_Crab_BallMove:	dc.w Crab_BallMove-Crab_Index
0000B234                            
0000B234 =00000000                  id_Crab_Main:		equ ptr_Crab_Main-Crab_Index	; 0
0000B234 =00000002                  id_Crab_Action:		equ ptr_Crab_Action-Crab_Index	; 2
0000B234 =00000004                  id_Crab_Delete:		equ ptr_Crab_Delete-Crab_Index	; 4
0000B234 =00000006                  id_Crab_BallMain:	equ ptr_Crab_BallMain-Crab_Index	; 6
0000B234 =00000008                  id_Crab_BallMove:	equ ptr_Crab_BallMove-Crab_Index	; 8
0000B234                            
0000B234 =00000030                  crab_timedelay:	equ $30
0000B234 =00000032                  crab_mode:	equ $32
0000B234                            ; ===========================================================================
0000B234                            
0000B234                            Crab_Main:	; Routine 0
0000B234 117C 0010 0016             		move.b	#$10,obHeight(a0)
0000B23A 117C 0008 0017             		move.b	#8,obWidth(a0)
0000B240 217C 0000 0000 0004        		move.l	#Map_Crab,obMap(a0)
0000B248 317C 0400 0002             		move.w	#$400,obGfx(a0)
0000B24E 117C 0004 0001             		move.b	#4,obRender(a0)
0000B254 317C 0180 0018             		move.w	#$180,obPriority(a0)
0000B25A 117C 0006 0020             		move.b	#6,obColType(a0)
0000B260 117C 0015 0014             		move.b	#$15,obActWid(a0)
0000B266 6100 0000                  		bsr.w	ObjectFall
0000B26A 4EB9 0000 0000             		jsr	(ObjFloorDist).l	; find floor
0000B270 4A41                       		tst.w	d1
0000B272 6A00                       		bpl.s	@floornotfound
0000B274 D368 000C                  		add.w	d1,obY(a0)
0000B278 1143 0026                  		move.b	d3,obAngle(a0)
0000B27C 317C 0000 0012             		move.w	#0,obVelY(a0)
0000B282 5428 0024                  		addq.b	#2,obRoutine(a0)
0000B286                            
0000B286                            	@floornotfound:
0000B286 4E75                       		rts	
0000B288                            ; ===========================================================================
0000B288                            
0000B288                            Crab_Action:	; Routine 2
0000B288 7000                       		moveq	#0,d0
0000B28A 1028 0025                  		move.b	ob2ndRout(a0),d0
0000B28E 323B 0000                  		move.w	@index(pc,d0.w),d1
0000B292 4EBB 1000                  		jsr	@index(pc,d1.w)
0000B296 43F9 0000 0000             		lea	(Ani_Crab).l,a1
0000B29C 6100 0000                  		bsr.w	AnimateSprite
0000B2A0 6000 0000                  		bra.w	RememberState
0000B2A4                            ; ===========================================================================
0000B2A4 0000                       @index:		dc.w @waittofire-@index
0000B2A6 0000                       		dc.w @walkonfloor-@index
0000B2A8                            ; ===========================================================================
0000B2A8                            
0000B2A8                            @waittofire:
0000B2A8 5368 0030                  		subq.w	#1,crab_timedelay(a0) ; subtract 1 from time delay
0000B2AC 6A00                       		bpl.s	@dontmove
0000B2AE 4A28 0001                  		tst.b	obRender(a0)
0000B2B2 6A00                       		bpl.s	@movecrab
0000B2B4 0868 0001 0032             		bchg	#1,crab_mode(a0)
0000B2BA 6600                       		bne.s	@fire
0000B2BC                            
0000B2BC                            	@movecrab:
0000B2BC 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0000B2C0 317C 007F 0030             		move.w	#127,crab_timedelay(a0) ; set time delay to approx 2 seconds
0000B2C6 317C 0080 0010             		move.w	#$80,obVelX(a0)	; move Crabmeat	to the right
0000B2CC 6100 0000                  		bsr.w	Crab_SetAni
0000B2D0 5600                       		addq.b	#3,d0
0000B2D2 1140 001C                  		move.b	d0,obAnim(a0)
0000B2D6 0868 0000 0022             		bchg	#0,obStatus(a0)
0000B2DC 6600                       		bne.s	@noflip
0000B2DE 4468 0010                  		neg.w	obVelX(a0)	; change direction
0000B2E2                            
0000B2E2                            	@dontmove:
0000B2E2                            	@noflip:
0000B2E2 4E75                       		rts	
0000B2E4                            ; ===========================================================================
0000B2E4                            
0000B2E4                            @fire:
0000B2E4 317C 003B 0030             		move.w	#59,crab_timedelay(a0)
0000B2EA 117C 0006 001C             		move.b	#6,obAnim(a0)	; use firing animation
0000B2F0 6100 0000                  		bsr.w	FindFreeObj
0000B2F4 6600                       		bne.s	@failleft
0000B2F6 12BC 0000                  		move.b	#id_Crabmeat,0(a1) ; load left fireball
0000B2FA 137C 0006 0024             		move.b	#id_Crab_BallMain,obRoutine(a1)
0000B300 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000B306 0469 0010 0008             		subi.w	#$10,obX(a1)
0000B30C 3368 000C 000C             		move.w	obY(a0),obY(a1)
0000B312 337C FF00 0010             		move.w	#-$100,obVelX(a1)
0000B318                            
0000B318                            	@failleft:
0000B318 6100 0000                  		bsr.w	FindFreeObj
0000B31C 6600                       		bne.s	@failright
0000B31E 12BC 0000                  		move.b	#id_Crabmeat,0(a1) ; load right fireball
0000B322 137C 0006 0024             		move.b	#id_Crab_BallMain,obRoutine(a1)
0000B328 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000B32E 0669 0010 0008             		addi.w	#$10,obX(a1)
0000B334 3368 000C 000C             		move.w	obY(a0),obY(a1)
0000B33A 337C 0100 0010             		move.w	#$100,obVelX(a1)
0000B340                            
0000B340                            	@failright:
0000B340 4E75                       		rts	
0000B342                            ; ===========================================================================
0000B342                            
0000B342                            @walkonfloor:
0000B342 5368 0030                  		subq.w	#1,crab_timedelay(a0)
0000B346 6B00                       		bmi.s	loc_966E
0000B348 6100 0000                  		bsr.w	SpeedToPos
0000B34C 0868 0000 0032             		bchg	#0,crab_mode(a0)
0000B352 6600                       		bne.s	loc_9654
0000B354 3628 0008                  		move.w	obX(a0),d3
0000B358 0643 0010                  		addi.w	#$10,d3
0000B35C 0828 0000 0022             		btst	#0,obStatus(a0)
0000B362 6700                       		beq.s	loc_9640
0000B364 0443 0020                  		subi.w	#$20,d3
0000B368                            
0000B368                            loc_9640:
0000B368 4EB9 0000 0000             		jsr	(ObjFloorDist2).l
0000B36E 0C41 FFF8                  		cmpi.w	#-8,d1
0000B372 6D00                       		blt.s	loc_966E
0000B374 0C41 000C                  		cmpi.w	#$C,d1
0000B378 6C00                       		bge.s	loc_966E
0000B37A 4E75                       		rts	
0000B37C                            ; ===========================================================================
0000B37C                            
0000B37C                            loc_9654:
0000B37C 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0000B382 D368 000C                  		add.w	d1,obY(a0)
0000B386 1143 0026                  		move.b	d3,obAngle(a0)
0000B38A 6100 0000                  		bsr.w	Crab_SetAni
0000B38E 5600                       		addq.b	#3,d0
0000B390 1140 001C                  		move.b	d0,obAnim(a0)
0000B394 4E75                       		rts	
0000B396                            ; ===========================================================================
0000B396                            
0000B396                            loc_966E:
0000B396 5528 0025                  		subq.b	#2,ob2ndRout(a0)
0000B39A 317C 003B 0030             		move.w	#59,crab_timedelay(a0)
0000B3A0 317C 0000 0010             		move.w	#0,obVelX(a0)
0000B3A6 6100 0000                  		bsr.w	Crab_SetAni
0000B3AA 1140 001C                  		move.b	d0,obAnim(a0)
0000B3AE 4E75                       		rts	
0000B3B0                            ; ---------------------------------------------------------------------------
0000B3B0                            ; Subroutine to	set the	correct	animation for a	Crabmeat
0000B3B0                            ; ---------------------------------------------------------------------------
0000B3B0                            
0000B3B0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000B3B0                            
0000B3B0                            
0000B3B0                            Crab_SetAni:
0000B3B0 7000                       		moveq	#0,d0
0000B3B2 1628 0026                  		move.b	obAngle(a0),d3
0000B3B6 6B00                       		bmi.s	loc_96A4
0000B3B8 0C03 0006                  		cmpi.b	#6,d3
0000B3BC 6500                       		bcs.s	locret_96A2
0000B3BE 7001                       		moveq	#1,d0
0000B3C0 0828 0000 0022             		btst	#0,obStatus(a0)
0000B3C6 6600                       		bne.s	locret_96A2
0000B3C8 7002                       		moveq	#2,d0
0000B3CA                            
0000B3CA                            locret_96A2:
0000B3CA 4E75                       		rts	
0000B3CC                            ; ===========================================================================
0000B3CC                            
0000B3CC                            loc_96A4:
0000B3CC 0C03 00FA                  		cmpi.b	#-6,d3
0000B3D0 6200                       		bhi.s	locret_96B6
0000B3D2 7002                       		moveq	#2,d0
0000B3D4 0828 0000 0022             		btst	#0,obStatus(a0)
0000B3DA 6600                       		bne.s	locret_96B6
0000B3DC 7001                       		moveq	#1,d0
0000B3DE                            
0000B3DE                            locret_96B6:
0000B3DE 4E75                       		rts	
0000B3E0                            ; End of function Crab_SetAni
0000B3E0                            
0000B3E0                            ; ===========================================================================
0000B3E0                            
0000B3E0                            Crab_Delete:	; Routine 4
0000B3E0 6100 0000                  		bsr.w	DeleteObject
0000B3E4 4E75                       		rts	
0000B3E6                            ; ===========================================================================
0000B3E6                            ; ---------------------------------------------------------------------------
0000B3E6                            ; Sub-object - missile that the	Crabmeat throws
0000B3E6                            ; ---------------------------------------------------------------------------
0000B3E6                            
0000B3E6                            Crab_BallMain:	; Routine 6
0000B3E6 5428 0024                  		addq.b	#2,obRoutine(a0)
0000B3EA 217C 0000 0000 0004        		move.l	#Map_Crab,obMap(a0)
0000B3F2 317C 0400 0002             		move.w	#$400,obGfx(a0)
0000B3F8 117C 0004 0001             		move.b	#4,obRender(a0)
0000B3FE 317C 0180 0018             		move.w	#$180,obPriority(a0)
0000B404 117C 0087 0020             		move.b	#$87,obColType(a0)
0000B40A 117C 0008 0014             		move.b	#8,obActWid(a0)
0000B410 317C FC00 0012             		move.w	#-$400,obVelY(a0)
0000B416 117C 0007 001C             		move.b	#7,obAnim(a0)
0000B41C                            
0000B41C                            Crab_BallMove:	; Routine 8
0000B41C 43F9 0000 0000             		lea	(Ani_Crab).l,a1
0000B422 6100 0000                  		bsr.w	AnimateSprite
0000B426 6100 0000                  		bsr.w	ObjectFall
0000B42A 6100 0000                  		bsr.w	DisplaySprite
0000B42E 3038 F72E                  		move.w	(v_limitbtm2).w,d0
0000B432 0640 00E0                  		addi.w	#$E0,d0
0000B436 B068 000C                  		cmp.w	obY(a0),d0	; has object moved below the level boundary?
0000B43A 6500                       		bcs.s	@delete		; if yes, branch
0000B43C 4E75                       		rts	
0000B43E                            
0000B43E                            	@delete:
0000B43E 6000 0000                  		bra.w	DeleteObject
0000B43E 6000 0000                  		bra.w	DeleteObject
0000B442                            		include	"_anim\Crabmeat.asm"
0000B442                            ; ---------------------------------------------------------------------------
0000B442                            ; Animation script - Crabmeat enemy
0000B442                            ; ---------------------------------------------------------------------------
0000B442 0000 0000 0000             Ani_Crab:	dc.w @stand-Ani_Crab, @standslope-Ani_Crab, @standsloperev-Ani_Crab
0000B448 0000 0000 0000             		dc.w @walk-Ani_Crab, @walkslope-Ani_Crab, @walksloperev-Ani_Crab
0000B44E 0000 0000                  		dc.w @firing-Ani_Crab, @ball-Ani_Crab
0000B452 0F00 FF                    @stand:		dc.b $F, 0, afEnd
0000B456 00                         		even
0000B456 0F02 FF                    @standslope:	dc.b $F, 2, afEnd
0000B45A 00                         		even
0000B45A 0F22 FF                    @standsloperev:	dc.b $F, $22, afEnd
0000B45E 00                         		even
0000B45E 0F01 2100 FF               @walk:		dc.b $F, 1, $21, 0, afEnd
0000B464 00                         		even
0000B464 0F21 0302 FF               @walkslope:	dc.b $F, $21, 3, 2, afEnd
0000B46A 00                         		even
0000B46A 0F01 2322 FF               @walksloperev:	dc.b $F, 1, $23, $22, afEnd
0000B470 00                         		even
0000B470 0F04 FF                    @firing:	dc.b $F, 4, afEnd
0000B474 00                         		even
0000B474 0105 06FF                  @ball:		dc.b 1,	5, 6, afEnd
0000B478                            		even
0000B478                            		even
0000B478                            Map_Crab:	include	"_maps\Crabmeat.asm"
0000B478                            ; ---------------------------------------------------------------------------
0000B478                            ; Sprite mappings - Crabmeat enemy (GHZ, SYZ)
0000B478                            ; ---------------------------------------------------------------------------
0000B478                            Map_Crab_internal:
0000B478 0000                       		dc.w @stand-Map_Crab_internal
0000B47A 0000                       		dc.w @walk-Map_Crab_internal
0000B47C 0000                       		dc.w @slope1-Map_Crab_internal
0000B47E 0000                       		dc.w @slope2-Map_Crab_internal
0000B480 0000                       		dc.w @firing-Map_Crab_internal
0000B482 0000                       		dc.w @ball1-Map_Crab_internal
0000B484 0000                       		dc.w @ball2-Map_Crab_internal
0000B486 04                         @stand:		dc.b 4
0000B487 F009 0000 E8               		dc.b $F0, 9, 0,	0, $E8	; standing/middle walking frame
0000B48C F009 0800 00               		dc.b $F0, 9, 8,	0, 0
0000B491 0005 0006 F0               		dc.b 0,	5, 0, 6, $F0
0000B496 0005 0806 00               		dc.b 0,	5, 8, 6, 0
0000B49B 04                         @walk:		dc.b 4
0000B49C F009 000A E8               		dc.b $F0, 9, 0,	$A, $E8	; walking
0000B4A1 F009 0010 00               		dc.b $F0, 9, 0,	$10, 0
0000B4A6 0005 0016 F0               		dc.b 0,	5, 0, $16, $F0
0000B4AB 0009 001A 00               		dc.b 0,	9, 0, $1A, 0
0000B4B0 04                         @slope1:	dc.b 4
0000B4B1 EC09 0000 E8               		dc.b $EC, 9, 0,	0, $E8	; walking on slope
0000B4B6 EC09 0800 00               		dc.b $EC, 9, 8,	0, 0
0000B4BB FC05 0806 00               		dc.b $FC, 5, 8,	6, 0
0000B4C0 FC06 0020 F0               		dc.b $FC, 6, 0,	$20, $F0
0000B4C5 04                         @slope2:	dc.b 4
0000B4C6 EC09 000A E8               		dc.b $EC, 9, 0,	$A, $E8	; walking on slope
0000B4CB EC09 0010 00               		dc.b $EC, 9, 0,	$10, 0
0000B4D0 FC09 0026 00               		dc.b $FC, 9, 0,	$26, 0
0000B4D5 FC06 002C F0               		dc.b $FC, 6, 0,	$2C, $F0
0000B4DA 06                         @firing:	dc.b 6
0000B4DB F004 0032 F0               		dc.b $F0, 4, 0,	$32, $F0 ; firing projectiles
0000B4E0 F004 0832 00               		dc.b $F0, 4, 8,	$32, 0
0000B4E5 F809 0034 E8               		dc.b $F8, 9, 0,	$34, $E8
0000B4EA F809 0834 00               		dc.b $F8, 9, 8,	$34, 0
0000B4EF 0804 003A F0               		dc.b 8,	4, 0, $3A, $F0
0000B4F4 0804 083A 00               		dc.b 8,	4, 8, $3A, 0
0000B4F9 01                         @ball1:		dc.b 1
0000B4FA F805 003C F8               		dc.b $F8, 5, 0,	$3C, $F8 ; projectile
0000B4FF 01                         @ball2:		dc.b 1
0000B500 F805 0040 F8               		dc.b $F8, 5, 0,	$40, $F8 ; projectile
0000B506 00                         		even
0000B506 00                         		even
0000B506                            		include	"_incObj\06 Mozzietron.asm"
0000B506                            ; ===========================================================================
0000B506                            ; ---------------------------------------------------------------------------
0000B506                            ; Object 06 - Mozzietron enemy	(GHZ)
0000B506                            ; ---------------------------------------------------------------------------
0000B506                            
0000B506                            Mozzietron:					; XREF: Obj_Index
0000B506 7000                       		moveq	#0,d0
0000B508 1028 0024                  		move.b	$24(a0),d0
0000B50C 323B 0000                  		move.w	MozIndex(pc,d0.w),d1
0000B510 4EFB 1000                  		jmp	MozIndex(pc,d1.w)
0000B514                            ; ===========================================================================
0000B514 0000                       MozIndex:	dc.w MozMain-MozIndex
0000B516 0000                       		dc.w MozAction-MozIndex
0000B518 0000                       		dc.w MozDelete-MozIndex
0000B51A                            ; ===========================================================================
0000B51A                            
0000B51A                            MozMain:				; XREF: MozIndex
0000B51A 5428 0024                  		addq.b	#2,$24(a0)
0000B51E 217C 0000 0000 0004        		move.l	#Map_Mozzietron,4(a0)
0000B526 317C 0444 0002             		move.w	#$444,2(a0)
0000B52C 117C 0004 0001             		move.b	#4,1(a0)
0000B532 317C 0180 0018             		move.w	#$180,obPriority(a0)
0000B538 117C 0005 0020             		move.b	#5,$20(a0) ; hit box
0000B53E 117C 0018 0014             		move.b	#$18,obActWid(a0)
0000B544                            MozAction:				; XREF: MozIndex
0000B544 7000                       		moveq	#0,d0
0000B546 1028 0025                  		move.b	$25(a0),d0
0000B54A 323B 0000                  		move.w	MozIndex2(pc,d0.w),d1
0000B54E 4EBB 1000                  		jsr	MozIndex2(pc,d1.w)
0000B552 43F9 0000 0000             		lea	(Ani_Mozzietron).l,a1
0000B558 6100 0000                  		bsr.w	AnimateSprite
0000B55C 6000 0000                  		bra.w	RememberState
0000B560                            ; ===========================================================================
0000B560 0000                       MozIndex2:	dc.w MozMove-MozIndex2
0000B562 0000                       		dc.w MozChkNrSonic-MozIndex2
0000B564 0000                       		dc.w MozPinned-MozIndex2
0000B566                            ; ===========================================================================
0000B566                            
0000B566                            MozMove:				; XREF: MozIndex2
0000B566 5368 0032                  		subq.w	#1,$32(a0)	; subtract 1 from time delay
0000B56A 6A00                       		bpl.s	locret_986C	; if time remains, branch
0000B56C 0828 0001 0034             		btst	#1,$34(a0)	; is Buzz Bomber near Sonic?
0000B572 6600                       		bne.s	MozFire	; if yes, branch
0000B574 5428 0025                  		addq.b	#2,$25(a0)
0000B578 317C 0064 0032             		move.w	#100,$32(a0)	; set time delay to just over 2	seconds
0000B57E 317C 0100 0010             		move.w	#$100,$10(a0)	; move Buzz Bomber to the right
0000B584 117C 0000 001C             		move.b	#0,$1C(a0)	; use "flying" animation
0000B58A 0828 0000 0022             		btst	#0,$22(a0)	; is Buzz Bomber facing	left?
0000B590 6600                       		bne.s	locret_986C	; if not, branch
0000B592 4468 0010                  		neg.w	$10(a0)		; move Buzz Bomber to the left
0000B596                            
0000B596                            locret_986C:
0000B596 4E75                       		rts	
0000B598                            ; ===========================================================================
0000B598                            
0000B598                            MozFire:				; XREF: MozMove
0000B598 117C 0002 001C             		move.b	#2,$1C(a0)	; use "diving" animation
0000B59E 6100 0000                  		bsr.w	ObjectFall
0000B5A2 4EB9 0000 0000             		jsr     ObjFloorDist ; check distance between object and floor
0000B5A8 4A41                       		tst.w	d1 ; is floor distance positive? 
0000B5AA 6A00                       		bpl.s   @return ; if yes, branch 
0000B5AC 303C 00B6                  		move.w    #$B6,d0
0000B5B0 4EB9 0000 12A0             		jsr    (PlaySound_Special).l ;    play "spikes moving" sound
0000B5B6 117C 0004 0025             		move.b #4,$25(a0) ; set 2nd state to pinned
0000B5BC D368 000C                  		add.w	d1,$C(a0) ; snap to the ground
0000B5C0 4268 0012                  		clr.w	$12(a0) ; clear Y Velocity 
0000B5C4 4228 0015                  		clr.b	$15(a0) ; $15(a0) is unused in this object, except this line
0000B5C8                            		@return:
0000B5C8 4E75                       	    		rts
0000B5CA                            		
0000B5CA                            
0000B5CA                            ; ===========================================================================
0000B5CA                            
0000B5CA                            MozPinned:
0000B5CA 4E75                               rts
0000B5CC                                    
0000B5CC                            ; ===========================================================================
0000B5CC                            
0000B5CC                            MozChkDel:				; XREF: Obj55_DropFly
0000B5CC 4A28 0001                  		tst.b	1(a0)
0000B5D0 6A00 0000                  		bpl.w	DeleteObject
0000B5D4 4E75                       		rts	
0000B5D6                            ; ===========================================================================
0000B5D6                            
0000B5D6                            MozChkNrSonic:			; XREF: MozIndex2
0000B5D6                            ;		subq.w	#1,$32(a0)	; subtract 1 from time delay
0000B5D6 6B00                       		bmi.s	MozChgDir
0000B5D8 6100 0000                  		bsr.w	SpeedToPos
0000B5DC 4A28 0034                  		tst.b	$34(a0)
0000B5E0 6600                       		bne.s	locret_992A
0000B5E2 3038 D008                  		move.w	($FFFFD008).w,d0
0000B5E6 9068 0008                  		sub.w	8(a0),d0
0000B5EA 6A00                       		bpl.s	MozSetNrSonic
0000B5EC 4440                       		neg.w	d0
0000B5EE                            
0000B5EE                            MozSetNrSonic:
0000B5EE 0C40 0005                  		cmpi.w	#$05,d0		; is Buzz Bomber within	$05 pixels of Sonic?
0000B5F2 6400                       		bcc.s	locret_992A	; if not, branch
0000B5F4 4A28 0001                  		tst.b	1(a0)
0000B5F8 6A00                       		bpl.s	locret_992A
0000B5FA 117C 0002 0034             		move.b	#2,$34(a0)	; set Buzz Bomber to "near Sonic"
0000B600 317C 001D 0032             		move.w	#29,$32(a0)	; set time delay to half a second
0000B606 117C 0002 001C             		move.b	#2,$1C(a0)	; use "firing" animation
0000B60C 6000                       		bra.s	MozStop
0000B60E                            ; ===========================================================================
0000B60E                            
0000B60E                            MozChgDir:				; XREF: MozChkNrSonic
0000B60E 117C 0000 0034             		move.b	#0,$34(a0)	; set Buzz Bomber to "normal"
0000B614 0868 0000 0022             		bchg	#0,$22(a0)	; change direction
0000B61A 317C 003B 0032             		move.w	#59,$32(a0)
0000B620                            
0000B620                            MozStop:				; XREF: MozSetNrSonic
0000B620 5528 0025                  		subq.b	#2,$25(a0)	; run "MozFire" routine
0000B624 317C 0000 0010             		move.w	#0,$10(a0)	; stop Buzz Bomber moving
0000B62A 117C 0000 001C             		move.b	#0,$1C(a0)	; use "hovering" animation
0000B630                            
0000B630                            locret_992A:
0000B630 4E75                       		rts	
0000B632                            ; ===========================================================================
0000B632                            
0000B632                            MozDelete:				; XREF: MozIndex
0000B632 6100 0000                  		bsr.w	DeleteObject
0000B636 4E75                       		rts	
0000B636 4E75                       		rts	
0000B638                            		include	"_incObj\22 Buzz Bomber.asm"
0000B638                            ; ===========================================================================
0000B638                            ; ---------------------------------------------------------------------------
0000B638                            ; Object 22 - Buzz Bomber enemy	(GHZ, MZ, SYZ)
0000B638                            ; ---------------------------------------------------------------------------
0000B638                            
0000B638                            BuzzBomber:
0000B638 7000                       		moveq	#0,d0
0000B63A 1028 0024                  		move.b	obRoutine(a0),d0
0000B63E 323B 0000                  		move.w	Buzz_Index(pc,d0.w),d1
0000B642 4EFB 1000                  		jmp	Buzz_Index(pc,d1.w)
0000B646                            ; ===========================================================================
0000B646 0000                       Buzz_Index:	dc.w Buzz_Main-Buzz_Index
0000B648 0000                       		dc.w Buzz_Action-Buzz_Index
0000B64A 0000                       		dc.w Buzz_Delete-Buzz_Index
0000B64C                            
0000B64C =00000032                  buzz_timedelay:	equ $32
0000B64C =00000034                  buzz_buzzstatus:	equ $34
0000B64C =0000003C                  buzz_parent:	equ $3C
0000B64C                            ; ===========================================================================
0000B64C                            
0000B64C                            Buzz_Main:	; Routine 0
0000B64C 5428 0024                  		addq.b	#2,obRoutine(a0)
0000B650 217C 0000 0000 0004        		move.l	#Map_Buzz,obMap(a0)
0000B658 317C 0444 0002             		move.w	#$444,obGfx(a0)
0000B65E 117C 0004 0001             		move.b	#4,obRender(a0)
0000B664 317C 0180 0018             		move.w	#$180,obPriority(a0)
0000B66A 117C 0008 0020             		move.b	#8,obColType(a0)
0000B670 117C 0018 0014             		move.b	#$18,obActWid(a0)
0000B676                            
0000B676                            Buzz_Action:	; Routine 2
0000B676 7000                       		moveq	#0,d0
0000B678 1028 0025                  		move.b	ob2ndRout(a0),d0
0000B67C 323B 0000                  		move.w	@index(pc,d0.w),d1
0000B680 4EBB 1000                  		jsr	@index(pc,d1.w)
0000B684 43F9 0000 0000             		lea	(Ani_Buzz).l,a1
0000B68A 6100 0000                  		bsr.w	AnimateSprite
0000B68E 6000 0000                  		bra.w	RememberState
0000B692                            ; ===========================================================================
0000B692 0000                       @index:		dc.w @move-@index
0000B694 0000                       		dc.w @chknearsonic-@index
0000B696                            ; ===========================================================================
0000B696                            
0000B696                            @move:
0000B696 5368 0032                  		subq.w	#1,buzz_timedelay(a0) ; subtract 1 from time delay
0000B69A 6A00                       		bpl.s	@noflip		; if time remains, branch
0000B69C 0828 0001 0034             		btst	#1,buzz_buzzstatus(a0) ; is Buzz Bomber near Sonic?
0000B6A2 6600                       		bne.s	@fire		; if yes, branch
0000B6A4 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0000B6A8 317C 007F 0032             		move.w	#127,buzz_timedelay(a0) ; set time delay to just over 2 seconds
0000B6AE 317C 0400 0010             		move.w	#$400,obVelX(a0) ; move Buzz Bomber to the right
0000B6B4 117C 0001 001C             		move.b	#1,obAnim(a0)	; use "flying" animation
0000B6BA 0828 0000 0022             		btst	#0,obStatus(a0)	; is Buzz Bomber facing	left?
0000B6C0 6600                       		bne.s	@noflip		; if not, branch
0000B6C2 4468 0010                  		neg.w	obVelX(a0)	; move Buzz Bomber to the left
0000B6C6                            
0000B6C6                            	@noflip:
0000B6C6 4E75                       		rts	
0000B6C8                            ; ===========================================================================
0000B6C8                            
0000B6C8                            	@fire:
0000B6C8 6100 0000                  		bsr.w	FindFreeObj
0000B6CC 6600                       		bne.s	@fail
0000B6CE 12BC 0000                  		move.b	#id_Missile,0(a1) ; load missile object
0000B6D2 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000B6D8 3368 000C 000C             		move.w	obY(a0),obY(a1)
0000B6DE 0669 001C 000C             		addi.w	#$1C,obY(a1)
0000B6E4 337C 0200 0012             		move.w	#$200,obVelY(a1) ; move missile downwards
0000B6EA 337C 0200 0010             		move.w	#$200,obVelX(a1) ; move missile to the right
0000B6F0 303C 0018                  		move.w	#$18,d0
0000B6F4 0828 0000 0022             		btst	#0,obStatus(a0)	; is Buzz Bomber facing	left?
0000B6FA 6600                       		bne.s	@noflip2	; if not, branch
0000B6FC 4440                       		neg.w	d0
0000B6FE 4469 0010                  		neg.w	obVelX(a1)	; move missile to the left
0000B702                            
0000B702                            	@noflip2:
0000B702 D169 0008                  		add.w	d0,obX(a1)
0000B706 1368 0022 0022             		move.b	obStatus(a0),obStatus(a1)
0000B70C 337C 000E 0032             		move.w	#$E,buzz_timedelay(a1)
0000B712 2348 003C                  		move.l	a0,buzz_parent(a1)
0000B716 117C 0001 0034             		move.b	#1,buzz_buzzstatus(a0) ; set to "already fired" to prevent refiring
0000B71C 317C 003B 0032             		move.w	#59,buzz_timedelay(a0)
0000B722 117C 0002 001C             		move.b	#2,obAnim(a0)	; use "firing" animation
0000B728                            
0000B728                            	@fail:
0000B728 4E75                       		rts	
0000B72A                            ; ===========================================================================
0000B72A                            
0000B72A                            @chknearsonic:
0000B72A 5368 0032                  		subq.w	#1,buzz_timedelay(a0) ; subtract 1 from time delay
0000B72E 6B00                       		bmi.s	@chgdirection
0000B730 6100 0000                  		bsr.w	SpeedToPos
0000B734 4A28 0034                  		tst.b	buzz_buzzstatus(a0)
0000B738 6600                       		bne.s	@keepgoing
0000B73A 3038 D008                  		move.w	(v_player+obX).w,d0
0000B73E 9068 0008                  		sub.w	obX(a0),d0
0000B742 6A00                       		bpl.s	@isleft
0000B744 4440                       		neg.w	d0
0000B746                            
0000B746                            	@isleft:
0000B746 0C40 0060                  		cmpi.w	#$60,d0		; is Buzz Bomber within	$60 pixels of Sonic?
0000B74A 6400                       		bcc.s	@keepgoing	; if not, branch
0000B74C 4A28 0001                  		tst.b	obRender(a0)
0000B750 6A00                       		bpl.s	@keepgoing
0000B752 117C 0002 0034             		move.b	#2,buzz_buzzstatus(a0) ; set Buzz Bomber to "near Sonic"
0000B758 317C 001D 0032             		move.w	#29,buzz_timedelay(a0) ; set time delay to half a second
0000B75E 6000                       		bra.s	@stop
0000B760                            ; ===========================================================================
0000B760                            
0000B760                            	@chgdirection:
0000B760 117C 0000 0034             		move.b	#0,buzz_buzzstatus(a0) ; set Buzz Bomber to "normal"
0000B766 0868 0000 0022             		bchg	#0,obStatus(a0)	; change direction
0000B76C 317C 003B 0032             		move.w	#59,buzz_timedelay(a0)
0000B772                            
0000B772                            	@stop:
0000B772 5528 0025                  		subq.b	#2,ob2ndRout(a0)
0000B776 317C 0000 0010             		move.w	#0,obVelX(a0)	; stop Buzz Bomber moving
0000B77C 117C 0000 001C             		move.b	#0,obAnim(a0)	; use "hovering" animation
0000B782                            
0000B782                            @keepgoing:
0000B782 4E75                       		rts	
0000B784                            ; ===========================================================================
0000B784                            
0000B784                            Buzz_Delete:	; Routine 4
0000B784 6100 0000                  		bsr.w	DeleteObject
0000B788 4E75                       		rts	
0000B788 4E75                       		rts	
0000B78A                            		include	"_incObj\23 Buzz Bomber Missile.asm"
0000B78A                            ; ---------------------------------------------------------------------------
0000B78A                            ; Object 23 - missile that Buzz	Bomber throws
0000B78A                            ; ---------------------------------------------------------------------------
0000B78A                            
0000B78A                            Missile:
0000B78A 7000                       		moveq	#0,d0
0000B78C 1028 0024                  		move.b	obRoutine(a0),d0
0000B790 323B 0000                  		move.w	Msl_Index(pc,d0.w),d1
0000B794 4EFB 1000                  		jmp	Msl_Index(pc,d1.w)
0000B798                            ; ===========================================================================
0000B798 0000                       Msl_Index:	dc.w Msl_Main-Msl_Index
0000B79A 0000                       		dc.w Msl_Animate-Msl_Index
0000B79C 0000                       		dc.w Msl_FromBuzz-Msl_Index
0000B79E 0000                       		dc.w Msl_Delete-Msl_Index
0000B7A0 0000                       		dc.w Msl_FromNewt-Msl_Index
0000B7A2                            
0000B7A2 =0000003C                  msl_parent:	equ $3C
0000B7A2                            ; ===========================================================================
0000B7A2                            
0000B7A2                            Msl_Main:	; Routine 0
0000B7A2 5368 0032                  		subq.w	#1,$32(a0)
0000B7A6 6A00                       		bpl.s	Msl_ChkCancel
0000B7A8 5428 0024                  		addq.b	#2,obRoutine(a0)
0000B7AC 217C 0000 0000 0004        		move.l	#Map_Missile,obMap(a0)
0000B7B4 317C 2444 0002             		move.w	#$2444,obGfx(a0)
0000B7BA 117C 0004 0001             		move.b	#4,obRender(a0)
0000B7C0 317C 0180 0018             		move.w	#$180,obPriority(a0)
0000B7C6 117C 0008 0014             		move.b	#8,obActWid(a0)
0000B7CC 0228 0003 0022             		andi.b	#3,obStatus(a0)
0000B7D2 4A28 0028                  		tst.b	obSubtype(a0)	; was object created by	a Newtron?
0000B7D6 6700                       		beq.s	Msl_Animate	; if not, branch
0000B7D8                            
0000B7D8 117C 0008 0024             		move.b	#8,obRoutine(a0) ; run "Msl_FromNewt" routine
0000B7DE 117C 0087 0020             		move.b	#$87,obColType(a0)
0000B7E4 117C 0001 001C             		move.b	#1,obAnim(a0)
0000B7EA 6000                       		bra.s	Msl_Animate2
0000B7EC                            ; ===========================================================================
0000B7EC                            
0000B7EC                            Msl_Animate:	; Routine 2
0000B7EC 6100                       		bsr.s	Msl_ChkCancel
0000B7EE 43F9 0000 0000             		lea	(Ani_Missile).l,a1
0000B7F4 6100 0000                  		bsr.w	AnimateSprite
0000B7F8 6000 0000                  		bra.w	DisplaySprite
0000B7FC                            
0000B7FC                            ; ---------------------------------------------------------------------------
0000B7FC                            ; Subroutine to	check if the Buzz Bomber which fired the missile has been
0000B7FC                            ; destroyed, and if it has, then cancel	the missile
0000B7FC                            ; ---------------------------------------------------------------------------
0000B7FC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000B7FC                            
0000B7FC                            
0000B7FC                            Msl_ChkCancel:
0000B7FC 2268 003C                  		movea.l	msl_parent(a0),a1
0000B800 0C11 0000                  		cmpi.b	#id_ExplosionItem,0(a1) ; has Buzz Bomber been destroyed?
0000B804 6700                       		beq.s	Msl_Delete	; if yes, branch
0000B806 4E75                       		rts	
0000B808                            ; End of function Msl_ChkCancel
0000B808                            
0000B808                            ; ===========================================================================
0000B808                            
0000B808                            Msl_FromBuzz:	; Routine 4
0000B808 0828 0007 0022             		btst	#7,obStatus(a0)
0000B80E 6600                       		bne.s	@explode
0000B810 117C 0087 0020             		move.b	#$87,obColType(a0)
0000B816 117C 0001 001C             		move.b	#1,obAnim(a0)
0000B81C 6100 0000                  		bsr.w	SpeedToPos
0000B820 43F9 0000 0000             		lea	(Ani_Missile).l,a1
0000B826 6100 0000                  		bsr.w	AnimateSprite
0000B82A 6100 0000                  		bsr.w	DisplaySprite
0000B82E 3038 F72E                  		move.w	(v_limitbtm2).w,d0
0000B832 0640 00E0                  		addi.w	#$E0,d0
0000B836 B068 000C                  		cmp.w	obY(a0),d0	; has object moved below the level boundary?
0000B83A 6500                       		bcs.s	Msl_Delete	; if yes, branch
0000B83C 4E75                       		rts	
0000B83E                            ; ===========================================================================
0000B83E                            
0000B83E                            	@explode:
0000B83E 10BC 0000                  		move.b	#id_MissileDissolve,0(a0) ; change object to an explosion (Obj24)
0000B842 117C 0000 0024             		move.b	#0,obRoutine(a0)
0000B848 6000 F1D8                  		bra.w	MissileDissolve
0000B84C                            ; ===========================================================================
0000B84C                            
0000B84C                            Msl_Delete:	; Routine 6
0000B84C 6100 0000                  		bsr.w	DeleteObject
0000B850 4E75                       		rts	
0000B852                            ; ===========================================================================
0000B852                            
0000B852                            Msl_FromNewt:	; Routine 8
0000B852 4A28 0001                  		tst.b	obRender(a0)
0000B856 6AF4                       		bpl.s	Msl_Delete
0000B858 6100 0000                  		bsr.w	SpeedToPos
0000B85C                            
0000B85C                            Msl_Animate2:
0000B85C 43F9 0000 0000             		lea	(Ani_Missile).l,a1
0000B862 6100 0000                  		bsr.w	AnimateSprite
0000B866 6100 0000                  		bsr.w	DisplaySprite
0000B86A 4E75                       		rts	
0000B86A 4E75                       		rts	
0000B86C                            		include	"_anim\Mozzietron.asm"
0000B86C                            ; ---------------------------------------------------------------------------
0000B86C                            ; Animation script - Buzz Bomber enemy
0000B86C                            ; ---------------------------------------------------------------------------
0000B86C 0000                       Ani_Mozzietron:	dc.w byte_9A1E-Ani_Mozzietron;0
0000B86E 0000                       		dc.w byte_9A22-Ani_Mozzietron;1
0000B870 0000                       		dc.w byte_9A26-Ani_Mozzietron;2
0000B872 0100 01FF                  byte_9A1E:	dc.b 1,	0, 1, $FF
0000B876 0102 03FF                  byte_9A22:	dc.b 1,	2, 3, $FF
0000B87A 0502 0304 05FE 01          byte_9A26:	dc.b 5, 2, 3, 4, 5, $FE, 1
0000B882 00                         		even
0000B882 00                         		even
0000B882                            		include	"_anim\Buzz Bomber.asm"
0000B882                            ; ---------------------------------------------------------------------------
0000B882                            ; Animation script - Buzz Bomber enemy
0000B882                            ; ---------------------------------------------------------------------------
0000B882 0000                       Ani_Buzz:	dc.w @fly1-Ani_Buzz
0000B884 0000                       		dc.w @fly2-Ani_Buzz
0000B886 0000                       		dc.w @fires-Ani_Buzz
0000B888 0100 01FF                  @fly1:		dc.b 1,	0, 1, afEnd
0000B88C 0102 03FF                  @fly2:		dc.b 1,	2, 3, afEnd
0000B890 0104 05FF                  @fires:		dc.b 1,	4, 5, afEnd
0000B894                            		even
0000B894                            		even
0000B894                            		include	"_anim\Buzz Bomber Missile.asm"
0000B894                            ; ---------------------------------------------------------------------------
0000B894                            ; Animation script - missile that Buzz Bomber throws
0000B894                            ; ---------------------------------------------------------------------------
0000B894 0000                       Ani_Missile:	dc.w @flare-Ani_Missile
0000B896 0000                       		dc.w @missile-Ani_Missile
0000B898 0700 01FC                  @flare:		dc.b 7,	0, 1, afRoutine
0000B89C 0102 03FF                  @missile:	dc.b 1,	2, 3, afEnd
0000B8A0                            		even
0000B8A0                            		even
0000B8A0                            Map_Mozzietron:	include	"_maps\Mozzietron.asm"
0000B8A0                            ; --------------------------------------------------------------------------------
0000B8A0                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0000B8A0                            ; --------------------------------------------------------------------------------
0000B8A0                            
0000B8A0                            SME_qvHIs:	
0000B8A0 0000 0000                  		dc.w SME_qvHIs_C-SME_qvHIs, SME_qvHIs_17-SME_qvHIs	
0000B8A4 0000 0000                  		dc.w SME_qvHIs_1D-SME_qvHIs, SME_qvHIs_28-SME_qvHIs	
0000B8A8 0000 0000                  		dc.w SME_qvHIs_38-SME_qvHIs, SME_qvHIs_4D-SME_qvHIs	
0000B8AC 02                         SME_qvHIs_C:	dc.b 2	
0000B8AD FD0C 2000 F0               		dc.b $FD, $C, $20, 0, $F0	
0000B8B2 ED09 2004 F8               		dc.b $ED, 9, $20, 4, $F8	
0000B8B7 01                         SME_qvHIs_17:	dc.b 1	
0000B8B8 F80D 200A F0               		dc.b $F8, $D, $20, $A, $F0	
0000B8BD 02                         SME_qvHIs_1D:	dc.b 2	
0000B8BE E90A 2012 F8               		dc.b $E9, $A, $20, $12, $F8	
0000B8C3 F901 201B F0               		dc.b $F9, 1, $20, $1B, $F0	
0000B8C8 03                         SME_qvHIs_28:	dc.b 3	
0000B8C9 DF07 2025 FB               		dc.b $DF, 7, $20, $25, $FB	
0000B8CE E700 2030 0B               		dc.b $E7, 0, $20, $30, $B	
0000B8D3 FF00 002D FB               		dc.b $FF, 0, 0, $2D, $FB	
0000B8D8 04                         SME_qvHIs_38:	dc.b 4	
0000B8D9 E509 201D F4               		dc.b $E5, 9, $20, $1D, $F4	
0000B8DE F501 2023 FC               		dc.b $F5, 1, $20, $23, $FC	
0000B8E3 F500 202E F4               		dc.b $F5, 0, $20, $2E, $F4	
0000B8E8 F500 202F 04               		dc.b $F5, 0, $20, $2F, 4	
0000B8ED 04                         SME_qvHIs_4D:	dc.b 4	
0000B8EE E509 201D F4               		dc.b $E5, 9, $20, $1D, $F4	
0000B8F3 F501 2023 FC               		dc.b $F5, 1, $20, $23, $FC	
0000B8F8 F500 202E F4               		dc.b $F5, 0, $20, $2E, $F4	
0000B8FD F500 202F 04               		dc.b $F5, 0, $20, $2F, 4	
0000B902                            		even
0000B902                            		even
0000B902                            Map_Buzz:	include	"_maps\Buzz Bomber.asm"
0000B902                            ; --------------------------------------------------------------------------------
0000B902                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0000B902                            ; --------------------------------------------------------------------------------
0000B902                            
0000B902                            SME_yccqJ:	
0000B902 0000 0000                  		dc.w SME_yccqJ_C-SME_yccqJ, SME_yccqJ_2B-SME_yccqJ	
0000B906 0000 0000                  		dc.w SME_yccqJ_4A-SME_yccqJ, SME_yccqJ_69-SME_yccqJ	
0000B90A 0000 0000                  		dc.w SME_yccqJ_88-SME_yccqJ, SME_yccqJ_AC-SME_yccqJ	
0000B90E 06                         SME_yccqJ_C:	dc.b 6	
0000B90F F409 2000 E8               		dc.b $F4, 9, $20, 0, $E8	
0000B914 F409 200F 00               		dc.b $F4, 9, $20, $F, 0	
0000B919 0408 2015 E8               		dc.b 4, 8, $20, $15, $E8	
0000B91E 0404 2018 00               		dc.b 4, 4, $20, $18, 0	
0000B923 EE08 201A E9               		dc.b $EE, 8, $20, $1A, $E9	
0000B928 EE04 201D 01               		dc.b $EE, 4, $20, $1D, 1	
0000B92D 06                         SME_yccqJ_2B:	dc.b 6	
0000B92E F409 2000 E8               		dc.b $F4, 9, $20, 0, $E8	
0000B933 F409 200F 00               		dc.b $F4, 9, $20, $F, 0	
0000B938 0408 2015 E8               		dc.b 4, 8, $20, $15, $E8	
0000B93D 0404 2018 00               		dc.b 4, 4, $20, $18, 0	
0000B942 F108 201F EA               		dc.b $F1, 8, $20, $1F, $EA	
0000B947 F104 2022 02               		dc.b $F1, 4, $20, $22, 2	
0000B94C 06                         SME_yccqJ_4A:	dc.b 6	
0000B94D F409 2000 E8               		dc.b $F4, 9, $20, 0, $E8	
0000B952 F409 200F 00               		dc.b $F4, 9, $20, $F, 0	
0000B957 0408 2015 E8               		dc.b 4, 8, $20, $15, $E8	
0000B95C 0404 2018 00               		dc.b 4, 4, $20, $18, 0	
0000B961 EE08 201A E9               		dc.b $EE, 8, $20, $1A, $E9	
0000B966 EE04 201D 01               		dc.b $EE, 4, $20, $1D, 1	
0000B96B 06                         SME_yccqJ_69:	dc.b 6	
0000B96C F409 2000 E8               		dc.b $F4, 9, $20, 0, $E8	
0000B971 F409 200F 00               		dc.b $F4, 9, $20, $F, 0	
0000B976 0408 2015 E8               		dc.b 4, 8, $20, $15, $E8	
0000B97B 0404 2018 00               		dc.b 4, 4, $20, $18, 0	
0000B980 F108 201F EA               		dc.b $F1, 8, $20, $1F, $EA	
0000B985 F104 2022 02               		dc.b $F1, 4, $20, $22, 2	
0000B98A 07                         SME_yccqJ_88:	dc.b 7	
0000B98B F40D 2000 EC               		dc.b $F4, $D, $20, 0, $EC	
0000B990 040C 2008 EC               		dc.b 4, $C, $20, 8, $EC	
0000B995 0C00 200C 04               		dc.b $C, 0, $20, $C, 4	
0000B99A EE04 201D 04               		dc.b $EE, 4, $20, $1D, 4	
0000B99F 0C00 200E FC               		dc.b $C, 0, $20, $E, $FC	
0000B9A4 0C00 200D F4               		dc.b $C, 0, $20, $D, $F4	
0000B9A9 EE08 201A EC               		dc.b $EE, 8, $20, $1A, $EC	
0000B9AE 04                         SME_yccqJ_AC:	dc.b 4	
0000B9AF F40D 2000 EC               		dc.b $F4, $D, $20, 0, $EC	
0000B9B4 040C 2008 EC               		dc.b 4, $C, $20, 8, $EC	
0000B9B9 0C00 200C 04               		dc.b $C, 0, $20, $C, 4	
0000B9BE 0C04 200D F4               		dc.b $C, 4, $20, $D, $F4	
0000B9C4 00                         		even
0000B9C4 00                         		even
0000B9C4                            Map_Missile:	include	"_maps\Buzz Bomber Missile.asm"
0000B9C4                            ; ---------------------------------------------------------------------------
0000B9C4                            ; Sprite mappings - missile that Buzz Bomber throws
0000B9C4                            ; ---------------------------------------------------------------------------
0000B9C4                            Map_Missile_internal:
0000B9C4 0000                       		dc.w @Flare1-Map_Missile_internal
0000B9C6 0000                       		dc.w @Flare2-Map_Missile_internal
0000B9C8 0000                       		dc.w @Ball1-Map_Missile_internal
0000B9CA 0000                       		dc.w @Ball2-Map_Missile_internal
0000B9CC 01                         @Flare1:	dc.b 1
0000B9CD F805 0024 F8               		dc.b $F8, 5, 0,	$24, $F8 ; buzz bomber firing flare
0000B9D2 01                         @Flare2:	dc.b 1
0000B9D3 F805 0028 F8               		dc.b $F8, 5, 0,	$28, $F8
0000B9D8 01                         @Ball1:		dc.b 1
0000B9D9 F805 002C F8               		dc.b $F8, 5, 0,	$2C, $F8 ; missile itself
0000B9DE 01                         @Ball2:		dc.b 1
0000B9DF F805 0033 F8               		dc.b $F8, 5, 0,	$33, $F8
0000B9E4                            		even
0000B9E4                            		even
0000B9E4                            
0000B9E4                            		include	"_incObj\25 & 37 Rings.asm"
0000B9E4                            ; ---------------------------------------------------------------------------
0000B9E4                            ; Object 25 - rings
0000B9E4                            ; ---------------------------------------------------------------------------
0000B9E4                            
0000B9E4                            Rings:
0000B9E4 7000                       		moveq	#0,d0
0000B9E6 1028 0024                  		move.b	obRoutine(a0),d0
0000B9EA 323B 0000                  		move.w	Ring_Index(pc,d0.w),d1
0000B9EE 4EFB 1000                  		jmp	Ring_Index(pc,d1.w)
0000B9F2                            ; ===========================================================================
0000B9F2                            Ring_Index:
0000B9F2 0000                       ptr_Ring_Main:		dc.w Ring_Main-Ring_Index
0000B9F4 0000                       ptr_Ring_Animate:	dc.w Ring_Animate-Ring_Index
0000B9F6 0000                       ptr_Ring_Collect:	dc.w Ring_Collect-Ring_Index
0000B9F8 0000                       ptr_Ring_Sparkle:	dc.w Ring_Sparkle-Ring_Index
0000B9FA 0000                       ptr_Ring_Delete:	dc.w Ring_Delete-Ring_Index
0000B9FC 0000                       ptr_Ring_Attract:	dc.w Ring_Attract-Ring_Index
0000B9FE 0000                       ptr_Ring_Collect1:	dc.w Ring_Collect-Ring_Index
0000BA00 0000                       ptr_Ring_Sparkle1:	dc.w Ring_Sparkle-Ring_Index
0000BA02 0000                       ptr_Ring_Delete1:	dc.w Ring_Delete-Ring_Index
0000BA04                            
0000BA04 =00000000                  id_Ring_Main:			equ ptr_Ring_Main-Ring_Index	; 0
0000BA04 =00000002                  id_Ring_Animate:		equ ptr_Ring_Animate-Ring_Index	; 2
0000BA04 =00000004                  id_Ring_Collect:		equ ptr_Ring_Collect-Ring_Index	; 4
0000BA04 =00000006                  id_Ring_Sparkle:		equ ptr_Ring_Sparkle-Ring_Index	; 6
0000BA04 =00000008                  id_Ring_Delete:			equ ptr_Ring_Delete-Ring_Index	; 8
0000BA04 =0000000A                  id_Ring_Attract:		equ ptr_Ring_Attract-Ring_Index	; $A
0000BA04 =00000004                  id_Ring_Collect1:		equ ptr_Ring_Collect-Ring_Index	; $C
0000BA04 =00000006                  id_Ring_Sparkle1:		equ ptr_Ring_Sparkle-Ring_Index	; $E
0000BA04 =00000008                  id_Ring_Delete1:		equ ptr_Ring_Delete-Ring_Index	; $10
0000BA04                            ; ---------------------------------------------------------------------------
0000BA04                            ; Distances between rings (format: horizontal, vertical)
0000BA04                            ; ---------------------------------------------------------------------------
0000BA04 1000                       Ring_PosData:	dc.b $10, 0		; horizontal tight
0000BA06 1800                       		dc.b $18, 0		; horizontal normal
0000BA08 2000                       		dc.b $20, 0		; horizontal wide
0000BA0A 0010                       		dc.b 0,	$10		; vertical tight
0000BA0C 0018                       		dc.b 0,	$18		; vertical normal
0000BA0E 0020                       		dc.b 0,	$20		; vertical wide
0000BA10 1010                       		dc.b $10, $10		; diagonal
0000BA12 1818                       		dc.b $18, $18
0000BA14 2020                       		dc.b $20, $20
0000BA16 F010                       		dc.b $F0, $10
0000BA18 E818                       		dc.b $E8, $18
0000BA1A E020                       		dc.b $E0, $20
0000BA1C 1008                       		dc.b $10, 8
0000BA1E 1810                       		dc.b $18, $10
0000BA20 F008                       		dc.b $F0, 8
0000BA22 E810                       		dc.b $E8, $10
0000BA24                            ; ===========================================================================
0000BA24                            
0000BA24                            Ring_Main:	; Routine 0
0000BA24 45F8 FC00                  		lea	(v_objstate).w,a2
0000BA28 7000                       		moveq	#0,d0
0000BA2A 1028 0023                  		move.b	obRespawnNo(a0),d0
0000BA2E 45F2 0002                  		lea	2(a2,d0.w),a2
0000BA32 1812                       		move.b	(a2),d4
0000BA34 1228 0028                  		move.b	obSubtype(a0),d1
0000BA38 1001                       		move.b	d1,d0
0000BA3A 0241 0007                  		andi.w	#7,d1
0000BA3E 0C41 0007                  		cmpi.w	#7,d1
0000BA42 6600                       		bne.s	loc_9B80
0000BA44 7206                       		moveq	#6,d1
0000BA46                            
0000BA46                            	loc_9B80:
0000BA46 4841                       		swap	d1
0000BA48 323C 0000                  		move.w	#0,d1
0000BA4C E808                       		lsr.b	#4,d0
0000BA4E D040                       		add.w	d0,d0
0000BA50 1A3B 00B2                  		move.b	Ring_PosData(pc,d0.w),d5 ; load ring spacing data
0000BA54 4885                       		ext.w	d5
0000BA56 1C3B 00AD                  		move.b	Ring_PosData+1(pc,d0.w),d6
0000BA5A 4886                       		ext.w	d6
0000BA5C 2248                       		movea.l	a0,a1
0000BA5E 3428 0008                  		move.w	obX(a0),d2
0000BA62 3628 000C                  		move.w	obY(a0),d3
0000BA66 E20C                       		lsr.b	#1,d4
0000BA68 6500                       		bcs.s	loc_9C02
0000BA6A 0892 0007                  		bclr	#7,(a2)
0000BA6E 6000                       		bra.s	loc_9BBA
0000BA70                            ; ===========================================================================
0000BA70                            
0000BA70                            Ring_MakeRings:
0000BA70 4841                       		swap	d1
0000BA72 E20C                       		lsr.b	#1,d4
0000BA74 6500                       		bcs.s	loc_9C02
0000BA76 0892 0007                  		bclr	#7,(a2)
0000BA7A 6100 0000                  		bsr.w	FindFreeObj
0000BA7E 6600                       		bne.s	loc_9C0E
0000BA80                            
0000BA80                            loc_9BBA:
0000BA80 12BC 0000                  		move.b	#id_Rings,0(a1)	; load ring object
0000BA84 5429 0024                  		addq.b	#2,obRoutine(a1)
0000BA88 3342 0008                  		move.w	d2,obX(a1)	; set x-axis position based on d2
0000BA8C 3368 0008 0032             		move.w	obX(a0),$32(a1)
0000BA92 3343 000C                  		move.w	d3,obY(a1)	; set y-axis position based on d3
0000BA96 237C 0000 0000 0004        		move.l	#Map_Ring,obMap(a1)
0000BA9E 337C 2798 0002             		move.w	#$2798,obGfx(a1)
0000BAA4 137C 0004 0001             		move.b	#4,obRender(a1)
0000BAAA 337C 0100 0018             		move.w	#$100,obPriority(a1)
0000BAB0 137C 0047 0020             		move.b	#$47,obColType(a1)
0000BAB6 137C 0008 0014             		move.b	#8,obActWid(a1)
0000BABC 1368 0023 0023             		move.b	obRespawnNo(a0),obRespawnNo(a1)
0000BAC2 1341 0034                  		move.b	d1,$34(a1)
0000BAC6                            
0000BAC6                            loc_9C02:
0000BAC6 5241                       		addq.w	#1,d1
0000BAC8 D445                       		add.w	d5,d2		; add ring spacing value to d2
0000BACA D646                       		add.w	d6,d3		; add ring spacing value to d3
0000BACC 4841                       		swap	d1
0000BACE 51C9 FFA0                  		dbf	d1,Ring_MakeRings ; repeat for	number of rings
0000BAD2                            
0000BAD2                            loc_9C0E:
0000BAD2 0812 0000                  		btst	#0,(a2)
0000BAD6 6600 0000                  		bne.w	DeleteObject
0000BADA                            
0000BADA                            Ring_Animate:	; Routine 2
0000BADA 4A38 F5C9                  		tst.b	(v_gshield).w
0000BADE 6700                       		beq.s	@skip
0000BAE0 4A28 0001                  		tst.b	obRender(a0)
0000BAE4 6A00                       		bpl.s	@skip
0000BAE6                            		
0000BAE6 43F8 D000                  		lea (v_player).w,a1
0000BAEA                            		
0000BAEA 3029 0008                  		move.w	obX(a1),d0	; load Sonic's x-axis position
0000BAEE 9068 0008                  		sub.w	obX(a0),d0
0000BAF2 6A00                       		bpl.s	@a1
0000BAF4 4440                       		neg.w	d0
0000BAF6                            		
0000BAF6                            	@a1:
0000BAF6 0C40 0040                  		cmpi.w	#$40,d0
0000BAFA 6200                       		bhi.s	@skip
0000BAFC                            		
0000BAFC 3029 000C                  		move.w	obY(a1),d0	; load Sonic's y-axis position
0000BB00 9068 000C                  		sub.w	obY(a0),d0
0000BB04 6A00                       		bpl.s	@a2
0000BB06 4440                       		neg.w	d0
0000BB08                            		
0000BB08                            	@a2:
0000BB08 0C40 0040                  		cmpi.w	#$40,d0
0000BB0C 6200                       		bhi.s	@skip
0000BB0E                            		
0000BB0E 117C 000A 0024             		move.b	#$A,obRoutine(a0)
0000BB14 45F8 FC00                  		lea	(v_objstate).w,a2
0000BB18 7000                       		moveq	#0,d0
0000BB1A 1028 0023                  		move.b	obRespawnNo(a0),d0
0000BB1E 1228 0034                  		move.b	$34(a0),d1
0000BB22 03F2 0002                  		bset	d1,2(a2,d0.w)
0000BB26                            		
0000BB26                            	@skip:
0000BB26 1178 FEC5 001A             		move.b	(v_ani2_frame).w,obFrame(a0) ; set frame
0000BB2C 6100 0000                  		bsr.w	DisplaySprite
0000BB4C 4E75                       		rts	
0000BB4E                            ; ===========================================================================
0000BB4E                            
0000BB4E                            Ring_Collect:	; Routine 4
0000BB4E 5428 0024                  		addq.b	#2,obRoutine(a0)
0000BB52 117C 0000 0020             		move.b	#0,obColType(a0)
0000BB58 317C 0080 0018             		move.w	#$80,obPriority(a0)
0000BB5E 6100 0000                  		bsr.w	CollectRing
0000BB62 45F8 FC00                  		lea	(v_objstate).w,a2
0000BB66 7000                       		moveq	#0,d0
0000BB68 1028 0023                  		move.b	obRespawnNo(a0),d0
0000BB6C 1228 0034                  		move.b	$34(a0),d1
0000BB70 03F2 0002                  		bset	d1,2(a2,d0.w)
0000BB74                            
0000BB74                            Ring_Sparkle:	; Routine 6
0000BB74 43F9 0000 0000             		lea	(Ani_Ring).l,a1
0000BB7A 6100 0000                  		bsr.w	AnimateSprite
0000BB7E 6000 0000                  		bra.w	DisplaySprite
0000BB82                            ; ===========================================================================
0000BB82                            
0000BB82                            Ring_Delete:	; Routine 8
0000BB82 6000 0000                  		bra.w	DeleteObject
0000BB86                            
0000BB86                            Ring_Attract:	; Routine $A
0000BB86 4A38 F5C9                  		tst.b	(v_gshield).w
0000BB8A 6600                       		bne.s	@skip
0000BB8C 10BC 0000                  		move.b	#id_RingLoss,0(a0)
0000BB90 117C 0002 0024             		move.b	#2,obRoutine(a0)
0000BB96 11FC 00FF FEC6             		move.b	#-1,(v_ani3_time).w
0000BB9C 6000                       		bra.s	@display
0000BB9E                            		
0000BB9E                            	@skip:
0000BB9E 323C 0030                  		move.w	#$30,d1	; horizontal
0000BBA2 3038 D008                  		move.w	(v_player+obX).w,d0
0000BBA6 B068 0008                  		cmp.w	obX(a0),d0
0000BBAA 6400                       		bcc.s	@a1
0000BBAC 4441                       		neg.w	d1
0000BBAE 4A68 0010                  		tst.w	obVelX(a0)
0000BBB2 6B00                       		bmi.s	@a2
0000BBB4 D241                       		add.w	d1,d1
0000BBB6 D241                       		add.w	d1,d1
0000BBB8 6000                       		bra.s	@a2
0000BBBA                            
0000BBBA                            	@a1:
0000BBBA 4A68 0010                  		tst.w	obVelX(a0)
0000BBBE 6A00                       		bpl.s	@a2
0000BBC0 D241                       		add.w	d1,d1
0000BBC2 D241                       		add.w	d1,d1
0000BBC4                            
0000BBC4                            	@a2:
0000BBC4 D368 0010                  		add.w	d1,obVelX(a0)
0000BBC8 323C 0030                  		move.w	#$30,d1	; vertical
0000BBCC 3038 D00C                  		move.w	(v_player+obY).w,d0
0000BBD0 B068 000C                  		cmp.w	obY(a0),d0
0000BBD4 6400                       		bcc.s	@a3
0000BBD6 4441                       		neg.w	d1
0000BBD8 4A68 0012                  		tst.w	obVelY(a0)
0000BBDC 6B00                       		bmi.s	@a4
0000BBDE D241                       		add.w	d1,d1
0000BBE0 D241                       		add.w	d1,d1
0000BBE2 6000                       		bra.s	@a4
0000BBE4                            
0000BBE4                            	@a3:
0000BBE4 4A68 0012                  		tst.w	obVelY(a0)
0000BBE8 6A00                       		bpl.s	@a4
0000BBEA D241                       		add.w	d1,d1
0000BBEC D241                       		add.w	d1,d1
0000BBEE                            
0000BBEE                            	@a4:
0000BBEE D368 0012                  		add.w	d1,obVelY(a0)
0000BBF2 6100 0000                  		bsr.w	SpeedToPos
0000BBF6                            		
0000BBF6                            	@display:
0000BBF6 1178 FEC3 001A             		move.b	(v_ani1_frame).w,obFrame(a0) ; set frame
0000BBFC 6000 0000                  		bra.w	DisplaySprite
0000BC00                            
0000BC00                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000BC00                            
0000BC00                            
0000BC00                            CollectRing:
0000BC00 5278 FE20                  		addq.w	#1,(v_rings).w	; add 1 to rings
0000BC04 0038 0001 FE1D             		ori.b	#1,(f_ringcount).w ; update the rings counter
0000BC0A 303C 0000                  		move.w	#sfx_Ring,d0	; play ring sound
0000BC0E 0C78 0064 FE20             		cmpi.w	#100,(v_rings).w ; do you have < 100 rings?
0000BC14 6500                       		bcs.s	@playsnd	; if yes, branch
0000BC16 08F8 0001 FE1B             		bset	#1,(v_lifecount).w ; update lives counter
0000BC1C 6700                       		beq.s	@got100
0000BC1E 0C78 00C8 FE20             		cmpi.w	#200,(v_rings).w ; do you have < 200 rings?
0000BC24 6500                       		bcs.s	@playsnd	; if yes, branch
0000BC26 08F8 0002 FE1B             		bset	#2,(v_lifecount).w ; update lives counter
0000BC2C 6600                       		bne.s	@playsnd
0000BC2E                            
0000BC2E                            	@got100:
0000BC2E 5238 FE12                  		addq.b	#1,(v_lives).w	; add 1 to the number of lives you have
0000BC32 5238 FE1C                  		addq.b	#1,(f_lifecount).w ; update the lives counter
0000BC36 303C 0000                  		move.w	#bgm_ExtraLife,d0 ; play extra life music
0000BC3A                            		
0000BC3A                            
0000BC3A                            	@playsnd:
0000BC3A 4EF9 0000 12A0             		jmp	(PlaySound_Special).l
0000BC40                            ; End of function CollectRing
0000BC40                            
0000BC40                            ; ===========================================================================
0000BC40                            ; ---------------------------------------------------------------------------
0000BC40                            ; Object 37 - rings flying out of Sonic	when he's hit
0000BC40                            ; ---------------------------------------------------------------------------
0000BC40                            
0000BC40                            RingLoss:
0000BC40 7000                       		moveq	#0,d0
0000BC42 1028 0024                  		move.b	obRoutine(a0),d0
0000BC46 323B 0000                  		move.w	RLoss_Index(pc,d0.w),d1
0000BC4A 4EFB 1000                  		jmp	RLoss_Index(pc,d1.w)
0000BC4E                            ; ===========================================================================
0000BC4E 0000                       RLoss_Index:	dc.w RLoss_Count-RLoss_Index
0000BC50 0000                       		dc.w RLoss_Bounce-RLoss_Index
0000BC52 0000                       		dc.w RLoss_Collect-RLoss_Index
0000BC54 0000                       		dc.w RLoss_Sparkle-RLoss_Index
0000BC56 0000                       		dc.w RLoss_Delete-RLoss_Index
0000BC58                            ; ===========================================================================
0000BC58                            
0000BC58                            RLoss_Count:	; Routine 0
0000BC58 2248                       		movea.l	a0,a1
0000BC5A 7A00                       		moveq	#0,d5
0000BC5C 3A38 FE20                  		move.w	(v_rings).w,d5	; check number of rings you have
0000BC60 47F9 0000 0000                     lea     SpillRingData,a3        ; load the address of the array in a3
0000BC66 7018                               moveq   #24,d0                  ; lose a max of 24 rings
0000BC68 45F8 D000                          lea     (v_player).w,a2    ; a2=character
0000BC6C 082A 0006 0022                     btst    #6,obStatus(a2)           ; is Sonic underwater?
0000BC72 6700                               beq.s   @cont                       ; if not, branch
0000BC74 47F9 0000 0000                     lea    SpillRingData_Water,a3        ; load the UNDERWATER address of the array in a3
0000BC7A 7010                               moveq   #16,d0                   ; lose a max of 16 rings underwater
0000BC7C                            @cont:
0000BC7C BA40                               cmp.w   d0,d5
0000BC7E 6500                               bcs.s   @belowmax
0000BC80 3A00                               move.w  d0,d5
0000BC82                            
0000BC82                            @belowmax:
0000BC82 5345                               subq.w  #1,d5
0000BC84 383C 0288                          move.w  #$288,d4
0000BC88 6000                       		bra.s	@makerings
0000BC8A                            ; ===========================================================================
0000BC8A                            
0000BC8A                            	@loop:
0000BC8A 6100 0000                  		bsr.w	FindFreeObj
0000BC8E 6600 0000                  		bne.w	@resetcounter
0000BC92                            
0000BC92                            @makerings:
0000BC92 12BC 0000                  		move.b	#id_RingLoss,0(a1) ; load bouncing ring object
0000BC96 5429 0024                  		addq.b	#2,obRoutine(a1)
0000BC9A 137C 0008 0016             		move.b	#8,obHeight(a1)
0000BCA0 137C 0008 0017             		move.b	#8,obWidth(a1)
0000BCA6 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000BCAC 3368 000C 000C             		move.w	obY(a0),obY(a1)
0000BCB2 237C 0000 0000 0004        		move.l	#Map_Ring,obMap(a1)
0000BCBA 337C 2798 0002             		move.w	#$2798,obGfx(a1)
0000BCC0 137C 0004 0001             		move.b	#4,obRender(a1)
0000BCC6 137C 0047 0020             		move.b	#$47,obColType(a1)
0000BCCC 137C 0008 0014             		move.b	#8,obActWid(a1)
0000BCD2 4A38 F64C                  		tst.b	($FFFFF64C).w		; Does the level have water?
0000BCD6 6700                       		beq.s	@skiphalvingvel		; If not, branch and skip underwater checks
0000BCD8 3C38 F646                  		move.w	($FFFFF646).w,d6	; Move water level to d6
0000BCDC BC68 000C                  		cmp.w	obY(a0),d6		; Is the ring object underneath the water level?
0000BCE0 6E00                       		bgt.s	@skiphalvingvel		; If not, branch and skip underwater commands
0000BCE2 E240                       		asr.w	d0			; Half d0. Makes the ring's x_vel bounce to the left/right slower
0000BCE4 E241                       		asr.w	d1			; Half d1. Makes the ring's y_vel bounce up/down slower
0000BCE6                            @skiphalvingvel:
0000BCE6 335B 0010                  		move.w  (a3)+,obVelX(a1)         ; move the data contained in the array to the x velocity and increment the address in a3
0000BCEA 335B 0012                  		move.w  (a3)+,obVelY(a1)         ; move the data contained in the array to the y velocity and increment the address in a3	
0000BCEE 51CD FF9A                  		dbf	d5,@loop	; repeat for number of rings (max 31)
0000BCF2                            
0000BCF2                            @resetcounter:
0000BCF2 31FC 0000 FE20             		move.w	#0,(v_rings).w	; reset number of rings to zero
0000BCF8 11FC 0080 FE1D             		move.b	#$80,(f_ringcount).w ; update ring counter
0000BCFE 11FC 0000 FE1B             		move.b	#0,(v_lifecount).w
0000BD04 70FF                               moveq   #-1,d0                  ; Move #-1 to d0
0000BD06 1140 001F                          move.b  d0,obDelayAni(a0)       ; Move d0 to new timer
0000BD0A 11C0 FEC6                          move.b  d0,(v_ani3_time).w      ; Move d0 to old timer (for animated purposes)
0000BD18                            
0000BD18                            RLoss_Bounce:	; Routine 2
0000BD18 1178 FEC7 001A             		move.b	(v_ani3_frame).w,obFrame(a0)
0000BD1E 6100 0000                  		bsr.w	SpeedToPos
0000BD22 0668 0018 0012             		addi.w	#$18,obVelY(a0)
0000BD28 4A38 F64C                  		tst.b	($FFFFF64C).w		; Does the level have water?
0000BD2C 6700                       		beq.s	@skipbounceslow		; If not, branch and skip underwater checks
0000BD2E 3C38 F646                  		move.w	($FFFFF646).w,d6	; Move water level to d6
0000BD32 BC68 000C                  		cmp.w	obY(a0),d6		; Is the ring object underneath the water level?
0000BD36 6E00                       		bgt.s	@skipbounceslow		; If not, branch and skip underwater commands
0000BD38 0468 000E 0012             		subi.w	#$E,obVelY(a0)		; Reduce gravity by $E ($18-$E=$A), giving the underwater effect
0000BD3E                            	@skipbounceslow:
0000BD3E 6B00                       		bmi.s	@chkdel
0000BD40 1038 FE0F                  		move.b	(v_vbla_byte).w,d0
0000BD44 D007                       		add.b	d7,d0
0000BD46 0200 0003                  		andi.b	#3,d0
0000BD4A 6600                       		bne.s	@chkdel
0000BD4C 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0000BD52 4A41                       		tst.w	d1
0000BD54 6A00                       		bpl.s	@chkdel
0000BD56 D368 000C                  		add.w	d1,obY(a0)
0000BD5A 3028 0012                  		move.w	obVelY(a0),d0
0000BD5E E440                       		asr.w	#2,d0
0000BD60 9168 0012                  		sub.w	d0,obVelY(a0)
0000BD64 4468 0012                  		neg.w	obVelY(a0)
0000BD68                            
0000BD68                            	@chkdel:
0000BD68 5328 001F                  		subq.b  #1,obDelayAni(a0)  ; Subtract 1   ; RHS Ring Timer fix
0000BD6C 6700 0000                          beq.w   DeleteObject       ; If 0, delete ; RHS Ring Timer fix
0000BD70 3038 F72E                  		move.w	(v_limitbtm2).w,d0
0000BD74 0640 00E0                  		addi.w	#$E0,d0
0000BD78 B068 000C                  		cmp.w	obY(a0),d0	   ; has object moved below level boundary?
0000BD7C 6500 0000                  		bcs.w	RLoss_Delete	   ; if yes, branch
0000BD80 4A38 F5C9                  		tst.b	(v_gshield).w
0000BD84 6700                       		beq.s	@skip
0000BD86 4A28 0001                  		tst.b	obRender(a0)
0000BD8A 6A00                       		bpl.s	@skip
0000BD8C                            		
0000BD8C 43F8 D000                  		lea (v_player).w,a1
0000BD90                            		
0000BD90 3029 0008                  		move.w	obX(a1),d0	; load Sonic's x-axis position
0000BD94 9068 0008                  		sub.w	obX(a0),d0
0000BD98 6A00                       		bpl.s	@a1
0000BD9A 4440                       		neg.w	d0
0000BD9C                            		
0000BD9C                            	@a1:
0000BD9C 0C40 00A0                  		cmpi.w	#$A0,d0
0000BDA0 6200                       		bhi.s	@skip
0000BDA2                            		
0000BDA2 3029 000C                  		move.w	obY(a1),d0	; load Sonic's y-axis position
0000BDA6 9068 000C                  		sub.w	obY(a0),d0
0000BDAA 6A00                       		bpl.s	@a2
0000BDAC 4440                       		neg.w	d0
0000BDAE                            		
0000BDAE                            	@a2:
0000BDAE 0C40 00A0                  		cmpi.w	#$A0,d0
0000BDB2 6200                       		bhi.s	@skip
0000BDB4                            		
0000BDB4 117C 000A 0024             		move.b	#$A,obRoutine(a0)
0000BDBA 10BC 0000                  		move.b	#id_Rings,0(a0)
0000BDBE                            		
0000BDBE                            	@skip:		
0000BDBE 43F8 AD80                          lea     v_spritequeue+$180,a1
0000BDC2 D2FC 0080                          adda.w  #$80,a1
0000BDC6 0C51 007E                          cmpi.w  #$7E,(a1)
0000BDCA 6400                               bcc.s   @cont
0000BDCC 5451                               addq.w  #2,(a1)
0000BDCE D2D1                               adda.w  (a1),a1
0000BDD0 3288                               move.w  a0,(a1)
0000BDD2                            		
0000BDD2                            	@cont:
0000BDD2 4E75                               rts		
0000BDD4                            ; ===========================================================================
0000BDD4                            
0000BDD4                            RLoss_Collect:	; Routine 4
0000BDD4 5428 0024                  		addq.b	#2,obRoutine(a0)
0000BDD8 117C 0000 0020             		move.b	#0,obColType(a0)
0000BDDE 6100 FE20                  		bsr.w	CollectRing
0000BDE2                            
0000BDE2                            RLoss_Sparkle:	; Routine 6
0000BDE2 43F9 0000 0000             		lea	(Ani_Ring).l,a1
0000BDE8 6100 0000                  		bsr.w	AnimateSprite
0000BDEC 43F8 AD80                  		lea     v_spritequeue+$180,a1
0000BDF0 0C51 007E                          cmpi.w  #$7E,(a1)
0000BDF4 6400                               bcc.s   @cont
0000BDF6 5451                               addq.w  #2,(a1)
0000BDF8 D2D1                               adda.w  (a1),a1
0000BDFA 3288                               move.w  a0,(a1)
0000BDFC                            			
0000BDFC                            	@cont:
0000BDFC 4E75                               rts
0000BDFE                            ; ===========================================================================
0000BDFE                            
0000BDFE                            RLoss_Delete:	; Routine 8
0000BDFE 6000 0000                  		bra.w	DeleteObject
0000BE02                            
0000BE02                            ; ----------------------------------------------------------------------------------------------
0000BE02                            ; Ring Spawn Array 
0000BE02                            ; ----------------------------------------------------------------------------------------------
0000BE02                            
0000BE02 FF3C FC14 00C4 FC14 FDC8+  SpillRingData:  dc.w    $FF3C,$FC14, $00C4,$FC14, $FDC8,$FCB0, $0238,$FCB0 ; 4
0000BE12 FCB0 FDC8 0350 FDC8 FC14+                  dc.w    $FCB0,$FDC8, $0350,$FDC8, $FC14,$FF3C, $03EC,$FF3C ; 8
0000BE22 FC14 00C4 03EC 00C4 FCB0+                  dc.w    $FC14,$00C4, $03EC,$00C4, $FCB0,$0238, $0350,$0238 ; 12
0000BE32 FDC8 0350 0238 0350 FF3C+                  dc.w    $FDC8,$0350, $0238,$0350, $FF3C,$03EC, $00C4,$03EC ; 16
0000BE42 FF9E FE0A 0062 FE0A FEE4+                  dc.w    $FF9E,$FE0A, $0062,$FE0A, $FEE4,$FE58, $011C,$FE58 ; 20
0000BE52 FE58 FEE4 01A8 FEE4 FE0A+                  dc.w    $FE58,$FEE4, $01A8,$FEE4, $FE0A,$FF9E, $01F6,$FF9E ; 24
0000BE62 FE0A 0062 01F6 0062 FE58+                  dc.w    $FE0A,$0062, $01F6,$0062, $FE58,$011C, $01A8,$011C ; 28
0000BE72 FEE4 01A8 011C 01A8 FF9E+                  dc.w    $FEE4,$01A8, $011C,$01A8, $FF9E,$0156, $0062,$0156 ; 32
0000BE82                                            even
0000BE82                            ; ===========================================================================
0000BE82                            ; -------------------------------------------------------------------------------------
0000BE82                            ; Ring Spawn Array - Underwater - same thing as I said above. Edit at your own risk!!!
0000BE82                            ; -------------------------------------------------------------------------------------
0000BE82                            
0000BE82                            SpillRingData_Water:
0000BE82 FF9C FE08 0064 FE08 FEE4+  				dc.w    $FF9C,$FE08, $0064,$FE08, $FEE4,$FE58, $011C,$FE58 ; 4
0000BE92 FE58 FEE4 01A8 FEE4 FE08+                  dc.w    $FE58,$FEE4, $01A8,$FEE4, $FE08,$FF9C, $01F8,$FF9C ; 8
0000BEA2 FE08 0060 01F8 0060 FE58+                  dc.w    $FE08,$0060, $01F8,$0060, $FE58,$011C, $01A8,$011C ; 12
0000BEB2 FEE4 01A8 011C 01A8 FF9C+                  dc.w    $FEE4,$01A8, $011C,$01A8, $FF9C,$01F4, $0064,$01F4 ; 16
0000BEC2 FFCE FF04 0032 FF04 FF72+                  dc.w    $FFCE,$FF04, $0032,$FF04, $FF72,$FF2C, $008E,$FF2C ; 20
0000BED2 FF2C FF72 00D4 FF72 FF04+                  dc.w    $FF2C,$FF72, $00D4,$FF72, $FF04,$FFCE, $00FC,$FFCE ; 24
0000BEE2 FF04 0030 00FC 0030 FF2C+                  dc.w    $FF04,$0030, $00FC,$0030, $FF2C,$008E, $00D4,$008E ; 28
0000BEF2 FF72 00D4 008E 00D4 FFCE+                  dc.w    $FF72,$00D4, $008E,$00D4, $FFCE,$00FA, $0032,$00FA ; 32
0000BF02                                            even
0000BF02                            ; ===========================================================================				
0000BF02                            ; ===========================================================================				
0000BF02                            		include	"_incObj\4B Giant Ring.asm"
0000BF02                            ; ---------------------------------------------------------------------------
0000BF02                            ; Object 4B - giant ring for entry to special stage
0000BF02                            ; ---------------------------------------------------------------------------
0000BF02                            
0000BF02                            GiantRing:
0000BF02 7000                       		moveq	#0,d0
0000BF04 1028 0024                  		move.b	obRoutine(a0),d0
0000BF08 323B 0000                  		move.w	GRing_Index(pc,d0.w),d1
0000BF0C 4EFB 1000                  		jmp	GRing_Index(pc,d1.w)
0000BF10                            ; ===========================================================================
0000BF10 0000                       GRing_Index:	dc.w GRing_Main-GRing_Index
0000BF12 0000                       		dc.w GRing_Animate-GRing_Index
0000BF14 0000                       		dc.w GRing_Collect-GRing_Index
0000BF16 0000                       		dc.w GRing_Delete-GRing_Index
0000BF18                            ; ===========================================================================
0000BF18                            
0000BF18                            GRing_Main:    ; Routine 0
0000BF18 217C 0000 0000 0004        		move.l	#Map_GRing,obMap(a0)
0000BF20 317C 2400 0002             		move.w	#$2400,obGfx(a0)
0000BF26 0028 0004 0001             		ori.b	#4,obRender(a0)
0000BF2C 117C 0040 0014             		move.b	#$40,obActWid(a0)
0000BF32 4A28 0001                  		tst.b	obRender(a0)
0000BF36 6A00                       		bpl.s	GRing_Animate
0000BF38 0C38 0006 FE57             		cmpi.b	#6,(v_emeralds).w ; do you have 6 emeralds?
0000BF3E 6700 0000                  		beq.w	GRing_Delete    ; if yes, branch
0000BF42 0C38 0002 F5C3             		cmpi.b	#2,(f_emeraldm).w    ;TIS Did you  hit the S-Monitor?
0000BF48 6700                       		beq.s	GRing_Okay    ; if yes, branch
0000BF4A                            
0000BF4A 4E75                       		rts    
0000BF4C                            ; ===========================================================================
0000BF4C                            
0000BF4C                            GRing_Okay:
0000BF4C 5428 0024                  		addq.b	#2,obRoutine(a0)
0000BF50 317C 0100 0018             		move.w	#$100,obPriority(a0)
0000BF56 117C 0052 0020             		move.b	#$52,obColType(a0)
0000BF5C 31FC 0C40 F7BE             		move.w	#$C40,(v_gfxbigring).w	; Signal that Art_BigRing should be loaded ($C40 is the size of Art_BigRing)
0000BF62                            
0000BF62                            GRing_Animate:	; Routine 2
0000BF62 1178 FEC3 001A             		move.b	(v_ani1_frame).w,obFrame(a0)
0000BF86 6000 0000                  		bra.w	DisplaySprite
0000BF8A                            ; ===========================================================================
0000BF8A                            
0000BF8A                            GRing_Collect:	; Routine 4
0000BF8A 5528 0024                  		subq.b	#2,obRoutine(a0)
0000BF8E 117C 0000 0020             		move.b	#0,obColType(a0)
0000BF94 6100 0000                  		bsr.w	FindFreeObj
0000BF98 6600 0000                  		bne.w	GRing_PlaySnd
0000BF9C 12BC 0000                  		move.b	#id_RingFlash,0(a1) ; load giant ring flash object
0000BFA0 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000BFA6 3368 000C 000C             		move.w	obY(a0),obY(a1)
0000BFAC 2348 003C                  		move.l	a0,$3C(a1)
0000BFB0 3038 D008                  		move.w	(v_player+obX).w,d0
0000BFB4 B068 0008                  		cmp.w	obX(a0),d0	; has Sonic come from the left?
0000BFB8 6500                       		bcs.s	GRing_PlaySnd	; if yes, branch
0000BFBA 08E9 0000 0001             		bset	#0,obRender(a1)	; reverse flash	object	
0000BFC0 11FC 0001 FE57             		move.b  #1,(v_emeralds).w
0000BFC6 11FC 0000 F5C3             		move.b  #0,(f_emeraldm).w
0000BFCC                            		
0000BFCC                            GRing_PlaySnd:
0000BFD6 608A                       		bra.s	GRing_Animate
0000BFD8                            ; ===========================================================================
0000BFD8                            
0000BFD8                            GRing_Delete:	; Routine 6
0000BFD8 6000 0000                  		bra.w	DeleteObject
0000BFD8 6000 0000                  		bra.w	DeleteObject
0000BFDC                            		include	"_incObj\7C Ring Flash.asm"
0000BFDC                            ; ---------------------------------------------------------------------------
0000BFDC                            ; Object 7C - flash effect when	you collect the	giant ring
0000BFDC                            ; ---------------------------------------------------------------------------
0000BFDC                            
0000BFDC                            RingFlash:
0000BFDC 7000                       		moveq	#0,d0
0000BFDE 1028 0024                  		move.b	obRoutine(a0),d0
0000BFE2 323B 0000                  		move.w	Flash_Index(pc,d0.w),d1
0000BFE6 4EFB 1000                  		jmp	Flash_Index(pc,d1.w)
0000BFEA                            ; ===========================================================================
0000BFEA 0000                       Flash_Index:	dc.w Flash_Main-Flash_Index
0000BFEC 0000                       		dc.w Flash_ChkDel-Flash_Index
0000BFEE 0000                       		dc.w Flash_Delete-Flash_Index
0000BFF0                            ; ===========================================================================
0000BFF0                            
0000BFF0                            Flash_Main:	; Routine 0
0000BFF0 5428 0024                  		addq.b	#2,obRoutine(a0)
0000BFF4 217C 0000 0000 0004        		move.l	#Map_Flash,obMap(a0)
0000BFFC 317C 2462 0002             		move.w	#$2462,obGfx(a0)
0000C002 0028 0004 0001             		ori.b	#4,obRender(a0)
0000C008 317C 0000 0018             		move.w	#0,obPriority(a0)
0000C00E 117C 0020 0014             		move.b	#$20,obActWid(a0)
0000C014 117C 00FF 001A             		move.b	#$FF,obFrame(a0)
0000C01A                            
0000C01A                            Flash_ChkDel:	; Routine 2
0000C01A 6100                       		bsr.s	Flash_Collect
0000C03A 6000 0000                  		bra.w	DisplaySprite
0000C03E                            
0000C03E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000C03E                            
0000C03E                            
0000C03E                            Flash_Collect:
0000C03E 5328 001E                  		subq.b	#1,obTimeFrame(a0)
0000C042 6A00                       		bpl.s	locret_9F76
0000C044 117C 0001 001E             		move.b	#1,obTimeFrame(a0)
0000C04A 5228 001A                  		addq.b	#1,obFrame(a0)
0000C04E 0C28 0008 001A             		cmpi.b	#8,obFrame(a0)	; has animation	finished?
0000C054 6400                       		bcc.s	Flash_End	; if yes, branch
0000C056 0C28 0003 001A             		cmpi.b	#3,obFrame(a0)	; is 3rd frame displayed?
0000C05C 6600                       		bne.s	locret_9F76	; if not, branch
0000C05E 2268 003C                  		movea.l	$3C(a0),a1	; get parent object address
0000C062 137C 0006 0024             		move.b	#6,obRoutine(a1) ; delete parent object
0000C068 11FC 0000 D01C             		move.b	#id_Null,(v_player+obAnim).w ; make Sonic invisible
0000C06E 11FC 0001 F7CD             		move.b	#1,(f_bigring).w ; stop	Sonic getting bonuses
0000C074 4238 FE2D                  		clr.b	(v_invinc).w	; remove invincibility
0000C078 4238 FE2C                  		clr.b	(v_shield).w	; remove shield
0000C07C                            
0000C07C                            locret_9F76:
0000C07C 4E75                       		rts	
0000C07E                            ; ===========================================================================
0000C07E                            
0000C07E                            Flash_End:
0000C07E 5428 0024                  		addq.b	#2,obRoutine(a0)
0000C082 31FC 0000 D000             		move.w	#0,(v_player).w ; remove Sonic object
0000C088 588F                       		addq.l	#4,sp
0000C08A 4E75                       		rts	
0000C08C                            ; End of function Flash_Collect
0000C08C                            
0000C08C                            ; ===========================================================================
0000C08C                            
0000C08C                            Flash_Delete:	; Routine 4
0000C08C 6000 0000                  		bra.w	DeleteObject
0000C08C 6000 0000                  		bra.w	DeleteObject
0000C090                            
0000C090                            		include	"_anim\Rings.asm"
0000C090                            ; ---------------------------------------------------------------------------
0000C090                            ; Animation script - ring
0000C090                            ; ---------------------------------------------------------------------------
0000C090 0000                       Ani_Ring:	dc.w @ring-Ani_Ring
0000C092 0706 0708 09FC             @ring:		dc.b 7,	6, 7, 8, 9, afRoutine
0000C098                            		even
0000C098                            		even
0000C098                            Map_Ring:		include	"_maps\Rings (JP1).asm"
0000C098                            ; --------------------------------------------------------------------------------
0000C098                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0000C098                            ; --------------------------------------------------------------------------------
0000C098                            
0000C098                            SME_aSMQh:	
0000C098 0000 0000                  		dc.w SME_aSMQh_14-SME_aSMQh, SME_aSMQh_1A-SME_aSMQh	
0000C09C 0000 0000                  		dc.w SME_aSMQh_20-SME_aSMQh, SME_aSMQh_26-SME_aSMQh	
0000C0A0 0000 0000                  		dc.w SME_aSMQh_2C-SME_aSMQh, SME_aSMQh_32-SME_aSMQh	
0000C0A4 0000 0000                  		dc.w SME_aSMQh_38-SME_aSMQh, SME_aSMQh_3E-SME_aSMQh	
0000C0A8 0000 0000                  		dc.w SME_aSMQh_44-SME_aSMQh, SME_aSMQh_4A-SME_aSMQh	
0000C0AC 01                         SME_aSMQh_14:	dc.b 1	
0000C0AD F805 0000 F8               		dc.b $F8, 5, 0, 0, $F8	
0000C0B2 01                         SME_aSMQh_1A:	dc.b 1	
0000C0B3 F805 0004 F8               		dc.b $F8, 5, 0, 4, $F8	
0000C0B8 01                         SME_aSMQh_20:	dc.b 1	
0000C0B9 F805 000A F8               		dc.b $F8, 5, 0, $A, $F8	
0000C0BE 01                         SME_aSMQh_26:	dc.b 1	
0000C0BF F801 0008 FC               		dc.b $F8, 1, 0, 8, $FC	
0000C0C4 01                         SME_aSMQh_2C:	dc.b 1	
0000C0C5 F805 080A F8               		dc.b $F8, 5, 8, $A, $F8	
0000C0CA 01                         SME_aSMQh_32:	dc.b 1	
0000C0CB F805 0804 F8               		dc.b $F8, 5, 8, 4, $F8	
0000C0D0 01                         SME_aSMQh_38:	dc.b 1	
0000C0D1 F805 0010 F8               		dc.b $F8, 5, 0, $10, $F8	
0000C0D6 01                         SME_aSMQh_3E:	dc.b 1	
0000C0D7 F805 1810 F8               		dc.b $F8, 5, $18, $10, $F8	
0000C0DC 01                         SME_aSMQh_44:	dc.b 1	
0000C0DD F805 0810 F8               		dc.b $F8, 5, 8, $10, $F8	
0000C0E2 01                         SME_aSMQh_4A:	dc.b 1	
0000C0E3 F805 1010 F8               		dc.b $F8, 5, $10, $10, $F8	
0000C0E8                            		even
0000C0E8                            		even
0000C0E8                            Map_GRing:	include	"_maps\Giant Ring.asm"
0000C0E8                            ; ---------------------------------------------------------------------------
0000C0E8                            ; Sprite mappings - giant ring
0000C0E8                            ; ---------------------------------------------------------------------------
0000C0E8                            Map_GRing_internal:
0000C0E8 0000                       		dc.w byte_9FDA-Map_GRing_internal
0000C0EA 0000                       		dc.w byte_A00D-Map_GRing_internal
0000C0EC 0000                       		dc.w byte_A036-Map_GRing_internal
0000C0EE 0000                       		dc.w byte_A04B-Map_GRing_internal
0000C0F0 0A                         byte_9FDA:	dc.b $A
0000C0F1 E008 0000 E8               		dc.b $E0, 8, 0,	0, $E8	; ring front
0000C0F6 E008 0003 00               		dc.b $E0, 8, 0,	3, 0
0000C0FB E80C 0006 E0               		dc.b $E8, $C, 0, 6, $E0
0000C100 E80C 000A 00               		dc.b $E8, $C, 0, $A, 0
0000C105 F007 000E E0               		dc.b $F0, 7, 0,	$E, $E0
0000C10A F007 0016 10               		dc.b $F0, 7, 0,	$16, $10
0000C10F 100C 001E E0               		dc.b $10, $C, 0, $1E, $E0
0000C114 100C 0022 00               		dc.b $10, $C, 0, $22, 0
0000C119 1808 0026 E8               		dc.b $18, 8, 0,	$26, $E8
0000C11E 1808 0029 00               		dc.b $18, 8, 0,	$29, 0
0000C123 08                         byte_A00D:	dc.b 8
0000C124 E00C 002C F0               		dc.b $E0, $C, 0, $2C, $F0 ; ring angle
0000C129 E808 0030 E8               		dc.b $E8, 8, 0,	$30, $E8
0000C12E E809 0033 00               		dc.b $E8, 9, 0,	$33, 0
0000C133 F007 0039 E8               		dc.b $F0, 7, 0,	$39, $E8
0000C138 F805 0041 08               		dc.b $F8, 5, 0,	$41, 8
0000C13D 0809 0045 00               		dc.b 8,	9, 0, $45, 0
0000C142 1008 004B E8               		dc.b $10, 8, 0,	$4B, $E8
0000C147 180C 004E F0               		dc.b $18, $C, 0, $4E, $F0
0000C14C 04                         byte_A036:	dc.b 4
0000C14D E007 0052 F4               		dc.b $E0, 7, 0,	$52, $F4 ; ring perpendicular
0000C152 E003 0852 04               		dc.b $E0, 3, 8,	$52, 4
0000C157 0007 005A F4               		dc.b 0,	7, 0, $5A, $F4
0000C15C 0003 085A 04               		dc.b 0,	3, 8, $5A, 4
0000C161 08                         byte_A04B:	dc.b 8
0000C162 E00C 082C F0               		dc.b $E0, $C, 8, $2C, $F0 ; ring angle
0000C167 E808 0830 00               		dc.b $E8, 8, 8,	$30, 0
0000C16C E809 0833 E8               		dc.b $E8, 9, 8,	$33, $E8
0000C171 F007 0839 08               		dc.b $F0, 7, 8,	$39, 8
0000C176 F805 0841 E8               		dc.b $F8, 5, 8,	$41, $E8
0000C17B 0809 0845 E8               		dc.b 8,	9, 8, $45, $E8
0000C180 1008 084B 00               		dc.b $10, 8, 8,	$4B, 0
0000C185 180C 084E F0               		dc.b $18, $C, 8, $4E, $F0
0000C18A                            		even
0000C18A                            		even
0000C18A                            Map_Flash:	include	"_maps\Ring Flash.asm"
0000C18A                            ; ---------------------------------------------------------------------------
0000C18A                            ; Sprite mappings - flash effect when you collect the giant ring
0000C18A                            ; ---------------------------------------------------------------------------
0000C18A                            Map_Flash_internal:
0000C18A 0000                       		dc.w byte_A084-Map_Flash_internal
0000C18C 0000                       		dc.w byte_A08F-Map_Flash_internal
0000C18E 0000                       		dc.w byte_A0A4-Map_Flash_internal
0000C190 0000                       		dc.w byte_A0B9-Map_Flash_internal
0000C192 0000                       		dc.w byte_A0CE-Map_Flash_internal
0000C194 0000                       		dc.w byte_A0E3-Map_Flash_internal
0000C196 0000                       		dc.w byte_A0F8-Map_Flash_internal
0000C198 0000                       		dc.w byte_A103-Map_Flash_internal
0000C19A 02                         byte_A084:	dc.b 2
0000C19B E00F 0000 00               		dc.b $E0, $F, 0, 0, 0
0000C1A0 000F 1000 00               		dc.b 0,	$F, $10, 0, 0
0000C1A5 04                         byte_A08F:	dc.b 4
0000C1A6 E00F 0010 F0               		dc.b $E0, $F, 0, $10, $F0
0000C1AB E007 0020 10               		dc.b $E0, 7, 0,	$20, $10
0000C1B0 000F 1010 F0               		dc.b 0,	$F, $10, $10, $F0
0000C1B5 0007 1020 10               		dc.b 0,	7, $10,	$20, $10
0000C1BA 04                         byte_A0A4:	dc.b 4
0000C1BB E00F 0028 E8               		dc.b $E0, $F, 0, $28, $E8
0000C1C0 E00B 0038 08               		dc.b $E0, $B, 0, $38, 8
0000C1C5 000F 1028 E8               		dc.b 0,	$F, $10, $28, $E8
0000C1CA 000B 1038 08               		dc.b 0,	$B, $10, $38, 8
0000C1CF 04                         byte_A0B9:	dc.b 4
0000C1D0 E00F 0834 E0               		dc.b $E0, $F, 8, $34, $E0
0000C1D5 E00F 0034 00               		dc.b $E0, $F, 0, $34, 0
0000C1DA 000F 1834 E0               		dc.b 0,	$F, $18, $34, $E0
0000C1DF 000F 1034 00               		dc.b 0,	$F, $10, $34, 0
0000C1E4 04                         byte_A0CE:	dc.b 4
0000C1E5 E00B 0838 E0               		dc.b $E0, $B, 8, $38, $E0
0000C1EA E00F 0828 F8               		dc.b $E0, $F, 8, $28, $F8
0000C1EF 000B 1838 E0               		dc.b 0,	$B, $18, $38, $E0
0000C1F4 000F 1828 F8               		dc.b 0,	$F, $18, $28, $F8
0000C1F9 04                         byte_A0E3:	dc.b 4
0000C1FA E007 0820 E0               		dc.b $E0, 7, 8,	$20, $E0
0000C1FF E00F 0810 F0               		dc.b $E0, $F, 8, $10, $F0
0000C204 0007 1820 E0               		dc.b 0,	7, $18,	$20, $E0
0000C209 000F 1810 F0               		dc.b 0,	$F, $18, $10, $F0
0000C20E 02                         byte_A0F8:	dc.b 2
0000C20F E00F 0800 E0               		dc.b $E0, $F, 8, 0, $E0
0000C214 000F 1800 E0               		dc.b 0,	$F, $18, 0, $E0
0000C219 04                         byte_A103:	dc.b 4
0000C21A E00F 0044 E0               		dc.b $E0, $F, 0, $44, $E0
0000C21F E00F 0844 00               		dc.b $E0, $F, 8, $44, 0
0000C224 000F 1044 E0               		dc.b 0,	$F, $10, $44, $E0
0000C229 000F 1844 00               		dc.b 0,	$F, $18, $44, 0
0000C22E                            		even
0000C22E                            		even
0000C22E                            		include	"_incObj\26 Monitor.asm"
0000C22E                            ; ---------------------------------------------------------------------------
0000C22E                            ; Object 26 - monitors
0000C22E                            ; ---------------------------------------------------------------------------
0000C22E                            
0000C22E                            Monitor:
0000C22E 7000                       		moveq	#0,d0
0000C230 1028 0024                  		move.b	obRoutine(a0),d0
0000C234 323B 0000                  		move.w	Mon_Index(pc,d0.w),d1
0000C238 4EFB 1000                  		jmp	Mon_Index(pc,d1.w)
0000C23C                            ; ===========================================================================
0000C23C 0000                       Mon_Index:	dc.w Mon_Main-Mon_Index
0000C23E 0000                       		dc.w Mon_Solid-Mon_Index
0000C240 0000                       		dc.w Mon_BreakOpen-Mon_Index
0000C242 0000                       		dc.w Mon_Animate-Mon_Index
0000C244 0000                       		dc.w Mon_Display-Mon_Index
0000C246                            ; ===========================================================================
0000C246                            
0000C246                            Mon_Main:	; Routine 0
0000C246 5428 0024                  		addq.b	#2,obRoutine(a0)
0000C24A 117C 000E 0016             		move.b	#$E,obHeight(a0)
0000C250 117C 000E 0017             		move.b	#$E,obWidth(a0)
0000C256 217C 0000 0000 0004        		move.l	#Map_Monitor,obMap(a0)
0000C25E 317C 0680 0002             		move.w	#$680,obGfx(a0)
0000C264 117C 0004 0001             		move.b	#4,obRender(a0)
0000C26A 317C 0180 0018             		move.w	#$180,obPriority(a0)
0000C270 117C 000F 0014             		move.b	#$F,obActWid(a0)
0000C276 45F8 FC00                  		lea	(v_objstate).w,a2
0000C27A 7000                       		moveq	#0,d0
0000C27C 1028 0023                  		move.b	obRespawnNo(a0),d0
0000C280 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000C286 0832 0000 0002             		btst	#0,2(a2,d0.w)	; has monitor been broken?
0000C28C 6700                       		beq.s	@notbroken	; if not, branch
0000C28E 117C 0008 0024             		move.b	#8,obRoutine(a0) ; run "Mon_Display" routine
0000C294 117C 000B 001A             		move.b	#$B,obFrame(a0)	; use broken monitor frame
0000C29A 4E75                       		rts	
0000C29C                            ; ===========================================================================
0000C29C                            
0000C29C                            	@notbroken:
0000C29C 117C 0046 0020             		move.b	#$46,obColType(a0)
0000C2A2 1168 0028 001C             		move.b	obSubtype(a0),obAnim(a0)
0000C2A8                            
0000C2A8                            Mon_Solid:	; Routine 2
0000C2A8 1028 0025                  		move.b	ob2ndRout(a0),d0 ; is monitor set to fall?
0000C2AC 6700                       		beq.s	@normal		; if not, branch
0000C2AE 5500                       		subq.b	#2,d0
0000C2B0 6600                       		bne.s	@fall
0000C2B2                            
0000C2B2                            		; 2nd Routine 2
0000C2B2 7200                       		moveq	#0,d1
0000C2B4 1228 0014                  		move.b	obActWid(a0),d1
0000C2B8 0641 000B                  		addi.w	#$B,d1
0000C2BC 6100 CFEC                  		bsr.w	ExitPlatform
0000C2C0 0829 0003 0022             		btst	#3,obStatus(a1) ; is Sonic on top of the monitor?
0000C2C6 6600 0000                  		bne.w	@ontop		; if yes, branch
0000C2CA 4228 0025                  		clr.b	ob2ndRout(a0)
0000C2CE 6000 0000                  		bra.w	Mon_Animate
0000C2D2                            ; ===========================================================================
0000C2D2                            
0000C2D2                            	@ontop:
0000C2D2 363C 0010                  		move.w	#$10,d3
0000C2D6 3428 0008                  		move.w	obX(a0),d2
0000C2DA 6100 D52C                  		bsr.w	MvSonicOnPtfm
0000C2DE 6000 0000                  		bra.w	Mon_Animate
0000C2E2                            ; ===========================================================================
0000C2E2                            
0000C2E2                            @fall:		; 2nd Routine 4
0000C2E2 6100 0000                  		bsr.w	ObjectFall
0000C2E6 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0000C2EC 4A41                       		tst.w	d1
0000C2EE 6A00 0000                  		bpl.w	Mon_Animate
0000C2F2 D368 000C                  		add.w	d1,obY(a0)
0000C2F6 4268 0012                  		clr.w	obVelY(a0)
0000C2FA 4228 0025                  		clr.b	ob2ndRout(a0)
0000C2FE 6000 0000                  		bra.w	Mon_Animate
0000C302                            ; ===========================================================================
0000C302                            
0000C302                            @normal:	; 2nd Routine 0
0000C302 323C 001A                  		move.w	#$1A,d1
0000C306 343C 000F                  		move.w	#$F,d2
0000C30A 6100 0000                  		bsr.w	Mon_SolidSides
0000C30E 6700 0000                  		beq.w	loc_A25C
0000C312 4A69 0012                  		tst.w	obVelY(a1)
0000C316 6B00                       		bmi.s	loc_A20A
0000C318 0C29 0000 001C             		cmpi.b	#id_Roll,obAnim(a1) ; is Sonic rolling?
0000C31E 6700                       		beq.s	loc_A25C	; if yes, branch
0000C320 0C29 0000 001C             		cmpi.b	#id_SpinDash,obAnim(a1) ; is Sonic Spindashing?
0000C326 6700                       		beq.s	loc_A25C	; if yes, branch
0000C328 0C29 0000 001C             		cmpi.b	#id_Peelout,obAnim(a1) ; is Sonic Spindashing?
0000C32E 6700                       		beq.s	loc_A25C	; if yes, branch
0000C330                            
0000C330                            loc_A20A:
0000C330 4A41                       		tst.w	d1
0000C332 6A00                       		bpl.s	loc_A220
0000C334 9769 000C                  		sub.w	d3,obY(a1)
0000C338 6100 CE5E                  		bsr.w	loc_74AE
0000C33C 117C 0002 0025             		move.b	#2,ob2ndRout(a0)
0000C342 6000 0000                  		bra.w	Mon_Animate
0000C346                            ; ===========================================================================
0000C346                            
0000C346                            loc_A220:
0000C346 4A40                       		tst.w	d0
0000C348 6700 0000                  		beq.w	loc_A246
0000C34C 6B00                       		bmi.s	loc_A230
0000C34E 4A69 0010                  		tst.w	obVelX(a1)
0000C352 6B00                       		bmi.s	loc_A246
0000C354 6000                       		bra.s	loc_A236
0000C356                            ; ===========================================================================
0000C356                            
0000C356                            loc_A230:
0000C356 4A69 0010                  		tst.w	obVelX(a1)
0000C35A 6A00                       		bpl.s	loc_A246
0000C35C                            
0000C35C                            loc_A236:
0000C35C 9169 0008                  		sub.w	d0,obX(a1)
0000C360 337C 0000 0020             		move.w	#0,obInertia(a1)
0000C366 337C 0000 0010             		move.w	#0,obVelX(a1)
0000C36C                            
0000C36C                            loc_A246:
0000C36C 0829 0001 0022             		btst	#1,obStatus(a1)
0000C372 6600                       		bne.s	loc_A26A
0000C374 08E9 0005 0022             		bset	#5,obStatus(a1)
0000C37A 08E8 0005 0022             		bset	#5,obStatus(a0)
0000C380 6000                       		bra.s	Mon_Animate
0000C382                            ; ===========================================================================
0000C382                            
0000C382                            loc_A25C:
0000C382 0828 0005 0022             		btst	#5,obStatus(a0)
0000C388 6700                       		beq.s	Mon_Animate
0000C38A 0C29 0000 001C             		cmpi.b	#id_Roll,obAnim(a1)	; is Sonic in his jumping/rolling animation?
0000C390 6700                       		beq.s	loc_A26A	; if so, branch
0000C392 337C 0001 001C             		move.w	#1,obAnim(a1)	; clear obAnim and set obNextAni to 1, putting Sonic in his walking animation
0000C398                            
0000C398                            loc_A26A:
0000C398 08A8 0005 0022             		bclr	#5,obStatus(a0)
0000C39E 08A9 0005 0022             		bclr	#5,obStatus(a1)
0000C3A4                            
0000C3A4                            Mon_Animate:	; Routine 6
0000C3A4 43F9 0000 0000             		lea	(Ani_Monitor).l,a1
0000C3AA 6100 0000                  		bsr.w	AnimateSprite
0000C3AE                            
0000C3AE                            Mon_Display:	; Routine 8
0000C3AE 6100 0000                  		bsr.w	DisplaySprite
0000C3D0 4E75                       		rts	
0000C3D2                            ; ===========================================================================
0000C3D2                            
0000C3D2                            Mon_BreakOpen:	; Routine 4
0000C3D2 5428 0024                  		addq.b	#2,obRoutine(a0)
0000C3D6 117C 0000 0020             		move.b	#0,obColType(a0)
0000C3DC 6100 0000                  		bsr.w	FindFreeObj
0000C3E0 6600                       		bne.s	Mon_Explode
0000C3E2 12BC 0000                  		move.b	#id_PowerUp,0(a1) ; load monitor contents object
0000C3E6 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000C3EC 3368 000C 000C             		move.w	obY(a0),obY(a1)
0000C3F2 1368 001C 001C             		move.b	obAnim(a0),obAnim(a1)
0000C3F8                            
0000C3F8                            Mon_Explode:
0000C3F8 6100 0000                  		bsr.w	FindFreeObj
0000C3FC 6600                       		bne.s	@fail
0000C3FE 12BC 0000                  		move.b	#id_ExplosionItem,0(a1) ; load explosion object
0000C402 5429 0024                  		addq.b	#2,obRoutine(a1) ; don't create an animal
0000C406 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000C40C 3368 000C 000C             		move.w	obY(a0),obY(a1)
0000C412                            
0000C412                            	@fail:
0000C412 45F8 FC00                  		lea	(v_objstate).w,a2
0000C416 7000                       		moveq	#0,d0
0000C418 1028 0023                  		move.b	obRespawnNo(a0),d0
0000C41C 08F2 0000 0002             		bset	#0,2(a2,d0.w)
0000C422 117C 0009 001C             		move.b	#9,obAnim(a0)	; set monitor type to broken
0000C428 6000 0000                  		bra.w	DisplaySprite
0000C428 6000 0000                  		bra.w	DisplaySprite
0000C42C                            		include	"_incObj\2E Monitor Content Power-Up.asm"
0000C42C                            ; ---------------------------------------------------------------------------
0000C42C                            ; Object 2E - contents of monitors
0000C42C                            ; ---------------------------------------------------------------------------
0000C42C                            
0000C42C                            PowerUp:
0000C42C 7000                       		moveq	#0,d0
0000C42E 1028 0024                  		move.b	obRoutine(a0),d0
0000C432 323B 0000                  		move.w	Pow_Index(pc,d0.w),d1
0000C436 4EBB 1000                  		jsr	Pow_Index(pc,d1.w)
0000C43A 6000 0000                  		bra.w	DisplaySprite
0000C43E                            ; ===========================================================================
0000C43E 0000                       Pow_Index:	dc.w Pow_Main-Pow_Index
0000C440 0000                       		dc.w Pow_Move-Pow_Index
0000C442 0000                       		dc.w Pow_Delete-Pow_Index
0000C444                            ; ===========================================================================
0000C444                            
0000C444                            Pow_Main:	; Routine 0
0000C444 5428 0024                  		addq.b	#2,obRoutine(a0)
0000C448 317C 0680 0002             		move.w	#$680,obGfx(a0)
0000C44E 117C 0024 0001             		move.b	#$24,obRender(a0)
0000C454 317C 0180 0018             		move.w	#$180,obPriority(a0)
0000C45A 117C 0008 0014             		move.b	#8,obActWid(a0)
0000C460 317C FD00 0012             		move.w	#-$300,obVelY(a0)
0000C466 7000                       		moveq	#0,d0
0000C468 1028 001C                  		move.b	obAnim(a0),d0	; get subtype
0000C46C 5400                       		addq.b	#2,d0
0000C46E 1140 001A                  		move.b	d0,obFrame(a0)	; use correct frame
0000C472 227C 0000 0000             		movea.l	#Map_Monitor,a1
0000C478 D000                       		add.b	d0,d0
0000C47A D2F1 0000                  		adda.w	(a1,d0.w),a1
0000C47E 5249                       		addq.w	#1,a1
0000C480 2149 0004                  		move.l	a1,obMap(a0)
0000C484                            
0000C484                            Pow_Move:	; Routine 2
0000C484 4A68 0012                  		tst.w	obVelY(a0)	; is object moving?
0000C488 6A00 0000                  		bpl.w	Pow_Checks	; if not, branch
0000C48C 6100 0000                  		bsr.w	SpeedToPos
0000C490 0668 0018 0012             		addi.w	#$18,obVelY(a0)	; reduce object	speed
0000C496 4E75                       		rts	
0000C498                            ; ===========================================================================
0000C498                            
0000C498                            Pow_Checks:
0000C498 5428 0024                  		addq.b	#2,obRoutine(a0)
0000C49C 317C 001D 001E             		move.w	#29,obTimeFrame(a0) ; display icon for half a second
0000C4A2                            
0000C4A2                            Pow_ChkEggman:
0000C4A2 1028 001C                  		move.b	obAnim(a0),d0
0000C4A6 0C00 0001                  		cmpi.b	#1,d0		; does monitor contain Eggman?
0000C4AA 6600                       		bne.s	Pow_ChkSonic
0000C4AC                            		
0000C4AC 4EF9 0000 0000             		jmp	Spik_Hurt
0000C4B2                            		
0000C4B2 4E75                       		rts
0000C4B4                            ; ===========================================================================
0000C4B4                            
0000C4B4                            Pow_ChkSonic:
0000C4B4 0C00 0002                  		cmpi.b	#2,d0		; does monitor contain Sonic?
0000C4B8 6600                       		bne.s	Pow_ChkShoes
0000C4BA                            
0000C4BA                            	ExtraLife:
0000C4BA 5238 FE12                  		addq.b	#1,(v_lives).w	; add 1 to the number of lives you have
0000C4BE 5238 FE1C                  		addq.b	#1,(f_lifecount).w ; update the lives counter
0000C4CC                            
0000C4CC                            ; ===========================================================================
0000C4CC                            
0000C4CC                            Pow_ChkShoes:
0000C4CC 0C00 0003                  		cmpi.b	#3,d0		; does monitor contain speed shoes?
0000C4D0 6600                       		bne.s	Pow_ChkShield
0000C4D2                            
0000C4D2 11FC 0001 FE2E             		move.b	#1,(v_shoes).w	; speed up the BG music
0000C4D8 31FC 04B0 D034             		move.w	#$4B0,(v_player+$34).w	; time limit for the power-up
0000C4DE 31FC 0C00 F760             		move.w	#$C00,(v_sonspeedmax).w ; change Sonic's top speed
0000C4E4 31FC 0018 F762             		move.w	#$18,(v_sonspeedacc).w	; change Sonic's acceleration
0000C4EA 31FC 0080 F764             		move.w	#$80,(v_sonspeeddec).w	; change Sonic's deceleration
0000C4F0 4A38 F7AA                  		tst.b	(f_lockscreen).w ; is boss mode on?
0000C4F4 6600                       		bne.s	Pow_NoMus	; if yes, branch
0000C4F6 0C78 000C FE14             			cmpi.w	#$C,(v_air).w
0000C4FC 6300                       			bls.s	Pow_NoMus
0000C508                            ; ===========================================================================
0000C508                            
0000C508                            Pow_NoMus:
0000C508 4E75                       		rts	
0000C50A                            ; ===========================================================================
0000C50A                            
0000C50A                            Pow_ChkShield:
0000C50A 0C00 0004                  		cmpi.b	#4,d0		; does monitor contain a shield?
0000C50E 6600                       		bne.s	Pow_ChkInvinc
0000C510                            
0000C510 11FC 0000 F5C8             		move.b	#0,(v_rshield).w ; remove red shield
0000C516 11FC 0000 F5C9             		move.b	#0,(v_gshield).w ; remove g shield
0000C51C 11FC 0000 F5CA             		move.b	#0,(v_spshield).w ; remove s shield
0000C522 11FC 0001 FE2C             		move.b	#1,(v_shield).w	; give Sonic a shield
0000C528 11FC 0000 D180             		move.b	#id_ShieldItem,(v_objspace+$180).w ; load shield object ($38)
0000C538                            ; ===========================================================================
0000C538                            
0000C538                            Pow_ChkInvinc:
0000C538 0C00 0005                  		cmpi.b	#5,d0		; does monitor contain invincibility?
0000C53C 6600                       		bne.s	Pow_ChkRings
0000C53E                            
0000C53E 11FC 0001 FE2D             		move.b	#1,(v_invinc).w	; make Sonic invincible
0000C544 31FC 0560 D032             		move.w	#$560,(v_player+$32).w ; time limit for the power-up
0000C54A 11FC 0000 D200             		move.b	#id_InvStars,(v_objspace+$200).w ; load stars object ($3801)
0000C550 11FC 0001 D21C             		move.b	#1,(v_objspace+$200+obAnim).w
0000C556 11FC 0000 D240             		move.b	#id_InvStars,(v_objspace+$240).w ; load stars object ($3802)
0000C55C 11FC 0002 D25C             		move.b	#2,(v_objspace+$240+obAnim).w
0000C562 11FC 0000 D280             		move.b	#id_InvStars,(v_objspace+$280).w ; load stars object ($3803)
0000C568 11FC 0003 D29C             		move.b	#3,(v_objspace+$280+obAnim).w
0000C56E 11FC 0000 D2C0             		move.b	#id_InvStars,(v_objspace+$2C0).w ; load stars object ($3804)
0000C574 11FC 0004 D2DC             		move.b	#4,(v_objspace+$2C0+obAnim).w
0000C57A 4A38 F7AA                  		tst.b	(f_lockscreen).w ; is boss mode on?
0000C57E 6600                       		bne.s	Pow_NoMusic	; if yes, branch
0000C580 0C78 000C FE14             			cmpi.w	#$C,(v_air).w
0000C586 6300                       			bls.s	Pow_NoMusic
0000C592                            ; ===========================================================================
0000C592                            
0000C592                            Pow_NoMusic:
0000C592 4E75                       		rts	
0000C594                            ; ===========================================================================
0000C594                            
0000C594                            Pow_ChkRings:
0000C594 0C00 0006                  		cmpi.b	#6,d0		; does monitor contain 10 rings?
0000C598 6600                       		bne.s	Pow_ChkS
0000C59A                            
0000C59A 0678 000A FE20             		addi.w	#10,(v_rings).w	; add 10 rings to the number of rings you have
0000C5A0 0038 0001 FE1D             		ori.b	#1,(f_ringcount).w ; update the ring counter
0000C5A6 0C78 0064 FE20             		cmpi.w	#100,(v_rings).w ; check if you have 100 rings
0000C5AC 6500                       		bcs.s	Pow_RingSound
0000C5AE 08F8 0001 FE1B             		bset	#1,(v_lifecount).w
0000C5B4 6700 FF04                  		beq.w	ExtraLife
0000C5B8 0C78 00C8 FE20             		cmpi.w	#200,(v_rings).w ; check if you have 200 rings
0000C5BE 6500                       		bcs.s	Pow_RingSound
0000C5C0 08F8 0002 FE1B             		bset	#2,(v_lifecount).w
0000C5C6 6700 FEF2                  		beq.w	ExtraLife
0000C5CA                            
0000C5CA                            	Pow_RingSound:
0000C5D4                            ; ===========================================================================
0000C5D4                            
0000C5D4                            Pow_ChkS:
0000C5D4 0C00 0007                  		cmpi.b	#7,d0		; does monitor contain 'S'?
0000C5D8 6600                       		bne.s	Pow_ChkSRing
0000C5DA                            		
0000C5DA 0C38 0006 FE57             		cmpi.b	#6,(v_emeralds).w ; do you have all the emeralds?
0000C5E0 6700                       		beq.s	PowS2	; if yes, branch
0000C5E2 0404 003B                  		subi.b	#$3B,d4
0000C5E6 7000                       		moveq	#0,d0
0000C5E8 11FC 0000 F5C3             		move.b	#0,(f_emeraldm).w
0000C5EE 11FC 0001 F5C3             		move.b	#1,(f_emeraldm).w
0000C5F4 6000                       		bra.s	PowSPlay
0000C5F6                            
0000C5F6                            PowS2:
0000C5F6 0678 0032 FE20             		addi.w	#50,(v_rings).w	; add 50 rings to the number of rings you have
0000C5FC 0038 0005 FE1D             		ori.b	#5,(f_ringcount).w ; update the ring counter
0000C602 0C78 0064 FE20             		cmpi.w	#100,(v_rings).w ; check if you have 100 rings
0000C608 6500                       		bcs.s	PowSPlay
0000C60A 08F8 0001 FE1B             		bset	#1,(v_lifecount).w
0000C610 6700 FEA8                  		beq.w	ExtraLife
0000C614 0C78 00C8 FE20             		cmpi.w	#200,(v_rings).w ; check if you have 200 rings
0000C61A 6500                       		bcs.s	PowSPlay
0000C61C 08F8 0002 FE1B             		bset	#2,(v_lifecount).w
0000C622 6700 FE96                  		beq.w	ExtraLife	
0000C626                            
0000C626                            PowSPlay:
0000C630                            
0000C630                            		
0000C630                            
0000C630                            
0000C630                            Pow_ChkSRing:
0000C630 0C00 0008                  		cmpi.b	#8,d0		; does monitor contain 'S'?
0000C634 6600                       		bne.s	Pow_ChkRShield
0000C636                            
0000C636                            		
0000C636 0678 0014 FE20             		addi.w	#20,(v_rings).w	; add 20 rings to the number of rings you have
0000C63C 0038 0002 FE1D             		ori.b	#2,(f_ringcount).w ; update the ring counter
0000C642 0C78 0064 FE20             		cmpi.w	#100,(v_rings).w ; check if you have 100 rings
0000C648 6500                       		bcs.s	Pow_ChkSRingSound
0000C64A 08F8 0001 FE1B             		bset	#1,(v_lifecount).w
0000C650 6700 FE68                  		beq.w	ExtraLife
0000C654 0C78 00C8 FE20             		cmpi.w	#200,(v_rings).w ; check if you have 200 rings
0000C65A 6500                       		bcs.s	Pow_ChkSRingSound
0000C65C 08F8 0002 FE1B             		bset	#2,(v_lifecount).w
0000C662 6700 FE56                  		beq.w	ExtraLife	
0000C666                            
0000C666                            Pow_ChkSRingSound:
0000C670                            
0000C670                            
0000C670                            Pow_ChkRShield:
0000C670 0C00 000A                  		cmpi.b	#10,d0		; does monitor contain a g shield?
0000C674 6600                       		bne.s	Pow_ChkGShield
0000C676                            
0000C676 11FC 0000 FE2C             		move.b	#0,(v_shield).w ; remove shield
0000C67C 11FC 0000 F5C9             		move.b	#0,(v_gshield).w ; remove g shield
0000C682 11FC 0000 F5CA             		move.b	#0,(v_spshield).w ; remove s shield
0000C688 11FC 0002 F5C8             		move.b	#2,(v_rshield).w ; give Sonic a red shield
0000C68E 11FC 0000 D180             		move.b	#id_RShieldItem,(v_objspace+$180).w ; load red shield object ($38)
0000C69E                            
0000C69E                            Pow_ChkGShield:
0000C69E 0C00 000B                  		cmpi.b	#11,d0		; does monitor contain a g shield?
0000C6A2 6600                       		bne.s	Pow_ChkSpShield
0000C6A4                            
0000C6A4                            
0000C6A4 11FC 0000 FE2C             		move.b	#0,(v_shield).w ; remove shield
0000C6AA 11FC 0000 F5C8             		move.b	#0,(v_rshield).w ; remove r shield
0000C6B0 11FC 0000 F5CA             		move.b	#0,(v_spshield).w ; remove s shield
0000C6B6 11FC 0001 F5C9             		move.b	#1,(v_gshield).w ; give Sonic a g shield
0000C6BC 11FC 0000 D180             		move.b	#id_GShieldItem,(v_objspace+$180).w ; load g shield object ($38)
0000C6C2                            		
0000C6C2 0678 0023 FE20             		addi.w	#35,(v_rings).w	; add 35 rings to the number of rings you have
0000C6C8 0038 0002 FE1D             		ori.b	#2,(f_ringcount).w ; update the ring counter
0000C6CE 0C78 0064 FE20             		cmpi.w	#100,(v_rings).w ; check if you have 100 rings
0000C6D4 6500                       		bcs.s	Pow_ChkGSound
0000C6D6 08F8 0001 FE1B             		bset	#1,(v_lifecount).w
0000C6DC 6700 FDDC                  		beq.w	ExtraLife
0000C6E0 0C78 00C8 FE20             		cmpi.w	#200,(v_rings).w ; check if you have 200 rings
0000C6E6 6500                       		bcs.s	Pow_ChkGSound
0000C6E8 08F8 0002 FE1B             		bset	#2,(v_lifecount).w
0000C6EE 6700 FDCA                  		beq.w	ExtraLife	
0000C6F2                            
0000C6F2                            Pow_ChkGSound:		
0000C6FC                            
0000C6FC                            Pow_ChkSpShield:
0000C6FC 0C00 000C                  		cmpi.b	#12,d0		; does monitor contain a g shield?
0000C700 6600                       		bne.s	Pow_ChkEnd
0000C702                            
0000C702 11FC 0000 FE2C             		move.b	#0,(v_shield).w 		; remove shield
0000C708 11FC 0000 F5C8             		move.b	#0,(v_rshield).w 		; remove r shield
0000C70E 11FC 0000 F5C9             		move.b	#0,(v_gshield).w 		; remove g shield
0000C714 11FC 0001 F5CA             		move.b	#1,(v_spshield).w 		; give sonic a s shield
0000C71A 11FC 0000 D180             		move.b	#id_SpShieldItem,(v_objspace+$180).w ; load s shield object ($38)	
0000C72A 4E71                       		nop
0000C72C                            
0000C72C                            Pow_ChkEnd:
0000C72C 4E75                       		rts
0000C72E                            ; ===========================================================================
0000C72E                            
0000C72E                            Pow_Delete:	; Routine 4
0000C72E 5368 001E                  		subq.w	#1,obTimeFrame(a0)
0000C732 6B00 0000                  		bmi.w	DeleteObject	; delete after half a second
0000C736 4E75                       		rts	
0000C736 4E75                       		rts	
0000C738                            		include	"_incObj\26 Monitor (SolidSides subroutine).asm"
0000C738                            ; ---------------------------------------------------------------------------
0000C738                            ; Subroutine to	make the sides of a monitor solid
0000C738                            ; ---------------------------------------------------------------------------
0000C738                            
0000C738                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000C738                            
0000C738                            
0000C738                            Mon_SolidSides:
0000C738 43F8 D000                  		lea	(v_player).w,a1
0000C73C 3029 0008                  		move.w	obX(a1),d0
0000C740 9068 0008                  		sub.w	obX(a0),d0
0000C744 D041                       		add.w	d1,d0
0000C746 6B00                       		bmi.s	loc_A4E6
0000C748 3601                       		move.w	d1,d3
0000C74A D643                       		add.w	d3,d3
0000C74C B043                       		cmp.w	d3,d0
0000C74E 6200                       		bhi.s	loc_A4E6
0000C750 1629 0016                  		move.b	obHeight(a1),d3
0000C754 4883                       		ext.w	d3
0000C756 D443                       		add.w	d3,d2
0000C758 3629 000C                  		move.w	obY(a1),d3
0000C75C 9668 000C                  		sub.w	obY(a0),d3
0000C760 D642                       		add.w	d2,d3
0000C762 6B00                       		bmi.s	loc_A4E6
0000C764 D442                       		add.w	d2,d2
0000C766 B642                       		cmp.w	d2,d3
0000C768 6400                       		bcc.s	loc_A4E6
0000C76A 4A38 F7C8                  		tst.b	(f_lockmulti).w
0000C76E 6B00                       		bmi.s	loc_A4E6
0000C770 0C38 0006 D024             		cmpi.b	#6,(v_player+obRoutine).w
0000C776 6400                       		bcc.s	loc_A4E6
0000C778 4A78 FE08                  		tst.w	(v_debuguse).w
0000C77C 6600                       		bne.s	loc_A4E6
0000C77E B240                       		cmp.w	d0,d1
0000C780 6400                       		bcc.s	loc_A4DC
0000C782 D241                       		add.w	d1,d1
0000C784 9041                       		sub.w	d1,d0
0000C786                            
0000C786                            loc_A4DC:
0000C786 0C43 0010                  		cmpi.w	#$10,d3
0000C78A 6500                       		bcs.s	loc_A4EA
0000C78C                            
0000C78C                            loc_A4E2:
0000C78C 7201                       		moveq	#1,d1
0000C78E 4E75                       		rts	
0000C790                            ; ===========================================================================
0000C790                            
0000C790                            loc_A4E6:
0000C790 7200                       		moveq	#0,d1
0000C792 4E75                       		rts	
0000C794                            ; ===========================================================================
0000C794                            
0000C794                            loc_A4EA:
0000C794 7200                       		moveq	#0,d1
0000C796 1228 0014                  		move.b	obActWid(a0),d1
0000C79A 5841                       		addq.w	#4,d1
0000C79C 3401                       		move.w	d1,d2
0000C79E D442                       		add.w	d2,d2
0000C7A0 D269 0008                  		add.w	obX(a1),d1
0000C7A4 9268 0008                  		sub.w	obX(a0),d1
0000C7A8 6BE2                       		bmi.s	loc_A4E2
0000C7AA B242                       		cmp.w	d2,d1
0000C7AC 64DE                       		bcc.s	loc_A4E2
0000C7AE 72FF                       		moveq	#-1,d1
0000C7B0 4E75                       		rts	
0000C7B2                            ; End of function Obj26_SolidSides
0000C7B2                            ; End of function Obj26_SolidSides
0000C7B2                            		include	"_anim\Monitor.asm"
0000C7B2                            ; ---------------------------------------------------------------------------
0000C7B2                            ; Animation script - monitors
0000C7B2                            ; ---------------------------------------------------------------------------
0000C7B2 0000 0000 0000             Ani_Monitor:	dc.w @static-Ani_Monitor, @eggman-Ani_Monitor, @sonic-Ani_Monitor
0000C7B8 0000 0000 0000             		dc.w @shoes-Ani_Monitor, @shield-Ani_Monitor, @invincible-Ani_Monitor
0000C7BE 0000 0000 0000             		dc.w @rings-Ani_Monitor, @s-Ani_Monitor, @goggles-Ani_Monitor
0000C7C4 0000 0000 0000             		dc.w @breaking-Ani_Monitor, @rshield-Ani_Monitor, @yshield-Ani_Monitor
0000C7CA 0000                       		dc.w @spshield-Ani_Monitor
0000C7CC                            		
0000C7CC 0100 0102 FF               @static:	dc.b 1,	0, 1, 2, afEnd
0000C7D2 00                         		even
0000C7D2 0100 0303 0103 0302 0303+  @eggman:	dc.b 1,	0, 3, 3, 1, 3, 3, 2, 3,	3, afEnd
0000C7DE 00                         		even
0000C7DE 0100 0404 0104 0402 0404+  @sonic:		dc.b 1,	0, 4, 4, 1, 4, 4, 2, 4,	4, afEnd
0000C7EA 00                         		even
0000C7EA 0100 0505 0105 0502 0505+  @shoes:		dc.b 1,	0, 5, 5, 1, 5, 5, 2, 5,	5, afEnd
0000C7F6 00                         		even
0000C7F6 0100 0606 0106 0602 0606+  @shield:	dc.b 1,	0, 6, 6, 1, 6, 6, 2, 6,	6, afEnd
0000C802 00                         		even
0000C802 0100 0707 0107 0702 0707+  @invincible:	dc.b 1,	0, 7, 7, 1, 7, 7, 2, 7,	7, afEnd
0000C80E 00                         		even
0000C80E 0100 0808 0108 0802 0808+  @rings:		dc.b 1,	0, 8, 8, 1, 8, 8, 2, 8,	8, afEnd
0000C81A 00                         		even
0000C81A 0100 0909 0109 0902 0909+  @s:		dc.b 1,	0, 9, 9, 1, 9, 9, 2, 9,	9, afEnd
0000C826 00                         		even
0000C826 0100 0A0A 010A 0A02 0A0A+  @goggles:	dc.b 1,	0, $A, $A, 1, $A, $A, 2, $A, $A, afEnd
0000C832 00                         		even
0000C832 0200 0102 0BFE 01          @breaking:	dc.b 2,	0, 1, 2, $B, afBack, 1
0000C83A 00                         		even
0000C83A 0100 0C0C 010C 0C02 0C0C+  @rshield:	dc.b 1,	0, $C, $C, 1, $C, $C, 2, $C, $C, afEnd
0000C846 00                         		even
0000C846 0100 0D0D 010D 0D02 0D0D+  @yshield:	dc.b 1,	0, $D, $D, 1, $D, $D, 2, $D, $D, afEnd
0000C852 00                         		even
0000C852 0100 0E0E 010E 0E02 0E0E+  @spshield:	dc.b 1,	0, $E, $E, 1, $E, $E, 2, $E, $E, afEnd
0000C85E 00                         		even
0000C85E 00                         		even
0000C85E                            Map_Monitor:	include	"_maps\Monitor.asm"
0000C85E                            ; --------------------------------------------------------------------------------
0000C85E                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0000C85E                            ; --------------------------------------------------------------------------------
0000C85E                            
0000C85E                            SME_YYb7z:	
0000C85E 0000 0000                  		dc.w SME_YYb7z_1E-SME_YYb7z, SME_YYb7z_24-SME_YYb7z	
0000C862 0000 0000                  		dc.w SME_YYb7z_2F-SME_YYb7z, SME_YYb7z_3A-SME_YYb7z	
0000C866 0000 0000                  		dc.w SME_YYb7z_45-SME_YYb7z, SME_YYb7z_50-SME_YYb7z	
0000C86A 0000 0000                  		dc.w SME_YYb7z_5B-SME_YYb7z, SME_YYb7z_66-SME_YYb7z	
0000C86E 0000 0000                  		dc.w SME_YYb7z_71-SME_YYb7z, SME_YYb7z_7C-SME_YYb7z	
0000C872 0000 0000                  		dc.w SME_YYb7z_87-SME_YYb7z, SME_YYb7z_92-SME_YYb7z	
0000C876 0000 0000                  		dc.w SME_YYb7z_AC-SME_YYb7z, SME_YYb7z_B7-SME_YYb7z	
0000C87A 0000                       		dc.w SME_YYb7z_C2-SME_YYb7z	
0000C87C 01                         SME_YYb7z_1E:	dc.b 1	
0000C87D F10F 0000 F0               		dc.b $F1, $F, 0, 0, $F0	
0000C882 02                         SME_YYb7z_24:	dc.b 2	
0000C883 F505 0010 F8               		dc.b $F5, 5, 0, $10, $F8	
0000C888 F10F 0000 F0               		dc.b $F1, $F, 0, 0, $F0	
0000C88D 02                         SME_YYb7z_2F:	dc.b 2	
0000C88E F505 0014 F8               		dc.b $F5, 5, 0, $14, $F8	
0000C893 F10F 0000 F0               		dc.b $F1, $F, 0, 0, $F0	
0000C898 02                         SME_YYb7z_3A:	dc.b 2	
0000C899 F505 0018 F8               		dc.b $F5, 5, 0, $18, $F8	
0000C89E F10F 0000 F0               		dc.b $F1, $F, 0, 0, $F0	
0000C8A3 02                         SME_YYb7z_45:	dc.b 2	
0000C8A4 F505 0154 F8               		dc.b $F5, 5, 1, $54, $F8	
0000C8A9 F10F 0000 F0               		dc.b $F1, $F, 0, 0, $F0	
0000C8AE 02                         SME_YYb7z_50:	dc.b 2	
0000C8AF F505 0024 F8               		dc.b $F5, 5, 0, $24, $F8	
0000C8B4 F10F 0000 F0               		dc.b $F1, $F, 0, 0, $F0	
0000C8B9 02                         SME_YYb7z_5B:	dc.b 2	
0000C8BA F505 2028 F8               		dc.b $F5, 5, $20, $28, $F8	
0000C8BF F10F 0000 F0               		dc.b $F1, $F, 0, 0, $F0	
0000C8C4 02                         SME_YYb7z_66:	dc.b 2	
0000C8C5 F505 002C F8               		dc.b $F5, 5, 0, $2C, $F8	
0000C8CA F10F 0000 F0               		dc.b $F1, $F, 0, 0, $F0	
0000C8CF 02                         SME_YYb7z_71:	dc.b 2	
0000C8D0 F505 2030 F8               		dc.b $F5, 5, $20, $30, $F8	
0000C8D5 F10F 0000 F0               		dc.b $F1, $F, 0, 0, $F0	
0000C8DA 02                         SME_YYb7z_7C:	dc.b 2	
0000C8DB F505 0034 F8               		dc.b $F5, 5, 0, $34, $F8	
0000C8E0 F10F 0000 F0               		dc.b $F1, $F, 0, 0, $F0	
0000C8E5 02                         SME_YYb7z_87:	dc.b 2	
0000C8E6 F505 0020 F8               		dc.b $F5, 5, 0, $20, $F8	
0000C8EB F10F 0000 F0               		dc.b $F1, $F, 0, 0, $F0	
0000C8F0 05                         SME_YYb7z_92:	dc.b 5	
0000C8F1 010C 0038 F0               		dc.b 1, $C, 0, $38, $F0	
0000C8F6 0900 0003 F0               		dc.b 9, 0, 0, 3, $F0	
0000C8FB 0900 0007 F8               		dc.b 9, 0, 0, 7, $F8	
0000C900 0900 000B 00               		dc.b 9, 0, 0, $B, 0	
0000C905 0900 000F 08               		dc.b 9, 0, 0, $F, 8	
0000C90A 02                         SME_YYb7z_AC:	dc.b 2	
0000C90B F505 001C F8               		dc.b $F5, 5, 0, $1C, $F8	
0000C910 F10F 0000 F0               		dc.b $F1, $F, 0, 0, $F0	
0000C915 02                         SME_YYb7z_B7:	dc.b 2	
0000C916 F505 201C F8               		dc.b $F5, 5, $20, $1C, $F8	
0000C91B F10F 0000 F0               		dc.b $F1, $F, 0, 0, $F0	
0000C920 02                         SME_YYb7z_C2:	dc.b 2	
0000C921 F505 003C F8               		dc.b $F5, 5, 0, $3C, $F8	
0000C926 F10F 0000 F0               		dc.b $F1, $F, 0, 0, $F0	
0000C92C 00                         		even
0000C92C 00                         		even
0000C92C                            
0000C92C                            		include	"_incObj\0E Title Screen Sonic.asm"
0000C92C                            ; ---------------------------------------------------------------------------
0000C92C                            ; Object 0E - Sonic on the title screen
0000C92C                            ; ---------------------------------------------------------------------------
0000C92C                            
0000C92C                            TitleSonic:
0000C92C 7000                       		moveq	#0,d0
0000C92E 1028 0024                  		move.b	obRoutine(a0),d0
0000C932 323B 0000                  		move.w	TSon_Index(pc,d0.w),d1
0000C936 4EFB 1000                  		jmp	TSon_Index(pc,d1.w)
0000C93A                            ; ===========================================================================
0000C93A 0000                       TSon_Index:	dc.w TSon_Main-TSon_Index
0000C93C 0000                       		dc.w TSon_Delay-TSon_Index
0000C93E 0000                       		dc.w TSon_Move-TSon_Index
0000C940 0000                       		dc.w TSon_Animate-TSon_Index
0000C942                            ; ===========================================================================
0000C942                            
0000C942                            TSon_Main:	; Routine 0
0000C942 5428 0024                  		addq.b	#2,obRoutine(a0)
0000C946 317C 00F0 0008             		move.w	#$F0,obX(a0)
0000C94C 317C 00DE 000A             		move.w	#$DE,obScreenY(a0) ; position is fixed to screen
0000C952 217C 0000 0000 0004        		move.l	#Map_TSon,obMap(a0)
0000C95A 317C 2348 0002             		move.w	#$2348,obGfx(a0)
0000C960 317C 0080 0018             		move.w	#$80,obPriority(a0)
0000C966 117C 001D 001F             		move.b	#29,obDelayAni(a0) ; set time delay to 0.5 seconds
0000C96C 43F9 0000 0000             		lea	(Ani_TSon).l,a1
0000C972 6100 0000                  		bsr.w	AnimateSprite
0000C976                            
0000C976                            TSon_Delay:	;Routine 2
0000C976 5328 001F                  		subq.b	#1,obDelayAni(a0) ; subtract 1 from time delay
0000C97A 6A00                       		bpl.s	@wait		; if time remains, branch
0000C97C 5428 0024                  		addq.b	#2,obRoutine(a0) ; go to next routine
0000C980 6000 0000                  		bra.w	DisplaySprite
0000C984                            
0000C984                            	@wait:
0000C984 4E75                       		rts	
0000C986                            ; ===========================================================================
0000C986                            
0000C986                            TSon_Move:	; Routine 4
0000C986 5168 000A                  		subq.w	#8,obScreenY(a0) ; move Sonic up
0000C98A 0C68 0096 000A             		cmpi.w	#$96,obScreenY(a0) ; has Sonic reached final position?
0000C990 6600                       		bne.s	@display	; if not, branch
0000C992 5428 0024                  		addq.b	#2,obRoutine(a0)
0000C996                            
0000C996                            	@display:
0000C996 6000 0000                  		bra.w	DisplaySprite
0000C99A                            
0000C99A 4E75                       		rts	
0000C99C                            ; ===========================================================================
0000C99C                            
0000C99C                            TSon_Animate:	; Routine 6
0000C99C 43F9 0000 0000             		lea	(Ani_TSon).l,a1
0000C9A2 6100 0000                  		bsr.w	AnimateSprite
0000C9A6 6000 0000                  		bra.w	DisplaySprite
0000C9AA                            
0000C9AA 4E75                       		rts	
0000C9AA 4E75                       		rts	
0000C9AC                            		include	"_incObj\0F Press Start and TM.asm"
0000C9AC                            ; ---------------------------------------------------------------------------
0000C9AC                            ; Object 0F - "PRESS START BUTTON" and "TM" from title screen
0000C9AC                            ; ---------------------------------------------------------------------------
0000C9AC                            
0000C9AC                            PSBTM:
0000C9AC 7000                       		moveq	#0,d0
0000C9AE 1028 0024                  		move.b	obRoutine(a0),d0
0000C9B2 323B 0000                  		move.w	PSB_Index(pc,d0.w),d1
0000C9B6 4EBB 1000                  		jsr	PSB_Index(pc,d1.w)
0000C9BA 6000 0000                  		bra.w	DisplaySprite
0000C9BE                            ; ===========================================================================
0000C9BE 0000                       PSB_Index:	dc.w PSB_Main-PSB_Index
0000C9C0 0000                       		dc.w PSB_PrsStart-PSB_Index
0000C9C2 0000                       		dc.w PSB_Exit-PSB_Index
0000C9C4 0000                       		dc.w PSB_Menu-PSB_Index		
0000C9C6                            ; ===========================================================================
0000C9C6                            
0000C9C6                            PSB_Main:	; Routine 0
0000C9C6 5428 0024                  		addq.b	#2,obRoutine(a0)
0000C9CA 317C 00D0 0008             		move.w	#$D0,obX(a0)
0000C9D0 317C 0130 000A             		move.w	#$130,obScreenY(a0)
0000C9D6 217C 0000 0000 0004        		move.l	#Map_PSB,obMap(a0)
0000C9DE 317C 0200 0002             		move.w	#$200,obGfx(a0)
0000C9E4 0C28 0002 001A             		cmpi.b	#2,obFrame(a0)	; is object "PRESS START"?
0000C9EA 6500                       		bcs.s	PSB_PrsStart	; if yes, branch
0000C9EC                            
0000C9EC 5428 0024                  		addq.b	#2,obRoutine(a0)
0000C9F0 0C28 0003 001A             		cmpi.b	#3,obFrame(a0)	; is the object	"TM"?
0000C9F6 6600                       		bne.s	PSB_Exit	; if not, branch
0000C9F8                            
0000C9F8 317C 2510 0002             		move.w	#$2510,obGfx(a0) ; "TM" specific code
0000C9FE 317C 0170 0008             		move.w	#$170,obX(a0)
0000CA04 317C 00F8 000A             		move.w	#$F8,obScreenY(a0)
0000CA0A                            
0000CA0A                            PSB_Exit:	; Routine 4
0000CA0A 4E75                       		rts	
0000CA0C                            ; ===========================================================================
0000CA0C                            
0000CA0C                            PSB_PrsStart:	; Routine 2
0000CA0C 0838 0007 F605             		btst   #7,(v_jpadpress1).w   ; check if Start is pressed
0000CA12 6700                       		beq.s   PSB_PrsStart_Show   ; if not, branch
0000CA14 5828 0024                  		addq.b   #4,obRoutine(a0)      ; go to Menu in next frame
0000CA18 303C 00A1                  		move.w   #$A1,d0 
0000CA1C 4EB8 12A0                  		jsr   PlaySound_Special
0000CA20 317C 056F 0002             		move.w   #$56F,obGfx(a0)
0000CA26 217C 0000 0000 0004        		move.l   #Map_TitleMenu,obMap(a0) 
0000CA2E 317C 00F8 0008             		move.w	#$F8,obX(a0)
0000CA34 317C 0150 000A             		move.w	#$150,obScreenY(a0)
0000CA3A 4E75                       		rts
0000CA3C                            
0000CA3C                            PSB_PrsStart_Show:
0000CA3C 43F9 0000 0000             		lea	(Ani_PSBTM).l,a1
0000CA42 6000 0000                  		bra.w	AnimateSprite	; "PRESS START" is animated
0000CA46                            
0000CA46                            PSB_Menu:
0000CA46 7400                             moveq   #0,d2
0000CA48 1438 FFB0                        move.b   (Title_screen_option).w,d2
0000CA4C 1038 F605                        move.b   (v_jpadpress1).w,d0
0000CA50 0800 0000                        btst   #0,d0
0000CA54 6700                             beq.s   MAIN2
0000CA56 5302                             subq.b   #1,d2
0000CA58 6400                             bcc.s   MAIN2
0000CA5A 143C 0001                        move.b   #1,d2
0000CA5E                            
0000CA5E                            MAIN2:
0000CA5E 0800 0001                        btst   #1,d0
0000CA62 6700                             beq.s   MAIN3
0000CA64 5202                             addq.b   #1,d2
0000CA66 0C02 0002                        cmpi.b   #2,d2
0000CA6A 6500                             blo.s   MAIN3
0000CA6C 7400                             moveq   #0,d2
0000CA6E                            
0000CA6E                            MAIN3:
0000CA6E 1142 001A                        move.b   d2,$1A(a0)
0000CA72 11C2 FFB0                        move.b   d2,(Title_screen_option).w
0000CA76 0200 0003                        andi.b   #3,d0
0000CA7A 6700                             beq.s   MAIN4   
0000CA7C 303C 00CD                        move.w   #$CD,d0 ; selection blip sound
0000CA80 4EB8 12A0                        jsr   PlaySound_Special
0000CA84                            
0000CA84                            MAIN4:
0000CA84 0838 0007 F605                   btst   #7,(v_jpadpress1).w   ; check if Start is pressed
0000CA8A 6700                             beq.s   MENURTS   ; if not, branch
0000CA8C 4EF9 0000 0000                   jmp   DeleteObject   ; if yes, delete the Title Screen Menu
0000CA92                            
0000CA92                            MENURTS:
0000CA92 4E75                             rts															 
0000CA94                            ; ===========================================================================
0000CA94                            
0000CA94                            
0000CA94                            Map_TitleMenu:
0000CA94                            		include "_maps\Title Screen Menu.asm"		
0000CA94                            ; --------------------------------------------------------------------------------
0000CA94                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0000CA94                            ; --------------------------------------------------------------------------------
0000CA94                            
0000CA94                            SME_g2Qfx:	
0000CA94 0000 0000                  		dc.w SME_g2Qfx_6-SME_g2Qfx, SME_g2Qfx_6B-SME_g2Qfx	
0000CA98 10                         SME_g2Qfx_6:	dc.b $10	
0000CA99 E004 0020 F8               		dc.b $E0, 4, 0, $20, $F8	
0000CA9E E000 000E 08               		dc.b $E0, 0, 0, $E, 8	
0000CAA3 E000 001F 10               		dc.b $E0, 0, 0, $1F, $10	
0000CAA8 E000 0021 18               		dc.b $E0, 0, 0, $21, $18	
0000CAAD E000 0014 28               		dc.b $E0, 0, 0, $14, $28	
0000CAB2 E000 000E 30               		dc.b $E0, 0, 0, $E, $30	
0000CAB7 E000 001A 38               		dc.b $E0, 0, 0, $1A, $38	
0000CABC E000 0012 40               		dc.b $E0, 0, 0, $12, $40	
0000CAC1 F000 001C 04               		dc.b $F0, 0, 0, $1C, 4	
0000CAC6 F000 001D 0C               		dc.b $F0, 0, 0, $1D, $C	
0000CACB F000 0021 14               		dc.b $F0, 0, 0, $21, $14	
0000CAD0 F000 0016 1C               		dc.b $F0, 0, 0, $16, $1C	
0000CAD5 F000 001C 24               		dc.b $F0, 0, 0, $1C, $24	
0000CADA F000 001B 2C               		dc.b $F0, 0, 0, $1B, $2C	
0000CADF F000 0020 34               		dc.b $F0, 0, 0, $20, $34	
0000CAE4 E004 0028 E0               		dc.b $E0, 4, 0, $28, $E0	
0000CAE9 10                         SME_g2Qfx_6B:	dc.b $10	
0000CAEA E004 0020 F8               		dc.b $E0, 4, 0, $20, $F8	
0000CAEF E000 000E 08               		dc.b $E0, 0, 0, $E, 8	
0000CAF4 E000 001F 10               		dc.b $E0, 0, 0, $1F, $10	
0000CAF9 E000 0021 18               		dc.b $E0, 0, 0, $21, $18	
0000CAFE E000 0014 28               		dc.b $E0, 0, 0, $14, $28	
0000CB03 E000 000E 30               		dc.b $E0, 0, 0, $E, $30	
0000CB08 E000 001A 38               		dc.b $E0, 0, 0, $1A, $38	
0000CB0D E000 0012 40               		dc.b $E0, 0, 0, $12, $40	
0000CB12 F000 001C 04               		dc.b $F0, 0, 0, $1C, 4	
0000CB17 F000 001D 0C               		dc.b $F0, 0, 0, $1D, $C	
0000CB1C F000 0021 14               		dc.b $F0, 0, 0, $21, $14	
0000CB21 F000 0016 1C               		dc.b $F0, 0, 0, $16, $1C	
0000CB26 F000 001C 24               		dc.b $F0, 0, 0, $1C, $24	
0000CB2B F000 001B 2C               		dc.b $F0, 0, 0, $1B, $2C	
0000CB30 F000 0020 34               		dc.b $F0, 0, 0, $20, $34	
0000CB35 F004 0028 E0               		dc.b $F0, 4, 0, $28, $E0
0000CB3A                            		even
0000CB3A                            		even
0000CB3A                            		even
0000CB3A                            
0000CB3A                            		include	"_anim\Title Screen Sonic.asm"
0000CB3A                            ; ---------------------------------------------------------------------------
0000CB3A                            ; Animation script - Sonic on the title screen
0000CB3A                            ; ---------------------------------------------------------------------------
0000CB3A 0000                       Ani_TSon:	dc.w byte_A706-Ani_TSon
0000CB3C 0700 0102 0304 0506 07FE+  byte_A706:	dc.b 7,	0, 1, 2, 3, 4, 5, 6, 7,	afBack, 2
0000CB48 00                         		even
0000CB48 00                         		even
0000CB48                            		include	"_anim\Press Start and TM.asm"
0000CB48                            ; ---------------------------------------------------------------------------
0000CB48                            ; Animation script - "TM" and "PRESS START BUTTON" on the title screen
0000CB48                            ; ---------------------------------------------------------------------------
0000CB48 0000                       Ani_PSBTM:	dc.w @flash-Ani_PSBTM
0000CB4A 1F00 01FF                  @flash:		dc.b $1F, 0, 1,	afEnd
0000CB4E                            		even
0000CB4E                            		even
0000CB4E                            
0000CB4E                            		include	"_incObj\sub AnimateSprite.asm"
0000CB4E                            ; ---------------------------------------------------------------------------
0000CB4E                            ; Subroutine to	animate	a sprite using an animation script
0000CB4E                            ; ---------------------------------------------------------------------------
0000CB4E                            
0000CB4E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000CB4E                            
0000CB4E                            
0000CB4E                            AnimateSprite:
0000CB4E 7000                       		moveq	#0,d0
0000CB50 1028 001C                  		move.b	obAnim(a0),d0	; move animation number	to d0
0000CB54 B028 001D                  		cmp.b	obNextAni(a0),d0 ; is animation set to restart?
0000CB58 6700                       		beq.s	Anim_Run	; if not, branch
0000CB5A                            
0000CB5A 1140 001D                  		move.b	d0,obNextAni(a0) ; set to "no restart"
0000CB5E 117C 0000 001B             		move.b	#0,obAniFrame(a0) ; reset animation
0000CB64 117C 0000 001E             		move.b	#0,obTimeFrame(a0) ; reset frame duration
0000CB6A                            
0000CB6A                            Anim_Run:
0000CB6A 5328 001E                  		subq.b	#1,obTimeFrame(a0) ; subtract 1 from frame duration
0000CB6E 6A00                       		bpl.s	Anim_Wait	; if time remains, branch
0000CB70 D040                       		add.w	d0,d0
0000CB72 D2F1 0000                  		adda.w	(a1,d0.w),a1	; jump to appropriate animation	script
0000CB76 1151 001E                  		move.b	(a1),obTimeFrame(a0) ; load frame duration
0000CB7A 7200                       		moveq	#0,d1
0000CB7C 1228 001B                  		move.b	obAniFrame(a0),d1 ; load current frame number
0000CB80 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number from script
0000CB84 6B00                       		bmi.s	Anim_End_FF	; if animation is complete, branch
0000CB86                            
0000CB86                            Anim_Next:
0000CB86 1200                       		move.b	d0,d1
0000CB88 0200 001F                  		andi.b	#$1F,d0
0000CB8C 1140 001A                  		move.b	d0,obFrame(a0)	; load sprite number
0000CB90 1028 0022                  		move.b	obStatus(a0),d0
0000CB94 E719                       		rol.b	#3,d1
0000CB96 B101                       		eor.b	d0,d1
0000CB98 0201 0003                  		andi.b	#3,d1
0000CB9C 0228 00FC 0001             		andi.b	#$FC,obRender(a0)
0000CBA2 8328 0001                  		or.b	d1,obRender(a0)
0000CBA6 5228 001B                  		addq.b	#1,obAniFrame(a0) ; next frame number
0000CBAA                            
0000CBAA                            Anim_Wait:
0000CBAA 4E75                       		rts	
0000CBAC                            ; ===========================================================================
0000CBAC                            
0000CBAC                            Anim_End_FF:
0000CBAC 5200                       		addq.b	#1,d0		; is the end flag = $FF	?
0000CBAE 6600                       		bne.s	Anim_End_FE	; if not, branch
0000CBB0 117C 0000 001B             		move.b	#0,obAniFrame(a0) ; restart the animation
0000CBB6 1029 0001                  		move.b	1(a1),d0	; read sprite number
0000CBBA 60CA                       		bra.s	Anim_Next
0000CBBC                            ; ===========================================================================
0000CBBC                            
0000CBBC                            Anim_End_FE:
0000CBBC 5200                       		addq.b	#1,d0		; is the end flag = $FE	?
0000CBBE 6600                       		bne.s	Anim_End_FD	; if not, branch
0000CBC0 1031 1002                  		move.b	2(a1,d1.w),d0	; read the next	byte in	the script
0000CBC4 9128 001B                  		sub.b	d0,obAniFrame(a0) ; jump back d0 bytes in the script
0000CBC8 9200                       		sub.b	d0,d1
0000CBCA 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number
0000CBCE 60B6                       		bra.s	Anim_Next
0000CBD0                            ; ===========================================================================
0000CBD0                            
0000CBD0                            Anim_End_FD:
0000CBD0 5200                       		addq.b	#1,d0		; is the end flag = $FD	?
0000CBD2 6600                       		bne.s	Anim_End_FC	; if not, branch
0000CBD4 1171 1002 001C             		move.b	2(a1,d1.w),obAnim(a0) ; read next byte, run that animation
0000CBDA                            
0000CBDA                            Anim_End_FC:
0000CBDA 5200                       		addq.b	#1,d0		; is the end flag = $FC	?
0000CBDC 6600                       		bne.s	Anim_End_FB	; if not, branch
0000CBDE 5428 0024                  		addq.b	#2,obRoutine(a0) ; jump to next routine
0000CBE2                            
0000CBE2                            Anim_End_FB:
0000CBE2 5200                       		addq.b	#1,d0		; is the end flag = $FB	?
0000CBE4 6600                       		bne.s	Anim_End_FA	; if not, branch
0000CBE6 117C 0000 001B             		move.b	#0,obAniFrame(a0) ; reset animation
0000CBEC 4228 0025                  		clr.b	ob2ndRout(a0)	; reset	2nd routine counter
0000CBF0                            
0000CBF0                            Anim_End_FA:
0000CBF0 5200                       		addq.b	#1,d0		; is the end flag = $FA	?
0000CBF2 6600                       		bne.s	Anim_End	; if not, branch
0000CBF4 5428 0025                  		addq.b	#2,ob2ndRout(a0) ; jump to next routine
0000CBF8                            
0000CBF8                            Anim_End:
0000CBF8 4E75                       		rts	
0000CBFA                            ; End of function AnimateSprite
0000CBFA                            ; End of function AnimateSprite
0000CBFA                            
0000CBFA                            Map_PSB:	include	"_maps\Press Start and TM.asm"
0000CBFA                            ; ---------------------------------------------------------------------------
0000CBFA                            ; Sprite mappings - "PRESS START BUTTON" and "TM" from title screen
0000CBFA                            ; ---------------------------------------------------------------------------
0000CBFA                            Map_PSB_internal:
0000CBFA 0000                       		dc.w byte_A7CD-Map_PSB_internal
0000CBFC 0000                       		dc.w M_PSB_PSB-Map_PSB_internal
0000CBFE 0000                       		dc.w M_PSB_Limiter-Map_PSB_internal
0000CC00 0000                       		dc.w M_PSB_TM-Map_PSB_internal
0000CC02 06                         M_PSB_PSB:	dc.b 6			; "PRESS START BUTTON"
0000CC03 000C 00F0 00               byte_A7CD:	dc.b 0,	$C, 0, $F0, 0
0000CC08 0000 00F3 20               		dc.b 0,	0, 0, $F3, $20
0000CC0D 0000 00F3 30               		dc.b 0,	0, 0, $F3, $30
0000CC12 000C 00F4 38               		dc.b 0,	$C, 0, $F4, $38
0000CC17 0008 00F8 60               		dc.b 0,	8, 0, $F8, $60
0000CC1C 0008 00FB 78               		dc.b 0,	8, 0, $FB, $78
0000CC21 1E                         M_PSB_Limiter:	dc.b $1E		; sprite line limiter
0000CC22 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000CC27 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000CC2C B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000CC31 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000CC36 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000CC3B B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000CC40 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000CC45 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000CC4A B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000CC4F B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000CC54 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000CC59 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000CC5E D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000CC63 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000CC68 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000CC6D D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000CC72 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000CC77 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000CC7C D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000CC81 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000CC86 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000CC8B F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000CC90 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000CC95 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000CC9A F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000CC9F F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000CCA4 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000CCA9 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000CCAE F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000CCB3 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000CCB8 01                         M_PSB_TM:	dc.b 1			; "TM"
0000CCB9 FC04 0000 F8               		dc.b $FC, 4, 0,	0, $F8
0000CCBE                            		even
0000CCBE                            		even
0000CCBE                            Map_TSon:	include	"_maps\Title Screen Sonic.asm"
0000CCBE                            ; ---------------------------------------------------------------------------
0000CCBE                            ; Sprite mappings - Sonic on the title screen
0000CCBE                            ; ---------------------------------------------------------------------------
0000CCBE                            Map_TSon_internal:
0000CCBE 0000                       		dc.w byte_A898-Map_TSon_internal
0000CCC0 0000                       		dc.w byte_A8CB-Map_TSon_internal
0000CCC2 0000                       		dc.w byte_A917-Map_TSon_internal
0000CCC4 0000                       		dc.w byte_A96D-Map_TSon_internal
0000CCC6 0000                       		dc.w byte_A9AF-Map_TSon_internal
0000CCC8 0000                       		dc.w byte_A9E7-Map_TSon_internal
0000CCCA 0000                       		dc.w byte_AA47-Map_TSon_internal
0000CCCC 0000                       		dc.w byte_AAB1-Map_TSon_internal
0000CCCE 0A                         byte_A898:	dc.b $A
0000CCCF 0808 0000 08               		dc.b 8,	8, 0, 0, 8
0000CCD4 100F 0003 08               		dc.b $10, $F, 0, 3, 8
0000CCD9 100F 0013 28               		dc.b $10, $F, 0, $13, $28
0000CCDE 300E 0023 08               		dc.b $30, $E, 0, $23, 8
0000CCE3 300E 002F 28               		dc.b $30, $E, 0, $2F, $28
0000CCE8 480D 003B 00               		dc.b $48, $D, 0, $3B, 0
0000CCED 4809 0043 20               		dc.b $48, 9, 0,	$43, $20
0000CCF2 4800 0049 38               		dc.b $48, 0, 0,	$49, $38
0000CCF7 580C 004A 08               		dc.b $58, $C, 0, $4A, 8
0000CCFC 5800 004E 28               		dc.b $58, 0, 0,	$4E, $28
0000CD01 0F                         byte_A8CB:	dc.b $F
0000CD02 480E 01BD 20               		dc.b $48, $E, 1, $BD, $20
0000CD07 3805 01C9 38               		dc.b $38, 5, 1,	$C9, $38
0000CD0C 4000 01CD 30               		dc.b $40, 0, 1,	$CD, $30
0000CD11 4800 01CE 40               		dc.b $48, 0, 1,	$CE, $40
0000CD16 6000 01CF 20               		dc.b $60, 0, 1,	$CF, $20
0000CD1B 100E 004F 08               		dc.b $10, $E, 0, $4F, 8
0000CD20 100E 005B 28               		dc.b $10, $E, 0, $5B, $28
0000CD25 1801 0067 48               		dc.b $18, 1, 0,	$67, $48
0000CD2A 2802 0069 00               		dc.b $28, 2, 0,	$69, 0
0000CD2F 280F 006C 08               		dc.b $28, $F, 0, $6C, 8
0000CD34 280F 007C 28               		dc.b $28, $F, 0, $7C, $28
0000CD39 3002 008C 48               		dc.b $30, 2, 0,	$8C, $48
0000CD3E 480E 008F 10               		dc.b $48, $E, 0, $8F, $10
0000CD43 4809 009B 30               		dc.b $48, 9, 0,	$9B, $30
0000CD48 5804 00A1 30               		dc.b $58, 4, 0,	$A1, $30
0000CD4D 11                         byte_A917:	dc.b $11
0000CD4E 380E 01BD 28               		dc.b $38, $E, 1, $BD, $28
0000CD53 2805 01C9 40               		dc.b $28, 5, 1,	$C9, $40
0000CD58 3000 01CD 38               		dc.b $30, 0, 1,	$CD, $38
0000CD5D 3800 01CE 48               		dc.b $38, 0, 1,	$CE, $48
0000CD62 5000 01CF 28               		dc.b $50, 0, 1,	$CF, $28
0000CD67 200F 01A9 08               		dc.b $20, $F, 1, $A9, 8
0000CD6C 2003 01B9 28               		dc.b $20, 3, 1,	$B9, $28
0000CD71 100E 004F 08               		dc.b $10, $E, 0, $4F, 8
0000CD76 100E 005B 28               		dc.b $10, $E, 0, $5B, $28
0000CD7B 1801 0067 48               		dc.b $18, 1, 0,	$67, $48
0000CD80 2802 0069 00               		dc.b $28, 2, 0,	$69, 0
0000CD85 280F 006C 08               		dc.b $28, $F, 0, $6C, 8
0000CD8A 280F 007C 28               		dc.b $28, $F, 0, $7C, $28
0000CD8F 3002 008C 48               		dc.b $30, 2, 0,	$8C, $48
0000CD94 480E 008F 10               		dc.b $48, $E, 0, $8F, $10
0000CD99 4809 009B 30               		dc.b $48, 9, 0,	$9B, $30
0000CD9E 5804 00A1 30               		dc.b $58, 4, 0,	$A1, $30
0000CDA3 0D                         byte_A96D:	dc.b $D
0000CDA4 100F 00A3 08               		dc.b $10, $F, 0, $A3, 8
0000CDA9 0808 00B3 28               		dc.b 8,	8, 0, $B3, $28
0000CDAE 100F 00B6 28               		dc.b $10, $F, 0, $B6, $28
0000CDB3 1800 00C6 48               		dc.b $18, 0, 0,	$C6, $48
0000CDB8 2006 00C7 48               		dc.b $20, 6, 0,	$C7, $48
0000CDBD 3800 00CD 48               		dc.b $38, 0, 0,	$CD, $48
0000CDC2 300D 00CE 08               		dc.b $30, $D, 0, $CE, 8
0000CDC7 300E 00D6 28               		dc.b $30, $E, 0, $D6, $28
0000CDCC 400B 00E2 10               		dc.b $40, $B, 0, $E2, $10
0000CDD1 4808 00EE 28               		dc.b $48, 8, 0,	$EE, $28
0000CDD6 5001 00F1 08               		dc.b $50, 1, 0,	$F1, 8
0000CDDB 5004 00F3 28               		dc.b $50, 4, 0,	$F3, $28
0000CDE0 5800 00F5 28               		dc.b $58, 0, 0,	$F5, $28
0000CDE5 0B                         byte_A9AF:	dc.b $B
0000CDE6 080F 00F6 10               		dc.b 8,	$F, 0, $F6, $10
0000CDEB 080B 0106 30               		dc.b 8,	$B, 1, 6, $30
0000CDF0 1006 0112 48               		dc.b $10, 6, 1,	$12, $48
0000CDF5 280E 0118 18               		dc.b $28, $E, 1, $18, $18
0000CDFA 280E 0124 38               		dc.b $28, $E, 1, $24, $38
0000CDFF 2801 0130 10               		dc.b $28, 1, 1,	$30, $10
0000CE04 400E 0132 10               		dc.b $40, $E, 1, $32, $10
0000CE09 4006 013E 30               		dc.b $40, 6, 1,	$3E, $30
0000CE0E 4004 0144 40               		dc.b $40, 4, 1,	$44, $40
0000CE13 4800 0146 40               		dc.b $48, 0, 1,	$46, $40
0000CE18 5808 0147 18               		dc.b $58, 8, 1,	$47, $18
0000CE1D 13                         byte_A9E7:	dc.b $13
0000CE1E 280E 01E4 38               		dc.b $28, $E, 1, $E4, $38
0000CE23 1805 01F0 48               		dc.b $18, 5, 1,	$F0, $48
0000CE28 4008 01F4 38               		dc.b $40, 8, 1,	$F4, $38
0000CE2D 4804 01F7 38               		dc.b $48, 4, 1,	$F7, $38
0000CE32 100F 014A 10               		dc.b $10, $F, 1, $4A, $10
0000CE37 0804 015A 20               		dc.b 8,	4, 1, $5A, $20
0000CE3C 000B 015C 30               		dc.b 0,	$B, 1, $5C, $30
0000CE41 0800 0168 48               		dc.b 8,	0, 1, $68, $48
0000CE46 1800 0169 48               		dc.b $18, 0, 1,	$69, $48
0000CE4B 1805 016A 00               		dc.b $18, 5, 1,	$6A, 0
0000CE50 2802 016E 08               		dc.b $28, 2, 1,	$6E, 8
0000CE55 300F 0171 10               		dc.b $30, $F, 1, $71, $10
0000CE5A 200D 0181 30               		dc.b $20, $D, 1, $81, $30
0000CE5F 2001 0189 50               		dc.b $20, 1, 1,	$89, $50
0000CE64 3008 018B 30               		dc.b $30, 8, 1,	$8B, $30
0000CE69 380E 018E 30               		dc.b $38, $E, 1, $8E, $30
0000CE6E 500D 019A 08               		dc.b $50, $D, 1, $9A, 8
0000CE73 500C 01A2 28               		dc.b $50, $C, 1, $A2, $28
0000CE78 5808 01A6 28               		dc.b $58, 8, 1,	$A6, $28
0000CE7D 15                         byte_AA47:	dc.b $15
0000CE7E 280E 01E4 38               		dc.b $28, $E, 1, $E4, $38
0000CE83 1805 01F0 48               		dc.b $18, 5, 1,	$F0, $48
0000CE88 4008 01F4 38               		dc.b $40, 8, 1,	$F4, $38
0000CE8D 4804 01F7 38               		dc.b $48, 4, 1,	$F7, $38
0000CE92 180F 01D0 08               		dc.b $18, $F, 1, $D0, 8
0000CE97 1803 01E0 28               		dc.b $18, 3, 1,	$E0, $28
0000CE9C 100F 014A 10               		dc.b $10, $F, 1, $4A, $10
0000CEA1 0804 015A 20               		dc.b 8,	4, 1, $5A, $20
0000CEA6 000B 015C 30               		dc.b 0,	$B, 1, $5C, $30
0000CEAB 0800 0168 48               		dc.b 8,	0, 1, $68, $48
0000CEB0 1800 0169 48               		dc.b $18, 0, 1,	$69, $48
0000CEB5 1805 016A 00               		dc.b $18, 5, 1,	$6A, 0
0000CEBA 2802 016E 08               		dc.b $28, 2, 1,	$6E, 8
0000CEBF 300F 0171 10               		dc.b $30, $F, 1, $71, $10
0000CEC4 200D 0181 30               		dc.b $20, $D, 1, $81, $30
0000CEC9 2001 0189 50               		dc.b $20, 1, 1,	$89, $50
0000CECE 3008 018B 30               		dc.b $30, 8, 1,	$8B, $30
0000CED3 380E 018E 30               		dc.b $38, $E, 1, $8E, $30
0000CED8 500D 019A 08               		dc.b $50, $D, 1, $9A, 8
0000CEDD 500C 01A2 28               		dc.b $50, $C, 1, $A2, $28
0000CEE2 5808 01A6 28               		dc.b $58, 8, 1,	$A6, $28
0000CEE7 16                         byte_AAB1:	dc.b $16
0000CEE8 1804 01F9 38               		dc.b $18, 4, 1,	$F9, $38
0000CEED 2000 01FB 38               		dc.b $20, 0, 1,	$FB, $38
0000CEF2 2808 01FC 30               		dc.b $28, 8, 1,	$FC, $30
0000CEF7 3001 01FF 30               		dc.b $30, 1, 1,	$FF, $30
0000CEFC 300B 0201 38               		dc.b $30, $B, 2, 1, $38
0000CF01 180F 01D0 08               		dc.b $18, $F, 1, $D0, 8
0000CF06 1803 01E0 28               		dc.b $18, 3, 1,	$E0, $28
0000CF0B 100F 014A 10               		dc.b $10, $F, 1, $4A, $10
0000CF10 0804 015A 20               		dc.b 8,	4, 1, $5A, $20
0000CF15 000B 015C 30               		dc.b 0,	$B, 1, $5C, $30
0000CF1A 0800 0168 48               		dc.b 8,	0, 1, $68, $48
0000CF1F 1800 0169 48               		dc.b $18, 0, 1,	$69, $48
0000CF24 1805 016A 00               		dc.b $18, 5, 1,	$6A, 0
0000CF29 2802 016E 08               		dc.b $28, 2, 1,	$6E, 8
0000CF2E 300F 0171 10               		dc.b $30, $F, 1, $71, $10
0000CF33 200D 0181 30               		dc.b $20, $D, 1, $81, $30
0000CF38 2001 0189 50               		dc.b $20, 1, 1,	$89, $50
0000CF3D 3008 018B 30               		dc.b $30, 8, 1,	$8B, $30
0000CF42 380E 018E 30               		dc.b $38, $E, 1, $8E, $30
0000CF47 500D 019A 08               		dc.b $50, $D, 1, $9A, 8
0000CF4C 500C 01A2 28               		dc.b $50, $C, 1, $A2, $28
0000CF51 5808 01A6 28               		dc.b $58, 8, 1,	$A6, $28
0000CF56                            		even
0000CF56                            		even
0000CF56                            
0000CF56                            		include	"_incObj\2B Chopper.asm"
0000CF56                            ; ---------------------------------------------------------------------------
0000CF56                            ; Object 2B - Chopper enemy (GHZ)
0000CF56                            ; ---------------------------------------------------------------------------
0000CF56                            
0000CF56                            Chopper:
0000CF56 7000                       		moveq	#0,d0
0000CF58 1028 0024                  		move.b	obRoutine(a0),d0
0000CF5C 323B 0000                  		move.w	Chop_Index(pc,d0.w),d1
0000CF60 4EBB 1000                  		jsr	Chop_Index(pc,d1.w)
0000CF64 6000 0000                  		bra.w	RememberState
0000CF68                            ; ===========================================================================
0000CF68 0000                       Chop_Index:	dc.w Chop_Main-Chop_Index
0000CF6A 0000                       		dc.w Chop_ChgSpeed-Chop_Index
0000CF6C                            
0000CF6C =00000030                  chop_origY:	equ $30
0000CF6C                            ; ===========================================================================
0000CF6C                            
0000CF6C                            Chop_Main:	; Routine 0
0000CF6C 5428 0024                  		addq.b	#2,obRoutine(a0)
0000CF70 217C 0000 0000 0004        		move.l	#Map_Chop,obMap(a0)
0000CF78 317C 047B 0002             		move.w	#$47B,obGfx(a0)
0000CF7E 117C 0004 0001             		move.b	#4,obRender(a0)
0000CF84 317C 0200 0018             		move.w	#$200,obPriority(a0)
0000CF8A 117C 0009 0020             		move.b	#9,obColType(a0)
0000CF90 117C 0010 0014             		move.b	#$10,obActWid(a0)
0000CF96 317C F900 0012             		move.w	#-$700,obVelY(a0) ; set vertical speed
0000CF9C 3168 000C 0030             		move.w	obY(a0),chop_origY(a0) ; save original position
0000CFA2                            
0000CFA2                            Chop_ChgSpeed:	; Routine 2
0000CFA2 43F9 0000 0000             		lea	(Ani_Chop).l,a1
0000CFA8 6100 FBA4                  		bsr.w	AnimateSprite
0000CFAC 6100 0000                  		bsr.w	SpeedToPos
0000CFB0 0668 0018 0012             		addi.w	#$18,obVelY(a0)	; reduce speed
0000CFB6 3028 0030                  		move.w	chop_origY(a0),d0
0000CFBA B068 000C                  		cmp.w	obY(a0),d0	; has Chopper returned to its original position?
0000CFBE 6400                       		bcc.s	@chganimation	; if not, branch
0000CFC0 3140 000C                  		move.w	d0,obY(a0)
0000CFC4 317C F900 0012             		move.w	#-$700,obVelY(a0) ; set vertical speed
0000CFCA                            
0000CFCA                            	@chganimation:
0000CFCA 117C 0001 001C             		move.b	#1,obAnim(a0)	; use fast animation
0000CFD0 0440 00C0                  		subi.w	#$C0,d0
0000CFD4 B068 000C                  		cmp.w	obY(a0),d0
0000CFD8 6400                       		bcc.s	@nochg
0000CFDA 117C 0000 001C             		move.b	#0,obAnim(a0)	; use slow animation
0000CFE0 4A68 0012                  		tst.w	obVelY(a0)	; is Chopper at	its highest point?
0000CFE4 6B00                       		bmi.s	@nochg		; if not, branch
0000CFE6 117C 0002 001C             		move.b	#2,obAnim(a0)	; use stationary animation
0000CFEC                            
0000CFEC                            	@nochg:
0000CFEC 4E75                       		rts	
0000CFEC 4E75                       		rts	
0000CFEE                            		include	"_anim\Chopper.asm"
0000CFEE                            ; ---------------------------------------------------------------------------
0000CFEE                            ; Animation script - Chopper enemy
0000CFEE                            ; ---------------------------------------------------------------------------
0000CFEE 0000                       Ani_Chop:	dc.w @slow-Ani_Chop
0000CFF0 0000                       		dc.w @fast-Ani_Chop
0000CFF2 0000                       		dc.w @still-Ani_Chop
0000CFF4 0700 01FF                  @slow:		dc.b 7,	0, 1, afEnd
0000CFF8 0300 01FF                  @fast:		dc.b 3,	0, 1, afEnd
0000CFFC 0700 FF                    @still:		dc.b 7,	0, afEnd
0000D000 00                         		even
0000D000 00                         		even
0000D000                            Map_Chop:	include	"_maps\Chopper.asm"
0000D000                            ; ---------------------------------------------------------------------------
0000D000                            ; Sprite mappings - Chopper enemy (GHZ)
0000D000                            ; ---------------------------------------------------------------------------
0000D000                            Map_Chop_internal:
0000D000 0000                       		dc.w @mouthshut-Map_Chop_internal
0000D002 0000                       		dc.w @mouthopen-Map_Chop_internal
0000D004 01                         @mouthshut:	dc.b 1
0000D005 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
0000D00A 01                         @mouthopen:	dc.b 1
0000D00B F00F 0010 F0               		dc.b $F0, $F, 0, $10, $F0
0000D010                            		even
0000D010                            		even
0000D010                            		include	"_incObj\2C Jaws.asm"
0000D010                            ; ---------------------------------------------------------------------------
0000D010                            ; Object 2C - Jaws enemy (LZ)
0000D010                            ; ---------------------------------------------------------------------------
0000D010                            
0000D010                            Jaws:
0000D010 7000                       		moveq	#0,d0
0000D012 1028 0024                  		move.b	obRoutine(a0),d0
0000D016 323B 0000                  		move.w	Jaws_Index(pc,d0.w),d1
0000D01A 4EFB 1000                  		jmp	Jaws_Index(pc,d1.w)
0000D01E                            ; ===========================================================================
0000D01E 0000                       Jaws_Index:	dc.w Jaws_Main-Jaws_Index
0000D020 0000                       		dc.w Jaws_Turn-Jaws_Index
0000D022                            
0000D022 =00000030                  jaws_timecount:	equ $30
0000D022 =00000032                  jaws_timedelay:	equ $32
0000D022                            ; ===========================================================================
0000D022                            
0000D022                            Jaws_Main:	; Routine 0
0000D022 5428 0024                  		addq.b	#2,obRoutine(a0)
0000D026 217C 0000 0000 0004        		move.l	#Map_Jaws,obMap(a0)
0000D02E 317C 2486 0002             		move.w	#$2486,obGfx(a0)
0000D034 0028 0004 0001             		ori.b	#4,obRender(a0)
0000D03A 117C 000A 0020             		move.b	#$A,obColType(a0)
0000D040 317C 0200 0018             		move.w	#$200,obPriority(a0)
0000D046 117C 0010 0014             		move.b	#$10,obActWid(a0)
0000D04C 7000                       		moveq	#0,d0
0000D04E 1028 0028                  		move.b	obSubtype(a0),d0 ; load object subtype number
0000D052 ED48                       		lsl.w	#6,d0		; multiply d0 by 64
0000D054 5340                       		subq.w	#1,d0
0000D056 3140 0030                  		move.w	d0,jaws_timecount(a0) ; set turn delay time
0000D05A 3140 0032                  		move.w	d0,jaws_timedelay(a0)
0000D05E 317C FFC0 0010             		move.w	#-$40,obVelX(a0) ; move Jaws to the left
0000D064 0828 0000 0022             		btst	#0,obStatus(a0)	; is Jaws facing left?
0000D06A 6700                       		beq.s	Jaws_Turn	; if yes, branch
0000D06C 4468 0010                  		neg.w	obVelX(a0)	; move Jaws to the right
0000D070                            
0000D070                            Jaws_Turn:	; Routine 2
0000D070 5368 0030                  		subq.w	#1,jaws_timecount(a0) ; subtract 1 from turn delay time
0000D074 6A00                       		bpl.s	@animate	; if time remains, branch
0000D076 3168 0032 0030             		move.w	jaws_timedelay(a0),jaws_timecount(a0) ; reset turn delay time
0000D07C 4468 0010                  		neg.w	obVelX(a0)	; change speed direction
0000D080 0868 0000 0022             		bchg	#0,obStatus(a0)	; change Jaws facing direction
0000D086 117C 0001 001D             		move.b	#1,obNextAni(a0) ; reset animation
0000D08C                            
0000D08C                            	@animate:
0000D08C 43F9 0000 0000             		lea	(Ani_Jaws).l,a1
0000D092 6100 FABA                  		bsr.w	AnimateSprite
0000D096 6100 0000                  		bsr.w	SpeedToPos
0000D09A 6000 0000                  		bra.w	RememberState
0000D09A 6000 0000                  		bra.w	RememberState
0000D09E                            		include	"_anim\Jaws.asm"
0000D09E                            ; ---------------------------------------------------------------------------
0000D09E                            ; Animation script - Jaws enemy
0000D09E                            ; ---------------------------------------------------------------------------
0000D09E 0000                       Ani_Jaws:	dc.w @swim-Ani_Jaws
0000D0A0 0700 0102 03FF             @swim:		dc.b 7,	0, 1, 2, 3, afEnd
0000D0A6                            		even
0000D0A6                            		even
0000D0A6                            Map_Jaws:	include	"_maps\Jaws.asm"
0000D0A6                            ; --------------------------------------------------------------------------------
0000D0A6                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0000D0A6                            ; --------------------------------------------------------------------------------
0000D0A6                            
0000D0A6                            SME_O5C0c:	
0000D0A6 0000 0000                  		dc.w SME_O5C0c_8-SME_O5C0c, SME_O5C0c_13-SME_O5C0c	
0000D0AA 0000 0000                  		dc.w SME_O5C0c_1E-SME_O5C0c, SME_O5C0c_29-SME_O5C0c	
0000D0AE 02                         SME_O5C0c_8:	dc.b 2	
0000D0AF F40E 0000 F0               		dc.b $F4, $E, 0, 0, $F0	
0000D0B4 F505 0018 10               		dc.b $F5, 5, 0, $18, $10	
0000D0B9 02                         SME_O5C0c_13:	dc.b 2	
0000D0BA F40E 000C F0               		dc.b $F4, $E, 0, $C, $F0	
0000D0BF F505 001C 10               		dc.b $F5, 5, 0, $1C, $10	
0000D0C4 02                         SME_O5C0c_1E:	dc.b 2	
0000D0C5 F40E 0000 F0               		dc.b $F4, $E, 0, 0, $F0	
0000D0CA F505 0018 10               		dc.b $F5, 5, 0, $18, $10	
0000D0CF 02                         SME_O5C0c_29:	dc.b 2	
0000D0D0 F40E 000C F0               		dc.b $F4, $E, 0, $C, $F0	
0000D0D5 F505 001C 10               		dc.b $F5, 5, 0, $1C, $10	
0000D0DA                            		even
0000D0DA                            		even
0000D0DA                            		include	"_incObj\2D Burrobot.asm"
0000D0DA                            ; ---------------------------------------------------------------------------
0000D0DA                            ; Object 2D - Burrobot enemy (LZ)
0000D0DA                            ; ---------------------------------------------------------------------------
0000D0DA                            
0000D0DA                            Burrobot:
0000D0DA 7000                       		moveq	#0,d0
0000D0DC 1028 0024                  		move.b	obRoutine(a0),d0
0000D0E0 323B 0000                  		move.w	Burro_Index(pc,d0.w),d1
0000D0E4 4EFB 1000                  		jmp	Burro_Index(pc,d1.w)
0000D0E8                            ; ===========================================================================
0000D0E8 0000                       Burro_Index:	dc.w Burro_Main-Burro_Index
0000D0EA 0000                       		dc.w Burro_Action-Burro_Index
0000D0EC                            
0000D0EC =00000030                  burro_timedelay:	equ $30		; time between direction changes
0000D0EC                            ; ===========================================================================
0000D0EC                            
0000D0EC                            Burro_Main:	; Routine 0
0000D0EC 5428 0024                  		addq.b	#2,obRoutine(a0)
0000D0F0 117C 0013 0016             		move.b	#$13,obHeight(a0)
0000D0F6 117C 0008 0017             		move.b	#8,obWidth(a0)
0000D0FC 217C 0000 0000 0004        		move.l	#Map_Burro,obMap(a0)
0000D104 317C 04A6 0002             		move.w	#$4A6,obGfx(a0)
0000D10A 0028 0004 0001             		ori.b	#4,obRender(a0)
0000D110 317C 0200 0018             		move.w	#$200,obPriority(a0)
0000D116 117C 0005 0020             		move.b	#5,obColType(a0)
0000D11C 117C 000C 0014             		move.b	#$C,obActWid(a0)
0000D122 5C28 0025                  		addq.b	#6,ob2ndRout(a0) ; run "Burro_ChkSonic" routine
0000D126 117C 0002 001C             		move.b	#2,obAnim(a0)
0000D12C                            
0000D12C                            Burro_Action:	; Routine 2
0000D12C 7000                       		moveq	#0,d0
0000D12E 1028 0025                  		move.b	ob2ndRout(a0),d0
0000D132 323B 0000                  		move.w	@index(pc,d0.w),d1
0000D136 4EBB 1000                  		jsr	@index(pc,d1.w)
0000D13A 43F9 0000 0000             		lea	(Ani_Burro).l,a1
0000D140 6100 FA0C                  		bsr.w	AnimateSprite
0000D144 6000 0000                  		bra.w	RememberState
0000D148                            ; ===========================================================================
0000D148 0000                       @index:		dc.w @changedir-@index
0000D14A 0000                       		dc.w Burro_Move-@index
0000D14C 0000                       		dc.w Burro_Jump-@index
0000D14E 0000                       		dc.w Burro_ChkSonic-@index
0000D150                            ; ===========================================================================
0000D150                            
0000D150                            @changedir:
0000D150 5368 0030                  		subq.w	#1,burro_timedelay(a0)
0000D154 6A00                       		bpl.s	@nochg
0000D156 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0000D15A 317C 00FF 0030             		move.w	#255,burro_timedelay(a0)
0000D160 317C 0080 0010             		move.w	#$80,obVelX(a0)
0000D166 117C 0001 001C             		move.b	#1,obAnim(a0)
0000D16C 0868 0000 0022             		bchg	#0,obStatus(a0)	; change direction the Burrobot	is facing
0000D172 6700                       		beq.s	@nochg
0000D174 4468 0010                  		neg.w	obVelX(a0)	; change direction the Burrobot	is moving
0000D178                            
0000D178                            	@nochg:
0000D178 4E75                       		rts	
0000D17A                            ; ===========================================================================
0000D17A                            
0000D17A                            Burro_Move:
0000D17A 5368 0030                  		subq.w	#1,burro_timedelay(a0)
0000D17E 6B00                       		bmi.s	loc_AD84
0000D180 6100 0000                  		bsr.w	SpeedToPos
0000D184 0868 0000 0032             		bchg	#0,$32(a0)
0000D18A 6600                       		bne.s	loc_AD78
0000D18C 3628 0008                  		move.w	obX(a0),d3
0000D190 0643 000C                  		addi.w	#$C,d3
0000D194 0828 0000 0022             		btst	#0,obStatus(a0)
0000D19A 6600                       		bne.s	loc_AD6A
0000D19C 0443 0018                  		subi.w	#$18,d3
0000D1A0                            
0000D1A0                            loc_AD6A:
0000D1A0 4EB9 0000 0000             		jsr	(ObjFloorDist2).l
0000D1A6 0C41 000C                  		cmpi.w	#$C,d1
0000D1AA 6C00                       		bge.s	loc_AD84
0000D1AC 4E75                       		rts	
0000D1AE                            ; ===========================================================================
0000D1AE                            
0000D1AE                            loc_AD78:
0000D1AE 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0000D1B4 D368 000C                  		add.w	d1,obY(a0)
0000D1B8 4E75                       		rts	
0000D1BA                            ; ===========================================================================
0000D1BA                            
0000D1BA                            loc_AD84:
0000D1BA 0838 0002 FE0F             		btst	#2,(v_vbla_byte).w
0000D1C0 6700                       		beq.s	loc_ADA4
0000D1C2 5528 0025                  		subq.b	#2,ob2ndRout(a0)
0000D1C6 317C 003B 0030             		move.w	#59,burro_timedelay(a0)
0000D1CC 317C 0000 0010             		move.w	#0,obVelX(a0)
0000D1D2 117C 0000 001C             		move.b	#0,obAnim(a0)
0000D1D8 4E75                       		rts	
0000D1DA                            ; ===========================================================================
0000D1DA                            
0000D1DA                            loc_ADA4:
0000D1DA 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0000D1DE 317C FC00 0012             		move.w	#-$400,obVelY(a0)
0000D1E4 117C 0002 001C             		move.b	#2,obAnim(a0)
0000D1EA 4E75                       		rts	
0000D1EC                            ; ===========================================================================
0000D1EC                            
0000D1EC                            Burro_Jump:
0000D1EC 6100 0000                  		bsr.w	SpeedToPos
0000D1F0 0668 0018 0012             		addi.w	#$18,obVelY(a0)
0000D1F6 6B00                       		bmi.s	locret_ADF0
0000D1F8 117C 0003 001C             		move.b	#3,obAnim(a0)
0000D1FE 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0000D204 4A41                       		tst.w	d1
0000D206 6A00                       		bpl.s	locret_ADF0
0000D208 D368 000C                  		add.w	d1,obY(a0)
0000D20C 317C 0000 0012             		move.w	#0,obVelY(a0)
0000D212 117C 0001 001C             		move.b	#1,obAnim(a0)
0000D218 317C 00FF 0030             		move.w	#255,burro_timedelay(a0)
0000D21E 5528 0025                  		subq.b	#2,ob2ndRout(a0)
0000D222 6100 0000                  		bsr.w	Burro_ChkSonic2
0000D226                            
0000D226                            locret_ADF0:
0000D226 4E75                       		rts	
0000D228                            ; ===========================================================================
0000D228                            
0000D228                            Burro_ChkSonic:
0000D228 343C 0060                  		move.w	#$60,d2
0000D22C 6100 0000                  		bsr.w	Burro_ChkSonic2
0000D230 6400                       		bcc.s	locret_AE20
0000D232 3038 D00C                  		move.w	(v_player+obY).w,d0
0000D236 9068 000C                  		sub.w	obY(a0),d0
0000D23A 6400                       		bcc.s	locret_AE20
0000D23C 0C40 FF80                  		cmpi.w	#-$80,d0
0000D240 6500                       		bcs.s	locret_AE20
0000D242 4A78 FE08                  		tst.w	(v_debuguse).w
0000D246 6600                       		bne.s	locret_AE20
0000D248 5528 0025                  		subq.b	#2,ob2ndRout(a0)
0000D24C 3141 0010                  		move.w	d1,obVelX(a0)
0000D250 317C FC00 0012             		move.w	#-$400,obVelY(a0)
0000D256                            
0000D256                            locret_AE20:
0000D256 4E75                       		rts	
0000D258                            
0000D258                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000D258                            
0000D258                            
0000D258                            Burro_ChkSonic2:
0000D258 323C 0080                  		move.w	#$80,d1
0000D25C 08E8 0000 0022             		bset	#0,obStatus(a0)
0000D262 3038 D008                  		move.w	(v_player+obX).w,d0
0000D266 9068 0008                  		sub.w	obX(a0),d0
0000D26A 6400                       		bcc.s	loc_AE40
0000D26C 4440                       		neg.w	d0
0000D26E 4441                       		neg.w	d1
0000D270 08A8 0000 0022             		bclr	#0,obStatus(a0)
0000D276                            
0000D276                            loc_AE40:
0000D276 B042                       		cmp.w	d2,d0
0000D278 4E75                       		rts	
0000D27A                            ; End of function Burro_ChkSonic2
0000D27A                            ; End of function Burro_ChkSonic2
0000D27A                            		include	"_anim\Burrobot.asm"
0000D27A                            ; ---------------------------------------------------------------------------
0000D27A                            ; Animation script - Burrobot enemy
0000D27A                            ; ---------------------------------------------------------------------------
0000D27A 0000                       Ani_Burro:	dc.w @walk1-Ani_Burro
0000D27C 0000                       		dc.w @walk2-Ani_Burro
0000D27E 0000                       		dc.w @digging-Ani_Burro
0000D280 0000                       		dc.w @fall-Ani_Burro
0000D282 0300 06FF                  @walk1:		dc.b 3,	0, 6, afEnd
0000D286 0300 01FF                  @walk2:		dc.b 3,	0, 1, afEnd
0000D28A 0302 03FF                  @digging:	dc.b 3,	2, 3, afEnd
0000D28E 0304 FF                    @fall:		dc.b 3,	4, afEnd
0000D292 00                         		even
0000D292 00                         		even
0000D292                            Map_Burro:	include	"_maps\Burrobot.asm"
0000D292                            ; --------------------------------------------------------------------------------
0000D292                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0000D292                            ; --------------------------------------------------------------------------------
0000D292                            
0000D292                            SME_Ag_86:	
0000D292 0000 0000                  		dc.w SME_Ag_86_E-SME_Ag_86, SME_Ag_86_19-SME_Ag_86	
0000D296 0000 0000                  		dc.w SME_Ag_86_24-SME_Ag_86, SME_Ag_86_2F-SME_Ag_86	
0000D29A 0000 0000                  		dc.w SME_Ag_86_3A-SME_Ag_86, SME_Ag_86_45-SME_Ag_86	
0000D29E 0000                       		dc.w SME_Ag_86_50-SME_Ag_86	
0000D2A0 02                         SME_Ag_86_E:	dc.b 2	
0000D2A1 EC0A 2000 F0               		dc.b $EC, $A, $20, 0, $F0	
0000D2A6 0409 2009 F4               		dc.b 4, 9, $20, 9, $F4	
0000D2AB 02                         SME_Ag_86_19:	dc.b 2	
0000D2AC EC0A 200F F0               		dc.b $EC, $A, $20, $F, $F0	
0000D2B1 0409 2018 F4               		dc.b 4, 9, $20, $18, $F4	
0000D2B6 02                         SME_Ag_86_24:	dc.b 2	
0000D2B7 E80A 201E F4               		dc.b $E8, $A, $20, $1E, $F4	
0000D2BC 000A 2027 F4               		dc.b 0, $A, $20, $27, $F4	
0000D2C1 02                         SME_Ag_86_2F:	dc.b 2	
0000D2C2 E80A 2030 F4               		dc.b $E8, $A, $20, $30, $F4	
0000D2C7 000A 2039 F4               		dc.b 0, $A, $20, $39, $F4	
0000D2CC 02                         SME_Ag_86_3A:	dc.b 2	
0000D2CD E80A 200F F0               		dc.b $E8, $A, $20, $F, $F0	
0000D2D2 000A 2042 F4               		dc.b 0, $A, $20, $42, $F4	
0000D2D7 02                         SME_Ag_86_45:	dc.b 2	
0000D2D8 F406 204B E8               		dc.b $F4, 6, $20, $4B, $E8	
0000D2DD F40A 2051 F8               		dc.b $F4, $A, $20, $51, $F8	
0000D2E2 02                         SME_Ag_86_50:	dc.b 2	
0000D2E3 EC0A 200F F0               		dc.b $EC, $A, $20, $F, $F0	
0000D2E8 0409 2009 F4               		dc.b 4, 9, $20, 9, $F4	
0000D2EE 00                         		even
0000D2EE 00                         		even
0000D2EE                            
0000D2EE                            		include	"_incObj\2F MZ Large Grassy Platforms.asm"
0000D2EE                            ; ---------------------------------------------------------------------------
0000D2EE                            ; Object 2F - large grass-covered platforms (MZ)
0000D2EE                            ; ---------------------------------------------------------------------------
0000D2EE                            
0000D2EE                            LargeGrass:
0000D2EE 7000                       		moveq	#0,d0
0000D2F0 1028 0024                  		move.b	obRoutine(a0),d0
0000D2F4 323B 0000                  		move.w	LGrass_Index(pc,d0.w),d1
0000D2F8 4EFB 1000                  		jmp	LGrass_Index(pc,d1.w)
0000D2FC                            ; ===========================================================================
0000D2FC 0000                       LGrass_Index:	dc.w LGrass_Main-LGrass_Index
0000D2FE 0000                       		dc.w LGrass_Action-LGrass_Index
0000D300                            
0000D300 =0000002A                  lgrass_origX:	equ $2A
0000D300 =0000002C                  lgrass_origY:	equ $2C
0000D300                            
0000D300 0000                       LGrass_Data:	dc.w LGrass_Data1-LGrass_Data 	; collision angle data
0000D302 0040                       		dc.b 0,	$40			; frame	number,	platform width
0000D304 0000                       		dc.w LGrass_Data3-LGrass_Data
0000D306 0140                       		dc.b 1,	$40
0000D308 0000                       		dc.w LGrass_Data2-LGrass_Data
0000D30A 0220                       		dc.b 2,	$20
0000D30C                            ; ===========================================================================
0000D30C                            
0000D30C                            LGrass_Main:	; Routine 0
0000D30C 5428 0024                  		addq.b	#2,obRoutine(a0)
0000D310 217C 0000 0000 0004        		move.l	#Map_LGrass,obMap(a0)
0000D318 317C C000 0002             		move.w	#$C000,obGfx(a0)
0000D31E 117C 0004 0001             		move.b	#4,obRender(a0)
0000D324 317C 0200 0018             		move.w	#$200,obPriority(a0)
0000D32A 3168 000C 002C             		move.w	obY(a0),lgrass_origY(a0)
0000D330 3168 0008 002A             		move.w	obX(a0),lgrass_origX(a0)
0000D336 7000                       		moveq	#0,d0
0000D338 1028 0028                  		move.b	obSubtype(a0),d0
0000D33C E448                       		lsr.w	#2,d0
0000D33E 0240 001C                  		andi.w	#$1C,d0
0000D342 43FB 00BC                  		lea	LGrass_Data(pc,d0.w),a1
0000D346 3019                       		move.w	(a1)+,d0
0000D348 45FB 00B6                  		lea	LGrass_Data(pc,d0.w),a2
0000D34C 214A 0030                  		move.l	a2,$30(a0)
0000D350 1159 001A                  		move.b	(a1)+,obFrame(a0)
0000D354 1151 0014                  		move.b	(a1),obActWid(a0)
0000D358 0228 000F 0028             		andi.b	#$F,obSubtype(a0)
0000D35E 117C 0040 0016             		move.b	#$40,obHeight(a0)
0000D364 08E8 0004 0001             		bset	#4,1(a0)
0000D36A                            
0000D36A                            LGrass_Action:	; Routine 2
0000D36A 6100 0000                  		bsr.w	LGrass_Types
0000D36E 4A28 0025                  		tst.b	ob2ndRout(a0)
0000D372 6700                       		beq.s	LGrass_Solid
0000D374 7200                       		moveq	#0,d1
0000D376 1228 0014                  		move.b	obActWid(a0),d1
0000D37A 0641 000B                  		addi.w	#$B,d1
0000D37E 6100 BF2A                  		bsr.w	ExitPlatform
0000D382 0829 0003 0022             		btst	#3,obStatus(a1)
0000D388 6600 0000                  		bne.w	LGrass_Slope
0000D38C 4228 0025                  		clr.b	ob2ndRout(a0)
0000D390 6000                       		bra.s	LGrass_Display
0000D392                            ; ===========================================================================
0000D392                            
0000D392                            LGrass_Slope:
0000D392 7200                       		moveq	#0,d1
0000D394 1228 0014                  		move.b	obActWid(a0),d1
0000D398 0641 000B                  		addi.w	#$B,d1
0000D39C 2468 0030                  		movea.l	$30(a0),a2
0000D3A0 3428 0008                  		move.w	obX(a0),d2
0000D3A4 6100 CE9E                  		bsr.w	SlopeObject2
0000D3A8 6000                       		bra.s	LGrass_Display
0000D3AA                            ; ===========================================================================
0000D3AA                            
0000D3AA                            LGrass_Solid:
0000D3AA 7200                       		moveq	#0,d1
0000D3AC 1228 0014                  		move.b	obActWid(a0),d1
0000D3B0 0641 000B                  		addi.w	#$B,d1
0000D3B4 343C 0020                  		move.w	#$20,d2
0000D3B8 0C28 0002 001A             		cmpi.b	#2,obFrame(a0)
0000D3BE 6600                       		bne.s	loc_AF8E
0000D3C0 343C 0030                  		move.w	#$30,d2
0000D3C4                            
0000D3C4                            loc_AF8E:
0000D3C4 2468 0030                  		movea.l	$30(a0),a2
0000D3C8 6100 0000                  		bsr.w	SolidObject2F
0000D3CC                            
0000D3CC                            LGrass_Display:
0000D3CC 6100 0000                  		bsr.w	DisplaySprite
0000D3D0 6000 0000                  		bra.w	LGrass_ChkDel
0000D3D4                            
0000D3D4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000D3D4                            
0000D3D4                            
0000D3D4                            LGrass_Types:
0000D3D4 7000                       		moveq	#0,d0
0000D3D6 1028 0028                  		move.b	obSubtype(a0),d0
0000D3DA 0240 0007                  		andi.w	#7,d0
0000D3DE D040                       		add.w	d0,d0
0000D3E0 323B 0000                  		move.w	LGrass_TypeIndex(pc,d0.w),d1
0000D3E4 4EFB 1000                  		jmp	LGrass_TypeIndex(pc,d1.w)
0000D3E8                            ; End of function LGrass_Types
0000D3E8                            
0000D3E8                            ; ===========================================================================
0000D3E8 0000                       LGrass_TypeIndex:dc.w LGrass_Type00-LGrass_TypeIndex
0000D3EA 0000                       		dc.w LGrass_Type01-LGrass_TypeIndex
0000D3EC 0000                       		dc.w LGrass_Type02-LGrass_TypeIndex
0000D3EE 0000                       		dc.w LGrass_Type03-LGrass_TypeIndex
0000D3F0 0000                       		dc.w LGrass_Type04-LGrass_TypeIndex
0000D3F2 0000                       		dc.w LGrass_Type05-LGrass_TypeIndex
0000D3F4                            ; ===========================================================================
0000D3F4                            
0000D3F4                            LGrass_Type00:
0000D3F4 4E75                       		rts			; type 00 platform doesn't move
0000D3F6                            ; ===========================================================================
0000D3F6                            
0000D3F6                            LGrass_Type01:
0000D3F6 1038 FE60                  		move.b	(v_oscillate+2).w,d0
0000D3FA 323C 0020                  		move.w	#$20,d1
0000D3FE 6000                       		bra.s	LGrass_Move
0000D400                            ; ===========================================================================
0000D400                            
0000D400                            LGrass_Type02:
0000D400 1038 FE64                  		move.b	(v_oscillate+6).w,d0
0000D404 323C 0030                  		move.w	#$30,d1
0000D408 6000                       		bra.s	LGrass_Move
0000D40A                            ; ===========================================================================
0000D40A                            
0000D40A                            LGrass_Type03:
0000D40A 1038 FE68                  		move.b	(v_oscillate+$A).w,d0
0000D40E 323C 0040                  		move.w	#$40,d1
0000D412 6000                       		bra.s	LGrass_Move
0000D414                            ; ===========================================================================
0000D414                            
0000D414                            LGrass_Type04:
0000D414 1038 FE6C                  		move.b	(v_oscillate+$E).w,d0
0000D418 323C 0060                  		move.w	#$60,d1
0000D41C                            
0000D41C                            LGrass_Move:
0000D41C 0828 0003 0028             		btst	#3,obSubtype(a0)
0000D422 6700                       		beq.s	loc_AFF2
0000D424 4440                       		neg.w	d0
0000D426 D041                       		add.w	d1,d0
0000D428                            
0000D428                            loc_AFF2:
0000D428 3228 002C                  		move.w	lgrass_origY(a0),d1
0000D42C 9240                       		sub.w	d0,d1
0000D42E 3141 000C                  		move.w	d1,obY(a0)	; update position on y-axis
0000D432 4E75                       		rts	
0000D434                            ; ===========================================================================
0000D434                            
0000D434                            LGrass_Type05:
0000D434 1028 0034                  		move.b	$34(a0),d0
0000D438 4A28 0025                  		tst.b	ob2ndRout(a0)
0000D43C 6600                       		bne.s	loc_B010
0000D43E 5500                       		subq.b	#2,d0
0000D440 6400                       		bcc.s	loc_B01C
0000D442 7000                       		moveq	#0,d0
0000D444 6000                       		bra.s	loc_B01C
0000D446                            ; ===========================================================================
0000D446                            
0000D446                            loc_B010:
0000D446 5800                       		addq.b	#4,d0
0000D448 0C00 0040                  		cmpi.b	#$40,d0
0000D44C 6500                       		bcs.s	loc_B01C
0000D44E 103C 0040                  		move.b	#$40,d0
0000D452                            
0000D452                            loc_B01C:
0000D452 1140 0034                  		move.b	d0,$34(a0)
0000D456 4EB9 0000 3A82             		jsr	(CalcSine).l
0000D45C E848                       		lsr.w	#4,d0
0000D45E 3200                       		move.w	d0,d1
0000D460 D068 002C                  		add.w	lgrass_origY(a0),d0
0000D464 3140 000C                  		move.w	d0,obY(a0)
0000D468 0C28 0020 0034             		cmpi.b	#$20,$34(a0)
0000D46E 6600                       		bne.s	loc_B07A
0000D470 4A28 0035                  		tst.b	$35(a0)
0000D474 6600                       		bne.s	loc_B07A
0000D476 117C 0001 0035             		move.b	#1,$35(a0)
0000D47C 6100 0000                  		bsr.w	FindNextFreeObj
0000D480 6600                       		bne.s	loc_B07A
0000D482 12BC 0000                  		move.b	#id_GrassFire,0(a1) ; load sitting flame object
0000D486 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000D48C 3368 002C 002C             		move.w	lgrass_origY(a0),lgrass_origY(a1)
0000D492 5069 002C                  		addq.w	#8,lgrass_origY(a1)
0000D496 5769 002C                  		subq.w	#3,lgrass_origY(a1)
0000D49A 0469 0040 0008             		subi.w	#$40,obX(a1)
0000D4A0 2368 0030 0030             		move.l	$30(a0),$30(a1)
0000D4A6 2348 0038                  		move.l	a0,$38(a1)
0000D4AA 2448                       		movea.l	a0,a2
0000D4AC 6100                       		bsr.s	sub_B09C
0000D4AE                            
0000D4AE                            loc_B07A:
0000D4AE 7400                       		moveq	#0,d2
0000D4B0 45E8 0036                  		lea	$36(a0),a2
0000D4B4 141A                       		move.b	(a2)+,d2
0000D4B6 5302                       		subq.b	#1,d2
0000D4B8 6500                       		bcs.s	locret_B09A
0000D4BA                            
0000D4BA                            loc_B086:
0000D4BA 7000                       		moveq	#0,d0
0000D4BC 101A                       		move.b	(a2)+,d0
0000D4BE ED48                       		lsl.w	#6,d0
0000D4C0 0640 D000                  		addi.w	#$D000,d0
0000D4C4 3240                       		movea.w	d0,a1
0000D4C6 3341 003C                  		move.w	d1,$3C(a1)
0000D4CA 51CA FFEE                  		dbf	d2,loc_B086
0000D4CE                            
0000D4CE                            locret_B09A:
0000D4CE 4E75                       		rts	
0000D4D0                            
0000D4D0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000D4D0                            
0000D4D0                            
0000D4D0                            sub_B09C:
0000D4D0 45EA 0036                  		lea	$36(a2),a2
0000D4D4 7000                       		moveq	#0,d0
0000D4D6 1012                       		move.b	(a2),d0
0000D4D8 5212                       		addq.b	#1,(a2)
0000D4DA 45F2 0001                  		lea	1(a2,d0.w),a2
0000D4DE 3009                       		move.w	a1,d0
0000D4E0 0440 D000                  		subi.w	#$D000,d0
0000D4E4 EC48                       		lsr.w	#6,d0
0000D4E6 0240 007F                  		andi.w	#$7F,d0
0000D4EA 1480                       		move.b	d0,(a2)
0000D4EC 4E75                       		rts	
0000D4EE                            ; End of function sub_B09C
0000D4EE                            
0000D4EE                            ; ===========================================================================
0000D4EE                            
0000D4EE                            LGrass_ChkDel:
0000D4EE 4A28 0035                  		tst.b	$35(a0)
0000D4F2 6700                       		beq.s	loc_B0C6
0000D4F4 4A28 0001                  		tst.b	obRender(a0)
0000D4F8 6A00                       		bpl.s	LGrass_DelFlames
0000D4FA                            
0000D4FA                            loc_B0C6:
0000D518 4E75                       		rts	
0000D51A                            ; ===========================================================================
0000D51A                            
0000D51A                            LGrass_DelFlames:
0000D51A 7400                       		moveq	#0,d2
0000D51C                            
0000D51C                            loc_B0E8:
0000D51C 45E8 0036                  		lea	$36(a0),a2
0000D520 1412                       		move.b	(a2),d2
0000D522 421A                       		clr.b	(a2)+
0000D524 5302                       		subq.b	#1,d2
0000D526 6500                       		bcs.s	locret_B116
0000D528                            
0000D528                            loc_B0F4:
0000D528 7000                       		moveq	#0,d0
0000D52A 1012                       		move.b	(a2),d0
0000D52C 421A                       		clr.b	(a2)+
0000D52E ED48                       		lsl.w	#6,d0
0000D530 0640 D000                  		addi.w	#$D000,d0
0000D534 3240                       		movea.w	d0,a1
0000D536 6100 0000                  		bsr.w	DeleteChild
0000D53A 51CA FFEC                  		dbf	d2,loc_B0F4
0000D53E 117C 0000 0035             		move.b	#0,$35(a0)
0000D544 117C 0000 0034             		move.b	#0,$34(a0)
0000D54A                            
0000D54A                            locret_B116:
0000D54A 4E75                       		rts	
0000D54C                            ; ===========================================================================
0000D54C                            ; ---------------------------------------------------------------------------
0000D54C                            ; Collision data for large moving platforms (MZ)
0000D54C                            ; ---------------------------------------------------------------------------
0000D54C                            LGrass_Data1:	incbin	"misc\mz_pfm1.bin"
0000D598                            		even
0000D598                            LGrass_Data2:	incbin	"misc\mz_pfm2.bin"
0000D5C4                            		even
0000D5C4                            LGrass_Data3:	incbin	"misc\mz_pfm3.bin"
0000D610                            		even
0000D610                            		even
0000D610                            		include	"_incObj\35 Burning Grass.asm"
0000D610                            ; ---------------------------------------------------------------------------
0000D610                            ; Object 35 - fireball that sits on the	floor (MZ)
0000D610                            ; (appears when	you walk on sinking platforms)
0000D610                            ; ---------------------------------------------------------------------------
0000D610                            
0000D610                            GrassFire:
0000D610 7000                       		moveq	#0,d0
0000D612 1028 0024                  		move.b	obRoutine(a0),d0
0000D616 323B 0000                  		move.w	GFire_Index(pc,d0.w),d1
0000D61A 4EFB 1000                  		jmp	GFire_Index(pc,d1.w)
0000D61E                            ; ===========================================================================
0000D61E 0000                       GFire_Index:	dc.w GFire_Main-GFire_Index
0000D620 0000                       		dc.w loc_B238-GFire_Index
0000D622 0000                       		dc.w GFire_Move-GFire_Index
0000D624                            
0000D624 =0000002A                  gfire_origX:	equ $2A
0000D624                            ; ===========================================================================
0000D624                            
0000D624                            GFire_Main:	; Routine 0
0000D624 5428 0024                  		addq.b	#2,obRoutine(a0)
0000D628 217C 0000 0000 0004        		move.l	#Map_Fire,obMap(a0)
0000D630 317C 0345 0002             		move.w	#$345,obGfx(a0)
0000D636 3168 0008 002A             		move.w	obX(a0),gfire_origX(a0)
0000D63C 117C 0004 0001             		move.b	#4,obRender(a0)
0000D642 317C 0080 0018             		move.w	#$80,obPriority(a0)
0000D648 117C 008B 0020             		move.b	#$8B,obColType(a0)
0000D64E 117C 0008 0014             		move.b	#8,obActWid(a0)
0000D65E 4A28 0028                  		tst.b	obSubtype(a0)
0000D662 6700                       		beq.s	loc_B238
0000D664 5428 0024                  		addq.b	#2,obRoutine(a0)
0000D668 6000 0000                  		bra.w	GFire_Move
0000D66C                            ; ===========================================================================
0000D66C                            
0000D66C                            loc_B238:	; Routine 2
0000D66C 2268 0030                  		movea.l	$30(a0),a1
0000D670 3228 0008                  		move.w	obX(a0),d1
0000D674 9268 002A                  		sub.w	gfire_origX(a0),d1
0000D678 0641 000C                  		addi.w	#$C,d1
0000D67C 3001                       		move.w	d1,d0
0000D67E E248                       		lsr.w	#1,d0
0000D680 1031 0000                  		move.b	(a1,d0.w),d0
0000D684 4440                       		neg.w	d0
0000D686 D068 002C                  		add.w	$2C(a0),d0
0000D68A 3400                       		move.w	d0,d2
0000D68C D068 003C                  		add.w	$3C(a0),d0
0000D690 3140 000C                  		move.w	d0,obY(a0)
0000D694 0C41 0084                  		cmpi.w	#$84,d1
0000D698 6400                       		bcc.s	loc_B2B0
0000D69A 06A8 0001 0000 0008        		addi.l	#$10000,obX(a0)
0000D6A2 0C41 0080                  		cmpi.w	#$80,d1
0000D6A6 6400                       		bcc.s	loc_B2B0
0000D6A8 2028 0008                  		move.l	obX(a0),d0
0000D6AC 0680 0008 0000             		addi.l	#$80000,d0
0000D6B2 0280 000F FFFF             		andi.l	#$FFFFF,d0
0000D6B8 6600                       		bne.s	loc_B2B0
0000D6BA 6100 0000                  		bsr.w	FindNextFreeObj
0000D6BE 6600                       		bne.s	loc_B2B0
0000D6C0 12BC 0000                  		move.b	#id_GrassFire,0(a1)
0000D6C4 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000D6CA 3342 002C                  		move.w	d2,$2C(a1)
0000D6CE 3368 003C 003C             		move.w	$3C(a0),$3C(a1)
0000D6D4 137C 0001 0028             		move.b	#1,obSubtype(a1)
0000D6DA 2468 0038                  		movea.l	$38(a0),a2
0000D6DE 6100 FDF0                  		bsr.w	sub_B09C
0000D6E2                            
0000D6E2                            loc_B2B0:
0000D6E2 6000                       		bra.s	GFire_Animate
0000D6E4                            ; ===========================================================================
0000D6E4                            
0000D6E4                            GFire_Move:	; Routine 4
0000D6E4 3028 002C                  		move.w	$2C(a0),d0
0000D6E8 D068 003C                  		add.w	$3C(a0),d0
0000D6EC 3140 000C                  		move.w	d0,obY(a0)
0000D6F0                            
0000D6F0                            GFire_Animate:
0000D6F0 43F9 0000 0000             		lea	(Ani_GFire).l,a1
0000D6F6 6100 F456                  		bsr.w	AnimateSprite
0000D6FA 6000 0000                  		bra.w	DisplaySprite
0000D6FA 6000 0000                  		bra.w	DisplaySprite
0000D6FE                            		include	"_anim\Burning Grass.asm"
0000D6FE                            ; ---------------------------------------------------------------------------
0000D6FE                            ; Animation script - burning grass that sits on the floor (MZ)
0000D6FE                            ; ---------------------------------------------------------------------------
0000D6FE 0000                       Ani_GFire:	dc.w @burn-Ani_GFire
0000D700 0500 2001 21FF             @burn:		dc.b 5,	0, $20,	1, $21,	afEnd
0000D706                            		even
0000D706                            		even
0000D706                            Map_LGrass:	include	"_maps\MZ Large Grassy Platforms.asm"
0000D706                            ; ---------------------------------------------------------------------------
0000D706                            ; Sprite mappings - large moving grass-covered platforms (MZ)
0000D706                            ; ---------------------------------------------------------------------------
0000D706                            Map_LGrass_internal:
0000D706 0000                       		dc.w @wide-Map_LGrass_internal
0000D708 0000                       		dc.w @sloped-Map_LGrass_internal
0000D70A 0000                       		dc.w @narrow-Map_LGrass_internal
0000D70C 0D                         @wide:		dc.b $D
0000D70D D806 0057 C0               		dc.b $D8, 6, 0,	$57, $C0 ; wide platform
0000D712 F005 0053 C0               		dc.b $F0, 5, 0,	$53, $C0
0000D717 000F 0001 C0               		dc.b 0,	$F, 0, 1, $C0
0000D71C D00F 0027 D0               		dc.b $D0, $F, 0, $27, $D0
0000D721 F00D 0037 D0               		dc.b $F0, $D, 0, $37, $D0
0000D726 F00F 0001 E0               		dc.b $F0, $F, 0, 1, $E0
0000D72B D00F 0011 F0               		dc.b $D0, $F, 0, $11, $F0
0000D730 D00F 003F 10               		dc.b $D0, $F, 0, $3F, $10
0000D735 F00D 004F 10               		dc.b $F0, $D, 0, $4F, $10
0000D73A F00F 0001 00               		dc.b $F0, $F, 0, 1, 0
0000D73F 000F 0001 20               		dc.b 0,	$F, 0, 1, $20
0000D744 D806 0057 30               		dc.b $D8, 6, 0,	$57, $30
0000D749 F005 0053 30               		dc.b $F0, 5, 0,	$53, $30
0000D74E 0A                         @sloped:	dc.b $A
0000D74F D00F 0027 C0               		dc.b $D0, $F, 0, $27, $C0 ; sloped platform (catches fire)
0000D754 F00D 0037 C0               		dc.b $F0, $D, 0, $37, $C0
0000D759 000F 0001 C0               		dc.b 0,	$F, 0, 1, $C0
0000D75E C00F 0027 E0               		dc.b $C0, $F, 0, $27, $E0
0000D763 E00D 0037 E0               		dc.b $E0, $D, 0, $37, $E0
0000D768 F00F 0001 E0               		dc.b $F0, $F, 0, 1, $E0
0000D76D C00F 0011 00               		dc.b $C0, $F, 0, $11, 0
0000D772 E00F 0001 00               		dc.b $E0, $F, 0, 1, 0
0000D777 C00F 003F 20               		dc.b $C0, $F, 0, $3F, $20
0000D77C E00D 004F 20               		dc.b $E0, $D, 0, $4F, $20
0000D781 06                         @narrow:	dc.b 6
0000D782 D00F 0011 E0               		dc.b $D0, $F, 0, $11, $E0 ; narrow platform
0000D787 F00F 0001 E0               		dc.b $F0, $F, 0, 1, $E0
0000D78C 100F 0001 E0               		dc.b $10, $F, 0, 1, $E0
0000D791 D00F 0011 00               		dc.b $D0, $F, 0, $11, 0
0000D796 F00F 0001 00               		dc.b $F0, $F, 0, 1, 0
0000D79B 100F 0001 00               		dc.b $10, $F, 0, 1, 0
0000D7A0                            		even
0000D7A0                            		even
0000D7A0                            Map_Fire:	include	"_maps\Fireballs.asm"
0000D7A0                            ; --------------------------------------------------------------------------------
0000D7A0                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0000D7A0                            ; --------------------------------------------------------------------------------
0000D7A0                            
0000D7A0                            SME_gyvTV:	
0000D7A0 0000 0000                  		dc.w SME_gyvTV_C-SME_gyvTV, SME_gyvTV_12-SME_gyvTV	
0000D7A4 0000 0000                  		dc.w SME_gyvTV_18-SME_gyvTV, SME_gyvTV_1E-SME_gyvTV	
0000D7A8 0000 0000                  		dc.w SME_gyvTV_24-SME_gyvTV, SME_gyvTV_2A-SME_gyvTV	
0000D7AC 01                         SME_gyvTV_C:	dc.b 1	
0000D7AD E807 6000 F8               		dc.b $E8, 7, $60, 0, $F8	
0000D7B2 01                         SME_gyvTV_12:	dc.b 1	
0000D7B3 E807 6008 F8               		dc.b $E8, 7, $60, 8, $F8	
0000D7B8 01                         SME_gyvTV_18:	dc.b 1	
0000D7B9 F006 6010 F8               		dc.b $F0, 6, $60, $10, $F8	
0000D7BE 01                         SME_gyvTV_1E:	dc.b 1	
0000D7BF F80D 6016 E8               		dc.b $F8, $D, $60, $16, $E8	
0000D7C4 01                         SME_gyvTV_24:	dc.b 1	
0000D7C5 F80D 601E E8               		dc.b $F8, $D, $60, $1E, $E8	
0000D7CA 01                         SME_gyvTV_2A:	dc.b 1	
0000D7CB F809 6026 F0               		dc.b $F8, 9, $60, $26, $F0	
0000D7D0                            		even
0000D7D0                            		even
0000D7D0                            		include	"_incObj\30 MZ Large Green Glass Blocks.asm"
0000D7D0                            ; ---------------------------------------------------------------------------
0000D7D0                            ; Object 30 - large green glass blocks (MZ)
0000D7D0                            ; ---------------------------------------------------------------------------
0000D7D0                            
0000D7D0                            GlassBlock:
0000D7D0 7000                       		moveq	#0,d0
0000D7D2 1028 0024                  		move.b	obRoutine(a0),d0
0000D7D6 323B 0000                  		move.w	Glass_Index(pc,d0.w),d1
0000D7DA 4EBB 1000                  		jsr	Glass_Index(pc,d1.w)
0000D7FC 6000 0000                  		bra.w	DisplaySprite
0000D800                            ; ===========================================================================
0000D800                            
0000D800                            Glass_Delete:
0000D800 6000 0000                  		bra.w	DeleteObject
0000D804                            ; ===========================================================================
0000D804 0000                       Glass_Index:	dc.w Glass_Main-Glass_Index
0000D806 0000                       		dc.w Glass_Block012-Glass_Index
0000D808 0000                       		dc.w Glass_Reflect012-Glass_Index
0000D80A 0000                       		dc.w Glass_Block34-Glass_Index
0000D80C 0000                       		dc.w Glass_Reflect34-Glass_Index
0000D80E                            
0000D80E =00000032                  glass_dist:	equ $32		; distance block moves when switch is pressed
0000D80E =0000003C                  glass_parent:	equ $3C		; address of parent object
0000D80E                            
0000D80E 0200 00                    Glass_Vars1:	dc.b 2,	0, 0	; routine num, y-axis dist from	origin,	frame num
0000D811 0400 01                    		dc.b 4,	0, 1
0000D814 0600 02                    Glass_Vars2:	dc.b 6,	0, 2
0000D817 0800 01                    		dc.b 8,	0, 1
0000D81A                            ; ===========================================================================
0000D81A                            
0000D81A                            Glass_Main:	; Routine 0
0000D81A 45F9 0000 D80E             		lea	(Glass_Vars1).l,a2
0000D820 7201                       		moveq	#1,d1
0000D822 117C 0048 0016             		move.b	#$48,obHeight(a0)
0000D828 0C28 0003 0028             		cmpi.b	#3,obSubtype(a0) ; is object type 0/1/2 ?
0000D82E 6500                       		bcs.s	@IsType012	; if yes, branch
0000D830                            
0000D830 45F9 0000 D814             		lea	(Glass_Vars2).l,a2
0000D836 7201                       		moveq	#1,d1
0000D838 117C 0038 0016             		move.b	#$38,obHeight(a0)
0000D83E                            
0000D83E                            	@IsType012:
0000D83E 2248                       		movea.l	a0,a1
0000D840 6000                       		bra.s	@Load		; load main object
0000D842                            ; ===========================================================================
0000D842                            
0000D842                            	@Repeat:
0000D842 6100 0000                  		bsr.w	FindNextFreeObj
0000D846 6600                       		bne.s	@Fail
0000D848                            
0000D848                            @Load:
0000D848 135A 0024                  		move.b	(a2)+,obRoutine(a1)
0000D84C 12BC 0000                  		move.b	#id_GlassBlock,0(a1)
0000D850 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000D856 101A                       		move.b	(a2)+,d0
0000D858 4880                       		ext.w	d0
0000D85A D068 000C                  		add.w	obY(a0),d0
0000D85E 3340 000C                  		move.w	d0,obY(a1)
0000D862 237C 0000 0000 0004        		move.l	#Map_Glass,obMap(a1)
0000D86A 337C C38E 0002             		move.w	#$C38E,obGfx(a1)
0000D870 137C 0004 0001             		move.b	#4,obRender(a1)
0000D876 3369 000C 0030             		move.w	obY(a1),$30(a1)
0000D87C 1368 0028 0028             		move.b	obSubtype(a0),obSubtype(a1)
0000D882 137C 0020 0014             		move.b	#$20,obActWid(a1)
0000D888 337C 0200 0018             		move.w	#$200,obPriority(a1)
0000D88E 135A 001A                  		move.b	(a2)+,obFrame(a1)
0000D892 2348 003C                  		move.l	a0,glass_parent(a1)
0000D896 51C9 FFAA                  		dbf	d1,@Repeat	; repeat once to load "reflection object"
0000D89A                            
0000D89A 137C 0010 0014             		move.b	#$10,obActWid(a1)
0000D8A0 337C 0180 0018             		move.w	#$180,obPriority(a1)
0000D8A6 5029 0028                  		addq.b	#8,obSubtype(a1)
0000D8AA 0229 000F 0028             		andi.b	#$F,obSubtype(a1)
0000D8B0                            
0000D8B0                            	@Fail:
0000D8B0 317C 0090 0032             		move.w	#$90,glass_dist(a0)
0000D8B6 08E8 0004 0001             		bset	#4,obRender(a0)
0000D8BC                            
0000D8BC                            Glass_Block012:	; Routine 2
0000D8BC 6100 0000                  		bsr.w	Glass_Types
0000D8C0 323C 002B                  		move.w	#$2B,d1
0000D8C4 343C 0048                  		move.w	#$48,d2
0000D8C8 363C 0049                  		move.w	#$49,d3
0000D8CC 3828 0008                  		move.w	obX(a0),d4
0000D8D0 6000 0000                  		bra.w	SolidObject
0000D8D4                            ; ===========================================================================
0000D8D4                            
0000D8D4                            Glass_Reflect012:
0000D8D4                            		; Routine 4
0000D8D4 2268 003C                  		movea.l	$3C(a0),a1
0000D8D8 3169 0032 0032             		move.w	glass_dist(a1),glass_dist(a0)
0000D8DE 6000 0000                  		bra.w	Glass_Types
0000D8E2                            ; ===========================================================================
0000D8E2                            
0000D8E2                            Glass_Block34:	; Routine 6
0000D8E2 6100 0000                  		bsr.w	Glass_Types
0000D8E6 323C 002B                  		move.w	#$2B,d1
0000D8EA 343C 0038                  		move.w	#$38,d2
0000D8EE 363C 0039                  		move.w	#$39,d3
0000D8F2 3828 0008                  		move.w	obX(a0),d4
0000D8F6 6000 0000                  		bra.w	SolidObject
0000D8FA                            ; ===========================================================================
0000D8FA                            
0000D8FA                            Glass_Reflect34:
0000D8FA                            		; Routine 8
0000D8FA 2268 003C                  		movea.l	$3C(a0),a1
0000D8FE 3169 0032 0032             		move.w	glass_dist(a1),glass_dist(a0)
0000D904 3169 000C 0030             		move.w	obY(a1),$30(a0)
0000D90A 6000 0000                  		bra.w	Glass_Types
0000D90E                            
0000D90E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000D90E                            
0000D90E                            
0000D90E                            Glass_Types:
0000D90E 7000                       		moveq	#0,d0
0000D910 1028 0028                  		move.b	obSubtype(a0),d0
0000D914 0240 0007                  		andi.w	#7,d0
0000D918 D040                       		add.w	d0,d0
0000D91A 323B 0000                  		move.w	Glass_TypeIndex(pc,d0.w),d1
0000D91E 4EFB 1000                  		jmp	Glass_TypeIndex(pc,d1.w)
0000D922                            ; End of function Glass_Types
0000D922                            
0000D922                            ; ===========================================================================
0000D922 0000                       Glass_TypeIndex:dc.w Glass_Type00-Glass_TypeIndex
0000D924 0000                       		dc.w Glass_Type01-Glass_TypeIndex
0000D926 0000                       		dc.w Glass_Type02-Glass_TypeIndex
0000D928 0000                       		dc.w Glass_Type03-Glass_TypeIndex
0000D92A 0000                       		dc.w Glass_Type04-Glass_TypeIndex
0000D92C                            ; ===========================================================================
0000D92C                            
0000D92C                            Glass_Type00:
0000D92C 4E75                       		rts	
0000D92E                            ; ===========================================================================
0000D92E                            
0000D92E                            Glass_Type01:
0000D92E 1038 FE70                  		move.b	(v_oscillate+$12).w,d0
0000D932 323C 0040                  		move.w	#$40,d1
0000D936 6000                       		bra.s	loc_B514
0000D938                            ; ===========================================================================
0000D938                            
0000D938                            Glass_Type02:
0000D938 1038 FE70                  		move.b	(v_oscillate+$12).w,d0
0000D93C 323C 0040                  		move.w	#$40,d1
0000D940 4440                       		neg.w	d0
0000D942 D041                       		add.w	d1,d0
0000D944                            
0000D944                            loc_B514:
0000D944 0828 0003 0028             		btst	#3,obSubtype(a0)
0000D94A 6700                       		beq.s	loc_B526
0000D94C 4440                       		neg.w	d0
0000D94E D041                       		add.w	d1,d0
0000D950 E208                       		lsr.b	#1,d0
0000D952 0640 0020                  		addi.w	#$20,d0
0000D956                            
0000D956                            loc_B526:
0000D956 6000 0000                  		bra.w	loc_B5EE
0000D95A                            ; ===========================================================================
0000D95A                            
0000D95A                            Glass_Type03:
0000D95A 0828 0003 0028             		btst	#3,obSubtype(a0)
0000D960 6700                       		beq.s	loc_B53E
0000D962 1038 FE70                  		move.b	(v_oscillate+$12).w,d0
0000D966 0440 0010                  		subi.w	#$10,d0
0000D96A 6000 0000                  		bra.w	loc_B5EE
0000D96E                            ; ===========================================================================
0000D96E                            
0000D96E                            loc_B53E:
0000D96E 0828 0003 0022             		btst	#3,obStatus(a0)
0000D974 6600                       		bne.s	loc_B54E
0000D976 08A8 0000 0034             		bclr	#0,$34(a0)
0000D97C 6000                       		bra.s	loc_B582
0000D97E                            ; ===========================================================================
0000D97E                            
0000D97E                            loc_B54E:
0000D97E 4A28 0034                  		tst.b	$34(a0)
0000D982 6600                       		bne.s	loc_B582
0000D984 117C 0001 0034             		move.b	#1,$34(a0)
0000D98A 08E8 0000 0035             		bset	#0,$35(a0)
0000D990 6700                       		beq.s	loc_B582
0000D992 08E8 0007 0034             		bset	#7,$34(a0)
0000D998 317C 0010 0036             		move.w	#$10,$36(a0)
0000D99E 117C 000A 0038             		move.b	#$A,$38(a0)
0000D9A4 0C68 0040 0032             		cmpi.w	#$40,glass_dist(a0)
0000D9AA 6600                       		bne.s	loc_B582
0000D9AC 317C 0040 0036             		move.w	#$40,$36(a0)
0000D9B2                            
0000D9B2                            loc_B582:
0000D9B2 4A28 0034                  		tst.b	$34(a0)
0000D9B6 6A00                       		bpl.s	loc_B5AA
0000D9B8 4A28 0038                  		tst.b	$38(a0)
0000D9BC 6700                       		beq.s	loc_B594
0000D9BE 5328 0038                  		subq.b	#1,$38(a0)
0000D9C2 6600                       		bne.s	loc_B5AA
0000D9C4                            
0000D9C4                            loc_B594:
0000D9C4 4A68 0032                  		tst.w	glass_dist(a0)
0000D9C8 6700                       		beq.s	loc_B5A4
0000D9CA 5368 0032                  		subq.w	#1,glass_dist(a0)
0000D9CE 5368 0036                  		subq.w	#1,$36(a0)
0000D9D2 6600                       		bne.s	loc_B5AA
0000D9D4                            
0000D9D4                            loc_B5A4:
0000D9D4 08A8 0007 0034             		bclr	#7,$34(a0)
0000D9DA                            
0000D9DA                            loc_B5AA:
0000D9DA 3028 0032                  		move.w	glass_dist(a0),d0
0000D9DE 6000                       		bra.s	loc_B5EE
0000D9E0                            ; ===========================================================================
0000D9E0                            
0000D9E0                            Glass_Type04:
0000D9E0 0828 0003 0028             		btst	#3,obSubtype(a0)
0000D9E6 6700                       		beq.s	Glass_ChkSwitch
0000D9E8 1038 FE70                  		move.b	(v_oscillate+$12).w,d0
0000D9EC 0440 0010                  		subi.w	#$10,d0
0000D9F0 6000                       		bra.s	loc_B5EE
0000D9F2                            ; ===========================================================================
0000D9F2                            
0000D9F2                            Glass_ChkSwitch:
0000D9F2 4A28 0034                  		tst.b	$34(a0)
0000D9F6 6600                       		bne.s	loc_B5E0
0000D9F8 45F8 F7E0                  		lea	(f_switch).w,a2
0000D9FC 7000                       		moveq	#0,d0
0000D9FE 1028 0028                  		move.b	obSubtype(a0),d0 ; load object type number
0000DA02 E848                       		lsr.w	#4,d0		; read only the	first nybble
0000DA04 4A32 0000                  		tst.b	(a2,d0.w)	; has switch number d0 been pressed?
0000DA08 6700                       		beq.s	loc_B5EA	; if not, branch
0000DA0A 117C 0001 0034             		move.b	#1,$34(a0)
0000DA10                            
0000DA10                            loc_B5E0:
0000DA10 4A68 0032                  		tst.w	glass_dist(a0)
0000DA14 6700                       		beq.s	loc_B5EA
0000DA16 5568 0032                  		subq.w	#2,glass_dist(a0)
0000DA1A                            
0000DA1A                            loc_B5EA:
0000DA1A 3028 0032                  		move.w	glass_dist(a0),d0
0000DA1E                            
0000DA1E                            loc_B5EE:
0000DA1E 3228 0030                  		move.w	$30(a0),d1
0000DA22 9240                       		sub.w	d0,d1
0000DA24 3141 000C                  		move.w	d1,obY(a0)
0000DA28 4E75                       		rts	
0000DA28 4E75                       		rts	
0000DA2A                            Map_Glass:	include	"_maps\MZ Large Green Glass Blocks.asm"
0000DA2A                            ; --------------------------------------------------------------------------------
0000DA2A                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0000DA2A                            ; --------------------------------------------------------------------------------
0000DA2A                            
0000DA2A                            SME_NEyTf:	
0000DA2A 0000 0000                  		dc.w SME_NEyTf_6-SME_NEyTf, SME_NEyTf_43-SME_NEyTf	
0000DA2E 0000                       		dc.w SME_NEyTf_4E-SME_NEyTf	
0000DA30 0C                         SME_NEyTf_6:	dc.b $C	
0000DA31 B80C 0000 E0               		dc.b $B8, $C, 0, 0, $E0	
0000DA36 B80C 0800 00               		dc.b $B8, $C, 8, 0, 0	
0000DA3B C00F 0004 E0               		dc.b $C0, $F, 0, 4, $E0	
0000DA40 C00F 0804 00               		dc.b $C0, $F, 8, 4, 0	
0000DA45 E00F 0004 E0               		dc.b $E0, $F, 0, 4, $E0	
0000DA4A E00F 0804 00               		dc.b $E0, $F, 8, 4, 0	
0000DA4F 000F 0004 E0               		dc.b 0, $F, 0, 4, $E0	
0000DA54 000F 0804 00               		dc.b 0, $F, 8, 4, 0	
0000DA59 200F 0004 E0               		dc.b $20, $F, 0, 4, $E0	
0000DA5E 200F 0804 00               		dc.b $20, $F, 8, 4, 0	
0000DA63 400C 1000 E0               		dc.b $40, $C, $10, 0, $E0	
0000DA68 400C 1800 00               		dc.b $40, $C, $18, 0, 0	
0000DA6D 02                         SME_NEyTf_43:	dc.b 2	
0000DA6E 0806 6014 F0               		dc.b 8, 6, $60, $14, $F0	
0000DA73 0006 6014 00               		dc.b 0, 6, $60, $14, 0	
0000DA78 0A                         SME_NEyTf_4E:	dc.b $A	
0000DA79 C80C 0000 E0               		dc.b $C8, $C, 0, 0, $E0	
0000DA7E C80C 0800 00               		dc.b $C8, $C, 8, 0, 0	
0000DA83 D00F 0004 E0               		dc.b $D0, $F, 0, 4, $E0	
0000DA88 D00F 0804 00               		dc.b $D0, $F, 8, 4, 0	
0000DA8D F00F 0004 E0               		dc.b $F0, $F, 0, 4, $E0	
0000DA92 F00F 0804 00               		dc.b $F0, $F, 8, 4, 0	
0000DA97 100F 0004 E0               		dc.b $10, $F, 0, 4, $E0	
0000DA9C 100F 0804 00               		dc.b $10, $F, 8, 4, 0	
0000DAA1 300C 1000 E0               		dc.b $30, $C, $10, 0, $E0	
0000DAA6 300C 1800 00               		dc.b $30, $C, $18, 0, 0	
0000DAAC 00                         		even
0000DAAC 00                         		even
0000DAAC                            		include	"_incObj\31 Chained Stompers.asm"
0000DAAC                            ; ---------------------------------------------------------------------------
0000DAAC                            ; Object 31 - stomping metal blocks on chains (MZ)
0000DAAC                            ; ---------------------------------------------------------------------------
0000DAAC                            
0000DAAC                            ChainStomp:
0000DAAC 7000                       		moveq	#0,d0
0000DAAE 1028 0024                  		move.b	obRoutine(a0),d0
0000DAB2 323B 0000                  		move.w	CStom_Index(pc,d0.w),d1
0000DAB6 4EFB 1000                  		jmp	CStom_Index(pc,d1.w)
0000DABA                            ; ===========================================================================
0000DABA 0000                       CStom_Index:	dc.w CStom_Main-CStom_Index
0000DABC 0000                       		dc.w loc_B798-CStom_Index
0000DABE 0000                       		dc.w loc_B7FE-CStom_Index
0000DAC0 0000                       		dc.w CStom_Display2-CStom_Index
0000DAC2 0000                       		dc.w loc_B7E2-CStom_Index
0000DAC4                            
0000DAC4 =0000003A                  CStom_switch:	equ $3A			; switch number for the current stomper
0000DAC4                            
0000DAC4 0000                       CStom_SwchNums:	dc.b 0,	0		; switch number, obj number
0000DAC6 0100                       		dc.b 1,	0
0000DAC8                            
0000DAC8 0200 00                    CStom_Var:	dc.b 2,	0, 0		; routine number, y-position, frame number
0000DACB 041C 01                    		dc.b 4,	$1C, 1
0000DACE 08CC 03                    		dc.b 8,	$CC, 3
0000DAD1 06F0 02                    		dc.b 6,	$F0, 2
0000DAD4                            
0000DAD4 7000 A000                  word_B6A4:	dc.w $7000, $A000
0000DAD8 5000 7800                  		dc.w $5000, $7800
0000DADC 3800 5800                  		dc.w $3800, $5800
0000DAE0 B800                       		dc.w $B800
0000DAE2                            ; ===========================================================================
0000DAE2                            
0000DAE2                            CStom_Main:	; Routine 0
0000DAE2 7000                       		moveq	#0,d0
0000DAE4 1028 0028                  		move.b	obSubtype(a0),d0
0000DAE8 6A00                       		bpl.s	loc_B6CE
0000DAEA 0240 007F                  		andi.w	#$7F,d0
0000DAEE D040                       		add.w	d0,d0
0000DAF0 45FB 00D2                  		lea	CStom_SwchNums(pc,d0.w),a2
0000DAF4 115A 003A                  		move.b	(a2)+,CStom_switch(a0)
0000DAF8 101A                       		move.b	(a2)+,d0
0000DAFA 1140 0028                  		move.b	d0,obSubtype(a0)
0000DAFE                            
0000DAFE                            loc_B6CE:
0000DAFE 0200 000F                  		andi.b	#$F,d0
0000DB02 D040                       		add.w	d0,d0
0000DB04 343B 00CE                  		move.w	word_B6A4(pc,d0.w),d2
0000DB08 4A40                       		tst.w	d0
0000DB0A 6600                       		bne.s	loc_B6E0
0000DB0C 3142 0032                  		move.w	d2,$32(a0)
0000DB10                            
0000DB10                            loc_B6E0:
0000DB10 45F9 0000 DAC8             		lea	(CStom_Var).l,a2
0000DB16 2248                       		movea.l	a0,a1
0000DB18 7203                       		moveq	#3,d1
0000DB1A 6000                       		bra.s	CStom_MakeStomper
0000DB1C                            ; ===========================================================================
0000DB1C                            
0000DB1C                            CStom_Loop:
0000DB1C 6100 0000                  		bsr.w	FindNextFreeObj
0000DB20 6600 0000                  		bne.w	CStom_SetSize
0000DB24                            
0000DB24                            CStom_MakeStomper:
0000DB24 135A 0024                  		move.b	(a2)+,obRoutine(a1)
0000DB28 12BC 0000                  		move.b	#id_ChainStomp,0(a1)
0000DB2C 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000DB32 101A                       		move.b	(a2)+,d0
0000DB34 4880                       		ext.w	d0
0000DB36 D068 000C                  		add.w	obY(a0),d0
0000DB3A 3340 000C                  		move.w	d0,obY(a1)
0000DB3E 237C 0000 0000 0004        		move.l	#Map_CStom,obMap(a1)
0000DB46 337C 0300 0002             		move.w	#$300,obGfx(a1)
0000DB4C 137C 0004 0001             		move.b	#4,obRender(a1)
0000DB52 3369 000C 0030             		move.w	obY(a1),$30(a1)
0000DB58 1368 0028 0028             		move.b	obSubtype(a0),obSubtype(a1)
0000DB5E 137C 0010 0014             		move.b	#$10,obActWid(a1)
0000DB64 3342 0034                  		move.w	d2,$34(a1)
0000DB68 337C 0200 0018             		move.w	#$200,obPriority(a1)
0000DB6E 135A 001A                  		move.b	(a2)+,obFrame(a1)
0000DB72 0C29 0001 001A             		cmpi.b	#1,obFrame(a1)
0000DB78 6600                       		bne.s	loc_B76A
0000DB7A 5341                       		subq.w	#1,d1
0000DB7C 1028 0028                  		move.b	obSubtype(a0),d0
0000DB80 0240 00F0                  		andi.w	#$F0,d0
0000DB84 0C40 0020                  		cmpi.w	#$20,d0
0000DB88 679A                       		beq.s	CStom_MakeStomper
0000DB8A 137C 0038 0014             		move.b	#$38,obActWid(a1)
0000DB90 137C 0090 0020             		move.b	#$90,obColType(a1)
0000DB96 5241                       		addq.w	#1,d1
0000DB98                            
0000DB98                            loc_B76A:
0000DB98 2348 003C                  		move.l	a0,$3C(a1)
0000DB9C 51C9 FF7E                  		dbf	d1,CStom_Loop
0000DBA0                            
0000DBA0 337C 0180 0018             		move.w	#$180,obPriority(a1)
0000DBA6                            
0000DBA6                            CStom_SetSize:
0000DBA6 7000                       		moveq	#0,d0
0000DBA8 1028 0028                  		move.b	obSubtype(a0),d0
0000DBAC E648                       		lsr.w	#3,d0
0000DBAE 0200 000E                  		andi.b	#$E,d0
0000DBB2 45FB 0000                  		lea	CStom_Var2(pc,d0.w),a2
0000DBB6 115A 0014                  		move.b	(a2)+,obActWid(a0)
0000DBBA 115A 001A                  		move.b	(a2)+,obFrame(a0)
0000DBBE 6000                       		bra.s	loc_B798
0000DBC0                            ; ===========================================================================
0000DBC0 3800                       CStom_Var2:	dc.b $38, 0		; width, frame number
0000DBC2 3009                       		dc.b $30, 9
0000DBC4 100A                       		dc.b $10, $A
0000DBC6                            ; ===========================================================================
0000DBC6                            
0000DBC6                            loc_B798:	; Routine 2
0000DBC6 6100 0000                  		bsr.w	CStom_Types
0000DBCA 31E8 000C F7A4             		move.w	obY(a0),(v_obj31ypos).w
0000DBD0 7200                       		moveq	#0,d1
0000DBD2 1228 0014                  		move.b	obActWid(a0),d1
0000DBD6 0641 000B                  		addi.w	#$B,d1
0000DBDA 343C 000C                  		move.w	#$C,d2
0000DBDE 363C 000D                  		move.w	#$D,d3
0000DBE2 3828 0008                  		move.w	obX(a0),d4
0000DBE6 6100 0000                  		bsr.w	SolidObject
0000DBEA 0828 0003 0022             		btst	#3,obStatus(a0)
0000DBF0 6700                       		beq.s	CStom_Display
0000DBF2 0C28 0010 0032             		cmpi.b	#$10,$32(a0)
0000DBF8 6400                       		bcc.s	CStom_Display
0000DBFA 2448                       		movea.l	a0,a2
0000DBFC 41F8 D000                  		lea	(v_player).w,a0
0000DC00 4EB9 0000 0000             		jsr	(KillSonic).l
0000DC06 204A                       		movea.l	a2,a0
0000DC08                            
0000DC08                            CStom_Display:
0000DC08 6100 0000                  		bsr.w	DisplaySprite
0000DC0C 6000 0000                  		bra.w	CStom_ChkDel
0000DC10                            ; ===========================================================================
0000DC10                            
0000DC10                            loc_B7E2:	; Routine 8
0000DC10 117C 0080 0016             		move.b	#$80,obHeight(a0)
0000DC16 08E8 0004 0001             		bset	#4,obRender(a0)
0000DC1C 2268 003C                  		movea.l	$3C(a0),a1
0000DC20 1029 0032                  		move.b	$32(a1),d0
0000DC24 EA08                       		lsr.b	#5,d0
0000DC26 5600                       		addq.b	#3,d0
0000DC28 1140 001A                  		move.b	d0,obFrame(a0)
0000DC2C                            
0000DC2C                            loc_B7FE:	; Routine 4
0000DC2C 2268 003C                  		movea.l	$3C(a0),a1
0000DC30 7000                       		moveq	#0,d0
0000DC32 1029 0032                  		move.b	$32(a1),d0
0000DC36 D068 0030                  		add.w	$30(a0),d0
0000DC3A 3140 000C                  		move.w	d0,obY(a0)
0000DC3E                            
0000DC3E                            CStom_Display2:	; Routine 6
0000DC3E 6100 0000                  		bsr.w	DisplaySprite
0000DC42                            
0000DC42                            CStom_ChkDel:
0000DC60 4E75                       		rts	
0000DC62                            ; ===========================================================================
0000DC62                            
0000DC62                            CStom_Types:
0000DC62 1028 0028                  		move.b	obSubtype(a0),d0
0000DC66 0240 000F                  		andi.w	#$F,d0
0000DC6A D040                       		add.w	d0,d0
0000DC6C 323B 0000                  		move.w	CStom_TypeIndex(pc,d0.w),d1
0000DC70 4EFB 1000                  		jmp	CStom_TypeIndex(pc,d1.w)
0000DC74                            ; ===========================================================================
0000DC74 0000                       CStom_TypeIndex:dc.w CStom_Type00-CStom_TypeIndex
0000DC76 0000                       		dc.w CStom_Type01-CStom_TypeIndex
0000DC78 0000                       		dc.w CStom_Type01-CStom_TypeIndex
0000DC7A 0000                       		dc.w CStom_Type03-CStom_TypeIndex
0000DC7C 0000                       		dc.w CStom_Type01-CStom_TypeIndex
0000DC7E 0000                       		dc.w CStom_Type03-CStom_TypeIndex
0000DC80 0000                       		dc.w CStom_Type01-CStom_TypeIndex
0000DC82                            ; ===========================================================================
0000DC82                            
0000DC82                            CStom_Type00:
0000DC82 45F8 F7E0                  		lea	(f_switch).w,a2	; load switch statuses
0000DC86 7000                       		moveq	#0,d0
0000DC88 1028 003A                  		move.b	CStom_switch(a0),d0 ; move number 0 or 1 to d0
0000DC8C 4A32 0000                  		tst.b	(a2,d0.w)	; has switch (d0) been pressed?
0000DC90 6700                       		beq.s	loc_B8A8	; if not, branch
0000DC92 4A78 F7A4                  		tst.w	(v_obj31ypos).w
0000DC96 6A00                       		bpl.s	loc_B872
0000DC98 0C28 0010 0032             		cmpi.b	#$10,$32(a0)
0000DC9E 6700                       		beq.s	loc_B8A0
0000DCA0                            
0000DCA0                            loc_B872:
0000DCA0 4A68 0032                  		tst.w	$32(a0)
0000DCA4 6700                       		beq.s	loc_B8A0
0000DCA6 1038 FE0F                  		move.b	(v_vbla_byte).w,d0
0000DCAA 0200 000F                  		andi.b	#$F,d0
0000DCAE 6600                       		bne.s	loc_B892
0000DCB0 4A28 0001                  		tst.b	1(a0)
0000DCB4 6A00                       		bpl.s	loc_B892
0000DCC0                            
0000DCC0                            loc_B892:
0000DCC0 0468 0080 0032             		subi.w	#$80,$32(a0)
0000DCC6 6400                       		bcc.s	CStom_Restart
0000DCC8 317C 0000 0032             		move.w	#0,$32(a0)
0000DCCE                            
0000DCCE                            loc_B8A0:
0000DCCE 317C 0000 0012             		move.w	#0,obVelY(a0)
0000DCD4 6000                       		bra.s	CStom_Restart
0000DCD6                            ; ===========================================================================
0000DCD6                            
0000DCD6                            loc_B8A8:
0000DCD6 3228 0034                  		move.w	$34(a0),d1
0000DCDA B268 0032                  		cmp.w	$32(a0),d1
0000DCDE 6700                       		beq.s	CStom_Restart
0000DCE0 3028 0012                  		move.w	obVelY(a0),d0
0000DCE4 0668 0070 0012             		addi.w	#$70,obVelY(a0)	; make object fall
0000DCEA D168 0032                  		add.w	d0,$32(a0)
0000DCEE B268 0032                  		cmp.w	$32(a0),d1
0000DCF2 6200                       		bhi.s	CStom_Restart
0000DCF4 3141 0032                  		move.w	d1,$32(a0)
0000DCF8 317C 0000 0012             		move.w	#0,obVelY(a0)	; stop object falling
0000DCFE 4A28 0001                  		tst.b	obRender(a0)
0000DD02 6A00                       		bpl.s	CStom_Restart
0000DD0E                            
0000DD0E                            CStom_Restart:
0000DD0E 7000                       		moveq	#0,d0
0000DD10 1028 0032                  		move.b	$32(a0),d0
0000DD14 D068 0030                  		add.w	$30(a0),d0
0000DD18 3140 000C                  		move.w	d0,obY(a0)
0000DD1C 4E75                       		rts	
0000DD1E                            ; ===========================================================================
0000DD1E                            
0000DD1E                            CStom_Type01:
0000DD1E 4A68 0036                  		tst.w	$36(a0)
0000DD22 6700                       		beq.s	loc_B938
0000DD24 4A68 0038                  		tst.w	$38(a0)
0000DD28 6700                       		beq.s	loc_B902
0000DD2A 5368 0038                  		subq.w	#1,$38(a0)
0000DD2E 6000                       		bra.s	loc_B97C
0000DD30                            ; ===========================================================================
0000DD30                            
0000DD30                            loc_B902:
0000DD30 1038 FE0F                  		move.b	(v_vbla_byte).w,d0
0000DD34 0200 000F                  		andi.b	#$F,d0
0000DD38 6600                       		bne.s	loc_B91C
0000DD3A 4A28 0001                  		tst.b	obRender(a0)
0000DD3E 6A00                       		bpl.s	loc_B91C
0000DD4A                            
0000DD4A                            loc_B91C:
0000DD4A 0468 0080 0032             		subi.w	#$80,$32(a0)
0000DD50 6400                       		bcc.s	loc_B97C
0000DD52 317C 0000 0032             		move.w	#0,$32(a0)
0000DD58 317C 0000 0012             		move.w	#0,obVelY(a0)
0000DD5E 317C 0000 0036             		move.w	#0,$36(a0)
0000DD64 6000                       		bra.s	loc_B97C
0000DD66                            ; ===========================================================================
0000DD66                            
0000DD66                            loc_B938:
0000DD66 3228 0034                  		move.w	$34(a0),d1
0000DD6A B268 0032                  		cmp.w	$32(a0),d1
0000DD6E 6700                       		beq.s	loc_B97C
0000DD70 3028 0012                  		move.w	obVelY(a0),d0
0000DD74 0668 0070 0012             		addi.w	#$70,obVelY(a0)	; make object fall
0000DD7A D168 0032                  		add.w	d0,$32(a0)
0000DD7E B268 0032                  		cmp.w	$32(a0),d1
0000DD82 6200                       		bhi.s	loc_B97C
0000DD84 3141 0032                  		move.w	d1,$32(a0)
0000DD88 317C 0000 0012             		move.w	#0,obVelY(a0)	; stop object falling
0000DD8E 317C 0001 0036             		move.w	#1,$36(a0)
0000DD94 317C 003C 0038             		move.w	#$3C,$38(a0)
0000DD9A 4A28 0001                  		tst.b	obRender(a0)
0000DD9E 6A00                       		bpl.s	loc_B97C
0000DDAA                            
0000DDAA                            loc_B97C:
0000DDAA 6000 FF62                  		bra.w	CStom_Restart
0000DDAE                            ; ===========================================================================
0000DDAE                            
0000DDAE                            CStom_Type03:
0000DDAE 3038 D008                  		move.w	(v_player+obX).w,d0
0000DDB2 9068 0008                  		sub.w	obX(a0),d0
0000DDB6 6400                       		bcc.s	loc_B98C
0000DDB8 4440                       		neg.w	d0
0000DDBA                            
0000DDBA                            loc_B98C:
0000DDBA 0C40 0090                  		cmpi.w	#$90,d0
0000DDBE 6400                       		bcc.s	loc_B996
0000DDC0 5228 0028                  		addq.b	#1,obSubtype(a0)
0000DDC4                            
0000DDC4                            loc_B996:
0000DDC4 6000 FF48                  		bra.w	CStom_Restart
0000DDC4 6000 FF48                  		bra.w	CStom_Restart
0000DDC8                            		include	"_incObj\45 Sideways Stomper.asm"
0000DDC8                            ; ---------------------------------------------------------------------------
0000DDC8                            ; Object 45 - spiked metal block from beta version (MZ)
0000DDC8                            ; ---------------------------------------------------------------------------
0000DDC8                            
0000DDC8                            SideStomp:
0000DDC8 7000                       		moveq	#0,d0
0000DDCA 1028 0024                  		move.b	obRoutine(a0),d0
0000DDCE 323B 0000                  		move.w	SStom_Index(pc,d0.w),d1
0000DDD2 4EFB 1000                  		jmp	SStom_Index(pc,d1.w)
0000DDD6                            ; ===========================================================================
0000DDD6 0000                       SStom_Index:	dc.w SStom_Main-SStom_Index
0000DDD8 0000                       		dc.w SStom_Solid-SStom_Index
0000DDDA 0000                       		dc.w loc_BA8E-SStom_Index
0000DDDC 0000                       		dc.w SStom_Display-SStom_Index
0000DDDE 0000                       		dc.w SStom_Pole-SStom_Index
0000DDE0                            
0000DDE0                            		;	routine		frame
0000DDE0                            		;		 xpos
0000DDE0 0204 00                    SStom_Var:	dc.b	2,  	 4,	0	; main block
0000DDE3 04E4 01                    		dc.b	4,	-$1C,	1	; spikes
0000DDE6 0834 03                    		dc.b	8,	 $34,	3	; pole
0000DDE9 0628 02                    		dc.b	6,	 $28,	2	; wall bracket
0000DDEC                            
0000DDEC                            ;word_B9BE:	; Note that this indicates three subtypes
0000DDEC 3800                       SStom_Len:	dc.w $3800	; short
0000DDEE A000                       		dc.w $A000	; long
0000DDF0 5000                       		dc.w $5000	; medium
0000DDF2                            ; ===========================================================================
0000DDF2                            
0000DDF2                            SStom_Main:	; Routine 0
0000DDF2 7000                       		moveq	#0,d0
0000DDF4 1028 0028                  		move.b	obSubtype(a0),d0
0000DDF8 D040                       		add.w	d0,d0
0000DDFA 343B 00F0                  		move.w	SStom_Len(pc,d0.w),d2
0000DDFE 45F9 0000 DDE0             		lea	(SStom_Var).l,a2
0000DE04 2248                       		movea.l	a0,a1
0000DE06 7203                       		moveq	#3,d1
0000DE08 6000                       		bra.s	@load
0000DE0A                            
0000DE0A                            	@loop:
0000DE0A 6100 0000                  		bsr.w	FindNextFreeObj
0000DE0E 6600                       		bne.s	@fail
0000DE10                            
0000DE10                            	@load:
0000DE10 135A 0024                  		move.b	(a2)+,obRoutine(a1)
0000DE14 12BC 0000                  		move.b	#id_SideStomp,0(a1)
0000DE18 3368 000C 000C             		move.w	obY(a0),obY(a1)
0000DE1E 101A                       		move.b	(a2)+,d0
0000DE20 4880                       		ext.w	d0
0000DE22 D068 0008                  		add.w	obX(a0),d0
0000DE26 3340 0008                  		move.w	d0,obX(a1)
0000DE2A 237C 0000 0000 0004        		move.l	#Map_SStom,obMap(a1)
0000DE32 337C 0300 0002             		move.w	#$300,obGfx(a1)
0000DE38 137C 0004 0001             		move.b	#4,obRender(a1)
0000DE3E 3369 0008 0030             		move.w	obX(a1),$30(a1)
0000DE44 3368 0008 003A             		move.w	obX(a0),$3A(a1)
0000DE4A 1368 0028 0028             		move.b	obSubtype(a0),obSubtype(a1)
0000DE50 137C 0020 0014             		move.b	#$20,obActWid(a1)
0000DE56 3342 0034                  		move.w	d2,$34(a1)
0000DE5A 337C 0200 0018             		move.w	#$200,obPriority(a1)
0000DE60 0C12 0001                  		cmpi.b	#1,(a2)		; is subobject spikes?
0000DE64 6600                       		bne.s	@notspikes	; if not, branch
0000DE66 137C 0091 0020             		move.b	#$91,obColType(a1) ; use harmful collision type
0000DE6C                            
0000DE6C                            	@notspikes:
0000DE6C 135A 001A                  		move.b	(a2)+,obFrame(a1)
0000DE70 2348 003C                  		move.l	a0,$3C(a1)
0000DE74 51C9 FF94                  		dbf	d1,@loop	; repeat 3 times
0000DE78                            
0000DE78 337C 0180 0018             		move.w	#$180,obPriority(a1)
0000DE7E                            
0000DE7E                            	@fail:
0000DE7E 117C 0010 0014             		move.b	#$10,obActWid(a0)
0000DE84                            
0000DE84                            SStom_Solid:	; Routine 2
0000DE84 3F28 0008                  		move.w	obX(a0),-(sp)
0000DE88 6100 0000                  		bsr.w	SStom_Move
0000DE8C 323C 0017                  		move.w	#$17,d1
0000DE90 343C 0020                  		move.w	#$20,d2
0000DE94 363C 0020                  		move.w	#$20,d3
0000DE98 381F                       		move.w	(sp)+,d4
0000DE9A 6100 0000                  		bsr.w	SolidObject
0000DE9E 6100 0000                  		bsr.w	DisplaySprite
0000DEA2 6000 0000                  		bra.w	SStom_ChkDel
0000DEA6                            ; ===========================================================================
0000DEA6                            
0000DEA6                            SStom_Pole:	; Routine 8
0000DEA6 2268 003C                  		movea.l	$3C(a0),a1
0000DEAA 1029 0032                  		move.b	$32(a1),d0
0000DEAE 0600 0010                  		addi.b	#$10,d0
0000DEB2 EA08                       		lsr.b	#5,d0
0000DEB4 5600                       		addq.b	#3,d0
0000DEB6 1140 001A                  		move.b	d0,obFrame(a0)
0000DEBA                            
0000DEBA                            loc_BA8E:	; Routine 4
0000DEBA 2268 003C                  		movea.l	$3C(a0),a1
0000DEBE 7000                       		moveq	#0,d0
0000DEC0 1029 0032                  		move.b	$32(a1),d0
0000DEC4 4440                       		neg.w	d0
0000DEC6 D068 0030                  		add.w	$30(a0),d0
0000DECA 3140 0008                  		move.w	d0,obX(a0)
0000DECE                            
0000DECE                            SStom_Display:	; Routine 6
0000DECE 6100 0000                  		bsr.w	DisplaySprite
0000DED2                            
0000DED2                            SStom_ChkDel:
0000DEF0 4E75                       		rts	
0000DEF2                            
0000DEF2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DEF2                            
0000DEF2                            
0000DEF2                            SStom_Move:
0000DEF2 7000                       		moveq	#0,d0
0000DEF4 1028 0028                  		move.b	obSubtype(a0),d0
0000DEF8 D040                       		add.w	d0,d0
0000DEFA 323B 0000                  		move.w	off_BAD6(pc,d0.w),d1
0000DEFE 4EFB 1000                  		jmp	off_BAD6(pc,d1.w)
0000DF02                            ; End of function SStom_Move
0000DF02                            
0000DF02                            ; ===========================================================================
0000DF02                            		; This indicates only two subtypes... that do the same thing
0000DF02                            		; Compare to SStom_Len. This breaks subtype 02
0000DF02 0000                       off_BAD6:	dc.w loc_BADA-off_BAD6
0000DF04 0000                       		dc.w loc_BADA-off_BAD6
0000DF06                            ; ===========================================================================
0000DF06                            
0000DF06                            loc_BADA:
0000DF06 4A68 0036                  		tst.w	$36(a0)
0000DF0A 6700                       		beq.s	loc_BB08
0000DF0C 4A68 0038                  		tst.w	$38(a0)
0000DF10 6700                       		beq.s	loc_BAEC
0000DF12 5368 0038                  		subq.w	#1,$38(a0)
0000DF16 6000                       		bra.s	loc_BB3C
0000DF18                            ; ===========================================================================
0000DF18                            
0000DF18                            loc_BAEC:
0000DF18 0468 0080 0032             		subi.w	#$80,$32(a0)
0000DF1E 6400                       		bcc.s	loc_BB3C
0000DF20 317C 0000 0032             		move.w	#0,$32(a0)
0000DF26 317C 0000 0010             		move.w	#0,obVelX(a0)
0000DF2C 317C 0000 0036             		move.w	#0,$36(a0)
0000DF32 6000                       		bra.s	loc_BB3C
0000DF34                            ; ===========================================================================
0000DF34                            
0000DF34                            loc_BB08:
0000DF34 3228 0034                  		move.w	$34(a0),d1
0000DF38 B268 0032                  		cmp.w	$32(a0),d1
0000DF3C 6700                       		beq.s	loc_BB3C
0000DF3E 3028 0010                  		move.w	obVelX(a0),d0
0000DF42 0668 0070 0010             		addi.w	#$70,obVelX(a0)
0000DF48 D168 0032                  		add.w	d0,$32(a0)
0000DF4C B268 0032                  		cmp.w	$32(a0),d1
0000DF50 6200                       		bhi.s	loc_BB3C
0000DF52 3141 0032                  		move.w	d1,$32(a0)
0000DF56 317C 0000 0010             		move.w	#0,obVelX(a0)
0000DF5C 317C 0001 0036             		move.w	#1,$36(a0)
0000DF62 317C 003C 0038             		move.w	#$3C,$38(a0)
0000DF68                            
0000DF68                            loc_BB3C:
0000DF68 7000                       		moveq	#0,d0
0000DF6A 1028 0032                  		move.b	$32(a0),d0
0000DF6E 4440                       		neg.w	d0
0000DF70 D068 0030                  		add.w	$30(a0),d0
0000DF74 3140 0008                  		move.w	d0,obX(a0)
0000DF78 4E75                       		rts	
0000DF78 4E75                       		rts	
0000DF7A                            Map_CStom:	include	"_maps\Chained Stompers.asm"
0000DF7A                            ; ---------------------------------------------------------------------------
0000DF7A                            ; Sprite mappings - metal stomping blocks on chains (MZ)
0000DF7A                            ; ---------------------------------------------------------------------------
0000DF7A                            Map_CStom_internal:
0000DF7A 0000                       		dc.w @wideblock-Map_CStom_internal
0000DF7C 0000                       		dc.w @spikes-Map_CStom_internal
0000DF7E 0000                       		dc.w @ceiling-Map_CStom_internal
0000DF80 0000                       		dc.w @chain1-Map_CStom_internal
0000DF82 0000                       		dc.w @chain2-Map_CStom_internal
0000DF84 0000                       		dc.w @chain3-Map_CStom_internal
0000DF86 0000                       		dc.w @chain4-Map_CStom_internal
0000DF88 0000                       		dc.w @chain5-Map_CStom_internal
0000DF8A 0000                       		dc.w @chain5-Map_CStom_internal
0000DF8C 0000                       		dc.w @mediumblock-Map_CStom_internal
0000DF8E 0000                       		dc.w @smallblock-Map_CStom_internal
0000DF90 05                         @wideblock:	dc.b 5
0000DF91 F406 0000 C8               		dc.b $F4, 6, 0,	0, $C8
0000DF96 F40A 0006 D8               		dc.b $F4, $A, 0, 6, $D8
0000DF9B EC0F 000F F0               		dc.b $EC, $F, 0, $F, $F0
0000DFA0 F40A 0806 10               		dc.b $F4, $A, 8, 6, $10
0000DFA5 F406 0800 28               		dc.b $F4, 6, 8,	0, $28
0000DFAA 05                         @spikes:	dc.b 5
0000DFAB F003 121F D4               		dc.b $F0, 3, $12, $1F, $D4
0000DFB0 F003 121F E8               		dc.b $F0, 3, $12, $1F, $E8
0000DFB5 F003 121F FC               		dc.b $F0, 3, $12, $1F, $FC
0000DFBA F003 121F 10               		dc.b $F0, 3, $12, $1F, $10
0000DFBF F003 121F 24               		dc.b $F0, 3, $12, $1F, $24
0000DFC4 01                         @ceiling:	dc.b 1
0000DFC5 DC0F 100F F0               		dc.b $DC, $F, $10, $F, $F0
0000DFCA 02                         @chain1:	dc.b 2
0000DFCB 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000DFD0 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000DFD5 04                         @chain2:	dc.b 4
0000DFD6 E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000DFDB F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000DFE0 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000DFE5 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000DFEA 06                         @chain3:	dc.b 6
0000DFEB C001 003F FC               		dc.b $C0, 1, 0,	$3F, $FC
0000DFF0 D001 003F FC               		dc.b $D0, 1, 0,	$3F, $FC
0000DFF5 E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000DFFA F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000DFFF 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000E004 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000E009 08                         @chain4:	dc.b 8
0000E00A A001 003F FC               		dc.b $A0, 1, 0,	$3F, $FC
0000E00F B001 003F FC               		dc.b $B0, 1, 0,	$3F, $FC
0000E014 C001 003F FC               		dc.b $C0, 1, 0,	$3F, $FC
0000E019 D001 003F FC               		dc.b $D0, 1, 0,	$3F, $FC
0000E01E E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000E023 F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000E028 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000E02D 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000E032 0A                         @chain5:	dc.b $A
0000E033 8001 003F FC               		dc.b $80, 1, 0,	$3F, $FC
0000E038 9001 003F FC               		dc.b $90, 1, 0,	$3F, $FC
0000E03D A001 003F FC               		dc.b $A0, 1, 0,	$3F, $FC
0000E042 B001 003F FC               		dc.b $B0, 1, 0,	$3F, $FC
0000E047 C001 003F FC               		dc.b $C0, 1, 0,	$3F, $FC
0000E04C D001 003F FC               		dc.b $D0, 1, 0,	$3F, $FC
0000E051 E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000E056 F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000E05B 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000E060 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000E065 05                         @mediumblock:	dc.b 5
0000E066 F406 0000 D0               		dc.b $F4, 6, 0,	0, $D0
0000E06B F40A 0006 E0               		dc.b $F4, $A, 0, 6, $E0
0000E070 F40A 0806 08               		dc.b $F4, $A, 8, 6, 8
0000E075 F406 0800 20               		dc.b $F4, 6, 8,	0, $20
0000E07A EC0F 000F F0               		dc.b $EC, $F, 0, $F, $F0
0000E07F 01                         @smallblock:	dc.b 1
0000E080 EC0F 002F F0               		dc.b $EC, $F, 0, $2F, $F0
0000E086 00                         		even
0000E086 00                         		even
0000E086                            Map_SStom:	include	"_maps\Sideways Stomper.asm"
0000E086                            ; ---------------------------------------------------------------------------
0000E086                            ; Sprite mappings - spiked metal block from beta version (MZ)
0000E086                            ; ---------------------------------------------------------------------------
0000E086                            Map_SStom_internal:
0000E086 0000                       		dc.w @block-Map_SStom_internal
0000E088 0000                       		dc.w @spikes-Map_SStom_internal
0000E08A 0000                       		dc.w @wallbracket-Map_SStom_internal
0000E08C 0000                       		dc.w @pole1-Map_SStom_internal
0000E08E 0000                       		dc.w @pole2-Map_SStom_internal
0000E090 0000                       		dc.w @pole3-Map_SStom_internal
0000E092 0000                       		dc.w @pole4-Map_SStom_internal
0000E094 0000                       		dc.w @pole5-Map_SStom_internal
0000E096 0000                       		dc.w @pole5-Map_SStom_internal
0000E098 03                         @block:		dc.b 3
0000E099 E00B 001F F4               		dc.b $E0, $B, 0, $1F, $F4 ; main metal block
0000E09E 000B 101F F4               		dc.b 0,	$B, $10, $1F, $F4
0000E0A3 F003 002B 0C               		dc.b $F0, 3, 0,	$2B, $C
0000E0A8 03                         @spikes:	dc.b 3
0000E0A9 E80C 121B F0               		dc.b $E8, $C, $12, $1B,	$F0 ; three spikes
0000E0AE FC0C 121B F0               		dc.b $FC, $C, $12, $1B,	$F0
0000E0B3 100C 121B F0               		dc.b $10, $C, $12, $1B,	$F0
0000E0B8 01                         @wallbracket:	dc.b 1
0000E0B9 F003 082B FC               		dc.b $F0, 3, 8,	$2B, $FC ; thing holding it to the wall
0000E0BE 02                         @pole1:		dc.b 2
0000E0BF F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0 ; poles of various lengths
0000E0C4 F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000E0C9 04                         @pole2:		dc.b 4
0000E0CA F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000E0CF F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000E0D4 F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000E0D9 F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000E0DE 06                         @pole3:		dc.b 6
0000E0DF F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000E0E4 F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000E0E9 F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000E0EE F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000E0F3 F805 0041 20               		dc.b $F8, 5, 0,	$41, $20
0000E0F8 F805 0041 30               		dc.b $F8, 5, 0,	$41, $30
0000E0FD 08                         @pole4:		dc.b 8
0000E0FE F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000E103 F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000E108 F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000E10D F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000E112 F805 0041 20               		dc.b $F8, 5, 0,	$41, $20
0000E117 F805 0041 30               		dc.b $F8, 5, 0,	$41, $30
0000E11C F805 0041 40               		dc.b $F8, 5, 0,	$41, $40
0000E121 F805 0041 50               		dc.b $F8, 5, 0,	$41, $50
0000E126 08                         @pole5:		dc.b 8		; Incorrect: this should be $A
0000E127 F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000E12C F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000E131 F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000E136 F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000E13B F805 0041 20               		dc.b $F8, 5, 0,	$41, $20
0000E140 F805 0041 30               		dc.b $F8, 5, 0,	$41, $30
0000E145 F805 0041 40               		dc.b $F8, 5, 0,	$41, $40
0000E14A F805 0041 50               		dc.b $F8, 5, 0,	$41, $50
0000E14F F805 0041 60               		dc.b $F8, 5, 0,	$41, $60
0000E154 F805 0041 70               		dc.b $F8, 5, 0,	$41, $70
0000E159                            		; @pole6 should be here, but it isn't...
0000E15A 00                         		even
0000E15A 00                         		even
0000E15A                            
0000E15A                            		include	"_incObj\32 Button.asm"
0000E15A                            ; ---------------------------------------------------------------------------
0000E15A                            ; Object 32 - buttons (MZ, SYZ, LZ, SBZ)
0000E15A                            ; ---------------------------------------------------------------------------
0000E15A                            
0000E15A                            Button:
0000E15A 7000                       		moveq	#0,d0
0000E15C 1028 0024                  		move.b	obRoutine(a0),d0
0000E160 323B 0000                  		move.w	But_Index(pc,d0.w),d1
0000E164 4EFB 1000                  		jmp	But_Index(pc,d1.w)
0000E168                            ; ===========================================================================
0000E168 0000                       But_Index:	dc.w But_Main-But_Index
0000E16A 0000                       		dc.w But_Pressed-But_Index
0000E16C                            ; ===========================================================================
0000E16C                            
0000E16C                            But_Main:	; Routine 0
0000E16C 5428 0024                  		addq.b	#2,obRoutine(a0)
0000E170 217C 0000 0000 0004        		move.l	#Map_But,obMap(a0)
0000E178 317C 4513 0002             		move.w	#$4513,obGfx(a0) ; MZ specific code
0000E17E 0C38 0002 FE10             		cmpi.b	#id_MZ,(v_zone).w ; is level Marble Zone?
0000E184 6700                       		beq.s	But_IsMZ	; if yes, branch
0000E186                            
0000E186 317C 0513 0002             		move.w	#$513,obGfx(a0)	; SYZ, LZ and SBZ specific code
0000E18C                            
0000E18C                            	But_IsMZ:
0000E18C 117C 0004 0001             		move.b	#4,obRender(a0)
0000E192 117C 0010 0014             		move.b	#$10,obActWid(a0)
0000E198 317C 0200 0018             		move.w	#$200,obPriority(a0)
0000E19E 5668 000C                  		addq.w	#3,obY(a0)
0000E1A2                            
0000E1A2                            But_Pressed:	; Routine 2
0000E1A2 4A28 0001                  		tst.b	obRender(a0)
0000E1A6 6A00                       		bpl.s	But_Display
0000E1A8 323C 001B                  		move.w	#$1B,d1
0000E1AC 343C 0005                  		move.w	#5,d2
0000E1B0 363C 0005                  		move.w	#5,d3
0000E1B4 3828 0008                  		move.w	obX(a0),d4
0000E1B8 6100 0000                  		bsr.w	SolidObject
0000E1BC 08A8 0000 001A             		bclr	#0,obFrame(a0)	; use "unpressed" frame
0000E1C2 1028 0028                  		move.b	obSubtype(a0),d0
0000E1C6 0240 000F                  		andi.w	#$F,d0
0000E1CA 47F8 F7E0                  		lea	(f_switch).w,a3
0000E1CE 47F3 0000                  		lea	(a3,d0.w),a3
0000E1D2 7600                       		moveq	#0,d3
0000E1D4 0828 0006 0028             		btst	#6,obSubtype(a0)
0000E1DA 6700                       		beq.s	loc_BDB2
0000E1DC 7607                       		moveq	#7,d3
0000E1DE                            
0000E1DE                            loc_BDB2:
0000E1DE 4A28 0028                  		tst.b	obSubtype(a0)
0000E1E2 6A00                       		bpl.s	loc_BDBE
0000E1E4 6100 0000                  		bsr.w	But_MZBlock
0000E1E8 6600                       		bne.s	loc_BDC8
0000E1EA                            
0000E1EA                            loc_BDBE:
0000E1EA 4A28 0025                  		tst.b	ob2ndRout(a0)
0000E1EE 6600                       		bne.s	loc_BDC8
0000E1F0 0793                       		bclr	d3,(a3)
0000E1F2 6000                       		bra.s	loc_BDDE
0000E1F4                            ; ===========================================================================
0000E1F4                            
0000E1F4                            loc_BDC8:
0000E1F4 4A13                       		tst.b	(a3)
0000E1F6 6600                       		bne.s	loc_BDD6
0000E202                            
0000E202                            loc_BDD6:
0000E202 07D3                       		bset	d3,(a3)
0000E204 08E8 0000 001A             		bset	#0,obFrame(a0)	; use "pressed"	frame
0000E20A                            
0000E20A                            loc_BDDE:
0000E20A 0828 0005 0028             		btst	#5,obSubtype(a0)
0000E210 6700                       		beq.s	But_Display
0000E212 5328 001E                  		subq.b	#1,obTimeFrame(a0)
0000E216 6A00                       		bpl.s	But_Display
0000E218 117C 0007 001E             		move.b	#7,obTimeFrame(a0)
0000E21E 0868 0001 001A             		bchg	#1,obFrame(a0)
0000E224                            
0000E224                            But_Display:
0000E224 6100 0000                  		bsr.w	DisplaySprite
0000E246 4E75                       		rts	
0000E248                            ; ===========================================================================
0000E248                            
0000E248                            But_Delete:
0000E248 6100 0000                  		bsr.w	DeleteObject
0000E24C 4E75                       		rts	
0000E24E                            
0000E24E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E24E                            
0000E24E                            
0000E24E                            But_MZBlock:
0000E24E 3F03                       		move.w	d3,-(sp)
0000E250 3428 0008                  		move.w	obX(a0),d2
0000E254 3628 000C                  		move.w	obY(a0),d3
0000E258 0442 0010                  		subi.w	#$10,d2
0000E25C 5143                       		subq.w	#8,d3
0000E25E 383C 0020                  		move.w	#$20,d4
0000E262 3A3C 0010                  		move.w	#$10,d5
0000E266 43F8 D800                  		lea	(v_lvlobjspace).w,a1 ; begin checking object RAM
0000E26A 3C3C 005F                  		move.w	#$5F,d6
0000E26E                            
0000E26E                            But_MZLoop:
0000E26E 4A29 0001                  		tst.b	obRender(a1)
0000E272 6A00                       		bpl.s	loc_BE4E
0000E274 0C11 0000                  		cmpi.b	#id_PushBlock,(a1) ; is the object a green MZ block?
0000E278 6700                       		beq.s	loc_BE5E	; if yes, branch
0000E27A                            
0000E27A                            loc_BE4E:
0000E27A 43E9 0040                  		lea	$40(a1),a1	; check	next object
0000E27E 51CE FFEE                  		dbf	d6,But_MZLoop	; repeat $5F times
0000E282                            
0000E282 361F                       		move.w	(sp)+,d3
0000E284 7000                       		moveq	#0,d0
0000E286                            
0000E286                            locret_BE5A:
0000E286 4E75                       		rts	
0000E288                            ; ===========================================================================
0000E288 1010                       But_MZData:	dc.b $10, $10
0000E28A                            ; ===========================================================================
0000E28A                            
0000E28A                            loc_BE5E:
0000E28A 7001                       		moveq	#1,d0
0000E28C 0240 003F                  		andi.w	#$3F,d0
0000E290 D040                       		add.w	d0,d0
0000E292 45FB 00F2                  		lea	But_MZData-2(pc,d0.w),a2
0000E296 121A                       		move.b	(a2)+,d1
0000E298 4881                       		ext.w	d1
0000E29A 3029 0008                  		move.w	obX(a1),d0
0000E29E 9041                       		sub.w	d1,d0
0000E2A0 9042                       		sub.w	d2,d0
0000E2A2 6400                       		bcc.s	loc_BE80
0000E2A4 D241                       		add.w	d1,d1
0000E2A6 D041                       		add.w	d1,d0
0000E2A8 6500                       		bcs.s	loc_BE84
0000E2AA 60CE                       		bra.s	loc_BE4E
0000E2AC                            ; ===========================================================================
0000E2AC                            
0000E2AC                            loc_BE80:
0000E2AC B044                       		cmp.w	d4,d0
0000E2AE 62CA                       		bhi.s	loc_BE4E
0000E2B0                            
0000E2B0                            loc_BE84:
0000E2B0 121A                       		move.b	(a2)+,d1
0000E2B2 4881                       		ext.w	d1
0000E2B4 3029 000C                  		move.w	obY(a1),d0
0000E2B8 9041                       		sub.w	d1,d0
0000E2BA 9043                       		sub.w	d3,d0
0000E2BC 6400                       		bcc.s	loc_BE9A
0000E2BE D241                       		add.w	d1,d1
0000E2C0 D041                       		add.w	d1,d0
0000E2C2 6500                       		bcs.s	loc_BE9E
0000E2C4 60B4                       		bra.s	loc_BE4E
0000E2C6                            ; ===========================================================================
0000E2C6                            
0000E2C6                            loc_BE9A:
0000E2C6 B045                       		cmp.w	d5,d0
0000E2C8 62B0                       		bhi.s	loc_BE4E
0000E2CA                            
0000E2CA                            loc_BE9E:
0000E2CA 361F                       		move.w	(sp)+,d3
0000E2CC 7001                       		moveq	#1,d0
0000E2CE 4E75                       		rts	
0000E2D0                            ; End of function But_MZBlock
0000E2D0                            ; End of function But_MZBlock
0000E2D0                            Map_But:	include	"_maps\Button.asm"
0000E2D0                            ; ---------------------------------------------------------------------------
0000E2D0                            ; Sprite mappings - switches (MZ, SYZ, LZ, SBZ)
0000E2D0                            ; ---------------------------------------------------------------------------
0000E2D0                            Map_But_internal:
0000E2D0 0000                       		dc.w byte_BEAC-Map_But_internal
0000E2D2 0000                       		dc.w byte_BEB7-Map_But_internal
0000E2D4 0000                       		dc.w byte_BEC2-Map_But_internal
0000E2D6 0000                       		dc.w byte_BEB7-Map_But_internal
0000E2D8 02                         byte_BEAC:	dc.b 2
0000E2D9 F505 0000 F0               		dc.b $F5, 5, 0,	0, $F0
0000E2DE F505 0800 00               		dc.b $F5, 5, 8,	0, 0
0000E2E3 02                         byte_BEB7:	dc.b 2
0000E2E4 F505 0004 F0               		dc.b $F5, 5, 0,	4, $F0
0000E2E9 F505 0804 00               		dc.b $F5, 5, 8,	4, 0
0000E2EE 02                         byte_BEC2:	dc.b 2
0000E2EF F505 FFFC F0               		dc.b $F5, 5, $FF, $FC, $F0
0000E2F4 F505 07FC 00               		dc.b $F5, 5, 7,	$FC, 0
0000E2F9 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0000E2FE                            		even
0000E2FE                            		even
0000E2FE                            
0000E2FE                            		include	"_incObj\33 Pushable Blocks.asm"
0000E2FE                            ; ---------------------------------------------------------------------------
0000E2FE                            ; Object 33 - pushable blocks (MZ, LZ)
0000E2FE                            ; ---------------------------------------------------------------------------
0000E2FE                            
0000E2FE                            PushBlock:
0000E2FE 7000                       		moveq	#0,d0
0000E300 1028 0024                  		move.b	obRoutine(a0),d0
0000E304 323B 0000                  		move.w	PushB_Index(pc,d0.w),d1
0000E308 4EFB 1000                  		jmp	PushB_Index(pc,d1.w)
0000E30C                            ; ===========================================================================
0000E30C 0000                       PushB_Index:	dc.w PushB_Main-PushB_Index
0000E30E 0000                       		dc.w loc_BF6E-PushB_Index
0000E310 0000                       		dc.w loc_C02C-PushB_Index
0000E312                            
0000E312 1000                       PushB_Var:	dc.b $10, 0	; object width,	frame number
0000E314 4001                       		dc.b $40, 1
0000E316                            ; ===========================================================================
0000E316                            
0000E316                            PushB_Main:	; Routine 0
0000E316 5428 0024                  		addq.b	#2,obRoutine(a0)
0000E31A 117C 000F 0016             		move.b	#$F,obHeight(a0)
0000E320 117C 000F 0017             		move.b	#$F,obWidth(a0)
0000E326 217C 0000 0000 0004        		move.l	#Map_Push,obMap(a0)
0000E32E 317C 42B8 0002             		move.w	#$42B8,obGfx(a0) ; MZ specific code
0000E334 0C38 0001 FE10             		cmpi.b	#1,(v_zone).w
0000E33A 6600                       		bne.s	@notLZ
0000E33C 317C 43DE 0002             		move.w	#$43DE,obGfx(a0) ; LZ specific code
0000E342                            
0000E342                            	@notLZ:
0000E342 117C 0004 0001             		move.b	#4,obRender(a0)
0000E348 317C 0180 0018             		move.w	#$180,obPriority(a0)
0000E34E 3168 0008 0034             		move.w	obX(a0),$34(a0)
0000E354 3168 000C 0036             		move.w	obY(a0),$36(a0)
0000E35A 7000                       		moveq	#0,d0
0000E35C 1028 0028                  		move.b	obSubtype(a0),d0
0000E360 D040                       		add.w	d0,d0
0000E362 0240 000E                  		andi.w	#$E,d0
0000E366 45FB 00AA                  		lea	PushB_Var(pc,d0.w),a2
0000E36A 115A 0014                  		move.b	(a2)+,obActWid(a0)
0000E36E 115A 001A                  		move.b	(a2)+,obFrame(a0)
0000E372 4A28 0028                  		tst.b	obSubtype(a0)
0000E376 6700                       		beq.s	@chkgone
0000E378 317C C2B8 0002             		move.w	#$C2B8,obGfx(a0)
0000E37E                            
0000E37E                            	@chkgone:
0000E37E 45F8 FC00                  		lea	(v_objstate).w,a2
0000E382 7000                       		moveq	#0,d0
0000E384 1028 0023                  		move.b	obRespawnNo(a0),d0
0000E388 6700                       		beq.s	loc_BF6E
0000E38A 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000E390 08F2 0000 0002             		bset	#0,2(a2,d0.w)
0000E396 6600 0000                  		bne.w	DeleteObject
0000E39A                            
0000E39A                            loc_BF6E:	; Routine 2
0000E39A 4A28 0032                  		tst.b	$32(a0)
0000E39E 6600 0000                  		bne.w	loc_C046
0000E3A2 7200                       		moveq	#0,d1
0000E3A4 1228 0014                  		move.b	obActWid(a0),d1
0000E3A8 0641 000B                  		addi.w	#$B,d1
0000E3AC 343C 0010                  		move.w	#$10,d2
0000E3B0 363C 0011                  		move.w	#$11,d3
0000E3B4 3828 0008                  		move.w	obX(a0),d4
0000E3B8 6100 0000                  		bsr.w	loc_C186
0000E3BC 0C78 0200 FE10             		cmpi.w	#(id_MZ<<8)+0,(v_zone).w ; is the level MZ act 1?
0000E3C2 6600                       		bne.s	loc_BFC6	; if not, branch
0000E3C4 08A8 0007 0028             		bclr	#7,obSubtype(a0)
0000E3CA 3028 0008                  		move.w	obX(a0),d0
0000E3CE 0C40 0A20                  		cmpi.w	#$A20,d0
0000E3D2 6500                       		bcs.s	loc_BFC6
0000E3D4 0C40 0AA1                  		cmpi.w	#$AA1,d0
0000E3D8 6400                       		bcc.s	loc_BFC6
0000E3DA 3038 F7A4                  		move.w	(v_obj31ypos).w,d0
0000E3DE 0440 001C                  		subi.w	#$1C,d0
0000E3E2 3140 000C                  		move.w	d0,obY(a0)
0000E3E6 08F8 0007 F7A4             		bset	#7,(v_obj31ypos).w
0000E3EC 08E8 0007 0028             		bset	#7,obSubtype(a0)
0000E3F2                            
0000E3F2                            	loc_BFC6:
0000E40E 6000 0000                  		bra.w	DisplaySprite
0000E412                            ; ===========================================================================
0000E412                            
0000E412                            loc_ppppp:
0000E42E 3168 0034 0008             		move.w	$34(a0),obX(a0)
0000E434 3168 0036 000C             		move.w	$36(a0),obY(a0)
0000E43A 117C 0004 0024             		move.b	#4,obRoutine(a0)
0000E440 6000                       		bra.s	loc_C02C
0000E442                            ; ===========================================================================
0000E442                            
0000E442                            loc_C016:
0000E442 45F8 FC00                  		lea	(v_objstate).w,a2
0000E446 7000                       		moveq	#0,d0
0000E448 1028 0023                  		move.b	obRespawnNo(a0),d0
0000E44C 6700                       		beq.s	loc_C028
0000E44E 08B2 0000 0002             		bclr	#0,2(a2,d0.w)
0000E454                            
0000E454                            loc_C028:
0000E454 6000 0000                  		bra.w	DeleteObject
0000E458                            ; ===========================================================================
0000E458                            
0000E458                            loc_C02C:	; Routine 4
0000E458 6100 0000                  		bsr.w	ChkPartiallyVisible
0000E45C 6700                       		beq.s	locret_C044
0000E45E 117C 0002 0024             		move.b	#2,obRoutine(a0)
0000E464 4228 0032                  		clr.b	$32(a0)
0000E468 4268 0010                  		clr.w	obVelX(a0)
0000E46C 4268 0012                  		clr.w	obVelY(a0)
0000E470                            
0000E470                            locret_C044:
0000E470 4E75                       		rts	
0000E472                            ; ===========================================================================
0000E472                            
0000E472                            loc_C046:
0000E472 3F28 0008                  		move.w	obX(a0),-(sp)
0000E476 0C28 0004 0025             		cmpi.b	#4,ob2ndRout(a0)
0000E47C 6400                       		bcc.s	loc_C056
0000E47E 6100 0000                  		bsr.w	SpeedToPos
0000E482                            
0000E482                            loc_C056:
0000E482 0828 0001 0022             		btst	#1,obStatus(a0)
0000E488 6700                       		beq.s	loc_C0A0
0000E48A 0668 0018 0012             		addi.w	#$18,obVelY(a0)
0000E490 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0000E496 4A41                       		tst.w	d1
0000E498 6A00 0000                  		bpl.w	loc_C09E
0000E49C D368 000C                  		add.w	d1,obY(a0)
0000E4A0 4268 0012                  		clr.w	obVelY(a0)
0000E4A4 08A8 0001 0022             		bclr	#1,obStatus(a0)
0000E4AA 3011                       		move.w	(a1),d0
0000E4AC 0240 03FF                  		andi.w	#$3FF,d0
0000E4B0 0C40 016A                  		cmpi.w	#$16A,d0
0000E4B4 6500                       		bcs.s	loc_C09E
0000E4B6 3028 0030                  		move.w	$30(a0),d0
0000E4BA E640                       		asr.w	#3,d0
0000E4BC 3140 0010                  		move.w	d0,obVelX(a0)
0000E4C0 117C 0001 0032             		move.b	#1,$32(a0)
0000E4C6 4268 000E                  		clr.w	$E(a0)
0000E4CA                            
0000E4CA                            loc_C09E:
0000E4CA 6000                       		bra.s	loc_C0E6
0000E4CC                            ; ===========================================================================
0000E4CC                            
0000E4CC                            loc_C0A0:
0000E4CC 4A68 0010                  		tst.w	obVelX(a0)
0000E4D0 6700 0000                  		beq.w	loc_C0D6
0000E4D4 6B00                       		bmi.s	loc_C0BC
0000E4D6 7600                       		moveq	#0,d3
0000E4D8 1628 0014                  		move.b	obActWid(a0),d3
0000E4DC 4EB9 0000 0000             		jsr	(ObjHitWallRight).l
0000E4E2 4A41                       		tst.w	d1		; has block touched a wall?
0000E4E4 6B00                       		bmi.s	PushB_StopPush	; if yes, branch
0000E4E6 6000                       		bra.s	loc_C0E6
0000E4E8                            ; ===========================================================================
0000E4E8                            
0000E4E8                            loc_C0BC:
0000E4E8 7600                       		moveq	#0,d3
0000E4EA 1628 0014                  		move.b	obActWid(a0),d3
0000E4EE 4643                       		not.w	d3
0000E4F0 4EB9 0000 0000             		jsr	(ObjHitWallLeft).l
0000E4F6 4A41                       		tst.w	d1		; has block touched a wall?
0000E4F8 6B00                       		bmi.s	PushB_StopPush	; if yes, branch
0000E4FA 6000                       		bra.s	loc_C0E6
0000E4FC                            ; ===========================================================================
0000E4FC                            
0000E4FC                            PushB_StopPush:
0000E4FC 4268 0010                  		clr.w	obVelX(a0)		; stop block moving
0000E500 6000                       		bra.s	loc_C0E6
0000E502                            ; ===========================================================================
0000E502                            
0000E502                            loc_C0D6:
0000E502 06A8 0000 2001 000C        		addi.l	#$2001,obY(a0)
0000E50A 0C28 00A0 000F             		cmpi.b	#$A0,obY+3(a0)
0000E510 6400                       		bcc.s	loc_C104
0000E512                            
0000E512                            loc_C0E6:
0000E512 7200                       		moveq	#0,d1
0000E514 1228 0014                  		move.b	obActWid(a0),d1
0000E518 0641 000B                  		addi.w	#$B,d1
0000E51C 343C 0010                  		move.w	#$10,d2
0000E520 363C 0011                  		move.w	#$11,d3
0000E524 381F                       		move.w	(sp)+,d4
0000E526 6100 0000                  		bsr.w	loc_C186
0000E52A 6100                       		bsr.s	PushB_ChkLava
0000E52C 6000 FEC4                  		bra.w	loc_BFC6
0000E530                            ; ===========================================================================
0000E530                            
0000E530                            loc_C104:
0000E530 381F                       		move.w	(sp)+,d4
0000E532 43F8 D000                  		lea	(v_player).w,a1
0000E536 08A9 0003 0022             		bclr	#3,obStatus(a1)
0000E53C 08A8 0003 0022             		bclr	#3,obStatus(a0)
0000E542 6000 FECE                  		bra.w	loc_ppppp
0000E546                            ; ===========================================================================
0000E546                            
0000E546                            PushB_ChkLava:
0000E546 0C78 0201 FE10             		cmpi.w	#(id_MZ<<8)+1,(v_zone).w ; is the level MZ act 2?
0000E54C 6600                       		bne.s	PushB_ChkLava2	; if not, branch
0000E54E 343C FFE0                  		move.w	#-$20,d2
0000E552 0C68 0DD0 0008             		cmpi.w	#$DD0,obX(a0)
0000E558 6700                       		beq.s	PushB_LoadLava
0000E55A 0C68 0CC0 0008             		cmpi.w	#$CC0,obX(a0)
0000E560 6700                       		beq.s	PushB_LoadLava
0000E562 0C68 0BA0 0008             		cmpi.w	#$BA0,obX(a0)
0000E568 6700                       		beq.s	PushB_LoadLava
0000E56A 4E75                       		rts	
0000E56C                            ; ===========================================================================
0000E56C                            
0000E56C                            PushB_ChkLava2:
0000E56C 0C78 0202 FE10             		cmpi.w	#(id_MZ<<8)+2,(v_zone).w ; is the level MZ act 3?
0000E572 6600                       		bne.s	PushB_NoLava	; if not, branch
0000E574 343C 0020                  		move.w	#$20,d2
0000E578 0C68 0560 0008             		cmpi.w	#$560,obX(a0)
0000E57E 6700                       		beq.s	PushB_LoadLava
0000E580 0C68 05C0 0008             		cmpi.w	#$5C0,obX(a0)
0000E586 6700                       		beq.s	PushB_LoadLava
0000E588                            
0000E588                            PushB_NoLava:
0000E588 4E75                       		rts	
0000E58A                            ; ===========================================================================
0000E58A                            
0000E58A                            PushB_LoadLava:
0000E58A 6100 0000                  		bsr.w	FindFreeObj
0000E58E 6600                       		bne.s	locret_C184
0000E590 12BC 0000                  		move.b	#id_GeyserMaker,0(a1) ; load lava geyser object
0000E594 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000E59A D569 0008                  		add.w	d2,obX(a1)
0000E59E 3368 000C 000C             		move.w	obY(a0),obY(a1)
0000E5A4 0669 0010 000C             		addi.w	#$10,obY(a1)
0000E5AA 2348 003C                  		move.l	a0,$3C(a1)
0000E5AE                            
0000E5AE                            locret_C184:
0000E5AE 4E75                       		rts	
0000E5B0                            ; ===========================================================================
0000E5B0                            
0000E5B0                            loc_C186:
0000E5B0 1028 0025                  		move.b	ob2ndRout(a0),d0
0000E5B4 6700 0000                  		beq.w	loc_C218
0000E5B8 5500                       		subq.b	#2,d0
0000E5BA 6600                       		bne.s	loc_C1AA
0000E5BC 6100 ACEC                  		bsr.w	ExitPlatform
0000E5C0 0829 0003 0022             		btst	#3,obStatus(a1)
0000E5C6 6600                       		bne.s	loc_C1A4
0000E5C8 4228 0025                  		clr.b	ob2ndRout(a0)
0000E5CC 4E75                       		rts	
0000E5CE                            ; ===========================================================================
0000E5CE                            
0000E5CE                            loc_C1A4:
0000E5CE 3404                       		move.w	d4,d2
0000E5D0 6000 B236                  		bra.w	MvSonicOnPtfm
0000E5D4                            ; ===========================================================================
0000E5D4                            
0000E5D4                            loc_C1AA:
0000E5D4 5500                       		subq.b	#2,d0
0000E5D6 6600                       		bne.s	loc_C1F2
0000E5D8 6100 0000                  		bsr.w	SpeedToPos
0000E5DC 0668 0018 0012             		addi.w	#$18,obVelY(a0)
0000E5E2 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0000E5E8 4A41                       		tst.w	d1
0000E5EA 6A00 0000                  		bpl.w	locret_C1F0
0000E5EE D368 000C                  		add.w	d1,obY(a0)
0000E5F2 4268 0012                  		clr.w	obVelY(a0)
0000E5F6 4228 0025                  		clr.b	ob2ndRout(a0)
0000E5FA 3011                       		move.w	(a1),d0
0000E5FC 0240 03FF                  		andi.w	#$3FF,d0
0000E600 0C40 016A                  		cmpi.w	#$16A,d0
0000E604 6500                       		bcs.s	locret_C1F0
0000E606 3028 0030                  		move.w	$30(a0),d0
0000E60A E640                       		asr.w	#3,d0
0000E60C 3140 0010                  		move.w	d0,obVelX(a0)
0000E610 117C 0001 0032             		move.b	#1,$32(a0)
0000E616 4268 000E                  		clr.w	obY+2(a0)
0000E61A                            
0000E61A                            locret_C1F0:
0000E61A 4E75                       		rts	
0000E61C                            ; ===========================================================================
0000E61C                            
0000E61C                            loc_C1F2:
0000E61C 6100 0000                  		bsr.w	SpeedToPos
0000E620 3028 0008                  		move.w	obX(a0),d0
0000E624 0240 000C                  		andi.w	#$C,d0
0000E628 6600 0000                  		bne.w	locret_C2E4
0000E62C 0268 FFF0 0008             		andi.w	#-$10,obX(a0)
0000E632 3168 0010 0030             		move.w	obVelX(a0),$30(a0)
0000E638 4268 0010                  		clr.w	obVelX(a0)
0000E63C 5528 0025                  		subq.b	#2,ob2ndRout(a0)
0000E640 4E75                       		rts	
0000E642                            ; ===========================================================================
0000E642                            
0000E642                            loc_C218:
0000E642 6100 0000                  		bsr.w	Solid_ChkEnter
0000E646 4A44                       		tst.w	d4
0000E648 6700 0000                  		beq.w	locret_C2E4
0000E64C 6B00 0000                  		bmi.w	locret_C2E4
0000E650 4A28 0032                  		tst.b	$32(a0)
0000E654 6700                       		beq.s	loc_C230
0000E656 6000 0000                  		bra.w	locret_C2E4
0000E65A                            ; ===========================================================================
0000E65A                            
0000E65A                            loc_C230:
0000E65A 4A40                       		tst.w	d0
0000E65C 6700 0000                  		beq.w	locret_C2E4
0000E660 6B00                       		bmi.s	loc_C268
0000E662 0829 0000 0022             		btst	#0,obStatus(a1)
0000E668 6600 0000                  		bne.w	locret_C2E4
0000E66C 3F00                       		move.w	d0,-(sp)
0000E66E 7600                       		moveq	#0,d3
0000E670 1628 0014                  		move.b	obActWid(a0),d3
0000E674 4EB9 0000 0000             		jsr	(ObjHitWallRight).l
0000E67A 301F                       		move.w	(sp)+,d0
0000E67C 4A41                       		tst.w	d1
0000E67E 6B00 0000                  		bmi.w	locret_C2E4
0000E682 06A8 0001 0000 0008        		addi.l	#$10000,obX(a0)
0000E68A 7001                       		moveq	#1,d0
0000E68C 323C 0040                  		move.w	#$40,d1
0000E690 6000                       		bra.s	loc_C294
0000E692                            ; ===========================================================================
0000E692                            
0000E692                            loc_C268:
0000E692 0829 0000 0022             		btst	#0,obStatus(a1)
0000E698 6700                       		beq.s	locret_C2E4
0000E69A 3F00                       		move.w	d0,-(sp)
0000E69C 7600                       		moveq	#0,d3
0000E69E 1628 0014                  		move.b	obActWid(a0),d3
0000E6A2 4643                       		not.w	d3
0000E6A4 4EB9 0000 0000             		jsr	(ObjHitWallLeft).l
0000E6AA 301F                       		move.w	(sp)+,d0
0000E6AC 4A41                       		tst.w	d1
0000E6AE 6B00                       		bmi.s	locret_C2E4
0000E6B0 04A8 0001 0000 0008        		subi.l	#$10000,obX(a0)
0000E6B8 70FF                       		moveq	#-1,d0
0000E6BA 323C FFC0                  		move.w	#-$40,d1
0000E6BE                            
0000E6BE                            loc_C294:
0000E6BE 43F8 D000                  		lea	(v_player).w,a1
0000E6C2 D169 0008                  		add.w	d0,obX(a1)
0000E6C6 3341 0020                  		move.w	d1,obInertia(a1)
0000E6CA 337C 0000 0010             		move.w	#0,obVelX(a1)
0000E6D0 3F00                       		move.w	d0,-(sp)
0000E6DC 301F                       		move.w	(sp)+,d0
0000E6DE 4A28 0028                  		tst.b	obSubtype(a0)
0000E6E2 6B00                       		bmi.s	locret_C2E4
0000E6E4 3F00                       		move.w	d0,-(sp)
0000E6E6 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0000E6EC 301F                       		move.w	(sp)+,d0
0000E6EE 0C41 0004                  		cmpi.w	#4,d1
0000E6F2 6F00                       		ble.s	loc_C2E0
0000E6F4 317C 0400 0010             		move.w	#$400,obVelX(a0)
0000E6FA 4A40                       		tst.w	d0
0000E6FC 6A00                       		bpl.s	loc_C2D8
0000E6FE 4468 0010                  		neg.w	obVelX(a0)
0000E702                            
0000E702                            loc_C2D8:
0000E702 117C 0006 0025             		move.b	#6,ob2ndRout(a0)
0000E708 6000                       		bra.s	locret_C2E4
0000E70A                            ; ===========================================================================
0000E70A                            
0000E70A                            loc_C2E0:
0000E70A D368 000C                  		add.w	d1,obY(a0)
0000E70E                            
0000E70E                            locret_C2E4:
0000E70E 4E75                       		rts	
0000E70E 4E75                       		rts	
0000E710                            Map_Push:	include	"_maps\Pushable Blocks.asm"
0000E710                            ; ---------------------------------------------------------------------------
0000E710                            ; Sprite mappings - pushable blocks (MZ, LZ)
0000E710                            ; ---------------------------------------------------------------------------
0000E710                            Map_Push_internal:
0000E710 0000                       		dc.w @single-Map_Push_internal
0000E712 0000                       		dc.w @four-Map_Push_internal
0000E714 01                         @single:	dc.b 1
0000E715 F00F 0008 F0               		dc.b $F0, $F, 0, 8, $F0	; single block
0000E71A 04                         @four:		dc.b 4
0000E71B F00F 0008 C0               		dc.b $F0, $F, 0, 8, $C0	; row of 4 blocks
0000E720 F00F 0008 E0               		dc.b $F0, $F, 0, 8, $E0
0000E725 F00F 0008 00               		dc.b $F0, $F, 0, 8, 0
0000E72A F00F 0008 20               		dc.b $F0, $F, 0, 8, $20
0000E730 00                         		even
0000E730 00                         		even
0000E730                            
0000E730                            		include	"_incObj\34 Title Cards.asm"
0000E730                            ; ---------------------------------------------------------------------------
0000E730                            ; Object 34 - zone title cards
0000E730                            ; ---------------------------------------------------------------------------
0000E730                            
0000E730                            TitleCard:
0000E730 7000                       		moveq	#0,d0
0000E732 1028 0024                  		move.b	obRoutine(a0),d0
0000E736 323B 0000                  		move.w	Card_Index(pc,d0.w),d1
0000E73A 4EFB 1000                  		jmp	Card_Index(pc,d1.w)
0000E73E                            ; ===========================================================================
0000E73E 0000                       Card_Index:	dc.w Card_CheckSBZ3-Card_Index
0000E740 0000                       		dc.w Card_ChkPos-Card_Index
0000E742 0000                       		dc.w Card_Wait-Card_Index
0000E744 0000                       		dc.w Card_Wait-Card_Index
0000E746                            
0000E746 =00000030                  card_mainX:	equ $30		; position for card to display on
0000E746 =00000032                  card_finalX:	equ $32		; position for card to finish on
0000E746                            ; ===========================================================================
0000E746                            
0000E746                            Card_CheckSBZ3:	; Routine 0
0000E746 2248                       		movea.l	a0,a1
0000E748 7000                       		moveq	#0,d0
0000E74A 1038 FE10                  		move.b	(v_zone).w,d0
0000E74E 0C78 0103 FE10             		cmpi.w	#(id_LZ<<8)+3,(v_zone).w ; check if level is SBZ 3
0000E754 6600                       		bne.s	Card_CheckFZ
0000E756 7001                       		moveq	#1,d0		; load title card number 6 (FZ)
0000E758                            
0000E758                            	Card_CheckFZ:
0000E758 3400                       		move.w	d0,d2
0000E75A 0C78 0502 FE10             		cmpi.w	#(id_SBZ<<8)+2,(v_zone).w ; check if level is FZ
0000E760 6600                       		bne.s	Card_LoadConfig
0000E762 7006                       		moveq	#6,d0		; load title card number 6 (FZ)
0000E764 740B                       		moveq	#$B,d2		; use "FINAL" mappings
0000E766                            
0000E766                            	Card_LoadConfig:
0000E766 47F9 0000 0000             		lea	(Card_ConData).l,a3
0000E76C E948                       		lsl.w	#4,d0
0000E76E D6C0                       		adda.w	d0,a3
0000E770 45F9 0000 0000             		lea	(Card_ItemData).l,a2
0000E776 7203                       		moveq	#3,d1
0000E778                            
0000E778                            Card_Loop:
0000E778 12BC 0000                  		move.b	#id_TitleCard,0(a1)
0000E77C 3353 0008                  		move.w	(a3),obX(a1)	; load start x-position
0000E780 335B 0032                  		move.w	(a3)+,card_finalX(a1) ; load finish x-position (same as start)
0000E784 335B 0030                  		move.w	(a3)+,card_mainX(a1) ; load main x-position
0000E788 335A 000A                  		move.w	(a2)+,obScreenY(a1)
0000E78C 135A 0024                  		move.b	(a2)+,obRoutine(a1)
0000E790 101A                       		move.b	(a2)+,d0
0000E792 6600                       		bne.s	Card_ActNumber
0000E794 1002                       		move.b	d2,d0
0000E796                            
0000E796                            	Card_ActNumber:
0000E796 0C00 0007                  		cmpi.b	#7,d0
0000E79A 6600                       		bne.s	Card_MakeSprite
0000E79C D038 FE11                  		add.b	(v_act).w,d0
0000E7A0 0C38 0003 FE11             		cmpi.b	#3,(v_act).w
0000E7A6 6600                       		bne.s	Card_MakeSprite
0000E7A8 5300                       		subq.b	#1,d0
0000E7AA                            
0000E7AA                            	Card_MakeSprite:
0000E7AA 1340 001A                  		move.b	d0,obFrame(a1)	; display frame	number d0
0000E7AE 237C 0000 0000 0004        		move.l	#Map_Card,obMap(a1)
0000E7B6 337C 8580 0002             		move.w	#$8580,obGfx(a1)
0000E7BC 137C 0078 0014             		move.b	#$78,obActWid(a1)
0000E7C2 137C 0000 0001             		move.b	#0,obRender(a1)
0000E7C8 337C 0000 0018             		move.w	#0,obPriority(a1)
0000E7CE 337C 003C 001E             		move.w	#60,obTimeFrame(a1) ; set time delay to 1 second
0000E7D4 43E9 0040                  		lea	$40(a1),a1	; next object
0000E7D8 51C9 FF9E                  		dbf	d1,Card_Loop	; repeat sequence another 3 times
0000E7DC                            
0000E7DC                            Card_ChkPos:	; Routine 2
0000E7DC 7210                       		moveq	#$10,d1		; set horizontal speed
0000E7DE 3028 0030                  		move.w	card_mainX(a0),d0
0000E7E2 B068 0008                  		cmp.w	obX(a0),d0	; has item reached the target position?
0000E7E6 6700                       		beq.s	Card_NoMove	; if yes, branch
0000E7E8 6C00                       		bge.s	Card_Move
0000E7EA 4441                       		neg.w	d1
0000E7EC                            
0000E7EC                            Card_Move:
0000E7EC D368 0008                  		add.w	d1,obX(a0)	; change item's position
0000E7F0                            
0000E7F0                            Card_NoMove:
0000E7F0 3028 0008                  		move.w	obX(a0),d0
0000E7F4 6B00                       		bmi.s	locret_C3D8
0000E7F6 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000E7FA 6400                       		bcc.s	locret_C3D8	; if yes, branch
0000E7FC 6000 0000                  		bra.w	DisplaySprite
0000E800                            ; ===========================================================================
0000E800                            
0000E800                            locret_C3D8:
0000E800 4E75                       		rts	
0000E802                            ; ===========================================================================
0000E802                            
0000E802                            Card_Wait:	; Routine 4/6
0000E802 4A68 001E                  		tst.w	obTimeFrame(a0)	; is time remaining zero?
0000E806 6700                       		beq.s	Card_ChkPos2	; if yes, branch
0000E808 5368 001E                  		subq.w	#1,obTimeFrame(a0) ; subtract 1 from time
0000E80C 6000 0000                  		bra.w	DisplaySprite
0000E810                            ; ===========================================================================
0000E810                            
0000E810                            Card_ChkPos2:
0000E810 4A28 0001                  		tst.b	obRender(a0)
0000E814 6A00                       		bpl.s	Card_ChangeArt
0000E816 7220                       		moveq	#$20,d1
0000E818 3028 0032                  		move.w	card_finalX(a0),d0
0000E81C B068 0008                  		cmp.w	obX(a0),d0	; has item reached the finish position?
0000E820 6700                       		beq.s	Card_ChangeArt	; if yes, branch
0000E822 6C00                       		bge.s	Card_Move2
0000E824 4441                       		neg.w	d1
0000E826                            
0000E826                            Card_Move2:
0000E826 D368 0008                  		add.w	d1,obX(a0)	; change item's position
0000E82A 3028 0008                  		move.w	obX(a0),d0
0000E82E 6B00                       		bmi.s	locret_C412
0000E830 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000E834 6400                       		bcc.s	locret_C412	; if yes, branch
0000E836 6000 0000                  		bra.w	DisplaySprite
0000E83A                            ; ===========================================================================
0000E83A                            
0000E83A                            locret_C412:
0000E83A 4E75                       		rts	
0000E83C                            ; ===========================================================================
0000E83C                            
0000E83C                            Card_ChangeArt:
0000E83C 0C28 0004 0024             		cmpi.b	#4,obRoutine(a0)
0000E842 6600                       		bne.s	Card_Delete
0000E844 7000                       		moveq	#plcid_Explode,d0
0000E846 4EB9 0000 173A             		jsr	(AddPLC).l	; load explosion patterns
0000E84C 7000                       		moveq	#0,d0
0000E84E 1038 FE10                  		move.b	(v_zone).w,d0
0000E852 0640 0000                  		addi.w	#plcid_GHZAnimals,d0
0000E856 4EB9 0000 173A             		jsr	(AddPLC).l	; load animal patterns
0000E85C                            
0000E85C                            Card_Delete:
0000E85C 6000 0000                  		bra.w	DeleteObject
0000E860                            ; ===========================================================================
0000E860 00D0                       Card_ItemData:	dc.w $D0	; y-axis position
0000E862 0200                       		dc.b 2,	0	; routine number, frame	number (changes)
0000E864 00E4                       		dc.w $E4
0000E866 0206                       		dc.b 2,	6
0000E868 00EA                       		dc.w $EA
0000E86A 0207                       		dc.b 2,	7
0000E86C 00E0                       		dc.w $E0
0000E86E 020A                       		dc.b 2,	$A
0000E870                            ; ---------------------------------------------------------------------------
0000E870                            ; Title	card configuration data
0000E870                            ; Format:
0000E870                            ; 4 bytes per item (YYYY XXXX)
0000E870                            ; 4 items per level (GREEN HILL, ZONE, ACT X, oval)
0000E870                            ; ---------------------------------------------------------------------------
0000E870 0000 0120 FEFC 013C 0414+  Card_ConData:	dc.w 0,	$120, $FEFC, $13C, $414, $154, $214, $154 ; GHZ
0000E880 0000 0120 FEF4 0134 040C+  		dc.w 0,	$120, $FEF4, $134, $40C, $14C, $20C, $14C ; LZ
0000E890 0000 0120 FEE0 0120 03F8+  		dc.w 0,	$120, $FEE0, $120, $3F8, $138, $1F8, $138 ; MZ
0000E8A0 0000 0120 FEFC 013C 0414+  		dc.w 0,	$120, $FEFC, $13C, $414, $154, $214, $154 ; SLZ
0000E8B0 0000 0120 FF04 0144 041C+  		dc.w 0,	$120, $FF04, $144, $41C, $15C, $21C, $15C ; SYZ
0000E8C0 0000 0120 FF04 0144 041C+  		dc.w 0,	$120, $FF04, $144, $41C, $15C, $21C, $15C ; SBZ
0000E8D0 0000 0120 FEE4 0124 03EC+  		dc.w 0,	$120, $FEE4, $124, $3EC, $3EC, $1EC, $12C ; FZ
0000E8E0                            ; ===========================================================================
0000E8E0                            ; ===========================================================================
0000E8E0                            		include	"_incObj\39 Game Over.asm"
0000E8E0                            ; ---------------------------------------------------------------------------
0000E8E0                            ; Object 39 - "GAME OVER" and "TIME OVER"
0000E8E0                            ; ---------------------------------------------------------------------------
0000E8E0                            
0000E8E0                            GameOverCard:
0000E8E0 7000                       		moveq	#0,d0
0000E8E2 1028 0024                  		move.b	obRoutine(a0),d0
0000E8E6 323B 0000                  		move.w	Over_Index(pc,d0.w),d1
0000E8EA 4EFB 1000                  		jmp	Over_Index(pc,d1.w)
0000E8EE                            ; ===========================================================================
0000E8EE 0000                       Over_Index:	dc.w Over_ChkPLC-Over_Index
0000E8F0 0000                       		dc.w Over_Move-Over_Index
0000E8F2 0000                       		dc.w Over_Wait-Over_Index
0000E8F4                            ; ===========================================================================
0000E8F4                            
0000E8F4                            Over_ChkPLC:	; Routine 0
0000E8F4 4AB8 F680                  		tst.l	(v_plc_buffer).w ; are the pattern load cues empty?
0000E8F8 6700                       		beq.s	Over_Main	; if yes, branch
0000E8FA 4E75                       		rts	
0000E8FC                            ; ===========================================================================
0000E8FC                            
0000E8FC                            Over_Main:
0000E8FC 5428 0024                  		addq.b	#2,obRoutine(a0)
0000E900 317C 0050 0008             		move.w	#$50,obX(a0)	; set x-position
0000E906 0828 0000 001A             		btst	#0,obFrame(a0)	; is the object	"OVER"?
0000E90C 6700                       		beq.s	Over_1stWord	; if not, branch
0000E90E 317C 01F0 0008             		move.w	#$1F0,obX(a0)	; set x-position for "OVER"
0000E914                            
0000E914                            	Over_1stWord:
0000E914 317C 00F0 000A             		move.w	#$F0,obScreenY(a0)
0000E91A 217C 0000 0000 0004        		move.l	#Map_Over,obMap(a0)
0000E922 317C 855E 0002             		move.w	#$855E,obGfx(a0)
0000E928 117C 0000 0001             		move.b	#0,obRender(a0)
0000E92E 317C 0000 0018             		move.w	#0,obPriority(a0)
0000E934                            
0000E934                            Over_Move:	; Routine 2
0000E934 7210                       		moveq	#$10,d1		; set horizontal speed
0000E936 0C68 0120 0008             		cmpi.w	#$120,obX(a0)	; has item reached its target position?
0000E93C 6700                       		beq.s	Over_SetWait	; if yes, branch
0000E93E 6500                       		bcs.s	Over_UpdatePos
0000E940 4441                       		neg.w	d1
0000E942                            
0000E942                            	Over_UpdatePos:
0000E942 D368 0008                  		add.w	d1,obX(a0)	; change item's position
0000E946 6000 0000                  		bra.w	DisplaySprite
0000E94A                            ; ===========================================================================
0000E94A                            
0000E94A                            Over_SetWait:
0000E94A 317C 02D0 001E             		move.w	#720,obTimeFrame(a0) ; set time delay to 12 seconds
0000E950 5428 0024                  		addq.b	#2,obRoutine(a0)
0000E954 4E75                       		rts	
0000E956                            ; ===========================================================================
0000E956                            
0000E956                            Over_Wait:	; Routine 4
0000E956 1038 F605                  		move.b	(v_jpadpress1).w,d0
0000E95A 0200 0070                  		andi.b	#btnABC,d0	; is button A, B or C pressed?
0000E95E 6600                       		bne.s	Over_ChgMode	; if yes, branch
0000E960 0828 0000 001A             		btst	#0,obFrame(a0)
0000E966 6600                       		bne.s	Over_Display
0000E968 4A68 001E                  		tst.w	obTimeFrame(a0)	; has time delay reached zero?
0000E96C 6700                       		beq.s	Over_ChgMode	; if yes, branch
0000E96E 5368 001E                  		subq.w	#1,obTimeFrame(a0) ; subtract 1 from time delay
0000E972 6000 0000                  		bra.w	DisplaySprite
0000E976                            ; ===========================================================================
0000E976                            
0000E976                            Over_ChgMode:
0000E976 4A38 FE1A                  		tst.b	(f_timeover).w	; is time over flag set?
0000E97A 6600                       		bne.s	Over_ResetLvl	; if yes, branch
0000E97C 11FC 0000 F600             		move.b	#id_Continue,(v_gamemode).w ; set mode to $14 (continue screen)
0000E982 4A38 FE18                  		tst.b	(v_continues).w	; do you have any continues?
0000E986 6600                       		bne.s	Over_Display	; if yes, branch
0000E988 11FC 0000 F600             		move.b	#id_Sega,(v_gamemode).w ; set mode to 0 (Sega screen)
0000E98E 6000                       		bra.s	Over_Display
0000E990                            ; ===========================================================================
0000E990                            
0000E990                            Over_ResetLvl:
0000E990 42B8 FE38                  			clr.l	(v_lamp_time).w
0000E994 31FC 0001 FE02             		move.w	#1,(f_restart).w ; restart level
0000E99A                            
0000E99A                            Over_Display:
0000E99A 6000 0000                  		bra.w	DisplaySprite
0000E99A 6000 0000                  		bra.w	DisplaySprite
0000E99E                            		include	"_incObj\3A Got Through Card.asm"
0000E99E                            ; ---------------------------------------------------------------------------
0000E99E                            ; Object 3A - "SONIC GOT THROUGH" title	card
0000E99E                            ; ---------------------------------------------------------------------------
0000E99E                            
0000E99E                            GotThroughCard:
0000E99E 7000                       		moveq	#0,d0
0000E9A0 1028 0024                  		move.b	obRoutine(a0),d0
0000E9A4 323B 0000                  		move.w	Got_Index(pc,d0.w),d1
0000E9A8 4EFB 1000                  		jmp	Got_Index(pc,d1.w)
0000E9AC                            ; ===========================================================================
0000E9AC 0000                       Got_Index:	dc.w Got_ChkPLC-Got_Index
0000E9AE 0000                       		dc.w Got_Move-Got_Index
0000E9B0 0000                       		dc.w Got_Wait-Got_Index
0000E9B2 0000                       		dc.w Got_TimeBonus-Got_Index
0000E9B4 0000                       		dc.w Got_Wait-Got_Index
0000E9B6 0000                       		dc.w Got_NextLevel-Got_Index
0000E9B8 0000                       		dc.w Got_Wait-Got_Index
0000E9BA 0000                       		dc.w Got_Move2-Got_Index
0000E9BC 0000                       		dc.w loc_C766-Got_Index
0000E9BE                            
0000E9BE =00000030                  got_mainX:	equ $30		; position for card to display on
0000E9BE =00000032                  got_finalX:	equ $32		; position for card to finish on
0000E9BE                            ; ===========================================================================
0000E9BE                            
0000E9BE                            Got_ChkPLC:	; Routine 0
0000E9BE 4AB8 F680                  		tst.l	(v_plc_buffer).w ; are the pattern load cues empty?
0000E9C2 6700                       		beq.s	Got_Main	; if yes, branch
0000E9C4 4E75                       		rts	
0000E9C6                            ; ===========================================================================
0000E9C6                            
0000E9C6                            Got_Main:
0000E9C6 2248                       		movea.l	a0,a1
0000E9C8 45F9 0000 0000             		lea	(Got_Config).l,a2
0000E9CE 7206                       		moveq	#6,d1
0000E9D0                            
0000E9D0                            Got_Loop:
0000E9D0 12BC 0000                  		move.b	#id_GotThroughCard,0(a1)
0000E9D4 3352 0008                  		move.w	(a2),obX(a1)	; load start x-position
0000E9D8 335A 0032                  		move.w	(a2)+,got_finalX(a1) ; load finish x-position (same as start)
0000E9DC 335A 0030                  		move.w	(a2)+,got_mainX(a1) ; load main x-position
0000E9E0 335A 000A                  		move.w	(a2)+,obScreenY(a1) ; load y-position
0000E9E4 135A 0024                  		move.b	(a2)+,obRoutine(a1)
0000E9E8 101A                       		move.b	(a2)+,d0
0000E9EA 0C00 0006                  		cmpi.b	#6,d0
0000E9EE 6600                       		bne.s	loc_C5CA
0000E9F0 D038 FE11                  		add.b	(v_act).w,d0	; add act number to frame number
0000E9F4                            
0000E9F4                            	loc_C5CA:
0000E9F4 1340 001A                  		move.b	d0,obFrame(a1)
0000E9F8 237C 0000 0000 0004        		move.l	#Map_Got,obMap(a1)
0000EA00 337C 8580 0002             		move.w	#$8580,obGfx(a1)
0000EA06 137C 0000 0001             		move.b	#0,obRender(a1)
0000EA0C 43E9 0040                  		lea	$40(a1),a1
0000EA10 51C9 FFBE                  		dbf	d1,Got_Loop	; repeat 6 times
0000EA14                            
0000EA14                            Got_Move:	; Routine 2
0000EA14 7210                       		moveq	#$10,d1		; set horizontal speed
0000EA16 3028 0030                  		move.w	got_mainX(a0),d0
0000EA1A B068 0008                  		cmp.w	obX(a0),d0	; has item reached its target position?
0000EA1E 6700                       		beq.s	loc_C61A	; if yes, branch
0000EA20 6C00                       		bge.s	Got_ChgPos
0000EA22 4441                       		neg.w	d1
0000EA24                            
0000EA24                            	Got_ChgPos:
0000EA24 D368 0008                  		add.w	d1,obX(a0)	; change item's position
0000EA28                            
0000EA28                            	loc_C5FE:
0000EA28 3028 0008                  		move.w	obX(a0),d0
0000EA2C 6B00                       		bmi.s	locret_C60E
0000EA2E 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000EA32 6400                       		bcc.s	locret_C60E	; if yes, branch
0000EA34 6000 0000                  		bra.w	DisplaySprite
0000EA38                            ; ===========================================================================
0000EA38                            
0000EA38                            locret_C60E:
0000EA38 4E75                       		rts	
0000EA3A                            ; ===========================================================================
0000EA3A                            
0000EA3A                            loc_C610:
0000EA3A 117C 000E 0024             		move.b	#$E,obRoutine(a0)
0000EA40 6000 0000                  		bra.w	Got_Move2
0000EA44                            ; ===========================================================================
0000EA44                            
0000EA44                            loc_C61A:
0000EA44 0C38 000E D724             		cmpi.b	#$E,($FFFFD724).w
0000EA4A 67EE                       		beq.s	loc_C610
0000EA4C 0C28 0004 001A             		cmpi.b	#4,obFrame(a0)
0000EA52 66D4                       		bne.s	loc_C5FE
0000EA54 5428 0024                  		addq.b	#2,obRoutine(a0)
0000EA58 317C 00B4 001E             		move.w	#180,obTimeFrame(a0) ; set time delay to 3 seconds
0000EA5E                            		;move.b	#id_SSRChaos,(v_objspace+$800).w ; load chaos emerald object
0000EA5E                            
0000EA5E                            Got_Wait:	; Routine 4, 8, $C
0000EA5E 5368 001E                  		subq.w	#1,obTimeFrame(a0) ; subtract 1 from time delay
0000EA62 6600                       		bne.s	Got_Display
0000EA64 5428 0024                  		addq.b	#2,obRoutine(a0)
0000EA68                            
0000EA68                            Got_Display:
0000EA68 6000 0000                  		bra.w	DisplaySprite
0000EA6C                            ; ===========================================================================
0000EA6C                            
0000EA6C                            Got_TimeBonus:	; Routine 6
0000EA6C 6100 0000                  		bsr.w	DisplaySprite
0000EA70 11FC 0001 F7D6             		move.b	#1,(f_endactbonus).w ; set time/ring bonus update flag
0000EA76 7000                       		moveq	#0,d0
0000EA78 4A78 F7D2                  		tst.w	(v_timebonus).w	; is time bonus	= zero?
0000EA7C 6700                       		beq.s	Got_RingBonus	; if yes, branch
0000EA7E 0640 000A                  		addi.w	#10,d0		; add 10 to score
0000EA82 0478 000A F7D2             		subi.w	#10,(v_timebonus).w ; subtract 10 from time bonus
0000EA88                            
0000EA88                            Got_RingBonus:
0000EA88 4A78 F7D4                  		tst.w	(v_ringbonus).w	; is ring bonus	= zero?
0000EA8C 6700                       		beq.s	Got_ChkBonus	; if yes, branch
0000EA8E 0640 000A                  		addi.w	#10,d0		; add 10 to score
0000EA92 0478 000A F7D4             		subi.w	#10,(v_ringbonus).w ; subtract 10 from ring bonus
0000EA98                            
0000EA98                            Got_ChkBonus:
0000EA98 4A40                       		tst.w	d0		; is there any bonus?
0000EA9A 6600                       		bne.s	Got_AddBonus	; if yes, branch
0000EAA6 5428 0024                  		addq.b	#2,obRoutine(a0)
0000EAAA 0C78 0202 FE10             		cmpi.w	#(id_MZ<<8)+2,(v_zone).w
0000EAB0 6600                       		bne.s	Got_SetDelay
0000EAB2 5828 0024                  		addq.b	#4,obRoutine(a0)
0000EAB6                            
0000EAB6                            Got_SetDelay:
0000EAB6 317C 00B4 001E             		move.w	#180,obTimeFrame(a0) ; set time delay to 3 seconds
0000EABC                            
0000EABC                            locret_C692:
0000EABC 4E75                       		rts	
0000EABE                            ; ===========================================================================
0000EABE                            
0000EABE                            Got_AddBonus:
0000EABE 4EB9 0000 0000             		jsr	(AddPoints).l
0000EAC4 1038 FE0F                  		move.b	(v_vbla_byte).w,d0
0000EAC8 0200 0003                  		andi.b	#3,d0
0000EACC 66EE                       		bne.s	locret_C692
0000EAD8                            ; ===========================================================================
0000EAD8                            
0000EAD8                            Got_NextLevel:	; Routine $A
0000EAD8 11FC 0000 F5C2             		move.b  #0,($FFFFF5C2).w ; Clear victory animation flag
0000EADE 11FC 0000 F5C3             		move.b  #0,(f_emeraldm).w
0000EAE4 1038 FE10                  		move.b	(v_zone).w,d0
0000EAE8 0240 0007                  		andi.w	#7,d0
0000EAEC E748                       		lsl.w	#3,d0
0000EAEE 1238 FE11                  		move.b	(v_act).w,d1
0000EAF2 0241 0003                  		andi.w	#3,d1
0000EAF6 D241                       		add.w	d1,d1
0000EAF8 D041                       		add.w	d1,d0
0000EAFA 303B 0000                  		move.w	LevelOrder(pc,d0.w),d0 ; load level from level order array
0000EAFE 31C0 FE10                  		move.w	d0,(v_zone).w	; set level number
0000EB02 4A40                       		tst.w	d0
0000EB04 6600                       		bne.s	Got_ChkSS
0000EB06 11FC 0000 F600             		move.b	#id_Sega,(v_gamemode).w
0000EB0C 6000                       		bra.s	Got_Display2
0000EB0E                            ; ===========================================================================
0000EB0E                            
0000EB0E                            Got_ChkSS:	
0000EB0E 4238 FE30                  		clr.b	(v_lastlamp).w	; clear	lamppost counter
0000EB12                            		;tst.b	(f_emeraldm).w
0000EB12                            		;beq.s	VBla_08A
0000EB12                            		;addq.b	#1,(v_emeralds).w ; add 1 to number of emeralds
0000EB12                            		;sfx		bgm_Emerald,1,0,0 ;	play emerald music
0000EB12                            		;bra.s	Got_Display2
0000EB12 11FC 0000 F5C3             		move.b  #0,(f_emeraldm).w
0000EB18                            		
0000EB18                            ; ===========================================================================
0000EB18                            
0000EB18                            VBla_08A:
0000EB18 31FC 0001 FE02             		move.w	#1,(f_restart).w ; restart level
0000EB1E                            
0000EB1E                            Got_Display2:
0000EB1E 6000 0000                  		bra.w	DisplaySprite
0000EB22                            ; ===========================================================================
0000EB22                            ; ---------------------------------------------------------------------------
0000EB22                            ; Level	order array
0000EB22                            ; ---------------------------------------------------------------------------
0000EB22                            LevelOrder:
0000EB22                            		; Green Hill Zone
0000EB22 0001                       		dc.b id_GHZ, 1	; Act 2
0000EB24 0002                       		dc.b id_GHZ, 2	; Act 2
0000EB26 0200                       		dc.b id_MZ, 0	; Act 3
0000EB28 0000                       		dc.b 0, 0
0000EB2A                            
0000EB2A                            		; Labyrinth Zone
0000EB2A 0101                       		dc.b id_LZ, 1	; Act 1
0000EB2C 0102                       		dc.b id_LZ, 2	; Act 2
0000EB2E 0000                       		dc.b id_GHZ, 0 	; Act 3
0000EB30 0502                       		dc.b id_SBZ, 2	; Scrap Brain Zone Act 3
0000EB32                            
0000EB32                            		; Marble Zone
0000EB32 0201                       		dc.b id_MZ, 1	; Act 1
0000EB34 0202                       		dc.b id_MZ, 2	; Act 2
0000EB36 0502                       		dc.b id_SBZ, 2	; Act 3
0000EB38 0000                       		dc.b 0, 0
0000EB3A                            
0000EB3A                            		; Star Light Zone
0000EB3A 0301                       		dc.b id_SLZ, 1	; Act 1
0000EB3C 0302                       		dc.b id_SLZ, 2	; Act 2
0000EB3E 0500                       		dc.b id_SBZ, 0	; Act 3
0000EB40 0000                       		dc.b 0, 0
0000EB42                            
0000EB42                            		; Spring Yard Zone
0000EB42 0502                       		dc.b id_SBZ, 2	; Act 1
0000EB44 0402                       		dc.b id_SYZ, 2	; Act 2
0000EB46 0200                       		dc.b id_MZ,	 0	; Act 3
0000EB48 0000                       		dc.b 0, 0
0000EB4A                            
0000EB4A                            		; Scrap Brain Zone
0000EB4A 0501                       		dc.b id_SBZ, 1	; Act 1
0000EB4C 0103                       		dc.b id_LZ, 3	; Act 2
0000EB4E 0000                       		dc.b 0, 0	; Final Zone
0000EB50 0000                       		dc.b 0, 0
0000EB52                            		even
0000EB52                            ; ===========================================================================
0000EB52                            
0000EB52                            Got_Move2:	; Routine $E
0000EB52 7220                       		moveq	#$20,d1		; set horizontal speed
0000EB54 3028 0032                  		move.w	got_finalX(a0),d0
0000EB58 B068 0008                  		cmp.w	obX(a0),d0	; has item reached its finish position?
0000EB5C 6700                       		beq.s	Got_SBZ2	; if yes, branch
0000EB5E 6C00                       		bge.s	Got_ChgPos2
0000EB60 4441                       		neg.w	d1
0000EB62                            
0000EB62                            	Got_ChgPos2:
0000EB62 D368 0008                  		add.w	d1,obX(a0)	; change item's position
0000EB66 3028 0008                  		move.w	obX(a0),d0
0000EB6A 6B00                       		bmi.s	locret_C748
0000EB6C 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000EB70 6400                       		bcc.s	locret_C748	; if yes, branch
0000EB72 6000 0000                  		bra.w	DisplaySprite
0000EB76                            ; ===========================================================================
0000EB76                            
0000EB76                            locret_C748:
0000EB76 4E75                       		rts	
0000EB78                            ; ===========================================================================
0000EB78                            
0000EB78                            Got_SBZ2:
0000EB78 0C28 0004 001A             		cmpi.b	#4,obFrame(a0)
0000EB7E 6600 0000                  		bne.w	DeleteObject
0000EB82 5428 0024                  		addq.b	#2,obRoutine(a0)
0000EB86 4238 F7CC                  		clr.b	(f_lockctrl).w	; unlock controls
0000EB8A 11FC 0000 F5C2             		move.b  #0,($FFFFF5C2).w ; Clear victory animation flag
0000EB9A                            ; ===========================================================================
0000EB9A                            
0000EB9A                            loc_C766:	; Routine $10
0000EB9A 5478 F72A                  		addq.w	#2,(v_limitright2).w
0000EB9E 0C78 2100 F72A             		cmpi.w	#$2100,(v_limitright2).w
0000EBA4 6700 0000                  		beq.w	DeleteObject
0000EBA8 4E75                       		rts	
0000EBAA                            ; ===========================================================================
0000EBAA                            		;    x-start,	x-main,	y-main,
0000EBAA                            		;				routine, frame number
0000EBAA                            
0000EBAA 0004 0124 00BC             Got_Config:	dc.w 4,		$124,	$BC			; "SONIC HAS"
0000EBB0 0200                       		dc.b 				2,	0
0000EBB2                            
0000EBB2 FEE0 0120 00D0             		dc.w -$120,	$120,	$D0			; "PASSED"
0000EBB8 0201                       		dc.b 				2,	1
0000EBBA                            
0000EBBA 040C 014C 00D6             		dc.w $40C,	$14C,	$D6			; "ACT" 1/2/3
0000EBC0 0206                       		dc.b 				2,	6
0000EBC2                            
0000EBC2 0520 0120 0112             		dc.w $520,	$120,	$112			; score
0000EBC8 0202                       		dc.b 				2,	2
0000EBCA                            
0000EBCA 0540 0120 00F2             		dc.w $540,	$120,	$F2			; time bonus
0000EBD0 0203                       		dc.b 				2,	3
0000EBD2                            
0000EBD2 0560 0120 0102             		dc.w $560,	$120,	$102			; ring bonus
0000EBD8 0204                       		dc.b 				2,	4
0000EBDA                            
0000EBDA 020C 014C 00CC             		dc.w $20C,	$14C,	$CC			; oval
0000EBE0 0205                       		dc.b 				2,	5
0000EBE0 0205                       		dc.b 				2,	5
0000EBE2                            		include	"_incObj\7E Special Stage Results.asm"
0000EBE2                            ; ---------------------------------------------------------------------------
0000EBE2                            ; Object 7E - special stage results screen
0000EBE2                            ; ---------------------------------------------------------------------------
0000EBE2                            
0000EBE2                            SSResult:
0000EBE2 7000                       		moveq	#0,d0
0000EBE4 1028 0024                  		move.b	obRoutine(a0),d0
0000EBE8 323B 0000                  		move.w	SSR_Index(pc,d0.w),d1
0000EBEC 4EFB 1000                  		jmp	SSR_Index(pc,d1.w)
0000EBF0                            ; ===========================================================================
0000EBF0 0000                       SSR_Index:	dc.w SSR_ChkPLC-SSR_Index
0000EBF2 0000                       		dc.w SSR_Move-SSR_Index
0000EBF4 0000                       		dc.w SSR_Wait-SSR_Index
0000EBF6 0000                       		dc.w SSR_RingBonus-SSR_Index
0000EBF8 0000                       		dc.w SSR_Wait-SSR_Index
0000EBFA 0000                       		dc.w SSR_Exit-SSR_Index
0000EBFC 0000                       		dc.w SSR_Wait-SSR_Index
0000EBFE 0000                       		dc.w SSR_Continue-SSR_Index
0000EC00 0000                       		dc.w SSR_Wait-SSR_Index
0000EC02 0000                       		dc.w SSR_Exit-SSR_Index
0000EC04 0000                       		dc.w loc_C91A-SSR_Index
0000EC06                            
0000EC06 =00000030                  ssr_mainX:	equ $30		; position for card to display on
0000EC06                            ; ===========================================================================
0000EC06                            
0000EC06                            SSR_ChkPLC:	; Routine 0
0000EC06 4AB8 F680                  		tst.l	(v_plc_buffer).w ; are the pattern load cues empty?
0000EC0A 6700                       		beq.s	SSR_Main	; if yes, branch
0000EC0C 4E75                       		rts	
0000EC0E                            ; ===========================================================================
0000EC0E                            
0000EC0E                            SSR_Main:
0000EC0E 2248                       		movea.l	a0,a1
0000EC10 45F9 0000 0000             		lea	(SSR_Config).l,a2
0000EC16 7203                       		moveq	#3,d1
0000EC18 0C78 0032 FE20             		cmpi.w	#50,(v_rings).w	; do you have 50 or more rings?
0000EC1E 6500                       		bcs.s	SSR_Loop	; if no, branch
0000EC20 5241                       		addq.w	#1,d1		; if yes, add 1	to d1 (number of sprites)
0000EC22                            
0000EC22                            	SSR_Loop:
0000EC22 12BC 0000                  		move.b	#id_SSResult,0(a1)
0000EC26 335A 0008                  		move.w	(a2)+,obX(a1)	; load start x-position
0000EC2A 335A 0030                  		move.w	(a2)+,ssr_mainX(a1) ; load main x-position
0000EC2E 335A 000A                  		move.w	(a2)+,obScreenY(a1) ; load y-position
0000EC32 135A 0024                  		move.b	(a2)+,obRoutine(a1)
0000EC36 135A 001A                  		move.b	(a2)+,obFrame(a1)
0000EC3A 237C 0000 0000 0004        		move.l	#Map_SSR,obMap(a1)
0000EC42 337C 8580 0002             		move.w	#$8580,obGfx(a1)
0000EC48 137C 0000 0001             		move.b	#0,obRender(a1)
0000EC4E 43E9 0040                  		lea	$40(a1),a1
0000EC52 51C9 FFCE                  		dbf	d1,SSR_Loop	; repeat sequence 3 or 4 times
0000EC56                            
0000EC56 7007                       		moveq	#7,d0
0000EC58 1238 FE57                  		move.b	(v_emeralds).w,d1
0000EC5C 6700                       		beq.s	loc_C842
0000EC5E 7000                       		moveq	#0,d0
0000EC60 0C01 0006                  		cmpi.b	#6,d1		; do you have all chaos	emeralds?
0000EC64 6600                       		bne.s	loc_C842	; if not, branch
0000EC66 7008                       		moveq	#8,d0		; load "Sonic got them all" text
0000EC68 317C 0018 0008             		move.w	#$18,obX(a0)
0000EC6E 317C 0118 0030             		move.w	#$118,ssr_mainX(a0) ; change position of text
0000EC74                            
0000EC74                            loc_C842:
0000EC74 1140 001A                  		move.b	d0,obFrame(a0)
0000EC78                            
0000EC78                            SSR_Move:	; Routine 2
0000EC78 7210                       		moveq	#$10,d1		; set horizontal speed
0000EC7A 3028 0030                  		move.w	ssr_mainX(a0),d0
0000EC7E B068 0008                  		cmp.w	obX(a0),d0	; has item reached its target position?
0000EC82 6700                       		beq.s	loc_C86C	; if yes, branch
0000EC84 6C00                       		bge.s	SSR_ChgPos
0000EC86 4441                       		neg.w	d1
0000EC88                            
0000EC88                            SSR_ChgPos:
0000EC88 D368 0008                  		add.w	d1,obX(a0)	; change item's position
0000EC8C                            
0000EC8C                            loc_C85A:
0000EC8C 3028 0008                  		move.w	obX(a0),d0
0000EC90 6B00                       		bmi.s	locret_C86A
0000EC92 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000EC96 6400                       		bcc.s	locret_C86A	; if yes, branch
0000EC98 6000 0000                  		bra.w	DisplaySprite
0000EC9C                            ; ===========================================================================
0000EC9C                            
0000EC9C                            locret_C86A:
0000EC9C 4E75                       		rts	
0000EC9E                            ; ===========================================================================
0000EC9E                            
0000EC9E                            loc_C86C:
0000EC9E 0C28 0002 001A             		cmpi.b	#2,obFrame(a0)
0000ECA4 66E6                       		bne.s	loc_C85A
0000ECA6 5428 0024                  		addq.b	#2,obRoutine(a0)
0000ECAA 317C 00B4 001E             		move.w	#180,obTimeFrame(a0) ; set time delay to 3 seconds
0000ECB0 11FC 0000 D800             		move.b	#id_SSRChaos,(v_objspace+$800).w ; load chaos emerald object
0000ECB6                            
0000ECB6                            SSR_Wait:	; Routine 4, 8, $C, $10
0000ECB6 5368 001E                  		subq.w	#1,obTimeFrame(a0) ; subtract 1 from time delay
0000ECBA 6600                       		bne.s	SSR_Display
0000ECBC 5428 0024                  		addq.b	#2,obRoutine(a0)
0000ECC0                            
0000ECC0                            SSR_Display:
0000ECC0 6000 0000                  		bra.w	DisplaySprite
0000ECC4                            ; ===========================================================================
0000ECC4                            
0000ECC4                            SSR_RingBonus:	; Routine 6
0000ECC4 6100 0000                  		bsr.w	DisplaySprite
0000ECC8 11FC 0001 F7D6             		move.b	#1,(f_endactbonus).w ; set ring bonus update flag
0000ECCE 4A78 F7D4                  		tst.w	(v_ringbonus).w	; is ring bonus	= zero?
0000ECD2 6700                       		beq.s	loc_C8C4	; if yes, branch
0000ECD4 0478 000A F7D4             		subi.w	#10,(v_ringbonus).w ; subtract 10 from ring bonus
0000ECDA 700A                       		moveq	#10,d0		; add 10 to score
0000ECDC 4EB9 0000 0000             		jsr	(AddPoints).l
0000ECE2 1038 FE0F                  		move.b	(v_vbla_byte).w,d0
0000ECE6 0200 0003                  		andi.b	#3,d0
0000ECEA 6600                       		bne.s	locret_C8EA
0000ECF6                            ; ===========================================================================
0000ECF6                            
0000ECF6                            loc_C8C4:
0000ED00 5428 0024                  		addq.b	#2,obRoutine(a0)
0000ED04 317C 00B4 001E             		move.w	#180,obTimeFrame(a0) ; set time delay to 3 seconds
0000ED0A 0C78 0032 FE20             		cmpi.w	#50,(v_rings).w	; do you have at least 50 rings?
0000ED10 6500                       		bcs.s	locret_C8EA	; if not, branch
0000ED12 317C 003C 001E             		move.w	#60,obTimeFrame(a0) ; set time delay to 1 second
0000ED18 5828 0024                  		addq.b	#4,obRoutine(a0) ; goto "SSR_Continue" routine
0000ED1C                            
0000ED1C                            locret_C8EA:
0000ED1C 4E75                       		rts	
0000ED1E                            ; ===========================================================================
0000ED1E                            
0000ED1E                            SSR_Exit:	; Routine $A, $12
0000ED1E 31FC 0001 FE02             		move.w	#1,(f_restart).w ; restart level
0000ED24 6000 0000                  		bra.w	DisplaySprite
0000ED28                            ; ===========================================================================
0000ED28                            
0000ED28                            SSR_Continue:	; Routine $E
0000ED28 11FC 0004 D6DA             		move.b	#4,(v_objspace+$6C0+obFrame).w
0000ED2E 11FC 0014 D6E4             		move.b	#$14,(v_objspace+$6C0+obRoutine).w
0000ED3E 5428 0024                  		addq.b	#2,obRoutine(a0)
0000ED42 317C 0168 001E             		move.w	#360,obTimeFrame(a0) ; set time delay to 6 seconds
0000ED48 6000 0000                  		bra.w	DisplaySprite
0000ED4C                            ; ===========================================================================
0000ED4C                            
0000ED4C                            loc_C91A:	; Routine $14
0000ED4C 1038 FE0F                  		move.b	(v_vbla_byte).w,d0
0000ED50 0200 000F                  		andi.b	#$F,d0
0000ED54 6600                       		bne.s	SSR_Display2
0000ED56 0868 0000 001A             		bchg	#0,obFrame(a0)
0000ED5C                            
0000ED5C                            SSR_Display2:
0000ED5C 6000 0000                  		bra.w	DisplaySprite
0000ED60                            ; ===========================================================================
0000ED60 0020 0120 00C4             SSR_Config:	dc.w $20, $120,	$C4	; start	x-pos, main x-pos, y-pos
0000ED66 0200                       		dc.b 2,	0		; rountine number, frame number
0000ED68 0320 0120 0118             		dc.w $320, $120, $118
0000ED6E 0201                       		dc.b 2,	1
0000ED70 0360 0120 0128             		dc.w $360, $120, $128
0000ED76 0202                       		dc.b 2,	2
0000ED78 01EC 011C 00C4             		dc.w $1EC, $11C, $C4
0000ED7E 0203                       		dc.b 2,	3
0000ED80 03A0 0120 0138             		dc.w $3A0, $120, $138
0000ED86 0206                       		dc.b 2,	6
0000ED86 0206                       		dc.b 2,	6
0000ED88                            		include	"_incObj\7F SS Result Chaos Emeralds.asm"
0000ED88                            ; ---------------------------------------------------------------------------
0000ED88                            ; Object 7F - chaos emeralds from the special stage results screen
0000ED88                            ; ---------------------------------------------------------------------------
0000ED88                            
0000ED88                            SSRChaos:
0000ED88 7000                       		moveq	#0,d0
0000ED8A 1028 0024                  		move.b	obRoutine(a0),d0
0000ED8E 323B 0000                  		move.w	SSRC_Index(pc,d0.w),d1
0000ED92 4EFB 1000                  		jmp	SSRC_Index(pc,d1.w)
0000ED96                            ; ===========================================================================
0000ED96 0000                       SSRC_Index:	dc.w SSRC_Main-SSRC_Index
0000ED98 0000                       		dc.w SSRC_Flash-SSRC_Index
0000ED9A                            
0000ED9A                            ; ---------------------------------------------------------------------------
0000ED9A                            ; X-axis positions for chaos emeralds
0000ED9A                            ; ---------------------------------------------------------------------------
0000ED9A 0110 0128 00F8 0140 00E0+  SSRC_PosData:	dc.w $110, $128, $F8, $140, $E0, $158
0000EDA6                            ; ===========================================================================
0000EDA6                            
0000EDA6                            SSRC_Main:	; Routine 0
0000EDA6 2248                       		movea.l	a0,a1
0000EDA8 45F9 0000 ED9A             		lea	(SSRC_PosData).l,a2
0000EDAE 7400                       		moveq	#0,d2
0000EDB0 7200                       		moveq	#0,d1
0000EDB2 1238 FE57                  		move.b	(v_emeralds).w,d1 ; d1 is number of emeralds
0000EDB6 5301                       		subq.b	#1,d1		; subtract 1 from d1
0000EDB8 6500 0000                  		bcs.w	DeleteObject	; if you have 0	emeralds, branch
0000EDBC                            
0000EDBC                            	SSRC_Loop:
0000EDBC 12BC 0000                  		move.b	#id_SSRChaos,0(a1)
0000EDC0 335A 0008                  		move.w	(a2)+,obX(a1)	; set x-position
0000EDC4 337C 00F0 000A             		move.w	#$F0,obScreenY(a1) ; set y-position
0000EDCA 47F8 FE58                  		lea	(v_emldlist).w,a3 ; check which emeralds you have
0000EDCE 1633 2000                  		move.b	(a3,d2.w),d3
0000EDD2 1343 001A                  		move.b	d3,obFrame(a1)
0000EDD6 1343 001C                  		move.b	d3,obAnim(a1)
0000EDDA 5202                       		addq.b	#1,d2
0000EDDC 5429 0024                  		addq.b	#2,obRoutine(a1)
0000EDE0 237C 0000 0000 0004        		move.l	#Map_SSRC,obMap(a1)
0000EDE8 337C 8541 0002             		move.w	#$8541,obGfx(a1)
0000EDEE 137C 0000 0001             		move.b	#0,obRender(a1)
0000EDF4 43E9 0040                  		lea	$40(a1),a1	; next object
0000EDF8 51C9 FFC2                  		dbf	d1,SSRC_Loop	; loop for d1 number of	emeralds
0000EDFC                            
0000EDFC                            SSRC_Flash:	; Routine 2
0000EDFC 1028 001A                  		move.b	obFrame(a0),d0
0000EE00 117C 0006 001A             		move.b	#6,obFrame(a0)	; load 6th frame (blank)
0000EE06 0C00 0006                  		cmpi.b	#6,d0
0000EE0A 6600                       		bne.s	SSRC_Display
0000EE0C 1168 001C 001A             		move.b	obAnim(a0),obFrame(a0) ; load visible frame
0000EE12                            
0000EE12                            	SSRC_Display:
0000EE12 6000 0000                  		bra.w	DisplaySprite
0000EE12 6000 0000                  		bra.w	DisplaySprite
0000EE16                            
0000EE16                            ; ---------------------------------------------------------------------------
0000EE16                            ; Sprite mappings - zone title cards
0000EE16                            ; ---------------------------------------------------------------------------
0000EE16 0000                       Map_Card:	dc.w M_Card_GHZ-Map_Card
0000EE18 0000                       		dc.w M_Card_LZ-Map_Card
0000EE1A 0000                       		dc.w M_Card_MZ-Map_Card
0000EE1C 0000                       		dc.w M_Card_SLZ-Map_Card
0000EE1E 0000                       		dc.w M_Card_SYZ-Map_Card
0000EE20 0000                       		dc.w M_Card_SBZ-Map_Card
0000EE22 0000                       		dc.w M_Card_Zone-Map_Card
0000EE24 0000                       		dc.w M_Card_Act1-Map_Card
0000EE26 0000                       		dc.w M_Card_Act2-Map_Card
0000EE28 0000                       		dc.w M_Card_Act3-Map_Card
0000EE2A 0000                       		dc.w M_Card_Oval-Map_Card
0000EE2C 0000                       		dc.w M_Card_FZ-Map_Card
0000EE2E 09                         M_Card_GHZ:	dc.b 9 			; GREEN HILL
0000EE2F F805 0018 B4               		dc.b $F8, 5, 0,	$18, $B4
0000EE34 F805 003A C4               		dc.b $F8, 5, 0,	$3A, $C4
0000EE39 F805 0010 D4               		dc.b $F8, 5, 0,	$10, $D4
0000EE3E F805 0010 E4               		dc.b $F8, 5, 0,	$10, $E4
0000EE43 F805 002E F4               		dc.b $F8, 5, 0,	$2E, $F4
0000EE48 F805 001C 14               		dc.b $F8, 5, 0,	$1C, $14
0000EE4D F801 0020 24               		dc.b $F8, 1, 0,	$20, $24
0000EE52 F805 0026 2C               		dc.b $F8, 5, 0,	$26, $2C
0000EE57 F805 0026 3C               		dc.b $F8, 5, 0,	$26, $3C
0000EE5C                            		even
0000EE5C 09                         M_Card_LZ:	dc.b 9			; LABYRINTH
0000EE5D F805 0026 BC               		dc.b $F8, 5, 0,	$26, $BC
0000EE62 F805 0000 CC               		dc.b $F8, 5, 0,	0, $CC
0000EE67 F805 0004 DC               		dc.b $F8, 5, 0,	4, $DC
0000EE6C F805 004A EC               		dc.b $F8, 5, 0,	$4A, $EC
0000EE71 F805 003A FC               		dc.b $F8, 5, 0,	$3A, $FC
0000EE76 F801 0020 0C               		dc.b $F8, 1, 0,	$20, $C
0000EE7B F805 002E 14               		dc.b $F8, 5, 0,	$2E, $14
0000EE80 F805 0042 24               		dc.b $F8, 5, 0,	$42, $24
0000EE85 F805 001C 34               		dc.b $F8, 5, 0,	$1C, $34
0000EE8A                            		even
0000EE8A 0B                         M_Card_MZ:	dc.b $B	;  MARBLE | SCRAP RUINS
0000EE8B F805 003E 80               		dc.b $F8, 5, 0, $3E, $80	; S
0000EE90 F805 0008 90               		dc.b $F8, 5, 0, 8, $90		; C
0000EE95 F805 003A A0               		dc.b $F8, 5, 0, $3A, $A0	; R
0000EE9A F805 0000 B0               		dc.b $F8, 5, 0, 0, $B0		; A
0000EE9F F805 0036 C0               		dc.b $F8, 5, 0, $36, $C0	; P
0000EEA4 F800 0056 D0               		dc.b $F8, 0, 0, $56, $D0	; Space
0000EEA9 F805 003A E0               		dc.b $F8, 5, 0, $3A, $E0	; R
0000EEAE F805 0046 F0               		dc.b $F8, 5, 0, $46, $F0	; U
0000EEB3 F801 0020 00               		dc.b $F8, 1, 0, $20, $0	; I
0000EEB8 F805 002E 08               		dc.b $F8, 5, 0, $2E, $8	; N
0000EEBD F805 003E 18               		dc.b $F8, 5, 0, $3E, $18	; S
0000EEC2 09                         M_Card_SLZ:	dc.b 9			; STAR LIGHT
0000EEC3 F805 003E B4               		dc.b $F8, 5, 0,	$3E, $B4
0000EEC8 F805 0042 C4               		dc.b $F8, 5, 0,	$42, $C4
0000EECD F805 0000 D4               		dc.b $F8, 5, 0,	0, $D4
0000EED2 F805 003A E4               		dc.b $F8, 5, 0,	$3A, $E4
0000EED7 F805 0026 04               		dc.b $F8, 5, 0,	$26, 4
0000EEDC F801 0020 14               		dc.b $F8, 1, 0,	$20, $14
0000EEE1 F805 0018 1C               		dc.b $F8, 5, 0,	$18, $1C
0000EEE6 F805 001C 2C               		dc.b $F8, 5, 0,	$1C, $2C
0000EEEB F805 0042 3C               		dc.b $F8, 5, 0,	$42, $3C
0000EEF0                            		even
0000EEF0 0A                         M_Card_SYZ:	dc.b $A			; SPRING YARD
0000EEF1 F805 003E AC               		dc.b $F8, 5, 0,	$3E, $AC
0000EEF6 F805 0036 BC               		dc.b $F8, 5, 0,	$36, $BC
0000EEFB F805 003A CC               		dc.b $F8, 5, 0,	$3A, $CC
0000EF00 F801 0020 DC               		dc.b $F8, 1, 0,	$20, $DC
0000EF05 F805 002E E4               		dc.b $F8, 5, 0,	$2E, $E4
0000EF0A F805 0018 F4               		dc.b $F8, 5, 0,	$18, $F4
0000EF0F F805 004A 14               		dc.b $F8, 5, 0,	$4A, $14
0000EF14 F805 0000 24               		dc.b $F8, 5, 0,	0, $24
0000EF19 F805 003A 34               		dc.b $F8, 5, 0,	$3A, $34
0000EF1E F805 000C 44               		dc.b $F8, 5, 0,	$C, $44
0000EF24 00                         		even
0000EF24 0A                         M_Card_SBZ:	dc.b $A			; SCRAP BRAIN
0000EF25 F805 003E AC               		dc.b $F8, 5, 0,	$3E, $AC
0000EF2A F805 0008 BC               		dc.b $F8, 5, 0,	8, $BC
0000EF2F F805 003A CC               		dc.b $F8, 5, 0,	$3A, $CC
0000EF34 F805 0000 DC               		dc.b $F8, 5, 0,	0, $DC
0000EF39 F805 0036 EC               		dc.b $F8, 5, 0,	$36, $EC
0000EF3E F805 0004 0C               		dc.b $F8, 5, 0,	4, $C
0000EF43 F805 003A 1C               		dc.b $F8, 5, 0,	$3A, $1C
0000EF48 F805 0000 2C               		dc.b $F8, 5, 0,	0, $2C
0000EF4D F801 0020 3C               		dc.b $F8, 1, 0,	$20, $3C
0000EF52 F805 002E 44               		dc.b $F8, 5, 0,	$2E, $44
0000EF58 00                         		even
0000EF58 04                         M_Card_Zone:	dc.b 4			; ZONE
0000EF59 F805 004E E0               		dc.b $F8, 5, 0,	$4E, $E0
0000EF5E F805 0032 F0               		dc.b $F8, 5, 0,	$32, $F0
0000EF63 F805 002E 00               		dc.b $F8, 5, 0,	$2E, 0
0000EF68 F805 0010 10               		dc.b $F8, 5, 0,	$10, $10
0000EF6E 00                         		even
0000EF6E 02                         M_Card_Act1:	dc.b 2			; ACT 1
0000EF6F 040C 0053 EC               		dc.b 4,	$C, 0, $53, $EC
0000EF74 F402 0057 0C               		dc.b $F4, 2, 0,	$57, $C
0000EF79 02                         M_Card_Act2:	dc.b 2			; ACT 2
0000EF7A 040C 0053 EC               		dc.b 4,	$C, 0, $53, $EC
0000EF7F F406 005A 08               		dc.b $F4, 6, 0,	$5A, 8
0000EF84 02                         M_Card_Act3:	dc.b 2			; ACT 3
0000EF85 040C 0053 EC               		dc.b 4,	$C, 0, $53, $EC
0000EF8A F406 0060 08               		dc.b $F4, 6, 0,	$60, 8
0000EF8F 0D                         M_Card_Oval:	dc.b $D			; Oval
0000EF90 E40C 0070 F4               		dc.b $E4, $C, 0, $70, $F4
0000EF95 E402 0074 14               		dc.b $E4, 2, 0,	$74, $14
0000EF9A EC04 0077 EC               		dc.b $EC, 4, 0,	$77, $EC
0000EF9F F405 0079 E4               		dc.b $F4, 5, 0,	$79, $E4
0000EFA4 140C 1870 EC               		dc.b $14, $C, $18, $70,	$EC
0000EFA9 0402 1874 E4               		dc.b 4,	2, $18,	$74, $E4
0000EFAE 0C04 1877 04               		dc.b $C, 4, $18, $77, 4
0000EFB3 FC05 1879 0C               		dc.b $FC, 5, $18, $79, $C
0000EFB8 EC08 007D FC               		dc.b $EC, 8, 0,	$7D, $FC
0000EFBD F40C 007C F4               		dc.b $F4, $C, 0, $7C, $F4
0000EFC2 FC08 007C F4               		dc.b $FC, 8, 0,	$7C, $F4
0000EFC7 040C 007C EC               		dc.b 4,	$C, 0, $7C, $EC
0000EFCC 0C08 007C EC               		dc.b $C, 8, 0, $7C, $EC
0000EFD2 00                         		even
0000EFD2 05                         M_Card_FZ:	dc.b 5			; FINAL
0000EFD3 F805 0014 DC               		dc.b $F8, 5, 0,	$14, $DC
0000EFD8 F801 0020 EC               		dc.b $F8, 1, 0,	$20, $EC
0000EFDD F805 002E F4               		dc.b $F8, 5, 0,	$2E, $F4
0000EFE2 F805 0000 04               		dc.b $F8, 5, 0,	0, 4
0000EFE7 F805 0026 14               		dc.b $F8, 5, 0,	$26, $14
0000EFEC                            		even
0000EFEC                            
0000EFEC                            Map_Over:	include	"_maps\Game Over.asm"
0000EFEC                            ; ---------------------------------------------------------------------------
0000EFEC                            ; Sprite mappings - "GAME OVER"	and "TIME OVER"
0000EFEC                            ; ---------------------------------------------------------------------------
0000EFEC                            Map_Over_internal:
0000EFEC 0000                       		dc.w byte_CBAC-Map_Over_internal
0000EFEE 0000                       		dc.w byte_CBB7-Map_Over_internal
0000EFF0 0000                       		dc.w byte_CBC2-Map_Over_internal
0000EFF2 0000                       		dc.w byte_CBCD-Map_Over_internal
0000EFF4 02                         byte_CBAC:	dc.b 2			; GAME
0000EFF5 F80D 0000 B8               		dc.b $F8, $D, 0, 0, $B8
0000EFFA F80D 0008 D8               		dc.b $F8, $D, 0, 8, $D8
0000EFFF 02                         byte_CBB7:	dc.b 2			; OVER
0000F000 F80D 0014 08               		dc.b $F8, $D, 0, $14, 8
0000F005 F80D 000C 28               		dc.b $F8, $D, 0, $C, $28
0000F00A 02                         byte_CBC2:	dc.b 2			; TIME
0000F00B F809 001C C4               		dc.b $F8, 9, 0,	$1C, $C4
0000F010 F80D 0008 DC               		dc.b $F8, $D, 0, 8, $DC
0000F015 02                         byte_CBCD:	dc.b 2			; OVER
0000F016 F80D 0014 0C               		dc.b $F8, $D, 0, $14, $C
0000F01B F80D 000C 2C               		dc.b $F8, $D, 0, $C, $2C
0000F020                            		even
0000F020                            		even
0000F020                            
0000F020                            ; ---------------------------------------------------------------------------
0000F020                            ; Sprite mappings - "SONIC HAS PASSED" title card
0000F020                            ; ---------------------------------------------------------------------------
0000F020 0000                       Map_Got:	dc.w M_Got_SonicHas-Map_Got
0000F022 0000                       		dc.w M_Got_Passed-Map_Got
0000F024 0000                       		dc.w M_Got_Score-Map_Got
0000F026 0000                       		dc.w M_Got_TBonus-Map_Got
0000F028 0000                       		dc.w M_Got_RBonus-Map_Got
0000F02A FF6F                       		dc.w M_Card_Oval-Map_Got
0000F02C FF4E                       		dc.w M_Card_Act1-Map_Got
0000F02E FF59                       		dc.w M_Card_Act2-Map_Got
0000F030 FF64                       		dc.w M_Card_Act3-Map_Got
0000F032 08                         M_Got_SonicHas:	dc.b 8			; SONIC HAS
0000F033 F805 003E B8               		dc.b $F8, 5, 0,	$3E, $B8
0000F038 F805 0032 C8               		dc.b $F8, 5, 0,	$32, $C8
0000F03D F805 002E D8               		dc.b $F8, 5, 0,	$2E, $D8
0000F042 F801 0020 E8               		dc.b $F8, 1, 0,	$20, $E8
0000F047 F805 0008 F0               		dc.b $F8, 5, 0,	8, $F0
0000F04C F805 001C 10               		dc.b $F8, 5, 0,	$1C, $10
0000F051 F805 0000 20               		dc.b $F8, 5, 0,	0, $20
0000F056 F805 003E 30               		dc.b $F8, 5, 0,	$3E, $30
0000F05B 06                         M_Got_Passed:	dc.b 6			; PASSED
0000F05C F805 0036 D0               		dc.b $F8, 5, 0,	$36, $D0
0000F061 F805 0000 E0               		dc.b $F8, 5, 0,	0, $E0
0000F066 F805 003E F0               		dc.b $F8, 5, 0,	$3E, $F0
0000F06B F805 003E 00               		dc.b $F8, 5, 0,	$3E, 0
0000F070 F805 0010 10               		dc.b $F8, 5, 0,	$10, $10
0000F075 F805 000C 20               		dc.b $F8, 5, 0,	$C, $20
0000F07A 06                         M_Got_Score:	dc.b 6			; SCORE
0000F07B F80D 014A B0               		dc.b $F8, $D, 1, $4A, $B0
0000F080 F801 0162 D0               		dc.b $F8, 1, 1,	$62, $D0
0000F085 F809 0164 18               		dc.b $F8, 9, 1,	$64, $18
0000F08A F80D 016A 30               		dc.b $F8, $D, 1, $6A, $30
0000F08F F704 006E CD               		dc.b $F7, 4, 0,	$6E, $CD
0000F094 FF04 186E CD               		dc.b $FF, 4, $18, $6E, $CD
0000F099 07                         M_Got_TBonus:	dc.b 7			; TIME BONUS
0000F09A F80D 015A B0               		dc.b $F8, $D, 1, $5A, $B0
0000F09F F80D 0066 D9               		dc.b $F8, $D, 0, $66, $D9
0000F0A4 F801 014A F9               		dc.b $F8, 1, 1,	$4A, $F9
0000F0A9 F704 006E F6               		dc.b $F7, 4, 0,	$6E, $F6
0000F0AE FF04 186E F6               		dc.b $FF, 4, $18, $6E, $F6
0000F0B3 F80D FFF0 28               		dc.b $F8, $D, $FF, $F0,	$28
0000F0B8 F801 0170 48               		dc.b $F8, 1, 1,	$70, $48
0000F0BD 07                         M_Got_RBonus:	dc.b 7			; RING BONUS
0000F0BE F80D 0152 B0               		dc.b $F8, $D, 1, $52, $B0
0000F0C3 F80D 0066 D9               		dc.b $F8, $D, 0, $66, $D9
0000F0C8 F801 014A F9               		dc.b $F8, 1, 1,	$4A, $F9
0000F0CD F704 006E F6               		dc.b $F7, 4, 0,	$6E, $F6
0000F0D2 FF04 186E F6               		dc.b $FF, 4, $18, $6E, $F6
0000F0D7 F80D FFF8 28               		dc.b $F8, $D, $FF, $F8,	$28
0000F0DC F801 0170 48               		dc.b $F8, 1, 1,	$70, $48
0000F0E2 00                         		even
0000F0E2                            ; ---------------------------------------------------------------------------
0000F0E2                            ; Sprite mappings - special stage results screen
0000F0E2                            ; ---------------------------------------------------------------------------
0000F0E2 0000                       Map_SSR:	dc.w M_SSR_Chaos-Map_SSR
0000F0E4 0000                       		dc.w M_SSR_Score-Map_SSR
0000F0E6 0000                       		dc.w byte_CD0D-Map_SSR
0000F0E8 FEAD                       		dc.w M_Card_Oval-Map_SSR
0000F0EA 0000                       		dc.w byte_CD31-Map_SSR
0000F0EC 0000                       		dc.w byte_CD46-Map_SSR
0000F0EE 0000                       		dc.w byte_CD5B-Map_SSR
0000F0F0 0000                       		dc.w byte_CD6B-Map_SSR
0000F0F2 0000                       		dc.w byte_CDA8-Map_SSR
0000F0F4 0D                         M_SSR_Chaos:	dc.b $D			; "CHAOS EMERALDS"
0000F0F5 F805 0008 90               		dc.b $F8, 5, 0,	8, $90
0000F0FA F805 001C A0               		dc.b $F8, 5, 0,	$1C, $A0
0000F0FF F805 0000 B0               		dc.b $F8, 5, 0,	0, $B0
0000F104 F805 0032 C0               		dc.b $F8, 5, 0,	$32, $C0
0000F109 F805 003E D0               		dc.b $F8, 5, 0,	$3E, $D0
0000F10E F805 0010 F0               		dc.b $F8, 5, 0,	$10, $F0
0000F113 F805 002A 00               		dc.b $F8, 5, 0,	$2A, 0
0000F118 F805 0010 10               		dc.b $F8, 5, 0,	$10, $10
0000F11D F805 003A 20               		dc.b $F8, 5, 0,	$3A, $20
0000F122 F805 0000 30               		dc.b $F8, 5, 0,	0, $30
0000F127 F805 0026 40               		dc.b $F8, 5, 0,	$26, $40
0000F12C F805 000C 50               		dc.b $F8, 5, 0,	$C, $50
0000F131 F805 003E 60               		dc.b $F8, 5, 0,	$3E, $60
0000F136 06                         M_SSR_Score:	dc.b 6			; "SCORE"
0000F137 F80D 014A B0               		dc.b $F8, $D, 1, $4A, $B0
0000F13C F801 0162 D0               		dc.b $F8, 1, 1,	$62, $D0
0000F141 F809 0164 18               		dc.b $F8, 9, 1,	$64, $18
0000F146 F80D 016A 30               		dc.b $F8, $D, 1, $6A, $30
0000F14B F704 006E CD               		dc.b $F7, 4, 0,	$6E, $CD
0000F150 FF04 186E CD               		dc.b $FF, 4, $18, $6E, $CD
0000F155 07                         byte_CD0D:	dc.b 7
0000F156 F80D 0152 B0               		dc.b $F8, $D, 1, $52, $B0
0000F15B F80D 0066 D9               		dc.b $F8, $D, 0, $66, $D9
0000F160 F801 014A F9               		dc.b $F8, 1, 1,	$4A, $F9
0000F165 F704 006E F6               		dc.b $F7, 4, 0,	$6E, $F6
0000F16A FF04 186E F6               		dc.b $FF, 4, $18, $6E, $F6
0000F16F F80D FFF8 28               		dc.b $F8, $D, $FF, $F8,	$28
0000F174 F801 0170 48               		dc.b $F8, 1, 1,	$70, $48
0000F179 04                         byte_CD31:	dc.b 4
0000F17A F80D FFD1 B0               		dc.b $F8, $D, $FF, $D1,	$B0
0000F17F F80D FFD9 D0               		dc.b $F8, $D, $FF, $D9,	$D0
0000F184 F801 FFE1 F0               		dc.b $F8, 1, $FF, $E1, $F0
0000F189 F806 1FE3 40               		dc.b $F8, 6, $1F, $E3, $40
0000F18E 04                         byte_CD46:	dc.b 4
0000F18F F80D FFD1 B0               		dc.b $F8, $D, $FF, $D1,	$B0
0000F194 F80D FFD9 D0               		dc.b $F8, $D, $FF, $D9,	$D0
0000F199 F801 FFE1 F0               		dc.b $F8, 1, $FF, $E1, $F0
0000F19E F806 1FE9 40               		dc.b $F8, 6, $1F, $E9, $40
0000F1A3 03                         byte_CD5B:	dc.b 3
0000F1A4 F80D FFD1 B0               		dc.b $F8, $D, $FF, $D1,	$B0
0000F1A9 F80D FFD9 D0               		dc.b $F8, $D, $FF, $D9,	$D0
0000F1AE F801 FFE1 F0               		dc.b $F8, 1, $FF, $E1, $F0
0000F1B3 0C                         byte_CD6B:	dc.b $C			; "SPECIAL STAGE"
0000F1B4 F805 003E 9C               		dc.b $F8, 5, 0,	$3E, $9C
0000F1B9 F805 0036 AC               		dc.b $F8, 5, 0,	$36, $AC
0000F1BE F805 0010 BC               		dc.b $F8, 5, 0,	$10, $BC
0000F1C3 F805 0008 CC               		dc.b $F8, 5, 0,	8, $CC
0000F1C8 F801 0020 DC               		dc.b $F8, 1, 0,	$20, $DC
0000F1CD F805 0000 E4               		dc.b $F8, 5, 0,	0, $E4
0000F1D2 F805 0026 F4               		dc.b $F8, 5, 0,	$26, $F4
0000F1D7 F805 003E 14               		dc.b $F8, 5, 0,	$3E, $14
0000F1DC F805 0042 24               		dc.b $F8, 5, 0,	$42, $24
0000F1E1 F805 0000 34               		dc.b $F8, 5, 0,	0, $34
0000F1E6 F805 0018 44               		dc.b $F8, 5, 0,	$18, $44
0000F1EB F805 0010 54               		dc.b $F8, 5, 0,	$10, $54
0000F1F0 0F                         byte_CDA8:	dc.b $F			; "SONIC GOT THEM ALL"
0000F1F1 F805 003E 88               		dc.b $F8, 5, 0,	$3E, $88
0000F1F6 F805 0032 98               		dc.b $F8, 5, 0,	$32, $98
0000F1FB F805 002E A8               		dc.b $F8, 5, 0,	$2E, $A8
0000F200 F801 0020 B8               		dc.b $F8, 1, 0,	$20, $B8
0000F205 F805 0008 C0               		dc.b $F8, 5, 0,	8, $C0
0000F20A F805 0018 D8               		dc.b $F8, 5, 0,	$18, $D8
0000F20F F805 0032 E8               		dc.b $F8, 5, 0,	$32, $E8
0000F214 F805 0042 F8               		dc.b $F8, 5, 0,	$42, $F8
0000F219 F805 0042 10               		dc.b $F8, 5, 0,	$42, $10
0000F21E F805 001C 20               		dc.b $F8, 5, 0,	$1C, $20
0000F223 F805 0010 30               		dc.b $F8, 5, 0,	$10, $30
0000F228 F805 002A 40               		dc.b $F8, 5, 0,	$2A, $40
0000F22D F805 0000 58               		dc.b $F8, 5, 0,	0, $58
0000F232 F805 0026 68               		dc.b $F8, 5, 0,	$26, $68
0000F237 F805 0026 78               		dc.b $F8, 5, 0,	$26, $78
0000F23C                            		even
0000F23C                            
0000F23C                            Map_SSRC:	include	"_maps\SS Result Chaos Emeralds.asm"
0000F23C                            ; ---------------------------------------------------------------------------
0000F23C                            ; Sprite mappings - chaos emeralds from	the special stage results screen
0000F23C                            ; ---------------------------------------------------------------------------
0000F23C                            Map_SSRC_internal:
0000F23C 0000                       		dc.w byte_CE02-Map_SSRC_internal
0000F23E 0000                       		dc.w byte_CE08-Map_SSRC_internal
0000F240 0000                       		dc.w byte_CE0E-Map_SSRC_internal
0000F242 0000                       		dc.w byte_CE14-Map_SSRC_internal
0000F244 0000                       		dc.w byte_CE1A-Map_SSRC_internal
0000F246 0000                       		dc.w byte_CE20-Map_SSRC_internal
0000F248 0000                       		dc.w byte_CE26-Map_SSRC_internal
0000F24A 01                         byte_CE02:	dc.b 1
0000F24B F805 2004 F8               		dc.b $F8, 5, $20, 4, $F8
0000F250 01                         byte_CE08:	dc.b 1
0000F251 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0000F256 01                         byte_CE0E:	dc.b 1
0000F257 F805 4004 F8               		dc.b $F8, 5, $40, 4, $F8
0000F25C 01                         byte_CE14:	dc.b 1
0000F25D F805 6004 F8               		dc.b $F8, 5, $60, 4, $F8
0000F262 01                         byte_CE1A:	dc.b 1
0000F263 F805 2008 F8               		dc.b $F8, 5, $20, 8, $F8
0000F268 01                         byte_CE20:	dc.b 1
0000F269 F805 200C F8               		dc.b $F8, 5, $20, $C, $F8
0000F26E 00                         byte_CE26:	dc.b 0			; Blank frame
0000F270 00                         		even
0000F270 00                         		even
0000F270                            
0000F270                            		include	"_incObj\36 Spikes.asm"
0000F270                            ; ---------------------------------------------------------------------------
0000F270                            ; Object 36 - spikes
0000F270                            ; ---------------------------------------------------------------------------
0000F270                            
0000F270                            Spikes:
0000F270 7000                       		moveq	#0,d0
0000F272 1028 0024                  		move.b	obRoutine(a0),d0
0000F276 323B 0000                  		move.w	Spik_Index(pc,d0.w),d1
0000F27A 4EFB 1000                  		jmp	Spik_Index(pc,d1.w)
0000F27E                            ; ===========================================================================
0000F27E 0000                       Spik_Index:	dc.w Spik_Main-Spik_Index
0000F280 0000                       		dc.w Spik_Solid-Spik_Index
0000F282                            
0000F282 =00000030                  spik_origX:	equ $30		; start X position
0000F282 =00000032                  spik_origY:	equ $32		; start Y position
0000F282                            
0000F282 0014                       Spik_Var:	dc.b 0,	$14		; frame	number,	object width
0000F284 0110                       		dc.b 1,	$10
0000F286 0204                       		dc.b 2,	4
0000F288 031C                       		dc.b 3,	$1C
0000F28A 0440                       		dc.b 4,	$40
0000F28C 0510                       		dc.b 5,	$10
0000F28E                            ; ===========================================================================
0000F28E                            
0000F28E                            Spik_Main:	; Routine 0
0000F28E 5428 0024                  		addq.b	#2,obRoutine(a0)
0000F292 217C 0000 0000 0004        		move.l	#Map_Spike,obMap(a0)
0000F29A 317C 051B 0002             		move.w	#$51B,obGfx(a0)
0000F2A0 0028 0004 0001             		ori.b	#4,obRender(a0)
0000F2A6 317C 0200 0018             		move.w	#$200,obPriority(a0)
0000F2AC 1028 0028                  		move.b	obSubtype(a0),d0
0000F2B0 0228 000F 0028             		andi.b	#$F,obSubtype(a0)
0000F2B6 0240 00F0                  		andi.w	#$F0,d0
0000F2BA 43F9 0000 F282             		lea	(Spik_Var).l,a1
0000F2C0 E648                       		lsr.w	#3,d0
0000F2C2 D2C0                       		adda.w	d0,a1
0000F2C4 1159 001A                  		move.b	(a1)+,obFrame(a0)
0000F2C8 1159 0014                  		move.b	(a1)+,obActWid(a0)
0000F2CC 3168 0008 0030             		move.w	obX(a0),spik_origX(a0)
0000F2D2 3168 000C 0032             		move.w	obY(a0),spik_origY(a0)
0000F2D8                            
0000F2D8                            Spik_Solid:	; Routine 2
0000F2D8 6100 0000                  		bsr.w	Spik_Type0x	; make the object move
0000F2DC 343C 0004                  		move.w	#4,d2
0000F2E0 0C28 0005 001A             		cmpi.b	#5,obFrame(a0)	; is object type $5x ?
0000F2E6 6700                       		beq.s	Spik_SideWays	; if yes, branch
0000F2E8 0C28 0001 001A             		cmpi.b	#1,obFrame(a0)	; is object type $1x ?
0000F2EE 6600                       		bne.s	Spik_Upright	; if not, branch
0000F2F0 343C 0014                  		move.w	#$14,d2
0000F2F4                            
0000F2F4                            ; Spikes types $1x and $5x face	sideways
0000F2F4                            
0000F2F4                            Spik_SideWays:
0000F2F4 323C 001B                  		move.w	#$1B,d1
0000F2F8 3602                       		move.w	d2,d3
0000F2FA 5243                       		addq.w	#1,d3
0000F2FC 3828 0008                  		move.w	obX(a0),d4
0000F300 6100 0000                  		bsr.w	SolidObject
0000F304 0828 0003 0022             		btst	#3,obStatus(a0)
0000F30A 6600                       		bne.s	Spik_Display
0000F30C 0C44 0001                  		cmpi.w	#1,d4
0000F310 6700                       		beq.s	Spik_Hurt
0000F312 6000                       		bra.s	Spik_Display
0000F314                            ; ===========================================================================
0000F314                            
0000F314                            ; Spikes types $0x, $2x, $3x and $4x face up or	down
0000F314                            
0000F314                            Spik_Upright:
0000F314 7200                       		moveq	#0,d1
0000F316 1228 0014                  		move.b	obActWid(a0),d1
0000F31A 0641 000B                  		addi.w	#$B,d1
0000F31E 343C 0010                  		move.w	#$10,d2
0000F322 363C 0011                  		move.w	#$11,d3
0000F326 3828 0008                  		move.w	obX(a0),d4
0000F32A 6100 0000                  		bsr.w	SolidObject
0000F32E 0828 0003 0022             		btst	#3,obStatus(a0)
0000F334 6600                       		bne.s	Spik_Hurt
0000F336 4A44                       		tst.w	d4
0000F338 6A00                       		bpl.s	Spik_Display
0000F33A                            
0000F33A                            Spik_Hurt:
0000F33A 4A38 FE2D                  		tst.b	(v_invinc).w	; is Sonic invincible?
0000F33E 6600                       		bne.s	Spik_Display	; if yes, branch
0000F340 4A78 D030                  		tst.w	(v_player+$30).w ; +++ is Sonic invulnerable?
0000F344 6600                       		bne.s	Spik_Display	; +++ if yes, branch
0000F346 2F08                       		move.l	a0,-(sp)
0000F348 2448                       		movea.l	a0,a2
0000F34A 41F8 D000                  		lea	(v_player).w,a0
0000F34E 0C28 0004 0024             		cmpi.b	#4,obRoutine(a0)
0000F354 6400                       		bcc.s	loc_CF20
0000F356                            		; This fixes the infamous "spike bug"
0000F356 4A68 0030                  		tst.w	flashtime(a0)	; Is Sonic flashing after being hurt?
0000F35A 6600                       		bne.s	loc_CF20	; If so, skip getting hurt
0000F35C 4EF9 0000 00E0             		jmp	(loc_E0).l	; This is a copy of the above code that was pushed aside for this
0000F362                            loc_D5A2:
0000F362 9680                       		sub.l	d0,d3
0000F364 2143 000C                  		move.l	d3,obY(a0)
0000F368 4EB9 0000 0000             		jsr	(HurtSonic).l
0000F36E                            
0000F36E                            loc_CF20:
0000F36E 205F                       		movea.l	(sp)+,a0
0000F370                            
0000F370                            Spik_Display:
0000F370 6100 0000                  		bsr.w	DisplaySprite
0000F392 4E75                       		rts	
0000F394                            ; ===========================================================================
0000F394                            
0000F394                            Spik_Type0x:
0000F394 7000                       		moveq	#0,d0
0000F396 1028 0028                  		move.b	obSubtype(a0),d0
0000F39A D040                       		add.w	d0,d0
0000F39C 323B 0000                  		move.w	Spik_TypeIndex(pc,d0.w),d1
0000F3A0 4EFB 1000                  		jmp	Spik_TypeIndex(pc,d1.w)
0000F3A4                            ; ===========================================================================
0000F3A4 0000                       Spik_TypeIndex:	dc.w Spik_Type00-Spik_TypeIndex
0000F3A6 0000                       		dc.w Spik_Type01-Spik_TypeIndex
0000F3A8 0000                       		dc.w Spik_Type02-Spik_TypeIndex
0000F3AA                            ; ===========================================================================
0000F3AA                            
0000F3AA                            Spik_Type00:
0000F3AA 4E75                       		rts			; don't move the object
0000F3AC                            ; ===========================================================================
0000F3AC                            
0000F3AC                            Spik_Type01:
0000F3AC 6100 0000                  		bsr.w	Spik_Wait
0000F3B0 7000                       		moveq	#0,d0
0000F3B2 1028 0034                  		move.b	$34(a0),d0
0000F3B6 D068 0032                  		add.w	spik_origY(a0),d0
0000F3BA 3140 000C                  		move.w	d0,obY(a0)	; move the object vertically
0000F3BE 4E75                       		rts	
0000F3C0                            ; ===========================================================================
0000F3C0                            
0000F3C0                            Spik_Type02:
0000F3C0 6100 0000                  		bsr.w	Spik_Wait
0000F3C4 7000                       		moveq	#0,d0
0000F3C6 1028 0034                  		move.b	$34(a0),d0
0000F3CA D068 0030                  		add.w	spik_origX(a0),d0
0000F3CE 3140 0008                  		move.w	d0,obX(a0)	; move the object horizontally
0000F3D2 4E75                       		rts	
0000F3D4                            ; ===========================================================================
0000F3D4                            
0000F3D4                            Spik_Wait:
0000F3D4 4A68 0038                  		tst.w	$38(a0)		; is time delay	= zero?
0000F3D8 6700                       		beq.s	loc_CFA4	; if yes, branch
0000F3DA 5368 0038                  		subq.w	#1,$38(a0)	; subtract 1 from time delay
0000F3DE 6600                       		bne.s	locret_CFE6
0000F3E0 4A28 0001                  		tst.b	obRender(a0)
0000F3E4 6A00                       		bpl.s	locret_CFE6
0000F3F0 6000                       		bra.s	locret_CFE6
0000F3F2                            ; ===========================================================================
0000F3F2                            
0000F3F2                            loc_CFA4:
0000F3F2 4A68 0036                  		tst.w	$36(a0)
0000F3F6 6700                       		beq.s	loc_CFC6
0000F3F8 0468 0800 0034             		subi.w	#$800,$34(a0)
0000F3FE 6400                       		bcc.s	locret_CFE6
0000F400 317C 0000 0034             		move.w	#0,$34(a0)
0000F406 317C 0000 0036             		move.w	#0,$36(a0)
0000F40C 317C 003C 0038             		move.w	#60,$38(a0)	; set time delay to 1 second
0000F412 6000                       		bra.s	locret_CFE6
0000F414                            ; ===========================================================================
0000F414                            
0000F414                            loc_CFC6:
0000F414 0668 0800 0034             		addi.w	#$800,$34(a0)
0000F41A 0C68 2000 0034             		cmpi.w	#$2000,$34(a0)
0000F420 6500                       		bcs.s	locret_CFE6
0000F422 317C 2000 0034             		move.w	#$2000,$34(a0)
0000F428 317C 0001 0036             		move.w	#1,$36(a0)
0000F42E 317C 003C 0038             		move.w	#60,$38(a0)	; set time delay to 1 second
0000F434                            
0000F434                            locret_CFE6:
0000F434 4E75                       		rts	
0000F434 4E75                       		rts	
0000F436                            Map_Spike:	include	"_maps\Spikes.asm"
0000F436                            ; --------------------------------------------------------------------------------
0000F436                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0000F436                            ; --------------------------------------------------------------------------------
0000F436                            
0000F436                            SME_XgeaQ:	
0000F436 0000 0000                  		dc.w SME_XgeaQ_C-SME_XgeaQ, SME_XgeaQ_1C-SME_XgeaQ	
0000F43A 0000 0000                  		dc.w SME_XgeaQ_2C-SME_XgeaQ, SME_XgeaQ_32-SME_XgeaQ	
0000F43E 0000 0000                  		dc.w SME_XgeaQ_42-SME_XgeaQ, SME_XgeaQ_61-SME_XgeaQ	
0000F442 03                         SME_XgeaQ_C:	dc.b 3	
0000F443 F003 2004 EC               		dc.b $F0, 3, $20, 4, $EC	
0000F448 F003 2004 FC               		dc.b $F0, 3, $20, 4, $FC	
0000F44D F003 2004 0C               		dc.b $F0, 3, $20, 4, $C	
0000F452 03                         SME_XgeaQ_1C:	dc.b 3	
0000F453 EC0C 2000 F0               		dc.b $EC, $C, $20, 0, $F0	
0000F458 FC0C 2000 F0               		dc.b $FC, $C, $20, 0, $F0	
0000F45D 0C0C 2000 F0               		dc.b $C, $C, $20, 0, $F0	
0000F462 01                         SME_XgeaQ_2C:	dc.b 1	
0000F463 F003 2004 FC               		dc.b $F0, 3, $20, 4, $FC	
0000F468 03                         SME_XgeaQ_32:	dc.b 3	
0000F469 F003 2004 E4               		dc.b $F0, 3, $20, 4, $E4	
0000F46E F003 2004 FC               		dc.b $F0, 3, $20, 4, $FC	
0000F473 F003 2004 14               		dc.b $F0, 3, $20, 4, $14	
0000F478 06                         SME_XgeaQ_42:	dc.b 6	
0000F479 F003 2004 C0               		dc.b $F0, 3, $20, 4, $C0	
0000F47E F003 2004 D8               		dc.b $F0, 3, $20, 4, $D8	
0000F483 F003 2004 F0               		dc.b $F0, 3, $20, 4, $F0	
0000F488 F003 2004 08               		dc.b $F0, 3, $20, 4, 8	
0000F48D F003 2004 20               		dc.b $F0, 3, $20, 4, $20	
0000F492 F003 2004 38               		dc.b $F0, 3, $20, 4, $38	
0000F497 01                         SME_XgeaQ_61:	dc.b 1	
0000F498 FC0C 2000 F0               		dc.b $FC, $C, $20, 0, $F0	
0000F49E 00                         		even
0000F49E 00                         		even
0000F49E                            		include	"_incObj\3B Purple Rock.asm"
0000F49E                            ; ---------------------------------------------------------------------------
0000F49E                            ; Object 3B - purple rock (GHZ)
0000F49E                            ; ---------------------------------------------------------------------------
0000F49E                            
0000F49E                            PurpleRock:
0000F49E 7000                       		moveq	#0,d0
0000F4A0 1028 0024                  		move.b	obRoutine(a0),d0
0000F4A4 323B 0000                  		move.w	Rock_Index(pc,d0.w),d1
0000F4A8 4EFB 1000                  		jmp	Rock_Index(pc,d1.w)
0000F4AC                            ; ===========================================================================
0000F4AC 0000                       Rock_Index:	dc.w Rock_Main-Rock_Index
0000F4AE 0000                       		dc.w Rock_Solid-Rock_Index
0000F4B0                            ; ===========================================================================
0000F4B0                            
0000F4B0                            Rock_Main:	; Routine 0
0000F4B0 5428 0024                  		addq.b	#2,obRoutine(a0)
0000F4B4 217C 0000 0000 0004        		move.l	#Map_PRock,obMap(a0)
0000F4BC 317C 63D0 0002             		move.w	#$63D0,obGfx(a0)
0000F4C2 117C 0004 0001             		move.b	#4,obRender(a0)
0000F4C8 117C 0013 0014             		move.b	#$13,obActWid(a0)
0000F4CE 317C 0200 0018             		move.w	#$200,obPriority(a0)
0000F4D4                            
0000F4D4                            Rock_Solid:	; Routine 2
0000F4D4 323C 001B                  		move.w	#$1B,d1
0000F4D8 343C 0010                  		move.w	#$10,d2
0000F4DC 363C 0010                  		move.w	#$10,d3
0000F4E0 3828 0008                  		move.w	obX(a0),d4
0000F4E4 6100 0000                  		bsr.w	SolidObject
0000F4E8 6100 0000                  		bsr.w	DisplaySprite
0000F50A 4E75                       		rts	
0000F50A 4E75                       		rts	
0000F50C                            		include	"_incObj\49 Waterfall Sound.asm"
0000F50C                            ; ---------------------------------------------------------------------------
0000F50C                            ; Object 49 - waterfall	sound effect (GHZ)
0000F50C                            ; ---------------------------------------------------------------------------
0000F50C                            
0000F50C                            WaterSound:
0000F50C 7000                       		moveq	#0,d0
0000F50E 1028 0024                  		move.b	obRoutine(a0),d0
0000F512 323B 0000                  		move.w	WSnd_Index(pc,d0.w),d1
0000F516 4EFB 1000                  		jmp	WSnd_Index(pc,d1.w)
0000F51A                            ; ===========================================================================
0000F51A 0000                       WSnd_Index:	dc.w WSnd_Main-WSnd_Index
0000F51C 0000                       		dc.w WSnd_PlaySnd-WSnd_Index
0000F51E                            ; ===========================================================================
0000F51E                            
0000F51E                            WSnd_Main:	; Routine 0
0000F51E 5428 0024                  		addq.b	#2,obRoutine(a0)
0000F522 117C 0004 0001             		move.b	#4,obRender(a0)
0000F528                            
0000F528                            WSnd_PlaySnd:	; Routine 2
0000F528 1038 FE0F                  		move.b	(v_vbla_byte).w,d0 ; get low byte of VBlank counter
0000F52C 0200 003F                  		andi.b	#$3F,d0
0000F530 6600                       		bne.s	WSnd_ChkDel
0000F53C                            
0000F53C                            	WSnd_ChkDel:
0000F55A 4E75                       		rts	
0000F55A 4E75                       		rts	
0000F55C                            Map_PRock:	include	"_maps\Purple Rock.asm"
0000F55C                            ; ---------------------------------------------------------------------------
0000F55C                            ; Sprite mappings - purple rock	(GHZ)
0000F55C                            ; ---------------------------------------------------------------------------
0000F55C                            Map_PRock_internal:
0000F55C 0000                       		dc.w byte_D110-Map_PRock_internal
0000F55E 02                         byte_D110:	dc.b 2
0000F55F F00B 0000 E8               		dc.b $F0, $B, 0, 0, $E8
0000F564 F00B 000C 00               		dc.b $F0, $B, 0, $C, 0
0000F56A 00                         		even
0000F56A 00                         		even
0000F56A                            		include	"_incObj\3C Smashable Wall.asm"
0000F56A                            ; ---------------------------------------------------------------------------
0000F56A                            ; Object 3C - smashable	wall (GHZ, SLZ)
0000F56A                            ; ---------------------------------------------------------------------------
0000F56A                            
0000F56A                            SmashWall:
0000F56A 7000                       		moveq	#0,d0
0000F56C 1028 0024                  		move.b	obRoutine(a0),d0
0000F570 323B 0000                  		move.w	Smash_Index(pc,d0.w),d1
0000F574 4EBB 1000                  		jsr	Smash_Index(pc,d1.w)
0000F578 6000 0000                  		bra.w	RememberState
0000F57C                            ; ===========================================================================
0000F57C 0000                       Smash_Index:	dc.w Smash_Main-Smash_Index
0000F57E 0000                       		dc.w Smash_Solid-Smash_Index
0000F580 0000                       		dc.w Smash_FragMove-Smash_Index
0000F582                            
0000F582 =00000030                  smash_speed:	equ $30		; Sonic's horizontal speed
0000F582                            ; ===========================================================================
0000F582                            
0000F582                            Smash_Main:	; Routine 0
0000F582 5428 0024                  		addq.b	#2,obRoutine(a0)
0000F586 217C 0000 0000 0004        		move.l	#Map_Smash,obMap(a0)
0000F58E 317C 450F 0002             		move.w	#$450F,obGfx(a0)
0000F594 117C 0004 0001             		move.b	#4,obRender(a0)
0000F59A 117C 0010 0014             		move.b	#$10,obActWid(a0)
0000F5A0 317C 0200 0018             		move.w	#$200,obPriority(a0)
0000F5A6 1168 0028 001A             		move.b	obSubtype(a0),obFrame(a0)
0000F5AC                            
0000F5AC                            Smash_Solid:	; Routine 2
0000F5AC 3178 D010 0030             		move.w	(v_player+obVelX).w,smash_speed(a0) ; load Sonic's horizontal speed
0000F5B2 323C 001B                  		move.w	#$1B,d1
0000F5B6 343C 0020                  		move.w	#$20,d2
0000F5BA 363C 0020                  		move.w	#$20,d3
0000F5BE 3828 0008                  		move.w	obX(a0),d4
0000F5C2 6100 0000                  		bsr.w	SolidObject	
0000F5C6 4A04                       		tst.b	d4
0000F5C8 6E00 0000                  		bgt.w	@chkroll	
0000F5CC 6700 0000                  		beq.w	@donothing								
0000F5D0 0828 0005 0022             		btst	#5,obStatus(a0)	; is Sonic pushing against the wall?
0000F5D6 6700 0000                  		beq.w	@donothing	; if yes, branch
0000F5DA                            ; ===========================================================================
0000F5DA                            
0000F5DA                            @chkroll:
0000F5DA 0C29 0000 001C             		cmpi.b	#id_Roll,obAnim(a1) ; is Sonic rolling?
0000F5E0 6600                       		bne.s	@donothing	; if not, branch	
0000F5E2 3028 0030                  		move.w	smash_speed(a0),d0
0000F5E6 6A00                       		bpl.s	@chkspeed
0000F5E8 4440                       		neg.w	d0
0000F5EA                            
0000F5EA                            	@chkspeed:
0000F5EA 0C40 0480                  		cmpi.w	#$480,d0	; is Sonic's speed $480 or higher?
0000F5EE 6500                       		bcs.s	@donothing	; if not, branch	
0000F5F0                            		
0000F5F0                            	@continue:	
0000F5F0 08A8 0005 0022             		bclr	#5,obStatus(a0)
0000F5F6 3368 0030 0010             		move.w	smash_speed(a0),obVelX(a1)
0000F5FC 49F9 0000 0000             		lea	(Smash_FragSpd1).l,a4 ;	use fragments that move	right
0000F602 3028 0008                  		move.w	obX(a0),d0
0000F606 B069 0008                  		cmp.w	obX(a1),d0	; is Sonic to the right	of the block?
0000F60A 6500                       		bcs.s	@smash		; if yes, branch
0000F60C 49F9 0000 0000             		lea	(Smash_FragSpd2).l,a4 ;	use fragments that move	left
0000F612                            
0000F612                            	@smash:
0000F612 3369 0010 0020             		move.w	obVelX(a1),obInertia(a1)
0000F618 08A9 0005 0022             		bclr	#5,obStatus(a1)
0000F61E 7206                       		moveq	#6,d1		; load 7 fragments
0000F620 343C 0070                  		move.w	#$70,d2
0000F624 6100                       		bsr.s	SmashObject
0000F626                            
0000F626                            @donothing:
0000F626 4E75                       		rts	
0000F628                            
0000F628                            Smash_FragMove:	; Routine 4
0000F628 588F                       		addq.l	#4,sp
0000F62A 6100 0000                  		bsr.w	SpeedToPos
0000F62E 0668 0070 0012             		addi.w	#$70,obVelY(a0)	; make fragment	fall faster
0000F634 4A28 0001                  		tst.b	obRender(a0)
0000F638 6A00 0000                  		bpl.w	DeleteObject
0000F63C 6000 0000                  		bra.w	DisplaySprite
0000F640                            
0000F640                            
0000F640                            
0000F640                            		include	"_incObj\sub SmashObject.asm"
0000F640                            ; ---------------------------------------------------------------------------
0000F640                            ; Subroutine to	smash a	block (GHZ walls and MZ	blocks)
0000F640                            ; ---------------------------------------------------------------------------
0000F640                            
0000F640                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000F640                            
0000F640                            
0000F640                            SmashObject:
0000F640 7000                       		moveq	#0,d0
0000F642 1028 001A                  		move.b	obFrame(a0),d0
0000F646 D040                       		add.w	d0,d0
0000F648 2668 0004                  		movea.l	obMap(a0),a3
0000F64C D6F3 0000                  		adda.w	(a3,d0.w),a3
0000F650 524B                       		addq.w	#1,a3
0000F652 08E8 0005 0001             		bset	#5,obRender(a0)
0000F658 1810                       		move.b	0(a0),d4
0000F65A 1A28 0001                  		move.b	obRender(a0),d5
0000F65E 2248                       		movea.l	a0,a1
0000F660 137C 0004 0024             		move.b	#4,obRoutine(a1)
0000F666 1284                       		move.b	d4,0(a1)
0000F668 234B 0004                  		move.l	a3,obMap(a1)
0000F66C 1345 0001                  		move.b	d5,obRender(a1)
0000F670 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000F676 3368 000C 000C             		move.w	obY(a0),obY(a1)
0000F67C 3368 0002 0002             		move.w	obGfx(a0),obGfx(a1)
0000F682 3368 0018 0018             		move.w	obPriority(a0),obPriority(a1)
0000F688 1368 0014 0014             		move.b	obActWid(a0),obActWid(a1)
0000F68E 335C 0010                  		move.w	(a4)+,obVelX(a1)
0000F692 335C 0012                  		move.w	(a4)+,obVelY(a1)
0000F696 5341                       		subq.w #1,d1
0000F698 43F8 D800                  		lea (v_lvlobjspace).w,a1
0000F69C 303C 005F                  		move.w #$5F,d0
0000F6A0                            ; ===========================================================================
0000F6A0                            
0000F6A0                            Smash_Loop:
0000F6A0 4A11                       		tst.b	(a1)
0000F6A2 6700                       		beq.s	@cont
0000F6A4 43E9 0040                  		lea		$40(a1),a1
0000F6A8 51C8 FFF6                  		dbf 	d0,Smash_Loop 
0000F6AC 6600                       		bne.s	Smash_PlaySnd
0000F6AE                            
0000F6AE                            	@cont:
0000F6AE 5A4B                       		addq.w #5,a3
0000F6B0                            
0000F6B0                            Smash_LoadFrag:				; XREF: SmashObject
0000F6B0 137C 0004 0024             		move.b	#4,obRoutine(a1)
0000F6B6 1284                       		move.b	d4,0(a1)
0000F6B8 234B 0004                  		move.l	a3,obMap(a1)
0000F6BC 1345 0001                  		move.b	d5,obRender(a1)
0000F6C0 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000F6C6 3368 000C 000C             		move.w	obY(a0),obY(a1)
0000F6CC 3368 0002 0002             		move.w	obGfx(a0),obGfx(a1)
0000F6D2 3368 0018 0018             		move.w	obPriority(a0),obPriority(a1)
0000F6D8 1368 0014 0014             		move.b	obActWid(a0),obActWid(a1)
0000F6DE 335C 0010                  		move.w	(a4)+,obVelX(a1)
0000F6E2 335C 0012                  		move.w	(a4)+,obVelY(a1)
0000F6E6 51C9 FFB8                  		dbf	d1,Smash_Loop
0000F6EA                            
0000F6EA                            Smash_PlaySnd:
0000F6EA 303C 0000                  		move.w	#sfx_WallSmash,d0
0000F6EE 4EF9 0000 12A0             		jmp	(PlaySound_Special).l ; play smashing sound
0000F6F4                            
0000F6F4                            ; End of function SmashObject
0000F6F4                            ; End of function SmashObject
0000F6F4                            
0000F6F4                            ; ===========================================================================
0000F6F4                            ; Smashed block	fragment speeds
0000F6F4                            ;
0000F6F4 0400 FB00                  Smash_FragSpd1:	dc.w $400, -$500	; x-move speed,	y-move speed
0000F6F8 0600 FF00                  		dc.w $600, -$100
0000F6FC 0600 0100                  		dc.w $600, $100
0000F700 0400 0500                  		dc.w $400, $500
0000F704 0600 FA00                  		dc.w $600, -$600
0000F708 0800 FE00                  		dc.w $800, -$200
0000F70C 0800 0200                  		dc.w $800, $200
0000F710 0600 0600                  		dc.w $600, $600
0000F714                            
0000F714 FA00 FA00                  Smash_FragSpd2:	dc.w -$600, -$600
0000F718 F800 FE00                  		dc.w -$800, -$200
0000F71C F800 0200                  		dc.w -$800, $200
0000F720 FA00 0600                  		dc.w -$600, $600
0000F724 FC00 FB00                  		dc.w -$400, -$500
0000F728 FA00 FF00                  		dc.w -$600, -$100
0000F72C FA00 0100                  		dc.w -$600, $100
0000F730 FC00 0500                  		dc.w -$400, $500
0000F734                            
0000F734                            Map_Smash:	include	"_maps\Smashable Walls.asm"
0000F734                            ; ---------------------------------------------------------------------------
0000F734                            ; Sprite mappings - smashable walls (GHZ, SLZ)
0000F734                            ; ---------------------------------------------------------------------------
0000F734                            Map_Smash_internal:
0000F734 0000                       		dc.w @left-Map_Smash_internal
0000F736 0000                       		dc.w @middle-Map_Smash_internal
0000F738 0000                       		dc.w @right-Map_Smash_internal
0000F73A 08                         @left:		dc.b 8
0000F73B E005 0000 F0               		dc.b $E0, 5, 0,	0, $F0
0000F740 F005 0000 F0               		dc.b $F0, 5, 0,	0, $F0
0000F745 0005 0000 F0               		dc.b 0,	5, 0, 0, $F0
0000F74A 1005 0000 F0               		dc.b $10, 5, 0,	0, $F0
0000F74F E005 0004 00               		dc.b $E0, 5, 0,	4, 0
0000F754 F005 0004 00               		dc.b $F0, 5, 0,	4, 0
0000F759 0005 0004 00               		dc.b 0,	5, 0, 4, 0
0000F75E 1005 0004 00               		dc.b $10, 5, 0,	4, 0
0000F763 08                         @middle:	dc.b 8
0000F764 E005 0004 F0               		dc.b $E0, 5, 0,	4, $F0
0000F769 F005 0004 F0               		dc.b $F0, 5, 0,	4, $F0
0000F76E 0005 0004 F0               		dc.b 0,	5, 0, 4, $F0
0000F773 1005 0004 F0               		dc.b $10, 5, 0,	4, $F0
0000F778 E005 0004 00               		dc.b $E0, 5, 0,	4, 0
0000F77D F005 0004 00               		dc.b $F0, 5, 0,	4, 0
0000F782 0005 0004 00               		dc.b 0,	5, 0, 4, 0
0000F787 1005 0004 00               		dc.b $10, 5, 0,	4, 0
0000F78C 08                         @right:		dc.b 8
0000F78D E005 0004 F0               		dc.b $E0, 5, 0,	4, $F0
0000F792 F005 0004 F0               		dc.b $F0, 5, 0,	4, $F0
0000F797 0005 0004 F0               		dc.b 0,	5, 0, 4, $F0
0000F79C 1005 0004 F0               		dc.b $10, 5, 0,	4, $F0
0000F7A1 E005 0008 00               		dc.b $E0, 5, 0,	8, 0
0000F7A6 F005 0008 00               		dc.b $F0, 5, 0,	8, 0
0000F7AB 0005 0008 00               		dc.b 0,	5, 0, 8, 0
0000F7B0 1005 0008 00               		dc.b $10, 5, 0,	8, 0
0000F7B6 00                         		even
0000F7B6 00                         		even
0000F7B6                            
0000F7B6                            ; ---------------------------------------------------------------------------
0000F7B6                            ; Object code execution subroutine
0000F7B6                            ; ---------------------------------------------------------------------------
0000F7B6                            
0000F7B6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000F7B6                            
0000F7B6                            
0000F7B6                            
0000F7B6                            ExecuteObjects: ; XREF: GM_Title; et al
0000F7B6 41F8 D000                  		lea (v_objspace).w,a0 ; set address for object RAM
0000F7BA 7E7F                       		moveq #$7F,d7
0000F7BC 7000                       		moveq #0,d0
0000F7BE 0C38 0006 D024             		cmpi.b #6,(v_player+obRoutine).w
0000F7C4 6400                       		bcc.s loc_D362
0000F7C6                            
0000F7C6                            loc_D348:
0000F7C6 1010                       		move.b (a0),d0 ; load object number from RAM
0000F7C8 6700                       		beq.s loc_D358
0000F7CA D040                       		add.w d0,d0
0000F7CC D040                       		add.w d0,d0
0000F7CE 227B 0000                  		movea.l Obj_Index-4(pc,d0.w),a1
0000F7D2 4E91                       		jsr (a1) ; run the object's code
0000F7D4 7000                       		moveq #0,d0
0000F7D6                            
0000F7D6                            loc_D358:
0000F7D6 41E8 0040                  		lea $40(a0),a0 ; next object
0000F7DA 51CF FFEA                  		dbf d7,loc_D348
0000F7DE 4E75                       		rts
0000F7E0                            ; ===========================================================================
0000F7E0                            
0000F7E0                            loc_D362:
0000F7E0 7E1F                       		moveq #$1F,d7
0000F7E2 61E2                       		bsr.s loc_D348
0000F7E4 7E5F                       		moveq #$5F,d7
0000F7E6                            
0000F7E6                            loc_D368:
0000F7E6 7000                       		moveq #0,d0 ; Clear d0 quickly
0000F7E8 1010                       		move.b (a0),d0 ; get the object's ID
0000F7EA 6700                       		beq.s loc_D37C ; if it's obj00, skip it
0000F7EC 4A28 0001                  		tst.b obRender(a0) ; should we render it?
0000F7F0 6A00                       		bpl.s loc_D37C ; if not, skip it
0000F7F2 3028 0018                  		move.w obpriority(a0),d0 ; move object's priority to d0
0000F7F6 0828 0006 0001             		btst #6,obRender(a0) ; is the compound sprites flag set?
0000F7FC 6700                       		beq.s loc_D378 ; if not, branch
0000F7FE 303C 0200                  		move.w #$200,d0 ; move $200 to d0
0000F802                            
0000F802                            loc_D378:
0000F802 6100 0000                  		bsr.w DisplaySprite2
0000F806                            		
0000F806                            loc_D37C:
0000F806 41E8 0040                  		lea $40(a0),a0
0000F80A 51CF FFDA                  		dbf d7,loc_D368
0000F80E 4E75                       		rts
0000F810                            ; End of function ExecuteObjects
0000F810                            
0000F810                            ; ===========================================================================
0000F810                            ; ---------------------------------------------------------------------------
0000F810                            ; Object pointers
0000F810                            ; ---------------------------------------------------------------------------
0000F810                            Obj_Index:
0000F810                            		include	"_inc\Object Pointers.asm"
0000F810                            ; ---------------------------------------------------------------------------
0000F810                            ; Object pointers
0000F810                            ; ---------------------------------------------------------------------------
0000F810 0000 0000                  ptr_SonicPlayer:	dc.l SonicPlayer	; $01
0000F814 0000 0000                  ptr_Obj02:			dc.l ObjectFall
0000F818 0000 0000                  ptr_Obj03:			dc.l Obj03
0000F81C 0000 0000                  ptr_GShieldItem:	dc.l GShieldItem
0000F820 0000 0000                  ptr_Obj05:		dc.l Spindash_dust
0000F824 0000 B506                  ptr_Mozzietron:		dc.l Mozzietron
0000F828 0000 0000                  ptr_RShieldItem:	dc.l RShieldItem	
0000F82C 0000 0000                  ptr_Splash:		dc.l Splash		; $08
0000F830 0000 0000                  ptr_SonicSpecial:	dc.l SonicSpecial
0000F834 0000 0000                  ptr_DrownCount:		dc.l DrownCount
0000F838 0000 0000                  ptr_Pole:		dc.l Pole
0000F83C 0000 0000                  ptr_FlapDoor:		dc.l FlapDoor
0000F840 0000 0000                  ptr_Signpost:		dc.l Signpost
0000F844 0000 C92C                  ptr_TitleSonic:		dc.l TitleSonic
0000F848 0000 C9AC                  ptr_PSBTM:		dc.l PSBTM
0000F84C 0000 0000                  ptr_Obj10:		dc.l Obj10		; $10
0000F850 0000 9016                  ptr_Bridge:		dc.l Bridge
0000F854 0000 0000                  ptr_SpinningLight:	dc.l SpinningLight
0000F858 0000 0000                  ptr_LavaMaker:		dc.l LavaMaker
0000F85C 0000 0000                  ptr_LavaBall:		dc.l LavaBall
0000F860 0000 963C                  ptr_SwingingPlatform:	dc.l SwingingPlatform
0000F864 0000 0000                  ptr_Harpoon:		dc.l Harpoon
0000F868 0000 9988                  ptr_Helix:		dc.l Helix
0000F86C 0000 9B14                  ptr_BasicPlatform:	dc.l BasicPlatform	; $18
0000F870 0000 0000                  ptr_InvStars:		dc.l InvStarsObj
0000F874 0000 9EF0                  ptr_CollapseLedge:	dc.l CollapseLedge
0000F878 0000 0000                  ptr_WaterSurface:	dc.l WaterSurface
0000F87C 0000 A4F8                  ptr_Scenery:		dc.l Scenery
0000F880 0000 A59A                  ptr_MagicSwitch:	dc.l MagicSwitch
0000F884 0000 A882                  ptr_BallHog:		dc.l BallHog
0000F888 0000 B21C                  ptr_Crabmeat:		dc.l Crabmeat
0000F88C 0000 A950                  ptr_Cannonball:		dc.l Cannonball		; $20
0000F890 0000 0000                  ptr_HUD:		dc.l HUD
0000F894 0000 B638                  ptr_BuzzBomber:		dc.l BuzzBomber
0000F898 0000 B78A                  ptr_Missile:		dc.l Missile
0000F89C 0000 AA22                  ptr_MissileDissolve:	dc.l MissileDissolve
0000F8A0 0000 B9E4                  ptr_Rings:		dc.l Rings
0000F8A4 0000 C22E                  ptr_Monitor:		dc.l Monitor
0000F8A8 0000 AA92                  ptr_ExplosionItem:	dc.l ExplosionItem
0000F8AC 0000 AC50                  ptr_Animals:		dc.l Animals		; $28
0000F8B0 0000 B13E                  ptr_Points:		dc.l Points
0000F8B4 0000 A670                  ptr_AutoDoor:		dc.l AutoDoor
0000F8B8 0000 CF56                  ptr_Chopper:		dc.l Chopper
0000F8BC 0000 D010                  ptr_Jaws:		dc.l Jaws
0000F8C0 0000 D0DA                  ptr_Burrobot:		dc.l Burrobot
0000F8C4 0000 C42C                  ptr_PowerUp:		dc.l PowerUp
0000F8C8 0000 D2EE                  ptr_LargeGrass:		dc.l LargeGrass
0000F8CC 0000 D7D0                  ptr_GlassBlock:		dc.l GlassBlock		; $30
0000F8D0 0000 DAAC                  ptr_ChainStomp:		dc.l ChainStomp
0000F8D4 0000 E15A                  ptr_Button:		dc.l Button
0000F8D8 0000 E2FE                  ptr_PushBlock:		dc.l PushBlock
0000F8DC 0000 E730                  ptr_TitleCard:		dc.l TitleCard
0000F8E0 0000 D610                  ptr_GrassFire:		dc.l GrassFire
0000F8E4 0000 F270                  ptr_Spikes:		dc.l Spikes
0000F8E8 0000 BC40                  ptr_RingLoss:		dc.l RingLoss
0000F8EC 0000 0000                  ptr_ShieldItem:		dc.l ShieldItem		; $38
0000F8F0 0000 E8E0                  ptr_GameOverCard:	dc.l GameOverCard
0000F8F4 0000 E99E                  ptr_GotThroughCard:	dc.l GotThroughCard
0000F8F8 0000 F49E                  ptr_PurpleRock:		dc.l PurpleRock
0000F8FC 0000 F56A                  ptr_SmashWall:		dc.l SmashWall
0000F900 0000 0000                  ptr_BossGreenHill:	dc.l BossGreenHill
0000F904 0000 0000                  ptr_Prison:		dc.l Prison
0000F908 0000 AB24                  ptr_ExplosionBomb:	dc.l ExplosionBomb
0000F90C 0000 0000                  ptr_MotoBug:		dc.l MotoBug		; $40
0000F910 0000 0000                  ptr_Springs:		dc.l Springs
0000F914 0000 0000                  ptr_Newtron:		dc.l Newtron
0000F918 0000 0000                  ptr_Roller:		dc.l Roller
0000F91C 0000 0000                  ptr_EdgeWalls:		dc.l EdgeWalls
0000F920 0000 DDC8                  ptr_SideStomp:		dc.l SideStomp
0000F924 0000 0000                  ptr_MarbleBrick:	dc.l MarbleBrick
0000F928 0000 0000                  ptr_Bumper:		dc.l Bumper
0000F92C 0000 0000                  ptr_BossBall:		dc.l BossBall		; $48
0000F930 0000 F50C                  ptr_WaterSound:		dc.l WaterSound
0000F934 0000 0000                  ptr_VanishSonic:	dc.l VanishSonic
0000F938 0000 BF02                  ptr_GiantRing:		dc.l GiantRing
0000F93C 0000 0000                  ptr_GeyserMaker:	dc.l GeyserMaker
0000F940 0000 0000                  ptr_LavaGeyser:		dc.l LavaGeyser
0000F944 0000 0000                  ptr_SpShieldItem:	dc.l SpShieldItem
0000F948 0000 0000                  ptr_Obj4F:		dc.l Obj4F
0000F94C 0000 0000                  ptr_Yadrin:		dc.l Yadrin		; $50
0000F950 0000 0000                  ptr_SmashBlock:		dc.l SmashBlock
0000F954 0000 0000                  ptr_MovingBlock:	dc.l MovingBlock
0000F958 0000 A000                  ptr_CollapseFloor:	dc.l CollapseFloor
0000F95C 0000 0000                  ptr_LavaTag:		dc.l LavaTag
0000F960 0000 0000                  ptr_Basaran:		dc.l Basaran
0000F964 0000 0000                  ptr_FloatingBlock:	dc.l FloatingBlock
0000F968 0000 0000                  ptr_SpikeBall:		dc.l SpikeBall
0000F96C 0000 0000                  ptr_BigSpikeBall:	dc.l BigSpikeBall	; $58
0000F970 0000 0000                  ptr_Elevator:		dc.l Elevator
0000F974 0000 0000                  ptr_CirclingPlatform:	dc.l CirclingPlatform
0000F978 0000 0000                  ptr_Staircase:		dc.l Staircase
0000F97C 0000 0000                  ptr_Pylon:		dc.l Pylon
0000F980 0000 0000                  ptr_Fan:		dc.l Fan
0000F984 0000 0000                  ptr_Seesaw:		dc.l Seesaw
0000F988 0000 0000                  ptr_Bomb:		dc.l Bomb
0000F98C 0000 0000                  ptr_Orbinaut:		dc.l Orbinaut		; $60
0000F990 0000 0000                  ptr_LabyrinthBlock:	dc.l LabyrinthBlock
0000F994 0000 0000                  ptr_Gargoyle:		dc.l Gargoyle
0000F998 0000 0000                  ptr_LabyrinthConvey:	dc.l LabyrinthConvey
0000F99C 0000 0000                  ptr_Bubble:		dc.l Bubble
0000F9A0 0000 0000                  ptr_Waterfall:		dc.l Waterfall
0000F9A4 0000 0000                  ptr_Junction:		dc.l Junction
0000F9A8 0000 0000                  ptr_RunningDisc:	dc.l RunningDisc
0000F9AC 0000 0000                  ptr_Conveyor:		dc.l Conveyor		; $68
0000F9B0 0000 0000                  ptr_SpinPlatform:	dc.l SpinPlatform
0000F9B4 0000 0000                  ptr_Saws:		dc.l Saws
0000F9B8 0000 0000                  ptr_ScrapStomp:		dc.l ScrapStomp
0000F9BC 0000 0000                  ptr_VanishPlatform:	dc.l VanishPlatform
0000F9C0 0000 0000                  ptr_Flamethrower:	dc.l Flamethrower
0000F9C4 0000 0000                  ptr_Electro:		dc.l Electro
0000F9C8 0000 0000                  ptr_SpinConvey:		dc.l SpinConvey
0000F9CC 0000 0000                  ptr_Girder:		dc.l Girder		; $70
0000F9D0 0000 0000                  ptr_Invisibarrier:	dc.l Invisibarrier
0000F9D4 0000 0000                  ptr_Teleport:		dc.l Teleport
0000F9D8 0000 0000                  ptr_BossMarble:		dc.l BossMarble
0000F9DC 0000 0000                  ptr_BossFire:		dc.l BossFire
0000F9E0 0000 0000                  ptr_BossSpringYard:	dc.l BossSpringYard
0000F9E4 0000 0000                  ptr_BossBlock:		dc.l BossBlock
0000F9E8 0000 0000                  ptr_BossLabyrinth:	dc.l BossLabyrinth
0000F9EC 0000 0000                  ptr_Caterkiller:	dc.l Caterkiller	; $78
0000F9F0 0000 0000                  ptr_Lamppost:		dc.l Lamppost
0000F9F4 0000 0000                  ptr_BossStarLight:	dc.l BossStarLight
0000F9F8 0000 0000                  ptr_BossSpikeball:	dc.l BossSpikeball
0000F9FC 0000 BFDC                  ptr_RingFlash:		dc.l RingFlash
0000FA00 0000 0000                  ptr_HiddenBonus:	dc.l HiddenBonus
0000FA04 0000 EBE2                  ptr_SSResult:		dc.l SSResult
0000FA08 0000 ED88                  ptr_SSRChaos:		dc.l SSRChaos
0000FA0C 0000 5EBC                  ptr_ContScrItem:	dc.l ContScrItem	; $80
0000FA10 0000 5FD4                  ptr_ContSonic:		dc.l ContSonic
0000FA14 0000 0000                  ptr_ScrapEggman:	dc.l ScrapEggman
0000FA18 0000 0000                  ptr_FalseFloor:		dc.l FalseFloor
0000FA1C 0000 0000                  ptr_EggmanCylinder:	dc.l EggmanCylinder
0000FA20 0000 0000                  ptr_BossFinal:		dc.l BossFinal
0000FA24 0000 0000                  ptr_BossPlasma:		dc.l BossPlasma
0000FA28 0000 6462                  ptr_EndSonic:		dc.l EndSonic
0000FA2C 0000 65BC                  ptr_EndChaos:		dc.l EndChaos		; $88
0000FA30 0000 6696                  ptr_EndSTH:		dc.l EndSTH
0000FA34 0000 0000                  ptr_CreditsText:	dc.l CreditsText
0000FA38 0000 68FC                  ptr_EndEggman:		dc.l EndEggman
0000FA3C 0000 69DC                  ptr_TryChaos:		dc.l TryChaos
0000FA40                            
0000FA40                            NullObject:
0000FA40                            		;jmp	(DeleteObject).l	; It would be safer to have this instruction here, but instead it just falls through to ObjectFall
0000FA40                            
0000FA40 =00000001                  id_SonicPlayer:		equ ((ptr_SonicPlayer-Obj_Index)/4)+1		; $01
0000FA40 =00000002                  id_Obj02:		equ ((ptr_Obj02-Obj_Index)/4)+1
0000FA40 =00000003                  id_Obj03:		equ ((ptr_Obj03-Obj_Index)/4)+1
0000FA40 =00000004                  id_GShielditem:		equ ((ptr_GShieldItem-Obj_Index)/4)+1
0000FA40 =00000005                  id_Obj05:		equ ((ptr_Obj05-Obj_Index)/4)+1
0000FA40 =00000006                  id_Mozzietron:		equ ((ptr_Mozzietron-Obj_Index)/4)+1
0000FA40 =00000007                  id_RShieldItem:		equ ((ptr_RShieldItem-Obj_Index)/4)+1	
0000FA40 =00000008                  id_Splash:		equ ((ptr_Splash-Obj_Index)/4)+1		; $08
0000FA40 =00000009                  id_SonicSpecial:	equ ((ptr_SonicSpecial-Obj_Index)/4)+1
0000FA40 =0000000A                  id_DrownCount:		equ ((ptr_DrownCount-Obj_Index)/4)+1
0000FA40 =0000000B                  id_Pole:		equ ((ptr_Pole-Obj_Index)/4)+1
0000FA40 =0000000C                  id_FlapDoor:		equ ((ptr_FlapDoor-Obj_Index)/4)+1
0000FA40 =0000000D                  id_Signpost:		equ ((ptr_Signpost-Obj_Index)/4)+1
0000FA40 =0000000E                  id_TitleSonic:		equ ((ptr_TitleSonic-Obj_Index)/4)+1
0000FA40 =0000000F                  id_PSBTM:		equ ((ptr_PSBTM-Obj_Index)/4)+1
0000FA40 =00000010                  id_Obj10:		equ ((ptr_Obj10-Obj_Index)/4)+1			; $10
0000FA40 =00000011                  id_Bridge:		equ ((ptr_Bridge-Obj_Index)/4)+1
0000FA40 =00000012                  id_SpinningLight:	equ ((ptr_SpinningLight-Obj_Index)/4)+1
0000FA40 =00000013                  id_LavaMaker:		equ ((ptr_LavaMaker-Obj_Index)/4)+1
0000FA40 =00000014                  id_LavaBall:		equ ((ptr_LavaBall-Obj_Index)/4)+1
0000FA40 =00000015                  id_SwingingPlatform:	equ ((ptr_SwingingPlatform-Obj_Index)/4)+1
0000FA40 =00000016                  id_Harpoon:		equ ((ptr_Harpoon-Obj_Index)/4)+1
0000FA40 =00000017                  id_Helix:		equ ((ptr_Helix-Obj_Index)/4)+1
0000FA40 =00000018                  id_BasicPlatform:	equ ((ptr_BasicPlatform-Obj_Index)/4)+1		; $18
0000FA40 =00000019                  id_InvStars:		equ ((ptr_InvStars-Obj_Index)/4)+1
0000FA40 =0000001A                  id_CollapseLedge:	equ ((ptr_CollapseLedge-Obj_Index)/4)+1
0000FA40 =0000001B                  id_WaterSurface:	equ ((ptr_WaterSurface-Obj_Index)/4)+1
0000FA40 =0000001C                  id_Scenery:		equ ((ptr_Scenery-Obj_Index)/4)+1
0000FA40 =0000001D                  id_MagicSwitch:		equ ((ptr_MagicSwitch-Obj_Index)/4)+1
0000FA40 =0000001E                  id_BallHog:		equ ((ptr_BallHog-Obj_Index)/4)+1
0000FA40 =0000001F                  id_Crabmeat:		equ ((ptr_Crabmeat-Obj_Index)/4)+1
0000FA40 =00000020                  id_Cannonball:		equ ((ptr_Cannonball-Obj_Index)/4)+1		; $20
0000FA40 =00000021                  id_HUD:			equ ((ptr_HUD-Obj_Index)/4)+1
0000FA40 =00000022                  id_BuzzBomber:		equ ((ptr_BuzzBomber-Obj_Index)/4)+1
0000FA40 =00000023                  id_Missile:		equ ((ptr_Missile-Obj_Index)/4)+1
0000FA40 =00000024                  id_MissileDissolve:	equ ((ptr_MissileDissolve-Obj_Index)/4)+1
0000FA40 =00000025                  id_Rings:		equ ((ptr_Rings-Obj_Index)/4)+1
0000FA40 =00000026                  id_Monitor:		equ ((ptr_Monitor-Obj_Index)/4)+1
0000FA40 =00000027                  id_ExplosionItem:	equ ((ptr_ExplosionItem-Obj_Index)/4)+1
0000FA40 =00000028                  id_Animals:		equ ((ptr_Animals-Obj_Index)/4)+1		; $28
0000FA40 =00000029                  id_Points:		equ ((ptr_Points-Obj_Index)/4)+1
0000FA40 =0000002A                  id_AutoDoor:		equ ((ptr_AutoDoor-Obj_Index)/4)+1
0000FA40 =0000002B                  id_Chopper:		equ ((ptr_Chopper-Obj_Index)/4)+1
0000FA40 =0000002C                  id_Jaws:		equ ((ptr_Jaws-Obj_Index)/4)+1
0000FA40 =0000002D                  id_Burrobot:		equ ((ptr_Burrobot-Obj_Index)/4)+1
0000FA40 =0000002E                  id_PowerUp:		equ ((ptr_PowerUp-Obj_Index)/4)+1
0000FA40 =0000002F                  id_LargeGrass:		equ ((ptr_LargeGrass-Obj_Index)/4)+1
0000FA40 =00000030                  id_GlassBlock:		equ ((ptr_GlassBlock-Obj_Index)/4)+1		; $30
0000FA40 =00000031                  id_ChainStomp:		equ ((ptr_ChainStomp-Obj_Index)/4)+1
0000FA40 =00000032                  id_Button:		equ ((ptr_Button-Obj_Index)/4)+1
0000FA40 =00000033                  id_PushBlock:		equ ((ptr_PushBlock-Obj_Index)/4)+1
0000FA40 =00000034                  id_TitleCard:		equ ((ptr_TitleCard-Obj_Index)/4)+1
0000FA40 =00000035                  id_GrassFire:		equ ((ptr_GrassFire-Obj_Index)/4)+1
0000FA40 =00000036                  id_Spikes:		equ ((ptr_Spikes-Obj_Index)/4)+1
0000FA40 =00000037                  id_RingLoss:		equ ((ptr_RingLoss-Obj_Index)/4)+1
0000FA40 =00000038                  id_ShieldItem:		equ ((ptr_ShieldItem-Obj_Index)/4)+1		; $38
0000FA40 =00000039                  id_GameOverCard:	equ ((ptr_GameOverCard-Obj_Index)/4)+1
0000FA40 =0000003A                  id_GotThroughCard:	equ ((ptr_GotThroughCard-Obj_Index)/4)+1
0000FA40 =0000003B                  id_PurpleRock:		equ ((ptr_PurpleRock-Obj_Index)/4)+1
0000FA40 =0000003C                  id_SmashWall:		equ ((ptr_SmashWall-Obj_Index)/4)+1
0000FA40 =0000003D                  id_BossGreenHill:	equ ((ptr_BossGreenHill-Obj_Index)/4)+1
0000FA40 =0000003E                  id_Prison:		equ ((ptr_Prison-Obj_Index)/4)+1
0000FA40 =0000003F                  id_ExplosionBomb:	equ ((ptr_ExplosionBomb-Obj_Index)/4)+1
0000FA40 =00000040                  id_MotoBug:		equ ((ptr_MotoBug-Obj_Index)/4)+1		; $40
0000FA40 =00000041                  id_Springs:		equ ((ptr_Springs-Obj_Index)/4)+1
0000FA40 =00000042                  id_Newtron:		equ ((ptr_Newtron-Obj_Index)/4)+1
0000FA40 =00000043                  id_Roller:		equ ((ptr_Roller-Obj_Index)/4)+1
0000FA40 =00000044                  id_EdgeWalls:		equ ((ptr_EdgeWalls-Obj_Index)/4)+1
0000FA40 =00000045                  id_SideStomp:		equ ((ptr_SideStomp-Obj_Index)/4)+1
0000FA40 =00000046                  id_MarbleBrick:		equ ((ptr_MarbleBrick-Obj_Index)/4)+1
0000FA40 =00000047                  id_Bumper:		equ ((ptr_Bumper-Obj_Index)/4)+1
0000FA40 =00000048                  id_BossBall:		equ ((ptr_BossBall-Obj_Index)/4)+1		; $48
0000FA40 =00000049                  id_WaterSound:		equ ((ptr_WaterSound-Obj_Index)/4)+1
0000FA40 =0000004A                  id_VanishSonic:		equ ((ptr_VanishSonic-Obj_Index)/4)+1
0000FA40 =0000004B                  id_GiantRing:		equ ((ptr_GiantRing-Obj_Index)/4)+1
0000FA40 =0000004C                  id_GeyserMaker:		equ ((ptr_GeyserMaker-Obj_Index)/4)+1
0000FA40 =0000004D                  id_LavaGeyser:		equ ((ptr_LavaGeyser-Obj_Index)/4)+1
0000FA40 =0000004E                  id_SpShieldItem:		equ ((ptr_SpShieldItem-Obj_Index)/4)+1
0000FA40 =0000004F                  id_Obj4F:		equ ((ptr_Obj4F-Obj_Index)/4)+1
0000FA40 =00000050                  id_Yadrin:		equ ((ptr_Yadrin-Obj_Index)/4)+1		; $50
0000FA40 =00000051                  id_SmashBlock:		equ ((ptr_SmashBlock-Obj_Index)/4)+1
0000FA40 =00000052                  id_MovingBlock:		equ ((ptr_MovingBlock-Obj_Index)/4)+1
0000FA40 =00000053                  id_CollapseFloor:	equ ((ptr_CollapseFloor-Obj_Index)/4)+1
0000FA40 =00000054                  id_LavaTag:		equ ((ptr_LavaTag-Obj_Index)/4)+1
0000FA40 =00000055                  id_Basaran:		equ ((ptr_Basaran-Obj_Index)/4)+1
0000FA40 =00000056                  id_FloatingBlock:	equ ((ptr_FloatingBlock-Obj_Index)/4)+1
0000FA40 =00000057                  id_SpikeBall:		equ ((ptr_SpikeBall-Obj_Index)/4)+1
0000FA40 =00000058                  id_BigSpikeBall:	equ ((ptr_BigSpikeBall-Obj_Index)/4)+1		; $58
0000FA40 =00000059                  id_Elevator:		equ ((ptr_Elevator-Obj_Index)/4)+1
0000FA40 =0000005A                  id_CirclingPlatform:	equ ((ptr_CirclingPlatform-Obj_Index)/4)+1
0000FA40 =0000005B                  id_Staircase:		equ ((ptr_Staircase-Obj_Index)/4)+1
0000FA40 =0000005C                  id_Pylon:		equ ((ptr_Pylon-Obj_Index)/4)+1
0000FA40 =0000005D                  id_Fan:			equ ((ptr_Fan-Obj_Index)/4)+1
0000FA40 =0000005E                  id_Seesaw:		equ ((ptr_Seesaw-Obj_Index)/4)+1
0000FA40 =0000005F                  id_Bomb:		equ ((ptr_Bomb-Obj_Index)/4)+1
0000FA40 =00000060                  id_Orbinaut:		equ ((ptr_Orbinaut-Obj_Index)/4)+1		; $60
0000FA40 =00000061                  id_LabyrinthBlock:	equ ((ptr_LabyrinthBlock-Obj_Index)/4)+1
0000FA40 =00000062                  id_Gargoyle:		equ ((ptr_Gargoyle-Obj_Index)/4)+1
0000FA40 =00000063                  id_LabyrinthConvey:	equ ((ptr_LabyrinthConvey-Obj_Index)/4)+1
0000FA40 =00000064                  id_Bubble:		equ ((ptr_Bubble-Obj_Index)/4)+1
0000FA40 =00000065                  id_Waterfall:		equ ((ptr_Waterfall-Obj_Index)/4)+1
0000FA40 =00000066                  id_Junction:		equ ((ptr_Junction-Obj_Index)/4)+1
0000FA40 =00000067                  id_RunningDisc:		equ ((ptr_RunningDisc-Obj_Index)/4)+1
0000FA40 =00000068                  id_Conveyor:		equ ((ptr_Conveyor-Obj_Index)/4)+1		; $68
0000FA40 =00000069                  id_SpinPlatform:	equ ((ptr_SpinPlatform-Obj_Index)/4)+1
0000FA40 =0000006A                  id_Saws:		equ ((ptr_Saws-Obj_Index)/4)+1
0000FA40 =0000006B                  id_ScrapStomp:		equ ((ptr_ScrapStomp-Obj_Index)/4)+1
0000FA40 =0000006C                  id_VanishPlatform:	equ ((ptr_VanishPlatform-Obj_Index)/4)+1
0000FA40 =0000006D                  id_Flamethrower:	equ ((ptr_Flamethrower-Obj_Index)/4)+1
0000FA40 =0000006E                  id_Electro:		equ ((ptr_Electro-Obj_Index)/4)+1
0000FA40 =0000006F                  id_SpinConvey:		equ ((ptr_SpinConvey-Obj_Index)/4)+1
0000FA40 =00000070                  id_Girder:		equ ((ptr_Girder-Obj_Index)/4)+1		; $70
0000FA40 =00000071                  id_Invisibarrier:	equ ((ptr_Invisibarrier-Obj_Index)/4)+1
0000FA40 =00000072                  id_Teleport:		equ ((ptr_Teleport-Obj_Index)/4)+1
0000FA40 =00000073                  id_BossMarble:		equ ((ptr_BossMarble-Obj_Index)/4)+1
0000FA40 =00000074                  id_BossFire:		equ ((ptr_BossFire-Obj_Index)/4)+1
0000FA40 =00000075                  id_BossSpringYard:	equ ((ptr_BossSpringYard-Obj_Index)/4)+1
0000FA40 =00000076                  id_BossBlock:		equ ((ptr_BossBlock-Obj_Index)/4)+1
0000FA40 =00000077                  id_BossLabyrinth:	equ ((ptr_BossLabyrinth-Obj_Index)/4)+1
0000FA40 =00000078                  id_Caterkiller:		equ ((ptr_Caterkiller-Obj_Index)/4)+1		; $78
0000FA40 =00000079                  id_Lamppost:		equ ((ptr_Lamppost-Obj_Index)/4)+1
0000FA40 =0000007A                  id_BossStarLight:	equ ((ptr_BossStarLight-Obj_Index)/4)+1
0000FA40 =0000007B                  id_BossSpikeball:	equ ((ptr_BossSpikeball-Obj_Index)/4)+1
0000FA40 =0000007C                  id_RingFlash:		equ ((ptr_RingFlash-Obj_Index)/4)+1
0000FA40 =0000007D                  id_HiddenBonus:		equ ((ptr_HiddenBonus-Obj_Index)/4)+1
0000FA40 =0000007E                  id_SSResult:		equ ((ptr_SSResult-Obj_Index)/4)+1
0000FA40 =0000007F                  id_SSRChaos:		equ ((ptr_SSRChaos-Obj_Index)/4)+1
0000FA40 =00000080                  id_ContScrItem:		equ ((ptr_ContScrItem-Obj_Index)/4)+1		; $80
0000FA40 =00000081                  id_ContSonic:		equ ((ptr_ContSonic-Obj_Index)/4)+1
0000FA40 =00000082                  id_ScrapEggman:		equ ((ptr_ScrapEggman-Obj_Index)/4)+1
0000FA40 =00000083                  id_FalseFloor:		equ ((ptr_FalseFloor-Obj_Index)/4)+1
0000FA40 =00000084                  id_EggmanCylinder:	equ ((ptr_EggmanCylinder-Obj_Index)/4)+1
0000FA40 =00000085                  id_BossFinal:		equ ((ptr_BossFinal-Obj_Index)/4)+1
0000FA40 =00000086                  id_BossPlasma:		equ ((ptr_BossPlasma-Obj_Index)/4)+1
0000FA40 =00000087                  id_EndSonic:		equ ((ptr_EndSonic-Obj_Index)/4)+1
0000FA40 =00000088                  id_EndChaos:		equ ((ptr_EndChaos-Obj_Index)/4)+1		; $88
0000FA40 =00000089                  id_EndSTH:		equ ((ptr_EndSTH-Obj_Index)/4)+1
0000FA40 =0000008A                  id_CreditsText:		equ ((ptr_CreditsText-Obj_Index)/4)+1
0000FA40 =0000008B                  id_EndEggman:		equ ((ptr_EndEggman-Obj_Index)/4)+1
0000FA40 =0000008C                  id_TryChaos:		equ ((ptr_TryChaos-Obj_Index)/4)+1
0000FA40 =0000008C                  id_TryChaos:		equ ((ptr_TryChaos-Obj_Index)/4)+1
0000FA40                            
0000FA40                            		include	"_incObj\sub ObjectFall.asm"
0000FA40                            ; ---------------------------------------------------------------------------
0000FA40                            ; Subroutine to	make an	object fall downwards, increasingly fast
0000FA40                            ; ---------------------------------------------------------------------------
0000FA40                            
0000FA40                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000FA40                            
0000FA40                            
0000FA40                            ObjectFall:
0000FA40 0C28 0050 0012             		cmpi.b	#$50,obVelY(a0)
0000FA46 6700                       		beq.s	@donothing
0000FA48 3028 0010                  		move.w	obVelX(a0),d0
0000FA4C 48C0                       		ext.l	d0
0000FA4E E188                       		lsl.l	#8,d0
0000FA50 D1A8 0008                  		add.l	d0,obX(a0)
0000FA54 0C68 0FC8 0012                     cmp.w   #$FC8,obVelY(a0)   ; check if Sonic's Y speed is lower than this value
0000FA5A 6F00                               ble.s   @skipline       ; if yes, branch
0000FA5C 317C 0FC8 0012                     move.w  #$FC8,obVelY(a0)    ; alter Sonic's Y speed
0000FA62                                @skipline:		
0000FA62 3028 0012                  		move.w	obVelY(a0),d0
0000FA66 0668 0038 0012             		addi.w	#$38,obVelY(a0)	; increase vertical speed
0000FA6C 48C0                       		ext.l	d0
0000FA6E E188                       		lsl.l	#8,d0
0000FA70 D1A8 000C                  		add.l	d0,obY(a0)
0000FA74 4E75                       		rts	
0000FA76                            	
0000FA76                            	@donothing:
0000FA76 4E75                       		rts
0000FA78                            
0000FA78                            ; End of function ObjectFall
0000FA78                            ; End of function ObjectFall
0000FA78                            		include	"_incObj\sub SpeedToPos.asm"
0000FA78                            ; ---------------------------------------------------------------------------
0000FA78                            ; Subroutine translating object	speed to update	object position
0000FA78                            ; ---------------------------------------------------------------------------
0000FA78                            
0000FA78                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000FA78                            
0000FA78                            
0000FA78                            SpeedToPos:
0000FA78 4CA8 0005 0010             		movem.w	obVelX(a0),d0/d2
0000FA7E E188                       		lsl.l	#8,d0
0000FA80 D1A8 0008                  		add.l	d0,obX(a0)
0000FA84 E18A                       		lsl.l	#8,d2
0000FA86 D5A8 000C                  		add.l	d2,obY(a0)
0000FA8A 4E75                       		rts
0000FA8C                            ; End of function SpeedToPos
0000FA8C                            ; End of function SpeedToPos
0000FA8C                            		include	"_incObj\sub DisplaySprite.asm"
0000FA8C                            ; ---------------------------------------------------------------------------
0000FA8C                            ; Subroutine to    display    a sprite/object, when a0 is the    object RAM
0000FA8C                            ; ---------------------------------------------------------------------------
0000FA8C                            
0000FA8C                            ; ||||||||||||||| S U B    R O U T    I N E |||||||||||||||||||||||||||||||||||||||
0000FA8C                            
0000FA8C                            
0000FA8C                            DisplaySprite:
0000FA8C 43F8 AC00                          lea    (v_spritequeue).w,a1
0000FA90 D2E8 0018                          adda.w  obpriority(a0),a1 ; get sprite priority
0000FA94 0C51 007E                          cmpi.w    #$7E,(a1)    ; is this part of the queue full?
0000FA98 6400                               bcc.s    DSpr_Full    ; if yes, branch
0000FA9A 5451                               addq.w    #2,(a1)        ; increment sprite count
0000FA9C D2D1                               adda.w    (a1),a1        ; jump to empty position
0000FA9E 3288                               move.w    a0,(a1)        ; insert RAM address for object
0000FAA0                            
0000FAA0                                DSpr_Full:
0000FAA0 4E75                               rts    
0000FAA2                            
0000FAA2                            ; End of function DisplaySprite
0000FAA2                            
0000FAA2                            
0000FAA2                            ; ---------------------------------------------------------------------------
0000FAA2                            ; Subroutine to    display    a 2nd sprite/object, when a1 is    the object RAM
0000FAA2                            ; ---------------------------------------------------------------------------
0000FAA2                            
0000FAA2                            ; ||||||||||||||| S U B    R O U T    I N E |||||||||||||||||||||||||||||||||||||||
0000FAA2                            
0000FAA2                            
0000FAA2                            DisplaySprite1:
0000FAA2 45F8 AC00                          lea    (v_spritequeue).w,a2
0000FAA6 D4E9 0018                          adda.w  obpriority(a1),a2
0000FAAA 0C52 007E                          cmpi.w    #$7E,(a2)
0000FAAE 6400                               bcc.s    DSpr1_Full
0000FAB0 5452                               addq.w    #2,(a2)
0000FAB2 D4D2                               adda.w    (a2),a2
0000FAB4 3489                               move.w    a1,(a2)
0000FAB6                            
0000FAB6                                DSpr1_Full:
0000FAB6 4E75                               rts    
0000FAB8                            
0000FAB8                            ; End of function DisplaySprite1
0000FAB8                            
0000FAB8                            ; ---------------------------------------------------------------------------
0000FAB8                            ; Subroutine to display a sprite/object, when a0 is the object RAM
0000FAB8                            ; and d0 is already (priority/2)&$380
0000FAB8                            ; ---------------------------------------------------------------------------
0000FAB8                            
0000FAB8                            ; loc_16530:
0000FAB8                            DisplaySprite2:
0000FAB8 43F8 AC00                      lea    (v_spritequeue).w,a1
0000FABC D2C0                           adda.w    d0,a1
0000FABE 0C51 007E                      cmpi.w    #$7E,(a1)
0000FAC2 6400                           bhs.s    return_16542
0000FAC4 5451                           addq.w    #2,(a1)
0000FAC6 D2D1                           adda.w    (a1),a1
0000FAC8 3288                           move.w    a0,(a1)
0000FACA                            
0000FACA                            return_16542:
0000FACA 4E75                           rts
0000FACA 4E75                           rts
0000FACC                            		include	"_incObj\sub DeleteObject.asm"
0000FACC                            ; ---------------------------------------------------------------------------
0000FACC                            ; Subroutine to	delete an object
0000FACC                            ; ---------------------------------------------------------------------------
0000FACC                            
0000FACC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000FACC                            
0000FACC                            
0000FACC                            DeleteObject:
0000FACC 2248                       		movea.l	a0,a1		; move object RAM address to (a1)
0000FACE                            
0000FACE                            DeleteChild:				; child objects are already in (a1)
0000FACE 7200                       		moveq	#0,d1
0000FAD0 700F                       		moveq	#$F,d0
0000FAD2                            
0000FAD2                            	DelObj_Loop:
0000FAD2 22C1                       		move.l	d1,(a1)+	; clear	the object RAM
0000FAD4 51C8 FFFC                  		dbf	d0,DelObj_Loop	; repeat for length of object RAM
0000FAD8 4E75                       		rts	
0000FADA                            
0000FADA                            ; End of function DeleteObject
0000FADA                            ; End of function DeleteObject
0000FADA                            
0000FADA                            ; ===========================================================================
0000FADA 0000 0000                  BldSpr_ScrPos:	dc.l 0				; blank
0000FADE 00FF F700                  		dc.l v_screenposx&$FFFFFF	; main screen x-position
0000FAE2 00FF F708                  		dc.l v_bgscreenposx&$FFFFFF	; background x-position	1
0000FAE6 00FF F718                  		dc.l v_bg3screenposx&$FFFFFF	; background x-position	2
0000FAEA                            ; ---------------------------------------------------------------------------
0000FAEA                            ; Subroutine to	convert	mappings (etc) to proper Megadrive sprites
0000FAEA                            ; ---------------------------------------------------------------------------
0000FAEA                            
0000FAEA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000FAEA                            
0000FAEA                            
0000FAEA                            BuildSprites:
0000FAEA 45F8 F800                  		lea	(v_spritetablebuffer).w,a2 ; set address for sprite table
0000FAEE 7A00                       		moveq	#0,d5
0000FAF0 49F8 AC00                  		lea	(v_spritequeue).w,a4
0000FAF4 7E07                       		moveq	#7,d7
0000FAF6                            
0000FAF6                            	@priorityLoop:
0000FAF6 4A54                       		tst.w	(a4)	; are there objects left to draw?
0000FAF8 6700 0000                  		beq.w	@nextPriority	; if not, branch
0000FAFC 7C02                       		moveq	#2,d6
0000FAFE                            
0000FAFE                            	@objectLoop:
0000FAFE 3074 6000                  		movea.w	(a4,d6.w),a0	; load object ID
0000FB02 4A10                       		tst.b	(a0)		; if null, branch
0000FB04 6700 0000                  		beq.w	@skipObject
0000FB08 08A8 0007 0001             		bclr	#7,obRender(a0)		; set as not visible
0000FB0E                            
0000FB0E 1028 0001                  		move.b	obRender(a0),d0
0000FB12 1800                       		move.b	d0,d4
0000FB14 0240 000C                  		andi.w	#$C,d0		; get drawing coordinates
0000FB18 6700                       		beq.s	@screenCoords	; branch if 0 (screen coordinates)
0000FB1A 227B 00BE                  		movea.l	BldSpr_ScrPos(pc,d0.w),a1
0000FB1E                            	; check object bounds
0000FB1E 7000                       		moveq	#0,d0
0000FB20 1028 0014                  		move.b	obActWid(a0),d0
0000FB24 3628 0008                  		move.w	obX(a0),d3
0000FB28 9651                       		sub.w	(a1),d3
0000FB2A 3203                       		move.w	d3,d1
0000FB2C D240                       		add.w	d0,d1
0000FB2E 6B00 0000                  		bmi.w	@skipObject	; left edge out of bounds
0000FB32 3203                       		move.w	d3,d1
0000FB34 9240                       		sub.w	d0,d1
0000FB36 0C41 0140                  		cmpi.w	#320,d1
0000FB3A 6C00                       		bge.s	@skipObject	; right edge out of bounds
0000FB3C 0643 0080                  		addi.w	#128,d3		; VDP sprites start at 128px
0000FB40                            
0000FB40 0804 0004                  		btst	#4,d4		; is assume height flag on?
0000FB44 6700                       		beq.s	@assumeHeight	; if yes, branch
0000FB46 7000                       		moveq	#0,d0
0000FB48 1028 0016                  		move.b	obHeight(a0),d0
0000FB4C 3428 000C                  		move.w	obY(a0),d2
0000FB50 9469 0004                  		sub.w	4(a1),d2
0000FB54 3202                       		move.w	d2,d1
0000FB56 D240                       		add.w	d0,d1
0000FB58 6B00                       		bmi.s	@skipObject	; top edge out of bounds
0000FB5A 3202                       		move.w	d2,d1
0000FB5C 9240                       		sub.w	d0,d1
0000FB5E 0C41 00E0                  		cmpi.w	#224,d1
0000FB62 6C00                       		bge.s	@skipObject
0000FB64 0642 0080                  		addi.w	#128,d2		; VDP sprites start at 128px
0000FB68 6000                       		bra.s	@drawObject
0000FB6A                            ; ===========================================================================
0000FB6A                            
0000FB6A                            	@screenCoords:
0000FB6A 3428 000A                  		move.w	$A(a0),d2	; special variable for screen Y
0000FB6E 3628 0008                  		move.w	obX(a0),d3
0000FB72 6000                       		bra.s	@drawObject
0000FB74                            ; ===========================================================================
0000FB74                            
0000FB74                            	@assumeHeight:
0000FB74 3428 000C                  		move.w	obY(a0),d2
0000FB78 9469 0004                  		sub.w	obMap(a1),d2
0000FB7C 0642 0080                  		addi.w	#$80,d2
0000FB80 0C42 0060                  		cmpi.w	#$60,d2
0000FB84 6500                       		blo.s	@skipObject
0000FB86 0C42 0180                  		cmpi.w	#$180,d2
0000FB8A 6400                       		bhs.s	@skipObject
0000FB8C                            
0000FB8C                            	@drawObject:
0000FB8C 2268 0004                  		movea.l	obMap(a0),a1
0000FB90 7200                       		moveq	#0,d1
0000FB92 0804 0005                  		btst	#5,d4
0000FB96 6600                       		bne.s	@drawFrame
0000FB98 1228 001A                  		move.b	$1A(a0),d1
0000FB9C D241                       		add.w	d1,d1					; MJ: changed from byte to word (we want more than 7F sprites)
0000FB9E D2F1 1000                  		adda.w	(a1,d1.w),a1
0000FBA2 7200                       		moveq	#$00,d1					; MJ: clear d1 (because of our byte to word change)
0000FBA4 1219                       		move.b	(a1)+,d1
0000FBA6 5301                       		subq.b	#1,d1
0000FBA8 6B00                       		bmi.s	@setVisible
0000FBAA                            
0000FBAA                            	@drawFrame:
0000FBAA 6100 0000                  		bsr.w	BuildSpr_Draw	; write data from sprite pieces to buffer
0000FBAE                            
0000FBAE                            	@setVisible:
0000FBAE 08E8 0007 0001             		bset	#7,obRender(a0)		; set object as visible
0000FBB4                            
0000FBB4                            	@skipObject:
0000FBB4 5446                       		addq.w	#2,d6
0000FBB6 5554                       		subq.w	#2,(a4)			; number of objects left
0000FBB8 6600 FF44                  		bne.w	@objectLoop
0000FBBC                            
0000FBBC                            	@nextPriority:
0000FBBC 49EC 0080                  		lea	$80(a4),a4
0000FBC0 51CF FF34                  		dbf	d7,@priorityLoop
0000FBC4 11C5 F62C                  		move.b	d5,(v_spritecount).w
0000FBC8 0C05 0050                  		cmpi.b	#$50,d5
0000FBCC 6700                       		beq.s	@spriteLimit
0000FBCE 24BC 0000 0000             		move.l	#0,(a2)
0000FBD4 4E75                       		rts	
0000FBD6                            ; ===========================================================================
0000FBD6                            
0000FBD6                            	@spriteLimit:
0000FBD6 157C 0000 FFFB             		move.b	#0,-5(a2)	; set last sprite link
0000FBDC 4E75                       		rts	
0000FBDE                            ; End of function BuildSprites
0000FBDE                            
0000FBDE                            
0000FBDE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000FBDE                            
0000FBDE                            
0000FBDE                            BuildSpr_Draw:
0000FBDE 3668 0002                  		movea.w	obGfx(a0),a3
0000FBE2 0804 0000                  		btst	#0,d4
0000FBE6 6600                       		bne.s	BuildSpr_FlipX
0000FBE8 0804 0001                  		btst	#1,d4
0000FBEC 6600 0000                  		bne.w	BuildSpr_FlipY
0000FBF0                            ; End of function BuildSpr_Draw
0000FBF0                            
0000FBF0                            
0000FBF0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000FBF0                            
0000FBF0                            
0000FBF0                            BuildSpr_Normal:
0000FBF0 0C05 0050                  		cmpi.b	#$50,d5		; check sprite limit
0000FBF4 6700                       		beq.s	@return
0000FBF6 1019                       		move.b	(a1)+,d0	; get y-offset
0000FBF8 4880                       		ext.w	d0
0000FBFA D042                       		add.w	d2,d0		; add y-position
0000FBFC 34C0                       		move.w	d0,(a2)+	; write to buffer
0000FBFE 14D9                       		move.b	(a1)+,(a2)+	; write sprite size
0000FC00 5205                       		addq.b	#1,d5		; increase sprite counter
0000FC02 14C5                       		move.b	d5,(a2)+	; set as sprite link
0000FC04 1019                       		move.b	(a1)+,d0	; get art tile
0000FC06 E148                       		lsl.w	#8,d0
0000FC08 1019                       		move.b	(a1)+,d0
0000FC0A D04B                       		add.w	a3,d0		; add art tile offset
0000FC0C 34C0                       		move.w	d0,(a2)+	; write to buffer
0000FC0E 1019                       		move.b	(a1)+,d0	; get x-offset
0000FC10 4880                       		ext.w	d0
0000FC12 D043                       		add.w	d3,d0		; add x-position
0000FC14 0240 01FF                  		andi.w	#$1FF,d0	; keep within 512px
0000FC18 6600                       		bne.s	@writeX
0000FC1A 5240                       		addq.w	#1,d0
0000FC1C                            
0000FC1C                            	@writeX:
0000FC1C 34C0                       		move.w	d0,(a2)+	; write to buffer
0000FC1E 51C9 FFD0                  		dbf	d1,BuildSpr_Normal	; process next sprite piece
0000FC22                            
0000FC22                            	@return:
0000FC22 4E75                       		rts	
0000FC24                            ; End of function BuildSpr_Normal
0000FC24                            
0000FC24                            ; ===========================================================================
0000FC24                            
0000FC24                            BuildSpr_FlipX:
0000FC24 0804 0001                  		btst	#1,d4		; is object also y-flipped?
0000FC28 6600 0000                  		bne.w	BuildSpr_FlipXY	; if yes, branch
0000FC2C                            
0000FC2C                            	@loop:
0000FC2C 0C05 0050                  		cmpi.b	#$50,d5		; check sprite limit
0000FC30 6700                       		beq.s	@return
0000FC32 1019                       		move.b	(a1)+,d0	; y position
0000FC34 4880                       		ext.w	d0
0000FC36 D042                       		add.w	d2,d0
0000FC38 34C0                       		move.w	d0,(a2)+
0000FC3A 1819                       		move.b	(a1)+,d4	; size
0000FC3C 14C4                       		move.b	d4,(a2)+	
0000FC3E 5205                       		addq.b	#1,d5		; link
0000FC40 14C5                       		move.b	d5,(a2)+
0000FC42 1019                       		move.b	(a1)+,d0	; art tile
0000FC44 E148                       		lsl.w	#8,d0
0000FC46 1019                       		move.b	(a1)+,d0	
0000FC48 D04B                       		add.w	a3,d0
0000FC4A 0A40 0800                  		eori.w	#$800,d0	; toggle flip-x in VDP
0000FC4E 34C0                       		move.w	d0,(a2)+	; write to buffer
0000FC50 1019                       		move.b	(a1)+,d0	; get x-offset
0000FC52 4880                       		ext.w	d0
0000FC54 4440                       		neg.w	d0			; negate it
0000FC56 D804                       		add.b	d4,d4		; calculate flipped position by size
0000FC58 0244 0018                  		andi.w	#$18,d4
0000FC5C 5044                       		addq.w	#8,d4
0000FC5E 9044                       		sub.w	d4,d0
0000FC60 D043                       		add.w	d3,d0
0000FC62 0240 01FF                  		andi.w	#$1FF,d0	; keep within 512px
0000FC66 6600                       		bne.s	@writeX
0000FC68 5240                       		addq.w	#1,d0
0000FC6A                            
0000FC6A                            	@writeX:
0000FC6A 34C0                       		move.w	d0,(a2)+	; write to buffer
0000FC6C 51C9 FFBE                  		dbf	d1,@loop		; process next sprite piece
0000FC70                            
0000FC70                            	@return:
0000FC70 4E75                       		rts	
0000FC72                            ; ===========================================================================
0000FC72                            
0000FC72                            BuildSpr_FlipY:
0000FC72 0C05 0050                  		cmpi.b	#$50,d5		; check sprite limit
0000FC76 6700                       		beq.s	@return
0000FC78 1019                       		move.b	(a1)+,d0	; get y-offset
0000FC7A 1811                       		move.b	(a1),d4		; get size
0000FC7C 4880                       		ext.w	d0
0000FC7E 4440                       		neg.w	d0		; negate y-offset
0000FC80 E70C                       		lsl.b	#3,d4	; calculate flip offset
0000FC82 0244 0018                  		andi.w	#$18,d4
0000FC86 5044                       		addq.w	#8,d4
0000FC88 9044                       		sub.w	d4,d0
0000FC8A D042                       		add.w	d2,d0	; add y-position
0000FC8C 34C0                       		move.w	d0,(a2)+	; write to buffer
0000FC8E 14D9                       		move.b	(a1)+,(a2)+	; size
0000FC90 5205                       		addq.b	#1,d5
0000FC92 14C5                       		move.b	d5,(a2)+	; link
0000FC94 1019                       		move.b	(a1)+,d0	; art tile
0000FC96 E148                       		lsl.w	#8,d0
0000FC98 1019                       		move.b	(a1)+,d0
0000FC9A D04B                       		add.w	a3,d0
0000FC9C 0A40 1000                  		eori.w	#$1000,d0	; toggle flip-y in VDP
0000FCA0 34C0                       		move.w	d0,(a2)+
0000FCA2 1019                       		move.b	(a1)+,d0	; x-position
0000FCA4 4880                       		ext.w	d0
0000FCA6 D043                       		add.w	d3,d0
0000FCA8 0240 01FF                  		andi.w	#$1FF,d0
0000FCAC 6600                       		bne.s	@writeX
0000FCAE 5240                       		addq.w	#1,d0
0000FCB0                            
0000FCB0                            	@writeX:
0000FCB0 34C0                       		move.w	d0,(a2)+	; write to buffer
0000FCB2 51C9 FFBE                  		dbf	d1,BuildSpr_FlipY	; process next sprite piece
0000FCB6                            
0000FCB6                            	@return:
0000FCB6 4E75                       		rts	
0000FCB8                            ; ===========================================================================
0000FCB8                            
0000FCB8                            BuildSpr_FlipXY:
0000FCB8 0C05 0050                  		cmpi.b	#$50,d5		; check sprite limit
0000FCBC 6700                       		beq.s	@return
0000FCBE 1019                       		move.b	(a1)+,d0	; calculated flipped y
0000FCC0 1811                       		move.b	(a1),d4
0000FCC2 4880                       		ext.w	d0
0000FCC4 4440                       		neg.w	d0
0000FCC6 E70C                       		lsl.b	#3,d4
0000FCC8 0244 0018                  		andi.w	#$18,d4
0000FCCC 5044                       		addq.w	#8,d4
0000FCCE 9044                       		sub.w	d4,d0
0000FCD0 D042                       		add.w	d2,d0
0000FCD2 34C0                       		move.w	d0,(a2)+	; write to buffer
0000FCD4 1819                       		move.b	(a1)+,d4	; size
0000FCD6 14C4                       		move.b	d4,(a2)+	; link
0000FCD8 5205                       		addq.b	#1,d5
0000FCDA 14C5                       		move.b	d5,(a2)+	; art tile
0000FCDC 1019                       		move.b	(a1)+,d0
0000FCDE E148                       		lsl.w	#8,d0
0000FCE0 1019                       		move.b	(a1)+,d0
0000FCE2 D04B                       		add.w	a3,d0
0000FCE4 0A40 1800                  		eori.w	#$1800,d0	; toggle flip-x/y in VDP
0000FCE8 34C0                       		move.w	d0,(a2)+
0000FCEA 1019                       		move.b	(a1)+,d0	; calculate flipped x
0000FCEC 4880                       		ext.w	d0
0000FCEE 4440                       		neg.w	d0
0000FCF0 D804                       		add.b	d4,d4
0000FCF2 0244 0018                  		andi.w	#$18,d4
0000FCF6 5044                       		addq.w	#8,d4
0000FCF8 9044                       		sub.w	d4,d0
0000FCFA D043                       		add.w	d3,d0
0000FCFC 0240 01FF                  		andi.w	#$1FF,d0
0000FD00 6600                       		bne.s	@writeX
0000FD02 5240                       		addq.w	#1,d0
0000FD04                            
0000FD04                            	@writeX:
0000FD04 34C0                       		move.w	d0,(a2)+	; write to buffer
0000FD06 51C9 FFB0                  		dbf	d1,BuildSpr_FlipXY	; process next sprite piece
0000FD0A                            
0000FD0A                            	@return:
0000FD0A 4E75                       		rts	
0000FD0C                            
0000FD0C                            		include	"_incObj\sub ChkObjectVisible.asm"
0000FD0C                            ; ---------------------------------------------------------------------------
0000FD0C                            ; Subroutine to	check if an object is off screen
0000FD0C                            
0000FD0C                            ; output:
0000FD0C                            ;	d0 = flag set if object is off screen
0000FD0C                            ; ---------------------------------------------------------------------------
0000FD0C                            
0000FD0C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000FD0C                            
0000FD0C                            
0000FD0C                            ChkObjectVisible:
0000FD0C 3028 0008                  		move.w	obX(a0),d0	; get object x-position
0000FD10 9078 F700                  		sub.w	(v_screenposx).w,d0 ; subtract screen x-position
0000FD14 6B00                       		bmi.s	@offscreen
0000FD16 0C40 0140                  		cmpi.w	#320,d0		; is object on the screen?
0000FD1A 6C00                       		bge.s	@offscreen	; if not, branch
0000FD1C                            
0000FD1C 3228 000C                  		move.w	obY(a0),d1	; get object y-position
0000FD20 9278 F704                  		sub.w	(v_screenposy).w,d1 ; subtract screen y-position
0000FD24 6B00                       		bmi.s	@offscreen
0000FD26 0C41 00E0                  		cmpi.w	#224,d1		; is object on the screen?
0000FD2A 6C00                       		bge.s	@offscreen	; if not, branch
0000FD2C                            
0000FD2C 7000                       		moveq	#0,d0		; set flag to 0
0000FD2E 4E75                       		rts	
0000FD30                            
0000FD30                            	@offscreen:
0000FD30 7001                       		moveq	#1,d0		; set flag to 1
0000FD32 4E75                       		rts	
0000FD34                            ; End of function ChkObjectVisible
0000FD34                            
0000FD34                            ; ---------------------------------------------------------------------------
0000FD34                            ; Subroutine to	check if an object is off screen
0000FD34                            ; More precise than above subroutine, taking width into account
0000FD34                            
0000FD34                            ; output:
0000FD34                            ;	d0 = flag set if object is off screen
0000FD34                            ; ---------------------------------------------------------------------------
0000FD34                            
0000FD34                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000FD34                            
0000FD34                            
0000FD34                            ChkPartiallyVisible:
0000FD34 7200                       		moveq	#0,d1
0000FD36 1228 0014                  		move.b	obActWid(a0),d1
0000FD3A 3028 0008                  		move.w	obX(a0),d0	; get object x-position
0000FD3E 9078 F700                  		sub.w	(v_screenposx).w,d0 ; subtract screen x-position
0000FD42 D041                       		add.w	d1,d0		; add object width
0000FD44 6B00                       		bmi.s	@offscreen2
0000FD46 D241                       		add.w	d1,d1
0000FD48 9041                       		sub.w	d1,d0
0000FD4A 0C40 0140                  		cmpi.w	#320,d0
0000FD4E 6C00                       		bge.s	@offscreen2
0000FD50                            
0000FD50 3228 000C                  		move.w	obY(a0),d1
0000FD54 9278 F704                  		sub.w	(v_screenposy).w,d1
0000FD58 6B00                       		bmi.s	@offscreen2
0000FD5A 0C41 00E0                  		cmpi.w	#224,d1
0000FD5E 6C00                       		bge.s	@offscreen2
0000FD60                            
0000FD60 7000                       		moveq	#0,d0
0000FD62 4E75                       		rts	
0000FD64                            
0000FD64                            	@offscreen2:
0000FD64 7001                       		moveq	#1,d0
0000FD66 4E75                       		rts	
0000FD68                            ; End of function ChkPartiallyVisible
0000FD68                            ; End of function ChkPartiallyVisible
0000FD68                            
0000FD68                            ; ---------------------------------------------------------------------------
0000FD68                            ; Subroutine to	load a level's objects
0000FD68                            ; ---------------------------------------------------------------------------
0000FD68                            
0000FD68                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000FD68                            
0000FD68                            
0000FD68                            ObjPosLoad:
0000FD68 7000                       		moveq	#0,d0
0000FD6A 1038 F76C                  		move.b	(v_opl_routine).w,d0
0000FD6E 303B 0000                  		move.w	OPL_Index(pc,d0.w),d0
0000FD72 4EFB 0000                  		jmp	OPL_Index(pc,d0.w)
0000FD76                            ; End of function ObjPosLoad
0000FD76                            
0000FD76                            ; ===========================================================================
0000FD76 0000                       OPL_Index:	dc.w OPL_Main-OPL_Index
0000FD78 0000                       		dc.w OPL_Next-OPL_Index
0000FD7A                            ; ===========================================================================
0000FD7A                            
0000FD7A                            OPL_Main:
0000FD7A 5438 F76C                  		addq.b	#2,(v_opl_routine).w
0000FD7E 3038 FE10                  		move.w	(v_zone).w,d0
0000FD82 ED08                       		lsl.b	#6,d0
0000FD84 E848                       		lsr.w	#4,d0
0000FD86 41F9 0000 0000             		lea	(ObjPos_Index).l,a0
0000FD8C 2248                       		movea.l	a0,a1
0000FD8E D0F0 0000                  		adda.w	(a0,d0.w),a0
0000FD92 21C8 F770                  		move.l	a0,(v_opl_data).w
0000FD96 21C8 F774                  		move.l	a0,(v_opl_data+4).w
0000FD9A D2F1 0002                  		adda.w	2(a1,d0.w),a1
0000FD9E 21C9 F778                  		move.l	a1,(v_opl_data+8).w
0000FDA2 21C9 F77C                  		move.l	a1,(v_opl_data+$C).w
0000FDA6 45F8 FC00                  		lea	(v_objstate).w,a2
0000FDAA 34FC 0101                  		move.w	#$101,(a2)+
0000FDAE 303C 005E                  		move.w	#$5E,d0
0000FDB2                            
0000FDB2                            OPL_ClrList:
0000FDB2 429A                       		clr.l	(a2)+
0000FDB4 51C8 FFFC                  		dbf	d0,OPL_ClrList	; clear	pre-destroyed object list
0000FDB8                            
0000FDB8 45F8 FC00                  		lea	(v_objstate).w,a2
0000FDBC 7400                       		moveq	#0,d2
0000FDBE 3C38 F700                  		move.w	(v_screenposx).w,d6
0000FDC2 0446 0080                  		subi.w	#$80,d6
0000FDC6 6400                       		bhs.s	loc_D93C
0000FDC8 7C00                       		moveq	#0,d6
0000FDCA                            
0000FDCA                            loc_D93C:
0000FDCA 0246 FF80                  		andi.w	#$FF80,d6
0000FDCE 2078 F770                  		movea.l	(v_opl_data).w,a0
0000FDD2                            
0000FDD2                            loc_D944:
0000FDD2 BC50                       		cmp.w	(a0),d6
0000FDD4 6300                       		bls.s	loc_D956
0000FDD6 4A28 0004                  		tst.b	4(a0)
0000FDDA 6A00                       		bpl.s	loc_D952
0000FDDC 1412                       		move.b	(a2),d2
0000FDDE 5212                       		addq.b	#1,(a2)
0000FDE0                            
0000FDE0                            loc_D952:
0000FDE0 5C48                       		addq.w	#6,a0
0000FDE2 60EE                       		bra.s	loc_D944
0000FDE4                            ; ===========================================================================
0000FDE4                            
0000FDE4                            loc_D956:
0000FDE4 21C8 F770                  		move.l	a0,(v_opl_data).w
0000FDE8 2078 F774                  		movea.l	(v_opl_data+4).w,a0
0000FDEC 0446 0080                  		subi.w	#$80,d6
0000FDF0 6500                       		blo.s	loc_D976
0000FDF2                            
0000FDF2                            loc_D964:
0000FDF2 BC50                       		cmp.w	(a0),d6
0000FDF4 6300                       		bls.s	loc_D976
0000FDF6 4A28 0004                  		tst.b	4(a0)
0000FDFA 6A00                       		bpl.s	loc_D972
0000FDFC 522A 0001                  		addq.b	#1,1(a2)
0000FE00                            
0000FE00                            loc_D972:
0000FE00 5C48                       		addq.w	#6,a0
0000FE02 60EE                       		bra.s	loc_D964
0000FE04                            ; ===========================================================================
0000FE04                            
0000FE04                            loc_D976:
0000FE04 21C8 F774                  		move.l	a0,(v_opl_data+4).w
0000FE08 31FC FFFF F76E             		move.w	#-1,(v_opl_screen).w
0000FE0E                            
0000FE0E                            OPL_Next:
0000FE0E 45F8 FC00                  		lea	(v_objstate).w,a2
0000FE12 7400                       		moveq	#0,d2
0000FE14 3C38 F700                  		move.w	(v_screenposx).w,d6
0000FE18 0246 FF80                  		andi.w	#$FF80,d6
0000FE1C BC78 F76E                  		cmp.w	(v_opl_screen).w,d6
0000FE20 6700 0000                  		beq.w	locret_DA3A
0000FE24 6C00                       		bge.s	loc_D9F6
0000FE26 31C6 F76E                  		move.w	d6,(v_opl_screen).w
0000FE2A 2078 F774                  		movea.l	(v_opl_data+4).w,a0
0000FE2E 0446 0080                  		subi.w	#$80,d6
0000FE32 6500                       		blo.s	loc_D9D2
0000FE34                            
0000FE34                            loc_D9A6:
0000FE34 BC68 FFFA                  		cmp.w	-6(a0),d6
0000FE38 6C00                       		bge.s	loc_D9D2
0000FE3A 5D48                       		subq.w	#6,a0
0000FE3C 4A28 0004                  		tst.b	4(a0)
0000FE40 6A00                       		bpl.s	loc_D9BC
0000FE42 532A 0001                  		subq.b	#1,1(a2)
0000FE46 142A 0001                  		move.b	1(a2),d2
0000FE4A                            
0000FE4A                            loc_D9BC:
0000FE4A 6100 0000                  		bsr.w	loc_DA3C
0000FE4E 6600                       		bne.s	loc_D9C6
0000FE50 5D48                       		subq.w	#6,a0
0000FE52 60E0                       		bra.s	loc_D9A6
0000FE54                            ; ===========================================================================
0000FE54                            
0000FE54                            loc_D9C6:
0000FE54 4A28 0004                  		tst.b	4(a0)
0000FE58 6A00                       		bpl.s	loc_D9D0
0000FE5A 522A 0001                  		addq.b	#1,1(a2)
0000FE5E                            
0000FE5E                            loc_D9D0:
0000FE5E 5C48                       		addq.w	#6,a0
0000FE60                            
0000FE60                            loc_D9D2:
0000FE60 21C8 F774                  		move.l	a0,(v_opl_data+4).w
0000FE64 2078 F770                  		movea.l	(v_opl_data).w,a0
0000FE68 0646 0300                  		addi.w	#$300,d6
0000FE6C                            
0000FE6C                            loc_D9DE:
0000FE6C BC68 FFFA                  		cmp.w	-6(a0),d6
0000FE70 6E00                       		bgt.s	loc_D9F0
0000FE72 4A28 FFFE                  		tst.b	-2(a0)
0000FE76 6A00                       		bpl.s	loc_D9EC
0000FE78 5312                       		subq.b	#1,(a2)
0000FE7A                            
0000FE7A                            loc_D9EC:
0000FE7A 5D48                       		subq.w	#6,a0
0000FE7C 60EE                       		bra.s	loc_D9DE
0000FE7E                            ; ===========================================================================
0000FE7E                            
0000FE7E                            loc_D9F0:
0000FE7E 21C8 F770                  		move.l	a0,(v_opl_data).w
0000FE82 4E75                       		rts	
0000FE84                            ; ===========================================================================
0000FE84                            
0000FE84                            loc_D9F6:
0000FE84 31C6 F76E                  		move.w	d6,(v_opl_screen).w
0000FE88 2078 F770                  		movea.l	(v_opl_data).w,a0
0000FE8C 0646 0280                  		addi.w	#$280,d6
0000FE90                            
0000FE90                            loc_DA02:
0000FE90 BC50                       		cmp.w	(a0),d6
0000FE92 6300                       		bls.s	loc_DA16
0000FE94 4A28 0004                  		tst.b	4(a0)
0000FE98 6A00                       		bpl.s	loc_DA10
0000FE9A 1412                       		move.b	(a2),d2
0000FE9C 5212                       		addq.b	#1,(a2)
0000FE9E                            
0000FE9E                            loc_DA10:
0000FE9E 6100 0000                  		bsr.w	loc_DA3C
0000FEA2 67EC                       		beq.s	loc_DA02
0000FEA4                            
0000FEA4                            loc_DA16:
0000FEA4 21C8 F770                  		move.l	a0,(v_opl_data).w
0000FEA8 2078 F774                  		movea.l	(v_opl_data+4).w,a0
0000FEAC 0446 0300                  		subi.w	#$300,d6
0000FEB0 6500                       		blo.s	loc_DA36
0000FEB2                            
0000FEB2                            loc_DA24:
0000FEB2 BC50                       		cmp.w	(a0),d6
0000FEB4 6300                       		bls.s	loc_DA36
0000FEB6 4A28 0004                  		tst.b	4(a0)
0000FEBA 6A00                       		bpl.s	loc_DA32
0000FEBC 522A 0001                  		addq.b	#1,1(a2)
0000FEC0                            
0000FEC0                            loc_DA32:
0000FEC0 5C48                       		addq.w	#6,a0
0000FEC2 60EE                       		bra.s	loc_DA24
0000FEC4                            ; ===========================================================================
0000FEC4                            
0000FEC4                            loc_DA36:
0000FEC4 21C8 F774                  		move.l	a0,(v_opl_data+4).w
0000FEC8                            
0000FEC8                            locret_DA3A:
0000FEC8 4E75                       		rts	
0000FECA                            ; ===========================================================================
0000FECA                            
0000FECA                            loc_DA3C:
0000FECA 4A28 0004                  		tst.b	4(a0)
0000FECE 6A00                       		bpl.s	OPL_MakeItem
0000FED0 08F2 0007 2002             		bset	#7,2(a2,d2.w)
0000FED6 6700                       		beq.s	OPL_MakeItem
0000FED8 5C48                       		addq.w	#6,a0
0000FEDA 7000                       		moveq	#0,d0
0000FEDC 4E75                       		rts	
0000FEDE                            ; ===========================================================================
0000FEDE                            
0000FEDE                            OPL_MakeItem:
0000FEDE 6100 0000                  		bsr.w	FindFreeObj
0000FEE2 6600                       		bne.s	locret_DA8A
0000FEE4 3358 0008                  		move.w	(a0)+,obX(a1)
0000FEE8 3018                       		move.w	(a0)+,d0
0000FEEA 3200                       		move.w	d0,d1
0000FEEC 0240 0FFF                  		andi.w	#$FFF,d0
0000FEF0 3340 000C                  		move.w	d0,obY(a1)
0000FEF4 E559                       		rol.w	#2,d1
0000FEF6 0201 0003                  		andi.b	#3,d1
0000FEFA 1341 0001                  		move.b	d1,obRender(a1)
0000FEFE 1341 0022                  		move.b	d1,obStatus(a1)
0000FF02 1018                       		move.b	(a0)+,d0
0000FF04 6A00                       		bpl.s	loc_DA80
0000FF06 0200 007F                  		andi.b	#$7F,d0
0000FF0A 1342 0023                  		move.b	d2,obRespawnNo(a1)
0000FF0E                            
0000FF0E                            loc_DA80:
0000FF0E 1280                       		move.b	d0,0(a1)
0000FF10 1358 0028                  		move.b	(a0)+,obSubtype(a1)
0000FF14 7000                       		moveq	#0,d0
0000FF16                            
0000FF16                            locret_DA8A:
0000FF16 4E75                       		rts	
0000FF18                            
0000FF18                            		include	"_incObj\sub FindFreeObj.asm"
0000FF18                            ; ---------------------------------------------------------------------------
0000FF18                            ; Subroutine to find a free object space
0000FF18                            
0000FF18                            ; output:
0000FF18                            ;	a1 = free position in object RAM
0000FF18                            ; ---------------------------------------------------------------------------
0000FF18                            
0000FF18                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000FF18                            
0000FF18                            
0000FF18                            FindFreeObj:
0000FF18 43F8 D800                  		lea	(v_objspace+$800).w,a1 ; start address for object RAM
0000FF1C 303C 005F                  		move.w	#$5F,d0
0000FF20                            
0000FF20                            	FFree_Loop:
0000FF20 4A11                       		tst.b	(a1)		; is object RAM	slot empty?
0000FF22 6700                       		beq.s	FFree_Found	; if yes, branch
0000FF24 43E9 0040                  		lea	$40(a1),a1	; goto next object RAM slot
0000FF28 51C8 FFF6                  		dbf	d0,FFree_Loop	; repeat $5F times
0000FF2C                            
0000FF2C                            	FFree_Found:
0000FF2C 4E75                       		rts	
0000FF2E                            
0000FF2E                            ; End of function FindFreeObj
0000FF2E                            
0000FF2E                            
0000FF2E                            ; ---------------------------------------------------------------------------
0000FF2E                            ; Subroutine to find a free object space AFTER the current one
0000FF2E                            
0000FF2E                            ; output:
0000FF2E                            ;	a1 = free position in object RAM
0000FF2E                            ; ---------------------------------------------------------------------------
0000FF2E                            
0000FF2E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000FF2E                            
0000FF2E                            
0000FF2E                            FindNextFreeObj:
0000FF2E 2248                       		movea.l	a0,a1
0000FF30 303C F000                  		move.w	#$F000,d0
0000FF34 9048                       		sub.w	a0,d0
0000FF36 EC48                       		lsr.w	#6,d0
0000FF38 5340                       		subq.w	#1,d0
0000FF3A 6500                       		bcs.s	NFree_Found
0000FF3C                            
0000FF3C                            	NFree_Loop:
0000FF3C 4A11                       		tst.b	(a1)
0000FF3E 6700                       		beq.s	NFree_Found
0000FF40 43E9 0040                  		lea	$40(a1),a1
0000FF44 51C8 FFF6                  		dbf	d0,NFree_Loop
0000FF48                            
0000FF48                            	NFree_Found:
0000FF48 4E75                       		rts	
0000FF4A                            
0000FF4A                            ; End of function FindNextFreeObj
0000FF4A                            ; End of function FindNextFreeObj
0000FF4A                            		include	"_incObj\41 Springs.asm"
0000FF4A                            ; ---------------------------------------------------------------------------
0000FF4A                            ; Object 41 - springs
0000FF4A                            ; ---------------------------------------------------------------------------
0000FF4A                            
0000FF4A                            Springs:
0000FF4A 7000                       		moveq	#0,d0
0000FF4C 1028 0024                  		move.b	obRoutine(a0),d0
0000FF50 323B 0000                  		move.w	Spring_Index(pc,d0.w),d1
0000FF54 4EBB 1000                  		jsr	Spring_Index(pc,d1.w)
0000FF58 6100 FB32                  		bsr.w	DisplaySprite
0000FF7A 4E75                       		rts	
0000FF7C                            ; ===========================================================================
0000FF7C 0000                       Spring_Index:	dc.w Spring_Main-Spring_Index
0000FF7E 0000                       		dc.w Spring_Up-Spring_Index
0000FF80 0000                       		dc.w Spring_AniUp-Spring_Index
0000FF82 0000                       		dc.w Spring_ResetUp-Spring_Index
0000FF84 0000                       		dc.w Spring_LR-Spring_Index
0000FF86 0000                       		dc.w Spring_AniLR-Spring_Index
0000FF88 0000                       		dc.w Spring_ResetLR-Spring_Index
0000FF8A 0000                       		dc.w Spring_Dwn-Spring_Index
0000FF8C 0000                       		dc.w Spring_AniDwn-Spring_Index
0000FF8E 0000                       		dc.w Spring_ResetDwn-Spring_Index
0000FF90                            
0000FF90 =00000030                  spring_pow:	equ $30			; power of current spring
0000FF90                            
0000FF90 F000                       Spring_Powers:	dc.w -$1000		; power	of red spring
0000FF92 F600                       		dc.w -$A00		; power	of yellow spring
0000FF94                            ; ===========================================================================
0000FF94                            
0000FF94                            Spring_Main:	; Routine 0
0000FF94 5428 0024                  		addq.b	#2,obRoutine(a0)
0000FF98 217C 0000 0000 0004        		move.l	#Map_Spring,obMap(a0)
0000FFA0 317C 0523 0002             		move.w	#$523,obGfx(a0)
0000FFA6 0028 0004 0001             		ori.b	#4,obRender(a0)
0000FFAC 117C 0010 0014             		move.b	#$10,obActWid(a0)
0000FFB2 317C 0200 0018             		move.w	#$200,obPriority(a0)
0000FFB8 1028 0028                  		move.b	obSubtype(a0),d0
0000FFBC 0800 0004                  		btst	#4,d0		; does the spring face left/right?
0000FFC0 6700                       		beq.s	Spring_NotLR	; if not, branch
0000FFC2                            
0000FFC2 117C 0008 0024             		move.b	#8,obRoutine(a0) ; use "Spring_LR" routine
0000FFC8 117C 0001 001C             		move.b	#1,obAnim(a0)
0000FFCE 117C 0003 001A             		move.b	#3,obFrame(a0)
0000FFD4 317C 0533 0002             		move.w	#$533,obGfx(a0)
0000FFDA 117C 0008 0014             		move.b	#8,obActWid(a0)
0000FFE0                            
0000FFE0                            	Spring_NotLR:
0000FFE0 0800 0005                  		btst	#5,d0		; does the spring face downwards?
0000FFE4 6700                       		beq.s	Spring_NotDwn	; if not, branch
0000FFE6                            
0000FFE6 117C 000E 0024             		move.b	#$E,obRoutine(a0) ; use "Spring_Dwn" routine
0000FFEC 08E8 0001 0022             		bset	#1,obStatus(a0)
0000FFF2                            
0000FFF2                            	Spring_NotDwn:
0000FFF2 0800 0001                  		btst	#1,d0
0000FFF6 6700                       		beq.s	loc_DB72
0000FFF8 08E8 0005 0002             		bset	#5,obGfx(a0)
0000FFFE                            
0000FFFE                            loc_DB72:
0000FFFE 0240 000F                  		andi.w	#$F,d0
00010002 317B 008C 0030             		move.w	Spring_Powers(pc,d0.w),spring_pow(a0)
00010008 4E75                       		rts	
0001000A                            ; ===========================================================================
0001000A                            
0001000A                            Spring_Up:	; Routine 2
0001000A 323C 001B                  		move.w	#$1B,d1
0001000E 343C 0008                  		move.w	#8,d2
00010012 363C 0010                  		move.w	#$10,d3
00010016 3828 0008                  		move.w	obX(a0),d4
0001001A 6100 0000                  		bsr.w	SolidObject
0001001E 4A28 0025                  		tst.b	obSolid(a0)	; is Sonic on top of the spring?
00010022 6600                       		bne.s	Spring_BounceUp	; if yes, branch
00010024 4E75                       		rts	
00010026                            ; ===========================================================================
00010026                            
00010026                            Spring_BounceUp:
00010026 5428 0024                  		addq.b	#2,obRoutine(a0)
0001002A 5069 000C                  		addq.w	#8,obY(a1)
0001002E 3368 0030 0012             		move.w	spring_pow(a0),obVelY(a1) ; move Sonic upwards
00010034 08E9 0001 0022             		bset	#1,obStatus(a1)
0001003A 08A9 0003 0022             		bclr	#3,obStatus(a1)
00010040 137C 0000 001C             		move.b	#id_Spring,obAnim(a1) ; use "bouncing" animation
00010046 137C 0002 0024             		move.b	#2,obRoutine(a1)
0001004C 08A8 0003 0022             		bclr	#3,obStatus(a0)
00010052 4228 0025                  		clr.b	obSolid(a0)
00010060                            
00010060                            Spring_AniUp:	; Routine 4
00010060 43F9 0000 0000             		lea	(Ani_Spring).l,a1
00010066 6000 CAE6                  		bra.w	AnimateSprite
0001006A                            ; ===========================================================================
0001006A                            
0001006A                            Spring_ResetUp:	; Routine 6
0001006A 117C 0001 001D             		move.b	#1,obNextAni(a0) ; reset animation
00010070 5928 0024                  		subq.b	#4,obRoutine(a0) ; goto "Spring_Up" routine
00010074 4E75                       		rts	
00010076                            ; ===========================================================================
00010076                            
00010076                            Spring_LR:	; Routine 8
00010076 323C 0013                  		move.w	#$13,d1
0001007A 343C 000E                  		move.w	#$E,d2
0001007E 363C 000F                  		move.w	#$F,d3
00010082 3828 0008                  		move.w	obX(a0),d4
00010086 6100 0000                  		bsr.w	SolidObject
0001008A 0C28 0002 0024             		cmpi.b	#2,obRoutine(a0)
00010090 6600                       		bne.s	loc_DC0C
00010092 117C 0008 0024             		move.b	#8,obRoutine(a0)
00010098                            
00010098                            loc_DC0C:
00010098 0828 0005 0022             		btst	#5,obStatus(a0)
0001009E 6600                       		bne.s	Spring_BounceLR
000100A0 4E75                       		rts	
000100A2                            ; ===========================================================================
000100A2                            
000100A2                            Spring_BounceLR:
000100A2 5428 0024                  		addq.b	#2,obRoutine(a0)
000100A6 3368 0030 0010             		move.w	spring_pow(a0),obVelX(a1) ; move Sonic to the left
000100AC 5069 0008                  		addq.w	#8,obX(a1)
000100B0 0828 0000 0022             		btst	#0,obStatus(a0)	; is object flipped?
000100B6 6600                       		bne.s	Spring_Flipped	; if yes, branch
000100B8 0469 0010 0008             		subi.w	#$10,obX(a1)
000100BE 4469 0010                  		neg.w	obVelX(a1)	; move Sonic to	the right
000100C2                            
000100C2                            	Spring_Flipped:
000100C2 337C 000F 003E             		move.w	#$F,$3E(a1)
000100C8 3369 0010 0020             		move.w	obVelX(a1),obInertia(a1)
000100CE 0869 0000 0022             		bchg	#0,obStatus(a1)
000100D4 0829 0002 0022             		btst	#2,obStatus(a1)
000100DA 6600                       		bne.s	loc_DC56
000100DC 137C 0000 001C             		move.b	#id_Walk,obAnim(a1)	; use walking animation
000100E2                            
000100E2                            loc_DC56:
000100E2 08A8 0005 0022             		bclr	#5,obStatus(a0)
000100E8 08A9 0005 0022             		bclr	#5,obStatus(a1)
000100F8                            
000100F8                            Spring_AniLR:	; Routine $A
000100F8 4278 C904                  		clr.w ($FFFFC904).w	; clear screen delay counter
000100FC 43F9 0000 0000             		lea	(Ani_Spring).l,a1
00010102 6000 CA4A                  		bra.w	AnimateSprite
00010106                            ; ===========================================================================
00010106                            
00010106                            Spring_ResetLR:	; Routine $C
00010106 117C 0002 001D             		move.b	#2,obNextAni(a0) ; reset animation
0001010C 5928 0024                  		subq.b	#4,obRoutine(a0) ; goto "Spring_LR" routine
00010110 4E75                       		rts	
00010112                            ; ===========================================================================
00010112                            
00010112                            Spring_Dwn:	; Routine $E
00010112 323C 001B                  		move.w	#$1B,d1
00010116 343C 0008                  		move.w	#8,d2
0001011A 363C 0010                  		move.w	#$10,d3
0001011E 3828 0008                  		move.w	obX(a0),d4
00010122 6100 0000                  		bsr.w	SolidObject
00010126 0C28 0002 0024             		cmpi.b	#2,obRoutine(a0)
0001012C 6600                       		bne.s	loc_DCA4
0001012E 117C 000E 0024             		move.b	#$E,obRoutine(a0)
00010134                            
00010134                            loc_DCA4:
00010134 4A28 0025                  		tst.b	obSolid(a0)
00010138 6600                       		bne.s	locret_DCAE
0001013A 4A44                       		tst.w	d4
0001013C 6B00                       		bmi.s	Spring_BounceDwn
0001013E                            
0001013E                            locret_DCAE:
0001013E 4E75                       		rts	
00010140                            ; ===========================================================================
00010140                            
00010140                            Spring_BounceDwn:
00010140 5428 0024                  		addq.b	#2,obRoutine(a0)
00010144 5169 000C                  		subq.w	#8,obY(a1)
00010148 3368 0030 0012             		move.w	spring_pow(a0),obVelY(a1)
0001014E 4469 0012                  		neg.w	obVelY(a1)	; move Sonic downwards
00010152 08E9 0001 0022             		bset	#1,obStatus(a1)
00010158 08A9 0003 0022             		bclr	#3,obStatus(a1)
0001015E 137C 0002 0024             		move.b	#2,obRoutine(a1)
00010164 08A8 0003 0022             		bclr	#3,obStatus(a0)
0001016A 4228 0025                  		clr.b	obSolid(a0)
00010178                            
00010178                            Spring_AniDwn:	; Routine $10
00010178 43F9 0000 0000             		lea	(Ani_Spring).l,a1
0001017E 6000 C9CE                  		bra.w	AnimateSprite
00010182                            ; ===========================================================================
00010182                            
00010182                            Spring_ResetDwn:
00010182                            		; Routine $12
00010182 117C 0001 001D             		move.b	#1,obNextAni(a0) ; reset animation
00010188 5928 0024                  		subq.b	#4,obRoutine(a0) ; goto "Spring_Dwn" routine
0001018C 4E75                       		rts	
0001018C 4E75                       		rts	
0001018E                            		include	"_anim\Springs.asm"
0001018E                            ; ---------------------------------------------------------------------------
0001018E                            ; Animation script - springs
0001018E                            ; ---------------------------------------------------------------------------
0001018E 0000                       Ani_Spring:	dc.w byte_DD02-Ani_Spring
00010190 0000                       		dc.w byte_DD0E-Ani_Spring
00010192 0001 0000 0202 0202 0202+  byte_DD02:	dc.b 0,	1, 0, 0, 2, 2, 2, 2, 2,	2, 0, afRoutine
0001019E 0004 0303 0505 0505 0505+  byte_DD0E:	dc.b 0,	4, 3, 3, 5, 5, 5, 5, 5,	5, 3, afRoutine
000101AA                            		even
000101AA                            		even
000101AA                            Map_Spring:	include	"_maps\Springs.asm"
000101AA                            ; ---------------------------------------------------------------------------
000101AA                            ; Sprite mappings - springs
000101AA                            ; ---------------------------------------------------------------------------
000101AA                            Map_Spring_internal:
000101AA 0000                       		dc.w M_Spg_Up-Map_Spring_internal
000101AC 0000                       		dc.w M_Spg_UpFlat-Map_Spring_internal
000101AE 0000                       		dc.w M_Spg_UpExt-Map_Spring_internal
000101B0 0000                       		dc.w M_Spg_Left-Map_Spring_internal
000101B2 0000                       		dc.w M_Spg_LeftFlat-Map_Spring_internal
000101B4 0000                       		dc.w M_Spg_LeftExt-Map_Spring_internal
000101B6 02                         M_Spg_Up:	dc.b 2			; facing up
000101B7 F80C 0000 F0               		dc.b $F8, $C, 0, 0, $F0
000101BC 000C 0004 F0               		dc.b 0,	$C, 0, 4, $F0
000101C1 01                         M_Spg_UpFlat:	dc.b 1			; facing up, flattened
000101C2 000C 0000 F0               		dc.b 0,	$C, 0, 0, $F0
000101C7 03                         M_Spg_UpExt:	dc.b 3			; facing up, extended
000101C8 E80C 0000 F0               		dc.b $E8, $C, 0, 0, $F0
000101CD F005 0008 F8               		dc.b $F0, 5, 0,	8, $F8
000101D2 000C 000C F0               		dc.b 0,	$C, 0, $C, $F0
000101D7 01                         M_Spg_Left:	dc.b 1			; facing left
000101D8 F007 0000 F8               		dc.b $F0, 7, 0,	0, $F8
000101DD 01                         M_Spg_LeftFlat:	dc.b 1			; facing left, flattened
000101DE F003 0004 F8               		dc.b $F0, 3, 0,	4, $F8
000101E3 04                         M_Spg_LeftExt:	dc.b 4			; facing left, extended
000101E4 F003 0004 10               		dc.b $F0, 3, 0,	4, $10
000101E9 F809 0008 F8               		dc.b $F8, 9, 0,	8, $F8
000101EE F000 0000 F8               		dc.b $F0, 0, 0,	0, $F8
000101F3 0800 0003 F8               		dc.b 8,	0, 0, 3, $F8
000101F8                            		even
000101F8                            		even
000101F8                            
000101F8                            		include	"_incObj\42 Newtron.asm"
000101F8                            ; ---------------------------------------------------------------------------
000101F8                            ; Object 42 - Newtron enemy (GHZ)
000101F8                            ; ---------------------------------------------------------------------------
000101F8                            
000101F8                            Newtron:
000101F8 7000                       		moveq	#0,d0
000101FA 1028 0024                  		move.b	obRoutine(a0),d0
000101FE 323B 0000                  		move.w	Newt_Index(pc,d0.w),d1
00010202 4EFB 1000                  		jmp	Newt_Index(pc,d1.w)
00010206                            ; ===========================================================================
00010206 0000                       Newt_Index:	dc.w Newt_Main-Newt_Index
00010208 0000                       		dc.w Newt_Action-Newt_Index
0001020A 0000                       		dc.w Newt_Delete-Newt_Index
0001020C                            ; ===========================================================================
0001020C                            
0001020C                            Newt_Main:	; Routine 0
0001020C 5428 0024                  		addq.b	#2,obRoutine(a0)
00010210 217C 0000 0000 0004        		move.l	#Map_Newt,obMap(a0)
00010218 317C 049B 0002             		move.w	#$49B,obGfx(a0)
0001021E 117C 0004 0001             		move.b	#4,obRender(a0)
00010224 317C 0200 0018             		move.w	#$200,obPriority(a0)
0001022A 117C 0014 0014             		move.b	#$14,obActWid(a0)
00010230 117C 0010 0016             		move.b	#$10,obHeight(a0)
00010236 117C 0008 0017             		move.b	#8,obWidth(a0)
0001023C                            
0001023C                            Newt_Action:	; Routine 2
0001023C 7000                       		moveq	#0,d0
0001023E 1028 0025                  		move.b	ob2ndRout(a0),d0
00010242 323B 0000                  		move.w	@index(pc,d0.w),d1
00010246 4EBB 1000                  		jsr	@index(pc,d1.w)
0001024A 43F9 0000 0000             		lea	(Ani_Newt).l,a1
00010250 6100 C8FC                  		bsr.w	AnimateSprite
00010254 6000 0000                  		bra.w	RememberState
00010258                            ; ===========================================================================
00010258 0000                       @index:		dc.w @chkdistance-@index
0001025A 0000                       		dc.w @type00-@index
0001025C 0000                       		dc.w @matchfloor-@index
0001025E 0000                       		dc.w @speed-@index
00010260 0000                       		dc.w @type01-@index
00010262                            ; ===========================================================================
00010262                            
00010262                            @chkdistance:
00010262 08E8 0000 0022             		bset	#0,obStatus(a0)
00010268 3038 D008                  		move.w	(v_player+obX).w,d0
0001026C 9068 0008                  		sub.w	obX(a0),d0
00010270 6400                       		bcc.s	@sonicisright
00010272 4440                       		neg.w	d0
00010274 08A8 0000 0022             		bclr	#0,obStatus(a0)
0001027A                            
0001027A                            	@sonicisright:
0001027A 0C40 0080                  		cmpi.w	#$80,d0		; is Sonic within $80 pixels of	the newtron?
0001027E 6400                       		bcc.s	@outofrange	; if not, branch
00010280 5428 0025                  		addq.b	#2,ob2ndRout(a0) ; goto @type00 next
00010284 117C 0001 001C             		move.b	#1,obAnim(a0)
0001028A 4A28 0028                  		tst.b	obSubtype(a0)	; check	object type
0001028E 6700                       		beq.s	@istype00	; if type is 00, branch
00010290                            
00010290 317C 249B 0002             		move.w	#$249B,obGfx(a0)
00010296 117C 0008 0025             		move.b	#8,ob2ndRout(a0) ; goto @type01 next
0001029C 117C 0004 001C             		move.b	#4,obAnim(a0)	; use different	animation
000102A2                            
000102A2                            	@outofrange:
000102A2                            	@istype00:
000102A2 4E75                       		rts	
000102A4                            ; ===========================================================================
000102A4                            
000102A4                            @type00:
000102A4 0C28 0004 001A             		cmpi.b	#4,obFrame(a0)	; has "appearing" animation finished?
000102AA 6400                       		bcc.s	@fall		; is yes, branch
000102AC 08E8 0000 0022             		bset	#0,obStatus(a0)
000102B2 3038 D008                  		move.w	(v_player+obX).w,d0
000102B6 9068 0008                  		sub.w	obX(a0),d0
000102BA 6400                       		bcc.s	@sonicisright2
000102BC 08A8 0000 0022             		bclr	#0,obStatus(a0)
000102C2                            
000102C2                            	@sonicisright2:
000102C2 4E75                       		rts	
000102C4                            ; ===========================================================================
000102C4                            
000102C4                            	@fall:
000102C4 0C28 0001 001A             		cmpi.b	#1,obFrame(a0)
000102CA 6600                       		bne.s	@loc_DE42
000102CC 117C 000C 0020             		move.b	#$C,obColType(a0)
000102D2                            
000102D2                            	@loc_DE42:
000102D2 6100 F76C                  		bsr.w	ObjectFall
000102D6 6100 0000                  		bsr.w	ObjFloorDist
000102DA 4A41                       		tst.w	d1		; has newtron hit the floor?
000102DC 6A00                       		bpl.s	@keepfalling	; if not, branch
000102DE                            
000102DE D368 000C                  		add.w	d1,obY(a0)
000102E2 317C 0000 0012             		move.w	#0,obVelY(a0)	; stop newtron falling
000102E8 5428 0025                  		addq.b	#2,ob2ndRout(a0)
000102EC 117C 0002 001C             		move.b	#2,obAnim(a0)
000102F2 0828 0005 0002             		btst	#5,obGfx(a0)
000102F8 6700                       		beq.s	@pppppppp
000102FA 5228 001C                  		addq.b	#1,obAnim(a0)
000102FE                            
000102FE                            	@pppppppp:
000102FE 117C 000D 0020             		move.b	#$D,obColType(a0)
00010304 317C 0200 0010             		move.w	#$200,obVelX(a0) ; move newtron horizontally
0001030A 0828 0000 0022             		btst	#0,obStatus(a0)
00010310 6600                       		bne.s	@keepfalling
00010312 4468 0010                  		neg.w	obVelX(a0)
00010316                            
00010316                            	@keepfalling:
00010316 4E75                       		rts	
00010318                            ; ===========================================================================
00010318                            
00010318                            @matchfloor:
00010318 6100 F75E                  		bsr.w	SpeedToPos
0001031C 6100 0000                  		bsr.w	ObjFloorDist
00010320 0C41 FFF8                  		cmpi.w	#-8,d1
00010324 6D00                       		blt.s	@nextroutine
00010326 0C41 000C                  		cmpi.w	#$C,d1
0001032A 6C00                       		bge.s	@nextroutine
0001032C D368 000C                  		add.w	d1,obY(a0)	; match	newtron's position with floor
00010330 4E75                       		rts	
00010332                            ; ===========================================================================
00010332                            
00010332                            	@nextroutine:
00010332 5428 0025                  		addq.b	#2,ob2ndRout(a0) ; goto @speed next
00010336 4E75                       		rts	
00010338                            ; ===========================================================================
00010338                            
00010338                            @speed:
00010338 6100 F73E                  		bsr.w	SpeedToPos
0001033C 4E75                       		rts	
0001033E                            ; ===========================================================================
0001033E                            
0001033E                            @type01:
0001033E 0C28 0001 001A             		cmpi.b	#1,obFrame(a0)
00010344 6600                       		bne.s	@firemissile
00010346 117C 000C 0020             		move.b	#$C,obColType(a0)
0001034C                            
0001034C                            	@firemissile:
0001034C 0C28 0002 001A             		cmpi.b	#2,obFrame(a0)
00010352 6600                       		bne.s	@fail
00010354 4A28 0032                  		tst.b	$32(a0)
00010358 6600                       		bne.s	@fail
0001035A 117C 0001 0032             		move.b	#1,$32(a0)
00010360 6100 FBB6                  		bsr.w	FindFreeObj
00010364 6600                       		bne.s	@fail
00010366 12BC 0023                  		move.b	#id_Missile,0(a1) ; load missile object
0001036A 3368 0008 0008             		move.w	obX(a0),obX(a1)
00010370 3368 000C 000C             		move.w	obY(a0),obY(a1)
00010376 5169 000C                  		subq.w	#8,obY(a1)
0001037A 337C 0200 0010             		move.w	#$200,obVelX(a1)
00010380 303C 0014                  		move.w	#$14,d0
00010384 0828 0000 0022             		btst	#0,obStatus(a0)
0001038A 6600                       		bne.s	@noflip
0001038C 4440                       		neg.w	d0
0001038E 4469 0010                  		neg.w	obVelX(a1)
00010392                            
00010392                            	@noflip:
00010392 D169 0008                  		add.w	d0,obX(a1)
00010396 1368 0022 0022             		move.b	obStatus(a0),obStatus(a1)
0001039C 137C 0001 0028             		move.b	#1,obSubtype(a1)
000103A2                            
000103A2                            	@fail:
000103A2 4E75                       		rts	
000103A4                            ; ===========================================================================
000103A4                            
000103A4                            Newt_Delete:	; Routine 4
000103A4 6000 F726                  		bra.w	DeleteObject
000103A4 6000 F726                  		bra.w	DeleteObject
000103A8                            		include	"_anim\Newtron.asm"
000103A8                            ; ---------------------------------------------------------------------------
000103A8                            ; Animation script - Newtron enemy
000103A8                            ; ---------------------------------------------------------------------------
000103A8 0000                       Ani_Newt:	dc.w A_Newt_Blank-Ani_Newt
000103AA 0000                       		dc.w A_Newt_Drop-Ani_Newt
000103AC 0000                       		dc.w A_Newt_Fly1-Ani_Newt
000103AE 0000                       		dc.w A_Newt_Fly2-Ani_Newt
000103B0 0000                       		dc.w A_Newt_Fires-Ani_Newt
000103B2 0F0A FF                    A_Newt_Blank:	dc.b $F, $A, afEnd
000103B6 00                         		even
000103B6 1300 0103 0405 FE01        A_Newt_Drop:	dc.b $13, 0, 1,	3, 4, 5, afBack, 1
000103BE 0206 07FF                  A_Newt_Fly1:	dc.b 2,	6, 7, afEnd
000103C2 0208 09FF                  A_Newt_Fly2:	dc.b 2,	8, 9, afEnd
000103C6 1300 0101 0201 0100 FC     A_Newt_Fires:	dc.b $13, 0, 1,	1, 2, 1, 1, 0, afRoutine
000103D0 00                         		even
000103D0 00                         		even
000103D0                            Map_Newt:	include	"_maps\Newtron.asm"
000103D0                            ; ---------------------------------------------------------------------------
000103D0                            ; Sprite mappings - Newtron enemy (GHZ)
000103D0                            ; ---------------------------------------------------------------------------
000103D0                            Map_Newt_internal:
000103D0 0000                       		dc.w M_Newt_Trans-Map_Newt_internal
000103D2 0000                       		dc.w M_Newt_Norm-Map_Newt_internal
000103D4 0000                       		dc.w M_Newt_Fires-Map_Newt_internal
000103D6 0000                       		dc.w M_Newt_Drop1-Map_Newt_internal
000103D8 0000                       		dc.w M_Newt_Drop2-Map_Newt_internal
000103DA 0000                       		dc.w M_Newt_Drop3-Map_Newt_internal
000103DC 0000                       		dc.w M_Newt_Fly1a-Map_Newt_internal
000103DE 0000                       		dc.w M_Newt_Fly1b-Map_Newt_internal
000103E0 0000                       		dc.w M_Newt_Fly2a-Map_Newt_internal
000103E2 0000                       		dc.w M_Newt_Fly2b-Map_Newt_internal
000103E4 0000                       		dc.w M_Newt_Blank-Map_Newt_internal
000103E6 03                         M_Newt_Trans:	dc.b 3
000103E7 EC0D 0000 EC               		dc.b $EC, $D, 0, 0, $EC	; partially visible
000103EC F400 0008 0C               		dc.b $F4, 0, 0,	8, $C
000103F1 FC0E 0009 F4               		dc.b $FC, $E, 0, 9, $F4
000103F6 03                         M_Newt_Norm:	dc.b 3
000103F7 EC06 0015 EC               		dc.b $EC, 6, 0,	$15, $EC ; visible
000103FC EC09 001B FC               		dc.b $EC, 9, 0,	$1B, $FC
00010401 FC0A 0021 FC               		dc.b $FC, $A, 0, $21, $FC
00010406 03                         M_Newt_Fires:	dc.b 3
00010407 EC06 002A EC               		dc.b $EC, 6, 0,	$2A, $EC ; open mouth, firing
0001040C EC09 001B FC               		dc.b $EC, 9, 0,	$1B, $FC
00010411 FC0A 0021 FC               		dc.b $FC, $A, 0, $21, $FC
00010416 04                         M_Newt_Drop1:	dc.b 4
00010417 EC06 0030 EC               		dc.b $EC, 6, 0,	$30, $EC ; dropping
0001041C EC09 001B FC               		dc.b $EC, 9, 0,	$1B, $FC
00010421 FC09 0036 FC               		dc.b $FC, 9, 0,	$36, $FC
00010426 0C00 003C 0C               		dc.b $C, 0, 0, $3C, $C
0001042B 03                         M_Newt_Drop2:	dc.b 3
0001042C F40D 003D EC               		dc.b $F4, $D, 0, $3D, $EC
00010431 FC00 0020 0C               		dc.b $FC, 0, 0,	$20, $C
00010436 0408 0045 FC               		dc.b 4,	8, 0, $45, $FC
0001043B 02                         M_Newt_Drop3:	dc.b 2
0001043C F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
00010441 F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
00010446 03                         M_Newt_Fly1a:	dc.b 3
00010447 F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC ; flying
0001044C F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
00010451 FE00 0052 14               		dc.b $FE, 0, 0,	$52, $14
00010456 03                         M_Newt_Fly1b:	dc.b 3
00010457 F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0001045C F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
00010461 FE04 0053 14               		dc.b $FE, 4, 0,	$53, $14
00010466 03                         M_Newt_Fly2a:	dc.b 3
00010467 F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0001046C F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
00010471 FE00 E052 14               		dc.b $FE, 0, $E0, $52, $14
00010476 03                         M_Newt_Fly2b:	dc.b 3
00010477 F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0001047C F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
00010481 FE04 E053 14               		dc.b $FE, 4, $E0, $53, $14
00010486 00                         M_Newt_Blank:	dc.b 0
00010488 00                         		even
00010488 00                         		even
00010488                            		include	"_incObj\43 Roller.asm"
00010488                            ; ---------------------------------------------------------------------------
00010488                            ; Object 43 - Roller enemy (SYZ)
00010488                            ; ---------------------------------------------------------------------------
00010488                            
00010488                            Roller:
00010488 7000                       		moveq	#0,d0
0001048A 1028 0024                  		move.b	obRoutine(a0),d0
0001048E 323B 0000                  		move.w	Roll_Index(pc,d0.w),d1
00010492 4EFB 1000                  		jmp	Roll_Index(pc,d1.w)
00010496                            ; ===========================================================================
00010496 0000                       Roll_Index:	dc.w Roll_Main-Roll_Index
00010498 0000                       		dc.w Roll_Action-Roll_Index
0001049A                            ; ===========================================================================
0001049A                            
0001049A                            Roll_Main:	; Routine 0
0001049A 117C 000E 0016             		move.b	#$E,obHeight(a0)
000104A0 117C 0008 0017             		move.b	#8,obWidth(a0)
000104A6 6100 F598                  		bsr.w	ObjectFall
000104AA 6100 0000                  		bsr.w	ObjFloorDist
000104AE 4A41                       		tst.w	d1
000104B0 6A00                       		bpl.s	locret_E052
000104B2 D368 000C                  		add.w	d1,obY(a0)	; match	roller's position with the floor
000104B6 317C 0000 0012             		move.w	#0,obVelY(a0)
000104BC 5428 0024                  		addq.b	#2,obRoutine(a0)
000104C0 217C 0000 0000 0004        		move.l	#Map_Roll,obMap(a0)
000104C8 317C 04B8 0002             		move.w	#$4B8,obGfx(a0)
000104CE 117C 0004 0001             		move.b	#4,obRender(a0)
000104D4 317C 0200 0018             		move.w	#$200,obPriority(a0)
000104DA 117C 0010 0014             		move.b	#$10,obActWid(a0)
000104E0                            
000104E0                            	locret_E052:
000104E0 4E75                       		rts	
000104E2                            ; ===========================================================================
000104E2                            
000104E2                            Roll_Action:	; Routine 2
000104E2 7000                       		moveq	#0,d0
000104E4 1028 0025                  		move.b	ob2ndRout(a0),d0
000104E8 323B 0000                  		move.w	Roll_Index2(pc,d0.w),d1
000104EC 4EBB 1000                  		jsr	Roll_Index2(pc,d1.w)
000104F0 43F9 0000 0000             		lea	(Ani_Roll).l,a1
000104F6 6100 C656                  		bsr.w	AnimateSprite
000104FA 3028 0008                  		move.w	obX(a0),d0
000104FE 0240 FF80                  		andi.w	#$FF80,d0
00010502 3238 F700                  		move.w	(v_screenposx).w,d1
00010506 0441 0080                  		subi.w	#$80,d1
0001050A 0241 FF80                  		andi.w	#$FF80,d1
0001050E 9041                       		sub.w	d1,d0
00010510 0C40 0280                  		cmpi.w	#$280,d0
00010514 6E00 0000                  		bgt.w	Roll_ChkGone
00010518 6000 F572                  		bra.w	DisplaySprite
0001051C                            ; ===========================================================================
0001051C                            
0001051C                            Roll_ChkGone:
0001051C 45F8 FC00                  		lea	(v_objstate).w,a2
00010520 7000                       		moveq	#0,d0
00010522 1028 0023                  		move.b	obRespawnNo(a0),d0
00010526 6700                       		beq.s	Roll_Delete
00010528 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0001052E                            
0001052E                            Roll_Delete:
0001052E 6000 F59C                  		bra.w	DeleteObject
00010532                            ; ===========================================================================
00010532 0000                       Roll_Index2:	dc.w Roll_RollChk-Roll_Index2
00010534 0000                       		dc.w Roll_RollNoChk-Roll_Index2
00010536 0000                       		dc.w Roll_ChkJump-Roll_Index2
00010538 0000                       		dc.w Roll_MatchFloor-Roll_Index2
0001053A                            ; ===========================================================================
0001053A                            
0001053A                            Roll_RollChk:
0001053A 3038 D008                  		move.w	(v_player+obX).w,d0
0001053E 0440 0100                  		subi.w	#$100,d0
00010542 6500                       		bcs.s	loc_E0D2
00010544 9068 0008                  		sub.w	obX(a0),d0	; check	distance between Roller	and Sonic
00010548 6500                       		bcs.s	loc_E0D2
0001054A 5828 0025                  		addq.b	#4,ob2ndRout(a0)
0001054E 117C 0002 001C             		move.b	#2,obAnim(a0)
00010554 317C 0700 0010             		move.w	#$700,obVelX(a0) ; move Roller horizontally
0001055A 117C 008E 0020             		move.b	#$8E,obColType(a0) ; make Roller invincible
00010560                            
00010560                            loc_E0D2:
00010560 588F                       		addq.l	#4,sp
00010562 4E75                       		rts	
00010564                            ; ===========================================================================
00010564                            
00010564                            Roll_RollNoChk:
00010564 0C28 0002 001C             		cmpi.b	#2,obAnim(a0)
0001056A 6700                       		beq.s	loc_E0F8
0001056C 5368 0030                  		subq.w	#1,$30(a0)
00010570 6A00                       		bpl.s	locret_E0F6
00010572 117C 0001 001C             		move.b	#1,obAnim(a0)
00010578 317C 0700 0010             		move.w	#$700,obVelX(a0)
0001057E 117C 008E 0020             		move.b	#$8E,obColType(a0)
00010584                            
00010584                            locret_E0F6:
00010584 4E75                       		rts	
00010586                            ; ===========================================================================
00010586                            
00010586                            loc_E0F8:
00010586 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001058A 4E75                       		rts	
0001058C                            ; ===========================================================================
0001058C                            
0001058C                            Roll_ChkJump:
0001058C 6100 0000                  		bsr.w	Roll_Stop
00010590 6100 F4E6                  		bsr.w	SpeedToPos
00010594 6100 0000                  		bsr.w	ObjFloorDist
00010598 0C41 FFF8                  		cmpi.w	#-8,d1
0001059C 6D00                       		blt.s	Roll_Jump
0001059E 0C41 000C                  		cmpi.w	#$C,d1
000105A2 6C00                       		bge.s	Roll_Jump
000105A4 D368 000C                  		add.w	d1,obY(a0)
000105A8 4E75                       		rts	
000105AA                            ; ===========================================================================
000105AA                            
000105AA                            Roll_Jump:
000105AA 5428 0025                  		addq.b	#2,ob2ndRout(a0)
000105AE 08E8 0000 0032             		bset	#0,$32(a0)
000105B4 6700                       		beq.s	locret_E12E
000105B6 317C FA00 0012             		move.w	#-$600,obVelY(a0)	; move Roller vertically
000105BC                            
000105BC                            locret_E12E:
000105BC 4E75                       		rts	
000105BE                            ; ===========================================================================
000105BE                            
000105BE                            Roll_MatchFloor:
000105BE 6100 F480                  		bsr.w	ObjectFall
000105C2 4A68 0012                  		tst.w	obVelY(a0)
000105C6 6B00                       		bmi.s	locret_E150
000105C8 6100 0000                  		bsr.w	ObjFloorDist
000105CC 4A41                       		tst.w	d1
000105CE 6A00                       		bpl.s	locret_E150
000105D0 D368 000C                  		add.w	d1,obY(a0)	; match	Roller's position with the floor
000105D4 5528 0025                  		subq.b	#2,ob2ndRout(a0)
000105D8 317C 0000 0012             		move.w	#0,obVelY(a0)
000105DE                            
000105DE                            locret_E150:
000105DE 4E75                       		rts	
000105E0                            
000105E0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000105E0                            
000105E0                            
000105E0                            Roll_Stop:
000105E0 4A28 0032                  		tst.b	$32(a0)
000105E4 6B00                       		bmi.s	locret_E188
000105E6 3038 D008                  		move.w	(v_player+obX).w,d0
000105EA 0440 0030                  		subi.w	#$30,d0
000105EE 9068 0008                  		sub.w	obX(a0),d0
000105F2 6400                       		bcc.s	locret_E188
000105F4 117C 0000 001C             		move.b	#0,obAnim(a0)
000105FA 117C 000E 0020             		move.b	#$E,obColType(a0)
00010600 4268 0010                  		clr.w	obVelX(a0)
00010604 317C 0078 0030             		move.w	#120,$30(a0)	; set waiting time to 2	seconds
0001060A 117C 0002 0025             		move.b	#2,ob2ndRout(a0)
00010610 08E8 0007 0032             		bset	#7,$32(a0)
00010616                            
00010616                            locret_E188:
00010616 4E75                       		rts	
00010618                            ; End of function Roll_Stop
00010618                            ; End of function Roll_Stop
00010618                            		include	"_anim\Roller.asm"
00010618                            ; ---------------------------------------------------------------------------
00010618                            ; Animation script - Roller enemy
00010618                            ; ---------------------------------------------------------------------------
00010618 0000                       Ani_Roll:	dc.w A_Roll_Unfold-Ani_Roll
0001061A 0000                       		dc.w A_Roll_Fold-Ani_Roll
0001061C 0000                       		dc.w A_Roll_Roll-Ani_Roll
0001061E 0F02 0100 FE01             A_Roll_Unfold:	dc.b $F, 2, 1, 0, afBack, 1
00010624 0F01 02FD 02               A_Roll_Fold:	dc.b $F, 1, 2, afChange, 2
0001062A 00                         		even
0001062A 0303 0402 FF               A_Roll_Roll:	dc.b 3,	3, 4, 2, afEnd
00010630 00                         		even
00010630 00                         		even
00010630                            Map_Roll:	include	"_maps\Roller.asm"
00010630                            ; --------------------------------------------------------------------------------
00010630                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
00010630                            ; --------------------------------------------------------------------------------
00010630                            
00010630                            SME_q3BmU:	
00010630 0000 0000                  		dc.w SME_q3BmU_A-SME_q3BmU, SME_q3BmU_15-SME_q3BmU	
00010634 0000 0000                  		dc.w SME_q3BmU_20-SME_q3BmU, SME_q3BmU_26-SME_q3BmU	
00010638 0000                       		dc.w SME_q3BmU_2C-SME_q3BmU	
0001063A 02                         SME_q3BmU_A:	dc.b 2	
0001063B DE0E 0000 F0               		dc.b $DE, $E, 0, 0, $F0	
00010640 F60E 000C F0               		dc.b $F6, $E, 0, $C, $F0	
00010645 02                         SME_q3BmU_15:	dc.b 2	
00010646 E60E 0000 F0               		dc.b $E6, $E, 0, 0, $F0	
0001064B FE0D 0018 F0               		dc.b $FE, $D, 0, $18, $F0	
00010650 01                         SME_q3BmU_20:	dc.b 1	
00010651 F00F 0020 F0               		dc.b $F0, $F, 0, $20, $F0	
00010656 01                         SME_q3BmU_26:	dc.b 1	
00010657 F00F 0030 F0               		dc.b $F0, $F, 0, $30, $F0	
0001065C 01                         SME_q3BmU_2C:	dc.b 1	
0001065D F00F 0040 F0               		dc.b $F0, $F, 0, $40, $F0	
00010662                            		even
00010662                            		even
00010662                            
00010662                            		include	"_incObj\44 GHZ Edge Walls.asm"
00010662                            ; ---------------------------------------------------------------------------
00010662                            ; Object 44 - edge walls (GHZ)
00010662                            ; ---------------------------------------------------------------------------
00010662                            
00010662                            EdgeWalls:
00010662 7000                       		moveq	#0,d0
00010664 1028 0024                  		move.b	obRoutine(a0),d0
00010668 323B 0000                  		move.w	Edge_Index(pc,d0.w),d1
0001066C 4EFB 1000                  		jmp	Edge_Index(pc,d1.w)
00010670                            ; ===========================================================================
00010670 0000                       Edge_Index:	dc.w Edge_Main-Edge_Index
00010672 0000                       		dc.w Edge_Solid-Edge_Index
00010674 0000                       		dc.w Edge_Display-Edge_Index
00010676                            ; ===========================================================================
00010676                            
00010676                            Edge_Main:	; Routine 0
00010676 5428 0024                  		addq.b	#2,obRoutine(a0)
0001067A 217C 0000 0000 0004        		move.l	#Map_Edge,obMap(a0)
00010682 317C 434C 0002             		move.w	#$434C,obGfx(a0)
00010688 0028 0004 0001             		ori.b	#4,obRender(a0)
0001068E 117C 0008 0014             		move.b	#8,obActWid(a0)
00010694 317C 0300 0018             		move.w	#$300,obPriority(a0)
0001069A 1168 0028 001A             		move.b	obSubtype(a0),obFrame(a0) ; copy object type number to frame number
000106A0 08A8 0004 001A             		bclr	#4,obFrame(a0)	; clear	4th bit	(deduct	$10)
000106A6 6700                       		beq.s	Edge_Solid	; make object solid if 4th bit = 0
000106A8 5428 0024                  		addq.b	#2,obRoutine(a0)
000106AC 6000                       		bra.s	Edge_Display	; don't make it solid if 4th bit = 1
000106AE                            ; ===========================================================================
000106AE                            
000106AE                            Edge_Solid:	; Routine 2
000106AE 323C 0013                  		move.w	#$13,d1
000106B2 343C 0028                  		move.w	#$28,d2
000106B6 6100 A0E0                  		bsr.w	Obj44_SolidWall
000106BA                            
000106BA                            Edge_Display:	; Routine 4
000106BA 6100 F3D0                  		bsr.w	DisplaySprite
000106DC 4E75                       		rts	
000106DC 4E75                       		rts	
000106DE                            Map_Edge:	include	"_maps\GHZ Edge Walls.asm"
000106DE                            ; ---------------------------------------------------------------------------
000106DE                            ; Sprite mappings - walls (GHZ)
000106DE                            ; ---------------------------------------------------------------------------
000106DE                            Map_Edge_internal:
000106DE 0000                       		dc.w M_Edge_Shadow-Map_Edge_internal
000106E0 0000                       		dc.w M_Edge_Light-Map_Edge_internal
000106E2 0000                       		dc.w M_Edge_Dark-Map_Edge_internal
000106E4 04                         M_Edge_Shadow:	dc.b 4
000106E5 E005 0004 F8               		dc.b $E0, 5, 0,	4, $F8	; light with shadow
000106EA F005 0008 F8               		dc.b $F0, 5, 0,	8, $F8
000106EF 0005 0008 F8               		dc.b 0,	5, 0, 8, $F8
000106F4 1005 0008 F8               		dc.b $10, 5, 0,	8, $F8
000106F9 04                         M_Edge_Light:	dc.b 4
000106FA E005 0008 F8               		dc.b $E0, 5, 0,	8, $F8	; light with no shadow
000106FF F005 0008 F8               		dc.b $F0, 5, 0,	8, $F8
00010704 0005 0008 F8               		dc.b 0,	5, 0, 8, $F8
00010709 1005 0008 F8               		dc.b $10, 5, 0,	8, $F8
0001070E 04                         M_Edge_Dark:	dc.b 4
0001070F E005 0000 F8               		dc.b $E0, 5, 0,	0, $F8	; all shadow
00010714 F005 0000 F8               		dc.b $F0, 5, 0,	0, $F8
00010719 0005 0000 F8               		dc.b 0,	5, 0, 0, $F8
0001071E 1005 0000 F8               		dc.b $10, 5, 0,	0, $F8
00010724 00                         		even
00010724 00                         		even
00010724                            
00010724                            		include	"_incObj\13 Lava Ball Maker.asm"
00010724                            ; ---------------------------------------------------------------------------
00010724                            ; Object 13 - lava ball	maker (MZ, SLZ)
00010724                            ; ---------------------------------------------------------------------------
00010724                            
00010724                            LavaMaker:
00010724 7000                       		moveq	#0,d0
00010726 1028 0024                  		move.b	obRoutine(a0),d0
0001072A 323B 0000                  		move.w	LavaM_Index(pc,d0.w),d1
0001072E 4EBB 1000                  		jsr	LavaM_Index(pc,d1.w)
00010732 6000 0000                  		bra.w	LBall_ChkDel
00010736                            ; ===========================================================================
00010736 0000                       LavaM_Index:	dc.w LavaM_Main-LavaM_Index
00010738 0000                       		dc.w LavaM_MakeLava-LavaM_Index
0001073A                            ; ---------------------------------------------------------------------------
0001073A                            ;
0001073A                            ; Lava ball production rates
0001073A                            ;
0001073A 1E3C 5A78 96B4             LavaM_Rates:	dc.b 30, 60, 90, 120, 150, 180
00010740                            ; ===========================================================================
00010740                            
00010740                            LavaM_Main:	; Routine 0
00010740 5428 0024                  		addq.b	#2,obRoutine(a0)
00010744 1028 0028                  		move.b	obSubtype(a0),d0
00010748 E848                       		lsr.w	#4,d0
0001074A 0240 000F                  		andi.w	#$F,d0
0001074E 117B 00EA 001F             		move.b	LavaM_Rates(pc,d0.w),obDelayAni(a0)
00010754 1168 001F 001E             		move.b	obDelayAni(a0),obTimeFrame(a0) ; set time delay for lava balls
0001075A 0228 000F 0028             		andi.b	#$F,obSubtype(a0)
00010760                            
00010760                            LavaM_MakeLava:	; Routine 2
00010760 5328 001E                  		subq.b	#1,obTimeFrame(a0) ; subtract 1 from time delay
00010764 6600                       		bne.s	LavaM_Wait	; if time still	remains, branch
00010766 1168 001F 001E             		move.b	obDelayAni(a0),obTimeFrame(a0) ; reset time delay
0001076C 6100 F59E                  		bsr.w	ChkObjectVisible
00010770 6600                       		bne.s	LavaM_Wait
00010772 6100 F7A4                  		bsr.w	FindFreeObj
00010776 6600                       		bne.s	LavaM_Wait
00010778 12BC 0014                  		move.b	#id_LavaBall,0(a1) ; load lava ball object
0001077C 3368 0008 0008             		move.w	obX(a0),obX(a1)
00010782 3368 000C 000C             		move.w	obY(a0),obY(a1)
00010788 1368 0028 0028             		move.b	obSubtype(a0),obSubtype(a1)
0001078E                            
0001078E                            	LavaM_Wait:
0001078E 4E75                       		rts	
0001078E 4E75                       		rts	
00010790                            		include	"_incObj\14 Lava Ball.asm"
00010790                            ; ---------------------------------------------------------------------------
00010790                            ; Object 14 - lava balls (MZ, SLZ)
00010790                            ; ---------------------------------------------------------------------------
00010790                            
00010790                            LavaBall:
00010790 7000                       		moveq	#0,d0
00010792 1028 0024                  		move.b	obRoutine(a0),d0
00010796 323B 0000                  		move.w	LBall_Index(pc,d0.w),d1
0001079A 4EBB 1000                  		jsr	LBall_Index(pc,d1.w)
0001079E 6000 F2EC                  		bra.w	DisplaySprite
000107A2                            ; ===========================================================================
000107A2 0000                       LBall_Index:	dc.w LBall_Main-LBall_Index
000107A4 0000                       		dc.w LBall_Action-LBall_Index
000107A6 0000                       		dc.w LBall_Delete-LBall_Index
000107A8                            
000107A8 FC00 FB00 FA00 F900 FE00   LBall_Speeds:	dc.w -$400, -$500, -$600, -$700, -$200
000107B2 0200 FE00 0200 0000        		dc.w $200, -$200, $200,	0
000107BA                            ; ===========================================================================
000107BA                            
000107BA                            LBall_Main:	; Routine 0
000107BA 5428 0024                  		addq.b	#2,obRoutine(a0)
000107BE 117C 0008 0016             		move.b	#8,obHeight(a0)
000107C4 117C 0008 0017             		move.b	#8,obWidth(a0)
000107CA 217C 0000 D7A0 0004        		move.l	#Map_Fire,obMap(a0)
000107D2 317C 0345 0002             		move.w	#$345,obGfx(a0)
000107D8 0C38 0003 FE10             		cmpi.b	#3,(v_zone).w	; check if level is SLZ
000107DE 6600                       		bne.s	@notSLZ
000107E0 317C 0480 0002             		move.w	#$480,obGfx(a0)	; SLZ specific code
000107E6                            
000107E6                            	@notSLZ:
000107E6 117C 0004 0001             		move.b	#4,obRender(a0)
000107EC 317C 0180 0018             		move.w	#$180,obPriority(a0)
000107F2 117C 008B 0020             		move.b	#$8B,obColType(a0)
000107F8 3168 000C 0030             		move.w	obY(a0),$30(a0)
000107FE 4A28 0029                  		tst.b	$29(a0)
00010802 6700                       		beq.s	@speed
00010804 5428 0018                  		addq.b	#2,obPriority(a0)
00010808                            
00010808                            	@speed:
00010808 7000                       		moveq	#0,d0
0001080A 1028 0028                  		move.b	obSubtype(a0),d0
0001080E D040                       		add.w	d0,d0
00010810 317B 0096 0012             		move.w	LBall_Speeds(pc,d0.w),obVelY(a0) ; load object speed (vertical)
00010816 117C 0008 0014             		move.b	#8,obActWid(a0)
0001081C 0C28 0006 0028             		cmpi.b	#6,obSubtype(a0) ; is object type below $6 ?
00010822 6500                       		bcs.s	@sound		; if yes, branch
00010824                            
00010824 117C 0010 0014             		move.b	#$10,obActWid(a0)
0001082A 117C 0002 001C             		move.b	#2,obAnim(a0)	; use horizontal animation
00010830 3168 0012 0010             		move.w	obVelY(a0),obVelX(a0) ; set horizontal speed
00010836 317C 0000 0012             		move.w	#0,obVelY(a0)	; delete vertical speed
0001083C                            
0001083C                            	@sound:
00010846                            
00010846                            LBall_Action:	; Routine 2
00010846 7000                       		moveq	#0,d0
00010848 1028 0028                  		move.b	obSubtype(a0),d0
0001084C D040                       		add.w	d0,d0
0001084E 323B 0000                  		move.w	LBall_TypeIndex(pc,d0.w),d1
00010852 4EBB 1000                  		jsr	LBall_TypeIndex(pc,d1.w)
00010856 6100 F220                  		bsr.w	SpeedToPos
0001085A 43F9 0000 0000             		lea	(Ani_Fire).l,a1
00010860 6100 C2EC                  		bsr.w	AnimateSprite
00010864                            
00010864                            LBall_ChkDel:
00010882 4E75                       		rts	
00010884                            ; ===========================================================================
00010884 0000 0000                  LBall_TypeIndex:dc.w LBall_Type00-LBall_TypeIndex, LBall_Type00-LBall_TypeIndex
00010888 0000 0000                  		dc.w LBall_Type00-LBall_TypeIndex, LBall_Type00-LBall_TypeIndex
0001088C 0000 0000                  		dc.w LBall_Type04-LBall_TypeIndex, LBall_Type05-LBall_TypeIndex
00010890 0000 0000                  		dc.w LBall_Type06-LBall_TypeIndex, LBall_Type07-LBall_TypeIndex
00010894 0000                       		dc.w LBall_Type08-LBall_TypeIndex
00010896                            ; ===========================================================================
00010896                            ; lavaball types 00-03 fly up and fall back down
00010896                            
00010896                            LBall_Type00:
00010896 0668 0018 0012             		addi.w	#$18,obVelY(a0)	; increase object's downward speed
0001089C 3028 0030                  		move.w	$30(a0),d0
000108A0 B068 000C                  		cmp.w	obY(a0),d0	; has object fallen back to its	original position?
000108A4 6400                       		bcc.s	loc_E41E	; if not, branch
000108A6 5428 0024                  		addq.b	#2,obRoutine(a0)	; goto "LBall_Delete" routine
000108AA                            
000108AA                            loc_E41E:
000108AA 08A8 0001 0022             		bclr	#1,obStatus(a0)
000108B0 4A68 0012                  		tst.w	obVelY(a0)
000108B4 6A00                       		bpl.s	locret_E430
000108B6 08E8 0001 0022             		bset	#1,obStatus(a0)
000108BC                            
000108BC                            locret_E430:
000108BC 4E75                       		rts	
000108BE                            ; ===========================================================================
000108BE                            ; lavaball type	04 flies up until it hits the ceiling
000108BE                            
000108BE                            LBall_Type04:
000108BE 08E8 0001 0022             		bset	#1,obStatus(a0)
000108C4 6100 0000                  		bsr.w	ObjHitCeiling
000108C8 4A41                       		tst.w	d1
000108CA 6A00                       		bpl.s	locret_E452
000108CC 117C 0008 0028             		move.b	#8,obSubtype(a0)
000108D2 117C 0001 001C             		move.b	#1,obAnim(a0)
000108D8 317C 0000 0012             		move.w	#0,obVelY(a0)	; stop the object when it touches the ceiling
000108DE                            
000108DE                            locret_E452:
000108DE 4E75                       		rts	
000108E0                            ; ===========================================================================
000108E0                            ; lavaball type	05 falls down until it hits the	floor
000108E0                            
000108E0                            LBall_Type05:
000108E0 08A8 0001 0022             		bclr	#1,obStatus(a0)
000108E6 6100 0000                  		bsr.w	ObjFloorDist
000108EA 4A41                       		tst.w	d1
000108EC 6A00                       		bpl.s	locret_E474
000108EE 117C 0008 0028             		move.b	#8,obSubtype(a0)
000108F4 117C 0001 001C             		move.b	#1,obAnim(a0)
000108FA 317C 0000 0012             		move.w	#0,obVelY(a0)	; stop the object when it touches the floor
00010900                            
00010900                            locret_E474:
00010900 4E75                       		rts	
00010902                            ; ===========================================================================
00010902                            ; lavaball types 06-07 move sideways
00010902                            
00010902                            LBall_Type06:
00010902 08E8 0000 0022             		bset	#0,obStatus(a0)
00010908 76F8                       		moveq	#-8,d3
0001090A 6100 0000                  		bsr.w	ObjHitWallLeft
0001090E 4A41                       		tst.w	d1
00010910 6A00                       		bpl.s	locret_E498
00010912 117C 0008 0028             		move.b	#8,obSubtype(a0)
00010918 117C 0003 001C             		move.b	#3,obAnim(a0)
0001091E 317C 0000 0010             		move.w	#0,obVelX(a0)	; stop object when it touches a	wall
00010924                            
00010924                            locret_E498:
00010924 4E75                       		rts	
00010926                            ; ===========================================================================
00010926                            
00010926                            LBall_Type07:
00010926 08A8 0000 0022             		bclr	#0,obStatus(a0)
0001092C 7608                       		moveq	#8,d3
0001092E 6100 0000                  		bsr.w	ObjHitWallRight
00010932 4A41                       		tst.w	d1
00010934 6A00                       		bpl.s	locret_E4BC
00010936 117C 0008 0028             		move.b	#8,obSubtype(a0)
0001093C 117C 0003 001C             		move.b	#3,obAnim(a0)
00010942 317C 0000 0010             		move.w	#0,obVelX(a0)	; stop object when it touches a	wall
00010948                            
00010948                            locret_E4BC:
00010948 4E75                       		rts	
0001094A                            ; ===========================================================================
0001094A                            
0001094A                            LBall_Type08:
0001094A 4E75                       		rts	
0001094C                            ; ===========================================================================
0001094C                            
0001094C                            LBall_Delete:
0001094C 6000 F17E                  		bra.w	DeleteObject
0001094C 6000 F17E                  		bra.w	DeleteObject
00010950                            		include	"_anim\Fireballs.asm"
00010950                            ; ---------------------------------------------------------------------------
00010950                            ; Animation script - lava balls
00010950                            ; ---------------------------------------------------------------------------
00010950 0000                       Ani_Fire:	dc.w @vertical-Ani_Fire
00010952 0000                       		dc.w @vertcollide-Ani_Fire
00010954 0000                       		dc.w @horizontal-Ani_Fire
00010956 0000                       		dc.w @horicollide-Ani_Fire
00010958 0500 2001 21FF             @vertical:	dc.b 5,	0, $20,	1, $21,	afEnd
0001095E 0502 FC                    @vertcollide:	dc.b 5,	2, afRoutine
00010962 00                         		even
00010962 0503 4304 44FF             @horizontal:	dc.b 5,	3, $43,	4, $44,	afEnd
00010968 0505 FC                    @horicollide:	dc.b 5,	5, afRoutine
0001096C 00                         		even
0001096C 00                         		even
0001096C                            
0001096C                            		include	"_incObj\6D Flamethrower.asm"
0001096C                            ; ---------------------------------------------------------------------------
0001096C                            ; Object 6D - flame thrower (SBZ)
0001096C                            ; ---------------------------------------------------------------------------
0001096C                            
0001096C                            Flamethrower:
0001096C 7000                       		moveq	#0,d0
0001096E 1028 0024                  		move.b	obRoutine(a0),d0
00010972 323B 0000                  		move.w	Flame_Index(pc,d0.w),d1
00010976 4EFB 1000                  		jmp	Flame_Index(pc,d1.w)
0001097A                            ; ===========================================================================
0001097A 0000                       Flame_Index:	dc.w Flame_Main-Flame_Index
0001097C 0000                       		dc.w Flame_Action-Flame_Index
0001097E                            ; ===========================================================================
0001097E                            
0001097E                            Flame_Main:	; Routine 0
0001097E 5428 0024                  		addq.b	#2,obRoutine(a0)
00010982 217C 0000 0000 0004        		move.l	#Map_Flame,obMap(a0)
0001098A 317C 83D9 0002             		move.w	#$83D9,obGfx(a0)
00010990 0028 0004 0001             		ori.b	#4,obRender(a0)
00010996 317C 0080 0018             		move.w	#$80,obPriority(a0)
0001099C 3168 000C 0030             		move.w	obY(a0),$30(a0)	; store obY (gets overwritten later though)
000109A2 117C 000C 0014             		move.b	#$C,obActWid(a0)
000109A8 1028 0028                  		move.b	obSubtype(a0),d0
000109AC 0240 00F0                  		andi.w	#$F0,d0		; read 1st digit of object type
000109B0 D040                       		add.w	d0,d0		; multiply by 2
000109B2 3140 0030                  		move.w	d0,$30(a0)
000109B6 3140 0032                  		move.w	d0,$32(a0)	; set flaming time
000109BA 1028 0028                  		move.b	obSubtype(a0),d0
000109BE 0240 000F                  		andi.w	#$F,d0		; read 2nd digit of object type
000109C2 EB48                       		lsl.w	#5,d0		; multiply by $20
000109C4 3140 0034                  		move.w	d0,$34(a0)	; set pause time
000109C8 117C 000A 0036             		move.b	#$A,$36(a0)
000109CE 0828 0001 0022             		btst	#1,obStatus(a0)
000109D4 6700                       		beq.s	Flame_Action
000109D6 117C 0002 001C             		move.b	#2,obAnim(a0)
000109DC 117C 0015 0036             		move.b	#$15,$36(a0)
000109E2                            
000109E2                            Flame_Action:	; Routine 2
000109E2 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time
000109E6 6A00                       		bpl.s	loc_E57A	; if time remains, branch
000109E8 3168 0034 0030             		move.w	$34(a0),$30(a0)	; begin	pause time
000109EE 0868 0000 001C             		bchg	#0,obAnim(a0)
000109F4 6700                       		beq.s	loc_E57A
000109F6 3168 0032 0030             		move.w	$32(a0),$30(a0)	; begin	flaming	time
00010A06                            
00010A06                            loc_E57A:
00010A06 43F9 0000 0000             		lea	(Ani_Flame).l,a1
00010A0C 6100 C140                  		bsr.w	AnimateSprite
00010A10 117C 0000 0020             		move.b	#0,obColType(a0)
00010A16 1028 0036                  		move.b	$36(a0),d0
00010A1A B028 001A                  		cmp.b	obFrame(a0),d0
00010A1E 6600                       		bne.s	Flame_ChkDel
00010A20 117C 00A3 0020             		move.b	#$A3,obColType(a0)
00010A26                            
00010A26                            Flame_ChkDel:
00010A44 6000 F046                  		bra.w	DisplaySprite
00010A44 6000 F046                  		bra.w	DisplaySprite
00010A48                            		include	"_anim\Flamethrower.asm"
00010A48                            ; ---------------------------------------------------------------------------
00010A48                            ; Animation script - flamethrower (SBZ)
00010A48                            ; ---------------------------------------------------------------------------
00010A48 0000                       Ani_Flame:	dc.w @pipe1-Ani_Flame
00010A4A 0000                       		dc.w @pipe2-Ani_Flame
00010A4C 0000                       		dc.w @valve1-Ani_Flame
00010A4E 0000                       		dc.w @valve2-Ani_Flame
00010A50 0300 0102 0304 0506 0708+  @pipe1:		dc.b 3,	0, 1, 2, 3, 4, 5, 6, 7,	8, 9, $A, afBack, 2
00010A5E 0009 0705 0301 00FE 01     @pipe2:		dc.b 0,	9, 7, 5, 3, 1, 0, afBack, 1
00010A68 00                         		even
00010A68 030B 0C0D 0E0F 1011 1213+  @valve1:	dc.b 3,	$B, $C,	$D, $E,	$F, $10, $11, $12, $13,	$14, $15, afBack, 2
00010A76 0014 1211 0F0D 0BFE 01     @valve2:	dc.b 0,	$14, $12, $11, $F, $D, $B, afBack, 1
00010A80 00                         		even
00010A80 00                         		even
00010A80                            Map_Flame:	include	"_maps\Flamethrower.asm"
00010A80                            ; ---------------------------------------------------------------------------
00010A80                            ; Sprite mappings - flame thrower (SBZ)
00010A80                            ; ---------------------------------------------------------------------------
00010A80                            Map_Flame_internal:
00010A80 0000                       		dc.w @pipe1-Map_Flame_internal
00010A82 0000                       		dc.w @pipe2-Map_Flame_internal
00010A84 0000                       		dc.w @pipe3-Map_Flame_internal
00010A86 0000                       		dc.w @pipe4-Map_Flame_internal
00010A88 0000                       		dc.w @pipe5-Map_Flame_internal
00010A8A 0000                       		dc.w @pipe6-Map_Flame_internal
00010A8C 0000                       		dc.w @pipe7-Map_Flame_internal
00010A8E 0000                       		dc.w @pipe8-Map_Flame_internal
00010A90 0000                       		dc.w @pipe9-Map_Flame_internal
00010A92 0000                       		dc.w @pipe10-Map_Flame_internal
00010A94 0000                       		dc.w @pipe11-Map_Flame_internal
00010A96 0000                       		dc.w @valve1-Map_Flame_internal
00010A98 0000                       		dc.w @valve2-Map_Flame_internal
00010A9A 0000                       		dc.w @valve3-Map_Flame_internal
00010A9C 0000                       		dc.w @valve4-Map_Flame_internal
00010A9E 0000                       		dc.w @valve5-Map_Flame_internal
00010AA0 0000                       		dc.w @valve6-Map_Flame_internal
00010AA2 0000                       		dc.w @valve7-Map_Flame_internal
00010AA4 0000                       		dc.w @valve8-Map_Flame_internal
00010AA6 0000                       		dc.w @valve9-Map_Flame_internal
00010AA8 0000                       		dc.w @valve10-Map_Flame_internal
00010AAA 0000                       		dc.w @valve11-Map_Flame_internal
00010AAC 01                         @pipe1:		dc.b 1
00010AAD 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB ; broken pipe style flamethrower
00010AB2 02                         @pipe2:		dc.b 2
00010AB3 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
00010AB8 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
00010ABD 02                         @pipe3:		dc.b 2
00010ABE 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
00010AC3 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
00010AC8 03                         @pipe4:		dc.b 3
00010AC9 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
00010ACE 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
00010AD3 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
00010AD8 03                         @pipe5:		dc.b 3
00010AD9 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
00010ADE 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
00010AE3 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
00010AE8 04                         @pipe6:		dc.b 4
00010AE9 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
00010AEE 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
00010AF3 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
00010AF8 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
00010AFD 04                         @pipe7:		dc.b 4
00010AFE 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
00010B03 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
00010B08 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
00010B0D 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
00010B12 05                         @pipe8:		dc.b 5
00010B13 F80B 0008 F4               		dc.b $F8, $B, 0, 8, $F4
00010B18 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
00010B1D 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
00010B22 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
00010B27 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
00010B2C 05                         @pipe9:		dc.b 5
00010B2D F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
00010B32 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
00010B37 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
00010B3C 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
00010B41 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
00010B46 06                         @pipe10:	dc.b 6
00010B47 E80B 0008 F4               		dc.b $E8, $B, 0, 8, $F4
00010B4C F70B 0008 F4               		dc.b $F7, $B, 0, 8, $F4
00010B51 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
00010B56 0F06 0002 F8               		dc.b $F, 6, 0, 2, $F8
00010B5B 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
00010B60 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
00010B65 06                         @pipe11:	dc.b 6
00010B66 E70B 0808 F4               		dc.b $E7, $B, 8, 8, $F4
00010B6B F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
00010B70 0706 0802 F8               		dc.b 7,	6, 8, 2, $F8
00010B75 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
00010B7A 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
00010B7F 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
00010B84 01                         @valve1:	dc.b 1
00010B85 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9 ; valve style flamethrower
00010B8A 02                         @valve2:	dc.b 2
00010B8B 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
00010B90 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
00010B95 02                         @valve3:	dc.b 2
00010B96 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
00010B9B 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
00010BA0 03                         @valve4:	dc.b 3
00010BA1 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
00010BA6 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
00010BAB 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
00010BB0 03                         @valve5:	dc.b 3
00010BB1 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
00010BB6 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
00010BBB 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
00010BC0 04                         @valve6:	dc.b 4
00010BC1 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
00010BC6 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
00010BCB 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
00010BD0 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
00010BD5 04                         @valve7:	dc.b 4
00010BD6 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
00010BDB 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
00010BE0 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
00010BE5 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
00010BEA 05                         @valve8:	dc.b 5
00010BEB F80B 0008 F4               		dc.b $F8, $B, 0, 8, $F4
00010BF0 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
00010BF5 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
00010BFA 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
00010BFF 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
00010C04 05                         @valve9:	dc.b 5
00010C05 F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
00010C0A 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
00010C0F 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
00010C14 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
00010C19 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
00010C1E 06                         @valve10:	dc.b 6
00010C1F E80B 0008 F4               		dc.b $E8, $B, 0, 8, $F4
00010C24 F70B 0008 F4               		dc.b $F7, $B, 0, 8, $F4
00010C29 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
00010C2E 0F06 0002 F8               		dc.b $F, 6, 0, 2, $F8
00010C33 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
00010C38 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
00010C3D 06                         @valve11:	dc.b 6
00010C3E E70B 0808 F4               		dc.b $E7, $B, 8, 8, $F4
00010C43 F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
00010C48 0706 0802 F8               		dc.b 7,	6, 8, 2, $F8
00010C4D 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
00010C52 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
00010C57 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
00010C5C                            		even
00010C5C                            		even
00010C5C                            
00010C5C                            		include	"_incObj\46 MZ Bricks.asm"
00010C5C                            ; ---------------------------------------------------------------------------
00010C5C                            ; Object 46 - solid blocks and blocks that fall	from the ceiling (MZ)
00010C5C                            ; ---------------------------------------------------------------------------
00010C5C                            
00010C5C                            MarbleBrick:
00010C5C 7000                       		moveq	#0,d0
00010C5E 1028 0024                  		move.b	obRoutine(a0),d0
00010C62 323B 0000                  		move.w	Brick_Index(pc,d0.w),d1
00010C66 4EFB 1000                  		jmp	Brick_Index(pc,d1.w)
00010C6A                            ; ===========================================================================
00010C6A 0000                       Brick_Index:	dc.w Brick_Main-Brick_Index
00010C6C 0000                       		dc.w Brick_Action-Brick_Index
00010C6E                            
00010C6E =00000030                  brick_origY:	equ $30
00010C6E                            ; ===========================================================================
00010C6E                            
00010C6E                            Brick_Main:	; Routine 0
00010C6E 5428 0024                  		addq.b	#2,obRoutine(a0)
00010C72 117C 000F 0016             		move.b	#$F,obHeight(a0)
00010C78 117C 000F 0017             		move.b	#$F,obWidth(a0)
00010C7E 217C 0000 0000 0004        		move.l	#Map_Brick,obMap(a0)
00010C86 317C 4000 0002             		move.w	#$4000,obGfx(a0)
00010C8C 117C 0004 0001             		move.b	#4,obRender(a0)
00010C92 317C 0180 0018             		move.w	#$180,obPriority(a0)
00010C98 117C 0010 0014             		move.b	#$10,obActWid(a0)
00010C9E 3168 000C 0030             		move.w	obY(a0),brick_origY(a0)
00010CA4 317C 05C0 0032             		move.w	#$5C0,$32(a0)
00010CAA                            
00010CAA                            Brick_Action:	; Routine 2
00010CAA 4A28 0001                  		tst.b	obRender(a0)
00010CAE 6A00                       		bpl.s	@chkdel
00010CB0 7000                       		moveq	#0,d0
00010CB2 1028 0028                  		move.b	obSubtype(a0),d0 ; get object type
00010CB6 0240 0007                  		andi.w	#7,d0		; read only the	1st digit
00010CBA D040                       		add.w	d0,d0
00010CBC 323B 0000                  		move.w	Brick_TypeIndex(pc,d0.w),d1
00010CC0 4EBB 1000                  		jsr	Brick_TypeIndex(pc,d1.w)
00010CC4 323C 001B                  		move.w	#$1B,d1
00010CC8 343C 0010                  		move.w	#$10,d2
00010CCC 363C 0011                  		move.w	#$11,d3
00010CD0 3828 0008                  		move.w	obX(a0),d4
00010CD4 6100 0000                  		bsr.w	SolidObject
00010CD8                            
00010CD8                            	@chkdel:
00010CF6 6000 ED94                  			bra.w	DisplaySprite
00010CFA                            ; ===========================================================================
00010CFA 0000                       Brick_TypeIndex:dc.w Brick_Type00-Brick_TypeIndex
00010CFC 0000                       		dc.w Brick_Type01-Brick_TypeIndex
00010CFE 0000                       		dc.w Brick_Type02-Brick_TypeIndex
00010D00 0000                       		dc.w Brick_Type03-Brick_TypeIndex
00010D02 0000                       		dc.w Brick_Type04-Brick_TypeIndex
00010D04                            ; ===========================================================================
00010D04                            
00010D04                            Brick_Type00:
00010D04 4E75                       		rts	
00010D06                            ; ===========================================================================
00010D06                            
00010D06                            Brick_Type02:
00010D06 3038 D008                  		move.w	(v_player+obX).w,d0
00010D0A 9068 0008                  		sub.w	obX(a0),d0
00010D0E 6400                       		bcc.s	loc_E888
00010D10 4440                       		neg.w	d0
00010D12                            
00010D12                            loc_E888:
00010D12 0C40 0090                  		cmpi.w	#$90,d0		; is Sonic within $90 pixels of	the block?
00010D16 6400                       		bcc.s	Brick_Type01	; if not, resume wobbling
00010D18 117C 0003 0028             		move.b	#3,obSubtype(a0)	; if yes, make the block fall
00010D1E                            
00010D1E                            Brick_Type01:
00010D1E 7000                       		moveq	#0,d0
00010D20 1038 FE74                  		move.b	(v_oscillate+$16).w,d0
00010D24 0828 0003 0028             		btst	#3,obSubtype(a0)
00010D2A 6700                       		beq.s	loc_E8A8
00010D2C 4440                       		neg.w	d0
00010D2E 0640 0010                  		addi.w	#$10,d0
00010D32                            
00010D32                            loc_E8A8:
00010D32 3228 0030                  		move.w	brick_origY(a0),d1
00010D36 9240                       		sub.w	d0,d1
00010D38 3141 000C                  		move.w	d1,obY(a0)	; update the block's position to make it wobble
00010D3C 4E75                       		rts	
00010D3E                            ; ===========================================================================
00010D3E                            
00010D3E                            Brick_Type03:
00010D3E 6100 ED38                  		bsr.w	SpeedToPos
00010D42 0668 0018 0012             		addi.w	#$18,obVelY(a0)	; increase falling speed
00010D48 6100 0000                  		bsr.w	ObjFloorDist
00010D4C 4A41                       		tst.w	d1		; has the block	hit the	floor?
00010D4E 6A00 0000                  		bpl.w	locret_E8EE	; if not, branch
00010D52 D368 000C                  		add.w	d1,obY(a0)
00010D56 4268 0012                  		clr.w	obVelY(a0)	; stop the block falling
00010D5A 3168 000C 0030             		move.w	obY(a0),brick_origY(a0)
00010D60 117C 0004 0028             		move.b	#4,obSubtype(a0)
00010D66 3011                       		move.w	(a1),d0
00010D68 0240 03FF                  		andi.w	#$3FF,d0
00010D6C 0C40 016A                  			cmpi.w	#$16A,d0
00010D70 6400                       		bcc.s	locret_E8EE
00010D72 117C 0000 0028             		move.b	#0,obSubtype(a0)
00010D78                            
00010D78                            locret_E8EE:
00010D78 4E75                       		rts	
00010D7A                            ; ===========================================================================
00010D7A                            
00010D7A                            Brick_Type04:
00010D7A 7000                       		moveq	#0,d0
00010D7C 1038 FE70                  		move.b	(v_oscillate+$12).w,d0
00010D80 E648                       		lsr.w	#3,d0
00010D82 3228 0030                  		move.w	brick_origY(a0),d1
00010D86 9240                       		sub.w	d0,d1
00010D88 3141 000C                  		move.w	d1,obY(a0)	; make the block wobble
00010D8C 4E75                       		rts	
00010D8C 4E75                       		rts	
00010D8E                            Map_Brick:	include	"_maps\MZ Bricks.asm"
00010D8E                            ; ---------------------------------------------------------------------------
00010D8E                            ; Sprite mappings - solid blocks and blocks that fall from the ceiling (MZ)
00010D8E                            ; ---------------------------------------------------------------------------
00010D8E                            Map_Brick_internal:
00010D8E 0000                       		dc.w @brick-Map_Brick_internal
00010D90 01                         @brick:		dc.b 1
00010D91 F00F 0001 F0               		dc.b $F0, $F, 0, 1, $F0
00010D96                            		even
00010D96                            		even
00010D96                            
00010D96                            		include	"_incObj\12 Light.asm"
00010D96                            ; ---------------------------------------------------------------------------
00010D96                            ; Object 12 - lamp (SYZ)
00010D96                            ; ---------------------------------------------------------------------------
00010D96                            
00010D96                            SpinningLight:
00010D96 7000                       		moveq	#0,d0
00010D98 1028 0024                  		move.b	obRoutine(a0),d0
00010D9C 323B 0000                  		move.w	Light_Index(pc,d0.w),d1
00010DA0 4EFB 1000                  		jmp	Light_Index(pc,d1.w)
00010DA4                            ; ===========================================================================
00010DA4 0000                       Light_Index:	dc.w Light_Main-Light_Index
00010DA6 0000                       		dc.w Light_Animate-Light_Index
00010DA8                            ; ===========================================================================
00010DA8                            
00010DA8                            Light_Main:	; Routine 0
00010DA8 5428 0024                  		addq.b	#2,obRoutine(a0)
00010DAC 217C 0000 0000 0004        		move.l	#Map_Light,obMap(a0)
00010DB4 317C 0000 0002             		move.w	#0,obGfx(a0)
00010DBA 117C 0004 0001             		move.b	#4,obRender(a0)
00010DC0 117C 0010 0014             		move.b	#$10,obActWid(a0)
00010DC6 317C 0300 0018             		move.w	#$300,obPriority(a0)
00010DCC                            
00010DCC                            Light_Animate:	; Routine 2
00010DCC 5328 001E                  		subq.b	#1,obTimeFrame(a0)
00010DD0 6A00                       		bpl.s	@chkdel
00010DD2 117C 000C 001E             		move.b	#12,obTimeFrame(a0)
00010DD8 5228 001A                  		addq.b	#1,obFrame(a0)
00010DDC 0C28 0004 001A             		cmpi.b	#4,obFrame(a0)
00010DE2 6500                       		bcs.s	@chkdel
00010DE4 117C 0000 001A             		move.b	#0,obFrame(a0)
00010DEA                            
00010DEA                            	@chkdel:
00010E08 6000 EC82                  		bra.w	DisplaySprite
00010E08 6000 EC82                  		bra.w	DisplaySprite
00010E0C                            Map_Light	include	"_maps\Light.asm"
00010E0C                            ; --------------------------------------------------------------------------------
00010E0C                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
00010E0C                            ; --------------------------------------------------------------------------------
00010E0C                            
00010E0C                            SME_FBl1X:	
00010E0C 0000 0000                  		dc.w SME_FBl1X_8-SME_FBl1X, SME_FBl1X_22-SME_FBl1X	
00010E10 0000 0000                  		dc.w SME_FBl1X_3C-SME_FBl1X, SME_FBl1X_5B-SME_FBl1X	
00010E14 05                         SME_FBl1X_8:	dc.b 5	
00010E15 E004 006D 00               		dc.b $E0, 4, 0, $6D, 0	
00010E1A E80C 006F F8               		dc.b $E8, $C, 0, $6F, $F8	
00010E1F F00C 0073 F8               		dc.b $F0, $C, 0, $73, $F8	
00010E24 F800 0090 00               		dc.b $F8, 0, 0, $90, 0	
00010E29 F800 0890 08               		dc.b $F8, 0, 8, $90, 8	
00010E2E 05                         SME_FBl1X_22:	dc.b 5	
00010E2F E004 0077 00               		dc.b $E0, 4, 0, $77, 0	
00010E34 E804 0079 00               		dc.b $E8, 4, 0, $79, 0	
00010E39 E800 007B 10               		dc.b $E8, 0, 0, $7B, $10	
00010E3E F008 007C F8               		dc.b $F0, 8, 0, $7C, $F8	
00010E43 F804 0091 00               		dc.b $F8, 4, 0, $91, 0	
00010E48 06                         SME_FBl1X_3C:	dc.b 6	
00010E49 E000 007F 00               		dc.b $E0, 0, 0, $7F, 0	
00010E4E E000 0078 08               		dc.b $E0, 0, 0, $78, 8	
00010E53 E80C 0080 F8               		dc.b $E8, $C, 0, $80, $F8	
00010E58 F00C 0084 F8               		dc.b $F0, $C, 0, $84, $F8	
00010E5D F800 0093 08               		dc.b $F8, 0, 0, $93, 8	
00010E62 F800 0091 00               		dc.b $F8, 0, 0, $91, 0	
00010E67 05                         SME_FBl1X_5B:	dc.b 5	
00010E68 E004 0088 00               		dc.b $E0, 4, 0, $88, 0	
00010E6D E808 008A F8               		dc.b $E8, 8, 0, $8A, $F8	
00010E72 F008 008D 00               		dc.b $F0, 8, 0, $8D, 0	
00010E77 F800 0094 00               		dc.b $F8, 0, 0, $94, 0	
00010E7C F800 0890 08               		dc.b $F8, 0, 8, $90, 8	
00010E82 00                         		even
00010E82 00                         		even
00010E82                            		include	"_incObj\47 Bumper.asm"
00010E82                            ; ---------------------------------------------------------------------------
00010E82                            ; Object 47 - pinball bumper (SYZ)
00010E82                            ; ---------------------------------------------------------------------------
00010E82                            
00010E82                            Bumper:
00010E82 7000                       		moveq	#0,d0
00010E84 1028 0024                  		move.b	obRoutine(a0),d0
00010E88 323B 0000                  		move.w	Bump_Index(pc,d0.w),d1
00010E8C 4EFB 1000                  		jmp	Bump_Index(pc,d1.w)
00010E90                            ; ===========================================================================
00010E90 0000                       Bump_Index:	dc.w Bump_Main-Bump_Index
00010E92 0000                       		dc.w Bump_Hit-Bump_Index
00010E94                            ; ===========================================================================
00010E94                            
00010E94                            Bump_Main:	; Routine 0
00010E94 5428 0024                  		addq.b	#2,obRoutine(a0)
00010E98 217C 0000 0000 0004        		move.l	#Map_Bump,obMap(a0)
00010EA0 317C 0380 0002             		move.w	#$380,obGfx(a0)
00010EA6 117C 0004 0001             		move.b	#4,obRender(a0)
00010EAC 117C 0010 0014             		move.b	#$10,obActWid(a0)
00010EB2 317C 0080 0018             		move.w	#$80,obPriority(a0)
00010EB8 117C 00D7 0020             		move.b	#$D7,obColType(a0)
00010EBE                            
00010EBE                            Bump_Hit:	; Routine 2
00010EBE 4A28 0021                  		tst.b	obColProp(a0)	; has Sonic touched the	bumper?
00010EC2 6700 0000                  		beq.w	@display	; if not, branch
00010EC6 4228 0021                  		clr.b	obColProp(a0)
00010ECA 43F8 D000                  		lea	(v_player).w,a1
00010ECE 3228 0008                  		move.w	obX(a0),d1
00010ED2 3428 000C                  		move.w	obY(a0),d2
00010ED6 9269 0008                  		sub.w	obX(a1),d1
00010EDA 9469 000C                  		sub.w	obY(a1),d2
00010EDE 4EB9 0000 3D14             		jsr	(CalcAngle).l
00010EE4 4EB9 0000 3A82             		jsr	(CalcSine).l
00010EEA C3FC F900                  		muls.w	#-$700,d1
00010EEE E081                       		asr.l	#8,d1
00010EF0 3341 0010                  		move.w	d1,obVelX(a1)	; bounce Sonic away
00010EF4 C1FC F900                  		muls.w	#-$700,d0
00010EF8 E080                       		asr.l	#8,d0
00010EFA 3340 0012                  		move.w	d0,obVelY(a1)	; bounce Sonic away
00010EFE 08E9 0001 0022             		bset	#1,obStatus(a1)
00010F04 08A9 0004 0022             		bclr	#4,obStatus(a1)
00010F0A 08A9 0005 0022             		bclr	#5,obStatus(a1)
00010F10 4229 003C                  		clr.b	$3C(a1)
00010F14 117C 0001 001C             		move.b	#1,obAnim(a0)	; use "hit" animation
00010F24 45F8 FC00                  		lea	(v_objstate).w,a2
00010F28 7000                       		moveq	#0,d0
00010F2A 1028 0023                  		move.b	obRespawnNo(a0),d0
00010F2E 6700                       		beq.s	@addscore
00010F30 0C32 008A 0002             		cmpi.b	#$8A,2(a2,d0.w)	; has bumper been hit 10 times?
00010F36 6400                       		bcc.s	@display	; if yes, Sonic	gets no	points
00010F38 5232 0002                  		addq.b	#1,2(a2,d0.w)
00010F3C                            
00010F3C                            	@addscore:
00010F3C 7001                       		moveq	#1,d0
00010F3E 4EB9 0000 0000             		jsr	(AddPoints).l	; add 10 to score
00010F44 6100 EFD2                  		bsr.w	FindFreeObj
00010F48 6600                       		bne.s	@display
00010F4A 12BC 0029                  		move.b	#id_Points,0(a1) ; load points object
00010F4E 3368 0008 0008             		move.w	obX(a0),obX(a1)
00010F54 3368 000C 000C             		move.w	obY(a0),obY(a1)
00010F5A 137C 0004 001A             		move.b	#4,obFrame(a1)
00010F60                            
00010F60                            	@display:
00010F60 43F9 0000 0000             		lea	(Ani_Bump).l,a1
00010F66 6100 BBE6                  		bsr.w	AnimateSprite
00010F86 6000 EB04                  		bra.w	DisplaySprite
00010F8A                            ; ===========================================================================
00010F8A                            
00010F8A                            @resetcount:
00010F8A 45F8 FC00                  		lea	(v_objstate).w,a2
00010F8E 7000                       		moveq	#0,d0
00010F90 1028 0023                  		move.b	obRespawnNo(a0),d0
00010F94 6700                       		beq.s	@delete
00010F96 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00010F9C                            
00010F9C                            	@delete:
00010F9C 6000 EB2E                  		bra.w	DeleteObject
00010F9C 6000 EB2E                  		bra.w	DeleteObject
00010FA0                            		include	"_anim\Bumper.asm"
00010FA0                            ; ---------------------------------------------------------------------------
00010FA0                            ; Animation script - flamethrower (SBZ)
00010FA0                            ; ---------------------------------------------------------------------------
00010FA0 0000                       Ani_Bump:	dc.w byte_EAF4-Ani_Bump
00010FA2 0000                       		dc.w byte_EAF8-Ani_Bump
00010FA4 0F00 FF                    byte_EAF4:	dc.b $F, 0, afEnd
00010FA8 00                         		even
00010FA8 0301 0201 02FD 00          byte_EAF8:	dc.b 3,	1, 2, 1, 2, afChange, 0
00010FB0 00                         		even
00010FB0 00                         		even
00010FB0                            Map_Bump:	include	"_maps\Bumper.asm"
00010FB0                            ; ---------------------------------------------------------------------------
00010FB0                            ; Sprite mappings - pinball bumper (SYZ)
00010FB0                            ; ---------------------------------------------------------------------------
00010FB0                            Map_Bump_internal:
00010FB0 0000                       		dc.w @normal-Map_Bump_internal
00010FB2 0000                       		dc.w @bumped1-Map_Bump_internal
00010FB4 0000                       		dc.w @bumped2-Map_Bump_internal
00010FB6 02                         @normal:	dc.b 2
00010FB7 F007 0000 F0               		dc.b $F0, 7, 0,	0, $F0
00010FBC F007 0800 00               		dc.b $F0, 7, 8,	0, 0
00010FC1 02                         @bumped1:	dc.b 2
00010FC2 F406 0008 F4               		dc.b $F4, 6, 0,	8, $F4
00010FC7 F402 0808 04               		dc.b $F4, 2, 8,	8, 4
00010FCC 02                         @bumped2:	dc.b 2
00010FCD F007 000E F0               		dc.b $F0, 7, 0,	$E, $F0
00010FD2 F007 080E 00               		dc.b $F0, 7, 8,	$E, 0
00010FD8 00                         		even
00010FD8 00                         		even
00010FD8                            
00010FD8                            		include	"_incObj\0D Signpost.asm" ; includes "GotThroughAct" subroutine
00010FD8                            ; ---------------------------------------------------------------------------
00010FD8                            ; Object 0D - signpost at the end of a level
00010FD8                            ; ---------------------------------------------------------------------------
00010FD8                            
00010FD8                            Signpost:
00010FD8 7000                       		moveq	#0,d0
00010FDA 1028 0024                  		move.b	obRoutine(a0),d0
00010FDE 323B 0000                  		move.w	Sign_Index(pc,d0.w),d1
00010FE2 4EBB 1000                  		jsr	Sign_Index(pc,d1.w)
00010FE6 43F9 0000 0000             		lea	(Ani_Sign).l,a1
00010FEC 6100 BB60                  		bsr.w	AnimateSprite
00010FF0 6100 EA9A                  		bsr.w	DisplaySprite
00011012 4E75                       		rts	
00011014                            ; ===========================================================================
00011014 0000                       Sign_Index:	dc.w Sign_Main-Sign_Index
00011016 0000                       		dc.w Sign_Touch-Sign_Index
00011018 0000                       		dc.w Sign_Spin-Sign_Index
0001101A 0000                       		dc.w Sign_SonicRun-Sign_Index
0001101C 0000                       		dc.w Sign_Exit-Sign_Index
0001101E                            
0001101E =00000030                  spintime:	equ $30		; time for signpost to spin
0001101E =00000032                  sparkletime:	equ $32		; time between sparkles
0001101E =00000034                  sparkle_id:	equ $34		; counter to keep track of sparkles
0001101E                            ; ===========================================================================
0001101E                            
0001101E                            Sign_Main:	; Routine 0
0001101E 5428 0024                  		addq.b	#2,obRoutine(a0)
00011022 217C 0000 0000 0004        		move.l	#Map_Sign,obMap(a0)
0001102A 317C 0680 0002             		move.w	#$680,obGfx(a0)
00011030 117C 0004 0001             		move.b	#4,obRender(a0)
00011036 117C 0018 0014             		move.b	#$18,obActWid(a0)
0001103C 317C 0200 0018             		move.w	#$200,obPriority(a0)
00011042                            
00011042                            Sign_Touch:	; Routine 2
00011042 3038 D008                  		move.w	(v_player+obX).w,d0
00011046 9068 0008                  		sub.w	obX(a0),d0
0001104A 6500                       		bcs.s	@notouch
0001104C 0C40 0020                  		cmpi.w	#$20,d0		; is Sonic within $20 pixels of	the signpost?
00011050 6400                       		bcc.s	@notouch	; if not, branch
00011052 11FC 0001 F7AA             		move.b  #1,($FFFFF7AA).w ; Lock the screen
00011062 4238 FE1E                  		clr.b	(f_timecount).w	; stop time counter
00011066 31F8 F72A F728             		move.w	(v_limitright2).w,(v_limitleft2).w ; lock screen position
0001106C 5428 0024                  		addq.b	#2,obRoutine(a0)
00011070 11FC 0001 F5C2             		move.b  #1,($FFFFF5C2).w ; Set victory animation flag
00011076 4A38 F5C3                  		tst.b	(f_emeraldm).w
0001107A 6700                       		beq.s	@notouch
0001107C 5238 FE57                  		addq.b	#1,(v_emeralds).w ; add 1 to number of emeralds
0001108A                            
0001108A                            	@notouch:
0001108A 4E75                       		rts	
0001108C                            	
0001108C                            ; ===========================================================================
0001108C                            
0001108C                            Sign_Spin:	; Routine 4
0001108C 5368 0030                  		subq.w	#1,spintime(a0)	; subtract 1 from spin time
00011090 6A00                       		bpl.s	@chksparkle	; if time remains, branch
00011092 317C 003C 0030             		move.w	#60,spintime(a0) ; set spin cycle time to 1 second
00011098 5228 001C                  		addq.b	#1,obAnim(a0)	; next spin cycle
0001109C 0C28 0003 001C             		cmpi.b	#3,obAnim(a0)	; have 3 spin cycles completed?
000110A2 6600                       		bne.s	@chksparkle	; if not, branch
000110A4 5428 0024                  		addq.b	#2,obRoutine(a0)
000110A8                            
000110A8                            	@chksparkle:
000110A8 5368 0032                  		subq.w	#1,sparkletime(a0) ; subtract 1 from time delay
000110AC 6A00                       		bpl.s	@fail		; if time remains, branch
000110AE 317C 000B 0032             		move.w	#$B,sparkletime(a0) ; set time between sparkles to $B frames
000110B4 7000                       		moveq	#0,d0
000110B6 1028 0034                  		move.b	sparkle_id(a0),d0 ; get sparkle id
000110BA 5428 0034                  		addq.b	#2,sparkle_id(a0) ; increment sparkle counter
000110BE 0228 000E 0034             		andi.b	#$E,sparkle_id(a0)
000110C4 45FB 0000                  		lea	Sign_SparkPos(pc,d0.w),a2 ; load sparkle position data
000110C8 6100 EE4E                  		bsr.w	FindFreeObj
000110CC 6600                       		bne.s	@fail
000110CE 12BC 0025                  		move.b	#id_Rings,0(a1)	; load rings object
000110D2 137C 0006 0024             		move.b	#id_Ring_Sparkle,obRoutine(a1) ; jump to ring sparkle subroutine
000110D8 101A                       		move.b	(a2)+,d0
000110DA 4880                       		ext.w	d0
000110DC D068 0008                  		add.w	obX(a0),d0
000110E0 3340 0008                  		move.w	d0,obX(a1)
000110E4 101A                       		move.b	(a2)+,d0
000110E6 4880                       		ext.w	d0
000110E8 D068 000C                  		add.w	obY(a0),d0
000110EC 3340 000C                  		move.w	d0,obY(a1)
000110F0 237C 0000 C098 0004        		move.l	#Map_Ring,obMap(a1)
000110F8 337C 2798 0002             		move.w	#$2798,obGfx(a1)
000110FE 137C 0004 0001             		move.b	#4,obRender(a1)
00011104 337C 0100 0018             		move.w	#$100,obPriority(a1)
0001110A 137C 0008 0014             		move.b	#8,obActWid(a1)
00011110                            
00011110                            	@fail:
00011110 4E75                       		rts	
00011112                            ; ===========================================================================
00011112 E8F0                       Sign_SparkPos:	dc.b -$18,-$10		; x-position, y-position
00011114 0808                       		dc.b	8,   8
00011116 F000                       		dc.b -$10,   0
00011118 18F8                       		dc.b  $18,  -8
0001111A 00F8                       		dc.b	0,  -8
0001111C 1000                       		dc.b  $10,   0
0001111E E808                       		dc.b -$18,   8
00011120 1810                       		dc.b  $18, $10
00011122                            ; ===========================================================================
00011122                            
00011122                            Sign_SonicRun:	; Routine 6
00011122 4A78 FE08                  		tst.w	(v_debuguse).w	; is debug mode	on?
00011126 6600 0000                  		bne.w	locret_ECEE	; if yes, branch
0001112A 11FC 0001 F5C2             		move.b  #1,($FFFFF5C2).w ; Set victory animation flag
00011130                            		
00011130                            
00011130                            	loc_EC86:
00011130 5428 0024                  		addq.b	#2,obRoutine(a0)
00011134                            
00011134                            ; ---------------------------------------------------------------------------
00011134                            ; Subroutine to	set up bonuses at the end of an	act
00011134                            ; ---------------------------------------------------------------------------
00011134                            
00011134                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00011134                            
00011134                            
00011134                            GotThroughAct:
00011134 4A38 D5C0                  		tst.b	(v_objspace+$5C0).w
00011138 6600                       		bne.s	locret_ECEE
0001113A 31F8 F72A F728             		move.w	(v_limitright2).w,(v_limitleft2).w
00011140 4238 FE2D                  		clr.b	(v_invinc).w	; disable invincibility
00011144 4238 FE2E                  		clr.b	(v_shoes).w	; clear speed shoes
00011148 4238 FE1E                  		clr.b	(f_timecount).w	; stop time counter
0001114C 11FC 003A D5C0             		move.b	#id_GotThroughCard,(v_objspace+$5C0).w
00011152 7000                       		moveq	#plcid_TitleCard,d0
00011154 4EB9 0000 176C             		jsr	(NewPLC).l	; load title card patterns
0001115A 11FC 0001 F7D6             		move.b	#1,(f_endactbonus).w
00011160 7000                       		moveq	#0,d0
00011162 1038 FE23                  		move.b	(v_timemin).w,d0
00011166 C0FC 003C                  		mulu.w	#60,d0		; convert minutes to seconds
0001116A 7200                       		moveq	#0,d1
0001116C 1238 FE24                  		move.b	(v_timesec).w,d1
00011170 D041                       		add.w	d1,d0		; add up your time
00011172 80FC 000F                  		divu.w	#15,d0		; divide by 15
00011176 7214                       		moveq	#$14,d1
00011178 B041                       		cmp.w	d1,d0		; is time 5 minutes or higher?
0001117A 6500                       		bcs.s	hastimebonus	; if not, branch
0001117C 3001                       		move.w	d1,d0		; use minimum time bonus (0)
0001117E                            
0001117E                            	hastimebonus:
0001117E D040                       		add.w	d0,d0
00011180 31FB 0000 F7D2             		move.w	TimeBonuses(pc,d0.w),(v_timebonus).w ; set time bonus
00011186 3038 FE20                  		move.w	(v_rings).w,d0	; load number of rings
0001118A C0FC 000A                  		mulu.w	#10,d0		; multiply by 10
0001118E 31C0 F7D4                  		move.w	d0,(v_ringbonus).w ; set ring bonus
0001119C 11FC 0001 FE1D             		move.b	#1,(f_ringcount).w ; update rings counter
000111A2                            
000111A2                            locret_ECEE:
000111A2 4E75                       		rts	
000111A4                            
000111A4                            ; End of function GotThroughAct
000111A4                            
000111A4                            ; ===========================================================================
000111A4 1388 1388 03E8 01F4 0190+  TimeBonuses:	dc.w 5000, 5000, 1000, 500, 400, 400, 300, 300,	200, 200
000111B8 00C8 00C8 0064 0064 0064+  		dc.w 200, 200, 100, 100, 100, 100, 50, 50, 50, 50, 0
000111CE                            ; ===========================================================================
000111CE                            
000111CE                            Sign_Exit:	; Routine 8
000111CE 4E75                       		rts	
000111D0                            
000111D0                            ; ---------------------------------------------------------------------------
000111D0                            ; Subroutine to	set up bonuses at the end of an	zone
000111D0                            ; ---------------------------------------------------------------------------
000111D0                            
000111D0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000111D0                            
000111D0                            
000111D0                            GotThroughAct1:
000111D0 4A38 D5C0                  		tst.b	(v_objspace+$5C0).w
000111D4 6600                       		bne.s	locret_ECEE1
000111D6 31F8 F72A F728             		move.w	(v_limitright2).w,(v_limitleft2).w
000111DC 4238 FE2D                  		clr.b	(v_invinc).w	; disable invincibility
000111E0 4238 FE2E                  		clr.b	(v_shoes).w	; clear speed shoes
000111E4 4238 FE1E                  		clr.b	(f_timecount).w	; stop time counter
000111E8 11FC 003A D5C0             		move.b	#id_GotThroughCard,(v_objspace+$5C0).w
000111EE 7000                       		moveq	#plcid_TitleCard,d0
000111F0 4EB9 0000 176C             		jsr	(NewPLC).l	; load title card patterns
000111F6 11FC 0001 F7D6             		move.b	#1,(f_endactbonus).w
000111FC 7000                       		moveq	#0,d0
000111FE 1038 FE23                  		move.b	(v_timemin).w,d0
00011202 C0FC 003C                  		mulu.w	#60,d0		; convert minutes to seconds
00011206 7200                       		moveq	#0,d1
00011208 1238 FE24                  		move.b	(v_timesec).w,d1
0001120C D041                       		add.w	d1,d0		; add up your time
0001120E 80FC 000F                  		divu.w	#15,d0		; divide by 15
00011212 7214                       		moveq	#$14,d1
00011214 B041                       		cmp.w	d1,d0		; is time 5 minutes or higher?
00011216 6500 0000                  		bcs.w	hastimebonus2	; if not, branch
0001121A 3001                       		move.w	d1,d0		; use minimum time bonus (0)
0001121C                            
0001121C                            	hastimebonus2:
0001121C D040                       		add.w	d0,d0
0001121E 31FB 0000 F7D2             		move.w	TimeBonuses1(pc,d0.w),(v_timebonus).w ; set time bonus
00011224 3038 FE20                  		move.w	(v_rings).w,d0	; load number of rings
00011228 C0FC 000A                  		mulu.w	#10,d0		; multiply by 10
0001122C 31C0 F7D4                  		move.w	d0,(v_ringbonus).w ; set ring bonus
0001123A 11FC 0001 FE1D             		move.b	#1,(f_ringcount).w ; update rings counter
00011240                            
00011240                            locret_ECEE1:
00011240 4E75                       		rts	
00011242                            
00011242                            ; End of function GotThroughAct		
00011242                            
00011242 1388 1388 03E8 01F4 0190+  TimeBonuses1:	dc.w 5000, 5000, 1000, 500, 400, 400, 300, 300,	200, 200
00011256 00C8 00C8 0064 0064 0064+  		dc.w 200, 200, 100, 100, 100, 100, 50, 50, 50, 50, 0
00011256 00C8 00C8 0064 0064 0064+  		dc.w 200, 200, 100, 100, 100, 100, 50, 50, 50, 50, 0
0001126C                            		include	"_anim\Signpost.asm"
0001126C                            ; ---------------------------------------------------------------------------
0001126C                            ; Animation script - signpost
0001126C                            ; ---------------------------------------------------------------------------
0001126C 0000                       Ani_Sign:	dc.w @eggman-Ani_Sign
0001126E 0000                       		dc.w @spin1-Ani_Sign
00011270 0000                       		dc.w @spin2-Ani_Sign
00011272 0000                       		dc.w @sonic-Ani_Sign
00011274 0F00 FF                    @eggman:	dc.b $F, 0, afEnd
00011278 00                         		even
00011278 0100 0102 03FF             @spin1:		dc.b 1,	0, 1, 2, 3, afEnd
0001127E 0104 0102 03FF             @spin2:		dc.b 1,	4, 1, 2, 3, afEnd
00011284 0F04 FF                    @sonic:		dc.b $F, 4, afEnd
00011288 00                         		even
00011288 00                         		even
00011288                            Map_Sign:	include	"_maps\Signpost.asm"
00011288                            ; --------------------------------------------------------------------------------
00011288                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
00011288                            ; --------------------------------------------------------------------------------
00011288                            
00011288                            SME_KvSue:	
00011288 0000 0000                  		dc.w SME_KvSue_A-SME_KvSue, SME_KvSue_1F-SME_KvSue	
0001128C 0000 0000                  		dc.w SME_KvSue_2F-SME_KvSue, SME_KvSue_3F-SME_KvSue	
00011290 0000                       		dc.w SME_KvSue_4F-SME_KvSue	
00011292 04                         SME_KvSue_A:	dc.b 4	
00011293 F00B 0000 E8               		dc.b $F0, $B, 0, 0, $E8	
00011298 F00B 0800 00               		dc.b $F0, $B, 8, 0, 0	
0001129D 1001 0038 FC               		dc.b $10, 1, 0, $38, $FC	
000112A2 2008 003A F4               		dc.b $20, 8, 0, $3A, $F4	
000112A7 03                         SME_KvSue_1F:	dc.b 3	
000112A8 F00F 000C F0               		dc.b $F0, $F, 0, $C, $F0	
000112AD 1001 0038 FC               		dc.b $10, 1, 0, $38, $FC	
000112B2 2008 003A F4               		dc.b $20, 8, 0, $3A, $F4	
000112B7 03                         SME_KvSue_2F:	dc.b 3	
000112B8 F003 001C FC               		dc.b $F0, 3, 0, $1C, $FC	
000112BD 1001 0838 FC               		dc.b $10, 1, 8, $38, $FC	
000112C2 2008 003A F4               		dc.b $20, 8, 0, $3A, $F4	
000112C7 03                         SME_KvSue_3F:	dc.b 3	
000112C8 F00F 080C F0               		dc.b $F0, $F, 8, $C, $F0	
000112CD 1001 0838 FC               		dc.b $10, 1, 8, $38, $FC	
000112D2 2008 003A F4               		dc.b $20, 8, 0, $3A, $F4	
000112D7 04                         SME_KvSue_4F:	dc.b 4	
000112D8 F00B 0020 E8               		dc.b $F0, $B, 0, $20, $E8	
000112DD F00B 002C 00               		dc.b $F0, $B, 0, $2C, 0	
000112E2 1001 0038 FC               		dc.b $10, 1, 0, $38, $FC	
000112E7 2008 003A F4               		dc.b $20, 8, 0, $3A, $F4	
000112EC                            		even
000112EC                            		even
000112EC                            
000112EC                            		include	"_incObj\4C & 4D Lava Geyser Maker.asm"
000112EC                            ; ---------------------------------------------------------------------------
000112EC                            ; Object 4C - lava geyser / lavafall producer (MZ)
000112EC                            ; ---------------------------------------------------------------------------
000112EC                            
000112EC                            GeyserMaker:
000112EC 7000                       		moveq	#0,d0
000112EE 1028 0024                  		move.b	obRoutine(a0),d0
000112F2 323B 0000                  		move.w	GMake_Index(pc,d0.w),d1
000112F6 4EBB 1000                  		jsr	GMake_Index(pc,d1.w)
000112FA 6000 0000                  		bra.w	Geyser_ChkDel
000112FE                            ; ===========================================================================
000112FE 0000                       GMake_Index:	dc.w GMake_Main-GMake_Index
00011300 0000                       		dc.w GMake_Wait-GMake_Index
00011302 0000                       		dc.w GMake_ChkType-GMake_Index
00011304 0000                       		dc.w GMake_MakeLava-GMake_Index
00011306 0000                       		dc.w GMake_Display-GMake_Index
00011308 0000                       		dc.w GMake_Delete-GMake_Index
0001130A                            
0001130A =00000034                  gmake_time:	equ $34		; time delay (2 bytes)
0001130A =00000032                  gmake_timer:	equ $32		; current time remaining (2 bytes)
0001130A =0000003C                  gmake_parent:	equ $3C		; address of parent object
0001130A                            ; ===========================================================================
0001130A                            
0001130A                            GMake_Main:	; Routine 0
0001130A 5428 0024                  		addq.b	#2,obRoutine(a0)
0001130E 217C 0000 0000 0004        		move.l	#Map_Geyser,obMap(a0)
00011316 317C E3A8 0002             		move.w	#$E3A8,obGfx(a0)
0001131C 117C 0004 0001             		move.b	#4,obRender(a0)
00011322 317C 0080 0018             		move.w	#$80,obPriority(a0)
00011328 117C 0038 0014             		move.b	#$38,obActWid(a0)
0001132E 317C 0078 0034             		move.w	#120,gmake_time(a0) ; set time delay to 2 seconds
00011334                            
00011334                            GMake_Wait:	; Routine 2
00011334 5368 0032                  		subq.w	#1,gmake_timer(a0) ; decrement timer
00011338 6A00                       		bpl.s	@cancel		; if time remains, branch
0001133A                            
0001133A 3168 0034 0032             		move.w	gmake_time(a0),gmake_timer(a0) ; reset timer
00011340 3038 D00C                  		move.w	(v_player+obY).w,d0
00011344 3228 000C                  		move.w	obY(a0),d1
00011348 B041                       		cmp.w	d1,d0
0001134A 6400                       		bcc.s	@cancel
0001134C 0441 0170                  		subi.w	#$170,d1
00011350 B041                       		cmp.w	d1,d0
00011352 6500                       		bcs.s	@cancel
00011354 5428 0024                  		addq.b	#2,obRoutine(a0) ; if Sonic is within range, goto GMake_ChkType
00011358                            
00011358                            	@cancel:
00011358 4E75                       		rts	
0001135A                            ; ===========================================================================
0001135A                            
0001135A                            GMake_MakeLava:	; Routine 6
0001135A 5428 0024                  		addq.b	#2,obRoutine(a0)
0001135E 6100 EBCE                  		bsr.w	FindNextFreeObj
00011362 6600                       		bne.s	@fail
00011364 12BC 004D                  		move.b	#id_LavaGeyser,0(a1) ; load lavafall object
00011368 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001136E 3368 000C 000C             		move.w	obY(a0),obY(a1)
00011374 1368 0028 0028             		move.b	obSubtype(a0),obSubtype(a1)
0001137A 2348 003C                  		move.l	a0,gmake_parent(a1)
0001137E                            
0001137E                            	@fail:
0001137E 117C 0001 001C             		move.b	#1,obAnim(a0)
00011384 4A28 0028                  		tst.b	obSubtype(a0)	; is object type 0 (geyser) ?
00011388 6700                       		beq.s	@isgeyser	; if yes, branch
0001138A 117C 0004 001C             		move.b	#4,obAnim(a0)
00011390 6000                       		bra.s	GMake_Display
00011392                            ; ===========================================================================
00011392                            
00011392                            	@isgeyser:
00011392 2268 003C                  		movea.l	gmake_parent(a0),a1 ; get parent object address
00011396 08E9 0001 0022             		bset	#1,obStatus(a1)
0001139C 337C FA80 0012             		move.w	#-$580,obVelY(a1)
000113A2 6000                       		bra.s	GMake_Display
000113A4                            ; ===========================================================================
000113A4                            
000113A4                            GMake_ChkType:	; Routine 4
000113A4 4A28 0028                  		tst.b	obSubtype(a0)	; is object type 00 (geyser) ?
000113A8 6700                       		beq.s	GMake_Display	; if yes, branch
000113AA 5428 0024                  		addq.b	#2,obRoutine(a0)
000113AE 4E75                       		rts	
000113B0                            ; ===========================================================================
000113B0                            
000113B0                            GMake_Display:	; Routine 8
000113B0 43F9 0000 0000             		lea	(Ani_Geyser).l,a1
000113B6 6100 B796                  		bsr.w	AnimateSprite
000113BA 6100 E6D0                  		bsr.w	DisplaySprite
000113BE 4E75                       		rts	
000113C0                            ; ===========================================================================
000113C0                            
000113C0                            GMake_Delete:	; Routine $A
000113C0 117C 0000 001C             		move.b	#0,obAnim(a0)
000113C6 117C 0002 0024             		move.b	#2,obRoutine(a0)
000113CC 4A28 0028                  		tst.b	obSubtype(a0)
000113D0 6700 E6FA                  		beq.w	DeleteObject
000113D4 4E75                       		rts	
000113D6                            
000113D6                            
000113D6                            ; ---------------------------------------------------------------------------
000113D6                            ; Object 4D - lava geyser / lavafall (MZ)
000113D6                            ; ---------------------------------------------------------------------------
000113D6                            
000113D6                            LavaGeyser:
000113D6 7000                       		moveq	#0,d0
000113D8 1028 0024                  		move.b	obRoutine(a0),d0
000113DC 323B 0000                  		move.w	Geyser_Index(pc,d0.w),d1
000113E0 4EBB 1000                  		jsr	Geyser_Index(pc,d1.w)
000113E4 6000 E6A6                  		bra.w	DisplaySprite
000113E8                            ; ===========================================================================
000113E8 0000                       Geyser_Index:	dc.w Geyser_Main-Geyser_Index
000113EA 0000                       		dc.w Geyser_Action-Geyser_Index
000113EC 0000                       		dc.w loc_EFFC-Geyser_Index
000113EE 0000                       		dc.w Geyser_Delete-Geyser_Index
000113F0                            
000113F0 FB00 0000                  Geyser_Speeds:	dc.w $FB00, 0
000113F4                            ; ===========================================================================
000113F4                            
000113F4                            Geyser_Main:	; Routine 0
000113F4 5428 0024                  		addq.b	#2,obRoutine(a0)
000113F8 3168 000C 0030             		move.w	obY(a0),$30(a0)
000113FE 4A28 0028                  		tst.b	obSubtype(a0)
00011402 6700                       		beq.s	@isgeyser
00011404 0468 0250 000C             		subi.w	#$250,obY(a0)
0001140A                            
0001140A                            	@isgeyser:
0001140A 7000                       		moveq	#0,d0
0001140C 1028 0028                  		move.b	obSubtype(a0),d0
00011410 D040                       		add.w	d0,d0
00011412 317B 00DC 0012             		move.w	Geyser_Speeds(pc,d0.w),obVelY(a0)
00011418 2248                       		movea.l	a0,a1
0001141A 7201                       		moveq	#1,d1
0001141C 6100                       		bsr.s	@makelava
0001141E 6000                       		bra.s	@activate
00011420                            ; ===========================================================================
00011420                            
00011420                            	@loop:
00011420 6100 EB0C                  		bsr.w	FindNextFreeObj
00011424 6600                       		bne.s	@fail
00011426                            
00011426                            @makelava:
00011426 12BC 004D                  		move.b	#id_LavaGeyser,0(a1)
0001142A 237C 0000 0000 0004        		move.l	#Map_Geyser,obMap(a1)
00011432 337C 63A8 0002             		move.w	#$63A8,obGfx(a1)
00011438 137C 0004 0001             		move.b	#4,obRender(a1)
0001143E 137C 0020 0014             		move.b	#$20,obActWid(a1)
00011444 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001144A 3368 000C 000C             		move.w	obY(a0),obY(a1)
00011450 1368 0028 0028             		move.b	obSubtype(a0),obSubtype(a1)
00011456 337C 0080 0018             		move.w	#$80,obPriority(a1)
0001145C 137C 0005 001C             		move.b	#5,obAnim(a1)
00011462 4A28 0028                  		tst.b	obSubtype(a0)
00011466 6700                       		beq.s	@fail
00011468 137C 0002 001C             		move.b	#2,obAnim(a1)
0001146E                            
0001146E                            	@fail:
0001146E 51C9 FFB0                  		dbf	d1,@loop
00011472 4E75                       		rts	
00011474                            ; ===========================================================================
00011474                            
00011474                            @activate:
00011474 0669 0060 000C             		addi.w	#$60,obY(a1)
0001147A 3368 0030 0030             		move.w	$30(a0),$30(a1)
00011480 0669 0060 0030             		addi.w	#$60,$30(a1)
00011486 137C 0093 0020             		move.b	#$93,obColType(a1)
0001148C 137C 0080 0016             		move.b	#$80,obHeight(a1)
00011492 08E9 0004 0001             		bset	#4,obRender(a1)
00011498 5829 0024                  		addq.b	#4,obRoutine(a1)
0001149C 2348 003C                  		move.l	a0,$3C(a1)
000114A0 4A28 0028                  		tst.b	obSubtype(a0)
000114A4 6700                       		beq.s	@sound
000114A6 7200                       		moveq	#0,d1
000114A8 6100 FF76                  		bsr.w	@loop
000114AC 5429 0024                  		addq.b	#2,obRoutine(a1)
000114B0 08E9 0004 0002             		bset	#4,obGfx(a1)
000114B6 0669 0100 000C             		addi.w	#$100,obY(a1)
000114BC 337C 0000 0018             		move.w	#0,obPriority(a1)
000114C2 3368 0030 0030             		move.w	$30(a0),$30(a1)
000114C8 2368 003C 003C             		move.l	$3C(a0),$3C(a1)
000114CE 117C 0000 0028             		move.b	#0,obSubtype(a0)
000114D4                            
000114D4                            	@sound:
000114DE                            
000114DE                            Geyser_Action:	; Routine 2
000114DE 7000                       		moveq	#0,d0
000114E0 1028 0028                  		move.b	obSubtype(a0),d0
000114E4 D040                       		add.w	d0,d0
000114E6 323B 0000                  		move.w	Geyser_Types(pc,d0.w),d1
000114EA 4EBB 1000                  		jsr	Geyser_Types(pc,d1.w)
000114EE 6100 E588                  		bsr.w	SpeedToPos
000114F2 43F9 0000 0000             		lea	(Ani_Geyser).l,a1
000114F8 6100 B654                  		bsr.w	AnimateSprite
000114FC                            
000114FC                            Geyser_ChkDel:
0001151A 4E75                       		rts	
0001151C                            ; ===========================================================================
0001151C 0000                       Geyser_Types:	dc.w Geyser_Type00-Geyser_Types
0001151E 0000                       		dc.w Geyser_Type01-Geyser_Types
00011520                            ; ===========================================================================
00011520                            
00011520                            Geyser_Type00:
00011520 0668 0018 0012             		addi.w	#$18,obVelY(a0)	; increase object's falling speed
00011526 3028 0030                  		move.w	$30(a0),d0
0001152A B068 000C                  		cmp.w	obY(a0),d0
0001152E 6400                       		bcc.s	locret_EFDA
00011530 5828 0024                  		addq.b	#4,obRoutine(a0)
00011534 2268 003C                  		movea.l	$3C(a0),a1
00011538 137C 0003 001C             		move.b	#3,obAnim(a1)
0001153E                            
0001153E                            locret_EFDA:
0001153E 4E75                       		rts	
00011540                            ; ===========================================================================
00011540                            
00011540                            Geyser_Type01:
00011540 0668 0018 0012             		addi.w	#$18,obVelY(a0)	; increase object's falling speed
00011546 3028 0030                  		move.w	$30(a0),d0
0001154A B068 000C                  		cmp.w	obY(a0),d0
0001154E 6400                       		bcc.s	locret_EFFA
00011550 5828 0024                  		addq.b	#4,obRoutine(a0)
00011554 2268 003C                  		movea.l	$3C(a0),a1
00011558 137C 0001 001C             		move.b	#1,obAnim(a1)
0001155E                            
0001155E                            locret_EFFA:
0001155E 4E75                       		rts	
00011560                            ; ===========================================================================
00011560                            
00011560                            loc_EFFC:	; Routine 4
00011560 2268 003C                  		movea.l	$3C(a0),a1
00011564 0C29 0006 0024             		cmpi.b	#6,obRoutine(a1)
0001156A 6700 0000                  		beq.w	Geyser_Delete
0001156E 3029 000C                  		move.w	obY(a1),d0
00011572 0640 0060                  		addi.w	#$60,d0
00011576 3140 000C                  		move.w	d0,obY(a0)
0001157A 9068 0030                  		sub.w	$30(a0),d0
0001157E 4440                       		neg.w	d0
00011580 7208                       		moveq	#8,d1
00011582 0C40 0040                  		cmpi.w	#$40,d0
00011586 6C00                       		bge.s	loc_F026
00011588 720B                       		moveq	#$B,d1
0001158A                            
0001158A                            loc_F026:
0001158A 0C40 0080                  		cmpi.w	#$80,d0
0001158E 6F00                       		ble.s	loc_F02E
00011590 720E                       		moveq	#$E,d1
00011592                            
00011592                            loc_F02E:
00011592 5328 001E                  		subq.b	#1,obTimeFrame(a0)
00011596 6A00                       		bpl.s	loc_F04C
00011598 117C 0007 001E             		move.b	#7,obTimeFrame(a0)
0001159E 5228 001B                  		addq.b	#1,obAniFrame(a0)
000115A2 0C28 0002 001B             		cmpi.b	#2,obAniFrame(a0)
000115A8 6500                       		bcs.s	loc_F04C
000115AA 117C 0000 001B             		move.b	#0,obAniFrame(a0)
000115B0                            
000115B0                            loc_F04C:
000115B0 1028 001B                  		move.b	obAniFrame(a0),d0
000115B4 D001                       		add.b	d1,d0
000115B6 1140 001A                  		move.b	d0,obFrame(a0)
000115BA 6000 FF40                  		bra.w	Geyser_ChkDel
000115BE                            ; ===========================================================================
000115BE                            
000115BE                            Geyser_Delete:	; Routine 6
000115BE 6000 E50C                  		bra.w	DeleteObject
000115BE 6000 E50C                  		bra.w	DeleteObject
000115C2                            		include	"_incObj\54 Lava Tag.asm"
000115C2                            ; ---------------------------------------------------------------------------
000115C2                            ; Object 54 - invisible	lava tag (MZ)
000115C2                            ; ---------------------------------------------------------------------------
000115C2                            
000115C2                            LavaTag:
000115C2 0C28 0002 0028             		cmpi.b	#2,obSubtype(a0)	;TIS
000115C8 6E00 0000                  		bgt	WaterTag	;TIS
000115CC 7000                       		moveq	#0,d0
000115CE 1028 0024                  		move.b	obRoutine(a0),d0
000115D2 323B 0000                  		move.w	LTag_Index(pc,d0.w),d1
000115D6 4EFB 1000                  		jmp	LTag_Index(pc,d1.w)
000115DA                            ; ===========================================================================
000115DA 0000                       LTag_Index:	dc.w LTag_Main-LTag_Index
000115DC 0000                       		dc.w LTag_ChkDel-LTag_Index
000115DE                            
000115DE 9694 95                    LTag_ColTypes:	dc.b $96, $94, $95
000115E2 00                         		even
000115E2                            ; ===========================================================================
000115E2                            
000115E2                            LTag_Main:	; Routine 0
000115E2 5428 0024                  		addq.b	#2,obRoutine(a0)
000115E6 7000                       		moveq	#0,d0
000115E8 1028 0028                  		move.b	obSubtype(a0),d0
000115EC 117B 00F0 0020             		move.b	LTag_ColTypes(pc,d0.w),obColType(a0)
000115F2 217C 0000 0000 0004        		move.l	#Map_LTag,obMap(a0)
000115FA 117C 0084 0001             		move.b	#$84,obRender(a0)
00011600                            
00011600                            LTag_ChkDel:	; Routine 2
00011600 3028 0008                  		move.w	obX(a0),d0
00011604 0240 FF80                  		andi.w	#$FF80,d0
00011608 3238 F700                  		move.w	(v_screenposx).w,d1
0001160C 0441 0080                  		subi.w	#$80,d1
00011610 0241 FF80                  		andi.w	#$FF80,d1
00011614 9041                       		sub.w	d1,d0
00011616 6B00 E4B4                  		bmi.w	DeleteObject
0001161A 0C40 0280                  		cmpi.w	#$280,d0
0001161E 6200 E4AC                  		bhi.w	DeleteObject
00011622 4E75                       		rts
00011624                            
00011624                            
00011624                            ; ---------------------------------------------------------------------------
00011624                            ; Object 54a - invisible	water tag (MZ) - TIS
00011624                            ; ---------------------------------------------------------------------------
00011624                            
00011624                            WaterTag:	
00011624 7000                       		moveq	#0,d0
00011626 1028 0024                  		move.b	obRoutine(a0),d0
0001162A 323B 0000                  		move.w	WTag_Index(pc,d0.w),d1
0001162E 4EFB 1000                  		jmp	WTag_Index(pc,d1.w)
00011632                            ; ===========================================================================
00011632 0000                       WTag_Index:	dc.w WTag_Main-WTag_Index
00011634 0000                       		dc.w WTag_ChkDel-WTag_Index
00011636                            
00011636 9694 95                    WTag_ColTypes:	dc.b $96, $94, $95
0001163A 00                         		even
0001163A                            ; ===========================================================================
0001163A                            
0001163A                            
0001163A                            WTag_Main:	; Routine 0
0001163A 5428 0024                  		addq.b	#2,obRoutine(a0)
0001163E 7000                       		moveq	#0,d0
00011640                            		;move.b	obSubtype(a0),d0
00011640                            		;move.b	WTag_ColTypes(pc,d0.w),obColType(a0)
00011640 0400 00F0                  		sub.b	#$F0,d0
00011644 1178 0096 0020             		move.b	$96,obColType(a0)							
0001164A                            		;move.l	#Map_LTag,obMap(a0)
0001164A                            		;move.b	#$84,obRender(a0)
0001164A                            
0001164A                            WTag_ChkDel:	; Routine 2
0001164A 3028 0008                  		move.w	obX(a0),d0
0001164E 0240 FF80                  		andi.w	#$FF80,d0
00011652 3238 F700                  		move.w	(v_screenposx).w,d1
00011656 0441 0080                  		subi.w	#$80,d1
0001165A 0241 FF80                  		andi.w	#$FF80,d1
0001165E 9041                       		sub.w	d1,d0
00011660 6B00 E46A                  		bmi.w	DeleteObject
00011664 0C40 0280                  		cmpi.w	#$280,d0
00011668 6200 E462                  		bhi.w	DeleteObject
0001166C 4E75                       		rts
0001166E                            
0001166E                            
0001166E                            Map_LTag:	include	"_maps\Lava Tag.asm"
0001166E                            ; ---------------------------------------------------------------------------
0001166E                            ; Sprite mappings - invisible lava tag (MZ)
0001166E                            ; ---------------------------------------------------------------------------
0001166E                            Map_LTag_internal:
0001166E 0000                       		dc.w @0-Map_LTag_internal
00011670 00                         @0:		dc.b 0		; no sprite, because the tag is invisible!
00011672 00                         		even
00011672 00                         		even
00011672                            		include	"_anim\Lava Geyser.asm"
00011672                            ; ---------------------------------------------------------------------------
00011672                            ; Animation script - geyser of lava (MZ)
00011672                            ; ---------------------------------------------------------------------------
00011672 0000                       Ani_Geyser:	dc.w @bubble1-Ani_Geyser
00011674 0000                       		dc.w @bubble2-Ani_Geyser
00011676 0000                       		dc.w @end-Ani_Geyser
00011678 0000                       		dc.w @bubble3-Ani_Geyser
0001167A 0000                       		dc.w @blank-Ani_Geyser
0001167C 0000                       		dc.w @bubble4-Ani_Geyser
0001167E 0200 0100 0104 0504 05FC   @bubble1:	dc.b 2,	0, 1, 0, 1, 4, 5, 4, 5,	afRoutine
00011688 0202 03FF                  @bubble2:	dc.b 2,	2, 3, afEnd
0001168C 0206 07FF                  @end:		dc.b 2,	6, 7, afEnd
00011690 0202 0300 0100 01FC        @bubble3:	dc.b 2,	2, 3, 0, 1, 0, 1, afRoutine
00011698 0F13 FF                    @blank:		dc.b $F, $13, afEnd
0001169C 00                         		even
0001169C 0211 12FF                  @bubble4:	dc.b 2,	$11, $12, afEnd
000116A0                            		even
000116A0                            		even
000116A0                            Map_Geyser:	include	"_maps\Lava Geyser.asm"
000116A0                            ; ---------------------------------------------------------------------------
000116A0                            ; Sprite mappings - lava geyser / lava that falls from the ceiling (MZ)
000116A0                            ; ---------------------------------------------------------------------------
000116A0                            Map_Geyser_internal:
000116A0 0000                       		dc.w @bubble1-Map_Geyser_internal
000116A2 0000                       		dc.w @bubble2-Map_Geyser_internal
000116A4 0000                       		dc.w @bubble3-Map_Geyser_internal
000116A6 0000                       		dc.w @bubble4-Map_Geyser_internal
000116A8 0000                       		dc.w @bubble5-Map_Geyser_internal
000116AA 0000                       		dc.w @bubble6-Map_Geyser_internal
000116AC 0000                       		dc.w @end1-Map_Geyser_internal
000116AE 0000                       		dc.w @end2-Map_Geyser_internal
000116B0 0000                       		dc.w @medcolumn1-Map_Geyser_internal
000116B2 0000                       		dc.w @medcolumn2-Map_Geyser_internal
000116B4 0000                       		dc.w @medcolumn3-Map_Geyser_internal
000116B6 0000                       		dc.w @shortcolumn1-Map_Geyser_internal
000116B8 0000                       		dc.w @shortcolumn2-Map_Geyser_internal
000116BA 0000                       		dc.w @shortcolumn3-Map_Geyser_internal
000116BC 0000                       		dc.w @longcolumn1-Map_Geyser_internal
000116BE 0000                       		dc.w @longcolumn2-Map_Geyser_internal
000116C0 0000                       		dc.w @longcolumn3-Map_Geyser_internal
000116C2 0000                       		dc.w @bubble7-Map_Geyser_internal
000116C4 0000                       		dc.w @bubble8-Map_Geyser_internal
000116C6 0000                       		dc.w @blank-Map_Geyser_internal
000116C8 02                         @bubble1:	dc.b 2
000116C9 EC0B 0000 E8               		dc.b $EC, $B, 0, 0, $E8
000116CE EC0B 0800 00               		dc.b $EC, $B, 8, 0, 0
000116D3 02                         @bubble2:	dc.b 2
000116D4 EC0B 0018 E8               		dc.b $EC, $B, 0, $18, $E8
000116D9 EC0B 0818 00               		dc.b $EC, $B, 8, $18, 0
000116DE 04                         @bubble3:	dc.b 4
000116DF EC0B 0000 C8               		dc.b $EC, $B, 0, 0, $C8
000116E4 F40E 000C E0               		dc.b $F4, $E, 0, $C, $E0
000116E9 F40E 080C 00               		dc.b $F4, $E, 8, $C, 0
000116EE EC0B 0800 20               		dc.b $EC, $B, 8, 0, $20
000116F3 04                         @bubble4:	dc.b 4
000116F4 EC0B 0018 C8               		dc.b $EC, $B, 0, $18, $C8
000116F9 F40E 0024 E0               		dc.b $F4, $E, 0, $24, $E0
000116FE F40E 0824 00               		dc.b $F4, $E, 8, $24, 0
00011703 EC0B 0818 20               		dc.b $EC, $B, 8, $18, $20
00011708 06                         @bubble5:	dc.b 6
00011709 EC0B 0000 C8               		dc.b $EC, $B, 0, 0, $C8
0001170E F40E 000C E0               		dc.b $F4, $E, 0, $C, $E0
00011713 F40E 080C 00               		dc.b $F4, $E, 8, $C, 0
00011718 EC0B 0800 20               		dc.b $EC, $B, 8, 0, $20
0001171D E80E 0090 E0               		dc.b $E8, $E, 0, $90, $E0
00011722 E80E 0890 00               		dc.b $E8, $E, 8, $90, 0
00011727 06                         @bubble6:	dc.b 6
00011728 EC0B 0018 C8               		dc.b $EC, $B, 0, $18, $C8
0001172D F40E 0024 E0               		dc.b $F4, $E, 0, $24, $E0
00011732 F40E 0824 00               		dc.b $F4, $E, 8, $24, 0
00011737 EC0B 0818 20               		dc.b $EC, $B, 8, $18, $20
0001173C E80E 0890 E0               		dc.b $E8, $E, 8, $90, $E0
00011741 E80E 0090 00               		dc.b $E8, $E, 0, $90, 0
00011746 02                         @end1:		dc.b 2
00011747 E00F 0030 E0               		dc.b $E0, $F, 0, $30, $E0
0001174C E00F 0830 00               		dc.b $E0, $F, 8, $30, 0
00011751 02                         @end2:		dc.b 2
00011752 E00F 0830 E0               		dc.b $E0, $F, 8, $30, $E0
00011757 E00F 0030 00               		dc.b $E0, $F, 0, $30, 0
0001175C 0A                         @medcolumn1:	dc.b $A
0001175D 900F 0040 E0               		dc.b $90, $F, 0, $40, $E0
00011762 900F 0840 00               		dc.b $90, $F, 8, $40, 0
00011767 B00F 0040 E0               		dc.b $B0, $F, 0, $40, $E0
0001176C B00F 0840 00               		dc.b $B0, $F, 8, $40, 0
00011771 D00F 0040 E0               		dc.b $D0, $F, 0, $40, $E0
00011776 D00F 0840 00               		dc.b $D0, $F, 8, $40, 0
0001177B F00F 0040 E0               		dc.b $F0, $F, 0, $40, $E0
00011780 F00F 0840 00               		dc.b $F0, $F, 8, $40, 0
00011785 100F 0040 E0               		dc.b $10, $F, 0, $40, $E0
0001178A 100F 0840 00               		dc.b $10, $F, 8, $40, 0
0001178F 0A                         @medcolumn2:	dc.b $A
00011790 900F 0050 E0               		dc.b $90, $F, 0, $50, $E0
00011795 900F 0850 00               		dc.b $90, $F, 8, $50, 0
0001179A B00F 0050 E0               		dc.b $B0, $F, 0, $50, $E0
0001179F B00F 0850 00               		dc.b $B0, $F, 8, $50, 0
000117A4 D00F 0050 E0               		dc.b $D0, $F, 0, $50, $E0
000117A9 D00F 0850 00               		dc.b $D0, $F, 8, $50, 0
000117AE F00F 0050 E0               		dc.b $F0, $F, 0, $50, $E0
000117B3 F00F 0850 00               		dc.b $F0, $F, 8, $50, 0
000117B8 100F 0050 E0               		dc.b $10, $F, 0, $50, $E0
000117BD 100F 0850 00               		dc.b $10, $F, 8, $50, 0
000117C2 0A                         @medcolumn3:	dc.b $A
000117C3 900F 0060 E0               		dc.b $90, $F, 0, $60, $E0
000117C8 900F 0860 00               		dc.b $90, $F, 8, $60, 0
000117CD B00F 0060 E0               		dc.b $B0, $F, 0, $60, $E0
000117D2 B00F 0860 00               		dc.b $B0, $F, 8, $60, 0
000117D7 D00F 0060 E0               		dc.b $D0, $F, 0, $60, $E0
000117DC D00F 0860 00               		dc.b $D0, $F, 8, $60, 0
000117E1 F00F 0060 E0               		dc.b $F0, $F, 0, $60, $E0
000117E6 F00F 0860 00               		dc.b $F0, $F, 8, $60, 0
000117EB 100F 0060 E0               		dc.b $10, $F, 0, $60, $E0
000117F0 100F 0860 00               		dc.b $10, $F, 8, $60, 0
000117F5 06                         @shortcolumn1:	dc.b 6
000117F6 900F 0040 E0               		dc.b $90, $F, 0, $40, $E0
000117FB 900F 0840 00               		dc.b $90, $F, 8, $40, 0
00011800 B00F 0040 E0               		dc.b $B0, $F, 0, $40, $E0
00011805 B00F 0840 00               		dc.b $B0, $F, 8, $40, 0
0001180A D00F 0040 E0               		dc.b $D0, $F, 0, $40, $E0
0001180F D00F 0840 00               		dc.b $D0, $F, 8, $40, 0
00011814 06                         @shortcolumn2:	dc.b 6
00011815 900F 0050 E0               		dc.b $90, $F, 0, $50, $E0
0001181A 900F 0850 00               		dc.b $90, $F, 8, $50, 0
0001181F B00F 0050 E0               		dc.b $B0, $F, 0, $50, $E0
00011824 B00F 0850 00               		dc.b $B0, $F, 8, $50, 0
00011829 D00F 0050 E0               		dc.b $D0, $F, 0, $50, $E0
0001182E D00F 0850 00               		dc.b $D0, $F, 8, $50, 0
00011833 06                         @shortcolumn3:	dc.b 6
00011834 900F 0060 E0               		dc.b $90, $F, 0, $60, $E0
00011839 900F 0860 00               		dc.b $90, $F, 8, $60, 0
0001183E B00F 0060 E0               		dc.b $B0, $F, 0, $60, $E0
00011843 B00F 0860 00               		dc.b $B0, $F, 8, $60, 0
00011848 D00F 0060 E0               		dc.b $D0, $F, 0, $60, $E0
0001184D D00F 0860 00               		dc.b $D0, $F, 8, $60, 0
00011852 10                         @longcolumn1:	dc.b $10
00011853 900F 0040 E0               		dc.b $90, $F, 0, $40, $E0
00011858 900F 0840 00               		dc.b $90, $F, 8, $40, 0
0001185D B00F 0040 E0               		dc.b $B0, $F, 0, $40, $E0
00011862 B00F 0840 00               		dc.b $B0, $F, 8, $40, 0
00011867 D00F 0040 E0               		dc.b $D0, $F, 0, $40, $E0
0001186C D00F 0840 00               		dc.b $D0, $F, 8, $40, 0
00011871 F00F 0040 E0               		dc.b $F0, $F, 0, $40, $E0
00011876 F00F 0840 00               		dc.b $F0, $F, 8, $40, 0
0001187B 100F 0040 E0               		dc.b $10, $F, 0, $40, $E0
00011880 100F 0840 00               		dc.b $10, $F, 8, $40, 0
00011885 300F 0040 E0               		dc.b $30, $F, 0, $40, $E0
0001188A 300F 0840 00               		dc.b $30, $F, 8, $40, 0
0001188F 500F 0040 E0               		dc.b $50, $F, 0, $40, $E0
00011894 500F 0840 00               		dc.b $50, $F, 8, $40, 0
00011899 700F 0040 E0               		dc.b $70, $F, 0, $40, $E0
0001189E 700F 0840 00               		dc.b $70, $F, 8, $40, 0
000118A3 10                         @longcolumn2:	dc.b $10
000118A4 900F 0050 E0               		dc.b $90, $F, 0, $50, $E0
000118A9 900F 0850 00               		dc.b $90, $F, 8, $50, 0
000118AE B00F 0050 E0               		dc.b $B0, $F, 0, $50, $E0
000118B3 B00F 0850 00               		dc.b $B0, $F, 8, $50, 0
000118B8 D00F 0050 E0               		dc.b $D0, $F, 0, $50, $E0
000118BD D00F 0850 00               		dc.b $D0, $F, 8, $50, 0
000118C2 F00F 0050 E0               		dc.b $F0, $F, 0, $50, $E0
000118C7 F00F 0850 00               		dc.b $F0, $F, 8, $50, 0
000118CC 100F 0050 E0               		dc.b $10, $F, 0, $50, $E0
000118D1 100F 0850 00               		dc.b $10, $F, 8, $50, 0
000118D6 300F 0050 E0               		dc.b $30, $F, 0, $50, $E0
000118DB 300F 0850 00               		dc.b $30, $F, 8, $50, 0
000118E0 500F 0050 E0               		dc.b $50, $F, 0, $50, $E0
000118E5 500F 0850 00               		dc.b $50, $F, 8, $50, 0
000118EA 700F 0050 E0               		dc.b $70, $F, 0, $50, $E0
000118EF 700F 0850 00               		dc.b $70, $F, 8, $50, 0
000118F4 10                         @longcolumn3:	dc.b $10
000118F5 900F 0060 E0               		dc.b $90, $F, 0, $60, $E0
000118FA 900F 0860 00               		dc.b $90, $F, 8, $60, 0
000118FF B00F 0060 E0               		dc.b $B0, $F, 0, $60, $E0
00011904 B00F 0860 00               		dc.b $B0, $F, 8, $60, 0
00011909 D00F 0060 E0               		dc.b $D0, $F, 0, $60, $E0
0001190E D00F 0860 00               		dc.b $D0, $F, 8, $60, 0
00011913 F00F 0060 E0               		dc.b $F0, $F, 0, $60, $E0
00011918 F00F 0860 00               		dc.b $F0, $F, 8, $60, 0
0001191D 100F 0060 E0               		dc.b $10, $F, 0, $60, $E0
00011922 100F 0860 00               		dc.b $10, $F, 8, $60, 0
00011927 300F 0060 E0               		dc.b $30, $F, 0, $60, $E0
0001192C 300F 0860 00               		dc.b $30, $F, 8, $60, 0
00011931 500F 0060 E0               		dc.b $50, $F, 0, $60, $E0
00011936 500F 0860 00               		dc.b $50, $F, 8, $60, 0
0001193B 700F 0060 E0               		dc.b $70, $F, 0, $60, $E0
00011940 700F 0860 00               		dc.b $70, $F, 8, $60, 0
00011945 06                         @bubble7:	dc.b 6
00011946 E00B 0000 C8               		dc.b $E0, $B, 0, 0, $C8
0001194B E80E 000C E0               		dc.b $E8, $E, 0, $C, $E0
00011950 E80E 080C 00               		dc.b $E8, $E, 8, $C, 0
00011955 E00B 0800 20               		dc.b $E0, $B, 8, 0, $20
0001195A D80E 0090 E0               		dc.b $D8, $E, 0, $90, $E0
0001195F D80E 0890 00               		dc.b $D8, $E, 8, $90, 0
00011964 06                         @bubble8:	dc.b 6
00011965 E00B 0018 C8               		dc.b $E0, $B, 0, $18, $C8
0001196A E80E 0024 E0               		dc.b $E8, $E, 0, $24, $E0
0001196F E80E 0824 00               		dc.b $E8, $E, 8, $24, 0
00011974 E00B 0818 20               		dc.b $E0, $B, 8, $18, $20
00011979 D80E 0890 E0               		dc.b $D8, $E, 8, $90, $E0
0001197E D80E 0090 00               		dc.b $D8, $E, 0, $90, 0
00011983 00                         @blank:	dc.b 0
00011984                            		even
00011984                            		even
00011984                            
00011984                            		include	"_incObj\40 Moto Bug.asm" ; includes "_incObj\sub RememberState.asm"
00011984                            ; ---------------------------------------------------------------------------
00011984                            ; Object 40 - Moto Bug enemy (GHZ)
00011984                            ; ---------------------------------------------------------------------------
00011984                            
00011984                            MotoBug:
00011984 7000                       		moveq	#0,d0
00011986 1028 0024                  		move.b	obRoutine(a0),d0
0001198A 323B 0000                  		move.w	Moto_Index(pc,d0.w),d1
0001198E 4EFB 1000                  		jmp	Moto_Index(pc,d1.w)
00011992                            ; ===========================================================================
00011992 0000                       Moto_Index:	dc.w Moto_Main-Moto_Index
00011994 0000                       		dc.w Moto_Action-Moto_Index
00011996 0000                       		dc.w Moto_Animate-Moto_Index
00011998 0000                       		dc.w Moto_Delete-Moto_Index
0001199A                            ; ===========================================================================
0001199A                            
0001199A                            Moto_Main:	; Routine 0
0001199A 217C 0000 0000 0004        		move.l	#Map_Moto,obMap(a0)
000119A2 317C 04F0 0002             		move.w	#$4F0,obGfx(a0)
000119A8 117C 0004 0001             		move.b	#4,obRender(a0)
000119AE 317C 0200 0018             		move.w	#$200,obPriority(a0)
000119B4 117C 0014 0014             		move.b	#$14,obActWid(a0)
000119BA 4A28 001C                  		tst.b	obAnim(a0)	; is object a smoke trail?
000119BE 6600                       		bne.s	@smoke		; if yes, branch
000119C0 117C 000E 0016             		move.b	#$E,obHeight(a0)
000119C6 117C 0008 0017             		move.b	#8,obWidth(a0)
000119CC 117C 000C 0020             		move.b	#$C,obColType(a0)
000119D2 6100 E06C                  		bsr.w	ObjectFall
000119D6 4EB9 0000 0000             		jsr	(ObjFloorDist).l
000119DC 4A41                       		tst.w	d1
000119DE 6A00                       		bpl.s	@notonfloor
000119E0 D368 000C                  		add.w	d1,obY(a0)	; match	object's position with the floor
000119E4 317C 0000 0012             		move.w	#0,obVelY(a0)
000119EA 5428 0024                  		addq.b	#2,obRoutine(a0) ; goto Moto_Action next
000119EE 0868 0000 0022             		bchg	#0,obStatus(a0)
000119F4                            
000119F4                            	@notonfloor:
000119F4 4E75                       		rts	
000119F6                            ; ===========================================================================
000119F6                            
000119F6                            @smoke:
000119F6 5828 0024                  		addq.b	#4,obRoutine(a0) ; goto Moto_Animate next
000119FA 6000 0000                  		bra.w	Moto_Animate
000119FE                            ; ===========================================================================
000119FE                            
000119FE                            Moto_Action:	; Routine 2
000119FE 7000                       		moveq	#0,d0
00011A00 1028 0025                  		move.b	ob2ndRout(a0),d0
00011A04 323B 0000                  		move.w	Moto_ActIndex(pc,d0.w),d1
00011A08 4EBB 1000                  		jsr	Moto_ActIndex(pc,d1.w)
00011A0C 43F9 0000 0000             		lea	(Ani_Moto).l,a1
00011A12 6100 B13A                  		bsr.w	AnimateSprite
00011A16                            
00011A16                            		include	"_incObj\sub RememberState.asm" ; Moto_Action terminates in this file
00011A16                            ; ---------------------------------------------------------------------------
00011A16                            ; Subroutine to remember whether an object is destroyed/collected
00011A16                            ; ---------------------------------------------------------------------------
00011A16                            
00011A16                            RememberState:
00011A34 6000 E056                  		bra.w	DisplaySprite
00011A38                            
00011A38                            	@offscreen:
00011A38 45F8 FC00                  		lea	(v_objstate).w,a2
00011A3C 7000                       		moveq	#0,d0
00011A3E 1028 0023                  		move.b	obRespawnNo(a0),d0
00011A42 6700                       		beq.s	@delete
00011A44 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00011A4A                            
00011A4A                            	@delete:
00011A4A 6000 E080                  		bra.w	DeleteObject
00011A4A 6000 E080                  		bra.w	DeleteObject
00011A4E                            
00011A4E                            ; ===========================================================================
00011A4E 0000                       Moto_ActIndex:	dc.w @move-Moto_ActIndex
00011A50 0000                       		dc.w @findfloor-Moto_ActIndex
00011A52                            
00011A52 =00000030                  @time:		equ $30
00011A52 =00000033                  @smokedelay:	equ $33
00011A52                            ; ===========================================================================
00011A52                            
00011A52                            @move:
00011A52 5368 0030                  		subq.w	#1,@time(a0)	; subtract 1 from pause	time
00011A56 6A00                       		bpl.s	@wait		; if time remains, branch
00011A58 5428 0025                  		addq.b	#2,ob2ndRout(a0)
00011A5C 317C FF00 0010             		move.w	#-$100,obVelX(a0) ; move object to the left
00011A62 117C 0001 001C             		move.b	#1,obAnim(a0)
00011A68 0868 0000 0022             		bchg	#0,obStatus(a0)
00011A6E 6600                       		bne.s	@wait
00011A70 4468 0010                  		neg.w	obVelX(a0)	; change direction
00011A74                            
00011A74                            	@wait:
00011A74 4E75                       		rts	
00011A76                            ; ===========================================================================
00011A76                            
00011A76                            @findfloor:
00011A76 6100 E000                  		bsr.w	SpeedToPos
00011A7A 4EB9 0000 0000             		jsr	(ObjFloorDist).l
00011A80 0C41 FFF8                  		cmpi.w	#-8,d1
00011A84 6D00                       		blt.s	@pause
00011A86 0C41 000C                  		cmpi.w	#$C,d1
00011A8A 6C00                       		bge.s	@pause
00011A8C D368 000C                  		add.w	d1,obY(a0)	; match	object's position with the floor
00011A90 5328 0033                  		subq.b	#1,@smokedelay(a0)
00011A94 6A00                       		bpl.s	@nosmoke
00011A96 117C 000F 0033             		move.b	#$F,@smokedelay(a0)
00011A9C 6100 E47A                  		bsr.w	FindFreeObj
00011AA0 6600                       		bne.s	@nosmoke
00011AA2 12BC 0040                  		move.b	#id_MotoBug,0(a1) ; load exhaust smoke object
00011AA6 3368 0008 0008             		move.w	obX(a0),obX(a1)
00011AAC 3368 000C 000C             		move.w	obY(a0),obY(a1)
00011AB2 1368 0022 0022             		move.b	obStatus(a0),obStatus(a1)
00011AB8 137C 0002 001C             		move.b	#2,obAnim(a1)
00011ABE                            
00011ABE                            	@nosmoke:
00011ABE 4E75                       		rts	
00011AC0                            
00011AC0                            @pause:
00011AC0 5528 0025                  		subq.b	#2,ob2ndRout(a0)
00011AC4 317C 003B 0030             		move.w	#59,@time(a0)	; set pause time to 1 second
00011ACA 317C 0000 0010             		move.w	#0,obVelX(a0)	; stop the object moving
00011AD0 117C 0000 001C             		move.b	#0,obAnim(a0)
00011AD6 4E75                       		rts	
00011AD8                            ; ===========================================================================
00011AD8                            
00011AD8                            Moto_Animate:	; Routine 4
00011AD8 43F9 0000 0000             		lea	(Ani_Moto).l,a1
00011ADE 6100 B06E                  		bsr.w	AnimateSprite
00011AE2 6000 DFA8                  		bra.w	DisplaySprite
00011AE6                            ; ===========================================================================
00011AE6                            
00011AE6                            Moto_Delete:	; Routine 6
00011AE6 6000 DFE4                  		bra.w	DeleteObject
00011AE6 6000 DFE4                  		bra.w	DeleteObject
00011AEA                            		include	"_anim\Moto Bug.asm"
00011AEA                            ; ---------------------------------------------------------------------------
00011AEA                            ; Animation script - Motobug enemy
00011AEA                            ; ---------------------------------------------------------------------------
00011AEA 0000                       Ani_Moto:	dc.w @stand-Ani_Moto
00011AEC 0000                       		dc.w @walk-Ani_Moto
00011AEE 0000                       		dc.w @smoke-Ani_Moto
00011AF0                            
00011AF0 0F02 FF                    @stand:		dc.b $F, 2, afEnd
00011AF4 00                         		even
00011AF4 0700 0100 02FF             @walk:		dc.b 7,	0, 1, 0, 2, afEnd
00011AFA 0103 0603 0604 0604 0604+  @smoke:		dc.b 1,	3, 6, 3, 6, 4, 6, 4, 6,	4, 6, 5, afRoutine
00011B08 00                         		even
00011B08 00                         		even
00011B08                            Map_Moto:	include	"_maps\Moto Bug.asm"
00011B08                            ; --------------------------------------------------------------------------------
00011B08                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
00011B08                            ; --------------------------------------------------------------------------------
00011B08                            
00011B08                            SME_TTY9T:	
00011B08 0000 0000                  		dc.w SME_TTY9T_E-SME_TTY9T, SME_TTY9T_23-SME_TTY9T	
00011B0C 0000 0000                  		dc.w SME_TTY9T_38-SME_TTY9T, SME_TTY9T_52-SME_TTY9T	
00011B10 0000 0000                  		dc.w SME_TTY9T_58-SME_TTY9T, SME_TTY9T_5E-SME_TTY9T	
00011B14 0000                       		dc.w SME_TTY9T_64-SME_TTY9T	
00011B16 04                         SME_TTY9T_E:	dc.b 4	
00011B17 F00D 2000 EC               		dc.b $F0, $D, $20, 0, $EC	
00011B1C 000C 2008 EC               		dc.b 0, $C, $20, 8, $EC	
00011B21 F801 200C 0C               		dc.b $F8, 1, $20, $C, $C	
00011B26 0808 200E F4               		dc.b 8, 8, $20, $E, $F4	
00011B2B 04                         SME_TTY9T_23:	dc.b 4	
00011B2C F10D 2000 EC               		dc.b $F1, $D, $20, 0, $EC	
00011B31 010C 2008 EC               		dc.b 1, $C, $20, 8, $EC	
00011B36 F901 200C 0C               		dc.b $F9, 1, $20, $C, $C	
00011B3B 0908 2011 F4               		dc.b 9, 8, $20, $11, $F4	
00011B40 05                         SME_TTY9T_38:	dc.b 5	
00011B41 F00D 2000 EC               		dc.b $F0, $D, $20, 0, $EC	
00011B46 000C 2014 EC               		dc.b 0, $C, $20, $14, $EC	
00011B4B F801 200C 0C               		dc.b $F8, 1, $20, $C, $C	
00011B50 0804 2018 EC               		dc.b 8, 4, $20, $18, $EC	
00011B55 0804 2012 FC               		dc.b 8, 4, $20, $12, $FC	
00011B5A 01                         SME_TTY9T_52:	dc.b 1	
00011B5B FA00 001A 10               		dc.b $FA, 0, 0, $1A, $10	
00011B60 01                         SME_TTY9T_58:	dc.b 1	
00011B61 FA00 001B 10               		dc.b $FA, 0, 0, $1B, $10	
00011B66 01                         SME_TTY9T_5E:	dc.b 1	
00011B67 FA00 001C 10               		dc.b $FA, 0, 0, $1C, $10	
00011B6C 00                         SME_TTY9T_64:	dc.b 0	
00011B6E 00                         		even
00011B6E 00                         		even
00011B6E                            		include	"_incObj\4F.asm"
00011B6E                            ; ---------------------------------------------------------------------------
00011B6E                            ; Object 4F - Splats
00011B6E                            ; ---------------------------------------------------------------------------
00011B6E                            
00011B6E                            Obj4F:
00011B6E 7000                                       moveq   #0,d0
00011B70 1028 0024                                  move.b  $24(a0),d0
00011B74 323B 0000                                  move.w  ObjSplats_Index(pc,d0.w),d1
00011B78 4EFB 1000                                  jmp     ObjSplats_Index(pc,d1.w)
00011B7C                            ; ---------------------------------------------------------------------------
00011B7C 0000                       ObjSplats_Index:dc.w ObjSplats_Init-*
00011B7E 0000                                       dc.w loc_D246-ObjSplats_Index
00011B80 0000                                       dc.w ObjSplats_Bounce-ObjSplats_Index
00011B82 0000                                       dc.w loc_D2C8-ObjSplats_Index
00011B84                            ; ---------------------------------------------------------------------------
00011B84                            
00011B84                            ObjSplats_Init:
00011B84 5428 0024                                  addq.b  #2,$24(a0)
00011B88 217C 0000 0000 0004                        move.l  #Map_Splats,4(a0)
00011B90 317C 24E4 0002                             move.w  #$24E4,2(a0)
00011B96 117C 0004 0001                             move.b  #4,1(a0)
00011B9C 117C 0004 0014                             move.b  #4,obActWid(a0)
00011BA2 317C 0200 0018             				move.w	#$200,obPriority(a0)
00011BA8 117C 0014 0016                             move.b  #$14,$16(a0)
00011BAE 117C 0002 0020                             move.b  #2,$20(a0)
00011BB4 4A28 0028                                  tst.b   $28(a0)
00011BB8 6700                                       beq.s   loc_D246
00011BBA 343C 0300                                  move.w  #$300,d2
00011BBE 6000                                       bra.s   ObjSplats_FaceRight
00011BC0                            ; ---------------------------------------------------------------------------
00011BC0                            
00011BC0                            loc_D246:
00011BC0 343C 00E0                                  move.w  #$E0,d2
00011BC4                            
00011BC4                            ObjSplats_FaceRight:
00011BC4 323C 0100                                  move.w  #$100,d1
00011BC8 08E8 0000 0001                             bset    #0,1(a0)
00011BCE 3038 D008                                  move.w  ($FFFFD008).w,d0
00011BD2 9068 0008                                  sub.w   8(a0),d0
00011BD6 6400                                       bcc.s   ObjSplats_Move
00011BD8 4440                                       neg.w   d0
00011BDA 4441                                       neg.w   d1
00011BDC 08A8 0000 0001                             bclr    #0,1(a0)
00011BE2                            
00011BE2                            ObjSplats_Move:
00011BE2 B042                                       cmp.w   d2,d0
00011BE4 6400                                       bcc.s   ObjSplats_Bounce
00011BE6 3141 0010                                  move.w  d1,$10(a0)
00011BEA 5428 0024                                  addq.b  #2,$24(a0)
00011BEE                            
00011BEE                            ObjSplats_Bounce:
00011BEE 6100 DE50                                  bsr.w   ObjectFall
00011BF2 117C 0001 001A                             move.b  #1,$1A(a0)
00011BF8 4A68 0012                                  tst.w   $12(a0)
00011BFC 6B00                                       bmi.s   ObjSplats_Turn
00011BFE 117C 0000 001A                             move.b  #0,$1A(a0)
00011C04 6100 0000                                  bsr.w   ObjFloorDist
00011C08 4A41                                       tst.w   d1
00011C0A 6A00                                       bpl.s   ObjSplats_Turn
00011C0C 3011                                       move.w  (a1),d0
00011C0E 0240 03FF                                  andi.w  #$3FF,d0
00011C12 0C40 02D2                                  cmpi.w  #$2D2,d0
00011C16 6500                                       bcs.s   ObjSplats_Fall
00011C18 5428 0024                                  addq.b  #2,$24(a0)
00011C1C 6000                                       bra.s   ObjSplats_Turn
00011C1E                            ; ---------------------------------------------------------------------------
00011C1E                            
00011C1E                            ObjSplats_Fall:
00011C1E D368 000C                                  add.w   d1,$C(a0)
00011C22 317C FC00 0012                             move.w  #$FC00,$12(a0)
00011C28                            
00011C28                            ObjSplats_Turn:
00011C28 6100 0000                                  bsr.w   Yad_ChkWall
00011C2C 6700                                       beq.s   loc_D2C4
00011C2E 4468 0010                                  neg.w   $10(a0)
00011C32 0868 0000 0001                             bchg    #0,1(a0)
00011C38 0868 0000 0022                             bchg    #0,$22(a0)
00011C3E                            
00011C3E                            loc_D2C4:
00011C3E 6000 FDD6                                  bra.w   RememberState
00011C42                            ; ---------------------------------------------------------------------------
00011C42                            
00011C42                            loc_D2C8:
00011C42 6100 DDFC                                  bsr.w   ObjectFall
00011C46 6100 DE44                                  bsr.w   DisplaySprite
00011C4A 4A28 0001                                  tst.b   1(a0)
00011C4E 6A00 DE7C                                  bpl.w   DeleteObject
00011C52 4E75                                       rts
00011C52 4E75                                       rts
00011C54                            Map_Splats:	include	"_maps\Splats.asm"
00011C54 0000                       Map_Splats_internal:     dc.w unk_D310-*
00011C56 0000                                       dc.w unk_D31B-Map_Splats_internal
00011C58 02                         unk_D310:       dc.b   2
00011C59 EC0B 0000 F40C 0800 0CF4                   dc.b $EC, $B, 0, 0, $F4, $C, 8, 0, $C, $F4
00011C63 02                         unk_D31B:       dc.b   2
00011C64 EC0B 000F F40C 0400 1BFB                   dc.b $EC, $B, 0, $F, $F4, $C, 4, 0, $1B, $FB
00011C64 EC0B 000F F40C 0400 1BFB                   dc.b $EC, $B, 0, $F, $F4, $C, 4, 0, $1B, $FB
00011C6E                            
00011C6E                            		include	"_incObj\50 Yadrin.asm"
00011C6E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00011C6E                            
00011C6E                            
00011C6E                            Yad_ChkWall:
00011C6E 3038 FE04                  		move.w	(v_framecount).w,d0
00011C72 D047                       		add.w	d7,d0
00011C74 0240 0003                  		andi.w	#3,d0
00011C78 6600                       		bne.s	loc_F836
00011C7A 7600                       		moveq	#0,d3
00011C7C 1628 0014                  		move.b	obActWid(a0),d3
00011C80 4A68 0010                  		tst.w	obVelX(a0)
00011C84 6B00                       		bmi.s	loc_F82C
00011C86 6100 0000                  		bsr.w	ObjHitWallRight
00011C8A 4A41                       		tst.w	d1
00011C8C 6A00                       		bpl.s	loc_F836
00011C8E                            
00011C8E                            loc_F828:
00011C8E 7001                       		moveq	#1,d0
00011C90 4E75                       		rts	
00011C92                            ; ===========================================================================
00011C92                            
00011C92                            loc_F82C:
00011C92 4643                       		not.w	d3
00011C94 6100 0000                  		bsr.w	ObjHitWallLeft
00011C98 4A41                       		tst.w	d1
00011C9A 6BF2                       		bmi.s	loc_F828
00011C9C                            
00011C9C                            loc_F836:
00011C9C 7000                       		moveq	#0,d0
00011C9E 4E75                       		rts	
00011CA0                            ; End of function Yad_ChkWall
00011CA0                            
00011CA0                            ; ===========================================================================
00011CA0                            ; ---------------------------------------------------------------------------
00011CA0                            ; Object 50 - Yadrin enemy (SYZ)
00011CA0                            ; ---------------------------------------------------------------------------
00011CA0                            
00011CA0                            Yadrin:
00011CA0 7000                       		moveq	#0,d0
00011CA2 1028 0024                  		move.b	obRoutine(a0),d0
00011CA6 323B 0000                  		move.w	Yad_Index(pc,d0.w),d1
00011CAA 4EFB 1000                  		jmp	Yad_Index(pc,d1.w)
00011CAE                            ; ===========================================================================
00011CAE 0000                       Yad_Index:	dc.w Yad_Main-Yad_Index
00011CB0 0000                       		dc.w Yad_Action-Yad_Index
00011CB2                            
00011CB2 =00000030                  yad_timedelay:	equ $30
00011CB2                            ; ===========================================================================
00011CB2                            
00011CB2                            Yad_Main:	; Routine 0
00011CB2 217C 0000 0000 0004        		move.l	#Map_Yad,obMap(a0)
00011CBA 317C 247B 0002             		move.w	#$247B,obGfx(a0)
00011CC0 117C 0004 0001             		move.b	#4,obRender(a0)
00011CC6 317C 0200 0018             		move.w	#$200,obPriority(a0)
00011CCC 117C 0014 0014             		move.b	#$14,obActWid(a0)
00011CD2 117C 0011 0016             		move.b	#$11,obHeight(a0)
00011CD8 117C 0008 0017             		move.b	#8,obWidth(a0)
00011CDE 117C 00CC 0020             		move.b	#$CC,obColType(a0)
00011CE4 6100 DD5A                  		bsr.w	ObjectFall
00011CE8 6100 0000                  		bsr.w	ObjFloorDist
00011CEC 4A41                       		tst.w	d1
00011CEE 6A00                       		bpl.s	locret_F89E
00011CF0 D368 000C                  		add.w	d1,obY(a0)	; match	object's position with the floor
00011CF4 317C 0000 0012             		move.w	#0,obVelY(a0)
00011CFA 5428 0024                  		addq.b	#2,obRoutine(a0)
00011CFE 0868 0000 0022             		bchg	#0,obStatus(a0)
00011D04                            
00011D04                            	locret_F89E:
00011D04 4E75                       		rts	
00011D06                            ; ===========================================================================
00011D06                            
00011D06                            Yad_Action:	; Routine 2
00011D06 7000                       		moveq	#0,d0
00011D08 1028 0025                  		move.b	ob2ndRout(a0),d0
00011D0C 323B 0000                  		move.w	Yad_Index2(pc,d0.w),d1
00011D10 4EBB 1000                  		jsr	Yad_Index2(pc,d1.w)
00011D14 43F9 0000 0000             		lea	(Ani_Yad).l,a1
00011D1A 6100 AE32                  		bsr.w	AnimateSprite
00011D1E 6000 FCF6                  		bra.w	RememberState
00011D22                            ; ===========================================================================
00011D22 0000                       Yad_Index2:	dc.w Yad_Move-Yad_Index2
00011D24 0000                       		dc.w Yad_FixToFloor-Yad_Index2
00011D26                            ; ===========================================================================
00011D26                            
00011D26                            Yad_Move:
00011D26 5368 0030                  		subq.w	#1,yad_timedelay(a0) ; subtract 1 from pause time
00011D2A 6A00                       		bpl.s	locret_F8E2	; if time remains, branch
00011D2C 5428 0025                  		addq.b	#2,ob2ndRout(a0)
00011D30 317C FF00 0010             		move.w	#-$100,obVelX(a0) ; move object
00011D36 117C 0001 001C             		move.b	#1,obAnim(a0)
00011D3C 0868 0000 0022             		bchg	#0,obStatus(a0)
00011D42 6600                       		bne.s	locret_F8E2
00011D44 4468 0010                  		neg.w	obVelX(a0)	; change direction
00011D48                            
00011D48                            	locret_F8E2:
00011D48 4E75                       		rts	
00011D4A                            ; ===========================================================================
00011D4A                            
00011D4A                            Yad_FixToFloor:
00011D4A 6100 DD2C                  		bsr.w	SpeedToPos
00011D4E 6100 0000                  		bsr.w	ObjFloorDist
00011D52 0C41 FFF8                  		cmpi.w	#-8,d1
00011D56 6D00                       		blt.s	Yad_Pause
00011D58 0C41 000C                  		cmpi.w	#$C,d1
00011D5C 6C00                       		bge.s	Yad_Pause
00011D5E D368 000C                  		add.w	d1,obY(a0)	; match	object's position to the floor
00011D62 6100 FF0A                  		bsr.w	Yad_ChkWall
00011D66 6600                       		bne.s	Yad_Pause
00011D68 4E75                       		rts	
00011D6A                            ; ===========================================================================
00011D6A                            
00011D6A                            Yad_Pause:
00011D6A 5528 0025                  		subq.b	#2,ob2ndRout(a0)
00011D6E 317C 003B 0030             		move.w	#59,yad_timedelay(a0) ; set pause time to 1 second
00011D74 317C 0000 0010             		move.w	#0,obVelX(a0)
00011D7A 117C 0000 001C             		move.b	#0,obAnim(a0)
00011D80 4E75                       		rts	
00011D80 4E75                       		rts	
00011D82                            		include	"_anim\Yadrin.asm"
00011D82                            ; ---------------------------------------------------------------------------
00011D82                            ; Animation script - Yadrin enemy
00011D82                            ; ---------------------------------------------------------------------------
00011D82 0000                       Ani_Yad:	dc.w @stand-Ani_Yad
00011D84 0000                       		dc.w @walk-Ani_Yad
00011D86                            
00011D86 0800 FF                    @stand:		dc.b 8,	0, afEnd
00011D8A 00                         		even
00011D8A 0800 0002 0000 0101 0103+  @walk:		dc.b 8, 0, 0, 2, 0, 0, 1, 1, 1, 3, 1, 1, 1, afEnd
00011D98                            		even
00011D98                            		even
00011D98                            Map_Yad:	include	"_maps\Yadrin.asm"
00011D98                            ; --------------------------------------------------------------------------------
00011D98                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
00011D98                            ; --------------------------------------------------------------------------------
00011D98                            
00011D98                            SME_4WhIu:	
00011D98 0000 0000                  		dc.w SME_4WhIu_C-SME_4WhIu, SME_4WhIu_3A-SME_4WhIu	
00011D9C 0000 0000                  		dc.w SME_4WhIu_68-SME_4WhIu, SME_4WhIu_A5-SME_4WhIu	
00011DA0 0000 0000                  		dc.w SME_4WhIu_E2-SME_4WhIu, SME_4WhIu_FC-SME_4WhIu	
00011DA4 09                         SME_4WhIu_C:	dc.b 9	
00011DA5 F308 6000 F4               		dc.b $F3, 8, $60, 0, $F4	
00011DAA EB04 600F FC               		dc.b $EB, 4, $60, $F, $FC	
00011DAF 0309 6031 FC               		dc.b 3, 9, $60, $31, $FC	
00011DB4 FB06 6003 EC               		dc.b $FB, 6, $60, 3, $EC	
00011DB9 FB00 6009 FC               		dc.b $FB, 0, $60, 9, $FC	
00011DBE FB00 600C 04               		dc.b $FB, 0, $60, $C, 4	
00011DC3 FB00 6012 0C               		dc.b $FB, 0, $60, $12, $C	
00011DC8 F300 600A EC               		dc.b $F3, 0, $60, $A, $EC	
00011DCD EB00 600D F4               		dc.b $EB, 0, $60, $D, $F4	
00011DD2 09                         SME_4WhIu_3A:	dc.b 9	
00011DD3 F308 6037 EC               		dc.b $F3, 8, $60, $37, $EC	
00011DD8 FB00 6012 0C               		dc.b $FB, 0, $60, $12, $C	
00011DDD FB06 6003 EC               		dc.b $FB, 6, $60, 3, $EC	
00011DE2 FB00 6009 FC               		dc.b $FB, 0, $60, 9, $FC	
00011DE7 FB00 600C 04               		dc.b $FB, 0, $60, $C, 4	
00011DEC 0309 6031 FC               		dc.b 3, 9, $60, $31, $FC	
00011DF1 F300 603A 04               		dc.b $F3, 0, $60, $3A, 4	
00011DF6 EB04 603B F4               		dc.b $EB, 4, $60, $3B, $F4	
00011DFB EB00 6022 04               		dc.b $EB, 0, $60, $22, 4	
00011E00 0C                         SME_4WhIu_68:	dc.b $C	
00011E01 EB04 600F FC               		dc.b $EB, 4, $60, $F, $FC	
00011E06 FB00 601D FC               		dc.b $FB, 0, $60, $1D, $FC	
00011E0B FB00 6020 04               		dc.b $FB, 0, $60, $20, 4	
00011E10 0309 6031 FC               		dc.b 3, 9, $60, $31, $FC	
00011E15 FB00 6012 0C               		dc.b $FB, 0, $60, $12, $C	
00011E1A F300 600A EC               		dc.b $F3, 0, $60, $A, $EC	
00011E1F EB00 600D F4               		dc.b $EB, 0, $60, $D, $F4	
00011E24 FB01 6017 EC               		dc.b $FB, 1, $60, $17, $EC	
00011E29 FB01 601A F4               		dc.b $FB, 1, $60, $1A, $F4	
00011E2E F308 6000 F4               		dc.b $F3, 8, $60, 0, $F4	
00011E33 0B00 6008 F4               		dc.b $B, 0, $60, 8, $F4	
00011E38 0B00 6005 EC               		dc.b $B, 0, $60, 5, $EC	
00011E3D 0C                         SME_4WhIu_A5:	dc.b $C	
00011E3E F308 6037 EC               		dc.b $F3, 8, $60, $37, $EC	
00011E43 FB00 6012 0C               		dc.b $FB, 0, $60, $12, $C	
00011E48 FB00 6009 FC               		dc.b $FB, 0, $60, 9, $FC	
00011E4D FB00 600C 04               		dc.b $FB, 0, $60, $C, 4	
00011E52 0309 6031 FC               		dc.b 3, 9, $60, $31, $FC	
00011E57 F300 603A 04               		dc.b $F3, 0, $60, $3A, 4	
00011E5C EB04 603B F4               		dc.b $EB, 4, $60, $3B, $F4	
00011E61 EB00 6022 04               		dc.b $EB, 0, $60, $22, 4	
00011E66 FB01 6017 EC               		dc.b $FB, 1, $60, $17, $EC	
00011E6B FB01 601A F4               		dc.b $FB, 1, $60, $1A, $F4	
00011E70 0B00 6005 EC               		dc.b $B, 0, $60, 5, $EC	
00011E75 0B00 6008 F4               		dc.b $B, 0, $60, 8, $F4	
00011E7A 05                         SME_4WhIu_E2:	dc.b 5	
00011E7B F409 0023 F4               		dc.b $F4, 9, 0, $23, $F4	
00011E80 040D 0029 EC               		dc.b 4, $D, 0, $29, $EC	
00011E85 EC04 000F FC               		dc.b $EC, 4, 0, $F, $FC	
00011E8A F402 0011 0C               		dc.b $F4, 2, 0, $11, $C	
00011E8F 0409 0031 FC               		dc.b 4, 9, 0, $31, $FC	
00011E94 05                         SME_4WhIu_FC:	dc.b 5	
00011E95 F409 0023 F4               		dc.b $F4, 9, 0, $23, $F4	
00011E9A 040D 0029 EC               		dc.b 4, $D, 0, $29, $EC	
00011E9F EC04 000F FC               		dc.b $EC, 4, 0, $F, $FC	
00011EA4 F402 0011 0C               		dc.b $F4, 2, 0, $11, $C	
00011EA9 0409 0037 FC               		dc.b 4, 9, 0, $37, $FC	
00011EAE                            		even
00011EAE                            		even
00011EAE                            
00011EAE                            		include	"_incObj\sub SolidObject.asm"
00011EAE                            ; ---------------------------------------------------------------------------
00011EAE                            ; Solid	object subroutine (includes spikes, blocks, rocks etc)
00011EAE                            ;
00011EAE                            ; input:
00011EAE                            ;	d1 = width
00011EAE                            ;	d2 = height / 2 (when jumping)
00011EAE                            ;	d3 = height / 2 (when walking)
00011EAE                            ;	d4 = x-axis position
00011EAE                            ; ---------------------------------------------------------------------------
00011EAE                            
00011EAE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00011EAE                            
00011EAE                            
00011EAE                            SolidObject:
00011EAE 4A28 0025                  		tst.b	obSolid(a0)	; is Sonic standing on the object?
00011EB2 6700 0000                  		beq.w	Solid_ChkEnter	; if not, branch
00011EB6 3401                       		move.w	d1,d2
00011EB8 D442                       		add.w	d2,d2
00011EBA 43F8 D000                  		lea	(v_player).w,a1
00011EBE 0829 0001 0022             		btst	#1,obStatus(a1)	; is Sonic in the air?
00011EC4 6600                       		bne.s	@leave		; if yes, branch
00011EC6 3029 0008                  		move.w	obX(a1),d0
00011ECA 9068 0008                  		sub.w	obX(a0),d0
00011ECE D041                       		add.w	d1,d0
00011ED0 6B00                       		bmi.s	@leave		; if Sonic moves off the left, branch
00011ED2 B042                       		cmp.w	d2,d0		; has Sonic moved off the right?
00011ED4 6500                       		bcs.s	@stand		; if not, branch
00011ED6                            
00011ED6                            	@leave:
00011ED6 08A9 0003 0022             		bclr	#3,obStatus(a1)	; clear Sonic's standing flag
00011EDC 08A8 0003 0022             		bclr	#3,obStatus(a0)	; clear object's standing flag
00011EE2 4228 0025                  		clr.b	obSolid(a0)
00011EE6 7800                       		moveq	#0,d4
00011EE8 4E75                       		rts	
00011EEA                            
00011EEA                            	@stand:
00011EEA 3404                       		move.w	d4,d2
00011EEC 4EB9 0000 9808             		jsr	MvSonicOnPtfm
00011EF2 7800                       		moveq	#0,d4
00011EF4 4E75                       		rts	
00011EF6                            ; ===========================================================================
00011EF6                            
00011EF6                            SolidObject71:
00011EF6 4A28 0025                  		tst.b	obSolid(a0)
00011EFA 6700 0000                  		beq.w	loc_FAD0
00011EFE 3401                       		move.w	d1,d2
00011F00 D442                       		add.w	d2,d2
00011F02 43F8 D000                  		lea	(v_player).w,a1
00011F06 0829 0001 0022             		btst	#1,obStatus(a1)
00011F0C 6600                       		bne.s	@leave
00011F0E 3029 0008                  		move.w	obX(a1),d0
00011F12 9068 0008                  		sub.w	obX(a0),d0
00011F16 D041                       		add.w	d1,d0
00011F18 6B00                       		bmi.s	@leave
00011F1A B042                       		cmp.w	d2,d0
00011F1C 6500                       		bcs.s	@stand
00011F1E                            
00011F1E                            	@leave:
00011F1E 08A9 0003 0022             		bclr	#3,obStatus(a1)
00011F24 08A8 0003 0022             		bclr	#3,obStatus(a0)
00011F2A 4228 0025                  		clr.b	obSolid(a0)
00011F2E 7800                       		moveq	#0,d4
00011F30 4E75                       		rts	
00011F32                            
00011F32                            	@stand:
00011F32 3404                       		move.w	d4,d2
00011F34 4EB9 0000 9808             		jsr	MvSonicOnPtfm
00011F3A 7800                       		moveq	#0,d4
00011F3C 4E75                       		rts	
00011F3E                            ; ===========================================================================
00011F3E                            
00011F3E                            SolidObject2F:
00011F3E 43F8 D000                  		lea	(v_player).w,a1
00011F42 4A28 0001                  		tst.b	obRender(a0)
00011F46 6A00 0000                  		bpl.w	Solid_Ignore
00011F4A 3029 0008                  		move.w	obX(a1),d0
00011F4E 9068 0008                  		sub.w	obX(a0),d0
00011F52 D041                       		add.w	d1,d0
00011F54 6B00 0000                  		bmi.w	Solid_Ignore
00011F58 3601                       		move.w	d1,d3
00011F5A D643                       		add.w	d3,d3
00011F5C B043                       		cmp.w	d3,d0
00011F5E 6200 0000                  		bhi.w	Solid_Ignore
00011F62 3A00                       		move.w	d0,d5
00011F64 0828 0000 0001             		btst	#0,obRender(a0)	; is object horizontally flipped?
00011F6A 6700                       		beq.s	@notflipped	; if not, branch
00011F6C 4645                       		not.w	d5
00011F6E DA43                       		add.w	d3,d5
00011F70                            
00011F70                            	@notflipped:
00011F70 E24D                       		lsr.w	#1,d5
00011F72 7600                       		moveq	#0,d3
00011F74 1632 5000                  		move.b	(a2,d5.w),d3
00011F78 9612                       		sub.b	(a2),d3
00011F7A 3A28 000C                  		move.w	obY(a0),d5
00011F7E 9A43                       		sub.w	d3,d5
00011F80 1629 0016                  		move.b	obHeight(a1),d3
00011F84 4883                       		ext.w	d3
00011F86 D443                       		add.w	d3,d2
00011F88 3629 000C                  		move.w	obY(a1),d3
00011F8C 9645                       		sub.w	d5,d3
00011F8E 5843                       		addq.w	#4,d3
00011F90 D642                       		add.w	d2,d3
00011F92 6B00 0000                  		bmi.w	Solid_Ignore
00011F96 3802                       		move.w	d2,d4
00011F98 D844                       		add.w	d4,d4
00011F9A B644                       		cmp.w	d4,d3
00011F9C 6400 0000                  		bcc.w	Solid_Ignore
00011FA0 6000 0000                  		bra.w	loc_FB0E
00011FA4                            ; ===========================================================================
00011FA4                            
00011FA4                            Solid_ChkEnter:
00011FA4 4A28 0001                  		tst.b	obRender(a0)
00011FA8 6A00 0000                  		bpl.w	Solid_Ignore
00011FAC                            
00011FAC                            loc_FAD0:
00011FAC 43F8 D000                  		lea	(v_player).w,a1
00011FB0 3029 0008                  		move.w	obX(a1),d0
00011FB4 9068 0008                  		sub.w	obX(a0),d0
00011FB8 D041                       		add.w	d1,d0
00011FBA 6B00 0000                  		bmi.w	Solid_Ignore	; if Sonic moves off the left, branch
00011FBE 3601                       		move.w	d1,d3
00011FC0 D643                       		add.w	d3,d3
00011FC2 B043                       		cmp.w	d3,d0		; has Sonic moved off the right?
00011FC4 6200 0000                  		bhi.w	Solid_Ignore	; if yes, branch
00011FC8 1629 0016                  		move.b	obHeight(a1),d3
00011FCC 4883                       		ext.w	d3
00011FCE D443                       		add.w	d3,d2
00011FD0 3629 000C                  		move.w	obY(a1),d3
00011FD4 9668 000C                  		sub.w	obY(a0),d3
00011FD8 5843                       		addq.w	#4,d3
00011FDA D642                       		add.w	d2,d3
00011FDC 6B00 0000                  		bmi.w	Solid_Ignore	; if Sonic moves above, branch
00011FE0 3802                       		move.w	d2,d4
00011FE2 D844                       		add.w	d4,d4
00011FE4 B644                       		cmp.w	d4,d3		; has Sonic moved below?
00011FE6 6400 0000                  		bcc.w	Solid_Ignore	; if yes, branch
00011FEA                            
00011FEA                            loc_FB0E:
00011FEA 4A38 F7C8                  		tst.b	(f_lockmulti).w	; are controls locked?
00011FEE 6B00 0000                  		bmi.w	Solid_Ignore	; if yes, branch
00011FF2 0C38 0006 D024             		cmpi.b	#6,(v_player+obRoutine).w ; is Sonic dying?
00011FF8 6400 0000                  			bcc.w	Solid_Debug
00011FFC 4A78 FE08                  		tst.w	(v_debuguse).w	; is debug mode being used?
00012000 6600 0000                  		bne.w	Solid_Debug	; if yes, branch
00012004 3A00                       		move.w	d0,d5
00012006 B240                       		cmp.w	d0,d1		; is Sonic right of centre of object?
00012008 6400                       		bcc.s	@isright	; if yes, branch
0001200A D241                       		add.w	d1,d1
0001200C 9041                       		sub.w	d1,d0
0001200E 3A00                       		move.w	d0,d5
00012010 4445                       		neg.w	d5
00012012                            
00012012                            	@isright:
00012012 3203                       		move.w	d3,d1
00012014 B443                       		cmp.w	d3,d2		; is Sonic below centre of object?
00012016 6400                       		bcc.s	@isbelow	; if yes, branch
00012018                            
00012018 5943                       		subq.w	#4,d3
0001201A 9644                       		sub.w	d4,d3
0001201C 3203                       		move.w	d3,d1
0001201E 4441                       		neg.w	d1
00012020                            
00012020                            	@isbelow:
00012020 BA41                       		cmp.w	d1,d5
00012022 6200 0000                  		bhi.w	Solid_TopBottom	; if Sonic hits top or bottom, branch
00012026 0C41 0004                  		cmpi.w	#4,d1
0001202A 6300                       		bls.s	Solid_SideAir
0001202C 4A40                       		tst.w	d0		; where is Sonic?
0001202E 6700                       		beq.s	Solid_Centre	; if inside the object, branch
00012030 6B00                       		bmi.s	Solid_Right	; if right of the object, branch
00012032 4A69 0010                  		tst.w	obVelX(a1)	; is Sonic moving left?
00012036 6B00                       		bmi.s	Solid_Centre	; if yes, branch
00012038 6000                       		bra.s	Solid_Left
0001203A                            ; ===========================================================================
0001203A                            
0001203A                            Solid_Right:
0001203A 4A69 0010                  		tst.w	obVelX(a1)	; is Sonic moving right?
0001203E 6A00                       		bpl.s	Solid_Centre	; if yes, branch
00012040                            
00012040                            Solid_Left:
00012040 337C 0000 0020             		move.w	#0,obInertia(a1)
00012046 337C 0000 0010             		move.w	#0,obVelX(a1)	; stop Sonic moving
0001204C                            
0001204C                            Solid_Centre:
0001204C 9169 0008                  		sub.w	d0,obX(a1)	; correct Sonic's position
00012050 0829 0001 0022             		btst	#1,obStatus(a1)	; is Sonic in the air?
00012056 6600                       		bne.s	Solid_SideAir	; if yes, branch
00012058 08E9 0005 0022             		bset	#5,obStatus(a1)	; make Sonic push object
0001205E 08E8 0005 0022             		bset	#5,obStatus(a0)	; make object be pushed
00012064 7801                       		moveq	#1,d4		; return side collision
00012066 4E75                       		rts	
00012068                            ; ===========================================================================
00012068                            
00012068                            Solid_SideAir:
00012068 6100                       		bsr.s	Solid_NotPushing
0001206A 7801                       		moveq	#1,d4		; return side collision
0001206C 4E75                       		rts	
0001206E                            ; ===========================================================================
0001206E                            
0001206E                            Solid_Ignore:
0001206E 0828 0005 0022             		btst	#5,obStatus(a0)	; is Sonic pushing?
00012074 6700                       		beq.s	Solid_Debug	; if not, branch
00012076 0C29 0000 001C             		cmpi.b	#id_Roll,obAnim(a1)	; is Sonic in his jumping/rolling animation?
0001207C 6700                       		beq.s	Solid_NotPushing	; if so, branch
0001207E 0C29 0000 001C             		cmpi.b	#id_Drown,obAnim(a1)	; is Sonic in his drowning animation?
00012084 6700                       		beq.s	Solid_NotPushing	; if so, branch
00012086 0C29 0000 001C             		cmpi.b	#id_Hurt,obAnim(a1)	; is Sonic in his hurt animation?
0001208C 6700                       		beq.s	Solid_NotPushing	; if so, branch
0001208E 337C 0000 001C             		move.w	#id_Run,obAnim(a1) ; use running animation
00012094                            
00012094                            
00012094                            Solid_NotPushing:
00012094 08A8 0005 0022             		bclr	#5,obStatus(a0)	; clear pushing flag
0001209A 08A9 0005 0022             		bclr	#5,obStatus(a1)	; clear Sonic's pushing flag
000120A0                            
000120A0                            Solid_Debug:
000120A0 7800                       		moveq	#0,d4		; return no collision
000120A2 4E75                       		rts	
000120A4                            ; ===========================================================================
000120A4                            
000120A4                            Solid_TopBottom:
000120A4 4A43                       		tst.w	d3		; is Sonic below the object?
000120A6 6B00                       		bmi.s	Solid_Below	; if yes, branch
000120A8 0C43 0010                  		cmpi.w	#$10,d3		; has Sonic landed on the object?
000120AC 6500                       		bcs.s	Solid_Landed	; if yes, branch
000120AE 60BE                       		bra.s	Solid_Ignore
000120B0                            ; ===========================================================================
000120B0                            
000120B0                            Solid_Below:
000120B0 4A69 0012                  		tst.w	obVelY(a1)	; is Sonic moving vertically?
000120B4 6700                       		beq.s	Solid_Squash	; if not, branch
000120B6 6A00                       		bpl.s	Solid_TopBtmAir	; if moving downwards, branch
000120B8 4A43                       		tst.w	d3		; is Sonic above the object?
000120BA 6A00                       		bpl.s	Solid_TopBtmAir	; if yes, branch
000120BC 9769 000C                  		sub.w	d3,obY(a1)	; correct Sonic's position
000120C0 337C 0000 0012             		move.w	#0,obVelY(a1)	; stop Sonic moving
000120C6                            
000120C6                            Solid_TopBtmAir:
000120C6 78FF                       		moveq	#-1,d4
000120C8 4E75                       		rts	
000120CA                            ; ===========================================================================
000120CA                            
000120CA                            Solid_Squash:
000120CA 0829 0001 0022             		btst	#1,obStatus(a1)	; is Sonic in the air?
000120D0 66F4                       		bne.s	Solid_TopBtmAir	; if yes, branch
000120D2 2F08                       		move.l	a0,-(sp)
000120D4 2049                       		movea.l	a1,a0
000120D6 4EB9 0000 0000             		jsr	(KillSonic).l	; kill Sonic
000120DC 205F                       		movea.l	(sp)+,a0
000120DE 78FF                       		moveq	#-1,d4
000120E0 4E75                       		rts	
000120E2                            ; ===========================================================================
000120E2                            
000120E2                            Solid_Landed:
000120E2 5943                       		subq.w	#4,d3
000120E4 7200                       		moveq	#0,d1
000120E6 1228 0014                  		move.b	obActWid(a0),d1
000120EA 3401                       		move.w	d1,d2
000120EC D442                       		add.w	d2,d2
000120EE D269 0008                  		add.w	obX(a1),d1
000120F2 9268 0008                  		sub.w	obX(a0),d1
000120F6 6B00                       		bmi.s	Solid_Miss	; if Sonic is right of object, branch
000120F8 B242                       		cmp.w	d2,d1		; is Sonic left of object?
000120FA 6400                       		bcc.s	Solid_Miss	; if yes, branch
000120FC 4A69 0012                  		tst.w	obVelY(a1)	; is Sonic moving upwards?
00012100 6B00                       		bmi.s	Solid_Miss	; if yes, branch
00012102 9769 000C                  		sub.w	d3,obY(a1)	; correct Sonic's position
00012106 5369 000C                  		subq.w	#1,obY(a1)
0001210A 6100                       		bsr.s	Solid_ResetFloor
0001210C 117C 0002 0025             		move.b	#2,obSolid(a0) ; set standing flags
00012112 08E8 0003 0022             		bset	#3,obStatus(a0)
00012118 78FF                       		moveq	#-1,d4		; return top/bottom collision
0001211A 4E75                       		rts	
0001211C                            ; ===========================================================================
0001211C                            
0001211C                            Solid_Miss:
0001211C 7800                       		moveq	#0,d4
0001211E 4E75                       		rts	
00012120                            ; End of function SolidObject
00012120                            
00012120                            
00012120                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00012120                            
00012120                            
00012120                            Solid_ResetFloor:
00012120 0829 0003 0022             		btst	#3,obStatus(a1)	; is Sonic standing on something?
00012126 6700                       		beq.s	@notonobj	; if not, branch
00012128                            
00012128 7000                       		moveq	#0,d0
0001212A 1029 003D                  		move.b	$3D(a1),d0	; get object being stood on
0001212E ED48                       		lsl.w	#6,d0
00012130 0680 00FF D000             		addi.l	#(v_objspace&$FFFFFF),d0
00012136 2440                       		movea.l	d0,a2
00012138 08AA 0003 0022             		bclr	#3,obStatus(a2)	; clear object's standing flags
0001213E 422A 0025                  		clr.b	obSolid(a2)
00012142                            
00012142                            	@notonobj:
00012142 3008                       		move.w	a0,d0
00012144 0440 D000                  		subi.w	#$D000,d0
00012148 EC48                       		lsr.w	#6,d0
0001214A 0240 007F                  		andi.w	#$7F,d0
0001214E 1340 003D                  		move.b	d0,$3D(a1)	; set object being stood on
00012152 137C 0000 0026             		move.b	#0,obAngle(a1)	; clear Sonic's angle
00012158 337C 0000 0012             		move.w	#0,obVelY(a1)	; stop Sonic
0001215E 3369 0010 0020             		move.w	obVelX(a1),obInertia(a1)
00012164 0829 0001 0022             		btst	#1,obStatus(a1)	; is Sonic in the air?
0001216A 6700                       		beq.s	@notinair	; if not, branch
0001216C 2F08                       		move.l	a0,-(sp)
0001216E 2049                       		movea.l	a1,a0
00012170 4EB9 0000 0000             		jsr	(Sonic_ResetOnFloor).l ; reset Sonic as if on floor
00012176 205F                       		movea.l	(sp)+,a0
00012178                            
00012178                            	@notinair:
00012178 08E9 0003 0022             		bset	#3,obStatus(a1)	; set object standing flag
0001217E 08E8 0003 0022             		bset	#3,obStatus(a0)	; set Sonic standing on object flag
00012184 4E75                       		rts	
00012186                            ; End of function Solid_ResetFloor
00012186                            ; End of function Solid_ResetFloor
00012186                            
00012186                            		include	"_incObj\51 Smashable Green Block.asm"
00012186                            ; ---------------------------------------------------------------------------
00012186                            ; Object 51 - smashable	green block (MZ)
00012186                            ; ---------------------------------------------------------------------------
00012186                            
00012186                            SmashBlock:
00012186 7000                       		moveq	#0,d0
00012188 1028 0024                  		move.b	obRoutine(a0),d0
0001218C 323B 0000                  		move.w	Smab_Index(pc,d0.w),d1
00012190 4EBB 1000                  		jsr	Smab_Index(pc,d1.w)
00012194 6000 F880                  		bra.w	RememberState
00012198                            ; ===========================================================================
00012198 0000                       Smab_Index:	dc.w Smab_Main-Smab_Index
0001219A 0000                       		dc.w Smab_Solid-Smab_Index
0001219C 0000                       		dc.w Smab_Points-Smab_Index
0001219E                            ; ===========================================================================
0001219E                            
0001219E                            Smab_Main:	; Routine 0
0001219E 5428 0024                  		addq.b	#2,obRoutine(a0)
000121A2 217C 0000 0000 0004        		move.l	#Map_Smab,obMap(a0)
000121AA 317C 42B8 0002             		move.w	#$42B8,obGfx(a0)
000121B0 117C 0004 0001             		move.b	#4,obRender(a0)
000121B6 117C 0010 0014             		move.b	#$10,obActWid(a0)
000121BC 317C 0200 0018             		move.w	#$200,obPriority(a0)
000121C2 1168 0028 001A             		move.b	obSubtype(a0),obFrame(a0)
000121C8                            
000121C8                            Smab_Solid:	; Routine 2
000121C8                            
000121C8 =00000032                  sonicAniFrame:	equ $32		; Sonic's current animation number
000121C8 =00000034                  @count:		equ $34		; number of blocks hit + previous stuff
000121C8                            
000121C8 3178 F7D0 0034             		move.w	(v_itembonus).w,$34(a0)
000121CE 1178 D01C 0032             		move.b	(v_player+obAnim).w,sonicAniFrame(a0) ; load Sonic's animation number
000121D4 323C 001B                  		move.w	#$1B,d1
000121D8 343C 0010                  		move.w	#$10,d2
000121DC 363C 0011                  		move.w	#$11,d3
000121E0 3828 0008                  		move.w	obX(a0),d4
000121E4 6100 FCC8                  		bsr.w	SolidObject
000121E8 0828 0003 0022             		btst	#3,obStatus(a0)	; has Sonic landed on the block?
000121EE 6600                       		bne.s	@smash		; if yes, branch
000121F0                            
000121F0                            	@notspinning:
000121F0 4E75                       		rts	
000121F2                            ; ===========================================================================
000121F2                            
000121F2                            @smash:
000121F2 0C28 0000 0032             		cmpi.b	#id_Roll,sonicAniFrame(a0) ; is Sonic rolling/jumping?
000121F8 66F6                       		bne.s	@notspinning	; if not, branch
000121FA 31E8 0034 F7D0             		move.w	@count(a0),(v_itembonus).w
00012200 08E9 0002 0022             		bset	#2,obStatus(a1)
00012206 137C 000E 0016             		move.b	#$E,obHeight(a1)
0001220C 137C 0007 0017             		move.b	#7,obWidth(a1)
00012212 137C 0000 001C             		move.b	#id_Roll,obAnim(a1) ; make Sonic roll
00012218 337C FD00 0012             		move.w	#-$300,obVelY(a1) ; rebound Sonic
0001221E 08E9 0001 0022             		bset	#1,obStatus(a1)
00012224 08A9 0003 0022             		bclr	#3,obStatus(a1)
0001222A 137C 0002 0024             		move.b	#2,obRoutine(a1)
00012230 08A8 0003 0022             		bclr	#3,obStatus(a0)
00012236 4228 0025                  		clr.b	obSolid(a0)
0001223A 117C 0001 001A             		move.b	#1,obFrame(a0)
00012240 49F9 0000 0000             		lea	(Smab_Speeds).l,a4 ; load broken fragment speed data
00012246 7203                       		moveq	#3,d1		; set number of	fragments to 4
00012248 343C 0038                  		move.w	#$38,d2
0001224C 6100 D3F2                  		bsr.w	SmashObject
00012250 6100 DCC6                  		bsr.w	FindFreeObj
00012254 6600                       		bne.s	Smab_Points
00012256 12BC 0029                  		move.b	#id_Points,0(a1) ; load points object
0001225A 3368 0008 0008             		move.w	obX(a0),obX(a1)
00012260 3368 000C 000C             		move.w	obY(a0),obY(a1)
00012266 3438 F7D0                  		move.w	(v_itembonus).w,d2
0001226A 5478 F7D0                  		addq.w	#2,(v_itembonus).w ; increment bonus counter
0001226E 0C42 0006                  		cmpi.w	#6,d2		; have fewer than 3 blocks broken?
00012272 6500                       		bcs.s	@bonus		; if yes, branch
00012274 7406                       		moveq	#6,d2		; set cap for points
00012276                            
00012276                            	@bonus:
00012276 7000                       		moveq	#0,d0
00012278 303B 2000                  		move.w	Smab_Scores(pc,d2.w),d0
0001227C 0C78 0020 F7D0             		cmpi.w	#$20,(v_itembonus).w ; have 16 blocks been smashed?
00012282 6500                       		bcs.s	@givepoints	; if not, branch
00012284 303C 03E8                  		move.w	#1000,d0	; give higher points for 16th block
00012288 740A                       		moveq	#10,d2
0001228A                            
0001228A                            	@givepoints:
0001228A 4EB9 0000 0000             		jsr	(AddPoints).l
00012290 E24A                       		lsr.w	#1,d2
00012292 1342 001A                  		move.b	d2,obFrame(a1)
00012296                            
00012296                            Smab_Points:	; Routine 4
00012296 6100 D7E0                  		bsr.w	SpeedToPos
0001229A 0668 0038 0012             		addi.w	#$38,obVelY(a0)
000122A0 6100 D7EA                  		bsr.w	DisplaySprite
000122A4 4A28 0001                  		tst.b	obRender(a0)
000122A8 6A00 D822                  		bpl.w	DeleteObject
000122AC 4E75                       		rts	
000122AE                            ; ===========================================================================
000122AE FE00 FE00                  Smab_Speeds:	dc.w -$200, -$200	; x-speed, y-speed
000122B2 FF00 FF00                  		dc.w -$100, -$100
000122B6 0200 FE00                  		dc.w $200, -$200
000122BA 0100 FF00                  		dc.w $100, -$100
000122BE                            
000122BE 000A 0014 0032 0064        Smab_Scores:	dc.w 10, 20, 50, 100
000122BE 000A 0014 0032 0064        Smab_Scores:	dc.w 10, 20, 50, 100
000122C6                            Map_Smab:	include	"_maps\Smashable Green Block.asm"
000122C6                            ; --------------------------------------------------------------------------------
000122C6                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
000122C6                            ; --------------------------------------------------------------------------------
000122C6                            
000122C6                            SME_TrHmw:	
000122C6 0000 0000                  		dc.w SME_TrHmw_6-SME_TrHmw, SME_TrHmw_1B-SME_TrHmw	
000122CA 0000                       		dc.w SME_TrHmw_30-SME_TrHmw	
000122CC 04                         SME_TrHmw_6:	dc.b 4	
000122CD F005 0000 F0               		dc.b $F0, 5, 0, 0, $F0	
000122D2 0005 0000 F0               		dc.b 0, 5, 0, 0, $F0	
000122D7 0005 0000 E0               		dc.b 0, 5, 0, 0, $E0	
000122DC F005 0000 E0               		dc.b $F0, 5, 0, 0, $E0	
000122E1 04                         SME_TrHmw_1B:	dc.b 4	
000122E2 F005 0000 F0               		dc.b $F0, 5, 0, 0, $F0	
000122E7 0005 0000 F0               		dc.b 0, 5, 0, 0, $F0	
000122EC 0005 0000 E0               		dc.b 0, 5, 0, 0, $E0	
000122F1 F005 0000 E0               		dc.b $F0, 5, 0, 0, $E0	
000122F6 00                         SME_TrHmw_30:	dc.b 0	
000122F8 00                         		even
000122F8 00                         		even
000122F8                            
000122F8                            		include	"_incObj\52 Moving Blocks.asm"
000122F8                            ; ---------------------------------------------------------------------------
000122F8                            ; Object 52 - moving platform blocks (MZ, LZ, SBZ)
000122F8                            ; ---------------------------------------------------------------------------
000122F8                            
000122F8                            MovingBlock:
000122F8 7000                       		moveq	#0,d0
000122FA 1028 0024                  		move.b	obRoutine(a0),d0
000122FE 323B 0000                  		move.w	MBlock_Index(pc,d0.w),d1
00012302 4EFB 1000                  		jmp	MBlock_Index(pc,d1.w)
00012306                            ; ===========================================================================
00012306 0000                       MBlock_Index:	dc.w MBlock_Main-MBlock_Index
00012308 0000                       		dc.w MBlock_Platform-MBlock_Index
0001230A 0000                       		dc.w MBlock_StandOn-MBlock_Index
0001230C                            
0001230C =00000030                  mblock_origX:	equ $30
0001230C =00000032                  mblock_origY:	equ $32
0001230C                            
0001230C 1000                       MBlock_Var:	dc.b $10, 0		; object width,	frame number
0001230E 2001                       		dc.b $20, 1
00012310 2002                       		dc.b $20, 2
00012312 4003                       		dc.b $40, 3
00012314 3004                       		dc.b $30, 4
00012316                            ; ===========================================================================
00012316                            
00012316                            MBlock_Main:	; Routine 0
00012316 5428 0024                  		addq.b	#2,obRoutine(a0)
0001231A 217C 0000 0000 0004        		move.l	#Map_MBlock,obMap(a0)
00012322 317C 42B8 0002             		move.w	#$42B8,obGfx(a0)
00012328 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w ; check if level is LZ
0001232E 6600                       		bne.s	loc_FE44
00012330 217C 0000 0000 0004        		move.l	#Map_MBlockLZ,obMap(a0) ; LZ specific code
00012338 317C 43BC 0002             		move.w	#$43BC,obGfx(a0)
0001233E 117C 0007 0016             		move.b	#7,obHeight(a0)
00012344                            
00012344                            loc_FE44:
00012344 0C38 0005 FE10             		cmpi.b	#id_SBZ,(v_zone).w ; check if level is SBZ
0001234A 6600                       		bne.s	loc_FE60
0001234C 317C 22C0 0002             		move.w	#$22C0,obGfx(a0) ; SBZ specific code (object 5228)
00012352 0C28 0028 0028             		cmpi.b	#$28,obSubtype(a0) ; is object 5228 ?
00012358 6700                       		beq.s	loc_FE60	; if yes, branch
0001235A 317C 4460 0002             		move.w	#$4460,obGfx(a0) ; SBZ specific code (object 523x)
00012360                            
00012360                            loc_FE60:
00012360 117C 0004 0001             		move.b	#4,obRender(a0)
00012366 7000                       		moveq	#0,d0
00012368 1028 0028                  		move.b	obSubtype(a0),d0
0001236C E648                       		lsr.w	#3,d0
0001236E 0240 001E                  		andi.w	#$1E,d0
00012372 45FB 0098                  		lea	MBlock_Var(pc,d0.w),a2
00012376 115A 0014                  		move.b	(a2)+,obActWid(a0)
0001237A 115A 001A                  		move.b	(a2)+,obFrame(a0)
0001237E 317C 0200 0018             		move.w	#$200,obPriority(a0)
00012384 3168 0008 0030             		move.w	obX(a0),mblock_origX(a0)
0001238A 3168 000C 0032             		move.w	obY(a0),mblock_origY(a0)
00012390 0228 000F 0028             		andi.b	#$F,obSubtype(a0)
00012396                            
00012396                            MBlock_Platform: ; Routine 2
00012396 6100 0000                  		bsr.w	MBlock_Move
0001239A 7200                       		moveq	#0,d1
0001239C 1228 0014                  		move.b	obActWid(a0),d1
000123A0 4EB9 0000 9136             		jsr	(PlatformObject).l
000123A6 6000                       		bra.s	MBlock_ChkDel
000123A8                            ; ===========================================================================
000123A8                            
000123A8                            MBlock_StandOn:	; Routine 4
000123A8 7200                       		moveq	#0,d1
000123AA 1228 0014                  		move.b	obActWid(a0),d1
000123AE 4EB9 0000 92AA             		jsr	(ExitPlatform).l
000123B4 3F28 0008                  		move.w	obX(a0),-(sp)
000123B8 6100 0000                  		bsr.w	MBlock_Move
000123BC 341F                       		move.w	(sp)+,d2
000123BE 4EB9 0000 9814             		jsr	(MvSonicOnPtfm2).l
000123C4                            
000123C4                            MBlock_ChkDel:
000123E2 6000 D6A8                  		bra.w	DisplaySprite
000123E6                            ; ===========================================================================
000123E6                            
000123E6                            MBlock_Move:
000123E6 7000                       		moveq	#0,d0
000123E8 1028 0028                  		move.b	obSubtype(a0),d0
000123EC 0240 000F                  		andi.w	#$F,d0
000123F0 D040                       		add.w	d0,d0
000123F2 323B 0000                  		move.w	MBlock_TypeIndex(pc,d0.w),d1
000123F6 4EFB 1000                  		jmp	MBlock_TypeIndex(pc,d1.w)
000123FA                            ; ===========================================================================
000123FA 0000 0000                  MBlock_TypeIndex:dc.w MBlock_Type00-MBlock_TypeIndex, MBlock_Type01-MBlock_TypeIndex
000123FE 0000 0000                  		dc.w MBlock_Type02-MBlock_TypeIndex, MBlock_Type03-MBlock_TypeIndex
00012402 0000 0000                  		dc.w MBlock_Type02-MBlock_TypeIndex, MBlock_Type05-MBlock_TypeIndex
00012406 0000 0000                  		dc.w MBlock_Type06-MBlock_TypeIndex, MBlock_Type07-MBlock_TypeIndex
0001240A 0000 0000                  		dc.w MBlock_Type08-MBlock_TypeIndex, MBlock_Type02-MBlock_TypeIndex
0001240E 0000                       		dc.w MBlock_Type0A-MBlock_TypeIndex
00012410                            ; ===========================================================================
00012410                            
00012410                            MBlock_Type00:
00012410 4E75                       		rts	
00012412                            ; ===========================================================================
00012412                            
00012412                            MBlock_Type01:
00012412 1038 FE6C                  		move.b	(v_oscillate+$E).w,d0
00012416 323C 0060                  		move.w	#$60,d1
0001241A 0828 0000 0022             		btst	#0,obStatus(a0)
00012420 6700                       		beq.s	loc_FF26
00012422 4440                       		neg.w	d0
00012424 D041                       		add.w	d1,d0
00012426                            
00012426                            loc_FF26:
00012426 3228 0030                  		move.w	mblock_origX(a0),d1
0001242A 9240                       		sub.w	d0,d1
0001242C 3141 0008                  		move.w	d1,obX(a0)
00012430 4E75                       		rts	
00012432                            ; ===========================================================================
00012432                            
00012432                            MBlock_Type02:
00012432 0C28 0004 0024             		cmpi.b	#4,obRoutine(a0) ; is Sonic standing on the platform?
00012438 6600                       		bne.s	MBlock_02_Wait
0001243A 5228 0028                  		addq.b	#1,obSubtype(a0) ; if yes, add 1 to type
0001243E                            
0001243E                            MBlock_02_Wait:
0001243E 4E75                       		rts	
00012440                            ; ===========================================================================
00012440                            
00012440                            MBlock_Type03:
00012440 7600                       		moveq	#0,d3
00012442 1628 0014                  		move.b	obActWid(a0),d3
00012446 6100 0000                  		bsr.w	ObjHitWallRight
0001244A 4A41                       		tst.w	d1		; has the platform hit a wall?
0001244C 6B00                       		bmi.s	MBlock_03_End	; if yes, branch
0001244E 5268 0008                  		addq.w	#1,obX(a0)	; move platform	to the right
00012452 3168 0008 0030             		move.w	obX(a0),mblock_origX(a0)
00012458 4E75                       		rts	
0001245A                            ; ===========================================================================
0001245A                            
0001245A                            MBlock_03_End:
0001245A 4228 0028                  		clr.b	obSubtype(a0)	; change to type 00 (non-moving	type)
0001245E 4E75                       		rts	
00012460                            ; ===========================================================================
00012460                            
00012460                            MBlock_Type05:
00012460 7600                       		moveq	#0,d3
00012462 1628 0014                  		move.b	obActWid(a0),d3
00012466 6100 0000                  		bsr.w	ObjHitWallRight
0001246A 4A41                       		tst.w	d1		; has the platform hit a wall?
0001246C 6B00                       		bmi.s	MBlock_05_End	; if yes, branch
0001246E 5268 0008                  		addq.w	#1,obX(a0)	; move platform	to the right
00012472 3168 0008 0030             		move.w	obX(a0),mblock_origX(a0)
00012478 4E75                       		rts	
0001247A                            ; ===========================================================================
0001247A                            
0001247A                            MBlock_05_End:
0001247A 5228 0028                  		addq.b	#1,obSubtype(a0) ; change to type 06 (falling)
0001247E 4E75                       		rts	
00012480                            ; ===========================================================================
00012480                            
00012480                            MBlock_Type06:
00012480 6100 D5F6                  		bsr.w	SpeedToPos
00012484 0668 0018 0012             		addi.w	#$18,obVelY(a0)	; make the platform fall
0001248A 6100 0000                  		bsr.w	ObjFloorDist
0001248E 4A41                       		tst.w	d1		; has platform hit the floor?
00012490 6A00 0000                  		bpl.w	locret_FFA0	; if not, branch
00012494 D368 000C                  		add.w	d1,obY(a0)
00012498 4268 0012                  		clr.w	obVelY(a0)	; stop platform	falling
0001249C 4228 0028                  		clr.b	obSubtype(a0)	; change to type 00 (non-moving)
000124A0                            
000124A0                            locret_FFA0:
000124A0 4E75                       		rts	
000124A2                            ; ===========================================================================
000124A2                            
000124A2                            MBlock_Type07:
000124A2 4A38 F7E2                  		tst.b	(f_switch+2).w	; has switch number 02 been pressed?
000124A6 6700                       		beq.s	MBlock_07_ChkDel
000124A8 5728 0028                  		subq.b	#3,obSubtype(a0) ; if yes, change object type to 04
000124AC                            
000124AC                            MBlock_07_ChkDel:
000124AC 588F                       		addq.l	#4,sp
000124CC 4E75                       		rts	
000124CE                            ; ===========================================================================
000124CE                            
000124CE                            MBlock_Type08:
000124CE 1038 FE7C                  		move.b	(v_oscillate+$1E).w,d0
000124D2 323C 0080                  		move.w	#$80,d1
000124D6 0828 0000 0022             		btst	#0,obStatus(a0)
000124DC 6700                       		beq.s	loc_FFE2
000124DE 4440                       		neg.w	d0
000124E0 D041                       		add.w	d1,d0
000124E2                            
000124E2                            loc_FFE2:
000124E2 3228 0032                  		move.w	mblock_origY(a0),d1
000124E6 9240                       		sub.w	d0,d1
000124E8 3141 000C                  		move.w	d1,obY(a0)
000124EC 4E75                       		rts	
000124EE                            ; ===========================================================================
000124EE                            
000124EE                            MBlock_Type0A:
000124EE 7600                       		moveq	#0,d3
000124F0 1628 0014                  		move.b	obActWid(a0),d3
000124F4 D643                       		add.w	d3,d3
000124F6 7208                       		moveq	#8,d1
000124F8 0828 0000 0022             		btst	#0,obStatus(a0)
000124FE 6700                       		beq.s	loc_10004
00012500 4441                       		neg.w	d1
00012502 4443                       		neg.w	d3
00012504                            
00012504                            loc_10004:
00012504 4A68 0036                  		tst.w	$36(a0)		; is platform set to move back?
00012508 6600                       		bne.s	MBlock_0A_Back	; if yes, branch
0001250A 3028 0008                  		move.w	obX(a0),d0
0001250E 9068 0030                  		sub.w	mblock_origX(a0),d0
00012512 B043                       		cmp.w	d3,d0
00012514 6700                       		beq.s	MBlock_0A_Wait
00012516 D368 0008                  		add.w	d1,obX(a0)	; move platform
0001251A 317C 012C 0034             		move.w	#300,$34(a0)	; set time delay to 5 seconds
00012520 4E75                       		rts	
00012522                            ; ===========================================================================
00012522                            
00012522                            MBlock_0A_Wait:
00012522 5368 0034                  		subq.w	#1,$34(a0)	; subtract 1 from time delay
00012526 6600                       		bne.s	locret_1002E	; if time remains, branch
00012528 317C 0001 0036             		move.w	#1,$36(a0)	; set platform to move back to its original position
0001252E                            
0001252E                            locret_1002E:
0001252E 4E75                       		rts	
00012530                            ; ===========================================================================
00012530                            
00012530                            MBlock_0A_Back:
00012530 3028 0008                  		move.w	obX(a0),d0
00012534 9068 0030                  		sub.w	mblock_origX(a0),d0
00012538 6700                       		beq.s	MBlock_0A_Reset
0001253A 9368 0008                  		sub.w	d1,obX(a0)	; return platform to its original position
0001253E 4E75                       		rts	
00012540                            ; ===========================================================================
00012540                            
00012540                            MBlock_0A_Reset:
00012540 4268 0036                  		clr.w	$36(a0)
00012544 5328 0028                  		subq.b	#1,obSubtype(a0)
00012548 4E75                       		rts	
00012548 4E75                       		rts	
0001254A                            Map_MBlock:	include	"_maps\Moving Blocks (MZ and SBZ).asm"
0001254A                            ; ---------------------------------------------------------------------------
0001254A                            ; Sprite mappings - moving blocks (MZ, SBZ)
0001254A                            ; ---------------------------------------------------------------------------
0001254A                            Map_MBlock_internal:
0001254A 0000                       		dc.w @mz1-Map_MBlock_internal
0001254C 0000                       		dc.w @mz2-Map_MBlock_internal
0001254E 0000                       		dc.w @sbz-Map_MBlock_internal
00012550 0000                       		dc.w @sbzwide-Map_MBlock_internal
00012552 0000                       		dc.w @mz3-Map_MBlock_internal
00012554 01                         @mz1:		dc.b 1
00012555 F80F 0008 F0               		dc.b $F8, $F, 0, 8, $F0
0001255A 02                         @mz2:		dc.b 2
0001255B F80F 0008 E0               		dc.b $F8, $F, 0, 8, $E0
00012560 F80F 0008 00               		dc.b $F8, $F, 0, 8, 0
00012565 04                         @sbz:		dc.b 4
00012566 F80C 2000 E0               		dc.b $F8, $C, $20, 0, $E0
0001256B 000D 0004 E0               		dc.b 0,	$D, 0, 4, $E0
00012570 F80C 2000 00               		dc.b $F8, $C, $20, 0, 0
00012575 000D 0004 00               		dc.b 0,	$D, 0, 4, 0
0001257A 04                         @sbzwide:	dc.b 4
0001257B F80E 0000 C0               		dc.b $F8, $E, 0, 0, $C0
00012580 F80E 0003 E0               		dc.b $F8, $E, 0, 3, $E0
00012585 F80E 0003 00               		dc.b $F8, $E, 0, 3, 0
0001258A F80E 0800 20               		dc.b $F8, $E, 8, 0, $20
0001258F 03                         @mz3:		dc.b 3
00012590 F80F 0008 D0               		dc.b $F8, $F, 0, 8, $D0
00012595 F80F 0008 F0               		dc.b $F8, $F, 0, 8, $F0
0001259A F80F 0008 10               		dc.b $F8, $F, 0, 8, $10
000125A0 00                         		even
000125A0 00                         		even
000125A0                            Map_MBlockLZ:	include	"_maps\Moving Blocks (LZ).asm"
000125A0                            ; ---------------------------------------------------------------------------
000125A0                            ; Sprite mappings - moving block (LZ)
000125A0                            ; ---------------------------------------------------------------------------
000125A0                            Map_MBlockLZ_internal:
000125A0 0000                       		dc.w @0-Map_MBlockLZ_internal
000125A2 01                         @0:		dc.b 1
000125A3 F80D 0000 F0               		dc.b $F8, $D, 0, 0, $F0
000125A8                            		even
000125A8                            		even
000125A8                            
000125A8                            		include	"_incObj\55 Basaran.asm"
000125A8                            ; ---------------------------------------------------------------------------
000125A8                            ; Object 55 - Basaran enemy (MZ)
000125A8                            ; ---------------------------------------------------------------------------
000125A8                            
000125A8                            Basaran:
000125A8 7000                       		moveq	#0,d0
000125AA 1028 0024                  		move.b	obRoutine(a0),d0
000125AE 323B 0000                  		move.w	Bas_Index(pc,d0.w),d1
000125B2 4EFB 1000                  		jmp	Bas_Index(pc,d1.w)
000125B6                            ; ===========================================================================
000125B6 0000                       Bas_Index:	dc.w Bas_Main-Bas_Index
000125B8 0000                       		dc.w Bas_Action-Bas_Index
000125BA                            ; ===========================================================================
000125BA                            
000125BA                            Bas_Main:	; Routine 0
000125BA 5428 0024                  		addq.b	#2,obRoutine(a0)
000125BE 217C 0000 0000 0004        		move.l	#Map_Bas,obMap(a0)
000125C6 317C 84B8 0002             		move.w	#$84B8,obGfx(a0)
000125CC 117C 0004 0001             		move.b	#4,obRender(a0)
000125D2 117C 000C 0016             		move.b	#$C,obHeight(a0)
000125D8 317C 0100 0018             		move.w	#$100,obPriority(a0)
000125DE 117C 000B 0020             		move.b	#$B,obColType(a0)
000125E4 117C 0010 0014             		move.b	#$10,obActWid(a0)
000125EA                            
000125EA                            Bas_Action:	; Routine 2
000125EA 7000                       		moveq	#0,d0
000125EC 1028 0025                  		move.b	ob2ndRout(a0),d0
000125F0 323B 0000                  		move.w	@index(pc,d0.w),d1
000125F4 4EBB 1000                  		jsr	@index(pc,d1.w)
000125F8 43F9 0000 0000             		lea	(Ani_Bas).l,a1
000125FE 6100 A54E                  		bsr.w	AnimateSprite
00012602 6000 F412                  		bra.w	RememberState
00012606                            ; ===========================================================================
00012606 0000                       @index:		dc.w @dropcheck-@index
00012608 0000                       		dc.w @dropfly-@index
0001260A 0000                       		dc.w @flapsound-@index
0001260C 0000                       		dc.w @flyup-@index
0001260E                            ; ===========================================================================
0001260E                            
0001260E                            @dropcheck:
0001260E 343C 0080                  		move.w	#$80,d2
00012612 6100 0000                  		bsr.w	@chkdistance	; is Sonic < $80 pixels from basaran?
00012616 6400                       		bcc.s	@nodrop		; if not, branch
00012618 3038 D00C                  		move.w	(v_player+obY).w,d0
0001261C 3140 0036                  		move.w	d0,$36(a0)
00012620 9068 000C                  		sub.w	obY(a0),d0
00012624 6500                       		bcs.s	@nodrop
00012626 0C40 0080                  		cmpi.w	#$80,d0		; is Sonic < $80 pixels from basaran?
0001262A 6400                       		bcc.s	@nodrop		; if not, branch
0001262C 4A78 FE08                  		tst.w	(v_debuguse).w	; is debug mode	on?
00012630 6600                       		bne.s	@nodrop		; if yes, branch
00012632                            
00012632 1038 FE0F                  		move.b	(v_vbla_byte).w,d0
00012636 D007                       		add.b	d7,d0
00012638 0200 0007                  		andi.b	#7,d0
0001263C 6600                       		bne.s	@nodrop
0001263E 117C 0001 001C             		move.b	#1,obAnim(a0)
00012644 5428 0025                  		addq.b	#2,ob2ndRout(a0)
00012648                            
00012648                            	@nodrop:
00012648 4E75                       		rts	
0001264A                            ; ===========================================================================
0001264A                            
0001264A                            @dropfly:
0001264A 6100 D42C                  		bsr.w	SpeedToPos
0001264E 0668 0018 0012             		addi.w	#$18,obVelY(a0)	; make basaran fall
00012654 343C 0080                  		move.w	#$80,d2
00012658 6100 0000                  		bsr.w	@chkdistance
0001265C 3028 0036                  		move.w	$36(a0),d0
00012660 9068 000C                  		sub.w	obY(a0),d0
00012664 6500                       		bcs.s	@chkdel
00012666 0C40 0010                  		cmpi.w	#$10,d0		; is basaran close to Sonic vertically?
0001266A 6400                       		bcc.s	@dropmore	; if not, branch
0001266C 3141 0010                  		move.w	d1,obVelX(a0)	; make basaran fly horizontally
00012670 317C 0000 0012             		move.w	#0,obVelY(a0)	; stop basaran falling
00012676 117C 0002 001C             		move.b	#2,obAnim(a0)
0001267C 5428 0025                  		addq.b	#2,ob2ndRout(a0)
00012680                            
00012680                            	@dropmore:
00012680 4E75                       		rts	
00012682                            
00012682                            	@chkdel:
00012682 4A28 0001                  		tst.b	obRender(a0)
00012686 6A00 D444                  		bpl.w	DeleteObject
0001268A 4E75                       		rts	
0001268C                            ; ===========================================================================
0001268C                            
0001268C                            @flapsound:
0001268C 1038 FE0F                  		move.b	(v_vbla_byte).w,d0
00012690 0200 000F                  		andi.b	#$F,d0
00012694 6600                       		bne.s	@nosound
000126A0                            
000126A0                            	@nosound:
000126A0 6100 D3D6                  		bsr.w	SpeedToPos
000126A4 3038 D008                  		move.w	(v_player+obX).w,d0
000126A8 9068 0008                  		sub.w	obX(a0),d0
000126AC 6400                       		bcc.s	@isright	; if Sonic is right of basaran, branch
000126AE 4440                       		neg.w	d0
000126B0                            
000126B0                            	@isright:
000126B0 0C40 0080                  		cmpi.w	#$80,d0		; is Sonic within $80 pixels of basaran?
000126B4 6500                       		bcs.s	@dontflyup	; if yes, branch
000126B6 1038 FE0F                  		move.b	(v_vbla_byte).w,d0
000126BA D007                       		add.b	d7,d0
000126BC 0200 0007                  		andi.b	#7,d0
000126C0 6600                       		bne.s	@dontflyup
000126C2 5428 0025                  		addq.b	#2,ob2ndRout(a0)
000126C6                            
000126C6                            @dontflyup:
000126C6 4E75                       		rts	
000126C8                            ; ===========================================================================
000126C8                            
000126C8                            @flyup:
000126C8 6100 D3AE                  		bsr.w	SpeedToPos
000126CC 0468 0018 0012             		subi.w	#$18,obVelY(a0)	; make basaran fly upwards
000126D2 6100 0000                  		bsr.w	ObjHitCeiling
000126D6 4A41                       		tst.w	d1		; has basaran hit the ceiling?
000126D8 6A00                       		bpl.s	@noceiling	; if not, branch
000126DA 9368 000C                  		sub.w	d1,obY(a0)
000126DE 0268 FFF8 0008             		andi.w	#$FFF8,obX(a0)
000126E4 4268 0010                  		clr.w	obVelX(a0)	; stop basaran moving
000126E8 4268 0012                  		clr.w	obVelY(a0)
000126EC 4228 001C                  		clr.b	obAnim(a0)
000126F0 4228 0025                  		clr.b	ob2ndRout(a0)
000126F4                            
000126F4                            	@noceiling:
000126F4 4E75                       		rts	
000126F6                            ; ===========================================================================
000126F6                            
000126F6                            ; Subroutine to check Sonic's distance from the basaran
000126F6                            
000126F6                            ; input:
000126F6                            ;	d2 = distance to compare
000126F6                            
000126F6                            ; output:
000126F6                            ;	d0 = distance between Sonic and basaran
000126F6                            ;	d1 = speed/direction for basaran to fly
000126F6                            
000126F6                            @chkdistance:
000126F6 323C 0100                  		move.w	#$100,d1
000126FA 08E8 0000 0022             		bset	#0,obStatus(a0)
00012700 3038 D008                  		move.w	(v_player+obX).w,d0
00012704 9068 0008                  		sub.w	obX(a0),d0
00012708 6400                       		bcc.s	@right		; if Sonic is right of basaran, branch
0001270A 4440                       		neg.w	d0
0001270C 4441                       		neg.w	d1
0001270E 08A8 0000 0022             		bclr	#0,obStatus(a0)
00012714                            
00012714                            	@right:
00012714 B042                       		cmp.w	d2,d0
00012716 4E75                       		rts	
00012718                            ; ===========================================================================
00012718                            ; unused crap
00012718 6100 D35E                  		bsr.w	SpeedToPos
0001271C 6100 D36E                  		bsr.w	DisplaySprite
00012720 4A28 0001                  		tst.b	obRender(a0)
00012724 6A00 D3A6                  		bpl.w	DeleteObject
00012728 4E75                       		rts	
00012728 4E75                       		rts	
0001272A                            		include	"_anim\Basaran.asm"
0001272A                            ; ---------------------------------------------------------------------------
0001272A                            ; Animation script - Basaran enemy
0001272A                            ; ---------------------------------------------------------------------------
0001272A 0000                       Ani_Bas:	dc.w @still-Ani_Bas
0001272C 0000                       		dc.w @fall-Ani_Bas
0001272E 0000                       		dc.w @fly-Ani_Bas
00012730 0F00 FF                    @still:		dc.b $F, 0, afEnd
00012734 00                         		even
00012734 0F01 FF                    @fall:		dc.b $F, 1, afEnd
00012738 00                         		even
00012738 0301 0203 02FF             @fly:		dc.b 3,	1, 2, 3, 2, afEnd
0001273E                            		even
0001273E                            		even
0001273E                            Map_Bas:	include	"_maps\Basaran.asm"
0001273E                            ; --------------------------------------------------------------------------------
0001273E                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0001273E                            ; --------------------------------------------------------------------------------
0001273E                            
0001273E                            SME_RhYYA:	
0001273E 0000 0000                  		dc.w SME_RhYYA_8-SME_RhYYA, SME_RhYYA_E-SME_RhYYA	
00012742 0000 0000                  		dc.w SME_RhYYA_1E-SME_RhYYA, SME_RhYYA_33-SME_RhYYA	
00012746 01                         SME_RhYYA_8:	dc.b 1	
00012747 F406 2000 F8               		dc.b $F4, 6, $20, 0, $F8	
0001274C 03                         SME_RhYYA_E:	dc.b 3	
0001274D F20E 2006 F4               		dc.b $F2, $E, $20, 6, $F4	
00012752 0A04 2012 FC               		dc.b $A, 4, $20, $12, $FC	
00012757 0200 2027 0C               		dc.b 2, 0, $20, $27, $C	
0001275C 04                         SME_RhYYA_1E:	dc.b 4	
0001275D F804 2014 F8               		dc.b $F8, 4, $20, $14, $F8	
00012762 000C 2016 F0               		dc.b 0, $C, $20, $16, $F0	
00012767 0804 201A 00               		dc.b 8, 4, $20, $1A, 0	
0001276C 0000 2028 0C               		dc.b 0, 0, $20, $28, $C	
00012771 04                         SME_RhYYA_33:	dc.b 4	
00012772 F609 201C F5               		dc.b $F6, 9, $20, $1C, $F5	
00012777 0608 2022 F4               		dc.b 6, 8, $20, $22, $F4	
0001277C 0E04 2025 F4               		dc.b $E, 4, $20, $25, $F4	
00012781 FE00 2027 0C               		dc.b $FE, 0, $20, $27, $C	
00012786                            		even
00012786                            		even
00012786                            
00012786                            		include	"_incObj\56 Floating Blocks and Doors.asm"
00012786                            ; ---------------------------------------------------------------------------
00012786                            ; Object 56 - floating blocks (SYZ/SLZ), large doors (LZ)
00012786                            ; ---------------------------------------------------------------------------
00012786                            
00012786                            FloatingBlock:
00012786 7000                       		moveq	#0,d0
00012788 1028 0024                  		move.b	obRoutine(a0),d0
0001278C 323B 0000                  		move.w	FBlock_Index(pc,d0.w),d1
00012790 4EFB 1000                  		jmp	FBlock_Index(pc,d1.w)
00012794                            ; ===========================================================================
00012794 0000                       FBlock_Index:	dc.w FBlock_Main-FBlock_Index
00012796 0000                       		dc.w FBlock_Action-FBlock_Index
00012798                            
00012798 =00000034                  fb_origX:	equ $34		; original x-axis position
00012798 =00000030                  fb_origY:	equ $30		; original y-axis position
00012798 =0000003A                  fb_height:	equ $3A		; total object height
00012798 =0000003C                  fb_type:		equ $3C		; subtype (2nd digit only)
00012798                            
00012798                            FBlock_Var:	; width/2, height/2
00012798 1010                       		dc.b  $10, $10	; subtype 0x/8x
0001279A 2020                       		dc.b  $20, $20	; subtype 1x/9x
0001279C 1020                       		dc.b  $10, $20	; subtype 2x/Ax
0001279E 201A                       		dc.b  $20, $1A	; subtype 3x/Bx
000127A0 1027                       		dc.b  $10, $27	; subtype 4x/Cx
000127A2 1010                       		dc.b  $10, $10	; subtype 5x/Dx
000127A4 0820                       		dc.b	8, $20	; subtype 6x/Ex
000127A6 4010                       		dc.b  $40, $10	; subtype 7x/Fx
000127A8                            ; ===========================================================================
000127A8                            
000127A8                            FBlock_Main:	; Routine 0
000127A8 5428 0024                  		addq.b	#2,obRoutine(a0)
000127AC 217C 0000 0000 0004        		move.l	#Map_FBlock,obMap(a0)
000127B4 317C 4000 0002             		move.w	#$4000,obGfx(a0)
000127BA 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w ; check if level is LZ
000127C0 6600                       		bne.s	@notLZ
000127C2 317C 43C4 0002             		move.w	#$43C4,obGfx(a0) ; LZ specific code
000127C8                            
000127C8                            	@notLZ:
000127C8 117C 0004 0001             		move.b	#4,obRender(a0)
000127CE 317C 0180 0018             		move.w	#$180,obPriority(a0)
000127D4 7000                       		moveq	#0,d0
000127D6 1028 0028                  		move.b	obSubtype(a0),d0 ; get subtype
000127DA E648                       		lsr.w	#3,d0
000127DC 0240 000E                  		andi.w	#$E,d0		; read only the 1st digit
000127E0 45FB 00B6                  		lea	FBlock_Var(pc,d0.w),a2 ; get size data
000127E4 115A 0014                  		move.b	(a2)+,obActWid(a0)
000127E8 1152 0016                  		move.b	(a2),obHeight(a0)
000127EC E248                       		lsr.w	#1,d0
000127EE 1140 001A                  		move.b	d0,obFrame(a0)
000127F2 3168 0008 0034             		move.w	obX(a0),fb_origX(a0)
000127F8 3168 000C 0030             		move.w	obY(a0),fb_origY(a0)
000127FE 7000                       		moveq	#0,d0
00012800 1012                       		move.b	(a2),d0
00012802 D040                       		add.w	d0,d0
00012804 3140 003A                  		move.w	d0,fb_height(a0)
00012808 0C28 0037 0028             			cmpi.b	#$37,obSubtype(a0)
0001280E 6600                       			bne.s	@dontdelete
00012810 0C68 1BB8 0008             			cmpi.w	#$1BB8,obX(a0)
00012816 6600                       			bne.s	@notatpos
00012818 4A38 F7CE                  			tst.b	($FFFFF7CE).w
0001281C 6700                       			beq.s	@dontdelete
0001281E 4EF9 0000 FACC             			jmp	(DeleteObject).l
00012824                            	@notatpos:
00012824 4228 0028                  			clr.b	obSubtype(a0)
00012828 4A38 F7CE                  			tst.b	($FFFFF7CE).w
0001282C 6600                       			bne.s	@dontdelete
0001282E 4EF9 0000 FACC             			jmp	(DeleteObject).l
00012834                            	@dontdelete:
00012834 7000                       		moveq	#0,d0
00012836 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w ; check if level is LZ
0001283C 6700                       		beq.s	@stillnotLZ
0001283E 1028 0028                  		move.b	obSubtype(a0),d0 ; SYZ/SLZ specific code
00012842 0240 000F                  		andi.w	#$F,d0
00012846 5140                       		subq.w	#8,d0
00012848 6500                       		bcs.s	@stillnotLZ
0001284A E548                       		lsl.w	#2,d0
0001284C 45F8 FE8A                  		lea	(v_oscillate+$2C).w,a2
00012850 45F2 0000                  		lea	(a2,d0.w),a2
00012854 4A52                       		tst.w	(a2)
00012856 6A00                       		bpl.s	@stillnotLZ
00012858 0868 0000 0022             		bchg	#0,obStatus(a0)
0001285E                            
0001285E                            	@stillnotLZ:
0001285E 1028 0028                  		move.b	obSubtype(a0),d0
00012862 6A00                       		bpl.s	FBlock_Action
00012864 0200 000F                  		andi.b	#$F,d0
00012868 1140 003C                  		move.b	d0,fb_type(a0)
0001286C 117C 0005 0028             		move.b	#5,obSubtype(a0)
00012872 0C28 0007 001A             		cmpi.b	#7,obFrame(a0)
00012878 6600                       		bne.s	@chkstate
0001287A 117C 000C 0028             		move.b	#$C,obSubtype(a0)
00012880 317C 0080 003A             		move.w	#$80,fb_height(a0)
00012886                            
00012886                            @chkstate:
00012886 45F8 FC00                  		lea	(v_objstate).w,a2
0001288A 7000                       		moveq	#0,d0
0001288C 1028 0023                  		move.b	obRespawnNo(a0),d0
00012890 6700                       		beq.s	FBlock_Action
00012892 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00012898 0832 0000 0002             		btst	#0,2(a2,d0.w)
0001289E 6700                       		beq.s	FBlock_Action
000128A0 5228 0028                  		addq.b	#1,obSubtype(a0)
000128A4 4268 003A                  		clr.w	fb_height(a0)
000128A8                            
000128A8                            FBlock_Action:	; Routine 2
000128A8 3F28 0008                  		move.w	obX(a0),-(sp)
000128AC 7000                       		moveq	#0,d0
000128AE 1028 0028                  		move.b	obSubtype(a0),d0 ; get object subtype
000128B2 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
000128B6 D040                       		add.w	d0,d0
000128B8 323B 0000                  		move.w	@index(pc,d0.w),d1
000128BC 4EBB 1000                  		jsr	@index(pc,d1.w)	; move block subroutines
000128C0 381F                       		move.w	(sp)+,d4
000128C2 4A28 0001                  		tst.b	obRender(a0)
000128C6 6A00                       		bpl.s	@chkdel
000128C8 7200                       		moveq	#0,d1
000128CA 1228 0014                  		move.b	obActWid(a0),d1
000128CE 0641 000B                  		addi.w	#$B,d1
000128D2 7400                       		moveq	#0,d2
000128D4 1428 0016                  		move.b	obHeight(a0),d2
000128D8 3602                       		move.w	d2,d3
000128DA 5243                       		addq.w	#1,d3
000128DC 6100 F5D0                  		bsr.w	SolidObject
000128E0                            
000128E0                            	@chkdel:
000128FC                            		@display:
000128FC 6000 D18E                  			bra.w	DisplaySprite
00012900                            		@chkdel2:
00012900 0C28 0037 0028             			cmpi.b	#$37,obSubtype(a0)
00012906 6600                       			bne.s	@delete
00012908 4A28 0038                  			tst.b	$38(a0)
0001290C 66EE                       			bne.s	@display
0001290E                            		@delete:
0001290E 4EF9 0000 FACC             			jmp	(DeleteObject).l
00012914                            ; ===========================================================================
00012914 0000 0000                  @index:		dc.w @type00-@index, @type01-@index
00012918 0000 0000                  		dc.w @type02-@index, @type03-@index
0001291C 0000 0000                  		dc.w @type04-@index, @type05-@index
00012920 0000 0000                  		dc.w @type06-@index, @type07-@index
00012924 0000 0000                  		dc.w @type08-@index, @type09-@index
00012928 0000 0000                  		dc.w @type0A-@index, @type0B-@index
0001292C 0000 0000                  		dc.w @type0C-@index, @type0D-@index
00012930                            ; ===========================================================================
00012930                            
00012930                            @type00:
00012930                            ; doesn't move
00012930 4E75                       		rts	
00012932                            ; ===========================================================================
00012932                            
00012932                            @type01:
00012932                            ; moves side-to-side
00012932 323C 0040                  		move.w	#$40,d1		; set move distance
00012936 7000                       		moveq	#0,d0
00012938 1038 FE68                  		move.b	(v_oscillate+$A).w,d0
0001293C 6000                       		bra.s	@moveLR
0001293E                            ; ===========================================================================
0001293E                            
0001293E                            @type02:
0001293E                            ; moves side-to-side
0001293E 323C 0080                  		move.w	#$80,d1		; set move distance
00012942 7000                       		moveq	#0,d0
00012944 1038 FE7C                  		move.b	(v_oscillate+$1E).w,d0
00012948                            
00012948                            	@moveLR:
00012948 0828 0000 0022             		btst	#0,obStatus(a0)
0001294E 6700                       		beq.s	@noflip
00012950 4440                       		neg.w	d0
00012952 D041                       		add.w	d1,d0
00012954                            
00012954                            	@noflip:
00012954 3228 0034                  		move.w	fb_origX(a0),d1
00012958 9240                       		sub.w	d0,d1
0001295A 3141 0008                  		move.w	d1,obX(a0)	; move object horizontally
0001295E 4E75                       		rts	
00012960                            ; ===========================================================================
00012960                            
00012960                            @type03:
00012960                            ; moves up/down
00012960 323C 0040                  		move.w	#$40,d1		; set move distance
00012964 7000                       		moveq	#0,d0
00012966 1038 FE68                  		move.b	(v_oscillate+$A).w,d0
0001296A 6000                       		bra.s	@moveUD
0001296C                            ; ===========================================================================
0001296C                            
0001296C                            @type04:
0001296C                            ; moves up/down
0001296C 323C 0080                  		move.w	#$80,d1		; set move distance
00012970 7000                       		moveq	#0,d0
00012972 1038 FE7C                  		move.b	(v_oscillate+$1E).w,d0
00012976                            
00012976                            	@moveUD:
00012976 0828 0000 0022             		btst	#0,obStatus(a0)
0001297C 6700                       		beq.s	@noflip04
0001297E 4440                       		neg.w	d0
00012980 D041                       		add.w	d1,d0
00012982                            
00012982                            	@noflip04:
00012982 3228 0030                  		move.w	fb_origY(a0),d1
00012986 9240                       		sub.w	d0,d1
00012988 3141 000C                  		move.w	d1,obY(a0)	; move object vertically
0001298C 4E75                       		rts	
0001298E                            ; ===========================================================================
0001298E                            
0001298E                            @type05:
0001298E                            ; moves up when a switch is pressed
0001298E 4A28 0038                  		tst.b	$38(a0)
00012992 6600                       		bne.s	@loc_104A4
00012994 0C78 0100 FE10             		cmpi.w	#(id_LZ<<8)+0,(v_zone).w ; is level LZ1 ?
0001299A 6600                       		bne.s	@aaa		; if not, branch
0001299C 0C28 0003 003C             		cmpi.b	#3,fb_type(a0)
000129A2 6600                       		bne.s	@aaa
000129A4 4238 F7C9                  		clr.b	(f_wtunnelallow).w
000129A8 3038 D008                  		move.w	(v_player+obX).w,d0
000129AC B068 0008                  		cmp.w	obX(a0),d0
000129B0 6400                       		bcc.s	@aaa
000129B2 11FC 0001 F7C9             		move.b	#1,(f_wtunnelallow).w
000129B8                            
000129B8                            	@aaa:
000129B8 45F8 F7E0                  		lea	(f_switch).w,a2
000129BC 7000                       		moveq	#0,d0
000129BE 1028 003C                  		move.b	fb_type(a0),d0
000129C2 0832 0000 0000             		btst	#0,(a2,d0.w)
000129C8 6700                       		beq.s	@loc_104AE
000129CA 0C78 0100 FE10             		cmpi.w	#(id_LZ<<8)+0,(v_zone).w ; is level LZ1 ?
000129D0 6600                       		bne.s	@loc_1049E	; if not, branch
000129D2 0C00 0003                  		cmpi.b	#3,d0
000129D6 6600                       		bne.s	@loc_1049E
000129D8 4238 F7C9                  		clr.b	(f_wtunnelallow).w
000129DC                            
000129DC                            @loc_1049E:
000129DC 117C 0001 0038             		move.b	#1,$38(a0)
000129E2                            
000129E2                            @loc_104A4:
000129E2 4A68 003A                  		tst.w	fb_height(a0)
000129E6 6700                       		beq.s	@loc_104C8
000129E8 5568 003A                  		subq.w	#2,fb_height(a0)
000129EC                            
000129EC                            @loc_104AE:
000129EC 3028 003A                  		move.w	fb_height(a0),d0
000129F0 0828 0000 0022             		btst	#0,$22(a0)
000129F6 6700                       		beq.s	@loc_104BC
000129F8 4440                       		neg.w	d0
000129FA                            
000129FA                            @loc_104BC:
000129FA 3228 0030                  		move.w	fb_origY(a0),d1
000129FE D240                       		add.w	d0,d1
00012A00 3141 000C                  		move.w	d1,obY(a0)
00012A04 4E75                       		rts	
00012A06                            ; ===========================================================================
00012A06                            
00012A06                            @loc_104C8:
00012A06 5228 0028                  		addq.b	#1,$28(a0)
00012A0A 4228 0038                  		clr.b	$38(a0)
00012A0E 45F8 FC00                  		lea	(v_objstate).w,a2
00012A12 7000                       		moveq	#0,d0
00012A14 1028 0023                  		move.b	obRespawnNo(a0),d0
00012A18 67D2                       		beq.s	@loc_104AE
00012A1A 08F2 0000 0002             		bset	#0,2(a2,d0.w)
00012A20 60CA                       		bra.s	@loc_104AE
00012A22                            ; ===========================================================================
00012A22                            
00012A22                            @type06:
00012A22 4A28 0038                  		tst.b	$38(a0)
00012A26 6600                       		bne.s	@loc_10500
00012A28 45F8 F7E0                  		lea	(f_switch).w,a2
00012A2C 7000                       		moveq	#0,d0
00012A2E 1028 003C                  		move.b	fb_type(a0),d0
00012A32 4A32 0000                  		tst.b	(a2,d0.w)
00012A36 6A00                       		bpl.s	@loc_10512
00012A38 117C 0001 0038             		move.b	#1,$38(a0)
00012A3E                            
00012A3E                            @loc_10500:
00012A3E 7000                       		moveq	#0,d0
00012A40 1028 0016                  		move.b	obHeight(a0),d0
00012A44 D040                       		add.w	d0,d0
00012A46 B068 003A                  		cmp.w	fb_height(a0),d0
00012A4A 6700                       		beq.s	@loc_1052C
00012A4C 5468 003A                  		addq.w	#2,fb_height(a0)
00012A50                            
00012A50                            @loc_10512:
00012A50 3028 003A                  		move.w	fb_height(a0),d0
00012A54 0828 0000 0022             		btst	#0,obStatus(a0)
00012A5A 6700                       		beq.s	@loc_10520
00012A5C 4440                       		neg.w	d0
00012A5E                            
00012A5E                            @loc_10520:
00012A5E 3228 0030                  		move.w	fb_origY(a0),d1
00012A62 D240                       		add.w	d0,d1
00012A64 3141 000C                  		move.w	d1,obY(a0)
00012A68 4E75                       		rts	
00012A6A                            ; ===========================================================================
00012A6A                            
00012A6A                            @loc_1052C:
00012A6A 5328 0028                  		subq.b	#1,obSubtype(a0)
00012A6E 4228 0038                  		clr.b	$38(a0)
00012A72 45F8 FC00                  		lea	(v_objstate).w,a2
00012A76 7000                       		moveq	#0,d0
00012A78 1028 0023                  		move.b	obRespawnNo(a0),d0
00012A7C 67D2                       		beq.s	@loc_10512
00012A7E 08B2 0000 0002             		bclr	#0,2(a2,d0.w)
00012A84 60CA                       		bra.s	@loc_10512
00012A86                            ; ===========================================================================
00012A86                            
00012A86                            @type07:
00012A86 4A28 0038                  		tst.b	$38(a0)
00012A8A 6600                       		bne.s	@loc_1055E
00012A8C 4A38 F7EF                  		tst.b	(f_switch+$F).w	; has switch number $F been pressed?
00012A90 6700                       		beq.s	@locret_10578
00012A92 117C 0001 0038             		move.b	#1,$38(a0)
00012A98 4268 003A                  		clr.w	fb_height(a0)
00012A9C                            
00012A9C                            @loc_1055E:
00012A9C 5268 0008                  		addq.w	#1,obX(a0)
00012AA0 3168 0008 0034             		move.w	obX(a0),fb_origX(a0)
00012AA6 5268 003A                  		addq.w	#1,fb_height(a0)
00012AAA 0C68 0380 003A             		cmpi.w	#$380,fb_height(a0)
00012AB0 6600                       		bne.s	@locret_10578
00012AB2 11FC 0001 F7CE             			move.b	#1,($FFFFF7CE).w
00012AB8 4228 0038                  			clr.b	$38(a0)
00012ABC 4228 0028                  		clr.b	obSubtype(a0)
00012AC0                            
00012AC0                            @locret_10578:
00012AC0 4E75                       		rts	
00012AC2                            ; ===========================================================================
00012AC2                            
00012AC2                            @type0C:
00012AC2 4A28 0038                  		tst.b	$38(a0)
00012AC6 6600                       		bne.s	@loc_10598
00012AC8 45F8 F7E0                  		lea	(f_switch).w,a2
00012ACC 7000                       		moveq	#0,d0
00012ACE 1028 003C                  		move.b	fb_type(a0),d0
00012AD2 0832 0000 0000             		btst	#0,(a2,d0.w)
00012AD8 6700                       		beq.s	@loc_105A2
00012ADA 117C 0001 0038             		move.b	#1,$38(a0)
00012AE0                            
00012AE0                            @loc_10598:
00012AE0 4A68 003A                  		tst.w	fb_height(a0)
00012AE4 6700                       		beq.s	@loc_105C0
00012AE6 5568 003A                  		subq.w	#2,fb_height(a0)
00012AEA                            
00012AEA                            @loc_105A2:
00012AEA 3028 003A                  		move.w	fb_height(a0),d0
00012AEE 0828 0000 0022             		btst	#0,obStatus(a0)
00012AF4 6700                       		beq.s	@loc_105B4
00012AF6 4440                       		neg.w	d0
00012AF8 0640 0080                  		addi.w	#$80,d0
00012AFC                            
00012AFC                            @loc_105B4:
00012AFC 3228 0034                  		move.w	fb_origX(a0),d1
00012B00 D240                       		add.w	d0,d1
00012B02 3141 0008                  		move.w	d1,obX(a0)
00012B06 4E75                       		rts	
00012B08                            ; ===========================================================================
00012B08                            
00012B08                            @loc_105C0:
00012B08 5228 0028                  		addq.b	#1,obSubtype(a0)
00012B0C 4228 0038                  		clr.b	$38(a0)
00012B10 45F8 FC00                  		lea	(v_objstate).w,a2
00012B14 7000                       		moveq	#0,d0
00012B16 1028 0023                  		move.b	obRespawnNo(a0),d0
00012B1A 67CE                       		beq.s	@loc_105A2
00012B1C 08F2 0000 0002             		bset	#0,2(a2,d0.w)
00012B22 60C6                       		bra.s	@loc_105A2
00012B24                            ; ===========================================================================
00012B24                            
00012B24                            @type0D:
00012B24 4A28 0038                  		tst.b	$38(a0)
00012B28 6600                       		bne.s	@loc_105F8
00012B2A 45F8 F7E0                  		lea	(f_switch).w,a2
00012B2E 7000                       		moveq	#0,d0
00012B30 1028 003C                  		move.b	fb_type(a0),d0
00012B34 4A32 0000                  		tst.b	(a2,d0.w)
00012B38 6A00                       		bpl.s	@wtf
00012B3A 117C 0001 0038             		move.b	#1,$38(a0)
00012B40                            
00012B40                            @loc_105F8:
00012B40 303C 0080                  		move.w	#$80,d0
00012B44 B068 003A                  		cmp.w	fb_height(a0),d0
00012B48 6700                       		beq.s	@loc_10624
00012B4A 5468 003A                  		addq.w	#2,fb_height(a0)
00012B4E                            
00012B4E                            @wtf:
00012B4E 3028 003A                  		move.w	fb_height(a0),d0
00012B52 0828 0000 0022             		btst	#0,obStatus(a0)
00012B58 6700                       		beq.s	@loc_10618
00012B5A 4440                       		neg.w	d0
00012B5C 0640 0080                  		addi.w	#$80,d0
00012B60                            
00012B60                            @loc_10618:
00012B60 3228 0034                  		move.w	fb_origX(a0),d1
00012B64 D240                       		add.w	d0,d1
00012B66 3141 0008                  		move.w	d1,obX(a0)
00012B6A 4E75                       		rts	
00012B6C                            ; ===========================================================================
00012B6C                            
00012B6C                            @loc_10624:
00012B6C 5328 0028                  		subq.b	#1,obSubtype(a0)
00012B70 4228 0038                  		clr.b	$38(a0)
00012B74 45F8 FC00                  		lea	(v_objstate).w,a2
00012B78 7000                       		moveq	#0,d0
00012B7A 1028 0023                  		move.b	obRespawnNo(a0),d0
00012B7E 67CE                       		beq.s	@wtf
00012B80 08B2 0000 0002             		bclr	#0,2(a2,d0.w)
00012B86 60C6                       		bra.s	@wtf
00012B88                            ; ===========================================================================
00012B88                            
00012B88                            @type08:
00012B88 323C 0010                  		move.w	#$10,d1
00012B8C 7000                       		moveq	#0,d0
00012B8E 1038 FE88                  		move.b	(v_oscillate+$2A).w,d0
00012B92 E248                       		lsr.w	#1,d0
00012B94 3638 FE8A                  		move.w	(v_oscillate+$2C).w,d3
00012B98 6000                       		bra.s	@square
00012B9A                            ; ===========================================================================
00012B9A                            
00012B9A                            @type09:
00012B9A 323C 0030                  		move.w	#$30,d1
00012B9E 7000                       		moveq	#0,d0
00012BA0 1038 FE8C                  		move.b	(v_oscillate+$2E).w,d0
00012BA4 3638 FE8E                  		move.w	(v_oscillate+$30).w,d3
00012BA8 6000                       		bra.s	@square
00012BAA                            ; ===========================================================================
00012BAA                            
00012BAA                            @type0A:
00012BAA 323C 0050                  		move.w	#$50,d1
00012BAE 7000                       		moveq	#0,d0
00012BB0 1038 FE90                  		move.b	(v_oscillate+$32).w,d0
00012BB4 3638 FE92                  		move.w	(v_oscillate+$34).w,d3
00012BB8 6000                       		bra.s	@square
00012BBA                            ; ===========================================================================
00012BBA                            
00012BBA                            @type0B:
00012BBA 323C 0070                  		move.w	#$70,d1
00012BBE 7000                       		moveq	#0,d0
00012BC0 1038 FE94                  		move.b	(v_oscillate+$36).w,d0
00012BC4 3638 FE96                  		move.w	(v_oscillate+$38).w,d3
00012BC8                            
00012BC8                            @square:
00012BC8 4A43                       		tst.w	d3
00012BCA 6600                       		bne.s	@loc_1068E
00012BCC 5228 0022                  		addq.b	#1,obStatus(a0)
00012BD0 0228 0003 0022             		andi.b	#3,obStatus(a0)
00012BD6                            
00012BD6                            @loc_1068E:
00012BD6 1428 0022                  		move.b	obStatus(a0),d2
00012BDA 0202 0003                  		andi.b	#3,d2
00012BDE 6600                       		bne.s	@loc_106AE
00012BE0 9041                       		sub.w	d1,d0
00012BE2 D068 0034                  		add.w	fb_origX(a0),d0
00012BE6 3140 0008                  		move.w	d0,obX(a0)
00012BEA 4441                       		neg.w	d1
00012BEC D268 0030                  		add.w	fb_origY(a0),d1
00012BF0 3141 000C                  		move.w	d1,obY(a0)
00012BF4 4E75                       		rts	
00012BF6                            ; ===========================================================================
00012BF6                            
00012BF6                            @loc_106AE:
00012BF6 5302                       		subq.b	#1,d2
00012BF8 6600                       		bne.s	@loc_106CC
00012BFA 5341                       		subq.w	#1,d1
00012BFC 9041                       		sub.w	d1,d0
00012BFE 4440                       		neg.w	d0
00012C00 D068 0030                  		add.w	fb_origY(a0),d0
00012C04 3140 000C                  		move.w	d0,obY(a0)
00012C08 5241                       		addq.w	#1,d1
00012C0A D268 0034                  		add.w	fb_origX(a0),d1
00012C0E 3141 0008                  		move.w	d1,obX(a0)
00012C12 4E75                       		rts	
00012C14                            ; ===========================================================================
00012C14                            
00012C14                            @loc_106CC:
00012C14 5302                       		subq.b	#1,d2
00012C16 6600                       		bne.s	@loc_106EA
00012C18 5341                       		subq.w	#1,d1
00012C1A 9041                       		sub.w	d1,d0
00012C1C 4440                       		neg.w	d0
00012C1E D068 0034                  		add.w	fb_origX(a0),d0
00012C22 3140 0008                  		move.w	d0,obX(a0)
00012C26 5241                       		addq.w	#1,d1
00012C28 D268 0030                  		add.w	fb_origY(a0),d1
00012C2C 3141 000C                  		move.w	d1,obY(a0)
00012C30 4E75                       		rts	
00012C32                            ; ===========================================================================
00012C32                            
00012C32                            @loc_106EA:
00012C32 9041                       		sub.w	d1,d0
00012C34 D068 0030                  		add.w	fb_origY(a0),d0
00012C38 3140 000C                  		move.w	d0,obY(a0)
00012C3C 4441                       		neg.w	d1
00012C3E D268 0034                  		add.w	fb_origX(a0),d1
00012C42 3141 0008                  		move.w	d1,obX(a0)
00012C46 4E75                       		rts	
00012C46 4E75                       		rts	
00012C48                            Map_FBlock:	include	"_maps\Floating Blocks and Doors.asm"
00012C48                            ; ---------------------------------------------------------------------------
00012C48                            ; Sprite mappings - moving blocks (SYZ/SLZ/LZ)
00012C48                            ; ---------------------------------------------------------------------------
00012C48                            Map_FBlock_internal:
00012C48 0000                       		dc.w @syz1x1-Map_FBlock_internal
00012C4A 0000                       		dc.w @syz2x2-Map_FBlock_internal
00012C4C 0000                       		dc.w @syz1x2-Map_FBlock_internal
00012C4E 0000                       		dc.w @syzrect2x2-Map_FBlock_internal
00012C50 0000                       		dc.w @syzrect1x3-Map_FBlock_internal
00012C52 0000                       		dc.w @slz-Map_FBlock_internal
00012C54 0000                       		dc.w @lzvert-Map_FBlock_internal
00012C56 0000                       		dc.w @lzhoriz-Map_FBlock_internal
00012C58 01                         @syz1x1:	dc.b 1
00012C59 F00F 0061 F0               		dc.b $F0, $F, 0, $61, $F0 ; SYZ - 1x1 square block
00012C5E 04                         @syz2x2:	dc.b 4
00012C5F E00F 0061 E0               		dc.b $E0, $F, 0, $61, $E0 ; SYZ - 2x2 square blocks
00012C64 E00F 0061 00               		dc.b $E0, $F, 0, $61, 0
00012C69 000F 0061 E0               		dc.b 0,	$F, 0, $61, $E0
00012C6E 000F 0061 00               		dc.b 0,	$F, 0, $61, 0
00012C73 02                         @syz1x2:	dc.b 2
00012C74 E00F 0061 F0               		dc.b $E0, $F, 0, $61, $F0 ; SYZ - 1x2 square blocks
00012C79 000F 0061 F0               		dc.b 0,	$F, 0, $61, $F0
00012C7E 04                         @syzrect2x2:	dc.b 4
00012C7F E60F 0081 E0               		dc.b $E6, $F, 0, $81, $E0 ; SYZ - 2x2 rectangular blocks
00012C84 E60F 0081 00               		dc.b $E6, $F, 0, $81, 0
00012C89 000F 0081 E0               		dc.b 0,	$F, 0, $81, $E0
00012C8E 000F 0081 00               		dc.b 0,	$F, 0, $81, 0
00012C93 03                         @syzrect1x3:	dc.b 3
00012C94 D90F 0081 F0               		dc.b $D9, $F, 0, $81, $F0 ; SYZ - 1x3 rectangular blocks
00012C99 F30F 0081 F0               		dc.b $F3, $F, 0, $81, $F0
00012C9E 0D0F 0081 F0               		dc.b $D, $F, 0,	$81, $F0
00012CA3 01                         @slz:		dc.b 1
00012CA4 F00F 0021 F0               		dc.b $F0, $F, 0, $21, $F0 ; SLZ - 1x1 square block
00012CA9 02                         @lzvert:	dc.b 2
00012CAA E007 0000 F8               		dc.b $E0, 7, 0,	0, $F8	; LZ - small vertical door
00012CAF 0007 1000 F8               		dc.b 0,	7, $10,	0, $F8
00012CB4 04                         @lzhoriz:	dc.b 4
00012CB5 F00F 0022 C0               		dc.b $F0, $F, 0, $22, $C0 ; LZ - large horizontal door
00012CBA F00F 0022 E0               		dc.b $F0, $F, 0, $22, $E0
00012CBF F00F 0022 00               		dc.b $F0, $F, 0, $22, 0
00012CC4 F00F 0022 20               		dc.b $F0, $F, 0, $22, $20
00012CCA 00                         		even
00012CCA 00                         		even
00012CCA                            
00012CCA                            		include	"_incObj\57 Spiked Ball and Chain.asm"
00012CCA                            ; ---------------------------------------------------------------------------
00012CCA                            ; Object 57 - spiked balls (SYZ, LZ)
00012CCA                            ; ---------------------------------------------------------------------------
00012CCA                            
00012CCA                            SpikeBall:
00012CCA 7000                       		moveq	#0,d0
00012CCC 1028 0024                  		move.b	obRoutine(a0),d0
00012CD0 323B 0000                  		move.w	SBall_Index(pc,d0.w),d1
00012CD4 4EFB 1000                  		jmp	SBall_Index(pc,d1.w)
00012CD8                            ; ===========================================================================
00012CD8 0000                       SBall_Index:	dc.w SBall_Main-SBall_Index
00012CDA 0000                       		dc.w SBall_Move-SBall_Index
00012CDC 0000                       		dc.w SBall_Display-SBall_Index
00012CDE                            
00012CDE =00000029                  sball_childs:	equ $29		; number of child objects (1 byte)
00012CDE                            		; $30-$37	; object RAM numbers of childs (1 byte each)
00012CDE =0000003A                  sball_origX:	equ $3A		; centre x-axis position (2 bytes)
00012CDE =00000038                  sball_origY:	equ $38		; centre y-axis position (2 bytes)
00012CDE =0000003C                  sball_radius:	equ $3C		; radius (1 byte)
00012CDE =0000003E                  sball_speed:	equ $3E		; rate of spin (2 bytes)
00012CDE                            ; ===========================================================================
00012CDE                            
00012CDE                            SBall_Main:	; Routine 0
00012CDE 5428 0024                  		addq.b	#2,obRoutine(a0)
00012CE2 217C 0000 0000 0004        		move.l	#Map_SBall,obMap(a0)
00012CEA 317C 03BA 0002             		move.w	#$3BA,obGfx(a0)
00012CF0 117C 0004 0001             		move.b	#4,obRender(a0)
00012CF6 317C 0200 0018             		move.w	#$200,obPriority(a0)
00012CFC 117C 0008 0014             		move.b	#8,obActWid(a0)
00012D02 3168 0008 003A             		move.w	obX(a0),sball_origX(a0)
00012D08 3168 000C 0038             		move.w	obY(a0),sball_origY(a0)
00012D0E 117C 0098 0020             		move.b	#$98,obColType(a0) ; SYZ specific code (chain hurts Sonic)
00012D14 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w ; check if level is LZ
00012D1A 6600                       		bne.s	@notlz
00012D1C                            
00012D1C 117C 0000 0020             		move.b	#0,obColType(a0) ; LZ specific code (chain doesn't hurt)
00012D22 317C 0310 0002             		move.w	#$310,obGfx(a0)
00012D28 217C 0000 0000 0004        		move.l	#Map_SBall2,obMap(a0)
00012D30                            
00012D30                            	@notlz:
00012D30 1228 0028                  		move.b	obSubtype(a0),d1 ; get object type
00012D34 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
00012D38 4881                       		ext.w	d1
00012D3A E741                       		asl.w	#3,d1		; multiply by 8
00012D3C 3141 003E                  		move.w	d1,sball_speed(a0) ; set object twirl speed
00012D40 1028 0022                  		move.b	obStatus(a0),d0
00012D44 E418                       		ror.b	#2,d0
00012D46 0200 00C0                  		andi.b	#$C0,d0
00012D4A 1140 0026                  		move.b	d0,obAngle(a0)
00012D4E 45E8 0029                  		lea	sball_childs(a0),a2
00012D52 1228 0028                  		move.b	obSubtype(a0),d1 ; get object type
00012D56 0241 0007                  		andi.w	#7,d1		; read only the	2nd digit
00012D5A 14FC 0000                  		move.b	#0,(a2)+
00012D5E 3601                       		move.w	d1,d3
00012D60 E94B                       		lsl.w	#4,d3
00012D62 1143 003C                  		move.b	d3,sball_radius(a0)
00012D66 5341                       		subq.w	#1,d1		; set chain length (type-1)
00012D68 6500                       		bcs.s	@fail
00012D6A 0828 0003 0028             		btst	#3,obSubtype(a0)
00012D70 6700                       		beq.s	@makechain
00012D72 5341                       		subq.w	#1,d1
00012D74 6500                       		bcs.s	@fail
00012D76                            
00012D76                            @makechain:
00012D76 6100 D1A0                  		bsr.w	FindFreeObj
00012D7A 6600                       		bne.s	@fail
00012D7C 5228 0029                  		addq.b	#1,sball_childs(a0) ; increment child object counter
00012D80 3A09                       		move.w	a1,d5		; get child object RAM address
00012D82 0445 D000                  		subi.w	#$D000,d5	; subtract $D000
00012D86 EC4D                       		lsr.w	#6,d5		; divide by $40
00012D88 0245 007F                  		andi.w	#$7F,d5
00012D8C 14C5                       		move.b	d5,(a2)+	; copy child RAM number
00012D8E 137C 0004 0024             		move.b	#4,obRoutine(a1)
00012D94 1290                       		move.b	0(a0),0(a1)
00012D96 2368 0004 0004             		move.l	obMap(a0),obMap(a1)
00012D9C 3368 0002 0002             		move.w	obGfx(a0),obGfx(a1)
00012DA2 1368 0001 0001             		move.b	obRender(a0),obRender(a1)
00012DA8 3368 0018 0018             		move.w	obPriority(a0),obPriority(a1)
00012DAE 1368 0014 0014             		move.b	obActWid(a0),obActWid(a1)
00012DB4 1368 0020 0020             		move.b	obColType(a0),obColType(a1)
00012DBA 0403 0010                  		subi.b	#$10,d3
00012DBE 1343 003C                  		move.b	d3,sball_radius(a1)
00012DC2 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w ; check if level is LZ
00012DC8 6600                       		bne.s	@notlzagain
00012DCA                            
00012DCA 4A03                       		tst.b	d3
00012DCC 6600                       		bne.s	@notlzagain
00012DCE 137C 0002 001A             		move.b	#2,obFrame(a1)	; use different frame for LZ chain
00012DD4                            
00012DD4                            	@notlzagain:
00012DD4 51C9 FFA0                  		dbf	d1,@makechain ; repeat for length of chain
00012DD8                            
00012DD8                            	@fail:
00012DD8 3A08                       		move.w	a0,d5
00012DDA 0445 D000                  		subi.w	#$D000,d5
00012DDE EC4D                       		lsr.w	#6,d5
00012DE0 0245 007F                  		andi.w	#$7F,d5
00012DE4 14C5                       		move.b	d5,(a2)+
00012DE6 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w ; check if level is LZ
00012DEC 6600                       		bne.s	SBall_Move
00012DEE                            
00012DEE 117C 008B 0020             		move.b	#$8B,obColType(a0) ; if yes, make last spikeball larger
00012DF4 117C 0001 001A             		move.b	#1,obFrame(a0)	; use different	frame
00012DFA                            
00012DFA                            SBall_Move:	; Routine 2
00012DFA 6100 0000                  		bsr.w	@movesub
00012DFE 6000 0000                  		bra.w	@chkdel
00012E02                            ; ===========================================================================
00012E02                            
00012E02                            @movesub:
00012E02 3028 003E                  		move.w	sball_speed(a0),d0
00012E06 D168 0026                  		add.w	d0,obAngle(a0)
00012E0A 1028 0026                  		move.b	obAngle(a0),d0
00012E0E 4EB9 0000 3A82             		jsr	(CalcSine).l
00012E14 3428 0038                  		move.w	sball_origY(a0),d2
00012E18 3628 003A                  		move.w	sball_origX(a0),d3
00012E1C 45E8 0029                  		lea	sball_childs(a0),a2
00012E20 7C00                       		moveq	#0,d6
00012E22 1C1A                       		move.b	(a2)+,d6
00012E24                            
00012E24                            	@loop:
00012E24 7800                       		moveq	#0,d4
00012E26 181A                       		move.b	(a2)+,d4
00012E28 ED4C                       		lsl.w	#6,d4
00012E2A 0684 00FF D000             		addi.l	#v_objspace&$FFFFFF,d4
00012E30 2244                       		movea.l	d4,a1
00012E32 7800                       		moveq	#0,d4
00012E34 1829 003C                  		move.b	sball_radius(a1),d4
00012E38 2A04                       		move.l	d4,d5
00012E3A C9C0                       		muls.w	d0,d4
00012E3C E084                       		asr.l	#8,d4
00012E3E CBC1                       		muls.w	d1,d5
00012E40 E085                       		asr.l	#8,d5
00012E42 D842                       		add.w	d2,d4
00012E44 DA43                       		add.w	d3,d5
00012E46 3344 000C                  		move.w	d4,obY(a1)
00012E4A 3345 0008                  		move.w	d5,obX(a1)
00012E4E 51CE FFD4                  		dbf	d6,@loop
00012E52 4E75                       		rts	
00012E54                            ; ===========================================================================
00012E54                            
00012E54                            @chkdel:
00012E72 6000 CC18                  		bra.w	DisplaySprite
00012E76                            ; ===========================================================================
00012E76                            
00012E76                            @delete:
00012E76 7400                       		moveq	#0,d2
00012E78 45E8 0029                  		lea	sball_childs(a0),a2
00012E7C 141A                       		move.b	(a2)+,d2
00012E7E                            
00012E7E                            	@deleteloop:
00012E7E 7000                       		moveq	#0,d0
00012E80 101A                       		move.b	(a2)+,d0
00012E82 ED48                       		lsl.w	#6,d0
00012E84 0680 00FF D000             		addi.l	#v_objspace&$FFFFFF,d0
00012E8A 2240                       		movea.l	d0,a1
00012E8C 6100 CC40                  		bsr.w	DeleteChild
00012E90 51CA FFEC                  		dbf	d2,@deleteloop ; delete all pieces of	chain
00012E94                            
00012E94 4E75                       		rts	
00012E96                            ; ===========================================================================
00012E96                            
00012E96                            SBall_Display:	; Routine 4
00012E96 6000 CBF4                  		bra.w	DisplaySprite
00012E96 6000 CBF4                  		bra.w	DisplaySprite
00012E9A                            Map_SBall:	include	"_maps\Spiked Ball and Chain (SYZ).asm"
00012E9A                            ; ---------------------------------------------------------------------------
00012E9A                            ; Sprite mappings - chain of spiked balls (SYZ)
00012E9A                            ; ---------------------------------------------------------------------------
00012E9A                            Map_SBall_internal:
00012E9A 0000                       		dc.w @0-Map_SBall_internal
00012E9C 01                         @0:		dc.b 1
00012E9D F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00012EA2                            		even
00012EA2                            		even
00012EA2                            Map_SBall2:	include	"_maps\Spiked Ball and Chain (LZ).asm"
00012EA2                            ; ---------------------------------------------------------------------------
00012EA2                            ; Sprite mappings - spiked ball	on a chain (LZ)
00012EA2                            ; ---------------------------------------------------------------------------
00012EA2                            Map_SBall2_internal:
00012EA2 0000                       		dc.w @chain-Map_SBall2_internal
00012EA4 0000                       		dc.w @spikeball-Map_SBall2_internal
00012EA6 0000                       		dc.w @base-Map_SBall2_internal
00012EA8 01                         @chain:		dc.b 1
00012EA9 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8	; chain link
00012EAE 01                         @spikeball:	dc.b 1
00012EAF F00F 0004 F0               		dc.b $F0, $F, 0, 4, $F0	; spikeball
00012EB4 01                         @base:		dc.b 1
00012EB5 F805 0014 F8               		dc.b $F8, 5, 0,	$14, $F8 ; wall attachment
00012EBA                            		even
00012EBA                            		even
00012EBA                            		include	"_incObj\58 Big Spiked Ball.asm"
00012EBA                            ; ---------------------------------------------------------------------------
00012EBA                            ; Object 58 - giant spiked balls (SYZ)
00012EBA                            ; ---------------------------------------------------------------------------
00012EBA                            
00012EBA                            BigSpikeBall:
00012EBA 7000                       		moveq	#0,d0
00012EBC 1028 0024                  		move.b	obRoutine(a0),d0
00012EC0 323B 0000                  		move.w	BBall_Index(pc,d0.w),d1
00012EC4 4EFB 1000                  		jmp	BBall_Index(pc,d1.w)
00012EC8                            ; ===========================================================================
00012EC8 0000                       BBall_Index:	dc.w BBall_Main-BBall_Index
00012ECA 0000                       		dc.w BBall_Move-BBall_Index
00012ECC                            
00012ECC =0000003A                  bball_origX:	equ $3A		; original x-axis position
00012ECC =00000038                  bball_origY:	equ $38		; original y-axis position
00012ECC =0000003C                  bball_radius:	equ $3C		; radius of circle
00012ECC =0000003E                  bball_speed:	equ $3E		; speed
00012ECC                            ; ===========================================================================
00012ECC                            
00012ECC                            BBall_Main:	; Routine 0
00012ECC 5428 0024                  		addq.b	#2,obRoutine(a0)
00012ED0 217C 0000 0000 0004        		move.l	#Map_BBall,obMap(a0)
00012ED8 317C 0396 0002             		move.w	#$396,obGfx(a0)
00012EDE 117C 0004 0001             		move.b	#4,obRender(a0)
00012EE4 317C 0200 0018             		move.w	#$200,obPriority(a0)
00012EEA 117C 0018 0014             		move.b	#$18,obActWid(a0)
00012EF0 3168 0008 003A             		move.w	obX(a0),bball_origX(a0)
00012EF6 3168 000C 0038             		move.w	obY(a0),bball_origY(a0)
00012EFC 117C 0086 0020             		move.b	#$86,obColType(a0)
00012F02 1228 0028                  		move.b	obSubtype(a0),d1 ; get object type
00012F06 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
00012F0A 4881                       		ext.w	d1
00012F0C E741                       		asl.w	#3,d1		; multiply by 8
00012F0E 3141 003E                  		move.w	d1,bball_speed(a0) ; set object speed
00012F12 1028 0022                  		move.b	obStatus(a0),d0
00012F16 E418                       		ror.b	#2,d0
00012F18 0200 00C0                  		andi.b	#$C0,d0
00012F1C 1140 0026                  		move.b	d0,obAngle(a0)
00012F20 117C 0050 003C             		move.b	#$50,bball_radius(a0) ; set radius of circle motion
00012F26                            
00012F26                            BBall_Move:	; Routine 2
00012F26 7000                       		moveq	#0,d0
00012F28 1028 0028                  		move.b	obSubtype(a0),d0 ; get object type
00012F2C 0240 0007                  		andi.w	#7,d0		; read only the	2nd digit
00012F30 D040                       		add.w	d0,d0
00012F32 323B 0000                  		move.w	@index(pc,d0.w),d1
00012F36 4EBB 1000                  		jsr	@index(pc,d1.w)
00012F58 6000 CB32                  		bra.w	DisplaySprite
00012F5C                            ; ===========================================================================
00012F5C 0000                       @index:		dc.w @type00-@index
00012F5E 0000                       		dc.w @type01-@index
00012F60 0000                       		dc.w @type02-@index
00012F62 0000                       		dc.w @type03-@index
00012F64                            ; ===========================================================================
00012F64                            
00012F64                            @type00:
00012F64 4E75                       		rts	
00012F66                            ; ===========================================================================
00012F66                            
00012F66                            @type01:
00012F66 323C 0060                  		move.w	#$60,d1
00012F6A 7000                       		moveq	#0,d0
00012F6C 1038 FE6C                  		move.b	(v_oscillate+$E).w,d0
00012F70 0828 0000 0022             		btst	#0,obStatus(a0)
00012F76 6700                       		beq.s	@noflip1
00012F78 4440                       		neg.w	d0
00012F7A D041                       		add.w	d1,d0
00012F7C                            
00012F7C                            	@noflip1:
00012F7C 3228 003A                  		move.w	bball_origX(a0),d1
00012F80 9240                       		sub.w	d0,d1
00012F82 3141 0008                  		move.w	d1,obX(a0)	; move object horizontally
00012F86 4E75                       		rts	
00012F88                            ; ===========================================================================
00012F88                            
00012F88                            @type02:
00012F88 323C 0060                  		move.w	#$60,d1
00012F8C 7000                       		moveq	#0,d0
00012F8E 1038 FE6C                  		move.b	(v_oscillate+$E).w,d0
00012F92 0828 0000 0022             		btst	#0,obStatus(a0)
00012F98 6700                       		beq.s	@noflip2
00012F9A 4440                       		neg.w	d0
00012F9C 0640 0080                  		addi.w	#$80,d0
00012FA0                            
00012FA0                            	@noflip2:
00012FA0 3228 0038                  		move.w	bball_origY(a0),d1
00012FA4 9240                       		sub.w	d0,d1
00012FA6 3141 000C                  		move.w	d1,obY(a0)	; move object vertically
00012FAA 4E75                       		rts	
00012FAC                            ; ===========================================================================
00012FAC                            
00012FAC                            @type03:
00012FAC 3028 003E                  		move.w	bball_speed(a0),d0
00012FB0 D168 0026                  		add.w	d0,obAngle(a0)
00012FB4 1028 0026                  		move.b	obAngle(a0),d0
00012FB8 4EB9 0000 3A82             		jsr	(CalcSine).l
00012FBE 3428 0038                  		move.w	bball_origY(a0),d2
00012FC2 3628 003A                  		move.w	bball_origX(a0),d3
00012FC6 7800                       		moveq	#0,d4
00012FC8 1828 003C                  		move.b	bball_radius(a0),d4
00012FCC 2A04                       		move.l	d4,d5
00012FCE C9C0                       		muls.w	d0,d4
00012FD0 E084                       		asr.l	#8,d4
00012FD2 CBC1                       		muls.w	d1,d5
00012FD4 E085                       		asr.l	#8,d5
00012FD6 D842                       		add.w	d2,d4
00012FD8 DA43                       		add.w	d3,d5
00012FDA 3144 000C                  		move.w	d4,obY(a0)	; move object circularly
00012FDE 3145 0008                  		move.w	d5,obX(a0)
00012FE2 4E75                       		rts	
00012FE2 4E75                       		rts	
00012FE4                            Map_BBall:	include	"_maps\Big Spiked Ball.asm"
00012FE4                            ; --------------------------------------------------------------------------------
00012FE4                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
00012FE4                            ; --------------------------------------------------------------------------------
00012FE4                            
00012FE4                            SME_u_DKx:	
00012FE4 0000 0000                  		dc.w SME_u_DKx_6-SME_u_DKx, SME_u_DKx_20-SME_u_DKx	
00012FE8 0000                       		dc.w SME_u_DKx_26-SME_u_DKx	
00012FEA 05                         SME_u_DKx_6:	dc.b 5	
00012FEB E804 0000 F8               		dc.b $E8, 4, 0, 0, $F8	
00012FF0 F00F 0002 F0               		dc.b $F0, $F, 0, 2, $F0	
00012FF5 F801 0012 E8               		dc.b $F8, 1, 0, $12, $E8	
00012FFA F801 0014 10               		dc.b $F8, 1, 0, $14, $10	
00012FFF 1004 0016 F8               		dc.b $10, 4, 0, $16, $F8	
00013004 01                         SME_u_DKx_20:	dc.b 1	
00013005 F805 0020 F8               		dc.b $F8, 5, 0, $20, $F8	
0001300A 02                         SME_u_DKx_26:	dc.b 2	
0001300B F80D 0018 F0               		dc.b $F8, $D, 0, $18, $F0	
00013010 E80D 1018 F0               		dc.b $E8, $D, $10, $18, $F0	
00013016 00                         		even
00013016 00                         		even
00013016                            		include	"_incObj\59 SLZ Elevators.asm"
00013016                            ; ---------------------------------------------------------------------------
00013016                            ; Object 59 - platforms	that move when you stand on them (SLZ)
00013016                            ; ---------------------------------------------------------------------------
00013016                            
00013016                            Elevator:
00013016 7000                       		moveq	#0,d0
00013018 1028 0024                  		move.b	obRoutine(a0),d0
0001301C 323B 0000                  		move.w	Elev_Index(pc,d0.w),d1
00013020 4EBB 1000                  		jsr	Elev_Index(pc,d1.w)
00013042 6000 CA48                  		bra.w	DisplaySprite
00013046                            ; ===========================================================================
00013046 0000                       Elev_Index:	dc.w Elev_Main-Elev_Index
00013048 0000                       		dc.w Elev_Platform-Elev_Index
0001304A 0000                       		dc.w Elev_Action-Elev_Index
0001304C 0000                       		dc.w Elev_MakeMulti-Elev_Index
0001304E                            
0001304E =00000032                  elev_origX:	equ $32		; original x-axis position
0001304E =00000030                  elev_origY:	equ $30		; original y-axis position
0001304E =0000003C                  elev_dist:	equ $3C		; distance to move (2 bytes)
0001304E                            
0001304E 2800                       Elev_Var1:	dc.b $28, 0		; width, frame number
00013050                            
00013050 1001                       Elev_Var2:	dc.b $10, 1		; distance to move, action type
00013052 2001                       		dc.b $20, 1
00013054 3401                       		dc.b $34, 1
00013056 1003                       		dc.b $10, 3
00013058 2003                       		dc.b $20, 3
0001305A 3403                       		dc.b $34, 3
0001305C 1401                       		dc.b $14, 1
0001305E 2401                       		dc.b $24, 1
00013060 2C01                       		dc.b $2C, 1
00013062 1403                       		dc.b $14, 3
00013064 2403                       		dc.b $24, 3
00013066 2C03                       		dc.b $2C, 3
00013068 2005                       		dc.b $20, 5
0001306A 2007                       		dc.b $20, 7
0001306C 3009                       		dc.b $30, 9
0001306E                            ; ===========================================================================
0001306E                            
0001306E                            Elev_Main:	; Routine 0
0001306E 5428 0024                  		addq.b	#2,obRoutine(a0)
00013072 7000                       		moveq	#0,d0
00013074 1028 0028                  		move.b	obSubtype(a0),d0
00013078 6A00                       		bpl.s	@normal		; branch for types 00-7F
0001307A 5828 0024                  		addq.b	#4,obRoutine(a0) ; goto Elev_MakeMulti next
0001307E 0240 007F                  		andi.w	#$7F,d0
00013082 C0FC 0006                  		mulu.w	#6,d0
00013086 3140 003C                  		move.w	d0,elev_dist(a0)
0001308A 3140 003E                  		move.w	d0,$3E(a0)
0001308E 588F                       		addq.l	#4,sp
00013090 4E75                       		rts	
00013092                            ; ===========================================================================
00013092                            
00013092                            	@normal:
00013092 E648                       		lsr.w	#3,d0
00013094 0240 001E                  		andi.w	#$1E,d0
00013098 45FB 00B4                  		lea	Elev_Var1(pc,d0.w),a2
0001309C 115A 0014                  		move.b	(a2)+,obActWid(a0) ; set width
000130A0 115A 001A                  		move.b	(a2)+,obFrame(a0) ; set frame
000130A4 7000                       		moveq	#0,d0
000130A6 1028 0028                  		move.b	obSubtype(a0),d0
000130AA D040                       		add.w	d0,d0
000130AC 0240 001E                  		andi.w	#$1E,d0
000130B0 45FB 009E                  		lea	Elev_Var2(pc,d0.w),a2
000130B4 101A                       		move.b	(a2)+,d0
000130B6 E548                       		lsl.w	#2,d0
000130B8 3140 003C                  		move.w	d0,elev_dist(a0)	; set distance to move
000130BC 115A 0028                  		move.b	(a2)+,obSubtype(a0)	; set type
000130C0 217C 0000 0000 0004        		move.l	#Map_Elev,obMap(a0)
000130C8 317C 4000 0002             		move.w	#$4000,obGfx(a0)
000130CE 117C 0004 0001             		move.b	#4,obRender(a0)
000130D4 317C 0200 0018             		move.w	#$200,obPriority(a0)
000130DA 3168 0008 0032             		move.w	obX(a0),elev_origX(a0)
000130E0 3168 000C 0030             		move.w	obY(a0),elev_origY(a0)
000130E6                            
000130E6                            Elev_Platform:	; Routine 2
000130E6 7200                       		moveq	#0,d1
000130E8 1228 0014                  		move.b	obActWid(a0),d1
000130EC 4EB9 0000 9136             		jsr	(PlatformObject).l
000130F2 6000 0000                  		bra.w	Elev_Types
000130F6                            ; ===========================================================================
000130F6                            
000130F6                            Elev_Action:	; Routine 4
000130F6 7200                       		moveq	#0,d1
000130F8 1228 0014                  		move.b	obActWid(a0),d1
000130FC 4EB9 0000 92AA             		jsr	(ExitPlatform).l
00013102 3F28 0008                  		move.w	obX(a0),-(sp)
00013106 6100 0000                  		bsr.w	Elev_Types
0001310A 341F                       		move.w	(sp)+,d2
0001310C 4A10                       		tst.b	0(a0)
0001310E 6700                       		beq.s	@deleted
00013110 4EF9 0000 9814             		jmp	(MvSonicOnPtfm2).l
00013116                            
00013116                            	@deleted:
00013116 4E75                       		rts	
00013118                            ; ===========================================================================
00013118                            
00013118                            Elev_Types:
00013118 7000                       		moveq	#0,d0
0001311A 1028 0028                  		move.b	obSubtype(a0),d0
0001311E 0240 000F                  		andi.w	#$F,d0
00013122 D040                       		add.w	d0,d0
00013124 323B 0000                  		move.w	@index(pc,d0.w),d1
00013128 4EFB 1000                  		jmp	@index(pc,d1.w)
0001312C                            ; ===========================================================================
0001312C 0000 0000                  @index:		dc.w @type00-@index, @type01-@index
00013130 0000 0000                  		dc.w @type02-@index, @type01-@index
00013134 0000 0000                  		dc.w @type04-@index, @type01-@index
00013138 0000 0000                  		dc.w @type06-@index, @type01-@index
0001313C 0000 0000                  		dc.w @type08-@index, @type09-@index
00013140                            ; ===========================================================================
00013140                            
00013140                            @type00:
00013140 4E75                       		rts	
00013142                            ; ===========================================================================
00013142                            
00013142                            @type01:
00013142 0C28 0004 0024             		cmpi.b	#4,obRoutine(a0) ; check if Sonic is standing on the object
00013148 6600                       		bne.s	@notstanding
0001314A 5228 0028                  		addq.b	#1,obSubtype(a0) ; if yes, add 1 to type
0001314E                            
0001314E                            	@notstanding:
0001314E 4E75                       		rts	
00013150                            ; ===========================================================================
00013150                            
00013150                            @type02:
00013150 6100 0000                  		bsr.w	Elev_Move
00013154 3028 0034                  		move.w	$34(a0),d0
00013158 4440                       		neg.w	d0
0001315A D068 0030                  		add.w	elev_origY(a0),d0
0001315E 3140 000C                  		move.w	d0,obY(a0)
00013162 4E75                       		rts	
00013164                            ; ===========================================================================
00013164                            
00013164                            @type04:
00013164 6100 0000                  		bsr.w	Elev_Move
00013168 3028 0034                  		move.w	$34(a0),d0
0001316C D068 0030                  		add.w	elev_origY(a0),d0
00013170 3140 000C                  		move.w	d0,obY(a0)
00013174 4E75                       		rts	
00013176                            ; ===========================================================================
00013176                            
00013176                            @type06:
00013176 6100 0000                  		bsr.w	Elev_Move
0001317A 3028 0034                  		move.w	$34(a0),d0
0001317E E240                       		asr.w	#1,d0
00013180 4440                       		neg.w	d0
00013182 D068 0030                  		add.w	elev_origY(a0),d0
00013186 3140 000C                  		move.w	d0,obY(a0)
0001318A 3028 0034                  		move.w	$34(a0),d0
0001318E D068 0032                  		add.w	elev_origX(a0),d0
00013192 3140 0008                  		move.w	d0,obX(a0)
00013196 4E75                       		rts	
00013198                            ; ===========================================================================
00013198                            
00013198                            @type08:
00013198 6100 0000                  		bsr.w	Elev_Move
0001319C 3028 0034                  		move.w	$34(a0),d0
000131A0 E240                       		asr.w	#1,d0
000131A2 D068 0030                  		add.w	elev_origY(a0),d0
000131A6 3140 000C                  		move.w	d0,obY(a0)
000131AA 3028 0034                  		move.w	$34(a0),d0
000131AE 4440                       		neg.w	d0
000131B0 D068 0032                  		add.w	elev_origX(a0),d0
000131B4 3140 0008                  		move.w	d0,obX(a0)
000131B8 4E75                       		rts	
000131BA                            ; ===========================================================================
000131BA                            
000131BA                            @type09:
000131BA 6100 0000                  		bsr.w	Elev_Move
000131BE 3028 0034                  		move.w	$34(a0),d0
000131C2 4440                       		neg.w	d0
000131C4 D068 0030                  		add.w	elev_origY(a0),d0
000131C8 3140 000C                  		move.w	d0,obY(a0)
000131CC 4A28 0028                  		tst.b	obSubtype(a0)
000131D0 6700 0000                  		beq.w	@typereset
000131D4 4E75                       		rts	
000131D6                            ; ===========================================================================
000131D6                            
000131D6                            	@typereset:
000131D6 0828 0003 0022             		btst	#3,obStatus(a0)
000131DC 6700                       		beq.s	@delete
000131DE 08E9 0001 0022             		bset	#1,obStatus(a1)
000131E4 08A9 0003 0022             		bclr	#3,obStatus(a1)
000131EA 137C 0002 0024             		move.b	#2,obRoutine(a1)
000131F0                            
000131F0                            	@delete:
000131F0 6000 C8DA                  		bra.w	DeleteObject
000131F4                            
000131F4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000131F4                            
000131F4                            
000131F4                            Elev_Move:
000131F4 3028 0038                  		move.w	$38(a0),d0
000131F8 4A28 003A                  		tst.b	$3A(a0)
000131FC 6600                       		bne.s	loc_10CC8
000131FE 0C40 0800                  		cmpi.w	#$800,d0
00013202 6400                       		bcc.s	loc_10CD0
00013204 0640 0010                  		addi.w	#$10,d0
00013208 6000                       		bra.s	loc_10CD0
0001320A                            ; ===========================================================================
0001320A                            
0001320A                            loc_10CC8:
0001320A 4A40                       		tst.w	d0
0001320C 6700                       		beq.s	loc_10CD0
0001320E 0440 0010                  		subi.w	#$10,d0
00013212                            
00013212                            loc_10CD0:
00013212 3140 0038                  		move.w	d0,$38(a0)
00013216 48C0                       		ext.l	d0
00013218 E180                       		asl.l	#8,d0
0001321A D0A8 0034                  		add.l	$34(a0),d0
0001321E 2140 0034                  		move.l	d0,$34(a0)
00013222 4840                       		swap	d0
00013224 3428 003C                  		move.w	elev_dist(a0),d2
00013228 B042                       		cmp.w	d2,d0
0001322A 6300                       		bls.s	loc_10CF0
0001322C 117C 0001 003A             		move.b	#1,$3A(a0)
00013232                            
00013232                            loc_10CF0:
00013232 D442                       		add.w	d2,d2
00013234 B042                       		cmp.w	d2,d0
00013236 6600                       		bne.s	locret_10CFA
00013238 4228 0028                  		clr.b	obSubtype(a0)
0001323C                            
0001323C                            locret_10CFA:
0001323C 4E75                       		rts	
0001323E                            ; End of function Elev_Move
0001323E                            
0001323E                            ; ===========================================================================
0001323E                            
0001323E                            Elev_MakeMulti:	; Routine 6
0001323E 5368 003C                  		subq.w	#1,elev_dist(a0)
00013242 6600                       		bne.s	@chkdel
00013244 3168 003E 003C             		move.w	$3E(a0),elev_dist(a0)
0001324A 6100 CCCC                  		bsr.w	FindFreeObj
0001324E 6600                       		bne.s	@chkdel
00013250 12BC 0059                  		move.b	#id_Elevator,0(a1) ; duplicate the object
00013254 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001325A 3368 000C 000C             		move.w	obY(a0),obY(a1)
00013260 137C 000E 0028             		move.b	#$E,obSubtype(a1)
00013266                            
00013266                            @chkdel:
00013266 588F                       		addq.l	#4,sp
00013286 4E75                       		rts	
00013286 4E75                       		rts	
00013288                            Map_Elev:	include	"_maps\SLZ Elevators.asm"
00013288                            ; ---------------------------------------------------------------------------
00013288                            ; Sprite mappings - platforms that move	when you stand on them (SLZ)
00013288                            ; ---------------------------------------------------------------------------
00013288                            Map_Elev_internal:
00013288 0000                       		dc.w @elevator-Map_Elev_internal
0001328A 03                         @elevator:	dc.b 3
0001328B F80F 0041 D8               		dc.b $F8, $F, 0, $41, $D8
00013290 F80F 0041 F8               		dc.b $F8, $F, 0, $41, $F8
00013295 F807 0041 18               		dc.b $F8, 7, 0,	$41, $18
0001329A                            		even
0001329A                            		even
0001329A                            		include	"_incObj\5A SLZ Circling Platform.asm"
0001329A                            ; ---------------------------------------------------------------------------
0001329A                            ; Object 5A - platforms	moving in circles (SLZ)
0001329A                            ; ---------------------------------------------------------------------------
0001329A                            
0001329A                            CirclingPlatform:
0001329A 7000                       		moveq	#0,d0
0001329C 1028 0024                  		move.b	obRoutine(a0),d0
000132A0 323B 0000                  		move.w	Circ_Index(pc,d0.w),d1
000132A4 4EBB 1000                  		jsr	Circ_Index(pc,d1.w)
000132C6 6000 C7C4                  		bra.w	DisplaySprite
000132CA                            ; ===========================================================================
000132CA 0000                       Circ_Index:	dc.w Circ_Main-Circ_Index
000132CC 0000                       		dc.w Circ_Platform-Circ_Index
000132CE 0000                       		dc.w Circ_Action-Circ_Index
000132D0                            
000132D0 =00000032                  circ_origX:	equ $32		; original x-axis position
000132D0 =00000030                  circ_origY:	equ $30		; original y-axis position
000132D0                            ; ===========================================================================
000132D0                            
000132D0                            Circ_Main:	; Routine 0
000132D0 5428 0024                  		addq.b	#2,obRoutine(a0)
000132D4 217C 0000 0000 0004        		move.l	#Map_Circ,obMap(a0)
000132DC 317C 4000 0002             		move.w	#$4000,obGfx(a0)
000132E2 117C 0004 0001             		move.b	#4,obRender(a0)
000132E8 317C 0200 0018             		move.w	#$200,obPriority(a0)
000132EE 117C 0018 0014             		move.b	#$18,obActWid(a0)
000132F4 3168 0008 0032             		move.w	obX(a0),circ_origX(a0)
000132FA 3168 000C 0030             		move.w	obY(a0),circ_origY(a0)
00013300                            
00013300                            Circ_Platform:	; Routine 2
00013300 7200                       		moveq	#0,d1
00013302 1228 0014                  		move.b	obActWid(a0),d1
00013306 4EB9 0000 9136             		jsr	(PlatformObject).l
0001330C 6000 0000                  		bra.w	Circ_Types
00013310                            ; ===========================================================================
00013310                            
00013310                            Circ_Action:	; Routine 4
00013310 7200                       		moveq	#0,d1
00013312 1228 0014                  		move.b	obActWid(a0),d1
00013316 4EB9 0000 92AA             		jsr	(ExitPlatform).l
0001331C 3F28 0008                  		move.w	obX(a0),-(sp)
00013320 6100 0000                  		bsr.w	Circ_Types
00013324 341F                       		move.w	(sp)+,d2
00013326 4EF9 0000 9814             		jmp	(MvSonicOnPtfm2).l
0001332C                            ; ===========================================================================
0001332C                            
0001332C                            Circ_Types:
0001332C 7000                       		moveq	#0,d0
0001332E 1028 0028                  		move.b	obSubtype(a0),d0
00013332 0240 000C                  		andi.w	#$C,d0
00013336 E248                       		lsr.w	#1,d0
00013338 323B 0000                  		move.w	@index(pc,d0.w),d1
0001333C 4EFB 1000                  		jmp	@index(pc,d1.w)
00013340                            ; ===========================================================================
00013340 0000                       @index:		dc.w @type00-@index
00013342 0000                       		dc.w @type04-@index
00013344                            ; ===========================================================================
00013344                            
00013344                            @type00:
00013344 1238 FE80                  		move.b	(v_oscillate+$22).w,d1 ; get rotating value
00013348 0401 0050                  		subi.b	#$50,d1		; set radius of circle
0001334C 4881                       		ext.w	d1
0001334E 1438 FE84                  		move.b	(v_oscillate+$26).w,d2
00013352 0402 0050                  		subi.b	#$50,d2
00013356 4882                       		ext.w	d2
00013358 0828 0000 0028             		btst	#0,obSubtype(a0)
0001335E 6700                       		beq.s	@noshift00a
00013360 4441                       		neg.w	d1
00013362 4442                       		neg.w	d2
00013364                            
00013364                            	@noshift00a:
00013364 0828 0001 0028             		btst	#1,obSubtype(a0)
0001336A 6700                       		beq.s	@noshift00b
0001336C 4441                       		neg.w	d1
0001336E C342                       		exg	d1,d2
00013370                            
00013370                            	@noshift00b:
00013370 D268 0032                  		add.w	circ_origX(a0),d1
00013374 3141 0008                  		move.w	d1,obX(a0)
00013378 D468 0030                  		add.w	circ_origY(a0),d2
0001337C 3142 000C                  		move.w	d2,obY(a0)
00013380 4E75                       		rts	
00013382                            ; ===========================================================================
00013382                            
00013382                            @type04:
00013382 1238 FE80                  		move.b	(v_oscillate+$22).w,d1
00013386 0401 0050                  		subi.b	#$50,d1
0001338A 4881                       		ext.w	d1
0001338C 1438 FE84                  		move.b	(v_oscillate+$26).w,d2
00013390 0402 0050                  		subi.b	#$50,d2
00013394 4882                       		ext.w	d2
00013396 0828 0000 0028             		btst	#0,obSubtype(a0)
0001339C 6700                       		beq.s	@noshift04a
0001339E 4441                       		neg.w	d1
000133A0 4442                       		neg.w	d2
000133A2                            
000133A2                            	@noshift04a:
000133A2 0828 0001 0028             		btst	#1,obSubtype(a0)
000133A8 6700                       		beq.s	@noshift04b
000133AA 4441                       		neg.w	d1
000133AC C342                       		exg	d1,d2
000133AE                            
000133AE                            	@noshift04b:
000133AE 4441                       		neg.w	d1
000133B0 D268 0032                  		add.w	circ_origX(a0),d1
000133B4 3141 0008                  		move.w	d1,obX(a0)
000133B8 D468 0030                  		add.w	circ_origY(a0),d2
000133BC 3142 000C                  		move.w	d2,obY(a0)
000133C0 4E75                       		rts	
000133C0 4E75                       		rts	
000133C2                            Map_Circ:	include	"_maps\SLZ Circling Platform.asm"
000133C2                            ; ---------------------------------------------------------------------------
000133C2                            ; Sprite mappings - platforms that move	in circles (SLZ)
000133C2                            ; ---------------------------------------------------------------------------
000133C2                            Map_Circ_internal:
000133C2 0000                       		dc.w @platform-Map_Circ_internal
000133C4 02                         @platform:	dc.b 2
000133C5 F809 0051 E8               		dc.b $F8, 9, 0,	$51, $E8
000133CA F809 0851 00               		dc.b $F8, 9, 8,	$51, 0
000133D0 00                         		even
000133D0 00                         		even
000133D0                            		include	"_incObj\5B Staircase.asm"
000133D0                            ; ---------------------------------------------------------------------------
000133D0                            ; Object 5B - blocks that form a staircase (SLZ)
000133D0                            ; ---------------------------------------------------------------------------
000133D0                            
000133D0                            Staircase:
000133D0 7000                       		moveq	#0,d0
000133D2 1028 0024                  		move.b	obRoutine(a0),d0
000133D6 323B 0000                  		move.w	Stair_Index(pc,d0.w),d1
000133DA 4EBB 1000                  		jsr	Stair_Index(pc,d1.w)
000133FC 6000 C68E                  		bra.w	DisplaySprite
00013400                            ; ===========================================================================
00013400 0000                       Stair_Index:	dc.w Stair_Main-Stair_Index
00013402 0000                       		dc.w Stair_Move-Stair_Index
00013404 0000                       		dc.w Stair_Solid-Stair_Index
00013406                            
00013406 =00000030                  stair_origX:	equ $30		; original x-axis position
00013406 =00000032                  stair_origY:	equ $32		; original y-axis position
00013406                            
00013406 =0000003C                  stair_parent:	equ $3C		; address of parent object (4 bytes)
00013406                            ; ===========================================================================
00013406                            
00013406                            Stair_Main:	; Routine 0
00013406 5428 0024                  		addq.b	#2,obRoutine(a0)
0001340A 7638                       		moveq	#$38,d3
0001340C 7801                       		moveq	#1,d4
0001340E 0828 0000 0022             		btst	#0,obStatus(a0)	; is object flipped?
00013414 6700                       		beq.s	@notflipped	; if not, branch
00013416 763B                       		moveq	#$3B,d3
00013418 78FF                       		moveq	#-1,d4
0001341A                            
0001341A                            	@notflipped:
0001341A 3428 0008                  		move.w	obX(a0),d2
0001341E 2248                       		movea.l	a0,a1
00013420 7203                       		moveq	#3,d1
00013422 6000                       		bra.s	@makeblocks
00013424                            ; ===========================================================================
00013424                            
00013424                            @loop:
00013424 6100 CB08                  		bsr.w	FindNextFreeObj
00013428 6600 0000                  		bne.w	@fail
0001342C 137C 0004 0024             		move.b	#4,obRoutine(a1)
00013432                            
00013432                            @makeblocks:
00013432 12BC 005B                  		move.b	#id_Staircase,0(a1) ; load another block object
00013436 237C 0000 0000 0004        		move.l	#Map_Stair,obMap(a1)
0001343E 337C 4000 0002             		move.w	#$4000,obGfx(a1)
00013444 137C 0004 0001             		move.b	#4,obRender(a1)
0001344A 337C 0180 0018             		move.w	#$180,obPriority(a1)
00013450 137C 0010 0014             		move.b	#$10,obActWid(a1)
00013456 1368 0028 0028             		move.b	obSubtype(a0),obSubtype(a1)
0001345C 3342 0008                  		move.w	d2,obX(a1)
00013460 3368 000C 000C             		move.w	obY(a0),obY(a1)
00013466 3368 0008 0030             		move.w	obX(a0),stair_origX(a1)
0001346C 3369 000C 0032             		move.w	obY(a1),stair_origY(a1)
00013472 0642 0020                  		addi.w	#$20,d2
00013476 1343 0037                  		move.b	d3,$37(a1)
0001347A 2348 003C                  		move.l	a0,stair_parent(a1)
0001347E D604                       		add.b	d4,d3
00013480 51C9 FFA2                  		dbf	d1,@loop	; repeat sequence 3 times
00013484                            
00013484                            	@fail:
00013484                            
00013484                            Stair_Move:	; Routine 2
00013484 7000                       		moveq	#0,d0
00013486 1028 0028                  		move.b	obSubtype(a0),d0
0001348A 0240 0007                  		andi.w	#7,d0
0001348E D040                       		add.w	d0,d0
00013490 323B 0000                  		move.w	Stair_TypeIndex(pc,d0.w),d1
00013494 4EBB 1000                  		jsr	Stair_TypeIndex(pc,d1.w)
00013498                            
00013498                            Stair_Solid:	; Routine 4
00013498 2468 003C                  		movea.l	stair_parent(a0),a2
0001349C 7000                       		moveq	#0,d0
0001349E 1028 0037                  		move.b	$37(a0),d0
000134A2 1032 0000                  		move.b	(a2,d0.w),d0
000134A6 D068 0032                  		add.w	stair_origY(a0),d0
000134AA 3140 000C                  		move.w	d0,obY(a0)
000134AE 7200                       		moveq	#0,d1
000134B0 1228 0014                  		move.b	obActWid(a0),d1
000134B4 0641 000B                  		addi.w	#$B,d1
000134B8 343C 0010                  		move.w	#$10,d2
000134BC 363C 0011                  		move.w	#$11,d3
000134C0 3828 0008                  		move.w	obX(a0),d4
000134C4 6100 E9E8                  		bsr.w	SolidObject
000134C8 4A04                       		tst.b	d4
000134CA 6A00                       		bpl.s	loc_10F92
000134CC 1544 0036                  		move.b	d4,$36(a2)
000134D0                            
000134D0                            loc_10F92:
000134D0 0828 0003 0022             		btst	#3,obStatus(a0)
000134D6 6700                       		beq.s	locret_10FA0
000134D8 157C 0001 0036             		move.b	#1,$36(a2)
000134DE                            
000134DE                            locret_10FA0:
000134DE 4E75                       		rts	
000134E0                            ; ===========================================================================
000134E0 0000                       Stair_TypeIndex:dc.w Stair_Type00-Stair_TypeIndex
000134E2 0000                       		dc.w Stair_Type01-Stair_TypeIndex
000134E4 0000                       		dc.w Stair_Type02-Stair_TypeIndex
000134E6 0000                       		dc.w Stair_Type01-Stair_TypeIndex
000134E8                            ; ===========================================================================
000134E8                            
000134E8                            Stair_Type00:
000134E8 4A68 0034                  		tst.w	$34(a0)
000134EC 6600                       		bne.s	loc_10FC0
000134EE 0C28 0001 0036             		cmpi.b	#1,$36(a0)
000134F4 6600                       		bne.s	locret_10FBE
000134F6 317C 001E 0034             		move.w	#$1E,$34(a0)
000134FC                            
000134FC                            locret_10FBE:
000134FC 4E75                       		rts	
000134FE                            ; ===========================================================================
000134FE                            
000134FE                            loc_10FC0:
000134FE 5368 0034                  		subq.w	#1,$34(a0)
00013502 66F8                       		bne.s	locret_10FBE
00013504 5228 0028                  		addq.b	#1,obSubtype(a0) ; add 1 to type
00013508 4E75                       		rts	
0001350A                            ; ===========================================================================
0001350A                            
0001350A                            Stair_Type02:
0001350A 4A68 0034                  		tst.w	$34(a0)
0001350E 6600                       		bne.s	loc_10FE0
00013510 4A28 0036                  		tst.b	$36(a0)
00013514 6A00                       		bpl.s	locret_10FDE
00013516 317C 003C 0034             		move.w	#$3C,$34(a0)
0001351C                            
0001351C                            locret_10FDE:
0001351C 4E75                       		rts	
0001351E                            ; ===========================================================================
0001351E                            
0001351E                            loc_10FE0:
0001351E 5368 0034                  		subq.w	#1,$34(a0)
00013522 6600                       		bne.s	loc_10FEC
00013524 5228 0028                  		addq.b	#1,obSubtype(a0) ; add 1 to type
00013528 4E75                       		rts	
0001352A                            ; ===========================================================================
0001352A                            
0001352A                            loc_10FEC:
0001352A 43E8 0038                  		lea	$38(a0),a1
0001352E 3028 0034                  		move.w	$34(a0),d0
00013532 E408                       		lsr.b	#2,d0
00013534 0200 0001                  		andi.b	#1,d0
00013538 12C0                       		move.b	d0,(a1)+
0001353A 0A00 0001                  		eori.b	#1,d0
0001353E 12C0                       		move.b	d0,(a1)+
00013540 0A00 0001                  		eori.b	#1,d0
00013544 12C0                       		move.b	d0,(a1)+
00013546 0A00 0001                  		eori.b	#1,d0
0001354A 12C0                       		move.b	d0,(a1)+
0001354C 4E75                       		rts	
0001354E                            ; ===========================================================================
0001354E                            
0001354E                            Stair_Type01:
0001354E 43E8 0038                  		lea	$38(a0),a1
00013552 0C11 0080                  		cmpi.b	#$80,(a1)
00013556 6700                       		beq.s	locret_11038
00013558 5211                       		addq.b	#1,(a1)
0001355A 7200                       		moveq	#0,d1
0001355C 1219                       		move.b	(a1)+,d1
0001355E 4841                       		swap	d1
00013560 E289                       		lsr.l	#1,d1
00013562 2401                       		move.l	d1,d2
00013564 E289                       		lsr.l	#1,d1
00013566 2601                       		move.l	d1,d3
00013568 D682                       		add.l	d2,d3
0001356A 4841                       		swap	d1
0001356C 4842                       		swap	d2
0001356E 4843                       		swap	d3
00013570 12C3                       		move.b	d3,(a1)+
00013572 12C2                       		move.b	d2,(a1)+
00013574 12C1                       		move.b	d1,(a1)+
00013576                            
00013576                            locret_11038:
00013576 4E75                       		rts	
00013578 4E75                       		rts	
00013578 4E75                       		rts	
0001357A                            Map_Stair:	include	"_maps\Staircase.asm"
0001357A                            ; ---------------------------------------------------------------------------
0001357A                            ; Sprite mappings - blocks that	form a staircase (SLZ)
0001357A                            ; ---------------------------------------------------------------------------
0001357A                            Map_Stair_internal:
0001357A 0000                       		dc.w @block-Map_Stair_internal
0001357C 01                         @block:		dc.b 1
0001357D F00F 0021 F0               		dc.b $F0, $F, 0, $21, $F0
00013582                            		even
00013582                            		even
00013582                            		include	"_incObj\5C Pylon.asm"
00013582                            ; ---------------------------------------------------------------------------
00013582                            ; Object 5C - metal pylons in foreground (SLZ)
00013582                            ; ---------------------------------------------------------------------------
00013582                            
00013582                            Pylon:
00013582 7000                       		moveq	#0,d0
00013584 1028 0024                  		move.b	obRoutine(a0),d0
00013588 323B 0000                  		move.w	Pyl_Index(pc,d0.w),d1
0001358C 4EFB 1000                  		jmp	Pyl_Index(pc,d1.w)
00013590                            ; ===========================================================================
00013590 0000                       Pyl_Index:	dc.w Pyl_Main-Pyl_Index
00013592 0000                       		dc.w Pyl_Display-Pyl_Index
00013594                            ; ===========================================================================
00013594                            
00013594                            Pyl_Main:	; Routine 0
00013594 5428 0024                  		addq.b	#2,obRoutine(a0)
00013598 217C 0000 0000 0004        		move.l	#Map_Pylon,obMap(a0)
000135A0 317C 83CC 0002             		move.w	#$83CC,obGfx(a0)
000135A6 117C 0010 0014             		move.b	#$10,obActWid(a0)
000135AC                            
000135AC                            Pyl_Display:	; Routine 2
000135AC 2238 F700                  		move.l	(v_screenposx).w,d1
000135B0 D281                       		add.l	d1,d1
000135B2 4841                       		swap	d1
000135B4 4441                       		neg.w	d1
000135B6 3141 0008                  		move.w	d1,obX(a0)
000135BA 2238 F704                  		move.l	(v_screenposy).w,d1
000135BE D281                       		add.l	d1,d1
000135C0 4841                       		swap	d1
000135C2 0241 003F                  		andi.w	#$3F,d1
000135C6 4441                       		neg.w	d1
000135C8 0641 0100                  		addi.w	#$100,d1
000135CC 3141 000A                  		move.w	d1,obScreenY(a0)
000135D0 6000 C4BA                  		bra.w	DisplaySprite
000135D0 6000 C4BA                  		bra.w	DisplaySprite
000135D4                            Map_Pylon:	include	"_maps\Pylon.asm"
000135D4                            ; ---------------------------------------------------------------------------
000135D4                            ; Sprite mappings - metal pylons in foreground (SLZ)
000135D4                            ; ---------------------------------------------------------------------------
000135D4                            Map_Pylon_internal:
000135D4 0000                       		dc.w @pylon-Map_Pylon_internal
000135D6 09                         @pylon:		dc.b 9
000135D7 800F 0000 F0               		dc.b $80, $F, 0, 0, $F0
000135DC A00F 1000 F0               		dc.b $A0, $F, $10, 0, $F0
000135E1 C00F 0000 F0               		dc.b $C0, $F, 0, 0, $F0
000135E6 E00F 1000 F0               		dc.b $E0, $F, $10, 0, $F0
000135EB 000F 0000 F0               		dc.b 0,	$F, 0, 0, $F0
000135F0 200F 1000 F0               		dc.b $20, $F, $10, 0, $F0
000135F5 400F 0000 F0               		dc.b $40, $F, 0, 0, $F0
000135FA 600F 1000 F0               		dc.b $60, $F, $10, 0, $F0
000135FF 7F0F 0000 F0               		dc.b $7F, $F, 0, 0, $F0
00013604                            		even
00013604                            		even
00013604                            
00013604                            		include	"_incObj\1B Water Surface.asm"
00013604                            ; ---------------------------------------------------------------------------
00013604                            ; Object 1B - water surface (LZ)
00013604                            ; ---------------------------------------------------------------------------
00013604                            
00013604                            WaterSurface:
00013604 7000                       		moveq	#0,d0
00013606 1028 0024                  		move.b	obRoutine(a0),d0
0001360A 323B 0000                  		move.w	Surf_Index(pc,d0.w),d1
0001360E 4EFB 1000                  		jmp	Surf_Index(pc,d1.w)
00013612                            ; ===========================================================================
00013612 0000                       Surf_Index:	dc.w Surf_Main-Surf_Index
00013614 0000                       		dc.w Surf_Action-Surf_Index
00013616                            
00013616 =00000030                  surf_origX:	equ $30		; original x-axis position
00013616 =00000032                  surf_freeze:	equ $32		; flag to freeze animation
00013616                            ; ===========================================================================
00013616                            
00013616                            Surf_Main:	; Routine 0
00013616 5428 0024                  		addq.b	#2,obRoutine(a0)
0001361A 217C 0000 0000 0004        		move.l	#Map_Surf,obMap(a0)
00013622 317C C300 0002             		move.w	#$C300,obGfx(a0)
00013628 117C 0004 0001             		move.b	#4,obRender(a0)
0001362E 117C 0080 0014             		move.b	#$80,obActWid(a0)
00013634 3168 0008 0030             		move.w	obX(a0),surf_origX(a0)
0001363A                            
0001363A                            Surf_Action:	; Routine 2
0001363A 3238 F700                  		move.w	(v_screenposx).w,d1
0001363E 0241 FFE0                  		andi.w	#$FFE0,d1
00013642 D268 0030                  		add.w	surf_origX(a0),d1
00013646 0838 0000 FE05             		btst	#0,(v_framebyte).w
0001364C 6700                       		beq.s	@even		; branch on even frames
0001364E 0641 0020                  		addi.w	#$20,d1
00013652                            
00013652                            	@even:
00013652 3141 0008                  		move.w	d1,obX(a0)	; match	obj x-position to screen position
00013656 3238 F646                  		move.w	(v_waterpos1).w,d1
0001365A 3141 000C                  		move.w	d1,obY(a0)	; match	obj y-position to water	height
0001365E 4A28 0032                  		tst.b	surf_freeze(a0)
00013662 6600                       		bne.s	@stopped
00013664 0838 0007 F605             		btst	#bitStart,(v_jpadpress1).w ; is Start button pressed?
0001366A 6700                       		beq.s	@animate	; if not, branch
0001366C 5628 001A                  		addq.b	#3,obFrame(a0)	; use different	frames
00013670 117C 0001 0032             		move.b	#1,surf_freeze(a0) ; stop animation
00013676 6000                       		bra.s	@display
00013678                            ; ===========================================================================
00013678                            
00013678                            @stopped:
00013678 4A78 F63A                  		tst.w	(f_pause).w	; is the game paused?
0001367C 6600                       		bne.s	@display	; if yes, branch
0001367E 117C 0000 0032             		move.b	#0,surf_freeze(a0) ; resume animation
00013684 5728 001A                  		subq.b	#3,obFrame(a0)	; use normal frames
00013688                            
00013688                            @animate:
00013688 5328 001E                  		subq.b	#1,obTimeFrame(a0)
0001368C 6A00                       		bpl.s	@display
0001368E 117C 0007 001E             		move.b	#7,obTimeFrame(a0)
00013694 5228 001A                  		addq.b	#1,obFrame(a0)
00013698 0C28 0003 001A             		cmpi.b	#3,obFrame(a0)
0001369E 6500                       		bcs.s	@display
000136A0 117C 0000 001A             		move.b	#0,obFrame(a0)
000136A6                            
000136A6                            @display:
000136A6 6000 C3E4                  		bra.w	DisplaySprite
000136A6 6000 C3E4                  		bra.w	DisplaySprite
000136AA                            Map_Surf:	include	"_maps\Water Surface.asm"
000136AA                            ; --------------------------------------------------------------------------------
000136AA                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
000136AA                            ; --------------------------------------------------------------------------------
000136AA                            
000136AA                            SME_LGSi8:	
000136AA 0000 0000                  		dc.w SME_LGSi8_C-SME_LGSi8, SME_LGSi8_1C-SME_LGSi8	
000136AE 0000 0000                  		dc.w SME_LGSi8_2C-SME_LGSi8, SME_LGSi8_3C-SME_LGSi8	
000136B2 0000 0000                  		dc.w SME_LGSi8_5B-SME_LGSi8, SME_LGSi8_7A-SME_LGSi8	
000136B6 03                         SME_LGSi8_C:	dc.b 3	
000136B7 F80D 0000 A0               		dc.b $F8, $D, 0, 0, $A0	
000136BC F80D 0000 E0               		dc.b $F8, $D, 0, 0, $E0	
000136C1 F80D 0000 20               		dc.b $F8, $D, 0, 0, $20	
000136C6 03                         SME_LGSi8_1C:	dc.b 3	
000136C7 F80D 0008 A0               		dc.b $F8, $D, 0, 8, $A0	
000136CC F80D 0008 E0               		dc.b $F8, $D, 0, 8, $E0	
000136D1 F80D 0008 20               		dc.b $F8, $D, 0, 8, $20	
000136D6 03                         SME_LGSi8_2C:	dc.b 3	
000136D7 F80D 0800 A0               		dc.b $F8, $D, 8, 0, $A0	
000136DC F80D 0800 E0               		dc.b $F8, $D, 8, 0, $E0	
000136E1 F80D 0800 20               		dc.b $F8, $D, 8, 0, $20	
000136E6 06                         SME_LGSi8_3C:	dc.b 6	
000136E7 F80D 0000 A0               		dc.b $F8, $D, 0, 0, $A0	
000136EC F80D 0000 C0               		dc.b $F8, $D, 0, 0, $C0	
000136F1 F80D 0000 E0               		dc.b $F8, $D, 0, 0, $E0	
000136F6 F80D 0000 00               		dc.b $F8, $D, 0, 0, 0	
000136FB F80D 0000 20               		dc.b $F8, $D, 0, 0, $20	
00013700 F80D 0000 40               		dc.b $F8, $D, 0, 0, $40	
00013705 06                         SME_LGSi8_5B:	dc.b 6	
00013706 F80D 0008 A0               		dc.b $F8, $D, 0, 8, $A0	
0001370B F80D 0008 C0               		dc.b $F8, $D, 0, 8, $C0	
00013710 F80D 0008 E0               		dc.b $F8, $D, 0, 8, $E0	
00013715 F80D 0008 00               		dc.b $F8, $D, 0, 8, 0	
0001371A F80D 0008 20               		dc.b $F8, $D, 0, 8, $20	
0001371F F80D 0008 40               		dc.b $F8, $D, 0, 8, $40	
00013724 06                         SME_LGSi8_7A:	dc.b 6	
00013725 F80D 0800 A0               		dc.b $F8, $D, 8, 0, $A0	
0001372A F80D 0800 C0               		dc.b $F8, $D, 8, 0, $C0	
0001372F F80D 0800 E0               		dc.b $F8, $D, 8, 0, $E0	
00013734 F80D 0800 00               		dc.b $F8, $D, 8, 0, 0	
00013739 F80D 0800 20               		dc.b $F8, $D, 8, 0, $20	
0001373E F80D 0800 40               		dc.b $F8, $D, 8, 0, $40	
00013744 00                         		even
00013744 00                         		even
00013744                            		include	"_incObj\0B Pole that Breaks.asm"
00013744                            ; ---------------------------------------------------------------------------
00013744                            ; Object 0B - pole that	breaks (LZ)
00013744                            ; ---------------------------------------------------------------------------
00013744                            
00013744                            Pole:
00013744 7000                       		moveq	#0,d0
00013746 1028 0024                  		move.b	obRoutine(a0),d0
0001374A 323B 0000                  		move.w	Pole_Index(pc,d0.w),d1
0001374E 4EFB 1000                  		jmp	Pole_Index(pc,d1.w)
00013752                            ; ===========================================================================
00013752 0000                       Pole_Index:	dc.w Pole_Main-Pole_Index
00013754 0000                       		dc.w Pole_Action-Pole_Index
00013756 0000                       		dc.w Pole_Display-Pole_Index
00013758                            
00013758 =00000030                  pole_time:	equ $30		; time between grabbing the pole & breaking
00013758 =00000032                  pole_grabbed:	equ $32		; flag set when Sonic grabs the pole
00013758                            ; ===========================================================================
00013758                            
00013758                            Pole_Main:	; Routine 0
00013758 5428 0024                  		addq.b	#2,obRoutine(a0)
0001375C 217C 0000 0000 0004        		move.l	#Map_Pole,obMap(a0)
00013764 317C 43DE 0002             		move.w	#$43DE,obGfx(a0)
0001376A 117C 0004 0001             		move.b	#4,obRender(a0)
00013770 117C 0008 0014             		move.b	#8,obActWid(a0)
00013776 317C 0200 0018             		move.w	#$200,obPriority(a0)
0001377C 117C 00E1 0020             		move.b	#$E1,obColType(a0)
00013782 7000                       		moveq	#0,d0
00013784 1028 0028                  		move.b	obSubtype(a0),d0 ; get object type
00013788 C0FC 003C                  		mulu.w	#60,d0		; multiply by 60 (1 second)
0001378C 3140 0030                  		move.w	d0,pole_time(a0) ; set breakage time
00013790                            
00013790                            Pole_Action:	; Routine 2
00013790 4A28 0032                  		tst.b	pole_grabbed(a0) ; has pole already been grabbed?
00013794 6700                       		beq.s	@grab		; if not, branch
00013796 4A68 0030                  		tst.w	pole_time(a0)
0001379A 6700                       		beq.s	@moveup
0001379C 5368 0030                  		subq.w	#1,pole_time(a0) ; decrement time until break
000137A0 6600                       		bne.s	@moveup
000137A2 117C 0001 001A             		move.b	#1,obFrame(a0)	; break	the pole
000137A8 6000                       		bra.s	@release
000137AA                            ; ===========================================================================
000137AA                            
000137AA                            @moveup:
000137AA 43F8 D000                  		lea	(v_player).w,a1
000137AE 3028 000C                  		move.w	obY(a0),d0
000137B2 0440 0018                  		subi.w	#$18,d0
000137B6 0838 0000 F604             		btst	#bitUp,(v_jpadhold1).w ; is "up" pressed?
000137BC 6700                       		beq.s	@movedown	; if not, branch
000137BE 5369 000C                  		subq.w	#1,obY(a1)	; move Sonic up
000137C2 B069 000C                  		cmp.w	obY(a1),d0
000137C6 6500                       		bcs.s	@movedown
000137C8 3340 000C                  		move.w	d0,obY(a1)
000137CC                            
000137CC                            @movedown:
000137CC 0640 0024                  		addi.w	#$24,d0
000137D0 0838 0001 F604             		btst	#bitDn,(v_jpadhold1).w ; is "down" pressed?
000137D6 6700                       		beq.s	@letgo		; if not, branch
000137D8 5269 000C                  		addq.w	#1,obY(a1)	; move Sonic down
000137DC B069 000C                  		cmp.w	obY(a1),d0
000137E0 6400                       		bcc.s	@letgo
000137E2 3340 000C                  		move.w	d0,obY(a1)
000137E6                            
000137E6                            @letgo:
000137E6 1038 F603                  		move.b	(v_jpadpress2).w,d0
000137EA 0240 0070                  		andi.w	#btnABC,d0	; is A/B/C pressed?
000137EE 6700                       		beq.s	Pole_Display	; if not, branch
000137F0                            
000137F0                            @release:
000137F0 4228 0020                  		clr.b	obColType(a0)
000137F4 5428 0024                  		addq.b	#2,obRoutine(a0) ; goto Pole_Display next
000137F8 4238 F7C8                  		clr.b	(f_lockmulti).w
000137FC 4238 F7C9                  		clr.b	(f_wtunnelallow).w
00013800 4228 0032                  		clr.b	pole_grabbed(a0)
00013804 6000                       		bra.s	Pole_Display
00013806                            ; ===========================================================================
00013806                            
00013806                            @grab:
00013806 4A28 0021                  		tst.b	obColProp(a0)	; has Sonic touched the	pole?
0001380A 6700                       		beq.s	Pole_Display	; if not, branch
0001380C 43F8 D000                  		lea	(v_player).w,a1
00013810 3028 0008                  		move.w	obX(a0),d0
00013814 0640 0014                  		addi.w	#$14,d0
00013818 B069 0008                  		cmp.w	obX(a1),d0
0001381C 6400                       		bcc.s	Pole_Display
0001381E 4228 0021                  		clr.b	obColProp(a0)
00013822 0C29 0004 0024             		cmpi.b	#4,obRoutine(a1)
00013828 6400                       		bcc.s	Pole_Display
0001382A 4269 0010                  		clr.w	obVelX(a1)	; stop Sonic moving
0001382E 4269 0012                  		clr.w	obVelY(a1)	; stop Sonic moving
00013832 3028 0008                  		move.w	obX(a0),d0
00013836 0640 0014                  		addi.w	#$14,d0
0001383A 3340 0008                  		move.w	d0,obX(a1)
0001383E 08A9 0000 0022             		bclr	#0,obStatus(a1)
00013844 137C 0000 001C             		move.b	#id_Hang,obAnim(a1) ; set Sonic's animation to "hanging" ($11)
0001384A 11FC 0001 F7C8             		move.b	#1,(f_lockmulti).w ; lock controls
00013850 11FC 0001 F7C9             		move.b	#1,(f_wtunnelallow).w ; disable wind tunnel
00013856 117C 0001 0032             		move.b	#1,pole_grabbed(a0) ; begin countdown to breakage
0001385C                            
0001385C                            Pole_Display:	; Routine 4
0001385C 6000 E1B8                  		bra.w	RememberState
0001385C 6000 E1B8                  		bra.w	RememberState
00013860                            Map_Pole:	include	"_maps\Pole that Breaks.asm"
00013860                            ; ---------------------------------------------------------------------------
00013860                            ; Sprite mappings - pole that breaks (LZ)
00013860                            ; ---------------------------------------------------------------------------
00013860                            Map_Pole_internal:
00013860 0000                       		dc.w @normal-Map_Pole_internal
00013862 0000                       		dc.w @broken-Map_Pole_internal
00013864 02                         @normal:	dc.b 2			; normal pole
00013865 E003 0000 FC               		dc.b $E0, 3, 0,	0, $FC
0001386A 0003 1000 FC               		dc.b 0,	3, $10,	0, $FC
0001386F 04                         @broken:	dc.b 4			; broken pole
00013870 E001 0000 FC               		dc.b $E0, 1, 0,	0, $FC
00013875 F005 0004 FC               		dc.b $F0, 5, 0,	4, $FC
0001387A 0005 1004 FC               		dc.b 0,	5, $10,	4, $FC
0001387F 1001 1000 FC               		dc.b $10, 1, $10, 0, $FC
00013884                            		even
00013884                            		even
00013884                            		include	"_incObj\0C Flapping Door.asm"
00013884                            ; ---------------------------------------------------------------------------
00013884                            ; Object 0C - flapping door (LZ)
00013884                            ; ---------------------------------------------------------------------------
00013884                            
00013884                            FlapDoor:
00013884 7000                       		moveq	#0,d0
00013886 1028 0024                  		move.b	obRoutine(a0),d0
0001388A 323B 0000                  		move.w	Flap_Index(pc,d0.w),d1
0001388E 4EFB 1000                  		jmp	Flap_Index(pc,d1.w)
00013892                            ; ===========================================================================
00013892 0000                       Flap_Index:	dc.w Flap_Main-Flap_Index
00013894 0000                       		dc.w Flap_OpenClose-Flap_Index
00013896                            
00013896 =00000032                  flap_time:	equ $32		; time between opening/closing
00013896 =00000030                  flap_wait:	equ $30		; time until change
00013896                            ; ===========================================================================
00013896                            
00013896                            Flap_Main:	; Routine 0
00013896 5428 0024                  		addq.b	#2,obRoutine(a0)
0001389A 217C 0000 0000 0004        		move.l	#Map_Flap,obMap(a0)
000138A2 317C 4328 0002             		move.w	#$4328,obGfx(a0)
000138A8 0028 0004 0001             		ori.b	#4,obRender(a0)
000138AE 117C 0028 0014             		move.b	#$28,obActWid(a0)
000138B4 7000                       		moveq	#0,d0
000138B6 1028 0028                  		move.b	obSubtype(a0),d0 ; get object type
000138BA C0FC 003C                  		mulu.w	#60,d0		; multiply by 60 (1 second)
000138BE 3140 0032                  		move.w	d0,flap_time(a0) ; set flap delay time
000138C2                            
000138C2                            Flap_OpenClose:	; Routine 2
000138C2 5368 0030                  		subq.w	#1,flap_wait(a0) ; decrement time delay
000138C6 6A00                       		bpl.s	@wait		; if time remains, branch
000138C8 3168 0032 0030             		move.w	flap_time(a0),flap_wait(a0) ; reset time delay
000138CE 0868 0000 001C             		bchg	#0,obAnim(a0)	; open/close door
000138D4 4A28 0001                  		tst.b	obRender(a0)
000138D8 6A00                       		bpl.s	@nosound
000138E4                            
000138E4                            	@wait:
000138E4                            	@nosound:
000138E4 43F9 0000 0000             		lea	(Ani_Flap).l,a1
000138EA 6100 9262                  		bsr.w	AnimateSprite
000138EE 4238 F7C9                  		clr.b	(f_wtunnelallow).w ; enable wind tunnel
000138F2 4A28 001A                  		tst.b	obFrame(a0)	; is the door open?
000138F6 6600                       		bne.s	@display	; if yes, branch
000138F8 3038 D008                  		move.w	(v_player+obX).w,d0
000138FC B068 0008                  		cmp.w	obX(a0),d0	; has Sonic passed through the door?
00013900 6400                       		bcc.s	@display	; if yes, branch
00013902 11FC 0001 F7C9             		move.b	#1,(f_wtunnelallow).w ; disable wind tunnel
00013908 323C 0013                  		move.w	#$13,d1
0001390C 343C 0020                  		move.w	#$20,d2
00013910 3602                       		move.w	d2,d3
00013912 5243                       		addq.w	#1,d3
00013914 3828 0008                  		move.w	obX(a0),d4
00013918 6100 E594                  		bsr.w	SolidObject	; make the door	solid
0001391C                            
0001391C                            	@display:
0001391C 6000 E0F8                  		bra.w	RememberState
0001391C 6000 E0F8                  		bra.w	RememberState
00013920                            		include	"_anim\Flapping Door.asm"
00013920                            ; ---------------------------------------------------------------------------
00013920                            ; Animation script - flapping door (LZ)
00013920                            ; ---------------------------------------------------------------------------
00013920 0000                       Ani_Flap:	dc.w @opening-Ani_Flap
00013922 0000                       		dc.w @closing-Ani_Flap
00013924 0300 0102 FE01             @opening:	dc.b 3,	0, 1, 2, afBack, 1
0001392A 0302 0100 FE01             @closing:	dc.b 3,	2, 1, 0, afBack, 1
00013930                            		even
00013930                            		even
00013930                            Map_Flap:	include	"_maps\Flapping Door.asm"
00013930                            ; ---------------------------------------------------------------------------
00013930                            ; Sprite mappings - flapping door (LZ)
00013930                            ; ---------------------------------------------------------------------------
00013930                            Map_Flap_internal:
00013930 0000                       		dc.w @closed-Map_Flap_internal
00013932 0000                       		dc.w @halfway-Map_Flap_internal
00013934 0000                       		dc.w @open-Map_Flap_internal
00013936 02                         @closed:	dc.b 2
00013937 E007 0000 F8               		dc.b $E0, 7, 0,	0, $F8
0001393C 0007 1000 F8               		dc.b 0,	7, $10,	0, $F8
00013941 02                         @halfway:	dc.b 2
00013942 DA0F 0008 FB               		dc.b $DA, $F, 0, 8, $FB
00013947 060F 1008 FB               		dc.b 6,	$F, $10, 8, $FB
0001394C 02                         @open:		dc.b 2
0001394D D80D 0018 00               		dc.b $D8, $D, 0, $18, 0
00013952 180D 1018 00               		dc.b $18, $D, $10, $18,	0
00013958 00                         		even
00013958 00                         		even
00013958                            
00013958                            		include	"_incObj\71 Invisible Barriers.asm"
00013958                            ; ---------------------------------------------------------------------------
00013958                            ; Object 71 - invisible	solid barriers
00013958                            ; ---------------------------------------------------------------------------
00013958                            
00013958                            Invisibarrier:
00013958 7000                       		moveq	#0,d0
0001395A 1028 0024                  		move.b	obRoutine(a0),d0
0001395E 323B 0000                  		move.w	Invis_Index(pc,d0.w),d1
00013962 4EFB 1000                  		jmp	Invis_Index(pc,d1.w)
00013966                            ; ===========================================================================
00013966 0000                       Invis_Index:	dc.w Invis_Main-Invis_Index
00013968 0000                       		dc.w Invis_Solid-Invis_Index
0001396A                            
0001396A =00000016                  invis_height:	equ $16		; height in pixels
0001396A                            ; ===========================================================================
0001396A                            
0001396A                            Invis_Main:	; Routine 0
0001396A 5428 0024                  		addq.b	#2,obRoutine(a0)
0001396E 217C 0000 0000 0004        		move.l	#Map_Invis,obMap(a0)
00013976 317C 8680 0002             		move.w	#$8680,obGfx(a0)
0001397C 0028 0004 0001             		ori.b	#4,obRender(a0)
00013982 1028 0028                  		move.b	obSubtype(a0),d0 ; get object type
00013986 1200                       		move.b	d0,d1
00013988 0240 00F0                  		andi.w	#$F0,d0		; read only the	1st byte
0001398C 0640 0010                  		addi.w	#$10,d0
00013990 E248                       		lsr.w	#1,d0
00013992 1140 0014                  		move.b	d0,obActWid(a0)	; set object width
00013996 0241 000F                  		andi.w	#$F,d1		; read only the	2nd byte
0001399A 5241                       		addq.w	#1,d1
0001399C E749                       		lsl.w	#3,d1
0001399E 1141 0016                  		move.b	d1,invis_height(a0) ; set object height
000139A2                            
000139A2                            Invis_Solid:	; Routine 2
000139A2 6100 C368                  		bsr.w	ChkObjectVisible
000139A6 6600                       		bne.s	@chkdel
000139A8 7200                       		moveq	#0,d1
000139AA 1228 0014                  		move.b	obActWid(a0),d1
000139AE 0641 000B                  		addi.w	#$B,d1
000139B2 7400                       		moveq	#0,d2
000139B4 1428 0016                  		move.b	invis_height(a0),d2
000139B8 3602                       		move.w	d2,d3
000139BA 5243                       		addq.w	#1,d3
000139BC 3828 0008                  		move.w	obX(a0),d4
000139C0 6100 E534                  		bsr.w	SolidObject71
000139C4                            
000139C4                            @chkdel:
000139E0 4A78 FE08                  		tst.w	(v_debuguse).w	; are you using	debug mode?
000139E4 6700                       		beq.s	@nodisplay	; if not, branch
000139E6 4EF9 0000 FA8C             		jmp	(DisplaySprite).l	; if yes, display the object
000139EC                            
000139EC                            	@nodisplay:
000139EC 4E75                       		rts	
000139EE                            
000139EE                            	@delete:
000139EE 4EF9 0000 FACC             		jmp	(DeleteObject).l
000139EE 4EF9 0000 FACC             		jmp	(DeleteObject).l
000139F4                            Map_Invis:	include	"_maps\Invisible Barriers.asm"
000139F4                            ; --------------------------------------------------------------------------------
000139F4                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
000139F4                            ; --------------------------------------------------------------------------------
000139F4                            
000139F4                            SME_t60cE:	
000139F4 0000 0000                  		dc.w SME_t60cE_6-SME_t60cE, SME_t60cE_1B-SME_t60cE	
000139F8 0000                       		dc.w SME_t60cE_30-SME_t60cE	
000139FA 04                         SME_t60cE_6:	dc.b 4	
000139FB 0005 0028 F0               		dc.b 0, 5, 0, $28, $F0	
00013A00 0005 0028 00               		dc.b 0, 5, 0, $28, 0	
00013A05 F005 0028 00               		dc.b $F0, 5, 0, $28, 0	
00013A0A F005 0028 F0               		dc.b $F0, 5, 0, $28, $F0	
00013A0F 04                         SME_t60cE_1B:	dc.b 4	
00013A10 E005 0028 C0               		dc.b $E0, 5, 0, $28, $C0	
00013A15 E005 0028 30               		dc.b $E0, 5, 0, $28, $30	
00013A1A 1005 0028 30               		dc.b $10, 5, 0, $28, $30	
00013A1F 1005 0028 C0               		dc.b $10, 5, 0, $28, $C0	
00013A24 04                         SME_t60cE_30:	dc.b 4	
00013A25 E005 0028 80               		dc.b $E0, 5, 0, $28, $80	
00013A2A E005 0028 70               		dc.b $E0, 5, 0, $28, $70	
00013A2F 1005 0028 70               		dc.b $10, 5, 0, $28, $70	
00013A34 1005 0028 80               		dc.b $10, 5, 0, $28, $80	
00013A3A 00                         		even
00013A3A 00                         		even
00013A3A                            
00013A3A                            		include	"_incObj\5D Fan.asm"
00013A3A                            ; ---------------------------------------------------------------------------
00013A3A                            ; Object 5D - fans (SLZ)
00013A3A                            ; ---------------------------------------------------------------------------
00013A3A                            
00013A3A                            Fan:
00013A3A 7000                       		moveq	#0,d0
00013A3C 1028 0024                  		move.b	obRoutine(a0),d0
00013A40 323B 0000                  		move.w	Fan_Index(pc,d0.w),d1
00013A44 4EFB 1000                  		jmp	Fan_Index(pc,d1.w)
00013A48                            ; ===========================================================================
00013A48 0000                       Fan_Index:	dc.w Fan_Main-Fan_Index
00013A4A 0000                       		dc.w Fan_Delay-Fan_Index
00013A4C                            
00013A4C =00000030                  fan_time:	equ $30		; time between switching on/off
00013A4C =00000032                  fan_switch:	equ $32		; on/off switch
00013A4C                            ; ===========================================================================
00013A4C                            
00013A4C                            Fan_Main:	; Routine 0
00013A4C 5428 0024                  		addq.b	#2,obRoutine(a0)
00013A50 217C 0000 0000 0004        		move.l	#Map_Fan,obMap(a0)
00013A58 317C 43A0 0002             		move.w	#$43A0,obGfx(a0)
00013A5E 0028 0004 0001             		ori.b	#4,obRender(a0)
00013A64 117C 0010 0014             		move.b	#$10,obActWid(a0)
00013A6A 317C 0200 0018             		move.w	#$200,obPriority(a0)
00013A70                            
00013A70                            Fan_Delay:	; Routine 2
00013A70 0828 0001 0028             		btst	#1,obSubtype(a0) ; is object type 02/03 (always on)?
00013A76 6600                       		bne.s	@blow		; if yes, branch
00013A78 5368 0030                  		subq.w	#1,fan_time(a0)	; subtract 1 from time delay
00013A7C 6A00                       		bpl.s	@blow		; if time remains, branch
00013A7E 317C 0078 0030             		move.w	#120,fan_time(a0) ; set delay to 2 seconds
00013A84 0868 0000 0032             		bchg	#0,fan_switch(a0) ; switch fan on/off
00013A8A 6700                       		beq.s	@blow		; if fan is off, branch
00013A8C 317C 00B4 0030             		move.w	#180,fan_time(a0) ; set delay to 3 seconds
00013A92                            
00013A92                            @blow:
00013A92 4A28 0032                  		tst.b	fan_switch(a0)	; is fan switched on?
00013A96 6600 0000                  		bne.w	@chkdel		; if not, branch
00013A9A 43F8 D000                  		lea	(v_player).w,a1
00013A9E 3029 0008                  		move.w	obX(a1),d0
00013AA2 9068 0008                  		sub.w	obX(a0),d0
00013AA6 0828 0000 0022             		btst	#0,obStatus(a0)	; is fan facing right?
00013AAC 6600                       		bne.s	@chksonic	; if yes, branch
00013AAE 4440                       		neg.w	d0
00013AB0                            
00013AB0                            @chksonic:
00013AB0 0640 0050                  		addi.w	#$50,d0
00013AB4 0C40 00F0                  		cmpi.w	#$F0,d0		; is Sonic more	than $A0 pixels	from the fan?
00013AB8 6400                       		bcc.s	@animate	; if yes, branch
00013ABA 3229 000C                  		move.w	obY(a1),d1
00013ABE 0641 0060                  		addi.w	#$60,d1
00013AC2 9268 000C                  		sub.w	obY(a0),d1
00013AC6 6500                       		bcs.s	@animate	; branch if Sonic is too low
00013AC8 0C41 0070                  		cmpi.w	#$70,d1
00013ACC 6400                       		bcc.s	@animate	; branch if Sonic is too high
00013ACE 0440 0050                  		subi.w	#$50,d0		; is Sonic more than $50 pixels from the fan?
00013AD2 6400                       		bcc.s	@faraway	; if yes, branch
00013AD4 4640                       		not.w	d0
00013AD6 D040                       		add.w	d0,d0
00013AD8                            
00013AD8                            	@faraway:
00013AD8 0640 0060                  		addi.w	#$60,d0
00013ADC 0828 0000 0022             		btst	#0,obStatus(a0)	; is fan facing right?
00013AE2 6600                       		bne.s	@right		; if yes, branch
00013AE4 4440                       		neg.w	d0
00013AE6                            
00013AE6                            	@right:
00013AE6 4400                       		neg.b	d0
00013AE8 E840                       		asr.w	#4,d0
00013AEA 0828 0000 0028             		btst	#0,obSubtype(a0)
00013AF0 6700                       		beq.s	@movesonic
00013AF2 4440                       		neg.w	d0
00013AF4                            
00013AF4                            	@movesonic:
00013AF4 D169 0008                  		add.w	d0,obX(a1)	; push Sonic away from the fan
00013AF8                            
00013AF8                            @animate:
00013AF8 5328 001E                  		subq.b	#1,obTimeFrame(a0)
00013AFC 6A00                       		bpl.s	@chkdel
00013AFE 117C 0000 001E             		move.b	#0,obTimeFrame(a0)
00013B04 5228 001B                  		addq.b	#1,obAniFrame(a0)
00013B08 0C28 0003 001B             		cmpi.b	#3,obAniFrame(a0)
00013B0E 6500                       		bcs.s	@noreset
00013B10 117C 0000 001B             		move.b	#0,obAniFrame(a0) ; reset after 4 frames
00013B16                            
00013B16                            	@noreset:
00013B16 7000                       		moveq	#0,d0
00013B18 0828 0000 0028             		btst	#0,obSubtype(a0)
00013B1E 6700                       		beq.s	@noflip
00013B20 7002                       		moveq	#2,d0
00013B22                            
00013B22                            	@noflip:
00013B22 D028 001B                  		add.b	obAniFrame(a0),d0
00013B26 1140 001A                  		move.b	d0,obFrame(a0)
00013B2A                            
00013B2A                            @chkdel:
00013B2A 6100 BF60                  		bsr.w	DisplaySprite
00013B4C 4E75                       		rts	
00013B4C 4E75                       		rts	
00013B4E                            Map_Fan:	include	"_maps\Fan.asm"
00013B4E                            ; ---------------------------------------------------------------------------
00013B4E                            ; Sprite mappings - fans (SLZ)
00013B4E                            ; ---------------------------------------------------------------------------
00013B4E                            Map_Fan_internal:
00013B4E 0000                       		dc.w @fan1-Map_Fan_internal
00013B50 0000                       		dc.w @fan2-Map_Fan_internal
00013B52 0000                       		dc.w @fan3-Map_Fan_internal
00013B54 0000                       		dc.w @fan2-Map_Fan_internal
00013B56 0000                       		dc.w @fan1-Map_Fan_internal
00013B58 02                         @fan1:		dc.b 2
00013B59 F009 0000 F8               		dc.b $F0, 9, 0,	0, $F8
00013B5E 000D 0006 F0               		dc.b 0,	$D, 0, 6, $F0
00013B63 02                         @fan2:		dc.b 2
00013B64 F00D 000E F0               		dc.b $F0, $D, 0, $E, $F0
00013B69 000D 0016 F0               		dc.b 0,	$D, 0, $16, $F0
00013B6E 02                         @fan3:		dc.b 2
00013B6F F00D 001E F0               		dc.b $F0, $D, 0, $1E, $F0
00013B74 0009 0026 F8               		dc.b 0,	9, 0, $26, $F8
00013B7A 00                         		even
00013B7A 00                         		even
00013B7A                            		include	"_incObj\5E Seesaw.asm"
00013B7A                            ; ---------------------------------------------------------------------------
00013B7A                            ; Object 5E - seesaws (SLZ)
00013B7A                            ; ---------------------------------------------------------------------------
00013B7A                            
00013B7A                            Seesaw:
00013B7A 7000                       		moveq	#0,d0
00013B7C 1028 0024                  		move.b	obRoutine(a0),d0
00013B80 323B 0000                  		move.w	See_Index(pc,d0.w),d1
00013B84 4EBB 1000                  		jsr	See_Index(pc,d1.w)
00013B88 3028 0000                  		move.w	see_origX(a0),d0
00013B8C 0240 FF80                  		andi.w	#$FF80,d0
00013B90 3238 F700                  		move.w	(v_screenposx).w,d1
00013B94 0441 0080                  		subi.w	#$80,d1
00013B98 0241 FF80                  		andi.w	#$FF80,d1
00013B9C 9041                       		sub.w	d1,d0
00013B9E 6B00 BF2C                  		bmi.w	DeleteObject
00013BA2 0C40 0280                  		cmpi.w	#$280,d0
00013BA6 6200 BF24                  		bhi.w	DeleteObject
00013BAA 6000 BEE0                  		bra.w	DisplaySprite
00013BAE                            ; ===========================================================================
00013BAE 0000                       See_Index:	dc.w See_Main-See_Index
00013BB0 0000                       		dc.w See_Slope-See_Index
00013BB2 0000                       		dc.w See_Slope2-See_Index
00013BB4 0000                       		dc.w See_Spikeball-See_Index
00013BB6 0000                       		dc.w See_MoveSpike-See_Index
00013BB8 0000                       		dc.w See_SpikeFall-See_Index
00013BBA                            
00013BBA =00000030                  see_origX:	equ $30		; original x-axis position
00013BBA =00000034                  see_origY:	equ $34		; original y-axis position
00013BBA =00000038                  see_speed:	equ $38		; speed of collision
00013BBA =0000003A                  see_frame:	equ $3A		; 
00013BBA =0000003C                  see_parent:	equ $3C		; RAM address of parent object
00013BBA                            ; ===========================================================================
00013BBA                            
00013BBA                            See_Main:	; Routine 0
00013BBA 5428 0024                  		addq.b	#2,obRoutine(a0)
00013BBE 217C 0000 0000 0004        		move.l	#Map_Seesaw,obMap(a0)
00013BC6 317C 0374 0002             		move.w	#$374,obGfx(a0)
00013BCC 0028 0004 0001             		ori.b	#4,obRender(a0)
00013BD2 117C 0004 0018             		move.b	#4,obPriority(a0)
00013BD8 117C 0030 0014             		move.b	#$30,obActWid(a0)
00013BDE 3168 0008 0030             		move.w	obX(a0),see_origX(a0)
00013BE4 4A28 0028                  		tst.b	obSubtype(a0)	; is object type 00 ?
00013BE8 6600                       		bne.s	@noball		; if not, branch
00013BEA                            
00013BEA 6100 C342                  		bsr.w	FindNextFreeObj
00013BEE 6600                       		bne.s	@noball
00013BF0 12BC 005E                  		move.b	#id_Seesaw,0(a1) ; load spikeball object
00013BF4 5C29 0024                  		addq.b	#6,obRoutine(a1) ; use See_Spikeball routine
00013BF8 3368 0008 0008             		move.w	obX(a0),obX(a1)
00013BFE 3368 000C 000C             		move.w	obY(a0),obY(a1)
00013C04 1368 0022 0022             		move.b	obStatus(a0),obStatus(a1)
00013C0A 2348 003C                  		move.l	a0,see_parent(a1)
00013C0E                            
00013C0E                            	@noball:
00013C0E 0828 0000 0022             		btst	#0,obStatus(a0)	; is seesaw flipped?
00013C14 6700                       		beq.s	@noflip		; if not, branch
00013C16 117C 0002 001A             		move.b	#2,obFrame(a0)	; use different frame
00013C1C                            
00013C1C                            	@noflip:
00013C1C 1168 001A 003A             		move.b	obFrame(a0),see_frame(a0)
00013C22                            
00013C22                            See_Slope:	; Routine 2
00013C22 1228 003A                  		move.b	see_frame(a0),d1
00013C26 6100 0000                  		bsr.w	See_ChgFrame
00013C2A 45F9 0000 0000             		lea	(See_DataSlope).l,a2
00013C30 0828 0000 001A             		btst	#0,obFrame(a0)	; is seesaw flat?
00013C36 6700                       		beq.s	@notflat	; if not, branch
00013C38 45F9 0000 0000             		lea	(See_DataFlat).l,a2
00013C3E                            
00013C3E                            	@notflat:
00013C3E 43F8 D000                  		lea	(v_player).w,a1
00013C42 3169 0012 0038             		move.w	obVelY(a1),see_speed(a0)
00013C48 323C 0030                  		move.w	#$30,d1
00013C4C 4EB9 0000 920A             		jsr	(SlopeObject).l
00013C52 4E75                       		rts	
00013C54                            ; ===========================================================================
00013C54                            
00013C54                            See_Slope2:	; Routine 4
00013C54 6100 0000                  		bsr.w	See_ChkSide
00013C58 45F9 0000 0000             		lea	(See_DataSlope).l,a2
00013C5E 0828 0000 001A             		btst	#0,obFrame(a0)	; is seesaw flat?
00013C64 6700                       		beq.s	@notflat	; if not, branch
00013C66 45F9 0000 0000             		lea	(See_DataFlat).l,a2
00013C6C                            
00013C6C                            	@notflat:
00013C6C 323C 0030                  		move.w	#$30,d1
00013C70 4EB9 0000 92AA             		jsr	(ExitPlatform).l
00013C76 323C 0030                  		move.w	#$30,d1
00013C7A 3428 0008                  		move.w	obX(a0),d2
00013C7E 4EB9 0000 A244             		jsr	(SlopeObject2).l
00013C84 4E75                       		rts	
00013C86                            ; ===========================================================================
00013C86                            
00013C86                            See_ChkSide:
00013C86 7202                       		moveq	#2,d1
00013C88 43F8 D000                  		lea	(v_player).w,a1
00013C8C 3028 0008                  		move.w	obX(a0),d0
00013C90 9069 0008                  		sub.w	obX(a1),d0	; is Sonic on the left side of the seesaw?
00013C94 6400                       		bcc.s	@leftside	; if yes, branch
00013C96 4440                       		neg.w	d0
00013C98 7200                       		moveq	#0,d1
00013C9A                            
00013C9A                            	@leftside:
00013C9A 0C40 0008                  		cmpi.w	#8,d0
00013C9E 6400                       		bcc.s	See_ChgFrame
00013CA0 7201                       		moveq	#1,d1
00013CA2                            
00013CA2                            See_ChgFrame:
00013CA2 1028 001A                  		move.b	obFrame(a0),d0
00013CA6 B001                       		cmp.b	d1,d0		; does frame need to change?
00013CA8 6700                       		beq.s	@noflip		; if not, branch
00013CAA 6400                       		bcc.s	@loc_11772
00013CAC 5400                       		addq.b	#2,d0
00013CAE                            
00013CAE                            	@loc_11772:
00013CAE 5300                       		subq.b	#1,d0
00013CB0 1140 001A                  		move.b	d0,obFrame(a0)
00013CB4 1141 003A                  		move.b	d1,see_frame(a0)
00013CB8 08A8 0000 0001             		bclr	#0,obRender(a0)
00013CBE 0828 0001 001A             		btst	#1,obFrame(a0)
00013CC4 6700                       		beq.s	@noflip
00013CC6 08E8 0000 0001             		bset	#0,obRender(a0)
00013CCC                            
00013CCC                            	@noflip:
00013CCC 4E75                       		rts	
00013CCE                            ; ===========================================================================
00013CCE                            
00013CCE                            See_Spikeball:	; Routine 6
00013CCE 5428 0024                  		addq.b	#2,obRoutine(a0)
00013CD2 217C 0000 0000 0004        		move.l	#Map_SSawBall,obMap(a0)
00013CDA 317C 04F0 0002             		move.w	#$4F0,obGfx(a0)
00013CE0 0028 0004 0001             		ori.b	#4,obRender(a0)
00013CE6 117C 0004 0018             		move.b	#4,obPriority(a0)
00013CEC 117C 008B 0020             		move.b	#$8B,obColType(a0)
00013CF2 117C 000C 0014             		move.b	#$C,obActWid(a0)
00013CF8 3168 0008 0030             		move.w	obX(a0),see_origX(a0)
00013CFE 0668 0028 0008             		addi.w	#$28,obX(a0)
00013D04 3168 000C 0034             		move.w	obY(a0),see_origY(a0)
00013D0A 117C 0001 001A             		move.b	#1,obFrame(a0)
00013D10 0828 0000 0022             		btst	#0,obStatus(a0)	; is seesaw flipped?
00013D16 6700                       		beq.s	See_MoveSpike	; if not, branch
00013D18 0468 0050 0008             		subi.w	#$50,obX(a0)	; move spikeball to the other side
00013D1E 117C 0002 003A             		move.b	#2,see_frame(a0)
00013D24                            
00013D24                            See_MoveSpike:	; Routine 8
00013D24 2268 003C                  		movea.l	see_parent(a0),a1
00013D28 7000                       		moveq	#0,d0
00013D2A 1028 003A                  		move.b	see_frame(a0),d0
00013D2E 9029 003A                  		sub.b	see_frame(a1),d0
00013D32 6700                       		beq.s	loc_1183E
00013D34 6400                       		bcc.s	loc_117FC
00013D36 4400                       		neg.b	d0
00013D38                            
00013D38                            loc_117FC:
00013D38 323C F7E8                  		move.w	#-$818,d1
00013D3C 343C FEEC                  		move.w	#-$114,d2
00013D40 0C00 0001                  		cmpi.b	#1,d0
00013D44 6700                       		beq.s	loc_11822
00013D46 323C F510                  		move.w	#-$AF0,d1
00013D4A 343C FF34                  		move.w	#-$CC,d2
00013D4E 0C69 0A00 0038             		cmpi.w	#$A00,$38(a1)
00013D54 6D00                       		blt.s	loc_11822
00013D56 323C F200                  		move.w	#-$E00,d1
00013D5A 343C FF60                  		move.w	#-$A0,d2
00013D5E                            
00013D5E                            loc_11822:
00013D5E 3141 0012                  		move.w	d1,obVelY(a0)
00013D62 3142 0010                  		move.w	d2,obVelX(a0)
00013D66 3028 0008                  		move.w	obX(a0),d0
00013D6A 9068 0030                  		sub.w	see_origX(a0),d0
00013D6E 6400                       		bcc.s	loc_11838
00013D70 4468 0010                  		neg.w	obVelX(a0)
00013D74                            
00013D74                            loc_11838:
00013D74 5428 0024                  		addq.b	#2,obRoutine(a0)
00013D78 6000                       		bra.s	See_SpikeFall
00013D7A                            ; ===========================================================================
00013D7A                            
00013D7A                            loc_1183E:
00013D7A 45F9 0000 0000             		lea	(See_Speeds).l,a2
00013D80 7000                       		moveq	#0,d0
00013D82 1029 001A                  		move.b	obFrame(a1),d0
00013D86 343C 0028                  		move.w	#$28,d2
00013D8A 3228 0008                  		move.w	obX(a0),d1
00013D8E 9268 0030                  		sub.w	see_origX(a0),d1
00013D92 6400                       		bcc.s	loc_1185C
00013D94 4442                       		neg.w	d2
00013D96 5440                       		addq.w	#2,d0
00013D98                            
00013D98                            loc_1185C:
00013D98 D040                       		add.w	d0,d0
00013D9A 3228 0034                  		move.w	see_origY(a0),d1
00013D9E D272 0000                  		add.w	(a2,d0.w),d1
00013DA2 3141 000C                  		move.w	d1,obY(a0)
00013DA6 D468 0030                  		add.w	see_origX(a0),d2
00013DAA 3142 0008                  		move.w	d2,obX(a0)
00013DAE 4268 000E                  		clr.w	obY+2(a0)
00013DB2 4268 000A                  		clr.w	obX+2(a0)
00013DB6 4E75                       		rts	
00013DB8                            ; ===========================================================================
00013DB8                            
00013DB8                            See_SpikeFall:	; Routine $A
00013DB8 4A68 0012                  		tst.w	obVelY(a0)	; is spikeball falling down?
00013DBC 6A00                       		bpl.s	loc_1189A	; if yes, branch
00013DBE 6100 BC80                  		bsr.w	ObjectFall
00013DC2 3028 0034                  		move.w	see_origY(a0),d0
00013DC6 0440 002F                  		subi.w	#$2F,d0
00013DCA B068 000C                  		cmp.w	obY(a0),d0
00013DCE 6E00                       		bgt.s	locret_11898
00013DD0 6100 BC6E                  		bsr.w	ObjectFall
00013DD4                            
00013DD4                            locret_11898:
00013DD4 4E75                       		rts	
00013DD6                            ; ===========================================================================
00013DD6                            
00013DD6                            loc_1189A:
00013DD6 6100 BC68                  		bsr.w	ObjectFall
00013DDA 2268 003C                  		movea.l	see_parent(a0),a1
00013DDE 45F9 0000 0000             		lea	(See_Speeds).l,a2
00013DE4 7000                       		moveq	#0,d0
00013DE6 1029 001A                  		move.b	obFrame(a1),d0
00013DEA 3228 0008                  		move.w	obX(a0),d1
00013DEE 9268 0030                  		sub.w	see_origX(a0),d1
00013DF2 6400                       		bcc.s	loc_118BA
00013DF4 5440                       		addq.w	#2,d0
00013DF6                            
00013DF6                            loc_118BA:
00013DF6 D040                       		add.w	d0,d0
00013DF8 3228 0034                  		move.w	see_origY(a0),d1
00013DFC D272 0000                  		add.w	(a2,d0.w),d1
00013E00 B268 000C                  		cmp.w	obY(a0),d1
00013E04 6E00                       		bgt.s	locret_11938
00013E06 2268 003C                  		movea.l	see_parent(a0),a1
00013E0A 7202                       		moveq	#2,d1
00013E0C 4A68 0010                  		tst.w	obVelX(a0)
00013E10 6B00                       		bmi.s	See_Spring
00013E12 7200                       		moveq	#0,d1
00013E14                            
00013E14                            See_Spring:
00013E14 1341 003A                  		move.b	d1,$3A(a1)
00013E18 1141 003A                  		move.b	d1,see_frame(a0)
00013E1C B229 001A                  		cmp.b	obFrame(a1),d1
00013E20 6700                       		beq.s	loc_1192C
00013E22 08A9 0003 0022             		bclr	#3,obStatus(a1)
00013E28 6700                       		beq.s	loc_1192C
00013E2A 4229 0025                  		clr.b	ob2ndRout(a1)
00013E2E 137C 0002 0024             		move.b	#2,obRoutine(a1)
00013E34 45F8 D000                  		lea	(v_player).w,a2
00013E38 3568 0012 0012             		move.w	obVelY(a0),obVelY(a2)
00013E3E 446A 0012                  		neg.w	obVelY(a2)
00013E42 08EA 0001 0022             		bset	#1,obStatus(a2)
00013E48 08AA 0003 0022             		bclr	#3,obStatus(a2)
00013E4E 422A 003C                  		clr.b	$3C(a2)
00013E52 157C 0000 001C             		move.b	#id_Spring,obAnim(a2) ; change Sonic's animation to "spring" ($10)
00013E58 157C 0002 0024             		move.b	#2,obRoutine(a2)
00013E68                            
00013E68                            loc_1192C:
00013E68 4268 0010                  		clr.w	obVelX(a0)
00013E6C 4268 0012                  		clr.w	obVelY(a0)
00013E70 5528 0024                  		subq.b	#2,obRoutine(a0)
00013E74                            
00013E74                            locret_11938:
00013E74 4E75                       		rts	
00013E76                            ; ===========================================================================
00013E76 FFF8 FFE4 FFD1 FFE4 FFF8   See_Speeds:	dc.w -8, -$1C, -$2F, -$1C, -8
00013E80                            
00013E80                            See_DataSlope:	incbin	"misc\slzssaw1.bin"
00013EB0                            		even
00013EB0                            See_DataFlat:	incbin	"misc\slzssaw2.bin"
00013EE0                            		even
00013EE0                            		even
00013EE0                            Map_Seesaw:	include	"_maps\Seesaw.asm"
00013EE0                            ; ---------------------------------------------------------------------------
00013EE0                            ; Sprite mappings - seesaws (SLZ)
00013EE0                            ; ---------------------------------------------------------------------------
00013EE0                            Map_Seesaw_internal:
00013EE0 0000                       		dc.w @sloping-Map_Seesaw_internal
00013EE2 0000                       		dc.w @flat-Map_Seesaw_internal
00013EE4 0000                       		dc.w @sloping-Map_Seesaw_internal
00013EE6 0000                       		dc.w @flat-Map_Seesaw_internal
00013EE8 07                         @sloping:	dc.b 7
00013EE9 D406 0000 D3               		dc.b $D4, 6, 0,	0, $D3
00013EEE DC06 0006 E3               		dc.b $DC, 6, 0,	6, $E3
00013EF3 E404 000C F3               		dc.b $E4, 4, 0,	$C, $F3
00013EF8 EC0D 000E F3               		dc.b $EC, $D, 0, $E, $F3
00013EFD FC08 0016 FB               		dc.b $FC, 8, 0,	$16, $FB
00013F02 F406 0006 13               		dc.b $F4, 6, 0,	6, $13
00013F07 FC05 0019 23               		dc.b $FC, 5, 0,	$19, $23
00013F0C 04                         @flat:		dc.b 4
00013F0D E60A 001D D0               		dc.b $E6, $A, 0, $1D, $D0
00013F12 E60A 0023 E8               		dc.b $E6, $A, 0, $23, $E8
00013F17 E60A 0823 00               		dc.b $E6, $A, 8, $23, 0
00013F1C E60A 081D 18               		dc.b $E6, $A, 8, $1D, $18
00013F22 00                         		even
00013F22 00                         		even
00013F22                            Map_SSawBall:	include	"_maps\Seesaw Ball.asm"
00013F22                            ; ---------------------------------------------------------------------------
00013F22                            ; Sprite mappings - spiked balls on the	seesaws	(SLZ)
00013F22                            ; ---------------------------------------------------------------------------
00013F22                            Map_SSawBall_internal:
00013F22 0000                       		dc.w @red-Map_SSawBall_internal
00013F24 0000                       		dc.w @silver-Map_SSawBall_internal
00013F26 01                         @red:		dc.b 1
00013F27 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
00013F2C 01                         @silver:	dc.b 1
00013F2D F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
00013F32                            		even
00013F32                            		even
00013F32                            		include	"_incObj\5F Bomb Enemy.asm"
00013F32                            ; ---------------------------------------------------------------------------
00013F32                            ; Object 5F - walking bomb enemy (SLZ, SBZ)
00013F32                            ; ---------------------------------------------------------------------------
00013F32                            
00013F32                            Bomb:
00013F32 7000                       		moveq	#0,d0
00013F34 1028 0024                  		move.b	obRoutine(a0),d0
00013F38 323B 0000                  		move.w	Bom_Index(pc,d0.w),d1
00013F3C 4EFB 1000                  		jmp	Bom_Index(pc,d1.w)
00013F40                            ; ===========================================================================
00013F40 0000                       Bom_Index:	dc.w Bom_Main-Bom_Index
00013F42 0000                       		dc.w Bom_Action-Bom_Index
00013F44 0000                       		dc.w Bom_Display-Bom_Index
00013F46 0000                       		dc.w Bom_End-Bom_Index
00013F48                            
00013F48 =00000030                  bom_time:	equ $30		; time of fuse
00013F48 =00000034                  bom_origY:	equ $34		; original y-axis position
00013F48 =0000003C                  bom_parent:	equ $3C		; address of parent object
00013F48                            ; ===========================================================================
00013F48                            
00013F48                            Bom_Main:	; Routine 0
00013F48 5428 0024                  		addq.b	#2,obRoutine(a0)
00013F4C 217C 0000 0000 0004        		move.l	#Map_Bomb,obMap(a0)
00013F54 317C 0400 0002             		move.w	#$400,obGfx(a0)
00013F5A 0028 0004 0001             		ori.b	#4,obRender(a0)
00013F60 317C 0180 0018             		move.w	#$180,obPriority(a0)
00013F66 117C 000C 0014             		move.b	#$C,obActWid(a0)
00013F6C 1028 0028                  		move.b	obSubtype(a0),d0
00013F70 6700                       		beq.s	loc_11A3C
00013F72 1140 0024                  		move.b	d0,obRoutine(a0)
00013F76 4E75                       		rts	
00013F78                            ; ===========================================================================
00013F78                            
00013F78                            loc_11A3C:
00013F78 117C 009A 0020             		move.b	#$9A,obColType(a0)
00013F7E 0868 0000 0022             		bchg	#0,obStatus(a0)
00013F84                            
00013F84                            Bom_Action:	; Routine 2
00013F84 7000                       		moveq	#0,d0
00013F86 1028 0025                  		move.b	ob2ndRout(a0),d0
00013F8A 323B 0000                  		move.w	@index(pc,d0.w),d1
00013F8E 4EBB 1000                  		jsr	@index(pc,d1.w)
00013F92 43F9 0000 0000             		lea	(Ani_Bomb).l,a1
00013F98 6100 8BB4                  		bsr.w	AnimateSprite
00013F9C 6000 DA78                  		bra.w	RememberState
00013FA0                            ; ===========================================================================
00013FA0 0000                       @index:		dc.w @walk-@index
00013FA2 0000                       		dc.w @wait-@index
00013FA4 0000                       		dc.w @explode-@index
00013FA6                            ; ===========================================================================
00013FA6                            
00013FA6                            @walk:
00013FA6 6100 0000                  		bsr.w	@chksonic
00013FAA 5368 0030                  		subq.w	#1,bom_time(a0)	; subtract 1 from time delay
00013FAE 6A00                       		bpl.s	@noflip		; if time remains, branch
00013FB0 5428 0025                  		addq.b	#2,ob2ndRout(a0) ; goto @wait
00013FB4 317C 05FF 0030             		move.w	#1535,bom_time(a0) ; set time delay to 25 seconds
00013FBA 317C 0010 0010             		move.w	#$10,obVelX(a0)
00013FC0 117C 0001 001C             		move.b	#1,obAnim(a0)	; use walking animation
00013FC6 0868 0000 0022             		bchg	#0,obStatus(a0)
00013FCC 6700                       		beq.s	@noflip
00013FCE 4468 0010                  		neg.w	obVelX(a0)	; change direction
00013FD2                            
00013FD2                            	@noflip:
00013FD2 4E75                       		rts	
00013FD4                            ; ===========================================================================
00013FD4                            
00013FD4                            @wait:
00013FD4 6100 0000                  		bsr.w	@chksonic
00013FD8 5368 0030                  		subq.w	#1,bom_time(a0)	; subtract 1 from time delay
00013FDC 6B00                       		bmi.s	@stopwalking	; if time expires, branch
00013FDE 6100 BA98                  		bsr.w	SpeedToPos
00013FE2 4E75                       		rts	
00013FE4                            ; ===========================================================================
00013FE4                            
00013FE4                            	@stopwalking:
00013FE4 5528 0025                  		subq.b	#2,ob2ndRout(a0)
00013FE8 317C 00B3 0030             		move.w	#179,bom_time(a0) ; set time delay to 3 seconds
00013FEE 4268 0010                  		clr.w	obVelX(a0)	; stop walking
00013FF2 117C 0000 001C             		move.b	#0,obAnim(a0)	; use waiting animation
00013FF8 4E75                       		rts	
00013FFA                            ; ===========================================================================
00013FFA                            
00013FFA                            @explode:
00013FFA 5368 0030                  		subq.w	#1,bom_time(a0)	; subtract 1 from time delay
00013FFE 6A00                       		bpl.s	@noexplode	; if time remains, branch
00014000 10BC 003F                  		move.b	#id_ExplosionBomb,0(a0) ; change bomb into an explosion
00014004 117C 0000 0024             		move.b	#0,obRoutine(a0)
0001400A                            
0001400A                            	@noexplode:
0001400A 4E75                       		rts	
0001400C                            ; ===========================================================================
0001400C                            
0001400C                            @chksonic:
0001400C 3038 D008                  		move.w	(v_player+obX).w,d0
00014010 9068 0008                  		sub.w	obX(a0),d0
00014014 6400                       		bcc.s	@isleft
00014016 4440                       		neg.w	d0
00014018                            
00014018                            	@isleft:
00014018 0C40 0060                  		cmpi.w	#$60,d0		; is Sonic within $60 pixels?
0001401C 6400                       		bcc.s	@outofrange	; if not, branch
0001401E 3038 D00C                  		move.w	(v_player+obY).w,d0
00014022 9068 000C                  		sub.w	obY(a0),d0
00014026 6400                       		bcc.s	@isabove
00014028 4440                       		neg.w	d0
0001402A                            
0001402A                            	@isabove:
0001402A 0C40 0060                  		cmpi.w	#$60,d0
0001402E 6400                       		bcc.s	@outofrange
00014030 4A78 FE08                  		tst.w	(v_debuguse).w
00014034 6600                       		bne.s	@outofrange
00014036                            
00014036 117C 0004 0025             		move.b	#4,ob2ndRout(a0)
0001403C 317C 008F 0030             		move.w	#143,bom_time(a0) ; set fuse time
00014042 4268 0010                  		clr.w	obVelX(a0)
00014046 117C 0002 001C             		move.b	#2,obAnim(a0)	; use activated animation
0001404C 6100 BEE0                  		bsr.w	FindNextFreeObj
00014050 6600                       		bne.s	@outofrange
00014052 12BC 005F                  		move.b	#id_Bomb,0(a1)	; load fuse object
00014056 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001405C 3368 000C 000C             		move.w	obY(a0),obY(a1)
00014062 3368 000C 0034             		move.w	obY(a0),bom_origY(a1)
00014068 1368 0022 0022             		move.b	obStatus(a0),obStatus(a1)
0001406E 137C 0004 0028             		move.b	#4,obSubtype(a1)
00014074 137C 0003 001C             		move.b	#3,obAnim(a1)
0001407A 337C 0010 0012             		move.w	#$10,obVelY(a1)
00014080 0828 0001 0022             		btst	#1,obStatus(a0)	; is bomb upside-down?
00014086 6700                       		beq.s	@normal		; if not, branch
00014088 4469 0012                  		neg.w	obVelY(a1)	; reverse direction for fuse
0001408C                            
0001408C                            	@normal:
0001408C 337C 008F 0030             		move.w	#143,bom_time(a1) ; set fuse time
00014092 2348 003C                  		move.l	a0,bom_parent(a1)
00014096                            
00014096                            @outofrange:
00014096 4E75                       		rts	
00014098                            ; ===========================================================================
00014098                            
00014098                            Bom_Display:	; Routine 4
00014098 6100                       		bsr.s	loc_11B70
0001409A 43F9 0000 0000             		lea	(Ani_Bomb).l,a1
000140A0 6100 8AAC                  		bsr.w	AnimateSprite
000140A4 6000 D970                  		bra.w	RememberState
000140A8                            ; ===========================================================================
000140A8                            
000140A8                            loc_11B70:
000140A8 5368 0030                  		subq.w	#1,bom_time(a0)
000140AC 6B00                       		bmi.s	loc_11B7C
000140AE 6100 B9C8                  		bsr.w	SpeedToPos
000140B2 4E75                       		rts	
000140B4                            ; ===========================================================================
000140B4                            
000140B4                            loc_11B7C:
000140B4 4268 0030                  		clr.w	bom_time(a0)
000140B8 4228 0024                  		clr.b	obRoutine(a0)
000140BC 3168 0034 000C             		move.w	bom_origY(a0),obY(a0)
000140C2 7203                       		moveq	#3,d1
000140C4 2248                       		movea.l	a0,a1
000140C6 45F9 0000 0000             		lea	(Bom_ShrSpeed).l,a2 ; load shrapnel speed data
000140CC 6000                       		bra.s	@makeshrapnel
000140CE                            ; ===========================================================================
000140CE                            
000140CE                            	@loop:
000140CE 6100 BE5E                  		bsr.w	FindNextFreeObj
000140D2 6600                       		bne.s	@fail
000140D4                            
000140D4                            @makeshrapnel:
000140D4 12BC 005F                  		move.b	#id_Bomb,0(a1)	; load shrapnel	object
000140D8 3368 0008 0008             		move.w	obX(a0),obX(a1)
000140DE 3368 000C 000C             		move.w	obY(a0),obY(a1)
000140E4 137C 0006 0028             		move.b	#6,obSubtype(a1)
000140EA 137C 0004 001C             		move.b	#4,obAnim(a1)
000140F0 335A 0010                  		move.w	(a2)+,obVelX(a1)
000140F4 335A 0012                  		move.w	(a2)+,obVelY(a1)
000140F8 137C 0098 0020             		move.b	#$98,obColType(a1)
000140FE 08E9 0007 0001             		bset	#7,obRender(a1)
00014104                            
00014104                            	@fail:
00014104 51C9 FFC8                  		dbf	d1,@loop	; repeat 3 more	times
00014108                            
00014108 117C 0006 0024             		move.b	#6,obRoutine(a0)
0001410E                            
0001410E                            Bom_End:	; Routine 6
0001410E 6100 B968                  		bsr.w	SpeedToPos
00014112 0668 0018 0012             		addi.w	#$18,obVelY(a0)
00014118 43F9 0000 0000             		lea	(Ani_Bomb).l,a1
0001411E 6100 8A2E                  		bsr.w	AnimateSprite
00014122 4A28 0001                  		tst.b	obRender(a0)
00014126 6A00 B9A4                  		bpl.w	DeleteObject
0001412A 6000 B960                  		bra.w	DisplaySprite
0001412E                            ; ===========================================================================
0001412E FE00 FD00 FF00 FE00 0200+  Bom_ShrSpeed:	dc.w -$200, -$300, -$100, -$200, $200, -$300, $100, -$200
0001412E FE00 FD00 FF00 FE00 0200+  Bom_ShrSpeed:	dc.w -$200, -$300, -$100, -$200, $200, -$300, $100, -$200
0001413E                            		include	"_anim\Bomb Enemy.asm"
0001413E                            ; ---------------------------------------------------------------------------
0001413E                            ; Animation script - Bomb enemy
0001413E                            ; ---------------------------------------------------------------------------
0001413E 0000                       Ani_Bomb:	dc.w @stand-Ani_Bomb
00014140 0000                       		dc.w @walk-Ani_Bomb
00014142 0000                       		dc.w @activated-Ani_Bomb
00014144 0000                       		dc.w @fuse-Ani_Bomb
00014146 0000                       		dc.w @shrapnel-Ani_Bomb
00014148 1301 00FF                  @stand:		dc.b $13, 1, 0,	afEnd
0001414C 1305 0403 02FF             @walk:		dc.b $13, 5, 4,	3, 2, afEnd
00014152 1307 06FF                  @activated:	dc.b $13, 7, 6,	afEnd
00014156 0308 09FF                  @fuse:		dc.b 3,	8, 9, afEnd
0001415A 030A 0BFF                  @shrapnel:	dc.b 3,	$A, $B,	afEnd
0001415E                            		even
0001415E                            		even
0001415E                            Map_Bomb:	include	"_maps\Bomb Enemy.asm"
0001415E                            ; ---------------------------------------------------------------------------
0001415E                            ; Sprite mappings - walking bomb enemy (SLZ, SBZ)
0001415E                            ; ---------------------------------------------------------------------------
0001415E                            Map_Bomb_internal:
0001415E 0000                       		dc.w @stand1-Map_Bomb_internal
00014160 0000                       		dc.w @stand2-Map_Bomb_internal
00014162 0000                       		dc.w @walk1-Map_Bomb_internal
00014164 0000                       		dc.w @walk2-Map_Bomb_internal
00014166 0000                       		dc.w @walk3-Map_Bomb_internal
00014168 0000                       		dc.w @walk4-Map_Bomb_internal
0001416A 0000                       		dc.w @activate1-Map_Bomb_internal
0001416C 0000                       		dc.w @activate2-Map_Bomb_internal
0001416E 0000                       		dc.w @fuse1-Map_Bomb_internal
00014170 0000                       		dc.w @fuse2-Map_Bomb_internal
00014172 0000                       		dc.w @shrapnel1-Map_Bomb_internal
00014174 0000                       		dc.w @shrapnel2-Map_Bomb_internal
00014176 03                         @stand1:	dc.b 3
00014177 F10A 0000 F4               		dc.b $F1, $A, 0, 0, $F4	; bomb standing still
0001417C 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
00014181 E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
00014186 03                         @stand2:	dc.b 3
00014187 F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
0001418C 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
00014191 E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
00014196 03                         @walk1:		dc.b 3
00014197 F00A 0000 F4               		dc.b $F0, $A, 0, 0, $F4	; bomb walking
0001419C 0808 0015 F4               		dc.b 8,	8, 0, $15, $F4
000141A1 E601 0021 FC               		dc.b $E6, 1, 0,	$21, $FC
000141A6 03                         @walk2:		dc.b 3
000141A7 F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
000141AC 0908 0018 F4               		dc.b 9,	8, 0, $18, $F4
000141B1 E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
000141B6 03                         @walk3:		dc.b 3
000141B7 F00A 0000 F4               		dc.b $F0, $A, 0, 0, $F4
000141BC 0808 001B F4               		dc.b 8,	8, 0, $1B, $F4
000141C1 E601 0021 FC               		dc.b $E6, 1, 0,	$21, $FC
000141C6 03                         @walk4:		dc.b 3
000141C7 F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
000141CC 0908 001E F4               		dc.b 9,	8, 0, $1E, $F4
000141D1 E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
000141D6 02                         @activate1:	dc.b 2
000141D7 F10A 0000 F4               		dc.b $F1, $A, 0, 0, $F4	; bomb during detonation countdown
000141DC 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
000141E1 02                         @activate2:	dc.b 2
000141E2 F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
000141E7 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
000141EC 01                         @fuse1:		dc.b 1
000141ED E701 0023 FC               		dc.b $E7, 1, 0,	$23, $FC ; fuse	(just before it	explodes)
000141F2 01                         @fuse2:		dc.b 1
000141F3 E701 0025 FC               		dc.b $E7, 1, 0,	$25, $FC
000141F8 01                         @shrapnel1:	dc.b 1
000141F9 FC00 0027 FC               		dc.b $FC, 0, 0,	$27, $FC ; shrapnel (after it exploded)
000141FE 01                         @shrapnel2:	dc.b 1
000141FF FC00 0028 FC               		dc.b $FC, 0, 0,	$28, $FC
00014204                            		even
00014204                            		even
00014204                            
00014204                            		include	"_incObj\60 Orbinaut.asm"
00014204                            ; ---------------------------------------------------------------------------
00014204                            ; Object 60 - Orbinaut enemy (LZ, SLZ, SBZ)
00014204                            ; ---------------------------------------------------------------------------
00014204                            
00014204                            Orbinaut:
00014204 7000                       		moveq	#0,d0
00014206 1028 0024                  		move.b	obRoutine(a0),d0
0001420A 323B 0000                  		move.w	Orb_Index(pc,d0.w),d1
0001420E 4EFB 1000                  		jmp	Orb_Index(pc,d1.w)
00014212                            ; ===========================================================================
00014212 0000                       Orb_Index:	dc.w Orb_Main-Orb_Index
00014214 0000                       		dc.w Orb_ChkSonic-Orb_Index
00014216 0000                       		dc.w Orb_Display-Orb_Index
00014218 0000                       		dc.w Orb_MoveOrb-Orb_Index
0001421A 0000                       		dc.w Orb_ChkDel2-Orb_Index
0001421C                            
0001421C =0000003C                  orb_parent:	equ $3C		; address of parent object
0001421C                            ; ===========================================================================
0001421C                            
0001421C                            Orb_Main:	; Routine 0
0001421C 217C 0000 0000 0004        		move.l	#Map_Orb,obMap(a0)
00014224 317C 0429 0002             		move.w	#$429,obGfx(a0)	; SBZ specific code
0001422A 0C38 0005 FE10             		cmpi.b	#id_SBZ,(v_zone).w ; check if level is SBZ
00014230 6700                       		beq.s	@isscrap
00014232 317C 2429 0002             		move.w	#$2429,obGfx(a0) ; SLZ specific code
00014238                            
00014238                            	@isscrap:
00014238 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w ; check if level is LZ
0001423E 6600                       		bne.s	@notlabyrinth
00014240 317C 0467 0002             		move.w	#$467,obGfx(a0)	; LZ specific code
00014246                            
00014246                            	@notlabyrinth:
00014246 0028 0004 0001             		ori.b	#4,obRender(a0)
0001424C 317C 0200 0018             		move.w	#$200,obPriority(a0)
00014252 117C 000B 0020             		move.b	#$B,obColType(a0)
00014258 117C 000C 0014             		move.b	#$C,obActWid(a0)
0001425E 7400                       		moveq	#0,d2
00014260 45E8 0037                  		lea	$37(a0),a2
00014264 264A                       		movea.l	a2,a3
00014266 524A                       		addq.w	#1,a2
00014268 7203                       		moveq	#3,d1
0001426A                            
0001426A                            @makesatellites:
0001426A 6100 BCC2                  		bsr.w	FindNextFreeObj
0001426E 6600                       		bne.s	@fail
00014270 5213                       		addq.b	#1,(a3)
00014272 3A09                       		move.w	a1,d5
00014274 0445 D000                  		subi.w	#$D000,d5
00014278 EC4D                       		lsr.w	#6,d5
0001427A 0245 007F                  		andi.w	#$7F,d5
0001427E 14C5                       		move.b	d5,(a2)+
00014280 1290                       		move.b	0(a0),0(a1)	; load spiked orb object
00014282 137C 0006 0024             		move.b	#6,obRoutine(a1) ; use Orb_MoveOrb routine
00014288 2368 0004 0004             		move.l	obMap(a0),obMap(a1)
0001428E 3368 0002 0002             		move.w	obGfx(a0),obGfx(a1)
00014294 0029 0004 0001             		ori.b	#4,obRender(a1)
0001429A 337C 0200 0018             		move.w	#$200,obPriority(a1)
000142A0 137C 0008 0014             		move.b	#8,obActWid(a1)
000142A6 137C 0003 001A             		move.b	#3,obFrame(a1)
000142AC 137C 0098 0020             		move.b	#$98,obColType(a1)
000142B2 1342 0026                  		move.b	d2,obAngle(a1)
000142B6 0602 0040                  		addi.b	#$40,d2
000142BA 2348 003C                  		move.l	a0,orb_parent(a1)
000142BE 51C9 FFAA                  		dbf	d1,@makesatellites ; repeat sequence 3 more times
000142C2                            
000142C2                            	@fail:
000142C2 7001                       		moveq	#1,d0
000142C4 0828 0000 0022             		btst	#0,obStatus(a0)	; is orbinaut facing left?
000142CA 6700                       		beq.s	@noflip		; if not, branch
000142CC 4440                       		neg.w	d0
000142CE                            
000142CE                            	@noflip:
000142CE 1140 0036                  		move.b	d0,$36(a0)
000142D2 1168 0028 0024             		move.b	obSubtype(a0),obRoutine(a0) ; if type is 02, skip Orb_ChkSonic
000142D8 5428 0024                  		addq.b	#2,obRoutine(a0)
000142DC 317C FFC0 0010             		move.w	#-$40,obVelX(a0) ; move orbinaut to the left
000142E2 0828 0000 0022             		btst	#0,obStatus(a0)	; is orbinaut facing left??
000142E8 6700                       		beq.s	@noflip2	; if not, branch
000142EA 4468 0010                  		neg.w	obVelX(a0)	; move orbinaut	to the right
000142EE                            
000142EE                            	@noflip2:
000142EE 4E75                       		rts	
000142F0                            ; ===========================================================================
000142F0                            
000142F0                            Orb_ChkSonic:	; Routine 2
000142F0 3038 D008                  		move.w	(v_player+obX).w,d0
000142F4 9068 0008                  		sub.w	obX(a0),d0	; is Sonic to the right of the orbinaut?
000142F8 6400                       		bcc.s	@isright	; if yes, branch
000142FA 4440                       		neg.w	d0
000142FC                            
000142FC                            	@isright:
000142FC 0C40 00A0                  		cmpi.w	#$A0,d0		; is Sonic within $A0 pixels of	orbinaut?
00014300 6400                       		bcc.s	@animate	; if not, branch
00014302 3038 D00C                  		move.w	(v_player+obY).w,d0
00014306 9068 000C                  		sub.w	obY(a0),d0	; is Sonic above the orbinaut?
0001430A 6400                       		bcc.s	@isabove	; if yes, branch
0001430C 4440                       		neg.w	d0
0001430E                            
0001430E                            	@isabove:
0001430E 0C40 0050                  		cmpi.w	#$50,d0		; is Sonic within $50 pixels of	orbinaut?
00014312 6400                       		bcc.s	@animate	; if not, branch
00014314 4A78 FE08                  		tst.w	(v_debuguse).w	; is debug mode	on?
00014318 6600                       		bne.s	@animate	; if yes, branch
0001431A 117C 0001 001C             		move.b	#1,obAnim(a0)	; use "angry" animation
00014320                            
00014320                            @animate:
00014320 43F9 0000 0000             		lea	(Ani_Orb).l,a1
00014326 6100 8826                  		bsr.w	AnimateSprite
0001432A 6000 0000                  		bra.w	Orb_ChkDel
0001432E                            ; ===========================================================================
0001432E                            
0001432E                            Orb_Display:	; Routine 4
0001432E 6100 B748                  		bsr.w	SpeedToPos
00014332                            
00014332                            Orb_ChkDel:
00014350 6000 B73A                  		bra.w	DisplaySprite
00014354                            
00014354                            @chkgone:
00014354 45F8 FC00                  		lea	(v_objstate).w,a2
00014358 7000                       		moveq	#0,d0
0001435A 1028 0023                  		move.b	obRespawnNo(a0),d0
0001435E 6700                       		beq.s	loc_11E34
00014360 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00014366                            
00014366                            loc_11E34:
00014366 45E8 0037                  		lea	$37(a0),a2
0001436A 7400                       		moveq	#0,d2
0001436C 141A                       		move.b	(a2)+,d2
0001436E 5342                       		subq.w	#1,d2
00014370 6500                       		bcs.s	Orb_Delete
00014372                            
00014372                            loc_11E40:
00014372 7000                       		moveq	#0,d0
00014374 101A                       		move.b	(a2)+,d0
00014376 ED48                       		lsl.w	#6,d0
00014378 0680 00FF D000             		addi.l	#v_objspace&$FFFFFF,d0
0001437E 2240                       		movea.l	d0,a1
00014380 6100 B74C                  		bsr.w	DeleteChild
00014384 51CA FFEC                  		dbf	d2,loc_11E40
00014388                            
00014388                            Orb_Delete:
00014388 6000 B742                  		bra.w	DeleteObject
0001438C                            ; ===========================================================================
0001438C                            
0001438C                            Orb_MoveOrb:	; Routine 6
0001438C 2268 003C                  		movea.l	orb_parent(a0),a1
00014390 0C11 0060                  		cmpi.b	#id_Orbinaut,0(a1) ; does parent object still exist?
00014394 6600 B736                  		bne.w	DeleteObject	; if not, delete
00014398 0C29 0002 001A             		cmpi.b	#2,obFrame(a1)	; is orbinaut angry?
0001439E 6600                       		bne.s	@circle		; if not, branch
000143A0 0C28 0040 0026             		cmpi.b	#$40,obAngle(a0) ; is spikeorb directly under the orbinaut?
000143A6 6600                       		bne.s	@circle		; if not, branch
000143A8 5428 0024                  		addq.b	#2,obRoutine(a0)
000143AC 5329 0037                  		subq.b	#1,$37(a1)
000143B0 6600                       		bne.s	@fire
000143B2 5429 0024                  		addq.b	#2,obRoutine(a1)
000143B6                            
000143B6                            	@fire:
000143B6 317C FE00 0010             		move.w	#-$200,obVelX(a0) ; move orb to the left (quickly)
000143BC 0829 0000 0022             		btst	#0,obStatus(a1)
000143C2 6700                       		beq.s	@noflip
000143C4 4468 0010                  		neg.w	obVelX(a0)
000143C8                            
000143C8                            	@noflip:
000143C8 6000 B6C2                  		bra.w	DisplaySprite
000143CC                            ; ===========================================================================
000143CC                            
000143CC                            @circle:
000143CC 1028 0026                  		move.b	obAngle(a0),d0
000143D0 4EB9 0000 3A82             		jsr	(CalcSine).l
000143D6 E841                       		asr.w	#4,d1
000143D8 D269 0008                  		add.w	obX(a1),d1
000143DC 3141 0008                  		move.w	d1,obX(a0)
000143E0 E840                       		asr.w	#4,d0
000143E2 D069 000C                  		add.w	obY(a1),d0
000143E6 3140 000C                  		move.w	d0,obY(a0)
000143EA 1029 0036                  		move.b	$36(a1),d0
000143EE D128 0026                  		add.b	d0,obAngle(a0)
000143F2 6000 B698                  		bra.w	DisplaySprite
000143F6                            ; ===========================================================================
000143F6                            
000143F6                            Orb_ChkDel2:	; Routine 8
000143F6 6100 B680                  		bsr.w	SpeedToPos
000143FA 4A28 0001                  		tst.b	obRender(a0)
000143FE 6A00 B6CC                  		bpl.w	DeleteObject
00014402 6000 B688                  		bra.w	DisplaySprite
00014402 6000 B688                  		bra.w	DisplaySprite
00014406                            		include	"_anim\Orbinaut.asm"
00014406                            ; ---------------------------------------------------------------------------
00014406                            ; Animation script - Orbinaut enemy
00014406                            ; ---------------------------------------------------------------------------
00014406 0000                       Ani_Orb:	dc.w @normal-Ani_Orb
00014408 0000                       		dc.w @angers-Ani_Orb
0001440A 0F00 FF                    @normal:	dc.b $F, 0, afEnd
0001440E 00                         		even
0001440E 0F01 02FE 01               @angers:	dc.b $F, 1, 2, afBack, 1
00014414 00                         		even
00014414 00                         		even
00014414                            Map_Orb:	include	"_maps\Orbinaut.asm"
00014414                            ; ---------------------------------------------------------------------------
00014414                            ; Sprite mappings - Orbinaut enemy (LZ,	SLZ, SBZ)
00014414                            ; ---------------------------------------------------------------------------
00014414                            Map_Orb_internal:
00014414 0000                       		dc.w @normal-Map_Orb_internal
00014416 0000                       		dc.w @medium-Map_Orb_internal
00014418 0000                       		dc.w @angry-Map_Orb_internal
0001441A 0000                       		dc.w @spikeball-Map_Orb_internal
0001441C 01                         @normal:	dc.b 1
0001441D F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
00014422 01                         @medium:	dc.b 1
00014423 F40A 2009 F4               		dc.b $F4, $A, $20, 9, $F4
00014428 01                         @angry:		dc.b 1
00014429 F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
0001442E 01                         @spikeball:	dc.b 1
0001442F F805 001B F8               		dc.b $F8, 5, 0,	$1B, $F8
00014434                            		even
00014434                            		even
00014434                            
00014434                            		include	"_incObj\16 Harpoon.asm"
00014434                            ; ---------------------------------------------------------------------------
00014434                            ; Object 16 - harpoon (LZ)
00014434                            ; ---------------------------------------------------------------------------
00014434                            
00014434                            Harpoon:
00014434 7000                       		moveq	#0,d0
00014436 1028 0024                  		move.b	obRoutine(a0),d0
0001443A 323B 0000                  		move.w	Harp_Index(pc,d0.w),d1
0001443E 4EFB 1000                  		jmp	Harp_Index(pc,d1.w)
00014442                            ; ===========================================================================
00014442 0000                       Harp_Index:	dc.w Harp_Main-Harp_Index
00014444 0000                       		dc.w Harp_Move-Harp_Index
00014446 0000                       		dc.w Harp_Wait-Harp_Index
00014448                            
00014448 =00000030                  harp_time:	equ $30		; time between stabbing/retracting
00014448                            ; ===========================================================================
00014448                            
00014448                            Harp_Main:	; Routine 0
00014448 5428 0024                  		addq.b	#2,obRoutine(a0)
0001444C 217C 0000 0000 0004        		move.l	#Map_Harp,obMap(a0)
00014454 317C 03CC 0002             		move.w	#$3CC,obGfx(a0)
0001445A 0028 0004 0001             		ori.b	#4,obRender(a0)
00014460 317C 0200 0018             		move.w	#$200,obPriority(a0)
00014466 1168 0028 001C             		move.b	obSubtype(a0),obAnim(a0) ; get type (vert/horiz)
0001446C 117C 0014 0014             		move.b	#$14,obActWid(a0)
00014472 317C 003C 0030             		move.w	#60,harp_time(a0) ; set time to 1 second
00014478                            
00014478                            Harp_Move:	; Routine 2
00014478 43F9 0000 0000             		lea	(Ani_Harp).l,a1
0001447E 6100 86CE                  		bsr.w	AnimateSprite
00014482 7000                       		moveq	#0,d0
00014484 1028 001A                  		move.b	obFrame(a0),d0	; get frame number
00014488 117B 0000 0020             		move.b	@types(pc,d0.w),obColType(a0) ; get collision type
0001448E 6000 D586                  		bra.w	RememberState
00014492                            
00014492                            	@types:
00014492 9B9C 9D9E 9FA0             		dc.b $9B, $9C, $9D, $9E, $9F, $A0
00014498                            		even
00014498                            
00014498                            Harp_Wait:	; Routine 4
00014498 5368 0030                  		subq.w	#1,harp_time(a0) ; decrement timer
0001449C 6A00                       		bpl.s	@chkdel		; branch if time remains
0001449E 317C 003C 0030             		move.w	#60,harp_time(a0) ; reset timer
000144A4 5528 0024                  		subq.b	#2,obRoutine(a0) ; run "Harp_Move" subroutine
000144A8 0868 0000 001C             		bchg	#0,obAnim(a0)	; reverse animation
000144AE                            
000144AE                            	@chkdel:
000144AE 6000 D566                  		bra.w	RememberState
000144AE 6000 D566                  		bra.w	RememberState
000144B2                            		include	"_anim\Harpoon.asm"
000144B2                            ; ---------------------------------------------------------------------------
000144B2                            ; Animation script - harpoon (LZ)
000144B2                            ; ---------------------------------------------------------------------------
000144B2 0000                       Ani_Harp:	dc.w @h_extending-Ani_Harp
000144B4 0000                       		dc.w @h_retracting-Ani_Harp
000144B6 0000                       		dc.w @v_extending-Ani_Harp
000144B8 0000                       		dc.w @v_retracting-Ani_Harp
000144BA 0301 02FC                  @h_extending:	dc.b 3,	1, 2, afRoutine
000144BE 0301 00FC                  @h_retracting:	dc.b 3,	1, 0, afRoutine
000144C2 0304 05FC                  @v_extending:	dc.b 3,	4, 5, afRoutine
000144C6 0304 03FC                  @v_retracting:	dc.b 3,	4, 3, afRoutine
000144CA                            		even
000144CA                            		even
000144CA                            Map_Harp:	include	"_maps\Harpoon.asm"
000144CA                            ; --------------------------------------------------------------------------------
000144CA                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
000144CA                            ; --------------------------------------------------------------------------------
000144CA                            
000144CA                            SME_JPFHb:	
000144CA 0000 0000                  		dc.w SME_JPFHb_C-SME_JPFHb, SME_JPFHb_12-SME_JPFHb	
000144CE 0000 0000                  		dc.w SME_JPFHb_18-SME_JPFHb, SME_JPFHb_23-SME_JPFHb	
000144D2 0000 0000                  		dc.w SME_JPFHb_29-SME_JPFHb, SME_JPFHb_2F-SME_JPFHb	
000144D6 01                         SME_JPFHb_C:	dc.b 1	
000144D7 FC04 2000 F8               		dc.b $FC, 4, $20, 0, $F8	
000144DC 01                         SME_JPFHb_12:	dc.b 1	
000144DD FC0C 2002 F8               		dc.b $FC, $C, $20, 2, $F8	
000144E2 02                         SME_JPFHb_18:	dc.b 2	
000144E3 FC08 2006 F8               		dc.b $FC, 8, $20, 6, $F8	
000144E8 FC08 2003 10               		dc.b $FC, 8, $20, 3, $10	
000144ED 01                         SME_JPFHb_23:	dc.b 1	
000144EE F801 2009 FC               		dc.b $F8, 1, $20, 9, $FC	
000144F3 01                         SME_JPFHb_29:	dc.b 1	
000144F4 E803 200B FC               		dc.b $E8, 3, $20, $B, $FC	
000144F9 02                         SME_JPFHb_2F:	dc.b 2	
000144FA D802 200B FC               		dc.b $D8, 2, $20, $B, $FC	
000144FF F002 200F FC               		dc.b $F0, 2, $20, $F, $FC	
00014504                            		even
00014504                            		even
00014504                            		include	"_incObj\61 LZ Blocks.asm"
00014504                            ; ---------------------------------------------------------------------------
00014504                            ; Object 61 - blocks (LZ)
00014504                            ; ---------------------------------------------------------------------------
00014504                            
00014504                            LabyrinthBlock:
00014504 7000                       		moveq	#0,d0
00014506 1028 0024                  		move.b	obRoutine(a0),d0
0001450A 323B 0000                  		move.w	LBlk_Index(pc,d0.w),d1
0001450E 4EFB 1000                  		jmp	LBlk_Index(pc,d1.w)
00014512                            ; ===========================================================================
00014512 0000                       LBlk_Index:	dc.w LBlk_Main-LBlk_Index
00014514 0000                       		dc.w LBlk_Action-LBlk_Index
00014516                            
00014516 1010                       LBlk_Var:	dc.b $10, $10		; width, height
00014518 200C                       		dc.b $20, $C
0001451A 1010                       		dc.b $10, $10
0001451C 1010                       		dc.b $10, $10
0001451E                            
0001451E =00000016                  lblk_height:	equ $16		; block height
0001451E =00000034                  lblk_origX:	equ $34		; original x-axis position
0001451E =00000030                  lblk_origY:	equ $30		; original y-axis position
0001451E =00000036                  lblk_time:	equ $36		; time delay for block movement
0001451E =00000038                  lblk_untouched:	equ $38		; flag block as untouched
0001451E                            ; ===========================================================================
0001451E                            
0001451E                            LBlk_Main:	; Routine 0
0001451E 5428 0024                  		addq.b	#2,obRoutine(a0)
00014522 217C 0000 0000 0004        		move.l	#Map_LBlock,obMap(a0)
0001452A 317C 43E6 0002             		move.w	#$43E6,obGfx(a0)
00014530 117C 0004 0001             		move.b	#4,obRender(a0)
00014536 317C 0180 0018             		move.w	#$180,obPriority(a0)
0001453C 7000                       		moveq	#0,d0
0001453E 1028 0028                  		move.b	obSubtype(a0),d0 ; get block type
00014542 E648                       		lsr.w	#3,d0		; read only the 1st digit
00014544 0240 000E                  		andi.w	#$E,d0
00014548 45FB 00CC                  		lea	LBlk_Var(pc,d0.w),a2
0001454C 115A 0014                  		move.b	(a2)+,obActWid(a0) ; set width
00014550 1152 0016                  		move.b	(a2),lblk_height(a0) ; set height
00014554 E248                       		lsr.w	#1,d0
00014556 1140 001A                  		move.b	d0,obFrame(a0)
0001455A 3168 0008 0034             		move.w	obX(a0),lblk_origX(a0)
00014560 3168 000C 0030             		move.w	obY(a0),lblk_origY(a0)
00014566 1028 0028                  		move.b	obSubtype(a0),d0 ; get block type
0001456A 0200 000F                  		andi.b	#$F,d0		; read only the 2nd digit
0001456E 6700                       		beq.s	LBlk_Action	; branch if 0
00014570 0C00 0007                  		cmpi.b	#7,d0
00014574 6700                       		beq.s	LBlk_Action	; branch if 7
00014576 117C 0001 0038             		move.b	#1,lblk_untouched(a0)
0001457C                            
0001457C                            LBlk_Action:	; Routine 2
0001457C 3F28 0008                  		move.w	obX(a0),-(sp)
00014580 7000                       		moveq	#0,d0
00014582 1028 0028                  		move.b	obSubtype(a0),d0
00014586 0240 000F                  		andi.w	#$F,d0
0001458A D040                       		add.w	d0,d0
0001458C 323B 0000                  		move.w	@index(pc,d0.w),d1
00014590 4EBB 1000                  		jsr	@index(pc,d1.w)
00014594 381F                       		move.w	(sp)+,d4
00014596 4A28 0001                  		tst.b	obRender(a0)
0001459A 6A00                       		bpl.s	@chkdel
0001459C 7200                       		moveq	#0,d1
0001459E 1228 0014                  		move.b	obActWid(a0),d1
000145A2 0641 000B                  		addi.w	#$B,d1
000145A6 7400                       		moveq	#0,d2
000145A8 1428 0016                  		move.b	lblk_height(a0),d2
000145AC 3602                       		move.w	d2,d3
000145AE 5243                       		addq.w	#1,d3
000145B0 6100 D8FC                  		bsr.w	SolidObject
000145B4 1144 003F                  		move.b	d4,$3F(a0)
000145B8 6100 0000                  		bsr.w	loc_12180
000145BC                            
000145BC                            @chkdel:
000145DA 6000 B4B0                  		bra.w	DisplaySprite
000145DE                            ; ===========================================================================
000145DE 0000 0000                  @index:		dc.w @type00-@index, @type01-@index
000145E2 0000 0000                  		dc.w @type02-@index, @type03-@index
000145E6 0000 0000                  		dc.w @type04-@index, @type05-@index
000145EA 0000 0000                  		dc.w @type06-@index, @type07-@index
000145EE                            ; ===========================================================================
000145EE                            
000145EE                            @type00:
000145EE 4E75                       		rts	
000145F0                            ; ===========================================================================
000145F0                            
000145F0                            @type01:
000145F0                            @type03:
000145F0 4A68 0036                  		tst.w	lblk_time(a0)	; does time remain?
000145F4 6600                       		bne.s	@wait01		; if yes, branch
000145F6 0828 0003 0022             		btst	#3,obStatus(a0)	; is Sonic standing on the object?
000145FC 6700                       		beq.s	@donothing01	; if not, branch
000145FE 317C 001E 0036             		move.w	#30,lblk_time(a0) ; wait for half second
00014604                            
00014604                            	@donothing01:
00014604 4E75                       		rts	
00014606                            ; ===========================================================================
00014606                            
00014606                            	@wait01:
00014606 5368 0036                  		subq.w	#1,lblk_time(a0); decrement waiting time
0001460A 66F8                       		bne.s	@donothing01	; if time remains, branch
0001460C 5228 0028                  		addq.b	#1,obSubtype(a0) ; goto @type02 or @type04
00014610 4228 0038                  		clr.b	lblk_untouched(a0) ; flag block as touched
00014614 4E75                       		rts	
00014616                            ; ===========================================================================
00014616                            
00014616                            @type02:
00014616                            @type06:
00014616 6100 B460                  		bsr.w	SpeedToPos
0001461A 5068 0012                  		addq.w	#8,obVelY(a0)	; make block fall
0001461E 6100 0000                  		bsr.w	ObjFloorDist
00014622 4A41                       		tst.w	d1		; has block hit the floor?
00014624 6A00 0000                  		bpl.w	@nofloor02	; if not, branch
00014628 5241                       		addq.w	#1,d1
0001462A D368 000C                  		add.w	d1,obY(a0)
0001462E 4268 0012                  		clr.w	obVelY(a0)	; stop when it touches the floor
00014632 4228 0028                  		clr.b	obSubtype(a0)	; set type to 00 (non-moving type)
00014636                            
00014636                            	@nofloor02:
00014636 4E75                       		rts	
00014638                            ; ===========================================================================
00014638                            
00014638                            @type04:
00014638 6100 B43E                  		bsr.w	SpeedToPos
0001463C 5168 0012                  		subq.w	#8,obVelY(a0)	; make block rise
00014640 6100 0000                  		bsr.w	ObjHitCeiling
00014644 4A41                       		tst.w	d1		; has block hit the ceiling?
00014646 6A00 0000                  		bpl.w	@noceiling04	; if not, branch
0001464A 9368 000C                  		sub.w	d1,obY(a0)
0001464E 4268 0012                  		clr.w	obVelY(a0)	; stop when it touches the ceiling
00014652 4228 0028                  		clr.b	obSubtype(a0)	; set type to 00 (non-moving type)
00014656                            
00014656                            	@noceiling04:
00014656 4E75                       		rts	
00014658                            ; ===========================================================================
00014658                            
00014658                            @type05:
00014658 0C28 0001 003F             		cmpi.b	#1,$3F(a0)	; is Sonic touching the	block?
0001465E 6600                       		bne.s	@notouch05	; if not, branch
00014660 5228 0028                  		addq.b	#1,obSubtype(a0) ; goto @type06
00014664 4228 0038                  		clr.b	lblk_untouched(a0)
00014668                            
00014668                            	@notouch05:
00014668 4E75                       		rts	
0001466A                            ; ===========================================================================
0001466A                            
0001466A                            @type07:
0001466A 3038 F646                  		move.w	(v_waterpos1).w,d0
0001466E 9068 000C                  		sub.w	obY(a0),d0	; is block level with water?
00014672 6700                       		beq.s	@stop07		; if yes, branch
00014674 6400                       		bcc.s	@fall07		; branch if block is above water
00014676 0C40 FFFE                  		cmpi.w	#-2,d0
0001467A 6C00                       		bge.s	@loc_1214E
0001467C 70FE                       		moveq	#-2,d0
0001467E                            
0001467E                            	@loc_1214E:
0001467E D168 000C                  		add.w	d0,obY(a0)	; make the block rise with water level
00014682 6100 0000                  		bsr.w	ObjHitCeiling
00014686 4A41                       		tst.w	d1		; has block hit the ceiling?
00014688 6A00 0000                  		bpl.w	@noceiling07	; if not, branch
0001468C 9368 000C                  		sub.w	d1,obY(a0)	; stop block
00014690                            
00014690                            	@noceiling07:
00014690 4E75                       		rts	
00014692                            ; ===========================================================================
00014692                            
00014692                            @fall07:
00014692 0C40 0002                  		cmpi.w	#2,d0
00014696 6F00                       		ble.s	@loc_1216A
00014698 7002                       		moveq	#2,d0
0001469A                            
0001469A                            	@loc_1216A:
0001469A D168 000C                  		add.w	d0,obY(a0)	; make the block sink with water level
0001469E 6100 0000                  		bsr.w	ObjFloorDist
000146A2 4A41                       		tst.w	d1
000146A4 6A00 0000                  		bpl.w	@stop07
000146A8 5241                       		addq.w	#1,d1
000146AA D368 000C                  		add.w	d1,obY(a0)
000146AE                            
000146AE                            	@stop07:
000146AE 4E75                       		rts	
000146B0                            ; ===========================================================================
000146B0                            
000146B0                            loc_12180:
000146B0 4A28 0038                  		tst.b	lblk_untouched(a0) ; has block been stood on or touched?
000146B4 6700                       		beq.s	locret_121C0	; if yes, branch
000146B6 0828 0003 0022             		btst	#3,obStatus(a0)	; is Sonic standing on it now?
000146BC 6600                       		bne.s	loc_1219A	; if yes, branch
000146BE 4A28 003E                  		tst.b	$3E(a0)
000146C2 6700                       		beq.s	locret_121C0
000146C4 5928 003E                  		subq.b	#4,$3E(a0)
000146C8 6000                       		bra.s	loc_121A6
000146CA                            ; ===========================================================================
000146CA                            
000146CA                            loc_1219A:
000146CA 0C28 0040 003E             		cmpi.b	#$40,$3E(a0)
000146D0 6700                       		beq.s	locret_121C0
000146D2 5828 003E                  		addq.b	#4,$3E(a0)
000146D6                            
000146D6                            loc_121A6:
000146D6 1028 003E                  		move.b	$3E(a0),d0
000146DA 4EB9 0000 3A82             		jsr	(CalcSine).l
000146E0 323C 0400                  		move.w	#$400,d1
000146E4 C1C1                       		muls.w	d1,d0
000146E6 4840                       		swap	d0
000146E8 D068 0030                  		add.w	lblk_origY(a0),d0
000146EC 3140 000C                  		move.w	d0,obY(a0)
000146F0                            
000146F0                            locret_121C0:
000146F0 4E75                       		rts	
000146F0 4E75                       		rts	
000146F2                            Map_LBlock:	include	"_maps\LZ Blocks.asm"
000146F2                            Map_6865:
000146F2 0000                       Map_6865_0: 	dc.w Map_6865_8-Map_6865
000146F4 0000                       Map_6865_2: 	dc.w Map_6865_E-Map_6865
000146F6 0000                       Map_6865_4: 	dc.w Map_6865_19-Map_6865
000146F8 0000                       Map_6865_6: 	dc.w Map_6865_1F-Map_6865
000146FA 01                         Map_6865_8: 	dc.b $1
000146FB F00F 2000 F0               	dc.b $F0, $F, $20, $0, $F0
00014700 02                         Map_6865_E: 	dc.b $2
00014701 F40E 0069 E0               	dc.b $F4, $E, $0, $69, $E0
00014706 F40E 0075 00               	dc.b $F4, $E, $0, $75, $0
0001470B 01                         Map_6865_19: 	dc.b $1
0001470C F00F 011A F0               	dc.b $F0, $F, $1, $1A, $F0
00014711 01                         Map_6865_1F: 	dc.b $1
00014712 F00F FDFA F0               	dc.b $F0, $F, $FD, $FA, $F0
00014718 00                         	even
00014718 00                         	even
00014718                            		include	"_incObj\62 Gargoyle.asm"
00014718                            ; ---------------------------------------------------------------------------
00014718                            ; Object 62 - gargoyle head (LZ)
00014718                            ; ---------------------------------------------------------------------------
00014718                            
00014718                            Gargoyle:
00014718 7000                       		moveq	#0,d0
0001471A 1028 0024                  		move.b	obRoutine(a0),d0
0001471E 323B 0000                  		move.w	Gar_Index(pc,d0.w),d1
00014722 4EBB 1000                  		jsr	Gar_Index(pc,d1.w)
00014726 6000 D2EE                  		bra.w	RememberState
0001472A                            ; ===========================================================================
0001472A 0000                       Gar_Index:	dc.w Gar_Main-Gar_Index
0001472C 0000                       		dc.w Gar_MakeFire-Gar_Index
0001472E 0000                       		dc.w Gar_FireBall-Gar_Index
00014730 0000                       		dc.w Gar_AniFire-Gar_Index
00014732                            
00014732 1E3C 5A78 96B4 D2F0        Gar_SpitRate:	dc.b 30, 60, 90, 120, 150, 180,	210, 240
0001473A                            ; ===========================================================================
0001473A                            
0001473A                            Gar_Main:	; Routine 0
0001473A 5428 0024                  		addq.b	#2,obRoutine(a0)
0001473E 217C 0000 0000 0004        		move.l	#Map_Gar,obMap(a0)
00014746 317C 42E9 0002             		move.w	#$42E9,obGfx(a0)
0001474C 0028 0004 0001             		ori.b	#4,obRender(a0)
00014752 317C 0180 0018             		move.w	#$180,obPriority(a0)
00014758 117C 0010 0014             		move.b	#$10,obActWid(a0)
0001475E 1028 0028                  		move.b	obSubtype(a0),d0 ; get object type
00014762 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
00014766 117B 00CA 001F             		move.b	Gar_SpitRate(pc,d0.w),obDelayAni(a0) ; set fireball spit rate
0001476C 1168 001F 001E             		move.b	obDelayAni(a0),obTimeFrame(a0)
00014772 0228 000F 0028             		andi.b	#$F,obSubtype(a0)
00014778                            
00014778                            Gar_MakeFire:	; Routine 2
00014778 5328 001E                  		subq.b	#1,obTimeFrame(a0) ; decrement timer
0001477C 6600                       		bne.s	@nofire		; if time remains, branch
0001477E                            
0001477E 1168 001F 001E             		move.b	obDelayAni(a0),obTimeFrame(a0) ; reset timer
00014784 6100 B586                  		bsr.w	ChkObjectVisible
00014788 6600                       		bne.s	@nofire
0001478A 6100 B78C                  		bsr.w	FindFreeObj
0001478E 6600                       		bne.s	@nofire
00014790 12BC 0062                  		move.b	#id_Gargoyle,0(a1) ; load fireball object
00014794 5829 0024                  		addq.b	#4,obRoutine(a1) ; use Gar_FireBall routine
00014798 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001479E 3368 000C 000C             		move.w	obY(a0),obY(a1)
000147A4 1368 0001 0001             		move.b	obRender(a0),obRender(a1)
000147AA 1368 0022 0022             		move.b	obStatus(a0),obStatus(a1)
000147B0                            
000147B0                            	@nofire:
000147B0 4E75                       		rts	
000147B2                            ; ===========================================================================
000147B2                            
000147B2                            Gar_FireBall:	; Routine 4
000147B2 5428 0024                  		addq.b	#2,obRoutine(a0)
000147B6 117C 0008 0016             		move.b	#8,obHeight(a0)
000147BC 117C 0008 0017             		move.b	#8,obWidth(a0)
000147C2 217C 0000 0000 0004        		move.l	#Map_Gar,obMap(a0)
000147CA 317C 02E9 0002             		move.w	#$2E9,obGfx(a0)
000147D0 0028 0004 0001             		ori.b	#4,obRender(a0)
000147D6 317C 0200 0018             		move.w	#$200,obPriority(a0)
000147DC 117C 0098 0020             		move.b	#$98,obColType(a0)
000147E2 117C 0008 0014             		move.b	#8,obActWid(a0)
000147E8 117C 0002 001A             		move.b	#2,obFrame(a0)
000147EE 5068 000C                  		addq.w	#8,obY(a0)
000147F2 317C 0200 0010             		move.w	#$200,obVelX(a0)
000147F8 0828 0000 0022             		btst	#0,obStatus(a0)	; is gargoyle facing left?
000147FE 6600                       		bne.s	@noflip		; if not, branch
00014800 4468 0010                  		neg.w	obVelX(a0)
00014804                            
00014804                            	@noflip:
0001480E                            
0001480E                            Gar_AniFire:	; Routine 6
0001480E 1038 FE05                  		move.b	(v_framebyte).w,d0
00014812 0200 0007                  		andi.b	#7,d0
00014816 6600                       		bne.s	@nochg
00014818 0868 0000 001A             		bchg	#0,obFrame(a0)	; change every 8 frames
0001481E                            
0001481E                            	@nochg:
0001481E 6100 B258                  		bsr.w	SpeedToPos
00014822 0828 0000 0022             		btst	#0,obStatus(a0) ; is fireball moving left?
00014828 6600                       		bne.s	@isright	; if not, branch
0001482A 76F8                       		moveq	#-8,d3
0001482C 6100 0000                  		bsr.w	ObjHitWallLeft
00014830 4A41                       		tst.w	d1
00014832 6B00 B298                  		bmi.w	DeleteObject	; delete if the	fireball hits a	wall
00014836 4E75                       		rts	
00014838                            
00014838                            	@isright:
00014838 7608                       		moveq	#8,d3
0001483A 6100 0000                  		bsr.w	ObjHitWallRight
0001483E 4A41                       		tst.w	d1
00014840 6B00 B28A                  		bmi.w	DeleteObject
00014844 4E75                       		rts	
00014844 4E75                       		rts	
00014846                            Map_Gar:	include	"_maps\Gargoyle.asm"
00014846                            ; ---------------------------------------------------------------------------
00014846                            ; Sprite mappings - gargoyle head (LZ)
00014846                            ; ---------------------------------------------------------------------------
00014846                            Map_Gar_internal:
00014846 0000                       		dc.w @head-Map_Gar_internal
00014848 0000                       		dc.w @head-Map_Gar_internal
0001484A 0000                       		dc.w @fireball1-Map_Gar_internal
0001484C 0000                       		dc.w @fireball2-Map_Gar_internal
0001484E 03                         @head:		dc.b 3
0001484F F004 0000 00               		dc.b $F0, 4, 0,	0, 0
00014854 F80D 0002 F0               		dc.b $F8, $D, 0, 2, $F0
00014859 0808 000A F8               		dc.b 8,	8, 0, $A, $F8
0001485E 01                         @fireball1:	dc.b 1
0001485F FC04 000D F8               		dc.b $FC, 4, 0,	$D, $F8
00014864 01                         @fireball2:	dc.b 1
00014865 FC04 000F F8               		dc.b $FC, 4, 0,	$F, $F8
0001486A                            		even
0001486A                            		even
0001486A                            		include	"_incObj\63 LZ Conveyor.asm"
0001486A                            ; ---------------------------------------------------------------------------
0001486A                            ; Object 63 - platforms	on a conveyor belt (LZ)
0001486A                            ; ---------------------------------------------------------------------------
0001486A                            
0001486A                            LabyrinthConvey:
0001486A 7000                       		moveq	#0,d0
0001486C 1028 0024                  		move.b	obRoutine(a0),d0
00014870 323B 0000                  		move.w	LCon_Index(pc,d0.w),d1
00014874 4EBB 1000                  		jsr	LCon_Index(pc,d1.w)
00014894                            
00014894                            LCon_Display:
00014894 6000 B1F6                  		bra.w	DisplaySprite
00014898                            ; ===========================================================================
00014898                            
00014898                            loc_1236A:
00014898 0C38 0002 FE11             		cmpi.b	#2,(v_act).w
0001489E 6600                       		bne.s	loc_12378
000148A0 0C40 FF80                  		cmpi.w	#-$80,d0
000148A4 64EE                       		bcc.s	LCon_Display
000148A6                            
000148A6                            loc_12378:
000148A6 1028 002F                  		move.b	$2F(a0),d0
000148AA 6A00 B220                  		bpl.w	DeleteObject
000148AE 0240 007F                  		andi.w	#$7F,d0
000148B2 45F8 F7C1                  		lea	(v_obj63).w,a2
000148B6 08B2 0000 0000             		bclr	#0,(a2,d0.w)
000148BC 6000 B20E                  		bra.w	DeleteObject
000148C0                            ; ===========================================================================
000148C0 0000                       LCon_Index:	dc.w LCon_Main-LCon_Index
000148C2 0000                       		dc.w loc_124B2-LCon_Index
000148C4 0000                       		dc.w loc_124C2-LCon_Index
000148C6 0000                       		dc.w loc_124DE-LCon_Index
000148C8                            ; ===========================================================================
000148C8                            
000148C8                            LCon_Main:	; Routine 0
000148C8 1028 0028                  		move.b	obSubtype(a0),d0
000148CC 6B00 0000                  		bmi.w	loc_12460
000148D0 5428 0024                  		addq.b	#2,obRoutine(a0)
000148D4 217C 0000 0000 0004        		move.l	#Map_LConv,obMap(a0)
000148DC 317C 43F6 0002             		move.w	#$43F6,obGfx(a0)
000148E2 0028 0004 0001             		ori.b	#4,obRender(a0)
000148E8 117C 0010 0014             		move.b	#$10,obActWid(a0)
000148EE 317C 0200 0018             		move.w	#$200,obPriority(a0)
000148F4 0C28 007F 0028             		cmpi.b	#$7F,obSubtype(a0)
000148FA 6600                       		bne.s	loc_123E2
000148FC 5828 0024                  		addq.b	#4,obRoutine(a0)
00014900 317C 03F6 0002             		move.w	#$3F6,obGfx(a0)
00014906 317C 0080 0018             		move.w	#$80,obPriority(a0)
0001490C 6000 0000                  		bra.w	loc_124DE
00014910                            ; ===========================================================================
00014910                            
00014910                            loc_123E2:
00014910 117C 0004 001A             		move.b	#4,obFrame(a0)
00014916 7000                       		moveq	#0,d0
00014918 1028 0028                  		move.b	obSubtype(a0),d0
0001491C 3200                       		move.w	d0,d1
0001491E E648                       		lsr.w	#3,d0
00014920 0240 001E                  		andi.w	#$1E,d0
00014924 45FA 0000                  		lea	LCon_Data(pc),a2
00014928 D4F2 0000                  		adda.w	(a2,d0.w),a2
0001492C 315A 0038                  		move.w	(a2)+,$38(a0)
00014930 315A 0030                  		move.w	(a2)+,$30(a0)
00014934 214A 003C                  		move.l	a2,$3C(a0)
00014938 0241 000F                  		andi.w	#$F,d1
0001493C E549                       		lsl.w	#2,d1
0001493E 1141 0038                  		move.b	d1,$38(a0)
00014942 117C 0004 003A             		move.b	#4,$3A(a0)
00014948 4A38 F7C0                  		tst.b	(f_conveyrev).w
0001494C 6700                       		beq.s	loc_1244C
0001494E 117C 0001 003B             		move.b	#1,$3B(a0)
00014954 4428 003A                  		neg.b	$3A(a0)
00014958 7200                       		moveq	#0,d1
0001495A 1228 0038                  		move.b	$38(a0),d1
0001495E D228 003A                  		add.b	$3A(a0),d1
00014962 B228 0039                  		cmp.b	$39(a0),d1
00014966 6500                       		bcs.s	loc_12448
00014968 1001                       		move.b	d1,d0
0001496A 7200                       		moveq	#0,d1
0001496C 4A00                       		tst.b	d0
0001496E 6A00                       		bpl.s	loc_12448
00014970 1228 0039                  		move.b	$39(a0),d1
00014974 5901                       		subq.b	#4,d1
00014976                            
00014976                            loc_12448:
00014976 1141 0038                  		move.b	d1,$38(a0)
0001497A                            
0001497A                            loc_1244C:
0001497A 3172 1000 0034             		move.w	(a2,d1.w),$34(a0)
00014980 3172 1002 0036             		move.w	2(a2,d1.w),$36(a0)
00014986 6100 0000                  		bsr.w	LCon_ChangeDir
0001498A 6000 0000                  		bra.w	loc_124B2
0001498E                            ; ===========================================================================
0001498E                            
0001498E                            loc_12460:
0001498E 1140 002F                  		move.b	d0,$2F(a0)
00014992 0240 007F                  		andi.w	#$7F,d0
00014996 45F8 F7C1                  		lea	(v_obj63).w,a2
0001499A 08F2 0000 0000             		bset	#0,(a2,d0.w)
000149A0 6600 B12A                  		bne.w	DeleteObject
000149A4 D040                       		add.w	d0,d0
000149A6 0240 001E                  		andi.w	#$1E,d0
000149AA 0640 0000                  		addi.w	#ObjPosLZPlatform_Index-ObjPos_Index,d0
000149AE 45F9 0000 0000             		lea	(ObjPos_Index).l,a2
000149B4 D4F2 0000                  		adda.w	(a2,d0.w),a2
000149B8 321A                       		move.w	(a2)+,d1
000149BA 2248                       		movea.l	a0,a1
000149BC 6000                       		bra.s	LCon_MakePtfms
000149BE                            ; ===========================================================================
000149BE                            
000149BE                            LCon_Loop:
000149BE 6100 B558                  		bsr.w	FindFreeObj
000149C2 6600                       		bne.s	loc_124AA
000149C4                            
000149C4                            LCon_MakePtfms:
000149C4 12BC 0063                  		move.b	#id_LabyrinthConvey,0(a1)
000149C8 335A 0008                  		move.w	(a2)+,obX(a1)
000149CC 335A 000C                  		move.w	(a2)+,obY(a1)
000149D0 301A                       		move.w	(a2)+,d0
000149D2 1340 0028                  		move.b	d0,obSubtype(a1)
000149D6                            
000149D6                            loc_124AA:
000149D6 51C9 FFE6                  		dbf	d1,LCon_Loop
000149DA                            
000149DA 588F                       		addq.l	#4,sp
000149DC 4E75                       		rts	
000149DE                            ; ===========================================================================
000149DE                            
000149DE                            loc_124B2:	; Routine 2
000149DE 7200                       		moveq	#0,d1
000149E0 1228 0014                  		move.b	obActWid(a0),d1
000149E4 4EB9 0000 9136             		jsr	(PlatformObject).l
000149EA 6000 0000                  		bra.w	sub_12502
000149EE                            ; ===========================================================================
000149EE                            
000149EE                            loc_124C2:	; Routine 4
000149EE 7200                       		moveq	#0,d1
000149F0 1228 0014                  		move.b	obActWid(a0),d1
000149F4 4EB9 0000 92AA             		jsr	(ExitPlatform).l
000149FA 3F28 0008                  		move.w	obX(a0),-(sp)
000149FE 6100 0000                  		bsr.w	sub_12502
00014A02 341F                       		move.w	(sp)+,d2
00014A04 4EF9 0000 9814             		jmp	(MvSonicOnPtfm2).l
00014A0A                            ; ===========================================================================
00014A0A                            
00014A0A                            loc_124DE:	; Routine 6
00014A0A 3038 FE04                  		move.w	(v_framecount).w,d0
00014A0E 0240 0003                  		andi.w	#3,d0
00014A12 6600                       		bne.s	loc_124FC
00014A14 7201                       		moveq	#1,d1
00014A16 4A38 F7C0                  		tst.b	(f_conveyrev).w
00014A1A 6700                       		beq.s	loc_124F2
00014A1C 4401                       		neg.b	d1
00014A1E                            
00014A1E                            loc_124F2:
00014A1E D328 001A                  		add.b	d1,obFrame(a0)
00014A22 0228 0003 001A             		andi.b	#3,obFrame(a0)
00014A28                            
00014A28                            loc_124FC:
00014A28 588F                       		addq.l	#4,sp
00014A2A 6000 CFEA                  		bra.w	RememberState
00014A2E                            
00014A2E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014A2E                            
00014A2E                            
00014A2E                            sub_12502:
00014A2E 4A38 F7EE                  		tst.b	(f_switch+$E).w
00014A32 6700                       		beq.s	loc_12520
00014A34 4A28 003B                  		tst.b	$3B(a0)
00014A38 6600                       		bne.s	loc_12520
00014A3A 117C 0001 003B             		move.b	#1,$3B(a0)
00014A40 11FC 0001 F7C0             		move.b	#1,(f_conveyrev).w
00014A46 4428 003A                  		neg.b	$3A(a0)
00014A4A 6000                       		bra.s	loc_12534
00014A4C                            ; ===========================================================================
00014A4C                            
00014A4C                            loc_12520:
00014A4C 3028 0008                  		move.w	obX(a0),d0
00014A50 B068 0034                  		cmp.w	$34(a0),d0
00014A54 6600                       		bne.s	loc_1256A
00014A56 3028 000C                  		move.w	obY(a0),d0
00014A5A B068 0036                  		cmp.w	$36(a0),d0
00014A5E 6600                       		bne.s	loc_1256A
00014A60                            
00014A60                            loc_12534:
00014A60 7200                       		moveq	#0,d1
00014A62 1228 0038                  		move.b	$38(a0),d1
00014A66 D228 003A                  		add.b	$3A(a0),d1
00014A6A B228 0039                  		cmp.b	$39(a0),d1
00014A6E 6500                       		bcs.s	loc_12552
00014A70 1001                       		move.b	d1,d0
00014A72 7200                       		moveq	#0,d1
00014A74 4A00                       		tst.b	d0
00014A76 6A00                       		bpl.s	loc_12552
00014A78 1228 0039                  		move.b	$39(a0),d1
00014A7C 5901                       		subq.b	#4,d1
00014A7E                            
00014A7E                            loc_12552:
00014A7E 1141 0038                  		move.b	d1,$38(a0)
00014A82 2268 003C                  		movea.l	$3C(a0),a1
00014A86 3171 1000 0034             		move.w	(a1,d1.w),$34(a0)
00014A8C 3171 1002 0036             		move.w	2(a1,d1.w),$36(a0)
00014A92 6100 0000                  		bsr.w	LCon_ChangeDir
00014A96                            
00014A96                            loc_1256A:
00014A96 6100 AFE0                  		bsr.w	SpeedToPos
00014A9A 4E75                       		rts	
00014A9C                            ; End of function sub_12502
00014A9C                            
00014A9C                            
00014A9C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014A9C                            
00014A9C                            
00014A9C                            LCon_ChangeDir:
00014A9C 7000                       		moveq	#0,d0
00014A9E 343C FF00                  		move.w	#-$100,d2
00014AA2 3028 0008                  		move.w	obX(a0),d0
00014AA6 9068 0034                  		sub.w	$34(a0),d0
00014AAA 6400                       		bcc.s	loc_12584
00014AAC 4440                       		neg.w	d0
00014AAE 4442                       		neg.w	d2
00014AB0                            
00014AB0                            loc_12584:
00014AB0 7200                       		moveq	#0,d1
00014AB2 363C FF00                  		move.w	#-$100,d3
00014AB6 3228 000C                  		move.w	obY(a0),d1
00014ABA 9268 0036                  		sub.w	$36(a0),d1
00014ABE 6400                       		bcc.s	loc_12598
00014AC0 4441                       		neg.w	d1
00014AC2 4443                       		neg.w	d3
00014AC4                            
00014AC4                            loc_12598:
00014AC4 B240                       		cmp.w	d0,d1
00014AC6 6500                       		bcs.s	loc_125C2
00014AC8 3028 0008                  		move.w	obX(a0),d0
00014ACC 9068 0034                  		sub.w	$34(a0),d0
00014AD0 6700                       		beq.s	loc_125AE
00014AD2 48C0                       		ext.l	d0
00014AD4 E180                       		asl.l	#8,d0
00014AD6 81C1                       		divs.w	d1,d0
00014AD8 4440                       		neg.w	d0
00014ADA                            
00014ADA                            loc_125AE:
00014ADA 3140 0010                  		move.w	d0,obVelX(a0)
00014ADE 3143 0012                  		move.w	d3,obVelY(a0)
00014AE2 4840                       		swap	d0
00014AE4 3140 000A                  		move.w	d0,obX+2(a0)
00014AE8 4268 000E                  		clr.w	obY+2(a0)
00014AEC 4E75                       		rts	
00014AEE                            ; ===========================================================================
00014AEE                            
00014AEE                            loc_125C2:
00014AEE 3228 000C                  		move.w	obY(a0),d1
00014AF2 9268 0036                  		sub.w	$36(a0),d1
00014AF6 6700                       		beq.s	loc_125D4
00014AF8 48C1                       		ext.l	d1
00014AFA E181                       		asl.l	#8,d1
00014AFC 83C0                       		divs.w	d0,d1
00014AFE 4441                       		neg.w	d1
00014B00                            
00014B00                            loc_125D4:
00014B00 3141 0012                  		move.w	d1,obVelY(a0)
00014B04 3142 0010                  		move.w	d2,obVelX(a0)
00014B08 4841                       		swap	d1
00014B0A 3141 000E                  		move.w	d1,obY+2(a0)
00014B0E 4268 000A                  		clr.w	obX+2(a0)
00014B12 4E75                       		rts	
00014B14                            ; End of function LCon_ChangeDir
00014B14                            
00014B14                            ; ===========================================================================
00014B14 0000                       LCon_Data:	dc.w word_125F4-LCon_Data
00014B16 0000                       		dc.w word_12610-LCon_Data
00014B18 0000                       		dc.w word_12628-LCon_Data
00014B1A 0000                       		dc.w word_1263C-LCon_Data
00014B1C 0000                       		dc.w word_12650-LCon_Data
00014B1E 0000                       		dc.w word_12668-LCon_Data
00014B20 0018 1070 1078 021A 10BE+  word_125F4:	dc.w $18, $1070, $1078,	$21A, $10BE, $260, $10BE, $393
00014B30 108C 03C5 1022 0390 1022+  		dc.w $108C, $3C5, $1022, $390, $1022, $244
00014B3C 0014 1280 127E 0280 12CE+  word_12610:	dc.w $14, $1280, $127E,	$280, $12CE, $2D0, $12CE, $46E
00014B4C 1232 0420 1232 02CC        		dc.w $1232, $420, $1232, $2CC
00014B54 0010 0D68 0D22 0482 0D22+  word_12628:	dc.w $10, $D68,	$D22, $482, $D22, $5DE,	$DAE, $5DE, $DAE, $482
00014B68 0010 0DA0 0D62 03A2 0DEE+  word_1263C:	dc.w $10, $DA0,	$D62, $3A2, $DEE, $3A2,	$DEE, $4DE, $D62, $4DE
00014B7C 0014 0D00 0CAC 0242 0DDE+  word_12650:	dc.w $14, $D00,	$CAC, $242, $DDE, $242,	$DDE, $3DE, $C52, $3DE,	$C52, $29C
00014B94 0010 1300 1252 020A 13DE+  word_12668:	dc.w $10, $1300, $1252,	$20A, $13DE, $20A, $13DE, $2BE,	$1252, $2BE
00014B94 0010 1300 1252 020A 13DE+  word_12668:	dc.w $10, $1300, $1252,	$20A, $13DE, $20A, $13DE, $2BE,	$1252, $2BE
00014BA8                            Map_LConv:	include	"_maps\LZ Conveyor.asm"
00014BA8                            ; ---------------------------------------------------------------------------
00014BA8                            ; Sprite mappings - platforms on a conveyor belt (LZ)
00014BA8                            ; ---------------------------------------------------------------------------
00014BA8                            Map_LConv_internal:
00014BA8 0000                       		dc.w @wheel1-Map_LConv_internal
00014BAA 0000                       		dc.w @wheel2-Map_LConv_internal
00014BAC 0000                       		dc.w @wheel3-Map_LConv_internal
00014BAE 0000                       		dc.w @wheel4-Map_LConv_internal
00014BB0 0000                       		dc.w @platform-Map_LConv_internal
00014BB2 01                         @wheel1:	dc.b 1
00014BB3 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
00014BB8 01                         @wheel2:	dc.b 1
00014BB9 F00F 0010 F0               		dc.b $F0, $F, 0, $10, $F0
00014BBE 01                         @wheel3:	dc.b 1
00014BBF F00F 0020 F0               		dc.b $F0, $F, 0, $20, $F0
00014BC4 01                         @wheel4:	dc.b 1
00014BC5 F00F 0030 F0               		dc.b $F0, $F, 0, $30, $F0
00014BCA 01                         @platform:	dc.b 1
00014BCB F80D 0040 F0               		dc.b $F8, $D, 0, $40, $F0
00014BD0                            		even
00014BD0                            		even
00014BD0                            		include	"_incObj\64 Bubbles.asm"
00014BD0                            ; ---------------------------------------------------------------------------
00014BD0                            ; Object 64 - bubbles (LZ)
00014BD0                            ; ---------------------------------------------------------------------------
00014BD0                            
00014BD0                            Bubble:
00014BD0 7000                       		moveq	#0,d0
00014BD2 1028 0024                  		move.b	obRoutine(a0),d0
00014BD6 323B 0000                  		move.w	Bub_Index(pc,d0.w),d1
00014BDA 4EFB 1000                  		jmp	Bub_Index(pc,d1.w)
00014BDE                            ; ===========================================================================
00014BDE 0000                       Bub_Index:	dc.w Bub_Main-Bub_Index
00014BE0 0000                       		dc.w Bub_Animate-Bub_Index
00014BE2 0000                       		dc.w Bub_ChkWater-Bub_Index
00014BE4 0000                       		dc.w Bub_Display-Bub_Index
00014BE6 0000                       		dc.w Bub_Delete-Bub_Index
00014BE8 0000                       		dc.w Bub_BblMaker-Bub_Index
00014BEA                            
00014BEA =0000002E                  bub_inhalable:	equ $2E		; flag set when bubble is collectable
00014BEA =00000030                  bub_origX:	equ $30		; original x-axis position
00014BEA =00000032                  bub_time:	equ $32		; time until next bubble spawn
00014BEA =00000033                  bub_freq:	equ $33		; frequency of bubble spawn
00014BEA                            ; ===========================================================================
00014BEA                            
00014BEA                            Bub_Main:	; Routine 0
00014BEA 5428 0024                  		addq.b	#2,obRoutine(a0)
00014BEE 217C 0000 0000 0004        		move.l	#Map_Bub,obMap(a0)
00014BF6 317C 8348 0002             		move.w	#$8348,obGfx(a0)
00014BFC 117C 0084 0001             		move.b	#$84,obRender(a0)
00014C02 117C 0010 0014             		move.b	#$10,obActWid(a0)
00014C08 317C 0080 0018             		move.w	#$80,obPriority(a0)
00014C0E 1028 0028                  		move.b	obSubtype(a0),d0 ; get bubble type
00014C12 6A00                       		bpl.s	@bubble		; if type is $0-$7F, branch
00014C14                            
00014C14 5028 0024                  		addq.b	#8,obRoutine(a0) ; goto Bub_BblMaker next
00014C18 0240 007F                  		andi.w	#$7F,d0		; read only last 7 bits	(deduct	$80)
00014C1C 1140 0032                  		move.b	d0,bub_time(a0)
00014C20 1140 0033                  		move.b	d0,bub_freq(a0)	; set bubble frequency
00014C24 117C 0006 001C             		move.b	#6,obAnim(a0)
00014C2A 6000 0000                  		bra.w	Bub_BblMaker
00014C2E                            ; ===========================================================================
00014C2E                            
00014C2E                            @bubble:
00014C2E 1140 001C                  		move.b	d0,obAnim(a0)
00014C32 3168 0008 0030             		move.w	obX(a0),bub_origX(a0)
00014C38 317C FF78 0012             		move.w	#-$88,obVelY(a0) ; float bubble upwards
00014C3E 4EB9 0000 3A5C             		jsr	(RandomNumber).l
00014C44 1140 0026                  		move.b	d0,obAngle(a0)
00014C48                            
00014C48                            Bub_Animate:	; Routine 2
00014C48 43F9 0000 0000             		lea	(Ani_Bub).l,a1
00014C4E 4EB9 0000 CB4E             		jsr	(AnimateSprite).l
00014C54 0C28 0006 001A             		cmpi.b	#6,obFrame(a0)	; is bubble full-size?
00014C5A 6600                       		bne.s	Bub_ChkWater	; if not, branch
00014C5C                            
00014C5C 117C 0001 002E             		move.b	#1,bub_inhalable(a0) ; set "inhalable" flag
00014C62                            
00014C62                            Bub_ChkWater:	; Routine 4
00014C62 3038 F646                  		move.w	(v_waterpos1).w,d0
00014C66 B068 000C                  		cmp.w	obY(a0),d0	; is bubble underwater?
00014C6A 6500                       		bcs.s	@wobble		; if yes, branch
00014C6C                            
00014C6C                            @burst:
00014C6C 117C 0006 0024             		move.b	#6,obRoutine(a0) ; goto Bub_Display next
00014C72 5628 001C                  		addq.b	#3,obAnim(a0)	; run "bursting" animation
00014C76 6000 0000                  		bra.w	Bub_Display
00014C7A                            ; ===========================================================================
00014C7A                            
00014C7A                            @wobble:
00014C7A 1028 0026                  		move.b	obAngle(a0),d0
00014C7E 5228 0026                  		addq.b	#1,obAngle(a0)
00014C82 0240 007F                  		andi.w	#$7F,d0
00014C86 43F9 0000 0000             		lea	(Drown_WobbleData).l,a1
00014C8C 1031 0000                  		move.b	(a1,d0.w),d0
00014C90 4880                       		ext.w	d0
00014C92 D068 0030                  		add.w	bub_origX(a0),d0
00014C96 3140 0008                  		move.w	d0,obX(a0)	; change bubble's x-axis position
00014C9A 4A28 002E                  		tst.b	bub_inhalable(a0)
00014C9E 6700                       		beq.s	@display
00014CA0 6100 0000                  		bsr.w	Bub_ChkSonic	; has Sonic touched the	bubble?
00014CA4 6700                       		beq.s	@display	; if not, branch
00014CA6                            
00014CA6 6100 0000                  		bsr.w	ResumeMusic	; cancel countdown music
00014CB4 43F8 D000                  		lea	(v_player).w,a1
00014CB8 4269 0010                  		clr.w	obVelX(a1)
00014CBC 4269 0012                  		clr.w	obVelY(a1)
00014CC0 4269 0020                  		clr.w	obInertia(a1)	; stop Sonic
00014CC4 137C 0000 001C             		move.b	#id_GetAir,obAnim(a1) ; use bubble-collecting animation
00014CCA 337C 0023 003E             		move.w	#$23,$3E(a1)
00014CD0 137C 0000 003C             		move.b	#0,$3C(a1)
00014CD6 08A9 0005 0022             		bclr	#5,obStatus(a1)
00014CDC 08A9 0004 0022             		bclr	#4,obStatus(a1)
00014CE2 0829 0002 0022             		btst	#2,obStatus(a1)
00014CE8 6700 FF82                  		beq.w	@burst
00014CEC 08A9 0002 0022             		bclr	#2,obStatus(a1)
00014CF2 137C 0013 0016             		move.b	#$13,obHeight(a1)
00014CF8 137C 0009 0017             		move.b	#9,obWidth(a1)
00014CFE 5B69 000C                  		subq.w	#5,obY(a1)
00014D02 6000 FF68                  		bra.w	@burst
00014D06                            ; ===========================================================================
00014D06                            
00014D06                            @display:
00014D06 6100 AD70                  		bsr.w	SpeedToPos
00014D0A 4A28 0001                  		tst.b	obRender(a0)
00014D0E 6A00                       		bpl.s	@delete
00014D10 4EF9 0000 FA8C             		jmp	(DisplaySprite).l
00014D16                            
00014D16                            	@delete:
00014D16 4EF9 0000 FACC             		jmp	(DeleteObject).l
00014D1C                            ; ===========================================================================
00014D1C                            
00014D1C                            Bub_Display:	; Routine 6
00014D1C 43F9 0000 0000             		lea	(Ani_Bub).l,a1
00014D22 4EB9 0000 CB4E             		jsr	(AnimateSprite).l
00014D28 4A28 0001                  		tst.b	obRender(a0)
00014D2C 6A00                       		bpl.s	@delete
00014D2E 4EF9 0000 FA8C             		jmp	(DisplaySprite).l
00014D34                            
00014D34                            	@delete:
00014D34 4EF9 0000 FACC             		jmp	(DeleteObject).l
00014D3A                            ; ===========================================================================
00014D3A                            
00014D3A                            Bub_Delete:	; Routine 8
00014D3A 6000 AD90                  		bra.w	DeleteObject
00014D3E                            ; ===========================================================================
00014D3E                            
00014D3E                            Bub_BblMaker:	; Routine $A
00014D3E 4A68 0036                  		tst.w	$36(a0)
00014D42 6600                       		bne.s	@loc_12874
00014D44 3038 F646                  		move.w	(v_waterpos1).w,d0
00014D48 B068 000C                  		cmp.w	obY(a0),d0	; is bubble maker underwater?
00014D4C 6400 0000                  		bcc.w	@chkdel		; if not, branch
00014D50 4A28 0001                  		tst.b	obRender(a0)
00014D54 6A00 0000                  		bpl.w	@chkdel
00014D58 5368 0038                  		subq.w	#1,$38(a0)
00014D5C 6A00 0000                  		bpl.w	@loc_12914
00014D60 317C 0001 0036             		move.w	#1,$36(a0)
00014D66                            
00014D66                            	@tryagain:
00014D66 4EB9 0000 3A5C             		jsr	(RandomNumber).l
00014D6C 3200                       		move.w	d0,d1
00014D6E 0240 0007                  		andi.w	#7,d0
00014D72 0C40 0006                  		cmpi.w	#6,d0		; random number over 6?
00014D76 64EE                       		bcc.s	@tryagain	; if yes, branch
00014D78                            
00014D78 1140 0034                  		move.b	d0,$34(a0)
00014D7C 0241 000C                  		andi.w	#$C,d1
00014D80 43F9 0000 0000             		lea	(Bub_BblTypes).l,a1
00014D86 D2C1                       		adda.w	d1,a1
00014D88 2149 003C                  		move.l	a1,$3C(a0)
00014D8C 5328 0032                  		subq.b	#1,bub_time(a0)
00014D90 6A00                       		bpl.s	@loc_12872
00014D92 1168 0033 0032             		move.b	bub_freq(a0),bub_time(a0)
00014D98 08E8 0007 0036             		bset	#7,$36(a0)
00014D9E                            
00014D9E                            @loc_12872:
00014D9E 6000                       		bra.s	@loc_1287C
00014DA0                            ; ===========================================================================
00014DA0                            
00014DA0                            @loc_12874:
00014DA0 5368 0038                  		subq.w	#1,$38(a0)
00014DA4 6A00 0000                  		bpl.w	@loc_12914
00014DA8                            
00014DA8                            @loc_1287C:
00014DA8 4EB9 0000 3A5C             		jsr	(RandomNumber).l
00014DAE 0240 001F                  		andi.w	#$1F,d0
00014DB2 3140 0038                  		move.w	d0,$38(a0)
00014DB6 6100 B160                  		bsr.w	FindFreeObj
00014DBA 6600                       		bne.s	@fail
00014DBC 12BC 0064                  		move.b	#id_Bubble,0(a1) ; load bubble object
00014DC0 3368 0008 0008             		move.w	obX(a0),obX(a1)
00014DC6 4EB9 0000 3A5C             		jsr	(RandomNumber).l
00014DCC 0240 000F                  		andi.w	#$F,d0
00014DD0 5140                       		subq.w	#8,d0
00014DD2 D169 0008                  		add.w	d0,obX(a1)
00014DD6 3368 000C 000C             		move.w	obY(a0),obY(a1)
00014DDC 7000                       		moveq	#0,d0
00014DDE 1028 0034                  		move.b	$34(a0),d0
00014DE2 2468 003C                  		movea.l	$3C(a0),a2
00014DE6 1372 0000 0028             		move.b	(a2,d0.w),obSubtype(a1)
00014DEC 0828 0007 0036             		btst	#7,$36(a0)
00014DF2 6700                       		beq.s	@fail
00014DF4 4EB9 0000 3A5C             		jsr	(RandomNumber).l
00014DFA 0240 0003                  		andi.w	#3,d0
00014DFE 6600                       		bne.s	@loc_buh
00014E00 08E8 0006 0036             		bset	#6,$36(a0)
00014E06 6600                       		bne.s	@fail
00014E08 137C 0002 0028             		move.b	#2,obSubtype(a1)
00014E0E                            
00014E0E                            @loc_buh:
00014E0E 4A28 0034                  		tst.b	$34(a0)
00014E12 6600                       		bne.s	@fail
00014E14 08E8 0006 0036             		bset	#6,$36(a0)
00014E1A 6600                       		bne.s	@fail
00014E1C 137C 0002 0028             		move.b	#2,obSubtype(a1)
00014E22                            
00014E22                            	@fail:
00014E22 5328 0034                  		subq.b	#1,$34(a0)
00014E26 6A00                       		bpl.s	@loc_12914
00014E28 4EB9 0000 3A5C             		jsr	(RandomNumber).l
00014E2E 0240 007F                  		andi.w	#$7F,d0
00014E32 0640 0080                  		addi.w	#$80,d0
00014E36 D168 0038                  		add.w	d0,$38(a0)
00014E3A 4268 0036                  		clr.w	$36(a0)
00014E3E                            
00014E3E                            @loc_12914:
00014E3E 43F9 0000 0000             		lea	(Ani_Bub).l,a1
00014E44 4EB9 0000 CB4E             		jsr	(AnimateSprite).l
00014E4A                            
00014E4A                            @chkdel:
00014E68 3038 F646                  		move.w	(v_waterpos1).w,d0
00014E6C B068 000C                  		cmp.w	obY(a0),d0
00014E70 6500 AC1A                  		bcs.w	DisplaySprite
00014E74 4E75                       		rts	
00014E76                            ; ===========================================================================
00014E76                            ; bubble production sequence
00014E76                            
00014E76                            ; 0 = small bubble, 1 =	large bubble
00014E76                            
00014E76 0001 0000 0000 0100 0000+  Bub_BblTypes:	dc.b 0,	1, 0, 0, 0, 0, 1, 0, 0,	0, 0, 1, 0, 1, 0, 0, 1,	0
00014E88                            
00014E88                            ; ===========================================================================
00014E88                            
00014E88                            Bub_ChkSonic:
00014E88 4A38 F7C8                  		tst.b	(f_lockmulti).w
00014E8C 6B00                       		bmi.s	@loc_12998
00014E8E 43F8 D000                  		lea	(v_player).w,a1
00014E92 3029 0008                  		move.w	obX(a1),d0
00014E96 3228 0008                  		move.w	obX(a0),d1
00014E9A 0441 0010                  		subi.w	#$10,d1
00014E9E B240                       		cmp.w	d0,d1
00014EA0 6400                       		bcc.s	@loc_12998
00014EA2 0641 0020                  		addi.w	#$20,d1
00014EA6 B240                       		cmp.w	d0,d1
00014EA8 6500                       		bcs.s	@loc_12998
00014EAA 3029 000C                  		move.w	obY(a1),d0
00014EAE 3228 000C                  		move.w	obY(a0),d1
00014EB2 B240                       		cmp.w	d0,d1
00014EB4 6400                       		bcc.s	@loc_12998
00014EB6 0641 0010                  		addi.w	#$10,d1
00014EBA B240                       		cmp.w	d0,d1
00014EBC 6500                       		bcs.s	@loc_12998
00014EBE 7001                       		moveq	#1,d0
00014EC0 4E75                       		rts	
00014EC2                            ; ===========================================================================
00014EC2                            
00014EC2                            @loc_12998:
00014EC2 7000                       		moveq	#0,d0
00014EC4 4E75                       		rts	
00014EC4 4E75                       		rts	
00014EC6                            		include	"_anim\Bubbles.asm"
00014EC6                            ; ---------------------------------------------------------------------------
00014EC6                            ; Animation script - bubbles (LZ)
00014EC6                            ; ---------------------------------------------------------------------------
00014EC6 0000                       Ani_Bub:	dc.w @small-Ani_Bub
00014EC8 0000                       		dc.w @medium-Ani_Bub
00014ECA 0000                       		dc.w @large-Ani_Bub
00014ECC 0000                       		dc.w @incroutine-Ani_Bub
00014ECE 0000                       		dc.w @incroutine-Ani_Bub
00014ED0 0000                       		dc.w @burst-Ani_Bub
00014ED2 0000                       		dc.w @bubmaker-Ani_Bub
00014ED4 0D00 0102 FC               @small:		dc.b $D, 0, 1, 2, afRoutine ; small bubble forming
00014EDA 00                         		even
00014EDA 0D01 0203 04FC             @medium:	dc.b $D, 1, 2, 3, 4, afRoutine ; medium bubble forming
00014EE0 0D02 0304 0506 FC          @large:		dc.b $D, 2, 3, 4, 5, 6,	afRoutine ; full size bubble forming
00014EE8 00                         		even
00014EE8 04FC                       @incroutine:	dc.b 4,	afRoutine	; increment routine counter (no animation)
00014EEA 0406 0708 FC               @burst:		dc.b 4,	6, 7, 8, afRoutine ; large bubble bursts
00014EF0 00                         		even
00014EF0 0E13 1415 FF               @bubmaker:	dc.b $E, $13, $14, $15,	afEnd ; bubble maker on the floor
00014EF6 00                         		even
00014EF6 00                         		even
00014EF6                            Map_Bub:	include	"_maps\Bubbles.asm"
00014EF6                            ; ---------------------------------------------------------------------------
00014EF6                            ; Sprite mappings - bubbles (LZ)
00014EF6                            ; ---------------------------------------------------------------------------
00014EF6                            Map_Bub_internal:
00014EF6 0000                       		dc.w @bubble1-Map_Bub_internal
00014EF8 0000                       		dc.w @bubble2-Map_Bub_internal
00014EFA 0000                       		dc.w @bubble3-Map_Bub_internal
00014EFC 0000                       		dc.w @bubble4-Map_Bub_internal
00014EFE 0000                       		dc.w @bubble5-Map_Bub_internal
00014F00 0000                       		dc.w @bubble6-Map_Bub_internal
00014F02 0000                       		dc.w @bubblefull-Map_Bub_internal
00014F04 0000                       		dc.w @burst1-Map_Bub_internal
00014F06 0000                       		dc.w @burst2-Map_Bub_internal
00014F08 0000                       		dc.w @zero_sm-Map_Bub_internal
00014F0A 0000                       		dc.w @five_sm-Map_Bub_internal
00014F0C 0000                       		dc.w @three_sm-Map_Bub_internal
00014F0E 0000                       		dc.w @one_sm-Map_Bub_internal
00014F10 0000                       		dc.w @zero-Map_Bub_internal
00014F12 0000                       		dc.w @five-Map_Bub_internal
00014F14 0000                       		dc.w @four-Map_Bub_internal
00014F16 0000                       		dc.w @three-Map_Bub_internal
00014F18 0000                       		dc.w @two-Map_Bub_internal
00014F1A 0000                       		dc.w @one-Map_Bub_internal
00014F1C 0000                       		dc.w @bubmaker1-Map_Bub_internal
00014F1E 0000                       		dc.w @bubmaker2-Map_Bub_internal
00014F20 0000                       		dc.w @bubmaker3-Map_Bub_internal
00014F22 0000                       		dc.w @blank-Map_Bub_internal
00014F24 01                         @bubble1:	dc.b 1
00014F25 FC00 0000 FC               		dc.b $FC, 0, 0,	0, $FC	; bubbles, increasing in size
00014F2A 01                         @bubble2:	dc.b 1
00014F2B FC00 0001 FC               		dc.b $FC, 0, 0,	1, $FC
00014F30 01                         @bubble3:	dc.b 1
00014F31 FC00 0002 FC               		dc.b $FC, 0, 0,	2, $FC
00014F36 01                         @bubble4:	dc.b 1
00014F37 F805 0003 F8               		dc.b $F8, 5, 0,	3, $F8
00014F3C 01                         @bubble5:	dc.b 1
00014F3D F805 0007 F8               		dc.b $F8, 5, 0,	7, $F8
00014F42 01                         @bubble6:	dc.b 1
00014F43 F40A 000B F4               		dc.b $F4, $A, 0, $B, $F4
00014F48 01                         @bubblefull:	dc.b 1
00014F49 F00F 0014 F0               		dc.b $F0, $F, 0, $14, $F0
00014F4E 04                         @burst1:	dc.b 4
00014F4F F005 0024 F0               		dc.b $F0, 5, 0,	$24, $F0 ; large bubble bursting
00014F54 F005 0824 00               		dc.b $F0, 5, 8,	$24, 0
00014F59 0005 1024 F0               		dc.b 0,	5, $10,	$24, $F0
00014F5E 0005 1824 00               		dc.b 0,	5, $18,	$24, 0
00014F63 04                         @burst2:	dc.b 4
00014F64 F005 0028 F0               		dc.b $F0, 5, 0,	$28, $F0
00014F69 F005 0828 00               		dc.b $F0, 5, 8,	$28, 0
00014F6E 0005 1028 F0               		dc.b 0,	5, $10,	$28, $F0
00014F73 0005 1828 00               		dc.b 0,	5, $18,	$28, 0
00014F78 01                         @zero_sm:	dc.b 1
00014F79 F406 002C F8               		dc.b $F4, 6, 0,	$2C, $F8 ; small, partially-formed countdown numbers
00014F7E 01                         @five_sm:	dc.b 1
00014F7F F406 0032 F8               		dc.b $F4, 6, 0,	$32, $F8
00014F84 01                         @three_sm:	dc.b 1
00014F85 F406 0038 F8               		dc.b $F4, 6, 0,	$38, $F8
00014F8A 01                         @one_sm:	dc.b 1
00014F8B F406 003E F8               		dc.b $F4, 6, 0,	$3E, $F8
00014F90 01                         @zero:		dc.b 1
00014F91 F406 2044 F8               		dc.b $F4, 6, $20, $44, $F8 ; fully-formed countdown numbers
00014F96 01                         @five:		dc.b 1
00014F97 F406 204A F8               		dc.b $F4, 6, $20, $4A, $F8
00014F9C 01                         @four:		dc.b 1
00014F9D F406 2050 F8               		dc.b $F4, 6, $20, $50, $F8
00014FA2 01                         @three:		dc.b 1
00014FA3 F406 2056 F8               		dc.b $F4, 6, $20, $56, $F8
00014FA8 01                         @two:		dc.b 1
00014FA9 F406 205C F8               		dc.b $F4, 6, $20, $5C, $F8
00014FAE 01                         @one:		dc.b 1
00014FAF F406 2062 F8               		dc.b $F4, 6, $20, $62, $F8
00014FB4 01                         @bubmaker1:	dc.b 1
00014FB5 F805 0068 F8               		dc.b $F8, 5, 0,	$68, $F8
00014FBA 01                         @bubmaker2:	dc.b 1
00014FBB F805 006C F8               		dc.b $F8, 5, 0,	$6C, $F8
00014FC0 01                         @bubmaker3:	dc.b 1
00014FC1 F805 0070 F8               		dc.b $F8, 5, 0,	$70, $F8
00014FC6 00                         @blank:		dc.b 0
00014FC8 00                         		even
00014FC8 00                         		even
00014FC8                            		include	"_incObj\65 Waterfalls.asm"
00014FC8                            ; ---------------------------------------------------------------------------
00014FC8                            ; Object 65 - waterfalls (LZ)
00014FC8                            ; ---------------------------------------------------------------------------
00014FC8                            
00014FC8                            Waterfall:
00014FC8 7000                       		moveq	#0,d0
00014FCA 1028 0024                  		move.b	obRoutine(a0),d0
00014FCE 323B 0000                  		move.w	WFall_Index(pc,d0.w),d1
00014FD2 4EFB 1000                  		jmp	WFall_Index(pc,d1.w)
00014FD6                            ; ===========================================================================
00014FD6 0000                       WFall_Index:	dc.w WFall_Main-WFall_Index
00014FD8 0000                       		dc.w WFall_Animate-WFall_Index
00014FDA 0000                       		dc.w WFall_ChkDel-WFall_Index
00014FDC 0000                       		dc.w WFall_OnWater-WFall_Index
00014FDE 0000                       		dc.w loc_12B36-WFall_Index
00014FE0                            ; ===========================================================================
00014FE0                            
00014FE0                            WFall_Main:	; Routine 0
00014FE0 5828 0024                  		addq.b	#4,obRoutine(a0)
00014FE4 217C 0000 0000 0004        		move.l	#Map_WFall,obMap(a0)
00014FEC 317C 4259 0002             		move.w	#$4259,obGfx(a0)
00014FF2 0028 0004 0001             		ori.b	#4,obRender(a0)
00014FF8 117C 0018 0014             		move.b	#$18,obActWid(a0)
00014FFE 317C 0080 0018             		move.w	#$80,obPriority(a0)
00015004 1028 0028                  		move.b	obSubtype(a0),d0 ; get object type
00015008 6A00                       		bpl.s	@under80	; branch if $00-$7F
0001500A 08E8 0007 0002             		bset	#7,obGfx(a0)
00015010                            
00015010                            	@under80:
00015010 0200 000F                  		andi.b	#$F,d0		; read only the	2nd digit
00015014 1140 001A                  		move.b	d0,obFrame(a0)	; set frame number
00015018 0C00 0009                  		cmpi.b	#9,d0		; is object type $x9 ?
0001501C 6600                       		bne.s	WFall_ChkDel	; if not, branch
0001501E                            
0001501E 4228 0018                  		clr.b	obPriority(a0)	; object is in front of Sonic
00015022 5528 0024                  		subq.b	#2,obRoutine(a0) ; goto WFall_Animate next
00015026 0828 0006 0028             		btst	#6,obSubtype(a0) ; is object type $49 ?
0001502C 6700                       		beq.s	@not49		; if not, branch
0001502E                            
0001502E 117C 0006 0024             		move.b	#6,obRoutine(a0) ; goto WFall_OnWater next
00015034                            
00015034                            	@not49:
00015034 0828 0005 0028             		btst	#5,obSubtype(a0) ; is object type $A9 ?
0001503A 6700                       		beq.s	WFall_Animate	; if not, branch
0001503C 117C 0008 0024             		move.b	#8,obRoutine(a0) ; goto loc_12B36 next
00015042                            
00015042                            WFall_Animate:	; Routine 2
00015042 43F9 0000 0000             		lea	(Ani_WFall).l,a1
00015048 4EB9 0000 CB4E             		jsr	(AnimateSprite).l
0001504E                            
0001504E                            WFall_ChkDel:	; Routine 4
0001504E 6000 C9C6                  		bra.w	RememberState
00015052                            ; ===========================================================================
00015052                            
00015052                            WFall_OnWater:	; Routine 6
00015052 3038 F646                  		move.w	(v_waterpos1).w,d0
00015056 0440 0010                  		subi.w	#$10,d0
0001505A 3140 000C                  		move.w	d0,obY(a0)	; match	object position	to water height
0001505E 60E2                       		bra.s	WFall_Animate
00015060                            ; ===========================================================================
00015060                            
00015060                            loc_12B36:	; Routine 8
00015060 08A8 0007 0002             		bclr	#7,obGfx(a0)
00015066 0C38 0007 A506             		cmpi.b	#7,(v_lvllayout+$106).w
0001506C 6600                       		bne.s	@animate
0001506E 08E8 0007 0002             		bset	#7,obGfx(a0)
00015074                            
00015074                            	@animate:
00015074 60CC                       		bra.s	WFall_Animate
00015074 60CC                       		bra.s	WFall_Animate
00015076                            		include	"_anim\Waterfalls.asm"
00015076                            ; ---------------------------------------------------------------------------
00015076                            ; Animation script - waterfall (LZ)
00015076                            ; ---------------------------------------------------------------------------
00015076 0000                       Ani_WFall:	dc.w @splash-Ani_WFall
00015078 0509 0A0B FF               @splash:	dc.b 5,	9, $A, $B, afEnd
0001507E 00                         		even
0001507E 00                         		even
0001507E                            Map_WFall	include	"_maps\Waterfalls.asm"
0001507E                            ; ---------------------------------------------------------------------------
0001507E                            ; Sprite mappings - waterfalls (LZ)
0001507E                            ; ---------------------------------------------------------------------------
0001507E                            Map_WFall_internal:
0001507E 0000                       		dc.w @vertnarrow-Map_WFall_internal
00015080 0000                       		dc.w @cornerwide-Map_WFall_internal
00015082 0000                       		dc.w @cornermedium-Map_WFall_internal
00015084 0000                       		dc.w @cornernarrow-Map_WFall_internal
00015086 0000                       		dc.w @cornermedium2-Map_WFall_internal
00015088 0000                       		dc.w @cornernarrow2-Map_WFall_internal
0001508A 0000                       		dc.w @cornernarrow3-Map_WFall_internal
0001508C 0000                       		dc.w @vertwide-Map_WFall_internal
0001508E 0000                       		dc.w @diagonal-Map_WFall_internal
00015090 0000                       		dc.w @splash1-Map_WFall_internal
00015092 0000                       		dc.w @splash2-Map_WFall_internal
00015094 0000                       		dc.w @splash3-Map_WFall_internal
00015096 01                         @vertnarrow:	dc.b 1
00015097 F007 0000 F8               		dc.b $F0, 7, 0,	0, $F8
0001509C 02                         @cornerwide:	dc.b 2
0001509D F804 0008 FC               		dc.b $F8, 4, 0,	8, $FC
000150A2 0008 000A F4               		dc.b 0,	8, 0, $A, $F4
000150A7 02                         @cornermedium:	dc.b 2
000150A8 F800 0008 00               		dc.b $F8, 0, 0,	8, 0
000150AD 0004 000D F8               		dc.b 0,	4, 0, $D, $F8
000150B2 01                         @cornernarrow:	dc.b 1
000150B3 F801 000F 00               		dc.b $F8, 1, 0,	$F, 0
000150B8 02                         @cornermedium2:	dc.b 2
000150B9 F800 0008 00               		dc.b $F8, 0, 0,	8, 0
000150BE 0004 000D F8               		dc.b 0,	4, 0, $D, $F8
000150C3 01                         @cornernarrow2:	dc.b 1
000150C4 F801 0011 00               		dc.b $F8, 1, 0,	$11, 0
000150C9 01                         @cornernarrow3:	dc.b 1
000150CA F801 0013 00               		dc.b $F8, 1, 0,	$13, 0
000150CF 01                         @vertwide:	dc.b 1
000150D0 F007 0015 F8               		dc.b $F0, 7, 0,	$15, $F8
000150D5 02                         @diagonal:	dc.b 2
000150D6 F80C 001D F6               		dc.b $F8, $C, 0, $1D, $F6
000150DB 000C 0021 E8               		dc.b 0,	$C, 0, $21, $E8
000150E0 02                         @splash1:	dc.b 2
000150E1 F00B 0025 E8               		dc.b $F0, $B, 0, $25, $E8
000150E6 F00B 0031 00               		dc.b $F0, $B, 0, $31, 0
000150EB 02                         @splash2:	dc.b 2
000150EC F00B 003D E8               		dc.b $F0, $B, 0, $3D, $E8
000150F1 F00B 0049 00               		dc.b $F0, $B, 0, $49, 0
000150F6 02                         @splash3:	dc.b 2
000150F7 F00B 0055 E8               		dc.b $F0, $B, 0, $55, $E8
000150FC F00B 0061 00               		dc.b $F0, $B, 0, $61, 0
00015102 00                         		even
00015102 00                         		even
00015102                            
00015102                            
00015102                            SpinDash_dust:
00015102                            Sprite_1DD20:				; DATA XREF: ROM:0001600C?o
00015102 7000                       		moveq	#0,d0
00015104 1028 0024                  		move.b	$24(a0),d0
00015108 323B 0000                  		move	off_1DD2E(pc,d0.w),d1
0001510C 4EFB 1000                  		jmp	off_1DD2E(pc,d1.w)
00015110                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
00015110 0000                       off_1DD2E:	dc loc_1DD36-off_1DD2E; 0 ; DATA XREF: h+6DBA?o h+6DBC?o ...
00015112 0000                       		dc loc_1DD90-off_1DD2E; 1
00015114 0000                       		dc loc_1DE46-off_1DD2E; 2
00015116 0000                       		dc loc_1DE4A-off_1DD2E; 3
00015118                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
00015118                            
00015118                            loc_1DD36:				; DATA XREF: h+6DBA?o
00015118 5428 0024                  		addq.b	#2,$24(a0)
0001511C 217C 0000 0000 0004        		move.l	#MapUnc_1DF5E,4(a0)
00015124 0028 0004 0001             		or.b	#4,1(a0)
0001512A 317C 0080 0018             		move.w	#$80,obPriority(a0)
00015130 117C 0010 0014             		move.b	#$10,obActWid(a0)
00015136 317C 07AC 0002             		move	#$7AC,2(a0)
0001513C 317C D000 003E             		move	#-$3000,$3E(a0)
00015142 317C F580 003C             		move	#$F580,$3C(a0)
00015148 B0FC D1C0                  		cmp	#-$2E40,a0
0001514C 6700                       		beq.s	loc_1DD8C
0001514E 117C 0001 0034             		move.b	#1,$34(a0)
00015154                            ;		cmp	#2,($FFFFFF70).w
00015154                            ;		beq.s	loc_1DD8C
00015154                            ;		move	#$48C,2(a0)
00015154                            ;		move	#-$4FC0,$3E(a0)
00015154                            ;		move	#-$6E80,$3C(a0)
00015154                            
00015154                            loc_1DD8C:				; CODE XREF: h+6DF6?j h+6E04?j
00015154                            ;		bsr.w	sub_16D6E
00015154                            
00015154                            loc_1DD90:				; DATA XREF: h+6DBA?o
00015154 3468 003E                  		movea.w	$3E(a0),a2
00015158 7000                       		moveq	#0,d0
0001515A 1028 001C                  		move.b	$1C(a0),d0
0001515E D040                       		add	d0,d0
00015160 323B 0000                  		move	off_1DDA4(pc,d0.w),d1
00015164 4EFB 1000                  		jmp	off_1DDA4(pc,d1.w)
00015168                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
00015168 0000                       off_1DDA4:	dc loc_1DE28-off_1DDA4; 0 ; DATA XREF: h+6E30?o h+6E32?o ...
0001516A 0000                       		dc loc_1DDAC-off_1DDA4; 1
0001516C 0000                       		dc loc_1DDCC-off_1DDA4; 2
0001516E 0000                       		dc loc_1DE20-off_1DDA4; 3
00015170                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
00015170                            
00015170                            loc_1DDAC:				; DATA XREF: h+6E30?o
00015170 3178 F646 000C             		move	($FFFFF646).w,$C(a0)
00015176 4A28 001D                  		tst.b	$1D(a0)
0001517A 6600                       		bne.s	loc_1DE28
0001517C 316A 0008 0008             		move	8(a2),8(a0)
00015182 117C 0000 0022             		move.b	#0,$22(a0)
00015188 0268 7FFF 0002             		and	#$7FFF,2(a0)
0001518E 6000                       		bra.s	loc_1DE28
00015190                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
00015190                            
00015190                            loc_1DDCC:				; DATA XREF: h+6E30?o
00015190                            ;		cmp.b	#$C,$28(a2)
00015190                            ;		bcs.s	loc_1DE3E
00015190 0C2A 0004 0024             		cmp.b	#4,$24(a2)
00015196 6400                       		bcc.s	loc_1DE3E
00015198 4A2A 0039                  		tst.b	$39(a2)
0001519C 6700                       		beq.s	loc_1DE3E
0001519E 316A 0008 0008             		move	8(a2),8(a0)
000151A4 316A 000C 000C             		move	$C(a2),$C(a0)
000151AA 116A 0022 0022             		move.b	$22(a2),$22(a0)
000151B0 0228 0001 0022             		and.b	#1,$22(a0)
000151B6 4A28 0034                  		tst.b	$34(a0)
000151BA 6700                       		beq.s	loc_1DE06
000151BC 5968 000C                  		sub	#4,$C(a0)
000151C0                            
000151C0                            loc_1DE06:				; CODE XREF: h+6E8A?j
000151C0 4A28 001D                  		tst.b	$1D(a0)
000151C4 6600                       		bne.s	loc_1DE28
000151C6 0268 7FFF 0002             		and	#$7FFF,2(a0)
000151CC 4A6A 0002                  		tst	2(a2)
000151D0 6A00                       		bpl.s	loc_1DE28
000151D2 0068 8000 0002             		or	#-$8000,2(a0)
000151D8                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
000151D8                            
000151D8                            loc_1DE20:				; DATA XREF: h+6E30?o
000151D8                            loc_1DE28:				; CODE XREF: h+6E42?j h+6E56?j ...
000151D8 43F9 0000 0000             		lea	(off_1DF38).l,a1
000151DE 4EB9 0000 CB4E             		jsr	AnimateSprite
000151E4 6100 0000                  		bsr.w	loc_1DEE4
000151E8 4EFA A8A2                  		jmp	DisplaySprite
000151EC                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
000151EC                            
000151EC                            loc_1DE3E:				; CODE XREF: h+6E5E?j h+6E66?j ...
000151EC 117C 0000 001C             		move.b	#0,$1C(a0)
000151F2 4E75                       		rts	
000151F4                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
000151F4                            
000151F4                            loc_1DE46:				; DATA XREF: h+6DBA?o
000151F4 6000 A8D6                  		bra.w	DeleteObject
000151F8                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
000151F8                            
000151F8                            
000151F8                            
000151F8                            loc_1DE4A:
000151F8 3468 003E                  	movea.w	$3E(a0),a2
000151FC 7210                       	moveq	#$10,d1
000151FE 0C2A 000D 001C             	cmp.b	#$D,$1C(a2)
00015204 6700                       	beq.s	loc_1DE64
00015206 7206                       	moveq	#$6,d1
00015208 0C2A 0003 0021             	cmp.b	#$3,$21(a2)
0001520E 6700                       	beq.s	loc_1DE64
00015210 117C 0002 0024             	move.b	#2,$24(a0)
00015216 117C 0000 0032             	move.b	#0,$32(a0)
0001521C 4E75                       	rts
0001521E                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
0001521E                            
0001521E                            loc_1DE64:				; CODE XREF: h+6EE0?j
0001521E 5328 0032                  		subq.b	#1,$32(a0)
00015222 6A00                       		bpl.s	loc_1DEE0
00015224 117C 0003 0032             		move.b	#3,$32(a0)
0001522A 4EBA ACEC                  		jsr	FindFreeObj
0001522E 6600                       		bne.s	loc_1DEE0
00015230 1290                       		move.b	0(a0),0(a1)
00015232 336A 0008 0008             		move	8(a2),8(a1)
00015238 336A 000C 000C             		move	$C(a2),$C(a1)
0001523E 4A28 0034                  		tst.b	$34(a0)
00015242 6700                       		beq.s	loc_1DE9A
00015244 5941                       		sub	#4,d1
00015246                            
00015246                            loc_1DE9A:				; CODE XREF: h+6F1E?j
00015246 D369 000C                  		add	d1,$C(a1)
0001524A 137C 0000 0022             		move.b	#0,$22(a1)
00015250 137C 0003 001C             		move.b	#3,$1C(a1)
00015256 5429 0024                  		addq.b	#2,$24(a1)
0001525A 2368 0004 0004             		move.l	4(a0),4(a1)
00015260 1368 0001 0001             		move.b	1(a0),1(a1)
00015266 337C 0080 0018             		move.w	#$80,obPriority(a1)
0001526C 137C 0004 0014             		move.b	#4,obActWid(a1)
00015272 3368 0002 0002             		move	2(a0),2(a1)
00015278 3368 003E 003E             		move	$3E(a0),$3E(a1)
0001527E 0269 7FFF 0002             		and	#$7FFF,2(a1)
00015284 4A6A 0002                  		tst	2(a2)
00015288 6A00                       		bpl.s	loc_1DEE0
0001528A 0069 8000 0002             		or	#-$8000,2(a1)
00015290                            
00015290                            loc_1DEE0:				; CODE XREF: h+6EF4?j h+6F00?j ...
00015290 6100                       		bsr.s	loc_1DEE4
00015292 4E75                       		rts	
00015294                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
00015294                            
00015294                            loc_1DEE4:				; CODE XREF: h+6EC0?p h+6F6C?p
00015294 7000                       		moveq	#0,d0
00015296 1028 001A                  		move.b	$1A(a0),d0
0001529A B028 0030                  		cmp.b	$30(a0),d0
0001529E 6700 0000                  		beq.w	locret_1DF36
000152A2 1140 0030                  		move.b	d0,$30(a0)
000152A6 45F9 0000 0000             		lea	(off_1E074).l,a2
000152AC D040                       		add	d0,d0
000152AE D4F2 0000                  		add	(a2,d0.w),a2
000152B2 3A1A                       		move	(a2)+,d5
000152B4 5345                       		subq	#1,d5
000152B6 6B00 0000                  		bmi.w	locret_1DF36
000152BA 3828 003C                  		move $3C(a0),d4
000152BE                            
000152BE                            loc_1DF0A:				; CODE XREF: h+6FBE?j
000152BE 7200                       		moveq	#0,d1
000152C0 321A                       		move	(a2)+,d1
000152C2 3601                       		move	d1,d3
000152C4 E04B                       		lsr.w	#8,d3
000152C6 0243 00F0                  		and	#$F0,d3	; 'ð'
000152CA 0643 0010                  		add	#$10,d3
000152CE 0241 0FFF                  		and	#$FFF,d1
000152D2 EB89                       		lsl.l	#5,d1
000152D4 0681 0000 0000             		add.l	#Art_Dust,d1
000152DA 3404                       		move	d4,d2
000152DC D843                       		add	d3,d4
000152DE D843                       		add	d3,d4
000152E0 4EB9 0000 1476             		jsr	(QueueDMATransfer).l
000152E6 51CD FFD6                  		dbf	d5,loc_1DF0A
000152EA 4E75                           rts
000152EC                            
000152EC                            locret_1DF36:				; CODE XREF: h+6F7A?j h+6F90?j
000152EC 4E75                       		rts	
000152EE                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
000152EE 0000                       off_1DF38:	dc byte_1DF40-off_1DF38; 0 ; DATA XREF: h+6EB4?o h+6FC4?o ...
000152F0 0000                       		dc byte_1DF43-off_1DF38; 1
000152F2 0000                       		dc byte_1DF4F-off_1DF38; 2
000152F4 0000                       		dc byte_1DF58-off_1DF38; 3
000152F6 1F00 FF                    byte_1DF40:	dc.b $1F,  0,$FF	; 0 ; DATA XREF: h+6FC4?o
000152F9 0301 0203 0405 0607 0809+  byte_1DF43:	dc.b   3,  1,  2,  3,  4,  5,  6,  7,  8,  9,$FD,  0; 0	; DATA XREF: h+6FC4?o
00015305 010A 0B0C 0D0E 0F10 FF     byte_1DF4F:	dc.b   1, $A, $B, $C, $D, $E, $F,$10,$FF; 0 ; DATA XREF: h+6FC4?o
0001530E 0311 1213 14FC             byte_1DF58:	dc.b   3,$11,$12,$13,$14,$FC; 0	; DATA XREF: h+6FC4?o
00015314                            ; -------------------------------------------------------------------------------
00015314                            ; Unknown Sprite Mappings
00015314                            ; -------------------------------------------------------------------------------
00015314                            MapUnc_1DF5E:
00015314 0000                       	dc word_1DF8A-MapUnc_1DF5E; 0
00015316 0000                       	dc word_1DF8C-MapUnc_1DF5E; 1
00015318 0000                       	dc word_1DF96-MapUnc_1DF5E; 2
0001531A 0000                       	dc word_1DFA0-MapUnc_1DF5E; 3
0001531C 0000                       	dc word_1DFAA-MapUnc_1DF5E; 4
0001531E 0000                       	dc word_1DFB4-MapUnc_1DF5E; 5
00015320 0000                       	dc word_1DFBE-MapUnc_1DF5E; 6
00015322 0000                       	dc word_1DFC8-MapUnc_1DF5E; 7
00015324 0000                       	dc word_1DFD2-MapUnc_1DF5E; 8
00015326 0000                       	dc word_1DFDC-MapUnc_1DF5E; 9
00015328 0000                       	dc word_1DFE6-MapUnc_1DF5E; 10
0001532A 0000                       	dc word_1DFF0-MapUnc_1DF5E; 11
0001532C 0000                       	dc word_1DFFA-MapUnc_1DF5E; 12
0001532E 0000                       	dc word_1E004-MapUnc_1DF5E; 13
00015330 0000                       	dc word_1E016-MapUnc_1DF5E; 14
00015332 0000                       	dc word_1E028-MapUnc_1DF5E; 15
00015334 0000                       	dc word_1E03A-MapUnc_1DF5E; 16
00015336 0000                       	dc word_1E04C-MapUnc_1DF5E; 17
00015338 0000                       	dc word_1E056-MapUnc_1DF5E; 18
0001533A 0000                       	dc word_1E060-MapUnc_1DF5E; 19
0001533C 0000                       	dc word_1E06A-MapUnc_1DF5E; 20
0001533E 0000                       	dc word_1DF8A-MapUnc_1DF5E; 21
00015340 00                         word_1DF8A:	dc.b 0
00015341 01                         word_1DF8C:	dc.b 1
00015342 F20D 0000 F0               	dc.b $F2, $0D, $0, 0,$F0; 0
00015347 01                         word_1DF96:	dc.b 1
00015348 E20F 0000 F0               	dc.b $E2, $0F, $0, 0,$F0; 0
0001534D 01                         word_1DFA0:	dc.b 1
0001534E E20F 0000 F0               	dc.b $E2, $0F, $0, 0,$F0; 0
00015353 01                         word_1DFAA:	dc.b 1
00015354 E20F 0000 F0               	dc.b $E2, $0F, $0, 0,$F0; 0
00015359 01                         word_1DFB4:	dc.b 1
0001535A E20F 0000 F0               	dc.b $E2, $0F, $0, 0,$F0; 0
0001535F 01                         word_1DFBE:	dc.b 1
00015360 E20F 0000 F0               	dc.b $E2, $0F, $0, 0,$F0; 0
00015365 01                         word_1DFC8:	dc.b 1
00015366 F20D 0000 F0               	dc.b $F2, $0D, $0, 0,$F0; 0
0001536B 01                         word_1DFD2:	dc.b 1
0001536C F20D 0000 F0               	dc.b $F2, $0D, $0, 0,$F0; 0
00015371 01                         word_1DFDC:	dc.b 1
00015372 F20D 0000 F0               	dc.b $F2, $0D, $0, 0,$F0; 0
00015377 01                         word_1DFE6:	dc.b 1
00015378 040D 0000 E0               	dc.b $4, $0D, $0, 0,$E0; 0
0001537D 01                         word_1DFF0:	dc.b 1
0001537E 040D 0000 E0               	dc.b $4, $0D, $0, 0,$E0; 0
00015383 01                         word_1DFFA:	dc.b 1
00015384 040D 0000 E0               	dc.b $4, $0D, $0, 0,$E0; 0
00015389 02                         word_1E004:	dc.b 2
0001538A F401 0000 E8               	dc.b $F4, $01, $0, 0,$E8; 0
0001538F 040D 0002 E0               	dc.b $4, $0D, $0, 2,$E0; 4
00015394 02                         word_1E016:	dc.b 2
00015395 F405 0000 E8               	dc.b $F4, $05, $0, 0,$E8; 0
0001539A 040D 0004 E0               	dc.b $4, $0D, $0, 4,$E0; 4
0001539F 02                         word_1E028:	dc.b 2
000153A0 F409 0000 E0               	dc.b $F4, $09, $0, 0,$E0; 0
000153A5 040D 0006 E0               	dc.b $4, $0D, $0, 6,$E0; 4
000153AA 02                         word_1E03A:	dc.b 2
000153AB F409 0000 E0               	dc.b $F4, $09, $0, 0,$E0; 0
000153B0 040D 0006 E0               	dc.b $4, $0D, $0, 6,$E0; 4
000153B5 01                         word_1E04C:	dc.b 1
000153B6 F805 0000 F8               	dc.b $F8, $05, $0, 0,$F8; 0
000153BB 01                         word_1E056:	dc.b 1
000153BC F805 0004 F8               	dc.b $F8, $05, $0, 4,$F8; 0
000153C1 01                         word_1E060:	dc.b 1
000153C2 F805 0008 F8               	dc.b $F8, $05, $0, 8,$F8; 0
000153C7 01                         word_1E06A:	dc.b 1
000153C8 F805 000C F8               	dc.b $F8, $05, $0, $C,$F8; 0
000153CD 00                         	dc.b 0
000153CE 0000                       off_1E074:	dc word_1E0A0-off_1E074; 0
000153D0 0000                       	dc word_1E0A2-off_1E074; 1
000153D2 0000                       	dc word_1E0A6-off_1E074; 2
000153D4 0000                       	dc word_1E0AA-off_1E074; 3
000153D6 0000                       	dc word_1E0AE-off_1E074; 4
000153D8 0000                       	dc word_1E0B2-off_1E074; 5
000153DA 0000                       	dc word_1E0B6-off_1E074; 6
000153DC 0000                       	dc word_1E0BA-off_1E074; 7
000153DE 0000                       	dc word_1E0BE-off_1E074; 8
000153E0 0000                       	dc word_1E0C2-off_1E074; 9
000153E2 0000                       	dc word_1E0C6-off_1E074; 10
000153E4 0000                       	dc word_1E0CA-off_1E074; 11
000153E6 0000                       	dc word_1E0CE-off_1E074; 12
000153E8 0000                       	dc word_1E0D2-off_1E074; 13
000153EA 0000                       	dc word_1E0D8-off_1E074; 14
000153EC 0000                       	dc word_1E0DE-off_1E074; 15
000153EE 0000                       	dc word_1E0E4-off_1E074; 16
000153F0 0000                       	dc word_1E0EA-off_1E074; 17
000153F2 0000                       	dc word_1E0EA-off_1E074; 18
000153F4 0000                       	dc word_1E0EA-off_1E074; 19
000153F6 0000                       	dc word_1E0EA-off_1E074; 20
000153F8 0000                       	dc word_1E0EC-off_1E074; 21
000153FA 0000                       word_1E0A0:	dc 0
000153FC 0001                       word_1E0A2:	dc 1
000153FE 7000                       	dc $7000
00015400 0001                       word_1E0A6:	dc 1
00015402 F008                       	dc $F008
00015404 0001                       word_1E0AA:	dc 1
00015406 F018                       	dc $F018
00015408 0001                       word_1E0AE:	dc 1
0001540A F028                       	dc $F028
0001540C 0001                       word_1E0B2:	dc 1
0001540E F038                       	dc $F038
00015410 0001                       word_1E0B6:	dc 1
00015412 F048                       	dc $F048
00015414 0001                       word_1E0BA:	dc 1
00015416 7058                       	dc $7058
00015418 0001                       word_1E0BE:	dc 1
0001541A 7060                       	dc $7060
0001541C 0001                       word_1E0C2:	dc 1
0001541E 7068                       	dc $7068
00015420 0001                       word_1E0C6:	dc 1
00015422 7070                       	dc $7070
00015424 0001                       word_1E0CA:	dc 1
00015426 7078                       	dc $7078
00015428 0001                       word_1E0CE:	dc 1
0001542A 7080                       	dc $7080
0001542C 0002                       word_1E0D2:	dc 2
0001542E 1088                       	dc $1088
00015430 708A                       	dc $708A
00015432 0002                       word_1E0D8:	dc 2
00015434 3092                       	dc $3092
00015436 7096                       	dc $7096
00015438 0002                       word_1E0DE:	dc 2
0001543A 509E                       	dc $509E
0001543C 70A4                       	dc $70A4
0001543E 0002                       word_1E0E4:	dc 2
00015440 50AC                       	dc $50AC
00015442 70B2                       	dc $70B2
00015444 0000                       word_1E0EA:	dc 0
00015446 0001                       word_1E0EC:	dc 1
00015448 F0BA                       	dc $F0BA
0001544A                            	even
0001544A                            
0001544A                            ; ===========================================================================
0001544A                            
0001544A                            LoadPlayerPal:
0001544A 7000                       		moveq	#0,d0
0001544C 1038 FFBF                  		move.b	($FFFFFFBF).w,d0
00015450 103B 0000                  		move.b	@palLUT(pc,d0.w),d0
00015454 4E75                       		rts
00015456                            
00015456                            	@palLUT:
00015456 0315 1617 18               		dc.b	palid_Sonic, palid_Sonic2, palid_Sonic3, palid_Sonic4, palid_Sonic5
0001545B 191A 1B1C 1D               		dc.b	palid_Sonic6, palid_Sonic7, palid_Sonic8, palid_Sonic9, palid_Sonic10
00015460                            
00015460                            LoadPlayerWaterPal:
00015460 7000                       		moveq	#0,d0
00015462 1038 FFBF                  		move.b	($FFFFFFBF).w,d0
00015466 103B 0000                  		move.b	@palLUT(pc,d0.w),d0
0001546A 4E75                       		rts
0001546C                            
0001546C                            	@palLUT:
0001546C 101E 1F20 21               		dc.b	palid_SBZ3SonWat, palid_SonWater2, palid_SonWater3, palid_SonWater4, palid_SonWater5
00015471 2223 2425 26               		dc.b	palid_SonWater6, palid_SonWater7, palid_SonWater8, palid_SonWater9, palid_SonWater10
00015476                            
00015476                            ; ---------------------------------------------------------------------------
00015476                            ; Object 01 - Sonic
00015476                            ; ---------------------------------------------------------------------------
00015476                            
00015476                            SonicPlayer:
00015476 4A78 FE08                  		tst.w	(v_debuguse).w	; is debug mode	being used?
0001547A 6700                       		beq.s	Sonic_Normal	; if not, branch
0001547C 4EF9 0000 0000             		jmp	(DebugMode).l
00015482                            ; ===========================================================================
00015482                            
00015482                            Sonic_Normal:
00015482 7000                       		moveq	#0,d0
00015484 1028 0024                  		move.b	obRoutine(a0),d0
00015488 323B 0000                  		move.w	Sonic_Index(pc,d0.w),d1
0001548C 4EFB 1000                  		jmp	Sonic_Index(pc,d1.w)
00015490                            ; ===========================================================================
00015490 0000                       Sonic_Index:	dc.w Sonic_Main-Sonic_Index
00015492 0000                       		dc.w Sonic_Control-Sonic_Index
00015494 0000                       		dc.w Sonic_Hurt-Sonic_Index
00015496 0000                       		dc.w Sonic_Death-Sonic_Index
00015498 0000                       		dc.w Sonic_ResetLevel-Sonic_Index
0001549A                            ; ===========================================================================
0001549A                            
0001549A                            Sonic_Main:	; Routine 0
0001549A 11FC 0005 D1C0             		move.b	#5,$FFFFD1C0.w
000154A0 5428 0024                  		addq.b	#2,obRoutine(a0)
000154A4 117C 0013 0016             		move.b	#$13,obHeight(a0)
000154AA 117C 0009 0017             		move.b	#9,obWidth(a0)
000154B0 217C 0000 0000 0004        		move.l	#Map_Sonic,obMap(a0)
000154B8 317C 0780 0002             		move.w	#$780,obGfx(a0)
000154BE 317C 0100 0018             		move.w	#$100,obPriority(a0)
000154C4 117C 0018 0014             		move.b	#$18,obActWid(a0)
000154CA 117C 0004 0001             		move.b	#4,obRender(a0)
000154D0 31FC 0600 F760             		move.w	#$600,(v_sonspeedmax).w ; Sonic's top speed
000154D6 31FC 000C F762             		move.w	#$C,(v_sonspeedacc).w ; Sonic's acceleration
000154DC 31FC 0080 F764             		move.w	#$80,(v_sonspeeddec).w ; Sonic's deceleration
000154E2 11FC 0005 D1C0             		move.b	#5,$FFFFD1C0.w
000154E8                            
000154E8                            Sonic_Control:    ; Routine 2
000154E8 4A38 FF8B                   		tst.b	($FFFFFF8B).w
000154EC 6700 0000                  		beq.w	@cont    
000154F0 6100                       		bsr.s    Sonic_PanCamera    ; ++add this++
000154F2                             
000154F2                            	@cont: 
000154F2 4A78 FFFA                  		tst.w    (f_debugmode).w    ; is debug cheat enabled?
000154F6 6700                       		beq.s    loc_12C58    ; if not, branch
000154F8 0838 0004 F605             		btst    #bitB,(v_jpadpress1).w ; is button B pressed?
000154FE 6700                       		beq.s    loc_12C58    ; if not, branch
00015500 31FC 0001 FE08             		move.w    #1,(v_debuguse).w ; change Sonic into a ring/item
00015506 4238 F7CC                  		clr.b    (f_lockctrl).w
0001550A 4E75                       		rts
0001550C                            		
0001550C                            		include    "_incObj\Sonic PanCamera.asm"    ; ++add this++
0001550C                            ; ---------------------------------------------------------------------------
0001550C                            ; Subroutine to    horizontally pan the camera view ahead of the player
0001550C                            ; (Ported from the US version of Sonic CD's "R11A__.MMD" by Nat The Porcupine)
0001550C                            ; ---------------------------------------------------------------------------
0001550C                            
0001550C                            ; ||||||||||||||| S U B    R O U T    I N E |||||||||||||||||||||||||||||||||||||||
0001550C                            
0001550C                            
0001550C                            Sonic_PanCamera:
0001550C 3238 F7A0                          move.w    (v_camera_pan).w,d1        ; get the current camera pan value
00015510 3028 0020                          move.w    obInertia(a0),d0        ; get sonic's inertia
00015514 6A00                               bpl.s    @abs_inertia            ; if sonic's inertia is positive, branch ahead
00015516 4440                               neg.w    d0                        ; otherwise, we negate it to get the absolute value
00015518                            
00015518                                @abs_inertia:
00015518                            
00015518                            ; These lines were intended to prevent the Camera from panning while
00015518                            ; going up the very first giant ramp in Palmtree Panic Zone Act 1.
00015518                            ; However, given that no such object exists in Sonic 1, I just went
00015518                            ; ahead and commented these out.
00015518                            ;        btst    #1,$2C(a0)                ; is sonic going up a giant ramp in PPZ?
00015518                            ;        beq.s    @skip                    ; if not, branch
00015518                            ;        cmpi.w    #$1B00,obX(a0)            ; is sonic's x position lower than $1B00?
00015518                            ;        bcs.s    @reset_pan                ; if so, branch
00015518                            
00015518                            ; These lines aren't part of the original routine; I added them myself.
00015518                            ; If you've ported the Spin Dash, uncomment the following lines of code
00015518                            ; to allow the camera to pan ahead while charging the Spin Dash:
00015518 4A28 0039                          tst.b    $39(a0)                    ; is sonic charging up a spin dash?
0001551C 6700                               beq.s    @skip                    ; if not, branch
0001551E 0828 0000 0022                     btst    #0,obStatus(a0)            ; check the direction that sonic is facing
00015524 6600                               bne.s    @pan_right                ; if he's facing right, pan the camera to the right
00015526 6000                               bra.s    @pan_left                ; otherwise, pan the camera to the left
00015528                            
00015528                                @skip:
00015528 0C40 0600                          cmpi.w    #$600,d0                ; is sonic's inertia greater than $600
0001552C 6500                               bcs.s    @reset_pan                ; if not, recenter the screen (if needed)
0001552E 4A68 0020                          tst.w    obInertia(a0)            ; otherwise, check the direction of inertia (by subtracting it from 0)
00015532 6A00                               bpl.s    @pan_left                ; if the result was positive, then inertia was negative, so we pan the screen left
00015534                            
00015534                                @pan_right:
00015534 5441                               addq.w    #2,d1                    ; add 2 to the pan value
00015536 0C41 00E0                          cmpi.w    #224,d1                    ; is the pan value greater than 224 pixels?
0001553A 6500                               bcs.s    @update_pan                ; if not, branch
0001553C 323C 00E0                          move.w    #224,d1                    ; otherwise, cap the value at the maximum of 224 pixels
00015540 6000                               bra.s    @update_pan                ; branch
00015542                            ; ---------------------------------------------------------------------------
00015542                            
00015542                                @pan_left:
00015542 5541                               subq.w    #2,d1                    ; subtract 2 from the pan value
00015544 0C41 0060                          cmpi.w    #96,d1                    ; is the pan value less than 96 pixels?
00015548 6400                               bcc.s    @update_pan                ; if not, branch
0001554A 323C 0060                          move.w    #96,d1                    ; otherwise, cap the value at the minimum of 96 pixels
0001554E 6000                               bra.s    @update_pan                ; branch
00015550                            ; ---------------------------------------------------------------------------
00015550                            
00015550                                @reset_pan:
00015550 0C41 00A0                          cmpi.w    #160,d1                    ; is the pan value 160 pixels?
00015554 6700                               beq.s    @update_pan                ; if so, branch
00015556 6400                               bcc.s    @reset_left                ; otherwise, branch if it greater than 160
00015558                                 
00015558                                @reset_right:
00015558 5441                               addq.w    #2,d1                    ; add 2 to the pan value
0001555A 6000                               bra.s    @update_pan                ; branch
0001555C                            ; ---------------------------------------------------------------------------
0001555C                            
0001555C                                @reset_left:
0001555C 5541                               subq.w    #2,d1                    ; subtract 2 from the pan value
0001555E                            
0001555E                                @update_pan:
0001555E 31C1 F7A0                          move.w    d1,(v_camera_pan).w        ; update the camera pan value
00015562 4E75                               rts                                ; return
00015564                                 
00015564                            ; End of function Sonic_PanCamera
00015564                            
00015564                            
00015564                            ; ===========================================================================
00015564                            
00015564                            loc_12C58:
00015564 4A38 F7CC                  		tst.b	(f_lockctrl).w	; are controls locked?
00015568 6600                       		bne.s	loc_12C64	; if yes, branch
0001556A 31F8 F604 F602             		move.w	(v_jpadhold1).w,(v_jpadhold2).w ; enable joypad control
00015570                            
00015570                            loc_12C64:
00015570 0838 0000 F7C8             		btst	#0,(f_lockmulti).w ; are controls locked?
00015576 6600                       		bne.s	loc_12C7E	; if yes, branch
00015578 7000                       		moveq	#0,d0
0001557A 1028 0022                  		move.b	obStatus(a0),d0
0001557E 0240 0006                  		andi.w	#6,d0
00015582 323B 0000                  		move.w	Sonic_Modes(pc,d0.w),d1
00015586 4EBB 1000                  		jsr	Sonic_Modes(pc,d1.w)
0001558A                            
0001558A                            loc_12C7E:
0001558A 6100                       		bsr.s	Sonic_Display
0001558C 6100 0000                  		bsr.w	Sonic_RecordPosition
00015590 6100 0000                  		bsr.w	Sonic_Water
00015594 1178 F768 0036             		move.b	(v_anglebuffer).w,$36(a0)
0001559A 1178 F76A 0037             		move.b	($FFFFF76A).w,$37(a0)
000155A0 4A38 F7C7                  		tst.b	(f_wtunnelmode).w
000155A4 6700                       		beq.s	loc_12CA6
000155A6 4A28 001C                  		tst.b	obAnim(a0)
000155AA 6600                       		bne.s	loc_12CA6
000155AC 1168 001D 001C             		move.b	obNextAni(a0),obAnim(a0)
000155B2                            
000155B2                            loc_12CA6:
000155B2 6100 0000                  		bsr.w	Sonic_Animate
000155B6 4A38 F7C8                  		tst.b	(f_lockmulti).w
000155BA 6B00                       		bmi.s	loc_12CB6
000155BC 4EB9 0000 0000             		jsr	(ReactToItem).l
000155C2                            
000155C2                            loc_12CB6:
000155C2 6100 0000                  		bsr.w	Sonic_Loops
000155C6 6100 0000                  		bsr.w	Sonic_LoadGfx
000155CA 4E75                       		rts	
000155CC                            ; ===========================================================================
000155CC 0000                       Sonic_Modes:	dc.w Sonic_MdNormal-Sonic_Modes
000155CE 0000                       		dc.w Sonic_MdJump-Sonic_Modes
000155D0 0000                       		dc.w Sonic_MdRoll-Sonic_Modes
000155D2 0000                       		dc.w Sonic_MdJump2-Sonic_Modes
000155D4                            ; ---------------------------------------------------------------------------
000155D4                            ; Music	to play	after invincibility wears off
000155D4                            ; ---------------------------------------------------------------------------
000155D4                            MusicList2:
000155D4 00                         		dc.b bgm_GHZ
000155D5 00                         		dc.b bgm_LZ
000155D6 00                         		dc.b bgm_MZ
000155D7 00                         		dc.b bgm_SLZ
000155D8 00                         		dc.b bgm_SYZ
000155D9 00                         		dc.b bgm_SBZ
000155DA                            		; The ending doesn't get an entry
000155DA                            		even
000155DA                            
000155DA                            		include	"_incObj\Sonic Display.asm"
000155DA                            ; ---------------------------------------------------------------------------
000155DA                            ; Subroutine to display Sonic and set music
000155DA                            ; ---------------------------------------------------------------------------
000155DA                            
000155DA                            Sonic_Display:
000155DA 3028 0030                  		move.w    flashtime(a0),d0
000155DE 6700                       		beq.s    @showAfterImage
000155E0 5368 0030                  		subq.w    #1,flashtime(a0)
000155E4 E648                               	lsr.w    #3,d0
000155E6 6400                               	bcc.s    @chkinvincible
000155E8                            
000155E8                            	@showAfterImage:
000155E8 3028 0020                          	move.w    obInertia(a0),d0            ; get inertia
000155EC 4A40                       		tst.w    d0                    ; is inertia greater than 0?
000155EE 6C00                       		bge.s    @AfterImage_Start    ; if yes, don't negate it
000155F0 4440                       		neg        d0                    ; if not, negate it
000155F2                            
000155F2                            	@AfterImage_Start:        
000155F2 4A38 FE2E                  		tst.b	(v_shoes).w	; does Sonic have speed	shoes?
000155F6 6700                       		beq.s	@display	; if not, don't show the After Image
000155F8                            		;cmpi.w    #$900,d0	; is the sonic inertia greater than A00?
000155F8                            		;blt.s    @display	; if not, don't show the After Image
000155F8                            	
000155F8                            	@AfterImage_Start2:    
000155F8 6100 A91E                          	bsr.w    FindFreeObj    ; search a free space in object RAM
000155FC 6600                               	bne.s    @display    ; if not have, don't load the After Image
000155FE 12BC 0010                          	move.b  #$10,0(a1)        ; load after-image object
00015602 2368 0004 0004                     	move.l    obMap(a0),obMap(a1)        ; copy Sonic mappings to after-image mappings
00015608 3368 0008 0008                     	move.w    obX(a0),obX(a1)        ; copy Sonic x-pos to after-image x-pos
0001560E 3368 000C 000C                     	move.w    obY(a0),obY(a1)    ; copy Sonic y-pos to after-image y-pos
00015614                            
00015614                                	@display:
00015614 4EB9 0000 FA8C                     	jsr    (DisplaySprite).l
0001561A                            
0001561A                            	@chkinvincible:
0001561A 4A38 FE2D                  		tst.b	(v_invinc).w	; does Sonic have invincibility?
0001561E 6700                       		beq.s	@chkshoes	; if not, branch
00015620 4A68 0032                  		tst.w	invtime(a0)	; check	time remaining for invinciblity
00015624 6700                       		beq.s	@chkshoes	; if no	time remains, branch
00015626 5368 0032                  		subq.w	#1,invtime(a0)	; subtract 1 from time
0001562A 6600                       		bne.s	@chkshoes
0001562C 4A38 F7AA                  		tst.b	(f_lockscreen).w
00015630 6600                       		bne.s	@removeinvincible
00015632 0C78 000C FE14             		cmpi.w	#$C,(v_air).w
00015638 6500                       		bcs.s	@removeinvincible
0001563A 1038 F5C6                  		move.b  (v_Saved_music),d0    ; loads song number from RAM
0001563E 4EB9 0000 129A                     	jsr	(PlaySound).l    ; play normal music
00015644                            
00015644                            	@removeinvincible:
00015644 11FC 0000 FE2D             		move.b	#0,(v_invinc).w ; cancel invincibility
0001564A                            
0001564A                            	@chkshoes:
0001564A 4A38 FE2E                  		tst.b	(v_shoes).w	; does Sonic have speed	shoes?
0001564E 6700                       		beq.s	@exit		; if not, branch
00015650 4A68 0034                  		tst.w	shoetime(a0)	; check	time remaining
00015654 6700                       		beq.s	@exit
00015656 5368 0034                  		subq.w	#1,shoetime(a0)	; subtract 1 from time
0001565A 6600                       		bne.s	@exit
0001565C 31FC 0600 F760             		move.w	#$600,(v_sonspeedmax).w ; restore Sonic's speed
00015662 31FC 000C F762             		move.w	#$C,(v_sonspeedacc).w ; restore Sonic's acceleration
00015668 31FC 0080 F764             		move.w	#$80,(v_sonspeeddec).w ; restore Sonic's deceleration
0001566E 11FC 0000 FE2E             		move.b	#0,(v_shoes).w	; cancel speed shoes
00015674 1038 F5C6                  		move.b  (v_Saved_music),d0    ; loads song number from RAM
00015678 4EB9 0000 129A                     	jsr	(PlaySound).l    ; play normal music
0001567E                            		
0001567E                            	@exit:
0001567E 4E75                       		rts	
0001567E 4E75                       		rts	
00015680                            		include	"_incObj\Sonic RecordPosition.asm"
00015680                            ; ---------------------------------------------------------------------------
00015680                            ; Subroutine to	record Sonic's previous positions for invincibility stars
00015680                            ; ---------------------------------------------------------------------------
00015680                            
00015680                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015680                            
00015680                            
00015680                            Sonic_RecordPosition:
00015680 3038 F7A8                  		move.w	(v_trackpos).w,d0
00015684 43F8 CB00                  		lea	(v_tracksonic).w,a1
00015688 43F1 0000                  		lea	(a1,d0.w),a1
0001568C 32E8 0008                  		move.w	obX(a0),(a1)+
00015690 32E8 000C                  		move.w	obY(a0),(a1)+
00015694 5838 F7A9                  		addq.b	#4,(v_trackbyte).w
00015698 4E75                       		rts	
0001569A                            ; End of function Sonic_RecordPosition
0001569A                            ; End of function Sonic_RecordPosition
0001569A                            		include	"_incObj\Sonic Water.asm"
0001569A                            ; ---------------------------------------------------------------------------
0001569A                            ; Subroutine for Sonic when he's underwater
0001569A                            ; ---------------------------------------------------------------------------
0001569A                            
0001569A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001569A                            
0001569A                            
0001569A                            Sonic_Water:
0001569A 0C38 0004 FE10             		cmpi.b	#id_SYZ,(v_zone).w	;TIS is level MZ?
000156A0 6700                       		beq.s	WaterTagforMZ	; if yes, branch
000156A2 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w	; is level LZ?
000156A8 6700                       		beq.s	Sonic_Water_LZ	; if yes, branch
000156AA                            
000156AA                            	Sonic_Water_Exit:
000156AA 4E75                       		rts	
000156AC                            ; ===========================================================================
000156AC                            
000156AC                            	Sonic_Water_LZ:
000156AC 3038 F646                  		move.w	(v_waterpos1).w,d0
000156B0 B068 000C                  		cmp.w	obY(a0),d0	; is Sonic above the water?
000156B4 6C00 0000                  		bge.w	Abovewater	; if yes, branch
000156B8 6000 0000                  		bra	WaterStatus
000156BC                            	WaterTagforMZ:
000156BC 0C38 0000 F5C4             		cmpi.b	#0,(v_tagwater).w	;TIS Lava Tag?
000156C2 6700 0000                  		beq.w	Abovewater	; if yes, branch
000156C6                            		;move.w #$F,d0             ;TIS Length ($F = full line)
000156C6                            		;lea    (Pal_LZSonWatr2),a1  ;Palette location
000156C6                                ;    lea    ($FFFFFB00),a2        ;RAM location ($FB00 = line 1)
000156C6                            	;	jsr	Palload_Loop
000156C6                            	WaterStatus:
000156C6 08E8 0006 0022             		bset	#6,obStatus(a0)
000156CC 6600 FFDC                  		bne.w	Sonic_Water_Exit
000156D0 6100 0000                  		bsr.w	ResumeMusic
000156D4 31F8 D00C FF92             		move.w	(v_player+obY).w,(v_watersplashpos).w	;TIS copy y-pos
000156DA                            
000156DA 11FC 000A D340             		move.b	#id_DrownCount,(v_objspace+$340).w ; load bubbles object from Sonic's mouth
000156E0 11FC 0081 D368             		move.b	#$81,(v_objspace+$340+obSubtype).w
000156E6 31FC 0300 F760             		move.w	#$300,(v_sonspeedmax).w ; change Sonic's top speed
000156EC 31FC 0006 F762             		move.w	#6,(v_sonspeedacc).w ; change Sonic's acceleration
000156F2 31FC 0040 F764             		move.w	#$40,(v_sonspeeddec).w ; change Sonic's deceleration
000156F8 E0E8 0010                  		asr	obVelX(a0)
000156FC E0E8 0012                  		asr	obVelY(a0)
00015700 E0E8 0012                  		asr	obVelY(a0)	; slow Sonic
00015704 6700 FFA4                  		beq.w	Sonic_Water_Exit		; branch if Sonic stops moving
00015708                            		;move.w	(v_player+obY).w,(v_watersplashpos).w	;TIS copy y-pos
00015708 31FC 0100 D1DC                     move.w    #$100,($FFFFD1DC).w    ; set the spin dash dust animation to splash
00015718 0C38 0000 F5C4             		cmpi.b	#0,(v_tagwater).w	;TIS Lava Tag?
0001571E 6600 0000                  		bne.w	@return
00015722                            		
00015722                            		
00015722                            	@return:
00015722 4E75                       		rts
00015724                            ; ===========================================================================
00015724                            
00015724                            Abovewater:
00015724 08A8 0006 0022             		bclr	#6,obStatus(a0)
0001572A 6700 FF7E                  		beq.w	Sonic_Water_Exit
0001572E 6100 0000                  		bsr.w	ResumeMusic
00015732 31F8 D00C FF92             		move.w	(v_player+obY).w,(v_watersplashpos).w	;TIS copy y-pos
00015738                            
00015738 31FC 0600 F760             		move.w	#$600,(v_sonspeedmax).w ; restore Sonic's speed
0001573E 31FC 000C F762             		move.w	#$C,(v_sonspeedacc).w ; restore Sonic's acceleration
00015744 31FC 0080 F764             		move.w	#$80,(v_sonspeeddec).w ; restore Sonic's deceleration
0001574A E1E8 0012                  		asl	obVelY(a0)
0001574E 6700 FF5A                  		beq.w	Sonic_Water_Exit
00015752 31FC 0100 D1DC                     move.w    #$100,($FFFFD1DC).w    ; set the spin dash dust animation to splash
00015758 0C68 F000 0012             		cmpi.w	#-$1000,obVelY(a0)
0001575E 6E00                       		bgt.s	@belowmaxspeed
00015760 317C F000 0012             		move.w	#-$1000,obVelY(a0) ; set maximum speed on leaving water
00015766                            
00015766                            	@belowmaxspeed:
00015770                            ; End of function Sonic_Water
00015770                            ; End of function Sonic_Water
00015770                            		include "_incObj\03 Hangable Sprite.asm"
00015770                            ; ===========================================================================
00015770                            ; ----------------------------------------------------------------------------
00015770                            ; Object 03 - Invisible sprite that you can hang on to
00015770                            ; ----------------------------------------------------------------------------
00015770                            ; Sprite_2C92C:
00015770                            Obj03:
00015770 7000                       	moveq    #0,d0
00015772 1028 0024                      move.b    obRoutine(a0),d0            ;just use s1 version of this variable
00015776 323B 0000                      move.w    Obj03_Index(pc,d0.w),d1
0001577A 4EFB 1000                      jmp    Obj03_Index(pc,d1.w)
0001577E                            ; ===========================================================================
0001577E                            ; off_2C93A:
0001577E                            Obj03_Index:
0001577E 0000                           dc.w Obj03_Main-Obj03_Index
00015780 0000                               dc.w Obj03_Init-Obj03_Index
00015782                            ; ===========================================================================
00015782                            ; loc_2C93E:
00015782                            Obj03_Init:
00015782 5428 0024                      addq.b    #2,obRoutine(a0)        ;just use s1 version of this variable
00015786 117C 0004 0001                 move.b    #4,obRender(a0)    ;just use s1 version of this variable
0001578C 117C 0018 0014                 move.b    #$18,obActWid(a0)    ;just use s1 version of this variable
00015792 317C 0200 0018                 move.w    #$200,obPriority(a0)            ;just use s1 version of this variable
00015798                            ; loc_2C954:
00015798                            Obj03_Main:
00015798 45E8 0030                      lea    $30(a0),a2
0001579C 43F8 D000                      lea    (v_player).w,a1 ; a1=character
000157A0 3038 F604                      move.w    (v_jpadhold1).w,d0 			;S1 has same ram address for controller as S2 just different variable name like on the line above
000157A4 6100                           bsr.s    Obj03_Check
000157A6                            ;    lea    (Sidekick).w,a1 ; a1=character  ;disabled
000157A6                            ;    addq.w    #1,a2                          ;disabled
000157A6                            ;    move.w    (Ctrl_2).w,d0                    ;disabled
000157A6                            ;    bsr.s    Obj03_Check         	;disabled
000157A6 4EF9 0000 0000             	jmp		bonu_chkdel
000157AC                            ; ===========================================================================
000157AC                            ; loc_2C972:
000157AC                            Obj03_Check:
000157AC 4A12                       		tst.b	(a2)
000157AE 6700                       		beq.s	loc_2C9A0
000157B0 0200 0070                  		andi.b	#btnABC,d0
000157B4 6700 0000                  		beq.w	Obj03_Check_End
000157B8 4238 F7C8                  		clr.b	f_lockmulti.w
000157BC 4212                       		clr.b	(a2)
000157BE 157C 0012 0002             		move.b	#$12,2(a2)
000157C4 0240 0F00                  		andi.w	#$F00,d0
000157C8 6700                       		beq.s	loc_2C954
000157CA 157C 003C 0002             		move.b	#$3C,2(a2)
000157D0                            	
000157D0                            loc_2C954:
000157D0 337C FD00 0012             		move.w	#-$300,y_vel(a1)
000157D6 6000 0000                  		bra.w	Obj03_Check_End
000157DA                            ; ===========================================================================
000157DA                            
000157DA                            loc_2C9A0:
000157DA 4A2A 0002                  		tst.b	2(a2)
000157DE 6700                       		beq.s	loc_2C972
000157E0 532A 0002                  		subq.b	#1,2(a2)
000157E4 6600 0000                  		bne.w	Obj03_Check_End
000157E8                            
000157E8                            loc_2C972:
000157E8 3029 0008                  		move.w	obX(a1),d0
000157EC 9068 0008                  		sub.w	obX(a0),d0
000157F0 0640 0018                  		addi.w	#$18,d0
000157F4 0C40 0030                  		cmpi.w	#$30,d0
000157F8 6400 0000                  		bhs.w	Obj03_Check_End
000157FC 3229 000C                  		move.w	obY(a1),d1
00015800 9268 000C                  		sub.w	obY(a0),d1
00015804 0C41 0010                  		cmpi.w	#$10,d1
00015808 6400 0000                  		bhs.w	Obj03_Check_End
0001580C 4A38 F7C8                  		tst.b	f_lockmulti.w
00015810 6B00                       		bmi.s	Obj03_Check_End
00015812 0C29 0006 0024             		cmpi.b	#6,obRoutine(a1)
00015818 6400                       		bhs.s	Obj03_Check_End
0001581A 4A78 FFFA                  		tst.w	(f_debugmode).w
0001581E 6600                       		bne.s	Obj03_Check_End
00015820 4269 0010                  		clr.w	x_vel(a1)
00015824 4269 0012                  		clr.w	y_vel(a1)
00015828 4269 0020                  		clr.w	obInertia(a1)
0001582C 3368 000C 000C             		move.w	obY(a0),obY(a1)
00015832 137C 0000 001C             		move.b	#id_Hang2,obAnim(a1)
00015838 11FC 0001 F7C8             		move.b	#1,f_lockmulti.w
0001583E 14BC 0001                  		move.b	#1,(a2)
00015842                            
00015842                            ; return_2CA08:
00015842                            Obj03_Check_End:
00015842 4E75                       		rts
00015842 4E75                       		rts
00015844                            
00015844                            ; ===========================================================================
00015844                            ; ---------------------------------------------------------------------------
00015844                            ; Modes	for controlling	Sonic
00015844                            ; ---------------------------------------------------------------------------
00015844                            
00015844                            Sonic_MdNormal:
00015844 6100 0000                  		bsr.w	Sonic_Peelout
00015848 6100 0000                  		bsr.w	Sonic_SpinDash
0001584C 6100 0000                  		bsr.w	Sonic_Jump
00015850 6100 0000                  		bsr.w	Sonic_SlopeResist
00015854 6100 0000                  		bsr.w	Sonic_Move
00015858 6100 0000                  		bsr.w	Sonic_Roll
0001585C 6100 0000                  		bsr.w	Sonic_LevelBound
00015860 4EB9 0000 FA78             		jsr	(SpeedToPos).l
00015866 6100 0000                  		bsr.w	Sonic_AnglePos
0001586A 6100 0000                  		bsr.w	Sonic_SlopeRepel
0001586E 4E75                       		rts	
00015870                            
00015870                            ; ===========================================================================
00015870                            
00015870                            Sonic_MdJump:
00015870 6100 0000                  		bsr.w   Sonic_AirRoll
00015874 6100 0000                  		bsr.w	Sonic_JumpHeight
00015878 6100 0000                  		bsr.w	Sonic_JumpDirection
0001587C 6100 0000                  		bsr.w	Sonic_LevelBound
00015880 4EB9 0000 FA40             		jsr	(ObjectFall).l
00015886 0828 0006 0022             		btst	#6,obStatus(a0)
0001588C 6700                       		beq.s	loc_12E5C
0001588E 0468 0028 0012             		subi.w	#$28,obVelY(a0)
00015894                            
00015894                            loc_12E5C:
00015894 6100 0000                  		bsr.w	Sonic_JumpAngle
00015898 6100 0000                  		bsr.w	Sonic_Floor
0001589C 4E75                       		rts	
0001589E                            ; ===========================================================================
0001589E                            
0001589E                            Sonic_MdRoll:
0001589E 6100 0000                  		bsr.w	Sonic_Jump
000158A2 6100 0000                  		bsr.w	Sonic_RollRepel
000158A6 6100 0000                  		bsr.w	Sonic_RollSpeed
000158AA 6100 0000                  		bsr.w	Sonic_LevelBound
000158AE 4EB9 0000 FA78             		jsr	(SpeedToPos).l
000158B4 6100 0000                  		bsr.w	Sonic_AnglePos
000158B8 6100 0000                  		bsr.w	Sonic_SlopeRepel
000158BC 4E75                       		rts	
000158BE                            ; ===========================================================================
000158BE                            
000158BE                            Sonic_MdJump2:
000158BE 6100 0000                  		bsr.w	Sonic_JumpHeight
000158C2 6100 0000                  		bsr.w	Sonic_JumpDirection
000158C6 6100 0000                  		bsr.w	Sonic_LevelBound
000158CA 4EB9 0000 FA40             		jsr	(ObjectFall).l
000158D0 0828 0006 0022             		btst	#6,obStatus(a0)
000158D6 6700                       		beq.s	loc_12EA6
000158D8 0468 0028 0012             		subi.w	#$28,obVelY(a0)
000158DE                            
000158DE                            loc_12EA6:
000158DE 6100 0000                  		bsr.w	Sonic_JumpAngle
000158E2 6100 0000                  		bsr.w	Sonic_Floor
000158E6 4E75                       		rts	
000158E8                            
000158E8                            		include	"_incObj\Sonic Move.asm"
000158E8                            ; ---------------------------------------------------------------------------
000158E8                            ; Subroutine to	make Sonic walk/run
000158E8                            ; ---------------------------------------------------------------------------
000158E8                            
000158E8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000158E8                            
000158E8                            
000158E8                            Sonic_Move:
000158E8 3C38 F760                  		move.w	(v_sonspeedmax).w,d6
000158EC 3A38 F762                  		move.w	(v_sonspeedacc).w,d5
000158F0 3838 F764                  		move.w	(v_sonspeeddec).w,d4
000158F4 4A38 F7CA                  		tst.b	(f_jumponly).w
000158F8 6600 0000                  		bne.w	loc_12FEE
000158FC 4A68 003E                  		tst.w	$3E(a0)
00015900 6600 0000                  		bne.w	Sonic_ResetScr
00015904 0838 0002 F602             		btst	#bitL,(v_jpadhold2).w ; is left being pressed?
0001590A 6700                       		beq.s	@notleft	; if not, branch
0001590C 6100 0000                  		bsr.w	Sonic_MoveLeft
00015910                            
00015910                            	@notleft:
00015910 0838 0003 F602             		btst	#bitR,(v_jpadhold2).w ; is right being pressed?
00015916 6700                       		beq.s	@notright	; if not, branch
00015918 6100 0000                  		bsr.w	Sonic_MoveRight
0001591C                            
0001591C                            	@notright:
0001591C 1028 0026                  		move.b	obAngle(a0),d0
00015920 0600 0020                  		addi.b	#$20,d0
00015924 0200 00C0                  		andi.b	#$C0,d0		; is Sonic on a	slope?
00015928 6600 0000                  		bne.w	Sonic_ResetScr	; if yes, branch
0001592C 4A68 0020                  		tst.w	obInertia(a0)	; is Sonic moving?
00015930 6600 0000                  		bne.w	Sonic_ResetScr	; if yes, branch
00015934 08A8 0005 0022             		bclr	#5,obStatus(a0)
0001593A 117C 0000 001C             		move.b	#id_Wait,obAnim(a0) ; use "standing" animation
00015940 0828 0003 0022             		btst	#3,obStatus(a0)
00015946 6700                       		beq.s	Sonic_Balance
00015948 7000                       		moveq	#0,d0
0001594A 1028 003D                  		move.b	$3D(a0),d0
0001594E ED48                       		lsl.w	#6,d0
00015950 43F8 D000                  		lea	(v_objspace).w,a1
00015954 43F1 0000                  		lea	(a1,d0.w),a1
00015958 4A29 0022                  		tst.b	obStatus(a1)
0001595C 6B00                       		bmi.s	Sonic_LookUp
0001595E 7200                       		moveq	#0,d1
00015960 1229 0014                  		move.b	obActWid(a1),d1
00015964 3401                       		move.w	d1,d2
00015966 D442                       		add.w	d2,d2
00015968 5942                       		subq.w	#4,d2
0001596A D268 0008                  		add.w	obX(a0),d1
0001596E 9269 0008                  		sub.w	obX(a1),d1
00015972 0C41 0004                  		cmpi.w	#4,d1
00015976 6D00                       		blt.s	loc_12F6A
00015978 B242                       		cmp.w	d2,d1
0001597A 6C00                       		bge.s	loc_12F5A
0001597C 6000                       		bra.s	Sonic_LookUp
0001597E                            ; ===========================================================================
0001597E                            
0001597E                            Sonic_Balance:
0001597E 4EB9 0000 0000             		jsr	(ObjFloorDist).l
00015984 0C41 000C                  		cmpi.w	#$C,d1
00015988 6D00                       		blt.s	Sonic_LookUp
0001598A 0C28 0003 0036             		cmpi.b	#3,$36(a0)
00015990 6600                       		bne.s	loc_12F62
00015992                            
00015992                            loc_12F5A:
00015992 08A8 0000 0022             		bclr	#0,obStatus(a0)
00015998 6000                       		bra.s	loc_12F70
0001599A                            ; ===========================================================================
0001599A                            
0001599A                            loc_12F62:
0001599A 0C28 0003 0037             		cmpi.b	#3,$37(a0)
000159A0 6600                       		bne.s	Sonic_LookUp
000159A2                            
000159A2                            loc_12F6A:
000159A2 08E8 0000 0022             		bset	#0,obStatus(a0)
000159A8                            
000159A8                            loc_12F70:
000159A8 117C 0000 001C             		move.b	#id_Balance,obAnim(a0) ; use "balancing" animation
000159AE 6000 0000                  		bra.w	Sonic_ResetScr
000159B2                            ; ===========================================================================
000159B2                            
000159B2                            Sonic_LookUp:
000159B2 0838 0000 F602             		btst	#0,($FFFFF602).w ; is up being pressed?
000159B8 6700                       		beq.s	Sonic_Duck	; if not, branch
000159BA 117C 0007 001C             		move.b	#7,$1C(a0)	; use "looking up" animation
000159C0 5238 C903                  		addq.b	#1,($FFFFC903).w
000159C4 0C38 0078 C903             		cmp.b	#$78,($FFFFC903).w
000159CA 6500                       		bcs.s	Sonic_ResetScr_Part2
000159CC 11FC 0078 C903             		move.b	#$78,($FFFFC903).w
000159D2 0C78 00C8 F73E             		cmpi.w	#$C8,($FFFFF73E).w
000159D8 6700                       		beq.s	loc_12FC2
000159DA 5478 F73E                  		addq.w	#2,($FFFFF73E).w
000159DE 6000                       		bra.s	loc_12FC2
000159E0                            ; ===========================================================================
000159E0                            
000159E0                            Sonic_Duck:
000159E0 0838 0001 F602             		btst	#1,($FFFFF602).w ; is down being pressed?
000159E6 6700                       		beq.s	Sonic_ResetScr	; if not, branch
000159E8 117C 0008 001C             		move.b	#8,$1C(a0)	; use "ducking"	animation
000159EE 5238 C903                  		addq.b	#1,($FFFFC903).w
000159F2 0C38 0078 C903             		cmpi.b	#$78,($FFFFC903).w
000159F8 6500                       		bcs.s	Sonic_ResetScr_Part2
000159FA 11FC 0078 C903             		move.b	#$78,($FFFFC903).w
00015A00 0C78 0008 F73E             		cmpi.w	#8,($FFFFF73E).w
00015A06 6700                       		beq.s	loc_12FC2
00015A08 5578 F73E                  		subq.w	#2,($FFFFF73E).w
00015A0C 6000                       		bra.s	loc_12FC2
00015A0E                            ; ===========================================================================
00015A0E                            
00015A0E                            Sonic_ResetScr:
00015A0E 11FC 0000 C903             		move.b	#0,($FFFFC903).w
00015A14                            		
00015A14                            Sonic_ResetScr_Part2:
00015A14 0C78 0060 F73E             		cmpi.w	#$60,($FFFFF73E).w ; is	screen in its default position?
00015A1A 6700                       		beq.s	loc_12FC2	; if yes, branch
00015A1C 6400                       		bcc.s	loc_12FBE
00015A1E 5878 F73E                  		addq.w	#4,($FFFFF73E).w ; move	screen back to default
00015A22                            
00015A22                            loc_12FBE:
00015A22 5578 F73E                  		subq.w	#2,($FFFFF73E).w ; move	screen back to default
00015A26                            
00015A26                            loc_12FC2:
00015A26 1038 F602                  		move.b	(v_jpadhold2).w,d0
00015A2A 0200 000C                  		andi.b	#btnL+btnR,d0	; is left/right	pressed?
00015A2E 6600                       		bne.s	loc_12FEE	; if yes, branch
00015A30 3028 0020                  		move.w	obInertia(a0),d0
00015A34 6700                       		beq.s	loc_12FEE
00015A36 6B00                       		bmi.s	loc_12FE2
00015A38 9045                       		sub.w	d5,d0
00015A3A 6400                       		bcc.s	loc_12FDC
00015A3C 303C 0000                  		move.w	#0,d0
00015A40                            
00015A40                            loc_12FDC:
00015A40 3140 0020                  		move.w	d0,obInertia(a0)
00015A44 6000                       		bra.s	loc_12FEE
00015A46                            ; ===========================================================================
00015A46                            
00015A46                            loc_12FE2:
00015A46 D045                       		add.w	d5,d0
00015A48 6400                       		bcc.s	loc_12FEA
00015A4A 303C 0000                  		move.w	#0,d0
00015A4E                            
00015A4E                            loc_12FEA:
00015A4E 3140 0020                  		move.w	d0,obInertia(a0)
00015A52                            
00015A52                            loc_12FEE:
00015A52 4A28 0039                  		tst.b	$39(a0) 	;Peelout
00015A56 6600                       		bne.s	loc_1300C 	;Peelout
00015A58 1028 0026                  		move.b	obAngle(a0),d0
00015A5C 4EB9 0000 3A82             		jsr	(CalcSine).l
00015A62 C3E8 0020                  		muls.w	obInertia(a0),d1
00015A66 E081                       		asr.l	#8,d1
00015A68 3141 0010                  		move.w	d1,obVelX(a0)
00015A6C C1E8 0020                  		muls.w	obInertia(a0),d0
00015A70 E080                       		asr.l	#8,d0
00015A72 3140 0012                  		move.w	d0,obVelY(a0)
00015A76                            
00015A76                            loc_1300C:
00015A76 1028 0026                  		move.b	obAngle(a0),d0
00015A7A 0600 0040                  		addi.b	#$40,d0
00015A7E 6B00                       		bmi.s	locret_1307C
00015A80 123C 0040                  		move.b	#$40,d1
00015A84 4A68 0020                  		tst.w	obInertia(a0)
00015A88 6700                       		beq.s	locret_1307C
00015A8A 6B00                       		bmi.s	loc_13024
00015A8C 4441                       		neg.w	d1
00015A8E                            
00015A8E                            loc_13024:
00015A8E 1028 0026                  		move.b	obAngle(a0),d0
00015A92 D001                       		add.b	d1,d0
00015A94 3F00                       		move.w	d0,-(sp)
00015A96 6100 0000                  		bsr.w	Sonic_WalkSpeed
00015A9A 301F                       		move.w	(sp)+,d0
00015A9C 4A41                       		tst.w	d1
00015A9E 6A00                       		bpl.s	locret_1307C
00015AA0 E141                       		asl.w	#8,d1
00015AA2 0600 0020                  		addi.b	#$20,d0
00015AA6 0200 00C0                  		andi.b	#$C0,d0
00015AAA 6700                       		beq.s	loc_13078
00015AAC 0C00 0040                  		cmpi.b	#$40,d0
00015AB0 6700                       		beq.s	loc_13066
00015AB2 0C00 0080                  		cmpi.b	#$80,d0
00015AB6 6700                       		beq.s	loc_13060
00015AB8 D368 0010                  		add.w	d1,obVelX(a0)
00015ABC 08E8 0005 0022             		bset	#5,obStatus(a0)
00015AC2 317C 0000 0020             		move.w	#0,obInertia(a0)
00015AC8 4E75                       		rts	
00015ACA                            ; ===========================================================================
00015ACA                            
00015ACA                            loc_13060:
00015ACA 9368 0012                  		sub.w	d1,obVelY(a0)
00015ACE 4E75                       		rts	
00015AD0                            ; ===========================================================================
00015AD0                            
00015AD0                            loc_13066:
00015AD0 9368 0010                  		sub.w	d1,obVelX(a0)
00015AD4 08E8 0005 0022             		bset	#5,obStatus(a0)
00015ADA 317C 0000 0020             		move.w	#0,obInertia(a0)
00015AE0 4E75                       		rts	
00015AE2                            ; ===========================================================================
00015AE2                            
00015AE2                            loc_13078:
00015AE2 D368 0012                  		add.w	d1,obVelY(a0)
00015AE6                            
00015AE6                            locret_1307C:
00015AE6 4E75                       		rts	
00015AE8                            ; End of function Sonic_Move
00015AE8                            
00015AE8                            
00015AE8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015AE8                            
00015AE8                            
00015AE8                            Sonic_MoveLeft:
00015AE8 3028 0020                  		move.w	obInertia(a0),d0
00015AEC 6700                       		beq.s	loc_13086
00015AEE 6A00                       		bpl.s	loc_130B2
00015AF0                            
00015AF0                            loc_13086:
00015AF0 08E8 0000 0022             		bset	#0,$22(a0)
00015AF6 6600                       		bne.s	loc_1309A
00015AF8 08A8 0005 0022             		bclr	#5,$22(a0)
00015AFE 117C 0001 001D             		move.b	#1,$1D(a0)
00015B04                            
00015B04                            loc_1309A:
00015B04 9045                       		sub.w	d5,d0
00015B06 3206                       		move.w	d6,d1
00015B08 4441                       		neg.w	d1
00015B0A B041                       		cmp.w	d1,d0
00015B0C 6E00                       		bgt.s	loc_130A6
00015B0E D045                       		add.w	d5,d0
00015B10 B041                       		cmp.w	d1,d0
00015B12 6F00                       		ble.s	loc_130A6
00015B14 3001                       		move.w	d1,d0
00015B16                            
00015B16                            loc_130A6:
00015B16 3140 0020                  		move.w	d0,obInertia(a0)
00015B1A 117C 0000 001C             		move.b	#0,$1C(a0); use walking animation
00015B20 4E75                       		rts
00015B22                            ; ===========================================================================
00015B22                            
00015B22                            loc_130B2:
00015B22 9044                       		sub.w	d4,d0
00015B24 6400                       		bcc.s	loc_130BA
00015B26 303C FF80                  		move.w	#-$80,d0
00015B2A                            
00015B2A                            loc_130BA:
00015B2A 3140 0020                  		move.w	d0,obInertia(a0)
00015B2E 1228 0026                  		move.b	obAngle(a0),d1
00015B32 0601 0020                  		addi.b	#$20,d1
00015B36 0201 00C0                  		andi.b	#$C0,d1
00015B3A 6600                       		bne.s	locret_130E8
00015B3C 0C40 0400                  		cmpi.w	#$400,d0
00015B40 6D00                       		blt.s	locret_130E8
00015B42 117C 0000 001C             		move.b	#id_Stop,obAnim(a0) ; use "stopping" animation
00015B48 08A8 0000 0022             		bclr	#0,obStatus(a0)
00015B58 11FC 0006 D1E4                     move.b    #6,($FFFFD1E4).w    ; set the spin dash dust routine to skid dust
00015B5E 11FC 0015 D1DA                     move.b    #$15,($FFFFD1DA).w
00015B64                            		
00015B64                            locret_130E8:
00015B64 4E75                       		rts	
00015B66                            ; End of function Sonic_MoveLeft
00015B66                            
00015B66                            
00015B66                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015B66                            
00015B66                            
00015B66                            Sonic_MoveRight:
00015B66 3028 0020                  		move.w	obInertia(a0),d0
00015B6A 6B00                       		bmi.s	loc_13118
00015B6C 08A8 0000 0022             		bclr	#0,$22(a0)
00015B72 6700                       		beq.s	loc_13104
00015B74 08A8 0005 0022             		bclr	#5,$22(a0)
00015B7A 117C 0001 001D             		move.b	#1,$1D(a0)
00015B80                            
00015B80                            loc_13104:
00015B80 D045                       		add.w	d5,d0
00015B82 B046                       		cmp.w	d6,d0
00015B84 6D00                       		blt.s	loc_1310C
00015B86 9045                       		sub.w	d5,d0
00015B88 B046                       		cmp.w	d6,d0
00015B8A 6C00                       		bge.s	loc_1310C
00015B8C 3006                       		move.w	d6,d0
00015B8E                            
00015B8E                            loc_1310C:
00015B8E 3140 0020                  		move.w	d0,obInertia(a0)
00015B92 117C 0000 001C             		move.b	#0,$1C(a0); use walking animation
00015B98 4E75                       		rts
00015B9A                            ; ===========================================================================
00015B9A                            
00015B9A                            loc_13118:
00015B9A D044                       		add.w	d4,d0
00015B9C 6400                       		bcc.s	loc_13120
00015B9E 303C 0080                  		move.w	#$80,d0
00015BA2                            
00015BA2                            loc_13120:
00015BA2 3140 0020                  		move.w	d0,obInertia(a0)
00015BA6 1228 0026                  		move.b	obAngle(a0),d1
00015BAA 0601 0020                  		addi.b	#$20,d1
00015BAE 0201 00C0                  		andi.b	#$C0,d1
00015BB2 6600                       		bne.s	locret_1314E
00015BB4 0C40 FC00                  		cmpi.w	#-$400,d0
00015BB8 6E00                       		bgt.s	locret_1314E
00015BBA 117C 0000 001C             		move.b	#id_Stop,obAnim(a0) ; use "stopping" animation
00015BC0 08E8 0000 0022             		bset	#0,obStatus(a0)
00015BD0 11FC 0006 D1E4                     move.b    #6,($FFFFD1E4).w    ; set the spin dash dust routine to skid dust
00015BD6 11FC 0015 D1DA                     move.b    #$15,($FFFFD1DA).w
00015BDC                            		
00015BDC                            locret_1314E:
00015BDC 4E75                       		rts	
00015BDE                            ; End of function Sonic_MoveRight
00015BDE                            ; End of function Sonic_MoveRight
00015BDE                            		include	"_incObj\Sonic RollSpeed.asm"
00015BDE                            ; ---------------------------------------------------------------------------
00015BDE                            ; Subroutine to	change Sonic's speed as he rolls
00015BDE                            ; ---------------------------------------------------------------------------
00015BDE                            
00015BDE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015BDE                            
00015BDE                            
00015BDE                            Sonic_RollSpeed:
00015BDE 3C38 F760                  		move.w	(v_sonspeedmax).w,d6
00015BE2 E346                       		asl.w	#1,d6
00015BE4 7A06                       		moveq	#6,d5	; natural roll deceleration = 1/2 normal acceleration
00015BE6 3838 F764                  		move.w	(v_sonspeeddec).w,d4
00015BEA E444                       		asr.w	#2,d4
00015BEC 4A38 F7CA                  		tst.b	(f_jumponly).w
00015BF0 6600 0000                  		bne.w	loc_131CC
00015BF4 4A68 003E                  		tst.w	$3E(a0)
00015BF8 6600                       		bne.s	@notright
00015BFA 0838 0002 F602             		btst	#bitL,(v_jpadhold2).w ; is left being pressed?
00015C00 6700                       		beq.s	@notleft	; if not, branch
00015C02 6100 0000                  		bsr.w	Sonic_RollLeft
00015C06                            
00015C06                            	@notleft:
00015C06 0838 0003 F602             		btst	#bitR,(v_jpadhold2).w ; is right being pressed?
00015C0C 6700                       		beq.s	@notright	; if not, branch
00015C0E 6100 0000                  		bsr.w	Sonic_RollRight
00015C12                            
00015C12                            	@notright:
00015C12 3028 0020                  		move.w	obInertia(a0),d0
00015C16 6700                       		beq.s	loc_131AA
00015C18 6B00                       		bmi.s	loc_1319E
00015C1A 9045                       		sub.w	d5,d0
00015C1C 6400                       		bcc.s	loc_13198
00015C1E 303C 0000                  		move.w	#0,d0
00015C22                            
00015C22                            loc_13198:
00015C22 3140 0020                  		move.w	d0,obInertia(a0)
00015C26 6000                       		bra.s	loc_131AA
00015C28                            ; ===========================================================================
00015C28                            
00015C28                            loc_1319E:
00015C28 D045                       		add.w	d5,d0
00015C2A 6400                       		bcc.s	loc_131A6
00015C2C 303C 0000                  		move.w	#0,d0
00015C30                            
00015C30                            loc_131A6:
00015C30 3140 0020                  		move.w	d0,obInertia(a0)
00015C34                            
00015C34                            loc_131AA:
00015C34 4A68 0020                  		tst.w	obInertia(a0)	; is Sonic moving?
00015C38 6600                       		bne.s	loc_131CC	; if yes, branch
00015C3A 08A8 0002 0022             		bclr	#2,obStatus(a0)
00015C40 117C 0013 0016             		move.b	#$13,obHeight(a0)
00015C46 117C 0009 0017             		move.b	#9,obWidth(a0)
00015C4C 117C 0000 001C             		move.b	#id_Wait,obAnim(a0) ; use "standing" animation
00015C52 5B68 000C                  		subq.w	#5,obY(a0)
00015C56                            
00015C56                            loc_131CC:
00015C56 0C78 0060 F73E             		cmp.w	#$60,($FFFFF73E).w
00015C5C 6700                       		beq.s	@cont2
00015C5E 6400                       		bcc.s	@cont1
00015C60 5878 F73E                  		addq.w	#4,($FFFFF73E).w
00015C64                            		
00015C64                            @cont1:
00015C64 5578 F73E                  		subq.w	#2,($FFFFF73E).w
00015C68                            		
00015C68                            @cont2:
00015C68 1028 0026                  		move.b	obAngle(a0),d0
00015C6C 4EB9 0000 3A82             		jsr	(CalcSine).l
00015C72 C1E8 0020                  		muls.w	obInertia(a0),d0
00015C76 E080                       		asr.l	#8,d0
00015C78 3140 0012                  		move.w	d0,obVelY(a0)
00015C7C C3E8 0020                  		muls.w	obInertia(a0),d1
00015C80 E081                       		asr.l	#8,d1
00015C82 0C41 1000                  		cmpi.w	#$1000,d1
00015C86 6F00                       		ble.s	loc_131F0
00015C88 323C 1000                  		move.w	#$1000,d1
00015C8C                            
00015C8C                            loc_131F0:
00015C8C 0C41 F000                  		cmpi.w	#-$1000,d1
00015C90 6C00                       		bge.s	loc_131FA
00015C92 323C F000                  		move.w	#-$1000,d1
00015C96                            
00015C96                            loc_131FA:
00015C96 3141 0010                  		move.w	d1,obVelX(a0)
00015C9A 6000 FDDA                  		bra.w	loc_1300C
00015C9E                            ; End of function Sonic_RollSpeed
00015C9E                            
00015C9E                            
00015C9E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015C9E                            
00015C9E                            
00015C9E                            Sonic_RollLeft:
00015C9E 3028 0020                  		move.w	obInertia(a0),d0
00015CA2 6700                       		beq.s	loc_1320A
00015CA4 6A00                       		bpl.s	loc_13218
00015CA6                            
00015CA6                            loc_1320A:
00015CA6 08E8 0000 0022             		bset	#0,obStatus(a0)
00015CAC 117C 0000 001C             		move.b	#id_Roll,obAnim(a0) ; use "rolling" animation
00015CB2 4E75                       		rts	
00015CB4                            ; ===========================================================================
00015CB4                            
00015CB4                            loc_13218:
00015CB4 9044                       		sub.w	d4,d0
00015CB6 6400                       		bcc.s	loc_13220
00015CB8 303C FF80                  		move.w	#-$80,d0
00015CBC                            
00015CBC                            loc_13220:
00015CBC 3140 0020                  		move.w	d0,obInertia(a0)
00015CC0 4E75                       		rts	
00015CC2                            ; End of function Sonic_RollLeft
00015CC2                            
00015CC2                            
00015CC2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015CC2                            
00015CC2                            
00015CC2                            Sonic_RollRight:
00015CC2 3028 0020                  		move.w	obInertia(a0),d0
00015CC6 6B00                       		bmi.s	loc_1323A
00015CC8 08A8 0000 0022             		bclr	#0,obStatus(a0)
00015CCE 117C 0000 001C             		move.b	#id_Roll,obAnim(a0) ; use "rolling" animation
00015CD4 4E75                       		rts	
00015CD6                            ; ===========================================================================
00015CD6                            
00015CD6                            loc_1323A:
00015CD6 D044                       		add.w	d4,d0
00015CD8 6400                       		bcc.s	loc_13242
00015CDA 303C 0080                  		move.w	#$80,d0
00015CDE                            
00015CDE                            loc_13242:
00015CDE 3140 0020                  		move.w	d0,obInertia(a0)
00015CE2 4E75                       		rts	
00015CE4                            ; End of function Sonic_RollRight
00015CE4                            ; End of function Sonic_RollRight
00015CE4                            		include	"_incObj\Sonic JumpDirection.asm"
00015CE4                            ; ---------------------------------------------------------------------------
00015CE4                            ; Subroutine to	change Sonic's direction while jumping
00015CE4                            ; ---------------------------------------------------------------------------
00015CE4                            
00015CE4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015CE4                            
00015CE4                            
00015CE4                            Sonic_JumpDirection:
00015CE4 3C38 F760                  		move.w	($FFFFF760).w,d6
00015CE8 3A38 F762                  		move.w	($FFFFF762).w,d5
00015CEC E345                       		asl.w	#1,d5
00015CEE 3028 0010                  		move.w	$10(a0),d0	
00015CF2 0838 0002 F602             		btst	#2,($FFFFF602).w; is left being pressed?	
00015CF8 6700                       		beq.s	loc_13278; if not, branch	
00015CFA 08E8 0000 0022             		bset	#0,$22(a0)	
00015D00 9045                       		sub.w	d5,d0	
00015D02 3206                       		move.w	d6,d1	
00015D04 4441                       		neg.w	d1	
00015D06 B041                       		cmp.w	d1,d0	
00015D08 6E00                       		bgt.s	loc_13278	
00015D0A D045                       		add.w	d5,d0		; +++ remove this frame's acceleration change
00015D0C B041                       		cmp.w	d1,d0		; +++ compare speed with top speed
00015D0E 6F00                       		ble.s	loc_13278	; +++ if speed was already greater than the maximum, branch	
00015D10 3001                       		move.w	d1,d0
00015D12                            
00015D12                            loc_13278:
00015D12 0838 0003 F602             		btst	#3,($FFFFF602).w; is right being pressed?	
00015D18 6700                       		beq.s	Obj01_JumpMove; if not, branch	
00015D1A 08A8 0000 0022             		bclr	#0,$22(a0)	
00015D20 D045                       		add.w	d5,d0	
00015D22 B046                       		cmp.w	d6,d0	
00015D24 6D00                       		blt.s	Obj01_JumpMove
00015D26 9045                       		sub.w	d5,d0		; +++ remove this frame's acceleration change
00015D28 B046                       		cmp.w	d6,d0		; +++ compare speed with top speed
00015D2A 6C00                       		bge.s	Obj01_JumpMove	; +++ if speed was already greater than the maximum, branch
00015D2C 3006                       		move.w	d6,d0
00015D2E                            
00015D2E                            Obj01_JumpMove:
00015D2E 3140 0010                  		move.w	d0,obVelX(a0)	; change Sonic's horizontal speed
00015D32                            
00015D32                            Obj01_ResetScr2:
00015D32 0C78 0060 F73E             		cmpi.w	#$60,(v_lookshift).w ; is the screen in its default position?
00015D38 6700                       		beq.s	loc_132A4	; if yes, branch
00015D3A 6400                       		bcc.s	loc_132A0
00015D3C 5878 F73E                  		addq.w	#4,(v_lookshift).w
00015D40                            
00015D40                            loc_132A0:
00015D40 5578 F73E                  		subq.w	#2,(v_lookshift).w
00015D44                            
00015D44                            loc_132A4:
00015D44 0C68 FC00 0012             		cmpi.w	#-$400,obVelY(a0) ; is Sonic moving faster than -$400 upwards?
00015D4A 6500                       		bcs.s	locret_132D2	; if yes, branch
00015D4C 3028 0010                  		move.w	obVelX(a0),d0
00015D50 3200                       		move.w	d0,d1
00015D52 EA41                       		asr.w	#5,d1
00015D54 6700                       		beq.s	locret_132D2
00015D56 6B00                       		bmi.s	loc_132C6
00015D58 9041                       		sub.w	d1,d0
00015D5A 6400                       		bcc.s	loc_132C0
00015D5C 303C 0000                  		move.w	#0,d0
00015D60                            
00015D60                            loc_132C0:
00015D60 3140 0010                  		move.w	d0,obVelX(a0)
00015D64 4E75                       		rts	
00015D66                            ; ===========================================================================
00015D66                            
00015D66                            loc_132C6:
00015D66 9041                       		sub.w	d1,d0
00015D68 6500                       		bcs.s	loc_132CE
00015D6A 303C 0000                  		move.w	#0,d0
00015D6E                            
00015D6E                            loc_132CE:
00015D6E 3140 0010                  		move.w	d0,obVelX(a0)
00015D72                            
00015D72                            locret_132D2:
00015D72 4E75                       		rts	
00015D74                            ; End of function Sonic_JumpDirection
00015D74                            ; End of function Sonic_JumpDirection
00015D74                            		include "_incObj\Sonic Peelout.asm"
00015D74                            ; ---------------------------------------------------------------------------
00015D74                            ; Subroutine to make Sonic perform a peelout
00015D74                            ; ---------------------------------------------------------------------------
00015D74                            ; If you use this makes sure to search for ;Peelout in Sonic1.asm
00015D74                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015D74                            
00015D74                            Sonic_Peelout:
00015D74 0828 0001 0039             		btst	#1,$39(a0)
00015D7A 6600                       		bne.s	SCDPeelout_Launch
00015D7C 0C28 0007 001C             		cmpi.b	#7,$1C(a0) ;check to see if your looking up
00015D82 6600                       		bne.s	@return
00015D84 1038 F603                  		move.b	($FFFFF603).w,d0
00015D88 0200 0070                  		andi.b	#%01110000,d0
00015D8C 6700 0000                  		beq.w	@return
00015D90 117C 0001 001C             		move.b	#1,$1C(a0)
00015D96 317C 0000 003A             		move.w	#0,$3A(a0)
00015D9C 303C 00D2                  		move.w	#$D2,d0
00015DA0 4EB9 0000 12A0             		jsr	(PlaySound_Special).l 		; Play peelout charge sound
00015DA6                            	;	sfx 	sfx_PeeloutCharge 		; These are if you use AMPS
00015DA6 588F                       		addq.l	#4,sp
00015DA8 08E8 0001 0039             		bset	#1,$39(a0)
00015DAE                            		
00015DAE 4268 0020                  		clr.w	obInertia(a0)
00015DB2                             
00015DB2 6100 0000                  		bsr.w	Sonic_LevelBound
00015DB6 6100 0000                  		bsr.w	Sonic_AnglePos
00015DBA                             
00015DBA                            	@return:
00015DBA 4E75                       		rts	
00015DBC                            ; ---------------------------------------------------------------------------
00015DBC                             
00015DBC                            SCDPeelout_Launch:
00015DBC 0828 0001 0039             		btst	#1,$39(a0)
00015DC2 1038 F602                  		move.b	($FFFFF602).w,d0
00015DC6 0800 0000                  		btst	#0,d0
00015DCA 6600 0000                  		bne.w	SCDPeelout_Charge
00015DCE 08A8 0001 0039             		bclr	#1,$39(a0)	; stop Dashing
00015DD4 0C28 001E 003A             		cmpi.b	#$1E,$3A(a0)	; have we been charging long enough?
00015DDA 6600 0000                  		bne.w	SCDPeelout_Stop_Sound
00015DDE 117C 0000 001C             		move.b	#0,$1C(a0)	; launches here (peelout sprites)
00015DE4 317C 0001 0010             		move.w	#1,$10(a0)	; force X speed to nonzero for camera lag's benefit
00015DEA 3028 0020                  		move.w	obInertia(a0),d0
00015DEE 0440 0800                  		subi.w	#$800,d0
00015DF2 D040                       		add.w	d0,d0
00015DF4 0240 1F00                  		andi.w	#$1F00,d0
00015DF8 4440                       		neg.w	d0
00015DFA 0640 2000                  		addi.w	#$2000,d0
00015DFE 31C0 C904                  		move.w	d0,($FFFFC904).w
00015E02 0828 0000 0022             		btst	#0,$22(a0)
00015E08 6700                       		beq.s	@dontflip
00015E0A 4468 0020                  		neg.w	obInertia(a0)
00015E0E                             
00015E0E                            @dontflip:
00015E0E 08A8 0007 0022             		bclr	#7,$22(a0)
00015E14 303C 00D3                  		move.w	#$D3,d0
00015E18 4EB9 0000 12A0             		jsr	(PlaySound_Special).l
00015E1E                            	;	sfx 	sfx_PeeloutRelease
00015E1E 1028 0026                  		move.b	obAngle(a0),d0
00015E22 4EB9 0000 3A82             		jsr	(CalcSine).l
00015E28 C3E8 0020                  		muls.w	obInertia(a0),d1
00015E2C E081                       		asr.l	#8,d1
00015E2E 3141 0010                  		move.w	d1,obVelX(a0)
00015E32 C1E8 0020                  		muls.w	obInertia(a0),d0
00015E36 E080                       		asr.l	#8,d0
00015E38 3140 0012                  		move.w	d0,obVelY(a0)	
00015E3C 6000 0000                  		bra.w	SCDPeelout_ResetScr
00015E40                            ; ---------------------------------------------------------------------------
00015E40                             
00015E40                            SCDPeelout_Charge:				; If still charging the dash...
00015E40 3238 F760                  		move.w	($FFFFF760).w,d1	; get top peelout speed
00015E44 3401                       		move.w	d1,d2
00015E46 D241                       		add.w	d1,d1
00015E48 4A38 FE2E                  		tst.b   ($FFFFFE2E).w 		; test for speed shoes
00015E4C 6700                       		beq.s	@noshoes
00015E4E E242                       		asr.w	#1,d2
00015E50 9242                       		sub.w	d2,d1
00015E52                            
00015E52                            @noshoes:
00015E52 0668 0064 0020             		addi.w	#$64,obInertia(a0)		; increment speed
00015E58 B268 0020                  		cmp.w	obInertia(a0),d1
00015E5C 6E00                       		bgt.s	@inctimer
00015E5E 3141 0020                  		move.w	d1,obInertia(a0)
00015E62                            
00015E62                            @inctimer:
00015E62 5228 003A                  		addq.b	#1,$3A(a0)		; increment timer
00015E66 0C28 001E 003A             		cmpi.b	#$1E,$3A(a0)
00015E6C 6500                       		bcs.s	SCDPeelout_ResetScr
00015E6E 117C 001E 003A             		move.b	#$1E,$3A(a0)
00015E74 4EF9 0000 0000             		jmp 	SCDPeelout_ResetScr
00015E7A                            		
00015E7A                            SCDPeelout_Stop_Sound:
00015E7A 303C 00D4                  		move.w	#$D4,d0
00015E7E 4EB9 0000 12A0             		jsr		(PlaySound_Special).l
00015E84                            	;	sfx 	sfx_PeeloutStop
00015E84 4268 0020                  		clr.w	obInertia(a0)
00015E88                            
00015E88                            SCDPeelout_ResetScr:
00015E88 588F                       		addq.l	#4,sp			; increase stack ptr ; was 4
00015E8A 0C78 0060 F73E             		cmpi.w	#$60,($FFFFF73E).w
00015E90 6700                       		beq.s	@finish
00015E92 6400                       		bcc.s	@skip
00015E94 5878 F73E                  		addq.w	#4,($FFFFF73E).w
00015E98                             
00015E98                            	@skip:
00015E98 5578 F73E                  		subq.w	#2,($FFFFF73E).w
00015E9C                             
00015E9C                            	@finish:
00015E9C 6100 0000                  		bsr.w	Sonic_LevelBound
00015EA0 6100 0000                  		bsr.w	Sonic_AnglePos
00015EA4 4E75                       		rts
00015EA6                            		
00015EA6                            		
00015EA6                            		include "_incObj\Sonic Spindash.asm"
00015EA6                            ; ---------------------------------------------------------------------------
00015EA6                            ; Subroutine to make Sonic perform a spindash
00015EA6                            ; ---------------------------------------------------------------------------
00015EA6                             
00015EA6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015EA6                             
00015EA6                             
00015EA6                            Sonic_SpinDash:
00015EA6 4A28 0039                  		tst.b	f_spindash(a0)			; already Spin Dashing?
00015EAA 6600                       		bne.s	loc2_1AC8E		; if set, branch
00015EAC 0C28 0000 001C             		cmpi.b	#id_duck,obAnim(a0)		; is anim duck
00015EB2 6600                       		bne.s	locret2_1AC8C		; if not, return
00015EB4 1038 F603                  		move.b	(v_jpadpress2).w,d0	; read controller
00015EB8 0200 0070                  		andi.b	#$70,d0			; pressing A/B/C ?
00015EBC 6700 0000                  		beq.w	locret2_1AC8C		; if not, return
00015EC0 117C 0000 001C             		move.b	#id_spindash,obAnim(a0)		; set Spin Dash anim (9 in s2)
00015EC6 303C 00D5                  		move.w	#$D5,d0			; spin sound ($E0 in s2)
00015ECA 4EB9 0000 12A0             		jsr	(PlaySound_Special).l	; play spin sound
00015ED0 588F                       		addq.l	#4,sp			; Add 4 bytes to the stack return address to skip Sonic_Jump on next rts to Obj01_MdNormal, preventing conflicts with button presses.
00015ED2 117C 0001 0039             		move.b	#1,f_spindash(a0)		; set Spin Dash flag
00015ED8 317C 0000 003A             		move.w	#0,$3A(a0)		; set charge count to 0
00015EDE                            		;cmpi.b	#$C,$28(a0)		; ??? oxygen remaining?
00015EDE                            		;bcs.s	loc2_1AC84		; ??? branch if carry
00015EDE 11FC 0002 D1DC             		move.b	#2,($FFFFD1DC).w	; Set the Spin Dash dust animation to $2.
00015EE4                            						; the smoke/dust object
00015EE4                            loc2_1AC84:
00015EE4 6100 0000                  		bsr.w	Sonic_LevelBound
00015EE8 6100 0000                  		bsr.w	Sonic_AnglePos
00015EEC                            
00015EEC                            locret2_1AC8C:
00015EEC 4E75                       		rts	
00015EEE                            ; ---------------------------------------------------------------------------
00015EEE                            
00015EEE                            loc2_1AC8E:	
00015EEE 117C 001F 001C             		move.b	#$1F,$1C(a0)
00015EF4 1038 F602                  		move.b	(v_jpadhold2).w,d0	; read controller
00015EF8 0800 0001                  		btst	#1,d0			; check down button
00015EFC 6600 0000                  		bne.w	loc2_1AD30		; if set, branch
00015F00 117C 000E 0016             		move.b	#$E,$16(a0)		; $16(a0) is height/2
00015F06 117C 0007 0017             		move.b	#7,$17(a0)		; $17(a0) is width/2
00015F0C 117C 0000 001C             		move.b	#id_roll,obAnim(a0)		; set animation to roll
00015F12 5A68 000C                  		addq.w	#5,$C(a0)		; $C(a0) is Y coordinate
00015F16 117C 0000 0039             		move.b	#0,f_spindash(a0)		; clear Spin Dash flag
00015F1C 7000                       		moveq	#0,d0
00015F1E 1028 003A                  		move.b	$3A(a0),d0		; copy charge count
00015F22 D040                       		add.w	d0,d0			; double it
00015F24 317B 0000 0020             		move.w	Dash_Speeds(pc,d0.w),obInertia(a0) ; get normal speed
00015F2A 3028 0020                  		move.w	obInertia(a0),d0		; get inertia
00015F2E 0440 0800                  		subi.w	#$800,d0		; subtract $800
00015F32 D040                       		add.w	d0,d0			; double it
00015F34 0240 1F00                  		andi.w	#$1F00,d0		; mask it against $1F00
00015F38 4440                       		neg.w	d0			; negate it
00015F3A 0640 2000                  		addi.w	#$2000,d0		; add $2000
00015F3E 31C0 C904                  		move.w	d0,($FFFFC904).w	; move to $EED0
00015F42 0828 0000 0022             		btst	#0,$22(a0)		; is sonic facing right?
00015F48 6700                       		beq.s	loc2_1ACF4		; if not, branch
00015F4A 4468 0020                  		neg.w	obInertia(a0)			; negate inertia
00015F4E                            
00015F4E                            loc2_1ACF4:
00015F4E 08E8 0002 0022             		bset	#2,$22(a0)		; set unused (in s1) flag
00015F54 11FC 0000 D1DC             		move.b	#0,($FFFFD1DC).w	; clear Spin Dash dust animation.
00015F5A 303C 00BC                  		move.w	#$BC,d0			; spin release sound
00015F5E 4EB9 0000 12A0             		jsr	(PlaySound_Special).l	; play it!
00015F64 1028 0026                  		move.b	obAngle(a0),d0
00015F68 4EB9 0000 3A82             		jsr	(CalcSine).l
00015F6E C3E8 0020                  		muls.w	obInertia(a0),d1
00015F72 E081                       		asr.l	#8,d1
00015F74 3141 0010                  		move.w	d1,obVelX(a0)
00015F78 C1E8 0020                  		muls.w	obInertia(a0),d0
00015F7C E080                       		asr.l	#8,d0
00015F7E 3140 0012                  		move.w	d0,obVelY(a0)
00015F82                            	
00015F82 6000                       		bra.s	loc2_1AD78
00015F84                            ; ===========================================================================
00015F84                            Dash_Speeds:
00015F84 0600                       		dc.w  $600		; 0
00015F86 0680                       		dc.w  $680		; 1
00015F88 0700                       		dc.w  $700		; 2
00015F8A 0780                       		dc.w  $780		; 3
00015F8C 0800                       		dc.w  $800		; 4
00015F8E 0880                       		dc.w  $880		; 5
00015F90 0900                       		dc.w  $900		; 6
00015F92 0980                       		dc.w  $980		; 7
00015F94 0A00                       		dc.w  $A00		; 8
00015F96                            ; ===========================================================================
00015F96                            
00015F96                            loc2_1AD30:				; If still charging the dash...
00015F96 4A68 003A                  		tst.w	$3A(a0)		; check charge count
00015F9A 6700                       		beq.s	loc2_1AD48	; if zero, branch
00015F9C 3028 003A                  		move.w	$3A(a0),d0	; otherwise put it in d0
00015FA0 EA48                       		lsr.w	#5,d0		; shift right 5 (divide it by 32)
00015FA2 9168 003A                  		sub.w	d0,$3A(a0)	; subtract from charge count
00015FA6 6400                       		bcc.s	loc2_1AD48	; ??? branch if carry clear
00015FA8 317C 0000 003A             		move.w	#0,$3A(a0)	; set charge count to 0
00015FAE                            
00015FAE                            loc2_1AD48:
00015FAE 1038 F603                  		move.b	(v_jpadpress2).w,d0	; read controller
00015FB2 0200 0070                  		andi.b	#$70,d0			; pressing A/B/C?
00015FB6 6700 0000                  		beq.w	loc2_1AD78		; if not, branch
00015FBA 317C 1F00 001C             		move.w	#$1F00,obAnim(a0)	; reset spdsh animation
00015FC0 303C 00D5                  		move.w	#$D5,d0			; was $E0 in sonic 2
00015FC4 11FC 0002 D1DC             		move.b	#2,$FFFFD1DC.w		; Set the Spin Dash dust animation to $2.
00015FCA 4EB9 0000 12A0             		jsr	(PlaySound_Special).l	; play charge sound
00015FD0 0668 0200 003A             		addi.w	#$200,$3A(a0)		; increase charge count
00015FD6 0C68 0800 003A             		cmpi.w	#$800,$3A(a0)		; check if it's maxed
00015FDC 6500                       		bcs.s	loc2_1AD78		; if not, then branch
00015FDE 317C 0800 003A             		move.w	#$800,$3A(a0)		; reset it to max
00015FE4                            
00015FE4                            loc2_1AD78:
00015FE4 588F                       		addq.l	#4,sp			; Add 4 bytes to the stack return address to skip Sonic_Jump on next rts to Obj01_MdNormal, preventing conflicts with button presses.
00015FE6 0C78 0060 F73E             		cmpi.w	#$60,($FFFFF73E).w	; $EED8 only ever seems
00015FEC 6700                       		beq.s	loc2_1AD8C		; to be used in Spin Dash
00015FEE 6400                       		bcc.s	loc2_1AD88
00015FF0 5878 F73E                  		addq.w	#4,($FFFFF73E).w
00015FF4                            
00015FF4                            loc2_1AD88:
00015FF4 5578 F73E                  		subq.w	#2,($FFFFF73E).w
00015FF8                            
00015FF8                            loc2_1AD8C:
00015FF8 6100 0000                  		bsr.w	Sonic_LevelBound
00015FFC 6100 0000                  		bsr.w	Sonic_AnglePos
00016000                            		;move.w	#$60,(v_lookshift).w	; reset looking up/down
00016000 4E75                       		rts
00016002                            ; End of subroutine Sonic_SpinDash
00016002                            ; End of subroutine Sonic_SpinDash
00016002                            
00016002                            Sonic_AirRoll:
00016002 0C28 0000 001C             	cmpi.b  #id_spring,$1C(a0)      ; is sonic in the spring animation?
00016008 6600                               bne.s   AirRoll_Return   ; if not, return
0001600A                            
0001600A                            AirRoll_CheckBtn:
0001600A 1038 F603                          move.b	($FFFFF603).w,d0 ; Move $FFFFF603 to d0
0001600E 0200 0070                          andi.b	#btnABC,d0 ; Has A/B/C been pressed?
00016012 6700                               beq.s	AirRoll_Return
00016014 117C 0000 001C             	move.b	#id_roll,$1C(a0) ; Set Sonic's animation to rolling.
0001601A                                   ; move.w	#$BC,d0
0001601A                                   ; jsr	(PlaySound_Special).l ;    play Sonic rolling sound
0001601A                            
0001601A                            AirRoll_Return:
0001601A 4E75                               rts
0001601C                            ; ===========================================================================
0001601C                            ; ---------------------------------------------------------------------------
0001601C                            ; Unused subroutine to squash Sonic
0001601C                            ; ---------------------------------------------------------------------------
0001601C 1028 0026                  		move.b	obAngle(a0),d0
00016020 0600 0020                  		addi.b	#$20,d0
00016024 0200 00C0                  		andi.b	#$C0,d0
00016028 6600                       		bne.s	locret_13302
0001602A 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
0001602E 4A41                       		tst.w	d1
00016030 6A00                       		bpl.s	locret_13302
00016032 317C 0000 0020             		move.w	#0,obInertia(a0) ; stop Sonic moving
00016038 317C 0000 0010             		move.w	#0,obVelX(a0)
0001603E 317C 0000 0012             		move.w	#0,obVelY(a0)
00016044 117C 0000 001C             		move.b	#id_Warp3,obAnim(a0) ; use "warping" animation
0001604A                            
0001604A                            locret_13302:
0001604A 4E75                       		rts		
0001604C                            		include	"_incObj\Sonic LevelBound.asm"
0001604C                            ; ---------------------------------------------------------------------------
0001604C                            ; Subroutine to	prevent	Sonic leaving the boundaries of	a level
0001604C                            ; ---------------------------------------------------------------------------
0001604C                            
0001604C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001604C                            
0001604C                            
0001604C                            Sonic_LevelBound:
0001604C 2228 0008                  		move.l	obX(a0),d1
00016050 3028 0010                  		move.w	obVelX(a0),d0
00016054 48C0                       		ext.l	d0
00016056 E180                       		asl.l	#8,d0
00016058 D280                       		add.l	d0,d1
0001605A 4841                       		swap	d1
0001605C 3038 F728                  		move.w	(v_limitleft2).w,d0
00016060 0640 0010                  		addi.w	#$10,d0
00016064 B041                       		cmp.w	d1,d0		; has Sonic touched the	side boundary?
00016066 6200                       		bhi.s	@sides		; if yes, branch
00016068 3038 F72A                  		move.w	(v_limitright2).w,d0
0001606C 0640 0128                  		addi.w	#$128,d0
00016070 4A38 F7AA                  		tst.b	(f_lockscreen).w
00016074 6600                       		bne.s	@screenlocked
00016076 0640 0040                  		addi.w	#$40,d0
0001607A                            
0001607A                            	@screenlocked:
0001607A B041                       		cmp.w	d1,d0		; has Sonic touched the	side boundary?
0001607C 6300                       		bls.s	@sides		; if yes, branch
0001607E                            
0001607E                            	@chkbottom:
0001607E 3038 F72E                  		move.w	(v_limitbtm2).w,d0
00016082 0640 00E0                  		addi.w	#$E0,d0
00016086 B068 000C                  		cmp.w	obY(a0),d0	; has Sonic touched the	bottom boundary?
0001608A 6D00                       		blt.s	@bottom		; if yes, branch
0001608C 4E75                       		rts	
0001608E                            ; ===========================================================================
0001608E                            
0001608E                            @bottom:
0001608E 3038 F726                  		move.w (v_limitbtm1).w,d0 
00016092 3238 F72E                  		move.w (v_limitbtm2).w,d1 
00016096 B240                       		cmp.w d0,d1 ; screen still scrolling down? 
00016098 6D00                       		blt.s @dontkill; if so, don't kill Sonic 
0001609A 0C78 0202 FE10             		cmpi.w	#(id_MZ<<8)+2,(v_zone).w ; is level SBZ2 ?
000160A0 6600 0000                  		bne.w	Kill_transport	; if not, kill Sonic
000160A4 0C78 1B00 D008             		cmpi.w	#$1B00,(v_player+obX).w
000160AA 6500 0000                  		bcs.w	Kill_transport
000160AE 4238 FE30                  		clr.b	(v_lastlamp).w	; clear	lamppost counter
000160B2 31FC 0001 FE02             		move.w	#1,(f_restart).w ; restart the level
000160B8 31FC 0103 FE10             		move.w	#(id_LZ<<8)+3,(v_zone).w ; set level to SBZ3 (LZ4)
000160BE 4E75                       		rts	
000160C0                            @dontkill: 
000160C0 4E75                       		rts
000160C2                            ; ===========================================================================
000160C2                            
000160C2                            @sides:
000160C2 3140 0008                  		move.w	d0,obX(a0)
000160C6 317C 0000 000A             		move.w	#0,obX+2(a0)
000160CC 317C 0000 0010             		move.w	#0,obVelX(a0)	; stop Sonic moving
000160D2 317C 0000 0020             		move.w	#0,obInertia(a0)
000160D8 60A4                       		bra.s	@chkbottom
000160DA                            
000160DA                            Kill_transport: 
000160DA 4EF9 0000 0000                     	jmp        (KillSonic).l
000160E0                            
000160E0                            ; End of function Sonic_LevelBound
000160E0                            ; End of function Sonic_LevelBound
000160E0                            		include	"_incObj\Sonic Roll.asm"
000160E0                            ; ---------------------------------------------------------------------------
000160E0                            ; Subroutine allowing Sonic to roll when he's moving
000160E0                            ; ---------------------------------------------------------------------------
000160E0                            
000160E0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000160E0                            
000160E0                            
000160E0                            Sonic_Roll:
000160E0 4A38 F7CA                  		tst.b	(f_jumponly).w
000160E4 6600                       		bne.s	@noroll
000160E6 3028 0020                  		move.w	obInertia(a0),d0
000160EA 6A00                       		bpl.s	@ispositive
000160EC 4440                       		neg.w	d0
000160EE                            
000160EE                            	@ispositive:
000160EE 0C40 0080                  		cmpi.w	#$80,d0		; is Sonic moving at $80 speed or faster?
000160F2 6500                       		bcs.s	@noroll		; if not, branch
000160F4 1038 F602                  		move.b	(v_jpadhold2).w,d0
000160F8 0200 000C                  		andi.b	#btnL+btnR,d0	; is left/right	being pressed?
000160FC 6600                       		bne.s	@noroll		; if yes, branch
000160FE 0838 0001 F602             		btst	#bitDn,(v_jpadhold2).w ; is down being pressed?
00016104 6600                       		bne.s	Sonic_ChkRoll	; if yes, branch
00016106                            
00016106                            	@noroll:
00016106 4E75                       		rts	
00016108                            ; ===========================================================================
00016108                            
00016108                            Sonic_ChkRoll:
00016108 0828 0002 0022             		btst	#2,obStatus(a0)	; is Sonic already rolling?
0001610E 6700                       		beq.s	@roll		; if not, branch
00016110 4E75                       		rts	
00016112                            ; ===========================================================================
00016112                            
00016112                            @roll:
00016112 08E8 0002 0022             		bset	#2,obStatus(a0)
00016118 117C 000E 0016             		move.b	#$E,obHeight(a0)
0001611E 117C 0007 0017             		move.b	#7,obWidth(a0)
00016124 117C 0000 001C             		move.b	#id_Roll,obAnim(a0) ; use "rolling" animation
0001612A 5A68 000C                  		addq.w	#5,obY(a0)
00016138 4A68 0020                  		tst.w	obInertia(a0)
0001613C 6600                       		bne.s	@ismoving
0001613E 317C 0200 0020             		move.w	#$200,obInertia(a0) ; set inertia if 0
00016144                            
00016144                            	@ismoving:
00016144 4E75                       		rts	
00016146                            ; End of function Sonic_Roll
00016146                            ; End of function Sonic_Roll
00016146                            		include	"_incObj\Sonic Jump.asm"
00016146                            ; ---------------------------------------------------------------------------
00016146                            ; Subroutine allowing Sonic to jump
00016146                            ; ---------------------------------------------------------------------------
00016146                            
00016146                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016146                            
00016146                            
00016146                            Sonic_Jump:
00016146 1038 F603                  		move.b	(v_jpadpress2).w,d0
0001614A 0200 0070                  		andi.b	#btnABC,d0	; is A, B or C pressed?
0001614E 6700 0000                  		beq.w	locret_1348E	; if not, branch
00016152 7000                       		moveq	#0,d0
00016154 1028 0026                  		move.b	obAngle(a0),d0
00016158 0600 0080                  		addi.b	#$80,d0
0001615C 6100 0000                  		bsr.w	sub_14D48
00016160 0C41 0006                  		cmpi.w	#6,d1
00016164 6D00 0000                  		blt.w	locret_1348E
00016168 343C 0680                  		move.w	#$680,d2
0001616C 0828 0006 0022             		btst	#6,obStatus(a0)
00016172 6700                       		beq.s	loc_1341C
00016174 343C 0380                  		move.w	#$380,d2
00016178                            
00016178                            loc_1341C:
00016178 7000                       		moveq	#0,d0
0001617A 1028 0026                  		move.b	obAngle(a0),d0
0001617E 0400 0040                  		subi.b	#$40,d0
00016182 4EB9 0000 3A82             		jsr	(CalcSine).l
00016188 C3C2                       		muls.w	d2,d1
0001618A E081                       		asr.l	#8,d1
0001618C D368 0010                  		add.w	d1,obVelX(a0)	; make Sonic jump
00016190 C1C2                       		muls.w	d2,d0
00016192 E080                       		asr.l	#8,d0
00016194 D168 0012                  		add.w	d0,obVelY(a0)	; make Sonic jump
00016198 08E8 0001 0022             		bset	#1,obStatus(a0)
0001619E 08A8 0005 0022             		bclr	#5,obStatus(a0)
000161A4 588F                       		addq.l	#4,sp
000161A6 117C 0001 003C             		move.b	#1,$3C(a0)
000161AC 4228 0038                  		clr.b	$38(a0)
000161BA 117C 0013 0016             		move.b	#$13,obHeight(a0)
000161C0 117C 0009 0017             		move.b	#9,obWidth(a0)
000161C6 117C 000E 0016             		move.b	#$E,obHeight(a0)
000161CC 117C 0007 0017             		move.b	#7,obWidth(a0)
000161D2                            Result_Check:
000161D2 4A38 F5C2                  		tst.b   ($FFFFF5C2).w ; Has the victory animation flag been set?
000161D6 6700                       		beq.s   NormalJump ; If not, branch
000161D8 117C 0013 001C             		move.b  #$13,$1C(a0) ; Play the victory animation
000161DE 6000                       		bra.s   cont ; Continue
000161E0                            NormalJump:
000161E0 117C 0002 001C             		move.b  #2,$1C(a0)    ; use "jumping"    animation
000161E6                            cont:
000161E6 08E8 0002 0022             		bset	#2,obStatus(a0)
000161EC 5A68 000C                  		addq.w	#5,obY(a0)
000161F0                            
000161F0                            locret_1348E:
000161F0 4E75                       		rts	
000161F2                            ; ===========================================================================
000161F2                            
000161F2                            ; End of function Sonic_Jump
000161F2                            ; End of function Sonic_Jump
000161F2                            		include	"_incObj\Sonic JumpHeight.asm"
000161F2                            ; ---------------------------------------------------------------------------
000161F2                            ; Subroutine controlling Sonic's jump height/duration
000161F2                            ; ---------------------------------------------------------------------------
000161F2                            
000161F2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000161F2                            
000161F2                            
000161F2                            Sonic_JumpHeight:
000161F2 4A28 003C                  		tst.b	$3C(a0)
000161F6 6700                       		beq.s	loc_134C4
000161F8 323C FC00                  		move.w	#-$400,d1
000161FC 0828 0006 0022             		btst	#6,obStatus(a0)
00016202 6700                       		beq.s	loc_134AE
00016204 323C FE00                  		move.w	#-$200,d1
00016208                            
00016208                            loc_134AE:
00016208 B268 0012                  		cmp.w	obVelY(a0),d1
0001620C 6F00                       		ble.s	locret_134C2
0001620E 1038 F602                  		move.b	(v_jpadhold2).w,d0
00016212 0200 0070                  		andi.b	#btnABC,d0	; is A, B or C pressed?
00016216 6600                       		bne.s	locret_134C2	; if yes, branch
00016218 3141 0012                  		move.w	d1,obVelY(a0)
0001621C                            
0001621C                            locret_134C2:
0001621C 4E75                       		rts	
0001621E                            ; ===========================================================================
0001621E                            
0001621E                            loc_134C4:
0001621E 0C68 F040 0012             		cmpi.w	#-$FC0,obVelY(a0)
00016224 6C00                       		bge.s	locret_134D2
00016226 317C F040 0012             		move.w	#-$FC0,obVelY(a0)
0001622C                            
0001622C                            locret_134D2:
0001622C 4E75                       		rts	
0001622E                            ; End of function Sonic_JumpHeight
0001622E                            ; End of function Sonic_JumpHeight
0001622E                            		include	"_incObj\Sonic SlopeResist.asm"
0001622E                            ; ---------------------------------------------------------------------------
0001622E                            ; Subroutine to	slow Sonic walking up a	slope
0001622E                            ; ---------------------------------------------------------------------------
0001622E                            
0001622E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001622E                            
0001622E                            
0001622E                            Sonic_SlopeResist:
0001622E 1028 0026                  		move.b	obAngle(a0),d0
00016232 0600 0060                  		addi.b	#$60,d0
00016236 0C00 00C0                  		cmpi.b	#$C0,d0
0001623A 6400                       		bcc.s	locret_13508
0001623C 1028 0026                  		move.b	obAngle(a0),d0
00016240 4EB9 0000 3A82             		jsr	(CalcSine).l
00016246 C1FC 0020                  		muls.w	#$20,d0
0001624A E080                       		asr.l	#8,d0
0001624C 4A68 0020                  		tst.w	obInertia(a0)
00016250 6700                       		beq.s	locret_13508
00016252 6B00                       		bmi.s	loc_13504
00016254 4A40                       		tst.w	d0
00016256 6700                       		beq.s	locret_13502
00016258 D168 0020                  		add.w	d0,obInertia(a0) ; change Sonic's inertia
0001625C                            
0001625C                            locret_13502:
0001625C 4E75                       		rts	
0001625E                            ; ===========================================================================
0001625E                            
0001625E                            loc_13504:
0001625E D168 0020                  		add.w	d0,obInertia(a0)
00016262                            
00016262                            locret_13508:
00016262 4E75                       		rts	
00016264                            ; End of function Sonic_SlopeResist
00016264                            ; End of function Sonic_SlopeResist
00016264                            		include	"_incObj\Sonic RollRepel.asm"
00016264                            ; ---------------------------------------------------------------------------
00016264                            ; Subroutine to	push Sonic down	a slope	while he's rolling
00016264                            ; ---------------------------------------------------------------------------
00016264                            
00016264                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016264                            
00016264                            
00016264                            Sonic_RollRepel:
00016264 1028 0026                  		move.b	obAngle(a0),d0
00016268 0600 0060                  		addi.b	#$60,d0
0001626C 0C00 00C0                  		cmpi.b	#-$40,d0
00016270 6400                       		bcc.s	locret_13544
00016272 1028 0026                  		move.b	obAngle(a0),d0
00016276 4EB9 0000 3A82             		jsr	(CalcSine).l
0001627C C1FC 0050                  		muls.w	#$50,d0
00016280 E080                       		asr.l	#8,d0
00016282 4A68 0020                  		tst.w	obInertia(a0)
00016286 6B00                       		bmi.s	loc_1353A
00016288 4A40                       		tst.w	d0
0001628A 6A00                       		bpl.s	loc_13534
0001628C E480                       		asr.l	#2,d0
0001628E                            
0001628E                            loc_13534:
0001628E D168 0020                  		add.w	d0,obInertia(a0)
00016292 4E75                       		rts	
00016294                            ; ===========================================================================
00016294                            
00016294                            loc_1353A:
00016294 4A40                       		tst.w	d0
00016296 6B00                       		bmi.s	loc_13540
00016298 E480                       		asr.l	#2,d0
0001629A                            
0001629A                            loc_13540:
0001629A D168 0020                  		add.w	d0,obInertia(a0)
0001629E                            
0001629E                            locret_13544:
0001629E 4E75                       		rts	
000162A0                            ; End of function Sonic_RollRepel
000162A0                            ; End of function Sonic_RollRepel
000162A0                            		include	"_incObj\Sonic SlopeRepel.asm"
000162A0                            ; ---------------------------------------------------------------------------
000162A0                            ; Subroutine to	push Sonic down	a slope
000162A0                            ; ---------------------------------------------------------------------------
000162A0                            
000162A0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000162A0                            
000162A0                            
000162A0                            Sonic_SlopeRepel:
000162A0 4E71                       		nop	
000162A2 4A28 0038                  		tst.b	$38(a0)
000162A6 6600                       		bne.s	locret_13580
000162A8 4A68 003E                  		tst.w	$3E(a0)
000162AC 6600                       		bne.s	loc_13582
000162AE 1028 0026                  		move.b	obAngle(a0),d0
000162B2 0600 0020                  		addi.b	#$20,d0
000162B6 0200 00C0                  		andi.b	#$C0,d0
000162BA 6700                       		beq.s	locret_13580
000162BC 3028 0020                  		move.w	obInertia(a0),d0
000162C0 6A00                       		bpl.s	loc_1356A
000162C2 4440                       		neg.w	d0
000162C4                            
000162C4                            loc_1356A:
000162C4 0C40 0280                  		cmpi.w	#$280,d0
000162C8 6400                       		bcc.s	locret_13580
000162CA 4268 0020                  		clr.w	obInertia(a0)
000162CE 08E8 0001 0022             		bset	#1,obStatus(a0)
000162D4 317C 001E 003E             		move.w	#$1E,$3E(a0)
000162DA                            
000162DA                            locret_13580:
000162DA 4E75                       		rts	
000162DC                            ; ===========================================================================
000162DC                            
000162DC                            loc_13582:
000162DC 5368 003E                  		subq.w	#1,$3E(a0)
000162E0 4E75                       		rts	
000162E2                            ; End of function Sonic_SlopeRepel
000162E2                            ; End of function Sonic_SlopeRepel
000162E2                            		include	"_incObj\Sonic JumpAngle.asm"
000162E2                            ; ---------------------------------------------------------------------------
000162E2                            ; Subroutine to	return Sonic's angle to 0 as he jumps
000162E2                            ; ---------------------------------------------------------------------------
000162E2                            
000162E2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000162E2                            
000162E2                            
000162E2                            Sonic_JumpAngle:
000162E2 1028 0026                  		move.b	obAngle(a0),d0	; get Sonic's angle
000162E6 6700                       		beq.s	locret_135A2	; if already 0,	branch
000162E8 6A00                       		bpl.s	loc_13598	; if higher than 0, branch
000162EA                            
000162EA 5400                       		addq.b	#2,d0		; increase angle
000162EC 6400                       		bcc.s	loc_13596
000162EE 7000                       		moveq	#0,d0
000162F0                            
000162F0                            loc_13596:
000162F0 6000                       		bra.s	loc_1359E
000162F2                            ; ===========================================================================
000162F2                            
000162F2                            loc_13598:
000162F2 5500                       		subq.b	#2,d0		; decrease angle
000162F4 6400                       		bcc.s	loc_1359E
000162F6 7000                       		moveq	#0,d0
000162F8                            
000162F8                            loc_1359E:
000162F8 1140 0026                  		move.b	d0,obAngle(a0)
000162FC                            
000162FC                            locret_135A2:
000162FC 4E75                       		rts	
000162FE                            ; End of function Sonic_JumpAngle
000162FE                            ; End of function Sonic_JumpAngle
000162FE                            		include	"_incObj\Sonic Floor.asm"
000162FE                            ; ---------------------------------------------------------------------------
000162FE                            ; Subroutine for Sonic to interact with	the floor after	jumping/falling
000162FE                            ; ---------------------------------------------------------------------------
000162FE                            
000162FE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000162FE                            
000162FE                            
000162FE                            Sonic_Floor:
000162FE 3228 0010                  		move.w	obVelX(a0),d1
00016302 3428 0012                  		move.w	obVelY(a0),d2
00016306 4EB9 0000 3D14             		jsr	(CalcAngle).l
0001630C 11C0 FFEC                  		move.b	d0,($FFFFFFEC).w
00016310 0400 0020                  		subi.b	#$20,d0
00016314 11C0 FFED                  		move.b	d0,($FFFFFFED).w
00016318 0200 00C0                  		andi.b	#$C0,d0
0001631C 11C0 FFEE                  		move.b	d0,($FFFFFFEE).w
00016320 0C00 0040                  		cmpi.b	#$40,d0
00016324 6700 0000                  		beq.w	loc_13680
00016328 0C00 0080                  		cmpi.b	#$80,d0
0001632C 6700 0000                  		beq.w	loc_136E2
00016330 0C00 00C0                  		cmpi.b	#$C0,d0
00016334 6700 0000                  		beq.w	loc_1373E
00016338 6100 0000                  		bsr.w	Sonic_HitWall
0001633C 4A41                       		tst.w	d1
0001633E 6A00                       		bpl.s	loc_135F0
00016340 9368 0008                  		sub.w	d1,obX(a0)
00016344 317C 0000 0010             		move.w	#0,obVelX(a0)
0001634A                            
0001634A                            loc_135F0:
0001634A 6100 0000                  		bsr.w	sub_14EB4
0001634E 4A41                       		tst.w	d1
00016350 6A00                       		bpl.s	loc_13602
00016352 D368 0008                  		add.w	d1,obX(a0)
00016356 317C 0000 0010             		move.w	#0,obVelX(a0)
0001635C                            
0001635C                            loc_13602:
0001635C 6100 0000                  		bsr.w	Sonic_HitFloor
00016360 11C1 FFEF                  		move.b	d1,($FFFFFFEF).w
00016364 4A41                       		tst.w	d1
00016366 6A00                       		bpl.s	locret_1367E
00016368 1428 0012                  		move.b	obVelY(a0),d2
0001636C 5002                       		addq.b	#8,d2
0001636E 4402                       		neg.b	d2
00016370 B202                       		cmp.b	d2,d1
00016372 6C00                       		bge.s	loc_1361E
00016374 B002                       		cmp.b	d2,d0
00016376 6D00                       		blt.s	locret_1367E
00016378                            
00016378                            loc_1361E:
00016378 D368 000C                  		add.w	d1,obY(a0)
0001637C 1143 0026                  		move.b	d3,obAngle(a0)
00016380 6100 0000                  		bsr.w	Sonic_ResetOnFloor
00016384 117C 0000 001C             		move.b	#id_Walk,obAnim(a0)
0001638A 1003                       		move.b	d3,d0
0001638C 0600 0020                  		addi.b	#$20,d0
00016390 0200 0040                  		andi.b	#$40,d0
00016394 6600                       		bne.s	loc_1365C
00016396 1003                       		move.b	d3,d0
00016398 0600 0010                  		addi.b	#$10,d0
0001639C 0200 0020                  		andi.b	#$20,d0
000163A0 6700                       		beq.s	loc_1364E
000163A2 E0E8 0012                  		asr	obVelY(a0)
000163A6 6000                       		bra.s	loc_13670
000163A8                            ; ===========================================================================
000163A8                            
000163A8                            loc_1364E:
000163A8 317C 0000 0012             		move.w	#0,obVelY(a0)
000163AE 3168 0010 0020             		move.w	obVelX(a0),obInertia(a0)
000163B4 4E75                       		rts	
000163B6                            ; ===========================================================================
000163B6                            
000163B6                            loc_1365C:
000163B6 317C 0000 0010             		move.w	#0,obVelX(a0)
000163BC 0C68 0FC0 0012             		cmpi.w	#$FC0,obVelY(a0)
000163C2 6F00                       		ble.s	loc_13670
000163C4 317C 0FC0 0012             		move.w	#$FC0,obVelY(a0)
000163CA                            
000163CA                            loc_13670:
000163CA 3168 0012 0020             		move.w	obVelY(a0),obInertia(a0)
000163D0 4A03                       		tst.b	d3
000163D2 6A00                       		bpl.s	locret_1367E
000163D4 4468 0020                  		neg.w	obInertia(a0)
000163D8                            
000163D8                            locret_1367E:
000163D8 4E75                       		rts	
000163DA                            ; ===========================================================================
000163DA                            
000163DA                            loc_13680:
000163DA 6100 0000                  		bsr.w	Sonic_HitWall
000163DE 4A41                       		tst.w	d1
000163E0 6A00                       		bpl.s	loc_1369A
000163E2 9368 0008                  		sub.w	d1,obX(a0)
000163E6 317C 0000 0010             		move.w	#0,obVelX(a0)
000163EC 3168 0012 0020             		move.w	obVelY(a0),obInertia(a0)
000163F2 4E75                       		rts	
000163F4                            ; ===========================================================================
000163F4                            
000163F4                            loc_1369A:
000163F4 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
000163F8 4A41                       		tst.w	d1
000163FA 6A00                       		bpl.s	loc_136B4
000163FC 9368 000C                  		sub.w	d1,obY(a0)
00016400 4A68 0012                  		tst.w	obVelY(a0)
00016404 6A00                       		bpl.s	locret_136B2
00016406 317C 0000 0012             		move.w	#0,obVelY(a0)
0001640C                            
0001640C                            locret_136B2:
0001640C 4E75                       		rts	
0001640E                            ; ===========================================================================
0001640E                            
0001640E                            loc_136B4:
0001640E 4A68 0012                  		tst.w	obVelY(a0)
00016412 6B00                       		bmi.s	locret_136E0
00016414 6100 0000                  		bsr.w	Sonic_HitFloor
00016418 4A41                       		tst.w	d1
0001641A 6A00                       		bpl.s	locret_136E0
0001641C D368 000C                  		add.w	d1,obY(a0)
00016420 1143 0026                  		move.b	d3,obAngle(a0)
00016424 6100 0000                  		bsr.w	Sonic_ResetOnFloor
00016428 117C 0000 001C             		move.b	#id_Walk,obAnim(a0)
0001642E 317C 0000 0012             		move.w	#0,obVelY(a0)
00016434 3168 0010 0020             		move.w	obVelX(a0),obInertia(a0)
0001643A                            
0001643A                            locret_136E0:
0001643A 4E75                       		rts	
0001643C                            ; ===========================================================================
0001643C                            
0001643C                            loc_136E2:
0001643C 6100 0000                  		bsr.w	Sonic_HitWall
00016440 4A41                       		tst.w	d1
00016442 6A00                       		bpl.s	loc_136F4
00016444 9368 0008                  		sub.w	d1,obX(a0)
00016448 317C 0000 0010             		move.w	#0,obVelX(a0)
0001644E                            
0001644E                            loc_136F4:
0001644E 6100 0000                  		bsr.w	sub_14EB4
00016452 4A41                       		tst.w	d1
00016454 6A00                       		bpl.s	loc_13706
00016456 D368 0008                  		add.w	d1,obX(a0)
0001645A 317C 0000 0010             		move.w	#0,obVelX(a0)
00016460                            
00016460                            loc_13706:
00016460 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
00016464 4A41                       		tst.w	d1
00016466 6A00                       		bpl.s	locret_1373C
00016468 9368 000C                  		sub.w	d1,obY(a0)
0001646C 1003                       		move.b	d3,d0
0001646E 0600 0020                  		addi.b	#$20,d0
00016472 0200 0040                  		andi.b	#$40,d0
00016476 6600                       		bne.s	loc_13726
00016478 317C 0000 0012             		move.w	#0,obVelY(a0)
0001647E 4E75                       		rts	
00016480                            ; ===========================================================================
00016480                            
00016480                            loc_13726:
00016480 1143 0026                  		move.b	d3,obAngle(a0)
00016484 6100 0000                  		bsr.w	Sonic_ResetOnFloor
00016488 3168 0012 0020             		move.w	obVelY(a0),obInertia(a0)
0001648E 4A03                       		tst.b	d3
00016490 6A00                       		bpl.s	locret_1373C
00016492 4468 0020                  		neg.w	obInertia(a0)
00016496                            
00016496                            locret_1373C:
00016496 4E75                       		rts	
00016498                            ; ===========================================================================
00016498                            
00016498                            loc_1373E:
00016498 6100 0000                  		bsr.w	sub_14EB4
0001649C 4A41                       		tst.w	d1
0001649E 6A00                       		bpl.s	loc_13758
000164A0 D368 0008                  		add.w	d1,obX(a0)
000164A4 317C 0000 0010             		move.w	#0,obVelX(a0)
000164AA 3168 0012 0020             		move.w	obVelY(a0),obInertia(a0)
000164B0 4E75                       		rts	
000164B2                            ; ===========================================================================
000164B2                            
000164B2                            loc_13758:
000164B2 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
000164B6 4A41                       		tst.w	d1
000164B8 6A00                       		bpl.s	loc_13772
000164BA 9368 000C                  		sub.w	d1,obY(a0)
000164BE 4A68 0012                  		tst.w	obVelY(a0)
000164C2 6A00                       		bpl.s	locret_13770
000164C4 317C 0000 0012             		move.w	#0,obVelY(a0)
000164CA                            
000164CA                            locret_13770:
000164CA 4E75                       		rts	
000164CC                            ; ===========================================================================
000164CC                            
000164CC                            loc_13772:
000164CC 4A68 0012                  		tst.w	obVelY(a0)
000164D0 6B00                       		bmi.s	locret_1379E
000164D2 6100 0000                  		bsr.w	Sonic_HitFloor
000164D6 4A41                       		tst.w	d1
000164D8 6A00                       		bpl.s	locret_1379E
000164DA D368 000C                  		add.w	d1,obY(a0)
000164DE 1143 0026                  		move.b	d3,obAngle(a0)
000164E2 6100 0000                  		bsr.w	Sonic_ResetOnFloor
000164E6 117C 0000 001C             		move.b	#id_Walk,obAnim(a0)
000164EC 317C 0000 0012             		move.w	#0,obVelY(a0)
000164F2 3168 0010 0020             		move.w	obVelX(a0),obInertia(a0)
000164F8                            
000164F8                            locret_1379E:
000164F8 4E75                       		rts	
000164FA                            ; End of function Sonic_Floor
000164FA                            ; End of function Sonic_Floor
000164FA                            		include	"_incObj\Sonic ResetOnFloor.asm"
000164FA                            ; ---------------------------------------------------------------------------
000164FA                            ; Subroutine to	reset Sonic's mode when he lands on the floor
000164FA                            ; ---------------------------------------------------------------------------
000164FA                            
000164FA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000164FA                            
000164FA                            
000164FA                            Sonic_ResetOnFloor:            ; XREF: PlatformObject; et al
000164FA 08A8 0005 0022                     	bclr    #5,$22(a0)
00016500 08A8 0001 0022                     	bclr    #1,$22(a0)
00016506 0828 0002 0022                     	btst    #2,$22(a0)
0001650C 6700                               	beq.s    loc_137E4
0001650E 08A8 0002 0022             		bclr	#2,obStatus(a0)
00016514 117C 0013 0016             		move.b	#$13,obHeight(a0)
0001651A 117C 0009 0017             		move.b	#9,obWidth(a0)
00016520 117C 0000 001C             		move.b	#id_Walk,obAnim(a0) ; use running/walking animation
00016526 5B68 000C                  		subq.w	#5,obY(a0)
0001652A                            
0001652A                            loc_137E4:
0001652A 117C 0000 003C             		move.b	#0,$3C(a0)
00016530 31FC 0000 F7D0             		move.w	#0,(v_itembonus).w
00016536 4E75                       		rts	
00016538                            ; End of function Sonic_ResetOnFloor
00016538                            ; End of function Sonic_ResetOnFloor
00016538                            		include	"_incObj\Sonic (part 2).asm"
00016538                            ; ---------------------------------------------------------------------------
00016538                            ; Sonic	when he	gets hurt
00016538                            ; ---------------------------------------------------------------------------
00016538                            
00016538                            Sonic_Hurt:	; Routine 4
00016538 4EB9 0000 FA78             		jsr	(SpeedToPos).l
0001653E 0668 0030 0012             		addi.w	#$30,obVelY(a0)
00016544 0828 0006 0022             		btst	#6,obStatus(a0)
0001654A 6700                       		beq.s	loc_1380C
0001654C 0468 0020 0012             		subi.w	#$20,obVelY(a0)
00016552                            
00016552                            loc_1380C:
00016552 6100 0000                  		bsr.w	Sonic_HurtStop
00016556 6100 FAF4                  		bsr.w	Sonic_LevelBound
0001655A 6100 F124                  		bsr.w	Sonic_RecordPosition
0001655E 6100 0000                  		bsr.w	Sonic_Animate
00016562 6100 0000                  		bsr.w	Sonic_LoadGfx
00016566 4EF9 0000 FA8C             		jmp	(DisplaySprite).l
0001656C                            
0001656C                            ; ---------------------------------------------------------------------------
0001656C                            ; Subroutine to	stop Sonic falling after he's been hurt
0001656C                            ; ---------------------------------------------------------------------------
0001656C                            
0001656C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001656C                            
0001656C                            
0001656C                            Sonic_HurtStop:
0001656C 3038 F72E                  		move.w	(v_limitbtm2).w,d0
00016570 0640 00E0                  		addi.w	#$E0,d0
00016574                            		;cmp.w	obY(a0),d0
00016574                            		;bcs.w	KillSonic
00016574 6100 FD88                  		bsr.w	Sonic_Floor
00016578 0828 0001 0022             		btst	#1,obStatus(a0)
0001657E 6600                       		bne.s	locret_13860
00016580 7000                       		moveq	#0,d0
00016582 3140 0012                  		move.w	d0,obVelY(a0)
00016586 3140 0010                  		move.w	d0,obVelX(a0)
0001658A 3140 0020                  		move.w	d0,obInertia(a0)
0001658E 117C 0000 001C             		move.b	#id_Walk,obAnim(a0)
00016594 5528 0024                  		subq.b	#2,obRoutine(a0)
00016598 317C 0078 0030             		move.w	#$78,$30(a0)
0001659E                            
0001659E                            locret_13860:
0001659E 4E75                       		rts	
000165A0                            ; End of function Sonic_HurtStop
000165A0                            
000165A0                            ; ---------------------------------------------------------------------------
000165A0                            ; Sonic	when he	dies
000165A0                            ; ---------------------------------------------------------------------------
000165A0                            
000165A0                            Sonic_Death:	; Routine 6
000165A0 6100 0000                  		bsr.w	GameOver
000165A4 4EB9 0000 FA40             		jsr	(ObjectFall).l
000165AA 6100 F0D4                  		bsr.w	Sonic_RecordPosition
000165AE 6100 0000                  		bsr.w	Sonic_Animate
000165B2 6100 0000                  		bsr.w	Sonic_LoadGfx
000165B6 4EF9 0000 FA8C             		jmp	(DisplaySprite).l
000165BC                            
000165BC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000165BC                            
000165BC                            GameOver:
000165BC 3038 F72E                  		move.w	(v_limitbtm2).w,d0
000165C0 0640 0100                  		addi.w	#$100,d0
000165C4 B068 000C                  		cmp.w	obY(a0),d0
000165C8 6400 0000                  		bcc.w	locret_13900
000165CC 317C FFC8 0012             		move.w	#-$38,obVelY(a0)
000165D2 5428 0024                  		addq.b	#2,obRoutine(a0)
000165D6 4238 FE1E                  		clr.b	(f_timecount).w	; stop time counter
000165DA 5238 FE1C                  		addq.b	#1,(f_lifecount).w ; update lives counter
000165DE 5338 FE12                  		subq.b	#1,(v_lives).w	; subtract 1 from number of lives
000165E2 6600                       		bne.s	loc_138D4
000165E4 317C 0000 003A             		move.w	#0,$3A(a0)
000165EA 11FC 0039 D080             		move.b	#id_GameOverCard,(v_objspace+$80).w ; load GAME object
000165F0 11FC 0039 D0C0             		move.b	#id_GameOverCard,(v_objspace+$C0).w ; load OVER object
000165F6 11FC 0001 D0DA             		move.b	#1,(v_objspace+$C0+obFrame).w ; set OVER object to correct frame
000165FC 4238 FE1A                  		clr.b	(f_timeover).w
00016600                            
00016600                            loc_138C2:
0001660A 7003                       		moveq	#3,d0
0001660C 4EF9 0000 173A             		jmp	(AddPLC).l	; load game over patterns
00016612                            		
00016612                            loc_138C3:
0001661C 7003                       		moveq	#3,d0
0001661E 4EF9 0000 173A             		jmp	(AddPLC).l	; load game over patterns
00016624                            ; ===========================================================================
00016624                            
00016624                            loc_138D4:
00016624 317C 003C 003A             		move.w	#60,$3A(a0)	; set time delay to 1 second
0001662A 4A38 FE1A                  		tst.b	(f_timeover).w	; is TIME OVER tag set?
0001662E 6700                       		beq.s	locret_13900	; if not, branch
00016630 317C 0000 003A             		move.w	#0,$3A(a0)
00016636 11FC 0039 D080             		move.b	#id_GameOverCard,(v_objspace+$80).w ; load TIME object
0001663C 11FC 0039 D0C0             		move.b	#id_GameOverCard,(v_objspace+$C0).w ; load OVER object
00016642 11FC 0002 D09A             		move.b	#2,(v_objspace+$80+obFrame).w
00016648 11FC 0003 D0DA             		move.b	#3,(v_objspace+$C0+obFrame).w
0001664E 60B0                       		bra.s	loc_138C2
00016650                            		
00016650                            
00016650                            ; ===========================================================================
00016650                            
00016650                            locret_13900:
00016650 4E75                       		rts	
00016652                            ; End of function GameOver
00016652                            
00016652                            ; ---------------------------------------------------------------------------
00016652                            ; Sonic	when the level is restarted
00016652                            ; ---------------------------------------------------------------------------
00016652                            
00016652                            Sonic_ResetLevel:; Routine 8
00016652 4A68 003A                  		tst.w	$3A(a0)
00016656 6700                       		beq.s	locret_13914
00016658 5368 003A                  		subq.w	#1,$3A(a0)	; subtract 1 from time delay
0001665C 6600                       		bne.s	locret_13914
0001665E 31FC 0001 FE02             		move.w	#1,(f_restart).w ; restart the level
00016664                            
00016664                            	locret_13914:
00016664 4E75                       		rts	
00016664 4E75                       		rts	
00016666                            		include	"_incObj\Sonic Loops.asm"
00016666                            ; ---------------------------------------------------------------------------
00016666                            ; Subroutine to	make Sonic run around loops (GHZ/SLZ)
00016666                            ; ---------------------------------------------------------------------------
00016666                            
00016666                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016666                            
00016666                            
00016666                            Sonic_Loops:
00016666 0C38 0003 FE10             		cmpi.b	#id_SLZ,(v_zone).w ; is level SLZ ?
0001666C 6700                       		beq.s	@isstarlight	; if yes, branch
0001666E 4A38 FE10                  		tst.b	(v_zone).w	; is level GHZ ?
00016672 6600 0000                  		bne.w	@noloops	; if not, branch
00016676                            
00016676                            	@isstarlight:
00016676 3028 000C                  		move.w	obY(a0),d0
0001667A E248                       		lsr.w	#1,d0
0001667C 0240 0380                  		andi.w	#$380,d0
00016680 1228 0008                  		move.b	obX(a0),d1
00016684 0241 007F                  		andi.w	#$7F,d1
00016688 D041                       		add.w	d1,d0
0001668A 43F8 A400                  		lea	(v_lvllayout).w,a1
0001668E 1231 0000                  		move.b	(a1,d0.w),d1	; d1 is	the 256x256 tile Sonic is currently on
00016692                            
00016692 B238 F7AE                  		cmp.b	(v_256roll1).w,d1 ; is Sonic on a "roll tunnel" tile?
00016696 6700 FA70                  		beq.w	Sonic_ChkRoll	; if yes, branch
0001669A B238 F7AF                  		cmp.b	(v_256roll2).w,d1
0001669E 6700 FA68                  		beq.w	Sonic_ChkRoll
000166A2                            
000166A2 B238 F7AC                  		cmp.b	(v_256loop1).w,d1 ; is Sonic on a loop tile?
000166A6 6700                       		beq.s	@chkifleft	; if yes, branch
000166A8 B238 F7AD                  		cmp.b	(v_256loop2).w,d1
000166AC 6700                       		beq.s	@chkifinair
000166AE 08A8 0006 0001             		bclr	#6,obRender(a0) ; return Sonic to high plane
000166B4 4E75                       		rts	
000166B6                            ; ===========================================================================
000166B6                            
000166B6                            @chkifinair:
000166B6 0828 0001 0022             		btst	#1,obStatus(a0)	; is Sonic in the air?
000166BC 6700                       		beq.s	@chkifleft	; if not, branch
000166BE                            
000166BE 08A8 0006 0001             		bclr	#6,obRender(a0)	; return Sonic to high plane
000166C4 4E75                       		rts	
000166C6                            ; ===========================================================================
000166C6                            
000166C6                            @chkifleft:
000166C6 3428 0008                  		move.w	obX(a0),d2
000166CA 0C02 002C                  		cmpi.b	#$2C,d2
000166CE 6400                       		bcc.s	@chkifright
000166D0                            
000166D0 08A8 0006 0001             		bclr	#6,obRender(a0)	; return Sonic to high plane
000166D6 4E75                       		rts	
000166D8                            ; ===========================================================================
000166D8                            
000166D8                            @chkifright:
000166D8 0C02 00E0                  		cmpi.b	#$E0,d2
000166DC 6500                       		bcs.s	@chkangle1
000166DE                            
000166DE 08E8 0006 0001             		bset	#6,obRender(a0)	; send Sonic to	low plane
000166E4 4E75                       		rts	
000166E6                            ; ===========================================================================
000166E6                            
000166E6                            @chkangle1:
000166E6 0828 0006 0001             		btst	#6,obRender(a0) ; is Sonic on low plane?
000166EC 6600                       		bne.s	@chkangle2	; if yes, branch
000166EE                            
000166EE 1228 0026                  		move.b	obAngle(a0),d1
000166F2 6700                       		beq.s	@done
000166F4 0C01 0080                  		cmpi.b	#$80,d1		; is Sonic upside-down?
000166F8 6200                       		bhi.s	@done		; if yes, branch
000166FA 08E8 0006 0001             		bset	#6,obRender(a0)	; send Sonic to	low plane
00016700 4E75                       		rts	
00016702                            ; ===========================================================================
00016702                            
00016702                            @chkangle2:
00016702 1228 0026                  		move.b	obAngle(a0),d1
00016706 0C01 0080                  		cmpi.b	#$80,d1		; is Sonic upright?
0001670A 6300                       		bls.s	@done		; if yes, branch
0001670C 08A8 0006 0001             		bclr	#6,obRender(a0)	; send Sonic to	high plane
00016712                            
00016712                            @noloops:
00016712                            @done:
00016712 4E75                       		rts	
00016714                            ; End of function Sonic_Loops
00016714                            ; End of function Sonic_Loops
00016714                            		include	"_incObj\Sonic Animate.asm"
00016714                            ; ---------------------------------------------------------------------------
00016714                            ; Subroutine to	animate	Sonic's sprites
00016714                            ; ---------------------------------------------------------------------------
00016714                            
00016714                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016714                            
00016714                            
00016714                            Sonic_Animate:				; XREF: Obj01_Control; et al
00016714 43F9 0000 0000             		lea	(Ani_Sonic).l,a1
0001671A 7000                       		moveq	#0,d0
0001671C 1028 001C                  		move.b	obAnim(a0),d0
00016720 B028 001D                  		cmp.b	obNextAni(a0),d0 ; is animation set to restart?
00016724 6700                       		beq.s	@do		; if not, branch
00016726 1140 001D                  		move.b	d0,obNextAni(a0) ; set to "no restart"
0001672A 4228 001B                  		clr.b	obAniFrame(a0) ; reset animation
0001672E 4228 001E                  		clr.b	obTimeFrame(a0) ; reset frame duration
00016732                            		
00016732 08A8 0005 0022             		bclr	#5,obStatus(a0)	; clear pushing flag	;Mercury Pushing While Walking Fix	;Mercury Constants
00016738                            
00016738                            	@do:
00016738 D040                       		add.w	d0,d0
0001673A D2F1 0000                  		adda.w	(a1,d0.w),a1	; jump to appropriate animation	script
0001673E 1011                       		move.b	(a1),d0
00016740 6B00                       		bmi.s	@walkrunroll	; if animation is walk/run/roll/jump, branch
00016742 1228 0022                  		move.b	obStatus(a0),d1
00016746 0201 0001                  		andi.b	#1,d1
0001674A 0228 00FC 0001             		andi.b	#$FC,obRender(a0)
00016750 8328 0001                  		or.b	d1,obRender(a0)
00016754 5328 001E                  		subq.b	#1,obTimeFrame(a0) ; subtract 1 from frame duration
00016758 6A00                       		bpl.s	@delay		; if time remains, branch
0001675A 1140 001E                  		move.b	d0,obTimeFrame(a0) ; load frame duration
0001675E                            
0001675E                            @loadframe:
0001675E 7200                       		moveq	#0,d1
00016760 1228 001B                  		move.b	obAniFrame(a0),d1 ; load current frame number
00016764 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number from script
00016768 0C00 00FD                  		cmp.b	#$FD,d0				; MJ: is it a flag from FD to FF?
0001676C 6400 0000                  		bhs		@end_FF				; MJ: if so, branch to flag routines
00016770                            
00016770                            	@next:
00016770 1140 001A                  		move.b	d0,obFrame(a0)	; load sprite number
00016774 5228 001B                  		addq.b	#1,obAniFrame(a0) ; next frame number
00016778                            
00016778                            	@delay:
00016778 4E75                       		rts	
0001677A                            ; ===========================================================================
0001677A                            
0001677A                            @end_FF:
0001677A 5200                       		addq.b	#1,d0		; is the end flag = $FF	?
0001677C 6600                       		bne.s	@end_FE		; if not, branch
0001677E 4228 001B                  		clr.b	obAniFrame(a0) ; restart the animation
00016782 1029 0001                  		move.b	1(a1),d0	; read sprite number
00016786 60E8                       		bra.s	@next
00016788                            ; ===========================================================================
00016788                            
00016788                            @end_FE:
00016788 5200                       		addq.b	#1,d0		; is the end flag = $FE	?
0001678A 6600                       		bne.s	@end_FD		; if not, branch
0001678C 1031 1002                  		move.b	2(a1,d1.w),d0	; read the next	byte in	the script
00016790 9128 001B                  		sub.b	d0,obAniFrame(a0) ; jump back d0 bytes in the script
00016794 9200                       		sub.b	d0,d1
00016796 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number
0001679A 60D4                       		bra.s	@next
0001679C                            ; ===========================================================================
0001679C                            
0001679C                            @end_FD:
0001679C 5200                       		addq.b	#1,d0		; is the end flag = $FD	?
0001679E 6600                       		bne.s	@end		; if not, branch
000167A0 1171 1002 001C             		move.b	2(a1,d1.w),obAnim(a0) ; read next byte, run that animation
000167A6                            
000167A6                            	@end:
000167A6 4E75                       		rts	
000167A8                            ; ===========================================================================
000167A8                            
000167A8                            @walkrunroll:
000167A8 5328 001E                  		subq.b	#1,obTimeFrame(a0) ; subtract 1 from frame duration
000167AC 6ACA                       		bpl.s	@delay		; if time remains, branch
000167AE 5200                       		addq.b	#1,d0		; is animation walking/running?
000167B0 6600 0000                  		bne.w	@rolljump	; if not, branch
000167B4 7200                       		moveq	#0,d1
000167B6 1028 0026                  		move.b	obAngle(a0),d0	; get Sonic's angle
000167BA 6B00                       		bmi.s	@ble 			; better handling of angles
000167BC 6700                       		beq.s	@ble
000167BE 5300                       		subq.b	#1,d0
000167C0                            
000167C0                            	@ble:																
000167C0 1428 0022                  		move.b	obStatus(a0),d2
000167C4 0202 0001                  		andi.b	#1,d2		; is Sonic mirrored horizontally?
000167C8 6600                       		bne.s	@flip		; if yes, branch
000167CA 4600                       		not.b	d0		; reverse angle
000167CC                            
000167CC                            	@flip:
000167CC 0600 0010                  		addi.b	#$10,d0		; add $10 to angle
000167D0 6A00                       		bpl.s	@noinvert	; if angle is $0-$7F, branch
000167D2 7203                       		moveq	#3,d1
000167D4                            
000167D4                            	@noinvert:
000167D4 0228 00FC 0001             		andi.b	#$FC,obRender(a0)
000167DA B302                       		eor.b	d1,d2
000167DC 8528 0001                  		or.b	d2,obRender(a0)
000167E0 0828 0005 0022             		btst	#5,obStatus(a0)	; is Sonic pushing something?	;Mercury Constants
000167E6 6600 0000                  		bne.w	@push		; if yes, branch
000167EA                            
000167EA E808                       		lsr.b	#4,d0		; divide angle by $10
000167EC 0200 0006                  		andi.b	#6,d0		; angle	must be	0, 2, 4	or 6
000167F0 3428 0020                  		move.w	obInertia(a0),d2 ; get Sonic's speed
000167F4 6A00                       		bpl.s	@nomodspeed
000167F6 4442                       		neg.w	d2		; modulus speed
000167F8                            
000167F8                            	@nomodspeed:
000167F8 43F9 0000 0000             		lea	(SonAni_MaxRun).l,a1 ; use	Dashing	animation
000167FE 0C42 0A00                  		cmpi.w	#$A00,d2	; is Sonic at Dashing speed?
00016802 6400                       		bcc.s	@maxrunning	; if yes, branch
00016804                            
00016804 43F9 0000 0000             		lea	(SonAni_Run).l,a1 ; use	running	animation
0001680A 0C42 0600                  		cmpi.w	#$600,d2	; is Sonic at running speed?
0001680E 6400                       		bcc.s	@running	; if yes, branch
00016810                            
00016810 43F9 0000 0000             		lea	(SonAni_Walk).l,a1 ; use walking animation
00016816                            
00016816                            	@running:
00016816 D000                       		add.b	d0,d0
00016818 D000                       		add.b	d0,d0
0001681A 1600                       		move.b	d0,d3
0001681C 4442                       		neg.w	d2
0001681E 0642 0780                  		addi.w	#$780,d2
00016822 6A00                       		bpl.s	@belowmax
00016824 7400                       		moveq	#0,d2		; max animation speed
00016826 6000                       		bra.s	@belowmax
00016828                            
00016828                            	@maxrunning:
00016828 D000                       		add.b d0,d0
0001682A 1600                       		move.b d0,d3
0001682C 4442                       		neg.w d2
0001682E 0642 0800                  		addi.w #$800, d2
00016832 6A00                       		bpl.s @belowmax
00016834 7400                       		moveq #0, d2 
00016836                            
00016836                            	@belowmax:
00016836 E04A                       		lsr.w	#8,d2
00016838 1142 001E                  		move.b	d2,obTimeFrame(a0) ; modify frame duration
0001683C 6100 FF20                  		bsr.w	@loadframe
00016840 D728 001A                  		add.b	d3,obFrame(a0)	; modify frame number
00016844 4E75                       		rts	
00016846                            ; ===========================================================================
00016846                            
00016846                            @rolljump:
00016846 5200                       		addq.b	#1,d0		; is animation rolling/jumping?
00016848 6600                       		bne.s	@push		; if not, branch
0001684A 3428 0020                  		move.w	obInertia(a0),d2 ; get Sonic's speed
0001684E 6A00                       		bpl.s	@nomodspeed2
00016850 4442                       		neg.w	d2
00016852                            
00016852                            	@nomodspeed2:
00016852 43F9 0000 0000             		lea	(SonAni_Roll2).l,a1 ; use fast animation
00016858 0C42 0600                  		cmpi.w	#$600,d2	; is Sonic moving fast?
0001685C 6400                       		bcc.s	@rollfast	; if yes, branch
0001685E 43F9 0000 0000             		lea	(SonAni_Roll).l,a1 ; use slower	animation
00016864                            
00016864                            	@rollfast:
00016864 4442                       		neg.w	d2
00016866 0642 0400                  		addi.w	#$400,d2
0001686A 6A00                       		bpl.s	@belowmax2
0001686C 7400                       		moveq	#0,d2
0001686E                            
0001686E                            	@belowmax2:
0001686E E04A                       		lsr.w	#8,d2
00016870 1142 001E                  		move.b	d2,obTimeFrame(a0) ; modify frame duration
00016874 1228 0022                  		move.b	obStatus(a0),d1
00016878 0201 0001                  		andi.b	#1,d1
0001687C 0228 00FC 0001             		andi.b	#$FC,obRender(a0)
00016882 8328 0001                  		or.b	d1,obRender(a0)
00016886 6000 FED6                  		bra.w	@loadframe
0001688A                            ; ===========================================================================
0001688A                            
0001688A                            @push:
0001688A 3428 0020                  		move.w	obInertia(a0),d2 ; get Sonic's speed
0001688E 6B00                       		bmi.s	@negspeed
00016890 4442                       		neg.w	d2
00016892                            
00016892                            	@negspeed:
00016892 0642 0800                  		addi.w	#$800,d2
00016896 6A00                       		bpl.s	@belowmax3	
00016898 7400                       		moveq	#0,d2
0001689A                            
0001689A                            	@belowmax3:
0001689A EC4A                       		lsr.w	#6,d2
0001689C 1142 001E                  		move.b	d2,obTimeFrame(a0) ; modify frame duration
000168A0 43F9 0000 0000             		lea	(SonAni_Push).l,a1
000168A6 1228 0022                  		move.b	obStatus(a0),d1
000168AA 0201 0001                  		andi.b	#1,d1
000168AE 0228 00FC 0001             		andi.b	#$FC,obRender(a0)
000168B4 8328 0001                  		or.b	d1,obRender(a0)
000168B8 6000 FEA4                  		bra.w	@loadframe
000168BC                            
000168BC                            ; End of function Sonic_Animate
000168BC                            ; End of function Sonic_Animate
000168BC                            		include	"_anim\Sonic.asm"
000168BC                            ; ---------------------------------------------------------------------------
000168BC                            ; Animation script - Sonic
000168BC                            ; ---------------------------------------------------------------------------
000168BC                            Ani_Sonic:
000168BC                            
000168BC 0000                       ptr_Walk:	dc.w SonAni_Walk-Ani_Sonic
000168BE 0000                       ptr_Run:	dc.w SonAni_Run-Ani_Sonic
000168C0 0000                       ptr_Roll:	dc.w SonAni_Roll-Ani_Sonic
000168C2 0000                       ptr_Roll2:	dc.w SonAni_Roll2-Ani_Sonic
000168C4 0000                       ptr_Push:	dc.w SonAni_Push-Ani_Sonic
000168C6 0000                       ptr_Wait:	dc.w SonAni_Wait-Ani_Sonic
000168C8 0000                       ptr_Balance:	dc.w SonAni_Balance-Ani_Sonic
000168CA 0000                       ptr_LookUp:	dc.w SonAni_LookUp-Ani_Sonic
000168CC 0000                       ptr_Duck:	dc.w SonAni_Duck-Ani_Sonic
000168CE 0000                       ptr_Warp1:	dc.w SonAni_Warp1-Ani_Sonic
000168D0 0000                       ptr_Warp2:	dc.w SonAni_Warp2-Ani_Sonic
000168D2 0000                       ptr_Warp3:	dc.w SonAni_Warp3-Ani_Sonic
000168D4 0000                       ptr_Warp4:	dc.w SonAni_Warp4-Ani_Sonic
000168D6 0000                       ptr_Stop:	dc.w SonAni_Stop-Ani_Sonic
000168D8 0000                       ptr_Float1:	dc.w SonAni_Float1-Ani_Sonic
000168DA 0000                       ptr_Float2:	dc.w SonAni_Float2-Ani_Sonic
000168DC 0000                       ptr_Spring:	dc.w SonAni_Spring-Ani_Sonic
000168DE 0000                       ptr_Hang:	dc.w SonAni_Hang-Ani_Sonic
000168E0 0000                       ptr_Leap1:	dc.w SonAni_Leap1-Ani_Sonic
000168E2 0000                       ptr_Leap2:	dc.w SonAni_Leap2-Ani_Sonic
000168E4 0000                       ptr_Surf:	dc.w SonAni_Surf-Ani_Sonic
000168E6 0000                       ptr_GetAir:	dc.w SonAni_GetAir-Ani_Sonic
000168E8 0000                       ptr_Burnt:	dc.w SonAni_Burnt-Ani_Sonic
000168EA 0000                       ptr_Drown:	dc.w SonAni_Drown-Ani_Sonic
000168EC 0000                       ptr_Death:	dc.w SonAni_Death-Ani_Sonic
000168EE 0000                       ptr_Hurt:	dc.w SonAni_Hurt-Ani_Sonic
000168F0 0000                       ptr_WaterSlide:	dc.w SonAni_WaterSlide-Ani_Sonic
000168F2 0000                       ptr_Null:	dc.w SonAni_Null-Ani_Sonic
000168F4 0000                       ptr_Float3:	dc.w SonAni_Float3-Ani_Sonic
000168F6 0000                       ptr_Float4:	dc.w SonAni_Float4-Ani_Sonic
000168F8 0000                       ptr_MaxRun:	dc.w SonAni_MaxRun-Ani_Sonic
000168FA 0000                       ptr_Spindash:	dc.w SonAni_SpinDash-Ani_Sonic ;1F
000168FC 0000                       ptr_Hurt2:	dc.w SonAni_Hurt2-Ani_Sonic
000168FE 0000                       ptr_GetUp:	dc.w SonAni_GetUp-Ani_Sonic
00016900 0000                       ptr_Blink:	dc.w SonAni_Blink-Ani_Sonic
00016902 0000                       ptr_Sit:	dc.w SonAni_Sit-Ani_Sonic
00016904 0000                       ptr_Peelout:	dc.w SonAni_Peelout-Ani_Sonic
00016906 0000                       ptr_Hang2:	dc.w SonAni_Hang2-Ani_Sonic
00016908                            
00016908 FF10 1112 1314 150E 0FFF+  SonAni_Walk:	dc.b $FF, fr_walk13, fr_walk14,	fr_walk15, fr_walk16, fr_walk17, fr_walk18, fr_walk11, fr_walk12, afEnd, afEnd, afEnd, afEnd
00016916 00                         		even
00016916 FF2E 2F30 3132 3334 35FF+  SonAni_Run:	dc.b $FF, fr_run11,  fr_run12,  fr_run13,  fr_run14, fr_run15,  fr_run16,  fr_run17,  fr_run18, afEnd, afEnd, afEnd, afEnd
00016924 00                         		even
00016924 FE5E 5F60 6162 66          SonAni_Roll:	dc.b $FE, fr_Roll1, fr_Roll6, fr_Roll2, fr_Roll7, fr_Roll3, fr_Roll5
0001692B 6364 6566 FFFF             		dc.b fr_Roll8, fr_Roll4, fr_Roll9, fr_Roll5, afEnd, afEnd
00016932 00                         		even
00016932 FE5E 5F60 6162 66          SonAni_Roll2:	dc.b $FE, fr_Roll1, fr_Roll6, fr_Roll2, fr_Roll7, fr_Roll3, fr_Roll5
00016939 6364 6566 FFFF             		dc.b fr_Roll8, fr_Roll4, fr_Roll9, fr_Roll5, afEnd, afEnd
00016940 00                         		even
00016940 FD89 8A8B 8C8D 8E8F 90FF+  SonAni_Push:	dc.b $FD,  fr_push1,  fr_push2,  fr_push3,  fr_push4, fr_push5,  fr_push6,  fr_push7,  fr_push8, afEnd, afEnd, afEnd, afEnd
0001694E 00                         		even
0001694E                            SonAni_Wait:	
0001694E 0501 0101 0101 0101 0102+  		dc.b   5,  1,  1,  1,  1,  1,  1,  1,  1,  2,  1,  1,  1,  1,  1
0001695D 0101 0101 0101 0101 0102+  		dc.b   1,  1,  1,  1,  1,  1,  1,  1,  1,  2,  1,  1,  1,  1,  1
0001696C 0101 0101 0101 0101 0102+  		dc.b   1,  1,  1,  1,  1,  1,  1,  1,  1,  2,  1,  1,  1,  1,  1
0001697B 0203 0303 0404 0505 0506+  		dc.b   2,  3,  3,  3,  4,  4,  5,  5,  5,  6,  6,  6,  7,  7,  7
0001698A 0606 0607 0707 0606 0607+  		dc.b   6,  6,  6,  7,  7,  7,  6,  6,  6,  7,  7,  7,  6,  6,  6
00016999 0707 0706 0606 0707 0706+  		dc.b   7,  7,  7,  6,  6,  6,  7,  7,  7,  6,  6,  6,  7,  7,  7
000169A8 0606 0607 0707 0606 0607+  		dc.b   6,  6,  6,  7,  7,  7,  6,  6,  6,  7,  7,  7,  6,  6,  6
000169B7 0707 0706 0606 0707 0706+  		dc.b   7,  7,  7,  6,  6,  6,  7,  7,  7,  6,  6,  6,  7,  7,  7
000169C6 0808 0909 0A0A FE04        		dc.b   8,  8,  9,  9,  $A, $A, $FE, 4
000169CE                            		even
000169CE 0F72 7374 75FF             SonAni_Balance:	dc.b $F, fr_balance1, fr_balance2, fr_balance3, fr_balance4, afEnd
000169D4                            		even
000169D4 030C 0DFE 01               SonAni_LookUp:	dc.b $3, fr_lookup1, fr_lookup2, afBack, 1
000169DA 00                         		even
000169DA 026F 7071 FE01             SonAni_Duck:	dc.b $2, fr_duck3, fr_duck2, fr_duck, afBack, 1
000169E0                            		even
000169E0 3F67 FF                    SonAni_Warp1:	dc.b $3F, fr_warp1, afEnd
000169E4 00                         		even
000169E4 3F68 FF                    SonAni_Warp2:	dc.b $3F, fr_warp2, afEnd
000169E8 00                         		even
000169E8 3F69 FF                    SonAni_Warp3:	dc.b $3F, fr_warp3, afEnd
000169EC 00                         		even
000169EC 3F6A FF                    SonAni_Warp4:	dc.b $3F, fr_warp4, afEnd
000169F0 00                         		even
000169F0 026B 6C6C 6D6D 6E6E FD00   SonAni_Stop:	dc.b 2,	fr_stop1, fr_stop2, fr_stop2, fr_stop3, fr_stop3, fr_stop4, fr_stop4, $FD,  0
000169FA                            		even
000169FA 077C 82FE 02               SonAni_Float1:	dc.b 7,	fr_float1, fr_float4, afBack, 2
00016A00 00                         		even
00016A00 037C 7D7E 7F80 817B FF     SonAni_Float2:	dc.b 3,	fr_float1, fr_float7, fr_float2, fr_float8, fr_float5, fr_float3, fr_float6, afEnd
00016A0A 00                         		even
00016A0A 0783 8483 8483 84FD 00     SonAni_Spring:	dc.b 7, fr_spring, fr_spring2, fr_spring, fr_spring2, fr_spring, fr_spring2, afChange, id_Walk
00016A14 00                         		even
00016A14 0485 86FF                  SonAni_Hang:	dc.b 4,	fr_hang1, fr_hang2, afEnd
00016A18                            		even
00016A18 0F87 8787 FE01             SonAni_Leap1:	dc.b $F, fr_leap1, fr_leap1, fr_leap1,	afBack, 1
00016A1E                            		even
00016A1E 0F87 88FE 01               SonAni_Leap2:	dc.b $F, fr_leap1, fr_leap2, afBack, 1
00016A24 00                         		even
00016A24 3F91 FF                    SonAni_Surf:	dc.b $3F, fr_surf, afEnd
00016A28 00                         		even
00016A28 0B95 9512 13FD 00          SonAni_GetAir:	dc.b $B, fr_getair, fr_getair, fr_walk15, fr_walk16, afChange, id_Walk
00016A30 00                         		even
00016A30 2092 FF                    SonAni_Burnt:	dc.b $20, fr_burnt, afEnd
00016A34 00                         		even
00016A34 2F93 FF                    SonAni_Drown:	dc.b $2F, fr_drown, afEnd
00016A38 00                         		even
00016A38 0394 FF                    SonAni_Death:	dc.b 3,	fr_death, afEnd
00016A3C 00                         		even
00016A3C 0396 FF                    SonAni_Hurt:	dc.b 3,	fr_injury, afEnd
00016A40 00                         		even
00016A40                            SonAni_WaterSlide:
00016A40 0796 97FF                  		dc.b 7, fr_injury, fr_waterslide, afEnd
00016A44                            		even
00016A44 7700 FD00                  SonAni_Null:	dc.b $77, fr_null, afChange, id_Walk
00016A48                            		even
00016A48 037C 7E80 817B FF          SonAni_Float3:	dc.b 3,	fr_float1, fr_float2, fr_float5, fr_float3, fr_float6, afEnd
00016A50 00                         		even
00016A50 037C FD00                  SonAni_Float4:	dc.b 3,	fr_float1, afChange, id_Walk
00016A54                            		even
00016A54 FF4E 4F50 51FF FFFF FFFF+  SonAni_MaxRun:  dc.b $FF, fr_peelout11, fr_peelout12, fr_peelout13, fr_peelout14, afEnd, afEnd, afEnd, afEnd, afEnd, afEnd, afEnd, afEnd
00016A62 00                         		even
00016A62 009B 9C9B 9D9B 9E9B 9F9B+  SonAni_SpinDash: dc.b 0, fr_Spindash1, fr_spindash2, fr_spindash1, fr_spindash3, fr_spindash1, fr_spindash4, fr_spindash1, fr_spindash5, fr_spindash1, fr_spindash6, afEnd
00016A6E                            		even
00016A6E 0298 99FF                  SonAni_Hurt2:	dc.b 2, fr_skele1, fr_skele2, afEnd	
00016A72                            		even
00016A72 030B FD00                  SonAni_GetUp:	dc.b 3, $B,$FD,  0
00016A76                            		even
00016A76 0102 FD00                  SonAni_Blink:	dc.b   1,  2,$FD,  0
00016A7A                            		even
00016A7A 0808 0909 0A0A 09FE 05     SonAni_Sit:	dc.b   8, 8, 9, 9, $A, $A,  9, $FE, 5
00016A84 00                         		even
00016A84 000E 0E0E 0E0E 0E0F 0F     SonAni_Peelout: dc.b 	0, $E, $E, $E, $E, $E, $E, $F, $F
00016A8D 0F0F 1010 1111 1213        		dc.b	$F, $F, $10, $10, $11, $11, $12, $13
00016A95 1415 2E2F 3031 32          		dc.b	$14, $15, $2E, $2F, $30, $31, $32
00016A9C 3334 35                    		dc.b	$33, $34, $35
00016A9F 4E4F 5051 FE04 FE          		dc.b	$4E, $4F, $50,  $51, -2, 4, $FE
00016AA6                            		even
00016AA6 137A 7879 78FF             SonAni_Hang2:	dc.b $13, fr_vhang3, fr_vhang1, fr_vhang2, fr_vhang1, $FF	
00016AAC                            		even
00016AAC                            
00016AAC                            
00016AAC =00000000                  id_Walk:	equ (ptr_Walk-Ani_Sonic)/2	; 0
00016AAC =00000001                  id_Run:		equ (ptr_Run-Ani_Sonic)/2	; 1
00016AAC =00000002                  id_Roll:	equ (ptr_Roll-Ani_Sonic)/2	; 2
00016AAC =00000003                  id_Roll2:	equ (ptr_Roll2-Ani_Sonic)/2	; 3
00016AAC =00000004                  id_Push:	equ (ptr_Push-Ani_Sonic)/2	; 4
00016AAC =00000005                  id_Wait:	equ (ptr_Wait-Ani_Sonic)/2	; 5
00016AAC =00000006                  id_Balance:	equ (ptr_Balance-Ani_Sonic)/2	; 6
00016AAC =00000007                  id_LookUp:	equ (ptr_LookUp-Ani_Sonic)/2	; 7
00016AAC =00000008                  id_Duck:	equ (ptr_Duck-Ani_Sonic)/2	; 8
00016AAC =00000009                  id_Warp1:	equ (ptr_Warp1-Ani_Sonic)/2	; 9
00016AAC =0000000A                  id_Warp2:	equ (ptr_Warp2-Ani_Sonic)/2	; $A
00016AAC =0000000B                  id_Warp3:	equ (ptr_Warp3-Ani_Sonic)/2	; $B
00016AAC =0000000C                  id_Warp4:	equ (ptr_Warp4-Ani_Sonic)/2	; $C
00016AAC =0000000D                  id_Stop:	equ (ptr_Stop-Ani_Sonic)/2	; $D
00016AAC =0000000E                  id_Float1:	equ (ptr_Float1-Ani_Sonic)/2	; $E
00016AAC =0000000F                  id_Float2:	equ (ptr_Float2-Ani_Sonic)/2	; $F
00016AAC =00000010                  id_Spring:	equ (ptr_Spring-Ani_Sonic)/2	; $10
00016AAC =00000011                  id_Hang:	equ (ptr_Hang-Ani_Sonic)/2	; $11
00016AAC =00000012                  id_Leap1:	equ (ptr_Leap1-Ani_Sonic)/2	; $12
00016AAC =00000013                  id_Leap2:	equ (ptr_Leap2-Ani_Sonic)/2	; $13
00016AAC =00000014                  id_Surf:	equ (ptr_Surf-Ani_Sonic)/2	; $14
00016AAC =00000015                  id_GetAir:	equ (ptr_GetAir-Ani_Sonic)/2	; $15
00016AAC =00000016                  id_Burnt:	equ (ptr_Burnt-Ani_Sonic)/2	; $16
00016AAC =00000017                  id_Drown:	equ (ptr_Drown-Ani_Sonic)/2	; $17
00016AAC =00000018                  id_Death:	equ (ptr_Death-Ani_Sonic)/2	; $18
00016AAC =00000019                  id_Hurt:	equ (ptr_Hurt-Ani_Sonic)/2	; $19
00016AAC =0000001A                  id_WaterSlide:	equ (ptr_WaterSlide-Ani_Sonic)/2 ; $1A
00016AAC =0000001B                  id_Null:	equ (ptr_Null-Ani_Sonic)/2	; $1B
00016AAC =0000001C                  id_Float3:	equ (ptr_Float3-Ani_Sonic)/2	; $1C
00016AAC =0000001D                  id_Float4:	equ (ptr_Float4-Ani_Sonic)/2	; $1D
00016AAC =0000001E                  id_MaxRun:	equ (ptr_MaxRun-Ani_Sonic)/2	; $1E
00016AAC =0000001F                  id_Spindash:	equ (ptr_Spindash-Ani_Sonic)/2	; $1F
00016AAC =00000020                  id_Hurt2:	equ (ptr_Hurt2-Ani_Sonic)/2	; $21
00016AAC =00000021                  id_GetUp:	equ (ptr_GetUp-Ani_Sonic)/2	; $22
00016AAC =00000022                  id_Blink:	equ (ptr_Blink-Ani_Sonic)/2	; $23
00016AAC =00000023                  id_Sit:		equ (ptr_Sit-Ani_Sonic)/2	; $24
00016AAC =00000024                  id_Peelout:	equ (ptr_Peelout-Ani_Sonic)/2	; $25
00016AAC =00000025                  id_Hang2:		equ	(ptr_Hang2-Ani_Sonic)/2
00016AAC =00000025                  id_Hang2:		equ	(ptr_Hang2-Ani_Sonic)/2
00016AAC                            		include	"_incObj\Sonic LoadGfx.asm"
00016AAC                            ; ---------------------------------------------------------------------------
00016AAC                            ; Sonic	graphics loading subroutine
00016AAC                            ; ---------------------------------------------------------------------------
00016AAC                            
00016AAC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016AAC                            
00016AAC                            
00016AAC                            Sonic_LoadGfx:			; XREF: Obj01_Control; et al
00016AAC 7000                       		moveq	#0,d0
00016AAE 1028 001A                  		move.b	$1A(a0),d0	; load frame number
00016AB2 B038 F766                  		cmp.b	($FFFFF766).w,d0
00016AB6 6700                       		beq.s	locret_13C96
00016AB8 11C0 F766                  		move.b	d0,($FFFFF766).w
00016ABC 45F9 0000 0000             		lea	(SonicDynPLC).l,a2
00016AC2 D040                       		add.w	d0,d0
00016AC4 D4F2 0000                  		adda.w	(a2,d0.w),a2
00016AC8 7A00                       		moveq	#0,d5
00016ACA 1A1A                       		move.b	(a2)+,d5
00016ACC 5345                       		subq.w	#1,d5
00016ACE 6B00                       		bmi.s	locret_13C96
00016AD0 383C F000                  		move.w	#$F000,d4
00016AD4 2C3C 0000 0000             		move.l	#Art_Sonic,d6
00016ADA                            
00016ADA                            SPLC_ReadEntry:
00016ADA 7200                       		moveq	#0,d1
00016ADC 121A                       		move.b	(a2)+,d1
00016ADE E149                       		lsl.w	#8,d1
00016AE0 121A                       		move.b	(a2)+,d1
00016AE2 3601                       		move.w	d1,d3
00016AE4 E04B                       		lsr.w	#8,d3
00016AE6 0243 00F0                  		andi.w	#$F0,d3
00016AEA 0643 0010                  		addi.w	#$10,d3
00016AEE 0241 0FFF                  		andi.w	#$FFF,d1
00016AF2 EB89                       		lsl.l	#5,d1
00016AF4 D286                       		add.l	d6,d1
00016AF6 3404                       		move.w	d4,d2
00016AF8 D843                       		add.w	d3,d4
00016AFA D843                       		add.w	d3,d4
00016AFC 4EB9 0000 1476             		jsr	(QueueDMATransfer).l
00016B02 51CD FFD6                  		dbf	d5,SPLC_ReadEntry	; repeat for number of entries
00016B06                            
00016B06                            locret_13C96:
00016B06 4E75                       		rts	
00016B08                            ; End of function Sonic_LoadGfx
00016B08                            ; End of function Sonic_LoadGfx
00016B08                            
00016B08                            		include	"_incObj\0A Drowning Countdown.asm"
00016B08                            ; ---------------------------------------------------------------------------
00016B08                            ; Object 0A - drowning countdown numbers and small bubbles that float out of
00016B08                            ; Sonic's mouth (LZ)
00016B08                            ; ---------------------------------------------------------------------------
00016B08                            
00016B08                            DrownCount:
00016B08 7000                       		moveq	#0,d0
00016B0A 1028 0024                  		move.b	obRoutine(a0),d0
00016B0E 323B 0000                  		move.w	Drown_Index(pc,d0.w),d1
00016B12 4EFB 1000                  		jmp	Drown_Index(pc,d1.w)
00016B16                            ; ===========================================================================
00016B16                            Drown_Index:
00016B16 0000                       ptr_Drown_Main:		dc.w Drown_Main-Drown_Index
00016B18 0000                       ptr_Drown_Animate:	dc.w Drown_Animate-Drown_Index
00016B1A 0000                       ptr_Drown_ChkWater:	dc.w Drown_ChkWater-Drown_Index
00016B1C 0000                       ptr_Drown_Display:	dc.w Drown_Display-Drown_Index
00016B1E 0000                       ptr_Drown_Delete:	dc.w Drown_Delete-Drown_Index
00016B20 0000                       ptr_Drown_Countdown:	dc.w Drown_Countdown-Drown_Index
00016B22 0000                       ptr_Drown_AirLeft:	dc.w Drown_AirLeft-Drown_Index
00016B24 0000                       			dc.w Drown_Display-Drown_Index
00016B26 0000                       			dc.w Drown_Delete-Drown_Index
00016B28                            
00016B28 =00000030                  drown_origX:		equ $30		; original x-axis position
00016B28 =00000038                  drown_time:		equ $38		; time between each number changes
00016B28                            
00016B28 =00000000                  id_Drown_Main:		equ ptr_Drown_Main-Drown_Index		; 0
00016B28 =00000002                  id_Drown_Animate:	equ ptr_Drown_Animate-Drown_Index		; 2
00016B28 =00000004                  id_Drown_ChkWater:	equ ptr_Drown_ChkWater-Drown_Index	; 4
00016B28 =00000006                  id_Drown_Display:	equ ptr_Drown_Display-Drown_Index		; 6
00016B28 =00000008                  id_Drown_Delete:		equ ptr_Drown_Delete-Drown_Index		; 8
00016B28 =0000000A                  id_Drown_Countdown:	equ ptr_Drown_Countdown-Drown_Index	; $A
00016B28 =0000000C                  id_Drown_AirLeft:	equ ptr_Drown_AirLeft-Drown_Index		; $C
00016B28                            ; ===========================================================================
00016B28                            
00016B28                            Drown_Main:	; Routine 0
00016B28 5428 0024                  		addq.b	#2,obRoutine(a0)
00016B2C 217C 0001 4EF6 0004        		move.l	#Map_Bub,obMap(a0)
00016B34 317C 8348 0002             		move.w	#$8348,obGfx(a0)
00016B3A 117C 0084 0001             		move.b	#$84,obRender(a0)
00016B40 117C 0010 0014             		move.b	#$10,obActWid(a0)
00016B46 317C 0080 0018             		move.w	#$80,obPriority(a0)
00016B4C 1028 0028                  		move.b	obSubtype(a0),d0 ; get bubble type
00016B50 6A00                       		bpl.s	@smallbubble	; branch if $00-$7F
00016B52                            
00016B52 5028 0024                  		addq.b	#8,obRoutine(a0) ; goto Drown_Countdown next
00016B56 217C 0000 0000 0004        		move.l	#Map_Drown,obMap(a0)
00016B5E 317C 0440 0002             		move.w	#$440,obGfx(a0)
00016B64 0240 007F                  		andi.w	#$7F,d0
00016B68 1140 0033                  		move.b	d0,$33(a0)
00016B6C 6000 0000                  		bra.w	Drown_Countdown
00016B70                            ; ===========================================================================
00016B70                            
00016B70                            @smallbubble:
00016B70 1140 001C                  		move.b	d0,obAnim(a0)
00016B74 3168 0008 0030             		move.w	obX(a0),drown_origX(a0)
00016B7A 317C FF78 0012             		move.w	#-$88,obVelY(a0)
00016B80                            
00016B80                            Drown_Animate:	; Routine 2
00016B80 43F9 0000 0000             		lea	(Ani_Drown).l,a1
00016B86 4EB9 0000 CB4E             		jsr	(AnimateSprite).l
00016B8C                            
00016B8C                            Drown_ChkWater:	; Routine 4
00016B8C 3038 F646                  		move.w	(v_waterpos1).w,d0
00016B90 B068 000C                  		cmp.w	obY(a0),d0	; has bubble reached the water surface?
00016B94 6500                       		bcs.s	@wobble		; if not, branch
00016B96                            
00016B96 117C 0006 0024             		move.b	#id_Drown_Display,obRoutine(a0) ; goto Drown_Display next
00016B9C 5E28 001C                  		addq.b	#7,obAnim(a0)
00016BA0 0C28 000D 001C             		cmpi.b	#$D,obAnim(a0)
00016BA6 6700                       		beq.s	Drown_Display
00016BA8 6000                       		bra.s	Drown_Display
00016BAA                            ; ===========================================================================
00016BAA                            
00016BAA                            @wobble:
00016BAA 4A38 F7C7                  		tst.b	(f_wtunnelmode).w ; is Sonic in a water tunnel?
00016BAE 6700                       		beq.s	@notunnel	; if not, branch
00016BB0 5868 0030                  		addq.w	#4,drown_origX(a0)
00016BB4                            
00016BB4                            	@notunnel:
00016BB4 1028 0026                  		move.b	obAngle(a0),d0
00016BB8 5228 0026                  		addq.b	#1,obAngle(a0)
00016BBC 0240 007F                  		andi.w	#$7F,d0
00016BC0 43F9 0000 0000             		lea	(Drown_WobbleData).l,a1
00016BC6 1031 0000                  		move.b	(a1,d0.w),d0
00016BCA 4880                       		ext.w	d0
00016BCC D068 0030                  		add.w	drown_origX(a0),d0
00016BD0 3140 0008                  		move.w	d0,obX(a0)
00016BD4 6100                       		bsr.s	Drown_ShowNumber
00016BD6 4EB9 0000 FA78             		jsr	(SpeedToPos).l
00016BDC 4A28 0001                  		tst.b	obRender(a0)
00016BE0 6A00                       		bpl.s	@delete
00016BE2 4EF9 0000 FA8C             		jmp	(DisplaySprite).l
00016BE8                            
00016BE8                            	@delete:
00016BE8 4EF9 0000 FACC             		jmp	(DeleteObject).l
00016BEE                            ; ===========================================================================
00016BEE                            
00016BEE                            Drown_Display:	; Routine 6, Routine $E
00016BEE 6100                       		bsr.s	Drown_ShowNumber
00016BF0 43F9 0000 0000             		lea	(Ani_Drown).l,a1
00016BF6 4EB9 0000 CB4E             		jsr	(AnimateSprite).l
00016BFC 4EF9 0000 FA8C             		jmp	(DisplaySprite).l
00016C02                            ; ===========================================================================
00016C02                            
00016C02                            Drown_Delete:	; Routine 8, Routine $10
00016C02 4EF9 0000 FACC             		jmp	(DeleteObject).l
00016C08                            ; ===========================================================================
00016C08                            
00016C08                            Drown_AirLeft:	; Routine $C
00016C08 0C78 000C FE14             		cmpi.w	#$C,(v_air).w	; check air remaining
00016C0E 6200                       		bhi.s	Drown_AirLeft_Delete		; if higher than $C, branch
00016C10 5368 0038                  		subq.w	#1,drown_time(a0)
00016C14 6600                       		bne.s	@display
00016C16 117C 000E 0024             		move.b	#id_Drown_Display+8,obRoutine(a0) ; goto Drown_Display next
00016C1C 5E28 001C                  		addq.b	#7,obAnim(a0)
00016C20 60CC                       		bra.s	Drown_Display
00016C22                            ; ===========================================================================
00016C22                            
00016C22                            	@display:
00016C22 43F9 0000 0000             		lea	(Ani_Drown).l,a1
00016C28 4EB9 0000 CB4E             		jsr	(AnimateSprite).l
00016C2E 4A28 0001                  		tst.b	obRender(a0)
00016C32 6A00                       		bpl.s	Drown_AirLeft_Delete
00016C34 4EF9 0000 FA8C             		jmp	(DisplaySprite).l
00016C3A                            
00016C3A                            Drown_AirLeft_Delete:	
00016C3A 4EF9 0000 FACC             		jmp	(DeleteObject).l
00016C40                            ; ===========================================================================
00016C40                            
00016C40                            Drown_ShowNumber:
00016C40 4A68 0038                  		tst.w	drown_time(a0)
00016C44 6700                       		beq.s	@nonumber
00016C46 5368 0038                  		subq.w	#1,drown_time(a0)	; decrement timer
00016C4A 6600                       		bne.s	@nonumber	; if time remains, branch
00016C4C 0C28 0007 001C             		cmpi.b	#7,obAnim(a0)
00016C52 6400                       		bcc.s	@nonumber
00016C54                            
00016C54 317C 000F 0038             		move.w	#15,drown_time(a0)
00016C5A 4268 0012                  		clr.w	obVelY(a0)
00016C5E 117C 0080 0001             		move.b	#$80,obRender(a0)
00016C64 3028 0008                  		move.w	obX(a0),d0
00016C68 9078 F700                  		sub.w	(v_screenposx).w,d0
00016C6C 0640 0080                  		addi.w	#$80,d0
00016C70 3140 0008                  		move.w	d0,obX(a0)
00016C74 3028 000C                  		move.w	obY(a0),d0
00016C78 9078 F704                  		sub.w	(v_screenposy).w,d0
00016C7C 0640 0080                  		addi.w	#$80,d0
00016C80 3140 000A                  		move.w	d0,obScreenY(a0)
00016C84 117C 000C 0024             		move.b	#id_Drown_AirLeft,obRoutine(a0) ; goto Drown_AirLeft next
00016C8A                            
00016C8A                            	@nonumber:
00016C8A 4E75                       		rts	
00016C8C                            ; ===========================================================================
00016C8C                            Drown_WobbleData:
00016C8C 0000 0000 0000 0101 0101+  		dc.b 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2
00016C9C 0202 0303 0303 0303 0303+  		dc.b 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3
00016CAC 0303 0303 0303 0303 0303+  		dc.b 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2
00016CBC 0202 0202 0202 0101 0101+  		dc.b 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0
00016CCC 00FF FFFF FFFF FEFE FEFE+  		dc.b 0, -1, -1, -1, -1, -1, -2, -2, -2, -2, -2, -3, -3, -3, -3, -3
00016CDC FDFD FCFC FCFC FCFC FCFC+  		dc.b -3, -3, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4
00016CEC FCFC FCFC FCFC FCFC FCFC+  		dc.b -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -3
00016CFC FDFD FDFD FDFD FEFE FEFE+  		dc.b -3, -3, -3, -3, -3, -3, -2, -2, -2, -2, -2, -1, -1, -1, -1, -1
00016D0C 0000 0000 0000 0101 0101+  		dc.b 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2
00016D1C 0202 0303 0303 0303 0303+  		dc.b 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3
00016D2C 0303 0303 0303 0303 0303+  		dc.b 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2
00016D3C 0202 0202 0202 0101 0101+  		dc.b 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0
00016D4C 00FF FFFF FFFF FEFE FEFE+  		dc.b 0, -1, -1, -1, -1, -1, -2, -2, -2, -2, -2, -3, -3, -3, -3, -3
00016D5C FDFD FCFC FCFC FCFC FCFC+  		dc.b -3, -3, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4
00016D6C FCFC FCFC FCFC FCFC FCFC+  		dc.b -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -3
00016D7C FDFD FDFD FDFD FEFE FEFE+  		dc.b -3, -3, -3, -3, -3, -3, -2, -2, -2, -2, -2, -1, -1, -1, -1, -1
00016D8C                            ; ===========================================================================
00016D8C                            
00016D8C                            Drown_Countdown:; Routine $A
00016D8C 4A68 002C                  		tst.w	$2C(a0)
00016D90 6600 0000                  		bne.w	@loc_13F86
00016D94 0C38 0006 D024             		cmpi.b	#6,(v_player+obRoutine).w
00016D9A 6400 0000                  		bcc.w	@nocountdown
00016D9E 0838 0006 D022             		btst	#6,(v_player+obStatus).w ; is Sonic underwater?
00016DA4 6700 0000                  		beq.w	@nocountdown	; if not, branch
00016DA8                            
00016DA8 5368 0038                  		subq.w	#1,drown_time(a0)	; decrement timer
00016DAC 6A00 0000                  		bpl.w	@nochange	; branch if time remains
00016DB0 317C 003B 0038             		move.w	#59,drown_time(a0)
00016DB6 317C 0001 0036             		move.w	#1,$36(a0)
00016DBC 4EB9 0000 3A5C             		jsr	(RandomNumber).l
00016DC2 0240 0001                  		andi.w	#1,d0
00016DC6 1140 0034                  		move.b	d0,$34(a0)
00016DCA 3038 FE14                  		move.w	(v_air).w,d0	; check air remaining
00016DCE 0C40 0019                  		cmpi.w	#25,d0
00016DD2 6700                       		beq.s	@warnsound	; play sound if	air is 25
00016DD4 0C40 0014                  		cmpi.w	#20,d0
00016DD8 6700                       		beq.s	@warnsound
00016DDA 0C40 000F                  		cmpi.w	#15,d0
00016DDE 6700                       		beq.s	@warnsound
00016DE0 0C40 000C                  		cmpi.w	#12,d0
00016DE4 6200                       		bhi.s	@reduceair	; if air is above 12, branch
00016DE6                            
00016DE6                            	@skipmusic:
00016DF0 5328 0032                  		subq.b	#1,$32(a0)
00016DF4 6A00                       		bpl.s	@reduceair
00016DF6 1168 0033 0032             		move.b	$33(a0),$32(a0)
00016DFC 08E8 0007 0036             		bset	#7,$36(a0)
00016E02 6000                       		bra.s	@reduceair
00016E04                            ; ===========================================================================
00016E04                            
00016E04                            @warnsound:
00016E0E                            
00016E0E                            @reduceair:
00016E0E 5378 FE14                  		subq.w	#1,(v_air).w	; subtract 1 from air remaining
00016E12 6400 0000                  		bcc.w	@gotomakenum	; if air is above 0, branch
00016E16                            
00016E16                            		; Sonic drowns here
00016E16 6100 0000                  		bsr.w	ResumeMusic
00016E1A 11FC 0081 F7C8             		move.b	#$81,(f_lockmulti).w ; lock controls
00016E2A 117C 000A 0034             		move.b	#$A,$34(a0)
00016E30 317C 0001 0036             		move.w	#1,$36(a0)
00016E36 317C 0078 002C             		move.w	#$78,$2C(a0)
00016E3C 2F08                       		move.l	a0,-(sp)
00016E3E 41F8 D000                  		lea	(v_player).w,a0
00016E42 6100 F6B6                  		bsr.w	Sonic_ResetOnFloor
00016E46 117C 0017 001C             		move.b	#id_Drown,obAnim(a0)	; use Sonic's drowning animation
00016E4C 08E8 0001 0022             		bset	#1,obStatus(a0)
00016E52 08E8 0007 0002             		bset	#7,obGfx(a0)
00016E58 317C 0000 0012             		move.w	#0,obVelY(a0)
00016E5E 317C 0000 0010             		move.w	#0,obVelX(a0)
00016E64 317C 0000 0020             		move.w	#0,obInertia(a0)
00016E6A 11FC 0001 F744             		move.b	#1,(f_nobgscroll).w
00016E70 205F                       		movea.l	(sp)+,a0
00016E72 4E75                       		rts	
00016E74                            ; ===========================================================================
00016E74                            
00016E74                            @loc_13F86:
00016E74 5368 002C                  		subq.w	#1,$2C(a0)
00016E78 6600                       		bne.s	@loc_13F94
00016E7A 11FC 0006 D024             		move.b	#6,(v_player+obRoutine).w
00016E80 4E75                       		rts	
00016E82                            ; ===========================================================================
00016E82                            
00016E82                            	@loc_13F94:
00016E82 2F08                       		move.l	a0,-(sp)
00016E84 41F8 D000                  		lea	(v_player).w,a0
00016E88 4EB9 0000 FA78             		jsr	(SpeedToPos).l
00016E8E 0668 0010 0012             		addi.w	#$10,obVelY(a0)
00016E94 205F                       		movea.l	(sp)+,a0
00016E96 6000                       		bra.s	@nochange
00016E98                            ; ===========================================================================
00016E98                            
00016E98                            @gotomakenum:
00016E98 6000                       		bra.s	@makenum
00016E9A                            ; ===========================================================================
00016E9A                            
00016E9A                            @nochange:
00016E9A 4A68 0036                  		tst.w	$36(a0)
00016E9E 6700 0000                  		beq.w	@nocountdown
00016EA2 5368 003A                  		subq.w	#1,$3A(a0)
00016EA6 6A00 0000                  		bpl.w	@nocountdown
00016EAA                            
00016EAA                            @makenum:
00016EAA 4EB9 0000 3A5C             		jsr	(RandomNumber).l
00016EB0 0240 000F                  		andi.w	#$F,d0
00016EB4 3140 003A                  		move.w	d0,$3A(a0)
00016EB8 4EB9 0000 FF18             		jsr	(FindFreeObj).l
00016EBE 6600 0000                  		bne.w	@nocountdown
00016EC2 12BC 000A                  		move.b	#id_DrownCount,0(a1) ; load object
00016EC6 3378 D008 0008             		move.w	(v_player+obX).w,obX(a1) ; match X position to Sonic
00016ECC 7006                       		moveq	#6,d0
00016ECE 0838 0000 D022             		btst	#0,(v_player+obStatus).w
00016ED4 6700                       		beq.s	@noflip
00016ED6 4440                       		neg.w	d0
00016ED8 137C 0040 0026             		move.b	#$40,obAngle(a1)
00016EDE                            
00016EDE                            	@noflip:
00016EDE D169 0008                  		add.w	d0,obX(a1)
00016EE2 3378 D00C 000C             		move.w	(v_player+obY).w,obY(a1)
00016EE8 137C 0006 0028             		move.b	#6,obSubtype(a1)
00016EEE 4A68 002C                  		tst.w	$2C(a0)
00016EF2 6700 0000                  		beq.w	@loc_1403E
00016EF6 0268 0007 003A             		andi.w	#7,$3A(a0)
00016EFC 0668 0000 003A             		addi.w	#0,$3A(a0)
00016F02 3038 D00C                  		move.w	(v_player+obY).w,d0
00016F06 0440 000C                  		subi.w	#$C,d0
00016F0A 3340 000C                  		move.w	d0,obY(a1)
00016F0E 4EB9 0000 3A5C             		jsr	(RandomNumber).l
00016F14 1340 0026                  		move.b	d0,obAngle(a1)
00016F18 3038 FE04                  		move.w	(v_framecount).w,d0
00016F1C 0200 0003                  		andi.b	#3,d0
00016F20 6600                       		bne.s	@loc_14082
00016F22 137C 000E 0028             		move.b	#$E,obSubtype(a1)
00016F28 6000                       		bra.s	@loc_14082
00016F2A                            ; ===========================================================================
00016F2A                            
00016F2A                            @loc_1403E:
00016F2A 0828 0007 0036             		btst	#7,$36(a0)
00016F30 6700                       		beq.s	@loc_14082
00016F32 3438 FE14                  		move.w	(v_air).w,d2
00016F36 E24A                       		lsr.w	#1,d2
00016F38 4EB9 0000 3A5C             		jsr	(RandomNumber).l
00016F3E 0240 0003                  		andi.w	#3,d0
00016F42 6600                       		bne.s	@loc_1406A
00016F44 08E8 0006 0036             		bset	#6,$36(a0)
00016F4A 6600                       		bne.s	@loc_14082
00016F4C 1342 0028                  		move.b	d2,obSubtype(a1)
00016F50 337C 001C 0038             		move.w	#$1C,drown_time(a1)
00016F56                            
00016F56                            	@loc_1406A:
00016F56 4A28 0034                  		tst.b	$34(a0)
00016F5A 6600                       		bne.s	@loc_14082
00016F5C 08E8 0006 0036             		bset	#6,$36(a0)
00016F62 6600                       		bne.s	@loc_14082
00016F64 1342 0028                  		move.b	d2,obSubtype(a1)
00016F68 337C 001C 0038             		move.w	#$1C,drown_time(a1)
00016F6E                            
00016F6E                            @loc_14082:
00016F6E 5328 0034                  		subq.b	#1,$34(a0)
00016F72 6A00                       		bpl.s	@nocountdown
00016F74 4268 0036                  		clr.w	$36(a0)
00016F78                            
00016F78                            @nocountdown:
00016F78 4E75                       		rts	
00016F78 4E75                       		rts	
00016F7A                            
00016F7A                            
00016F7A                            ; ---------------------------------------------------------------------------
00016F7A                            ; Subroutine to	play music for LZ/SBZ3 after a countdown
00016F7A                            ; ---------------------------------------------------------------------------
00016F7A                            
00016F7A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016F7A                            
00016F7A                            
00016F7A                            ResumeMusic:
00016F7A                            		;cmpi.w	#12,(v_air).w	; more than 12 seconds of air left?
00016F7A                            		;bhi.s	@over12		; if yes, branch
00016F7A                            		;move.b	(v_Saved_music),d0
00016F7A                            		;tst.b	(v_invinc).w ; is Sonic invincible?
00016F7A                            		;beq.s	@notinvinc ; if not, branch
00016F7A                            		;move.w	#bgm_Invincible,d0
00016F7A                            		;tst.b	(v_shoes).w ; is Sonic speed shoes?
00016F7A                            		;beq.s	@notinvinc	; if not, branch
00016F7A                            		;move.w	#bgm_Ending,d0
00016F7A                            
00016F7A                            	;@notinvinc:
00016F7A                            		;tst.b	(f_lockscreen).w ; is Sonic at a boss?
00016F7A                            		;beq.s	@playselected ; if not, branch
00016F7A                            		;move.w	#bgm_Boss,d0
00016F7A                            
00016F7A                            	;@playselected:
00016F7A                            		;jsr	(PlaySound).l
00016F7A                            
00016F7A                            	;@over12:
00016F7A 31FC 001E FE14             		move.w	#30,(v_air).w	; reset air to 30 seconds
00016F80 4238 D372                  		clr.b	(v_objspace+$340+$32).w
00016F84 4E75                       		rts	
00016F86                            
00016F86                            ;End of function ResumeMusic
00016F86                            
00016F86                            ; ===========================================================================
00016F86                            
00016F86                            		include	"_anim\Drowning Countdown.asm"
00016F86                            ; ---------------------------------------------------------------------------
00016F86                            ; Animation script - countdown numbers and bubbles (LZ)
00016F86                            ; ---------------------------------------------------------------------------
00016F86 0000                       Ani_Drown:	dc.w @zeroappear-Ani_Drown
00016F88 0000                       		dc.w @oneappear-Ani_Drown
00016F8A 0000                       		dc.w @twoappear-Ani_Drown
00016F8C 0000                       		dc.w @threeappear-Ani_Drown
00016F8E 0000                       		dc.w @fourappear-Ani_Drown
00016F90 0000                       		dc.w @fiveappear-Ani_Drown
00016F92 0000                       		dc.w @smallbubble-Ani_Drown
00016F94 0000                       		dc.w @zeroflash-Ani_Drown
00016F96 0000                       		dc.w @oneflash-Ani_Drown
00016F98 0000                       		dc.w @twoflash-Ani_Drown
00016F9A 0000                       		dc.w @threeflash-Ani_Drown
00016F9C 0000                       		dc.w @fourflash-Ani_Drown
00016F9E 0000                       		dc.w @fiveflash-Ani_Drown
00016FA0 0000                       		dc.w @blank-Ani_Drown
00016FA2 0000                       		dc.w @mediumbubble-Ani_Drown
00016FA4 0500 0102 0304 090D FC     @zeroappear:	dc.b 5,	0, 1, 2, 3, 4, 9, $D, afRoutine
00016FAE 00                         		even
00016FAE 0500 0102 0304 0C12 FC     @oneappear:	dc.b 5,	0, 1, 2, 3, 4, $C, $12,	afRoutine
00016FB8 00                         		even
00016FB8 0500 0102 0304 0C11 FC     @twoappear:	dc.b 5,	0, 1, 2, 3, 4, $C, $11,	afRoutine
00016FC2 00                         		even
00016FC2 0500 0102 0304 0B10 FC     @threeappear:	dc.b 5,	0, 1, 2, 3, 4, $B, $10,	afRoutine
00016FCC 00                         		even
00016FCC 0500 0102 0304 090F FC     @fourappear:	dc.b 5,	0, 1, 2, 3, 4, 9, $F, afRoutine
00016FD6 00                         		even
00016FD6 0500 0102 0304 0A0E FC     @fiveappear:	dc.b 5,	0, 1, 2, 3, 4, $A, $E, afRoutine
00016FE0 00                         		even
00016FE0 0E00 0102 FC               @smallbubble:	dc.b $E, 0, 1, 2, afRoutine
00016FE6 00                         		even
00016FE6 0716 0D16 0D16 0DFC        @zeroflash:	dc.b 7,	$16, $D, $16, $D, $16, $D, afRoutine
00016FEE 0716 1216 1216 12FC        @oneflash:	dc.b 7,	$16, $12, $16, $12, $16, $12, afRoutine
00016FF6 0716 1116 1116 11FC        @twoflash:	dc.b 7,	$16, $11, $16, $11, $16, $11, afRoutine
00016FFE 0716 1016 1016 10FC        @threeflash:	dc.b 7,	$16, $10, $16, $10, $16, $10, afRoutine
00017006 0716 0F16 0F16 0FFC        @fourflash:	dc.b 7,	$16, $F, $16, $F, $16, $F, afRoutine
0001700E 0716 0E16 0E16 0EFC        @fiveflash:	dc.b 7,	$16, $E, $16, $E, $16, $E, afRoutine
00017016 0EFC                       @blank:		dc.b $E, afRoutine
00017018 0E01 0203 04FC             @mediumbubble:	dc.b $E, 1, 2, 3, 4, afRoutine
0001701E                            		even
0001701E                            		even
0001701E                            Map_Drown:	include	"_maps\Drowning Countdown.asm"
0001701E                            ; ---------------------------------------------------------------------------
0001701E                            ; Sprite mappings - drowning countdown numbers (LZ)
0001701E                            ; ---------------------------------------------------------------------------
0001701E                            Map_Drown_internal:
0001701E 0000                       		dc.w @num-Map_Drown_internal
00017020 01                         @num:		dc.b 1
00017021 E80E 0000 F2               		dc.b $E8, $E, 0, 0, $F2
00017026                            		even
00017026                            		even
00017026                            
00017026                            		include	"_incObj\4E Silver Shield.asm"
00017026                            ; ---------------------------------------------------------------------------
00017026                            ; Object 4E - Silver Shield
00017026                            ; ---------------------------------------------------------------------------
00017026                            
00017026                            SpShieldItem:
00017026 223C 0000 0000             		move.l #Unc_SpShield,d1 ; Call for Silver Shield Art
0001702C 343C A820                  		move.w #$A820,d2 ; Load Art from this location (VRAM location*20)
00017030                            		; In this case, VRAM = $541*20
00017030 363C 0200                  		move.w #$200,d3
00017034 4EB9 0000 1476             		jsr (QueueDMATransfer).l
0001703A                            ; ---------------------------------------------------------------------------
0001703A                            SpShieldObj_Main:
0001703A 7000                       		moveq #0,d0
0001703C 1028 0024                  		move.b $24(a0),d0
00017040 323B 0000                  		move.w SpShield_Index(pc,d0.w),d1
00017044 4EFB 1000                  		jmp SpShield_Index(pc,d1.w)
00017048                            ; ===========================================================================
00017048                            SpShield_Index:
00017048 0000                       		dc.w SpShield_Init-SpShield_Index
0001704A 0000                       		dc.w SpShieldChecks-SpShield_Index
0001704C                            ; ===========================================================================
0001704C                            SpShield_Init:
0001704C 5428 0024                  		addq.b #2,$24(a0)
00017050 217C 0000 0000 0004        		move.l #Map_Shield,$4(A0) ; Load Shield Map into place
00017058 117C 0004 0001             		move.b #4,1(a0)
0001705E 317C 0080 0018             		move.w #$80,$18(a0)
00017064 117C 0018 0014             		move.b #$18,obActWid(a0)
0001706A 317C 0541 0002             		move.w #$541,2(a0) ; Set VRAM location
00017070 0838 0007 D002             		btst #7,($FFFFD002).w
00017076 6700                       		beq.s SpShieldChecks
00017078 08E8 0007 0002             		bset #7,2(a0)
0001707E                            ; ---------------------------------------------------------------------------
0001707E                            SpShieldChecks:
0001707E 4A38 FE2D                  		tst.b ($FFFFFE2D).w ; Test if Sonic has a shield
00017082 6600                       		bne.s SpSonicHasShield ; If so, branch to do nothing
00017084 4A38 F5CA                  		tst.b (v_SpShield).w ; Test if Sonic got invisibility
00017088 6700                       		beq.s Spjmp_DeleteObj38 ; If so, delete object temporarily
0001708A                            SpShieldProperties:
0001708A 3178 D008 0008             		move.w ($FFFFD008).w,8(a0) ; Load Main Character X-position
00017090 3178 D00C 000C             		move.w ($FFFFD00C).w,$C(a0) ; Load Main Character Y-position
00017096 1178 D022 0022             		move.b ($FFFFD022).w,$22(a0) ; Something about Character status
0001709C 43F9 0000 0000             		lea (Ani_Shield).l, a1 ; Load Animation Scripts into a1
000170A2 4EB9 0000 CB4E             		jsr AnimateSprite
000170A8 4EFA 89E2                  		jmp DisplaySprite
000170AC                            SpSonicHasShield:
000170AC 4E75                       		rts
000170AE                            Spjmp_DeleteObj38: ; loc_12648:
000170AE 4EFA 8A1C                  		jmp DeleteObject
000170AE 4EFA 8A1C                  		jmp DeleteObject
000170B2                            		include	"_incObj\04 Gold Shield.asm"
000170B2                            ; ---------------------------------------------------------------------------
000170B2                            ; Object 04 - Gold shield
000170B2                            ; ---------------------------------------------------------------------------
000170B2                            
000170B2                            GShieldItem:
000170B2 223C 0000 0000             		move.l #Unc_GShield,d1 ; Call for Gold Shield Art
000170B8 343C A820                  		move.w #$A820,d2 ; Load Art from this location (VRAM location*20)
000170BC                            		; In this case, VRAM = $541*20
000170BC 363C 0200                  		move.w #$200,d3
000170C0 4EB9 0000 1476             		jsr (QueueDMATransfer).l
000170C6                            ; ---------------------------------------------------------------------------
000170C6                            GShieldObj_Main:
000170C6 7000                       		moveq #0,d0
000170C8 1028 0024                  		move.b $24(a0),d0
000170CC 323B 0000                  		move.w GShield_Index(pc,d0.w),d1
000170D0 4EFB 1000                  		jmp GShield_Index(pc,d1.w)
000170D4                            ; ===========================================================================
000170D4                            GShield_Index:
000170D4 0000                       		dc.w GShield_Init-GShield_Index
000170D6 0000                       		dc.w GShieldChecks-GShield_Index
000170D8                            ; ===========================================================================
000170D8                            GShield_Init:
000170D8 5428 0024                  		addq.b #2,$24(a0)
000170DC 217C 0000 0000 0004        		move.l #Map_Shield,$4(A0) ; Load Shield Map into place
000170E4 117C 0004 0001             		move.b #4,1(a0)
000170EA 317C 0080 0018             		move.w #$80,$18(a0)
000170F0 117C 0018 0014             		move.b #$18,obActWid(a0)
000170F6 317C 0541 0002             		move.w #$541,2(a0) ; Set VRAM location
000170FC 0838 0007 D002             		btst #7,($FFFFD002).w
00017102 6700                       		beq.s GShieldChecks
00017104 08E8 0007 0002             		bset #7,2(a0)
0001710A                            ; ---------------------------------------------------------------------------
0001710A                            GShieldChecks:
0001710A 4A38 FE2D                  		tst.b ($FFFFFE2D).w ; Test if Sonic has a shield
0001710E 6600                       		bne.s GSonicHasShield ; If so, branch to do nothing
00017110 4A38 F5C9                  		tst.b (v_GShield).w ; Test if Sonic got invisibility
00017114 6700                       		beq.s Gjmp_DeleteObj38 ; If so, delete object temporarily
00017116                            GShieldProperties:
00017116 3178 D008 0008             		move.w ($FFFFD008).w,8(a0) ; Load Main Character X-position
0001711C 3178 D00C 000C             		move.w ($FFFFD00C).w,$C(a0) ; Load Main Character Y-position
00017122 1178 D022 0022             		move.b ($FFFFD022).w,$22(a0) ; Something about Character status
00017128 43F9 0000 0000             		lea (Ani_Shield).l, a1 ; Load Animation Scripts into a1
0001712E 4EB9 0000 CB4E             		jsr AnimateSprite
00017134 4EFA 8956                  		jmp DisplaySprite
00017138                            GSonicHasShield:
00017138 4E75                       		rts
0001713A                            Gjmp_DeleteObj38: ; loc_12648:
0001713A 4EFA 8990                  		jmp DeleteObject
0001713A 4EFA 8990                  		jmp DeleteObject
0001713E                            		include	"_incObj\07 Red Shield.asm"
0001713E                            ; ---------------------------------------------------------------------------
0001713E                            ; Object 07 - red shield
0001713E                            ; ---------------------------------------------------------------------------
0001713E                            
0001713E                            RShieldItem:
0001713E 223C 0000 0000             		move.l #Unc_RedShield,d1 ; Call for Red Shield Art
00017144 343C A820                  		move.w #$A820,d2 ; Load Art from this location (VRAM location*20)
00017148                            		; In this case, VRAM = $541*20
00017148 363C 0200                  		move.w #$200,d3
0001714C 4EB9 0000 1476             		jsr (QueueDMATransfer).l
00017152                            ; ---------------------------------------------------------------------------
00017152                            RShieldObj_Main:
00017152 7000                       		moveq #0,d0
00017154 1028 0024                  		move.b $24(a0),d0
00017158 323B 0000                  		move.w RShield_Index(pc,d0.w),d1
0001715C 4EFB 1000                  		jmp RShield_Index(pc,d1.w)
00017160                            ; ===========================================================================
00017160                            RShield_Index:
00017160 0000                       		dc.w RShield_Init-RShield_Index
00017162 0000                       		dc.w RShieldChecks-RShield_Index
00017164                            ; ===========================================================================
00017164                            RShield_Init:
00017164 5428 0024                  		addq.b #2,$24(a0)
00017168 217C 0000 0000 0004        		move.l #Map_Shield,$4(A0) ; Load Shield Map into place
00017170 117C 0004 0001             		move.b #4,1(a0)
00017176 317C 0080 0018             		move.w #$80,$18(a0)
0001717C 117C 0018 0014             		move.b #$18,obActWid(a0)
00017182 317C 0541 0002             		move.w #$541,2(a0) ; Set VRAM location
00017188 0838 0007 D002             		btst #7,($FFFFD002).w
0001718E 6700                       		beq.s RShieldChecks
00017190 08E8 0007 0002             		bset #7,2(a0)
00017196                            ; ---------------------------------------------------------------------------
00017196                            RShieldChecks:
00017196 4A38 FE2D                  		tst.b ($FFFFFE2D).w ; Test if Sonic has a shield
0001719A 6600                       		bne.s RSonicHasShield ; If so, branch to do nothing
0001719C 4A38 F5C8                  		tst.b (v_rshield).w ; Test if Sonic got invisibility
000171A0 6700                       		beq.s Rjmp_DeleteObj38 ; If so, delete object temporarily
000171A2                            RShieldProperties:
000171A2 3178 D008 0008             		move.w ($FFFFD008).w,8(a0) ; Load Main Character X-position
000171A8 3178 D00C 000C             		move.w ($FFFFD00C).w,$C(a0) ; Load Main Character Y-position
000171AE 1178 D022 0022             		move.b ($FFFFD022).w,$22(a0) ; Something about Character status
000171B4 43F9 0000 0000             		lea (Ani_Shield).l, a1 ; Load Animation Scripts into a1
000171BA 4EB9 0000 CB4E             		jsr AnimateSprite
000171C0 4EFA 88CA                  		jmp DisplaySprite
000171C4                            RSonicHasShield:
000171C4 4E75                       		rts
000171C6                            Rjmp_DeleteObj38: ; loc_12648:
000171C6 4EFA 8904                  		jmp DeleteObject
000171C6 4EFA 8904                  		jmp DeleteObject
000171CA                            		include	"_incObj\38 Shield.asm"
000171CA                            ; ---------------------------------------------------------------------------
000171CA                            ; Object 38 - shield
000171CA                            ; ---------------------------------------------------------------------------
000171CA                            
000171CA                            ShieldItem:
000171CA 223C 0000 0000             		move.l #Unc_Shield,d1 ; Call for Regular Shield Art
000171D0 343C A820                  		move.w #$A820,d2 ; Load Art from this location (VRAM location*20)
000171D4                            		; In this case, VRAM = $541*20
000171D4 363C 0200                  		move.w #$200,d3
000171D8 4EB9 0000 1476             		jsr (QueueDMATransfer).l
000171DE                            ; ---------------------------------------------------------------------------
000171DE                            ShieldObj_Main:
000171DE 7000                       		moveq #0,d0
000171E0 1028 0024                  		move.b $24(a0),d0
000171E4 323B 0000                  		move.w Shield_Index(pc,d0.w),d1
000171E8 4EFB 1000                  		jmp Shield_Index(pc,d1.w)
000171EC                            ; ===========================================================================
000171EC                            Shield_Index:
000171EC 0000                       		dc.w Shield_Init-Shield_Index
000171EE 0000                       		dc.w ShieldChecks-Shield_Index
000171F0                            ; ===========================================================================
000171F0                            Shield_Init:
000171F0 5428 0024                  		addq.b #2,$24(a0)
000171F4 217C 0000 0000 0004        		move.l #Map_Shield,$4(A0) ; Load Shield Map into place
000171FC 117C 0004 0001             		move.b #4,1(a0)
00017202 317C 0080 0018             		move.w #$80,$18(a0)
00017208 117C 0018 0014             		move.b #$18,obActWid(a0)
0001720E 317C 0541 0002             		move.w #$541,2(a0) ; Set VRAM location
00017214 0838 0007 D002             		btst #7,($FFFFD002).w
0001721A 6700                       		beq.s ShieldChecks
0001721C 08E8 0007 0002             		bset #7,2(a0)
00017222                            ; ---------------------------------------------------------------------------
00017222                            ShieldChecks:
00017222 4A38 FE2D                  		tst.b ($FFFFFE2D).w ; Test if Sonic has a shield
00017226 6600                       		bne.s SonicHasShield ; If so, branch to do nothing
00017228 4A38 FE2C                  		tst.b ($FFFFFE2C).w ; Test if Sonic got invisibility
0001722C 6700                       		beq.s jmp_DeleteObj38 ; If so, delete object temporarily
0001722E                            ShieldProperties:
0001722E 3178 D008 0008             		move.w ($FFFFD008).w,8(a0) ; Load Main Character X-position
00017234 3178 D00C 000C             		move.w ($FFFFD00C).w,$C(a0) ; Load Main Character Y-position
0001723A 1178 D022 0022             		move.b ($FFFFD022).w,$22(a0) ; Something about Character status
00017240 43F9 0000 0000             		lea (Ani_Shield).l, a1 ; Load Animation Scripts into a1
00017246 4EB9 0000 CB4E             		jsr AnimateSprite
0001724C 4EFA 883E                  		jmp DisplaySprite
00017250                            SonicHasShield:
00017250 4E75                       		rts
00017252                            jmp_DeleteObj38: ; loc_12648:
00017252 4EFA 8878                  		jmp DeleteObject
00017252 4EFA 8878                  		jmp DeleteObject
00017256                            		include	"_incObj\19 Invincibility Stars.asm"		
00017256                            ; ---------------------------------------------------------------------------
00017256                            ; Object 19 - Invincibility Stars
00017256                            ; ---------------------------------------------------------------------------
00017256                            
00017256                            InvStarsObj:
00017256 223C 0000 0000             		move.l #Unc_Stars,d1
0001725C 343C A820                  		move.w #$A820,d2
00017260 363C 0200                  		move.w #$200,d3
00017264 4EB9 0000 1476             		jsr (QueueDMATransfer).l
0001726A                            Invincibility_Main:
0001726A 7000                       		moveq #0,d0
0001726C 1028 0024                  		move.b $24(a0),d0
00017270                            Invincibility_Init:
00017270 5428 0024                  		addq.b #2,$24(a0)
00017274 217C 0000 0000 0004        		move.l #Map_Shield,4(a0) ; loads mapping
0001727C 117C 0004 0001             		move.b #4,1(a0)
00017282 317C 0080 0018             		move.w #$80,$18(a0)
00017288 117C 0010 0014             		move.b #$10,obActWid(a0)
0001728E 317C 0541 0002             		move.w #$541,2(a0) ; shield specific code
00017294                            ; ===========================================================================
00017294                            
00017294                            Obj19_Stars: ; XREF: Obj38_Index
00017294 4A38 FE2D                  		tst.b ($FFFFFE2D).w ; does Sonic have invincibility?
00017298 6700                       		beq.s Obj19_Delete2 ; if not, branch
0001729A 3038 F7A8                  		move.w ($FFFFF7A8).w,d0
0001729E 1228 001C                  		move.b $1C(a0),d1
000172A2 5301                       		subq.b #1,d1
000172A4 6000                       		bra.s Obj19_StarTrail
000172A6                            ; ===========================================================================
000172A6 E909                       		lsl.b #4,d1
000172A8 5801                       		addq.b #4,d1
000172AA 9001                       		sub.b d1,d0
000172AC 1228 0030                  		move.b $30(a0),d1
000172B0 9001                       		sub.b d1,d0
000172B2 5801                       		addq.b #4,d1
000172B4 0201 000F                  		andi.b #$F,d1
000172B8 1141 0030                  		move.b d1,$30(a0)
000172BC 6000                       		bra.s Obj19_StarTrail2a
000172BE                            ; ===========================================================================
000172BE                            
000172BE                            Obj19_StarTrail: ; XREF: Obj19_Stars
000172BE E709                       		lsl.b #3,d1
000172C0 1401                       		move.b d1,d2
000172C2 D201                       		add.b d1,d1
000172C4 D202                       		add.b d2,d1
000172C6 5801                       		addq.b #4,d1
000172C8 9001                       		sub.b d1,d0
000172CA 1228 0030                  		move.b $30(a0),d1
000172CE 9001                       		sub.b d1,d0
000172D0 5801                       		addq.b #4,d1
000172D2 0C01 0018                  		cmpi.b #$18,d1
000172D6 6500                       		bcs.s Obj19_StarTrail2
000172D8 7200                       		moveq #0,d1
000172DA                            
000172DA                            Obj19_StarTrail2:
000172DA 1141 0030                  		move.b d1,$30(a0)
000172DE                            
000172DE                            Obj19_StarTrail2a:
000172DE 43F8 CB00                  		lea ($FFFFCB00).w,a1
000172E2 43F1 0000                  		lea (a1,d0.w),a1
000172E6 3159 0008                  		move.w (a1)+,8(a0)
000172EA 3159 000C                  		move.w (a1)+,$C(a0)
000172EE 1178 D022 0022             		move.b ($FFFFD022).w,$22(a0)
000172F4 43F9 0000 0000             		lea (Ani_Shield).l,a1
000172FA 4EB9 0000 CB4E             		jsr (AnimateSprite).l
00017300 4EF9 0000 FA8C             		jmp (DisplaySprite).l
00017306                            ; ===========================================================================
00017306                            
00017306                            Obj19_Delete2: ; XREF: Obj19_Stars
00017306 4EF9 0000 FACC             		jmp (DeleteObject).l
00017306 4EF9 0000 FACC             		jmp (DeleteObject).l
0001730C                            		include	"_incObj\4A Special Stage Entry (Unused).asm"
0001730C                            ; ---------------------------------------------------------------------------
0001730C                            ; Object 4A - special stage entry from beta
0001730C                            ; ---------------------------------------------------------------------------
0001730C                            
0001730C                            VanishSonic:
0001730C 7000                       		moveq	#0,d0
0001730E 1028 0024                  		move.b	obRoutine(a0),d0
00017312 323B 0000                  		move.w	Van_Index(pc,d0.w),d1
00017316 4EFB 1000                  		jmp	Van_Index(pc,d1.w)
0001731A                            ; ===========================================================================
0001731A 0000                       Van_Index:	dc.w Van_Main-Van_Index
0001731C 0000                       		dc.w Van_RmvSonic-Van_Index
0001731E 0000                       		dc.w Van_LoadSonic-Van_Index
00017320                            
00017320 =00000030                  van_time:	equ $30		; time for Sonic to disappear
00017320                            ; ===========================================================================
00017320                            
00017320                            Van_Main:	; Routine 0
00017320 4AB8 F680                  		tst.l	(v_plc_buffer).w ; are pattern load cues empty?
00017324 6700                       		beq.s	@isempty	; if yes, branch
00017326 4E75                       		rts	
00017328                            
00017328                            	@isempty:
00017328 5428 0024                  		addq.b	#2,obRoutine(a0)
0001732C 217C 0000 0000 0004        		move.l	#Map_Vanish,obMap(a0)
00017334 117C 0004 0001             		move.b	#4,obRender(a0)
0001733A 317C 0080 0018             		move.w	#$80,obPriority(a0)
00017340 117C 0038 0014             		move.b	#$38,obActWid(a0)
00017346 317C 0541 0002             		move.w	#$541,obGfx(a0)
0001734C 317C 0078 0030             		move.w	#120,van_time(a0) ; set time for Sonic's disappearance to 2 seconds
00017352                            
00017352                            Van_RmvSonic:	; Routine 2
00017352 3178 D008 0008             		move.w	(v_player+obX).w,obX(a0)
00017358 3178 D00C 000C             		move.w	(v_player+obY).w,obY(a0)
0001735E 1178 D022 0022             		move.b	(v_player+obStatus).w,obStatus(a0)
00017364 43F9 0000 0000             		lea	(Ani_Vanish).l,a1
0001736A 4EB9 0000 CB4E             		jsr	(AnimateSprite).l
00017370 0C28 0002 001A             		cmpi.b	#2,obFrame(a0)
00017376 6600                       		bne.s	@display
00017378 4A38 D000                  		tst.b	(v_player).w
0001737C 6700                       		beq.s	@display
0001737E 11FC 0000 D000             		move.b	#0,(v_player).w	; remove Sonic
0001738E                            
0001738E                            	@display:
0001738E 4EF9 0000 FA8C             		jmp	(DisplaySprite).l
00017394                            ; ===========================================================================
00017394                            
00017394                            Van_LoadSonic:	; Routine 4
00017394 5368 0030                  		subq.w	#1,van_time(a0)	; subtract 1 from time
00017398 6600                       		bne.s	@wait		; if time remains, branch
0001739A 11FC 0001 D000             		move.b	#id_SonicPlayer,(v_player).w ; load Sonic object
000173A0 4EF9 0000 FACC             		jmp	(DeleteObject).l
000173A6                            
000173A6                            	@wait:
000173A6 4E75                       		rts	
000173A6 4E75                       		rts	
000173A8                            		include	"_incObj\08 Water Splash.asm"
000173A8                            ; ---------------------------------------------------------------------------
000173A8                            ; Object 08 - water splash (LZ)
000173A8                            ; ---------------------------------------------------------------------------
000173A8                            
000173A8                            Splash:
000173A8 7000                       		moveq	#0,d0
000173AA 1028 0024                  		move.b	obRoutine(a0),d0
000173AE 323B 0000                  		move.w	Spla_Index(pc,d0.w),d1
000173B2 4EFB 1000                  		jmp	Spla_Index(pc,d1.w)
000173B6                            ; ===========================================================================
000173B6 0000                       Spla_Index:	dc.w Spla_Main-Spla_Index
000173B8 0000                       		dc.w Spla_Display-Spla_Index
000173BA 0000                       		dc.w Spla_Delete-Spla_Index
000173BC                            ; ===========================================================================
000173BC                            
000173BC                            Spla_Main:    ; Routine 0
000173BC 5428 0024                          addq.b    #2,obRoutine(a0)
000173C0 217C 0000 0000 0004                move.l    #Map_Splash,obMap(a0)
000173C8 0028 0004 0001                     ori.b    #4,obRender(a0)
000173CE 117C 0001 0018                     move.b    #1,obPriority(a0)
000173D4 117C 0010 0014                     move.b    #$10,obActWid(a0)
000173DA 317C 4259 0002                     move.w    #$4259,obGfx(a0)
000173E0 3178 D008 0008                     move.w    (v_player+obX).w,obX(a0) ; copy x-position from Sonic
000173E6                            
000173E6                            Spla_Display:    ; Routine 2
000173E6                                    ;move.w    (v_waterpos1).w,obY(a0) ; copy y-position from water height
000173E6 3178 FF92 000C                     move.w    (v_watersplashpos).w,obY(a0) ;TIS copy y-position from player
000173EC 43F9 0000 0000                     lea    (Ani_Splash).l,a1
000173F2 4EB9 0000 CB4E                     jsr    (AnimateSprite).l
000173F8 4EF9 0000 FA8C                     jmp    (DisplaySprite).l
000173FE                            ; ===========================================================================
000173FE                            
000173FE                            Spla_Delete:	; Routine 4
000173FE 4EF9 0000 FACC             		jmp	(DeleteObject).l	; delete when animation	is complete
000173FE 4EF9 0000 FACC             		jmp	(DeleteObject).l	; delete when animation	is complete
00017404                            		include	"_anim\Shield and Invincibility.asm"
00017404                            ; ---------------------------------------------------------------------------
00017404                            ; Animation script - shield and invincibility stars
00017404                            ; ---------------------------------------------------------------------------
00017404 0000                       Ani_Shield:	dc.w @shield-Ani_Shield
00017406 0000                       		dc.w @stars1-Ani_Shield
00017408 0000                       		dc.w @stars2-Ani_Shield
0001740A 0000                       		dc.w @stars3-Ani_Shield
0001740C 0000                       		dc.w @stars4-Ani_Shield
0001740E 0101 0002 0003 00FF        @shield:	dc.b 1,	1, 0, 2, 0, 3, 0, afEnd
00017416 0504 0506 07FF             @stars1:	dc.b 5,	4, 5, 6, 7, afEnd
0001741C 0004 0400 0404 0005 0500+  @stars2:	dc.b 0,	4, 4, 0, 4, 4, 0, 5, 5,	0, 5, 5, 0, 6, 6, 0, 6
0001742D 0600 0707 0007 0700 FF     		dc.b 6,	0, 7, 7, 0, 7, 7, 0, afEnd
00017436 0004 0400 0400 0005 0500+  @stars3:	dc.b 0,	4, 4, 0, 4, 0, 0, 5, 5,	0, 5, 0, 0, 6, 6, 0, 6
00017447 0000 0707 0007 0000 FF     		dc.b 0,	0, 7, 7, 0, 7, 0, 0, afEnd
00017450 0004 0000 0400 0005 0000+  @stars4:	dc.b 0,	4, 0, 0, 4, 0, 0, 5, 0,	0, 5, 0, 0, 6, 0, 0, 6
00017461 0000 0700 0007 0000 FF     		dc.b 0,	0, 7, 0, 0, 7, 0, 0, afEnd
0001746A                            		even
0001746A                            		even
0001746A                            Map_Shield:	include	"_maps\Shield and Invincibility.asm"
0001746A                            ; --------------------------------------------------------------------------------
0001746A                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0001746A                            ; --------------------------------------------------------------------------------
0001746A                            
0001746A                            SME_7M_8q:	
0001746A 0000 0000                  		dc.w SME_7M_8q_10-SME_7M_8q, SME_7M_8q_11-SME_7M_8q	
0001746E 0000 0000                  		dc.w SME_7M_8q_26-SME_7M_8q, SME_7M_8q_3B-SME_7M_8q	
00017472 0000 0000                  		dc.w SME_7M_8q_50-SME_7M_8q, SME_7M_8q_65-SME_7M_8q	
00017476 0000 0000                  		dc.w SME_7M_8q_7A-SME_7M_8q, SME_7M_8q_8F-SME_7M_8q	
0001747A 00                         SME_7M_8q_10:	dc.b 0	
0001747B 04                         SME_7M_8q_11:	dc.b 4	
0001747C E80A 0000 E8               		dc.b $E8, $A, 0, 0, $E8	
00017481 E80A 0009 00               		dc.b $E8, $A, 0, 9, 0	
00017486 000A 1000 E8               		dc.b 0, $A, $10, 0, $E8	
0001748B 000A 1009 00               		dc.b 0, $A, $10, 9, 0	
00017490 04                         SME_7M_8q_26:	dc.b 4	
00017491 E80A 0812 E9               		dc.b $E8, $A, 8, $12, $E9	
00017496 E80A 0012 00               		dc.b $E8, $A, 0, $12, 0	
0001749B 000A 1812 E9               		dc.b 0, $A, $18, $12, $E9	
000174A0 000A 1012 00               		dc.b 0, $A, $10, $12, 0	
000174A5 04                         SME_7M_8q_3B:	dc.b 4	
000174A6 E80A 0809 E8               		dc.b $E8, $A, 8, 9, $E8	
000174AB E80A 0800 00               		dc.b $E8, $A, 8, 0, 0	
000174B0 000A 1809 E8               		dc.b 0, $A, $18, 9, $E8	
000174B5 000A 1800 00               		dc.b 0, $A, $18, 0, 0	
000174BA 04                         SME_7M_8q_50:	dc.b 4	
000174BB E80A 0000 E8               		dc.b $E8, $A, 0, 0, $E8	
000174C0 E80A 0009 00               		dc.b $E8, $A, 0, 9, 0	
000174C5 000A 1809 E8               		dc.b 0, $A, $18, 9, $E8	
000174CA 000A 1800 00               		dc.b 0, $A, $18, 0, 0	
000174CF 04                         SME_7M_8q_65:	dc.b 4	
000174D0 E80A 0809 E8               		dc.b $E8, $A, 8, 9, $E8	
000174D5 E80A 0800 00               		dc.b $E8, $A, 8, 0, 0	
000174DA 000A 1000 E8               		dc.b 0, $A, $10, 0, $E8	
000174DF 000A 1009 00               		dc.b 0, $A, $10, 9, 0	
000174E4 04                         SME_7M_8q_7A:	dc.b 4	
000174E5 E80A 0012 E8               		dc.b $E8, $A, 0, $12, $E8	
000174EA E80A 001B 00               		dc.b $E8, $A, 0, $1B, 0	
000174EF 000A 181B E8               		dc.b 0, $A, $18, $1B, $E8	
000174F4 000A 1812 00               		dc.b 0, $A, $18, $12, 0	
000174F9 04                         SME_7M_8q_8F:	dc.b 4	
000174FA E80A 081B E8               		dc.b $E8, $A, 8, $1B, $E8	
000174FF E80A 0812 00               		dc.b $E8, $A, 8, $12, 0	
00017504 000A 1012 E8               		dc.b 0, $A, $10, $12, $E8	
00017509 000A 101B 00               		dc.b 0, $A, $10, $1B, 0	
0001750E                            		even
0001750E                            		even
0001750E                            Map_Shield2:	include	"_maps\Shield 2.asm"
0001750E                            ; --------------------------------------------------------------------------------
0001750E                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0001750E                            ; --------------------------------------------------------------------------------
0001750E                            
0001750E                            SME_X5P7B:	
0001750E 0000 0000                  		dc.w SME_X5P7B_10-SME_X5P7B, SME_X5P7B_11-SME_X5P7B	
00017512 0000 0000                  		dc.w SME_X5P7B_26-SME_X5P7B, SME_X5P7B_3B-SME_X5P7B	
00017516 0000 0000                  		dc.w SME_X5P7B_50-SME_X5P7B, SME_X5P7B_65-SME_X5P7B	
0001751A 0000 0000                  		dc.w SME_X5P7B_7A-SME_X5P7B, SME_X5P7B_8F-SME_X5P7B	
0001751E 00                         SME_X5P7B_10:	dc.b 0	
0001751F 04                         SME_X5P7B_11:	dc.b 4	
00017520 E80A 2000 E8               		dc.b $E8, $A, $20, 0, $E8	
00017525 E80A 2009 00               		dc.b $E8, $A, $20, 9, 0	
0001752A 000A 3000 E8               		dc.b 0, $A, $30, 0, $E8	
0001752F 000A 3009 00               		dc.b 0, $A, $30, 9, 0	
00017534 04                         SME_X5P7B_26:	dc.b 4	
00017535 E80A 2812 E9               		dc.b $E8, $A, $28, $12, $E9	
0001753A E80A 2012 00               		dc.b $E8, $A, $20, $12, 0	
0001753F 000A 3812 E9               		dc.b 0, $A, $38, $12, $E9	
00017544 000A 3012 00               		dc.b 0, $A, $30, $12, 0	
00017549 04                         SME_X5P7B_3B:	dc.b 4	
0001754A E80A 2809 E8               		dc.b $E8, $A, $28, 9, $E8	
0001754F E80A 2800 00               		dc.b $E8, $A, $28, 0, 0	
00017554 000A 3809 E8               		dc.b 0, $A, $38, 9, $E8	
00017559 000A 3800 00               		dc.b 0, $A, $38, 0, 0	
0001755E 04                         SME_X5P7B_50:	dc.b 4	
0001755F E80A 2000 E8               		dc.b $E8, $A, $20, 0, $E8	
00017564 E80A 2009 00               		dc.b $E8, $A, $20, 9, 0	
00017569 000A 3809 E8               		dc.b 0, $A, $38, 9, $E8	
0001756E 000A 3800 00               		dc.b 0, $A, $38, 0, 0	
00017573 04                         SME_X5P7B_65:	dc.b 4	
00017574 E80A 2809 E8               		dc.b $E8, $A, $28, 9, $E8	
00017579 E80A 2800 00               		dc.b $E8, $A, $28, 0, 0	
0001757E 000A 3000 E8               		dc.b 0, $A, $30, 0, $E8	
00017583 000A 3009 00               		dc.b 0, $A, $30, 9, 0	
00017588 04                         SME_X5P7B_7A:	dc.b 4	
00017589 E80A 2012 E8               		dc.b $E8, $A, $20, $12, $E8	
0001758E E80A 201B 00               		dc.b $E8, $A, $20, $1B, 0	
00017593 000A 381B E8               		dc.b 0, $A, $38, $1B, $E8	
00017598 000A 3812 00               		dc.b 0, $A, $38, $12, 0	
0001759D 04                         SME_X5P7B_8F:	dc.b 4	
0001759E E80A 281B E8               		dc.b $E8, $A, $28, $1B, $E8	
000175A3 E80A 2812 00               		dc.b $E8, $A, $28, $12, 0	
000175A8 000A 3012 E8               		dc.b 0, $A, $30, $12, $E8	
000175AD 000A 301B 00               		dc.b 0, $A, $30, $1B, 0	
000175B2                            		even
000175B2                            		even
000175B2                            
000175B2                            Map_Shield3:	include	"_maps\Shield 3.asm"
000175B2                            ; --------------------------------------------------------------------------------
000175B2                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
000175B2                            ; --------------------------------------------------------------------------------
000175B2                            
000175B2                            SME__wWzO:	
000175B2 0000 0000                  		dc.w SME__wWzO_10-SME__wWzO, SME__wWzO_11-SME__wWzO	
000175B6 0000 0000                  		dc.w SME__wWzO_26-SME__wWzO, SME__wWzO_3B-SME__wWzO	
000175BA 0000 0000                  		dc.w SME__wWzO_50-SME__wWzO, SME__wWzO_65-SME__wWzO	
000175BE 0000 0000                  		dc.w SME__wWzO_7A-SME__wWzO, SME__wWzO_8F-SME__wWzO	
000175C2 00                         SME__wWzO_10:	dc.b 0	
000175C3 04                         SME__wWzO_11:	dc.b 4	
000175C4 E80A 2000 E8               		dc.b $E8, $A, $20, 0, $E8	
000175C9 E80A 2009 00               		dc.b $E8, $A, $20, 9, 0	
000175CE 000A 3000 E8               		dc.b 0, $A, $30, 0, $E8	
000175D3 000A 3009 00               		dc.b 0, $A, $30, 9, 0	
000175D8 04                         SME__wWzO_26:	dc.b 4	
000175D9 E80A 2812 E9               		dc.b $E8, $A, $28, $12, $E9	
000175DE E80A 2012 00               		dc.b $E8, $A, $20, $12, 0	
000175E3 000A 3812 E9               		dc.b 0, $A, $38, $12, $E9	
000175E8 000A 3012 00               		dc.b 0, $A, $30, $12, 0	
000175ED 04                         SME__wWzO_3B:	dc.b 4	
000175EE E80A 2809 E8               		dc.b $E8, $A, $28, 9, $E8	
000175F3 E80A 2800 00               		dc.b $E8, $A, $28, 0, 0	
000175F8 000A 3809 E8               		dc.b 0, $A, $38, 9, $E8	
000175FD 000A 3800 00               		dc.b 0, $A, $38, 0, 0	
00017602 04                         SME__wWzO_50:	dc.b 4	
00017603 E80A 2000 E8               		dc.b $E8, $A, $20, 0, $E8	
00017608 E80A 2009 00               		dc.b $E8, $A, $20, 9, 0	
0001760D 000A 3809 E8               		dc.b 0, $A, $38, 9, $E8	
00017612 000A 3800 00               		dc.b 0, $A, $38, 0, 0	
00017617 04                         SME__wWzO_65:	dc.b 4	
00017618 E80A 2809 E8               		dc.b $E8, $A, $28, 9, $E8	
0001761D E80A 2800 00               		dc.b $E8, $A, $28, 0, 0	
00017622 000A 3000 E8               		dc.b 0, $A, $30, 0, $E8	
00017627 000A 3009 00               		dc.b 0, $A, $30, 9, 0	
0001762C 04                         SME__wWzO_7A:	dc.b 4	
0001762D E80A 2012 E8               		dc.b $E8, $A, $20, $12, $E8	
00017632 E80A 201B 00               		dc.b $E8, $A, $20, $1B, 0	
00017637 000A 381B E8               		dc.b 0, $A, $38, $1B, $E8	
0001763C 000A 3812 00               		dc.b 0, $A, $38, $12, 0	
00017641 04                         SME__wWzO_8F:	dc.b 4	
00017642 E80A 281B E8               		dc.b $E8, $A, $28, $1B, $E8	
00017647 E80A 2812 00               		dc.b $E8, $A, $28, $12, 0	
0001764C 000A 3012 E8               		dc.b 0, $A, $30, $12, $E8	
00017651 000A 301B 00               		dc.b 0, $A, $30, $1B, 0	
00017656                            		even
00017656                            		even
00017656                            		include	"_anim\Special Stage Entry (Unused).asm"
00017656                            ; ---------------------------------------------------------------------------
00017656                            ; Animation script - special stage entry effect from beta
00017656                            ; ---------------------------------------------------------------------------
00017656 0000                       Ani_Vanish:	dc.w @vanish-Ani_Vanish
00017658 0500 0100 0100 0701 0702+  @vanish:	dc.b 5,	0, 1, 0, 1, 0, 7, 1, 7,	2, 7, 3, 7, 4, 7, 5, 7, 6, 7, afRoutine
0001766C                            		even
0001766C                            		even
0001766C                            Map_Vanish:	include	"_maps\Special Stage Entry (Unused).asm"
0001766C                            ; ---------------------------------------------------------------------------
0001766C                            ; Sprite mappings - special stage entry	from beta
0001766C                            ; ---------------------------------------------------------------------------
0001766C                            Map_Vanish_internal:
0001766C 0000                       		dc.w @flash1-Map_Vanish_internal
0001766E 0000                       		dc.w @flash2-Map_Vanish_internal
00017670 0000                       		dc.w @flash3-Map_Vanish_internal
00017672 0000                       		dc.w @sparkle1-Map_Vanish_internal
00017674 0000                       		dc.w @sparkle2-Map_Vanish_internal
00017676 0000                       		dc.w @sparkle3-Map_Vanish_internal
00017678 0000                       		dc.w @sparkle4-Map_Vanish_internal
0001767A 0000                       		dc.w @blank-Map_Vanish_internal
0001767C 03                         @flash1:	dc.b 3
0001767D F800 0000 08               		dc.b $F8, 0, 0,	0, 8
00017682 0004 0001 00               		dc.b 0,	4, 0, 1, 0
00017687 0800 1000 08               		dc.b 8,	0, $10,	0, 8
0001768C 03                         @flash2:	dc.b 3
0001768D F00D 0003 F0               		dc.b $F0, $D, 0, 3, $F0
00017692 000C 000B F0               		dc.b 0,	$C, 0, $B, $F0
00017697 080D 1003 F0               		dc.b 8,	$D, $10, 3, $F0
0001769C 05                         @flash3:	dc.b 5
0001769D E40E 000F F4               		dc.b $E4, $E, 0, $F, $F4
000176A2 EC02 001B EC               		dc.b $EC, 2, 0,	$1B, $EC
000176A7 FC0C 001E F4               		dc.b $FC, $C, 0, $1E, $F4
000176AC 040E 100F F4               		dc.b 4,	$E, $10, $F, $F4
000176B1 0401 101B EC               		dc.b 4,	1, $10,	$1B, $EC
000176B6 09                         @sparkle1:	dc.b 9
000176B7 F008 0022 F8               		dc.b $F0, 8, 0,	$22, $F8
000176BC F80E 0025 F0               		dc.b $F8, $E, 0, $25, $F0
000176C1 1008 0031 F0               		dc.b $10, 8, 0,	$31, $F0
000176C6 0005 0034 10               		dc.b 0,	5, 0, $34, $10
000176CB F800 0825 10               		dc.b $F8, 0, 8,	$25, $10
000176D0 F000 1836 18               		dc.b $F0, 0, $18, $36, $18
000176D5 F800 1825 20               		dc.b $F8, 0, $18, $25, $20
000176DA 0000 0825 28               		dc.b 0,	0, 8, $25, $28
000176DF F800 0025 30               		dc.b $F8, 0, 0,	$25, $30
000176E4 12                         @sparkle2:	dc.b $12
000176E5 0000 1825 F0               		dc.b 0,	0, $18,	$25, $F0
000176EA F804 0038 F8               		dc.b $F8, 4, 0,	$38, $F8
000176EF F000 0026 08               		dc.b $F0, 0, 0,	$26, 8
000176F4 0000 0025 00               		dc.b 0,	0, 0, $25, 0
000176F9 0800 1825 F8               		dc.b 8,	0, $18,	$25, $F8
000176FE 1000 1026 00               		dc.b $10, 0, $10, $26, 0
00017703 0800 1038 08               		dc.b 8,	0, $10,	$38, 8
00017708 F800 0029 10               		dc.b $F8, 0, 0,	$29, $10
0001770D 0000 0026 10               		dc.b 0,	0, 0, $26, $10
00017712 0000 002D 18               		dc.b 0,	0, 0, $2D, $18
00017717 0800 0826 18               		dc.b 8,	0, 8, $26, $18
0001771C 0800 0029 20               		dc.b 8,	0, 0, $29, $20
00017721 F800 0026 20               		dc.b $F8, 0, 0,	$26, $20
00017726 F800 002D 28               		dc.b $F8, 0, 0,	$2D, $28
0001772B 0000 003A 28               		dc.b 0,	0, 0, $3A, $28
00017730 F800 1826 30               		dc.b $F8, 0, $18, $26, $30
00017735 0000 1025 38               		dc.b 0,	0, $10,	$25, $38
0001773A F800 1025 40               		dc.b $F8, 0, $10, $25, $40
0001773F 11                         @sparkle3:	dc.b $11
00017740 F800 0825 00               		dc.b $F8, 0, 8,	$25, 0
00017745 F000 0038 10               		dc.b $F0, 0, 0,	$38, $10
0001774A 1000 0825 00               		dc.b $10, 0, 8,	$25, 0
0001774F 0000 1825 10               		dc.b 0,	0, $18,	$25, $10
00017754 0800 1025 18               		dc.b 8,	0, $10,	$25, $18
00017759 F800 1825 20               		dc.b $F8, 0, $18, $25, $20
0001775E 0000 1026 28               		dc.b 0,	0, $10,	$26, $28
00017763 F800 1025 30               		dc.b $F8, 0, $10, $25, $30
00017768 0000 0025 30               		dc.b 0,	0, 0, $25, $30
0001776D 0800 0825 30               		dc.b 8,	0, 8, $25, $30
00017772 0000 0826 38               		dc.b 0,	0, 8, $26, $38
00017777 0800 0029 38               		dc.b 8,	0, 0, $29, $38
0001777C F800 0826 40               		dc.b $F8, 0, 8,	$26, $40
00017781 0000 002D 40               		dc.b 0,	0, 0, $2D, $40
00017786 F800 0825 48               		dc.b $F8, 0, 8,	$25, $48
0001778B 0000 0025 48               		dc.b 0,	0, 0, $25, $48
00017790 0000 1025 50               		dc.b 0,	0, $10,	$25, $50
00017795 09                         @sparkle4:	dc.b 9
00017796 FC00 0826 30               		dc.b $FC, 0, 8,	$26, $30
0001779B 0400 0825 28               		dc.b 4,	0, 8, $25, $28
000177A0 0400 1027 38               		dc.b 4,	0, $10,	$27, $38
000177A5 0400 0826 40               		dc.b 4,	0, 8, $26, $40
000177AA FC00 1025 40               		dc.b $FC, 0, $10, $25, $40
000177AF FC00 1026 48               		dc.b $FC, 0, $10, $26, $48
000177B4 0C00 0827 48               		dc.b $C, 0, 8, $27, $48
000177B9 0400 1826 50               		dc.b 4,	0, $18,	$26, $50
000177BE 04                         		dc.b 4
000177BF 0008 2758 00               @blank:		dc.b 0,	8, $27,	$58, 0
000177C4                            		even
000177C4                            		even
000177C4                            		include	"_anim\Water Splash.asm"
000177C4                            ; ---------------------------------------------------------------------------
000177C4                            ; Animation script - water splash (LZ)
000177C4                            ; ---------------------------------------------------------------------------
000177C4 0000                       Ani_Splash:	dc.w @splash-Ani_Splash
000177C6 0400 0102 FC               @splash:	dc.b 4,	0, 1, 2, afRoutine
000177CC 00                         		even
000177CC 00                         		even
000177CC                            Map_Splash:	include	"_maps\Water Splash.asm"
000177CC                            ; ---------------------------------------------------------------------------
000177CC                            ; Sprite mappings - water splash (LZ)
000177CC                            ; ---------------------------------------------------------------------------
000177CC                            Map_Splash_internal:
000177CC 0000                       		dc.w @splash1-Map_Splash_internal
000177CE 0000                       		dc.w @splash2-Map_Splash_internal
000177D0 0000                       		dc.w @splash3-Map_Splash_internal
000177D2 02                         @splash1:	dc.b 2
000177D3 F204 006D F8               		dc.b $F2, 4, 0,	$6D, $F8
000177D8 FA0C 006F F0               		dc.b $FA, $C, 0, $6F, $F0
000177DD 02                         @splash2:	dc.b 2
000177DE E200 0073 F8               		dc.b $E2, 0, 0,	$73, $F8
000177E3 EA0E 0074 F0               		dc.b $EA, $E, 0, $74, $F0
000177E8 01                         @splash3:	dc.b 1
000177E9 E20F 0080 F0               		dc.b $E2, $F, 0, $80, $F0
000177EE                            		even
000177EE                            		even
000177EE                            
000177EE                            		include	"_incObj\Sonic AnglePos.asm"
000177EE                            ; ---------------------------------------------------------------------------
000177EE                            ; Subroutine to	change Sonic's angle & position as he walks along the floor
000177EE                            ; ---------------------------------------------------------------------------
000177EE                            
000177EE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000177EE                            
000177EE                            
000177EE                            Sonic_AnglePos:
000177EE 0828 0003 0022             		btst	#3,obStatus(a0)
000177F4 6700                       		beq.s	loc_14602
000177F6 7000                       		moveq	#0,d0
000177F8 11C0 F768                  		move.b	d0,($FFFFF768).w
000177FC 11C0 F76A                  		move.b	d0,($FFFFF76A).w
00017800 4E75                       		rts	
00017802                            ; ===========================================================================
00017802                            
00017802                            loc_14602:
00017802 7003                       		moveq	#3,d0
00017804 11C0 F768                  		move.b	d0,($FFFFF768).w
00017808 11C0 F76A                  		move.b	d0,($FFFFF76A).w
0001780C 1028 0026                  		move.b	obAngle(a0),d0
00017810 0600 0020                  		addi.b	#$20,d0
00017814 6A00                       		bpl.s	loc_14624
00017816 1028 0026                  		move.b	obAngle(a0),d0
0001781A 6A00                       		bpl.s	loc_1461E
0001781C 5300                       		subq.b	#1,d0
0001781E                            
0001781E                            loc_1461E:
0001781E 0600 0020                  		addi.b	#$20,d0
00017822 6000                       		bra.s	loc_14630
00017824                            ; ===========================================================================
00017824                            
00017824                            loc_14624:
00017824 1028 0026                  		move.b	obAngle(a0),d0
00017828 6A00                       		bpl.s	loc_1462C
0001782A 5200                       		addq.b	#1,d0
0001782C                            
0001782C                            loc_1462C:
0001782C 0600 001F                  		addi.b	#$1F,d0
00017830                            
00017830                            loc_14630:
00017830 0200 00C0                  		andi.b	#$C0,d0
00017834 0C00 0040                  		cmpi.b	#$40,d0
00017838 6700 0000                  		beq.w	Sonic_WalkVertL
0001783C 0C00 0080                  		cmpi.b	#$80,d0
00017840 6700 0000                  		beq.w	Sonic_WalkCeiling
00017844 0C00 00C0                  		cmpi.b	#$C0,d0
00017848 6700 0000                  		beq.w	Sonic_WalkVertR
0001784C 3428 000C                  		move.w	obY(a0),d2
00017850 3628 0008                  		move.w	obX(a0),d3
00017854 7000                       		moveq	#0,d0
00017856 1028 0016                  		move.b	obHeight(a0),d0
0001785A 4880                       		ext.w	d0
0001785C D440                       		add.w	d0,d2
0001785E 1028 0017                  		move.b	obWidth(a0),d0
00017862 4880                       		ext.w	d0
00017864 D640                       		add.w	d0,d3
00017866 49F8 F768                  		lea	($FFFFF768).w,a4
0001786A 367C 0010                  		movea.w	#$10,a3
0001786E 3C3C 0000                  		move.w	#0,d6
00017872 7A0D                       		moveq	#$D,d5
00017874 6100 0000                  		bsr.w	FindFloor
00017878 3F01                       		move.w	d1,-(sp)
0001787A 3428 000C                  		move.w	obY(a0),d2
0001787E 3628 0008                  		move.w	obX(a0),d3
00017882 7000                       		moveq	#0,d0
00017884 1028 0016                  		move.b	obHeight(a0),d0
00017888 4880                       		ext.w	d0
0001788A D440                       		add.w	d0,d2
0001788C 1028 0017                  		move.b	obWidth(a0),d0
00017890 4880                       		ext.w	d0
00017892 4440                       		neg.w	d0
00017894 D640                       		add.w	d0,d3
00017896 49F8 F76A                  		lea	($FFFFF76A).w,a4
0001789A 367C 0010                  		movea.w	#$10,a3
0001789E 3C3C 0000                  		move.w	#0,d6
000178A2 7A0D                       		moveq	#$D,d5
000178A4 6100 0000                  		bsr.w	FindFloor
000178A8 301F                       		move.w	(sp)+,d0
000178AA 6100 0000                  		bsr.w	Sonic_Angle
000178AE 4A41                       		tst.w	d1
000178B0 6700                       		beq.s	locret_146BE
000178B2 6A00                       		bpl.s	loc_146C0
000178B4 0C41 FFF2                  		cmpi.w	#-$E,d1
000178B8 6D00                       		blt.s	locret_146E6
000178BA D368 000C                  		add.w	d1,obY(a0)
000178BE                            
000178BE                            locret_146BE:
000178BE 4E75                       		rts	
000178C0                            ; ===========================================================================
000178C0                            
000178C0                            loc_146C0:
000178C0 0C41 000E                  		cmpi.w	#$E,d1
000178C4 6E00                       		bgt.s	loc_146CC
000178C6                            
000178C6                            loc_146C6:
000178C6 D368 000C                  		add.w	d1,obY(a0)
000178CA 4E75                       		rts	
000178CC                            ; ===========================================================================
000178CC                            
000178CC                            loc_146CC:
000178CC 4A28 0038                  		tst.b	$38(a0)
000178D0 66F4                       		bne.s	loc_146C6
000178D2 08E8 0001 0022             		bset	#1,obStatus(a0)
000178D8 08A8 0005 0022             		bclr	#5,obStatus(a0)
000178DE 117C 0001 001D             		move.b	#1,obNextAni(a0)
000178E4 4E75                       		rts	
000178E6                            ; ===========================================================================
000178E6                            
000178E6                            locret_146E6:
000178E6 4E75                       		rts	
000178E8                            ; End of function Sonic_AnglePos
000178E8                            
000178E8                            ; ===========================================================================
000178E8 2428 0008                  		move.l	obX(a0),d2
000178EC 3028 0010                  		move.w	obVelX(a0),d0
000178F0 48C0                       		ext.l	d0
000178F2 E180                       		asl.l	#8,d0
000178F4 9480                       		sub.l	d0,d2
000178F6 2142 0008                  		move.l	d2,obX(a0)
000178FA 303C 0038                  		move.w	#$38,d0
000178FE 48C0                       		ext.l	d0
00017900 E180                       		asl.l	#8,d0
00017902 9680                       		sub.l	d0,d3
00017904 2143 000C                  		move.l	d3,obY(a0)
00017908 4E75                       		rts	
0001790A                            ; ===========================================================================
0001790A                            
0001790A                            locret_1470A:
0001790A 4E75                       		rts	
0001790C                            ; ===========================================================================
0001790C 2628 000C                  		move.l	obY(a0),d3
00017910 3028 0012                  		move.w	obVelY(a0),d0
00017914 0440 0038                  		subi.w	#$38,d0
00017918 3140 0012                  		move.w	d0,obVelY(a0)
0001791C 48C0                       		ext.l	d0
0001791E E180                       		asl.l	#8,d0
00017920 9680                       		sub.l	d0,d3
00017922 2143 000C                  		move.l	d3,obY(a0)
00017926 4E75                       		rts	
00017928 4E75                       		rts	
0001792A                            ; ===========================================================================
0001792A 2428 0008                  		move.l	obX(a0),d2
0001792E 2628 000C                  		move.l	obY(a0),d3
00017932 3028 0010                  		move.w	obVelX(a0),d0
00017936 48C0                       		ext.l	d0
00017938 E180                       		asl.l	#8,d0
0001793A 9480                       		sub.l	d0,d2
0001793C 3028 0012                  		move.w	obVelY(a0),d0
00017940 48C0                       		ext.l	d0
00017942 E180                       		asl.l	#8,d0
00017944 9680                       		sub.l	d0,d3
00017946 2142 0008                  		move.l	d2,obX(a0)
0001794A 2143 000C                  		move.l	d3,obY(a0)
0001794E 4E75                       		rts	
00017950                            
00017950                            ; ---------------------------------------------------------------------------
00017950                            ; Subroutine to	change Sonic's angle as he walks along the floor
00017950                            ; ---------------------------------------------------------------------------
00017950                            
00017950                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017950                            
00017950                            
00017950                            Sonic_Angle:
00017950 1438 F76A                  		move.b	($FFFFF76A).w,d2
00017954 B240                       		cmp.w	d0,d1
00017956 6F00                       		ble.s	loc_1475E
00017958 1438 F768                  		move.b	($FFFFF768).w,d2
0001795C 3200                       		move.w	d0,d1
0001795E                            
0001795E                            loc_1475E:
0001795E 0802 0000                  		btst	#0,d2
00017962 6600                       		bne.s	loc_1476A
00017964 1142 0026                  		move.b	d2,obAngle(a0)
00017968 4E75                       		rts	
0001796A                            ; ===========================================================================
0001796A                            
0001796A                            loc_1476A:
0001796A 1428 0026                  		move.b	obAngle(a0),d2
0001796E 0602 0020                  		addi.b	#$20,d2
00017972 0202 00C0                  		andi.b	#$C0,d2
00017976 1142 0026                  		move.b	d2,obAngle(a0)
0001797A 4E75                       		rts	
0001797C                            ; End of function Sonic_Angle
0001797C                            
0001797C                            ; ---------------------------------------------------------------------------
0001797C                            ; Subroutine allowing Sonic to walk up a vertical slope/wall to	his right
0001797C                            ; ---------------------------------------------------------------------------
0001797C                            
0001797C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001797C                            
0001797C                            
0001797C                            Sonic_WalkVertR:
0001797C 3428 000C                  		move.w	obY(a0),d2
00017980 3628 0008                  		move.w	obX(a0),d3
00017984 7000                       		moveq	#0,d0
00017986 1028 0017                  		move.b	obWidth(a0),d0
0001798A 4880                       		ext.w	d0
0001798C 4440                       		neg.w	d0
0001798E D440                       		add.w	d0,d2
00017990 1028 0016                  		move.b	obHeight(a0),d0
00017994 4880                       		ext.w	d0
00017996 D640                       		add.w	d0,d3
00017998 49F8 F768                  		lea	($FFFFF768).w,a4
0001799C 367C 0010                  		movea.w	#$10,a3
000179A0 3C3C 0000                  		move.w	#0,d6
000179A4 7A0D                       		moveq	#$D,d5
000179A6 6100 0000                  		bsr.w	FindWall
000179AA 3F01                       		move.w	d1,-(sp)
000179AC 3428 000C                  		move.w	obY(a0),d2
000179B0 3628 0008                  		move.w	obX(a0),d3
000179B4 7000                       		moveq	#0,d0
000179B6 1028 0017                  		move.b	obWidth(a0),d0
000179BA 4880                       		ext.w	d0
000179BC D440                       		add.w	d0,d2
000179BE 1028 0016                  		move.b	obHeight(a0),d0
000179C2 4880                       		ext.w	d0
000179C4 D640                       		add.w	d0,d3
000179C6 49F8 F76A                  		lea	($FFFFF76A).w,a4
000179CA 367C 0010                  		movea.w	#$10,a3
000179CE 3C3C 0000                  		move.w	#0,d6
000179D2 7A0D                       		moveq	#$D,d5
000179D4 6100 0000                  		bsr.w	FindWall
000179D8 301F                       		move.w	(sp)+,d0
000179DA 6100 FF74                  		bsr.w	Sonic_Angle
000179DE 4A41                       		tst.w	d1
000179E0 6700                       		beq.s	locret_147F0
000179E2 6A00                       		bpl.s	loc_147F2
000179E4 0C41 FFF2                  		cmpi.w	#-$E,d1
000179E8 6D00 FF20                  		blt.w	locret_1470A
000179EC D368 0008                  		add.w	d1,obX(a0)
000179F0                            
000179F0                            locret_147F0:
000179F0 4E75                       		rts	
000179F2                            ; ===========================================================================
000179F2                            
000179F2                            loc_147F2:
000179F2 0C41 000E                  		cmpi.w	#$E,d1
000179F6 6E00                       		bgt.s	loc_147FE
000179F8                            
000179F8                            loc_147F8:
000179F8 D368 0008                  		add.w	d1,obX(a0)
000179FC 4E75                       		rts	
000179FE                            ; ===========================================================================
000179FE                            
000179FE                            loc_147FE:
000179FE 4A28 0038                  		tst.b	$38(a0)
00017A02 66F4                       		bne.s	loc_147F8
00017A04 08E8 0001 0022             		bset	#1,obStatus(a0)
00017A0A 08A8 0005 0022             		bclr	#5,obStatus(a0)
00017A10 117C 0001 001D             		move.b	#1,obNextAni(a0)
00017A16 4E75                       		rts	
00017A18                            ; End of function Sonic_WalkVertR
00017A18                            
00017A18                            ; ---------------------------------------------------------------------------
00017A18                            ; Subroutine allowing Sonic to walk upside-down
00017A18                            ; ---------------------------------------------------------------------------
00017A18                            
00017A18                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017A18                            
00017A18                            
00017A18                            Sonic_WalkCeiling:
00017A18 3428 000C                  		move.w	obY(a0),d2
00017A1C 3628 0008                  		move.w	obX(a0),d3
00017A20 7000                       		moveq	#0,d0
00017A22 1028 0016                  		move.b	obHeight(a0),d0
00017A26 4880                       		ext.w	d0
00017A28 9440                       		sub.w	d0,d2
00017A2A 0A42 000F                  		eori.w	#$F,d2
00017A2E 1028 0017                  		move.b	obWidth(a0),d0
00017A32 4880                       		ext.w	d0
00017A34 D640                       		add.w	d0,d3
00017A36 49F8 F768                  		lea	($FFFFF768).w,a4
00017A3A 367C FFF0                  		movea.w	#-$10,a3
00017A3E 3C3C 1000                  		move.w	#$1000,d6
00017A42 7A0D                       		moveq	#$D,d5
00017A44 6100 0000                  		bsr.w	FindFloor
00017A48 3F01                       		move.w	d1,-(sp)
00017A4A 3428 000C                  		move.w	obY(a0),d2
00017A4E 3628 0008                  		move.w	obX(a0),d3
00017A52 7000                       		moveq	#0,d0
00017A54 1028 0016                  		move.b	obHeight(a0),d0
00017A58 4880                       		ext.w	d0
00017A5A 9440                       		sub.w	d0,d2
00017A5C 0A42 000F                  		eori.w	#$F,d2
00017A60 1028 0017                  		move.b	obWidth(a0),d0
00017A64 4880                       		ext.w	d0
00017A66 9640                       		sub.w	d0,d3
00017A68 49F8 F76A                  		lea	($FFFFF76A).w,a4
00017A6C 367C FFF0                  		movea.w	#-$10,a3
00017A70 3C3C 1000                  		move.w	#$1000,d6
00017A74 7A0D                       		moveq	#$D,d5
00017A76 6100 0000                  		bsr.w	FindFloor
00017A7A 301F                       		move.w	(sp)+,d0
00017A7C 6100 FED2                  		bsr.w	Sonic_Angle
00017A80 4A41                       		tst.w	d1
00017A82 6700                       		beq.s	locret_14892
00017A84 6A00                       		bpl.s	loc_14894
00017A86 0C41 FFF2                  		cmpi.w	#-$E,d1
00017A8A 6D00 FE5A                  		blt.w	locret_146E6
00017A8E 9368 000C                  		sub.w	d1,obY(a0)
00017A92                            
00017A92                            locret_14892:
00017A92 4E75                       		rts	
00017A94                            ; ===========================================================================
00017A94                            
00017A94                            loc_14894:
00017A94 0C41 000E                  		cmpi.w	#$E,d1
00017A98 6E00                       		bgt.s	loc_148A0
00017A9A                            
00017A9A                            loc_1489A:
00017A9A 9368 000C                  		sub.w	d1,obY(a0)
00017A9E 4E75                       		rts	
00017AA0                            ; ===========================================================================
00017AA0                            
00017AA0                            loc_148A0:
00017AA0 4A28 0038                  		tst.b	$38(a0)
00017AA4 66F4                       		bne.s	loc_1489A
00017AA6 08E8 0001 0022             		bset	#1,obStatus(a0)
00017AAC 08A8 0005 0022             		bclr	#5,obStatus(a0)
00017AB2 117C 0001 001D             		move.b	#1,obNextAni(a0)
00017AB8 4E75                       		rts	
00017ABA                            ; End of function Sonic_WalkCeiling
00017ABA                            
00017ABA                            ; ---------------------------------------------------------------------------
00017ABA                            ; Subroutine allowing Sonic to walk up a vertical slope/wall to	his left
00017ABA                            ; ---------------------------------------------------------------------------
00017ABA                            
00017ABA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017ABA                            
00017ABA                            
00017ABA                            Sonic_WalkVertL:
00017ABA 3428 000C                  		move.w	obY(a0),d2
00017ABE 3628 0008                  		move.w	obX(a0),d3
00017AC2 7000                       		moveq	#0,d0
00017AC4 1028 0017                  		move.b	obWidth(a0),d0
00017AC8 4880                       		ext.w	d0
00017ACA 9440                       		sub.w	d0,d2
00017ACC 1028 0016                  		move.b	obHeight(a0),d0
00017AD0 4880                       		ext.w	d0
00017AD2 9640                       		sub.w	d0,d3
00017AD4 0A43 000F                  		eori.w	#$F,d3
00017AD8 49F8 F768                  		lea	($FFFFF768).w,a4
00017ADC 367C FFF0                  		movea.w	#-$10,a3
00017AE0 3C3C 0800                  		move.w	#$800,d6
00017AE4 7A0D                       		moveq	#$D,d5
00017AE6 6100 0000                  		bsr.w	FindWall
00017AEA 3F01                       		move.w	d1,-(sp)
00017AEC 3428 000C                  		move.w	obY(a0),d2
00017AF0 3628 0008                  		move.w	obX(a0),d3
00017AF4 7000                       		moveq	#0,d0
00017AF6 1028 0017                  		move.b	obWidth(a0),d0
00017AFA 4880                       		ext.w	d0
00017AFC D440                       		add.w	d0,d2
00017AFE 1028 0016                  		move.b	obHeight(a0),d0
00017B02 4880                       		ext.w	d0
00017B04 9640                       		sub.w	d0,d3
00017B06 0A43 000F                  		eori.w	#$F,d3
00017B0A 49F8 F76A                  		lea	($FFFFF76A).w,a4
00017B0E 367C FFF0                  		movea.w	#-$10,a3
00017B12 3C3C 0800                  		move.w	#$800,d6
00017B16 7A0D                       		moveq	#$D,d5
00017B18 6100 0000                  		bsr.w	FindWall
00017B1C 301F                       		move.w	(sp)+,d0
00017B1E 6100 FE30                  		bsr.w	Sonic_Angle
00017B22 4A41                       		tst.w	d1
00017B24 6700                       		beq.s	locret_14934
00017B26 6A00                       		bpl.s	loc_14936
00017B28 0C41 FFF2                  		cmpi.w	#-$E,d1
00017B2C 6D00 FDDC                  		blt.w	locret_1470A
00017B30 9368 0008                  		sub.w	d1,obX(a0)
00017B34                            
00017B34                            locret_14934:
00017B34 4E75                       		rts	
00017B36                            ; ===========================================================================
00017B36                            
00017B36                            loc_14936:
00017B36 0C41 000E                  		cmpi.w	#$E,d1
00017B3A 6E00                       		bgt.s	loc_14942
00017B3C                            
00017B3C                            loc_1493C:
00017B3C 9368 0008                  		sub.w	d1,obX(a0)
00017B40 4E75                       		rts	
00017B42                            ; ===========================================================================
00017B42                            
00017B42                            loc_14942:
00017B42 4A28 0038                  		tst.b	$38(a0)
00017B46 66F4                       		bne.s	loc_1493C
00017B48 08E8 0001 0022             		bset	#1,obStatus(a0)
00017B4E 08A8 0005 0022             		bclr	#5,obStatus(a0)
00017B54 117C 0001 001D             		move.b	#1,obNextAni(a0)
00017B5A 4E75                       		rts	
00017B5C                            ; End of function Sonic_WalkVertL
00017B5C                            ; End of function Sonic_WalkVertL
00017B5C                            
00017B5C                            		include	"_incObj\sub FindNearestTile.asm"
00017B5C                            ; ---------------------------------------------------------------------------
00017B5C                            ; Subroutine to	find which tile	the object is standing on
00017B5C                            
00017B5C                            ; input:
00017B5C                            ;	d2 = y-position of object's bottom edge
00017B5C                            ;	d3 = x-position of object
00017B5C                            
00017B5C                            ; output:
00017B5C                            ;	a1 = address within 256x256 mappings where object is standing
00017B5C                            ;	     (refers to a 16x16 tile number)
00017B5C                            ; ---------------------------------------------------------------------------
00017B5C                            
00017B5C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017B5C                            
00017B5C                            
00017B5C                            FindNearestTile:
00017B5C 3002                       		move.w	d2,d0		; get y-pos. of bottom edge of object
00017B5E E248                       		lsr.w	#1,d0
00017B60 0240 0380                  		andi.w	#$380,d0
00017B64 3203                       		move.w	d3,d1		; get x-pos. of object
00017B66 E049                       		lsr.w	#8,d1
00017B68 0241 007F                  		andi.w	#$7F,d1
00017B6C D041                       		add.w	d1,d0		; combine
00017B6E 72FF                       		moveq	#-1,d1
00017B70 43F8 A400                  		lea	(v_lvllayout).w,a1
00017B74 1231 0000                  		move.b	(a1,d0.w),d1	; get 256x256 tile number
00017B78 6700                       		beq.s	@blanktile	; branch if 0
00017B7A 6B00                       		bmi.s	@specialtile	; branch if >$7F
00017B7C 5301                       		subq.b	#1,d1
00017B7E 4881                       		ext.w	d1
00017B80 EE59                       		ror.w	#7,d1
00017B82 3002                       		move.w	d2,d0
00017B84 D040                       		add.w	d0,d0
00017B86 0240 01E0                  		andi.w	#$1E0,d0
00017B8A D240                       		add.w	d0,d1
00017B8C 3003                       		move.w	d3,d0
00017B8E E648                       		lsr.w	#3,d0
00017B90 0240 001E                  		andi.w	#$1E,d0
00017B94 D240                       		add.w	d0,d1
00017B96                            
00017B96                            @blanktile:
00017B96 2241                       		movea.l	d1,a1
00017B98 4E75                       		rts	
00017B9A                            ; ===========================================================================
00017B9A                            
00017B9A                            @specialtile:
00017B9A 0241 007F                  		andi.w	#$7F,d1
00017B9E 0828 0006 0001             		btst	#6,obRender(a0) ; is object "behind a loop"?
00017BA4 6700                       		beq.s	@treatasnormal	; if not, branch
00017BA6 5241                       		addq.w	#1,d1
00017BA8 0C41 0029                  		cmpi.w	#$29,d1
00017BAC 6600                       		bne.s	@treatasnormal
00017BAE 323C 0051                  		move.w	#$51,d1
00017BB2                            
00017BB2                            	@treatasnormal:
00017BB2 5301                       		subq.b	#1,d1
00017BB4 EE59                       		ror.w	#7,d1
00017BB6 3002                       		move.w	d2,d0
00017BB8 D040                       		add.w	d0,d0
00017BBA 0240 01E0                  		andi.w	#$1E0,d0
00017BBE D240                       		add.w	d0,d1
00017BC0 3003                       		move.w	d3,d0
00017BC2 E648                       		lsr.w	#3,d0
00017BC4 0240 001E                  		andi.w	#$1E,d0
00017BC8 D240                       		add.w	d0,d1
00017BCA 2241                       		movea.l	d1,a1
00017BCC 4E75                       		rts	
00017BCE                            ; End of function FindNearestTile
00017BCE                            ; End of function FindNearestTile
00017BCE                            		include	"_incObj\sub FindFloor.asm"
00017BCE                            ; ---------------------------------------------------------------------------
00017BCE                            ; Subroutine to	find the floor
00017BCE                            
00017BCE                            ; input:
00017BCE                            ;	d2 = y-position of object's bottom edge
00017BCE                            ;	d3 = x-position of object
00017BCE                            ;	d5 = bit to test for solidness
00017BCE                            
00017BCE                            ; output:
00017BCE                            ;	d1 = distance to the floor
00017BCE                            ;	a1 = address within 256x256 mappings where object is standing
00017BCE                            ;	     (refers to a 16x16 tile number)
00017BCE                            ;	(a4) = floor angle
00017BCE                            ; ---------------------------------------------------------------------------
00017BCE                            
00017BCE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017BCE                            
00017BCE                            
00017BCE                            FindFloor:
00017BCE 618C                       		bsr.s	FindNearestTile
00017BD0 3011                       		move.w	(a1),d0		; get value for solidness, orientation and 16x16 tile number
00017BD2 3800                       		move.w	d0,d4
00017BD4 0240 07FF                  		andi.w	#$7FF,d0
00017BD8 6700                       		beq.s	@isblank	; branch if tile is blank
00017BDA 0B04                       		btst	d5,d4		; is the tile solid?
00017BDC 6600                       		bne.s	@issolid	; if yes, branch
00017BDE                            
00017BDE                            @isblank:
00017BDE D44B                       		add.w	a3,d2
00017BE0 6100 0000                  		bsr.w	FindFloor2	; try tile below the nearest
00017BE4 944B                       		sub.w	a3,d2
00017BE6 0641 0010                  		addi.w	#$10,d1		; return distance to floor
00017BEA 4E75                       		rts	
00017BEC                            ; ===========================================================================
00017BEC                            
00017BEC                            @issolid:
00017BEC 2478 F796                  		movea.l	(v_collindex).w,a2
00017BF0 1032 0000                  		move.b	(a2,d0.w),d0	; get collision block number
00017BF4 0240 00FF                  		andi.w	#$FF,d0
00017BF8 67E4                       		beq.s	@isblank	; branch if 0
00017BFA 45F9 0000 0000             		lea	(AngleMap).l,a2
00017C00 18B2 0000                  		move.b	(a2,d0.w),(a4)	; get collision angle value
00017C04 E948                       		lsl.w	#4,d0
00017C06 3203                       		move.w	d3,d1		; get x-pos. of object
00017C08 0804 000B                  		btst	#$B,d4		; is block flipped horizontally?
00017C0C 6700                       		beq.s	@noflip		; if not, branch
00017C0E 4641                       		not.w	d1
00017C10 4414                       		neg.b	(a4)
00017C12                            
00017C12                            	@noflip:
00017C12 0804 000C                  		btst	#$C,d4		; is block flipped vertically?
00017C16 6700                       		beq.s	@noflip2	; if not, branch
00017C18 0614 0040                  		addi.b	#$40,(a4)
00017C1C 4414                       		neg.b	(a4)
00017C1E 0414 0040                  		subi.b	#$40,(a4)
00017C22                            
00017C22                            	@noflip2:
00017C22 0241 000F                  		andi.w	#$F,d1
00017C26 D240                       		add.w	d0,d1		; (block num. * $10) + x-pos. = place in array
00017C28 45F9 0000 0000             		lea	(CollArray1).l,a2
00017C2E 1032 1000                  		move.b	(a2,d1.w),d0	; get collision height
00017C32 4880                       		ext.w	d0
00017C34 BD44                       		eor.w	d6,d4
00017C36 0804 000C                  		btst	#$C,d4		; is block flipped vertically?
00017C3A 6700                       		beq.s	@noflip3	; if not, branch
00017C3C 4440                       		neg.w	d0
00017C3E                            
00017C3E                            	@noflip3:
00017C3E 4A40                       		tst.w	d0
00017C40 679C                       		beq.s	@isblank	; branch if height is 0
00017C42 6B00                       		bmi.s	@negfloor	; branch if height is negative
00017C44 0C00 0010                  		cmpi.b	#$10,d0
00017C48 6700                       		beq.s	@maxfloor	; branch if height is $10 (max)
00017C4A 3202                       		move.w	d2,d1		; get y-pos. of object
00017C4C 0241 000F                  		andi.w	#$F,d1
00017C50 D041                       		add.w	d1,d0
00017C52 323C 000F                  		move.w	#$F,d1
00017C56 9240                       		sub.w	d0,d1		; return distance to floor
00017C58 4E75                       		rts	
00017C5A                            ; ===========================================================================
00017C5A                            
00017C5A                            @negfloor:
00017C5A 3202                       		move.w	d2,d1
00017C5C 0241 000F                  		andi.w	#$F,d1
00017C60 D041                       		add.w	d1,d0
00017C62 6A00 FF7A                  		bpl.w	@isblank
00017C66                            
00017C66                            @maxfloor:
00017C66 944B                       		sub.w	a3,d2
00017C68 6100 0000                  		bsr.w	FindFloor2	; try tile above the nearest
00017C6C D44B                       		add.w	a3,d2
00017C6E 0441 0010                  		subi.w	#$10,d1		; return distance to floor
00017C72 4E75                       		rts	
00017C74                            ; End of function FindFloor
00017C74                            
00017C74                            
00017C74                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017C74                            
00017C74                            
00017C74                            FindFloor2:
00017C74 6100 FEE6                  		bsr.w	FindNearestTile
00017C78 3011                       		move.w	(a1),d0
00017C7A 3800                       		move.w	d0,d4
00017C7C 0240 07FF                  		andi.w	#$7FF,d0
00017C80 6700                       		beq.s	@isblank2
00017C82 0B04                       		btst	d5,d4
00017C84 6600                       		bne.s	@issolid
00017C86                            
00017C86                            @isblank2:
00017C86 323C 000F                  		move.w	#$F,d1
00017C8A 3002                       		move.w	d2,d0
00017C8C 0240 000F                  		andi.w	#$F,d0
00017C90 9240                       		sub.w	d0,d1
00017C92 4E75                       		rts	
00017C94                            ; ===========================================================================
00017C94                            
00017C94                            @issolid:
00017C94 2478 F796                  		movea.l	(v_collindex).w,a2
00017C98 1032 0000                  		move.b	(a2,d0.w),d0
00017C9C 0240 00FF                  		andi.w	#$FF,d0
00017CA0 67E4                       		beq.s	@isblank2
00017CA2 45F9 0000 0000             		lea	(AngleMap).l,a2
00017CA8 18B2 0000                  		move.b	(a2,d0.w),(a4)
00017CAC E948                       		lsl.w	#4,d0
00017CAE 3203                       		move.w	d3,d1
00017CB0 0804 000B                  		btst	#$B,d4
00017CB4 6700                       		beq.s	@noflip
00017CB6 4641                       		not.w	d1
00017CB8 4414                       		neg.b	(a4)
00017CBA                            
00017CBA                            	@noflip:
00017CBA 0804 000C                  		btst	#$C,d4
00017CBE 6700                       		beq.s	@noflip2
00017CC0 0614 0040                  		addi.b	#$40,(a4)
00017CC4 4414                       		neg.b	(a4)
00017CC6 0414 0040                  		subi.b	#$40,(a4)
00017CCA                            
00017CCA                            	@noflip2:
00017CCA 0241 000F                  		andi.w	#$F,d1
00017CCE D240                       		add.w	d0,d1
00017CD0 45F9 0000 0000             		lea	(CollArray1).l,a2
00017CD6 1032 1000                  		move.b	(a2,d1.w),d0
00017CDA 4880                       		ext.w	d0
00017CDC BD44                       		eor.w	d6,d4
00017CDE 0804 000C                  		btst	#$C,d4
00017CE2 6700                       		beq.s	@noflip3
00017CE4 4440                       		neg.w	d0
00017CE6                            
00017CE6                            	@noflip3:
00017CE6 4A40                       		tst.w	d0
00017CE8 679C                       		beq.s	@isblank2
00017CEA 6B00                       		bmi.s	@negfloor
00017CEC 3202                       		move.w	d2,d1
00017CEE 0241 000F                  		andi.w	#$F,d1
00017CF2 D041                       		add.w	d1,d0
00017CF4 323C 000F                  		move.w	#$F,d1
00017CF8 9240                       		sub.w	d0,d1
00017CFA 4E75                       		rts	
00017CFC                            ; ===========================================================================
00017CFC                            
00017CFC                            @negfloor:
00017CFC 3202                       		move.w	d2,d1
00017CFE 0241 000F                  		andi.w	#$F,d1
00017D02 D041                       		add.w	d1,d0
00017D04 6A00 FF80                  		bpl.w	@isblank2
00017D08 4641                       		not.w	d1
00017D0A 4E75                       		rts	
00017D0C                            ; End of function FindFloor2
00017D0C                            ; End of function FindFloor2
00017D0C                            		include	"_incObj\sub FindWall.asm"
00017D0C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017D0C                            
00017D0C                            
00017D0C                            FindWall:
00017D0C 6100 FE4E                  		bsr.w	FindNearestTile
00017D10 3011                       		move.w	(a1),d0
00017D12 3800                       		move.w	d0,d4
00017D14 0240 07FF                  		andi.w	#$7FF,d0
00017D18 6700                       		beq.s	loc_14B1E
00017D1A 0B04                       		btst	d5,d4
00017D1C 6600                       		bne.s	loc_14B2C
00017D1E                            
00017D1E                            loc_14B1E:
00017D1E D64B                       		add.w	a3,d3
00017D20 6100 0000                  		bsr.w	FindWall2
00017D24 964B                       		sub.w	a3,d3
00017D26 0641 0010                  		addi.w	#$10,d1
00017D2A 4E75                       		rts	
00017D2C                            ; ===========================================================================
00017D2C                            
00017D2C                            loc_14B2C:
00017D2C 2478 F796                  		movea.l	(v_collindex).w,a2
00017D30 1032 0000                  		move.b	(a2,d0.w),d0
00017D34 0240 00FF                  		andi.w	#$FF,d0
00017D38 67E4                       		beq.s	loc_14B1E
00017D3A 45F9 0000 0000             		lea	(AngleMap).l,a2
00017D40 18B2 0000                  		move.b	(a2,d0.w),(a4)
00017D44 E948                       		lsl.w	#4,d0
00017D46 3202                       		move.w	d2,d1
00017D48 0804 000C                  		btst	#$C,d4
00017D4C 6700                       		beq.s	loc_14B5A
00017D4E 4641                       		not.w	d1
00017D50 0614 0040                  		addi.b	#$40,(a4)
00017D54 4414                       		neg.b	(a4)
00017D56 0414 0040                  		subi.b	#$40,(a4)
00017D5A                            
00017D5A                            loc_14B5A:
00017D5A 0804 000B                  		btst	#$B,d4
00017D5E 6700                       		beq.s	loc_14B62
00017D60 4414                       		neg.b	(a4)
00017D62                            
00017D62                            loc_14B62:
00017D62 0241 000F                  		andi.w	#$F,d1
00017D66 D240                       		add.w	d0,d1
00017D68 45F9 0000 0000             		lea	(CollArray2).l,a2
00017D6E 1032 1000                  		move.b	(a2,d1.w),d0
00017D72 4880                       		ext.w	d0
00017D74 BD44                       		eor.w	d6,d4
00017D76 0804 000B                  		btst	#$B,d4
00017D7A 6700                       		beq.s	loc_14B7E
00017D7C 4440                       		neg.w	d0
00017D7E                            
00017D7E                            loc_14B7E:
00017D7E 4A40                       		tst.w	d0
00017D80 679C                       		beq.s	loc_14B1E
00017D82 6B00                       		bmi.s	loc_14B9A
00017D84 0C00 0010                  		cmpi.b	#$10,d0
00017D88 6700                       		beq.s	loc_14BA6
00017D8A 3203                       		move.w	d3,d1
00017D8C 0241 000F                  		andi.w	#$F,d1
00017D90 D041                       		add.w	d1,d0
00017D92 323C 000F                  		move.w	#$F,d1
00017D96 9240                       		sub.w	d0,d1
00017D98 4E75                       		rts	
00017D9A                            ; ===========================================================================
00017D9A                            
00017D9A                            loc_14B9A:
00017D9A 3203                       		move.w	d3,d1
00017D9C 0241 000F                  		andi.w	#$F,d1
00017DA0 D041                       		add.w	d1,d0
00017DA2 6A00 FF7A                  		bpl.w	loc_14B1E
00017DA6                            
00017DA6                            loc_14BA6:
00017DA6 964B                       		sub.w	a3,d3
00017DA8 6100 0000                  		bsr.w	FindWall2
00017DAC D64B                       		add.w	a3,d3
00017DAE 0441 0010                  		subi.w	#$10,d1
00017DB2 4E75                       		rts	
00017DB4                            ; End of function FindWall
00017DB4                            
00017DB4                            
00017DB4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017DB4                            
00017DB4                            
00017DB4                            FindWall2:
00017DB4 6100 FDA6                  		bsr.w	FindNearestTile
00017DB8 3011                       		move.w	(a1),d0
00017DBA 3800                       		move.w	d0,d4
00017DBC 0240 07FF                  		andi.w	#$7FF,d0
00017DC0 6700                       		beq.s	loc_14BC6
00017DC2 0B04                       		btst	d5,d4
00017DC4 6600                       		bne.s	loc_14BD4
00017DC6                            
00017DC6                            loc_14BC6:
00017DC6 323C 000F                  		move.w	#$F,d1
00017DCA 3003                       		move.w	d3,d0
00017DCC 0240 000F                  		andi.w	#$F,d0
00017DD0 9240                       		sub.w	d0,d1
00017DD2 4E75                       		rts	
00017DD4                            ; ===========================================================================
00017DD4                            
00017DD4                            loc_14BD4:
00017DD4 2478 F796                  		movea.l	(v_collindex).w,a2
00017DD8 1032 0000                  		move.b	(a2,d0.w),d0
00017DDC 0240 00FF                  		andi.w	#$FF,d0
00017DE0 67E4                       		beq.s	loc_14BC6
00017DE2 45F9 0000 0000             		lea	(AngleMap).l,a2
00017DE8 18B2 0000                  		move.b	(a2,d0.w),(a4)
00017DEC E948                       		lsl.w	#4,d0
00017DEE 3202                       		move.w	d2,d1
00017DF0 0804 000C                  		btst	#$C,d4
00017DF4 6700                       		beq.s	loc_14C02
00017DF6 4641                       		not.w	d1
00017DF8 0614 0040                  		addi.b	#$40,(a4)
00017DFC 4414                       		neg.b	(a4)
00017DFE 0414 0040                  		subi.b	#$40,(a4)
00017E02                            
00017E02                            loc_14C02:
00017E02 0804 000B                  		btst	#$B,d4
00017E06 6700                       		beq.s	loc_14C0A
00017E08 4414                       		neg.b	(a4)
00017E0A                            
00017E0A                            loc_14C0A:
00017E0A 0241 000F                  		andi.w	#$F,d1
00017E0E D240                       		add.w	d0,d1
00017E10 45F9 0000 0000             		lea	(CollArray2).l,a2
00017E16 1032 1000                  		move.b	(a2,d1.w),d0
00017E1A 4880                       		ext.w	d0
00017E1C BD44                       		eor.w	d6,d4
00017E1E 0804 000B                  		btst	#$B,d4
00017E22 6700                       		beq.s	loc_14C26
00017E24 4440                       		neg.w	d0
00017E26                            
00017E26                            loc_14C26:
00017E26 4A40                       		tst.w	d0
00017E28 679C                       		beq.s	loc_14BC6
00017E2A 6B00                       		bmi.s	loc_14C3C
00017E2C 3203                       		move.w	d3,d1
00017E2E 0241 000F                  		andi.w	#$F,d1
00017E32 D041                       		add.w	d1,d0
00017E34 323C 000F                  		move.w	#$F,d1
00017E38 9240                       		sub.w	d0,d1
00017E3A 4E75                       		rts	
00017E3C                            ; ===========================================================================
00017E3C                            
00017E3C                            loc_14C3C:
00017E3C 3203                       		move.w	d3,d1
00017E3E 0241 000F                  		andi.w	#$F,d1
00017E42 D041                       		add.w	d1,d0
00017E44 6A00 FF80                  		bpl.w	loc_14BC6
00017E48 4641                       		not.w	d1
00017E4A 4E75                       		rts	
00017E4C                            ; End of function FindWall2
00017E4C                            ; End of function FindWall2
00017E4C                            
00017E4C                            ; ---------------------------------------------------------------------------
00017E4C                            ; Unused floor/wall subroutine - logs something	to do with collision
00017E4C                            ; ---------------------------------------------------------------------------
00017E4C                            
00017E4C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017E4C                            
00017E4C                            
00017E4C                            FloorLog_Unk:
00017E4C 4E75                       		rts	
00017E4E                            
00017E4E 43F9 0000 0000             		lea	(CollArray1).l,a1
00017E54 45F9 0000 0000             		lea	(CollArray1).l,a2
00017E5A 363C 00FF                  		move.w	#$FF,d3
00017E5E                            
00017E5E                            loc_14C5E:
00017E5E 7A10                       		moveq	#$10,d5
00017E60 343C 000F                  		move.w	#$F,d2
00017E64                            
00017E64                            loc_14C64:
00017E64 7800                       		moveq	#0,d4
00017E66 323C 000F                  		move.w	#$F,d1
00017E6A                            
00017E6A                            loc_14C6A:
00017E6A 3019                       		move.w	(a1)+,d0
00017E6C EAA8                       		lsr.l	d5,d0
00017E6E D944                       		addx.w	d4,d4
00017E70 51C9 FFF8                  		dbf	d1,loc_14C6A
00017E74                            
00017E74 34C4                       		move.w	d4,(a2)+
00017E76 92FC 0020                  		suba.w	#$20,a1
00017E7A 5345                       		subq.w	#1,d5
00017E7C 51CA FFE6                  		dbf	d2,loc_14C64
00017E80                            
00017E80 D2FC 0020                  		adda.w	#$20,a1
00017E84 51CB FFD8                  		dbf	d3,loc_14C5E
00017E88                            
00017E88 43F9 0000 0000             		lea	(CollArray1).l,a1
00017E8E 45F9 0000 0000             		lea	(CollArray2).l,a2
00017E94 6100                       		bsr.s	FloorLog_Unk2
00017E96 43F9 0000 0000             		lea	(CollArray1).l,a1
00017E9C 45F9 0000 0000             		lea	(CollArray1).l,a2
00017EA2                            
00017EA2                            ; End of function FloorLog_Unk
00017EA2                            
00017EA2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017EA2                            
00017EA2                            
00017EA2                            FloorLog_Unk2:
00017EA2 363C 0FFF                  		move.w	#$FFF,d3
00017EA6                            
00017EA6                            loc_14CA6:
00017EA6 7400                       		moveq	#0,d2
00017EA8 323C 000F                  		move.w	#$F,d1
00017EAC 3019                       		move.w	(a1)+,d0
00017EAE 6700                       		beq.s	loc_14CD4
00017EB0 6B00                       		bmi.s	loc_14CBE
00017EB2                            
00017EB2                            loc_14CB2:
00017EB2 E248                       		lsr.w	#1,d0
00017EB4 6400                       		bhs.s	loc_14CB8
00017EB6 5202                       		addq.b	#1,d2
00017EB8                            
00017EB8                            loc_14CB8:
00017EB8 51C9 FFF8                  		dbf	d1,loc_14CB2
00017EBC                            
00017EBC 6000                       		bra.s	loc_14CD6
00017EBE                            ; ===========================================================================
00017EBE                            
00017EBE                            loc_14CBE:
00017EBE 0C40 FFFF                  		cmpi.w	#-1,d0
00017EC2 6700                       		beq.s	loc_14CD0
00017EC4                            
00017EC4                            loc_14CC4:
00017EC4 E348                       		lsl.w	#1,d0
00017EC6 6400                       		bhs.s	loc_14CCA
00017EC8 5302                       		subq.b	#1,d2
00017ECA                            
00017ECA                            loc_14CCA:
00017ECA 51C9 FFF8                  		dbf	d1,loc_14CC4
00017ECE                            
00017ECE 6000                       		bra.s	loc_14CD6
00017ED0                            ; ===========================================================================
00017ED0                            
00017ED0                            loc_14CD0:
00017ED0 303C 0010                  		move.w	#$10,d0
00017ED4                            
00017ED4                            loc_14CD4:
00017ED4 3400                       		move.w	d0,d2
00017ED6                            
00017ED6                            loc_14CD6:
00017ED6 14C2                       		move.b	d2,(a2)+
00017ED8 51CB FFCC                  		dbf	d3,loc_14CA6
00017EDC                            
00017EDC 4E75                       		rts	
00017EDE                            
00017EDE                            ; End of function FloorLog_Unk2
00017EDE                            
00017EDE                            
00017EDE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017EDE                            
00017EDE                            
00017EDE                            Sonic_WalkSpeed:
00017EDE 2628 0008                  		move.l	obX(a0),d3
00017EE2 2428 000C                  		move.l	obY(a0),d2
00017EE6 3228 0010                  		move.w	obVelX(a0),d1
00017EEA 48C1                       		ext.l	d1
00017EEC E181                       		asl.l	#8,d1
00017EEE D681                       		add.l	d1,d3
00017EF0 3228 0012                  		move.w	obVelY(a0),d1
00017EF4 48C1                       		ext.l	d1
00017EF6 E181                       		asl.l	#8,d1
00017EF8 D481                       		add.l	d1,d2
00017EFA 4842                       		swap	d2
00017EFC 4843                       		swap	d3
00017EFE 11C0 F768                  		move.b	d0,(v_anglebuffer).w
00017F02 11C0 F76A                  		move.b	d0,($FFFFF76A).w
00017F06 1200                       		move.b	d0,d1
00017F08 0600 0020                  		addi.b	#$20,d0
00017F0C 6A00                       		bpl.s	loc_14D1A
00017F0E 1001                       		move.b	d1,d0
00017F10 6A00                       		bpl.s	loc_14D14
00017F12 5300                       		subq.b	#1,d0
00017F14                            
00017F14                            loc_14D14:
00017F14 0600 0020                  		addi.b	#$20,d0
00017F18 6000                       		bra.s	loc_14D24
00017F1A                            ; ===========================================================================
00017F1A                            
00017F1A                            loc_14D1A:
00017F1A 1001                       		move.b	d1,d0
00017F1C 6A00                       		bpl.s	loc_14D20
00017F1E 5200                       		addq.b	#1,d0
00017F20                            
00017F20                            loc_14D20:
00017F20 0600 001F                  		addi.b	#$1F,d0
00017F24                            
00017F24                            loc_14D24:
00017F24 0200 00C0                  		andi.b	#$C0,d0
00017F28 6700 0000                  		beq.w	loc_14DF0
00017F2C 0C00 0080                  		cmpi.b	#$80,d0
00017F30 6700 0000                  		beq.w	loc_14F7C
00017F34 0201 0038                  		andi.b	#$38,d1
00017F38 6600                       		bne.s	loc_14D3C
00017F3A 5042                       		addq.w	#8,d2
00017F3C                            
00017F3C                            loc_14D3C:
00017F3C 0C00 0040                  		cmpi.b	#$40,d0
00017F40 6700 0000                  		beq.w	loc_1504A
00017F44 6000 0000                  		bra.w	loc_14EBC
00017F48                            
00017F48                            ; End of function Sonic_WalkSpeed
00017F48                            
00017F48                            
00017F48                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017F48                            
00017F48                            
00017F48                            sub_14D48:
00017F48 11C0 F768                  		move.b	d0,(v_anglebuffer).w
00017F4C 11C0 F76A                  		move.b	d0,($FFFFF76A).w
00017F50 0600 0020                  		addi.b	#$20,d0
00017F54 0200 00C0                  		andi.b	#$C0,d0
00017F58 0C00 0040                  		cmpi.b	#$40,d0
00017F5C 6700 0000                  		beq.w	loc_14FD6
00017F60 0C00 0080                  		cmpi.b	#$80,d0
00017F64 6700 0000                  		beq.w	Sonic_DontRunOnWalls
00017F68 0C00 00C0                  		cmpi.b	#$C0,d0
00017F6C 6700 0000                  		beq.w	sub_14E50
00017F70                            
00017F70                            ; End of function sub_14D48
00017F70                            
00017F70                            ; ---------------------------------------------------------------------------
00017F70                            ; Subroutine to	make Sonic land	on the floor after jumping
00017F70                            ; ---------------------------------------------------------------------------
00017F70                            
00017F70                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017F70                            
00017F70                            
00017F70                            Sonic_HitFloor:
00017F70 3428 000C                  		move.w	obY(a0),d2
00017F74 3628 0008                  		move.w	obX(a0),d3
00017F78 7000                       		moveq	#0,d0
00017F7A 1028 0016                  		move.b	obHeight(a0),d0
00017F7E 4880                       		ext.w	d0
00017F80 D440                       		add.w	d0,d2
00017F82 1028 0017                  		move.b	obWidth(a0),d0
00017F86 4880                       		ext.w	d0
00017F88 D640                       		add.w	d0,d3
00017F8A 49F8 F768                  		lea	(v_anglebuffer).w,a4
00017F8E 367C 0010                  		movea.w	#$10,a3
00017F92 3C3C 0000                  		move.w	#0,d6
00017F96 7A0D                       		moveq	#$D,d5
00017F98 6100 FC34                  		bsr.w	FindFloor
00017F9C 3F01                       		move.w	d1,-(sp)
00017F9E 3428 000C                  		move.w	obY(a0),d2
00017FA2 3628 0008                  		move.w	obX(a0),d3
00017FA6 7000                       		moveq	#0,d0
00017FA8 1028 0016                  		move.b	obHeight(a0),d0
00017FAC 4880                       		ext.w	d0
00017FAE D440                       		add.w	d0,d2
00017FB0 1028 0017                  		move.b	obWidth(a0),d0
00017FB4 4880                       		ext.w	d0
00017FB6 9640                       		sub.w	d0,d3
00017FB8 49F8 F76A                  		lea	($FFFFF76A).w,a4
00017FBC 367C 0010                  		movea.w	#$10,a3
00017FC0 3C3C 0000                  		move.w	#0,d6
00017FC4 7A0D                       		moveq	#$D,d5
00017FC6 6100 FC06                  		bsr.w	FindFloor
00017FCA 301F                       		move.w	(sp)+,d0
00017FCC 143C 0000                  		move.b	#0,d2
00017FD0                            
00017FD0                            loc_14DD0:
00017FD0 1638 F76A                  		move.b	($FFFFF76A).w,d3
00017FD4 B240                       		cmp.w	d0,d1
00017FD6 6F00                       		ble.s	loc_14DDE
00017FD8 1638 F768                  		move.b	(v_anglebuffer).w,d3
00017FDC C141                       		exg	d0,d1
00017FDE                            
00017FDE                            loc_14DDE:
00017FDE 0803 0000                  		btst	#0,d3
00017FE2 6700                       		beq.s	locret_14DE6
00017FE4 1602                       		move.b	d2,d3
00017FE6                            
00017FE6                            locret_14DE6:
00017FE6 4E75                       		rts	
00017FE8                            
00017FE8                            ; End of function Sonic_HitFloor
00017FE8                            
00017FE8                            ; ===========================================================================
00017FE8 3428 000C                  		move.w	obY(a0),d2
00017FEC 3628 0008                  		move.w	obX(a0),d3
00017FF0                            
00017FF0                            loc_14DF0:
00017FF0 0642 000A                  		addi.w	#$A,d2
00017FF4 49F8 F768                  		lea	(v_anglebuffer).w,a4
00017FF8 367C 0010                  		movea.w	#$10,a3
00017FFC 3C3C 0000                  		move.w	#0,d6
00018000 7A0E                       		moveq	#$E,d5
00018002 6100 FBCA                  		bsr.w	FindFloor
00018006 143C 0000                  		move.b	#0,d2
0001800A                            
0001800A                            loc_14E0A:
0001800A 1638 F768                  		move.b	(v_anglebuffer).w,d3
0001800E 0803 0000                  		btst	#0,d3
00018012 6700                       		beq.s	locret_14E16
00018014 1602                       		move.b	d2,d3
00018016                            
00018016                            locret_14E16:
00018016 4E75                       		rts	
00018018                            
00018018                            		include	"_incObj\sub ObjFloorDist.asm"
00018018                            ; ---------------------------------------------------------------------------
00018018                            ; Subroutine to find the distance of an object to the floor
00018018                            
00018018                            ; input:
00018018                            ;	d3 = x-pos. of object (ObjFloorDist2 only)
00018018                            
00018018                            ; output:
00018018                            ;	d1 = distance to the floor
00018018                            ;	d3 = floor angle
00018018                            ;	a1 = address within 256x256 mappings where object is standing
00018018                            ;	     (refers to a 16x16 tile number)
00018018                            ;	(a4) = floor angle
00018018                            ; ---------------------------------------------------------------------------
00018018                            
00018018                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00018018                            
00018018                            
00018018                            ObjFloorDist:
00018018 3628 0008                  		move.w	obX(a0),d3
0001801C                            
0001801C                            
0001801C                            ObjFloorDist2:
0001801C 3428 000C                  		move.w	obY(a0),d2
00018020 7000                       		moveq	#0,d0
00018022 1028 0016                  		move.b	obHeight(a0),d0
00018026 4880                       		ext.w	d0
00018028 D440                       		add.w	d0,d2
0001802A 49F8 F768                  		lea	(v_anglebuffer).w,a4
0001802E 18BC 0000                  		move.b	#0,(a4)
00018032 367C 0010                  		movea.w	#$10,a3		; height of a 16x16 tile
00018036 3C3C 0000                  		move.w	#0,d6
0001803A 7A0D                       		moveq	#$D,d5		; bit to test for solidness
0001803C 6100 FB90                  		bsr.w	FindFloor
00018040 1638 F768                  		move.b	(v_anglebuffer).w,d3
00018044 0803 0000                  		btst	#0,d3
00018048 6700                       		beq.s	locret_14E4E
0001804A 163C 0000                  		move.b	#0,d3
0001804E                            
0001804E                            	locret_14E4E:
0001804E 4E75                       		rts	
00018050                            
00018050                            ; End of function ObjFloorDist2
00018050                            ; End of function ObjFloorDist2
00018050                            
00018050                            
00018050                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00018050                            
00018050                            
00018050                            sub_14E50:
00018050 3428 000C                  		move.w	obY(a0),d2
00018054 3628 0008                  		move.w	obX(a0),d3
00018058 7000                       		moveq	#0,d0
0001805A 1028 0017                  		move.b	obWidth(a0),d0
0001805E 4880                       		ext.w	d0
00018060 9440                       		sub.w	d0,d2
00018062 1028 0016                  		move.b	obHeight(a0),d0
00018066 4880                       		ext.w	d0
00018068 D640                       		add.w	d0,d3
0001806A 49F8 F768                  		lea	(v_anglebuffer).w,a4
0001806E 367C 0010                  		movea.w	#$10,a3
00018072 3C3C 0000                  		move.w	#0,d6
00018076 7A0E                       		moveq	#$E,d5
00018078 6100 FC92                  		bsr.w	FindWall
0001807C 3F01                       		move.w	d1,-(sp)
0001807E 3428 000C                  		move.w	obY(a0),d2
00018082 3628 0008                  		move.w	obX(a0),d3
00018086 7000                       		moveq	#0,d0
00018088 1028 0017                  		move.b	obWidth(a0),d0
0001808C 4880                       		ext.w	d0
0001808E D440                       		add.w	d0,d2
00018090 1028 0016                  		move.b	obHeight(a0),d0
00018094 4880                       		ext.w	d0
00018096 D640                       		add.w	d0,d3
00018098 49F8 F76A                  		lea	($FFFFF76A).w,a4
0001809C 367C 0010                  		movea.w	#$10,a3
000180A0 3C3C 0000                  		move.w	#0,d6
000180A4 7A0E                       		moveq	#$E,d5
000180A6 6100 FC64                  		bsr.w	FindWall
000180AA 301F                       		move.w	(sp)+,d0
000180AC 143C 00C0                  		move.b	#-$40,d2
000180B0 6000 FF1E                  		bra.w	loc_14DD0
000180B4                            
000180B4                            ; End of function sub_14E50
000180B4                            
000180B4                            
000180B4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000180B4                            
000180B4                            
000180B4                            sub_14EB4:
000180B4 3428 000C                  		move.w	obY(a0),d2
000180B8 3628 0008                  		move.w	obX(a0),d3
000180BC                            
000180BC                            loc_14EBC:
000180BC 0643 000A                  		addi.w	#$A,d3
000180C0 49F8 F768                  		lea	(v_anglebuffer).w,a4
000180C4 367C 0010                  		movea.w	#$10,a3
000180C8 3C3C 0000                  		move.w	#0,d6
000180CC 7A0E                       		moveq	#$E,d5
000180CE 6100 FC3C                  		bsr.w	FindWall
000180D2 143C 00C0                  		move.b	#-$40,d2
000180D6 6000 FF32                  		bra.w	loc_14E0A
000180DA                            
000180DA                            ; End of function sub_14EB4
000180DA                            
000180DA                            ; ---------------------------------------------------------------------------
000180DA                            ; Subroutine to	detect when an object hits a wall to its right
000180DA                            ; ---------------------------------------------------------------------------
000180DA                            
000180DA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000180DA                            
000180DA                            
000180DA                            ObjHitWallRight:
000180DA D668 0008                  		add.w	obX(a0),d3
000180DE 3428 000C                  		move.w	obY(a0),d2
000180E2 49F8 F768                  		lea	(v_anglebuffer).w,a4
000180E6 18BC 0000                  		move.b	#0,(a4)
000180EA 367C 0010                  		movea.w	#$10,a3
000180EE 3C3C 0000                  		move.w	#0,d6
000180F2 7A0E                       		moveq	#$E,d5
000180F4 6100 FC16                  		bsr.w	FindWall
000180F8 1638 F768                  		move.b	(v_anglebuffer).w,d3
000180FC 0803 0000                  		btst	#0,d3
00018100 6700                       		beq.s	locret_14F06
00018102 163C 00C0                  		move.b	#-$40,d3
00018106                            
00018106                            locret_14F06:
00018106 4E75                       		rts	
00018108                            
00018108                            ; End of function ObjHitWallRight
00018108                            
00018108                            ; ---------------------------------------------------------------------------
00018108                            ; Subroutine preventing	Sonic from running on walls and	ceilings when he
00018108                            ; touches them
00018108                            ; ---------------------------------------------------------------------------
00018108                            
00018108                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00018108                            
00018108                            
00018108                            Sonic_DontRunOnWalls:
00018108 3428 000C                  		move.w	obY(a0),d2
0001810C 3628 0008                  		move.w	obX(a0),d3
00018110 7000                       		moveq	#0,d0
00018112 1028 0016                  		move.b	obHeight(a0),d0
00018116 4880                       		ext.w	d0
00018118 9440                       		sub.w	d0,d2
0001811A 0A42 000F                  		eori.w	#$F,d2
0001811E 1028 0017                  		move.b	obWidth(a0),d0
00018122 4880                       		ext.w	d0
00018124 D640                       		add.w	d0,d3
00018126 49F8 F768                  		lea	(v_anglebuffer).w,a4
0001812A 367C FFF0                  		movea.w	#-$10,a3
0001812E 3C3C 1000                  		move.w	#$1000,d6
00018132 7A0E                       		moveq	#$E,d5
00018134 6100 FA98                  		bsr.w	FindFloor
00018138 3F01                       		move.w	d1,-(sp)
0001813A 3428 000C                  		move.w	obY(a0),d2
0001813E 3628 0008                  		move.w	obX(a0),d3
00018142 7000                       		moveq	#0,d0
00018144 1028 0016                  		move.b	obHeight(a0),d0
00018148 4880                       		ext.w	d0
0001814A 9440                       		sub.w	d0,d2
0001814C 0A42 000F                  		eori.w	#$F,d2
00018150 1028 0017                  		move.b	obWidth(a0),d0
00018154 4880                       		ext.w	d0
00018156 9640                       		sub.w	d0,d3
00018158 49F8 F76A                  		lea	($FFFFF76A).w,a4
0001815C 367C FFF0                  		movea.w	#-$10,a3
00018160 3C3C 1000                  		move.w	#$1000,d6
00018164 7A0E                       		moveq	#$E,d5
00018166 6100 FA66                  		bsr.w	FindFloor
0001816A 301F                       		move.w	(sp)+,d0
0001816C 143C 0080                  		move.b	#-$80,d2
00018170 6000 FE5E                  		bra.w	loc_14DD0
00018174                            ; End of function Sonic_DontRunOnWalls
00018174                            
00018174                            ; ===========================================================================
00018174 3428 000C                  		move.w	obY(a0),d2
00018178 3628 0008                  		move.w	obX(a0),d3
0001817C                            
0001817C                            loc_14F7C:
0001817C 0442 000A                  		subi.w	#$A,d2
00018180 0A42 000F                  		eori.w	#$F,d2
00018184 49F8 F768                  		lea	(v_anglebuffer).w,a4
00018188 367C FFF0                  		movea.w	#-$10,a3
0001818C 3C3C 1000                  		move.w	#$1000,d6
00018190 7A0E                       		moveq	#$E,d5
00018192 6100 FA3A                  		bsr.w	FindFloor
00018196 143C 0080                  		move.b	#-$80,d2
0001819A 6000 FE6E                  		bra.w	loc_14E0A
0001819E                            
0001819E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001819E                            
0001819E                            
0001819E                            ObjHitCeiling:
0001819E 3428 000C                  		move.w	obY(a0),d2
000181A2 3628 0008                  		move.w	obX(a0),d3
000181A6 7000                       		moveq	#0,d0
000181A8 1028 0016                  		move.b	obHeight(a0),d0
000181AC 4880                       		ext.w	d0
000181AE 9440                       		sub.w	d0,d2
000181B0 0A42 000F                  		eori.w	#$F,d2
000181B4 49F8 F768                  		lea	(v_anglebuffer).w,a4
000181B8 367C FFF0                  		movea.w	#-$10,a3
000181BC 3C3C 1000                  		move.w	#$1000,d6
000181C0 7A0E                       		moveq	#$E,d5
000181C2 6100 FA0A                  		bsr.w	FindFloor
000181C6 1638 F768                  		move.b	(v_anglebuffer).w,d3
000181CA 0803 0000                  		btst	#0,d3
000181CE 6700                       		beq.s	locret_14FD4
000181D0 163C 0080                  		move.b	#-$80,d3
000181D4                            
000181D4                            locret_14FD4:
000181D4 4E75                       		rts	
000181D6                            ; End of function ObjHitCeiling
000181D6                            
000181D6                            ; ===========================================================================
000181D6                            
000181D6                            loc_14FD6:
000181D6 3428 000C                  		move.w	obY(a0),d2
000181DA 3628 0008                  		move.w	obX(a0),d3
000181DE 7000                       		moveq	#0,d0
000181E0 1028 0017                  		move.b	obWidth(a0),d0
000181E4 4880                       		ext.w	d0
000181E6 9440                       		sub.w	d0,d2
000181E8 1028 0016                  		move.b	obHeight(a0),d0
000181EC 4880                       		ext.w	d0
000181EE 9640                       		sub.w	d0,d3
000181F0 0A43 000F                  		eori.w	#$F,d3
000181F4 49F8 F768                  		lea	(v_anglebuffer).w,a4
000181F8 367C FFF0                  		movea.w	#-$10,a3
000181FC 3C3C 0800                  		move.w	#$800,d6
00018200 7A0E                       		moveq	#$E,d5
00018202 6100 FB08                  		bsr.w	FindWall
00018206 3F01                       		move.w	d1,-(sp)
00018208 3428 000C                  		move.w	obY(a0),d2
0001820C 3628 0008                  		move.w	obX(a0),d3
00018210 7000                       		moveq	#0,d0
00018212 1028 0017                  		move.b	obWidth(a0),d0
00018216 4880                       		ext.w	d0
00018218 D440                       		add.w	d0,d2
0001821A 1028 0016                  		move.b	obHeight(a0),d0
0001821E 4880                       		ext.w	d0
00018220 9640                       		sub.w	d0,d3
00018222 0A43 000F                  		eori.w	#$F,d3
00018226 49F8 F76A                  		lea	($FFFFF76A).w,a4
0001822A 367C FFF0                  		movea.w	#-$10,a3
0001822E 3C3C 0800                  		move.w	#$800,d6
00018232 7A0E                       		moveq	#$E,d5
00018234 6100 FAD6                  		bsr.w	FindWall
00018238 301F                       		move.w	(sp)+,d0
0001823A 143C 0040                  		move.b	#$40,d2
0001823E 6000 FD90                  		bra.w	loc_14DD0
00018242                            
00018242                            ; ---------------------------------------------------------------------------
00018242                            ; Subroutine to	stop Sonic when	he jumps at a wall
00018242                            ; ---------------------------------------------------------------------------
00018242                            
00018242                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00018242                            
00018242                            
00018242                            Sonic_HitWall:
00018242 3428 000C                  		move.w	obY(a0),d2
00018246 3628 0008                  		move.w	obX(a0),d3
0001824A                            
0001824A                            loc_1504A:
0001824A 0443 000A                  		subi.w	#$A,d3
0001824E 0A43 000F                  		eori.w	#$F,d3
00018252 49F8 F768                  		lea	(v_anglebuffer).w,a4
00018256 367C FFF0                  		movea.w	#-$10,a3
0001825A 3C3C 0800                  		move.w	#$800,d6
0001825E 7A0E                       		moveq	#$E,d5
00018260 6100 FAAA                  		bsr.w	FindWall
00018264 143C 0040                  		move.b	#$40,d2
00018268 6000 FDA0                  		bra.w	loc_14E0A
0001826C                            ; End of function Sonic_HitWall
0001826C                            
0001826C                            ; ---------------------------------------------------------------------------
0001826C                            ; Subroutine to	detect when an object hits a wall to its left
0001826C                            ; ---------------------------------------------------------------------------
0001826C                            
0001826C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001826C                            
0001826C                            
0001826C                            ObjHitWallLeft:
0001826C D668 0008                  		add.w	obX(a0),d3
00018270 3428 000C                  		move.w	obY(a0),d2
00018274                            		; Engine bug: colliding with left walls is erratic with this function.
00018274                            		; The cause is this: a missing instruction to flip collision on the found
00018274                            		; 16x16 block; this one:
00018274                            		;eori.w	#$F,d3
00018274 49F8 F768                  		lea	(v_anglebuffer).w,a4
00018278 18BC 0000                  		move.b	#0,(a4)
0001827C 367C FFF0                  		movea.w	#-$10,a3
00018280 3C3C 0800                  		move.w	#$800,d6
00018284 7A0E                       		moveq	#$E,d5
00018286 6100 FA84                  		bsr.w	FindWall
0001828A 1638 F768                  		move.b	(v_anglebuffer).w,d3
0001828E 0803 0000                  		btst	#0,d3
00018292 6700                       		beq.s	locret_15098
00018294 163C 0040                  		move.b	#$40,d3
00018298                            
00018298                            locret_15098:
00018298 4E75                       		rts	
0001829A                            ; End of function ObjHitWallLeft
0001829A                            
0001829A                            ; ===========================================================================
0001829A                            
0001829A                            		include	"_incObj\66 Rotating Junction.asm"
0001829A                            ; ---------------------------------------------------------------------------
0001829A                            ; Object 66 - rotating disc junction that grabs Sonic (SBZ)
0001829A                            ; ---------------------------------------------------------------------------
0001829A                            
0001829A                            Junction:
0001829A 7000                       		moveq	#0,d0
0001829C 1028 0024                  		move.b	obRoutine(a0),d0
000182A0 323B 0000                  		move.w	Jun_Index(pc,d0.w),d1
000182A4 4EFB 1000                  		jmp	Jun_Index(pc,d1.w)
000182A8                            ; ===========================================================================
000182A8 0000                       Jun_Index:	dc.w Jun_Main-Jun_Index
000182AA 0000                       		dc.w Jun_Action-Jun_Index
000182AC 0000                       		dc.w Jun_Display-Jun_Index
000182AE 0000                       		dc.w Jun_Release-Jun_Index
000182B0                            
000182B0 =00000034                  jun_frame:	equ $34		; current frame
000182B0 =00000036                  jun_reverse:	equ $36		; flag set when switch is pressed
000182B0 =00000038                  jun_switch:	equ $38		; which switch will reverse the disc
000182B0                            ; ===========================================================================
000182B0                            
000182B0                            Jun_Main:	; Routine 0
000182B0 5428 0024                  		addq.b	#2,obRoutine(a0)
000182B4 323C 0001                  		move.w	#1,d1
000182B8 2248                       		movea.l	a0,a1
000182BA 6000                       		bra.s	@makeitem
000182BC                            ; ===========================================================================
000182BC                            
000182BC                            	@repeat:
000182BC 4EB9 0000 FF18             		jsr	FindFreeObj
000182C2 6600                       		bne.s	@fail
000182C4 12BC 0066                  		move.b	#id_Junction,0(a1)
000182C8 5829 0024                  		addq.b	#4,obRoutine(a1) ; goto Jun_Display next
000182CC 3368 0008 0008             		move.w	obX(a0),obX(a1)
000182D2 3368 000C 000C             		move.w	obY(a0),obY(a1)
000182D8 337C 0180 0018             		move.w	#$180,obPriority(a1)
000182DE 137C 0010 001A             		move.b	#$10,obFrame(a1) ; use large circular sprite
000182E4                            
000182E4                            @makeitem:
000182E4 237C 0000 0000 0004        		move.l	#Map_Jun,obMap(a1)
000182EC 337C 4348 0002             		move.w	#$4348,obGfx(a1)
000182F2 0029 0004 0001             		ori.b	#4,obRender(a1)
000182F8 137C 0038 0014             		move.b	#$38,obActWid(a1)
000182FE                            
000182FE                            	@fail:
000182FE 51C9 FFBC                  		dbf	d1,@repeat
00018302                            
00018302 117C 0030 0014             		move.b	#$30,obActWid(a0)
00018308 317C 0200 0018             		move.w	#$200,obPriority(a0)
0001830E 317C 003C 0030             		move.w	#$3C,$30(a0)
00018314 117C 0001 0034             		move.b	#1,jun_frame(a0)
0001831A 1168 0028 0038             		move.b	obSubtype(a0),jun_switch(a0)
00018320                            
00018320                            Jun_Action:	; Routine 2
00018320 6100 0000                  		bsr.w	Jun_ChkSwitch
00018324 4A28 0001                  		tst.b	obRender(a0)
00018328 6A00 0000                  		bpl.w	Jun_Display
0001832C 323C 0030                  		move.w	#$30,d1
00018330 3401                       		move.w	d1,d2
00018332 3602                       		move.w	d2,d3
00018334 5243                       		addq.w	#1,d3
00018336 3828 0008                  		move.w	obX(a0),d4
0001833A 6100 9B72                  		bsr.w	SolidObject
0001833E 0828 0005 0022             		btst	#5,obStatus(a0)	; is Sonic pushing the disc?
00018344 6700 0000                  		beq.w	Jun_Display	; if not, branch
00018348                            
00018348 43F8 D000                  		lea	(v_player).w,a1
0001834C 720E                       		moveq	#$E,d1
0001834E 3029 0008                  		move.w	obX(a1),d0
00018352 B068 0008                  		cmp.w	obX(a0),d0	; is Sonic to the left of the disc?
00018356 6500                       		bcs.s	@isleft		; if yes, branch
00018358 7207                       		moveq	#7,d1		
0001835A                            
0001835A                            	@isleft:
0001835A B228 001A                  		cmp.b	obFrame(a0),d1	; is the gap next to Sonic?
0001835E 6600                       		bne.s	Jun_Display	; if not, branch
00018360                            
00018360 1141 0032                  		move.b	d1,$32(a0)
00018364 5828 0024                  		addq.b	#4,obRoutine(a0) ; goto Jun_Release next
00018368 11FC 0001 F7C8             		move.b	#1,(f_lockmulti).w ; lock controls
0001836E 137C 0002 001C             		move.b	#id_Roll,obAnim(a1) ; make Sonic use "rolling" animation
00018374 337C 0800 0020             		move.w	#$800,obInertia(a1)
0001837A 337C 0000 0010             		move.w	#0,obVelX(a1)
00018380 337C 0000 0012             		move.w	#0,obVelY(a1)
00018386 08A8 0005 0022             		bclr	#5,obStatus(a0)
0001838C 08A9 0005 0022             		bclr	#5,obStatus(a1)
00018392 08E9 0001 0022             		bset	#1,obStatus(a1)
00018398 3429 0008                  		move.w	obX(a1),d2
0001839C 3629 000C                  		move.w	obY(a1),d3
000183A0 6100 0000                  		bsr.w	Jun_ChgPos
000183A4 D569 0008                  		add.w	d2,obX(a1)
000183A8 D769 000C                  		add.w	d3,obY(a1)
000183AC E0E9 0008                  		asr	obX(a1)
000183B0 E0E9 000C                  		asr	obY(a1)
000183B4                            
000183B4                            Jun_Display:	; Routine 4
000183B4 6000 9660                  		bra.w	RememberState
000183B8                            ; ===========================================================================
000183B8                            
000183B8                            Jun_Release:	; Routine 6
000183B8 1028 001A                  		move.b	obFrame(a0),d0
000183BC 0C00 0004                  		cmpi.b	#4,d0		; is gap pointing down?
000183C0 6700                       		beq.s	@release	; if yes, branch
000183C2 0C00 0007                  		cmpi.b	#7,d0		; is gap pointing right?
000183C6 6600                       		bne.s	@dontrelease	; if not, branch
000183C8                            
000183C8                            	@release:
000183C8 B028 0032                  		cmp.b	$32(a0),d0
000183CC 6700                       		beq.s	@dontrelease
000183CE 43F8 D000                  		lea	(v_player).w,a1
000183D2 337C 0000 0010             		move.w	#0,obVelX(a1)
000183D8 337C 0800 0012             		move.w	#$800,obVelY(a1)
000183DE 0C00 0004                  		cmpi.b	#4,d0
000183E2 6700                       		beq.s	@isdown
000183E4 337C 0800 0010             		move.w	#$800,obVelX(a1)
000183EA 337C 0800 0012             		move.w	#$800,obVelY(a1)
000183F0                            
000183F0                            	@isdown:
000183F0 4238 F7C8                  		clr.b	(f_lockmulti).w	; unlock controls
000183F4 5928 0024                  		subq.b	#4,obRoutine(a0)
000183F8                            
000183F8                            	@dontrelease:
000183F8 6100                       		bsr.s	Jun_ChkSwitch
000183FA 6100                       		bsr.s	Jun_ChgPos
000183FC 6000 9618                  		bra.w	RememberState
00018400                            
00018400                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00018400                            
00018400                            
00018400                            Jun_ChkSwitch:
00018400 45F8 F7E0                  		lea	(f_switch).w,a2
00018404 7000                       		moveq	#0,d0
00018406 1028 0038                  		move.b	jun_switch(a0),d0
0001840A 0832 0000 0000             		btst	#0,(a2,d0.w)	; is switch pressed?
00018410 6700                       		beq.s	@unpressed	; if not, branch
00018412                            
00018412 4A28 0036                  		tst.b	jun_reverse(a0)	; has switch previously	been pressed?
00018416 6600                       		bne.s	@animate	; if yes, branch
00018418 4428 0034                  		neg.b	jun_frame(a0)
0001841C 117C 0001 0036             		move.b	#1,jun_reverse(a0) ; set to "previously pressed"
00018422 6000                       		bra.s	@animate
00018424                            ; ===========================================================================
00018424                            
00018424                            @unpressed:
00018424 4228 0036                  		clr.b	jun_reverse(a0)	; set to "not yet pressed"
00018428                            
00018428                            @animate:
00018428 5328 001E                  		subq.b	#1,obTimeFrame(a0) ; decrement frame timer
0001842C 6A00                       		bpl.s	@nochange	; if time remains, branch
0001842E 117C 0007 001E             		move.b	#7,obTimeFrame(a0)
00018434 1228 0034                  		move.b	jun_frame(a0),d1
00018438 1028 001A                  		move.b	obFrame(a0),d0
0001843C D001                       		add.b	d1,d0
0001843E 0200 000F                  		andi.b	#$F,d0
00018442 1140 001A                  		move.b	d0,obFrame(a0)	; update frame
00018446                            
00018446                            	@nochange:
00018446 4E75                       		rts	
00018448                            ; End of function Jun_ChkSwitch
00018448                            
00018448                            
00018448                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00018448                            
00018448                            
00018448                            Jun_ChgPos:
00018448 43F8 D000                  		lea	(v_player).w,a1
0001844C 7000                       		moveq	#0,d0
0001844E 1028 001A                  		move.b	obFrame(a0),d0
00018452 D040                       		add.w	d0,d0
00018454 45FB 0000                  		lea	@data(pc,d0.w),a2
00018458 101A                       		move.b	(a2)+,d0
0001845A 4880                       		ext.w	d0
0001845C D068 0008                  		add.w	obX(a0),d0
00018460 3340 0008                  		move.w	d0,obX(a1)
00018464 101A                       		move.b	(a2)+,d0
00018466 4880                       		ext.w	d0
00018468 D068 000C                  		add.w	obY(a0),d0
0001846C 3340 000C                  		move.w	d0,obY(a1)
00018470 4E75                       		rts	
00018472                            
00018472                            
00018472 E000 E20E                  @data:		dc.b -$20,    0, -$1E,   $E ; disc x-pos, Sonic x-pos, disc y-pos, Sonic y-pos
00018476 E818 F21E                  		dc.b -$18,  $18,  -$E,  $1E
0001847A 0020 0E1E                  		dc.b    0,  $20,   $E,  $1E
0001847E 1818 1E0E                  		dc.b  $18,  $18,  $1E,   $E
00018482 2000 1EF2                  		dc.b  $20,    0,  $1E,  -$E
00018486 18E8 0EE2                  		dc.b  $18, -$18,   $E, -$1E
0001848A 00E0 F2E2                  		dc.b    0, -$20,  -$E, -$1E
0001848E E8E8 E2F2                  		dc.b -$18, -$18, -$1E,  -$E
0001848E E8E8 E2F2                  		dc.b -$18, -$18, -$1E,  -$E
00018492                            Map_Jun:	include	"_maps\Rotating Junction.asm"
00018492                            ; ---------------------------------------------------------------------------
00018492                            ; Sprite mappings - rotating disc that grabs Sonic (SBZ)
00018492                            ; ---------------------------------------------------------------------------
00018492                            Map_Jun_internal:
00018492 0000                       		dc.w @gap0-Map_Jun_internal
00018494 0000                       		dc.w @gap1-Map_Jun_internal
00018496 0000                       		dc.w @gap2-Map_Jun_internal
00018498 0000                       		dc.w @gap3-Map_Jun_internal
0001849A 0000                       		dc.w @gap4-Map_Jun_internal
0001849C 0000                       		dc.w @gap5-Map_Jun_internal
0001849E 0000                       		dc.w @gap6-Map_Jun_internal
000184A0 0000                       		dc.w @gap7-Map_Jun_internal
000184A2 0000                       		dc.w @gap8-Map_Jun_internal
000184A4 0000                       		dc.w @gap9-Map_Jun_internal
000184A6 0000                       		dc.w @gapA-Map_Jun_internal
000184A8 0000                       		dc.w @gapB-Map_Jun_internal
000184AA 0000                       		dc.w @gapC-Map_Jun_internal
000184AC 0000                       		dc.w @gapD-Map_Jun_internal
000184AE 0000                       		dc.w @gapE-Map_Jun_internal
000184B0 0000                       		dc.w @gapF-Map_Jun_internal
000184B2 0000                       		dc.w @circle-Map_Jun_internal
000184B4 06                         @gap0:		dc.b 6
000184B5 E805 0022 D0               		dc.b $E8, 5, 0,	$22, $D0
000184BA 0805 1022 D0               		dc.b 8,	5, $10,	$22, $D0
000184BF E80A 0000 C8               		dc.b $E8, $A, 0, 0, $C8
000184C4 E80A 0800 E0               		dc.b $E8, $A, 8, 0, $E0
000184C9 000A 1000 C8               		dc.b 0,	$A, $10, 0, $C8
000184CE 000A 1800 E0               		dc.b 0,	$A, $18, 0, $E0
000184D3 06                         @gap1:		dc.b 6
000184D4 F803 0026 D0               		dc.b $F8, 3, 0,	$26, $D0
000184D9 1805 002A D8               		dc.b $18, 5, 0,	$2A, $D8
000184DE F60A 0000 CA               		dc.b $F6, $A, 0, 0, $CA
000184E3 F60A 0800 E2               		dc.b $F6, $A, 8, 0, $E2
000184E8 0E0A 1000 CA               		dc.b $E, $A, $10, 0, $CA
000184ED 0E0A 1800 E2               		dc.b $E, $A, $18, 0, $E2
000184F2 06                         @gap2:		dc.b 6
000184F3 0006 002E D0               		dc.b 0,	6, 0, $2E, $D0
000184F8 2009 0034 E8               		dc.b $20, 9, 0,	$34, $E8
000184FD 000A 0000 D0               		dc.b 0,	$A, 0, 0, $D0
00018502 000A 0800 E8               		dc.b 0,	$A, 8, 0, $E8
00018507 180A 1000 D0               		dc.b $18, $A, $10, 0, $D0
0001850C 180A 1800 E8               		dc.b $18, $A, $18, 0, $E8
00018511 06                         @gap3:		dc.b 6
00018512 0807 003A D8               		dc.b 8,	7, 0, $3A, $D8
00018517 2808 0042 F0               		dc.b $28, 8, 0,	$42, $F0
0001851C 060A 0000 DA               		dc.b 6,	$A, 0, 0, $DA
00018521 060A 0800 F2               		dc.b 6,	$A, 8, 0, $F2
00018526 1E0A 1000 DA               		dc.b $1E, $A, $10, 0, $DA
0001852B 1E0A 1800 F2               		dc.b $1E, $A, $18, 0, $F2
00018530 06                         @gap4:		dc.b 6
00018531 2005 0045 E8               		dc.b $20, 5, 0,	$45, $E8
00018536 2005 0845 08               		dc.b $20, 5, 8,	$45, 8
0001853B 080A 0000 E8               		dc.b 8,	$A, 0, 0, $E8
00018540 080A 0800 00               		dc.b 8,	$A, 8, 0, 0
00018545 200A 1000 E8               		dc.b $20, $A, $10, 0, $E8
0001854A 200A 1800 00               		dc.b $20, $A, $18, 0, 0
0001854F 06                         @gap5:		dc.b 6
00018550 2808 0842 F8               		dc.b $28, 8, 8,	$42, $F8
00018555 0807 083A 18               		dc.b 8,	7, 8, $3A, $18
0001855A 060A 0000 F6               		dc.b 6,	$A, 0, 0, $F6
0001855F 060A 0800 0E               		dc.b 6,	$A, 8, 0, $E
00018564 1E0A 1000 F6               		dc.b $1E, $A, $10, 0, $F6
00018569 1E0A 1800 0E               		dc.b $1E, $A, $18, 0, $E
0001856E 06                         @gap6:		dc.b 6
0001856F 2009 0834 00               		dc.b $20, 9, 8,	$34, 0
00018574 0006 082E 20               		dc.b 0,	6, 8, $2E, $20
00018579 000A 0000 00               		dc.b 0,	$A, 0, 0, 0
0001857E 000A 0800 18               		dc.b 0,	$A, 8, 0, $18
00018583 180A 1000 00               		dc.b $18, $A, $10, 0, 0
00018588 180A 1800 18               		dc.b $18, $A, $18, 0, $18
0001858D 06                         @gap7:		dc.b 6
0001858E 1805 082A 18               		dc.b $18, 5, 8,	$2A, $18
00018593 F803 0826 28               		dc.b $F8, 3, 8,	$26, $28
00018598 F60A 0000 06               		dc.b $F6, $A, 0, 0, 6
0001859D F60A 0800 1E               		dc.b $F6, $A, 8, 0, $1E
000185A2 0E0A 1000 06               		dc.b $E, $A, $10, 0, 6
000185A7 0E0A 1800 1E               		dc.b $E, $A, $18, 0, $1E
000185AC 06                         @gap8:		dc.b 6
000185AD E805 0822 20               		dc.b $E8, 5, 8,	$22, $20
000185B2 0805 1822 20               		dc.b 8,	5, $18,	$22, $20
000185B7 E80A 0000 08               		dc.b $E8, $A, 0, 0, 8
000185BC E80A 0800 20               		dc.b $E8, $A, 8, 0, $20
000185C1 000A 1000 08               		dc.b 0,	$A, $10, 0, 8
000185C6 000A 1800 20               		dc.b 0,	$A, $18, 0, $20
000185CB 06                         @gap9:		dc.b 6
000185CC D805 182A 18               		dc.b $D8, 5, $18, $2A, $18
000185D1 E803 1826 28               		dc.b $E8, 3, $18, $26, $28
000185D6 DA0A 0000 06               		dc.b $DA, $A, 0, 0, 6
000185DB DA0A 0800 1E               		dc.b $DA, $A, 8, 0, $1E
000185E0 F20A 1000 06               		dc.b $F2, $A, $10, 0, 6
000185E5 F20A 1800 1E               		dc.b $F2, $A, $18, 0, $1E
000185EA 06                         @gapA:		dc.b 6
000185EB D009 1834 00               		dc.b $D0, 9, $18, $34, 0
000185F0 E806 182E 20               		dc.b $E8, 6, $18, $2E, $20
000185F5 D00A 0000 00               		dc.b $D0, $A, 0, 0, 0
000185FA D00A 0800 18               		dc.b $D0, $A, 8, 0, $18
000185FF E80A 1000 00               		dc.b $E8, $A, $10, 0, 0
00018604 E80A 1800 18               		dc.b $E8, $A, $18, 0, $18
00018609 06                         @gapB:		dc.b 6
0001860A D008 1842 F8               		dc.b $D0, 8, $18, $42, $F8
0001860F D807 183A 18               		dc.b $D8, 7, $18, $3A, $18
00018614 CA0A 0000 F6               		dc.b $CA, $A, 0, 0, $F6
00018619 CA0A 0800 0E               		dc.b $CA, $A, 8, 0, $E
0001861E E20A 1000 F6               		dc.b $E2, $A, $10, 0, $F6
00018623 E20A 1800 0E               		dc.b $E2, $A, $18, 0, $E
00018628 06                         @gapC:		dc.b 6
00018629 D005 1045 E8               		dc.b $D0, 5, $10, $45, $E8
0001862E D005 1845 08               		dc.b $D0, 5, $18, $45, 8
00018633 C80A 0000 E8               		dc.b $C8, $A, 0, 0, $E8
00018638 C80A 0800 00               		dc.b $C8, $A, 8, 0, 0
0001863D E00A 1000 E8               		dc.b $E0, $A, $10, 0, $E8
00018642 E00A 1800 00               		dc.b $E0, $A, $18, 0, 0
00018647 06                         @gapD:		dc.b 6
00018648 D807 103A D8               		dc.b $D8, 7, $10, $3A, $D8
0001864D D008 1042 F0               		dc.b $D0, 8, $10, $42, $F0
00018652 CA0A 0000 DA               		dc.b $CA, $A, 0, 0, $DA
00018657 CA0A 0800 F2               		dc.b $CA, $A, 8, 0, $F2
0001865C E20A 1000 DA               		dc.b $E2, $A, $10, 0, $DA
00018661 E20A 1800 F2               		dc.b $E2, $A, $18, 0, $F2
00018666 06                         @gapE:		dc.b 6
00018667 E806 102E D0               		dc.b $E8, 6, $10, $2E, $D0
0001866C D009 1034 E8               		dc.b $D0, 9, $10, $34, $E8
00018671 D00A 0000 D0               		dc.b $D0, $A, 0, 0, $D0
00018676 D00A 0800 E8               		dc.b $D0, $A, 8, 0, $E8
0001867B E80A 1000 D0               		dc.b $E8, $A, $10, 0, $D0
00018680 E80A 1800 E8               		dc.b $E8, $A, $18, 0, $E8
00018685 06                         @gapF:		dc.b 6
00018686 E803 1026 D0               		dc.b $E8, 3, $10, $26, $D0
0001868B D805 102A D8               		dc.b $D8, 5, $10, $2A, $D8
00018690 DA0A 0000 CA               		dc.b $DA, $A, 0, 0, $CA
00018695 DA0A 0800 E2               		dc.b $DA, $A, 8, 0, $E2
0001869A F20A 1000 CA               		dc.b $F2, $A, $10, 0, $CA
0001869F F20A 1800 E2               		dc.b $F2, $A, $18, 0, $E2
000186A4 0C                         @circle:	dc.b $C
000186A5 C80D 0009 E0               		dc.b $C8, $D, 0, 9, $E0
000186AA D00A 0011 D0               		dc.b $D0, $A, 0, $11, $D0
000186AF E007 001A C8               		dc.b $E0, 7, 0,	$1A, $C8
000186B4 C80D 0809 00               		dc.b $C8, $D, 8, 9, 0
000186B9 D00A 0811 18               		dc.b $D0, $A, 8, $11, $18
000186BE E007 081A 28               		dc.b $E0, 7, 8,	$1A, $28
000186C3 0007 101A C8               		dc.b 0,	7, $10,	$1A, $C8
000186C8 180A 1011 D0               		dc.b $18, $A, $10, $11,	$D0
000186CD 280D 1009 E0               		dc.b $28, $D, $10, 9, $E0
000186D2 280D 1809 00               		dc.b $28, $D, $18, 9, 0
000186D7 180A 1811 18               		dc.b $18, $A, $18, $11,	$18
000186DC 0007 181A 28               		dc.b 0,	7, $18,	$1A, $28
000186E2 00                         		even
000186E2 00                         		even
000186E2                            		include	"_incObj\67 Running Disc.asm"
000186E2                            ; ---------------------------------------------------------------------------
000186E2                            ; Object 67 - disc that	you run	around (SBZ)
000186E2                            ; ---------------------------------------------------------------------------
000186E2                            
000186E2                            RunningDisc:
000186E2 7000                       		moveq	#0,d0
000186E4 1028 0024                  		move.b	obRoutine(a0),d0
000186E8 323B 0000                  		move.w	Disc_Index(pc,d0.w),d1
000186EC 4EFB 1000                  		jmp	Disc_Index(pc,d1.w)
000186F0                            ; ===========================================================================
000186F0 0000                       Disc_Index:	dc.w Disc_Main-Disc_Index
000186F2 0000                       		dc.w Disc_Action-Disc_Index
000186F4                            
000186F4 =00000032                  disc_origX:	equ $32		; original x-axis position
000186F4 =00000030                  disc_origY:	equ $30		; original y-axis position
000186F4                            ; ===========================================================================
000186F4                            
000186F4                            Disc_Main:	; Routine 0
000186F4 5428 0024                  		addq.b	#2,obRoutine(a0)
000186F8 217C 0000 0000 0004        		move.l	#Map_Disc,obMap(a0)
00018700 317C C344 0002             		move.w	#$C344,obGfx(a0)
00018706 117C 0004 0001             		move.b	#4,obRender(a0)
0001870C 317C 0200 0018             		move.w	#$200,obPriority(a0)
00018712 117C 0008 0014             		move.b	#8,obActWid(a0)
00018718 3168 0008 0032             		move.w	obX(a0),disc_origX(a0)
0001871E 3168 000C 0030             		move.w	obY(a0),disc_origY(a0)
00018724 117C 0018 0034             		move.b	#$18,$34(a0)
0001872A 117C 0048 0038             		move.b	#$48,$38(a0)
00018730 1228 0028                  		move.b	obSubtype(a0),d1 ; get object type
00018734 0201 000F                  		andi.b	#$F,d1		; read only the	2nd digit
00018738 6700                       		beq.s	@typeis0	; branch if 0
0001873A 117C 0010 0034             		move.b	#$10,$34(a0)
00018740 117C 0038 0038             		move.b	#$38,$38(a0)
00018746                            
00018746                            	@typeis0:
00018746 1228 0028                  		move.b	obSubtype(a0),d1 ; get object type
0001874A 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
0001874E 4881                       		ext.w	d1
00018750 E741                       		asl.w	#3,d1
00018752 3141 0036                  		move.w	d1,$36(a0)
00018756 1028 0022                  		move.b	obStatus(a0),d0
0001875A E418                       		ror.b	#2,d0
0001875C 0200 00C0                  		andi.b	#$C0,d0
00018760 1140 0026                  		move.b	d0,obAngle(a0)
00018764                            
00018764                            Disc_Action:	; Routine 2
00018764 6100 0000                  		bsr.w	Disc_MoveSonic
00018768 6100 0000                  		bsr.w	Disc_MoveSpot
0001876C 6000 0000                  		bra.w	Disc_ChkDel
00018770                            ; ===========================================================================
00018770                            
00018770                            Disc_MoveSonic:
00018770 7400                       		moveq	#0,d2
00018772 1428 0038                  		move.b	$38(a0),d2
00018776 3602                       		move.w	d2,d3
00018778 D643                       		add.w	d3,d3
0001877A 43F8 D000                  		lea	(v_player).w,a1
0001877E 3029 0008                  		move.w	obX(a1),d0
00018782 9068 0032                  		sub.w	disc_origX(a0),d0
00018786 D042                       		add.w	d2,d0
00018788 B043                       		cmp.w	d3,d0
0001878A 6400                       		bcc.s	loc_155A8
0001878C 3229 000C                  		move.w	obY(a1),d1
00018790 9268 0030                  		sub.w	disc_origY(a0),d1
00018794 D242                       		add.w	d2,d1
00018796 B243                       		cmp.w	d3,d1
00018798 6400                       		bcc.s	loc_155A8
0001879A 0829 0001 0022             		btst	#1,obStatus(a1)
000187A0 6700                       		beq.s	loc_155B8
000187A2 4228 003A                  		clr.b	$3A(a0)
000187A6 4E75                       		rts	
000187A8                            ; ===========================================================================
000187A8                            
000187A8                            loc_155A8:
000187A8 4A28 003A                  		tst.b	$3A(a0)
000187AC 6700                       		beq.s	locret_155B6
000187AE 4229 0038                  		clr.b	$38(a1)
000187B2 4228 003A                  		clr.b	$3A(a0)
000187B6                            
000187B6                            locret_155B6:
000187B6 4E75                       		rts	
000187B8                            ; ===========================================================================
000187B8                            
000187B8                            loc_155B8:
000187B8 4A28 003A                  		tst.b	$3A(a0)
000187BC 6600                       		bne.s	loc_155E2
000187BE 117C 0001 003A             		move.b	#1,$3A(a0)
000187C4 0829 0002 0022             		btst	#2,obStatus(a1)
000187CA 6600                       		bne.s	loc_155D0
000187CC 4229 001C                  		clr.b	obAnim(a1)
000187D0                            
000187D0                            loc_155D0:
000187D0 08A9 0005 0022             		bclr	#5,obStatus(a1)
000187D6 137C 0001 001D             		move.b	#1,obNextAni(a1)
000187DC 137C 0001 0038             		move.b	#1,$38(a1)
000187E2                            
000187E2                            loc_155E2:
000187E2 3029 0020                  		move.w	obInertia(a1),d0
000187E6 4A68 0036                  		tst.w	$36(a0)
000187EA 6A00                       		bpl.s	loc_15608
000187EC 0C40 FC00                  		cmpi.w	#-$400,d0
000187F0 6F00                       		ble.s	loc_155FA
000187F2 337C FC00 0020             		move.w	#-$400,obInertia(a1)
000187F8 4E75                       		rts	
000187FA                            ; ===========================================================================
000187FA                            
000187FA                            loc_155FA:
000187FA 0C40 F100                  		cmpi.w	#-$F00,d0
000187FE 6C00                       		bge.s	locret_15606
00018800 337C F100 0020             		move.w	#-$F00,obInertia(a1)
00018806                            
00018806                            locret_15606:
00018806 4E75                       		rts	
00018808                            ; ===========================================================================
00018808                            
00018808                            loc_15608:
00018808 0C40 0400                  		cmpi.w	#$400,d0
0001880C 6C00                       		bge.s	loc_15616
0001880E 337C 0400 0020             		move.w	#$400,obInertia(a1)
00018814 4E75                       		rts	
00018816                            ; ===========================================================================
00018816                            
00018816                            loc_15616:
00018816 0C40 0F00                  		cmpi.w	#$F00,d0
0001881A 6F00                       		ble.s	locret_15622
0001881C 337C 0F00 0020             		move.w	#$F00,obInertia(a1)
00018822                            
00018822                            locret_15622:
00018822 4E75                       		rts	
00018824                            ; ===========================================================================
00018824                            
00018824                            Disc_MoveSpot:
00018824 3028 0036                  		move.w	$36(a0),d0
00018828 D168 0026                  		add.w	d0,obAngle(a0)
0001882C 1028 0026                  		move.b	obAngle(a0),d0
00018830 4EB9 0000 3A82             		jsr	(CalcSine).l
00018836 3428 0030                  		move.w	disc_origY(a0),d2
0001883A 3628 0032                  		move.w	disc_origX(a0),d3
0001883E 7800                       		moveq	#0,d4
00018840 1828 0034                  		move.b	$34(a0),d4
00018844 E14C                       		lsl.w	#8,d4
00018846 2A04                       		move.l	d4,d5
00018848 C9C0                       		muls.w	d0,d4
0001884A 4844                       		swap	d4
0001884C CBC1                       		muls.w	d1,d5
0001884E 4845                       		swap	d5
00018850 D842                       		add.w	d2,d4
00018852 DA43                       		add.w	d3,d5
00018854 3144 000C                  		move.w	d4,obY(a0)
00018858 3145 0008                  		move.w	d5,obX(a0)
0001885C 4E75                       		rts	
0001885E                            ; ===========================================================================
0001885E                            
0001885E                            Disc_ChkDel:
0001887A 4EF9 0000 FA8C             		jmp	(DisplaySprite).l
00018880                            
00018880                            	@delete:
00018880 4EF9 0000 FACC             		jmp	(DeleteObject).l
00018880 4EF9 0000 FACC             		jmp	(DeleteObject).l
00018886                            Map_Disc:	include	"_maps\Running Disc.asm"
00018886                            ; ---------------------------------------------------------------------------
00018886                            ; Sprite mappings - disc that you run around (SBZ)
00018886                            ; (It's just a small blob that moves around in a circle. The disc itself is
00018886                            ; part of the level tiles.)
00018886                            ; ---------------------------------------------------------------------------
00018886                            Map_Disc_internal:
00018886 0000                       		dc.w @spot-Map_Disc_internal
00018888 01                         @spot:		dc.b 1
00018889 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0001888E                            		even
0001888E                            		even
0001888E                            		include	"_incObj\68 Conveyor Belt.asm"
0001888E                            ; ---------------------------------------------------------------------------
0001888E                            ; Object 68 - conveyor belts (SBZ)
0001888E                            ; ---------------------------------------------------------------------------
0001888E                            
0001888E                            Conveyor:
0001888E 7000                       		moveq	#0,d0
00018890 1028 0024                  		move.b	obRoutine(a0),d0
00018894 323B 0000                  		move.w	Conv_Index(pc,d0.w),d1
00018898 4EFB 1000                  		jmp	Conv_Index(pc,d1.w)
0001889C                            ; ===========================================================================
0001889C 0000                       Conv_Index:	dc.w Conv_Main-Conv_Index
0001889E 0000                       		dc.w Conv_Action-Conv_Index
000188A0                            
000188A0 =00000036                  conv_speed:	equ $36
000188A0 =00000038                  conv_width:	equ $38
000188A0                            ; ===========================================================================
000188A0                            
000188A0                            Conv_Main:	; Routine 0
000188A0 5428 0024                  		addq.b	#2,obRoutine(a0)
000188A4 117C 0080 0038             		move.b	#128,conv_width(a0) ; set width to 128 pixels
000188AA 1228 0028                  		move.b	obSubtype(a0),d1 ; get object type
000188AE 0201 000F                  		andi.b	#$F,d1		; read only the	2nd digit
000188B2 6700                       		beq.s	@typeis0	; if zero, branch
000188B4 117C 0038 0038             		move.b	#56,conv_width(a0) ; set width to 56 pixels
000188BA                            
000188BA                            	@typeis0:
000188BA 1228 0028                  		move.b	obSubtype(a0),d1 ; get object type
000188BE 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
000188C2 4881                       		ext.w	d1
000188C4 E841                       		asr.w	#4,d1
000188C6 3141 0036                  		move.w	d1,conv_speed(a0) ; set belt speed
000188CA                            
000188CA                            Conv_Action:	; Routine 2
000188CA 6100                       		bsr.s	@movesonic
000188E8 4E75                       		rts	
000188EA                            
000188EA                            	@delete:
000188EA 4EF9 0000 FACC             		jmp	(DeleteObject).l
000188F0                            ; ===========================================================================
000188F0                            
000188F0                            @movesonic:
000188F0 7400                       		moveq	#0,d2
000188F2 1428 0038                  		move.b	conv_width(a0),d2
000188F6 3602                       		move.w	d2,d3
000188F8 D643                       		add.w	d3,d3
000188FA 43F8 D000                  		lea	(v_player).w,a1
000188FE 3029 0008                  		move.w	obX(a1),d0
00018902 9068 0008                  		sub.w	obX(a0),d0
00018906 D042                       		add.w	d2,d0
00018908 B043                       		cmp.w	d3,d0
0001890A 6400                       		bcc.s	@notonconveyor
0001890C 3229 000C                  		move.w	obY(a1),d1
00018910 9268 000C                  		sub.w	obY(a0),d1
00018914 0641 0030                  		addi.w	#$30,d1
00018918 0C41 0030                  		cmpi.w	#$30,d1
0001891C 6400                       		bcc.s	@notonconveyor
0001891E 0829 0001 0022             		btst	#1,obStatus(a1)
00018924 6600                       		bne.s	@notonconveyor
00018926 3028 0036                  		move.w	conv_speed(a0),d0
0001892A D169 0008                  		add.w	d0,obX(a1)
0001892E                            
0001892E                            	@notonconveyor:
0001892E 4E75                       		rts	
0001892E 4E75                       		rts	
00018930                            		include	"_incObj\69 SBZ Spinning Platforms.asm"
00018930                            ; ---------------------------------------------------------------------------
00018930                            ; Object 69 - spinning platforms and trapdoors (SBZ)
00018930                            ; ---------------------------------------------------------------------------
00018930                            
00018930                            SpinPlatform:
00018930 7000                       		moveq	#0,d0
00018932 1028 0024                  		move.b	obRoutine(a0),d0
00018936 323B 0000                  		move.w	Spin_Index(pc,d0.w),d1
0001893A 4EFB 1000                  		jmp	Spin_Index(pc,d1.w)
0001893E                            ; ===========================================================================
0001893E 0000                       Spin_Index:	dc.w Spin_Main-Spin_Index
00018940 0000                       		dc.w Spin_Trapdoor-Spin_Index
00018942 0000                       		dc.w Spin_Spinner-Spin_Index
00018944                            
00018944 =00000030                  spin_timer:	equ $30		; time counter until change
00018944 =00000032                  spin_timelen:	equ $32		; time between changes (general)
00018944                            ; ===========================================================================
00018944                            
00018944                            Spin_Main:	; Routine 0
00018944 5428 0024                  		addq.b	#2,obRoutine(a0)
00018948 217C 0000 0000 0004        		move.l	#Map_Trap,obMap(a0)
00018950 317C 4492 0002             		move.w	#$4492,obGfx(a0)
00018956 0028 0004 0001             		ori.b	#4,obRender(a0)
0001895C 117C 0080 0014             		move.b	#$80,obActWid(a0)
00018962 7000                       		moveq	#0,d0
00018964 1028 0028                  		move.b	obSubtype(a0),d0
00018968 0240 000F                  		andi.w	#$F,d0
0001896C C0FC 003C                  		mulu.w	#$3C,d0
00018970 3140 0032                  		move.w	d0,spin_timelen(a0)
00018974 4A28 0028                  		tst.b	obSubtype(a0)	; is subtype $8x?
00018978 6A00                       		bpl.s	Spin_Trapdoor	; if not, branch
0001897A                            
0001897A 5428 0024                  		addq.b	#2,obRoutine(a0) ; goto Spin_Spinner next
0001897E 217C 0000 0000 0004        		move.l	#Map_Spin,obMap(a0)
00018986 317C 04DF 0002             		move.w	#$4DF,obGfx(a0)
0001898C 117C 0010 0014             		move.b	#$10,obActWid(a0)
00018992 117C 0002 001C             		move.b	#2,obAnim(a0)
00018998 7000                       		moveq	#0,d0
0001899A 1028 0028                  		move.b	obSubtype(a0),d0 ; get object type
0001899E 3200                       		move.w	d0,d1
000189A0 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
000189A4 C0FC 0006                  		mulu.w	#6,d0		; multiply by 6
000189A8 3140 0030                  		move.w	d0,spin_timer(a0)
000189AC 3140 0032                  		move.w	d0,spin_timelen(a0) ; set time delay
000189B0 0241 0070                  		andi.w	#$70,d1
000189B4 0641 0010                  		addi.w	#$10,d1
000189B8 E549                       		lsl.w	#2,d1
000189BA 5341                       		subq.w	#1,d1
000189BC 3141 0036                  		move.w	d1,$36(a0)
000189C0 6000                       		bra.s	Spin_Spinner
000189C2                            ; ===========================================================================
000189C2                            
000189C2                            Spin_Trapdoor:	; Routine 2
000189C2 5368 0030                  		subq.w	#1,spin_timer(a0) ; decrement timer
000189C6 6A00                       		bpl.s	@animate	; if time remains, branch
000189C8                            
000189C8 3168 0032 0030             		move.w	spin_timelen(a0),spin_timer(a0)
000189CE 0868 0000 001C             		bchg	#0,obAnim(a0)
000189D4 4A28 0001                  		tst.b	obRender(a0)
000189D8 6A00                       		bpl.s	@animate
000189E4                            
000189E4                            	@animate:
000189E4 43F9 0000 0000             		lea	(Ani_Spin).l,a1
000189EA 4EB9 0000 CB4E             		jsr	(AnimateSprite).l
000189F0 4A28 001A                  		tst.b	obFrame(a0)	; is frame number 0 displayed?
000189F4 6600                       		bne.s	@notsolid	; if not, branch
000189F6 323C 004B                  		move.w	#$4B,d1
000189FA 343C 000C                  		move.w	#$C,d2
000189FE 3602                       		move.w	d2,d3
00018A00 5243                       		addq.w	#1,d3
00018A02 3828 0008                  		move.w	obX(a0),d4
00018A06 6100 94A6                  		bsr.w	SolidObject
00018A0A 6000 900A                  		bra.w	RememberState
00018A0E                            ; ===========================================================================
00018A0E                            
00018A0E                            @notsolid:
00018A0E 0828 0003 0022             		btst	#3,obStatus(a0) ; is Sonic standing on the trapdoor?
00018A14 6700                       		beq.s	@display	; if not, branch
00018A16 43F8 D000                  		lea	(v_player).w,a1
00018A1A 08A9 0003 0022             		bclr	#3,obStatus(a1)
00018A20 08A8 0003 0022             		bclr	#3,obStatus(a0)
00018A26 4228 0025                  		clr.b	obSolid(a0)
00018A2A                            
00018A2A                            	@display:
00018A2A 6000 8FEA                  		bra.w	RememberState
00018A2E                            ; ===========================================================================
00018A2E                            
00018A2E                            Spin_Spinner:	; Routine 4
00018A2E 3038 FE04                  		move.w	(v_framecount).w,d0
00018A32 C068 0036                  		and.w	$36(a0),d0
00018A36 6600                       		bne.s	@delay
00018A38 117C 0001 0034             		move.b	#1,$34(a0)
00018A3E                            
00018A3E                            	@delay:
00018A3E 4A28 0034                  		tst.b	$34(a0)
00018A42 6700                       		beq.s	@animate
00018A44 5368 0030                  		subq.w	#1,spin_timer(a0)
00018A48 6A00                       		bpl.s	@animate
00018A4A 3168 0032 0030             		move.w	spin_timelen(a0),spin_timer(a0)
00018A50 4228 0034                  		clr.b	$34(a0)
00018A54 0868 0000 001C             		bchg	#0,obAnim(a0)
00018A5A                            
00018A5A                            	@animate:
00018A5A 43F9 0000 0000             		lea	(Ani_Spin).l,a1
00018A60 4EB9 0000 CB4E             		jsr	(AnimateSprite).l
00018A66 4A28 001A                  		tst.b	obFrame(a0)	; check	if frame number	0 is displayed
00018A6A 6600                       		bne.s	@notsolid2	; if not, branch
00018A6C 323C 001B                  		move.w	#$1B,d1
00018A70 343C 0007                  		move.w	#7,d2
00018A74 3602                       		move.w	d2,d3
00018A76 5243                       		addq.w	#1,d3
00018A78 3828 0008                  		move.w	obX(a0),d4
00018A7C 6100 9430                  		bsr.w	SolidObject
00018A80 6000 8F94                  		bra.w	RememberState
00018A84                            ; ===========================================================================
00018A84                            
00018A84                            @notsolid2:
00018A84 0828 0003 0022             		btst	#3,obStatus(a0)
00018A8A 6700                       		beq.s	@display
00018A8C 43F8 D000                  		lea	(v_player).w,a1
00018A90 08A9 0003 0022             		bclr	#3,obStatus(a1)
00018A96 08A8 0003 0022             		bclr	#3,obStatus(a0)
00018A9C 4228 0025                  		clr.b	obSolid(a0)
00018AA0                            
00018AA0                            	@display:
00018AA0 6000 8F74                  		bra.w	RememberState
00018AA0 6000 8F74                  		bra.w	RememberState
00018AA4                            		include	"_anim\SBZ Spinning Platforms.asm"
00018AA4                            ; ---------------------------------------------------------------------------
00018AA4                            ; Animation script - trapdoor (SBZ)
00018AA4                            ; ---------------------------------------------------------------------------
00018AA4 0000                       Ani_Spin:	dc.w @trapopen-Ani_Spin
00018AA6 0000                       		dc.w @trapclose-Ani_Spin
00018AA8 0000                       		dc.w @spin1-Ani_Spin
00018AAA 0000                       		dc.w @spin2-Ani_Spin
00018AAC 0300 0102 FE01             @trapopen:	dc.b 3,	0, 1, 2, afBack, 1
00018AB2 0302 0100 FE01             @trapclose:	dc.b 3,	2, 1, 0, afBack, 1
00018AB8 0100 0102 0304 4342 4140+  @spin1:		dc.b 1,	0, 1, 2, 3, 4, $43, $42, $41, $40, $61,	$62, $63, $64, $23, $22, $21, 0, afBack, 1
00018ACC 0100 0102 0304 4342 4140+  @spin2:		dc.b 1,	0, 1, 2, 3, 4, $43, $42, $41, $40, $61,	$62, $63, $64, $23, $22, $21, 0, afBack, 1
00018AE0                            		even
00018AE0                            		even
00018AE0                            Map_Trap:	include	"_maps\Trapdoor.asm"
00018AE0                            ; ---------------------------------------------------------------------------
00018AE0                            ; Sprite mappings - trapdoor (SBZ)
00018AE0                            ; ---------------------------------------------------------------------------
00018AE0                            Map_Trap_internal:
00018AE0 0000                       		dc.w @closed-Map_Trap_internal
00018AE2 0000                       		dc.w @half-Map_Trap_internal
00018AE4 0000                       		dc.w @open-Map_Trap_internal
00018AE6 04                         @closed:	dc.b 4
00018AE7 F40E 0000 C0               		dc.b $F4, $E, 0, 0, $C0
00018AEC F40E 0800 E0               		dc.b $F4, $E, 8, 0, $E0
00018AF1 F40E 0000 00               		dc.b $F4, $E, 0, 0, 0
00018AF6 F40E 0800 20               		dc.b $F4, $E, 8, 0, $20
00018AFB 08                         @half:		dc.b 8
00018AFC F20F 000C B6               		dc.b $F2, $F, 0, $C, $B6
00018B01 1A0F 180C D6               		dc.b $1A, $F, $18, $C, $D6
00018B06 020A 001C D6               		dc.b 2,	$A, 0, $1C, $D6
00018B0B 120A 181C BE               		dc.b $12, $A, $18, $1C,	$BE
00018B10 F20F 080C 2A               		dc.b $F2, $F, 8, $C, $2A
00018B15 1A0F 100C 0A               		dc.b $1A, $F, $10, $C, $A
00018B1A 020A 081C 12               		dc.b 2,	$A, 8, $1C, $12
00018B1F 120A 101C 2A               		dc.b $12, $A, $10, $1C,	$2A
00018B24 04                         @open:		dc.b 4
00018B25 000B 0025 B4               		dc.b 0,	$B, 0, $25, $B4
00018B2A 200B 1025 B4               		dc.b $20, $B, $10, $25,	$B4
00018B2F 000B 0025 34               		dc.b 0,	$B, 0, $25, $34
00018B34 200B 1025 34               		dc.b $20, $B, $10, $25,	$34
00018B3A 00                         		even
00018B3A 00                         		even
00018B3A                            Map_Spin:	include	"_maps\SBZ Spinning Platforms.asm"
00018B3A                            ; ---------------------------------------------------------------------------
00018B3A                            ; Sprite mappings - spinning platforms (SBZ)
00018B3A                            ; ---------------------------------------------------------------------------
00018B3A                            Map_Spin_internal:
00018B3A 0000                       		dc.w @flat-Map_Spin_internal
00018B3C 0000                       		dc.w @spin1-Map_Spin_internal
00018B3E 0000                       		dc.w @spin2-Map_Spin_internal
00018B40 0000                       		dc.w @spin3-Map_Spin_internal
00018B42 0000                       		dc.w @spin4-Map_Spin_internal
00018B44 02                         @flat:		dc.b 2
00018B45 F805 0000 F0               		dc.b $F8, 5, 0,	0, $F0
00018B4A F805 0800 00               		dc.b $F8, 5, 8,	0, 0
00018B4F 02                         @spin1:		dc.b 2
00018B50 F00D 0014 F0               		dc.b $F0, $D, 0, $14, $F0
00018B55 000D 001C F0               		dc.b 0,	$D, 0, $1C, $F0
00018B5A 02                         @spin2:		dc.b 2
00018B5B F009 0004 F0               		dc.b $F0, 9, 0,	4, $F0
00018B60 0009 000A F8               		dc.b 0,	9, 0, $A, $F8
00018B65 02                         @spin3:		dc.b 2
00018B66 F009 0024 F0               		dc.b $F0, 9, 0,	$24, $F0
00018B6B 0009 002A F8               		dc.b 0,	9, 0, $2A, $F8
00018B70 02                         @spin4:		dc.b 2
00018B71 F005 0010 F8               		dc.b $F0, 5, 0,	$10, $F8
00018B76 0005 1010 F8               		dc.b 0,	5, $10,	$10, $F8
00018B7C 00                         		even
00018B7C 00                         		even
00018B7C                            		include	"_incObj\6A Saws and Pizza Cutters.asm"
00018B7C                            ; ---------------------------------------------------------------------------
00018B7C                            ; Object 6A - ground saws and pizza cutters (SBZ)
00018B7C                            ; ---------------------------------------------------------------------------
00018B7C                            
00018B7C                            Saws:
00018B7C 7000                       		moveq	#0,d0
00018B7E 1028 0024                  		move.b	obRoutine(a0),d0
00018B82 323B 0000                  		move.w	Saw_Index(pc,d0.w),d1
00018B86 4EFB 1000                  		jmp	Saw_Index(pc,d1.w)
00018B8A                            ; ===========================================================================
00018B8A 0000                       Saw_Index:	dc.w Saw_Main-Saw_Index
00018B8C 0000                       		dc.w Saw_Action-Saw_Index
00018B8E                            
00018B8E =0000003A                  saw_origX:	equ $3A		; original x-axis position
00018B8E =00000038                  saw_origY:	equ $38		; original y-axis position
00018B8E =0000003D                  saw_here:	equ $3D		; flag set when the ground saw appears
00018B8E                            ; ===========================================================================
00018B8E                            
00018B8E                            Saw_Main:	; Routine 0
00018B8E 5428 0024                  		addq.b	#2,obRoutine(a0)
00018B92 217C 0000 0000 0004        		move.l	#Map_Saw,obMap(a0)
00018B9A 317C 43AD 0002             		move.w	#$43AD,obGfx(a0)
00018BA0 117C 0004 0001             		move.b	#4,obRender(a0)
00018BA6 317C 0200 0018             		move.w	#$200,obPriority(a0)
00018BAC 117C 0020 0014             		move.b	#$20,obActWid(a0)
00018BB2 3168 0008 003A             		move.w	obX(a0),saw_origX(a0)
00018BB8 3168 000C 0038             		move.w	obY(a0),saw_origY(a0)
00018BBE 0C28 0003 0028             		cmpi.b	#3,obSubtype(a0) ; is object a ground saw?
00018BC4 6400                       		bcc.s	Saw_Action	; if yes, branch
00018BC6 117C 00A2 0020             		move.b	#$A2,obColType(a0)
00018BCC                            
00018BCC                            Saw_Action:	; Routine 2
00018BCC 7000                       		moveq	#0,d0
00018BCE 1028 0028                  		move.b	obSubtype(a0),d0
00018BD2 0240 0007                  		andi.w	#7,d0
00018BD6 D040                       		add.w	d0,d0
00018BD8 323B 0000                  		move.w	@index(pc,d0.w),d1
00018BDC 4EBB 1000                  		jsr	@index(pc,d1.w)
00018BFC 4EF9 0000 FA8C             		jmp	(DisplaySprite).l
00018C02                            
00018C02                            	@delete:
00018C02 4EF9 0000 FACC             		jmp	(DeleteObject).l
00018C08                            ; ===========================================================================
00018C08 0000 0000 0000             @index:		dc.w @type00-@index, @type01-@index, @type02-@index ; pizza cutters
00018C0E 0000 0000                  		dc.w @type03-@index, @type04-@index ; ground saws
00018C12                            ; ===========================================================================
00018C12                            
00018C12                            @type00:
00018C12 4E75                       		rts			; doesn't move
00018C14                            ; ===========================================================================
00018C14                            
00018C14                            @type01:
00018C14 323C 0060                  		move.w	#$60,d1
00018C18 7000                       		moveq	#0,d0
00018C1A 1038 FE6C                  		move.b	(v_oscillate+$E).w,d0
00018C1E 0828 0000 0022             		btst	#0,obStatus(a0)
00018C24 6700                       		beq.s	@noflip01
00018C26 4440                       		neg.w	d0
00018C28 D041                       		add.w	d1,d0
00018C2A                            
00018C2A                            	@noflip01:
00018C2A 3228 003A                  		move.w	saw_origX(a0),d1
00018C2E 9240                       		sub.w	d0,d1
00018C30 3141 0008                  		move.w	d1,obX(a0)	; move saw sideways
00018C34                            
00018C34 5328 001E                  		subq.b	#1,obTimeFrame(a0)
00018C38 6A00                       		bpl.s	@sameframe01
00018C3A 117C 0002 001E             		move.b	#2,obTimeFrame(a0) ; time between frame changes
00018C40 0868 0000 001A             		bchg	#0,obFrame(a0)	; change frame
00018C46                            
00018C46                            	@sameframe01:
00018C46 4A28 0001                  		tst.b	obRender(a0)
00018C4A 6A00                       		bpl.s	@nosound01
00018C4C 3038 FE04                  		move.w	(v_framecount).w,d0
00018C50 0240 000F                  		andi.w	#$F,d0
00018C54 6600                       		bne.s	@nosound01
00018C60                            
00018C60                            	@nosound01:
00018C60 4E75                       		rts	
00018C62                            ; ===========================================================================
00018C62                            
00018C62                            @type02:
00018C62 323C 0030                  		move.w	#$30,d1
00018C66 7000                       		moveq	#0,d0
00018C68 1038 FE64                  		move.b	(v_oscillate+6).w,d0
00018C6C 0828 0000 0022             		btst	#0,obStatus(a0)
00018C72 6700                       		beq.s	@noflip02
00018C74 4440                       		neg.w	d0
00018C76 0640 0080                  		addi.w	#$80,d0
00018C7A                            
00018C7A                            	@noflip02:
00018C7A 3228 0038                  		move.w	saw_origY(a0),d1
00018C7E 9240                       		sub.w	d0,d1
00018C80 3141 000C                  		move.w	d1,obY(a0)	; move saw vertically
00018C84 5328 001E                  		subq.b	#1,obTimeFrame(a0)
00018C88 6A00                       		bpl.s	@sameframe02
00018C8A 117C 0002 001E             		move.b	#2,obTimeFrame(a0)
00018C90 0868 0000 001A             		bchg	#0,obFrame(a0)
00018C96                            
00018C96                            	@sameframe02:
00018C96 4A28 0001                  		tst.b	obRender(a0)
00018C9A 6A00                       		bpl.s	@nosound02
00018C9C 1038 FE64                  		move.b	(v_oscillate+6).w,d0
00018CA0 0C00 0018                  		cmpi.b	#$18,d0
00018CA4 6600                       		bne.s	@nosound02
00018CB0                            
00018CB0                            	@nosound02:
00018CB0 4E75                       		rts	
00018CB2                            ; ===========================================================================
00018CB2                            
00018CB2                            @type03:
00018CB2 4A28 003D                  		tst.b	saw_here(a0)	; has the saw appeared already?
00018CB6 6600                       		bne.s	@here03		; if yes, branch
00018CB8                            
00018CB8 3038 D008                  		move.w	(v_player+obX).w,d0
00018CBC 0440 00C0                  		subi.w	#$C0,d0
00018CC0 6500                       		bcs.s	@nosaw03x
00018CC2 9068 0008                  		sub.w	obX(a0),d0
00018CC6 6500                       		bcs.s	@nosaw03x
00018CC8 3038 D00C                  		move.w	(v_player+obY).w,d0
00018CCC 0440 0080                  		subi.w	#$80,d0
00018CD0 B068 000C                  		cmp.w	obY(a0),d0
00018CD4 6400                       		bcc.s	@nosaw03y
00018CD6 0640 0100                  		addi.w	#$100,d0
00018CDA B068 000C                  		cmp.w	obY(a0),d0
00018CDE 6500                       		bcs.s	@nosaw03y
00018CE0 117C 0001 003D             		move.b	#1,saw_here(a0)
00018CE6 317C 0600 0010             		move.w	#$600,obVelX(a0) ; move object to the right
00018CEC 117C 00A2 0020             		move.b	#$A2,obColType(a0)
00018CF2 117C 0002 001A             		move.b	#2,obFrame(a0)
00018D02                            
00018D02                            	@nosaw03x:
00018D02 588F                       		addq.l	#4,sp
00018D04                            
00018D04                            	@nosaw03y:
00018D04 4E75                       		rts	
00018D06                            ; ===========================================================================
00018D06                            
00018D06                            @here03:
00018D06 4EB9 0000 FA78             		jsr	(SpeedToPos).l
00018D0C 3168 0008 003A             		move.w	obX(a0),saw_origX(a0)
00018D12 5328 001E                  		subq.b	#1,obTimeFrame(a0)
00018D16 6A00                       		bpl.s	@sameframe03
00018D18 117C 0002 001E             		move.b	#2,obTimeFrame(a0)
00018D1E 0868 0000 001A             		bchg	#0,obFrame(a0)
00018D24                            
00018D24                            	@sameframe03:
00018D24 4E75                       		rts	
00018D26                            ; ===========================================================================
00018D26                            
00018D26                            @type04:
00018D26 4A28 003D                  		tst.b	saw_here(a0)
00018D2A 6600                       		bne.s	@here04
00018D2C 3038 D008                  		move.w	(v_player+obX).w,d0
00018D30 0640 00E0                  		addi.w	#$E0,d0
00018D34 9068 0008                  		sub.w	obX(a0),d0
00018D38 6400                       		bcc.s	@nosaw04x
00018D3A 3038 D00C                  		move.w	(v_player+obY).w,d0
00018D3E 0440 0080                  		subi.w	#$80,d0
00018D42 B068 000C                  		cmp.w	obY(a0),d0
00018D46 6400                       		bcc.s	@nosaw04y
00018D48 0640 0100                  		addi.w	#$100,d0
00018D4C B068 000C                  		cmp.w	obY(a0),d0
00018D50 6500                       		bcs.s	@nosaw04y
00018D52 117C 0001 003D             		move.b	#1,saw_here(a0)
00018D58 317C FA00 0010             		move.w	#-$600,obVelX(a0) ; move object to the left
00018D5E 117C 00A2 0020             		move.b	#$A2,obColType(a0)
00018D64 117C 0002 001A             		move.b	#2,obFrame(a0)
00018D74                            
00018D74                            	@nosaw04x:
00018D74 588F                       		addq.l	#4,sp
00018D76                            
00018D76                            	@nosaw04y:
00018D76 4E75                       		rts	
00018D78                            ; ===========================================================================
00018D78                            
00018D78                            @here04:
00018D78 4EB9 0000 FA78             		jsr	(SpeedToPos).l
00018D7E 3168 0008 003A             		move.w	obX(a0),saw_origX(a0)
00018D84 5328 001E                  		subq.b	#1,obTimeFrame(a0)
00018D88 6A00                       		bpl.s	@sameframe04
00018D8A 117C 0002 001E             		move.b	#2,obTimeFrame(a0)
00018D90 0868 0000 001A             		bchg	#0,obFrame(a0)
00018D96                            
00018D96                            	@sameframe04:
00018D96 4E75                       		rts	
00018D96 4E75                       		rts	
00018D98                            Map_Saw:	include	"_maps\Saws and Pizza Cutters.asm"
00018D98                            ; ---------------------------------------------------------------------------
00018D98                            ; Sprite mappings - ground saws	and pizza cutters (SBZ)
00018D98                            ; ---------------------------------------------------------------------------
00018D98                            Map_Saw_internal:
00018D98 0000                       		dc.w @pizzacutter1-Map_Saw_internal
00018D9A 0000                       		dc.w @pizzacutter2-Map_Saw_internal
00018D9C 0000                       		dc.w @groundsaw1-Map_Saw_internal
00018D9E 0000                       		dc.w @groundsaw2-Map_Saw_internal
00018DA0 07                         @pizzacutter1:	dc.b 7
00018DA1 C401 0020 FC               		dc.b $C4, 1, 0,	$20, $FC
00018DA6 D401 0020 FC               		dc.b $D4, 1, 0,	$20, $FC
00018DAB E403 0020 FC               		dc.b $E4, 3, 0,	$20, $FC
00018DB0 E00F 0000 E0               		dc.b $E0, $F, 0, 0, $E0
00018DB5 E00F 0800 00               		dc.b $E0, $F, 8, 0, 0
00018DBA 000F 1000 E0               		dc.b 0,	$F, $10, 0, $E0
00018DBF 000F 1800 00               		dc.b 0,	$F, $18, 0, 0
00018DC4 07                         @pizzacutter2:	dc.b 7
00018DC5 C401 0020 FC               		dc.b $C4, 1, 0,	$20, $FC
00018DCA D401 0020 FC               		dc.b $D4, 1, 0,	$20, $FC
00018DCF E403 0020 FC               		dc.b $E4, 3, 0,	$20, $FC
00018DD4 E00F 0010 E0               		dc.b $E0, $F, 0, $10, $E0
00018DD9 E00F 0810 00               		dc.b $E0, $F, 8, $10, 0
00018DDE 000F 1010 E0               		dc.b 0,	$F, $10, $10, $E0
00018DE3 000F 1810 00               		dc.b 0,	$F, $18, $10, 0
00018DE8 04                         @groundsaw1:	dc.b 4
00018DE9 E00F 0000 E0               		dc.b $E0, $F, 0, 0, $E0
00018DEE E00F 0800 00               		dc.b $E0, $F, 8, 0, 0
00018DF3 000F 1000 E0               		dc.b 0,	$F, $10, 0, $E0
00018DF8 000F 1800 00               		dc.b 0,	$F, $18, 0, 0
00018DFD 04                         @groundsaw2:	dc.b 4
00018DFE E00F 0010 E0               		dc.b $E0, $F, 0, $10, $E0
00018E03 E00F 0810 00               		dc.b $E0, $F, 8, $10, 0
00018E08 000F 1010 E0               		dc.b 0,	$F, $10, $10, $E0
00018E0D 000F 1810 00               		dc.b 0,	$F, $18, $10, 0
00018E12                            		even
00018E12                            		even
00018E12                            		include	"_incObj\6B SBZ Stomper and Door.asm"
00018E12                            ; ---------------------------------------------------------------------------
00018E12                            ; Object 6B - stomper and sliding door (SBZ)
00018E12                            ; ---------------------------------------------------------------------------
00018E12                            
00018E12                            ScrapStomp:
00018E12 7000                       		moveq	#0,d0
00018E14 1028 0024                  		move.b	obRoutine(a0),d0
00018E18 323B 0000                  		move.w	Sto_Index(pc,d0.w),d1
00018E1C 4EFB 1000                  		jmp	Sto_Index(pc,d1.w)
00018E20                            ; ===========================================================================
00018E20 0000                       Sto_Index:	dc.w Sto_Main-Sto_Index
00018E22 0000                       		dc.w Sto_Action-Sto_Index
00018E24                            
00018E24 =00000016                  sto_height:	equ $16
00018E24 =00000034                  sto_origX:	equ $34		; original x-axis position
00018E24 =00000030                  sto_origY:	equ $30		; original y-axis position
00018E24 =00000038                  sto_active:	equ $38		; flag set when a switch is pressed
00018E24                            
00018E24 400C 8001                  Sto_Var:	dc.b  $40,  $C,	$80,   1 ; width, height, ????,	type number
00018E28 1C20 3803                  		dc.b  $1C, $20,	$38,   3
00018E2C 1C20 4004                  		dc.b  $1C, $20,	$40,   4
00018E30 1C20 6004                  		dc.b  $1C, $20,	$60,   4
00018E34 8040 0005                  		dc.b  $80, $40,	  0,   5
00018E38                            ; ===========================================================================
00018E38                            
00018E38                            Sto_Main:	; Routine 0
00018E38 5428 0024                  		addq.b	#2,obRoutine(a0)
00018E3C 7000                       		moveq	#0,d0
00018E3E 1028 0028                  		move.b	obSubtype(a0),d0
00018E42 E448                       		lsr.w	#2,d0
00018E44 0240 001C                  		andi.w	#$1C,d0
00018E48 47FB 00DA                  		lea	Sto_Var(pc,d0.w),a3
00018E4C 115B 0014                  		move.b	(a3)+,obActWid(a0)
00018E50 115B 0016                  		move.b	(a3)+,sto_height(a0)
00018E54 E448                       		lsr.w	#2,d0
00018E56 1140 001A                  		move.b	d0,obFrame(a0)
00018E5A 217C 0000 0000 0004        		move.l	#Map_Stomp,obMap(a0)
00018E62 317C 22C0 0002             		move.w	#$22C0,obGfx(a0)
00018E68 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w ; check if level is LZ/SBZ3
00018E6E 6600                       		bne.s	@isSBZ12	; if not, branch
00018E70 08F8 0000 F7CB             		bset	#0,(v_obj6B).w
00018E76 6700                       		beq.s	@isSBZ3
00018E78                            
00018E78                            @chkdel:
00018E78 45F8 FC00                  		lea	(v_objstate).w,a2
00018E7C 7000                       		moveq	#0,d0
00018E7E 1028 0023                  		move.b	obRespawnNo(a0),d0
00018E82 6700                       		beq.s	@delete
00018E84 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00018E8A                            
00018E8A                            	@delete:
00018E8A 4EF9 0000 FACC             		jmp	(DeleteObject).l
00018E90                            ; ===========================================================================
00018E90                            
00018E90                            @isSBZ3:
00018E90 317C 41F0 0002             		move.w	#$41F0,obGfx(a0)
00018E96 0C68 0A80 0008             		cmpi.w	#$A80,obX(a0)
00018E9C 6600                       		bne.s	@isSBZ12
00018E9E 45F8 FC00                  		lea	(v_objstate).w,a2
00018EA2 7000                       		moveq	#0,d0
00018EA4 1028 0023                  		move.b	obRespawnNo(a0),d0
00018EA8 6700                       		beq.s	@isSBZ12
00018EAA 0832 0000 0002             		btst	#0,2(a2,d0.w)
00018EB0 6700                       		beq.s	@isSBZ12
00018EB2 4238 F7CB                  		clr.b	(v_obj6B).w
00018EB6 60C0                       		bra.s	@chkdel
00018EB8                            ; ===========================================================================
00018EB8                            
00018EB8                            @isSBZ12:
00018EB8 0028 0004 0001             		ori.b	#4,obRender(a0)
00018EBE 317C 0200 0018             		move.w	#$200,obPriority(a0)
00018EC4 3168 0008 0034             		move.w	obX(a0),sto_origX(a0)
00018ECA 3168 000C 0030             		move.w	obY(a0),sto_origY(a0)
00018ED0 7000                       		moveq	#0,d0
00018ED2 101B                       		move.b	(a3)+,d0
00018ED4 3140 003C                  		move.w	d0,$3C(a0)
00018ED8 7000                       		moveq	#0,d0
00018EDA 1028 0028                  		move.b	obSubtype(a0),d0
00018EDE 6A00                       		bpl.s	Sto_Action
00018EE0 0200 000F                  		andi.b	#$F,d0
00018EE4 1140 003E                  		move.b	d0,$3E(a0)
00018EE8 1153 0028                  		move.b	(a3),obSubtype(a0)
00018EEC 0C13 0005                  		cmpi.b	#5,(a3)
00018EF0 6600                       		bne.s	@chkgone
00018EF2 08E8 0004 0001             		bset	#4,obRender(a0)
00018EF8                            
00018EF8                            	@chkgone:
00018EF8 45F8 FC00                  		lea	(v_objstate).w,a2
00018EFC 7000                       		moveq	#0,d0
00018EFE 1028 0023                  		move.b	obRespawnNo(a0),d0
00018F02 6700                       		beq.s	Sto_Action
00018F04 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00018F0A                            
00018F0A                            Sto_Action:	; Routine 2
00018F0A 3F28 0008                  		move.w	obX(a0),-(sp)
00018F0E 7000                       		moveq	#0,d0
00018F10 1028 0028                  		move.b	obSubtype(a0),d0
00018F14 0240 000F                  		andi.w	#$F,d0
00018F18 D040                       		add.w	d0,d0
00018F1A 323B 0000                  		move.w	@index(pc,d0.w),d1
00018F1E 4EBB 1000                  		jsr	@index(pc,d1.w)
00018F22 381F                       		move.w	(sp)+,d4
00018F24 4A28 0001                  		tst.b	obRender(a0)
00018F28 6A00                       		bpl.s	@chkdel
00018F2A 7200                       		moveq	#0,d1
00018F2C 1228 0014                  		move.b	obActWid(a0),d1
00018F30 0641 000B                  		addi.w	#$B,d1
00018F34 7400                       		moveq	#0,d2
00018F36 1428 0016                  		move.b	sto_height(a0),d2
00018F3A 3602                       		move.w	d2,d3
00018F3C 5243                       		addq.w	#1,d3
00018F3E 6100 8F6E                  		bsr.w	SolidObject
00018F42                            
00018F42                            	@chkdel:
00018F5E 4EF9 0000 FA8C             		jmp	(DisplaySprite).l
00018F64                            
00018F64                            	@chkgone:
00018F64 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w
00018F6A 6600                       		bne.s	@delete
00018F6C 4238 F7CB                  		clr.b	(v_obj6B).w
00018F70 45F8 FC00                  		lea	(v_objstate).w,a2
00018F74 7000                       		moveq	#0,d0
00018F76 1028 0023                  		move.b	obRespawnNo(a0),d0
00018F7A 6700                       		beq.s	@delete
00018F7C 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00018F82                            
00018F82                            	@delete:
00018F82 4EF9 0000 FACC             		jmp	(DeleteObject).l
00018F88                            ; ===========================================================================
00018F88 0000 0000                  @index:		dc.w @type00-@index, @type01-@index
00018F8C 0000 0000                  		dc.w @type02-@index, @type03-@index
00018F90 0000 0000                  		dc.w @type04-@index, @type05-@index
00018F94                            ; ===========================================================================
00018F94                            
00018F94                            @type00:
00018F94 4E75                       		rts
00018F96                            ; ===========================================================================
00018F96                            
00018F96                            @type01:
00018F96 4A28 0038                  		tst.b	sto_active(a0)
00018F9A 6600                       		bne.s	@isactive01
00018F9C 45F8 F7E0                  		lea	(f_switch).w,a2
00018FA0 7000                       		moveq	#0,d0
00018FA2 1028 003E                  		move.b	$3E(a0),d0
00018FA6 0832 0000 0000             		btst	#0,(a2,d0.w)
00018FAC 6700                       		beq.s	@loc_15DC2
00018FAE 117C 0001 0038             		move.b	#1,sto_active(a0)
00018FB4                            
00018FB4                            	@isactive01:
00018FB4 3028 003C                  		move.w	$3C(a0),d0
00018FB8 B068 003A                  		cmp.w	$3A(a0),d0
00018FBC 6700                       		beq.s	@loc_15DE0
00018FBE 5468 003A                  		addq.w	#2,$3A(a0)
00018FC2                            
00018FC2                            	@loc_15DC2:
00018FC2 3028 003A                  		move.w	$3A(a0),d0
00018FC6 0828 0000 0022             		btst	#0,obStatus(a0)
00018FCC 6700                       		beq.s	@noflip01
00018FCE 4440                       		neg.w	d0
00018FD0 0640 0080                  		addi.w	#$80,d0
00018FD4                            
00018FD4                            	@noflip01:
00018FD4 3228 0034                  		move.w	sto_origX(a0),d1
00018FD8 9240                       		sub.w	d0,d1
00018FDA 3141 0008                  		move.w	d1,obX(a0)
00018FDE 4E75                       		rts	
00018FE0                            ; ===========================================================================
00018FE0                            
00018FE0                            @loc_15DE0:
00018FE0 5228 0028                  		addq.b	#1,obSubtype(a0)
00018FE4 317C 00B4 0036             		move.w	#$B4,$36(a0)
00018FEA 4228 0038                  		clr.b	sto_active(a0)
00018FEE 45F8 FC00                  		lea	(v_objstate).w,a2
00018FF2 7000                       		moveq	#0,d0
00018FF4 1028 0023                  		move.b	obRespawnNo(a0),d0
00018FF8 67C8                       		beq.s	@loc_15DC2
00018FFA 08F2 0000 0002             		bset	#0,2(a2,d0.w)
00019000 60C0                       		bra.s	@loc_15DC2
00019002                            ; ===========================================================================
00019002                            
00019002                            @type02:
00019002 4A28 0038                  		tst.b	sto_active(a0)
00019006 6600                       		bne.s	@isactive02
00019008 5368 0036                  		subq.w	#1,$36(a0)
0001900C 6600                       		bne.s	@loc_15E1E
0001900E 117C 0001 0038             		move.b	#1,sto_active(a0)
00019014                            
00019014                            	@isactive02:
00019014 4A68 003A                  		tst.w	$3A(a0)
00019018 6700                       		beq.s	@loc_15E3C
0001901A 5568 003A                  		subq.w	#2,$3A(a0)
0001901E                            
0001901E                            	@loc_15E1E:
0001901E 3028 003A                  		move.w	$3A(a0),d0
00019022 0828 0000 0022             		btst	#0,obStatus(a0)
00019028 6700                       		beq.s	@noflip02
0001902A 4440                       		neg.w	d0
0001902C 0640 0080                  		addi.w	#$80,d0
00019030                            
00019030                            	@noflip02:
00019030 3228 0034                  		move.w	sto_origX(a0),d1
00019034 9240                       		sub.w	d0,d1
00019036 3141 0008                  		move.w	d1,obX(a0)
0001903A 4E75                       		rts	
0001903C                            ; ===========================================================================
0001903C                            
0001903C                            @loc_15E3C:
0001903C 5328 0028                  		subq.b	#1,obSubtype(a0)
00019040 4228 0038                  		clr.b	sto_active(a0)
00019044 45F8 FC00                  		lea	(v_objstate).w,a2
00019048 7000                       		moveq	#0,d0
0001904A 1028 0023                  		move.b	obRespawnNo(a0),d0
0001904E 67CE                       		beq.s	@loc_15E1E
00019050 08B2 0000 0002             		bclr	#0,2(a2,d0.w)
00019056 60C6                       		bra.s	@loc_15E1E
00019058                            ; ===========================================================================
00019058                            
00019058                            @type03:
00019058 4A28 0038                  		tst.b	sto_active(a0)
0001905C 6600                       		bne.s	@isactive03
0001905E 4A68 003A                  		tst.w	$3A(a0)
00019062 6700                       		beq.s	@loc_15E6A
00019064 5368 003A                  		subq.w	#1,$3A(a0)
00019068 6000                       		bra.s	@loc_15E8E
0001906A                            ; ===========================================================================
0001906A                            
0001906A                            @loc_15E6A:
0001906A 5368 0036                  		subq.w	#1,$36(a0)
0001906E 6A00                       		bpl.s	@loc_15E8E
00019070 317C 003C 0036             		move.w	#$3C,$36(a0)
00019076 117C 0001 0038             		move.b	#1,sto_active(a0)
0001907C                            
0001907C                            @isactive03:
0001907C 5068 003A                  		addq.w	#8,$3A(a0)
00019080 3028 003A                  		move.w	$3A(a0),d0
00019084 B068 003C                  		cmp.w	$3C(a0),d0
00019088 6600                       		bne.s	@loc_15E8E
0001908A 4228 0038                  		clr.b	sto_active(a0)
0001908E                            
0001908E                            @loc_15E8E:
0001908E 3028 003A                  		move.w	$3A(a0),d0
00019092 0828 0000 0022             		btst	#0,obStatus(a0)
00019098 6700                       		beq.s	@noflip03
0001909A 4440                       		neg.w	d0
0001909C 0640 0038                  		addi.w	#$38,d0
000190A0                            
000190A0                            	@noflip03:
000190A0 3228 0030                  		move.w	sto_origY(a0),d1
000190A4 D240                       		add.w	d0,d1
000190A6 3141 000C                  		move.w	d1,obY(a0)
000190AA 4E75                       		rts	
000190AC                            ; ===========================================================================
000190AC                            
000190AC                            @type04:
000190AC 4A28 0038                  		tst.b	sto_active(a0)
000190B0 6600                       		bne.s	@isactive04
000190B2 4A68 003A                  		tst.w	$3A(a0)
000190B6 6700                       		beq.s	@loc_15EBE
000190B8 5168 003A                  		subq.w	#8,$3A(a0)
000190BC 6000                       		bra.s	@loc_15EF0
000190BE                            ; ===========================================================================
000190BE                            
000190BE                            @loc_15EBE:
000190BE 5368 0036                  		subq.w	#1,$36(a0)
000190C2 6A00                       		bpl.s	@loc_15EF0
000190C4 317C 003C 0036             		move.w	#$3C,$36(a0)
000190CA 117C 0001 0038             		move.b	#1,sto_active(a0)
000190D0                            
000190D0                            @isactive04:
000190D0 3028 003A                  		move.w	$3A(a0),d0
000190D4 B068 003C                  		cmp.w	$3C(a0),d0
000190D8 6700                       		beq.s	@loc_15EE0
000190DA 5068 003A                  		addq.w	#8,$3A(a0)
000190DE 6000                       		bra.s	@loc_15EF0
000190E0                            ; ===========================================================================
000190E0                            
000190E0                            @loc_15EE0:
000190E0 5368 0036                  		subq.w	#1,$36(a0)
000190E4 6A00                       		bpl.s	@loc_15EF0
000190E6 317C 003C 0036             		move.w	#$3C,$36(a0)
000190EC 4228 0038                  		clr.b	sto_active(a0)
000190F0                            
000190F0                            @loc_15EF0:
000190F0 3028 003A                  		move.w	$3A(a0),d0
000190F4 0828 0000 0022             		btst	#0,obStatus(a0)
000190FA 6700                       		beq.s	@noflip04
000190FC 4440                       		neg.w	d0
000190FE 0640 0038                  		addi.w	#$38,d0
00019102                            
00019102                            	@noflip04:
00019102 3228 0030                  		move.w	sto_origY(a0),d1
00019106 D240                       		add.w	d0,d1
00019108 3141 000C                  		move.w	d1,obY(a0)
0001910C 4E75                       		rts	
0001910E                            ; ===========================================================================
0001910E                            
0001910E                            @type05:
0001910E 4A28 0038                  		tst.b	sto_active(a0)
00019112 6600                       		bne.s	@loc_15F3E
00019114 45F8 F7E0                  		lea	(f_switch).w,a2
00019118 7000                       		moveq	#0,d0
0001911A 1028 003E                  		move.b	$3E(a0),d0
0001911E 0832 0000 0000             		btst	#0,(a2,d0.w)
00019124 6700                       		beq.s	@locret_15F5C
00019126 117C 0001 0038             		move.b	#1,sto_active(a0)
0001912C 45F8 FC00                  		lea	(v_objstate).w,a2
00019130 7000                       		moveq	#0,d0
00019132 1028 0023                  		move.b	obRespawnNo(a0),d0
00019136 6700                       		beq.s	@loc_15F3E
00019138 08F2 0000 0002             		bset	#0,2(a2,d0.w)
0001913E                            
0001913E                            @loc_15F3E:
0001913E 04A8 0001 0000 0008        		subi.l	#$10000,obX(a0)
00019146 06A8 0000 8000 000C        		addi.l	#$8000,obY(a0)
0001914E 3168 0008 0034             		move.w	obX(a0),sto_origX(a0)
00019154 0C68 0980 0008             		cmpi.w	#$980,obX(a0)
0001915A 6700                       		beq.s	@loc_15F5E
0001915C                            
0001915C                            @locret_15F5C:
0001915C 4E75                       		rts	
0001915E                            ; ===========================================================================
0001915E                            
0001915E                            @loc_15F5E:
0001915E 4228 0028                  		clr.b	obSubtype(a0)
00019162 4228 0038                  		clr.b	sto_active(a0)
00019166 4E75                       		rts	
00019166 4E75                       		rts	
00019168                            Map_Stomp:	include	"_maps\SBZ Stomper and Door.asm"
00019168                            ; ---------------------------------------------------------------------------
00019168                            ; Sprite mappings - stomper and	platforms (SBZ)
00019168                            ; ---------------------------------------------------------------------------
00019168                            Map_Stomp_internal:
00019168 0000                       		dc.w @door-Map_Stomp_internal
0001916A 0000                       		dc.w @stomper-Map_Stomp_internal
0001916C 0000                       		dc.w @stomper-Map_Stomp_internal
0001916E 0000                       		dc.w @stomper-Map_Stomp_internal
00019170 0000                       		dc.w @bigdoor-Map_Stomp_internal
00019172 04                         @door:		dc.b 4
00019173 F40E 21AF C0               		dc.b $F4, $E, $21, $AF,	$C0 ; horizontal sliding door
00019178 F40E 21B2 E0               		dc.b $F4, $E, $21, $B2,	$E0
0001917D F40E 21B2 00               		dc.b $F4, $E, $21, $B2,	0
00019182 F40E 29AF 20               		dc.b $F4, $E, $29, $AF,	$20
00019187 08                         @stomper:	dc.b 8
00019188 E00C 000C E4               		dc.b $E0, $C, 0, $C, $E4 ; stomper block with yellow/black stripes
0001918D E008 0010 04               		dc.b $E0, 8, 0,	$10, 4
00019192 E80E 2013 E4               		dc.b $E8, $E, $20, $13,	$E4
00019197 E80A 201F 04               		dc.b $E8, $A, $20, $1F,	4
0001919C 000E 2013 E4               		dc.b 0,	$E, $20, $13, $E4
000191A1 000A 201F 04               		dc.b 0,	$A, $20, $1F, 4
000191A6 180C 000C E4               		dc.b $18, $C, 0, $C, $E4
000191AB 1808 0010 04               		dc.b $18, 8, 0,	$10, 4
000191B0 0E                         @bigdoor:	dc.b $E
000191B1 C00F 0000 80               		dc.b $C0, $F, 0, 0, $80	; huge diagonal sliding door from SBZ3
000191B6 C00F 0010 A0               		dc.b $C0, $F, 0, $10, $A0
000191BB C00F 0020 C0               		dc.b $C0, $F, 0, $20, $C0
000191C0 C00F 0010 E0               		dc.b $C0, $F, 0, $10, $E0
000191C5 C00F 0020 00               		dc.b $C0, $F, 0, $20, 0
000191CA C00F 0010 20               		dc.b $C0, $F, 0, $10, $20
000191CF C00F 0030 40               		dc.b $C0, $F, 0, $30, $40
000191D4 C00D 0040 60               		dc.b $C0, $D, 0, $40, $60
000191D9 E00F 0048 80               		dc.b $E0, $F, 0, $48, $80
000191DE E00F 0048 C0               		dc.b $E0, $F, 0, $48, $C0
000191E3 E00F 0058 00               		dc.b $E0, $F, 0, $58, 0
000191E8 000F 0048 80               		dc.b 0,	$F, 0, $48, $80
000191ED 000F 0058 C0               		dc.b 0,	$F, 0, $58, $C0
000191F2 200F 0058 80               		dc.b $20, $F, 0, $58, $80
000191F8 00                         		even
000191F8 00                         		even
000191F8                            		include	"_incObj\6C SBZ Vanishing Platforms.asm"
000191F8                            ; ---------------------------------------------------------------------------
000191F8                            ; Object 6C - vanishing	platforms (SBZ)
000191F8                            ; ---------------------------------------------------------------------------
000191F8                            
000191F8                            VanishPlatform:
000191F8 7000                       		moveq	#0,d0
000191FA 1028 0024                  		move.b	obRoutine(a0),d0
000191FE 323B 0000                  		move.w	VanP_Index(pc,d0.w),d1
00019202 4EFB 1000                  		jmp	VanP_Index(pc,d1.w)
00019206                            ; ===========================================================================
00019206 0000                       VanP_Index:	dc.w VanP_Main-VanP_Index
00019208 0000                       		dc.w VanP_Vanish-VanP_Index
0001920A 0000                       		dc.w VanP_Appear-VanP_Index
0001920C 0000                       		dc.w loc_16068-VanP_Index
0001920E                            
0001920E =00000030                  vanp_timer:	equ $30		; counter for time until event
0001920E =00000032                  vanp_timelen:	equ $32		; time between events (general)
0001920E                            ; ===========================================================================
0001920E                            
0001920E                            VanP_Main:	; Routine 0
0001920E 5C28 0024                  		addq.b	#6,obRoutine(a0)
00019212 217C 0000 0000 0004        		move.l	#Map_VanP,obMap(a0)
0001921A 317C 44C3 0002             		move.w	#$44C3,obGfx(a0)
00019220 0028 0004 0001             		ori.b	#4,obRender(a0)
00019226 117C 0010 0014             		move.b	#$10,obActWid(a0)
0001922C 317C 0200 0018             		move.w	#$200,obPriority(a0)
00019232 7000                       		moveq	#0,d0
00019234 1028 0028                  		move.b	obSubtype(a0),d0 ; get object type
00019238 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
0001923C 5240                       		addq.w	#1,d0		; add 1
0001923E EF48                       		lsl.w	#7,d0		; multiply by $80
00019240 3200                       		move.w	d0,d1
00019242 5340                       		subq.w	#1,d0
00019244 3140 0030                  		move.w	d0,vanp_timer(a0)
00019248 3140 0032                  		move.w	d0,vanp_timelen(a0)
0001924C 7000                       		moveq	#0,d0
0001924E 1028 0028                  		move.b	obSubtype(a0),d0 ; get object type
00019252 0240 00F0                  		andi.w	#$F0,d0		; read only the	1st digit
00019256 0641 0080                  		addi.w	#$80,d1
0001925A C0C1                       		mulu.w	d1,d0
0001925C E088                       		lsr.l	#8,d0
0001925E 3140 0036                  		move.w	d0,$36(a0)
00019262 5341                       		subq.w	#1,d1
00019264 3141 0038                  		move.w	d1,$38(a0)
00019268                            
00019268                            loc_16068:	; Routine 6
00019268 3038 FE04                  		move.w	(v_framecount).w,d0
0001926C 9068 0036                  		sub.w	$36(a0),d0
00019270 C068 0038                  		and.w	$38(a0),d0
00019274 6600                       		bne.s	@animate
00019276 5928 0024                  		subq.b	#4,obRoutine(a0) ; goto VanP_Vanish next
0001927A 6000                       		bra.s	VanP_Vanish
0001927C                            ; ===========================================================================
0001927C                            
0001927C                            @animate:
0001927C 43F9 0000 0000             		lea	(Ani_Van).l,a1
00019282 4EB9 0000 CB4E             		jsr	(AnimateSprite).l
00019288 6000 878C                  		bra.w	RememberState
0001928C                            ; ===========================================================================
0001928C                            
0001928C                            VanP_Vanish:	; Routine 2
0001928C                            VanP_Appear:	; Routine 4
0001928C 5368 0030                  		subq.w	#1,vanp_timer(a0)
00019290 6A00                       		bpl.s	@wait
00019292 317C 007F 0030             		move.w	#127,vanp_timer(a0)
00019298 4A28 001C                  		tst.b	obAnim(a0)	; is platform vanishing?
0001929C 6700                       		beq.s	@isvanishing	; if yes, branch
0001929E 3168 0032 0030             		move.w	vanp_timelen(a0),vanp_timer(a0)
000192A4                            
000192A4                            	@isvanishing:
000192A4 0868 0000 001C             		bchg	#0,obAnim(a0)
000192AA                            
000192AA                            	@wait:
000192AA 43F9 0000 0000             		lea	(Ani_Van).l,a1
000192B0 4EB9 0000 CB4E             		jsr	(AnimateSprite).l
000192B6 0828 0001 001A             		btst	#1,obFrame(a0)	; has platform vanished?
000192BC 6600                       		bne.s	@notsolid	; if yes, branch
000192BE 0C28 0002 0024             		cmpi.b	#2,obRoutine(a0)
000192C4 6600                       		bne.s	@loc_160D6
000192C6 7200                       		moveq	#0,d1
000192C8 1228 0014                  		move.b	obActWid(a0),d1
000192CC 4EB9 0000 9136             		jsr	(PlatformObject).l
000192D2 6000 8742                  		bra.w	RememberState
000192D6                            ; ===========================================================================
000192D6                            
000192D6                            @loc_160D6:
000192D6 7200                       		moveq	#0,d1
000192D8 1228 0014                  		move.b	obActWid(a0),d1
000192DC 4EB9 0000 92AA             		jsr	(ExitPlatform).l
000192E2 3428 0008                  		move.w	obX(a0),d2
000192E6 4EB9 0000 9814             		jsr	(MvSonicOnPtfm2).l
000192EC 6000 8728                  		bra.w	RememberState
000192F0                            ; ===========================================================================
000192F0                            
000192F0                            @notsolid:
000192F0 0828 0003 0022             		btst	#3,obStatus(a0)
000192F6 6700                       		beq.s	@display
000192F8 43F8 D000                  		lea	(v_player).w,a1
000192FC 08A9 0003 0022             		bclr	#3,obStatus(a1)
00019302 08A8 0003 0022             		bclr	#3,obStatus(a0)
00019308 117C 0002 0024             		move.b	#2,obRoutine(a0)
0001930E 4228 0025                  		clr.b	obSolid(a0)
00019312                            
00019312                            	@display:
00019312 6000 8702                  		bra.w	RememberState
00019312 6000 8702                  		bra.w	RememberState
00019316                            		include	"_anim\SBZ Vanishing Platforms.asm"
00019316                            ; ---------------------------------------------------------------------------
00019316                            ; Animation script - vanishing platforms (SBZ)
00019316                            ; ---------------------------------------------------------------------------
00019316 0000                       Ani_Van:	dc.w @vanish-Ani_Van
00019318 0000                       		dc.w @appear-Ani_Van
0001931A 0700 0102 03FE 01          @vanish:	dc.b 7,	0, 1, 2, 3, afBack, 1
00019322 00                         		even
00019322 0703 0201 00FE 01          @appear:	dc.b 7,	3, 2, 1, 0, afBack, 1
0001932A 00                         		even
0001932A 00                         		even
0001932A                            Map_VanP:	include	"_maps\SBZ Vanishing Platforms.asm"
0001932A                            ; ---------------------------------------------------------------------------
0001932A                            ; Sprite mappings - vanishing platforms	(SBZ)
0001932A                            ; ---------------------------------------------------------------------------
0001932A                            Map_VanP_internal:
0001932A 0000                       		dc.w @whole-Map_VanP_internal
0001932C 0000                       		dc.w @half-Map_VanP_internal
0001932E 0000                       		dc.w @quarter-Map_VanP_internal
00019330 0000                       		dc.w @gone-Map_VanP_internal
00019332 01                         @whole:		dc.b 1
00019333 F80F 0000 F0               		dc.b $F8, $F, 0, 0, $F0
00019338 01                         @half:		dc.b 1
00019339 F807 0010 F8               		dc.b $F8, 7, 0,	$10, $F8
0001933E 01                         @quarter:	dc.b 1
0001933F F803 0018 FC               		dc.b $F8, 3, 0,	$18, $FC
00019344 00                         @gone:		dc.b 0
00019346 00                         		even
00019346 00                         		even
00019346                            		include	"_incObj\6E Electrocuter.asm"
00019346                            ; ---------------------------------------------------------------------------
00019346                            ; Object 6E - electrocution orbs (SBZ)
00019346                            ; ---------------------------------------------------------------------------
00019346                            
00019346                            Electro:
00019346 7000                       		moveq	#0,d0
00019348 1028 0024                  		move.b	obRoutine(a0),d0
0001934C 323B 0000                  		move.w	Elec_Index(pc,d0.w),d1
00019350 4EFB 1000                  		jmp	Elec_Index(pc,d1.w)
00019354                            ; ===========================================================================
00019354 0000                       Elec_Index:	dc.w Elec_Main-Elec_Index
00019356 0000                       		dc.w Elec_Shock-Elec_Index
00019358                            
00019358 =00000034                  elec_freq:	equ $34		; frequency
00019358                            ; ===========================================================================
00019358                            
00019358                            Elec_Main:	; Routine 0
00019358 5428 0024                  		addq.b	#2,obRoutine(a0)
0001935C 217C 0000 0000 0004        		move.l	#Map_Elec,obMap(a0)
00019364 317C 047E 0002             		move.w	#$47E,obGfx(a0)
0001936A 0028 0004 0001             		ori.b	#4,obRender(a0)
00019370 117C 0028 0014             		move.b	#$28,obActWid(a0)
00019376 7000                       		moveq	#0,d0
00019378 1028 0028                  		move.b	obSubtype(a0),d0 ; read object type
0001937C E948                       		lsl.w	#4,d0		; multiply by $10
0001937E 5340                       		subq.w	#1,d0
00019380 3140 0034                  		move.w	d0,elec_freq(a0)
00019384                            
00019384                            Elec_Shock:	; Routine 2
00019384 3038 FE04                  		move.w	(v_framecount).w,d0
00019388 C068 0034                  		and.w	elec_freq(a0),d0 ; is it time to zap?
0001938C 6600                       		bne.s	@animate	; if not, branch
0001938E                            
0001938E 117C 0001 001C             		move.b	#1,obAnim(a0)	; run "zap" animation
00019394 4A28 0001                  		tst.b	obRender(a0)
00019398 6A00                       		bpl.s	@animate
000193A4                            
000193A4                            	@animate:
000193A4 43F9 0000 0000             		lea	(Ani_Elec).l,a1
000193AA 4EB9 0000 CB4E             		jsr	(AnimateSprite).l
000193B0 117C 0000 0020             		move.b	#0,obColType(a0)
000193B6 0C28 0004 001A             		cmpi.b	#4,obFrame(a0)	; is 4th frame displayed?
000193BC 6600                       		bne.s	@display	; if not, branch
000193BE 117C 00A4 0020             		move.b	#$A4,obColType(a0) ; if yes, make object hurt Sonic
000193C4                            
000193C4                            	@display:
000193C4 6000 8650                  		bra.w	RememberState
000193C4 6000 8650                  		bra.w	RememberState
000193C8                            		include	"_anim\Electrocuter.asm"
000193C8                            ; ---------------------------------------------------------------------------
000193C8                            ; Animation script - electrocution orbs (SBZ)
000193C8                            ; ---------------------------------------------------------------------------
000193C8 0000                       Ani_Elec:	dc.w byte_161CC-Ani_Elec
000193CA 0000                       		dc.w byte_161D0-Ani_Elec
000193CC 0700 FF                    byte_161CC:	dc.b 7,	0, afEnd
000193D0 00                         		even
000193D0 0001 0101 0203 0304 0404+  byte_161D0:	dc.b 0,	1, 1, 1, 2, 3, 3, 4, 4,	4, 5, 5, 5, 0, afChange, 0
000193E0                            		even
000193E0                            		even
000193E0                            Map_Elec:	include	"_maps\Electrocuter.asm"
000193E0                            ; --------------------------------------------------------------------------------
000193E0                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
000193E0                            ; --------------------------------------------------------------------------------
000193E0                            
000193E0                            SME_KiF9w:	
000193E0 0000 0000                  		dc.w SME_KiF9w_C-SME_KiF9w, SME_KiF9w_17-SME_KiF9w	
000193E4 0000 0000                  		dc.w SME_KiF9w_27-SME_KiF9w, SME_KiF9w_41-SME_KiF9w	
000193E8 0000 0000                  		dc.w SME_KiF9w_56-SME_KiF9w, SME_KiF9w_75-SME_KiF9w	
000193EC 02                         SME_KiF9w_C:	dc.b 2	
000193ED F804 2000 F8               		dc.b $F8, 4, $20, 0, $F8	
000193F2 0006 2002 F8               		dc.b 0, 6, $20, 2, $F8	
000193F7 03                         SME_KiF9w_17:	dc.b 3	
000193F8 F805 2008 F8               		dc.b $F8, 5, $20, 8, $F8	
000193FD F804 0000 F8               		dc.b $F8, 4, 0, 0, $F8	
00019402 0006 2002 F8               		dc.b 0, 6, $20, 2, $F8	
00019407 05                         SME_KiF9w_27:	dc.b 5	
00019408 F805 2008 F8               		dc.b $F8, 5, $20, 8, $F8	
0001940D F804 0000 F8               		dc.b $F8, 4, 0, 0, $F8	
00019412 0006 2002 F8               		dc.b 0, 6, $20, 2, $F8	
00019417 F60D 200C 08               		dc.b $F6, $D, $20, $C, 8	
0001941C F60D 280C DC               		dc.b $F6, $D, $28, $C, $DC	
00019421 04                         SME_KiF9w_41:	dc.b 4	
00019422 F804 2000 F8               		dc.b $F8, 4, $20, 0, $F8	
00019427 0006 2002 F8               		dc.b 0, 6, $20, 2, $F8	
0001942C F60D 200C 08               		dc.b $F6, $D, $20, $C, 8	
00019431 F60D 280C DC               		dc.b $F6, $D, $28, $C, $DC	
00019436 06                         SME_KiF9w_56:	dc.b 6	
00019437 F805 2008 F8               		dc.b $F8, 5, $20, 8, $F8	
0001943C 0006 2002 F8               		dc.b 0, 6, $20, 2, $F8	
00019441 F60D 300C 08               		dc.b $F6, $D, $30, $C, 8	
00019446 F60D 380C DC               		dc.b $F6, $D, $38, $C, $DC	
0001944B F60D 200C 24               		dc.b $F6, $D, $20, $C, $24	
00019450 F60D 280C C0               		dc.b $F6, $D, $28, $C, $C0	
00019455 04                         SME_KiF9w_75:	dc.b 4	
00019456 F804 2000 F8               		dc.b $F8, 4, $20, 0, $F8	
0001945B 0006 2002 F8               		dc.b 0, 6, $20, 2, $F8	
00019460 F60D 300C 24               		dc.b $F6, $D, $30, $C, $24	
00019465 F60D 380C C0               		dc.b $F6, $D, $38, $C, $C0	
0001946A                            		even
0001946A                            		even
0001946A                            		include	"_incObj\6F SBZ Spin Platform Conveyor.asm"
0001946A                            ; ---------------------------------------------------------------------------
0001946A                            ; Object 6F - spinning platforms that move around a conveyor belt (SBZ)
0001946A                            ; ---------------------------------------------------------------------------
0001946A                            
0001946A                            SpinConvey:
0001946A 7000                       		moveq	#0,d0
0001946C 1028 0024                  		move.b	obRoutine(a0),d0
00019470 323B 0000                  		move.w	SpinC_Index(pc,d0.w),d1
00019474 4EBB 1000                  		jsr	SpinC_Index(pc,d1.w)
00019494                            
00019494                            SpinC_Display:
00019494 4EF9 0000 FA8C             		jmp	(DisplaySprite).l
0001949A                            ; ===========================================================================
0001949A                            
0001949A                            loc_1629A:
0001949A 0C38 0002 FE11             		cmpi.b	#2,(v_act).w	; check if act is 3
000194A0 6600                       		bne.s	SpinC_Act1or2	; if not, branch
000194A2 0C40 FF80                  		cmpi.w	#-$80,d0
000194A6 64EC                       		bcc.s	SpinC_Display
000194A8                            
000194A8                            SpinC_Act1or2:
000194A8 1028 002F                  		move.b	$2F(a0),d0
000194AC 6A00                       		bpl.s	SpinC_Delete
000194AE 0240 007F                  		andi.w	#$7F,d0
000194B2 45F8 F7C1                  		lea	(v_obj63).w,a2
000194B6 08B2 0000 0000             		bclr	#0,(a2,d0.w)
000194BC                            
000194BC                            SpinC_Delete:
000194BC 4EF9 0000 FACC             		jmp	(DeleteObject).l
000194C2                            ; ===========================================================================
000194C2 0000                       SpinC_Index:	dc.w SpinC_Main-SpinC_Index
000194C4 0000                       		dc.w loc_163D8-SpinC_Index
000194C6                            ; ===========================================================================
000194C6                            
000194C6                            SpinC_Main:	; Routine 0
000194C6 1028 0028                  		move.b	obSubtype(a0),d0
000194CA 6B00 0000                  		bmi.w	loc_16380
000194CE 5428 0024                  		addq.b	#2,obRoutine(a0)
000194D2 217C 0001 8B3A 0004        		move.l	#Map_Spin,obMap(a0)
000194DA 317C 04DF 0002             		move.w	#$4DF,obGfx(a0)
000194E0 117C 0010 0014             		move.b	#$10,obActWid(a0)
000194E6 0028 0004 0001             		ori.b	#4,obRender(a0)
000194EC 317C 0200 0018             		move.w	#$200,obPriority(a0)
000194F2 7000                       		moveq	#0,d0
000194F4 1028 0028                  		move.b	obSubtype(a0),d0
000194F8 3200                       		move.w	d0,d1
000194FA E648                       		lsr.w	#3,d0
000194FC 0240 001E                  		andi.w	#$1E,d0
00019500 45FA 0000                  		lea	off_164A6(pc),a2
00019504 D4F2 0000                  		adda.w	(a2,d0.w),a2
00019508 315A 0038                  		move.w	(a2)+,$38(a0)
0001950C 315A 0030                  		move.w	(a2)+,$30(a0)
00019510 214A 003C                  		move.l	a2,$3C(a0)
00019514 0241 000F                  		andi.w	#$F,d1
00019518 E549                       		lsl.w	#2,d1
0001951A 1141 0038                  		move.b	d1,$38(a0)
0001951E 117C 0004 003A             		move.b	#4,$3A(a0)
00019524 4A38 F7C0                  		tst.b	(f_conveyrev).w
00019528 6700                       		beq.s	loc_16356
0001952A 117C 0001 003B             		move.b	#1,$3B(a0)
00019530 4428 003A                  		neg.b	$3A(a0)
00019534 7200                       		moveq	#0,d1
00019536 1228 0038                  		move.b	$38(a0),d1
0001953A D228 003A                  		add.b	$3A(a0),d1
0001953E B228 0039                  		cmp.b	$39(a0),d1
00019542 6500                       		bcs.s	loc_16352
00019544 1001                       		move.b	d1,d0
00019546 7200                       		moveq	#0,d1
00019548 4A00                       		tst.b	d0
0001954A 6A00                       		bpl.s	loc_16352
0001954C 1228 0039                  		move.b	$39(a0),d1
00019550 5901                       		subq.b	#4,d1
00019552                            
00019552                            loc_16352:
00019552 1141 0038                  		move.b	d1,$38(a0)
00019556                            
00019556                            loc_16356:
00019556 3172 1000 0034             		move.w	(a2,d1.w),$34(a0)
0001955C 3172 1002 0036             		move.w	2(a2,d1.w),$36(a0)
00019562 4A41                       		tst.w	d1
00019564 6600                       		bne.s	loc_1636C
00019566 117C 0001 001C             		move.b	#1,obAnim(a0)
0001956C                            
0001956C                            loc_1636C:
0001956C 0C41 0008                  		cmpi.w	#8,d1
00019570 6600                       		bne.s	loc_16378
00019572 117C 0000 001C             		move.b	#0,obAnim(a0)
00019578                            
00019578                            loc_16378:
00019578 6100 B522                  		bsr.w	LCon_ChangeDir
0001957C 6000 0000                  		bra.w	loc_163D8
00019580                            ; ===========================================================================
00019580                            
00019580                            loc_16380:
00019580 1140 002F                  		move.b	d0,$2F(a0)
00019584 0240 007F                  		andi.w	#$7F,d0
00019588 45F8 F7C1                  		lea	(v_obj63).w,a2
0001958C 08F2 0000 0000             		bset	#0,(a2,d0.w)
00019592 6700                       		beq.s	loc_1639A
00019594 4EF9 0000 FACC             		jmp	(DeleteObject).l
0001959A                            ; ===========================================================================
0001959A                            
0001959A                            loc_1639A:
0001959A D040                       		add.w	d0,d0
0001959C 0240 001E                  		andi.w	#$1E,d0
000195A0 0640 0000                  		addi.w	#ObjPosSBZPlatform_Index-ObjPos_Index,d0
000195A4 45F9 0000 0000             		lea	(ObjPos_Index).l,a2
000195AA D4F2 0000                  		adda.w	(a2,d0.w),a2
000195AE 321A                       		move.w	(a2)+,d1
000195B0 2248                       		movea.l	a0,a1
000195B2 6000                       		bra.s	SpinC_LoadPform
000195B4                            ; ===========================================================================
000195B4                            
000195B4                            SpinC_Loop:
000195B4 4EB9 0000 FF18             		jsr	(FindFreeObj).l
000195BA 6600                       		bne.s	loc_163D0
000195BC                            
000195BC                            SpinC_LoadPform:
000195BC 12BC 006F                  		move.b	#id_SpinConvey,0(a1)
000195C0 335A 0008                  		move.w	(a2)+,obX(a1)
000195C4 335A 000C                  		move.w	(a2)+,obY(a1)
000195C8 301A                       		move.w	(a2)+,d0
000195CA 1340 0028                  		move.b	d0,obSubtype(a1)
000195CE                            
000195CE                            loc_163D0:
000195CE 51C9 FFE4                  		dbf	d1,SpinC_Loop
000195D2                            
000195D2 588F                       		addq.l	#4,sp
000195D4 4E75                       		rts	
000195D6                            ; ===========================================================================
000195D6                            
000195D6                            loc_163D8:	; Routine 2
000195D6 43F9 0000 0000             		lea	(Ani_SpinConvey).l,a1
000195DC 4EB9 0000 CB4E             		jsr	(AnimateSprite).l
000195E2 4A28 001A                  		tst.b	obFrame(a0)
000195E6 6600                       		bne.s	loc_16404
000195E8 3F28 0008                  		move.w	obX(a0),-(sp)
000195EC 6100 0000                  		bsr.w	loc_16424
000195F0 323C 001B                  		move.w	#$1B,d1
000195F4 343C 0007                  		move.w	#7,d2
000195F8 3602                       		move.w	d2,d3
000195FA 5243                       		addq.w	#1,d3
000195FC 381F                       		move.w	(sp)+,d4
000195FE 6000 88AE                  		bra.w	SolidObject
00019602                            ; ===========================================================================
00019602                            
00019602                            loc_16404:
00019602 0828 0003 0022             		btst	#3,obStatus(a0)
00019608 6700                       		beq.s	loc_16420
0001960A 43F8 D000                  		lea	(v_objspace).w,a1
0001960E 08A9 0003 0022             		bclr	#3,obStatus(a1)
00019614 08A8 0003 0022             		bclr	#3,obStatus(a0)
0001961A 4228 0025                  		clr.b	obSolid(a0)
0001961E                            
0001961E                            loc_16420:
0001961E 6000 0000                  		bra.w	loc_16424
00019622                            
00019622                            loc_16424:
00019622 3028 0008                  		move.w	obX(a0),d0
00019626 B068 0034                  		cmp.w	$34(a0),d0
0001962A 6600                       		bne.s	loc_16484
0001962C 3028 000C                  		move.w	obY(a0),d0
00019630 B068 0036                  		cmp.w	$36(a0),d0
00019634 6600                       		bne.s	loc_16484
00019636 7200                       		moveq	#0,d1
00019638 1228 0038                  		move.b	$38(a0),d1
0001963C D228 003A                  		add.b	$3A(a0),d1
00019640 B228 0039                  		cmp.b	$39(a0),d1
00019644 6500                       		bcs.s	loc_16456
00019646 1001                       		move.b	d1,d0
00019648 7200                       		moveq	#0,d1
0001964A 4A00                       		tst.b	d0
0001964C 6A00                       		bpl.s	loc_16456
0001964E 1228 0039                  		move.b	$39(a0),d1
00019652 5901                       		subq.b	#4,d1
00019654                            
00019654                            loc_16456:
00019654 1141 0038                  		move.b	d1,$38(a0)
00019658 2268 003C                  		movea.l	$3C(a0),a1
0001965C 3171 1000 0034             		move.w	(a1,d1.w),$34(a0)
00019662 3171 1002 0036             		move.w	2(a1,d1.w),$36(a0)
00019668 4A41                       		tst.w	d1
0001966A 6600                       		bne.s	loc_16474
0001966C 117C 0001 001C             		move.b	#1,obAnim(a0)
00019672                            
00019672                            loc_16474:
00019672 0C41 0008                  		cmpi.w	#8,d1
00019676 6600                       		bne.s	loc_16480
00019678 117C 0000 001C             		move.b	#0,obAnim(a0)
0001967E                            
0001967E                            loc_16480:
0001967E 6100 B41C                  		bsr.w	LCon_ChangeDir
00019682                            
00019682                            loc_16484:
00019682 4EF9 0000 FA78             		jmp	(SpeedToPos).l
00019682 4EF9 0000 FA78             		jmp	(SpeedToPos).l
00019688                            		include	"_anim\SBZ Spin Platform Conveyor.asm"
00019688                            ; ---------------------------------------------------------------------------
00019688                            ; Animation script - platform on conveyor belt (SBZ)
00019688                            ; ---------------------------------------------------------------------------
00019688 0000                       Ani_SpinConvey:	dc.w @spin-Ani_SpinConvey
0001968A 0000                       		dc.w @still-Ani_SpinConvey
0001968C 0000 0102 0304 4342 4140+  @spin:		dc.b 0,	0, 1, 2, 3, 4, $43, $42, $41, $40, $61,	$62, $63
00019699 6423 2221 00FF             		dc.b $64, $23, $22, $21, 0, afEnd
000196A0 00                         		even
000196A0 0F00 FF                    @still:		dc.b $F, 0, afEnd
000196A4 00                         		even
000196A4 00                         		even
000196A4                            
000196A4 0000 0000 0000             off_164A6:	dc.w word_164B2-off_164A6, word_164C6-off_164A6, word_164DA-off_164A6
000196AA 0000 0000 0000             		dc.w word_164EE-off_164A6, word_16502-off_164A6, word_16516-off_164A6
000196B0 0010 0E80 0E14 0370 0EEF+  word_164B2:	dc.w $10, $E80,	$E14, $370, $EEF, $302,	$EEF, $340, $E14, $3AE
000196C4 0010 0F80 0F14 02E0 0FEF+  word_164C6:	dc.w $10, $F80,	$F14, $2E0, $FEF, $272,	$FEF, $2B0, $F14, $31E
000196D8 0010 1080 1014 0270 10EF+  word_164DA:	dc.w $10, $1080, $1014,	$270, $10EF, $202, $10EF, $240,	$1014, $2AE
000196EC 0010 0F80 0F14 0570 0FEF+  word_164EE:	dc.w $10, $F80,	$F14, $570, $FEF, $502,	$FEF, $540, $F14, $5AE
00019700 0010 1B80 1B14 0670 1BEF+  word_16502:	dc.w $10, $1B80, $1B14,	$670, $1BEF, $602, $1BEF, $640,	$1B14, $6AE
00019714 0010 1C80 1C14 05E0 1CEF+  word_16516:	dc.w $10, $1C80, $1C14,	$5E0, $1CEF, $572, $1CEF, $5B0,	$1C14, $61E
00019728                            ; ===========================================================================
00019728                            
00019728                            		include	"_incObj\70 Girder Block.asm"
00019728                            ; ---------------------------------------------------------------------------
00019728                            ; Object 70 - large girder block (SBZ)
00019728                            ; ---------------------------------------------------------------------------
00019728                            
00019728                            Girder:
00019728 7000                       		moveq	#0,d0
0001972A 1028 0024                  		move.b	obRoutine(a0),d0
0001972E 323B 0000                  		move.w	Gird_Index(pc,d0.w),d1
00019732 4EFB 1000                  		jmp	Gird_Index(pc,d1.w)
00019736                            ; ===========================================================================
00019736 0000                       Gird_Index:	dc.w Gird_Main-Gird_Index
00019738 0000                       		dc.w Gird_Action-Gird_Index
0001973A                            
0001973A =00000016                  gird_height:	equ $16
0001973A =00000032                  gird_origX:	equ $32		; original x-axis position
0001973A =00000030                  gird_origY:	equ $30		; original y-axis position
0001973A =00000034                  gird_time:	equ $34		; duration for movement in a direction
0001973A =00000038                  gird_set:	equ $38		; which movement settings to use (0/8/16/24)
0001973A =0000003A                  gird_delay:	equ $3A		; delay for movement
0001973A                            ; ===========================================================================
0001973A                            
0001973A                            Gird_Main:	; Routine 0
0001973A 5428 0024                  		addq.b	#2,obRoutine(a0)
0001973E 217C 0000 0000 0004        		move.l	#Map_Gird,obMap(a0)
00019746 317C 42F0 0002             		move.w	#$42F0,obGfx(a0)
0001974C 0028 0004 0001             		ori.b	#4,obRender(a0)
00019752 317C 0200 0018             		move.w	#$200,obPriority(a0)
00019758 117C 0060 0014             		move.b	#$60,obActWid(a0)
0001975E 117C 0018 0016             		move.b	#$18,gird_height(a0)
00019764 3168 0008 0032             		move.w	obX(a0),gird_origX(a0)
0001976A 3168 000C 0030             		move.w	obY(a0),gird_origY(a0)
00019770 6100 0000                  		bsr.w	Gird_ChgMove
00019774                            
00019774                            Gird_Action:	; Routine 2
00019774 3F28 0008                  		move.w	obX(a0),-(sp)
00019778 4A68 003A                  		tst.w	gird_delay(a0)
0001977C 6700                       		beq.s	@beginmove
0001977E 5368 003A                  		subq.w	#1,gird_delay(a0)
00019782 6600                       		bne.s	@solid
00019784                            
00019784                            	@beginmove:
00019784 4EB9 0000 FA78             		jsr	(SpeedToPos).l
0001978A 5368 0034                  		subq.w	#1,gird_time(a0) ; decrement movement duration
0001978E 6600                       		bne.s	@solid		; if time remains, branch
00019790 6100 0000                  		bsr.w	Gird_ChgMove	; if time is zero, branch
00019794                            
00019794                            	@solid:
00019794 381F                       		move.w	(sp)+,d4
00019796 4A28 0001                  		tst.b	obRender(a0)
0001979A 6A00                       		bpl.s	@chkdel
0001979C 7200                       		moveq	#0,d1
0001979E 1228 0014                  		move.b	obActWid(a0),d1
000197A2 0641 000B                  		addi.w	#$B,d1
000197A6 7400                       		moveq	#0,d2
000197A8 1428 0016                  		move.b	gird_height(a0),d2
000197AC 3602                       		move.w	d2,d3
000197AE 5243                       		addq.w	#1,d3
000197B0 6100 86FC                  		bsr.w	SolidObject
000197B4                            
000197B4                            	@chkdel:
000197D0 4EF9 0000 FA8C             		jmp	(DisplaySprite).l
000197D6                            
000197D6                            	@delete:
000197D6 4EF9 0000 FACC             		jmp	(DeleteObject).l
000197DC                            ; ===========================================================================
000197DC                            
000197DC                            Gird_ChgMove:
000197DC 1028 0038                  		move.b	gird_set(a0),d0
000197E0 0240 0018                  		andi.w	#$18,d0
000197E4 43F9 0000 0000             		lea	(@settings).l,a1
000197EA 43F1 0000                  		lea	(a1,d0.w),a1
000197EE 3159 0010                  		move.w	(a1)+,obVelX(a0)
000197F2 3159 0012                  		move.w	(a1)+,obVelY(a0)
000197F6 3159 0034                  		move.w	(a1)+,gird_time(a0)
000197FA 5028 0038                  		addq.b	#8,gird_set(a0)	; use next settings
000197FE 317C 0007 003A             		move.w	#7,gird_delay(a0)
00019804 4E75                       		rts	
00019806                            ; ===========================================================================
00019806                            @settings:	;   x-speed, y-speed, duration
00019806 0100 0000 0060 0000        		dc.w   $100,	 0,   $60,     0 ; right
0001980E 0000 0100 0030 0000        		dc.w	  0,  $100,   $30,     0 ; down
00019816 FF00 FFC0 0060 0000        		dc.w  -$100,  -$40,   $60,     0 ; up/left
0001981E 0000 FF00 0018 0000        		dc.w	  0, -$100,   $18,     0 ; up
0001981E 0000 FF00 0018 0000        		dc.w	  0, -$100,   $18,     0 ; up
00019826                            Map_Gird:	include	"_maps\Girder Block.asm"
00019826                            ; ---------------------------------------------------------------------------
00019826                            ; Sprite mappings - large girder block (SBZ)
00019826                            ; ---------------------------------------------------------------------------
00019826                            Map_Gird_internal:
00019826 0000                       		dc.w @girder-Map_Gird_internal
00019828 0C                         @girder:	dc.b $C
00019829 E80E 0000 A0               		dc.b $E8, $E, 0, 0, $A0
0001982E 000E 1000 A0               		dc.b 0,	$E, $10, 0, $A0
00019833 E80E 0006 C0               		dc.b $E8, $E, 0, 6, $C0
00019838 000E 1006 C0               		dc.b 0,	$E, $10, 6, $C0
0001983D E80E 0006 E0               		dc.b $E8, $E, 0, 6, $E0
00019842 000E 1006 E0               		dc.b 0,	$E, $10, 6, $E0
00019847 E80E 0006 00               		dc.b $E8, $E, 0, 6, 0
0001984C 000E 1006 00               		dc.b 0,	$E, $10, 6, 0
00019851 E80E 0006 20               		dc.b $E8, $E, 0, 6, $20
00019856 000E 1006 20               		dc.b 0,	$E, $10, 6, $20
0001985B E80E 0006 40               		dc.b $E8, $E, 0, 6, $40
00019860 000E 1006 40               		dc.b 0,	$E, $10, 6, $40
00019866 00                         		even
00019866 00                         		even
00019866                            		include	"_incObj\72 Teleporter.asm"
00019866                            ; ---------------------------------------------------------------------------
00019866                            ; Object 72 - teleporter (SBZ)
00019866                            ; ---------------------------------------------------------------------------
00019866                            
00019866                            Teleport:
00019866 7000                       		moveq	#0,d0
00019868 1028 0024                  		move.b	obRoutine(a0),d0
0001986C 323B 0000                  		move.w	Tele_Index(pc,d0.w),d1
00019870 4EBB 1000                  		jsr	Tele_Index(pc,d1.w)
00019890 4E75                       		rts	
00019892                            
00019892                            	@delete:
00019892 4EF9 0000 FACC             		jmp	(DeleteObject).l
00019898                            ; ===========================================================================
00019898 0000                       Tele_Index:	dc.w Tele_Main-Tele_Index
0001989A 0000                       		dc.w loc_166C8-Tele_Index
0001989C 0000                       		dc.w loc_1675E-Tele_Index
0001989E 0000                       		dc.w loc_16798-Tele_Index
000198A0                            ; ===========================================================================
000198A0                            
000198A0                            Tele_Main:	; Routine 0
000198A0 5428 0024                  		addq.b	#2,obRoutine(a0)
000198A4 1028 0028                  		move.b	obSubtype(a0),d0
000198A8 D040                       		add.w	d0,d0
000198AA 0240 001E                  		andi.w	#$1E,d0
000198AE 45FA 0000                  		lea	Tele_Data(pc),a2
000198B2 D4F2 0000                  		adda.w	(a2,d0.w),a2
000198B6 315A 003A                  		move.w	(a2)+,$3A(a0)
000198BA 214A 003C                  		move.l	a2,$3C(a0)
000198BE 315A 0036                  		move.w	(a2)+,$36(a0)
000198C2 315A 0038                  		move.w	(a2)+,$38(a0)
000198C6                            
000198C6                            loc_166C8:	; Routine 2
000198C6 43F8 D000                  		lea	(v_player).w,a1
000198CA 3029 0008                  		move.w	obX(a1),d0
000198CE 9068 0008                  		sub.w	obX(a0),d0
000198D2 0828 0000 0022             		btst	#0,obStatus(a0)
000198D8 6700                       		beq.s	loc_166E0
000198DA 0640 000F                  		addi.w	#$F,d0
000198DE                            
000198DE                            loc_166E0:
000198DE 0C40 0010                  		cmpi.w	#$10,d0
000198E2 6400                       		bcc.s	locret_1675C
000198E4 3229 000C                  		move.w	obY(a1),d1
000198E8 9268 000C                  		sub.w	obY(a0),d1
000198EC 0641 0020                  		addi.w	#$20,d1
000198F0 0C41 0040                  		cmpi.w	#$40,d1
000198F4 6400                       		bcc.s	locret_1675C
000198F6 4A38 F7C8                  		tst.b	(f_lockmulti).w
000198FA 6600                       		bne.s	locret_1675C
000198FC 0C28 0007 0028             		cmpi.b	#7,obSubtype(a0)
00019902 6600                       		bne.s	loc_1670E
00019904 0C78 0032 FE20             		cmpi.w	#50,(v_rings).w
0001990A 6500                       		bcs.s	locret_1675C
0001990C                            
0001990C                            loc_1670E:
0001990C 5428 0024                  		addq.b	#2,obRoutine(a0)
00019910 11FC 0081 F7C8             		move.b	#$81,(f_lockmulti).w ; lock controls
00019916 137C 0002 001C             		move.b	#id_Roll,obAnim(a1) ; use Sonic's rolling animation
0001991C 337C 0800 0020             		move.w	#$800,obInertia(a1)
00019922 337C 0000 0010             		move.w	#0,obVelX(a1)
00019928 337C 0000 0012             		move.w	#0,obVelY(a1)
0001992E 08A8 0005 0022             		bclr	#5,obStatus(a0)
00019934 08A9 0005 0022             		bclr	#5,obStatus(a1)
0001993A 08E9 0001 0022             		bset	#1,obStatus(a1)
00019940 3368 0008 0008             		move.w	obX(a0),obX(a1)
00019946 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001994C 4228 0032                  		clr.b	$32(a0)
0001995A                            
0001995A                            locret_1675C:
0001995A 4E75                       		rts	
0001995C                            ; ===========================================================================
0001995C                            
0001995C                            loc_1675E:	; Routine 4
0001995C 43F8 D000                  		lea	(v_player).w,a1
00019960 1028 0032                  		move.b	$32(a0),d0
00019964 5428 0032                  		addq.b	#2,$32(a0)
00019968 4EB9 0000 3A82             		jsr	(CalcSine).l
0001996E EA40                       		asr.w	#5,d0
00019970 3428 000C                  		move.w	obY(a0),d2
00019974 9440                       		sub.w	d0,d2
00019976 3342 000C                  		move.w	d2,obY(a1)
0001997A 0C28 0080 0032             		cmpi.b	#$80,$32(a0)
00019980 6600                       		bne.s	locret_16796
00019982 6100 0000                  		bsr.w	sub_1681C
00019986 5428 0024                  		addq.b	#2,obRoutine(a0)
00019994                            
00019994                            locret_16796:
00019994 4E75                       		rts	
00019996                            ; ===========================================================================
00019996                            
00019996                            loc_16798:	; Routine 6
00019996 588F                       		addq.l	#4,sp
00019998 43F8 D000                  		lea	(v_player).w,a1
0001999C 5328 002E                  		subq.b	#1,$2E(a0)
000199A0 6A00                       		bpl.s	loc_167DA
000199A2 3368 0036 0008             		move.w	$36(a0),obX(a1)
000199A8 3368 0038 000C             		move.w	$38(a0),obY(a1)
000199AE 7200                       		moveq	#0,d1
000199B0 1228 003A                  		move.b	$3A(a0),d1
000199B4 5801                       		addq.b	#4,d1
000199B6 B228 003B                  		cmp.b	$3B(a0),d1
000199BA 6500                       		bcs.s	loc_167C2
000199BC 7200                       		moveq	#0,d1
000199BE 6000                       		bra.s	loc_16800
000199C0                            ; ===========================================================================
000199C0                            
000199C0                            loc_167C2:
000199C0 1141 003A                  		move.b	d1,$3A(a0)
000199C4 2468 003C                  		movea.l	$3C(a0),a2
000199C8 3172 1000 0036             		move.w	(a2,d1.w),$36(a0)
000199CE 3172 1002 0038             		move.w	2(a2,d1.w),$38(a0)
000199D4 6000 0000                  		bra.w	sub_1681C
000199D8                            ; ===========================================================================
000199D8                            
000199D8                            loc_167DA:
000199D8 2429 0008                  		move.l	obX(a1),d2
000199DC 2629 000C                  		move.l	obY(a1),d3
000199E0 3029 0010                  		move.w	obVelX(a1),d0
000199E4 48C0                       		ext.l	d0
000199E6 E180                       		asl.l	#8,d0
000199E8 D480                       		add.l	d0,d2
000199EA 3029 0012                  		move.w	obVelY(a1),d0
000199EE 48C0                       		ext.l	d0
000199F0 E180                       		asl.l	#8,d0
000199F2 D680                       		add.l	d0,d3
000199F4 2342 0008                  		move.l	d2,obX(a1)
000199F8 2343 000C                  		move.l	d3,obY(a1)
000199FC 4E75                       		rts	
000199FE                            ; ===========================================================================
000199FE                            
000199FE                            loc_16800:
000199FE 0269 07FF 000C             		andi.w	#$7FF,obY(a1)
00019A04 4228 0024                  		clr.b	obRoutine(a0)
00019A08 4238 F7C8                  		clr.b	(f_lockmulti).w
00019A0C 337C 0000 0010             		move.w	#0,obVelX(a1)
00019A12 337C 0200 0012             		move.w	#$200,obVelY(a1)
00019A18 4E75                       		rts	
00019A1A                            
00019A1A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00019A1A                            
00019A1A                            
00019A1A                            sub_1681C:
00019A1A 7000                       		moveq	#0,d0
00019A1C 343C 1000                  		move.w	#$1000,d2
00019A20 3028 0036                  		move.w	$36(a0),d0
00019A24 9069 0008                  		sub.w	obX(a1),d0
00019A28 6C00                       		bge.s	loc_16830
00019A2A 4440                       		neg.w	d0
00019A2C 4442                       		neg.w	d2
00019A2E                            
00019A2E                            loc_16830:
00019A2E 7200                       		moveq	#0,d1
00019A30 363C 1000                  		move.w	#$1000,d3
00019A34 3228 0038                  		move.w	$38(a0),d1
00019A38 9269 000C                  		sub.w	obY(a1),d1
00019A3C 6C00                       		bge.s	loc_16844
00019A3E 4441                       		neg.w	d1
00019A40 4443                       		neg.w	d3
00019A42                            
00019A42                            loc_16844:
00019A42 B240                       		cmp.w	d0,d1
00019A44 6500                       		bcs.s	loc_1687A
00019A46 7200                       		moveq	#0,d1
00019A48 3228 0038                  		move.w	$38(a0),d1
00019A4C 9269 000C                  		sub.w	obY(a1),d1
00019A50 4841                       		swap	d1
00019A52 83C3                       		divs.w	d3,d1
00019A54 7000                       		moveq	#0,d0
00019A56 3028 0036                  		move.w	$36(a0),d0
00019A5A 9069 0008                  		sub.w	obX(a1),d0
00019A5E 6700                       		beq.s	loc_16866
00019A60 4840                       		swap	d0
00019A62 81C1                       		divs.w	d1,d0
00019A64                            
00019A64                            loc_16866:
00019A64 3340 0010                  		move.w	d0,obVelX(a1)
00019A68 3343 0012                  		move.w	d3,obVelY(a1)
00019A6C 4A41                       		tst.w	d1
00019A6E 6A00                       		bpl.s	loc_16874
00019A70 4441                       		neg.w	d1
00019A72                            
00019A72                            loc_16874:
00019A72 3141 002E                  		move.w	d1,$2E(a0)
00019A76 4E75                       		rts	
00019A78                            ; ===========================================================================
00019A78                            
00019A78                            loc_1687A:
00019A78 7000                       		moveq	#0,d0
00019A7A 3028 0036                  		move.w	$36(a0),d0
00019A7E 9069 0008                  		sub.w	obX(a1),d0
00019A82 4840                       		swap	d0
00019A84 81C2                       		divs.w	d2,d0
00019A86 7200                       		moveq	#0,d1
00019A88 3228 0038                  		move.w	$38(a0),d1
00019A8C 9269 000C                  		sub.w	obY(a1),d1
00019A90 6700                       		beq.s	loc_16898
00019A92 4841                       		swap	d1
00019A94 83C0                       		divs.w	d0,d1
00019A96                            
00019A96                            loc_16898:
00019A96 3341 0012                  		move.w	d1,obVelY(a1)
00019A9A 3342 0010                  		move.w	d2,obVelX(a1)
00019A9E 4A40                       		tst.w	d0
00019AA0 6A00                       		bpl.s	loc_168A6
00019AA2 4440                       		neg.w	d0
00019AA4                            
00019AA4                            loc_168A6:
00019AA4 3140 002E                  		move.w	d0,$2E(a0)
00019AA8 4E75                       		rts	
00019AAA                            ; End of function sub_1681C
00019AAA                            
00019AAA                            ; ===========================================================================
00019AAA 0000 0000 0000             Tele_Data:	dc.w @type00-Tele_Data, @type01-Tele_Data, @type02-Tele_Data
00019AB0 0000 0000 0000             		dc.w @type03-Tele_Data, @type04-Tele_Data, @type05-Tele_Data
00019AB6 0000 0000                  		dc.w @type06-Tele_Data, @type07-Tele_Data
00019ABA 0004 0794 098C             @type00:	dc.w 4,	$794, $98C
00019AC0 0004 0094 038C             @type01:	dc.w 4,	$94, $38C
00019AC6 001C 0794 02E8             @type02:	dc.w $1C, $794,	$2E8
00019ACC 07A4 02C0 07D0             		dc.w $7A4, $2C0, $7D0
00019AD2 02AC 0858 02AC             		dc.w $2AC, $858, $2AC
00019AD8 0884 0298 0894             		dc.w $884, $298, $894
00019ADE 0270 0894 0190             		dc.w $270, $894, $190
00019AE4 0004 0894 0690             @type03:	dc.w 4,	$894, $690
00019AEA 001C 1194 0470             @type04:	dc.w $1C, $1194, $470
00019AF0 1184 0498 1158             		dc.w $1184, $498, $1158
00019AF6 04AC 0FD0 04AC             		dc.w $4AC, $FD0, $4AC
00019AFC 0FA4 04C0 0F94             		dc.w $FA4, $4C0, $F94
00019B02 04E8 0F94 0590             		dc.w $4E8, $F94, $590
00019B08 0004 1294 0490             @type05:	dc.w 4,	$1294, $490
00019B0E 001C 1594 FFE8             @type06:	dc.w $1C, $1594, $FFE8
00019B14 1584 FFC0 1560             		dc.w $1584, $FFC0, $1560
00019B1A FFAC 14D0 FFAC             		dc.w $FFAC, $14D0, $FFAC
00019B20 14A4 FF98 1494             		dc.w $14A4, $FF98, $1494
00019B26 FF70 1494 FD90             		dc.w $FF70, $1494, $FD90
00019B2C 0004 0894 0090             @type07:	dc.w 4,	$894, $90
00019B2C 0004 0894 0090             @type07:	dc.w 4,	$894, $90
00019B32                            
00019B32                            		include	"_incObj\78 Caterkiller.asm"
00019B32                            ; ---------------------------------------------------------------------------
00019B32                            ; Object 78 - Caterkiller enemy	(MZ, SBZ)
00019B32                            ; ---------------------------------------------------------------------------
00019B32                            
00019B32                            Caterkiller:
00019B32 7000                       		moveq	#0,d0
00019B34 1028 0024                  		move.b	obRoutine(a0),d0
00019B38 323B 0000                  		move.w	Cat_Index(pc,d0.w),d1
00019B3C 4EFB 1000                  		jmp	Cat_Index(pc,d1.w)
00019B40                            ; ===========================================================================
00019B40 0000                       Cat_Index:	dc.w Cat_Main-Cat_Index
00019B42 0000                       		dc.w Cat_Head-Cat_Index
00019B44 0000                       		dc.w Cat_BodySeg1-Cat_Index
00019B46 0000                       		dc.w Cat_BodySeg2-Cat_Index
00019B48 0000                       		dc.w Cat_BodySeg1-Cat_Index
00019B4A 0000                       		dc.w Cat_Delete-Cat_Index
00019B4C 0000                       		dc.w loc_16CC0-Cat_Index
00019B4E                            
00019B4E =0000003C                  cat_parent:	equ $3C		; address of parent object
00019B4E                            ; ===========================================================================
00019B4E                            
00019B4E                            locret_16950:
00019B4E 4E75                       		rts	
00019B50                            ; ===========================================================================
00019B50                            
00019B50                            Cat_Main:	; Routine 0
00019B50 117C 0007 0016             		move.b	#7,obHeight(a0)
00019B56 117C 0008 0017             		move.b	#8,obWidth(a0)
00019B5C 4EB9 0000 FA40             		jsr	(ObjectFall).l
00019B62 4EB9 0001 8018             		jsr	(ObjFloorDist).l
00019B68 4A41                       		tst.w	d1
00019B6A 6AE2                       		bpl.s	locret_16950
00019B6C D368 000C                  		add.w	d1,obY(a0)
00019B70 4268 0012                  		clr.w	obVelY(a0)
00019B74 5428 0024                  		addq.b	#2,obRoutine(a0)
00019B78 217C 0000 0000 0004        		move.l	#Map_Cat,obMap(a0)
00019B80 317C 22B0 0002             		move.w	#$22B0,obGfx(a0)
00019B86 0C38 0005 FE10             		cmpi.b	#id_SBZ,(v_zone).w ; if level is SBZ, branch
00019B8C 6700                       		beq.s	@isscrapbrain
00019B8E 317C 24FF 0002             		move.w	#$24FF,obGfx(a0) ; MZ specific code
00019B94                            
00019B94                            	@isscrapbrain:
00019B94 0228 0003 0001             		andi.b	#3,obRender(a0)
00019B9A 0028 0004 0001             		ori.b	#4,obRender(a0)
00019BA0 1168 0001 0022             		move.b	obRender(a0),obStatus(a0)
00019BA6 317C 0200 0018             		move.w	#$200,obPriority(a0)
00019BAC 117C 0008 0014             		move.b	#8,obActWid(a0)
00019BB2 117C 000B 0020             		move.b	#$B,obColType(a0)
00019BB8 3428 0008                  		move.w	obX(a0),d2
00019BBC 7A0C                       		moveq	#$C,d5
00019BBE 0828 0000 0022             		btst	#0,obStatus(a0)
00019BC4 6700                       		beq.s	@noflip
00019BC6 4445                       		neg.w	d5
00019BC8                            
00019BC8                            	@noflip:
00019BC8 1C3C 0004                  		move.b	#4,d6
00019BCC 7600                       		moveq	#0,d3
00019BCE 7804                       		moveq	#4,d4
00019BD0 2448                       		movea.l	a0,a2
00019BD2 7202                       		moveq	#2,d1
00019BD4                            
00019BD4                            Cat_Loop:
00019BD4 4EB9 0000 FF2E             		jsr	(FindNextFreeObj).l
00019BDA 6600 0000                  			bne.w	Cat_ChkGone
00019BDE 12BC 0078                  		move.b	#id_Caterkiller,0(a1) ; load body segment object
00019BE2 1346 0024                  		move.b	d6,obRoutine(a1) ; goto Cat_BodySeg1 or Cat_BodySeg2 next
00019BE6 5406                       		addq.b	#2,d6		; alternate between the two
00019BE8 2368 0004 0004             		move.l	obMap(a0),obMap(a1)
00019BEE 3368 0002 0002             		move.w	obGfx(a0),obGfx(a1)
00019BF4 337C 0280 0018             		move.w	#$280,obPriority(a1)
00019BFA 137C 0008 0014             		move.b	#8,obActWid(a1)
00019C00 137C 00CB 0020             		move.b	#$CB,obColType(a1)
00019C06 D445                       		add.w	d5,d2
00019C08 3342 0008                  		move.w	d2,obX(a1)
00019C0C 3368 000C 000C             		move.w	obY(a0),obY(a1)
00019C12 1368 0022 0022             		move.b	obStatus(a0),obStatus(a1)
00019C18 1368 0022 0001             		move.b	obStatus(a0),obRender(a1)
00019C1E 137C 0008 001A             		move.b	#8,obFrame(a1)
00019C24 234A 003C                  		move.l	a2,cat_parent(a1)
00019C28 1344 003C                  		move.b	d4,cat_parent(a1)
00019C2C 5804                       		addq.b	#4,d4
00019C2E 2449                       		movea.l	a1,a2
00019C30                            
00019C30                            	@fail:
00019C30 51C9 FFA2                  		dbf	d1,Cat_Loop	; repeat sequence 2 more times
00019C34                            
00019C34 117C 0007 002A             		move.b	#7,$2A(a0)
00019C3A 4228 003C                  		clr.b	cat_parent(a0)
00019C3E                            
00019C3E                            Cat_Head:	; Routine 2
00019C3E 4A28 0022                  		tst.b	obStatus(a0)
00019C42 6B00 0000                  		bmi.w	loc_16C96
00019C46 7000                       		moveq	#0,d0
00019C48 1028 0025                  		move.b	ob2ndRout(a0),d0
00019C4C 323B 0000                  		move.w	Cat_Index2(pc,d0.w),d1
00019C50 4EBB 1000                  		jsr	Cat_Index2(pc,d1.w)
00019C54 1228 002B                  		move.b	$2B(a0),d1
00019C58 6A00                       		bpl.s	@display
00019C5A 43F9 0000 0000             		lea	(Ani_Cat).l,a1
00019C60 1028 0026                  		move.b	obAngle(a0),d0
00019C64 0240 007F                  		andi.w	#$7F,d0
00019C68 5828 0026                  		addq.b	#4,obAngle(a0)
00019C6C 1031 0000                  		move.b	(a1,d0.w),d0
00019C70 6A00                       		bpl.s	@animate
00019C72 08A8 0007 002B             		bclr	#7,$2B(a0)
00019C78 6000                       		bra.s	@display
00019C7A                            
00019C7A                            	@animate:
00019C7A 0201 0010                  		andi.b	#$10,d1
00019C7E D001                       		add.b	d1,d0
00019C80 1140 001A                  		move.b	d0,obFrame(a0)
00019C84                            
00019C84                            	@display:
00019CA2 4EF9 0000 FA8C             		jmp	(DisplaySprite).l
00019CA8                            
00019CA8                            	Cat_ChkGone:
00019CA8 45F8 FC00                  		lea	(v_objstate).w,a2
00019CAC 7000                       		moveq	#0,d0
00019CAE 1028 0023                  		move.b	obRespawnNo(a0),d0
00019CB2 6700                       		beq.s	@delete
00019CB4 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00019CBA                            
00019CBA                            	@delete:
00019CBA 117C 000A 0024             		move.b	#$A,obRoutine(a0)	; goto Cat_Delete next
00019CC0 4E75                       		rts	
00019CC2                            ; ===========================================================================
00019CC2                            
00019CC2                            Cat_Delete:	; Routine $A
00019CC2 4EF9 0000 FACC             		jmp	(DeleteObject).l
00019CC8                            ; ===========================================================================
00019CC8 0000                       Cat_Index2:	dc.w @wait-Cat_Index2
00019CCA 0000                       		dc.w loc_16B02-Cat_Index2
00019CCC                            ; ===========================================================================
00019CCC                            
00019CCC                            @wait:
00019CCC 5328 002A                  		subq.b	#1,$2A(a0)
00019CD0 6B00                       		bmi.s	@move
00019CD2 4E75                       		rts	
00019CD4                            ; ===========================================================================
00019CD4                            
00019CD4                            @move:
00019CD4 5428 0025                  		addq.b	#2,ob2ndRout(a0)
00019CD8 117C 0010 002A             		move.b	#$10,$2A(a0)
00019CDE 317C FF40 0010             		move.w	#-$C0,obVelX(a0)
00019CE4 317C 0040 001C             		move.w	#$40,obAnim(a0)
00019CEA 0868 0004 002B             		bchg	#4,$2B(a0)
00019CF0 6600                       		bne.s	loc_16AFC
00019CF2 4268 0010                  		clr.w	obVelX(a0)
00019CF6 4468 001C                  		neg.w	obAnim(a0)
00019CFA                            
00019CFA                            loc_16AFC:
00019CFA 08E8 0007 002B             		bset	#7,$2B(a0)
00019D00                            
00019D00                            loc_16B02:
00019D00 5328 002A                  		subq.b	#1,$2A(a0)
00019D04 6B00                       		bmi.s	@loc_16B5E
00019D06 4A68 0010                  			tst.w	obVelX(a0)
00019D0A 6700                       			beq.s	@notmoving
00019D0C 2428 0008                  			move.l	obX(a0),d2
00019D10 2602                       			move.l	d2,d3
00019D12 3028 0010                  		move.w	obVelX(a0),d0
00019D16 0828 0000 0022             		btst	#0,obStatus(a0)
00019D1C 6700                       		beq.s	@noflip
00019D1E 4440                       		neg.w	d0
00019D20                            
00019D20                            	@noflip:
00019D20 48C0                       		ext.l	d0
00019D22 E180                       		asl.l	#8,d0
00019D24 D480                       		add.l	d0,d2
00019D26 2142 0008                  		move.l	d2,obX(a0)
00019D2A 4843                       			swap	d3
00019D2C B668 0008                  			cmp.w	obX(a0),d3
00019D30 6700                       			beq.s	@notmoving
00019D32 4EB9 0001 8018             			jsr	(ObjFloorDist).l
00019D38 0C41 FFF8                  			cmpi.w	#-8,d1
00019D3C 6D00                       			blt.s	@loc_16B70
00019D3E 0C41 000C                  			cmpi.w	#$C,d1
00019D42 6C00                       			bge.s	@loc_16B70
00019D44 D368 000C                  			add.w	d1,obY(a0)
00019D48 7000                       		moveq	#0,d0
00019D4A 1028 003C                  		move.b	cat_parent(a0),d0
00019D4E 5228 003C                  		addq.b	#1,cat_parent(a0)
00019D52 0228 000F 003C             		andi.b	#$F,cat_parent(a0)
00019D58 1181 002C                  		move.b	d1,$2C(a0,d0.w)
00019D5C                            
00019D5C                            	@notmoving:
00019D5C 4E75                       		rts	
00019D5E                            ; ===========================================================================
00019D5E                            
00019D5E                            @loc_16B5E:
00019D5E 5528 0025                  		subq.b	#2,ob2ndRout(a0)
00019D62 117C 0007 002A             		move.b	#7,$2A(a0)
00019D68 4268 0010                  			clr.w	obVelX(a0)
00019D6C 4268 001C                  			clr.w	obAnim(a0)
00019D70 4E75                       		rts	
00019D72                            ; ===========================================================================
00019D72                            
00019D72                            @loc_16B70:
00019D72 7000                       			moveq	#0,d0
00019D74 1028 003C                  			move.b	cat_parent(a0),d0
00019D78 11BC 0080 002C             			move.b	#$80,$2C(a0,d0)
00019D7E 4468 000A                  			neg.w	obX+2(a0)
00019D82 6700                       			beq.s	@loc_1730A
00019D84 0828 0000 0022             			btst	#0,obStatus(a0)
00019D8A 6700                       			beq.s	@loc_1730A
00019D8C 5368 0008                  			subq.w	#1,obX(a0)
00019D90 5228 003C                  			addq.b	#1,cat_parent(a0)
00019D94 7000                       			moveq	#0,d0
00019D96 1028 003C                  			move.b	cat_parent(a0),d0
00019D9A 4230 002C                  			clr.b	$2C(a0,d0)
00019D9E                            	@loc_1730A:
00019D9E 0868 0000 0022             			bchg	#0,obStatus(a0)
00019DA4 1168 0022 0001             			move.b	obStatus(a0),obRender(a0)
00019DAA 5228 003C                  		addq.b	#1,cat_parent(a0)
00019DAE 0228 000F 003C             		andi.b	#$F,cat_parent(a0)
00019DB4 4E75                       		rts	
00019DB6                            ; ===========================================================================
00019DB6                            
00019DB6                            Cat_BodySeg2:	; Routine 6
00019DB6 2268 003C                  		movea.l	cat_parent(a0),a1
00019DBA 1169 002B 002B             		move.b	$2B(a1),$2B(a0)
00019DC0 6A00                       		bpl.s	Cat_BodySeg1
00019DC2 43F9 0000 0000             		lea	(Ani_Cat).l,a1
00019DC8 1028 0026                  		move.b	obAngle(a0),d0
00019DCC 0240 007F                  		andi.w	#$7F,d0
00019DD0 5828 0026                  		addq.b	#4,obAngle(a0)
00019DD4 4A31 0004                  		tst.b	4(a1,d0.w)
00019DD8 6A00                       		bpl.s	Cat_AniBody
00019DDA 5828 0026                  		addq.b	#4,obAngle(a0)
00019DDE                            
00019DDE                            Cat_AniBody:
00019DDE 1031 0000                  		move.b	(a1,d0.w),d0
00019DE2 5000                       		addq.b	#8,d0
00019DE4 1140 001A                  		move.b	d0,obFrame(a0)
00019DE8                            
00019DE8                            Cat_BodySeg1:	; Routine 4, 8
00019DE8 2268 003C                  		movea.l	cat_parent(a0),a1
00019DEC 4A28 0022                  		tst.b	obStatus(a0)
00019DF0 6B00 0000                  		bmi.w	loc_16C90
00019DF4 1169 002B 002B             		move.b	$2B(a1),$2B(a0)
00019DFA 1169 0025 0025             		move.b	ob2ndRout(a1),ob2ndRout(a0)
00019E00 6700 0000                  		beq.w	loc_16C64
00019E04 3169 001C 001C             		move.w	obAnim(a1),obAnim(a0)
00019E0A 3029 0010                  		move.w	obVelX(a1),d0
00019E0E D068 001C                  			add.w	obAnim(a0),d0
00019E12 3140 0010                  		move.w	d0,obVelX(a0)
00019E16 2428 0008                  		move.l	obX(a0),d2
00019E1A 2602                       		move.l	d2,d3
00019E1C 3028 0010                  		move.w	obVelX(a0),d0
00019E20 0828 0000 0022             		btst	#0,obStatus(a0)
00019E26 6700                       		beq.s	loc_16C0C
00019E28 4440                       		neg.w	d0
00019E2A                            
00019E2A                            loc_16C0C:
00019E2A 48C0                       		ext.l	d0
00019E2C E180                       		asl.l	#8,d0
00019E2E D480                       		add.l	d0,d2
00019E30 2142 0008                  		move.l	d2,obX(a0)
00019E34 4843                       		swap	d3
00019E36 B668 0008                  		cmp.w	obX(a0),d3
00019E3A 6700                       		beq.s	loc_16C64
00019E3C 7000                       		moveq	#0,d0
00019E3E 1028 003C                  		move.b	cat_parent(a0),d0
00019E42 1231 002C                  		move.b	$2C(a1,d0.w),d1
00019E46 0C01 0080                  		cmpi.b	#$80,d1
00019E4A 6600                       		bne.s	loc_16C50
00019E4C 1181 002C                  			move.b	d1,$2C(a0,d0)
00019E50 4468 000A                  			neg.w	obX+2(a0)
00019E54 6700                       			beq.s	locj_173E4
00019E56 0828 0000 0022             			btst	#0,obStatus(a0)
00019E5C 6700                       			beq.s	locj_173E4
00019E5E 0C68 FF40 0010             			cmpi.w	#-$C0,obVelX(a0)
00019E64 6600                       			bne.s	locj_173E4
00019E66 5368 0008                  			subq.w	#1,obX(a0)
00019E6A 5228 003C                  			addq.b	#1,cat_parent(a0)
00019E6E 7000                       			moveq	#0,d0
00019E70 1028 003C                  			move.b	cat_parent(a0),d0
00019E74 4230 002C                  			clr.b	$2C(a0,d0)
00019E78                            	locj_173E4:
00019E78 0868 0000 0022             		bchg	#0,obStatus(a0)
00019E7E 1168 0022 0001             		move.b	obStatus(a0),1(a0)
00019E84 5228 003C                  		addq.b	#1,cat_parent(a0)
00019E88 0228 000F 003C             		andi.b	#$F,cat_parent(a0)
00019E8E 6000                       		bra.s	loc_16C64
00019E90                            ; ===========================================================================
00019E90                            
00019E90                            loc_16C50:
00019E90 4881                       		ext.w	d1
00019E92 D368 000C                  		add.w	d1,obY(a0)
00019E96 5228 003C                  		addq.b	#1,cat_parent(a0)
00019E9A 0228 000F 003C             		andi.b	#$F,cat_parent(a0)
00019EA0 1181 002C                  		move.b	d1,$2C(a0,d0.w)
00019EA4                            
00019EA4                            loc_16C64:
00019EA4 0C29 000C 0024             		cmpi.b	#$C,obRoutine(a1)
00019EAA 6700                       		beq.s	loc_16C90
00019EAC 0C11 0027                  		cmpi.b	#id_ExplosionItem,0(a1)
00019EB0 6700                       		beq.s	loc_16C7C
00019EB2 0C29 000A 0024             		cmpi.b	#$A,obRoutine(a1)
00019EB8 6600                       		bne.s	loc_16C82
00019EBA                            
00019EBA                            loc_16C7C:
00019EBA 4229 0020                  		clr.b    $20(a1)
00019EBE 117C 000A 0024             		move.b	#$A,obRoutine(a0)
00019EC4                            
00019EC4                            loc_16C82:
00019EC4 4EF9 0000 FA8C             		jmp	(DisplaySprite).l
00019ECA                            
00019ECA                            ; ===========================================================================
00019ECA FE00 FE80 0180 0200        Cat_FragSpeed:	dc.w -$200, -$180, $180, $200
00019ED2                            ; ===========================================================================
00019ED2                            
00019ED2                            loc_16C90:
00019ED2 08E9 0007 0022             		bset	#7,obStatus(a1)
00019ED8                            
00019ED8                            loc_16C96:
00019ED8 7000                       		moveq	#0,d0
00019EDA 1028 0024                  		move.b	obRoutine(a0),d0
00019EDE 303B 00E8                  		move.w	Cat_FragSpeed-2(pc,d0.w),d0
00019EE2 0828 0000 0022             		btst	#0,obStatus(a0)
00019EE8 6700                       		beq.s	loc_16CAA
00019EEA 4440                       		neg.w	d0
00019EEC                            
00019EEC                            loc_16CAA:
00019EEC 3140 0010                  		move.w	d0,obVelX(a0)
00019EF0 317C FC00 0012             		move.w	#-$400,obVelY(a0)
00019EF6 117C 000C 0024             		move.b	#$C,obRoutine(a0)
00019EFC 0228 00F8 001A             		andi.b	#$F8,obFrame(a0)
00019F02                            
00019F02                            loc_16CC0:	; Routine $C
00019F02 4EB9 0000 FA40             		jsr	(ObjectFall).l
00019F08 4A68 0012                  		tst.w	obVelY(a0)
00019F0C 6B00                       		bmi.s	loc_16CE0
00019F0E 4EB9 0001 8018             		jsr	(ObjFloorDist).l
00019F14 4A41                       		tst.w	d1
00019F16 6A00                       		bpl.s	loc_16CE0
00019F18 D368 000C                  		add.w	d1,obY(a0)
00019F1C 317C FC00 0012             		move.w	#-$400,obVelY(a0)
00019F22                            
00019F22                            loc_16CE0:
00019F22 4A28 0001                  		tst.b	obRender(a0)
00019F26 6A00 FD80                  		bpl.w	Cat_ChkGone
00019F2A 4EF9 0000 FA8C             		jmp	(DisplaySprite).l
00019F2A 4EF9 0000 FA8C             		jmp	(DisplaySprite).l
00019F30                            		include	"_anim\Caterkiller.asm"
00019F30                            ; ---------------------------------------------------------------------------
00019F30                            ; Animation script - Caterkiller enemy (uses non-standard format)
00019F30                            ; ---------------------------------------------------------------------------
00019F30 0000 0000 0000 0000 0000+  Ani_Cat:	dc.b 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 1
00019F40 0101 0101 0101 0202 0202+  		dc.b 1,	1, 1, 1, 1, 1, 2, 2, 2,	2, 2, 3, 3, 3, 3, 3
00019F50 0404 0404 0404 0505 0505+  		dc.b 4,	4, 4, 4, 4, 4, 5, 5, 5,	5, 5, 6, 6, 6, 6, 6
00019F60 0606 0707 0707 0707 0707+  		dc.b 6,	6, 7, 7, 7, 7, 7, 7, 7,	7, 7, 7, $FF, 7, 7, $FF
00019F70 0707 0707 0707 0707 0707+  		dc.b 7,	7, 7, 7, 7, 7, 7, 7, 7,	7, 7, 7, 7, 7, 7, 6
00019F80 0606 0606 0606 0505 0505+  		dc.b 6,	6, 6, 6, 6, 6, 5, 5, 5,	5, 5, 4, 4, 4, 4, 4
00019F90 0403 0303 0303 0202 0202+  		dc.b 4,	3, 3, 3, 3, 3, 2, 2, 2,	2, 2, 1, 1, 1, 1, 1
00019FA0 0101 0000 0000 0000 0000+  		dc.b 1,	1, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, $FF, 0, 0, $FF
00019FB0                            		even
00019FB0                            		even
00019FB0                            Map_Cat:	include	"_maps\Caterkiller.asm"
00019FB0                            ; ---------------------------------------------------------------------------
00019FB0                            ; Sprite mappings - Caterkiller	enemy (MZ, SBZ)
00019FB0                            ; ---------------------------------------------------------------------------
00019FB0                            Map_Cat_internal:
00019FB0 0000                       		dc.w byte_16D9E-Map_Cat_internal
00019FB2 0000                       		dc.w byte_16DA4-Map_Cat_internal
00019FB4 0000                       		dc.w byte_16DAA-Map_Cat_internal
00019FB6 0000                       		dc.w byte_16DB0-Map_Cat_internal
00019FB8 0000                       		dc.w byte_16DB6-Map_Cat_internal
00019FBA 0000                       		dc.w byte_16DBC-Map_Cat_internal
00019FBC 0000                       		dc.w byte_16DC2-Map_Cat_internal
00019FBE 0000                       		dc.w byte_16DC8-Map_Cat_internal
00019FC0 0000                       		dc.w byte_16DCE-Map_Cat_internal
00019FC2 0000                       		dc.w byte_16DD4-Map_Cat_internal
00019FC4 0000                       		dc.w byte_16DDA-Map_Cat_internal
00019FC6 0000                       		dc.w byte_16DE0-Map_Cat_internal
00019FC8 0000                       		dc.w byte_16DE6-Map_Cat_internal
00019FCA 0000                       		dc.w byte_16DEC-Map_Cat_internal
00019FCC 0000                       		dc.w byte_16DF2-Map_Cat_internal
00019FCE 0000                       		dc.w byte_16DF8-Map_Cat_internal
00019FD0 0000                       		dc.w byte_16DFE-Map_Cat_internal
00019FD2 0000                       		dc.w byte_16E04-Map_Cat_internal
00019FD4 0000                       		dc.w byte_16E0A-Map_Cat_internal
00019FD6 0000                       		dc.w byte_16E10-Map_Cat_internal
00019FD8 0000                       		dc.w byte_16E16-Map_Cat_internal
00019FDA 0000                       		dc.w byte_16E1C-Map_Cat_internal
00019FDC 0000                       		dc.w byte_16E22-Map_Cat_internal
00019FDE 0000                       		dc.w byte_16E28-Map_Cat_internal
00019FE0 01                         byte_16D9E:	dc.b 1
00019FE1 F206 0000 F8               		dc.b $F2, 6, 0,	0, $F8
00019FE6 01                         byte_16DA4:	dc.b 1
00019FE7 F106 0000 F8               		dc.b $F1, 6, 0,	0, $F8
00019FEC 01                         byte_16DAA:	dc.b 1
00019FED F006 0000 F8               		dc.b $F0, 6, 0,	0, $F8
00019FF2 01                         byte_16DB0:	dc.b 1
00019FF3 EF06 0000 F8               		dc.b $EF, 6, 0,	0, $F8
00019FF8 01                         byte_16DB6:	dc.b 1
00019FF9 EE06 0000 F8               		dc.b $EE, 6, 0,	0, $F8
00019FFE 01                         byte_16DBC:	dc.b 1
00019FFF ED06 0000 F8               		dc.b $ED, 6, 0,	0, $F8
0001A004 01                         byte_16DC2:	dc.b 1
0001A005 EC06 0000 F8               		dc.b $EC, 6, 0,	0, $F8
0001A00A 01                         byte_16DC8:	dc.b 1
0001A00B EB06 0000 F8               		dc.b $EB, 6, 0,	0, $F8
0001A010 01                         byte_16DCE:	dc.b 1
0001A011 F805 000C F8               		dc.b $F8, 5, 0,	$C, $F8
0001A016 01                         byte_16DD4:	dc.b 1
0001A017 F705 000C F8               		dc.b $F7, 5, 0,	$C, $F8
0001A01C 01                         byte_16DDA:	dc.b 1
0001A01D F605 000C F8               		dc.b $F6, 5, 0,	$C, $F8
0001A022 01                         byte_16DE0:	dc.b 1
0001A023 F505 000C F8               		dc.b $F5, 5, 0,	$C, $F8
0001A028 01                         byte_16DE6:	dc.b 1
0001A029 F405 000C F8               		dc.b $F4, 5, 0,	$C, $F8
0001A02E 01                         byte_16DEC:	dc.b 1
0001A02F F305 000C F8               		dc.b $F3, 5, 0,	$C, $F8
0001A034 01                         byte_16DF2:	dc.b 1
0001A035 F205 000C F8               		dc.b $F2, 5, 0,	$C, $F8
0001A03A 01                         byte_16DF8:	dc.b 1
0001A03B F105 000C F8               		dc.b $F1, 5, 0,	$C, $F8
0001A040 01                         byte_16DFE:	dc.b 1
0001A041 F206 0006 F8               		dc.b $F2, 6, 0,	6, $F8
0001A046 01                         byte_16E04:	dc.b 1
0001A047 F106 0006 F8               		dc.b $F1, 6, 0,	6, $F8
0001A04C 01                         byte_16E0A:	dc.b 1
0001A04D F006 0006 F8               		dc.b $F0, 6, 0,	6, $F8
0001A052 01                         byte_16E10:	dc.b 1
0001A053 EF06 0006 F8               		dc.b $EF, 6, 0,	6, $F8
0001A058 01                         byte_16E16:	dc.b 1
0001A059 EE06 0006 F8               		dc.b $EE, 6, 0,	6, $F8
0001A05E 01                         byte_16E1C:	dc.b 1
0001A05F ED06 0006 F8               		dc.b $ED, 6, 0,	6, $F8
0001A064 01                         byte_16E22:	dc.b 1
0001A065 EC06 0006 F8               		dc.b $EC, 6, 0,	6, $F8
0001A06A 01                         byte_16E28:	dc.b 1
0001A06B EB06 0006 F8               		dc.b $EB, 6, 0,	6, $F8
0001A070                            		even
0001A070                            		even
0001A070                            
0001A070                            		include	"_incObj\79 Lamppost.asm"
0001A070                            ; ---------------------------------------------------------------------------
0001A070                            ; Object 79 - lamppost
0001A070                            ; ---------------------------------------------------------------------------
0001A070                            
0001A070                            Lamppost:
0001A070 7000                       		moveq	#0,d0
0001A072 1028 0024                  		move.b	obRoutine(a0),d0
0001A076 323B 0000                  		move.w	Lamp_Index(pc,d0.w),d1
0001A07A 4EBB 1000                  		jsr	Lamp_Index(pc,d1.w)
0001A07E 4EF9 0001 1A16             		jmp	(RememberState).l
0001A084                            ; ===========================================================================
0001A084 0000                       Lamp_Index:	dc.w Lamp_Main-Lamp_Index
0001A086 0000                       		dc.w Lamp_Blue-Lamp_Index
0001A088 0000                       		dc.w Lamp_Finish-Lamp_Index
0001A08A 0000                       		dc.w Lamp_Twirl-Lamp_Index
0001A08C                            
0001A08C =00000030                  lamp_origX:	equ $30		; original x-axis position
0001A08C =00000032                  lamp_origY:	equ $32		; original y-axis position
0001A08C =00000036                  lamp_time:	equ $36		; length of time to twirl the lamp
0001A08C                            ; ===========================================================================
0001A08C                            
0001A08C                            Lamp_Main:	; Routine 0
0001A08C 5428 0024                  		addq.b	#2,obRoutine(a0)
0001A090 217C 0000 0000 0004        		move.l	#Map_Lamp,obMap(a0)
0001A098 317C 06C0 0002             		move.w	#($D800/$20),2(a0)
0001A09E 117C 0004 0001             		move.b	#4,obRender(a0)
0001A0A4 117C 0008 0014             		move.b	#8,obActWid(a0)
0001A0AA 317C 0280 0018             		move.w	#$280,obPriority(a0)
0001A0B0 45F8 FC00                  		lea	(v_objstate).w,a2
0001A0B4 7000                       		moveq	#0,d0
0001A0B6 1028 0023                  		move.b	obRespawnNo(a0),d0
0001A0BA 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0001A0C0 0832 0000 0002             		btst	#0,2(a2,d0.w)
0001A0C6 6600                       		bne.s	@red
0001A0C8 1238 FE30                  		move.b	(v_lastlamp).w,d1
0001A0CC 0201 007F                  		andi.b	#$7F,d1
0001A0D0 1428 0028                  		move.b	obSubtype(a0),d2 ; get lamppost number
0001A0D4 0202 007F                  		andi.b	#$7F,d2
0001A0D8 B202                       		cmp.b	d2,d1		; is this a "new" lamppost?
0001A0DA 6500                       		bcs.s	Lamp_Blue	; if yes, branch
0001A0DC                            
0001A0DC                            @red:
0001A0DC 08F2 0000 0002             		bset	#0,2(a2,d0.w)
0001A0E2 117C 0004 0024             		move.b	#4,obRoutine(a0) ; goto Lamp_Finish next
0001A0E8 117C 0003 001A             		move.b	#3,obFrame(a0)
0001A0EE 4E75                       		rts	
0001A0F0                            
0001A0F0                            ; ===========================================================================
0001A0F0                            
0001A0F0                            Lamp_Blue:	; Routine 2
0001A0F0 4A78 FE08                  		tst.w	(v_debuguse).w	; is debug mode	being used?
0001A0F4 6600 0000                  		bne.w	@donothing	; if yes, branch
0001A0F8 4A38 F7C8                  		tst.b	(f_lockmulti).w
0001A0FC 6B00 0000                  		bmi.w	@donothing
0001A100 1238 FE30                  		move.b	(v_lastlamp).w,d1
0001A104 0201 007F                  		andi.b	#$7F,d1
0001A108 1428 0028                  		move.b	obSubtype(a0),d2
0001A10C 0202 007F                  		andi.b	#$7F,d2
0001A110 B202                       		cmp.b	d2,d1		; is this a "new" lamppost?
0001A112 6500                       		bcs.s	@chkhit		; if yes, branch
0001A114 45F8 FC00                  		lea	(v_objstate).w,a2
0001A118 7000                       		moveq	#0,d0
0001A11A 1028 0023                  		move.b	obRespawnNo(a0),d0
0001A11E 08F2 0000 0002             		bset	#0,2(a2,d0.w)
0001A124 117C 0004 0024             		move.b	#4,obRoutine(a0)
0001A12A 117C 0003 001A             		move.b	#3,obFrame(a0)
0001A130 6000 0000                  		bra.w	@donothing
0001A134                            ; ===========================================================================
0001A134                            
0001A134                            @chkhit:
0001A134 3038 D008                  		move.w	(v_player+obX).w,d0
0001A138 9068 0008                  		sub.w	obX(a0),d0
0001A13C 5040                       		addq.w	#8,d0
0001A13E 0C40 0010                  		cmpi.w	#$10,d0
0001A142 6400 0000                  		bcc.w	@donothing
0001A146 3038 D00C                  		move.w	(v_player+obY).w,d0
0001A14A 9068 000C                  		sub.w	obY(a0),d0
0001A14E 0640 0040                  		addi.w	#$40,d0
0001A152 0C40 0068                  		cmpi.w	#$68,d0
0001A156 6400                       		bcc.s	@donothing
0001A158                            
0001A162 5428 0024                  		addq.b	#2,obRoutine(a0)
0001A166 4EB9 0000 FF18             		jsr	(FindFreeObj).l
0001A16C 6600                       		bne.s	@fail
0001A16E 12BC 0079                  		move.b	#id_Lamppost,0(a1)	; load twirling	lamp object
0001A172 137C 0006 0024             		move.b	#6,obRoutine(a1) ; goto Lamp_Twirl next
0001A178 3368 0008 0030             		move.w	obX(a0),lamp_origX(a1)
0001A17E 3368 000C 0032             		move.w	obY(a0),lamp_origY(a1)
0001A184 0469 0018 0032             		subi.w	#$18,lamp_origY(a1)
0001A18A 237C 0000 0000 0004        		move.l	#Map_Lamp,obMap(a1)
0001A192 337C 06C0 0002             		move.w	#($D800/$20),2(a1)
0001A198 137C 0004 0001             		move.b	#4,obRender(a1)
0001A19E 137C 0008 0014             		move.b	#8,obActWid(a1)
0001A1A4 337C 0200 0018             		move.w	#$200,obPriority(a1)
0001A1AA 137C 0002 001A             		move.b	#2,obFrame(a1)	; use "ball only" frame
0001A1B0 337C 0020 0036             		move.w	#$20,lamp_time(a1)
0001A1B6                            
0001A1B6                            	@fail:
0001A1B6 117C 0001 001A             		move.b	#1,obFrame(a0)	; use "post only" frame
0001A1BC 6100 0000                  		bsr.w	Lamp_StoreInfo
0001A1C0 45F8 FC00                  		lea	(v_objstate).w,a2
0001A1C4 7000                       		moveq	#0,d0
0001A1C6 1028 0023                  		move.b	obRespawnNo(a0),d0
0001A1CA 08F2 0000 0002             		bset	#0,2(a2,d0.w)
0001A1D0                            
0001A1D0                            	@donothing:
0001A1D0 4E75                       		rts	
0001A1D2                            ; ===========================================================================
0001A1D2                            
0001A1D2                            Lamp_Finish:	; Routine 4	
0001A1D2 4E75                       		rts	
0001A1D4                            ; ===========================================================================
0001A1D4                            
0001A1D4                            Lamp_Twirl:	; Routine 6
0001A1D4 5368 0036                  		subq.w	#1,lamp_time(a0) ; decrement timer
0001A1D8 6A00                       		bpl.s	@continue	; if time remains, keep twirling
0001A1DA 117C 0004 0024             		move.b	#4,obRoutine(a0) ; goto Lamp_Finish next
0001A1E0                            
0001A1E0                            	@continue:
0001A1E0 1028 0026                  		move.b	obAngle(a0),d0
0001A1E4 0428 0010 0026             		subi.b	#$10,obAngle(a0)
0001A1EA 0400 0040                  		subi.b	#$40,d0
0001A1EE 4EB9 0000 3A82             		jsr	(CalcSine).l
0001A1F4 C3FC 0C00                  		muls.w	#$C00,d1
0001A1F8 4841                       		swap	d1
0001A1FA D268 0030                  		add.w	lamp_origX(a0),d1
0001A1FE 3141 0008                  		move.w	d1,obX(a0)
0001A202 C1FC 0C00                  		muls.w	#$C00,d0
0001A206 4840                       		swap	d0
0001A208 D068 0032                  		add.w	lamp_origY(a0),d0
0001A20C 3140 000C                  		move.w	d0,obY(a0)
0001A210 4E75                       		rts	
0001A212                            ; ===========================================================================
0001A212                            ; ---------------------------------------------------------------------------
0001A212                            ; Subroutine to	store information when you hit a lamppost
0001A212                            ; ---------------------------------------------------------------------------
0001A212                            
0001A212                            Lamp_StoreInfo:
0001A212 11E8 0028 FE30             		move.b	obSubtype(a0),(v_lastlamp).w 	; lamppost number
0001A218 11F8 FE30 FE31             		move.b	(v_lastlamp).w,($FFFFFE31).w
0001A21E 31E8 0008 FE32             		move.w	obX(a0),($FFFFFE32).w		; x-position
0001A224 31E8 000C FE34             		move.w	obY(a0),($FFFFFE34).w		; y-position
0001A22A 31F8 FE20 FE36             		move.w	(v_rings).w,($FFFFFE36).w 	; rings
0001A230 11F8 FE1B FE54             		move.b	(v_lifecount).w,($FFFFFE54).w 	; lives
0001A236 21F8 FE22 FE38             		move.l	(v_time).w,($FFFFFE38).w 	; time
0001A23C 11F8 F742 FE3C             		move.b	(v_dle_routine).w,($FFFFFE3C).w ; routine counter for dynamic level mod
0001A242 31F8 F72E FE3E             		move.w	(v_limitbtm2).w,($FFFFFE3E).w 	; lower y-boundary of level
0001A248 31F8 F700 FE40             		move.w	(v_screenposx).w,($FFFFFE40).w 	; screen x-position
0001A24E 31F8 F704 FE42             		move.w	(v_screenposy).w,($FFFFFE42).w 	; screen y-position
0001A254 31F8 F708 FE44             		move.w	(v_bgscreenposx).w,($FFFFFE44).w ; bg position
0001A25A 31F8 F70C FE46             		move.w	(v_bgscreenposy).w,($FFFFFE46).w 	; bg position
0001A260 31F8 F710 FE48             		move.w	(v_bg2screenposx).w,($FFFFFE48).w 	; bg position
0001A266 31F8 F714 FE4A             		move.w	(v_bg2screenposy).w,($FFFFFE4A).w 	; bg position
0001A26C 31F8 F718 FE4C             		move.w	(v_bg3screenposx).w,($FFFFFE4C).w 	; bg position
0001A272 31F8 F71C FE4E             		move.w	(v_bg3screenposy).w,($FFFFFE4E).w 	; bg position
0001A278 31F8 F648 FE50             		move.w	(v_waterpos2).w,($FFFFFE50).w 	; water height
0001A27E 11F8 F64D FE52             		move.b	(v_wtr_routine).w,($FFFFFE52).w ; rountine counter for water
0001A284 11F8 F64E FE53             		move.b	(f_wtr_state).w,($FFFFFE53).w 	; water direction
0001A28A 11F8 F5C3 FE54             		move.b	(f_emeraldm).w,($FFFFFE54).w 	; emerald monitor
0001A290 4E75                       		rts	
0001A292                            
0001A292                            ; ---------------------------------------------------------------------------
0001A292                            ; Subroutine to	load stored info when you start	a level	from a lamppost
0001A292                            ; ---------------------------------------------------------------------------
0001A292                            
0001A292                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001A292                            
0001A292                            
0001A292                            Lamp_LoadInfo:
0001A292 11F8 FE31 FE30             		move.b	($FFFFFE31).w,(v_lastlamp).w
0001A298 31F8 FE32 D008             		move.w	($FFFFFE32).w,(v_player+obX).w
0001A29E 31F8 FE34 D00C             		move.w	($FFFFFE34).w,(v_player+obY).w
0001A2A4 31F8 FE36 FE20             		move.w	($FFFFFE36).w,(v_rings).w
0001A2AA 11F8 FE54 FE1B             		move.b	($FFFFFE54).w,(v_lifecount).w
0001A2B0 4278 FE20                  		clr.w	(v_rings).w
0001A2B4 4238 FE1B                  		clr.b	(v_lifecount).w
0001A2B8 21F8 FE38 FE22             		move.l	($FFFFFE38).w,(v_time).w
0001A2BE 11FC 003B FE25             		move.b	#59,(v_timecent).w
0001A2C4 5338 FE24                  		subq.b	#1,(v_timesec).w
0001A2C8 11F8 FE3C F742             		move.b	($FFFFFE3C).w,(v_dle_routine).w
0001A2CE 11F8 FE52 F64D             		move.b	($FFFFFE52).w,(v_wtr_routine).w
0001A2D4 31F8 FE3E F72E             		move.w	($FFFFFE3E).w,(v_limitbtm2).w
0001A2DA 31F8 FE3E F726             		move.w	($FFFFFE3E).w,(v_limitbtm1).w
0001A2E0 31F8 FE40 F700             		move.w	($FFFFFE40).w,(v_screenposx).w
0001A2E6 31F8 FE42 F704             		move.w	($FFFFFE42).w,(v_screenposy).w
0001A2EC 31F8 FE44 F708             		move.w	($FFFFFE44).w,(v_bgscreenposx).w
0001A2F2 31F8 FE46 F70C             		move.w	($FFFFFE46).w,(v_bgscreenposy).w
0001A2F8 31F8 FE48 F710             		move.w	($FFFFFE48).w,(v_bg2screenposx).w
0001A2FE 31F8 FE4A F714             		move.w	($FFFFFE4A).w,(v_bg2screenposy).w
0001A304 31F8 FE4C F718             		move.w	($FFFFFE4C).w,(v_bg3screenposx).w
0001A30A 31F8 FE4E F71C             		move.w	($FFFFFE4E).w,(v_bg3screenposy).w
0001A310 11F8 FE54 F5C3             		move.b	($FFFFFE54).w,(f_emeraldm).w	;emerald monitor count
0001A316 0C38 0001 FE10             		cmpi.b	#1,(v_zone).w	; is this Labyrinth Zone?
0001A31C 6600                       		bne.s	@notlabyrinth	; if not, branch
0001A31E                            
0001A31E 31F8 FE50 F648             		move.w	($FFFFFE50).w,(v_waterpos2).w
0001A324 11F8 FE52 F64D             		move.b	($FFFFFE52).w,(v_wtr_routine).w
0001A32A 11F8 FE53 F64E             		move.b	($FFFFFE53).w,(f_wtr_state).w
0001A330                            
0001A330                            	@notlabyrinth:
0001A330 4A38 FE30                  		tst.b	(v_lastlamp).w
0001A334 6A00                       		bpl.s	locret_170F6
0001A336 3038 FE32                  		move.w	($FFFFFE32).w,d0
0001A33A 0440 00A0                  		subi.w	#$A0,d0
0001A33E 31C0 F728                  		move.w	d0,(v_limitleft2).w
0001A342                            
0001A342                            locret_170F6:
0001A342 4E75                       		rts	
0001A342 4E75                       		rts	
0001A344                            Map_Lamp:	include	"_maps\Lamppost.asm"
0001A344                            ; --------------------------------------------------------------------------------
0001A344                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0001A344                            ; --------------------------------------------------------------------------------
0001A344                            
0001A344                            SME_JfaKr:	
0001A344 0000 0000                  		dc.w SME_JfaKr_A-SME_JfaKr, SME_JfaKr_3D-SME_JfaKr	
0001A348 0000 0000                  		dc.w SME_JfaKr_66-SME_JfaKr, SME_JfaKr_71-SME_JfaKr	
0001A34C 0000                       		dc.w SME_JfaKr_A4-SME_JfaKr	
0001A34E 0A                         SME_JfaKr_A:	dc.b $A	
0001A34F E401 0000 F8               		dc.b $E4, 1, 0, 0, $F8	
0001A354 E401 2800 00               		dc.b $E4, 1, $28, 0, 0	
0001A359 D401 0006 F8               		dc.b $D4, 1, 0, 6, $F8	
0001A35E D401 0806 00               		dc.b $D4, 1, 8, 6, 0	
0001A363 F401 2002 F8               		dc.b $F4, 1, $20, 2, $F8	
0001A368 F401 2802 00               		dc.b $F4, 1, $28, 2, 0	
0001A36D 0400 2004 F8               		dc.b 4, 0, $20, 4, $F8	
0001A372 0400 2804 00               		dc.b 4, 0, $28, 4, 0	
0001A377 0C00 2005 F8               		dc.b $C, 0, $20, 5, $F8	
0001A37C 0C00 2805 00               		dc.b $C, 0, $28, 5, 0	
0001A381 08                         SME_JfaKr_3D:	dc.b 8	
0001A382 E401 2000 F8               		dc.b $E4, 1, $20, 0, $F8	
0001A387 E401 2800 00               		dc.b $E4, 1, $28, 0, 0	
0001A38C F401 2002 F8               		dc.b $F4, 1, $20, 2, $F8	
0001A391 F401 2802 00               		dc.b $F4, 1, $28, 2, 0	
0001A396 0400 2004 F8               		dc.b 4, 0, $20, 4, $F8	
0001A39B 0400 2804 00               		dc.b 4, 0, $28, 4, 0	
0001A3A0 0C00 2005 F8               		dc.b $C, 0, $20, 5, $F8	
0001A3A5 0C00 2805 00               		dc.b $C, 0, $28, 5, 0	
0001A3AA 02                         SME_JfaKr_66:	dc.b 2	
0001A3AB F801 0008 F8               		dc.b $F8, 1, 0, 8, $F8	
0001A3B0 F801 0808 00               		dc.b $F8, 1, 8, 8, 0	
0001A3B5 0A                         SME_JfaKr_71:	dc.b $A	
0001A3B6 E401 2000 F8               		dc.b $E4, 1, $20, 0, $F8	
0001A3BB E401 2800 00               		dc.b $E4, 1, $28, 0, 0	
0001A3C0 F401 2002 F8               		dc.b $F4, 1, $20, 2, $F8	
0001A3C5 F401 2802 00               		dc.b $F4, 1, $28, 2, 0	
0001A3CA 0400 2004 F8               		dc.b 4, 0, $20, 4, $F8	
0001A3CF 0400 2804 00               		dc.b 4, 0, $28, 4, 0	
0001A3D4 0C00 2005 F8               		dc.b $C, 0, $20, 5, $F8	
0001A3D9 0C00 2805 00               		dc.b $C, 0, $28, 5, 0	
0001A3DE D401 0008 F8               		dc.b $D4, 1, 0, 8, $F8	
0001A3E3 D401 0808 00               		dc.b $D4, 1, 8, 8, 0	
0001A3E8 0A                         SME_JfaKr_A4:	dc.b $A	
0001A3E9 E401 2000 F8               		dc.b $E4, 1, $20, 0, $F8	
0001A3EE E401 2800 00               		dc.b $E4, 1, $28, 0, 0	
0001A3F3 F401 2002 F8               		dc.b $F4, 1, $20, 2, $F8	
0001A3F8 F401 2802 00               		dc.b $F4, 1, $28, 2, 0	
0001A3FD 0400 2004 F8               		dc.b 4, 0, $20, 4, $F8	
0001A402 0400 2804 00               		dc.b 4, 0, $28, 4, 0	
0001A407 0C00 2005 F8               		dc.b $C, 0, $20, 5, $F8	
0001A40C 0C00 2805 00               		dc.b $C, 0, $28, 5, 0	
0001A411 D401 0008 F8               		dc.b $D4, 1, 0, 8, $F8	
0001A416 D401 2808 00               		dc.b $D4, 1, $28, 8, 0	
0001A41C 00                         		even
0001A41C 00                         		even
0001A41C                            		include	"_incObj\7D Hidden Bonuses.asm"
0001A41C                            ; ---------------------------------------------------------------------------
0001A41C                            ; Object 7D - hidden points at the end of a level
0001A41C                            ; ---------------------------------------------------------------------------
0001A41C                            
0001A41C                            HiddenBonus:
0001A41C 7000                       		moveq	#0,d0
0001A41E 1028 0024                  		move.b	obRoutine(a0),d0
0001A422 323B 0000                  		move.w	Bonus_Index(pc,d0.w),d1
0001A426 4EFB 1000                  		jmp	Bonus_Index(pc,d1.w)
0001A42A                            ; ===========================================================================
0001A42A 0000                       Bonus_Index:	dc.w Bonus_Main-Bonus_Index
0001A42C 0000                       		dc.w Bonus_Display-Bonus_Index
0001A42E                            
0001A42E =00000030                  bonus_timelen:	equ $30		; length of time to display bonus sprites
0001A42E                            ; ===========================================================================
0001A42E                            
0001A42E                            Bonus_Main:	; Routine 0
0001A42E 7410                       		moveq	#$10,d2
0001A430 3602                       		move.w	d2,d3
0001A432 D643                       		add.w	d3,d3
0001A434 43F8 D000                  		lea	(v_player).w,a1
0001A438 3029 0008                  		move.w	obX(a1),d0
0001A43C 9068 0008                  		sub.w	obX(a0),d0
0001A440 D042                       		add.w	d2,d0
0001A442 B043                       		cmp.w	d3,d0
0001A444 6400                       		bcc.s	bonu_chkdel
0001A446 3229 000C                  		move.w	obY(a1),d1
0001A44A 9268 000C                  		sub.w	obY(a0),d1
0001A44E D242                       		add.w	d2,d1
0001A450 B243                       		cmp.w	d3,d1
0001A452 6400                       		bcc.s	bonu_chkdel
0001A454 4A78 FE08                  		tst.w	(v_debuguse).w
0001A458 6600                       		bne.s	bonu_chkdel
0001A45A 4A38 F7CD                  		tst.b	(f_bigring).w
0001A45E 6600                       		bne.s	bonu_chkdel
0001A460 5428 0024                  		addq.b	#2,obRoutine(a0)
0001A464 217C 0000 0000 0004        		move.l	#Map_Bonus,obMap(a0)
0001A46C 317C 84B6 0002             		move.w	#$84B6,obGfx(a0)
0001A472 0028 0004 0001             		ori.b	#4,obRender(a0)
0001A478 317C 0000 0018             		move.w	#0,obPriority(a0)
0001A47E 117C 0010 0014             		move.b	#$10,obActWid(a0)
0001A484 1168 0028 001A             		move.b	obSubtype(a0),obFrame(a0)
0001A48A 317C 0077 0030             		move.w	#119,bonus_timelen(a0) ; set display time to 2 seconds
0001A49A 7000                       		moveq	#0,d0
0001A49C 1028 0028                  		move.b	obSubtype(a0),d0
0001A4A0 D040                       		add.w	d0,d0
0001A4A2 303B 0000                  		move.w	obj7d_points(pc,d0.w),d0 ; load bonus points array
0001A4A6 4EB9 0000 0000             		jsr	(AddPoints).l
0001A4AC                            
0001A4AC                            bonu_chkdel:
0001A4C8 4E75                       		rts	
0001A4CA                            
0001A4CA                            	@delete:
0001A4CA 4EF9 0000 FACC             		jmp	(DeleteObject).l
0001A4D0                            
0001A4D0                            ; ===========================================================================
0001A4D0 0000                       obj7d_points:	dc.w 0			; Bonus	points array
0001A4D2 03E8                       		dc.w 1000
0001A4D4 0064                       		dc.w 100
0001A4D6 000A                       		dc.w 10
0001A4D8                            ; ===========================================================================
0001A4D8                            
0001A4D8                            Bonus_Display:	; Routine 2
0001A4D8 5368 0030                  		subq.w	#1,bonus_timelen(a0) ; decrement display time
0001A4DC 6B00                       		bmi.s	Bonus_Display_Delete		; if time is zero, branch
0001A4FA 4EF9 0000 FA8C             		jmp	(DisplaySprite).l
0001A500                            
0001A500                            Bonus_Display_Delete:	
0001A500 4EF9 0000 FACC             		jmp	(DeleteObject).l
0001A500 4EF9 0000 FACC             		jmp	(DeleteObject).l
0001A506                            Map_Bonus:	include	"_maps\Hidden Bonuses.asm"
0001A506                            ; ---------------------------------------------------------------------------
0001A506                            ; Sprite mappings - hidden points at the end of	a level
0001A506                            ; ---------------------------------------------------------------------------
0001A506                            Map_Bonus_internal:
0001A506 0000                       		dc.w @blank-Map_Bonus_internal
0001A508 0000                       		dc.w @10000-Map_Bonus_internal
0001A50A 0000                       		dc.w @1000-Map_Bonus_internal
0001A50C 0000                       		dc.w @100-Map_Bonus_internal
0001A50E 00                         @blank:		dc.b 0
0001A50F 01                         @10000:		dc.b 1
0001A510 F40E 0000 F0               		dc.b $F4, $E, 0, 0, $F0
0001A515 01                         @1000:		dc.b 1
0001A516 F40E 000C F0               		dc.b $F4, $E, 0, $C, $F0
0001A51B 01                         @100:		dc.b 1
0001A51C F40E 0018 F0               		dc.b $F4, $E, 0, $18, $F0
0001A522 00                         		even
0001A522 00                         		even
0001A522                            
0001A522                            		include	"_incObj\8A Credits.asm"
0001A522                            ; ---------------------------------------------------------------------------
0001A522                            ; Object 8A - "SONIC TEAM PRESENTS" and	credits
0001A522                            ; ---------------------------------------------------------------------------
0001A522                            
0001A522                            CreditsText:
0001A522 7000                       		moveq	#0,d0
0001A524 1028 0024                  		move.b	obRoutine(a0),d0
0001A528 323B 0000                  		move.w	Cred_Index(pc,d0.w),d1
0001A52C 4EFB 1000                  		jmp	Cred_Index(pc,d1.w)
0001A530                            ; ===========================================================================
0001A530 0000                       Cred_Index:	dc.w Cred_Main-Cred_Index
0001A532 0000                       		dc.w Cred_Display-Cred_Index
0001A534                            ; ===========================================================================
0001A534                            
0001A534                            Cred_Main:	; Routine 0
0001A534 5428 0024                  		addq.b	#2,obRoutine(a0)
0001A538 317C 0120 0008             		move.w	#$120,obX(a0)
0001A53E 317C 00F0 000A             		move.w	#$F0,obScreenY(a0)
0001A544 217C 0000 0000 0004        		move.l	#Map_Cred,obMap(a0)
0001A54C 317C 05A0 0002             		move.w	#$5A0,obGfx(a0)
0001A552 3038 FFF4                  		move.w	(v_creditsnum).w,d0 ; load credits index number
0001A556 1140 001A                  		move.b	d0,obFrame(a0)	; display appropriate sprite
0001A55A 117C 0000 0001             		move.b	#0,obRender(a0)
0001A560 317C 0000 0018             		move.w	#0,obPriority(a0)
0001A566                            
0001A566 0C38 0000 F600             		cmpi.b	#id_Title,(v_gamemode).w ; is the mode #4 (title screen)?
0001A56C 6600                       		bne.s	Cred_Display	; if not, branch
0001A56E                            
0001A56E 317C 00A6 0002             		move.w	#$A6,obGfx(a0)
0001A574 117C 000A 001A             		move.b	#$A,obFrame(a0)	; display "SONIC TEAM PRESENTS"
0001A57A 4A38 FFE3                  		tst.b	(f_creditscheat).w ; is hidden credits cheat on?
0001A57E 6700                       		beq.s	Cred_Display	; if not, branch
0001A580 0C38 0072 F604             		cmpi.b	#btnABC+btnDn,(v_jpadhold1).w ; is A+B+C+Down being pressed? ($72)
0001A586 6600                       		bne.s	Cred_Display	; if not, branch
0001A588 31FC 0EEE FBC0             		move.w	#cWhite,(v_pal_dry_dup+$40).w ; 3rd palette, 1st entry = white
0001A58E 31FC 0880 FBC2             		move.w	#$880,(v_pal_dry_dup+$42).w ; 3rd palette, 2nd entry = cyan
0001A594 4EF9 0000 FACC             		jmp	(DeleteObject).l
0001A59A                            ; ===========================================================================
0001A59A                            
0001A59A                            Cred_Display:	; Routine 2
0001A59A 4EF9 0000 FA8C             		jmp	DisplaySprite
0001A59A 4EF9 0000 FA8C             		jmp	DisplaySprite
0001A5A0                            Map_Cred:	include	"_maps\Credits.asm"
0001A5A0                            ; ---------------------------------------------------------------------------
0001A5A0                            ; Sprite mappings - "SONIC TEAM	PRESENTS" and credits
0001A5A0                            ; ---------------------------------------------------------------------------
0001A5A0                            Map_Cred_internal:
0001A5A0 0000                       		dc.w @staff-Map_Cred_internal
0001A5A2 0000                       		dc.w @gameplan-Map_Cred_internal
0001A5A4 0000                       		dc.w @program-Map_Cred_internal
0001A5A6 0000                       		dc.w @character-Map_Cred_internal
0001A5A8 0000                       		dc.w @design-Map_Cred_internal
0001A5AA 0000                       		dc.w @soundproduce-Map_Cred_internal
0001A5AC 0000                       		dc.w @soundprogram-Map_Cred_internal
0001A5AE 0000                       		dc.w @thanks-Map_Cred_internal
0001A5B0 0000                       		dc.w @presentedby-Map_Cred_internal
0001A5B2 0000                       		dc.w @tryagain-Map_Cred_internal
0001A5B4 0000                       		dc.w @sonicteam-Map_Cred_internal
0001A5B6 0E                         @staff:		dc.b $E			 ; SONIC TEAM STAFF
0001A5B7 F805 002E 88               		dc.b $F8, 5, 0,	$2E, $88
0001A5BC F805 0026 98               		dc.b $F8, 5, 0,	$26, $98
0001A5C1 F805 001A A8               		dc.b $F8, 5, 0,	$1A, $A8
0001A5C6 F801 0046 B8               		dc.b $F8, 1, 0,	$46, $B8
0001A5CB F805 001E C0               		dc.b $F8, 5, 0,	$1E, $C0
0001A5D0 F805 003E D8               		dc.b $F8, 5, 0,	$3E, $D8
0001A5D5 F805 000E E8               		dc.b $F8, 5, 0,	$E, $E8
0001A5DA F805 0004 F8               		dc.b $F8, 5, 0,	4, $F8
0001A5DF F809 0008 08               		dc.b $F8, 9, 0,	8, 8
0001A5E4 F805 002E 28               		dc.b $F8, 5, 0,	$2E, $28
0001A5E9 F805 003E 38               		dc.b $F8, 5, 0,	$3E, $38
0001A5EE F805 0004 48               		dc.b $F8, 5, 0,	4, $48
0001A5F3 F805 005C 58               		dc.b $F8, 5, 0,	$5C, $58
0001A5F8 F805 005C 68               		dc.b $F8, 5, 0,	$5C, $68
0001A5FD 0E                         @gameplan:	dc.b $E	;  GAME PLAN CAROL YAS | GAME PLAN SORRA    
0001A5FE 9005 0000 90               		dc.b $90, 5, 0, 0, $90		; G
0001A603 9005 0004 A0               		dc.b $90, 5, 0, 4, $A0		; A
0001A608 9009 0008 B0               		dc.b $90, 9, 0, 8, $B0		; M
0001A60D 9005 000E C4               		dc.b $90, 5, 0, $0E, $C4	; E
0001A612 9000 0060 0C               		dc.b $90, 0, 0, $60, $C    ;Space
0001A617 9005 0012 E4               		dc.b $90, 5, 0, $12, $E4	; P
0001A61C 9005 0016 F4               		dc.b $90, 5, 0, $16, $F4	; L
0001A621 9005 0004 04               		dc.b $90, 5, 0, 4, $4		; A
0001A626 9005 001A 14               		dc.b $90, 5, 0, $1A, $14	; N
0001A62B                            
0001A62B B805 002E C0               		dc.b $B8, 5, 0, $2E, $C0	; S
0001A630 B805 0026 D0               		dc.b $B8, 5, 0, $26, $D0	; O
0001A635 B805 0022 E0               		dc.b $B8, 5, 0, $22, $E0	; R
0001A63A B805 0022 F0               		dc.b $B8, 5, 0, $22, $F0	; R
0001A63F B805 0004 00               		dc.b $B8, 5, 0, 4, $0		; A
0001A644 1B                         @program:	dc.b $1B	;  CHARACTER DESIGN BIGISLAND | PROGRAM ANGELKOR INVISIBLE SUN  
0001A645 9005 0012 90               		dc.b $90, 5, 0, $12, $90	; P
0001A64A 9005 0022 A0               		dc.b $90, 5, 0, $22, $A0	; R
0001A64F 9005 0026 B0               		dc.b $90, 5, 0, $26, $B0	; O
0001A654 9005 0000 C0               		dc.b $90, 5, 0, 0, $C0		; G
0001A659 9005 0022 D0               		dc.b $90, 5, 0, $22, $D0	; R
0001A65E 9005 0004 E0               		dc.b $90, 5, 0, 4, $E0		; A
0001A663 9009 0008 F0               		dc.b $90, 9, 0, 8, $F0		; M
0001A668                            
0001A668 B805 0004 C0               		dc.b $B8, 5, 0, 4, $C0		; A
0001A66D B805 001A D0               		dc.b $B8, 5, 0, $1A, $D0	; N
0001A672 B805 0000 E0               		dc.b $B8, 5, 0, 0, $E0		; G
0001A677 B805 000E F0               		dc.b $B8, 5, 0, $0E, $F0	; E
0001A67C B805 0016 00               		dc.b $B8, 5, 0, $16, $0	; L
0001A681 B805 0058 10               		dc.b $B8, 5, 0, $58, $10	; K
0001A686 B805 0026 20               		dc.b $B8, 5, 0, $26, $20	; O
0001A68B B805 0022 30               		dc.b $B8, 5, 0, $22, $30	; R
0001A690                            
0001A690 D801 0046 C0               		dc.b $D8, 1, 0, $46, $C0	; I
0001A695 D805 001A C8               		dc.b $D8, 5, 0, $1A, $C8	; N
0001A69A                            
0001A69A D801 0046 E8               		dc.b $D8, 1, 0, $46, $E8	; I
0001A69F D805 002E F0               		dc.b $D8, 5, 0, $2E, $F0	; S
0001A6A4 D801 0046 00               		dc.b $D8, 1, 0, $46, $0	; I
0001A6A9 D805 0048 08               		dc.b $D8, 5, 0, $48, $8	; B
0001A6AE D805 0016 18               		dc.b $D8, 5, 0, $16, $18	; L
0001A6B3 D805 000E 28               		dc.b $D8, 5, 0, $0E, $28	; E
0001A6B8                            
0001A6B8 F805 002E C0               		dc.b $F8, 5, 0, $2E, $C0	; S
0001A6BD F805 0032 D0               		dc.b $F8, 5, 0, $32, $D0	; U
0001A6C2 F805 001A E0               		dc.b $F8, 5, 0, $1A, $E0	; N
0001A6C7 08                         @character:	dc.b $8	;  CHARACTER DESIGN BIGISLAND | ART SORRA    
0001A6C8 9005 0004 90               		dc.b $90, 5, 0, 4, $90		; A
0001A6CD 9005 0022 A0               		dc.b $90, 5, 0, $22, $A0	; R
0001A6D2 9005 003E B0               		dc.b $90, 5, 0, $3E, $B0	; T
0001A6D7                            
0001A6D7 B805 002E C0               		dc.b $B8, 5, 0, $2E, $C0	; S
0001A6DC B805 0026 D0               		dc.b $B8, 5, 0, $26, $D0	; O
0001A6E1 B805 0022 E0               		dc.b $B8, 5, 0, $22, $E0	; R
0001A6E6 B805 0022 F0               		dc.b $B8, 5, 0, $22, $F0	; R
0001A6EB B805 0004 00               		dc.b $B8, 5, 0, 4, $0
0001A6F0 0B                         @design:	dc.b $B	;  DESIGN JINYA PHENIX RIE | DESIGN SORRA    
0001A6F1 9005 0042 90               		dc.b $90, 5, 0, $42, $90	; D
0001A6F6 9005 000E A0               		dc.b $90, 5, 0, $0E, $A0	; E
0001A6FB 9005 002E B0               		dc.b $90, 5, 0, $2E, $B0	; S
0001A700 9001 0046 C0               		dc.b $90, 1, 0, $46, $C0	; I
0001A705 9005 0000 C8               		dc.b $90, 5, 0, 0, $C8		; G
0001A70A 9005 001A D8               		dc.b $90, 5, 0, $1A, $D8	; N
0001A70F                            
0001A70F B805 002E C0               		dc.b $B8, 5, 0, $2E, $C0	; S
0001A714 B805 0026 D0               		dc.b $B8, 5, 0, $26, $D0	; O
0001A719 B805 0022 E0               		dc.b $B8, 5, 0, $22, $E0	; R
0001A71E B805 0022 F0               		dc.b $B8, 5, 0, $22, $F0	; R
0001A723 B805 0004 00               		dc.b $B8, 5, 0, 4, $0		; A
0001A728 1C                         @soundproduce:	dc.b $1C	;  SOUND PRODUCE MASATO NAKAMURA | SOUND PORT MR JOKER PRODUCTION   
0001A729 9005 002E 90               		dc.b $90, 5, 0, $2E, $90	; S
0001A72E 9005 0026 A0               		dc.b $90, 5, 0, $26, $A0	; O
0001A733 9005 0032 B0               		dc.b $90, 5, 0, $32, $B0	; U
0001A738 9005 001A C0               		dc.b $90, 5, 0, $1A, $C0	; N
0001A73D 9005 0042 D0               		dc.b $90, 5, 0, $42, $D0	; D
0001A742 9000 0060 0C               		dc.b $90, 0, 0, $60, $C    ;Space
0001A747 9005 0012 F0               		dc.b $90, 5, 0, $12, $F0	; P
0001A74C 9005 0026 00               		dc.b $90, 5, 0, $26, $0	; O
0001A751 9005 0022 10               		dc.b $90, 5, 0, $22, $10	; R
0001A756 9005 003E 20               		dc.b $90, 5, 0, $3E, $20	; T
0001A75B                            
0001A75B B809 0008 C0               		dc.b $B8, 9, 0, 8, $C0		; M
0001A760 B805 0022 D4               		dc.b $B8, 5, 0, $22, $D4	; R
0001A765 B800 0060 0C               		dc.b $B8, 0, 0, $60, $C    ;Space
0001A76A B805 004C F4               		dc.b $B8, 5, 0, $4C, $F4	; J
0001A76F B805 0026 04               		dc.b $B8, 5, 0, $26, $4	; O
0001A774 B805 0058 14               		dc.b $B8, 5, 0, $58, $14	; K
0001A779 B805 000E 24               		dc.b $B8, 5, 0, $0E, $24	; E
0001A77E B805 0022 34               		dc.b $B8, 5, 0, $22, $34	; R
0001A783                            
0001A783 D805 0012 C0               		dc.b $D8, 5, 0, $12, $C0	; P
0001A788 D805 0022 D0               		dc.b $D8, 5, 0, $22, $D0	; R
0001A78D D805 0026 E0               		dc.b $D8, 5, 0, $26, $E0	; O
0001A792 D805 0042 F0               		dc.b $D8, 5, 0, $42, $F0	; D
0001A797 D805 0032 00               		dc.b $D8, 5, 0, $32, $0	; U
0001A79C D805 001E 10               		dc.b $D8, 5, 0, $1E, $10	; C
0001A7A1 D805 003E 20               		dc.b $D8, 5, 0, $3E, $20	; T
0001A7A6 D801 0046 30               		dc.b $D8, 1, 0, $46, $30	; I
0001A7AB D805 0026 38               		dc.b $D8, 5, 0, $26, $38	; O
0001A7B0 D805 001A 48               		dc.b $D8, 5, 0, $1A, $48	; N
0001A7B5 17                         @soundprogram:	dc.b $17		 ; SOUND PROGRAM JIMITA	MACKY
0001A7B6 D005 002E 98               		dc.b $D0, 5, 0,	$2E, $98
0001A7BB D005 0026 A8               		dc.b $D0, 5, 0,	$26, $A8
0001A7C0 D005 0032 B8               		dc.b $D0, 5, 0,	$32, $B8
0001A7C5 D005 001A C8               		dc.b $D0, 5, 0,	$1A, $C8
0001A7CA D005 0054 D8               		dc.b $D0, 5, 0,	$54, $D8
0001A7CF D005 0012 F8               		dc.b $D0, 5, 0,	$12, $F8
0001A7D4 D005 0022 08               		dc.b $D0, 5, 0,	$22, 8
0001A7D9 D005 0026 18               		dc.b $D0, 5, 0,	$26, $18
0001A7DE D005 0000 28               		dc.b $D0, 5, 0,	0, $28
0001A7E3 D005 0022 38               		dc.b $D0, 5, 0,	$22, $38
0001A7E8 D005 0004 48               		dc.b $D0, 5, 0,	4, $48
0001A7ED D009 0008 58               		dc.b $D0, 9, 0,	8, $58
0001A7F2 0005 004C D0               		dc.b 0,	5, 0, $4C, $D0
0001A7F7 0001 0046 E0               		dc.b 0,	1, 0, $46, $E0
0001A7FC 0009 0008 E8               		dc.b 0,	9, 0, 8, $E8
0001A801 0001 0046 FC               		dc.b 0,	1, 0, $46, $FC
0001A806 0005 003E 04               		dc.b 0,	5, 0, $3E, 4
0001A80B 0005 0004 14               		dc.b 0,	5, 0, 4, $14
0001A810 2009 0008 D0               		dc.b $20, 9, 0,	8, $D0
0001A815 2005 0004 E4               		dc.b $20, 5, 0,	4, $E4
0001A81A 2005 001E F4               		dc.b $20, 5, 0,	$1E, $F4
0001A81F 2005 0058 04               		dc.b $20, 5, 0,	$58, 4
0001A824 2005 002A 14               		dc.b $20, 5, 0,	$2A, $14
0001A829 11                         @thanks:	dc.b $11	;  SPECIAL THANKS FUJIO MINEGISHI PAPA | SPECIAL  THANKS YOU   
0001A82A 9005 002E 90               		dc.b $90, 5, 0, $2E, $90	; S
0001A82F 9005 0012 A0               		dc.b $90, 5, 0, $12, $A0	; P
0001A834 9005 000E B0               		dc.b $90, 5, 0, $0E, $B0	; E
0001A839 9005 001E C0               		dc.b $90, 5, 0, $1E, $C0	; C
0001A83E 9001 0046 D0               		dc.b $90, 1, 0, $46, $D0	; I
0001A843 9005 0004 D8               		dc.b $90, 5, 0, 4, $D8		; A
0001A848 9005 0016 E8               		dc.b $90, 5, 0, $16, $E8	; L
0001A84D 9000 0060 0C               		dc.b $90, 0, 0, $60, $C    ;Space
0001A852                            
0001A852 B805 003E C0               		dc.b $B8, 5, 0, $3E, $C0	; T
0001A857 B805 003A D0               		dc.b $B8, 5, 0, $3A, $D0	; H
0001A85C B805 0004 E0               		dc.b $B8, 5, 0, 4, $E0		; A
0001A861 B805 001A F0               		dc.b $B8, 5, 0, $1A, $F0	; N
0001A866 B805 0058 00               		dc.b $B8, 5, 0, $58, $0	; K
0001A86B B805 002E 10               		dc.b $B8, 5, 0, $2E, $10	; S
0001A870                            
0001A870 D805 002A C0               		dc.b $D8, 5, 0, $2A, $C0	; Y
0001A875 D805 0026 D0               		dc.b $D8, 5, 0, $26, $D0	; O
0001A87A D805 0032 E0               		dc.b $D8, 5, 0, $32, $E0	; U
0001A87F 10                         @presentedby:	dc.b $10	;  PRESENTED BY SEGA | PRESENTED BY SORRA   
0001A880 9005 0012 90               		dc.b $90, 5, 0, $12, $90	; P
0001A885 9005 0022 A0               		dc.b $90, 5, 0, $22, $A0	; R
0001A88A 9005 000E B0               		dc.b $90, 5, 0, $0E, $B0	; E
0001A88F 9005 002E C0               		dc.b $90, 5, 0, $2E, $C0	; S
0001A894 9005 000E D0               		dc.b $90, 5, 0, $0E, $D0	; E
0001A899 9005 001A E0               		dc.b $90, 5, 0, $1A, $E0	; N
0001A89E 9005 003E F0               		dc.b $90, 5, 0, $3E, $F0	; T
0001A8A3 9005 000E 00               		dc.b $90, 5, 0, $0E, $0	; E
0001A8A8 9005 0042 10               		dc.b $90, 5, 0, $42, $10	; D
0001A8AD                            
0001A8AD B805 0048 C0               		dc.b $B8, 5, 0, $48, $C0	; B
0001A8B2 B805 002A D0               		dc.b $B8, 5, 0, $2A, $D0	; Y
0001A8B7                            
0001A8B7 D805 002E C0               		dc.b $D8, 5, 0, $2E, $C0	; S
0001A8BC D805 0026 D0               		dc.b $D8, 5, 0, $26, $D0	; O
0001A8C1 D805 0022 E0               		dc.b $D8, 5, 0, $22, $E0	; R
0001A8C6 D805 0022 F0               		dc.b $D8, 5, 0, $22, $F0	; R
0001A8CB D805 0004 00               		dc.b $D8, 5, 0, 4, $0		; A
0001A8D0 08                         @tryagain:	dc.b 8			 ; TRY AGAIN
0001A8D1 3005 003E C0               		dc.b $30, 5, 0,	$3E, $C0
0001A8D6 3005 0022 D0               		dc.b $30, 5, 0,	$22, $D0
0001A8DB 3005 002A E0               		dc.b $30, 5, 0,	$2A, $E0
0001A8E0 3005 0004 F8               		dc.b $30, 5, 0,	4, $F8
0001A8E5 3005 0000 08               		dc.b $30, 5, 0,	0, 8
0001A8EA 3005 0004 18               		dc.b $30, 5, 0,	4, $18
0001A8EF 3001 0046 28               		dc.b $30, 1, 0,	$46, $28
0001A8F4 3005 001A 30               		dc.b $30, 5, 0,	$1A, $30
0001A8F9 0E                         @sonicteam:	dc.b $E	;  SONIC TEAM PRESENTS | SORRA PRESENTS
0001A8FA E805 002E D0               		dc.b $E8, 5, 0, $2E, $D0	; S
0001A8FF E805 0026 E0               		dc.b $E8, 5, 0, $26, $E0	; O
0001A904 E805 0022 F0               		dc.b $E8, 5, 0, $22, $F0	; R
0001A909 E805 0022 00               		dc.b $E8, 5, 0, $22, $0	; R
0001A90E E805 0004 10               		dc.b $E8, 5, 0, 4, $10		; A
0001A913 E800 0060 0C               		dc.b $E8, 0, 0, $60, $C   	 ; Space
0001A918                            
0001A918 0005 0012 C0               		dc.b 0,	5, 0, $12, $C0	; P
0001A91D 0005 0022 D0               		dc.b 0,	5, 0, $22, $D0	; R
0001A922 0005 000E E0               		dc.b 0,	5, 0, $E, $E0	; E
0001A927 0005 002E F0               		dc.b 0,	5, 0, $2E, $F0	; S
0001A92C 0005 000E 00               		dc.b 0,	5, 0, $E, 0	; E
0001A931 0005 001A 10               		dc.b 0,	5, 0, $1A, $10	; N
0001A936 0005 003E 20               		dc.b 0,	5, 0, $3E, $20	; T
0001A93B 0005 002E 30               		dc.b 0,	5, 0, $2E, $30	; S
0001A940                            		even
0001A940                            		even
0001A940                            
0001A940                            		include	"_incObj\3D Boss - Green Hill (part 1).asm"
0001A940                            ; ---------------------------------------------------------------------------
0001A940                            ; Object 3D - Eggman (GHZ)
0001A940                            ; ---------------------------------------------------------------------------
0001A940                            
0001A940                            BossGreenHill:
0001A940 7000                       		moveq	#0,d0
0001A942 1028 0024                  		move.b	obRoutine(a0),d0
0001A946 323B 0000                  		move.w	BGHZ_Index(pc,d0.w),d1
0001A94A 4EFB 1000                  		jmp	BGHZ_Index(pc,d1.w)
0001A94E                            ; ===========================================================================
0001A94E 0000                       BGHZ_Index:	dc.w BGHZ_Main-BGHZ_Index
0001A950 0000                       		dc.w BGHZ_ShipMain-BGHZ_Index
0001A952 0000                       		dc.w BGHZ_FaceMain-BGHZ_Index
0001A954 0000                       		dc.w BGHZ_FlameMain-BGHZ_Index
0001A956                            
0001A956 0200                       BGHZ_ObjData:	dc.b 2,	0		; routine counter, animation
0001A958 0401                       		dc.b 4,	1
0001A95A 0607                       		dc.b 6,	7
0001A95C                            ; ===========================================================================
0001A95C                            
0001A95C                            BGHZ_Main:	; Routine 0
0001A95C 45F9 0001 A956             		lea	(BGHZ_ObjData).l,a2
0001A962 2248                       		movea.l	a0,a1
0001A964 7202                       		moveq	#2,d1
0001A966 6000                       		bra.s	BGHZ_LoadBoss
0001A968                            ; ===========================================================================
0001A968                            
0001A968                            BGHZ_Loop:
0001A968 4EB9 0000 FF2E             		jsr	(FindNextFreeObj).l
0001A96E 6600                       		bne.s	loc_17772
0001A970                            
0001A970                            BGHZ_LoadBoss:
0001A970 135A 0024                  		move.b	(a2)+,obRoutine(a1)
0001A974 12BC 003D                  		move.b	#id_BossGreenHill,0(a1)
0001A978 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001A97E 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001A984 237C 0000 0000 0004        		move.l	#Map_Eggman,obMap(a1)
0001A98C 337C 0400 0002             		move.w	#$400,obGfx(a1)
0001A992 137C 0004 0001             		move.b	#4,obRender(a1)
0001A998 137C 0020 0014             		move.b	#$20,obActWid(a1)
0001A99E 337C 0180 0018             		move.w	#$180,obPriority(a1)
0001A9A4 135A 001C                  		move.b	(a2)+,obAnim(a1)
0001A9A8 2348 0034                  		move.l	a0,$34(a1)
0001A9AC 51C9 FFBA                  		dbf	d1,BGHZ_Loop	; repeat sequence 2 more times
0001A9B0                            
0001A9B0                            loc_17772:
0001A9B0 3168 0008 0030             		move.w	obX(a0),$30(a0)
0001A9B6 3168 000C 0038             		move.w	obY(a0),$38(a0)
0001A9BC 117C 000F 0020             		move.b	#$F,obColType(a0)
0001A9C2 117C 0008 0021             		move.b	#8,obColProp(a0) ; set number of hits to 8
0001A9C8                            
0001A9C8                            
0001A9C8                            BGHZ_ShipMain:	; Routine 2
0001A9C8 7000                       		moveq	#0,d0
0001A9CA 1028 0025                  		move.b	ob2ndRout(a0),d0
0001A9CE 323B 0000                  		move.w	BGHZ_ShipIndex(pc,d0.w),d1
0001A9D2 4EBB 1000                  		jsr	BGHZ_ShipIndex(pc,d1.w)
0001A9D6 43F9 0000 0000             		lea	(Ani_Eggman).l,a1
0001A9DC 4EB9 0000 CB4E             		jsr	(AnimateSprite).l
0001A9E2 1028 0022                  		move.b	obStatus(a0),d0
0001A9E6 0200 0003                  		andi.b	#3,d0
0001A9EA 0228 00FC 0001             		andi.b	#$FC,obRender(a0)
0001A9F0 8128 0001                  		or.b	d0,obRender(a0)
0001A9F4 4EF9 0000 FA8C             		jmp	(DisplaySprite).l
0001A9FA                            ; ===========================================================================
0001A9FA 0000                       BGHZ_ShipIndex:	dc.w BGHZ_ShipStart-BGHZ_ShipIndex
0001A9FC 0000                       		dc.w BGHZ_MakeBall-BGHZ_ShipIndex
0001A9FE 0000                       		dc.w BGHZ_ShipMove-BGHZ_ShipIndex
0001AA00 0000                       		dc.w loc_17954-BGHZ_ShipIndex
0001AA02 0000                       		dc.w loc_1797A-BGHZ_ShipIndex
0001AA04 0000                       		dc.w loc_179AC-BGHZ_ShipIndex
0001AA06 0000                       		dc.w loc_179F6-BGHZ_ShipIndex
0001AA08                            ; ===========================================================================
0001AA08                            
0001AA08                            BGHZ_ShipStart:
0001AA08 317C 0100 0012             		move.w	#$100,obVelY(a0) ; move ship down
0001AA0E 6100 0000                  		bsr.w	BossMove
0001AA12 0C68 0338 0038             		cmpi.w	#$338,$38(a0)
0001AA18 6600                       		bne.s	loc_177E6
0001AA1A 317C 0000 0012             		move.w	#0,obVelY(a0)	; stop ship
0001AA20 5428 0025                  		addq.b	#2,ob2ndRout(a0) ; goto next routine
0001AA24                            
0001AA24                            loc_177E6:
0001AA24 1028 003F                  		move.b	$3F(a0),d0
0001AA28 4EB9 0000 3A82             		jsr	(CalcSine).l
0001AA2E EC40                       		asr.w	#6,d0
0001AA30 D068 0038                  		add.w	$38(a0),d0
0001AA34 3140 000C                  		move.w	d0,obY(a0)
0001AA38 3168 0030 0008             		move.w	$30(a0),obX(a0)
0001AA3E 5428 003F                  		addq.b	#2,$3F(a0)
0001AA42 0C28 0008 0025             		cmpi.b	#8,ob2ndRout(a0)
0001AA48 6400                       		bcc.s	locret_1784A
0001AA4A 4A28 0022                  		tst.b	obStatus(a0)
0001AA4E 6B00                       		bmi.s	loc_1784C
0001AA50 4A28 0020                  		tst.b	obColType(a0)
0001AA54 6600                       		bne.s	locret_1784A
0001AA56 4A28 003E                  		tst.b	$3E(a0)
0001AA5A 6600                       		bne.s	BGHZ_ShipFlash
0001AA5C 117C 0020 003E             		move.b	#$20,$3E(a0)	; set number of	times for ship to flash
0001AA6C                            
0001AA6C                            BGHZ_ShipFlash:
0001AA6C 43F8 FB22                  		lea	(v_pal_dry+$22).w,a1 ; load 2nd pallet, 2nd entry
0001AA70 7000                       		moveq	#0,d0		; move 0 (black) to d0
0001AA72 4A51                       		tst.w	(a1)
0001AA74 6600                       		bne.s	loc_1783C
0001AA76 303C 0EEE                  		move.w	#cWhite,d0	; move 0EEE (white) to d0
0001AA7A                            
0001AA7A                            loc_1783C:
0001AA7A 3280                       		move.w	d0,(a1)		; load color stored in	d0
0001AA7C 5328 003E                  		subq.b	#1,$3E(a0)
0001AA80 6600                       		bne.s	locret_1784A
0001AA82 117C 000F 0020             		move.b	#$F,obColType(a0)
0001AA88                            
0001AA88                            locret_1784A:
0001AA88 4E75                       		rts	
0001AA8A                            ; ===========================================================================
0001AA8A                            
0001AA8A                            loc_1784C:
0001AA8A 7064                       		moveq	#100,d0
0001AA8C 6100 0000                  		bsr.w	AddPoints
0001AA90 117C 0008 0025             		move.b	#8,ob2ndRout(a0)
0001AA96 317C 00B3 003C             		move.w	#$B3,$3C(a0)
0001AA9C 4E75                       		rts	
0001AA9C 4E75                       		rts	
0001AA9E                            
0001AA9E                            ; ---------------------------------------------------------------------------
0001AA9E                            ; Defeated boss	subroutine
0001AA9E                            ; ---------------------------------------------------------------------------
0001AA9E                            
0001AA9E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001AA9E                            
0001AA9E                            
0001AA9E                            BossDefeated:
0001AA9E 1038 FE0F                  		move.b	(v_vbla_byte).w,d0
0001AAA2 0200 0007                  		andi.b	#7,d0
0001AAA6 6600                       		bne.s	locret_178A2
0001AAA8 4EB9 0000 FF18             		jsr	(FindFreeObj).l
0001AAAE 6600                       		bne.s	locret_178A2
0001AAB0 12BC 003F                  		move.b	#id_ExplosionBomb,0(a1)	; load explosion object
0001AAB4 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001AABA 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001AAC0 4EB9 0000 3A5C             		jsr	(RandomNumber).l
0001AAC6 3200                       		move.w	d0,d1
0001AAC8 7200                       		moveq	#0,d1
0001AACA 1200                       		move.b	d0,d1
0001AACC E409                       		lsr.b	#2,d1
0001AACE 0441 0020                  		subi.w	#$20,d1
0001AAD2 D369 0008                  		add.w	d1,obX(a1)
0001AAD6 E048                       		lsr.w	#8,d0
0001AAD8 E608                       		lsr.b	#3,d0
0001AADA D169 000C                  		add.w	d0,obY(a1)
0001AADE                            
0001AADE                            locret_178A2:
0001AADE 4E75                       		rts	
0001AAE0                            ; End of function BossDefeated
0001AAE0                            
0001AAE0                            ; ---------------------------------------------------------------------------
0001AAE0                            ; Subroutine to	move a boss
0001AAE0                            ; ---------------------------------------------------------------------------
0001AAE0                            
0001AAE0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001AAE0                            
0001AAE0                            
0001AAE0                            BossMove:
0001AAE0 4CA8 0005 0010             		movem.w	obVelX(a0),d0/d2
0001AAE6 E188                       		lsl.l	#8,d0
0001AAE8 D1A8 0030                  		add.l	d0,$30(a0)
0001AAEC E18A                       		lsl.l	#8,d2
0001AAEE D5A8 0038                  		add.l	d2,$38(a0)
0001AAF2 4E75                       		rts
0001AAF4                            ; End of function BossMove
0001AAF4                            
0001AAF4                            ; ===========================================================================
0001AAF4                            
0001AAF4                            		include	"_incObj\3D Boss - Green Hill (part 2).asm"
0001AAF4                            
0001AAF4                            BGHZ_MakeBall:
0001AAF4 317C FE00 0010             		move.w	#-$200,obVelX(a0)
0001AAFA 317C FFC0 0012             		move.w	#-$40,obVelY(a0)
0001AB00 6100 FFDE                  		bsr.w	BossMove
0001AB04 0C68 2A00 0030             		cmpi.w	#$2A00,$30(a0)
0001AB0A 6600                       		bne.s	loc_17916
0001AB0C 317C 0000 0010             		move.w	#0,obVelX(a0)
0001AB12 317C 0000 0012             		move.w	#0,obVelY(a0)
0001AB18 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001AB1C 4EB9 0000 FF2E             		jsr	(FindNextFreeObj).l
0001AB22 6600                       		bne.s	loc_17910
0001AB24 12BC 0048                  		move.b	#id_BossBall,0(a1) ; load swinging ball object
0001AB28 3368 0300 0008             		move.w	$300(a0),obX(a1)
0001AB2E 3368 0038 000C             		move.w	$38(a0),obY(a1)
0001AB34 2348 0034                  		move.l	a0,$34(a1)
0001AB38                            
0001AB38                            loc_17910:
0001AB38 317C 0077 003C             		move.w	#$77,$3C(a0)
0001AB3E                            
0001AB3E                            loc_17916:
0001AB3E 6000 FEE4                  		bra.w	loc_177E6
0001AB42                            ; ===========================================================================
0001AB42                            
0001AB42                            BGHZ_ShipMove:
0001AB42 5368 003C                  		subq.w	#1,$3C(a0)
0001AB46 6A00                       		bpl.s	BGHZ_Reverse
0001AB48 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001AB4C 317C 003F 003C             		move.w	#$3F,$3C(a0)
0001AB52 317C 0200 0010             		move.w	#$200,obVelX(a0) ; move the ship sideways
0001AB58 0C68 2A00 0030             		cmpi.w	#$2A00,$30(a0)
0001AB5E 6600                       		bne.s	BGHZ_Reverse
0001AB60 317C 007F 003C             		move.w	#$7F,$3C(a0)
0001AB66 317C 0040 0010             		move.w	#$40,obVelX(a0)
0001AB6C                            
0001AB6C                            BGHZ_Reverse:
0001AB6C 0828 0000 0022             		btst	#0,obStatus(a0)
0001AB72 6600                       		bne.s	loc_17950
0001AB74 4468 0010                  		neg.w	obVelX(a0)	; reverse direction of the ship
0001AB78                            
0001AB78                            loc_17950:
0001AB78 6000 FEAA                  		bra.w	loc_177E6
0001AB7C                            ; ===========================================================================
0001AB7C                            
0001AB7C                            loc_17954:
0001AB7C 5368 003C                  		subq.w	#1,$3C(a0)
0001AB80 6B00                       		bmi.s	loc_17960
0001AB82 6100 FF5C                  		bsr.w	BossMove
0001AB86 6000                       		bra.s	loc_17976
0001AB88                            ; ===========================================================================
0001AB88                            
0001AB88                            loc_17960:
0001AB88 0868 0000 0022             		bchg	#0,obStatus(a0)
0001AB8E 317C 003F 003C             		move.w	#$3F,$3C(a0)
0001AB94 5528 0025                  		subq.b	#2,ob2ndRout(a0)
0001AB98 317C 0000 0010             		move.w	#0,obVelX(a0)
0001AB9E                            
0001AB9E                            loc_17976:
0001AB9E 6000 FE84                  		bra.w	loc_177E6
0001ABA2                            ; ===========================================================================
0001ABA2                            
0001ABA2                            loc_1797A:
0001ABA2 5368 003C                  		subq.w	#1,$3C(a0)
0001ABA6 6B00                       		bmi.s	loc_17984
0001ABA8 6000 FEF4                  		bra.w	BossDefeated
0001ABAC                            ; ===========================================================================
0001ABAC                            
0001ABAC                            loc_17984:
0001ABAC 08E8 0000 0022             		bset	#0,obStatus(a0)
0001ABB2 08A8 0007 0022             		bclr	#7,obStatus(a0)
0001ABB8 4268 0010                  		clr.w	obVelX(a0)
0001ABBC 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001ABC0 317C FFDA 003C             		move.w	#-$26,$3C(a0)
0001ABC6 4A38 F7A7                  		tst.b	(v_bossstatus).w
0001ABCA 6600                       		bne.s	locret_179AA
0001ABCC 11FC 0001 F7A7             		move.b	#1,(v_bossstatus).w
0001ABD2                            
0001ABD2                            locret_179AA:
0001ABD2 4E75                       		rts	
0001ABD4                            ; ===========================================================================
0001ABD4                            
0001ABD4                            loc_179AC:
0001ABD4 5268 003C                  		addq.w	#1,$3C(a0)
0001ABD8 6700                       		beq.s	loc_179BC
0001ABDA 6A00                       		bpl.s	loc_179C2
0001ABDC 0668 0018 0012             		addi.w	#$18,obVelY(a0)
0001ABE2 6000                       		bra.s	loc_179EE
0001ABE4                            ; ===========================================================================
0001ABE4                            
0001ABE4                            loc_179BC:
0001ABE4 4268 0012                  		clr.w	obVelY(a0)
0001ABE8 6000                       		bra.s	loc_179EE
0001ABEA                            ; ===========================================================================
0001ABEA                            
0001ABEA                            loc_179C2:
0001ABEA 0C68 0030 003C             		cmpi.w	#$30,$3C(a0)
0001ABF0 6500                       		bcs.s	loc_179DA
0001ABF2 6700                       		beq.s	loc_179E0
0001ABF4 0C68 0038 003C             		cmpi.w	#$38,$3C(a0)
0001ABFA 6500                       		bcs.s	loc_179EE
0001ABFC 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001AC00 6000                       		bra.s	loc_179EE
0001AC02                            ; ===========================================================================
0001AC02                            
0001AC02                            loc_179DA:
0001AC02 5168 0012                  		subq.w	#8,obVelY(a0)
0001AC06 6000                       		bra.s	loc_179EE
0001AC08                            ; ===========================================================================
0001AC08                            
0001AC08                            loc_179E0:
0001AC08 4268 0012                          clr.w    obVelY(a0)
0001AC0C 4A38 FE2D                          tst.b     (v_invinc).w
0001AC10 6600                               bne.s   @boss_invinc
0001AC12 4A38 FE2E                          tst.b     (v_shoes).w
0001AC16 6600                               bne.s   @boss_shoes
0001AC18                            
0001AC18 1038 F5C6                          move.b   (v_Saved_music),d0
0001AC1C 6000 0000                          bra.w      @boss_play
0001AC20                            
0001AC20                            @boss_invinc:
0001AC20 103C 0000                          move.b #bgm_Invincible,d0
0001AC24                            
0001AC24                            @boss_shoes:
0001AC24 103C 0000                          move.b #bgm_Ending,d0
0001AC28                            
0001AC28                            @boss_play:
0001AC28 4EB8 129A                          jsr PlaySound
0001AC2C                            
0001AC2C                            loc_179EE:
0001AC2C 6100 FEB2                  		bsr.w	BossMove
0001AC30 6000 FDF2                  		bra.w	loc_177E6
0001AC34                            ; ===========================================================================
0001AC34                            
0001AC34                            loc_179F6:
0001AC34 317C 0400 0010             		move.w	#$400,obVelX(a0)
0001AC3A 317C FFC0 0012             		move.w	#-$40,obVelY(a0)
0001AC40 0C78 2AC0 F72A             		cmpi.w	#$2AC0,(v_limitright2).w
0001AC46 6700                       		beq.s	loc_17A10
0001AC48 5478 F72A                  		addq.w	#2,(v_limitright2).w
0001AC4C 6000                       		bra.s	loc_17A16
0001AC4E                            ; ===========================================================================
0001AC4E                            
0001AC4E                            loc_17A10:
0001AC4E 4A28 0001                  		tst.b	obRender(a0)
0001AC52 6A00                       		bpl.s	BGHZ_ShipDel
0001AC54                            
0001AC54                            loc_17A16:
0001AC54 6100 FE8A                  		bsr.w	BossMove
0001AC58 6000 FDCA                  		bra.w	loc_177E6
0001AC5C                            ; ===========================================================================
0001AC5C                            
0001AC5C                            BGHZ_ShipDel:
0001AC5C 4EF9 0000 FACC             		jmp	(DeleteObject).l
0001AC62                            ; ===========================================================================
0001AC62                            
0001AC62                            BGHZ_FaceMain:	; Routine 4
0001AC62 7000                       		moveq	#0,d0
0001AC64 7201                       		moveq	#1,d1
0001AC66 2268 0034                  		movea.l	$34(a0),a1
0001AC6A 1029 0025                  		move.b	ob2ndRout(a1),d0
0001AC6E 5900                       		subq.b	#4,d0
0001AC70 6600                       		bne.s	loc_17A3E
0001AC72 0C69 2A00 0030             		cmpi.w	#$2A00,$30(a1)
0001AC78 6600                       		bne.s	loc_17A46
0001AC7A 7204                       		moveq	#4,d1
0001AC7C                            
0001AC7C                            loc_17A3E:
0001AC7C 5D00                       		subq.b	#6,d0
0001AC7E 6B00                       		bmi.s	loc_17A46
0001AC80 720A                       		moveq	#$A,d1
0001AC82 6000                       		bra.s	loc_17A5A
0001AC84                            ; ===========================================================================
0001AC84                            
0001AC84                            loc_17A46:
0001AC84 4A29 0020                  		tst.b	obColType(a1)
0001AC88 6600                       		bne.s	loc_17A50
0001AC8A 7205                       		moveq	#5,d1
0001AC8C 6000                       		bra.s	loc_17A5A
0001AC8E                            ; ===========================================================================
0001AC8E                            
0001AC8E                            loc_17A50:
0001AC8E 0C38 0004 D024             		cmpi.b	#4,(v_player+obRoutine).w
0001AC94 6500                       		bcs.s	loc_17A5A
0001AC96 7204                       		moveq	#4,d1
0001AC98                            
0001AC98                            loc_17A5A:
0001AC98 1141 001C                  		move.b	d1,obAnim(a0)
0001AC9C 5500                       		subq.b	#2,d0
0001AC9E 6600                       		bne.s	BGHZ_FaceDisp
0001ACA0 117C 0006 001C             		move.b	#6,obAnim(a0)
0001ACA6 4A28 0001                  		tst.b	obRender(a0)
0001ACAA 6A00                       		bpl.s	BGHZ_FaceDel
0001ACAC                            
0001ACAC                            BGHZ_FaceDisp:
0001ACAC 6000                       		bra.s	BGHZ_Display
0001ACAE                            ; ===========================================================================
0001ACAE                            
0001ACAE                            BGHZ_FaceDel:
0001ACAE 4EF9 0000 FACC             		jmp	(DeleteObject).l
0001ACB4                            ; ===========================================================================
0001ACB4                            
0001ACB4                            BGHZ_FlameMain:	; Routine 6
0001ACB4 117C 0007 001C             		move.b	#7,obAnim(a0)
0001ACBA 2268 0034                  		movea.l	$34(a0),a1
0001ACBE 0C29 000C 0025             		cmpi.b	#$C,ob2ndRout(a1)
0001ACC4 6600                       		bne.s	loc_17A96
0001ACC6 117C 000B 001C             		move.b	#$B,obAnim(a0)
0001ACCC 4A28 0001                  		tst.b	obRender(a0)
0001ACD0 6A00                       		bpl.s	BGHZ_FlameDel
0001ACD2 6000                       		bra.s	BGHZ_FlameDisp
0001ACD4                            ; ===========================================================================
0001ACD4                            
0001ACD4                            loc_17A96:
0001ACD4 3029 0010                  		move.w	obVelX(a1),d0
0001ACD8 6700                       		beq.s	BGHZ_FlameDisp
0001ACDA 117C 0008 001C             		move.b	#8,obAnim(a0)
0001ACE0                            
0001ACE0                            BGHZ_FlameDisp:
0001ACE0 6000                       		bra.s	BGHZ_Display
0001ACE2                            ; ===========================================================================
0001ACE2                            
0001ACE2                            BGHZ_FlameDel:
0001ACE2 4EF9 0000 FACC             		jmp	(DeleteObject).l
0001ACE8                            ; ===========================================================================
0001ACE8                            
0001ACE8                            BGHZ_Display:
0001ACE8 2268 0034                  		movea.l	$34(a0),a1
0001ACEC 3169 0008 0008             		move.w	obX(a1),obX(a0)
0001ACF2 3169 000C 000C             		move.w	obY(a1),obY(a0)
0001ACF8 1169 0022 0022             		move.b	obStatus(a1),obStatus(a0)
0001ACFE 43F9 0000 0000             		lea	(Ani_Eggman).l,a1
0001AD04 4EB9 0000 CB4E             		jsr	(AnimateSprite).l
0001AD0A 1028 0022                  		move.b	obStatus(a0),d0
0001AD0E 0200 0003                  		andi.b	#3,d0
0001AD12 0228 00FC 0001             		andi.b	#$FC,obRender(a0)
0001AD18 8128 0001                  		or.b	d0,obRender(a0)
0001AD1C 4EF9 0000 FA8C             		jmp	(DisplaySprite).l
0001AD1C 4EF9 0000 FA8C             		jmp	(DisplaySprite).l
0001AD22                            		include	"_incObj\48 Eggman's Swinging Ball.asm"
0001AD22                            ; ---------------------------------------------------------------------------
0001AD22                            ; Object 48 - ball on a	chain that Eggman swings (GHZ)
0001AD22                            ; ---------------------------------------------------------------------------
0001AD22                            
0001AD22                            BossBall:
0001AD22 7000                       		moveq	#0,d0
0001AD24 1028 0024                  		move.b	obRoutine(a0),d0
0001AD28 323B 0000                  		move.w	GBall_Index(pc,d0.w),d1
0001AD2C 4EFB 1000                  		jmp	GBall_Index(pc,d1.w)
0001AD30                            ; ===========================================================================
0001AD30 0000                       GBall_Index:	dc.w GBall_Main-GBall_Index
0001AD32 0000                       		dc.w GBall_Base-GBall_Index
0001AD34 0000                       		dc.w GBall_Display2-GBall_Index
0001AD36 0000                       		dc.w loc_17C68-GBall_Index
0001AD38 0000                       		dc.w GBall_ChkVanish-GBall_Index
0001AD3A                            ; ===========================================================================
0001AD3A                            
0001AD3A                            GBall_Main:	; Routine 0
0001AD3A 5428 0024                  		addq.b	#2,obRoutine(a0)
0001AD3E 317C 4080 0026             		move.w	#$4080,obAngle(a0)
0001AD44 317C FE00 003E             		move.w	#-$200,$3E(a0)
0001AD4A 217C 0000 0000 0004        		move.l	#Map_BossItems,obMap(a0)
0001AD52 317C 046C 0002             		move.w	#$46C,obGfx(a0)
0001AD58 45E8 0028                  		lea	obSubtype(a0),a2
0001AD5C 14FC 0000                  		move.b	#0,(a2)+
0001AD60 7205                       		moveq	#5,d1
0001AD62 2248                       		movea.l	a0,a1
0001AD64 6000                       		bra.s	loc_17B60
0001AD66                            ; ===========================================================================
0001AD66                            
0001AD66                            GBall_MakeLinks:
0001AD66 4EB9 0000 FF2E             		jsr	(FindNextFreeObj).l
0001AD6C 6600                       		bne.s	GBall_MakeBall
0001AD6E 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001AD74 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001AD7A 12BC 0048                  		move.b	#id_BossBall,0(a1) ; load chain link object
0001AD7E 137C 0006 0024             		move.b	#6,obRoutine(a1)
0001AD84 237C 0000 992E 0004        		move.l	#Map_Swing_GHZ,obMap(a1)
0001AD8C 337C 0380 0002             		move.w	#$380,obGfx(a1)
0001AD92 137C 0001 001A             		move.b	#1,obFrame(a1)
0001AD98 5228 0028                  		addq.b	#1,obSubtype(a0)
0001AD9C                            
0001AD9C                            loc_17B60:
0001AD9C 3A09                       		move.w	a1,d5
0001AD9E 0445 D000                  		subi.w	#$D000,d5
0001ADA2 EC4D                       		lsr.w	#6,d5
0001ADA4 0245 007F                  		andi.w	#$7F,d5
0001ADA8 14C5                       		move.b	d5,(a2)+
0001ADAA 137C 0004 0001             		move.b	#4,obRender(a1)
0001ADB0 137C 0008 0014             		move.b	#8,obActWid(a1)
0001ADB6 337C 0300 0018             		move.w	#$300,obPriority(a1)
0001ADBC 2368 0034 0034             		move.l	$34(a0),$34(a1)
0001ADC2 51C9 FFA2                  		dbf	d1,GBall_MakeLinks ; repeat sequence 5 more times
0001ADC6                            
0001ADC6                            GBall_MakeBall:
0001ADC6 137C 0008 0024             		move.b	#8,obRoutine(a1)
0001ADCC 237C 0000 9E8A 0004        		move.l	#Map_GBall,obMap(a1) ; load different mappings for final link
0001ADD4 337C 43AA 0002             		move.w	#$43AA,obGfx(a1) ; use different graphics
0001ADDA 137C 0001 001A             		move.b	#1,obFrame(a1)
0001ADE0 337C 0280 0018             		move.w	#$280,obPriority(a1)
0001ADE6 137C 0081 0020             		move.b	#$81,obColType(a1) ; make object hurt Sonic
0001ADEC 4E75                       		rts	
0001ADEE                            ; ===========================================================================
0001ADEE                            
0001ADEE 0010 2030 4060             GBall_PosData:	dc.b 0,	$10, $20, $30, $40, $60	; y-position data for links and	giant ball
0001ADF4                            
0001ADF4                            ; ===========================================================================
0001ADF4                            
0001ADF4                            GBall_Base:	; Routine 2
0001ADF4 47F9 0001 ADEE             		lea	(GBall_PosData).l,a3
0001ADFA 45E8 0028                  		lea	obSubtype(a0),a2
0001ADFE 7C00                       		moveq	#0,d6
0001AE00 1C1A                       		move.b	(a2)+,d6
0001AE02                            
0001AE02                            loc_17BC6:
0001AE02 7800                       		moveq	#0,d4
0001AE04 181A                       		move.b	(a2)+,d4
0001AE06 ED4C                       		lsl.w	#6,d4
0001AE08 0684 00FF D000             		addi.l	#v_objspace&$FFFFFF,d4
0001AE0E 2244                       		movea.l	d4,a1
0001AE10 101B                       		move.b	(a3)+,d0
0001AE12 B029 003C                  		cmp.b	$3C(a1),d0
0001AE16 6700                       		beq.s	loc_17BE0
0001AE18 5229 003C                  		addq.b	#1,$3C(a1)
0001AE1C                            
0001AE1C                            loc_17BE0:
0001AE1C 51CE FFE4                  		dbf	d6,loc_17BC6
0001AE20                            
0001AE20 B029 003C                  		cmp.b	$3C(a1),d0
0001AE24 6600                       		bne.s	loc_17BFA
0001AE26 2268 0034                  		movea.l	$34(a0),a1
0001AE2A 0C29 0006 0025             		cmpi.b	#6,ob2ndRout(a1)
0001AE30 6600                       		bne.s	loc_17BFA
0001AE32 5428 0024                  		addq.b	#2,obRoutine(a0)
0001AE36                            
0001AE36                            loc_17BFA:
0001AE36 0C68 0020 0032             		cmpi.w	#$20,$32(a0)
0001AE3C 6700                       		beq.s	GBall_Display
0001AE3E 5268 0032                  		addq.w	#1,$32(a0)
0001AE42                            
0001AE42                            GBall_Display:
0001AE42 6100 0000                  		bsr.w	sub_17C2A
0001AE46 1028 0026                  		move.b	obAngle(a0),d0
0001AE4A 4EB9 0000 98A0             		jsr	(Swing_Move2).l
0001AE50 4EF9 0000 FA8C             		jmp	(DisplaySprite).l
0001AE56                            ; ===========================================================================
0001AE56                            
0001AE56                            GBall_Display2:	; Routine 4
0001AE56 6100 0000                  		bsr.w	sub_17C2A
0001AE5A 4EB9 0000 9860             		jsr	(Obj48_Move).l
0001AE60 4EF9 0000 FA8C             		jmp	(DisplaySprite).l
0001AE66                            
0001AE66                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001AE66                            
0001AE66                            
0001AE66                            sub_17C2A:
0001AE66 2268 0034                  		movea.l	$34(a0),a1
0001AE6A 0628 0020 001B             		addi.b	#$20,obAniFrame(a0)
0001AE70 6400                       		bcc.s	loc_17C3C
0001AE72 0868 0000 001A             		bchg	#0,obFrame(a0)
0001AE78                            
0001AE78                            loc_17C3C:
0001AE78 3169 0008 003A             		move.w	obX(a1),$3A(a0)
0001AE7E 3029 000C                  		move.w	obY(a1),d0
0001AE82 D068 0032                  		add.w	$32(a0),d0
0001AE86 3140 0038                  		move.w	d0,$38(a0)
0001AE8A 1169 0022 0022             		move.b	obStatus(a1),obStatus(a0)
0001AE90 4A29 0022                  		tst.b	obStatus(a1)
0001AE94 6A00                       		bpl.s	locret_17C66
0001AE96 10BC 003F                  		move.b	#id_ExplosionBomb,0(a0)
0001AE9A 117C 0000 0024             		move.b	#0,obRoutine(a0)
0001AEA0                            
0001AEA0                            locret_17C66:
0001AEA0 4E75                       		rts	
0001AEA2                            ; End of function sub_17C2A
0001AEA2                            
0001AEA2                            ; ===========================================================================
0001AEA2                            
0001AEA2                            loc_17C68:	; Routine 6
0001AEA2 2268 0034                  		movea.l	$34(a0),a1
0001AEA6 4A29 0022                  		tst.b	obStatus(a1)
0001AEAA 6A00                       		bpl.s	GBall_Display3
0001AEAC 10BC 003F                  		move.b	#id_ExplosionBomb,0(a0)
0001AEB0 117C 0000 0024             		move.b	#0,obRoutine(a0)
0001AEB6                            
0001AEB6                            GBall_Display3:
0001AEB6 4EF9 0000 FA8C             		jmp	(DisplaySprite).l
0001AEBC                            ; ===========================================================================
0001AEBC                            
0001AEBC                            GBall_ChkVanish:; Routine 8
0001AEBC 7000                       		moveq	#0,d0
0001AEBE 4A28 001A                  		tst.b	obFrame(a0)
0001AEC2 6600                       		bne.s	GBall_Vanish
0001AEC4 5200                       		addq.b	#1,d0
0001AEC6                            
0001AEC6                            GBall_Vanish:
0001AEC6 1140 001A                  		move.b	d0,obFrame(a0)
0001AECA 2268 0034                  		movea.l	$34(a0),a1
0001AECE 4A29 0022                  		tst.b	obStatus(a1)
0001AED2 6A00                       		bpl.s	GBall_Display4
0001AED4 117C 0000 0020             		move.b	#0,obColType(a0)
0001AEDA 6100 FBC2                  		bsr.w	BossDefeated
0001AEDE 5328 003C                  		subq.b	#1,$3C(a0)
0001AEE2 6A00                       		bpl.s	GBall_Display4
0001AEE4 10BC 003F                  		move.b	#id_ExplosionBomb,(a0)
0001AEE8 117C 0000 0024             		move.b	#0,obRoutine(a0)
0001AEEE                            
0001AEEE                            GBall_Display4:
0001AEEE 4EF9 0000 FA8C             		jmp	(DisplaySprite).l
0001AEEE 4EF9 0000 FA8C             		jmp	(DisplaySprite).l
0001AEF4                            		include	"_anim\Eggman.asm"
0001AEF4                            ; ---------------------------------------------------------------------------
0001AEF4                            ; Animation script - Eggman (bosses)
0001AEF4                            ; ---------------------------------------------------------------------------
0001AEF4 0000                       Ani_Eggman:	dc.w @ship-Ani_Eggman
0001AEF6 0000                       		dc.w @facenormal1-Ani_Eggman
0001AEF8 0000                       		dc.w @facenormal2-Ani_Eggman
0001AEFA 0000                       		dc.w @facenormal3-Ani_Eggman
0001AEFC 0000                       		dc.w @facelaugh-Ani_Eggman
0001AEFE 0000                       		dc.w @facehit-Ani_Eggman
0001AF00 0000                       		dc.w @facepanic-Ani_Eggman
0001AF02 0000                       		dc.w @blank-Ani_Eggman
0001AF04 0000                       		dc.w @flame1-Ani_Eggman
0001AF06 0000                       		dc.w @flame2-Ani_Eggman
0001AF08 0000                       		dc.w @facedefeat-Ani_Eggman
0001AF0A 0000                       		dc.w @escapeflame-Ani_Eggman
0001AF0C 0F00 FF                    @ship:		dc.b $F, 0, afEnd
0001AF10 00                         		even
0001AF10 0501 02FF                  @facenormal1:	dc.b 5,	1, 2, afEnd
0001AF14                            		even
0001AF14 0301 02FF                  @facenormal2:	dc.b 3,	1, 2, afEnd
0001AF18                            		even
0001AF18 0101 02FF                  @facenormal3:	dc.b 1,	1, 2, afEnd
0001AF1C                            		even
0001AF1C 0403 04FF                  @facelaugh:	dc.b 4,	3, 4, afEnd
0001AF20                            		even
0001AF20 1F05 01FF                  @facehit:	dc.b $1F, 5, 1,	afEnd
0001AF24                            		even
0001AF24 0306 01FF                  @facepanic:	dc.b 3,	6, 1, afEnd
0001AF28                            		even
0001AF28 0F0A FF                    @blank:		dc.b $F, $A, afEnd
0001AF2C 00                         		even
0001AF2C 0308 09FF                  @flame1:	dc.b 3,	8, 9, afEnd
0001AF30                            		even
0001AF30 0108 09FF                  @flame2:	dc.b 1,	8, 9, afEnd
0001AF34                            		even
0001AF34 0F07 FF                    @facedefeat:	dc.b $F, 7, afEnd
0001AF38 00                         		even
0001AF38 0209 080B 0C0B 0C09 08FE+  @escapeflame:	dc.b 2,	9, 8, $B, $C, $B, $C, 9, 8, afBack, 2
0001AF44 00                         		even
0001AF44 00                         		even
0001AF44                            Map_Eggman:	include	"_maps\Eggman.asm"
0001AF44                            ; --------------------------------------------------------------------------------
0001AF44                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0001AF44                            ; --------------------------------------------------------------------------------
0001AF44                            
0001AF44                            SME_F_pyS:	
0001AF44 0000 0000                  		dc.w SME_F_pyS_1A-SME_F_pyS, SME_F_pyS_34-SME_F_pyS	
0001AF48 0000 0000                  		dc.w SME_F_pyS_44-SME_F_pyS, SME_F_pyS_54-SME_F_pyS	
0001AF4C 0000 0000                  		dc.w SME_F_pyS_69-SME_F_pyS, SME_F_pyS_7E-SME_F_pyS	
0001AF50 0000 0000                  		dc.w SME_F_pyS_93-SME_F_pyS, SME_F_pyS_A8-SME_F_pyS	
0001AF54 0000 0000                  		dc.w SME_F_pyS_CC-SME_F_pyS, SME_F_pyS_D2-SME_F_pyS	
0001AF58 0000 0000                  		dc.w SME_F_pyS_D8-SME_F_pyS, SME_F_pyS_D9-SME_F_pyS	
0001AF5C 0000                       		dc.w SME_F_pyS_E4-SME_F_pyS	
0001AF5E 05                         SME_F_pyS_1A:	dc.b 5	
0001AF5F EC01 000A E4               		dc.b $EC, 1, 0, $A, $E4	
0001AF64 FC0E 2010 E4               		dc.b $FC, $E, $20, $10, $E4	
0001AF69 FC0E 201C 04               		dc.b $FC, $E, $20, $1C, 4	
0001AF6E 140C 2028 EC               		dc.b $14, $C, $20, $28, $EC	
0001AF73 1400 202C 0C               		dc.b $14, 0, $20, $2C, $C	
0001AF78 03                         SME_F_pyS_34:	dc.b 3	
0001AF79 E404 0000 F4               		dc.b $E4, 4, 0, 0, $F4	
0001AF7E EC0D 0002 EC               		dc.b $EC, $D, 0, 2, $EC	
0001AF83 EC05 000C 0C               		dc.b $EC, 5, 0, $C, $C	
0001AF88 03                         SME_F_pyS_44:	dc.b 3	
0001AF89 E404 0000 F4               		dc.b $E4, 4, 0, 0, $F4	
0001AF8E EC0D 0035 EC               		dc.b $EC, $D, 0, $35, $EC	
0001AF93 EC05 000C 0C               		dc.b $EC, 5, 0, $C, $C	
0001AF98 04                         SME_F_pyS_54:	dc.b 4	
0001AF99 E408 003D F4               		dc.b $E4, 8, 0, $3D, $F4	
0001AF9E EC09 0040 EC               		dc.b $EC, 9, 0, $40, $EC	
0001AFA3 EC05 0046 04               		dc.b $EC, 5, 0, $46, 4	
0001AFA8 EC01 000E 14               		dc.b $EC, 1, 0, $E, $14	
0001AFAD 04                         SME_F_pyS_69:	dc.b 4	
0001AFAE E408 004A F4               		dc.b $E4, 8, 0, $4A, $F4	
0001AFB3 EC09 004D EC               		dc.b $EC, 9, 0, $4D, $EC	
0001AFB8 EC05 0053 04               		dc.b $EC, 5, 0, $53, 4	
0001AFBD EC01 000E 14               		dc.b $EC, 1, 0, $E, $14	
0001AFC2 04                         SME_F_pyS_7E:	dc.b 4	
0001AFC3 E408 0057 F4               		dc.b $E4, 8, 0, $57, $F4	
0001AFC8 EC09 005A EC               		dc.b $EC, 9, 0, $5A, $EC	
0001AFCD EC05 0060 04               		dc.b $EC, 5, 0, $60, 4	
0001AFD2 EC01 000E 14               		dc.b $EC, 1, 0, $E, $14	
0001AFD7 04                         SME_F_pyS_93:	dc.b 4	
0001AFD8 E404 0064 04               		dc.b $E4, 4, 0, $64, 4	
0001AFDD E404 0000 F4               		dc.b $E4, 4, 0, 0, $F4	
0001AFE2 EC0D 0035 EC               		dc.b $EC, $D, 0, $35, $EC	
0001AFE7 EC05 000C 0C               		dc.b $EC, 5, 0, $C, $C	
0001AFEC 07                         SME_F_pyS_A8:	dc.b 7	
0001AFED E409 0066 F4               		dc.b $E4, 9, 0, $66, $F4	
0001AFF2 E408 0057 F4               		dc.b $E4, 8, 0, $57, $F4	
0001AFF7 EC05 0060 04               		dc.b $EC, 5, 0, $60, 4	
0001AFFC EC01 0035 EC               		dc.b $EC, 1, 0, $35, $EC	
0001B001 F400 005D F4               		dc.b $F4, 0, 0, $5D, $F4	
0001B006 F400 005F FC               		dc.b $F4, 0, 0, $5F, $FC	
0001B00B EC01 000E 14               		dc.b $EC, 1, 0, $E, $14	
0001B010 01                         SME_F_pyS_CC:	dc.b 1	
0001B011 0405 002D 22               		dc.b 4, 5, 0, $2D, $22	
0001B016 01                         SME_F_pyS_D2:	dc.b 1	
0001B017 0405 0031 22               		dc.b 4, 5, 0, $31, $22	
0001B01C 00                         SME_F_pyS_D8:	dc.b 0	
0001B01D 02                         SME_F_pyS_D9:	dc.b 2	
0001B01E 0008 012A 22               		dc.b 0, 8, 1, $2A, $22	
0001B023 0808 112A 22               		dc.b 8, 8, $11, $2A, $22	
0001B028 02                         SME_F_pyS_E4:	dc.b 2	
0001B029 F80B 012D 22               		dc.b $F8, $B, 1, $2D, $22	
0001B02E 0001 0139 3A               		dc.b 0, 1, 1, $39, $3A	
0001B034 00                         		even
0001B034 00                         		even
0001B034                            Map_BossItems:	include	"_maps\Boss Items.asm"
0001B034                            ; ---------------------------------------------------------------------------
0001B034                            ; Sprite mappings - extra boss items (e.g. swinging ball on a chain in GHZ)
0001B034                            ; ---------------------------------------------------------------------------
0001B034                            Map_BossItems_internal:
0001B034 0000                       		dc.w @chainanchor1-Map_BossItems_internal
0001B036 0000                       		dc.w @chainanchor2-Map_BossItems_internal
0001B038 0000                       		dc.w @cross-Map_BossItems_internal
0001B03A 0000                       		dc.w @widepipe-Map_BossItems_internal
0001B03C 0000                       		dc.w @pipe-Map_BossItems_internal
0001B03E 0000                       		dc.w @spike-Map_BossItems_internal
0001B040 0000                       		dc.w @legmask-Map_BossItems_internal
0001B042 0000                       		dc.w @legs-Map_BossItems_internal
0001B044 01                         @chainanchor1:	dc.b 1
0001B045 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8	; GHZ boss
0001B04A 02                         @chainanchor2:	dc.b 2
0001B04B FC04 0004 F8               		dc.b $FC, 4, 0,	4, $F8	; GHZ boss
0001B050 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0001B056 00                         		even
0001B056 01                         @cross:		dc.b 1
0001B057 FC00 0006 FC               		dc.b $FC, 0, 0,	6, $FC	; unknown
0001B05C 01                         @widepipe:	dc.b 1
0001B05D 1409 0007 F4               		dc.b $14, 9, 0,	7, $F4	; SLZ boss
0001B062 01                         @pipe:		dc.b 1
0001B063 1405 000D F8               		dc.b $14, 5, 0,	$D, $F8	; MZ boss
0001B068 04                         @spike:		dc.b 4
0001B069 F004 0011 F8               		dc.b $F0, 4, 0,	$11, $F8 ; SYZ boss
0001B06E F801 0013 F8               		dc.b $F8, 1, 0,	$13, $F8
0001B073 F801 0813 00               		dc.b $F8, 1, 8,	$13, 0
0001B078 0804 0015 F8               		dc.b 8,	4, 0, $15, $F8
0001B07E 00                         		even
0001B07E 02                         @legmask:	dc.b 2
0001B07F 0005 0017 00               		dc.b 0,	5, 0, $17, 0	; FZ post-boss: sprite covering part of legs
0001B084 0000 001B 10               		dc.b 0,	0, 0, $1B, $10
0001B08A 00                         		even
0001B08A 02                         @legs:		dc.b 2
0001B08B 1804 001C 00               		dc.b $18, 4, 0,	$1C, 0	; FZ post-boss
0001B090 000B 001E 10               		dc.b 0,	$B, 0, $1E, $10
0001B096 00                         		even
0001B096 00                         		even
0001B096                            		include	"_incObj\77 Boss - Labyrinth.asm"
0001B096                            ; ---------------------------------------------------------------------------
0001B096                            ; Object 77 - Eggman (LZ)
0001B096                            ; ---------------------------------------------------------------------------
0001B096                            
0001B096                            BossLabyrinth:
0001B096 7000                       		moveq	#0,d0
0001B098 1028 0024                  		move.b	obRoutine(a0),d0
0001B09C 323B 0000                  		move.w	Obj77_Index(pc,d0.w),d1
0001B0A0 4EFB 1000                  		jmp	Obj77_Index(pc,d1.w)
0001B0A4                            ; ===========================================================================
0001B0A4 0000                       Obj77_Index:	dc.w Obj77_Main-Obj77_Index
0001B0A6 0000                       		dc.w Obj77_ShipMain-Obj77_Index
0001B0A8 0000                       		dc.w Obj77_FaceMain-Obj77_Index
0001B0AA 0000                       		dc.w Obj77_FlameMain-Obj77_Index
0001B0AC                            
0001B0AC 0200                       Obj77_ObjData:	dc.b 2,	0		; routine number, animation
0001B0AE 0401                       		dc.b 4,	1
0001B0B0 0607                       		dc.b 6,	7
0001B0B2                            ; ===========================================================================
0001B0B2                            
0001B0B2                            Obj77_Main:	; Routine 0
0001B0B2 317C 1E10 0008             		move.w	#$1E10,obX(a0)
0001B0B8 317C 05C0 000C             		move.w	#$5C0,obY(a0)
0001B0BE 3168 0008 0030             		move.w	obX(a0),$30(a0)
0001B0C4 3168 000C 0038             		move.w	obY(a0),$38(a0)
0001B0CA 117C 000F 0020             		move.b	#$F,obColType(a0)
0001B0D0 117C 0008 0021             		move.b	#8,obColProp(a0) ; set number of hits to 8
0001B0D6 317C 0200 0018             		move.w	#$200,obPriority(a0)
0001B0DC 45FA FFCE                  		lea	Obj77_ObjData(pc),a2
0001B0E0 2248                       		movea.l	a0,a1
0001B0E2 7202                       		moveq	#2,d1
0001B0E4 6000                       		bra.s	Obj77_LoadBoss
0001B0E6                            ; ===========================================================================
0001B0E6                            
0001B0E6                            Obj77_Loop:
0001B0E6 4EB9 0000 FF2E             		jsr	(FindNextFreeObj).l
0001B0EC 6600                       		bne.s	Obj77_ShipMain
0001B0EE 12BC 0077                  		move.b	#id_BossLabyrinth,0(a1)
0001B0F2 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001B0F8 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001B0FE                            
0001B0FE                            Obj77_LoadBoss:
0001B0FE 08A8 0000 0022             		bclr	#0,obStatus(a0)
0001B104 4229 0025                  		clr.b	ob2ndRout(a1)
0001B108 135A 0024                  		move.b	(a2)+,obRoutine(a1)
0001B10C 135A 001C                  		move.b	(a2)+,obAnim(a1)
0001B110 3368 0018 0018             		move.w	obPriority(a0),obPriority(a1)
0001B116 237C 0001 AF44 0004        		move.l	#Map_Eggman,obMap(a1)
0001B11E 337C 0400 0002             		move.w	#$400,obGfx(a1)
0001B124 137C 0004 0001             		move.b	#4,obRender(a1)
0001B12A 137C 0020 0014             		move.b	#$20,obActWid(a1)
0001B130 2348 0034                  		move.l	a0,$34(a1)
0001B134 51C9 FFB0                  		dbf	d1,Obj77_Loop
0001B138                            
0001B138                            Obj77_ShipMain:	; Routine 2
0001B138 43F8 D000                  		lea	(v_player).w,a1
0001B13C 7000                       		moveq	#0,d0
0001B13E 1028 0025                  		move.b	ob2ndRout(a0),d0
0001B142 323B 0000                  		move.w	Obj77_ShipIndex(pc,d0.w),d1
0001B146 4EBB 1000                  		jsr	Obj77_ShipIndex(pc,d1.w)
0001B14A 43F9 0001 AEF4             		lea	(Ani_Eggman).l,a1
0001B150 4EB9 0000 CB4E             		jsr	(AnimateSprite).l
0001B156 7003                       		moveq	#3,d0
0001B158 C028 0022                  		and.b	obStatus(a0),d0
0001B15C 0228 00FC 0001             		andi.b	#$FC,obRender(a0)
0001B162 8128 0001                  		or.b	d0,obRender(a0)
0001B166 4EF9 0000 FA8C             		jmp	(DisplaySprite).l
0001B16C                            ; ===========================================================================
0001B16C 0000 0000                  Obj77_ShipIndex:dc.w loc_17F1E-Obj77_ShipIndex,	loc_17FA0-Obj77_ShipIndex
0001B170 0000 0000                  		dc.w loc_17FE0-Obj77_ShipIndex,	loc_1801E-Obj77_ShipIndex
0001B174 0000 0000                  		dc.w loc_180BC-Obj77_ShipIndex,	loc_180F6-Obj77_ShipIndex
0001B178 0000 0000                  		dc.w loc_1812A-Obj77_ShipIndex,	loc_18152-Obj77_ShipIndex
0001B17C                            ; ===========================================================================
0001B17C                            
0001B17C                            loc_17F1E:
0001B17C 3029 0008                  		move.w	obX(a1),d0
0001B180 0C40 1DA0                  		cmpi.w	#$1DA0,d0
0001B184 6500                       		bcs.s	loc_17F38
0001B186 317C FE80 0012             		move.w	#-$180,obVelY(a0)
0001B18C 317C 0060 0010             		move.w	#$60,obVelX(a0)
0001B192 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001B196                            
0001B196                            loc_17F38:
0001B196 6100 F948                  		bsr.w	BossMove
0001B19A 3168 0038 000C             		move.w	$38(a0),obY(a0)
0001B1A0 3168 0030 0008             		move.w	$30(a0),obX(a0)
0001B1A6                            
0001B1A6                            loc_17F48:
0001B1A6 4A28 003D                  		tst.b	$3D(a0)
0001B1AA 6600                       		bne.s	loc_17F8E
0001B1AC 4A28 0022                  		tst.b	obStatus(a0)
0001B1B0 6B00                       		bmi.s	loc_17F92
0001B1B2 4A28 0020                  		tst.b	obColType(a0)
0001B1B6 6600                       		bne.s	locret_17F8C
0001B1B8 4A28 003E                  		tst.b	$3E(a0)
0001B1BC 6600                       		bne.s	loc_17F70
0001B1BE 117C 0020 003E             		move.b	#$20,$3E(a0)
0001B1CE                            
0001B1CE                            loc_17F70:
0001B1CE 43F8 FB22                  		lea	(v_pal_dry+$22).w,a1
0001B1D2 7000                       		moveq	#0,d0
0001B1D4 4A51                       		tst.w	(a1)
0001B1D6 6600                       		bne.s	loc_17F7E
0001B1D8 303C 0EEE                  		move.w	#cWhite,d0
0001B1DC                            
0001B1DC                            loc_17F7E:
0001B1DC 3280                       		move.w	d0,(a1)
0001B1DE 5328 003E                  		subq.b	#1,$3E(a0)
0001B1E2 6600                       		bne.s	locret_17F8C
0001B1E4 117C 000F 0020             		move.b	#$F,obColType(a0)
0001B1EA                            
0001B1EA                            locret_17F8C:
0001B1EA 4E75                       		rts	
0001B1EC                            ; ===========================================================================
0001B1EC                            
0001B1EC                            loc_17F8E:
0001B1EC 6000 F8B0                  		bra.w	BossDefeated
0001B1F0                            ; ===========================================================================
0001B1F0                            
0001B1F0                            loc_17F92:
0001B1F0 7064                       		moveq	#100,d0
0001B1F2 6100 0000                  		bsr.w	AddPoints
0001B1F6 117C 00FF 003D             		move.b	#-1,$3D(a0)
0001B1FC 4E75                       		rts	
0001B1FE                            ; ===========================================================================
0001B1FE                            
0001B1FE                            loc_17FA0:
0001B1FE 70FE                       		moveq	#-2,d0
0001B200 0C68 1E48 0030             		cmpi.w	#$1E48,$30(a0)
0001B206 6500                       		bcs.s	loc_17FB6
0001B208 317C 1E48 0030             		move.w	#$1E48,$30(a0)
0001B20E 4268 0010                  		clr.w	obVelX(a0)
0001B212 5240                       		addq.w	#1,d0
0001B214                            
0001B214                            loc_17FB6:
0001B214 0C68 0500 0038             		cmpi.w	#$500,$38(a0)
0001B21A 6E00                       		bgt.s	loc_17FCA
0001B21C 317C 0500 0038             		move.w	#$500,$38(a0)
0001B222 4268 0012                  		clr.w	obVelY(a0)
0001B226 5240                       		addq.w	#1,d0
0001B228                            
0001B228                            loc_17FCA:
0001B228 6600                       		bne.s	loc_17FDC
0001B22A 317C 0140 0010             		move.w	#$140,obVelX(a0)
0001B230 317C FE00 0012             		move.w	#-$200,obVelY(a0)
0001B236 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001B23A                            
0001B23A                            loc_17FDC:
0001B23A 6000 FF5A                  		bra.w	loc_17F38
0001B23E                            ; ===========================================================================
0001B23E                            
0001B23E                            loc_17FE0:
0001B23E 70FE                       		moveq	#-2,d0
0001B240 0C68 1E70 0030             		cmpi.w	#$1E70,$30(a0)
0001B246 6500                       		bcs.s	loc_17FF6
0001B248 317C 1E70 0030             		move.w	#$1E70,$30(a0)
0001B24E 4268 0010                  		clr.w	obVelX(a0)
0001B252 5240                       		addq.w	#1,d0
0001B254                            
0001B254                            loc_17FF6:
0001B254 0C68 04C0 0038             		cmpi.w	#$4C0,$38(a0)
0001B25A 6E00                       		bgt.s	loc_1800A
0001B25C 317C 04C0 0038             		move.w	#$4C0,$38(a0)
0001B262 4268 0012                  		clr.w	obVelY(a0)
0001B266 5240                       		addq.w	#1,d0
0001B268                            
0001B268                            loc_1800A:
0001B268 6600                       		bne.s	loc_1801A
0001B26A 317C FE80 0012             		move.w	#-$180,obVelY(a0)
0001B270 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001B274 4228 003F                  		clr.b	$3F(a0)
0001B278                            
0001B278                            loc_1801A:
0001B278 6000 FF1C                  		bra.w	loc_17F38
0001B27C                            ; ===========================================================================
0001B27C                            
0001B27C                            loc_1801E:
0001B27C 0C68 0100 0038             		cmpi.w	#$100,$38(a0)
0001B282 6E00                       		bgt.s	loc_1804E
0001B284 317C 0100 0038             		move.w	#$100,$38(a0)
0001B28A 317C 0140 0010             		move.w	#$140,obVelX(a0)
0001B290 317C FF80 0012             		move.w	#-$80,obVelY(a0)
0001B296 4A28 003D                  		tst.b	$3D(a0)
0001B29A 6700                       		beq.s	loc_18046
0001B29C E1E8 0010                  		asl	obVelX(a0)
0001B2A0 E1E8 0012                  		asl	obVelY(a0)
0001B2A4                            
0001B2A4                            loc_18046:
0001B2A4 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001B2A8 6000 FEEC                  		bra.w	loc_17F38
0001B2AC                            ; ===========================================================================
0001B2AC                            
0001B2AC                            loc_1804E:
0001B2AC 08E8 0000 0022             		bset	#0,obStatus(a0)
0001B2B2 5428 003F                  		addq.b	#2,$3F(a0)
0001B2B6 1028 003F                  		move.b	$3F(a0),d0
0001B2BA 4EB9 0000 3A82             		jsr	(CalcSine).l
0001B2C0 4A41                       		tst.w	d1
0001B2C2 6A00                       		bpl.s	loc_1806C
0001B2C4 08A8 0000 0022             		bclr	#0,obStatus(a0)
0001B2CA                            
0001B2CA                            loc_1806C:
0001B2CA E840                       		asr.w	#4,d0
0001B2CC 4840                       		swap	d0
0001B2CE 4240                       		clr.w	d0
0001B2D0 D0A8 0030                  		add.l	$30(a0),d0
0001B2D4 4840                       		swap	d0
0001B2D6 3140 0008                  		move.w	d0,obX(a0)
0001B2DA 3028 0012                  		move.w	obVelY(a0),d0
0001B2DE 3238 D00C                  		move.w	(v_player+obY).w,d1
0001B2E2 9268 000C                  		sub.w	obY(a0),d1
0001B2E6 6500                       		bcs.s	loc_180A2
0001B2E8 0441 0048                  		subi.w	#$48,d1
0001B2EC 6500                       		bcs.s	loc_180A2
0001B2EE E240                       		asr.w	#1,d0
0001B2F0 0441 0028                  		subi.w	#$28,d1
0001B2F4 6500                       		bcs.s	loc_180A2
0001B2F6 E240                       		asr.w	#1,d0
0001B2F8 0441 0028                  		subi.w	#$28,d1
0001B2FC 6500                       		bcs.s	loc_180A2
0001B2FE 7000                       		moveq	#0,d0
0001B300                            
0001B300                            loc_180A2:
0001B300 48C0                       		ext.l	d0
0001B302 E180                       		asl.l	#8,d0
0001B304 4A28 003D                  		tst.b	$3D(a0)
0001B308 6700                       		beq.s	loc_180AE
0001B30A D080                       		add.l	d0,d0
0001B30C                            
0001B30C                            loc_180AE:
0001B30C D1A8 0038                  		add.l	d0,$38(a0)
0001B310 3168 0038 000C             		move.w	$38(a0),obY(a0)
0001B316 6000 FE8E                  		bra.w	loc_17F48
0001B31A                            ; ===========================================================================
0001B31A                            
0001B31A                            loc_180BC:
0001B31A 70FE                       		moveq	#-2,d0
0001B31C 0C68 1F4C 0030             		cmpi.w	#$1F4C,$30(a0)
0001B322 6500                       		bcs.s	loc_180D2
0001B324 317C 1F4C 0030             		move.w	#$1F4C,$30(a0)
0001B32A 4268 0010                  		clr.w	obVelX(a0)
0001B32E 5240                       		addq.w	#1,d0
0001B330                            
0001B330                            loc_180D2:
0001B330 0C68 00C0 0038             		cmpi.w	#$C0,$38(a0)
0001B336 6E00                       		bgt.s	loc_180E6
0001B338 317C 00C0 0038             		move.w	#$C0,$38(a0)
0001B33E 4268 0012                  		clr.w	obVelY(a0)
0001B342 5240                       		addq.w	#1,d0
0001B344                            
0001B344                            loc_180E6:
0001B344 6600                       		bne.s	loc_180F2
0001B346 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001B34A 08A8 0000 0022             		bclr	#0,obStatus(a0)
0001B350                            
0001B350                            loc_180F2:
0001B350 6000 FE44                  		bra.w	loc_17F38
0001B354                            ; ===========================================================================
0001B354                            
0001B354                            loc_180F6:
0001B354 4A28 003D                  		tst.b	$3D(a0)
0001B358 6600                       		bne.s	loc_18112
0001B35A 0C69 1EC8 0008             		cmpi.w	#$1EC8,obX(a1)
0001B360 6D00                       		blt.s	loc_18126
0001B362 0C69 00F0 000C             		cmpi.w	#$F0,obY(a1)
0001B368 6E00                       		bgt.s	loc_18126
0001B36A 117C 0032 003C             		move.b	#$32,$3C(a0)
0001B370                            
0001B370                            loc_18112:
0001B370 4A38 FE2D                          tst.b     (v_invinc).w
0001B374 6600                               bne.s   @boss_invinc
0001B376                            
0001B376 1038 F5C6                          move.b   (v_Saved_music),d0
0001B37A 6000 0000                          bra.w      @boss_play
0001B37E                            
0001B37E                            @boss_invinc:
0001B37E 103C 0000                          move.b #bgm_Invincible,d0
0001B382                            
0001B382                            @boss_play:
0001B382 4EB8 129A                          jsr PlaySound
0001B386 4238 F7AA                          clr.b    (f_lockscreen).w
0001B38A 08E8 0000 0022                     bset    #0,obStatus(a0)
0001B390 5428 0025                          addq.b    #2,ob2ndRout(a0)
0001B394                            
0001B394                            loc_18126:
0001B394 6000 FE00                  		bra.w	loc_17F38
0001B398                            ; ===========================================================================
0001B398                            
0001B398                            loc_1812A:
0001B398 4A28 003D                  		tst.b	$3D(a0)
0001B39C 6600                       		bne.s	loc_18136
0001B39E 5328 003C                  		subq.b	#1,$3C(a0)
0001B3A2 6600                       		bne.s	loc_1814E
0001B3A4                            
0001B3A4                            loc_18136:
0001B3A4 4228 003C                  		clr.b	$3C(a0)
0001B3A8 317C 0400 0010             		move.w	#$400,obVelX(a0)
0001B3AE 317C FFC0 0012             		move.w	#-$40,obVelY(a0)
0001B3B4 4228 003D                  		clr.b	$3D(a0)
0001B3B8 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001B3BC                            
0001B3BC                            loc_1814E:
0001B3BC 6000 FDD8                  		bra.w	loc_17F38
0001B3C0                            ; ===========================================================================
0001B3C0                            
0001B3C0                            loc_18152:
0001B3C0 0C78 2030 F72A             		cmpi.w	#$2030,(v_limitright2).w
0001B3C6 6400                       		bcc.s	loc_18160
0001B3C8 5478 F72A                  		addq.w	#2,(v_limitright2).w
0001B3CC 6000                       		bra.s	loc_18166
0001B3CE                            ; ===========================================================================
0001B3CE                            
0001B3CE                            loc_18160:
0001B3CE 4A28 0001                  		tst.b	obRender(a0)
0001B3D2 6A00                       		bpl.s	Obj77_ShipDel
0001B3D4                            
0001B3D4                            loc_18166:
0001B3D4 6000 FDC0                  		bra.w	loc_17F38
0001B3D8                            ; ===========================================================================
0001B3D8                            
0001B3D8                            Obj77_ShipDel:
0001B3D8 4EF9 0000 FACC             		jmp	(DeleteObject).l
0001B3DE                            ; ===========================================================================
0001B3DE                            
0001B3DE                            Obj77_FaceMain:	; Routine 4
0001B3DE 2268 0034                  		movea.l	$34(a0),a1
0001B3E2 1011                       		move.b	(a1),d0
0001B3E4 B010                       		cmp.b	(a0),d0
0001B3E6 6600                       		bne.s	Obj77_FaceDel
0001B3E8 7000                       		moveq	#0,d0
0001B3EA 1029 0025                  		move.b	ob2ndRout(a1),d0
0001B3EE 7201                       		moveq	#1,d1
0001B3F0 4A28 003D                  		tst.b	$3D(a0)
0001B3F4 6700                       		beq.s	loc_1818C
0001B3F6 720A                       		moveq	#$A,d1
0001B3F8 6000                       		bra.s	loc_181A0
0001B3FA                            ; ===========================================================================
0001B3FA                            
0001B3FA                            loc_1818C:
0001B3FA 4A29 0020                  		tst.b	obColType(a1)
0001B3FE 6600                       		bne.s	loc_18196
0001B400 7205                       		moveq	#5,d1
0001B402 6000                       		bra.s	loc_181A0
0001B404                            ; ===========================================================================
0001B404                            
0001B404                            loc_18196:
0001B404 0C38 0004 D024             		cmpi.b	#4,(v_player+obRoutine).w
0001B40A 6500                       		bcs.s	loc_181A0
0001B40C 7204                       		moveq	#4,d1
0001B40E                            
0001B40E                            loc_181A0:
0001B40E 1141 001C                  		move.b	d1,obAnim(a0)
0001B412 0C00 000E                  		cmpi.b	#$E,d0
0001B416 6600                       		bne.s	loc_181B6
0001B418 117C 0006 001C             		move.b	#6,obAnim(a0)
0001B41E 4A28 0001                  		tst.b	obRender(a0)
0001B422 6A00                       		bpl.s	Obj77_FaceDel
0001B424                            
0001B424                            loc_181B6:
0001B424 6000                       		bra.s	Obj77_Display
0001B426                            ; ===========================================================================
0001B426                            
0001B426                            Obj77_FaceDel:
0001B426 4EF9 0000 FACC             		jmp	(DeleteObject).l
0001B42C                            ; ===========================================================================
0001B42C                            
0001B42C                            Obj77_FlameMain:; Routine 6
0001B42C 117C 0007 001C             		move.b	#7,obAnim(a0)
0001B432 2268 0034                  		movea.l	$34(a0),a1
0001B436 1011                       		move.b	(a1),d0
0001B438 B010                       		cmp.b	(a0),d0
0001B43A 6600                       		bne.s	Obj77_FlameDel
0001B43C 0C29 000E 0025             		cmpi.b	#$E,ob2ndRout(a1)
0001B442 6600                       		bne.s	loc_181F0
0001B444 117C 000B 001C             		move.b	#$B,obAnim(a0)
0001B44A 4A28 0001                  		tst.b	1(a0)
0001B44E 6A00                       		bpl.s	Obj77_FlameDel
0001B450 6000                       		bra.s	loc_181F0
0001B452                            ; ===========================================================================
0001B452 4A69 0010                  		tst.w	obVelX(a1)
0001B456 6700                       		beq.s	loc_181F0
0001B458 117C 0008 001C             		move.b	#8,obAnim(a0)
0001B45E                            
0001B45E                            loc_181F0:
0001B45E 6000                       		bra.s	Obj77_Display
0001B460                            ; ===========================================================================
0001B460                            
0001B460                            Obj77_FlameDel:
0001B460 4EF9 0000 FACC             		jmp	(DeleteObject).l
0001B466                            ; ===========================================================================
0001B466                            
0001B466                            Obj77_Display:
0001B466 43F9 0001 AEF4             		lea	(Ani_Eggman).l,a1
0001B46C 4EB9 0000 CB4E             		jsr	(AnimateSprite).l
0001B472 2268 0034                  		movea.l	$34(a0),a1
0001B476 3169 0008 0008             		move.w	obX(a1),obX(a0)
0001B47C 3169 000C 000C             		move.w	obY(a1),obY(a0)
0001B482 1169 0022 0022             		move.b	obStatus(a1),obStatus(a0)
0001B488 7003                       		moveq	#3,d0
0001B48A C028 0022                  		and.b	obStatus(a0),d0
0001B48E 0228 00FC 0001             		andi.b	#$FC,obRender(a0)
0001B494 8128 0001                  		or.b	d0,obRender(a0)
0001B498 4EF9 0000 FA8C             		jmp	(DisplaySprite).l
0001B498 4EF9 0000 FA8C             		jmp	(DisplaySprite).l
0001B49E                            		include	"_incObj\73 Boss - Marble.asm"
0001B49E                            ; ---------------------------------------------------------------------------
0001B49E                            ; Object 73 - Eggman (MZ)
0001B49E                            ; ---------------------------------------------------------------------------
0001B49E                            
0001B49E                            BossMarble:
0001B49E 7000                       		moveq	#0,d0
0001B4A0 1028 0024                  		move.b	obRoutine(a0),d0
0001B4A4 323B 0000                  		move.w	Obj73_Index(pc,d0.w),d1
0001B4A8 4EFB 1000                  		jmp	Obj73_Index(pc,d1.w)
0001B4AC                            ; ===========================================================================
0001B4AC 0000                       Obj73_Index:	dc.w Obj73_Main-Obj73_Index
0001B4AE 0000                       		dc.w Obj73_ShipMain-Obj73_Index
0001B4B0 0000                       		dc.w Obj73_FaceMain-Obj73_Index
0001B4B2 0000                       		dc.w Obj73_FlameMain-Obj73_Index
0001B4B4 0000                       		dc.w Obj73_TubeMain-Obj73_Index
0001B4B6                            
0001B4B6 0200 0200                  Obj73_ObjData:	dc.b 2,	0, $02, $00		; routine number, animation, priority (high and low bytes)
0001B4BA 0401 0200                  		dc.b 4,	1, $02, $00
0001B4BE 0607 0200                  		dc.b 6,	7, $02, $00
0001B4C2 0800 0180                  		dc.b 8,	0, $01, $80
0001B4C6                            ; ===========================================================================
0001B4C6                            
0001B4C6                            Obj73_Main:	; Routine 0
0001B4C6 3168 0008 0030             		move.w	obX(a0),$30(a0)
0001B4CC 3168 000C 0038             		move.w	obY(a0),$38(a0)
0001B4D2 117C 000F 0020             		move.b	#$F,obColType(a0)
0001B4D8 117C 0008 0021             		move.b	#8,obColProp(a0) ; set number of hits to 8
0001B4DE 45FA FFD6                  		lea	Obj73_ObjData(pc),a2
0001B4E2 2248                       		movea.l	a0,a1
0001B4E4 7203                       		moveq	#3,d1
0001B4E6 6000                       		bra.s	Obj73_LoadBoss
0001B4E8                            ; ===========================================================================
0001B4E8                            
0001B4E8                            Obj73_Loop:
0001B4E8 4EB9 0000 FF2E             		jsr	(FindNextFreeObj).l
0001B4EE 6600                       		bne.s	Obj73_ShipMain
0001B4F0 12BC 0073                  		move.b	#id_BossMarble,0(a1)
0001B4F4 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001B4FA 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001B500                            
0001B500                            Obj73_LoadBoss:
0001B500 08A8 0000 0022             		bclr	#0,obStatus(a0)
0001B506 4229 0025                  		clr.b	ob2ndRout(a1)
0001B50A 135A 0024                  		move.b	(a2)+,obRoutine(a1)
0001B50E 135A 001C                  		move.b	(a2)+,obAnim(a1)
0001B512 335A 0018                  		move.w	(a2)+,obPriority(a1)
0001B516 237C 0001 AF44 0004        		move.l	#Map_Eggman,obMap(a1)
0001B51E 337C 0400 0002             		move.w	#$400,obGfx(a1)
0001B524 137C 0004 0001             		move.b	#4,obRender(a1)
0001B52A 137C 0020 0014             		move.b	#$20,obActWid(a1)
0001B530 2348 0034                  		move.l	a0,$34(a1)
0001B534 51C9 FFB2                  		dbf	d1,Obj73_Loop	; repeat sequence 3 more times
0001B538                            
0001B538                            Obj73_ShipMain:	; Routine 2
0001B538 7000                       		moveq	#0,d0
0001B53A 1028 0025                  		move.b	ob2ndRout(a0),d0
0001B53E 323B 0000                  		move.w	Obj73_ShipIndex(pc,d0.w),d1
0001B542 4EBB 1000                  		jsr	Obj73_ShipIndex(pc,d1.w)
0001B546 43F9 0001 AEF4             		lea	(Ani_Eggman).l,a1
0001B54C 4EB9 0000 CB4E             		jsr	(AnimateSprite).l
0001B552 7003                       		moveq	#3,d0
0001B554 C028 0022                  		and.b	obStatus(a0),d0
0001B558 0228 00FC 0001             		andi.b	#$FC,obRender(a0)
0001B55E 8128 0001                  		or.b	d0,obRender(a0)
0001B562 4EF9 0000 FA8C             		jmp	(DisplaySprite).l
0001B568                            ; ===========================================================================
0001B568 0000                       Obj73_ShipIndex:dc.w loc_18302-Obj73_ShipIndex
0001B56A 0000                       		dc.w loc_183AA-Obj73_ShipIndex
0001B56C 0000                       		dc.w loc_184F6-Obj73_ShipIndex
0001B56E 0000                       		dc.w loc_1852C-Obj73_ShipIndex
0001B570 0000                       		dc.w loc_18582-Obj73_ShipIndex
0001B572                            ; ===========================================================================
0001B572                            
0001B572                            loc_18302:
0001B572 1028 003F                  		move.b	$3F(a0),d0
0001B576 5428 003F                  		addq.b	#2,$3F(a0)
0001B57A 4EB9 0000 3A82             		jsr	(CalcSine).l
0001B580 E440                       		asr.w	#2,d0
0001B582 3140 0012                  		move.w	d0,obVelY(a0)
0001B586 317C FF00 0010             		move.w	#-$100,obVelX(a0)
0001B58C 6100 F552                  		bsr.w	BossMove
0001B590 0C68 1910 0030             		cmpi.w	#$1910,$30(a0)
0001B596 6600                       		bne.s	loc_18334
0001B598 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001B59C 4228 0028                  		clr.b	obSubtype(a0)
0001B5A0 42A8 0010                  		clr.l	obVelX(a0)
0001B5A4                            
0001B5A4                            loc_18334:
0001B5A4 4EB9 0000 3A5C             		jsr	(RandomNumber).l
0001B5AA 1140 0034                  		move.b	d0,$34(a0)
0001B5AE                            
0001B5AE                            loc_1833E:
0001B5AE 3168 0038 000C             		move.w	$38(a0),obY(a0)
0001B5B4 3168 0030 0008             		move.w	$30(a0),obX(a0)
0001B5BA 0C28 0004 0025             		cmpi.b	#4,ob2ndRout(a0)
0001B5C0 6400                       		bcc.s	locret_18390
0001B5C2 4A28 0022                  		tst.b	obStatus(a0)
0001B5C6 6B00                       		bmi.s	loc_18392
0001B5C8 4A28 0020                  		tst.b	obColType(a0)
0001B5CC 6600                       		bne.s	locret_18390
0001B5CE 4A28 003E                  		tst.b	$3E(a0)
0001B5D2 6600                       		bne.s	loc_18374
0001B5D4 117C 0028 003E             		move.b	#$28,$3E(a0)
0001B5E4                            
0001B5E4                            loc_18374:
0001B5E4 43F8 FB22                  		lea	(v_pal_dry+$22).w,a1
0001B5E8 7000                       		moveq	#0,d0
0001B5EA 4A51                       		tst.w	(a1)
0001B5EC 6600                       		bne.s	loc_18382
0001B5EE 303C 0EEE                  		move.w	#cWhite,d0
0001B5F2                            
0001B5F2                            loc_18382:
0001B5F2 3280                       		move.w	d0,(a1)
0001B5F4 5328 003E                  		subq.b	#1,$3E(a0)
0001B5F8 6600                       		bne.s	locret_18390
0001B5FA 117C 000F 0020             		move.b	#$F,obColType(a0)
0001B600                            
0001B600                            locret_18390:
0001B600 4E75                       		rts	
0001B602                            ; ===========================================================================
0001B602                            
0001B602                            loc_18392:
0001B602 7064                       		moveq	#100,d0
0001B604 6100 0000                  		bsr.w	AddPoints
0001B608 117C 0004 0025             		move.b	#4,ob2ndRout(a0)
0001B60E 317C 00B4 003C             		move.w	#$B4,$3C(a0)
0001B614 4268 0010                  		clr.w	obVelX(a0)
0001B618 4E75                       		rts	
0001B61A                            ; ===========================================================================
0001B61A                            
0001B61A                            loc_183AA:
0001B61A 7000                       		moveq	#0,d0
0001B61C 1028 0028                  		move.b	obSubtype(a0),d0
0001B620 303B 0000                  		move.w	off_183C2(pc,d0.w),d0
0001B624 4EBB 0000                  		jsr	off_183C2(pc,d0.w)
0001B628 0228 0006 0028             		andi.b	#6,obSubtype(a0)
0001B62E 6000 FF7E                  		bra.w	loc_1833E
0001B632                            ; ===========================================================================
0001B632 0000                       off_183C2:	dc.w loc_183CA-off_183C2
0001B634 0000                       		dc.w Obj73_MakeLava2-off_183C2
0001B636 0000                       		dc.w loc_183CA-off_183C2
0001B638 0000                       		dc.w Obj73_MakeLava2-off_183C2
0001B63A                            ; ===========================================================================
0001B63A                            
0001B63A                            loc_183CA:
0001B63A 4A68 0010                  		tst.w	obVelX(a0)
0001B63E 6600                       		bne.s	loc_183FE
0001B640 7040                       		moveq	#$40,d0
0001B642 0C68 022C 0038             		cmpi.w	#$22C,$38(a0)
0001B648 6700                       		beq.s	loc_183E6
0001B64A 6500                       		bcs.s	loc_183DE
0001B64C 4440                       		neg.w	d0
0001B64E                            
0001B64E                            loc_183DE:
0001B64E 3140 0012                  		move.w	d0,obVelY(a0)
0001B652 6000 F48C                  		bra.w	BossMove
0001B656                            ; ===========================================================================
0001B656                            
0001B656                            loc_183E6:
0001B656 317C 0200 0010             		move.w	#$200,obVelX(a0)
0001B65C 317C 0100 0012             		move.w	#$100,obVelY(a0)
0001B662 0828 0000 0022             		btst	#0,obStatus(a0)
0001B668 6600                       		bne.s	loc_183FE
0001B66A 4468 0010                  		neg.w	obVelX(a0)
0001B66E                            
0001B66E                            loc_183FE:
0001B66E 0C28 0018 003E             		cmpi.b	#$18,$3E(a0)
0001B674 6400                       		bcc.s	Obj73_MakeLava
0001B676 6100 F468                  		bsr.w	BossMove
0001B67A 5968 0012                  		subq.w	#4,obVelY(a0)
0001B67E                            
0001B67E                            Obj73_MakeLava:
0001B67E 5328 0034                  		subq.b	#1,$34(a0)
0001B682 6400                       		bcc.s	loc_1845C
0001B684 4EB9 0000 FF18             		jsr	(FindFreeObj).l
0001B68A 6600                       		bne.s	loc_1844A
0001B68C 12BC 0014                  		move.b	#id_LavaBall,0(a1) ; load lava ball object
0001B690 337C 02E8 000C             		move.w	#$2E8,obY(a1)	; set Y	position
0001B696 4EB9 0000 3A5C             		jsr	(RandomNumber).l
0001B69C 0280 0000 FFFF             		andi.l	#$FFFF,d0
0001B6A2 80FC 0050                  		divu.w	#$50,d0
0001B6A6 4840                       		swap	d0
0001B6A8 0640 1878                  		addi.w	#$1878,d0
0001B6AC 3340 0008                  		move.w	d0,obX(a1)
0001B6B0 EE09                       		lsr.b	#7,d1
0001B6B2 337C 00FF 0028             		move.w	#$FF,obSubtype(a1)
0001B6B8                            
0001B6B8                            loc_1844A:
0001B6B8 4EB9 0000 3A5C             		jsr	(RandomNumber).l
0001B6BE 0200 001F                  		andi.b	#$1F,d0
0001B6C2 0600 0040                  		addi.b	#$40,d0
0001B6C6 1140 0034                  		move.b	d0,$34(a0)
0001B6CA                            
0001B6CA                            loc_1845C:
0001B6CA 0828 0000 0022             		btst	#0,obStatus(a0)
0001B6D0 6700                       		beq.s	loc_18474
0001B6D2 0C68 1910 0030             		cmpi.w	#$1910,$30(a0)
0001B6D8 6D00                       		blt.s	locret_1849C
0001B6DA 317C 1910 0030             		move.w	#$1910,$30(a0)
0001B6E0 6000                       		bra.s	loc_18482
0001B6E2                            ; ===========================================================================
0001B6E2                            
0001B6E2                            loc_18474:
0001B6E2 0C68 1830 0030             		cmpi.w	#$1830,$30(a0)
0001B6E8 6E00                       		bgt.s	locret_1849C
0001B6EA 317C 1830 0030             		move.w	#$1830,$30(a0)
0001B6F0                            
0001B6F0                            loc_18482:
0001B6F0 4268 0010                  		clr.w	obVelX(a0)
0001B6F4 317C FE80 0012             		move.w	#-$180,obVelY(a0)
0001B6FA 0C68 022C 0038             		cmpi.w	#$22C,$38(a0)
0001B700 6400                       		bcc.s	loc_18498
0001B702 4468 0012                  		neg.w	obVelY(a0)
0001B706                            
0001B706                            loc_18498:
0001B706 5428 0028                  		addq.b	#2,obSubtype(a0)
0001B70A                            
0001B70A                            locret_1849C:
0001B70A 4E75                       		rts	
0001B70C                            ; ===========================================================================
0001B70C                            
0001B70C                            Obj73_MakeLava2:
0001B70C 6100 F3D2                  		bsr.w	BossMove
0001B710 3028 0038                  		move.w	$38(a0),d0
0001B714 0440 022C                  		subi.w	#$22C,d0
0001B718 6E00                       		bgt.s	locret_184F4
0001B71A 303C 022C                  		move.w	#$22C,d0
0001B71E 4A68 0012                  		tst.w	obVelY(a0)
0001B722 6700                       		beq.s	loc_184EA
0001B724 4268 0012                  		clr.w	obVelY(a0)
0001B728 317C 0050 003C             		move.w	#$50,$3C(a0)
0001B72E 0868 0000 0022             		bchg	#0,obStatus(a0)
0001B734 4EB9 0000 FF18             		jsr	(FindFreeObj).l
0001B73A 6600                       		bne.s	loc_184EA
0001B73C 3368 0030 0008             		move.w	$30(a0),obX(a1)
0001B742 3368 0038 000C             		move.w	$38(a0),obY(a1)
0001B748 0669 0018 000C             		addi.w	#$18,obY(a1)
0001B74E 12BC 0074                  		move.b	#id_BossFire,(a1)	; load lava ball object
0001B752 137C 0001 0028             		move.b	#1,obSubtype(a1)
0001B758                            
0001B758                            loc_184EA:
0001B758 5368 003C                  		subq.w	#1,$3C(a0)
0001B75C 6600                       		bne.s	locret_184F4
0001B75E 5428 0028                  		addq.b	#2,obSubtype(a0)
0001B762                            
0001B762                            locret_184F4:
0001B762 4E75                       		rts	
0001B764                            ; ===========================================================================
0001B764                            
0001B764                            loc_184F6:
0001B764 5368 003C                  		subq.w	#1,$3C(a0)
0001B768 6B00                       		bmi.s	loc_18500
0001B76A 6000 F332                  		bra.w	BossDefeated
0001B76E                            ; ===========================================================================
0001B76E                            
0001B76E                            loc_18500:
0001B76E 08E8 0000 0022             		bset	#0,obStatus(a0)
0001B774 08A8 0007 0022             		bclr	#7,obStatus(a0)
0001B77A 4268 0010                  		clr.w	obVelX(a0)
0001B77E 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001B782 317C FFDA 003C             		move.w	#-$26,$3C(a0)
0001B788 4A38 F7A7                  		tst.b	(v_bossstatus).w
0001B78C 6600                       		bne.s	locret_1852A
0001B78E 11FC 0001 F7A7             		move.b	#1,(v_bossstatus).w
0001B794 4268 0012                  		clr.w	obVelY(a0)
0001B798                            
0001B798                            locret_1852A:
0001B798 4E75                       		rts	
0001B79A                            ; ===========================================================================
0001B79A                            
0001B79A                            loc_1852C:
0001B79A 5268 003C                  		addq.w	#1,$3C(a0)
0001B79E 6700                       		beq.s	loc_18544
0001B7A0 6A00                       		bpl.s	loc_1854E
0001B7A2 0C68 0270 0038             		cmpi.w	#$270,$38(a0)
0001B7A8 6400                       		bcc.s	loc_18544
0001B7AA 0668 0018 0012             		addi.w	#$18,obVelY(a0)
0001B7B0 6000                       		bra.s	loc_1857A
0001B7B2                            ; ===========================================================================
0001B7B2                            
0001B7B2                            loc_18544:
0001B7B2 4268 0012                  		clr.w	obVelY(a0)
0001B7B6 4268 003C                  		clr.w	$3C(a0)
0001B7BA 6000                       		bra.s	loc_1857A
0001B7BC                            ; ===========================================================================
0001B7BC                            
0001B7BC                            loc_1854E:
0001B7BC 0C68 0030 003C             		cmpi.w	#$30,$3C(a0)
0001B7C2 6500                       		bcs.s	loc_18566
0001B7C4 6700                       		beq.s	loc_1856C
0001B7C6 0C68 0038 003C             		cmpi.w	#$38,$3C(a0)
0001B7CC 6500                       		bcs.s	loc_1857A
0001B7CE 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001B7D2 6000                       		bra.s	loc_1857A
0001B7D4                            ; ===========================================================================
0001B7D4                            
0001B7D4                            loc_18566:
0001B7D4 5168 0012                  		subq.w	#8,obVelY(a0)
0001B7D8 6000                       		bra.s	loc_1857A
0001B7DA                            ; ===========================================================================
0001B7DA                            
0001B7DA                            loc_1856C:
0001B7DA 4268 0012                  		clr.w	obVelY(a0)
0001B7E8                            
0001B7E8                            loc_1857A:
0001B7E8 6100 F2F6                  		bsr.w	BossMove
0001B7EC 6000 FDC0                  		bra.w	loc_1833E
0001B7F0                            ; ===========================================================================
0001B7F0                            
0001B7F0                            loc_18582:
0001B7F0 317C 0500 0010             		move.w	#$500,obVelX(a0)
0001B7F6 317C FFC0 0012             		move.w	#-$40,obVelY(a0)
0001B7FC 0C78 1960 F72A             		cmpi.w	#$1960,(v_limitright2).w
0001B802 6400                       		bcc.s	loc_1859C
0001B804 5478 F72A                  		addq.w	#2,(v_limitright2).w
0001B808 6000                       		bra.s	loc_185A2
0001B80A                            ; ===========================================================================
0001B80A                            
0001B80A                            loc_1859C:
0001B80A 4A28 0001                  		tst.b	obRender(a0)
0001B80E 6A00                       		bpl.s	Obj73_ShipDel
0001B810                            
0001B810                            loc_185A2:
0001B810 6100 F2CE                  		bsr.w	BossMove
0001B814 6000 FD98                  		bra.w	loc_1833E
0001B818                            ; ===========================================================================
0001B818                            
0001B818                            Obj73_ShipDel:
0001B818 4EF9 0000 FACC             		jmp	(DeleteObject).l
0001B81E                            ; ===========================================================================
0001B81E                            
0001B81E                            Obj73_FaceMain:	; Routine 4
0001B81E 7000                       		moveq	#0,d0
0001B820 7201                       		moveq	#1,d1
0001B822 2268 0034                  		movea.l	$34(a0),a1
0001B826 1029 0025                  		move.b	ob2ndRout(a1),d0
0001B82A 5540                       		subq.w	#2,d0
0001B82C 6600                       		bne.s	loc_185D2
0001B82E 0829 0001 0028             		btst	#1,obSubtype(a1)
0001B834 6700                       		beq.s	loc_185DA
0001B836 4A69 0012                  		tst.w	obVelY(a1)
0001B83A 6600                       		bne.s	loc_185DA
0001B83C 7204                       		moveq	#4,d1
0001B83E 6000                       		bra.s	loc_185EE
0001B840                            ; ===========================================================================
0001B840                            
0001B840                            loc_185D2:
0001B840 5500                       		subq.b	#2,d0
0001B842 6B00                       		bmi.s	loc_185DA
0001B844 720A                       		moveq	#$A,d1
0001B846 6000                       		bra.s	loc_185EE
0001B848                            ; ===========================================================================
0001B848                            
0001B848                            loc_185DA:
0001B848 4A29 0020                  		tst.b	obColType(a1)
0001B84C 6600                       		bne.s	loc_185E4
0001B84E 7205                       		moveq	#5,d1
0001B850 6000                       		bra.s	loc_185EE
0001B852                            ; ===========================================================================
0001B852                            
0001B852                            loc_185E4:
0001B852 0C38 0004 D024             		cmpi.b	#4,(v_player+obRoutine).w
0001B858 6500                       		bcs.s	loc_185EE
0001B85A 7204                       		moveq	#4,d1
0001B85C                            
0001B85C                            loc_185EE:
0001B85C 1141 001C                  		move.b	d1,obAnim(a0)
0001B860 5900                       		subq.b	#4,d0
0001B862 6600                       		bne.s	loc_18602
0001B864 117C 0006 001C             		move.b	#6,obAnim(a0)
0001B86A 4A28 0001                  		tst.b	obRender(a0)
0001B86E 6A00                       		bpl.s	Obj73_FaceDel
0001B870                            
0001B870                            loc_18602:
0001B870 6000                       		bra.s	Obj73_Display
0001B872                            ; ===========================================================================
0001B872                            
0001B872                            Obj73_FaceDel:
0001B872 4EF9 0000 FACC             		jmp	(DeleteObject).l
0001B878                            ; ===========================================================================
0001B878                            
0001B878                            Obj73_FlameMain:; Routine 6
0001B878 117C 0007 001C             		move.b	#7,obAnim(a0)
0001B87E 2268 0034                  		movea.l	$34(a0),a1
0001B882 0C29 0008 0025             		cmpi.b	#8,ob2ndRout(a1)
0001B888 6D00                       		blt.s	loc_1862A
0001B88A 117C 000B 001C             		move.b	#$B,obAnim(a0)
0001B890 4A28 0001                  		tst.b	obRender(a0)
0001B894 6A00                       		bpl.s	Obj73_FlameDel
0001B896 6000                       		bra.s	loc_18636
0001B898                            ; ===========================================================================
0001B898                            
0001B898                            loc_1862A:
0001B898 4A69 0010                  		tst.w	obVelX(a1)
0001B89C 6700                       		beq.s	loc_18636
0001B89E 117C 0008 001C             		move.b	#8,obAnim(a0)
0001B8A4                            
0001B8A4                            loc_18636:
0001B8A4 6000                       		bra.s	Obj73_Display
0001B8A6                            ; ===========================================================================
0001B8A6                            
0001B8A6                            Obj73_FlameDel:
0001B8A6 4EF9 0000 FACC             		jmp	(DeleteObject).l
0001B8AC                            ; ===========================================================================
0001B8AC                            
0001B8AC                            Obj73_Display:
0001B8AC 43F9 0001 AEF4             		lea	(Ani_Eggman).l,a1
0001B8B2 4EB9 0000 CB4E             		jsr	(AnimateSprite).l
0001B8B8                            
0001B8B8                            loc_1864A:
0001B8B8 2268 0034                  		movea.l	$34(a0),a1
0001B8BC 3169 0008 0008             		move.w	obX(a1),obX(a0)
0001B8C2 3169 000C 000C             		move.w	obY(a1),obY(a0)
0001B8C8 1169 0022 0022             		move.b	obStatus(a1),obStatus(a0)
0001B8CE 7003                       		moveq	#3,d0
0001B8D0 C028 0022                  		and.b	obStatus(a0),d0
0001B8D4 0228 00FC 0001             		andi.b	#$FC,obRender(a0)
0001B8DA 8128 0001                  		or.b	d0,obRender(a0)
0001B8DE 4EF9 0000 FA8C             		jmp	(DisplaySprite).l
0001B8E4                            ; ===========================================================================
0001B8E4                            
0001B8E4                            Obj73_TubeMain:	; Routine 8
0001B8E4 2268 0034                  		movea.l	$34(a0),a1
0001B8E8 0C29 0008 0025             		cmpi.b	#8,ob2ndRout(a1)
0001B8EE 6600                       		bne.s	loc_18688
0001B8F0 4A28 0001                  		tst.b	obRender(a0)
0001B8F4 6A00                       		bpl.s	Obj73_TubeDel
0001B8F6                            
0001B8F6                            loc_18688:
0001B8F6 217C 0001 B034 0004        		move.l	#Map_BossItems,obMap(a0)
0001B8FE 317C 246C 0002             		move.w	#$246C,obGfx(a0)
0001B904 117C 0004 001A             		move.b	#4,obFrame(a0)
0001B90A 60AC                       		bra.s	loc_1864A
0001B90C                            ; ===========================================================================
0001B90C                            
0001B90C                            Obj73_TubeDel:
0001B90C 4EF9 0000 FACC             		jmp	(DeleteObject).l
0001B90C 4EF9 0000 FACC             		jmp	(DeleteObject).l
0001B912                            		include	"_incObj\74 MZ Boss Fire.asm"
0001B912                            ; ---------------------------------------------------------------------------
0001B912                            ; Object 74 - lava that	Eggman drops (MZ)
0001B912                            ; ---------------------------------------------------------------------------
0001B912                            
0001B912                            BossFire:
0001B912 7000                       		moveq	#0,d0
0001B914 1028 0024                  		move.b	obRoutine(a0),d0
0001B918 303B 0000                  		move.w	Obj74_Index(pc,d0.w),d0
0001B91C 4EBB 0000                  		jsr	Obj74_Index(pc,d0.w)
0001B920 4EF9 0000 FA8C             		jmp	(DisplaySprite).l
0001B926                            ; ===========================================================================
0001B926 0000                       Obj74_Index:	dc.w Obj74_Main-Obj74_Index
0001B928 0000                       		dc.w Obj74_Action-Obj74_Index
0001B92A 0000                       		dc.w loc_18886-Obj74_Index
0001B92C 0000                       		dc.w Obj74_Delete3-Obj74_Index
0001B92E                            ; ===========================================================================
0001B92E                            
0001B92E                            Obj74_Main:	; Routine 0
0001B92E 117C 0008 0016             		move.b	#8,obHeight(a0)
0001B934 117C 0008 0017             		move.b	#8,obWidth(a0)
0001B93A 217C 0000 D7A0 0004        		move.l	#Map_Fire,obMap(a0)
0001B942 317C 0345 0002             		move.w	#$345,obGfx(a0)
0001B948 117C 0004 0001             		move.b	#4,obRender(a0)
0001B94E 317C 0280 0018             		move.w	#$280,obPriority(a0)
0001B954 3168 000C 0038             		move.w	obY(a0),$38(a0)
0001B95A 117C 0008 0014             		move.b	#8,obActWid(a0)
0001B960 5428 0024                  		addq.b	#2,obRoutine(a0)
0001B964 4A28 0028                  		tst.b	obSubtype(a0)
0001B968 6600                       		bne.s	loc_1870A
0001B96A 117C 008B 0020             		move.b	#$8B,obColType(a0)
0001B970 5428 0024                  		addq.b	#2,obRoutine(a0)
0001B974 6000 0000                  		bra.w	loc_18886
0001B978                            ; ===========================================================================
0001B978                            
0001B978                            loc_1870A:
0001B978 117C 001E 0029             		move.b	#$1E,$29(a0)
0001B988                            
0001B988                            Obj74_Action:	; Routine 2
0001B988 7000                       		moveq	#0,d0
0001B98A 1028 0025                  		move.b	ob2ndRout(a0),d0
0001B98E 303B 0000                  		move.w	Obj74_Index2(pc,d0.w),d0
0001B992 4EBB 0000                  		jsr	Obj74_Index2(pc,d0.w)
0001B996 4EB9 0000 FA78             		jsr	(SpeedToPos).l
0001B99C 43F9 0001 0950             		lea	(Ani_Fire).l,a1
0001B9A2 4EB9 0000 CB4E             		jsr	(AnimateSprite).l
0001B9A8 0C68 02E8 000C             		cmpi.w	#$2E8,obY(a0)
0001B9AE 6200                       		bhi.s	Obj74_Delete
0001B9B0 4E75                       		rts	
0001B9B2                            ; ===========================================================================
0001B9B2                            
0001B9B2                            Obj74_Delete:
0001B9B2 4EF9 0000 FACC             		jmp	(DeleteObject).l
0001B9B8                            ; ===========================================================================
0001B9B8 0000                       Obj74_Index2:	dc.w Obj74_Drop-Obj74_Index2
0001B9BA 0000                       		dc.w Obj74_MakeFlame-Obj74_Index2
0001B9BC 0000                       		dc.w Obj74_Duplicate-Obj74_Index2
0001B9BE 0000                       		dc.w Obj74_FallEdge-Obj74_Index2
0001B9C0                            ; ===========================================================================
0001B9C0                            
0001B9C0                            Obj74_Drop:
0001B9C0 08E8 0001 0022             		bset	#1,obStatus(a0)
0001B9C6 5328 0029                  		subq.b	#1,$29(a0)
0001B9CA 6A00                       		bpl.s	locret_18780
0001B9CC 117C 008B 0020             		move.b	#$8B,obColType(a0)
0001B9D2 4228 0028                  		clr.b	obSubtype(a0)
0001B9D6 0668 0018 0012             		addi.w	#$18,obVelY(a0)
0001B9DC 08A8 0001 0022             		bclr	#1,obStatus(a0)
0001B9E2 6100 C634                  		bsr.w	ObjFloorDist
0001B9E6 4A41                       		tst.w	d1
0001B9E8 6A00                       		bpl.s	locret_18780
0001B9EA 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001B9EE                            
0001B9EE                            locret_18780:
0001B9EE 4E75                       		rts	
0001B9F0                            ; ===========================================================================
0001B9F0                            
0001B9F0                            Obj74_MakeFlame:
0001B9F0 5568 000C                  		subq.w	#2,obY(a0)
0001B9F4 08E8 0007 0002             		bset	#7,obGfx(a0)
0001B9FA 317C 00A0 0010             		move.w	#$A0,obVelX(a0)
0001BA00 4268 0012                  		clr.w	obVelY(a0)
0001BA04 3168 0008 0030             		move.w	obX(a0),$30(a0)
0001BA0A 3168 000C 0038             		move.w	obY(a0),$38(a0)
0001BA10 117C 0003 0029             		move.b	#3,$29(a0)
0001BA16 4EB9 0000 FF2E             		jsr	(FindNextFreeObj).l
0001BA1C 6600                       		bne.s	loc_187CA
0001BA1E 47D1                       		lea	(a1),a3
0001BA20 45D0                       		lea	(a0),a2
0001BA22 7003                       		moveq	#3,d0
0001BA24                            
0001BA24                            Obj74_Loop:
0001BA24 26DA                       		move.l	(a2)+,(a3)+
0001BA26 26DA                       		move.l	(a2)+,(a3)+
0001BA28 26DA                       		move.l	(a2)+,(a3)+
0001BA2A 26DA                       		move.l	(a2)+,(a3)+
0001BA2C 51C8 FFF6                  		dbf	d0,Obj74_Loop
0001BA30                            
0001BA30 4469 0010                  		neg.w	obVelX(a1)
0001BA34 5429 0025                  		addq.b	#2,ob2ndRout(a1)
0001BA38                            
0001BA38                            loc_187CA:
0001BA38 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001BA3C 4E75                       		rts	
0001BA3E                            
0001BA3E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001BA3E                            
0001BA3E                            
0001BA3E                            Obj74_Duplicate2:
0001BA3E 4EB9 0000 FF2E             		jsr	(FindNextFreeObj).l
0001BA44 6600                       		bne.s	locret_187EE
0001BA46 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001BA4C 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001BA52 12BC 0074                  		move.b	#id_BossFire,(a1)
0001BA56 337C 0067 0028             		move.w	#$67,obSubtype(a1)
0001BA5C                            
0001BA5C                            locret_187EE:
0001BA5C 4E75                       		rts	
0001BA5E                            ; End of function Obj74_Duplicate2
0001BA5E                            
0001BA5E                            ; ===========================================================================
0001BA5E                            
0001BA5E                            Obj74_Duplicate:
0001BA5E 6100 C5B8                  		bsr.w	ObjFloorDist
0001BA62 4A41                       		tst.w	d1
0001BA64 6A00                       		bpl.s	loc_18826
0001BA66 3028 0008                  		move.w	obX(a0),d0
0001BA6A 0C40 1940                  		cmpi.w	#$1940,d0
0001BA6E 6E00                       		bgt.s	loc_1882C
0001BA70 3228 0030                  		move.w	$30(a0),d1
0001BA74 B240                       		cmp.w	d0,d1
0001BA76 6700                       		beq.s	loc_1881E
0001BA78 0240 0010                  		andi.w	#$10,d0
0001BA7C 0241 0010                  		andi.w	#$10,d1
0001BA80 B240                       		cmp.w	d0,d1
0001BA82 6700                       		beq.s	loc_1881E
0001BA84 61B8                       		bsr.s	Obj74_Duplicate2
0001BA86 3168 0008 0032             		move.w	obX(a0),$32(a0)
0001BA8C                            
0001BA8C                            loc_1881E:
0001BA8C 3168 0008 0030             		move.w	obX(a0),$30(a0)
0001BA92 4E75                       		rts	
0001BA94                            ; ===========================================================================
0001BA94                            
0001BA94                            loc_18826:
0001BA94 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001BA98 4E75                       		rts	
0001BA9A                            ; ===========================================================================
0001BA9A                            
0001BA9A                            loc_1882C:
0001BA9A 5428 0024                  		addq.b	#2,obRoutine(a0)
0001BA9E 4E75                       		rts	
0001BAA0                            ; ===========================================================================
0001BAA0                            
0001BAA0                            Obj74_FallEdge:
0001BAA0 08A8 0001 0022             		bclr	#1,obStatus(a0)
0001BAA6 0668 0024 0012             		addi.w	#$24,obVelY(a0)	; make flame fall
0001BAAC 3028 0008                  		move.w	obX(a0),d0
0001BAB0 9068 0032                  		sub.w	$32(a0),d0
0001BAB4 6A00                       		bpl.s	loc_1884A
0001BAB6 4440                       		neg.w	d0
0001BAB8                            
0001BAB8                            loc_1884A:
0001BAB8 0C40 0012                  		cmpi.w	#$12,d0
0001BABC 6600                       		bne.s	loc_18856
0001BABE 08A8 0007 0002             		bclr	#7,obGfx(a0)
0001BAC4                            
0001BAC4                            loc_18856:
0001BAC4 6100 C552                  		bsr.w	ObjFloorDist
0001BAC8 4A41                       		tst.w	d1
0001BACA 6A00                       		bpl.s	locret_1887E
0001BACC 5328 0029                  		subq.b	#1,$29(a0)
0001BAD0 6700                       		beq.s	Obj74_Delete2
0001BAD2 4268 0012                  		clr.w	obVelY(a0)
0001BAD6 3168 0032 0008             		move.w	$32(a0),obX(a0)
0001BADC 3168 0038 000C             		move.w	$38(a0),obY(a0)
0001BAE2 08E8 0007 0002             		bset	#7,obGfx(a0)
0001BAE8 5528 0025                  		subq.b	#2,ob2ndRout(a0)
0001BAEC                            
0001BAEC                            locret_1887E:
0001BAEC 4E75                       		rts	
0001BAEE                            ; ===========================================================================
0001BAEE                            
0001BAEE                            Obj74_Delete2:
0001BAEE 4EF9 0000 FACC             		jmp	(DeleteObject).l
0001BAF4                            ; ===========================================================================
0001BAF4                            
0001BAF4                            loc_18886:	; Routine 4
0001BAF4 08E8 0007 0002             		bset	#7,obGfx(a0)
0001BAFA 5328 0029                  		subq.b	#1,$29(a0)
0001BAFE 6600                       		bne.s	Obj74_Animate
0001BB00 117C 0001 001C             		move.b	#1,obAnim(a0)
0001BB06 5968 000C                  		subq.w	#4,obY(a0)
0001BB0A 4228 0020                  		clr.b	obColType(a0)
0001BB0E                            
0001BB0E                            Obj74_Animate:
0001BB0E 43F9 0001 0950             		lea	(Ani_Fire).l,a1
0001BB14 4EF9 0000 CB4E             		jmp	(AnimateSprite).l
0001BB1A                            ; ===========================================================================
0001BB1A                            
0001BB1A                            Obj74_Delete3:	; Routine 6
0001BB1A 4EF9 0000 FACC             		jmp	(DeleteObject).l
0001BB1A 4EF9 0000 FACC             		jmp	(DeleteObject).l
0001BB20                            
0001BB20                            	Obj7A_Delete:
0001BB20 4EF9 0000 FACC             		jmp	(DeleteObject).l
0001BB26                            
0001BB26                            		include	"_incObj\7A Boss - Star Light.asm"
0001BB26                            ; ---------------------------------------------------------------------------
0001BB26                            ; Object 7A - Eggman (SLZ)
0001BB26                            ; ---------------------------------------------------------------------------
0001BB26                            
0001BB26                            BossStarLight:
0001BB26 7000                       		moveq	#0,d0
0001BB28 1028 0024                  		move.b	obRoutine(a0),d0
0001BB2C 323B 0000                  		move.w	Obj7A_Index(pc,d0.w),d1
0001BB30 4EFB 1000                  		jmp	Obj7A_Index(pc,d1.w)
0001BB34                            ; ===========================================================================
0001BB34 0000                       Obj7A_Index:	dc.w Obj7A_Main-Obj7A_Index
0001BB36 0000                       		dc.w Obj7A_ShipMain-Obj7A_Index
0001BB38 0000                       		dc.w Obj7A_FaceMain-Obj7A_Index
0001BB3A 0000                       		dc.w Obj7A_FlameMain-Obj7A_Index
0001BB3C 0000                       		dc.w Obj7A_TubeMain-Obj7A_Index
0001BB3E                            
0001BB3E 0200 0200                  Obj7A_ObjData:	dc.b 2,	0, $02, $00		; routine number, animation, priority (high and low bytes)
0001BB42 0401 0200                  		dc.b 4,	1, $02, $00
0001BB46 0607 0200                  		dc.b 6,	7, $02, $00
0001BB4A 0800 0180                  		dc.b 8,	0, $01, $80
0001BB4E                            ; ===========================================================================
0001BB4E                            
0001BB4E                            Obj7A_Main:
0001BB4E 317C 2188 0008             		move.w	#$2188,obX(a0)
0001BB54 317C 0228 000C             		move.w	#$228,obY(a0)
0001BB5A 3168 0008 0030             		move.w	obX(a0),$30(a0)
0001BB60 3168 000C 0038             		move.w	obY(a0),$38(a0)
0001BB66 117C 000F 0020             		move.b	#$F,obColType(a0)
0001BB6C 117C 0008 0021             		move.b	#8,obColProp(a0) ; set number of hits to 8
0001BB72 45FA FFCA                  		lea	Obj7A_ObjData(pc),a2
0001BB76 2248                       		movea.l	a0,a1
0001BB78 7203                       		moveq	#3,d1
0001BB7A 6000                       		bra.s	Obj7A_LoadBoss
0001BB7C                            ; ===========================================================================
0001BB7C                            
0001BB7C                            Obj7A_Loop:
0001BB7C 4EB9 0000 FF2E             		jsr	(FindNextFreeObj).l
0001BB82 6600                       		bne.s	loc_1895C
0001BB84 12BC 007A                  		move.b	#id_BossStarLight,0(a1)
0001BB88 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001BB8E 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001BB94                            
0001BB94                            Obj7A_LoadBoss:
0001BB94 08A8 0000 0022             		bclr	#0,obStatus(a0)
0001BB9A 4229 0025                  		clr.b	ob2ndRout(a1)
0001BB9E 135A 0024                  		move.b	(a2)+,obRoutine(a1)
0001BBA2 135A 001C                  		move.b	(a2)+,obAnim(a1)
0001BBA6 135A 0018                  		move.b	(a2)+,obPriority(a1)
0001BBAA 237C 0001 AF44 0004        		move.l	#Map_Eggman,obMap(a1)
0001BBB2 337C 0400 0002             		move.w	#$400,obGfx(a1)
0001BBB8 137C 0004 0001             		move.b	#4,obRender(a1)
0001BBBE 137C 0020 0014             		move.b	#$20,obActWid(a1)
0001BBC4 2348 0034                  		move.l	a0,$34(a1)
0001BBC8 51C9 FFB2                  		dbf	d1,Obj7A_Loop	; repeat sequence 3 more times
0001BBCC                            
0001BBCC                            loc_1895C:
0001BBCC 43F8 D040                  		lea	(v_objspace+$40).w,a1
0001BBD0 45E8 002A                  		lea	$2A(a0),a2
0001BBD4 705E                       		moveq	#$5E,d0
0001BBD6 723E                       		moveq	#$3E,d1
0001BBD8                            
0001BBD8                            loc_18968:
0001BBD8 B011                       		cmp.b	(a1),d0
0001BBDA 6600                       		bne.s	loc_18974
0001BBDC 4A29 0028                  		tst.b	obSubtype(a1)
0001BBE0 6700                       		beq.s	loc_18974
0001BBE2 34C9                       		move.w	a1,(a2)+
0001BBE4                            
0001BBE4                            loc_18974:
0001BBE4 D2FC 0040                  		adda.w	#$40,a1
0001BBE8 51C9 FFEE                  		dbf	d1,loc_18968
0001BBEC                            
0001BBEC                            Obj7A_ShipMain:	; Routine 2
0001BBEC 7000                       		moveq	#0,d0
0001BBEE 1028 0025                  		move.b	ob2ndRout(a0),d0
0001BBF2 303B 0000                  		move.w	Obj7A_ShipIndex(pc,d0.w),d0
0001BBF6 4EBB 0000                  		jsr	Obj7A_ShipIndex(pc,d0.w)
0001BBFA 43F9 0001 AEF4             		lea	(Ani_Eggman).l,a1
0001BC00 4EB9 0000 CB4E             		jsr	(AnimateSprite).l
0001BC06 7003                       		moveq	#3,d0
0001BC08 C028 0022                  		and.b	obStatus(a0),d0
0001BC0C 0228 00FC 0001             		andi.b	#$FC,obRender(a0)
0001BC12 8128 0001                  		or.b	d0,obRender(a0)
0001BC16 4EF9 0000 FA8C             		jmp	(DisplaySprite).l
0001BC1C                            ; ===========================================================================
0001BC1C 0000                       Obj7A_ShipIndex:dc.w loc_189B8-Obj7A_ShipIndex
0001BC1E 0000                       		dc.w loc_18A5E-Obj7A_ShipIndex
0001BC20 0000                       		dc.w Obj7A_MakeBall-Obj7A_ShipIndex
0001BC22 0000                       		dc.w loc_18B48-Obj7A_ShipIndex
0001BC24 0000                       		dc.w loc_18B80-Obj7A_ShipIndex
0001BC26 0000                       		dc.w loc_18BC6-Obj7A_ShipIndex
0001BC28                            ; ===========================================================================
0001BC28                            
0001BC28                            loc_189B8:
0001BC28 317C FF00 0010             		move.w	#-$100,obVelX(a0)
0001BC2E 0C68 2120 0030             		cmpi.w	#$2120,$30(a0)
0001BC34 6400                       		bcc.s	loc_189CA
0001BC36 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001BC3A                            
0001BC3A                            loc_189CA:
0001BC3A 6100 EEA4                  		bsr.w	BossMove
0001BC3E 1028 003F                  		move.b	$3F(a0),d0
0001BC42 5428 003F                  		addq.b	#2,$3F(a0)
0001BC46 4EB9 0000 3A82             		jsr	(CalcSine).l
0001BC4C EC40                       		asr.w	#6,d0
0001BC4E D068 0038                  		add.w	$38(a0),d0
0001BC52 3140 000C                  		move.w	d0,obY(a0)
0001BC56 3168 0030 0008             		move.w	$30(a0),obX(a0)
0001BC5C 6000                       		bra.s	loc_189FE
0001BC5E                            ; ===========================================================================
0001BC5E                            
0001BC5E                            loc_189EE:
0001BC5E 6100 EE80                  		bsr.w	BossMove
0001BC62 3168 0038 000C             		move.w	$38(a0),obY(a0)
0001BC68 3168 0030 0008             		move.w	$30(a0),obX(a0)
0001BC6E                            
0001BC6E                            loc_189FE:
0001BC6E 0C28 0006 0025             		cmpi.b	#6,ob2ndRout(a0)
0001BC74 6400                       		bcc.s	locret_18A44
0001BC76 4A28 0022                  		tst.b	obStatus(a0)
0001BC7A 6B00                       		bmi.s	loc_18A46
0001BC7C 4A28 0020                  		tst.b	obColType(a0)
0001BC80 6600                       		bne.s	locret_18A44
0001BC82 4A28 003E                  		tst.b	$3E(a0)
0001BC86 6600                       		bne.s	loc_18A28
0001BC88 117C 0020 003E             		move.b	#$20,$3E(a0)
0001BC98                            
0001BC98                            loc_18A28:
0001BC98 43F8 FB22                  		lea	(v_pal_dry+$22).w,a1
0001BC9C 7000                       		moveq	#0,d0
0001BC9E 4A51                       		tst.w	(a1)
0001BCA0 6600                       		bne.s	loc_18A36
0001BCA2 303C 0EEE                  		move.w	#cWhite,d0
0001BCA6                            
0001BCA6                            loc_18A36:
0001BCA6 3280                       		move.w	d0,(a1)
0001BCA8 5328 003E                  		subq.b	#1,$3E(a0)
0001BCAC 6600                       		bne.s	locret_18A44
0001BCAE 117C 000F 0020             		move.b	#$F,obColType(a0)
0001BCB4                            
0001BCB4                            locret_18A44:
0001BCB4 4E75                       		rts	
0001BCB6                            ; ===========================================================================
0001BCB6                            
0001BCB6                            loc_18A46:
0001BCB6 7064                       		moveq	#100,d0
0001BCB8 6100 0000                  		bsr.w	AddPoints
0001BCBC 117C 0006 0025             		move.b	#6,ob2ndRout(a0)
0001BCC2 117C 0078 003C             		move.b	#$78,$3C(a0)
0001BCC8 4268 0010                  		clr.w	obVelX(a0)
0001BCCC 4E75                       		rts	
0001BCCE                            ; ===========================================================================
0001BCCE                            
0001BCCE                            loc_18A5E:
0001BCCE 3028 0030                  		move.w	$30(a0),d0
0001BCD2 317C 0200 0010             		move.w	#$200,obVelX(a0)
0001BCD8 0828 0000 0022             		btst	#0,obStatus(a0)
0001BCDE 6600                       		bne.s	loc_18A7C
0001BCE0 4468 0010                  		neg.w	obVelX(a0)
0001BCE4 0C40 2008                  		cmpi.w	#$2008,d0
0001BCE8 6E00                       		bgt.s	loc_18A88
0001BCEA 6000                       		bra.s	loc_18A82
0001BCEC                            ; ===========================================================================
0001BCEC                            
0001BCEC                            loc_18A7C:
0001BCEC 0C40 2138                  		cmpi.w	#$2138,d0
0001BCF0 6D00                       		blt.s	loc_18A88
0001BCF2                            
0001BCF2                            loc_18A82:
0001BCF2 0868 0000 0022             		bchg	#0,obStatus(a0)
0001BCF8                            
0001BCF8                            loc_18A88:
0001BCF8 3028 0008                  		move.w	8(a0),d0
0001BCFC 72FF                       		moveq	#-1,d1
0001BCFE 7402                       		moveq	#2,d2
0001BD00 45E8 002A                  		lea	$2A(a0),a2
0001BD04 7828                       		moveq	#$28,d4
0001BD06 4A68 0010                  		tst.w	obVelX(a0)
0001BD0A 6A00                       		bpl.s	loc_18A9E
0001BD0C 4444                       		neg.w	d4
0001BD0E                            
0001BD0E                            loc_18A9E:
0001BD0E 321A                       		move.w	(a2)+,d1
0001BD10 2641                       		movea.l	d1,a3
0001BD12 082B 0003 0022             		btst	#3,obStatus(a3)
0001BD18 6600                       		bne.s	loc_18AB4
0001BD1A 362B 0008                  		move.w	8(a3),d3
0001BD1E D644                       		add.w	d4,d3
0001BD20 9640                       		sub.w	d0,d3
0001BD22 6700                       		beq.s	loc_18AC0
0001BD24                            
0001BD24                            loc_18AB4:
0001BD24 51CA FFE8                  		dbf	d2,loc_18A9E
0001BD28                            
0001BD28 1142 0028                  		move.b	d2,obSubtype(a0)
0001BD2C 6000 FF0C                  		bra.w	loc_189CA
0001BD30                            ; ===========================================================================
0001BD30                            
0001BD30                            loc_18AC0:
0001BD30 1142 0028                  		move.b	d2,obSubtype(a0)
0001BD34 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001BD38 117C 0028 003C             		move.b	#$28,$3C(a0)
0001BD3E 6000 FEFA                  		bra.w	loc_189CA
0001BD42                            ; ===========================================================================
0001BD42                            
0001BD42                            Obj7A_MakeBall:
0001BD42 0C28 0028 003C             		cmpi.b	#$28,$3C(a0)
0001BD48 6600                       		bne.s	loc_18B36
0001BD4A 70FF                       		moveq	#-1,d0
0001BD4C 1028 0028                  		move.b	obSubtype(a0),d0
0001BD50 4880                       		ext.w	d0
0001BD52 6B00                       		bmi.s	loc_18B40
0001BD54 5540                       		subq.w	#2,d0
0001BD56 4440                       		neg.w	d0
0001BD58 D040                       		add.w	d0,d0
0001BD5A 43E8 002A                  		lea	$2A(a0),a1
0001BD5E 3031 0000                  		move.w	(a1,d0.w),d0
0001BD62 2440                       		movea.l	d0,a2
0001BD64 43F8 D040                  		lea	(v_objspace+$40).w,a1
0001BD68 723E                       		moveq	#$3E,d1
0001BD6A                            
0001BD6A                            loc_18AFA:
0001BD6A B0A9 003C                  		cmp.l	$3C(a1),d0
0001BD6E 6700                       		beq.s	loc_18B40
0001BD70 D2FC 0040                  		adda.w	#$40,a1
0001BD74 51C9 FFF4                  		dbf	d1,loc_18AFA
0001BD78                            
0001BD78 2F08                       		move.l	a0,-(sp)
0001BD7A 41D2                       		lea	(a2),a0
0001BD7C 4EB9 0000 FF2E             		jsr	(FindNextFreeObj).l
0001BD82 205F                       		movea.l	(sp)+,a0
0001BD84 6600                       		bne.s	loc_18B40
0001BD86 12BC 007B                  		move.b	#id_BossSpikeball,(a1) ; load spiked ball object
0001BD8A 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001BD90 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001BD96 0669 0020 000C             		addi.w	#$20,obY(a1)
0001BD9C 136A 0022 0022             		move.b	obStatus(a2),obStatus(a1)
0001BDA2 234A 003C                  		move.l	a2,$3C(a1)
0001BDA6                            
0001BDA6                            loc_18B36:
0001BDA6 5328 003C                  		subq.b	#1,$3C(a0)
0001BDAA 6700                       		beq.s	loc_18B40
0001BDAC 6000 FEC0                  		bra.w	loc_189FE
0001BDB0                            ; ===========================================================================
0001BDB0                            
0001BDB0                            loc_18B40:
0001BDB0 5528 0025                  		subq.b	#2,ob2ndRout(a0)
0001BDB4 6000 FE84                  		bra.w	loc_189CA
0001BDB8                            ; ===========================================================================
0001BDB8                            
0001BDB8                            loc_18B48:
0001BDB8 5328 003C                  		subq.b	#1,$3C(a0)
0001BDBC 6B00                       		bmi.s	loc_18B52
0001BDBE 6000 ECDE                  		bra.w	BossDefeated
0001BDC2                            ; ===========================================================================
0001BDC2                            
0001BDC2                            loc_18B52:
0001BDC2 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001BDC6 4268 0012                  		clr.w	obVelY(a0)
0001BDCA 08E8 0000 0022             		bset	#0,obStatus(a0)
0001BDD0 08A8 0007 0022             		bclr	#7,obStatus(a0)
0001BDD6 4268 0010                  		clr.w	obVelX(a0)
0001BDDA 117C 00E8 003C             		move.b	#-$18,$3C(a0)
0001BDE0 4A38 F7A7                  		tst.b	(v_bossstatus).w
0001BDE4 6600                       		bne.s	loc_18B7C
0001BDE6 11FC 0001 F7A7             		move.b	#1,(v_bossstatus).w
0001BDEC                            
0001BDEC                            loc_18B7C:
0001BDEC 6000 FE80                  		bra.w	loc_189FE
0001BDF0                            ; ===========================================================================
0001BDF0                            
0001BDF0                            loc_18B80:
0001BDF0 5228 003C                  		addq.b	#1,$3C(a0)
0001BDF4 6700                       		beq.s	loc_18B90
0001BDF6 6A00                       		bpl.s	loc_18B96
0001BDF8 0668 0018 0012             		addi.w	#$18,obVelY(a0)
0001BDFE 6000                       		bra.s	loc_18BC2
0001BE00                            ; ===========================================================================
0001BE00                            
0001BE00                            loc_18B90:
0001BE00 4268 0012                  		clr.w	obVelY(a0)
0001BE04 6000                       		bra.s	loc_18BC2
0001BE06                            ; ===========================================================================
0001BE06                            
0001BE06                            loc_18B96:
0001BE06 0C28 0020 003C             		cmpi.b	#$20,$3C(a0)
0001BE0C 6500                       		bcs.s	loc_18BAE
0001BE0E 6700                       		beq.s	loc_18BB4
0001BE10 0C28 002A 003C             		cmpi.b	#$2A,$3C(a0)
0001BE16 6500                       		bcs.s	loc_18BC2
0001BE18 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001BE1C 6000                       		bra.s	loc_18BC2
0001BE1E                            ; ===========================================================================
0001BE1E                            
0001BE1E                            loc_18BAE:
0001BE1E 5168 0012                  		subq.w	#8,obVelY(a0)
0001BE22 6000                       		bra.s	loc_18BC2
0001BE24                            ; ===========================================================================
0001BE24                            
0001BE24                            loc_18BB4:
0001BE24 4268 0012                          	clr.w    obVelY(a0)
0001BE28 4A38 FE2D                          	tst.b     (v_invinc).w
0001BE2C 6600                               	bne.s   @boss_invinc
0001BE2E                            
0001BE2E 1038 F5C6                          	move.b   (v_Saved_music),d0
0001BE32 6000 0000                          	bra.w      @boss_play
0001BE36                            
0001BE36                            	@boss_invinc:
0001BE36 103C 0000                          	move.b #bgm_Invincible,d0
0001BE3A                            
0001BE3A                            	@boss_play:
0001BE3A 4EB8 129A                          	jsr PlaySound
0001BE3E                            
0001BE3E                            loc_18BC2:
0001BE3E 6000 FE1E                  		bra.w	loc_189EE
0001BE42                            ; ===========================================================================
0001BE42                            
0001BE42                            loc_18BC6:
0001BE42 317C 0400 0010             		move.w	#$400,obVelX(a0)
0001BE48 317C FFC0 0012             		move.w	#-$40,obVelY(a0)
0001BE4E 0C78 2160 F72A             		cmpi.w	#$2160,(v_limitright2).w
0001BE54 6400                       		bcc.s	loc_18BE0
0001BE56 5478 F72A                  		addq.w	#2,(v_limitright2).w
0001BE5A 6000                       		bra.s	loc_18BE8
0001BE5C                            ; ===========================================================================
0001BE5C                            
0001BE5C                            loc_18BE0:
0001BE5C 4A28 0001                  		tst.b	obRender(a0)
0001BE60 6A00 FCBE                  		bpl.w	Obj7A_Delete
0001BE64                            
0001BE64                            loc_18BE8:
0001BE64 6100 EC7A                  		bsr.w	BossMove
0001BE68 6000 FDD0                  		bra.w	loc_189CA
0001BE6C                            ; ===========================================================================
0001BE6C                            
0001BE6C                            Obj7A_FaceMain:	; Routine 4
0001BE6C 7000                       		moveq	#0,d0
0001BE6E 7201                       		moveq	#1,d1
0001BE70 2268 0034                  		movea.l	$34(a0),a1
0001BE74 1029 0025                  		move.b	ob2ndRout(a1),d0
0001BE78 0C00 0006                  		cmpi.b	#6,d0
0001BE7C 6B00                       		bmi.s	loc_18C06
0001BE7E 720A                       		moveq	#$A,d1
0001BE80 6000                       		bra.s	loc_18C1A
0001BE82                            ; ===========================================================================
0001BE82                            
0001BE82                            loc_18C06:
0001BE82 4A29 0020                  		tst.b	obColType(a1)
0001BE86 6600                       		bne.s	loc_18C10
0001BE88 7205                       		moveq	#5,d1
0001BE8A 6000                       		bra.s	loc_18C1A
0001BE8C                            ; ===========================================================================
0001BE8C                            
0001BE8C                            loc_18C10:
0001BE8C 0C38 0004 D024             		cmpi.b	#4,(v_player+obRoutine).w
0001BE92 6500                       		bcs.s	loc_18C1A
0001BE94 7204                       		moveq	#4,d1
0001BE96                            
0001BE96                            loc_18C1A:
0001BE96 1141 001C                  		move.b	d1,obAnim(a0)
0001BE9A 0C00 000A                  		cmpi.b	#$A,d0
0001BE9E 6600                       		bne.s	loc_18C32
0001BEA0 117C 0006 001C             		move.b	#6,obAnim(a0)
0001BEA6 4A28 0001                  		tst.b	obRender(a0)
0001BEAA 6A00 FC74                  		bpl.w	Obj7A_Delete
0001BEAE                            
0001BEAE                            loc_18C32:
0001BEAE 6000                       		bra.s	loc_18C6C
0001BEB0                            ; ===========================================================================
0001BEB0                            
0001BEB0                            Obj7A_FlameMain:; Routine 6
0001BEB0 117C 0008 001C             		move.b	#8,obAnim(a0)
0001BEB6 2268 0034                  		movea.l	$34(a0),a1
0001BEBA 0C29 000A 0025             		cmpi.b	#$A,ob2ndRout(a1)
0001BEC0 6600                       		bne.s	loc_18C56
0001BEC2 4A28 0001                  		tst.b	obRender(a0)
0001BEC6 6A00 FC58                  		bpl.w	Obj7A_Delete
0001BECA 117C 000B 001C             		move.b	#$B,obAnim(a0)
0001BED0 6000                       		bra.s	loc_18C6C
0001BED2                            ; ===========================================================================
0001BED2                            
0001BED2                            loc_18C56:
0001BED2 0C29 0008 0025             		cmpi.b	#8,ob2ndRout(a1)
0001BED8 6E00                       		bgt.s	loc_18C6C
0001BEDA 0C29 0004 0025             		cmpi.b	#4,ob2ndRout(a1)
0001BEE0 6D00                       		blt.s	loc_18C6C
0001BEE2 117C 0007 001C             		move.b	#7,obAnim(a0)
0001BEE8                            
0001BEE8                            loc_18C6C:
0001BEE8 43F9 0001 AEF4             		lea	(Ani_Eggman).l,a1
0001BEEE 4EB9 0000 CB4E             		jsr	(AnimateSprite).l
0001BEF4                            
0001BEF4                            loc_18C78:
0001BEF4 2268 0034                  		movea.l	$34(a0),a1
0001BEF8 3169 0008 0008             		move.w	obX(a1),obX(a0)
0001BEFE 3169 000C 000C             		move.w	obY(a1),obY(a0)
0001BF04 1169 0022 0022             		move.b	obStatus(a1),obStatus(a0)
0001BF0A 7003                       		moveq	#3,d0
0001BF0C C028 0022                  		and.b	obStatus(a0),d0
0001BF10 0228 00FC 0001             		andi.b	#$FC,obRender(a0)
0001BF16 8128 0001                  		or.b	d0,obRender(a0)
0001BF1A 4EF9 0000 FA8C             		jmp	(DisplaySprite).l
0001BF20                            ; ===========================================================================
0001BF20                            
0001BF20                            Obj7A_TubeMain:	; Routine 8
0001BF20 2268 0034                  		movea.l	$34(a0),a1
0001BF24 0C29 000A 0025             		cmpi.b	#$A,ob2ndRout(a1)
0001BF2A 6600                       		bne.s	loc_18CB8
0001BF2C 4A28 0001                  		tst.b	obRender(a0)
0001BF30 6A00 FBEE                  		bpl.w	Obj7A_Delete
0001BF34                            
0001BF34                            loc_18CB8:
0001BF34 217C 0001 B034 0004        		move.l	#Map_BossItems,obMap(a0)
0001BF3C 317C 246C 0002             		move.w	#$246C,obGfx(a0)
0001BF42 117C 0003 001A             		move.b	#3,obFrame(a0)
0001BF48 60AA                       		bra.s	loc_18C78
0001BF48 60AA                       		bra.s	loc_18C78
0001BF4A                            		include	"_incObj\7B SLZ Boss Spikeball.asm"
0001BF4A                            ; ---------------------------------------------------------------------------
0001BF4A                            ; Object 7B - exploding	spikeys	that Eggman drops (SLZ)
0001BF4A                            ; ---------------------------------------------------------------------------
0001BF4A                            
0001BF4A                            BossSpikeball:
0001BF4A 7000                       		moveq	#0,d0
0001BF4C 1028 0024                  		move.b	obRoutine(a0),d0
0001BF50 303B 0000                  		move.w	Obj7B_Index(pc,d0.w),d0
0001BF54 4EBB 0000                  		jsr	Obj7B_Index(pc,d0.w)
0001BF58 3028 0030                  		move.w	$30(a0),d0
0001BF5C 0240 FF80                  		andi.w	#$FF80,d0
0001BF60 3238 F700                  		move.w	(v_screenposx).w,d1
0001BF64 0441 0080                  		subi.w	#$80,d1
0001BF68 0241 FF80                  		andi.w	#$FF80,d1
0001BF6C 9041                       		sub.w	d1,d0
0001BF6E 6B00 FBB0                  		bmi.w	Obj7A_Delete
0001BF72 0C40 0280                  		cmpi.w	#$280,d0
0001BF76 6200 FBA8                  		bhi.w	Obj7A_Delete
0001BF7A 4EF9 0000 FA8C             		jmp	(DisplaySprite).l
0001BF80                            ; ===========================================================================
0001BF80 0000                       Obj7B_Index:	dc.w Obj7B_Main-Obj7B_Index
0001BF82 0000                       		dc.w Obj7B_Fall-Obj7B_Index
0001BF84 0000                       		dc.w loc_18DC6-Obj7B_Index
0001BF86 0000                       		dc.w loc_18EAA-Obj7B_Index
0001BF88 0000                       		dc.w Obj7B_Explode-Obj7B_Index
0001BF8A 0000                       		dc.w Obj7B_MoveFrag-Obj7B_Index
0001BF8C                            ; ===========================================================================
0001BF8C                            
0001BF8C                            Obj7B_Main:	; Routine 0
0001BF8C 217C 0001 3F22 0004        		move.l	#Map_SSawBall,obMap(a0)
0001BF94 317C 0518 0002             		move.w	#$518,obGfx(a0)
0001BF9A 117C 0001 001A             		move.b	#1,obFrame(a0)
0001BFA0 0028 0004 0001             		ori.b	#4,obRender(a0)
0001BFA6 317C 0200 0018             		move.w	#$200,obPriority(a0)
0001BFAC 117C 008B 0020             		move.b	#$8B,obColType(a0)
0001BFB2 117C 000C 0014             		move.b	#$C,obActWid(a0)
0001BFB8 2268 003C                  		movea.l	$3C(a0),a1
0001BFBC 3169 0008 0030             		move.w	obX(a1),$30(a0)
0001BFC2 3169 000C 0034             		move.w	obY(a1),$34(a0)
0001BFC8 08E8 0000 0022             		bset	#0,obStatus(a0)
0001BFCE 3028 0008                  		move.w	obX(a0),d0
0001BFD2 B069 0008                  		cmp.w	obX(a1),d0
0001BFD6 6E00                       		bgt.s	loc_18D68
0001BFD8 08A8 0000 0022             		bclr	#0,obStatus(a0)
0001BFDE 117C 0002 003A             		move.b	#2,$3A(a0)
0001BFE4                            
0001BFE4                            loc_18D68:
0001BFE4 5428 0024                  		addq.b	#2,obRoutine(a0)
0001BFE8                            
0001BFE8                            Obj7B_Fall:	; Routine 2
0001BFE8 4EB9 0000 FA40             		jsr	(ObjectFall).l
0001BFEE 2268 003C                  		movea.l	$3C(a0),a1
0001BFF2 45F9 0000 0000             		lea	(word_19018).l,a2
0001BFF8 7000                       		moveq	#0,d0
0001BFFA 1029 001A                  		move.b	obFrame(a1),d0
0001BFFE 3228 0008                  		move.w	8(a0),d1
0001C002 9268 0030                  		sub.w	$30(a0),d1
0001C006 6400                       		bcc.s	loc_18D8E
0001C008 5440                       		addq.w	#2,d0
0001C00A                            
0001C00A                            loc_18D8E:
0001C00A D040                       		add.w	d0,d0
0001C00C 3228 0034                  		move.w	$34(a0),d1
0001C010 D272 0000                  		add.w	(a2,d0.w),d1
0001C014 B268 000C                  		cmp.w	obY(a0),d1
0001C018 6E00                       		bgt.s	locret_18DC4
0001C01A 2268 003C                  		movea.l	$3C(a0),a1
0001C01E 7202                       		moveq	#2,d1
0001C020 0828 0000 0022             		btst	#0,obStatus(a0)
0001C026 6700                       		beq.s	loc_18DAE
0001C028 7200                       		moveq	#0,d1
0001C02A                            
0001C02A                            loc_18DAE:
0001C02A 317C 00F0 0028             		move.w	#$F0,obSubtype(a0)
0001C030 117C 000A 001F             		move.b	#10,obDelayAni(a0)	; set frame duration to	10 frames
0001C036 1168 001F 001E             		move.b	obDelayAni(a0),obTimeFrame(a0)
0001C03C 6000 0000                  		bra.w	loc_18FA2
0001C040                            ; ===========================================================================
0001C040                            
0001C040                            locret_18DC4:
0001C040 4E75                       		rts	
0001C042                            ; ===========================================================================
0001C042                            
0001C042                            loc_18DC6:	; Routine 4
0001C042 2268 003C                  		movea.l	$3C(a0),a1
0001C046 7000                       		moveq	#0,d0
0001C048 1028 003A                  		move.b	$3A(a0),d0
0001C04C 9029 003A                  		sub.b	$3A(a1),d0
0001C050 6700                       		beq.s	loc_18E2A
0001C052 6400                       		bcc.s	loc_18DDA
0001C054 4400                       		neg.b	d0
0001C056                            
0001C056                            loc_18DDA:
0001C056 323C F7E8                  		move.w	#-$818,d1
0001C05A 343C FEEC                  		move.w	#-$114,d2
0001C05E 0C00 0001                  		cmpi.b	#1,d0
0001C062 6700                       		beq.s	loc_18E00
0001C064 323C F6A0                  		move.w	#-$960,d1
0001C068 343C FF0C                  		move.w	#-$F4,d2
0001C06C 0C69 09C0 0038             		cmpi.w	#$9C0,$38(a1)
0001C072 6D00                       		blt.s	loc_18E00
0001C074 323C F5E0                  		move.w	#-$A20,d1
0001C078 343C FF80                  		move.w	#-$80,d2
0001C07C                            
0001C07C                            loc_18E00:
0001C07C 3141 0012                  		move.w	d1,obVelY(a0)
0001C080 3142 0010                  		move.w	d2,obVelX(a0)
0001C084 3028 0008                  		move.w	obX(a0),d0
0001C088 9068 0030                  		sub.w	$30(a0),d0
0001C08C 6400                       		bcc.s	loc_18E16
0001C08E 4468 0010                  		neg.w	obVelX(a0)
0001C092                            
0001C092                            loc_18E16:
0001C092 117C 0001 001A             		move.b	#1,obFrame(a0)
0001C098 317C 0020 0028             		move.w	#$20,obSubtype(a0)
0001C09E 5428 0024                  		addq.b	#2,obRoutine(a0)
0001C0A2 6000 0000                  		bra.w	loc_18EAA
0001C0A6                            ; ===========================================================================
0001C0A6                            
0001C0A6                            loc_18E2A:
0001C0A6 45F9 0000 0000             		lea	(word_19018).l,a2
0001C0AC 7000                       		moveq	#0,d0
0001C0AE 1029 001A                  		move.b	obFrame(a1),d0
0001C0B2 343C 0028                  		move.w	#$28,d2
0001C0B6 3228 0008                  		move.w	obX(a0),d1
0001C0BA 9268 0030                  		sub.w	$30(a0),d1
0001C0BE 6400                       		bcc.s	loc_18E48
0001C0C0 4442                       		neg.w	d2
0001C0C2 5440                       		addq.w	#2,d0
0001C0C4                            
0001C0C4                            loc_18E48:
0001C0C4 D040                       		add.w	d0,d0
0001C0C6 3228 0034                  		move.w	$34(a0),d1
0001C0CA D272 0000                  		add.w	(a2,d0.w),d1
0001C0CE 3141 000C                  		move.w	d1,obY(a0)
0001C0D2 D468 0030                  		add.w	$30(a0),d2
0001C0D6 3142 0008                  		move.w	d2,obX(a0)
0001C0DA 4268 000E                  		clr.w	obY+2(a0)
0001C0DE 4268 000A                  		clr.w	obX+2(a0)
0001C0E2 5368 0028                  		subq.w	#1,obSubtype(a0)
0001C0E6 6600                       		bne.s	loc_18E7A
0001C0E8 317C 0020 0028             		move.w	#$20,obSubtype(a0)
0001C0EE 117C 0008 0024             		move.b	#8,obRoutine(a0)
0001C0F4 4E75                       		rts	
0001C0F6                            ; ===========================================================================
0001C0F6                            
0001C0F6                            loc_18E7A:
0001C0F6 0C68 0078 0028             		cmpi.w	#$78,obSubtype(a0)
0001C0FC 6600                       		bne.s	loc_18E88
0001C0FE 117C 0005 001F             		move.b	#5,obDelayAni(a0)
0001C104                            
0001C104                            loc_18E88:
0001C104 0C68 003C 0028             		cmpi.w	#$3C,obSubtype(a0)
0001C10A 6600                       		bne.s	loc_18E96
0001C10C 117C 0002 001F             		move.b	#2,obDelayAni(a0)
0001C112                            
0001C112                            loc_18E96:
0001C112 5328 001E                  		subq.b	#1,obTimeFrame(a0)
0001C116 6E00                       		bgt.s	locret_18EA8
0001C118 0868 0000 001A             		bchg	#0,obFrame(a0)
0001C11E 1168 001F 001E             		move.b	obDelayAni(a0),obTimeFrame(a0)
0001C124                            
0001C124                            locret_18EA8:
0001C124 4E75                       		rts	
0001C126                            ; ===========================================================================
0001C126                            
0001C126                            loc_18EAA:	; Routine 6
0001C126 43F8 D040                  		lea	(v_objspace+$40).w,a1
0001C12A 707A                       		moveq	#id_BossStarLight,d0
0001C12C 7240                       		moveq	#$40,d1
0001C12E 743E                       		moveq	#$3E,d2
0001C130                            
0001C130                            loc_18EB4:
0001C130 B011                       		cmp.b	(a1),d0
0001C132 6700                       		beq.s	loc_18EC0
0001C134 D2C1                       		adda.w	d1,a1
0001C136 51CA FFF8                  		dbf	d2,loc_18EB4
0001C13A                            
0001C13A 6000                       		bra.s	loc_18F38
0001C13C                            ; ===========================================================================
0001C13C                            
0001C13C                            loc_18EC0:
0001C13C 3029 0008                  		move.w	obX(a1),d0
0001C140 3229 000C                  		move.w	obY(a1),d1
0001C144 3428 0008                  		move.w	obX(a0),d2
0001C148 3628 000C                  		move.w	obY(a0),d3
0001C14C 45FA 0000                  		lea	byte_19022(pc),a2
0001C150 47FA 0000                  		lea	byte_19026(pc),a3
0001C154 181A                       		move.b	(a2)+,d4
0001C156 4884                       		ext.w	d4
0001C158 D044                       		add.w	d4,d0
0001C15A 181B                       		move.b	(a3)+,d4
0001C15C 4884                       		ext.w	d4
0001C15E D444                       		add.w	d4,d2
0001C160 B440                       		cmp.w	d0,d2
0001C162 6500                       		bcs.s	loc_18F38
0001C164 181A                       		move.b	(a2)+,d4
0001C166 4884                       		ext.w	d4
0001C168 D044                       		add.w	d4,d0
0001C16A 181B                       		move.b	(a3)+,d4
0001C16C 4884                       		ext.w	d4
0001C16E D444                       		add.w	d4,d2
0001C170 B042                       		cmp.w	d2,d0
0001C172 6500                       		bcs.s	loc_18F38
0001C174 181A                       		move.b	(a2)+,d4
0001C176 4884                       		ext.w	d4
0001C178 D244                       		add.w	d4,d1
0001C17A 181B                       		move.b	(a3)+,d4
0001C17C 4884                       		ext.w	d4
0001C17E D644                       		add.w	d4,d3
0001C180 B641                       		cmp.w	d1,d3
0001C182 6500                       		bcs.s	loc_18F38
0001C184 181A                       		move.b	(a2)+,d4
0001C186 4884                       		ext.w	d4
0001C188 D244                       		add.w	d4,d1
0001C18A 181B                       		move.b	(a3)+,d4
0001C18C 4884                       		ext.w	d4
0001C18E D644                       		add.w	d4,d3
0001C190 B243                       		cmp.w	d3,d1
0001C192 6500                       		bcs.s	loc_18F38
0001C194 5428 0024                  		addq.b	#2,obRoutine(a0)
0001C198 4268 0028                  		clr.w	obSubtype(a0)
0001C19C 4229 0020                  		clr.b	obColType(a1)
0001C1A0 5329 0021                  		subq.b	#1,obColProp(a1)
0001C1A4 6600                       		bne.s	loc_18F38
0001C1A6 08E9 0007 0022             		bset	#7,obStatus(a1)
0001C1AC 4268 0010                  		clr.w	obVelX(a0)
0001C1B0 4268 0012                  		clr.w	obVelY(a0)
0001C1B4                            
0001C1B4                            loc_18F38:
0001C1B4 4A68 0012                  		tst.w	obVelY(a0)
0001C1B8 6A00                       		bpl.s	loc_18F5C
0001C1BA 4EB9 0000 FA40             		jsr	(ObjectFall).l
0001C1C0 3028 0034                  		move.w	$34(a0),d0
0001C1C4 0440 002F                  		subi.w	#$2F,d0
0001C1C8 B068 000C                  		cmp.w	obY(a0),d0
0001C1CC 6E00                       		bgt.s	loc_18F58
0001C1CE 4EB9 0000 FA40             		jsr	(ObjectFall).l
0001C1D4                            
0001C1D4                            loc_18F58:
0001C1D4 6000 FF20                  		bra.w	loc_18E7A
0001C1D8                            ; ===========================================================================
0001C1D8                            
0001C1D8                            loc_18F5C:
0001C1D8 4EB9 0000 FA40             		jsr	(ObjectFall).l
0001C1DE 2268 003C                  		movea.l	$3C(a0),a1
0001C1E2 45F9 0000 0000             		lea	(word_19018).l,a2
0001C1E8 7000                       		moveq	#0,d0
0001C1EA 1029 001A                  		move.b	obFrame(a1),d0
0001C1EE 3228 0008                  		move.w	obX(a0),d1
0001C1F2 9268 0030                  		sub.w	$30(a0),d1
0001C1F6 6400                       		bcc.s	loc_18F7E
0001C1F8 5440                       		addq.w	#2,d0
0001C1FA                            
0001C1FA                            loc_18F7E:
0001C1FA D040                       		add.w	d0,d0
0001C1FC 3228 0034                  		move.w	$34(a0),d1
0001C200 D272 0000                  		add.w	(a2,d0.w),d1
0001C204 B268 000C                  		cmp.w	obY(a0),d1
0001C208 6ECA                       		bgt.s	loc_18F58
0001C20A 2268 003C                  		movea.l	$3C(a0),a1
0001C20E 7202                       		moveq	#2,d1
0001C210 4A68 0010                  		tst.w	obVelX(a0)
0001C214 6B00                       		bmi.s	loc_18F9C
0001C216 7200                       		moveq	#0,d1
0001C218                            
0001C218                            loc_18F9C:
0001C218 317C 0000 0028             		move.w	#0,obSubtype(a0)
0001C21E                            
0001C21E                            loc_18FA2:
0001C21E 1341 003A                  		move.b	d1,$3A(a1)
0001C222 1141 003A                  		move.b	d1,$3A(a0)
0001C226 B229 001A                  		cmp.b	obFrame(a1),d1
0001C22A 6700                       		beq.s	loc_19008
0001C22C 08A9 0003 0022             		bclr	#3,obStatus(a1)
0001C232 6700                       		beq.s	loc_19008
0001C234 4229 0025                  		clr.b	ob2ndRout(a1)
0001C238 137C 0002 0024             		move.b	#2,obRoutine(a1)
0001C23E 45F8 D000                  		lea	(v_objspace).w,a2
0001C242 3568 0012 0012             		move.w	obVelY(a0),obVelY(a2)
0001C248 446A 0012                  		neg.w	obVelY(a2)
0001C24C 0C29 0001 001A             		cmpi.b	#1,obFrame(a1)
0001C252 6600                       		bne.s	loc_18FDC
0001C254 E0EA 0012                  		asr	obVelY(a2)
0001C258                            
0001C258                            loc_18FDC:
0001C258 08EA 0001 0022             		bset	#1,obStatus(a2)
0001C25E 08AA 0003 0022             		bclr	#3,obStatus(a2)
0001C264 422A 003C                  		clr.b	$3C(a2)
0001C268 2F08                       		move.l	a0,-(sp)
0001C26A 41D2                       		lea	(a2),a0
0001C26C 4EB9 0001 6108             		jsr	(Sonic_ChkRoll).l
0001C272 205F                       		movea.l	(sp)+,a0
0001C274 157C 0002 0024             		move.b	#2,obRoutine(a2)
0001C284                            
0001C284                            loc_19008:
0001C284 4268 0010                  		clr.w	obVelX(a0)
0001C288 4268 0012                  		clr.w	obVelY(a0)
0001C28C 5428 0024                  		addq.b	#2,obRoutine(a0)
0001C290 6000 FE64                  		bra.w	loc_18E7A
0001C294                            ; ===========================================================================
0001C294 FFF8 FFE4 FFD1 FFE4 FFF8   word_19018:	dc.w -8, -$1C, -$2F, -$1C, -8
0001C29E                            		even
0001C29E E830 E830                  byte_19022:	dc.b $E8, $30, $E8, $30
0001C2A2                            		even
0001C2A2 08F0 08F0                  byte_19026:	dc.b 8,	$F0, 8,	$F0
0001C2A6                            		even
0001C2A6                            ; ===========================================================================
0001C2A6                            
0001C2A6                            Obj7B_Explode:	; Routine 8
0001C2A6 10BC 003F                  		move.b	#id_ExplosionBomb,(a0)
0001C2AA 4228 0024                  		clr.b	obRoutine(a0)
0001C2AE 0C68 0020 0028             		cmpi.w	#$20,obSubtype(a0)
0001C2B4 6700                       		beq.s	Obj7B_MakeFrag
0001C2B6 4E75                       		rts	
0001C2B8                            ; ===========================================================================
0001C2B8                            
0001C2B8                            Obj7B_MakeFrag:
0001C2B8 3168 0034 000C             		move.w	$34(a0),obY(a0)
0001C2BE 7203                       		moveq	#3,d1
0001C2C0 45FA 0000                  		lea	Obj7B_FragSpeed(pc),a2
0001C2C4                            
0001C2C4                            Obj7B_Loop:
0001C2C4 4EB9 0000 FF18             		jsr	(FindFreeObj).l
0001C2CA 6600                       		bne.s	loc_1909A
0001C2CC 12BC 007B                  		move.b	#id_BossSpikeball,(a1) ; load shrapnel object
0001C2D0 137C 000A 0024             		move.b	#$A,obRoutine(a1)
0001C2D6 237C 0000 0000 0004        		move.l	#Map_BSBall,obMap(a1)
0001C2DE 337C 0180 0018             		move.w	#$180,obPriority(a1)
0001C2E4 337C 0518 0002             		move.w	#$518,obGfx(a1)
0001C2EA 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001C2F0 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001C2F6 335A 0010                  		move.w	(a2)+,obVelX(a1)
0001C2FA 335A 0012                  		move.w	(a2)+,obVelY(a1)
0001C2FE 137C 0098 0020             		move.b	#$98,obColType(a1)
0001C304 0029 0004 0001             		ori.b	#4,obRender(a1)
0001C30A 08E9 0007 0001             		bset	#7,obRender(a1)
0001C310 137C 000C 0014             		move.b	#$C,obActWid(a1)
0001C316                            
0001C316                            loc_1909A:
0001C316 51C9 FFAC                  		dbf	d1,Obj7B_Loop	; repeat sequence 3 more times
0001C31A                            
0001C31A 4E75                       		rts	
0001C31C                            ; ===========================================================================
0001C31C FF00 FCC0                  Obj7B_FragSpeed:dc.w -$100, -$340	; horizontal, vertical
0001C320 FF60 FDC0                  		dc.w -$A0, -$240
0001C324 0100 FCC0                  		dc.w $100, -$340
0001C328 00A0 FDC0                  		dc.w $A0, -$240
0001C32C                            ; ===========================================================================
0001C32C                            
0001C32C                            Obj7B_MoveFrag:	; Routine $A
0001C32C 4EB9 0000 FA78             		jsr	(SpeedToPos).l
0001C332 3168 0008 0030             		move.w	obX(a0),$30(a0)
0001C338 3168 000C 0034             		move.w	obY(a0),$34(a0)
0001C33E 0668 0018 0012             		addi.w	#$18,obVelY(a0)
0001C344 7004                       		moveq	#4,d0
0001C346 C078 FE0E                  		and.w	(v_vbla_word).w,d0
0001C34A E448                       		lsr.w	#2,d0
0001C34C 1140 001A                  		move.b	d0,obFrame(a0)
0001C350 4A28 0001                  		tst.b	1(a0)
0001C354 6A00 F7CA                  		bpl.w	Obj7A_Delete
0001C358 4E75                       		rts	
0001C358 4E75                       		rts	
0001C35A                            Map_BSBall:	include	"_maps\SLZ Boss Spikeball.asm"
0001C35A                            ; ---------------------------------------------------------------------------
0001C35A                            ; Sprite mappings - exploding spikeys that the SLZ boss	drops
0001C35A                            ; ---------------------------------------------------------------------------
0001C35A                            Map_BSBall_internal:
0001C35A 0000                       		dc.w @fireball1-Map_BSBall_internal
0001C35C 0000                       		dc.w @fireball2-Map_BSBall_internal
0001C35E 01                         @fireball1:	dc.b 1
0001C35F FC00 0027 FC               		dc.b $FC, 0, 0,	$27, $FC
0001C364 01                         @fireball2:	dc.b 1
0001C365 FC00 0028 FC               		dc.b $FC, 0, 0,	$28, $FC
0001C36A                            		even
0001C36A                            		even
0001C36A                            		include	"_incObj\75 Boss - Spring Yard.asm"
0001C36A                            ; ---------------------------------------------------------------------------
0001C36A                            ; Object 75 - Eggman (SYZ)
0001C36A                            ; ---------------------------------------------------------------------------
0001C36A                            
0001C36A                            BossSpringYard:
0001C36A 7000                       		moveq	#0,d0
0001C36C 1028 0024                  		move.b	obRoutine(a0),d0
0001C370 323B 0000                  		move.w	Obj75_Index(pc,d0.w),d1
0001C374 4EFB 1000                  		jmp	Obj75_Index(pc,d1.w)
0001C378                            ; ===========================================================================
0001C378 0000                       Obj75_Index:	dc.w Obj75_Main-Obj75_Index
0001C37A 0000                       		dc.w Obj75_ShipMain-Obj75_Index
0001C37C 0000                       		dc.w Obj75_FaceMain-Obj75_Index
0001C37E 0000                       		dc.w Obj75_FlameMain-Obj75_Index
0001C380 0000                       		dc.w Obj75_SpikeMain-Obj75_Index
0001C382                            
0001C382 0200 0280                  Obj75_ObjData:	dc.b 2,	0, $02, $80		; routine number, animation, priority (high and low bytes)
0001C386 0401 0280                  		dc.b 4,	1, $02, $80
0001C38A 0607 0280                  		dc.b 6,	7, $02, $80
0001C38E 0800 0280                  		dc.b 8,	0, $02, $80
0001C392                            ; ===========================================================================
0001C392                            
0001C392                            Obj75_Main:	; Routine 0
0001C392 317C 2DB0 0008             		move.w	#$2DB0,obX(a0)
0001C398 317C 04DA 000C             		move.w	#$4DA,obY(a0)
0001C39E 3168 0008 0030             		move.w	obX(a0),$30(a0)
0001C3A4 3168 000C 0038             		move.w	obY(a0),$38(a0)
0001C3AA 117C 000F 0020             		move.b	#$F,obColType(a0)
0001C3B0 117C 0008 0021             		move.b	#8,obColProp(a0) ; set number of hits to 8
0001C3B6 45FA FFCA                  		lea	Obj75_ObjData(pc),a2
0001C3BA 2248                       		movea.l	a0,a1
0001C3BC 7203                       		moveq	#3,d1
0001C3BE 6000                       		bra.s	Obj75_LoadBoss
0001C3C0                            ; ===========================================================================
0001C3C0                            
0001C3C0                            Obj75_Loop:
0001C3C0 4EB9 0000 FF2E             		jsr	(FindNextFreeObj).l
0001C3C6 6600                       		bne.s	Obj75_ShipMain
0001C3C8 12BC 0075                  		move.b	#id_BossSpringYard,(a1)
0001C3CC 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001C3D2 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001C3D8                            
0001C3D8                            Obj75_LoadBoss:
0001C3D8 08A8 0000 0022             		bclr	#0,obStatus(a0)
0001C3DE 4229 0025                  		clr.b	ob2ndRout(a1)
0001C3E2 135A 0024                  		move.b	(a2)+,obRoutine(a1)
0001C3E6 135A 001C                  		move.b	(a2)+,obAnim(a1)
0001C3EA 335A 0018                  		move.w	(a2)+,obPriority(a1)
0001C3EE 237C 0001 AF44 0004        		move.l	#Map_Eggman,obMap(a1)
0001C3F6 337C 0400 0002             		move.w	#$400,obGfx(a1)
0001C3FC 137C 0004 0001             		move.b	#4,obRender(a1)
0001C402 137C 0020 0014             		move.b	#$20,obActWid(a1)
0001C408 2348 0034                  		move.l	a0,$34(a1)
0001C40C 51C9 FFB2                  		dbf	d1,Obj75_Loop	; repeat sequence 3 more times
0001C410                            
0001C410                            Obj75_ShipMain:	; Routine 2
0001C410 7000                       		moveq	#0,d0
0001C412 1028 0025                  		move.b	ob2ndRout(a0),d0
0001C416 323B 0000                  		move.w	Obj75_ShipIndex(pc,d0.w),d1
0001C41A 4EBB 1000                  		jsr	Obj75_ShipIndex(pc,d1.w)
0001C41E 43F9 0001 AEF4             		lea	(Ani_Eggman).l,a1
0001C424 4EB9 0000 CB4E             		jsr	(AnimateSprite).l
0001C42A 7003                       		moveq	#3,d0
0001C42C C028 0022                  		and.b	obStatus(a0),d0
0001C430 0228 00FC 0001             		andi.b	#$FC,obRender(a0)
0001C436 8128 0001                  		or.b	d0,obRender(a0)
0001C43A 4EF9 0000 FA8C             		jmp	(DisplaySprite).l
0001C440                            ; ===========================================================================
0001C440 0000 0000                  Obj75_ShipIndex:dc.w loc_191CC-Obj75_ShipIndex,	loc_19270-Obj75_ShipIndex
0001C444 0000 0000                  		dc.w loc_192EC-Obj75_ShipIndex,	loc_19474-Obj75_ShipIndex
0001C448 0000 0000                  		dc.w loc_194AC-Obj75_ShipIndex,	loc_194F2-Obj75_ShipIndex
0001C44C                            ; ===========================================================================
0001C44C                            
0001C44C                            loc_191CC:
0001C44C 317C FF00 0010             		move.w	#-$100,obVelX(a0)
0001C452 0C68 2D38 0030             		cmpi.w	#$2D38,$30(a0)
0001C458 6400                       		bcc.s	loc_191DE
0001C45A 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001C45E                            
0001C45E                            loc_191DE:
0001C45E 1028 003F                  		move.b	$3F(a0),d0
0001C462 5428 003F                  		addq.b	#2,$3F(a0)
0001C466 4EB9 0000 3A82             		jsr	(CalcSine).l
0001C46C E440                       		asr.w	#2,d0
0001C46E 3140 0012                  		move.w	d0,obVelY(a0)
0001C472                            
0001C472                            loc_191F2:
0001C472 6100 E66C                  		bsr.w	BossMove
0001C476 3168 0038 000C             		move.w	$38(a0),obY(a0)
0001C47C 3168 0030 0008             		move.w	$30(a0),obX(a0)
0001C482                            
0001C482                            loc_19202:
0001C482 3028 0008                  		move.w	8(a0),d0
0001C486 0440 2C00                  		subi.w	#$2C00,d0
0001C48A EA48                       		lsr.w	#5,d0
0001C48C 1140 0034                  		move.b	d0,$34(a0)
0001C490 0C28 0006 0025             		cmpi.b	#6,ob2ndRout(a0)
0001C496 6400                       		bcc.s	locret_19256
0001C498 4A28 0022                  		tst.b	obStatus(a0)
0001C49C 6B00                       		bmi.s	loc_19258
0001C49E 4A28 0020                  		tst.b	obColType(a0)
0001C4A2 6600                       		bne.s	locret_19256
0001C4A4 4A28 003E                  		tst.b	$3E(a0)
0001C4A8 6600                       		bne.s	loc_1923A
0001C4AA 117C 0020 003E             		move.b	#$20,$3E(a0)
0001C4BA                            
0001C4BA                            loc_1923A:
0001C4BA 43F8 FB22                  		lea	(v_pal_dry+$22).w,a1
0001C4BE 7000                       		moveq	#0,d0
0001C4C0 4A51                       		tst.w	(a1)
0001C4C2 6600                       		bne.s	loc_19248
0001C4C4 303C 0EEE                  		move.w	#cWhite,d0
0001C4C8                            
0001C4C8                            loc_19248:
0001C4C8 3280                       		move.w	d0,(a1)
0001C4CA 5328 003E                  		subq.b	#1,$3E(a0)
0001C4CE 6600                       		bne.s	locret_19256
0001C4D0 117C 000F 0020             		move.b	#$F,obColType(a0)
0001C4D6                            
0001C4D6                            locret_19256:
0001C4D6 4E75                       		rts	
0001C4D8                            ; ===========================================================================
0001C4D8                            
0001C4D8                            loc_19258:
0001C4D8 7064                       		moveq	#100,d0
0001C4DA 6100 0000                  		bsr.w	AddPoints
0001C4DE 117C 0006 0025             		move.b	#6,ob2ndRout(a0)
0001C4E4 317C 00B4 003C             		move.w	#$B4,$3C(a0)
0001C4EA 4268 0010                  		clr.w	obVelX(a0)
0001C4EE 4E75                       		rts	
0001C4F0                            ; ===========================================================================
0001C4F0                            
0001C4F0                            loc_19270:
0001C4F0 3028 0030                  		move.w	$30(a0),d0
0001C4F4 317C 0140 0010             		move.w	#$140,obVelX(a0)
0001C4FA 0828 0000 0022             		btst	#0,obStatus(a0)
0001C500 6600                       		bne.s	loc_1928E
0001C502 4468 0010                  		neg.w	obVelX(a0)
0001C506 0C40 2C08                  		cmpi.w	#$2C08,d0
0001C50A 6E00                       		bgt.s	loc_1929E
0001C50C 6000                       		bra.s	loc_19294
0001C50E                            ; ===========================================================================
0001C50E                            
0001C50E                            loc_1928E:
0001C50E 0C40 2D38                  		cmpi.w	#$2D38,d0
0001C512 6D00                       		blt.s	loc_1929E
0001C514                            
0001C514                            loc_19294:
0001C514 0868 0000 0022             		bchg	#0,obStatus(a0)
0001C51A 4228 003D                  		clr.b	$3D(a0)
0001C51E                            
0001C51E                            loc_1929E:
0001C51E 0440 2C10                  		subi.w	#$2C10,d0
0001C522 0240 001F                  		andi.w	#$1F,d0
0001C526 0440 001F                  		subi.w	#$1F,d0
0001C52A 6A00                       		bpl.s	loc_192AE
0001C52C 4440                       		neg.w	d0
0001C52E                            
0001C52E                            loc_192AE:
0001C52E 5340                       		subq.w	#1,d0
0001C530 6E00                       		bgt.s	loc_192E8
0001C532 4A28 003D                  		tst.b	$3D(a0)
0001C536 6600                       		bne.s	loc_192E8
0001C538 3238 D008                  		move.w	(v_player+obX).w,d1
0001C53C 0441 2C00                  		subi.w	#$2C00,d1
0001C540 EA41                       		asr.w	#5,d1
0001C542 B228 0034                  		cmp.b	$34(a0),d1
0001C546 6600                       		bne.s	loc_192E8
0001C548 7000                       		moveq	#0,d0
0001C54A 1028 0034                  		move.b	$34(a0),d0
0001C54E EB40                       		asl.w	#5,d0
0001C550 0640 2C10                  		addi.w	#$2C10,d0
0001C554 3140 0030                  		move.w	d0,$30(a0)
0001C558 6100 0000                  		bsr.w	Obj75_FindBlocks
0001C55C 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001C560 4268 0028                  		clr.w	obSubtype(a0)
0001C564 4268 0010                  		clr.w	obVelX(a0)
0001C568                            
0001C568                            loc_192E8:
0001C568 6000 FEF4                  		bra.w	loc_191DE
0001C56C                            ; ===========================================================================
0001C56C                            
0001C56C                            loc_192EC:
0001C56C 7000                       		moveq	#0,d0
0001C56E 1028 0028                  		move.b	obSubtype(a0),d0
0001C572 303B 0000                  		move.w	off_192FA(pc,d0.w),d0
0001C576 4EFB 0000                  		jmp	off_192FA(pc,d0.w)
0001C57A                            ; ===========================================================================
0001C57A 0000                       off_192FA:	dc.w loc_19302-off_192FA
0001C57C 0000                       		dc.w loc_19348-off_192FA
0001C57E 0000                       		dc.w loc_1938E-off_192FA
0001C580 0000                       		dc.w loc_193D0-off_192FA
0001C582                            ; ===========================================================================
0001C582                            
0001C582                            loc_19302:
0001C582 317C 0180 0012             		move.w	#$180,obVelY(a0)
0001C588 3028 0038                  		move.w	$38(a0),d0
0001C58C 0C40 0556                  		cmpi.w	#$556,d0
0001C590 6500                       		bcs.s	loc_19344
0001C592 317C 0556 0038             		move.w	#$556,$38(a0)
0001C598 4268 003C                  		clr.w	$3C(a0)
0001C59C 70FF                       		moveq	#-1,d0
0001C59E 3028 0036                  		move.w	$36(a0),d0
0001C5A2 6700                       		beq.s	loc_1933C
0001C5A4 2240                       		movea.l	d0,a1
0001C5A6 137C 00FF 0029             		move.b	#-1,$29(a1)
0001C5AC 117C 00FF 0029             		move.b	#-1,$29(a0)
0001C5B2 2348 0034                  		move.l	a0,$34(a1)
0001C5B6 317C 0032 003C             		move.w	#$32,$3C(a0)
0001C5BC                            
0001C5BC                            loc_1933C:
0001C5BC 4268 0012                  		clr.w	obVelY(a0)
0001C5C0 5428 0028                  		addq.b	#2,obSubtype(a0)
0001C5C4                            
0001C5C4                            loc_19344:
0001C5C4 6000 FEAC                  		bra.w	loc_191F2
0001C5C8                            ; ===========================================================================
0001C5C8                            
0001C5C8                            loc_19348:
0001C5C8 5368 003C                  		subq.w	#1,$3C(a0)
0001C5CC 6A00                       		bpl.s	loc_19366
0001C5CE 5428 0028                  		addq.b	#2,obSubtype(a0)
0001C5D2 317C F800 0012             		move.w	#-$800,obVelY(a0)
0001C5D8 4A68 0036                  		tst.w	$36(a0)
0001C5DC 6600                       		bne.s	loc_19362
0001C5DE E0E8 0012                  		asr	obVelY(a0)
0001C5E2                            
0001C5E2                            loc_19362:
0001C5E2 7000                       		moveq	#0,d0
0001C5E4 6000                       		bra.s	loc_1937C
0001C5E6                            ; ===========================================================================
0001C5E6                            
0001C5E6                            loc_19366:
0001C5E6 7000                       		moveq	#0,d0
0001C5E8 0C68 001E 003C             		cmpi.w	#$1E,$3C(a0)
0001C5EE 6E00                       		bgt.s	loc_1937C
0001C5F0 7002                       		moveq	#2,d0
0001C5F2 0828 0001 003D             		btst	#1,$3D(a0)
0001C5F8 6700                       		beq.s	loc_1937C
0001C5FA 4440                       		neg.w	d0
0001C5FC                            
0001C5FC                            loc_1937C:
0001C5FC D068 0038                  		add.w	$38(a0),d0
0001C600 3140 000C                  		move.w	d0,obY(a0)
0001C604 3168 0030 0008             		move.w	$30(a0),obX(a0)
0001C60A 6000 FE76                  		bra.w	loc_19202
0001C60E                            ; ===========================================================================
0001C60E                            
0001C60E                            loc_1938E:
0001C60E 303C 04DA                  		move.w	#$4DA,d0
0001C612 4A68 0036                  		tst.w	$36(a0)
0001C616 6700                       		beq.s	loc_1939C
0001C618 0440 0018                  		subi.w	#$18,d0
0001C61C                            
0001C61C                            loc_1939C:
0001C61C B068 0038                  		cmp.w	$38(a0),d0
0001C620 6D00                       		blt.s	loc_193BE
0001C622 317C 0008 003C             		move.w	#8,$3C(a0)
0001C628 4A68 0036                  		tst.w	$36(a0)
0001C62C 6700                       		beq.s	loc_193B4
0001C62E 317C 002D 003C             		move.w	#$2D,$3C(a0)
0001C634                            
0001C634                            loc_193B4:
0001C634 5428 0028                  		addq.b	#2,obSubtype(a0)
0001C638 4268 0012                  		clr.w	obVelY(a0)
0001C63C 6000                       		bra.s	loc_193CC
0001C63E                            ; ===========================================================================
0001C63E                            
0001C63E                            loc_193BE:
0001C63E 0C68 FFC0 0012             		cmpi.w	#-$40,obVelY(a0)
0001C644 6C00                       		bge.s	loc_193CC
0001C646 0668 000C 0012             		addi.w	#$C,obVelY(a0)
0001C64C                            
0001C64C                            loc_193CC:
0001C64C 6000 FE24                  		bra.w	loc_191F2
0001C650                            ; ===========================================================================
0001C650                            
0001C650                            loc_193D0:
0001C650 5368 003C                  		subq.w	#1,$3C(a0)
0001C654 6E00                       		bgt.s	loc_19406
0001C656 6B00                       		bmi.s	loc_193EE
0001C658 70FF                       		moveq	#-1,d0
0001C65A 3028 0036                  		move.w	$36(a0),d0
0001C65E 6700                       		beq.s	loc_193E8
0001C660 2240                       		movea.l	d0,a1
0001C662 137C 000A 0029             		move.b	#$A,$29(a1)
0001C668                            
0001C668                            loc_193E8:
0001C668 4268 0036                  		clr.w	$36(a0)
0001C66C 6000                       		bra.s	loc_19406
0001C66E                            ; ===========================================================================
0001C66E                            
0001C66E                            loc_193EE:
0001C66E 0C68 FFE2 003C             		cmpi.w	#-$1E,$3C(a0)
0001C674 6600                       		bne.s	loc_19406
0001C676 4228 0029                  		clr.b	$29(a0)
0001C67A 5528 0025                  		subq.b	#2,ob2ndRout(a0)
0001C67E 117C 00FF 003D             		move.b	#-1,$3D(a0)
0001C684 6000                       		bra.s	loc_19446
0001C686                            ; ===========================================================================
0001C686                            
0001C686                            loc_19406:
0001C686 7001                       		moveq	#1,d0
0001C688 4A68 0036                  		tst.w	$36(a0)
0001C68C 6700                       		beq.s	loc_19410
0001C68E 7002                       		moveq	#2,d0
0001C690                            
0001C690                            loc_19410:
0001C690 0C68 04DA 0038             		cmpi.w	#$4DA,$38(a0)
0001C696 6700                       		beq.s	loc_19424
0001C698 6D00                       		blt.s	loc_1941C
0001C69A 4440                       		neg.w	d0
0001C69C                            
0001C69C                            loc_1941C:
0001C69C 4A68 0036                  		tst.w	$36(a0)
0001C6A0 D168 0038                  		add.w	d0,$38(a0)
0001C6A4                            
0001C6A4                            loc_19424:
0001C6A4 7000                       		moveq	#0,d0
0001C6A6 4A68 0036                  		tst.w	$36(a0)
0001C6AA 6700                       		beq.s	loc_19438
0001C6AC 7002                       		moveq	#2,d0
0001C6AE 0828 0000 003D             		btst	#0,$3D(a0)
0001C6B4 6700                       		beq.s	loc_19438
0001C6B6 4440                       		neg.w	d0
0001C6B8                            
0001C6B8                            loc_19438:
0001C6B8 D068 0038                  		add.w	$38(a0),d0
0001C6BC 3140 000C                  		move.w	d0,obY(a0)
0001C6C0 3168 0030 0008             		move.w	$30(a0),8(a0)
0001C6C6                            
0001C6C6                            loc_19446:
0001C6C6 6000 FDBA                  		bra.w	loc_19202
0001C6CA                            
0001C6CA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C6CA                            
0001C6CA                            
0001C6CA                            Obj75_FindBlocks:
0001C6CA 4268 0036                  		clr.w	$36(a0)
0001C6CE 43F8 D040                  		lea	(v_objspace+$40).w,a1
0001C6D2 703E                       		moveq	#$3E,d0
0001C6D4 7276                       		moveq	#$76,d1
0001C6D6 1428 0034                  		move.b	$34(a0),d2
0001C6DA                            
0001C6DA                            Obj75_FindLoop:
0001C6DA B211                       		cmp.b	(a1),d1		; is object a SYZ boss block?
0001C6DC 6600                       		bne.s	loc_1946A	; if not, branch
0001C6DE B429 0028                  		cmp.b	obSubtype(a1),d2
0001C6E2 6600                       		bne.s	loc_1946A
0001C6E4 3149 0036                  		move.w	a1,$36(a0)
0001C6E8 6000                       		bra.s	locret_19472
0001C6EA                            ; ===========================================================================
0001C6EA                            
0001C6EA                            loc_1946A:
0001C6EA 43E9 0040                  		lea	$40(a1),a1	; next object RAM entry
0001C6EE 51C8 FFEA                  		dbf	d0,Obj75_FindLoop
0001C6F2                            
0001C6F2                            locret_19472:
0001C6F2 4E75                       		rts	
0001C6F4                            ; End of function Obj75_FindBlocks
0001C6F4                            
0001C6F4                            ; ===========================================================================
0001C6F4                            
0001C6F4                            loc_19474:
0001C6F4 5368 003C                  		subq.w	#1,$3C(a0)
0001C6F8 6B00                       		bmi.s	loc_1947E
0001C6FA 6000 E3A2                  		bra.w	BossDefeated
0001C6FE                            ; ===========================================================================
0001C6FE                            
0001C6FE                            loc_1947E:
0001C6FE 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001C702 4268 0012                  		clr.w	obVelY(a0)
0001C706 08E8 0000 0022             		bset	#0,obStatus(a0)
0001C70C 08A8 0007 0022             		bclr	#7,obStatus(a0)
0001C712 4268 0010                  		clr.w	obVelX(a0)
0001C716 317C FFFF 003C             		move.w	#-1,$3C(a0)
0001C71C 4A38 F7A7                  		tst.b	(v_bossstatus).w
0001C720 6600                       		bne.s	loc_194A8
0001C722 11FC 0001 F7A7             		move.b	#1,(v_bossstatus).w
0001C728                            
0001C728                            loc_194A8:
0001C728 6000 FD58                  		bra.w	loc_19202
0001C72C                            ; ===========================================================================
0001C72C                            
0001C72C                            loc_194AC:
0001C72C 5268 003C                  		addq.w	#1,$3C(a0)
0001C730 6700                       		beq.s	loc_194BC
0001C732 6A00                       		bpl.s	loc_194C2
0001C734 0668 0018 0012             		addi.w	#$18,obVelY(a0)
0001C73A 6000                       		bra.s	loc_194EE
0001C73C                            ; ===========================================================================
0001C73C                            
0001C73C                            loc_194BC:
0001C73C 4268 0012                  		clr.w	obVelY(a0)
0001C740 6000                       		bra.s	loc_194EE
0001C742                            ; ===========================================================================
0001C742                            
0001C742                            loc_194C2:
0001C742 0C68 0020 003C             		cmpi.w	#$20,$3C(a0)
0001C748 6500                       		bcs.s	loc_194DA
0001C74A 6700                       		beq.s	loc_194E0
0001C74C 0C68 002A 003C             		cmpi.w	#$2A,$3C(a0)
0001C752 6500                       		bcs.s	loc_194EE
0001C754 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001C758 6000                       		bra.s	loc_194EE
0001C75A                            ; ===========================================================================
0001C75A                            
0001C75A                            loc_194DA:
0001C75A 5168 0012                  		subq.w	#8,obVelY(a0)
0001C75E 6000                       		bra.s	loc_194EE
0001C760                            ; ===========================================================================
0001C760                            
0001C760                            loc_194E0:
0001C760 4268 0012                  		clr.w    obVelY(a0)
0001C764 4A38 FE2D                          	tst.b     (v_invinc).w
0001C768 6600                               	bne.s   @boss_invinc
0001C76A                            
0001C76A 1038 F5C6                          	move.b   (v_Saved_music),d0
0001C76E 6000 0000                          	bra.w      @boss_play
0001C772                            
0001C772                            @boss_invinc:
0001C772 103C 0000                          	move.b #bgm_Invincible,d0
0001C776                            
0001C776                            @boss_play:
0001C776 4EB8 129A                          	jsr PlaySound
0001C77A                            
0001C77A                            loc_194EE:
0001C77A 6000 FCF6                  		bra.w	loc_191F2
0001C77E                            ; ===========================================================================
0001C77E                            
0001C77E                            loc_194F2:
0001C77E 317C 0400 0010             		move.w	#$400,obVelX(a0)
0001C784 317C FFC0 0012             		move.w	#-$40,obVelY(a0)
0001C78A 0C78 2D40 F72A             		cmpi.w	#$2D40,(v_limitright2).w
0001C790 6400                       		bcc.s	loc_1950C
0001C792 5478 F72A                  		addq.w	#2,(v_limitright2).w
0001C796 6000                       		bra.s	loc_19512
0001C798                            ; ===========================================================================
0001C798                            
0001C798                            loc_1950C:
0001C798 4A28 0001                  		tst.b	obRender(a0)
0001C79C 6A00                       		bpl.s	Obj75_ShipDelete
0001C79E                            
0001C79E                            loc_19512:
0001C79E 6100 E340                  		bsr.w	BossMove
0001C7A2 6000 FCBA                  		bra.w	loc_191DE
0001C7A6                            ; ===========================================================================
0001C7A6                            
0001C7A6                            Obj75_ShipDelete:
0001C7A6 4EF9 0000 FACC             		jmp	(DeleteObject).l
0001C7AC                            ; ===========================================================================
0001C7AC                            
0001C7AC                            Obj75_FaceMain:	; Routine 4
0001C7AC 7201                       		moveq	#1,d1
0001C7AE 2268 0034                  		movea.l	$34(a0),a1
0001C7B2 7000                       		moveq	#0,d0
0001C7B4 1029 0025                  		move.b	ob2ndRout(a1),d0
0001C7B8 303B 0000                  		move.w	off_19546(pc,d0.w),d0
0001C7BC 4EBB 0000                  		jsr	off_19546(pc,d0.w)
0001C7C0 1141 001C                  		move.b	d1,obAnim(a0)
0001C7C4 1010                       		move.b	(a0),d0
0001C7C6 B011                       		cmp.b	(a1),d0
0001C7C8 6600                       		bne.s	Obj75_FaceDelete
0001C7CA 6000                       		bra.s	loc_195BE
0001C7CC                            ; ===========================================================================
0001C7CC                            
0001C7CC                            Obj75_FaceDelete:
0001C7CC 4EF9 0000 FACC             		jmp	(DeleteObject).l
0001C7D2                            ; ===========================================================================
0001C7D2 0000 0000                  off_19546:	dc.w loc_19574-off_19546, loc_19574-off_19546
0001C7D6 0000 0000                  		dc.w loc_1955A-off_19546, loc_19552-off_19546
0001C7DA 0000 0000                  		dc.w loc_19552-off_19546, loc_19556-off_19546
0001C7DE                            ; ===========================================================================
0001C7DE                            
0001C7DE                            loc_19552:
0001C7DE 720A                       		moveq	#$A,d1
0001C7E0 4E75                       		rts	
0001C7E2                            ; ===========================================================================
0001C7E2                            
0001C7E2                            loc_19556:
0001C7E2 7206                       		moveq	#6,d1
0001C7E4 4E75                       		rts	
0001C7E6                            ; ===========================================================================
0001C7E6                            
0001C7E6                            loc_1955A:
0001C7E6 7000                       		moveq	#0,d0
0001C7E8 1029 0028                  		move.b	obSubtype(a1),d0
0001C7EC 303B 0000                  		move.w	off_19568(pc,d0.w),d0
0001C7F0 4EFB 0000                  		jmp	off_19568(pc,d0.w)
0001C7F4                            ; ===========================================================================
0001C7F4 0000 0000                  off_19568:	dc.w loc_19570-off_19568, loc_19572-off_19568
0001C7F8 0000 0000                  		dc.w loc_19570-off_19568, loc_19570-off_19568
0001C7FC                            ; ===========================================================================
0001C7FC                            
0001C7FC                            loc_19570:
0001C7FC 6000                       		bra.s	loc_19574
0001C7FE                            ; ===========================================================================
0001C7FE                            
0001C7FE                            loc_19572:
0001C7FE 7206                       		moveq	#6,d1
0001C800                            
0001C800                            loc_19574:
0001C800 4A29 0020                  		tst.b	obColType(a1)
0001C804 6600                       		bne.s	loc_1957E
0001C806 7205                       		moveq	#5,d1
0001C808 4E75                       		rts	
0001C80A                            ; ===========================================================================
0001C80A                            
0001C80A                            loc_1957E:
0001C80A 0C38 0004 D024             		cmpi.b	#4,(v_player+obRoutine).w
0001C810 6500                       		bcs.s	locret_19588
0001C812 7204                       		moveq	#4,d1
0001C814                            
0001C814                            locret_19588:
0001C814 4E75                       		rts	
0001C816                            ; ===========================================================================
0001C816                            
0001C816                            Obj75_FlameMain:; Routine 6
0001C816 117C 0007 001C             		move.b	#7,obAnim(a0)
0001C81C 2268 0034                  		movea.l	$34(a0),a1
0001C820 0C29 000A 0025             		cmpi.b	#$A,ob2ndRout(a1)
0001C826 6600                       		bne.s	loc_195AA
0001C828 117C 000B 001C             		move.b	#$B,obAnim(a0)
0001C82E 4A28 0001                  		tst.b	1(a0)
0001C832 6A00                       		bpl.s	Obj75_FlameDelete
0001C834 6000                       		bra.s	loc_195B6
0001C836                            ; ===========================================================================
0001C836                            
0001C836                            loc_195AA:
0001C836 4A69 0010                  		tst.w	obVelX(a1)
0001C83A 6700                       		beq.s	loc_195B6
0001C83C 117C 0008 001C             		move.b	#8,obAnim(a0)
0001C842                            
0001C842                            loc_195B6:
0001C842 6000                       		bra.s	loc_195BE
0001C844                            ; ===========================================================================
0001C844                            
0001C844                            Obj75_FlameDelete:
0001C844 4EF9 0000 FACC             		jmp	(DeleteObject).l
0001C84A                            ; ===========================================================================
0001C84A                            
0001C84A                            loc_195BE:
0001C84A 43F9 0001 AEF4             		lea	(Ani_Eggman).l,a1
0001C850 4EB9 0000 CB4E             		jsr	(AnimateSprite).l
0001C856 2268 0034                  		movea.l	$34(a0),a1
0001C85A 3169 0008 0008             		move.w	obX(a1),obX(a0)
0001C860 3169 000C 000C             		move.w	obY(a1),obY(a0)
0001C866                            
0001C866                            loc_195DA:
0001C866 1169 0022 0022             		move.b	obStatus(a1),obStatus(a0)
0001C86C 7003                       		moveq	#3,d0
0001C86E C028 0022                  		and.b	obStatus(a0),d0
0001C872 0228 00FC 0001             		andi.b	#$FC,obRender(a0)
0001C878 8128 0001                  		or.b	d0,obRender(a0)
0001C87C 4EF9 0000 FA8C             		jmp	(DisplaySprite).l
0001C882                            ; ===========================================================================
0001C882                            
0001C882                            Obj75_SpikeMain:; Routine 8
0001C882 217C 0001 B034 0004        		move.l	#Map_BossItems,obMap(a0)
0001C88A 317C 246C 0002             		move.w	#$246C,obGfx(a0)
0001C890 117C 0005 001A             		move.b	#5,obFrame(a0)
0001C896 2268 0034                  		movea.l	$34(a0),a1
0001C89A 0C29 000A 0025             		cmpi.b	#$A,ob2ndRout(a1)
0001C8A0 6600                       		bne.s	loc_1961C
0001C8A2 4A28 0001                  		tst.b	obRender(a0)
0001C8A6 6A00                       		bpl.s	Obj75_SpikeDelete
0001C8A8                            
0001C8A8                            loc_1961C:
0001C8A8 3169 0008 0008             		move.w	obX(a1),obX(a0)
0001C8AE 3169 000C 000C             		move.w	obY(a1),obY(a0)
0001C8B4 3028 003C                  		move.w	$3C(a0),d0
0001C8B8 0C29 0004 0025             		cmpi.b	#4,ob2ndRout(a1)
0001C8BE 6600                       		bne.s	loc_19652
0001C8C0 0C29 0006 0028             		cmpi.b	#6,obSubtype(a1)
0001C8C6 6700                       		beq.s	loc_1964C
0001C8C8 4A29 0028                  		tst.b	obSubtype(a1)
0001C8CC 6600                       		bne.s	loc_19658
0001C8CE 0C40 0094                  		cmpi.w	#$94,d0
0001C8D2 6C00                       		bge.s	loc_19658
0001C8D4 5E40                       		addq.w	#7,d0
0001C8D6 6000                       		bra.s	loc_19658
0001C8D8                            ; ===========================================================================
0001C8D8                            
0001C8D8                            loc_1964C:
0001C8D8 4A69 003C                  		tst.w	$3C(a1)
0001C8DC 6A00                       		bpl.s	loc_19658
0001C8DE                            
0001C8DE                            loc_19652:
0001C8DE 4A40                       		tst.w	d0
0001C8E0 6F00                       		ble.s	loc_19658
0001C8E2 5B40                       		subq.w	#5,d0
0001C8E4                            
0001C8E4                            loc_19658:
0001C8E4 3140 003C                  		move.w	d0,$3C(a0)
0001C8E8 E440                       		asr.w	#2,d0
0001C8EA D168 000C                  		add.w	d0,obY(a0)
0001C8EE 117C 0008 0014             		move.b	#8,obActWid(a0)
0001C8F4 117C 000C 0016             		move.b	#$C,obHeight(a0)
0001C8FA 4228 0020                  		clr.b	obColType(a0)
0001C8FE 2268 0034                  		movea.l	$34(a0),a1
0001C902 4A29 0020                  		tst.b	obColType(a1)
0001C906 6700                       		beq.s	loc_19688
0001C908 4A29 0029                  		tst.b	$29(a1)
0001C90C 6600                       		bne.s	loc_19688
0001C90E 117C 0084 0020             		move.b	#$84,obColType(a0)
0001C914                            
0001C914                            loc_19688:
0001C914 6000 FF50                  		bra.w	loc_195DA
0001C918                            ; ===========================================================================
0001C918                            
0001C918                            Obj75_SpikeDelete:
0001C918 4EF9 0000 FACC             		jmp	(DeleteObject).l
0001C918 4EF9 0000 FACC             		jmp	(DeleteObject).l
0001C91E                            		include	"_incObj\76 SYZ Boss Blocks.asm"
0001C91E                            ; ---------------------------------------------------------------------------
0001C91E                            ; Object 76 - blocks that Eggman picks up (SYZ)
0001C91E                            ; ---------------------------------------------------------------------------
0001C91E                            
0001C91E                            BossBlock:
0001C91E 7000                       		moveq	#0,d0
0001C920 1028 0024                  		move.b	obRoutine(a0),d0
0001C924 323B 0000                  		move.w	Obj76_Index(pc,d0.w),d1
0001C928 4EFB 1000                  		jmp	Obj76_Index(pc,d1.w)
0001C92C                            ; ===========================================================================
0001C92C 0000                       Obj76_Index:	dc.w Obj76_Main-Obj76_Index
0001C92E 0000                       		dc.w Obj76_Action-Obj76_Index
0001C930 0000                       		dc.w loc_19762-Obj76_Index
0001C932                            ; ===========================================================================
0001C932                            
0001C932                            Obj76_Main:	; Routine 0
0001C932 7800                       		moveq	#0,d4
0001C934 3A3C 2C10                  		move.w	#$2C10,d5
0001C938 7C09                       		moveq	#9,d6
0001C93A 43D0                       		lea	(a0),a1
0001C93C 6000                       		bra.s	Obj76_MakeBlock
0001C93E                            ; ===========================================================================
0001C93E                            
0001C93E                            Obj76_Loop:
0001C93E 4EB9 0000 FF18             		jsr	(FindFreeObj).l
0001C944 6600                       		bne.s	Obj76_ExitLoop
0001C946                            
0001C946                            Obj76_MakeBlock:
0001C946 12BC 0076                  		move.b	#id_BossBlock,(a1)
0001C94A 237C 0000 0000 0004        		move.l	#Map_BossBlock,obMap(a1)
0001C952 337C 4000 0002             		move.w	#$4000,obGfx(a1)
0001C958 137C 0004 0001             		move.b	#4,obRender(a1)
0001C95E 137C 0010 0014             		move.b	#$10,obActWid(a1)
0001C964 137C 0010 0016             		move.b	#$10,obHeight(a1)
0001C96A 337C 0180 0018             		move.w	#$180,obPriority(a1)
0001C970 3345 0008                  		move.w	d5,obX(a1)	; set x-position
0001C974 337C 0582 000C             		move.w	#$582,obY(a1)
0001C97A 3344 0028                  		move.w	d4,obSubtype(a1)
0001C97E 0644 0101                  		addi.w	#$101,d4
0001C982 0645 0020                  		addi.w	#$20,d5		; add $20 to next x-position
0001C986 5429 0024                  		addq.b	#2,obRoutine(a1)
0001C98A 51CE FFB2                  		dbf	d6,Obj76_Loop	; repeat sequence 9 more times
0001C98E                            
0001C98E                            Obj76_ExitLoop:
0001C98E 4E75                       		rts	
0001C990                            ; ===========================================================================
0001C990                            
0001C990                            Obj76_Action:	; Routine 2
0001C990 1028 0029                  		move.b	$29(a0),d0
0001C994 B028 0028                  		cmp.b	obSubtype(a0),d0
0001C998 6700                       		beq.s	Obj76_Solid
0001C99A 4A00                       		tst.b	d0
0001C99C 6B00                       		bmi.s	loc_19718
0001C99E                            
0001C99E                            loc_19712:
0001C99E 6100 0000                  		bsr.w	Obj76_Break
0001C9A2 6000                       		bra.s	Obj76_Display
0001C9A4                            ; ===========================================================================
0001C9A4                            
0001C9A4                            loc_19718:
0001C9A4 2268 0034                  		movea.l	$34(a0),a1
0001C9A8 4A29 0021                  		tst.b	obColProp(a1)
0001C9AC 67F0                       		beq.s	loc_19712
0001C9AE 3169 0008 0008             		move.w	obX(a1),obX(a0)
0001C9B4 3169 000C 000C             		move.w	obY(a1),obY(a0)
0001C9BA 0668 002C 000C             		addi.w	#$2C,obY(a0)
0001C9C0 B2C8                       		cmpa.w	a0,a1
0001C9C2 6500                       		bcs.s	Obj76_Display
0001C9C4 3029 0012                  		move.w	obVelY(a1),d0
0001C9C8 48C0                       		ext.l	d0
0001C9CA E080                       		asr.l	#8,d0
0001C9CC D168 000C                  		add.w	d0,obY(a0)
0001C9D0 6000                       		bra.s	Obj76_Display
0001C9D2                            ; ===========================================================================
0001C9D2                            
0001C9D2                            Obj76_Solid:
0001C9D2 323C 001B                  		move.w	#$1B,d1
0001C9D6 343C 0010                  		move.w	#$10,d2
0001C9DA 363C 0011                  		move.w	#$11,d3
0001C9DE 3828 0008                  		move.w	obX(a0),d4
0001C9E2 4EB9 0001 1EAE             		jsr	(SolidObject).l
0001C9E8                            
0001C9E8                            Obj76_Display:
0001C9E8 4EF9 0000 FA8C             		jmp	(DisplaySprite).l
0001C9EE                            ; ===========================================================================
0001C9EE                            
0001C9EE                            loc_19762:	; Routine 4
0001C9EE 4A28 0001                  		tst.b	obRender(a0)
0001C9F2 6A00                       		bpl.s	Obj76_Delete
0001C9F4 4EB9 0000 FA40             		jsr	(ObjectFall).l
0001C9FA 4EF9 0000 FA8C             		jmp	(DisplaySprite).l
0001CA00                            ; ===========================================================================
0001CA00                            
0001CA00                            Obj76_Delete:
0001CA00 4EF9 0000 FACC             		jmp	(DeleteObject).l
0001CA06                            
0001CA06                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CA06                            
0001CA06                            
0001CA06                            Obj76_Break:
0001CA06 49FA 0000                  		lea	Obj76_FragSpeed(pc),a4
0001CA0A 4BFA 0000                  		lea	Obj76_FragPos(pc),a5
0001CA0E 7801                       		moveq	#1,d4
0001CA10 7203                       		moveq	#3,d1
0001CA12 7438                       		moveq	#$38,d2
0001CA14 5428 0024                  		addq.b	#2,obRoutine(a0)
0001CA18 117C 0008 0014             		move.b	#8,obActWid(a0)
0001CA1E 117C 0008 0016             		move.b	#8,obHeight(a0)
0001CA24 43D0                       		lea	(a0),a1
0001CA26 6000                       		bra.s	Obj76_MakeFrag
0001CA28                            ; ===========================================================================
0001CA28                            
0001CA28                            Obj76_LoopFrag:
0001CA28 4EB9 0000 FF2E             		jsr	(FindNextFreeObj).l
0001CA2E 6600                       		bne.s	loc_197D4
0001CA30                            
0001CA30                            Obj76_MakeFrag:
0001CA30 45D0                       		lea	(a0),a2
0001CA32 47D1                       		lea	(a1),a3
0001CA34 7603                       		moveq	#3,d3
0001CA36                            
0001CA36                            loc_197AA:
0001CA36 26DA                       		move.l	(a2)+,(a3)+
0001CA38 26DA                       		move.l	(a2)+,(a3)+
0001CA3A 26DA                       		move.l	(a2)+,(a3)+
0001CA3C 26DA                       		move.l	(a2)+,(a3)+
0001CA3E 51CB FFF6                  		dbf	d3,loc_197AA
0001CA42                            
0001CA42 335C 0010                  		move.w	(a4)+,obVelX(a1)
0001CA46 335C 0012                  		move.w	(a4)+,obVelY(a1)
0001CA4A 361D                       		move.w	(a5)+,d3
0001CA4C D769 0008                  		add.w	d3,obX(a1)
0001CA50 361D                       		move.w	(a5)+,d3
0001CA52 D769 000C                  		add.w	d3,obY(a1)
0001CA56 1344 001A                  		move.b	d4,obFrame(a1)
0001CA5A 5244                       		addq.w	#1,d4
0001CA5C 51C9 FFCA                  		dbf	d1,Obj76_LoopFrag ; repeat sequence 3 more times
0001CA60                            
0001CA60                            loc_197D4:
0001CA6A                            ; End of function Obj76_Break
0001CA6A                            
0001CA6A                            ; ===========================================================================
0001CA6A FE80 FE00                  Obj76_FragSpeed:dc.w -$180, -$200
0001CA6E 0180 FE00                  		dc.w $180, -$200
0001CA72 FF00 FF00                  		dc.w -$100, -$100
0001CA76 0100 FF00                  		dc.w $100, -$100
0001CA7A FFF8 FFF8                  Obj76_FragPos:	dc.w -8, -8
0001CA7E 0010 0000                  		dc.w $10, 0
0001CA82 0000 0010                  		dc.w 0,	$10
0001CA86 0010 0010                  		dc.w $10, $10
0001CA86 0010 0010                  		dc.w $10, $10
0001CA8A                            Map_BossBlock:	include	"_maps\SYZ Boss Blocks.asm"
0001CA8A                            ; ---------------------------------------------------------------------------
0001CA8A                            ; Sprite mappings - blocks that	Robotnik picks up (SYZ)
0001CA8A                            ; ---------------------------------------------------------------------------
0001CA8A                            Map_BossBlock_internal:
0001CA8A 0000                       		dc.w @wholeblock-Map_BossBlock_internal
0001CA8C 0000                       		dc.w @topleft-Map_BossBlock_internal
0001CA8E 0000                       		dc.w @topright-Map_BossBlock_internal
0001CA90 0000                       		dc.w @bottomleft-Map_BossBlock_internal
0001CA92 0000                       		dc.w @bottomright-Map_BossBlock_internal
0001CA94 02                         @wholeblock:	dc.b 2
0001CA95 F00D 0071 F0               		dc.b $F0, $D, 0, $71, $F0
0001CA9A 000D 0079 F0               		dc.b 0,	$D, 0, $79, $F0
0001CA9F 00                         		dc.b 0
0001CAA0 01                         @topleft:	dc.b 1
0001CAA1 F805 0071 F8               		dc.b $F8, 5, 0,	$71, $F8
0001CAA6 01                         @topright:	dc.b 1
0001CAA7 F805 0075 F8               		dc.b $F8, 5, 0,	$75, $F8
0001CAAC 01                         @bottomleft:	dc.b 1
0001CAAD F805 0079 F8               		dc.b $F8, 5, 0,	$79, $F8
0001CAB2 01                         @bottomright:	dc.b 1
0001CAB3 F805 007D F8               		dc.b $F8, 5, 0,	$7D, $F8
0001CAB8                            		even
0001CAB8                            		even
0001CAB8                            
0001CAB8                            loc_1982C:
0001CAB8 4EF9 0000 FACC             		jmp	(DeleteObject).l
0001CABE                            
0001CABE                            		include	"_incObj\82 Eggman - Scrap Brain 2.asm"
0001CABE                            ; ---------------------------------------------------------------------------
0001CABE                            ; Object 82 - Eggman (SBZ2)
0001CABE                            ; ---------------------------------------------------------------------------
0001CABE                            
0001CABE                            ScrapEggman:
0001CABE 7000                       		moveq	#0,d0
0001CAC0 1028 0024                  		move.b	obRoutine(a0),d0
0001CAC4 323B 0000                  		move.w	SEgg_Index(pc,d0.w),d1
0001CAC8 4EFB 1000                  		jmp	SEgg_Index(pc,d1.w)
0001CACC                            ; ===========================================================================
0001CACC 0000                       SEgg_Index:	dc.w SEgg_Main-SEgg_Index
0001CACE 0000                       		dc.w SEgg_Eggman-SEgg_Index
0001CAD0 0000                       		dc.w SEgg_Switch-SEgg_Index
0001CAD2                            
0001CAD2 0200 03                    SEgg_ObjData:	dc.b 2,	0, 3		; routine number, animation, priority
0001CAD5 0400 03                    		dc.b 4,	0, 3
0001CAD8                            ; ===========================================================================
0001CAD8                            
0001CAD8                            SEgg_Main:	; Routine 0
0001CAD8 45FA FFF8                  		lea	SEgg_ObjData(pc),a2
0001CADC 317C 1C60 0008             		move.w	#$1C60,obX(a0)
0001CAE2 317C 02A4 000C             		move.w	#$2A4,obY(a0)
0001CAE8 117C 000F 0020             		move.b	#$F,obColType(a0)
0001CAEE 117C 0010 0021             		move.b	#$10,obColProp(a0)
0001CAF4 08A8 0000 0022             		bclr	#0,obStatus(a0)
0001CAFA 4228 0025                  		clr.b	ob2ndRout(a0)
0001CAFE 115A 0024                  		move.b	(a2)+,obRoutine(a0)
0001CB02 115A 001C                  		move.b	(a2)+,obAnim(a0)
0001CB06 115A 0018                  		move.b	(a2)+,obPriority(a0)
0001CB0A 217C 0000 0000 0004        		move.l	#Map_SEgg,obMap(a0)
0001CB12 317C 0400 0002             		move.w	#$400,obGfx(a0)
0001CB18 117C 0004 0001             		move.b	#4,obRender(a0)
0001CB1E 08E8 0007 0001             		bset	#7,obRender(a0)
0001CB24 117C 0020 0014             		move.b	#$20,obActWid(a0)
0001CB2A 4EB9 0000 FF2E             		jsr	(FindNextFreeObj).l
0001CB30 6600                       		bne.s	SEgg_Eggman
0001CB32 2348 0034                  		move.l	a0,$34(a1)
0001CB36 12BC 0082                  		move.b	#id_ScrapEggman,(a1) ; load switch object
0001CB3A 337C 1C30 0008             		move.w	#$1C30,obX(a1)
0001CB40 337C 02BC 000C             		move.w	#$2BC,obY(a1)
0001CB46 4228 0025                  		clr.b	ob2ndRout(a0)
0001CB4A 135A 0024                  		move.b	(a2)+,obRoutine(a1)
0001CB4E 135A 001C                  		move.b	(a2)+,obAnim(a1)
0001CB52 135A 0018                  		move.b	(a2)+,obPriority(a1)
0001CB56 237C 0000 E2D0 0004        		move.l	#Map_But,obMap(a1)
0001CB5E 337C 04A4 0002             		move.w	#$4A4,obGfx(a1)
0001CB64 137C 0004 0001             		move.b	#4,obRender(a1)
0001CB6A 08E9 0007 0001             		bset	#7,obRender(a1)
0001CB70 137C 0010 0014             		move.b	#$10,obActWid(a1)
0001CB76 137C 0000 001A             		move.b	#0,obFrame(a1)
0001CB7C                            
0001CB7C                            SEgg_Eggman:	; Routine 2
0001CB7C 7000                       		moveq	#0,d0
0001CB7E 1028 0025                  		move.b	ob2ndRout(a0),d0
0001CB82 323B 0000                  		move.w	SEgg_EggIndex(pc,d0.w),d1
0001CB86 4EBB 1000                  		jsr	SEgg_EggIndex(pc,d1.w)
0001CB8A 43FA 0000                  		lea	Ani_SEgg(pc),a1
0001CB8E 4EB9 0000 CB4E             		jsr	(AnimateSprite).l
0001CB94 4EF9 0000 FA8C             		jmp	(DisplaySprite).l
0001CB9A                            ; ===========================================================================
0001CB9A 0000                       SEgg_EggIndex:	dc.w SEgg_ChkSonic-SEgg_EggIndex
0001CB9C 0000                       		dc.w SEgg_PreLeap-SEgg_EggIndex
0001CB9E 0000                       		dc.w SEgg_Leap-SEgg_EggIndex
0001CBA0 0000                       		dc.w loc_19934-SEgg_EggIndex
0001CBA2                            ; ===========================================================================
0001CBA2                            
0001CBA2                            SEgg_ChkSonic:
0001CBA2 3028 0008                  		move.w	obX(a0),d0
0001CBA6 9078 D008                  		sub.w	(v_player+obX).w,d0
0001CBAA 0C40 0080                  		cmpi.w	#128,d0		; is Sonic within 128 pixels of	Eggman?
0001CBAE 6400                       		bcc.s	loc_19934	; if not, branch
0001CBB0 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001CBB4 317C 00B4 003C             		move.w	#180,$3C(a0)	; set delay to 3 seconds
0001CBBA 117C 0001 001C             		move.b	#1,obAnim(a0)
0001CBC0                            
0001CBC0                            loc_19934:
0001CBC0 4EF9 0000 FA78             		jmp	(SpeedToPos).l
0001CBC6                            ; ===========================================================================
0001CBC6                            
0001CBC6                            SEgg_PreLeap:
0001CBC6 5368 003C                  		subq.w	#1,$3C(a0)	; subtract 1 from time delay
0001CBCA 6600                       		bne.s	loc_19954	; if time remains, branch
0001CBCC 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001CBD0 117C 0002 001C             		move.b	#2,obAnim(a0)
0001CBD6 5868 000C                  		addq.w	#4,obY(a0)
0001CBDA 317C 000F 003C             		move.w	#15,$3C(a0)
0001CBE0                            
0001CBE0                            loc_19954:
0001CBE0 60DE                       		bra.s	loc_19934
0001CBE2                            ; ===========================================================================
0001CBE2                            
0001CBE2                            SEgg_Leap:
0001CBE2 5368 003C                  		subq.w	#1,$3C(a0)
0001CBE6 6E00                       		bgt.s	loc_199D0
0001CBE8 6600                       		bne.s	loc_1996A
0001CBEA 317C FF04 0010             		move.w	#-$FC,obVelX(a0) ; make Eggman leap
0001CBF0 317C FC40 0012             		move.w	#-$3C0,obVelY(a0)
0001CBF6                            
0001CBF6                            loc_1996A:
0001CBF6 0C68 1C32 0008             		cmpi.w	#$1C32,obX(a0)
0001CBFC 6E00                       		bgt.s	loc_19976
0001CBFE 4268 0010                  		clr.w	obVelX(a0)
0001CC02                            
0001CC02                            loc_19976:
0001CC02 0668 0024 0012             		addi.w	#$24,obVelY(a0)
0001CC08 4A68 0012                  		tst.w	obVelY(a0)
0001CC0C 6B00                       		bmi.s	SEgg_FindBlocks
0001CC0E 0C68 0295 000C             		cmpi.w	#$295,obY(a0)
0001CC14 6500                       		bcs.s	SEgg_FindBlocks
0001CC16 317C 5357 0028             		move.w	#$5357,obSubtype(a0)
0001CC1C 0C68 029B 000C             		cmpi.w	#$29B,obY(a0)
0001CC22 6500                       		bcs.s	SEgg_FindBlocks
0001CC24 317C 029B 000C             		move.w	#$29B,obY(a0)
0001CC2A 4268 0012                  		clr.w	obVelY(a0)
0001CC2E                            
0001CC2E                            SEgg_FindBlocks:
0001CC2E 3028 0010                  		move.w	obVelX(a0),d0
0001CC32 8068 0012                  		or.w	obVelY(a0),d0
0001CC36 6600                       		bne.s	loc_199D0
0001CC38 43F8 D000                  		lea	(v_objspace).w,a1 ; start at the first object RAM
0001CC3C 703E                       		moveq	#$3E,d0
0001CC3E 7240                       		moveq	#$40,d1
0001CC40                            
0001CC40                            SEgg_FindLoop:	
0001CC40 D2C1                       		adda.w	d1,a1		; jump to next object RAM
0001CC42 0C11 0083                  		cmpi.b	#id_FalseFloor,(a1) ; is object a block? (object $83)
0001CC46 57C8 FFF8                  		dbeq	d0,SEgg_FindLoop ; if not, repeat (max	$3E times)
0001CC4A                            
0001CC4A 6600                       		bne.s	loc_199D0
0001CC4C 337C 474F 0028             		move.w	#$474F,obSubtype(a1) ; set block to disintegrate
0001CC52 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001CC56 117C 0001 001C             		move.b	#1,obAnim(a0)
0001CC5C                            
0001CC5C                            loc_199D0:
0001CC5C 6000 FF62                  		bra.w	loc_19934
0001CC60                            ; ===========================================================================
0001CC60                            
0001CC60                            SEgg_Switch:	; Routine 4
0001CC60 7000                       		moveq	#0,d0
0001CC62 1028 0025                  		move.b	ob2ndRout(a0),d0
0001CC66 303B 0000                  		move.w	SEgg_SwIndex(pc,d0.w),d0
0001CC6A 4EFB 0000                  		jmp	SEgg_SwIndex(pc,d0.w)
0001CC6E                            ; ===========================================================================
0001CC6E 0000                       SEgg_SwIndex:	dc.w loc_199E6-SEgg_SwIndex
0001CC70 0000                       		dc.w SEgg_SwDisplay-SEgg_SwIndex
0001CC72                            ; ===========================================================================
0001CC72                            
0001CC72                            loc_199E6:
0001CC72 2268 0034                  		movea.l	$34(a0),a1
0001CC76 0C69 5357 0028             		cmpi.w	#$5357,obSubtype(a1)
0001CC7C 6600                       		bne.s	SEgg_SwDisplay
0001CC7E 117C 0001 001A             		move.b	#1,obFrame(a0)
0001CC84 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001CC88                            
0001CC88                            SEgg_SwDisplay:
0001CC88 4EF9 0000 FA8C             		jmp	(DisplaySprite).l
0001CC88 4EF9 0000 FA8C             		jmp	(DisplaySprite).l
0001CC8E                            		include	"_anim\Eggman - Scrap Brain 2 & Final.asm"
0001CC8E                            ; ---------------------------------------------------------------------------
0001CC8E                            ; Animation script - Eggman (SBZ2)
0001CC8E                            ; ---------------------------------------------------------------------------
0001CC8E 0000                       Ani_SEgg:	dc.w @stand-Ani_SEgg
0001CC90 0000                       		dc.w @laugh-Ani_SEgg
0001CC92 0000                       		dc.w @jump1-Ani_SEgg
0001CC94 0000                       		dc.w @intube-Ani_SEgg
0001CC96 0000                       		dc.w @running-Ani_SEgg
0001CC98 0000                       		dc.w @jump2-Ani_SEgg
0001CC9A 0000                       		dc.w @starjump-Ani_SEgg
0001CC9C 7E00 FF                    @stand:		dc.b $7E, 0, afEnd
0001CCA0 00                         		even
0001CCA0 0601 02FF                  @laugh:		dc.b 6,	1, 2, afEnd
0001CCA4 0E03 0404 0000 00FF        @jump1:		dc.b $E, 3, 4, 4, 0, 0,	0, afEnd
0001CCAC 0005 09FF                  @intube:	dc.b 0,	5, 9, afEnd
0001CCB0 0607 0408 04FF             @running:	dc.b 6,	7, 4, 8, 4, afEnd
0001CCB6 0F04 0303 FF               @jump2:		dc.b $F, 4, 3, 3, afEnd
0001CCBC 00                         		even
0001CCBC 7E06 FF                    @starjump:	dc.b $7E, 6, afEnd
0001CCC0 00                         		even
0001CCC0 00                         		even
0001CCC0                            Map_SEgg:	include	"_maps\Eggman - Scrap Brain 2.asm"
0001CCC0                            ; --------------------------------------------------------------------------------
0001CCC0                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0001CCC0                            ; --------------------------------------------------------------------------------
0001CCC0                            
0001CCC0                            SME_y00JM:	
0001CCC0 0000 0000                  		dc.w SME_y00JM_16-SME_y00JM, SME_y00JM_26-SME_y00JM	
0001CCC4 0000 0000                  		dc.w SME_y00JM_4A-SME_y00JM, SME_y00JM_6E-SME_y00JM	
0001CCC8 0000 0000                  		dc.w SME_y00JM_83-SME_y00JM, SME_y00JM_A7-SME_y00JM	
0001CCCC 0000 0000                  		dc.w SME_y00JM_BC-SME_y00JM, SME_y00JM_E0-SME_y00JM	
0001CCD0 0000 0000                  		dc.w SME_y00JM_FA-SME_y00JM, SME_y00JM_119-SME_y00JM	
0001CCD4 0000                       		dc.w SME_y00JM_142-SME_y00JM	
0001CCD6 03                         SME_y00JM_16:	dc.b 3	
0001CCD7 FC00 008F E8               		dc.b $FC, 0, 0, $8F, $E8	
0001CCDC E80E 0000 F0               		dc.b $E8, $E, 0, 0, $F0	
0001CCE1 000F 006F F0               		dc.b 0, $F, 0, $6F, $F0	
0001CCE6 07                         SME_y00JM_26:	dc.b 7	
0001CCE7 E80D 000E F0               		dc.b $E8, $D, 0, $E, $F0	
0001CCEC 000F 006F F0               		dc.b 0, $F, 0, $6F, $F0	
0001CCF1 FC00 008F E8               		dc.b $FC, 0, 0, $8F, $E8	
0001CCF6 F800 0002 F0               		dc.b $F8, 0, 0, 2, $F0	
0001CCFB F800 0005 F8               		dc.b $F8, 0, 0, 5, $F8	
0001CD00 F800 0008 00               		dc.b $F8, 0, 0, 8, 0	
0001CD05 F800 000B 08               		dc.b $F8, 0, 0, $B, 8	
0001CD0A 07                         SME_y00JM_4A:	dc.b 7	
0001CD0B E90D 000E F0               		dc.b $E9, $D, 0, $E, $F0	
0001CD10 FD00 008F E8               		dc.b $FD, 0, 0, $8F, $E8	
0001CD15 F900 0002 F0               		dc.b $F9, 0, 0, 2, $F0	
0001CD1A F900 0005 F8               		dc.b $F9, 0, 0, 5, $F8	
0001CD1F F900 0008 00               		dc.b $F9, 0, 0, 8, 0	
0001CD24 F900 000B 08               		dc.b $F9, 0, 0, $B, 8	
0001CD29 010F 007F F0               		dc.b 1, $F, 0, $7F, $F0	
0001CD2E 04                         SME_y00JM_6E:	dc.b 4	
0001CD2F F40F 0820 F0               		dc.b $F4, $F, 8, $20, $F0	
0001CD34 F504 0830 10               		dc.b $F5, 4, 8, $30, $10	
0001CD39 0809 084E F0               		dc.b 8, 9, 8, $4E, $F0	
0001CD3E EC0E 0000 F0               		dc.b $EC, $E, 0, 0, $F0	
0001CD43 07                         SME_y00JM_83:	dc.b 7	
0001CD44 F00F 0820 F0               		dc.b $F0, $F, 8, $20, $F0	
0001CD49 F104 0830 10               		dc.b $F1, 4, 8, $30, $10	
0001CD4E 0806 083E F8               		dc.b 8, 6, 8, $3E, $F8	
0001CD53 E800 0000 F0               		dc.b $E8, 0, 0, 0, $F0	
0001CD58 E800 0003 F8               		dc.b $E8, 0, 0, 3, $F8	
0001CD5D E800 0006 00               		dc.b $E8, 0, 0, 6, 0	
0001CD62 E800 0009 08               		dc.b $E8, 0, 0, 9, 8	
0001CD67 04                         SME_y00JM_A7:	dc.b 4	
0001CD68 E80D 0016 EC               		dc.b $E8, $D, 0, $16, $EC	
0001CD6D E801 001E 0C               		dc.b $E8, 1, 0, $1E, $C	
0001CD72 E80E 0000 F0               		dc.b $E8, $E, 0, 0, $F0	
0001CD77 000F 006F F0               		dc.b 0, $F, 0, $6F, $F0	
0001CD7C 07                         SME_y00JM_BC:	dc.b 7	
0001CD7D E80D 0016 EC               		dc.b $E8, $D, 0, $16, $EC	
0001CD82 E801 001E 0C               		dc.b $E8, 1, 0, $1E, $C	
0001CD87 0409 0834 00               		dc.b 4, 9, 8, $34, 0	
0001CD8C 0405 083A E8               		dc.b 4, 5, 8, $3A, $E8	
0001CD91 F00F 0820 F0               		dc.b $F0, $F, 8, $20, $F0	
0001CD96 F104 0854 10               		dc.b $F1, 4, 8, $54, $10	
0001CD9B F104 0054 E0               		dc.b $F1, 4, 0, $54, $E0	
0001CDA0 05                         SME_y00JM_E0:	dc.b 5	
0001CDA1 F00F 0820 F0               		dc.b $F0, $F, 8, $20, $F0	
0001CDA6 F104 0830 10               		dc.b $F1, 4, 8, $30, $10	
0001CDAB 0409 0834 00               		dc.b 4, 9, 8, $34, 0	
0001CDB0 0405 083A E8               		dc.b 4, 5, 8, $3A, $E8	
0001CDB5 E80E 0000 F0               		dc.b $E8, $E, 0, 0, $F0	
0001CDBA 06                         SME_y00JM_FA:	dc.b 6	
0001CDBB EE0F 0820 F0               		dc.b $EE, $F, 8, $20, $F0	
0001CDC0 EF04 0830 10               		dc.b $EF, 4, 8, $30, $10	
0001CDC5 0905 0844 00               		dc.b 9, 5, 8, $44, 0	
0001CDCA 0301 0848 F8               		dc.b 3, 1, 8, $48, $F8	
0001CDCF 0B05 084A E8               		dc.b $B, 5, 8, $4A, $E8	
0001CDD4 E60E 0000 F0               		dc.b $E6, $E, 0, 0, $F0	
0001CDD9 08                         SME_y00JM_119:	dc.b 8	
0001CDDA E80D 0016 EC               		dc.b $E8, $D, 0, $16, $EC	
0001CDDF E801 001E 0C               		dc.b $E8, 1, 0, $1E, $C	
0001CDE4 E80E 0000 F0               		dc.b $E8, $E, 0, 0, $F0	
0001CDE9 000F 006F F0               		dc.b 0, $F, 0, $6F, $F0	
0001CDEE E00D 3EF0 F0               		dc.b $E0, $D, $3E, $F0, $F0	
0001CDF3 F00D 3EF0 F0               		dc.b $F0, $D, $3E, $F0, $F0	
0001CDF8 000D 3EF0 F0               		dc.b 0, $D, $3E, $F0, $F0	
0001CDFD 100D 3EF0 F0               		dc.b $10, $D, $3E, $F0, $F0	
0001CE02 03                         SME_y00JM_142:	dc.b 3	
0001CE03 EC0D 0056 E4               		dc.b $EC, $D, 0, $56, $E4	
0001CE08 F408 005E 04               		dc.b $F4, 8, 0, $5E, 4	
0001CE0D EC0D 0061 FC               		dc.b $EC, $D, 0, $61, $FC	
0001CE12                            		even
0001CE12                            		even
0001CE12                            		include	"_incObj\83 SBZ Eggman's Crumbling Floor.asm"
0001CE12                            ; ---------------------------------------------------------------------------
0001CE12                            ; Object 83 - blocks that disintegrate Eggman	presses	a switch (SBZ2)
0001CE12                            ; ---------------------------------------------------------------------------
0001CE12                            
0001CE12                            FalseFloor:
0001CE12 7000                       		moveq	#0,d0
0001CE14 1028 0024                  		move.b	obRoutine(a0),d0
0001CE18 323B 0000                  		move.w	FFloor_Index(pc,d0.w),d1
0001CE1C 4EFB 1000                  		jmp	FFloor_Index(pc,d1.w)
0001CE20                            ; ===========================================================================
0001CE20 0000                       FFloor_Index:	dc.w FFloor_Main-FFloor_Index
0001CE22 0000                       		dc.w FFloor_ChkBreak-FFloor_Index
0001CE24 0000                       		dc.w loc_19C36-FFloor_Index
0001CE26 0000                       		dc.w loc_19C62-FFloor_Index
0001CE28 0000                       		dc.w loc_19C72-FFloor_Index
0001CE2A 0000                       		dc.w loc_19C80-FFloor_Index
0001CE2C                            ; ===========================================================================
0001CE2C                            
0001CE2C                            FFloor_Main:	; Routine 0
0001CE2C 317C 1B80 0008             		move.w	#$1B80,obX(a0)
0001CE32 317C 02D0 000C             		move.w	#$2D0,obY(a0)
0001CE38 117C 0080 0014             		move.b	#$80,obActWid(a0)
0001CE3E 117C 0010 0016             		move.b	#$10,obHeight(a0)
0001CE44 117C 0004 0001             		move.b	#4,obRender(a0)
0001CE4A 08E8 0007 0001             		bset	#7,obRender(a0)
0001CE50 7800                       		moveq	#0,d4
0001CE52 3A3C 1B10                  		move.w	#$1B10,d5
0001CE56 7C07                       		moveq	#7,d6
0001CE58 45E8 0030                  		lea	$30(a0),a2
0001CE5C                            
0001CE5C                            FFloor_MakeBlock:
0001CE5C 4EB9 0000 FF18             		jsr	(FindFreeObj).l
0001CE62 6600                       		bne.s	FFloor_ExitMake
0001CE64 34C9                       		move.w	a1,(a2)+
0001CE66 12BC 0083                  		move.b	#id_FalseFloor,(a1) ; load block object
0001CE6A 237C 0000 0000 0004        		move.l	#Map_FFloor,obMap(a1)
0001CE72 337C 4518 0002             		move.w	#$4518,obGfx(a1)
0001CE78 137C 0004 0001             		move.b	#4,obRender(a1)
0001CE7E 137C 0010 0014             		move.b	#$10,obActWid(a1)
0001CE84 137C 0010 0016             		move.b	#$10,obHeight(a1)
0001CE8A 337C 0180 0018             		move.w	#$180,obPriority(a1)
0001CE90 3345 0008                  		move.w	d5,obX(a1)	; set X	position
0001CE94 337C 02D0 000C             		move.w	#$2D0,obY(a1)
0001CE9A 0645 0020                  		addi.w	#$20,d5		; add $20 for next X position
0001CE9E 137C 0008 0024             		move.b	#8,obRoutine(a1)
0001CEA4 51CE FFB6                  		dbf	d6,FFloor_MakeBlock ; repeat sequence 7 more times
0001CEA8                            
0001CEA8                            FFloor_ExitMake:
0001CEA8 5428 0024                  		addq.b	#2,obRoutine(a0)
0001CEAC 4E75                       		rts	
0001CEAE                            ; ===========================================================================
0001CEAE                            
0001CEAE                            FFloor_ChkBreak:; Routine 2
0001CEAE 0C68 474F 0028             		cmpi.w	#$474F,obSubtype(a0) ; is object set to disintegrate?
0001CEB4 6600                       		bne.s	FFloor_Solid	; if not, branch
0001CEB6 4228 001A                  		clr.b	obFrame(a0)
0001CEBA 5428 0024                  		addq.b	#2,obRoutine(a0) ; next subroutine
0001CEBE                            
0001CEBE                            FFloor_Solid:
0001CEBE 7000                       		moveq	#0,d0
0001CEC0 1028 001A                  		move.b	obFrame(a0),d0
0001CEC4 4400                       		neg.b	d0
0001CEC6 4880                       		ext.w	d0
0001CEC8 5040                       		addq.w	#8,d0
0001CECA E940                       		asl.w	#4,d0
0001CECC 383C 1C00                  		move.w	#$1C00,d4
0001CED0 9840                       		sub.w	d0,d4
0001CED2 1140 0014                  		move.b	d0,obActWid(a0)
0001CED6 3144 0008                  		move.w	d4,obX(a0)
0001CEDA 720B                       		moveq	#$B,d1
0001CEDC D240                       		add.w	d0,d1
0001CEDE 7410                       		moveq	#$10,d2
0001CEE0 7611                       		moveq	#$11,d3
0001CEE2 4EF9 0001 1EAE             		jmp	(SolidObject).l
0001CEE8                            ; ===========================================================================
0001CEE8                            
0001CEE8                            loc_19C36:	; Routine 4
0001CEE8 0428 000E 001E             		subi.b	#$E,obTimeFrame(a0)
0001CEEE 6400                       		bcc.s	FFloor_Solid2
0001CEF0 70FF                       		moveq	#-1,d0
0001CEF2 1028 001A                  		move.b	obFrame(a0),d0
0001CEF6 4880                       		ext.w	d0
0001CEF8 D040                       		add.w	d0,d0
0001CEFA 3030 0030                  		move.w	$30(a0,d0.w),d0
0001CEFE 2240                       		movea.l	d0,a1
0001CF00 337C 474F 0028             		move.w	#$474F,obSubtype(a1)
0001CF06 5228 001A                  		addq.b	#1,obFrame(a0)
0001CF0A 0C28 0008 001A             		cmpi.b	#8,obFrame(a0)
0001CF10 6700                       		beq.s	loc_19C62
0001CF12                            
0001CF12                            FFloor_Solid2:
0001CF12 60AA                       		bra.s	FFloor_Solid
0001CF14                            ; ===========================================================================
0001CF14                            
0001CF14                            loc_19C62:	; Routine 6
0001CF14 08A8 0003 0022             		bclr	#3,obStatus(a0)
0001CF1A 08B8 0003 D022             		bclr	#3,(v_player+obStatus).w
0001CF20 6000 FB96                  		bra.w	loc_1982C
0001CF24                            ; ===========================================================================
0001CF24                            
0001CF24                            loc_19C72:	; Routine 8
0001CF24 0C68 474F 0028             		cmpi.w	#$474F,obSubtype(a0) ; is object set to disintegrate?
0001CF2A 6700                       		beq.s	FFloor_Break	; if yes, branch
0001CF2C 4EF9 0000 FA8C             		jmp	(DisplaySprite).l
0001CF32                            ; ===========================================================================
0001CF32                            
0001CF32                            loc_19C80:	; Routine $A
0001CF32 4A28 0001                  		tst.b	obRender(a0)
0001CF36 6A00 FB80                  		bpl.w	loc_1982C
0001CF3A 4EB9 0000 FA40             		jsr	(ObjectFall).l
0001CF40 4EF9 0000 FA8C             		jmp	(DisplaySprite).l
0001CF46                            ; ===========================================================================
0001CF46                            
0001CF46                            FFloor_Break:
0001CF46 49FA 0000                  		lea	FFloor_FragSpeed(pc),a4
0001CF4A 4BFA 0000                  		lea	FFloor_FragPos(pc),a5
0001CF4E 7801                       		moveq	#1,d4
0001CF50 7203                       		moveq	#3,d1
0001CF52 7438                       		moveq	#$38,d2
0001CF54 5428 0024                  		addq.b	#2,obRoutine(a0)
0001CF58 117C 0008 0014             		move.b	#8,obActWid(a0)
0001CF5E 117C 0008 0016             		move.b	#8,obHeight(a0)
0001CF64 43D0                       		lea	(a0),a1
0001CF66 6000                       		bra.s	FFloor_MakeFrag
0001CF68                            ; ===========================================================================
0001CF68                            
0001CF68                            FFloor_LoopFrag:
0001CF68 4EB9 0000 FF2E             		jsr	(FindNextFreeObj).l
0001CF6E 6600                       		bne.s	FFloor_BreakSnd
0001CF70                            
0001CF70                            FFloor_MakeFrag:
0001CF70 45D0                       		lea	(a0),a2
0001CF72 47D1                       		lea	(a1),a3
0001CF74 7603                       		moveq	#3,d3
0001CF76                            
0001CF76                            loc_19CC4:
0001CF76 26DA                       		move.l	(a2)+,(a3)+
0001CF78 26DA                       		move.l	(a2)+,(a3)+
0001CF7A 26DA                       		move.l	(a2)+,(a3)+
0001CF7C 26DA                       		move.l	(a2)+,(a3)+
0001CF7E 51CB FFF6                  		dbf	d3,loc_19CC4
0001CF82                            
0001CF82 335C 0012                  		move.w	(a4)+,obVelY(a1)
0001CF86 361D                       		move.w	(a5)+,d3
0001CF88 D769 0008                  		add.w	d3,obX(a1)
0001CF8C 361D                       		move.w	(a5)+,d3
0001CF8E D769 000C                  		add.w	d3,obY(a1)
0001CF92 1344 001A                  		move.b	d4,obFrame(a1)
0001CF96 5244                       		addq.w	#1,d4
0001CF98 51C9 FFCE                  		dbf	d1,FFloor_LoopFrag ; repeat sequence 3 more times
0001CF9C                            
0001CF9C                            FFloor_BreakSnd:
0001CFA6 4EF9 0000 FA8C             		jmp	(DisplaySprite).l
0001CFAC                            ; ===========================================================================
0001CFAC 0080 0000                  FFloor_FragSpeed:dc.w $80, 0
0001CFB0 0120 00C0                  		dc.w $120, $C0
0001CFB4 FFF8 FFF8                  FFloor_FragPos:	dc.w -8, -8
0001CFB8 0010 0000                  		dc.w $10, 0
0001CFBC 0000 0010                  		dc.w 0,	$10
0001CFC0 0010 0010                  		dc.w $10, $10
0001CFC0 0010 0010                  		dc.w $10, $10
0001CFC4                            Map_FFloor:	include	"_maps\SBZ Eggman's Crumbling Floor.asm"
0001CFC4                            ; ---------------------------------------------------------------------------
0001CFC4                            ; Sprite mappings - blocks that	disintegrate when Eggman presses a switch
0001CFC4                            ; ---------------------------------------------------------------------------
0001CFC4                            Map_FFloor_internal:
0001CFC4 0000                       		dc.w @wholeblock-Map_FFloor_internal
0001CFC6 0000                       		dc.w @topleft-Map_FFloor_internal
0001CFC8 0000                       		dc.w @topright-Map_FFloor_internal
0001CFCA 0000                       		dc.w @bottomleft-Map_FFloor_internal
0001CFCC 0000                       		dc.w @bottomright-Map_FFloor_internal
0001CFCE 01                         @wholeblock:	dc.b 1
0001CFCF F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
0001CFD4 02                         @topleft:	dc.b 2
0001CFD5 F801 0000 F8               		dc.b $F8, 1, 0,	0, $F8
0001CFDA F801 0004 00               		dc.b $F8, 1, 0,	4, 0
0001CFDF 00                         		dc.b 0
0001CFE0 02                         @topright:	dc.b 2
0001CFE1 F801 0008 F8               		dc.b $F8, 1, 0,	8, $F8
0001CFE6 F801 000C 00               		dc.b $F8, 1, 0,	$C, 0
0001CFEB 00                         		dc.b 0
0001CFEC 02                         @bottomleft:	dc.b 2
0001CFED F801 0002 F8               		dc.b $F8, 1, 0,	2, $F8
0001CFF2 F801 0006 00               		dc.b $F8, 1, 0,	6, 0
0001CFF7 00                         		dc.b 0
0001CFF8 02                         @bottomright:	dc.b 2
0001CFF9 F801 000A F8               		dc.b $F8, 1, 0,	$A, $F8
0001CFFE F801 000E 00               		dc.b $F8, 1, 0,	$E, 0
0001D004 00                         		even
0001D004 00                         		even
0001D004                            		include	"_incObj\85 Boss - Final.asm"
0001D004                            ; ---------------------------------------------------------------------------
0001D004                            ; Object 85 - Eggman (FZ)
0001D004                            ; ---------------------------------------------------------------------------
0001D004                            
0001D004                            Obj85_Delete:
0001D004 4EF9 0000 FACC             		jmp	(DeleteObject).l
0001D00A                            ; ===========================================================================
0001D00A                            
0001D00A                            BossFinal:
0001D00A 7000                       		moveq	#0,d0
0001D00C 1028 0024                  		move.b	obRoutine(a0),d0
0001D010 303B 0000                  		move.w	Obj85_Index(pc,d0.w),d0
0001D014 4EFB 0000                  		jmp	Obj85_Index(pc,d0.w)
0001D018                            ; ===========================================================================
0001D018 0000                       Obj85_Index:	dc.w Obj85_Main-Obj85_Index
0001D01A 0000                       		dc.w Obj85_Eggman-Obj85_Index
0001D01C 0000                       		dc.w loc_1A38E-Obj85_Index
0001D01E 0000                       		dc.w loc_1A346-Obj85_Index
0001D020 0000                       		dc.w loc_1A2C6-Obj85_Index
0001D022 0000                       		dc.w loc_1A3AC-Obj85_Index
0001D024 0000                       		dc.w loc_1A264-Obj85_Index
0001D026                            
0001D026 0100 0100 0470             Obj85_ObjData:	dc.w $100, $100, $470	; X pos, Y pos,	VRAM setting
0001D02C 0001 CCC0                  		dc.l Map_SEgg		; mappings pointer
0001D030 25B0 0590 0300             		dc.w $25B0, $590, $300
0001D036 0000 0000                  		dc.l Map_EggCyl
0001D03A 26E0 0596 03A0             		dc.w $26E0, $596, $3A0
0001D040 0000 0000                  		dc.l Map_FZLegs
0001D044 26E0 0596 0470             		dc.w $26E0, $596, $470
0001D04A 0001 CCC0                  		dc.l Map_SEgg
0001D04E 26E0 0596 0400             		dc.w $26E0, $596, $400
0001D054 0001 AF44                  		dc.l Map_Eggman
0001D058 26E0 0596 0400             		dc.w $26E0, $596, $400
0001D05E 0001 AF44                  		dc.l Map_Eggman
0001D062                            
0001D062                            Obj85_ObjData2:	; routine num, animation, sprite priority (high and low bytes), width, height		
0001D062 0200 0200 2019             		dc.b  2, 0, $02, $00, $20, $19
0001D068 0400 0080 1208             		dc.b  4, 0, $00, $80, $12,   8
0001D06E 0600 0180 0000             		dc.b  6, 0, $01, $80,   0,   0
0001D074 0800 0180 0000             		dc.b  8, 0, $01, $80,   0,   0
0001D07A 0A00 0180 2020             		dc.b $A, 0, $01, $80, $20, $20
0001D080 0C00 0180 0000             		dc.b $C, 0, $01, $80,   0,   0
0001D086                            ; ===========================================================================
0001D086                            
0001D086                            Obj85_Main:	; Routine 0
0001D086 45FA FF9E                  		lea	Obj85_ObjData(pc),a2
0001D08A 47FA FFD6                  		lea	Obj85_ObjData2(pc),a3
0001D08E 2248                       		movea.l	a0,a1
0001D090 7205                       		moveq	#5,d1
0001D092 6000                       		bra.s	Obj85_LoadBoss
0001D094                            ; ===========================================================================
0001D094                            
0001D094                            Obj85_Loop:
0001D094 4EB9 0000 FF2E             		jsr	(FindNextFreeObj).l
0001D09A 6600                       		bne.s	loc_19E20
0001D09C                            
0001D09C                            Obj85_LoadBoss:
0001D09C 12BC 0085                  		move.b	#id_BossFinal,(a1)
0001D0A0 335A 0008                  		move.w	(a2)+,obX(a1)
0001D0A4 335A 000C                  		move.w	(a2)+,obY(a1)
0001D0A8 335A 0002                  		move.w	(a2)+,obGfx(a1)
0001D0AC 235A 0004                  		move.l	(a2)+,obMap(a1)
0001D0B0 135B 0024                  		move.b	(a3)+,obRoutine(a1)
0001D0B4 135B 001C                  		move.b	(a3)+,obAnim(a1)
0001D0B8 335B 0018                  		move.w	(a3)+,obPriority(a1)
0001D0BC 135B 0014                  			move.b	(a3)+,obActWid(a1)
0001D0C0 135B 0016                  		move.b	(a3)+,obHeight(a1)
0001D0C4 137C 0004 0001             		move.b	#4,obRender(a1)
0001D0CA 08E8 0007 0001             		bset	#7,obRender(a0)
0001D0D0 2348 0034                  		move.l	a0,$34(a1)
0001D0D4 51C9 FFBE                  		dbf	d1,Obj85_Loop
0001D0D8                            
0001D0D8                            loc_19E20:
0001D0D8 45E8 0036                  		lea	$36(a0),a2
0001D0DC 4EB9 0000 FF18             		jsr	(FindFreeObj).l
0001D0E2 6600                       		bne.s	loc_19E5A
0001D0E4 12BC 0086                  		move.b	#id_BossPlasma,(a1) ; load energy ball object
0001D0E8 3489                       		move.w	a1,(a2)
0001D0EA 2348 0034                  		move.l	a0,$34(a1)
0001D0EE 45E8 0038                  		lea	$38(a0),a2
0001D0F2 7400                       		moveq	#0,d2
0001D0F4 7203                       		moveq	#3,d1
0001D0F6                            
0001D0F6                            loc_19E3E:
0001D0F6 4EB9 0000 FF2E             		jsr	(FindNextFreeObj).l
0001D0FC 6600                       		bne.s	loc_19E5A
0001D0FE 34C9                       		move.w	a1,(a2)+
0001D100 12BC 0084                  		move.b	#id_EggmanCylinder,(a1) ; load crushing	cylinder object
0001D104 2348 0034                  		move.l	a0,$34(a1)
0001D108 1342 0028                  		move.b	d2,obSubtype(a1)
0001D10C 5442                       		addq.w	#2,d2
0001D10E 51C9 FFE6                  		dbf	d1,loc_19E3E
0001D112                            
0001D112                            loc_19E5A:
0001D112 317C 0000 0034             		move.w	#0,$34(a0)
0001D118 117C 0004 0021             		move.b	#4,obColProp(a0) ; set number of hits to 8
0001D11E 317C FFFF 0030             		move.w	#-1,$30(a0)
0001D124                            
0001D124                            Obj85_Eggman:	; Routine 2
0001D124 7000                       		moveq	#0,d0
0001D126 1028 0034                  		move.b	$34(a0),d0
0001D12A 303B 0000                  		move.w	off_19E80(pc,d0.w),d0
0001D12E 4EBB 0000                  		jsr	off_19E80(pc,d0.w)
0001D132 4EF9 0000 FA8C             		jmp	(DisplaySprite).l
0001D138                            ; ===========================================================================
0001D138 0000 0000                  off_19E80:	dc.w loc_19E90-off_19E80, loc_19EA8-off_19E80
0001D13C 0000 0000                  		dc.w loc_19FE6-off_19E80, loc_1A02A-off_19E80
0001D140 0000 0000                  		dc.w loc_1A074-off_19E80, loc_1A112-off_19E80
0001D144 0000 0000                  		dc.w loc_1A192-off_19E80, loc_1A1D4-off_19E80
0001D148                            ; ===========================================================================
0001D148                            
0001D148                            loc_19E90:
0001D148 4AB8 F680                  		tst.l	(v_plc_buffer).w
0001D14C 6600                       		bne.s	loc_19EA2
0001D14E 0C78 2450 F700             		cmpi.w	#$2450,(v_screenposx).w
0001D154 6500                       		bcs.s	loc_19EA2
0001D156 5428 0034                  		addq.b	#2,$34(a0)
0001D15A                            
0001D15A                            loc_19EA2:
0001D15A 52B8 F636                  		addq.l	#1,(v_random).w
0001D15E 4E75                       		rts	
0001D160                            ; ===========================================================================
0001D160                            
0001D160                            loc_19EA8:
0001D160 4A68 0030                  		tst.w	$30(a0)
0001D164 6A00                       		bpl.s	loc_19F10
0001D166 4268 0030                  		clr.w	$30(a0)
0001D16A 4EB9 0000 3A5C             		jsr	(RandomNumber).l
0001D170 0240 000C                  		andi.w	#$C,d0
0001D174 3200                       		move.w	d0,d1
0001D176 5441                       		addq.w	#2,d1
0001D178 4A80                       		tst.l	d0
0001D17A 6A00                       		bpl.s	loc_19EC6
0001D17C C340                       		exg	d1,d0
0001D17E                            
0001D17E                            loc_19EC6:
0001D17E 43FA 0000                  		lea	word_19FD6(pc),a1
0001D182 3031 0000                  		move.w	(a1,d0.w),d0
0001D186 3231 1000                  		move.w	(a1,d1.w),d1
0001D18A 3140 0030                  		move.w	d0,$30(a0)
0001D18E 74FF                       		moveq	#-1,d2
0001D190 3430 0038                  		move.w	$38(a0,d0.w),d2
0001D194 2242                       		movea.l	d2,a1
0001D196 137C 00FF 0029             		move.b	#-1,$29(a1)
0001D19C 337C FFFF 0030             		move.w	#-1,$30(a1)
0001D1A2 3430 1038                  		move.w	$38(a0,d1.w),d2
0001D1A6 2242                       		movea.l	d2,a1
0001D1A8 137C 0001 0029             		move.b	#1,$29(a1)
0001D1AE 337C 0000 0030             		move.w	#0,$30(a1)
0001D1B4 317C 0001 0032             		move.w	#1,$32(a0)
0001D1BA 4228 0035                  		clr.b	$35(a0)
0001D1C8                            
0001D1C8                            loc_19F10:
0001D1C8 4A68 0032                  		tst.w	$32(a0)
0001D1CC 6B00 0000                  		bmi.w	loc_19FA6
0001D1D0 08A8 0000 0022             		bclr	#0,obStatus(a0)
0001D1D6 3038 D008                  		move.w	(v_player+obX).w,d0
0001D1DA 9068 0008                  		sub.w	obX(a0),d0
0001D1DE 6500                       		bcs.s	loc_19F2E
0001D1E0 08E8 0000 0022             		bset	#0,obStatus(a0)
0001D1E6                            
0001D1E6                            loc_19F2E:
0001D1E6 323C 002B                  		move.w	#$2B,d1
0001D1EA 343C 0014                  		move.w	#$14,d2
0001D1EE 363C 0014                  		move.w	#$14,d3
0001D1F2 3828 0008                  		move.w	obX(a0),d4
0001D1F6 4EB9 0001 1EAE             		jsr	(SolidObject).l
0001D1FC 4A44                       		tst.w	d4
0001D1FE 6E00                       		bgt.s	loc_19F50
0001D200                            
0001D200                            loc_19F48:
0001D200 4A28 0035                  		tst.b	$35(a0)
0001D204 6600                       		bne.s	loc_19F88
0001D206 6000                       		bra.s	loc_19F96
0001D208                            ; ===========================================================================
0001D208                            
0001D208                            loc_19F50:
0001D208 5E78 F636                  		addq.w	#7,(v_random).w
0001D20C 0C38 0002 D01C             		cmpi.b	#id_Roll,(v_player+obAnim).w
0001D212 66EC                       		bne.s	loc_19F48
0001D214 303C 0300                  		move.w	#$300,d0
0001D218 0828 0000 0022             		btst	#0,obStatus(a0)
0001D21E 6600                       		bne.s	loc_19F6A
0001D220 4440                       		neg.w	d0
0001D222                            
0001D222                            loc_19F6A:
0001D222 31C0 D010                  		move.w	d0,(v_player+obVelX).w
0001D226 4A28 0035                  		tst.b	$35(a0)
0001D22A 6600                       		bne.s	loc_19F88
0001D22C 5328 0021                  		subq.b	#1,obColProp(a0)
0001D230 117C 00FF 0035             		move.b	#$FF,$35(a0)
0001D236 4EB9 0000 0000             		jsr	(BossModeMusic).l ;	play boss damage sound
0001D23C                            
0001D23C                            loc_19F88:
0001D23C 5328 0035                  		subq.b	#1,$35(a0)
0001D240 6700                       		beq.s	loc_19F96
0001D242 117C 0003 001C             		move.b	#3,obAnim(a0)
0001D248 6000                       		bra.s	loc_19F9C
0001D24A                            ; ===========================================================================
0001D24A                            
0001D24A                            loc_19F96:
0001D24A 117C 0001 001C             		move.b	#1,obAnim(a0)
0001D250                            
0001D250                            loc_19F9C:
0001D250 43FA FA3C                  		lea	Ani_SEgg(pc),a1
0001D254 4EF9 0000 CB4E             		jmp	(AnimateSprite).l
0001D25A                            ; ===========================================================================
0001D25A                            
0001D25A                            loc_19FA6:
0001D25A 4A28 0021                  		tst.b	obColProp(a0)
0001D25E 6700                       		beq.s	loc_19FBC
0001D260 5428 0034                  		addq.b	#2,$34(a0)
0001D264 317C FFFF 0030             		move.w	#-1,$30(a0)
0001D26A 4268 0032                  		clr.w	$32(a0)
0001D26E 4E75                       		rts	
0001D270                            ; ===========================================================================
0001D270                            
0001D270                            loc_19FBC:
0001D270 7064                       			moveq	#100,d0
0001D272 6100 0000                  			bsr.w	AddPoints
0001D276 117C 0006 0034             		move.b	#6,$34(a0)
0001D27C 317C 25C0 0008             		move.w	#$25C0,obX(a0)
0001D282 317C 053C 000C             		move.w	#$53C,obY(a0)
0001D288 117C 0014 0016             		move.b	#$14,obHeight(a0)
0001D28E 4E75                       		rts	
0001D290                            ; ===========================================================================
0001D290 0000 0002 0002 0004 0004+  word_19FD6:	dc.w 0,	2, 2, 4, 4, 6, 6, 0
0001D2A0                            ; ===========================================================================
0001D2A0                            
0001D2A0                            loc_19FE6:
0001D2A0 70FF                       		moveq	#-1,d0
0001D2A2 3028 0036                  		move.w	$36(a0),d0
0001D2A6 2240                       		movea.l	d0,a1
0001D2A8 4A68 0030                  		tst.w	$30(a0)
0001D2AC 6A00                       		bpl.s	loc_1A000
0001D2AE 4268 0030                  		clr.w	$30(a0)
0001D2B2 137C 00FF 0029             		move.b	#-1,$29(a1)
0001D2B8 6100                       		bsr.s	loc_1A020
0001D2BA                            
0001D2BA                            loc_1A000:
0001D2BA 700F                       		moveq	#$F,d0
0001D2BC C078 FE0E                  		and.w	(v_vbla_word).w,d0
0001D2C0 6600                       		bne.s	loc_1A00A
0001D2C2 6100                       		bsr.s	loc_1A020
0001D2C4                            
0001D2C4                            loc_1A00A:
0001D2C4 4A68 0032                  		tst.w	$32(a0)
0001D2C8 6700                       		beq.s	locret_1A01E
0001D2CA 5528 0034                  		subq.b	#2,$34(a0)
0001D2CE 317C FFFF 0030             		move.w	#-1,$30(a0)
0001D2D4 4268 0032                  		clr.w	$32(a0)
0001D2D8                            
0001D2D8                            locret_1A01E:
0001D2D8 4E75                       		rts	
0001D2DA                            ; ===========================================================================
0001D2DA                            
0001D2DA                            loc_1A020:
0001D2E4                            ; ===========================================================================
0001D2E4                            
0001D2E4                            loc_1A02A:
0001D2E4 117C 0030 0014             			move.b	#$30,obActWid(a0)
0001D2EA 08E8 0000 0022             		bset	#0,obStatus(a0)
0001D2F0 4EB9 0000 FA78             		jsr	(SpeedToPos).l
0001D2F6 117C 0006 001A             		move.b	#6,obFrame(a0)
0001D2FC 0668 0010 0012             		addi.w	#$10,obVelY(a0)
0001D302 0C68 059C 000C             		cmpi.w	#$59C,obY(a0)
0001D308 6500                       		bcs.s	loc_1A070
0001D30A 317C 059C 000C             		move.w	#$59C,obY(a0)
0001D310 5428 0034                  		addq.b	#2,$34(a0)
0001D314 117C 0020 0014             			move.b	#$20,obActWid(a0)
0001D31A 317C 0100 0010             		move.w	#$100,obVelX(a0)
0001D320 317C FF00 0012             		move.w	#-$100,obVelY(a0)
0001D326 5438 F742                  		addq.b	#2,(v_dle_routine).w
0001D32A                            
0001D32A                            loc_1A070:
0001D32A 6000 0000                  		bra.w	loc_1A166
0001D32E                            ; ===========================================================================
0001D32E                            
0001D32E                            loc_1A074:
0001D32E 08E8 0000 0022             		bset	#0,obStatus(a0)
0001D334 117C 0004 001C             		move.b	#4,obAnim(a0)
0001D33A 4EB9 0000 FA78             		jsr	(SpeedToPos).l
0001D340 0668 0010 0012             		addi.w	#$10,obVelY(a0)
0001D346 0C68 05A3 000C             		cmpi.w	#$5A3,obY(a0)
0001D34C 6500                       		bcs.s	loc_1A09A
0001D34E 317C FFC0 0012             		move.w	#-$40,obVelY(a0)
0001D354                            
0001D354                            loc_1A09A:
0001D354 317C 0400 0010             		move.w	#$400,obVelX(a0)
0001D35A 3028 0008                  		move.w	obX(a0),d0
0001D35E 9078 D008                  		sub.w	(v_player+obX).w,d0
0001D362 6A00                       		bpl.s	loc_1A0B4
0001D364 317C 0500 0010             		move.w	#$500,obVelX(a0)
0001D36A 6000 0000                  		bra.w	loc_1A0F2
0001D36E                            ; ===========================================================================
0001D36E                            
0001D36E                            loc_1A0B4:
0001D36E 0440 0070                  		subi.w	#$70,d0
0001D372 6500                       		bcs.s	loc_1A0F2
0001D374 0468 0100 0010             		subi.w	#$100,obVelX(a0)
0001D37A 5140                       		subq.w	#8,d0
0001D37C 6500                       		bcs.s	loc_1A0F2
0001D37E 0468 0100 0010             		subi.w	#$100,obVelX(a0)
0001D384 5140                       		subq.w	#8,d0
0001D386 6500                       		bcs.s	loc_1A0F2
0001D388 0468 0080 0010             		subi.w	#$80,obVelX(a0)
0001D38E 5140                       		subq.w	#8,d0
0001D390 6500                       		bcs.s	loc_1A0F2
0001D392 0468 0080 0010             		subi.w	#$80,obVelX(a0)
0001D398 5140                       		subq.w	#8,d0
0001D39A 6500                       		bcs.s	loc_1A0F2
0001D39C 0468 0080 0010             		subi.w	#$80,obVelX(a0)
0001D3A2 0440 0038                  		subi.w	#$38,d0
0001D3A6 6500                       		bcs.s	loc_1A0F2
0001D3A8 4268 0010                  		clr.w	obVelX(a0)
0001D3AC                            
0001D3AC                            loc_1A0F2:
0001D3AC 0C68 26A0 0008             		cmpi.w	#$26A0,obX(a0)
0001D3B2 6500                       		bcs.s	loc_1A110
0001D3B4 317C 26A0 0008             		move.w	#$26A0,obX(a0)
0001D3BA 317C 0240 0010             		move.w	#$240,obVelX(a0)
0001D3C0 317C FB40 0012             		move.w	#-$4C0,obVelY(a0)
0001D3C6 5428 0034                  		addq.b	#2,$34(a0)
0001D3CA                            
0001D3CA                            loc_1A110:
0001D3CA 6000                       		bra.s	loc_1A15C
0001D3CC                            ; ===========================================================================
0001D3CC                            
0001D3CC                            loc_1A112:
0001D3CC 4EB9 0000 FA78             		jsr	(SpeedToPos).l
0001D3D2 0C68 26E0 0008             		cmpi.w	#$26E0,obX(a0)
0001D3D8 6500                       		bcs.s	loc_1A124
0001D3DA 4268 0010                  		clr.w	obVelX(a0)
0001D3DE                            
0001D3DE                            loc_1A124:
0001D3DE 0668 0034 0012             		addi.w	#$34,obVelY(a0)
0001D3E4 4A68 0012                  		tst.w	obVelY(a0)
0001D3E8 6B00                       		bmi.s	loc_1A142
0001D3EA 0C68 0592 000C             		cmpi.w	#$592,obY(a0)
0001D3F0 6500                       		bcs.s	loc_1A142
0001D3F2 317C 0592 000C             		move.w	#$592,obY(a0)
0001D3F8 4268 0012                  		clr.w	obVelY(a0)
0001D3FC                            
0001D3FC                            loc_1A142:
0001D3FC 3028 0010                  		move.w	obVelX(a0),d0
0001D400 8068 0012                  		or.w	obVelY(a0),d0
0001D404 6600                       		bne.s	loc_1A15C
0001D406 5428 0034                  		addq.b	#2,$34(a0)
0001D40A 317C FE80 0012             		move.w	#-$180,obVelY(a0)
0001D410 117C 0001 0021             		move.b	#1,obColProp(a0)
0001D416                            
0001D416                            loc_1A15C:
0001D416 43FA F876                  		lea	Ani_SEgg(pc),a1
0001D41A 4EB9 0000 CB4E             		jsr	(AnimateSprite).l
0001D420                            
0001D420                            loc_1A166:
0001D420 0C78 2700 F72A             		cmpi.w	#$2700,(v_limitright2).w
0001D426 6C00                       		bge.s	loc_1A172
0001D428 5478 F72A                  		addq.w	#2,(v_limitright2).w
0001D42C                            
0001D42C                            loc_1A172:
0001D42C 0C28 000C 0034             		cmpi.b	#$C,$34(a0)
0001D432 6C00                       		bge.s	locret_1A190
0001D434 323C 001B                  		move.w	#$1B,d1
0001D438 343C 0070                  		move.w	#$70,d2
0001D43C 363C 0071                  		move.w	#$71,d3
0001D440 3828 0008                  		move.w	obX(a0),d4
0001D444 4EF9 0001 1EAE             		jmp	(SolidObject).l
0001D44A                            ; ===========================================================================
0001D44A                            
0001D44A                            locret_1A190:
0001D44A 4E75                       		rts	
0001D44C                            ; ===========================================================================
0001D44C                            
0001D44C                            loc_1A192:
0001D44C 217C 0001 AF44 0004        		move.l	#Map_Eggman,obMap(a0)
0001D454 317C 0400 0002             		move.w	#$400,obGfx(a0)
0001D45A 117C 0000 001C             		move.b	#0,obAnim(a0)
0001D460 08E8 0000 0022             		bset	#0,obStatus(a0)
0001D466 4EB9 0000 FA78             		jsr	(SpeedToPos).l
0001D46C 0C68 0544 000C             		cmpi.w	#$544,obY(a0)
0001D472 6400                       		bcc.s	loc_1A1D0
0001D474 317C 0180 0010             		move.w	#$180,obVelX(a0)
0001D47A 317C FFE8 0012             		move.w	#-$18,obVelY(a0)
0001D480 117C 000F 0020             		move.b	#$F,obColType(a0)
0001D486 5428 0034                  		addq.b	#2,$34(a0)
0001D48A                            
0001D48A                            loc_1A1D0:
0001D48A 6000 FF8A                  		bra.w	loc_1A15C
0001D48E                            ; ===========================================================================
0001D48E                            
0001D48E                            loc_1A1D4:
0001D48E 08E8 0000 0022             		bset	#0,obStatus(a0)
0001D494 4EB9 0000 FA78             		jsr	(SpeedToPos).l
0001D49A 4A68 0030                  		tst.w	$30(a0)
0001D49E 6600                       		bne.s	loc_1A1FC
0001D4A0 4A28 0020                  		tst.b	obColType(a0)
0001D4A4 6600                       		bne.s	loc_1A216
0001D4A6 317C 001E 0030             		move.w	#$1E,$30(a0)
0001D4AC 4EB9 0000 0000             		jsr	(BossModeMusic).l ;	play boss damage sound
0001D4B2                            
0001D4B2                            loc_1A1FC:
0001D4B2 5368 0030                  		subq.w	#1,$30(a0)
0001D4B6 6600                       		bne.s	loc_1A216
0001D4B8 4A28 0022                  		tst.b	obStatus(a0)
0001D4BC 6A00                       		bpl.s	loc_1A210
0001D4BE 317C 0060 0012             		move.w	#$60,obVelY(a0)
0001D4C4 6000                       		bra.s	loc_1A216
0001D4C6                            ; ===========================================================================
0001D4C6                            
0001D4C6                            loc_1A210:
0001D4C6 117C 000F 0020             		move.b	#$F,obColType(a0)
0001D4CC                            
0001D4CC                            loc_1A216:
0001D4CC 0C78 2790 D008             		cmpi.w	#$2790,(v_player+obX).w
0001D4D2 6D00                       		blt.s	loc_1A23A
0001D4D4 11FC 0001 F7CC             		move.b	#1,(f_lockctrl).w
0001D4DA 31FC 0000 F602             		move.w	#0,(v_jpadhold2).w
0001D4E0 4278 D020                  		clr.w	(v_player+obInertia).w
0001D4E4 4A68 0012                  		tst.w	obVelY(a0)
0001D4E8 6A00                       		bpl.s	loc_1A248
0001D4EA 31FC 0100 F602             		move.w	#$100,(v_jpadhold2).w
0001D4F0                            
0001D4F0                            loc_1A23A:
0001D4F0 0C78 27E0 D008             		cmpi.w	#$27E0,(v_player+obX).w
0001D4F6 6D00                       		blt.s	loc_1A248
0001D4F8 31FC 27E0 D008             		move.w	#$27E0,(v_player+obX).w
0001D4FE                            
0001D4FE                            loc_1A248:
0001D4FE 0C68 2900 0008             		cmpi.w	#$2900,obX(a0)
0001D504 6500                       		bcs.s	loc_1A260
0001D506 4A28 0001                  		tst.b	obRender(a0)
0001D50A 6B00                       		bmi.s	loc_1A260
0001D50C 11FC 0018 F600             		move.b	#$18,(v_gamemode).w
0001D512 6000 FAF0                  		bra.w	Obj85_Delete
0001D516                            ; ===========================================================================
0001D516                            
0001D516                            loc_1A260:
0001D516 6000 FEFE                  		bra.w	loc_1A15C
0001D51A                            ; ===========================================================================
0001D51A                            
0001D51A                            loc_1A264:	; Routine 4
0001D51A 2268 0034                  		movea.l	$34(a0),a1
0001D51E 1011                       		move.b	(a1),d0
0001D520 B010                       		cmp.b	(a0),d0
0001D522 6600 FAE0                  		bne.w	Obj85_Delete
0001D526 117C 0007 001C             		move.b	#7,obAnim(a0)
0001D52C 0C29 000C 0034             		cmpi.b	#$C,$34(a1)
0001D532 6C00                       		bge.s	loc_1A280
0001D534 6000                       		bra.s	loc_1A2A6
0001D536                            ; ===========================================================================
0001D536                            
0001D536                            loc_1A280:
0001D536 4A69 0010                  		tst.w	obVelX(a1)
0001D53A 6700                       		beq.s	loc_1A28C
0001D53C 117C 000B 001C             		move.b	#$B,obAnim(a0)
0001D542                            
0001D542                            loc_1A28C:
0001D542 43FA D9B0                  		lea	Ani_Eggman(pc),a1
0001D546 4EB9 0000 CB4E             		jsr	(AnimateSprite).l
0001D54C                            
0001D54C                            loc_1A296:
0001D54C 2268 0034                  		movea.l	$34(a0),a1
0001D550 3169 0008 0008             		move.w	obX(a1),obX(a0)
0001D556 3169 000C 000C             		move.w	obY(a1),obY(a0)
0001D55C                            
0001D55C                            loc_1A2A6:
0001D55C 2268 0034                  		movea.l	$34(a0),a1
0001D560 1169 0022 0022             		move.b	obStatus(a1),obStatus(a0)
0001D566 7003                       		moveq	#3,d0
0001D568 C028 0022                  		and.b	obStatus(a0),d0
0001D56C 0228 00FC 0001             		andi.b	#$FC,obRender(a0)
0001D572 8128 0001                  		or.b	d0,obRender(a0)
0001D576 4EF9 0000 FA8C             		jmp	(DisplaySprite).l
0001D57C                            ; ===========================================================================
0001D57C                            
0001D57C                            loc_1A2C6:	; Routine 6
0001D57C 2268 0034                  		movea.l	$34(a0),a1
0001D580 1011                       		move.b	(a1),d0
0001D582 B010                       		cmp.b	(a0),d0
0001D584 6600 FA7E                  		bne.w	Obj85_Delete
0001D588 0CA9 0001 AF44 0004        		cmpi.l	#Map_Eggman,obMap(a1)
0001D590 6700                       		beq.s	loc_1A2E4
0001D592 117C 000A 001A             		move.b	#$A,obFrame(a0)
0001D598 60C2                       		bra.s	loc_1A2A6
0001D59A                            ; ===========================================================================
0001D59A                            
0001D59A                            loc_1A2E4:
0001D59A 117C 0001 001C             		move.b	#1,obAnim(a0)
0001D5A0 4A29 0021                  		tst.b	obColProp(a1)
0001D5A4 6F00                       		ble.s	loc_1A312
0001D5A6 117C 0006 001C             		move.b	#6,obAnim(a0)
0001D5AC 217C 0001 AF44 0004        		move.l	#Map_Eggman,obMap(a0)
0001D5B4 317C 0400 0002             		move.w	#$400,obGfx(a0)
0001D5BA 43FA D938                  		lea	Ani_Eggman(pc),a1
0001D5BE 4EB9 0000 CB4E             		jsr	(AnimateSprite).l
0001D5C4 6000 FF86                  		bra.w	loc_1A296
0001D5C8                            ; ===========================================================================
0001D5C8                            
0001D5C8                            loc_1A312:
0001D5C8 4A28 0001                  		tst.b	1(a0)
0001D5CC 6A00 FA36                  		bpl.w	Obj85_Delete
0001D5D0 6100 D4CC                  		bsr.w	BossDefeated
0001D5D4 317C 0100 0018             		move.w	#$100,obPriority(a0)
0001D5DA 117C 0000 001C             		move.b	#0,obAnim(a0)
0001D5E0 217C 0000 0000 0004        		move.l	#Map_FZDamaged,obMap(a0)
0001D5E8 317C 03A0 0002             		move.w	#$3A0,obGfx(a0)
0001D5EE 43FA 0000                  		lea	Ani_FZEgg(pc),a1
0001D5F2 4EB9 0000 CB4E             		jsr	(AnimateSprite).l
0001D5F8 6000 FF52                  		bra.w	loc_1A296
0001D5FC                            ; ===========================================================================
0001D5FC                            
0001D5FC                            loc_1A346:	; Routine 8
0001D5FC 08E8 0000 0022             		bset	#0,obStatus(a0)
0001D602 2268 0034                  		movea.l	$34(a0),a1
0001D606 0CA9 0001 AF44 0004        		cmpi.l	#Map_Eggman,obMap(a1)
0001D60E 6700                       		beq.s	loc_1A35E
0001D610 6000 FF4A                  		bra.w	loc_1A2A6
0001D614                            ; ===========================================================================
0001D614                            
0001D614                            loc_1A35E:
0001D614 3169 0008 0008             		move.w	obX(a1),obX(a0)
0001D61A 3169 000C 000C             		move.w	obY(a1),obY(a0)
0001D620 4A28 001E                  		tst.b	obTimeFrame(a0)
0001D624 6600                       		bne.s	loc_1A376
0001D626 117C 0014 001E             		move.b	#$14,obTimeFrame(a0)
0001D62C                            
0001D62C                            loc_1A376:
0001D62C 5328 001E                  		subq.b	#1,obTimeFrame(a0)
0001D630 6E00                       		bgt.s	loc_1A38A
0001D632 5228 001A                  		addq.b	#1,obFrame(a0)
0001D636 0C28 0002 001A             		cmpi.b	#2,obFrame(a0)
0001D63C 6E00 F9C6                  		bgt.w	Obj85_Delete
0001D640                            
0001D640                            loc_1A38A:
0001D640 6000 FF0A                  		bra.w	loc_1A296
0001D644                            ; ===========================================================================
0001D644                            
0001D644                            loc_1A38E:	; Routine $A
0001D644 117C 000B 001A             		move.b	#$B,obFrame(a0)
0001D64A 3038 D008                  		move.w	(v_player+obX).w,d0
0001D64E 9068 0008                  		sub.w	obX(a0),d0
0001D652 6500                       		bcs.s	loc_1A3A6
0001D654 4A28 0001                  		tst.b	obRender(a0)
0001D658 6A00 F9AA                  		bpl.w	Obj85_Delete
0001D65C                            
0001D65C                            loc_1A3A6:
0001D65C 4EF9 0000 FA8C             		jmp	(DisplaySprite).l
0001D662                            ; ===========================================================================
0001D662                            
0001D662                            loc_1A3AC:	; Routine $C
0001D662 117C 0000 001A             		move.b	#0,obFrame(a0)
0001D668 08E8 0000 0022             		bset	#0,obStatus(a0)
0001D66E 2268 0034                  		movea.l	$34(a0),a1
0001D672 0C29 000C 0034             		cmpi.b	#$C,$34(a1)
0001D678 6600                       		bne.s	loc_1A3D0
0001D67A 0CA9 0001 AF44 0004        		cmpi.l	#Map_Eggman,obMap(a1)
0001D682 6700 F980                  		beq.w	Obj85_Delete
0001D686                            
0001D686                            loc_1A3D0:
0001D686 6000 FED4                  		bra.w	loc_1A2A6
0001D68A                            		
0001D68A                            BossModeMusic:
0001D68A 0C28 0001 0021             		cmpi.b	#1,obColProp(a0)
0001D690 6600 0000                  		bne.w	NormalMode
0001D694 4EF9 0000 0000             		jmp	PinchMode
0001D69A                            
0001D69A                            NormalMode:
0001D69A 303C 00AC                  		move.w	#$AC,d0
0001D69E 4EB9 0000 12A0             		jsr	(PlaySound_Special).l
0001D6A4 4E75                       		rts
0001D6A6                            
0001D6A6                            PinchMode:
0001D6A6 303C 0094                  		move.w	#$94,d0
0001D6AA 4EB9 0000 12A0             		jsr	(PlaySound_Special).l
0001D6B0 303C 00E2                  		move.w	#$E2,d0
0001D6B4 4EB9 0000 129A             		jsr	(PlaySound).l
0001D6BA 4E75                       		rts		
0001D6BA 4E75                       		rts		
0001D6BC                            		include	"_anim\FZ Eggman in Ship.asm"
0001D6BC                            ; ---------------------------------------------------------------------------
0001D6BC                            ; Animation script - Eggman (FZ)
0001D6BC                            ; ---------------------------------------------------------------------------
0001D6BC 0000                       Ani_FZEgg:	dc.w byte_1A3D6-Ani_FZEgg
0001D6BE 0300 01FF                  byte_1A3D6:	dc.b 3,	0, 1, afEnd
0001D6C2                            		even
0001D6C2                            		even
0001D6C2                            Map_FZDamaged:	include	"_maps\FZ Damaged Eggmobile.asm"
0001D6C2                            ; ---------------------------------------------------------------------------
0001D6C2                            ; Sprite mappings - Eggman in broken eggmobile (FZ)
0001D6C2                            ; ---------------------------------------------------------------------------
0001D6C2                            Map_FZDamaged_internal:
0001D6C2 0000                       		dc.w @damage1-Map_FZDamaged_internal
0001D6C4 0000                       		dc.w @damage2-Map_FZDamaged_internal
0001D6C6 06                         @damage1:	dc.b 6
0001D6C7 E408 0020 F4               		dc.b $E4, 8, 0,	$20, $F4
0001D6CC EC0D 0023 E4               		dc.b $EC, $D, 0, $23, $E4
0001D6D1 EC09 002B 04               		dc.b $EC, 9, 0,	$2B, 4
0001D6D6 FC05 203A E4               		dc.b $FC, 5, $20, $3A, $E4
0001D6DB FC0E 203E 04               		dc.b $FC, $E, $20, $3E,	4
0001D6E0 1404 204A 04               		dc.b $14, 4, $20, $4A, 4
0001D6E5 06                         @damage2:	dc.b 6
0001D6E6 E40A 0031 F4               		dc.b $E4, $A, 0, $31, $F4
0001D6EB EC05 0023 E4               		dc.b $EC, 5, 0,	$23, $E4
0001D6F0 EC09 002B 04               		dc.b $EC, 9, 0,	$2B, 4
0001D6F5 FC05 203A E4               		dc.b $FC, 5, $20, $3A, $E4
0001D6FA FC0E 203E 04               		dc.b $FC, $E, $20, $3E,	4
0001D6FF 1404 204A 04               		dc.b $14, 4, $20, $4A, 4
0001D704                            		even
0001D704                            		even
0001D704                            Map_FZLegs:	include	"_maps\FZ Eggmobile Legs.asm"
0001D704                            ; ---------------------------------------------------------------------------
0001D704                            ; Sprite mappings - legs on Eggman's escape ship (FZ)
0001D704                            ; ---------------------------------------------------------------------------
0001D704                            Map_FZLegs_internal:
0001D704 0000                       		dc.w @extended-Map_FZLegs_internal
0001D706 0000                       		dc.w @halfway-Map_FZLegs_internal
0001D708 0000                       		dc.w @retracted-Map_FZLegs_internal
0001D70A 02                         @extended:	dc.b 2
0001D70B 140E 2800 F4               		dc.b $14, $E, $28, 0, $F4
0001D710 2400 280C EC               		dc.b $24, 0, $28, $C, $EC
0001D715 03                         @halfway:	dc.b 3
0001D716 0C05 280D 0C               		dc.b $C, 5, $28, $D, $C
0001D71B 1C00 2811 0C               		dc.b $1C, 0, $28, $11, $C
0001D720 140D 2812 EC               		dc.b $14, $D, $28, $12,	$EC
0001D725 02                         @retracted:	dc.b 2
0001D726 0C01 281A 0C               		dc.b $C, 1, $28, $1A, $C
0001D72B 140C 281C EC               		dc.b $14, $C, $28, $1C,	$EC
0001D730                            		even
0001D730                            		even
0001D730                            		include	"_incObj\84 FZ Eggman's Cylinders.asm"
0001D730                            ; ---------------------------------------------------------------------------
0001D730                            ; Object 84 - cylinder Eggman hides in (FZ)
0001D730                            ; ---------------------------------------------------------------------------
0001D730                            
0001D730                            Obj84_Delete:
0001D730 4EF9 0000 FACC             		jmp	(DeleteObject).l
0001D736                            ; ===========================================================================
0001D736                            
0001D736                            EggmanCylinder:
0001D736 7000                       		moveq	#0,d0
0001D738 1028 0024                  		move.b	obRoutine(a0),d0
0001D73C 303B 0000                  		move.w	Obj84_Index(pc,d0.w),d0
0001D740 4EFB 0000                  		jmp	Obj84_Index(pc,d0.w)
0001D744                            ; ===========================================================================
0001D744 0000                       Obj84_Index:	dc.w Obj84_Main-Obj84_Index
0001D746 0000                       		dc.w loc_1A4CE-Obj84_Index
0001D748 0000                       		dc.w loc_1A57E-Obj84_Index
0001D74A                            
0001D74A 24D0 0620                  Obj84_PosData:	dc.w $24D0, $620
0001D74E 2550 0620                  		dc.w $2550, $620
0001D752 2490 04C0                  		dc.w $2490, $4C0
0001D756 2510 04C0                  		dc.w $2510, $4C0
0001D75A                            ; ===========================================================================
0001D75A                            
0001D75A                            Obj84_Main:	; Routine
0001D75A 43FA FFEE                  		lea	Obj84_PosData(pc),a1
0001D75E 7000                       		moveq	#0,d0
0001D760 1028 0028                  		move.b	obSubtype(a0),d0
0001D764 D040                       		add.w	d0,d0
0001D766 D2C0                       		adda.w	d0,a1
0001D768 117C 0004 0001             		move.b	#4,obRender(a0)
0001D76E 08E8 0007 0001             		bset	#7,obRender(a0)
0001D774 08E8 0004 0001             		bset	#4,obRender(a0)
0001D77A 317C 0300 0002             		move.w	#$300,obGfx(a0)
0001D780 217C 0000 0000 0004        		move.l	#Map_EggCyl,obMap(a0)
0001D788 3159 0008                  		move.w	(a1)+,obX(a0)
0001D78C 3151 000C                  		move.w	(a1),obY(a0)
0001D790 3159 0038                  		move.w	(a1)+,$38(a0)
0001D794 117C 0020 0016             		move.b	#$20,obHeight(a0)
0001D79A 117C 0060 0017             		move.b	#$60,obWidth(a0)
0001D7A0 117C 0020 0014             		move.b	#$20,obActWid(a0)
0001D7A6 117C 0060 0016             		move.b	#$60,obHeight(a0)
0001D7AC 317C 0180 0018             		move.w	#$180,obPriority(a0)
0001D7B2 5428 0024                  		addq.b	#2,obRoutine(a0)
0001D7B6                            
0001D7B6                            loc_1A4CE:	; Routine 2
0001D7B6 0C28 0002 0028             		cmpi.b	#2,obSubtype(a0)
0001D7BC 6F00                       		ble.s	loc_1A4DC
0001D7BE 08E8 0001 0001             		bset	#1,obRender(a0)
0001D7C4                            
0001D7C4                            loc_1A4DC:
0001D7C4 42A8 003C                  		clr.l	$3C(a0)
0001D7C8 4A28 0029                  		tst.b	$29(a0)
0001D7CC 6700                       		beq.s	loc_1A4EA
0001D7CE 5428 0024                  		addq.b	#2,obRoutine(a0)
0001D7D2                            
0001D7D2                            loc_1A4EA:
0001D7D2 2028 003C                  		move.l	$3C(a0),d0
0001D7D6 2228 0038                  		move.l	$38(a0),d1
0001D7DA D280                       		add.l	d0,d1
0001D7DC 4841                       		swap	d1
0001D7DE 3141 000C                  		move.w	d1,obY(a0)
0001D7E2 0C28 0004 0024             		cmpi.b	#4,obRoutine(a0)
0001D7E8 6600                       		bne.s	loc_1A524
0001D7EA 4A68 0030                  		tst.w	$30(a0)
0001D7EE 6A00                       		bpl.s	loc_1A524
0001D7F0 70F6                       		moveq	#-$A,d0
0001D7F2 0C28 0002 0028             		cmpi.b	#2,obSubtype(a0)
0001D7F8 6F00                       		ble.s	loc_1A514
0001D7FA 700E                       		moveq	#$E,d0
0001D7FC                            
0001D7FC                            loc_1A514:
0001D7FC D240                       		add.w	d0,d1
0001D7FE 2268 0034                  		movea.l	$34(a0),a1
0001D802 3341 000C                  		move.w	d1,obY(a1)
0001D806 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001D80C                            
0001D80C                            loc_1A524:
0001D80C 323C 002B                  		move.w	#$2B,d1
0001D810 343C 0060                  		move.w	#$60,d2
0001D814 363C 0061                  		move.w	#$61,d3
0001D818 3828 0008                  		move.w	obX(a0),d4
0001D81C 4EB9 0001 1EAE             		jsr	(SolidObject).l
0001D822 7000                       		moveq	#0,d0
0001D824 3228 003C                  		move.w	$3C(a0),d1
0001D828 6A00                       		bpl.s	loc_1A550
0001D82A 4441                       		neg.w	d1
0001D82C 5141                       		subq.w	#8,d1
0001D82E 6500                       		bcs.s	loc_1A55C
0001D830 5200                       		addq.b	#1,d0
0001D832 E841                       		asr.w	#4,d1
0001D834 D041                       		add.w	d1,d0
0001D836 6000                       		bra.s	loc_1A55C
0001D838                            ; ===========================================================================
0001D838                            
0001D838                            loc_1A550:
0001D838 0441 0027                  		subi.w	#$27,d1
0001D83C 6500                       		bcs.s	loc_1A55C
0001D83E 5200                       		addq.b	#1,d0
0001D840 E841                       		asr.w	#4,d1
0001D842 D041                       		add.w	d1,d0
0001D844                            
0001D844                            loc_1A55C:
0001D844 1140 001A                  		move.b	d0,obFrame(a0)
0001D848 3038 D008                  		move.w	(v_player+obX).w,d0
0001D84C 9068 0008                  		sub.w	obX(a0),d0
0001D850 6B00                       		bmi.s	loc_1A578
0001D852 0440 0140                  		subi.w	#$140,d0
0001D856 6B00                       		bmi.s	loc_1A578
0001D858 4A28 0001                  		tst.b	obRender(a0)
0001D85C 6A00 FED2                  		bpl.w	Obj84_Delete
0001D860                            
0001D860                            loc_1A578:
0001D860 4EF9 0000 FA8C             		jmp	(DisplaySprite).l
0001D866                            ; ===========================================================================
0001D866                            
0001D866                            loc_1A57E:	; Routine 4
0001D866 7000                       		moveq	#0,d0
0001D868 1028 0028                  		move.b	obSubtype(a0),d0
0001D86C 303B 0000                  		move.w	off_1A590(pc,d0.w),d0
0001D870 4EBB 0000                  		jsr	off_1A590(pc,d0.w)
0001D874 6000 FF5C                  		bra.w	loc_1A4EA
0001D878                            ; ===========================================================================
0001D878 0000                       off_1A590:	dc.w loc_1A598-off_1A590
0001D87A 0000                       		dc.w loc_1A598-off_1A590
0001D87C 0000                       		dc.w loc_1A604-off_1A590
0001D87E 0000                       		dc.w loc_1A604-off_1A590
0001D880                            ; ===========================================================================
0001D880                            
0001D880                            loc_1A598:
0001D880 4A28 0029                  		tst.b	$29(a0)
0001D884 6600                       		bne.s	loc_1A5D4
0001D886 2268 0034                  		movea.l	$34(a0),a1
0001D88A 4A29 0021                  		tst.b	obColProp(a1)
0001D88E 6600                       		bne.s	loc_1A5B4
0001D890 6100 D20C                  		bsr.w	BossDefeated
0001D894 04A8 0001 0000 003C        		subi.l	#$10000,$3C(a0)
0001D89C                            
0001D89C                            loc_1A5B4:
0001D89C 06A8 0002 0000 003C        		addi.l	#$20000,$3C(a0)
0001D8A4 6400                       		bcc.s	locret_1A602
0001D8A6 42A8 003C                  		clr.l	$3C(a0)
0001D8AA 2268 0034                  		movea.l	$34(a0),a1
0001D8AE 5369 0032                  		subq.w	#1,$32(a1)
0001D8B2 4269 0030                  		clr.w	$30(a1)
0001D8B6 5528 0024                  		subq.b	#2,obRoutine(a0)
0001D8BA 4E75                       		rts	
0001D8BC                            ; ===========================================================================
0001D8BC                            
0001D8BC                            loc_1A5D4:
0001D8BC 0C68 FFF0 003C             		cmpi.w	#-$10,$3C(a0)
0001D8C2 6C00                       		bge.s	loc_1A5E4
0001D8C4 04A8 0002 8000 003C        		subi.l	#$28000,$3C(a0)
0001D8CC                            
0001D8CC                            loc_1A5E4:
0001D8CC 04A8 0000 8000 003C        		subi.l	#$8000,$3C(a0)
0001D8D4 0C68 FF60 003C             		cmpi.w	#-$A0,$3C(a0)
0001D8DA 6E00                       		bgt.s	locret_1A602
0001D8DC 4268 003E                  		clr.w	$3E(a0)
0001D8E0 317C FF60 003C             		move.w	#-$A0,$3C(a0)
0001D8E6 4228 0029                  		clr.b	$29(a0)
0001D8EA                            
0001D8EA                            locret_1A602:
0001D8EA 4E75                       		rts	
0001D8EC                            ; ===========================================================================
0001D8EC                            
0001D8EC                            loc_1A604:
0001D8EC 08E8 0001 0001             		bset	#1,obRender(a0)
0001D8F2 4A28 0029                  		tst.b	$29(a0)
0001D8F6 6600                       		bne.s	loc_1A646
0001D8F8 2268 0034                  		movea.l	$34(a0),a1
0001D8FC 4A29 0021                  		tst.b	obColProp(a1)
0001D900 6600                       		bne.s	loc_1A626
0001D902 6100 D19A                  		bsr.w	BossDefeated
0001D906 06A8 0001 0000 003C        		addi.l	#$10000,$3C(a0)
0001D90E                            
0001D90E                            loc_1A626:
0001D90E 04A8 0002 0000 003C        		subi.l	#$20000,$3C(a0)
0001D916 6400                       		bcc.s	locret_1A674
0001D918 42A8 003C                  		clr.l	$3C(a0)
0001D91C 2268 0034                  		movea.l	$34(a0),a1
0001D920 5369 0032                  		subq.w	#1,$32(a1)
0001D924 4269 0030                  		clr.w	$30(a1)
0001D928 5528 0024                  		subq.b	#2,obRoutine(a0)
0001D92C 4E75                       		rts	
0001D92E                            ; ===========================================================================
0001D92E                            
0001D92E                            loc_1A646:
0001D92E 0C68 0010 003C             		cmpi.w	#$10,$3C(a0)
0001D934 6D00                       		blt.s	loc_1A656
0001D936 06A8 0002 8000 003C        		addi.l	#$28000,$3C(a0)
0001D93E                            
0001D93E                            loc_1A656:
0001D93E 06A8 0000 8000 003C        		addi.l	#$8000,$3C(a0)
0001D946 0C68 00A0 003C             		cmpi.w	#$A0,$3C(a0)
0001D94C 6D00                       		blt.s	locret_1A674
0001D94E 4268 003E                  		clr.w	$3E(a0)
0001D952 317C 00A0 003C             		move.w	#$A0,$3C(a0)
0001D958 4228 0029                  		clr.b	$29(a0)
0001D95C                            
0001D95C                            locret_1A674:
0001D95C 4E75                       		rts	
0001D95C 4E75                       		rts	
0001D95E                            Map_EggCyl:	include	"_maps\FZ Eggman's Cylinders.asm"
0001D95E                            ; --------------------------------------------------------------------------------
0001D95E                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0001D95E                            ; --------------------------------------------------------------------------------
0001D95E                            
0001D95E                            SME_SCUpI:	
0001D95E 0000 0000                  		dc.w SME_SCUpI_18-SME_SCUpI, SME_SCUpI_37-SME_SCUpI	
0001D962 0000 0000                  		dc.w SME_SCUpI_60-SME_SCUpI, SME_SCUpI_93-SME_SCUpI	
0001D966 0000 0000                  		dc.w SME_SCUpI_D0-SME_SCUpI, SME_SCUpI_112-SME_SCUpI	
0001D96A 0000 0000                  		dc.w SME_SCUpI_159-SME_SCUpI, SME_SCUpI_1A0-SME_SCUpI	
0001D96E 0000 0000                  		dc.w SME_SCUpI_1E7-SME_SCUpI, SME_SCUpI_22E-SME_SCUpI	
0001D972 0000 0000                  		dc.w SME_SCUpI_275-SME_SCUpI, SME_SCUpI_2BC-SME_SCUpI	
0001D976 06                         SME_SCUpI_18:	dc.b 6	
0001D977 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0	
0001D97C B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0	
0001D981 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0	
0001D986 B80F 4010 E0               		dc.b $B8, $F, $40, $10, $E0	
0001D98B B80F 4810 00               		dc.b $B8, $F, $48, $10, 0	
0001D990 A00D 4060 00               		dc.b $A0, $D, $40, $60, 0	
0001D995 08                         SME_SCUpI_37:	dc.b 8	
0001D996 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0	
0001D99B B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0	
0001D9A0 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0	
0001D9A5 B80F 4010 E0               		dc.b $B8, $F, $40, $10, $E0	
0001D9AA B80F 4810 00               		dc.b $B8, $F, $48, $10, 0	
0001D9AF D80F 4020 E0               		dc.b $D8, $F, $40, $20, $E0	
0001D9B4 D80F 4820 00               		dc.b $D8, $F, $48, $20, 0	
0001D9B9 A00D 4060 00               		dc.b $A0, $D, $40, $60, 0	
0001D9BE 0A                         SME_SCUpI_60:	dc.b $A	
0001D9BF A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0	
0001D9C4 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0	
0001D9C9 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0	
0001D9CE B80F 4010 E0               		dc.b $B8, $F, $40, $10, $E0	
0001D9D3 B80F 4810 00               		dc.b $B8, $F, $48, $10, 0	
0001D9D8 D80F 4020 E0               		dc.b $D8, $F, $40, $20, $E0	
0001D9DD D80F 4820 00               		dc.b $D8, $F, $48, $20, 0	
0001D9E2 F80F 4030 E0               		dc.b $F8, $F, $40, $30, $E0	
0001D9E7 F80F 4830 00               		dc.b $F8, $F, $48, $30, 0	
0001D9EC A00D 4060 00               		dc.b $A0, $D, $40, $60, 0	
0001D9F1 0C                         SME_SCUpI_93:	dc.b $C	
0001D9F2 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0	
0001D9F7 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0	
0001D9FC B00C 200C 00               		dc.b $B0, $C, $20, $C, 0	
0001DA01 B80F 4010 E0               		dc.b $B8, $F, $40, $10, $E0	
0001DA06 B80F 4810 00               		dc.b $B8, $F, $48, $10, 0	
0001DA0B D80F 4020 E0               		dc.b $D8, $F, $40, $20, $E0	
0001DA10 D80F 4820 00               		dc.b $D8, $F, $48, $20, 0	
0001DA15 F80F 4030 E0               		dc.b $F8, $F, $40, $30, $E0	
0001DA1A F80F 4830 00               		dc.b $F8, $F, $48, $30, 0	
0001DA1F 180F 4040 E0               		dc.b $18, $F, $40, $40, $E0	
0001DA24 180F 4840 00               		dc.b $18, $F, $48, $40, 0	
0001DA29 A00D 4060 00               		dc.b $A0, $D, $40, $60, 0	
0001DA2E 0D                         SME_SCUpI_D0:	dc.b $D	
0001DA2F A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0	
0001DA34 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0	
0001DA39 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0	
0001DA3E B80F 4010 E0               		dc.b $B8, $F, $40, $10, $E0	
0001DA43 B80F 4810 00               		dc.b $B8, $F, $48, $10, 0	
0001DA48 D80F 4020 E0               		dc.b $D8, $F, $40, $20, $E0	
0001DA4D D80F 4820 00               		dc.b $D8, $F, $48, $20, 0	
0001DA52 F80F 4030 E0               		dc.b $F8, $F, $40, $30, $E0	
0001DA57 F80F 4830 00               		dc.b $F8, $F, $48, $30, 0	
0001DA5C 180F 4040 E0               		dc.b $18, $F, $40, $40, $E0	
0001DA61 180F 4840 00               		dc.b $18, $F, $48, $40, 0	
0001DA66 380F 4050 F0               		dc.b $38, $F, $40, $50, $F0	
0001DA6B A00D 4060 00               		dc.b $A0, $D, $40, $60, 0	
0001DA70 0E                         SME_SCUpI_112:	dc.b $E	
0001DA71 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0	
0001DA76 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0	
0001DA7B B00C 200C 00               		dc.b $B0, $C, $20, $C, 0	
0001DA80 B80F 4010 E0               		dc.b $B8, $F, $40, $10, $E0	
0001DA85 B80F 4810 00               		dc.b $B8, $F, $48, $10, 0	
0001DA8A D80F 4020 E0               		dc.b $D8, $F, $40, $20, $E0	
0001DA8F D80F 4820 00               		dc.b $D8, $F, $48, $20, 0	
0001DA94 F80F 4030 E0               		dc.b $F8, $F, $40, $30, $E0	
0001DA99 F80F 4830 00               		dc.b $F8, $F, $48, $30, 0	
0001DA9E 180F 4040 E0               		dc.b $18, $F, $40, $40, $E0	
0001DAA3 180F 4840 00               		dc.b $18, $F, $48, $40, 0	
0001DAA8 380F 4050 F0               		dc.b $38, $F, $40, $50, $F0	
0001DAAD 580F 4050 F0               		dc.b $58, $F, $40, $50, $F0	
0001DAB2 A00D 4060 00               		dc.b $A0, $D, $40, $60, 0	
0001DAB7 0E                         SME_SCUpI_159:	dc.b $E	
0001DAB8 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0	
0001DABD B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0	
0001DAC2 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0	
0001DAC7 B80F 4010 E0               		dc.b $B8, $F, $40, $10, $E0	
0001DACC B80F 4810 00               		dc.b $B8, $F, $48, $10, 0	
0001DAD1 D80F 4020 E0               		dc.b $D8, $F, $40, $20, $E0	
0001DAD6 D80F 4820 00               		dc.b $D8, $F, $48, $20, 0	
0001DADB F80F 4030 E0               		dc.b $F8, $F, $40, $30, $E0	
0001DAE0 F80F 4830 00               		dc.b $F8, $F, $48, $30, 0	
0001DAE5 180F 4040 E0               		dc.b $18, $F, $40, $40, $E0	
0001DAEA 180F 4840 00               		dc.b $18, $F, $48, $40, 0	
0001DAEF 380F 4050 F0               		dc.b $38, $F, $40, $50, $F0	
0001DAF4 580F 4050 F0               		dc.b $58, $F, $40, $50, $F0	
0001DAF9 A00D 4060 00               		dc.b $A0, $D, $40, $60, 0	
0001DAFE 0E                         SME_SCUpI_1A0:	dc.b $E	
0001DAFF A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0	
0001DB04 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0	
0001DB09 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0	
0001DB0E B80F 4010 E0               		dc.b $B8, $F, $40, $10, $E0	
0001DB13 B80F 4810 00               		dc.b $B8, $F, $48, $10, 0	
0001DB18 D80F 4020 E0               		dc.b $D8, $F, $40, $20, $E0	
0001DB1D D80F 4820 00               		dc.b $D8, $F, $48, $20, 0	
0001DB22 F80F 4030 E0               		dc.b $F8, $F, $40, $30, $E0	
0001DB27 F80F 4830 00               		dc.b $F8, $F, $48, $30, 0	
0001DB2C 180F 4040 E0               		dc.b $18, $F, $40, $40, $E0	
0001DB31 180F 4840 00               		dc.b $18, $F, $48, $40, 0	
0001DB36 380F 4050 F0               		dc.b $38, $F, $40, $50, $F0	
0001DB3B 580F 4050 F0               		dc.b $58, $F, $40, $50, $F0	
0001DB40 A00D 4060 00               		dc.b $A0, $D, $40, $60, 0	
0001DB45 0E                         SME_SCUpI_1E7:	dc.b $E	
0001DB46 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0	
0001DB4B B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0	
0001DB50 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0	
0001DB55 B80F 4010 E0               		dc.b $B8, $F, $40, $10, $E0	
0001DB5A B80F 4810 00               		dc.b $B8, $F, $48, $10, 0	
0001DB5F D80F 4020 E0               		dc.b $D8, $F, $40, $20, $E0	
0001DB64 D80F 4820 00               		dc.b $D8, $F, $48, $20, 0	
0001DB69 F80F 4030 E0               		dc.b $F8, $F, $40, $30, $E0	
0001DB6E F80F 4830 00               		dc.b $F8, $F, $48, $30, 0	
0001DB73 180F 4040 E0               		dc.b $18, $F, $40, $40, $E0	
0001DB78 180F 4840 00               		dc.b $18, $F, $48, $40, 0	
0001DB7D 380F 4050 F0               		dc.b $38, $F, $40, $50, $F0	
0001DB82 580F 4050 F0               		dc.b $58, $F, $40, $50, $F0	
0001DB87 A00D 4060 00               		dc.b $A0, $D, $40, $60, 0	
0001DB8C 0E                         SME_SCUpI_22E:	dc.b $E	
0001DB8D A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0	
0001DB92 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0	
0001DB97 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0	
0001DB9C B80F 4010 E0               		dc.b $B8, $F, $40, $10, $E0	
0001DBA1 B80F 4810 00               		dc.b $B8, $F, $48, $10, 0	
0001DBA6 D80F 4020 E0               		dc.b $D8, $F, $40, $20, $E0	
0001DBAB D80F 4820 00               		dc.b $D8, $F, $48, $20, 0	
0001DBB0 F80F 4030 E0               		dc.b $F8, $F, $40, $30, $E0	
0001DBB5 F80F 4830 00               		dc.b $F8, $F, $48, $30, 0	
0001DBBA 180F 4040 E0               		dc.b $18, $F, $40, $40, $E0	
0001DBBF 180F 4840 00               		dc.b $18, $F, $48, $40, 0	
0001DBC4 380F 4050 F0               		dc.b $38, $F, $40, $50, $F0	
0001DBC9 580F 4050 F0               		dc.b $58, $F, $40, $50, $F0	
0001DBCE A00D 4060 00               		dc.b $A0, $D, $40, $60, 0	
0001DBD3 0E                         SME_SCUpI_275:	dc.b $E	
0001DBD4 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0	
0001DBD9 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0	
0001DBDE B00C 200C 00               		dc.b $B0, $C, $20, $C, 0	
0001DBE3 B80F 4010 E0               		dc.b $B8, $F, $40, $10, $E0	
0001DBE8 B80F 4810 00               		dc.b $B8, $F, $48, $10, 0	
0001DBED D80F 4020 E0               		dc.b $D8, $F, $40, $20, $E0	
0001DBF2 D80F 4820 00               		dc.b $D8, $F, $48, $20, 0	
0001DBF7 F80F 4030 E0               		dc.b $F8, $F, $40, $30, $E0	
0001DBFC F80F 4830 00               		dc.b $F8, $F, $48, $30, 0	
0001DC01 180F 4040 E0               		dc.b $18, $F, $40, $40, $E0	
0001DC06 180F 4840 00               		dc.b $18, $F, $48, $40, 0	
0001DC0B 380F 4050 F0               		dc.b $38, $F, $40, $50, $F0	
0001DC10 580F 4050 F0               		dc.b $58, $F, $40, $50, $F0	
0001DC15 A00D 4060 00               		dc.b $A0, $D, $40, $60, 0	
0001DC1A 02                         SME_SCUpI_2BC:	dc.b 2	
0001DC1B F804 0068 F0               		dc.b $F8, 4, 0, $68, $F0	
0001DC20 000C 006A F0               		dc.b 0, $C, 0, $6A, $F0	
0001DC26 00                         		even
0001DC26 00                         		even
0001DC26                            		include	"_incObj\86 FZ Plasma Ball Launcher.asm"
0001DC26                            ; ---------------------------------------------------------------------------
0001DC26                            ; Object 86 - energy balls (FZ)
0001DC26                            ; ---------------------------------------------------------------------------
0001DC26                            
0001DC26                            BossPlasma:
0001DC26 7000                       		moveq	#0,d0
0001DC28 1028 0024                  		move.b	obRoutine(a0),d0
0001DC2C 303B 0000                  		move.w	Obj86_Index(pc,d0.w),d0
0001DC30 4EFB 0000                  		jmp	Obj86_Index(pc,d0.w)
0001DC34                            ; ===========================================================================
0001DC34 0000                       Obj86_Index:	dc.w Obj86_Main-Obj86_Index
0001DC36 0000                       		dc.w Obj86_Generator-Obj86_Index
0001DC38 0000                       		dc.w Obj86_MakeBalls-Obj86_Index
0001DC3A 0000                       		dc.w loc_1A962-Obj86_Index
0001DC3C 0000                       		dc.w loc_1A982-Obj86_Index
0001DC3E                            ; ===========================================================================
0001DC3E                            
0001DC3E                            Obj86_Main:	; Routine 0
0001DC3E 317C 2588 0008             		move.w	#$2588,obX(a0)
0001DC44 317C 053C 000C             		move.w	#$53C,obY(a0)
0001DC4A 317C 0300 0002             		move.w	#$300,obGfx(a0)
0001DC50 217C 0000 0000 0004        		move.l	#Map_PLaunch,obMap(a0)
0001DC58 117C 0000 001C             		move.b	#0,obAnim(a0)
0001DC5E 317C 0180 0018             		move.w	#$180,obPriority(a0)
0001DC64 117C 0008 0017             		move.b	#8,obWidth(a0)
0001DC6A 117C 0008 0016             		move.b	#8,obHeight(a0)
0001DC70 117C 0004 0001             		move.b	#4,obRender(a0)
0001DC76 08E8 0007 0001             		bset	#7,obRender(a0)
0001DC7C 5428 0024                  		addq.b	#2,obRoutine(a0)
0001DC80                            
0001DC80                            Obj86_Generator:; Routine 2
0001DC80 2268 0034                  		movea.l	$34(a0),a1
0001DC84 0C29 0006 0034             		cmpi.b	#6,$34(a1)
0001DC8A 6600                       		bne.s	loc_1A850
0001DC8C 10BC 003F                  		move.b	#id_ExplosionBomb,(a0)
0001DC90 117C 0000 0024             		move.b	#0,obRoutine(a0)
0001DC96 4EF9 0000 FA8C             		jmp	(DisplaySprite).l
0001DC9C                            ; ===========================================================================
0001DC9C                            
0001DC9C                            loc_1A850:
0001DC9C 117C 0000 001C             		move.b	#0,obAnim(a0)
0001DCA2 4A28 0029                  		tst.b	$29(a0)
0001DCA6 6700                       		beq.s	loc_1A86C
0001DCA8 5428 0024                  		addq.b	#2,obRoutine(a0)
0001DCAC 117C 0001 001C             		move.b	#1,obAnim(a0)
0001DCB2 117C 003E 0028             		move.b	#$3E,obSubtype(a0)
0001DCB8                            
0001DCB8                            loc_1A86C:
0001DCB8 323C 0013                  		move.w	#$13,d1
0001DCBC 343C 0008                  		move.w	#8,d2
0001DCC0 363C 0011                  		move.w	#$11,d3
0001DCC4 3828 0008                  		move.w	obX(a0),d4
0001DCC8 4EB9 0001 1EAE             		jsr	(SolidObject).l
0001DCCE 3038 D008                  		move.w	(v_player+obX).w,d0
0001DCD2 9068 0008                  		sub.w	obX(a0),d0
0001DCD6 6B00                       		bmi.s	loc_1A89A
0001DCD8 0440 0140                  		subi.w	#$140,d0
0001DCDC 6B00                       		bmi.s	loc_1A89A
0001DCDE 4A28 0001                  		tst.b	obRender(a0)
0001DCE2 6A00 FA4C                  		bpl.w	Obj84_Delete
0001DCE6                            
0001DCE6                            loc_1A89A:
0001DCE6 43FA 0000                  		lea	Ani_PLaunch(pc),a1
0001DCEA 4EB9 0000 CB4E             		jsr	(AnimateSprite).l
0001DCF0 4EF9 0000 FA8C             		jmp	(DisplaySprite).l
0001DCF6                            ; ===========================================================================
0001DCF6                            
0001DCF6                            Obj86_MakeBalls:; Routine 4
0001DCF6 4A28 0029                  		tst.b	$29(a0)
0001DCFA 6700 0000                  		beq.w	loc_1A954
0001DCFE 4228 0029                  		clr.b	$29(a0)
0001DD02 D068 0030                  		add.w	$30(a0),d0
0001DD06 0240 001E                  		andi.w	#$1E,d0
0001DD0A D4C0                       		adda.w	d0,a2
0001DD0C 5868 0030                  		addq.w	#4,$30(a0)
0001DD10 4268 0032                  		clr.w	$32(a0)
0001DD14 7403                       		moveq	#3,d2
0001DD16                            
0001DD16                            Obj86_Loop:
0001DD16 4EB9 0000 FF2E             		jsr	(FindNextFreeObj).l
0001DD1C 6600 0000                  		bne.w	loc_1A954
0001DD20 12BC 0086                  		move.b	#id_BossPlasma,(a1)
0001DD24 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001DD2A 337C 053C 000C             		move.w	#$53C,obY(a1)
0001DD30 137C 0008 0024             		move.b	#8,obRoutine(a1)
0001DD36 337C 2300 0002             		move.w	#$2300,obGfx(a1)
0001DD3C 237C 0000 0000 0004        		move.l	#Map_Plasma,obMap(a1)
0001DD44 137C 000C 0016             		move.b	#$C,obHeight(a1)
0001DD4A 137C 000C 0017             		move.b	#$C,obWidth(a1)
0001DD50 137C 0000 0020             		move.b	#0,obColType(a1)
0001DD56 337C 0180 0018             		move.w	#$180,obPriority(a1)
0001DD5C 337C 003E 0028             		move.w	#$3E,obSubtype(a1)
0001DD62 137C 0004 0001             		move.b	#4,obRender(a1)
0001DD68 08E9 0007 0001             		bset	#7,obRender(a1)
0001DD6E 2348 0034                  		move.l	a0,$34(a1)
0001DD72 4EB9 0000 3A5C             		jsr	(RandomNumber).l
0001DD78 3228 0032                  		move.w	$32(a0),d1
0001DD7C C3FC FFB1                  		muls.w	#-$4F,d1
0001DD80 0641 2578                  		addi.w	#$2578,d1
0001DD84 0240 001F                  		andi.w	#$1F,d0
0001DD88 0440 0010                  		subi.w	#$10,d0
0001DD8C D041                       		add.w	d1,d0
0001DD8E 3340 0030                  		move.w	d0,$30(a1)
0001DD92 5268 0032                  		addq.w	#1,$32(a0)
0001DD96 3168 0032 0038             		move.w	$32(a0),$38(a0)
0001DD9C 51CA FF78                  		dbf	d2,Obj86_Loop	; repeat sequence 3 more times
0001DDA0                            
0001DDA0                            loc_1A954:
0001DDA0 4A68 0032                  		tst.w	$32(a0)
0001DDA4 6600                       		bne.s	loc_1A95E
0001DDA6 5428 0024                  		addq.b	#2,obRoutine(a0)
0001DDAA                            
0001DDAA                            loc_1A95E:
0001DDAA 6000 FF0C                  		bra.w	loc_1A86C
0001DDAE                            ; ===========================================================================
0001DDAE                            
0001DDAE                            loc_1A962:	; Routine 6
0001DDAE 117C 0002 001C             		move.b	#2,obAnim(a0)
0001DDB4 4A68 0038                  		tst.w	$38(a0)
0001DDB8 6600                       		bne.s	loc_1A97E
0001DDBA 117C 0002 0024             		move.b	#2,obRoutine(a0)
0001DDC0 2268 0034                  		movea.l	$34(a0),a1
0001DDC4 337C FFFF 0032             		move.w	#-1,$32(a1)
0001DDCA                            
0001DDCA                            loc_1A97E:
0001DDCA 6000 FEEC                  		bra.w	loc_1A86C
0001DDCE                            ; ===========================================================================
0001DDCE                            
0001DDCE                            loc_1A982:	; Routine 8
0001DDCE 7000                       		moveq	#0,d0
0001DDD0 1028 0025                  		move.b	ob2ndRout(a0),d0
0001DDD4 303B 0000                  		move.w	Obj86_Index2(pc,d0.w),d0
0001DDD8 4EBB 0000                  		jsr	Obj86_Index2(pc,d0.w)
0001DDDC 43FA 0000                  		lea	Ani_Plasma(pc),a1
0001DDE0 4EB9 0000 CB4E             		jsr	(AnimateSprite).l
0001DDE6 4EF9 0000 FA8C             		jmp	(DisplaySprite).l
0001DDEC                            ; ===========================================================================
0001DDEC 0000                       Obj86_Index2:	dc.w loc_1A9A6-Obj86_Index2
0001DDEE 0000                       		dc.w loc_1A9C0-Obj86_Index2
0001DDF0 0000                       		dc.w loc_1AA1E-Obj86_Index2
0001DDF2                            ; ===========================================================================
0001DDF2                            
0001DDF2                            loc_1A9A6:
0001DDF2 3028 0030                  		move.w	$30(a0),d0
0001DDF6 9068 0008                  		sub.w	obX(a0),d0
0001DDFA E940                       		asl.w	#4,d0
0001DDFC 3140 0010                  		move.w	d0,obVelX(a0)
0001DE00 317C 00B4 0028             		move.w	#$B4,obSubtype(a0)
0001DE06 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001DE0A 4E75                       		rts	
0001DE0C                            ; ===========================================================================
0001DE0C                            
0001DE0C                            loc_1A9C0:
0001DE0C 4A68 0010                  		tst.w	obVelX(a0)
0001DE10 6700                       		beq.s	loc_1A9E6
0001DE12 4EB9 0000 FA78             		jsr	(SpeedToPos).l
0001DE18 3028 0008                  		move.w	obX(a0),d0
0001DE1C 9068 0030                  		sub.w	$30(a0),d0
0001DE20 6400                       		bcc.s	loc_1A9E6
0001DE22 4268 0010                  		clr.w	obVelX(a0)
0001DE26 D168 0008                  		add.w	d0,obX(a0)
0001DE2A 2268 0034                  		movea.l	$34(a0),a1
0001DE2E 5369 0032                  		subq.w	#1,$32(a1)
0001DE32                            
0001DE32                            loc_1A9E6:
0001DE32 117C 0000 001C             		move.b	#0,obAnim(a0)
0001DE38 5368 0028                  		subq.w	#1,obSubtype(a0)
0001DE3C 6600                       		bne.s	locret_1AA1C
0001DE3E 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001DE42 117C 0001 001C             		move.b	#1,obAnim(a0)
0001DE48 117C 009A 0020             		move.b	#$9A,obColType(a0)
0001DE4E 317C 00B4 0028             		move.w	#$B4,obSubtype(a0)
0001DE54 7000                       		moveq	#0,d0
0001DE56 3038 D008                  		move.w	(v_player+obX).w,d0
0001DE5A 9068 0008                  		sub.w	obX(a0),d0
0001DE5E 3140 0010                  		move.w	d0,obVelX(a0)
0001DE62 317C 0140 0012             		move.w	#$140,obVelY(a0)
0001DE68                            
0001DE68                            locret_1AA1C:
0001DE68 4E75                       		rts	
0001DE6A                            ; ===========================================================================
0001DE6A                            
0001DE6A                            loc_1AA1E:
0001DE6A 4EB9 0000 FA78             		jsr	(SpeedToPos).l
0001DE70 0C68 05E0 000C             		cmpi.w	#$5E0,obY(a0)
0001DE76 6400                       		bcc.s	loc_1AA34
0001DE78 5368 0028                  		subq.w	#1,obSubtype(a0)
0001DE7C 6700                       		beq.s	loc_1AA34
0001DE7E 4E75                       		rts	
0001DE80                            ; ===========================================================================
0001DE80                            
0001DE80                            loc_1AA34:
0001DE80 2268 0034                  		movea.l	$34(a0),a1
0001DE84 5369 0038                  		subq.w	#1,$38(a1)
0001DE88 6000 F8A6                  		bra.w	Obj84_Delete
0001DE88 6000 F8A6                  		bra.w	Obj84_Delete
0001DE8C                            		include	"_anim\Plasma Ball Launcher.asm"
0001DE8C                            ; ---------------------------------------------------------------------------
0001DE8C                            ; Animation script - energy ball launcher (FZ)
0001DE8C                            ; ---------------------------------------------------------------------------
0001DE8C 0000                       Ani_PLaunch:	dc.w @red-Ani_PLaunch
0001DE8E 0000                       		dc.w @redsparking-Ani_PLaunch
0001DE90 0000                       		dc.w @whitesparking-Ani_PLaunch
0001DE92 7E00 FF                    @red:		dc.b $7E, 0, afEnd
0001DE96 00                         		even
0001DE96 0100 0200 03FF             @redsparking:	dc.b 1,	0, 2, 0, 3, afEnd
0001DE9C                            		even
0001DE9C 0101 0201 03FF             @whitesparking:	dc.b 1,	1, 2, 1, 3, afEnd
0001DEA2                            		even
0001DEA2                            		even
0001DEA2                            Map_PLaunch:	include	"_maps\Plasma Ball Launcher.asm"
0001DEA2                            ; ---------------------------------------------------------------------------
0001DEA2                            ; Sprite mappings - energy ball	launcher (FZ)
0001DEA2                            ; ---------------------------------------------------------------------------
0001DEA2                            Map_PLaunch_internal:
0001DEA2 0000                       		dc.w @red-Map_PLaunch_internal
0001DEA4 0000                       		dc.w @white-Map_PLaunch_internal
0001DEA6 0000                       		dc.w @sparking1-Map_PLaunch_internal
0001DEA8 0000                       		dc.w @sparking2-Map_PLaunch_internal
0001DEAA 01                         @red:		dc.b 1
0001DEAB F805 006E F8               		dc.b $F8, 5, 0,	$6E, $F8
0001DEB0 01                         @white:		dc.b 1
0001DEB1 F805 0076 F8               		dc.b $F8, 5, 0,	$76, $F8
0001DEB6 01                         @sparking1:	dc.b 1
0001DEB7 F805 0072 F8               		dc.b $F8, 5, 0,	$72, $F8
0001DEBC 01                         @sparking2:	dc.b 1
0001DEBD F805 1072 F8               		dc.b $F8, 5, $10, $72, $F8
0001DEC2                            		even
0001DEC2                            		even
0001DEC2                            		include	"_anim\Plasma Balls.asm"
0001DEC2                            ; ---------------------------------------------------------------------------
0001DEC2                            ; Animation script - energy balls (FZ)
0001DEC2                            ; ---------------------------------------------------------------------------
0001DEC2 0000                       Ani_Plasma:	dc.w @full-Ani_Plasma
0001DEC4 0000                       		dc.w @short-Ani_Plasma
0001DEC6 0100 0A08 0A01 0A09 0A06+  @full:		dc.b 1,	0, $A, 8, $A, 1, $A, 9,	$A, 6, $A, 7, $A, 0, $A
0001DED5 080A 010A 090A 060A 070A+  		dc.b 8,	$A, 1, $A, 9, $A, 6, $A, 7, $A,	2, $A, 3, $A, 4
0001DEE4 0A05 FF                    		dc.b $A, 5, afEnd
0001DEE8 00                         		even
0001DEE8 0006 0501 0507 0501 05FF   @short:		dc.b 0,	6, 5, 1, 5, 7, 5, 1, 5,	afEnd
0001DEF2                            		even
0001DEF2                            		even
0001DEF2                            Map_Plasma:	include	"_maps\Plasma Balls.asm"
0001DEF2                            ; ---------------------------------------------------------------------------
0001DEF2                            ; Sprite mappings - energy balls (FZ)
0001DEF2                            ; ---------------------------------------------------------------------------
0001DEF2                            Map_Plasma_internal:
0001DEF2 0000                       		dc.w @fuzzy1-Map_Plasma_internal
0001DEF4 0000                       		dc.w @fuzzy2-Map_Plasma_internal
0001DEF6 0000                       		dc.w @white1-Map_Plasma_internal
0001DEF8 0000                       		dc.w @white2-Map_Plasma_internal
0001DEFA 0000                       		dc.w @white3-Map_Plasma_internal
0001DEFC 0000                       		dc.w @white4-Map_Plasma_internal
0001DEFE 0000                       		dc.w @fuzzy3-Map_Plasma_internal
0001DF00 0000                       		dc.w @fuzzy4-Map_Plasma_internal
0001DF02 0000                       		dc.w @fuzzy5-Map_Plasma_internal
0001DF04 0000                       		dc.w @fuzzy6-Map_Plasma_internal
0001DF06 0000                       		dc.w @blank-Map_Plasma_internal
0001DF08 02                         @fuzzy1:	dc.b 2
0001DF09 F00D 007A F0               		dc.b $F0, $D, 0, $7A, $F0
0001DF0E 000D 187A F0               		dc.b 0,	$D, $18, $7A, $F0
0001DF13 02                         @fuzzy2:	dc.b 2
0001DF14 F406 0082 F4               		dc.b $F4, 6, 0,	$82, $F4
0001DF19 F402 1882 04               		dc.b $F4, 2, $18, $82, 4
0001DF1E 02                         @white1:	dc.b 2
0001DF1F F804 0088 F8               		dc.b $F8, 4, 0,	$88, $F8
0001DF24 0004 1088 F8               		dc.b 0,	4, $10,	$88, $F8
0001DF29 02                         @white2:	dc.b 2
0001DF2A F804 008A F8               		dc.b $F8, 4, 0,	$8A, $F8
0001DF2F 0004 108A F8               		dc.b 0,	4, $10,	$8A, $F8
0001DF34 02                         @white3:	dc.b 2
0001DF35 F804 008C F8               		dc.b $F8, 4, 0,	$8C, $F8
0001DF3A 0004 108C F8               		dc.b 0,	4, $10,	$8C, $F8
0001DF3F 02                         @white4:	dc.b 2
0001DF40 F406 008E F4               		dc.b $F4, 6, 0,	$8E, $F4
0001DF45 F402 188E 04               		dc.b $F4, 2, $18, $8E, 4
0001DF4A 01                         @fuzzy3:	dc.b 1
0001DF4B F805 0094 F8               		dc.b $F8, 5, 0,	$94, $F8
0001DF50 01                         @fuzzy4:	dc.b 1
0001DF51 F805 0098 F8               		dc.b $F8, 5, 0,	$98, $F8
0001DF56 02                         @fuzzy5:	dc.b 2
0001DF57 F00D 087A F0               		dc.b $F0, $D, 8, $7A, $F0
0001DF5C 000D 107A F0               		dc.b 0,	$D, $10, $7A, $F0
0001DF61 02                         @fuzzy6:	dc.b 2
0001DF62 F406 1082 F4               		dc.b $F4, 6, $10, $82, $F4
0001DF67 F402 0882 04               		dc.b $F4, 2, 8,	$82, 4
0001DF6C 00                         @blank:		dc.b 0
0001DF6E 00                         		even
0001DF6E 00                         		even
0001DF6E                            
0001DF6E                            		include	"_incObj\3E Prison Capsule.asm"
0001DF6E                            ; ---------------------------------------------------------------------------
0001DF6E                            ; Object 3E - prison capsule
0001DF6E                            ; ---------------------------------------------------------------------------
0001DF6E                            
0001DF6E                            Prison:
0001DF6E 7000                       		moveq	#0,d0
0001DF70 1028 0024                  		move.b	obRoutine(a0),d0
0001DF74 323B 0000                  		move.w	Pri_Index(pc,d0.w),d1
0001DF78 4EBB 1000                  		jsr	Pri_Index(pc,d1.w)
0001DF98 4EF9 0000 FA8C             		jmp	(DisplaySprite).l
0001DF9E                            
0001DF9E                            	@delete:
0001DF9E 4EF9 0000 FACC             		jmp	(DeleteObject).l
0001DFA4                            ; ===========================================================================
0001DFA4 0000                       Pri_Index:	dc.w Pri_Main-Pri_Index
0001DFA6 0000                       		dc.w Pri_BodyMain-Pri_Index
0001DFA8 0000                       		dc.w Pri_Switched-Pri_Index
0001DFAA 0000                       		dc.w Pri_Explosion-Pri_Index
0001DFAC 0000                       		dc.w Pri_Explosion-Pri_Index
0001DFAE 0000                       		dc.w Pri_Explosion-Pri_Index
0001DFB0 0000                       		dc.w Pri_Animals-Pri_Index
0001DFB2 0000                       		dc.w Pri_EndAct-Pri_Index
0001DFB4                            
0001DFB4 =00000030                  pri_origY:	equ $30		; original y-axis position
0001DFB4                            
0001DFB4 0220 0400                  Pri_Var:	dc.b 2,	$20, 4,	0	; routine, width, priority, frame
0001DFB8 040C 0501                  		dc.b 4,	$C, 5, 1
0001DFBC 0610 0403                  		dc.b 6,	$10, 4,	3
0001DFC0 0810 0305                  		dc.b 8,	$10, 3,	5
0001DFC4                            ; ===========================================================================
0001DFC4                            
0001DFC4                            Pri_Main:	; Routine 0
0001DFC4 217C 0000 0000 0004        		move.l	#Map_Pri,obMap(a0)
0001DFCC 317C 049D 0002             		move.w	#$49D,obGfx(a0)
0001DFD2 117C 0004 0001             		move.b	#4,obRender(a0)
0001DFD8 3168 000C 0030             		move.w	obY(a0),pri_origY(a0)
0001DFDE 7000                       		moveq	#0,d0
0001DFE0 1028 0028                  		move.b	obSubtype(a0),d0
0001DFE4 E548                       		lsl.w	#2,d0
0001DFE6 43FB 00CC                  		lea	Pri_Var(pc,d0.w),a1
0001DFEA 1159 0024                  		move.b	(a1)+,obRoutine(a0)
0001DFEE 1159 0014                  		move.b	(a1)+,obActWid(a0)
0001DFF2 1159 0018                  		move.b	(a1)+,obPriority(a0)
0001DFF6 3028 0018                  		move.w obPriority(a0),d0 
0001DFFA E248                       		lsr.w #1,d0 
0001DFFC 0240 0380                  		andi.w #$380,d0 
0001E000 3140 0018                  		move.w d0,obPriority(a0)		
0001E004 1159 001A                  		move.b	(a1)+,obFrame(a0)
0001E008 0C40 0008                  		cmpi.w	#8,d0		; is object type number	02?
0001E00C 6600                       		bne.s	@not02		; if not, branch
0001E00E                            
0001E00E 117C 0006 0020             		move.b	#6,obColType(a0)
0001E014 117C 0008 0021             		move.b	#8,obColProp(a0)
0001E01A                            
0001E01A                            	@not02:
0001E01A 4E75                       		rts	
0001E01C                            ; ===========================================================================
0001E01C                            
0001E01C                            Pri_BodyMain:	; Routine 2
0001E01C 0C38 0002 F7A7             		cmpi.b	#2,(v_bossstatus).w
0001E022 6700                       		beq.s	@chkopened
0001E024 323C 002B                  		move.w	#$2B,d1
0001E028 343C 0018                  		move.w	#$18,d2
0001E02C 363C 0018                  		move.w	#$18,d3
0001E030 3828 0008                  		move.w	obX(a0),d4
0001E034 4EF9 0001 1EAE             		jmp	(SolidObject).l
0001E03A                            ; ===========================================================================
0001E03A                            
0001E03A                            @chkopened:
0001E03A 4A28 0025                  		tst.b	ob2ndRout(a0)	; has the prison been opened?
0001E03E 6700                       		beq.s	@open		; if yes, branch
0001E040 4228 0025                  		clr.b	ob2ndRout(a0)
0001E044 08B8 0003 D022             		bclr	#3,(v_player+obStatus).w
0001E04A 08F8 0001 D022             		bset	#1,(v_player+obStatus).w
0001E050                            
0001E050                            	@open:
0001E050 117C 0002 001A             		move.b	#2,obFrame(a0)	; use frame number 2 (destroyed	prison)
0001E056 4A38 F5C3                  		tst.b	(f_emeraldm).w
0001E05A 6700                       		beq.s	@rts
0001E05C 5238 FE57                  		addq.b	#1,(v_emeralds).w ; add 1 to number of emeralds
0001E06A 4E75                       		rts	
0001E06C                            		
0001E06C                            	@rts:
0001E06C 4E75                       		rts
0001E06E                            ; ===========================================================================
0001E06E                            
0001E06E                            Pri_Switched:	; Routine 4
0001E06E 323C 0017                  		move.w	#$17,d1
0001E072 343C 0008                  		move.w	#8,d2
0001E076 363C 0008                  		move.w	#8,d3
0001E07A 3828 0008                  		move.w	obX(a0),d4
0001E07E 4EB9 0001 1EAE             		jsr	(SolidObject).l
0001E084 43F9 0000 0000             		lea	(Ani_Pri).l,a1
0001E08A 4EB9 0000 CB4E             		jsr	(AnimateSprite).l
0001E090 3168 0030 000C             		move.w	pri_origY(a0),obY(a0)
0001E096 4A28 0025                  		tst.b	ob2ndRout(a0)	; has prison already been opened?
0001E09A 6700                       		beq.s	@open2		; if yes, branch
0001E09C                            
0001E09C 5068 000C                  		addq.w	#8,obY(a0)
0001E0A0 117C 000A 0024             		move.b	#$A,obRoutine(a0)
0001E0A6 317C 003C 001E             		move.w	#60,obTimeFrame(a0) ; set time between animal spawns
0001E0AC 4238 FE1E                  		clr.b	(f_timecount).w	; stop time counter
0001E0B0 4238 F7AA                  		clr.b	(f_lockscreen).w ; lock screen position
0001E0B4 11FC 0001 F7CC             		move.b	#1,(f_lockctrl).w ; lock controls
0001E0BA 31FC 0800 F602             		move.w	#(btnR<<8),(v_jpadhold2).w ; make Sonic run to the right
0001E0C0 4228 0025                  		clr.b	ob2ndRout(a0)
0001E0C4 08B8 0003 D022             		bclr	#3,(v_player+obStatus).w
0001E0CA 08F8 0001 D022             		bset	#1,(v_player+obStatus).w
0001E0D0                            
0001E0D0                            	@open2:
0001E0D0 4E75                       		rts	
0001E0D2                            ; ===========================================================================
0001E0D2                            
0001E0D2                            Pri_Explosion:	; Routine 6, 8, $A
0001E0D2 7007                       		moveq	#7,d0
0001E0D4 C038 FE0F                  		and.b	(v_vbla_byte).w,d0
0001E0D8 6600                       		bne.s	@noexplosion
0001E0DA 4EB9 0000 FF18             		jsr	(FindFreeObj).l
0001E0E0 6600                       		bne.s	@noexplosion
0001E0E2 12BC 003F                  		move.b	#id_ExplosionBomb,0(a1) ; load explosion object
0001E0E6 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001E0EC 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001E0F2 4EB9 0000 3A5C             		jsr	(RandomNumber).l
0001E0F8 7200                       		moveq	#0,d1
0001E0FA 1200                       		move.b	d0,d1
0001E0FC E409                       		lsr.b	#2,d1
0001E0FE 0441 0020                  		subi.w	#$20,d1
0001E102 D369 0008                  		add.w	d1,obX(a1)
0001E106 E048                       		lsr.w	#8,d0
0001E108 E608                       		lsr.b	#3,d0
0001E10A D169 000C                  		add.w	d0,obY(a1)
0001E10E                            
0001E10E                            	@noexplosion:
0001E10E 5368 001E                  		subq.w	#1,obTimeFrame(a0)
0001E112 6700                       		beq.s	@makeanimal
0001E114 4E75                       		rts	
0001E116                            ; ===========================================================================
0001E116                            
0001E116                            @makeanimal:
0001E116 11FC 0002 F7A7             		move.b	#2,(v_bossstatus).w
0001E11C 117C 000C 0024             		move.b	#$C,obRoutine(a0)	; replace explosions with animals
0001E122 117C 0006 001A             		move.b	#6,obFrame(a0)
0001E128 317C 0096 001E             		move.w	#150,obTimeFrame(a0)
0001E12E 0668 0020 000C             		addi.w	#$20,obY(a0)
0001E134 7C07                       		moveq	#7,d6
0001E136 3A3C 009A                  		move.w	#$9A,d5
0001E13A 78E4                       		moveq	#-$1C,d4
0001E13C                            
0001E13C                            	@loop:
0001E13C 4EB9 0000 FF18             		jsr	(FindFreeObj).l
0001E142 6600                       		bne.s	@fail
0001E144 12BC 0028                  		move.b	#id_Animals,0(a1) ; load animal object
0001E148 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001E14E 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001E154 D969 0008                  		add.w	d4,obX(a1)
0001E158 5E44                       		addq.w	#7,d4
0001E15A 3345 0036                  		move.w	d5,$36(a1)
0001E15E 5145                       		subq.w	#8,d5
0001E160 51CE FFDA                  		dbf	d6,@loop	; repeat 7 more	times
0001E164                            
0001E164                            	@fail:
0001E164 4E75                       		rts	
0001E166                            ; ===========================================================================
0001E166                            
0001E166                            Pri_Animals:	; Routine $C
0001E166 7007                       		moveq	#7,d0
0001E168 C038 FE0F                  		and.b	(v_vbla_byte).w,d0
0001E16C 6600                       		bne.s	@noanimal
0001E16E 4EB9 0000 FF18             		jsr	(FindFreeObj).l
0001E174 6600                       		bne.s	@noanimal
0001E176 12BC 0028                  		move.b	#id_Animals,0(a1) ; load animal object
0001E17A 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001E180 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001E186 4EB9 0000 3A5C             		jsr	(RandomNumber).l
0001E18C 0240 001F                  		andi.w	#$1F,d0
0001E190 5D40                       		subq.w	#6,d0
0001E192 4A41                       		tst.w	d1
0001E194 6A00                       		bpl.s	@ispositive
0001E196 4440                       		neg.w	d0
0001E198                            
0001E198                            	@ispositive:
0001E198 D169 0008                  		add.w	d0,obX(a1)
0001E19C 337C 000C 0036             		move.w	#$C,$36(a1)
0001E1A2                            
0001E1A2                            	@noanimal:
0001E1A2 5368 001E                  		subq.w	#1,obTimeFrame(a0)
0001E1A6 6600                       		bne.s	@wait
0001E1A8 5428 0024                  		addq.b	#2,obRoutine(a0)
0001E1AC 317C 00B4 001E             		move.w	#180,obTimeFrame(a0)
0001E1B2                            
0001E1B2                            	@wait:
0001E1B2 4E75                       		rts	
0001E1B4                            ; ===========================================================================
0001E1B4                            
0001E1B4                            Pri_EndAct:	; Routine $E
0001E1B4 703E                       		moveq	#$3E,d0
0001E1B6 7228                       		moveq	#id_Animals,d1
0001E1B8 7440                       		moveq	#$40,d2
0001E1BA 43F8 D040                  		lea	(v_objspace+$40).w,a1 ; load object RAM
0001E1BE                            
0001E1BE                            	@findanimal:
0001E1BE B211                       		cmp.b	(a1),d1		; is object $28	(animal) loaded?
0001E1C0 6700                       		beq.s	@found		; if yes, branch
0001E1C2 D2C2                       		adda.w	d2,a1		; next object RAM
0001E1C4 51C8 FFF8                  		dbf	d0,@findanimal	; repeat $3E times
0001E1C8                            
0001E1C8 4EB9 0001 11D0             		jsr	(GotThroughAct1).l
0001E1CE 4EF9 0000 FACC             		jmp	(DeleteObject).l
0001E1D4                            
0001E1D4                            	@found:
0001E1D4 4E75                       		rts	
0001E1D4 4E75                       		rts	
0001E1D6                            		include	"_anim\Prison Capsule.asm"
0001E1D6                            ; ---------------------------------------------------------------------------
0001E1D6                            ; Animation script - prison capsule
0001E1D6                            ; ---------------------------------------------------------------------------
0001E1D6 0000                       Ani_Pri:	dc.w @switchflash-Ani_Pri
0001E1D8 0000                       		dc.w @switchflash-Ani_Pri
0001E1DA 0201 03FF                  @switchflash:	dc.b 2,	1, 3, afEnd
0001E1DE                            		even
0001E1DE                            		even
0001E1DE                            Map_Pri:	include	"_maps\Prison Capsule.asm"
0001E1DE                            ; ---------------------------------------------------------------------------
0001E1DE                            ; Sprite mappings - prison capsule
0001E1DE                            ; ---------------------------------------------------------------------------
0001E1DE                            Map_Pri_internal:
0001E1DE 0000                       		dc.w @capsule-Map_Pri_internal
0001E1E0 0000                       		dc.w @switch1-Map_Pri_internal
0001E1E2 0000                       		dc.w @broken-Map_Pri_internal
0001E1E4 0000                       		dc.w @switch2-Map_Pri_internal
0001E1E6 0000                       		dc.w @unusedthing1-Map_Pri_internal
0001E1E8 0000                       		dc.w @unusedthing2-Map_Pri_internal
0001E1EA 0000                       		dc.w @blank-Map_Pri_internal
0001E1EC 07                         @capsule:	dc.b 7
0001E1ED E00C 2000 F0               		dc.b $E0, $C, $20, 0, $F0
0001E1F2 E80D 2004 E0               		dc.b $E8, $D, $20, 4, $E0
0001E1F7 E80D 200C 00               		dc.b $E8, $D, $20, $C, 0
0001E1FC F80E 2014 E0               		dc.b $F8, $E, $20, $14,	$E0
0001E201 F80E 2020 00               		dc.b $F8, $E, $20, $20,	0
0001E206 100D 202C E0               		dc.b $10, $D, $20, $2C,	$E0
0001E20B 100D 2034 00               		dc.b $10, $D, $20, $34,	0
0001E210 01                         @switch1:	dc.b 1
0001E211 F809 003C F4               		dc.b $F8, 9, 0,	$3C, $F4
0001E216 06                         @broken:	dc.b 6
0001E217 0008 2042 E0               		dc.b 0,	8, $20,	$42, $E0
0001E21C 080C 2045 E0               		dc.b 8,	$C, $20, $45, $E0
0001E221 0004 2049 10               		dc.b 0,	4, $20,	$49, $10
0001E226 080C 204B 00               		dc.b 8,	$C, $20, $4B, 0
0001E22B 100D 202C E0               		dc.b $10, $D, $20, $2C,	$E0
0001E230 100D 2034 00               		dc.b $10, $D, $20, $34,	0
0001E235 01                         @switch2:	dc.b 1
0001E236 F809 004F F4               		dc.b $F8, 9, 0,	$4F, $F4
0001E23B 02                         @unusedthing1:	dc.b 2
0001E23C E80E 2055 F0               		dc.b $E8, $E, $20, $55,	$F0
0001E241 000E 2061 F0               		dc.b 0,	$E, $20, $61, $F0
0001E246 01                         @unusedthing2:	dc.b 1
0001E247 F007 206D F8               		dc.b $F0, 7, $20, $6D, $F8
0001E24C 00                         @blank:		dc.b 0
0001E24E 00                         		even
0001E24E 00                         		even
0001E24E                            
0001E24E                            		include	"_incObj\sub ReactToItem.asm"
0001E24E                            ; ---------------------------------------------------------------------------
0001E24E                            ; Subroutine to react to obColType(a0)
0001E24E                            ; ---------------------------------------------------------------------------
0001E24E                            
0001E24E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001E24E                            
0001E24E                            
0001E24E                            ReactToItem:
0001E24E 4E71                       		nop	
0001E250 3428 0008                  		move.w	obX(a0),d2	; load Sonic's x-axis position
0001E254 3628 000C                  		move.w	obY(a0),d3	; load Sonic's y-axis position
0001E258 5142                       		subq.w	#8,d2
0001E25A 7A00                       		moveq	#0,d5
0001E25C 1A28 0016                  		move.b	obHeight(a0),d5	; load Sonic's height
0001E260 5705                       		subq.b	#3,d5
0001E262 9645                       		sub.w	d5,d3
0001E264 0C28 0071 001A             		cmpi.b	#fr_Duck,obFrame(a0) ; is Sonic ducking?
0001E26A 6600                       		bne.s	@notducking	; if not, branch
0001E26C 0643 000C                  		addi.w	#$C,d3
0001E270 7A0A                       		moveq	#$A,d5
0001E272                            
0001E272                            	@notducking:
0001E272 383C 0010                  		move.w	#$10,d4
0001E276 DA45                       		add.w	d5,d5
0001E278 43F8 D800                  		lea	(v_objspace+$800).w,a1 ; set object RAM start address
0001E27C 3C3C 005F                  		move.w	#$5F,d6
0001E280                            
0001E280                            @loop:
0001E280 4A29 0001                  		tst.b	obRender(a1)
0001E284 6A00                       		bpl.s	@next
0001E286 1029 0020                  		move.b	obColType(a1),d0 ; load collision type
0001E28A 6600                       		bne.s	@proximity	; if nonzero, branch
0001E28C                            
0001E28C                            	@next:
0001E28C 43E9 0040                  		lea	$40(a1),a1	; next object RAM
0001E290 51CE FFEE                  		dbf	d6,@loop	; repeat $5F more times
0001E294                            
0001E294 7000                       		moveq	#0,d0
0001E296 4E75                       		rts	
0001E298                            ; ===========================================================================
0001E298                            @sizes:		;   width, height
0001E298 1414                       		dc.b  $14, $14		; $01
0001E29A 0C14                       		dc.b   $C, $14		; $02
0001E29C 140C                       		dc.b  $14,  $C		; $03
0001E29E 0410                       		dc.b	4, $10		; $04
0001E2A0 0C12                       		dc.b   $C, $12		; $05
0001E2A2 1010                       		dc.b  $10, $10		; $06
0001E2A4 0606                       		dc.b	6,   6		; $07
0001E2A6 180C                       		dc.b  $18,  $C		; $08
0001E2A8 0C10                       		dc.b   $C, $10		; $09
0001E2AA 100C                       		dc.b  $10,  $C		; $0A
0001E2AC 0808                       		dc.b	8,   8		; $0B
0001E2AE 1410                       		dc.b  $14, $10		; $0C
0001E2B0 1408                       		dc.b  $14,   8		; $0D
0001E2B2 0E0E                       		dc.b   $E,  $E		; $0E
0001E2B4 1818                       		dc.b  $18, $18		; $0F
0001E2B6 2810                       		dc.b  $28, $10		; $10
0001E2B8 1018                       		dc.b  $10, $18		; $11
0001E2BA 0810                       		dc.b	8, $10		; $12
0001E2BC 2070                       		dc.b  $20, $70		; $13
0001E2BE 4020                       		dc.b  $40, $20		; $14
0001E2C0 8020                       		dc.b  $80, $20		; $15
0001E2C2 2020                       		dc.b  $20, $20		; $16
0001E2C4 0808                       		dc.b	8,   8		; $17
0001E2C6 0404                       		dc.b	4,   4		; $18
0001E2C8 2008                       		dc.b  $20,   8		; $19
0001E2CA 0C0C                       		dc.b   $C,  $C		; $1A
0001E2CC 0804                       		dc.b	8,   4		; $1B
0001E2CE 1804                       		dc.b  $18,   4		; $1C
0001E2D0 2804                       		dc.b  $28,   4		; $1D
0001E2D2 0408                       		dc.b	4,   8		; $1E
0001E2D4 0418                       		dc.b	4, $18		; $1F
0001E2D6 0428                       		dc.b	4, $28		; $20
0001E2D8 0420                       		dc.b	4, $20		; $21
0001E2DA 1818                       		dc.b  $18, $18		; $22
0001E2DC 0C18                       		dc.b   $C, $18		; $23
0001E2DE 4808                       		dc.b  $48,   8		; $24
0001E2E0                            ; ===========================================================================
0001E2E0                            
0001E2E0                            @proximity:
0001E2E0 0240 003F                  		andi.w	#$3F,d0
0001E2E4 D040                       		add.w	d0,d0
0001E2E6 45FB 00AE                  		lea	@sizes-2(pc,d0.w),a2
0001E2EA 7200                       		moveq	#0,d1
0001E2EC 121A                       		move.b	(a2)+,d1
0001E2EE 3029 0008                  		move.w	obX(a1),d0
0001E2F2 9041                       		sub.w	d1,d0
0001E2F4 9042                       		sub.w	d2,d0
0001E2F6 6400                       		bcc.s	@outsidex	; branch if not touching
0001E2F8 D241                       		add.w	d1,d1
0001E2FA D041                       		add.w	d1,d0
0001E2FC 6500                       		bcs.s	@withinx	; branch if touching
0001E2FE 6000 FF8C                  		bra.w	@next
0001E302                            ; ===========================================================================
0001E302                            
0001E302                            @outsidex:
0001E302 6100 0000                  		bsr	React_ChkWaterTag	;TIS
0001E306 B044                       		cmp.w	d4,d0
0001E308 6200 FF82                  		bhi.w	@next
0001E30C                            
0001E30C                            @withinx:
0001E30C 7200                       		moveq	#0,d1
0001E30E 121A                       		move.b	(a2)+,d1
0001E310 3029 000C                  		move.w	obY(a1),d0
0001E314 9041                       		sub.w	d1,d0
0001E316 9043                       		sub.w	d3,d0
0001E318 6400                       		bcc.s	@outsidey	; branch if not touching
0001E31A D241                       		add.w	d1,d1
0001E31C D240                       		add.w	d0,d1
0001E31E 6500                       		bcs.s	@withiny	; branch if touching
0001E320 6000 FF6A                  		bra.w	@next
0001E324                            
0001E324                            ; ===========================================================================
0001E324                            
0001E324                            @outsidey:
0001E324 6100 0000                  		bsr	React_ChkWaterTag	;TIS
0001E328 B045                       		cmp.w	d5,d0
0001E32A 6200 FF60                  		bhi.w	@next
0001E32E                            
0001E32E                            @withiny:
0001E32E                            	@chktype:
0001E32E 0C38 0004 FE10                     	cmpi.b	#id_SYZ,(v_zone).w   ;TIS is level GHZZ?
0001E334 6600 0000                          	bne	NotGHZReact  ;TIS
0001E338 1229 0020                          	move.b	obColType(a1),d1 ;TIS load collision type
0001E33C 0C01 0096                          	cmpi.b	#$96,d1        ;TIS - is collision type $96?
0001E340 6700 0000                          	beq	React_WaterTag    ;TIS if yes, branch
0001E344 0C01 0094                          	cmpi.b	#$94,d1        ;TIS - is collision type $94?
0001E348 6700 0000                          	beq	React_WaterTag    ;TIS if yes, branch
0001E34C 0C01 0095                          	cmpi.b	#$95,d1        ;TIS - is collision type $95?
0001E350 6700 0000                          	beq	React_WaterTag    ;TIS if yes, branch
0001E354                            NotGHZReact:                      ;TIS
0001E354 1229 0020                  		move.b	obColType(a1),d1 ; load collision type
0001E358 0201 00C0                  		andi.b	#$C0,d1        ; is obColType $40 or higher?
0001E35C 6700 0000                  		beq.w	React_Enemy    ; if not, branch
0001E360 0C01 00C0                  		cmpi.b	#$C0,d1		; is obColType $C0 or higher?
0001E364 6700 0000                  		beq.w	React_Special	; if yes, branch
0001E368 4A01                       		tst.b	d1		; is obColType $80-$BF?
0001E36A 6B00 0000                  		bmi.w	React_ChkHurt	; if yes, branch
0001E36E                            
0001E36E                            ; obColType is $40-$7F (powerups)
0001E36E                            
0001E36E 1029 0020                  		move.b	obColType(a1),d0
0001E372 0200 003F                  		andi.b	#$3F,d0
0001E376 0C00 0006                  		cmpi.b	#6,d0		; is collision type $46	?
0001E37A 6700                       		beq.s	React_Monitor	; if yes, branch
0001E37C 0C68 005A 0030             		cmpi.w	#90,$30(a0)	; is Sonic invincible?
0001E382 6400 0000                  		bcc.w	@invincible	; if yes, branch
0001E386 5429 0024                  		addq.b	#2,obRoutine(a1) ; advance the object's routine counter
0001E38A                            
0001E38A                            	@invincible:
0001E38A 4E75                       		rts	
0001E38C                            ; ===========================================================================
0001E38C                            
0001E38C                            React_Monitor:
0001E38C 4A68 0012                  		tst.w	obVelY(a0)	; is Sonic moving upwards?
0001E390 6A00                       		bpl.s	@movingdown	; if not, branch
0001E392                            
0001E392 3028 000C                  		move.w	obY(a0),d0
0001E396 0440 0010                  		subi.w	#$10,d0
0001E39A B069 000C                  		cmp.w	obY(a1),d0
0001E39E 6500                       		bcs.s	@donothing
0001E3A0 4468 0012                  		neg.w	obVelY(a0)	; reverse Sonic's vertical speed
0001E3A4 337C FE80 0012             		move.w	#-$180,obVelY(a1)
0001E3AA 4A29 0025                  		tst.b	ob2ndRout(a1)
0001E3AE 6600                       		bne.s	@donothing
0001E3B0 5829 0025                  		addq.b	#4,ob2ndRout(a1) ; advance the monitor's routine counter
0001E3B4 4E75                       		rts	
0001E3B6                            ; ===========================================================================
0001E3B6                            
0001E3B6                            @movingdown:
0001E3B6 0C28 0002 001C             		cmpi.b	#id_Roll,obAnim(a0) ; is Sonic rolling/jumping?
0001E3BC 6600                       		bne.s	@donothing
0001E3BE 4468 0012                  		neg.w	obVelY(a0)	; reverse Sonic's y-motion
0001E3C2 5429 0024                  		addq.b	#2,obRoutine(a1) ; advance the monitor's routine counter
0001E3C6                            
0001E3C6                            	@donothing:
0001E3C6 4E75                       		rts	
0001E3C8                            ; ===========================================================================
0001E3C8                            
0001E3C8                            React_Enemy:
0001E3C8 4A38 FE2D                  		tst.b	(v_invinc).w	; is Sonic invincible?
0001E3CC 6600                       		bne.s	@donthurtsonic	; if yes, branch
0001E3CE 0C28 001F 001C             		cmpi.b	#id_Spindash,obAnim(a0)	; is Sonic Spin Dashing? 
0001E3D4 6700 0000                  		beq.w	@donthurtsonic	; if yes, branch
0001E3D8 0C28 0002 001C             		cmpi.b	#id_Roll,obAnim(a0) ; is Sonic rolling/jumping?
0001E3DE 6600 0000                  		bne.w	React_ChkHurt	; if not, branch
0001E3E2                            
0001E3E2                            	@donthurtsonic:
0001E3E2 4A29 0021                  		tst.b	obColProp(a1)
0001E3E6 6700                       		beq.s	breakenemy
0001E3E8                            
0001E3E8 4468 0010                  		neg.w	obVelX(a0)	; repel Sonic
0001E3EC 4468 0012                  		neg.w	obVelY(a0)
0001E3F0 E0E8 0010                  		asr	obVelX(a0)
0001E3F4 E0E8 0012                  		asr	obVelY(a0)
0001E3F8 137C 0000 0020             		move.b	#0,obColType(a1)
0001E3FE 5329 0021                  		subq.b	#1,obColProp(a1)
0001E402 6600                       		bne.s	@flagnotclear
0001E404 08E9 0007 0022             		bset	#7,obStatus(a1)
0001E40A                            
0001E40A                            	@flagnotclear:
0001E40A 4E75                       		rts	
0001E40C                            ; ===========================================================================
0001E40C                            
0001E40C                            breakenemy:
0001E40C 08E9 0007 0022             		bset	#7,obStatus(a1)
0001E412 7000                       		moveq	#0,d0
0001E414 3038 F7D0                  		move.w	(v_itembonus).w,d0
0001E418 5478 F7D0                  		addq.w	#2,(v_itembonus).w ; add 2 to item bonus counter
0001E41C 0C40 0006                  		cmpi.w	#6,d0
0001E420 6500                       		bcs.s	@bonusokay
0001E422 7006                       		moveq	#6,d0		; max bonus is lvl6
0001E424                            
0001E424                            	@bonusokay:
0001E424 3340 003E                  		move.w	d0,$3E(a1)
0001E428 303B 0000                  		move.w	@points(pc,d0.w),d0
0001E42C 0C78 0020 F7D0             		cmpi.w	#$20,(v_itembonus).w ; have 16 enemies been destroyed?
0001E432 6500                       		bcs.s	@lessthan16	; if not, branch
0001E434 303C 03E8                  		move.w	#1000,d0	; fix bonus to 10000
0001E438 337C 000A 003E             		move.w	#$A,$3E(a1)
0001E43E                            
0001E43E                            	@lessthan16:
0001E43E 6100 0000                  		bsr.w	AddPoints
0001E442 12BC 0027                  		move.b	#id_ExplosionItem,0(a1) ; change object to explosion
0001E446 137C 0000 0024             		move.b	#0,obRoutine(a1)
0001E44C 4A68 0012                  		tst.w	obVelY(a0)
0001E450 6B00                       		bmi.s	@bouncedown
0001E452 3028 000C                  		move.w	obY(a0),d0
0001E456 B069 000C                  		cmp.w	obY(a1),d0
0001E45A 6400                       		bcc.s	@bounceup
0001E45C 4468 0012                  		neg.w	obVelY(a0)
0001E460 4E75                       		rts	
0001E462                            ; ===========================================================================
0001E462                            
0001E462                            	@bouncedown:
0001E462 0668 0100 0012             		addi.w	#$100,obVelY(a0)
0001E468 4E75                       		rts	
0001E46A                            
0001E46A                            	@bounceup:
0001E46A 0468 0100 0012             		subi.w	#$100,obVelY(a0)
0001E470 4E75                       		rts	
0001E472                            
0001E472 000A 0014 0032 0064        @points:	dc.w 10, 20, 50, 100	; points awarded div 10
0001E47A                            
0001E47A                            ; ===========================================================================
0001E47A                            
0001E47A                            React_Caterkiller:
0001E47A 08E9 0007 0022             		bset	#7,obStatus(a1)
0001E480                            
0001E480                            React_ChkHurt:
0001E480 4A38 FE2D                  		tst.b	(v_invinc).w	; is Sonic invincible?
0001E484 6700                       		beq.s	notinvincible	; if not, branch
0001E486                            
0001E486                            	isflashing:
0001E486 70FF                       		moveq	#-1,d0
0001E488 4E75                       		rts	
0001E48A                            ; ===========================================================================
0001E48A                            
0001E48A                            	notinvincible:
0001E48A 4E71                       		nop	
0001E48C 4A68 0030                  		tst.w	$30(a0)		; is Sonic flashing?
0001E490 66F4                       		bne.s	isflashing	; if yes, branch
0001E492 2449                       		movea.l	a1,a2
0001E494                            
0001E494                            ; End of function ReactToItem
0001E494                            ; continue straight to HurtSonic
0001E494                            
0001E494                            ; ---------------------------------------------------------------------------
0001E494                            ; Hurting Sonic	subroutine
0001E494                            ; ---------------------------------------------------------------------------
0001E494                            
0001E494                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001E494                            
0001E494                            
0001E494                            HurtSonic:
0001E494 4A38 FE2C                  		tst.b	(v_shield).w	; does Sonic have a shield?
0001E498 6600                       		bne.s	@hasshield	; if yes, branch
0001E49A 4A38 F5C8                  		tst.b	(v_rshield).w	; does Sonic have a red shield?
0001E49E 6600                       		bne.s	@hasshield	; if yes, branch
0001E4A0 4A38 F5C9                  		tst.b	(v_gshield).w	; does Sonic have a gold shield?
0001E4A4 6600                       		bne.s	@hasshield	; if yes, branch
0001E4A6 4A38 F5CA                  		tst.b	(v_spshield).w	; does Sonic have a silver shield?
0001E4AA 6600                       		bne.s	@hasshield	; if yes, branch
0001E4AC 4A78 FE20                  		tst.w	(v_rings).w	; does Sonic have any rings?
0001E4B0 6700 0000                  		beq.w	@norings	; if not, branch
0001E4B4                            
0001E4B4 4EB9 0000 FF18             		jsr	(FindFreeObj).l
0001E4BA 6600                       		bne.s	@hasshield
0001E4BC 12BC 0037                  		move.b	#id_RingLoss,0(a1) ; load bouncing multi rings object
0001E4C0 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001E4C6 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001E4CC                            
0001E4CC                            	@hasshield:
0001E4CC 0C38 0001 FE2C             		cmpi.b	#1,(v_shield).w     ; does sonic have a Shield?
0001E4D2 6600                       		bne.s	@hasrshield        ; if no, check for red shield
0001E4D4 0C12 006E                  		cmpi.b	#$6E,(a2)     ; was damage caused by electrocuter?
0001E4D8 6700 FFAC                  		beq.w	isflashing
0001E4DC 0C12 0086                  		cmpi.b	#$86,(a2)     ; was damage caused by Plasma Ball Launcher?
0001E4E0 6700 FFA4                  		beq.w	isflashing
0001E4E4                            
0001E4E4                            	@hasrshield:
0001E4E4 0C38 0000 F5C8             		cmpi.b	#0,(v_rshield).w     ; does sonic not a Red Shield?
0001E4EA 6700                       		beq.s	@hasspshield          ; if yes, check for gray shield
0001E4EC 0C12 0014                  		cmpi.b	#$14,(a2)	; was damage caused by lava ball?
0001E4F0 6700 FF94                  		beq.w 	isflashing
0001E4F4 0C12 004C                  		cmpi.b	#$4C,(a2)	; was damage caused by lava geyser?
0001E4F8 6700 FF8C                  		beq.w 	isflashing
0001E4FC 0C12 004D                  		cmpi.b	#$4D,(a2)	; was damage caused by lava geyser?
0001E500 6700 FF84                  		beq.w 	isflashing
0001E504 0C12 0062                  		cmpi.b	#$62,(a2)	; was damage caused by gargoyle?
0001E508 6700 FF7C                  		beq.w 	isflashing
0001E50C 0C12 0074                  		cmpi.b	#$74,(a2)	; was damage caused by MZ fire boss?
0001E510 6700 FF74                  		beq.w 	isflashing
0001E514 0C12 0035                  		cmpi.b	#$35,(a2)	; was damage caused by burning grass?
0001E518 6700 FF6C                  		beq.w 	isflashing
0001E51C 0C12 006D                  		cmpi.b	#$6D,(a2)	; was damage caused by flamethrower?
0001E520 6700 FF64                  		beq.w 	isflashing
0001E524 0C12 0054                  		cmpi.b	#$54,(a2)	; was damage caused by Lava Tag/Magma?
0001E528 6700 FF5C                  		beq.w 	isflashing
0001E52C                            
0001E52C                            	@hasspshield:
0001E52C 0C38 0001 F5CA             		cmpi.b	#1,(v_spshield).w     ; does sonic have a sp Shield?
0001E532 6600                       		bne.s	@hurtcont           ; if yes, make him invulnerable to metal objects
0001E534 0C12 0015                  		cmpi.b	#$15,(a2)	; was damage caused by SBZ Spiked Ball?
0001E538 6700 FF4C                  		beq.w 	isflashing
0001E53C 0C12 0016                  		cmpi.b	#$16,(a2)	; was damage caused by LZ Harpoon?
0001E540 6700 FF44                  		beq.w 	isflashing
0001E544 0C12 0031                  		cmpi.b	#$31,(a2)	; was damage caused by Chained Stompers?
0001E548 6700 FF3C                  		beq.w 	isflashing
0001E54C 0C12 0036                  		cmpi.b	#$36,(a2)	; was damage caused by Spikes?
0001E550 6700 FF34                  		beq.w 	isflashing
0001E554 0C12 007B                  		cmpi.b	#$7B,(a2)	; was damage caused by SLZ boss spikeball?
0001E558 6700 FF2C                  		beq.w 	isflashing
0001E55C 0C12 0057                  		cmpi.b	#$57,(a2)	; was damage caused by Spiked Ball & Chain?
0001E560 6700 FF24                  		beq.w 	isflashing
0001E564 0C12 0058                  		cmpi.b	#$58,(a2)	; was damage caused by Big Spiked Ball?
0001E568 6700 FF1C                  		beq.w 	isflashing
0001E56C 0C12 006A                  		cmpi.b	#$6A,(a2)	; was damage caused by Saws?
0001E570 6700 FF14                  		beq.w 	isflashing
0001E574 0C12 005E                  		cmpi.b	#$5E,(a2)	; was damage caused by Seesaw ball?
0001E578 6700 FF0C                  		beq.w 	isflashing
0001E57C 0C12 0006                  		cmpi.b	#$06,(a2)	; was damage caused by Mozzietron?
0001E580 6700 FE8A                  		beq.w 	breakenemy
0001E584 0C12 0050                  		cmpi.b	#$50,(a2)	; was damage caused by Yadrin?
0001E588 6700 FE82                  		beq.w 	breakenemy
0001E58C 0C12 0060                  		cmpi.b	#$60,(a2)	; was damage caused by Orbinaut?
0001E590 6700 FE7A                  		beq.w 	breakenemy
0001E594 0C12 0078                  		cmpi.b	#$78,(a2)	; was damage caused by Catterkiller?
0001E598 6700 FE72                  		beq.w 	breakenemy
0001E59C 0C12 005F                  		cmpi.b	#$5F,(a2)	; was damage caused by Bomb enemy?
0001E5A0 6700 FE6A                  		beq.w 	breakenemy
0001E5A4                            
0001E5A4                            
0001E5A4                            	@hurtcont:
0001E5A4 11FC 0000 FE2C             		move.b	#0,(v_shield).w		; remove shield
0001E5AA 11FC 0000 F5C9             		move.b	#0,(v_gshield).w	; remove g shield
0001E5B0 11FC 0000 F5CA             		move.b	#0,(v_spshield).w	; remove sp shield
0001E5B6                            		
0001E5B6 0C38 0000 F5C8             		cmpi.b	#0,(v_rshield).w ; do you have no r shield?
0001E5BC 6700                       		beq.s	@hurtcont2	;if not, branch
0001E5BE 5338 F5C8                  		subq.b	#1,(v_rshield).w
0001E5C2                            		
0001E5C2                            	@hurtcont2:
0001E5C2 117C 0004 0024             		move.b	#4,obRoutine(a0)
0001E5C8 4EB9 0001 64FA             		jsr		Sonic_ResetOnFloor
0001E5CE 08E8 0001 0022             		bset	#1,obStatus(a0)
0001E5D4 317C FC00 0012             		move.w	#-$400,obVelY(a0) ; make Sonic bounce away from the object
0001E5DA 317C FE00 0010             		move.w	#-$200,obVelX(a0)
0001E5E0 0828 0006 0022             		btst	#6,obStatus(a0)	; is Sonic underwater?
0001E5E6 6700                       		beq.s	@isdry		; if not, branch
0001E5E8                            
0001E5E8 317C FE00 0012             		move.w	#-$200,obVelY(a0) ; slower bounce
0001E5EE 317C FF00 0010             		move.w	#-$100,obVelX(a0)
0001E5F4                            
0001E5F4                            	@isdry:
0001E5F4 3028 0008                  		move.w	obX(a0),d0
0001E5F8 B06A 0008                  		cmp.w	obX(a2),d0
0001E5FC 6500                       		bcs.s	@isleft		; if Sonic is left of the object, branch
0001E5FE 4468 0010                  		neg.w	obVelX(a0)	; if Sonic is right of the object, reverse
0001E602                            
0001E602                            	@isleft:
0001E602 117C 0000 0039             		move.b	#0,f_spindash(a0) ; clear Spin Dash flag 
0001E608 317C 0000 0020             		move.w	#0,obInertia(a0) 
0001E60E 117C 0019 001C             		move.b	#id_Hurt,obAnim(a0) 
0001E614 317C 0120 0030             		move.w	#$120,$30(a0)
0001E61A 0C12 006E                  		cmpi.b	#$6E,(a2)    ; check if you were hurt by Electrocuter
0001E61E 6700                       		beq.s	@hurtelec       ; if yes, branch
0001E620 0C12 0086                  		cmpi.b	#$86,(a2)    ; check if you were hurt by FZ plasma
0001E624 6700                       		beq.s	@hurtelec       ; if yes, branch
0001E626 317C 0000 0020             		move.w	#0,obInertia(a0)
0001E62C 117C 0019 001C             		move.b	#id_Hurt,obAnim(a0)
0001E632 317C 0078 0030             		move.w	#120,$30(a0)	; set temp invincible time to 2 seconds
0001E638 303C 0000                  		move.w	#sfx_Death,d0	; load normal damage sound
0001E63C 0C12 0036                  		cmpi.b	#id_Spikes,(a2)	; was damage caused by spikes?
0001E640 6600                       		bne.s	@sound		; if not, branch
0001E642 0C12 0016                  		cmpi.b	#id_Harpoon,(a2) ; was damage caused by LZ harpoon?
0001E646 6600                       		bne.s	@sound		; if not, branch
0001E648 303C 0000                  		move.w	#sfx_HitSpikes,d0 ; load spikes damage sound
0001E64C                            
0001E64C                            	@sound:
0001E64C 4EB9 0000 12A0             		jsr	(PlaySound_Special).l
0001E652 70FF                       		moveq	#-1,d0
0001E654 4E75                       		rts	
0001E656                            
0001E656                            	@hurtelec:
0001E656 117C 0020 001C             		move.b	#id_Hurt2,obAnim(a0)
0001E65C 317C 0078 0030             		move.w	#120,$30(a0)	; set temp invincible time to 2 seconds
0001E662 303C 0000                  		move.w	#sfx_Death,d0	; load normal damage sound
0001E666 0C12 0036                  		cmpi.b	#id_Spikes,(a2)	; was damage caused by spikes?
0001E66A 66E0                       		bne.s	@sound		; if not, branch
0001E66C 0C12 0016                  		cmpi.b	#id_Harpoon,(a2) ; was damage caused by LZ harpoon?
0001E670 66DA                       		bne.s	@sound		; if not, branch
0001E672 303C 0000                  		move.w	#sfx_HitSpikes,d0 ; load spikes damage sound
0001E676                            ; ===========================================================================
0001E676                            
0001E676                            @norings:
0001E676 4A78 FFFA                  		tst.w	(f_debugmode).w	; is debug mode	cheat on?
0001E67A 6600 FE50                  		bne.w	@hasshield	; if yes, branch
0001E67E                            
0001E67E                            ; ---------------------------------------------------------------------------
0001E67E                            ; Subroutine to	kill Sonic
0001E67E                            ; ---------------------------------------------------------------------------
0001E67E                            
0001E67E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001E67E                            
0001E67E                            
0001E67E                            KillSonic:
0001E67E 4A78 FE08                  		tst.w	(v_debuguse).w	; is debug mode	active?
0001E682 6600 0000                  		bne.w	@dontdie	; if yes, branch
0001E686 31FC 0000 FE20             		move.w	#0,(v_rings).w ; clear rings
0001E68C 11FC 0000 FE2D             		move.b	#0,(v_invinc).w	; remove invincibility
0001E692 11FC 0000 FE2E             		move.b  #0,(v_shoes).w
0001E698 11FC 0000 F5C3             		move.b  #0,(f_emeraldm).w
0001E69E 117C 0006 0024             		move.b	#6,obRoutine(a0)
0001E6A4 4EB9 0001 64FA             		jsr		Sonic_ResetOnFloor
0001E6AA 08E8 0001 0022             		bset	#1,obStatus(a0)
0001E6B0 317C F900 0012             		move.w	#-$700,obVelY(a0)
0001E6B6 317C 0000 0010             		move.w	#0,obVelX(a0)
0001E6BC 317C 0000 0020             		move.w	#0,obInertia(a0)
0001E6C2 3168 000C 0038             		move.w	obY(a0),$38(a0)
0001E6C8 0C12 0054                  		cmpi.b	#$54,(a2)    ; check if you were killed by lava
0001E6CC 6700                       		beq.s	Kill_Lava       ; if yes, branch
0001E6CE 0C12 006D                  		cmpi.b	#$6D,(a2)    ; check if you were killed by flamethrower
0001E6D2 6700                       		beq.s	Kill_Lava        ; if yes, branch
0001E6D4 117C 0018 001C             		move.b	#id_Death,obAnim(a0)
0001E6DA 08E8 0007 0002             		bset	#7,obGfx(a0)
0001E6E0 303C 0000                  		move.w	#sfx_Death,d0	; play normal death sound
0001E6E4 0C12 0036                  		cmpi.b	#id_Spikes,(a2)	; check	if you were killed by spikes
0001E6E8 6600                       		bne.s	@sound
0001E6EA 303C 0000                  		move.w	#sfx_HitSpikes,d0 ; play spikes death sound
0001E6EE                            
0001E6EE                            	@sound:
0001E6EE 4EB9 0000 12A0             		jsr	(PlaySound_Special).l
0001E6F4                            
0001E6F4                            	@dontdie:
0001E6F4 70FF                       		moveq	#-1,d0
0001E6F6 4E75                       		rts	
0001E6F8                            ; End of function KillSonic
0001E6F8                            Kill_Lava:	
0001E6F8 08E8 0007 0002             	bset	#7,obGfx(a0)
0001E6FE 117C 0016 001C             	move.b	#$16,$1C(a0)
0001E704 303C 00C8                  	move.w	#$C8,d0        ; play death sound
0001E708 4EB9 0000 12A0                 jsr		(PlaySound_Special).l
0001E70E                            
0001E70E                            
0001E70E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001E70E                            
0001E70E                            
0001E70E                            React_Special:
0001E70E 1229 0020                  		move.b	obColType(a1),d1
0001E712 0201 003F                  		andi.b	#$3F,d1
0001E716 0C01 000B                  		cmpi.b	#$B,d1		; is collision type $CB	?
0001E71A 6700                       		beq.s	@caterkiller	; if yes, branch
0001E71C 0C01 000C                  		cmpi.b	#$C,d1		; is collision type $CC	?
0001E720 6700                       		beq.s	@yadrin		; if yes, branch
0001E722 0C01 0017                  		cmpi.b	#$17,d1		; is collision type $D7	?
0001E726 6700                       		beq.s	@D7orE1		; if yes, branch
0001E728 0C01 0021                  		cmpi.b	#$21,d1		; is collision type $E1	?
0001E72C 6700                       		beq.s	@D7orE1		; if yes, branch
0001E72E 4E75                       		rts	
0001E730                            ; ===========================================================================
0001E730                            
0001E730                            @caterkiller:
0001E730 6000 FD48                  		bra.w	React_Caterkiller
0001E734                            ; ===========================================================================
0001E734                            
0001E734                            @yadrin:
0001E734 9A40                       		sub.w	d0,d5
0001E736 0C45 0008                  		cmpi.w	#8,d5
0001E73A 6400                       		bcc.s	@normalenemy
0001E73C 3029 0008                  		move.w	obX(a1),d0
0001E740 5940                       		subq.w	#4,d0
0001E742 0829 0000 0022             		btst	#0,obStatus(a1)
0001E748 6700                       		beq.s	@noflip
0001E74A 0440 0010                  		subi.w	#$10,d0
0001E74E                            
0001E74E                            	@noflip:
0001E74E 9042                       		sub.w	d2,d0
0001E750 6400                       		bcc.s	@loc_1B13C
0001E752 0640 0018                  		addi.w	#$18,d0
0001E756 6500                       		bcs.s	@loc_1B140
0001E758 6000                       		bra.s	@normalenemy
0001E75A                            ; ===========================================================================
0001E75A                            
0001E75A                            	@loc_1B13C:
0001E75A B044                       		cmp.w	d4,d0
0001E75C 6200                       		bhi.s	@normalenemy
0001E75E                            
0001E75E                            	@loc_1B140:
0001E75E 6000 FD20                  		bra.w	React_ChkHurt
0001E762                            ; ===========================================================================
0001E762                            
0001E762                            	@normalenemy:
0001E762 6000 FC64                  		bra.w	React_Enemy
0001E766                            ; ===========================================================================
0001E766                            
0001E766                            @D7orE1:
0001E766 5229 0021                  		addq.b	#1,obColProp(a1)
0001E76A 4E75                       		rts	
0001E76C                            ; End of function React_Special
0001E76C                            
0001E76C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001E76C                            
0001E76C                            React_ChkWaterTag:
0001E76C 0C38 0001 F5C4             		cmpi.b	#1,(v_tagwater).w	;TIS
0001E772 6600 0000                  		bne	NotWaterTag
0001E776 11FC 0000 F5C4             		move.b	#0,(v_tagwater).w	;TIS
0001E77C                            	NotWaterTag:
0001E77C 4E75                       		rts
0001E77E                            
0001E77E                            React_WaterTag:
0001E77E 0C38 0001 F5C4             		cmpi.b	#1,(v_tagwater).w	;TIS
0001E784 6700 0000                  		beq	SkipWaterTag
0001E788 11FC 0001 F5C4             		move.b	#1,(v_tagwater).w	;TIS
0001E78E                            	SkipWaterTag:
0001E78E 4E75                       		rts
0001E78E 4E75                       		rts
0001E790                            
0001E790                            ; ---------------------------------------------------------------------------
0001E790                            ; Subroutine to	show the special stage layout
0001E790                            ; ---------------------------------------------------------------------------
0001E790                            
0001E790                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001E790                            
0001E790                            
0001E790                            SS_ShowLayout:
0001E790 6100 0000                  		bsr.w	SS_AniWallsRings
0001E794 6100 0000                  		bsr.w	SS_AniItems
0001E798 3F05                       		move.w	d5,-(sp)
0001E79A 43F8 8000                  		lea	($FFFF8000).w,a1
0001E79E 1038 F780                  		move.b	(v_ssangle).w,d0
0001E7A2 0200 00FC                  		andi.b	#$FC,d0
0001E7A6 4EB9 0000 3A82             		jsr	(CalcSine).l
0001E7AC 3800                       		move.w	d0,d4
0001E7AE 3A01                       		move.w	d1,d5
0001E7B0 C9FC 0018                  		muls.w	#$18,d4
0001E7B4 CBFC 0018                  		muls.w	#$18,d5
0001E7B8 7400                       		moveq	#0,d2
0001E7BA 3438 F700                  		move.w	(v_screenposx).w,d2
0001E7BE 84FC 0018                  		divu.w	#$18,d2
0001E7C2 4842                       		swap	d2
0001E7C4 4442                       		neg.w	d2
0001E7C6 0642 FF4C                  		addi.w	#-$B4,d2
0001E7CA 7600                       		moveq	#0,d3
0001E7CC 3638 F704                  		move.w	(v_screenposy).w,d3
0001E7D0 86FC 0018                  		divu.w	#$18,d3
0001E7D4 4843                       		swap	d3
0001E7D6 4443                       		neg.w	d3
0001E7D8 0643 FF4C                  		addi.w	#-$B4,d3
0001E7DC 3E3C 000F                  		move.w	#$F,d7
0001E7E0                            
0001E7E0                            loc_1B19E:
0001E7E0 48A7 E000                  		movem.w	d0-d2,-(sp)
0001E7E4 48A7 C000                  		movem.w	d0-d1,-(sp)
0001E7E8 4440                       		neg.w	d0
0001E7EA C3C2                       		muls.w	d2,d1
0001E7EC C1C3                       		muls.w	d3,d0
0001E7EE 2C00                       		move.l	d0,d6
0001E7F0 DC81                       		add.l	d1,d6
0001E7F2 4C9F 0003                  		movem.w	(sp)+,d0-d1
0001E7F6 C1C2                       		muls.w	d2,d0
0001E7F8 C3C3                       		muls.w	d3,d1
0001E7FA D280                       		add.l	d0,d1
0001E7FC 2406                       		move.l	d6,d2
0001E7FE 3C3C 000F                  		move.w	#$F,d6
0001E802                            
0001E802                            loc_1B1C0:
0001E802 2002                       		move.l	d2,d0
0001E804 E080                       		asr.l	#8,d0
0001E806 32C0                       		move.w	d0,(a1)+
0001E808 2001                       		move.l	d1,d0
0001E80A E080                       		asr.l	#8,d0
0001E80C 32C0                       		move.w	d0,(a1)+
0001E80E D485                       		add.l	d5,d2
0001E810 D284                       		add.l	d4,d1
0001E812 51CE FFEE                  		dbf	d6,loc_1B1C0
0001E816                            
0001E816 4C9F 0007                  		movem.w	(sp)+,d0-d2
0001E81A 0643 0018                  		addi.w	#$18,d3
0001E81E 51CF FFC0                  		dbf	d7,loc_1B19E
0001E822                            
0001E822 3A1F                       		move.w	(sp)+,d5
0001E824 41F9 00FF 0000             		lea	($FF0000).l,a0
0001E82A 7000                       		moveq	#0,d0
0001E82C 3038 F704                  		move.w	(v_screenposy).w,d0
0001E830 80FC 0018                  		divu.w	#$18,d0
0001E834 C0FC 0080                  		mulu.w	#$80,d0
0001E838 D1C0                       		adda.l	d0,a0
0001E83A 7000                       		moveq	#0,d0
0001E83C 3038 F700                  		move.w	(v_screenposx).w,d0
0001E840 80FC 0018                  		divu.w	#$18,d0
0001E844 D0C0                       		adda.w	d0,a0
0001E846 49F8 8000                  		lea	($FFFF8000).w,a4
0001E84A 3E3C 000F                  		move.w	#$F,d7
0001E84E                            
0001E84E                            loc_1B20C:
0001E84E 3C3C 000F                  		move.w	#$F,d6
0001E852                            
0001E852                            loc_1B210:
0001E852 7000                       		moveq	#0,d0
0001E854 1018                       		move.b	(a0)+,d0
0001E856 6700                       		beq.s	loc_1B268
0001E858 0C00 004E                  		cmpi.b	#$4E,d0
0001E85C 6200                       		bhi.s	loc_1B268
0001E85E 3614                       		move.w	(a4),d3
0001E860 0643 0120                  		addi.w	#$120,d3
0001E864 0C43 0070                  		cmpi.w	#$70,d3
0001E868 6500                       		blo.s	loc_1B268
0001E86A 0C43 01D0                  		cmpi.w	#$1D0,d3
0001E86E 6400                       		bhs.s	loc_1B268
0001E870 342C 0002                  		move.w	2(a4),d2
0001E874 0642 00F0                  		addi.w	#$F0,d2
0001E878 0C42 0070                  		cmpi.w	#$70,d2
0001E87C 6500                       		blo.s	loc_1B268
0001E87E 0C42 0170                  		cmpi.w	#$170,d2
0001E882 6400                       		bhs.s	loc_1B268
0001E884 4BF9 00FF 4000             		lea	($FF4000).l,a5
0001E88A E748                       		lsl.w	#3,d0
0001E88C 4BF5 0000                  		lea	(a5,d0.w),a5
0001E890 225D                       		movea.l	(a5)+,a1
0001E892 321D                       		move.w	(a5)+,d1
0001E894 D241                       		add.w	d1,d1
0001E896 D2F1 1000                  		adda.w	(a1,d1.w),a1
0001E89A 365D                       		movea.w	(a5)+,a3
0001E89C 7200                       		moveq	#0,d1
0001E89E 1219                       		move.b	(a1)+,d1
0001E8A0 5301                       		subq.b	#1,d1
0001E8A2 6B00                       		bmi.s	loc_1B268
0001E8A4 4EB9 0000 FBF0             		jsr	(BuildSpr_Normal).l
0001E8AA                            
0001E8AA                            loc_1B268:
0001E8AA 584C                       		addq.w	#4,a4
0001E8AC 51CE FFA4                  		dbf	d6,loc_1B210
0001E8B0                            
0001E8B0 41E8 0070                  		lea	$70(a0),a0
0001E8B4 51CF FF98                  		dbf	d7,loc_1B20C
0001E8B8                            
0001E8B8 11C5 F62C                  		move.b	d5,(v_spritecount).w
0001E8BC 0C05 0050                  		cmpi.b	#$50,d5
0001E8C0 6700                       		beq.s	loc_1B288
0001E8C2 24BC 0000 0000             		move.l	#0,(a2)
0001E8C8 4E75                       		rts	
0001E8CA                            ; ===========================================================================
0001E8CA                            
0001E8CA                            loc_1B288:
0001E8CA 157C 0000 FFFB             		move.b	#0,-5(a2)
0001E8D0 4E75                       		rts	
0001E8D2                            ; End of function SS_ShowLayout
0001E8D2                            
0001E8D2                            ; ---------------------------------------------------------------------------
0001E8D2                            ; Subroutine to	animate	walls and rings	in the special stage
0001E8D2                            ; ---------------------------------------------------------------------------
0001E8D2                            
0001E8D2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001E8D2                            
0001E8D2                            
0001E8D2                            SS_AniWallsRings:
0001E8D2 43F9 00FF 400C             		lea	($FF400C).l,a1
0001E8D8 7000                       		moveq	#0,d0
0001E8DA 1038 F780                  		move.b	(v_ssangle).w,d0
0001E8DE E408                       		lsr.b	#2,d0
0001E8E0 0240 000F                  		andi.w	#$F,d0
0001E8E4 7223                       		moveq	#$23,d1
0001E8E6                            
0001E8E6                            loc_1B2A4:
0001E8E6 3280                       		move.w	d0,(a1)
0001E8E8 5049                       		addq.w	#8,a1
0001E8EA 51C9 FFFA                  		dbf	d1,loc_1B2A4
0001E8EE                            
0001E8EE 43F9 00FF 4005             		lea	($FF4005).l,a1
0001E8F4 5338 FEC2                  		subq.b	#1,(v_ani1_time).w
0001E8F8 6A00                       		bpl.s	loc_1B2C8
0001E8FA 11FC 0007 FEC2             		move.b	#7,(v_ani1_time).w
0001E900 5238 FEC3                  		addq.b	#1,(v_ani1_frame).w
0001E904 0238 0003 FEC3             		andi.b	#3,(v_ani1_frame).w
0001E90A                            
0001E90A                            loc_1B2C8:
0001E90A 1378 FEC3 01D0             		move.b	(v_ani1_frame).w,$1D0(a1)
0001E910 5338 FEC4                  		subq.b	#1,(v_ani2_time).w
0001E914 6A00                       		bpl.s	loc_1B2E4
0001E916 11FC 0007 FEC4             		move.b	#7,(v_ani2_time).w
0001E91C 5238 FEC5                  		addq.b	#1,(v_ani2_frame).w
0001E920 0238 0001 FEC5             		andi.b	#1,(v_ani2_frame).w
0001E926                            
0001E926                            loc_1B2E4:
0001E926 1038 FEC5                  		move.b	(v_ani2_frame).w,d0
0001E92A 1340 0138                  		move.b	d0,$138(a1)
0001E92E 1340 0160                  		move.b	d0,$160(a1)
0001E932 1340 0148                  		move.b	d0,$148(a1)
0001E936 1340 0150                  		move.b	d0,$150(a1)
0001E93A 1340 01D8                  		move.b	d0,$1D8(a1)
0001E93E 1340 01E0                  		move.b	d0,$1E0(a1)
0001E942 1340 01E8                  		move.b	d0,$1E8(a1)
0001E946 1340 01F0                  		move.b	d0,$1F0(a1)
0001E94A 1340 01F8                  		move.b	d0,$1F8(a1)
0001E94E 1340 0200                  		move.b	d0,$200(a1)
0001E952 5338 FEC6                  		subq.b	#1,(v_ani3_time).w
0001E956 6A00                       		bpl.s	loc_1B326
0001E958 11FC 0004 FEC6             		move.b	#4,(v_ani3_time).w
0001E95E 5238 FEC7                  		addq.b	#1,(v_ani3_frame).w
0001E962 0238 0003 FEC7             		andi.b	#3,(v_ani3_frame).w
0001E968                            
0001E968                            loc_1B326:
0001E968 1038 FEC7                  		move.b	(v_ani3_frame).w,d0
0001E96C 1340 0168                  		move.b	d0,$168(a1)
0001E970 1340 0170                  		move.b	d0,$170(a1)
0001E974 1340 0178                  		move.b	d0,$178(a1)
0001E978 1340 0180                  		move.b	d0,$180(a1)
0001E97C 5338 FEC0                  		subq.b	#1,(v_ani0_time).w
0001E980 6A00                       		bpl.s	loc_1B350
0001E982 11FC 0007 FEC0             		move.b	#7,(v_ani0_time).w
0001E988 5338 FEC1                  		subq.b	#1,(v_ani0_frame).w
0001E98C 0238 0007 FEC1             		andi.b	#7,(v_ani0_frame).w
0001E992                            
0001E992                            loc_1B350:
0001E992 43F9 00FF 4016             		lea	($FF4016).l,a1
0001E998 41F9 0000 0000             		lea	(SS_WaRiVramSet).l,a0
0001E99E 7000                       		moveq	#0,d0
0001E9A0 1038 FEC1                  		move.b	(v_ani0_frame).w,d0
0001E9A4 D040                       		add.w	d0,d0
0001E9A6 41F0 0000                  		lea	(a0,d0.w),a0
0001E9AA 3290                       		move.w	(a0),(a1)
0001E9AC 3368 0002 0008             		move.w	2(a0),8(a1)
0001E9B2 3368 0004 0010             		move.w	4(a0),$10(a1)
0001E9B8 3368 0006 0018             		move.w	6(a0),$18(a1)
0001E9BE 3368 0008 0020             		move.w	8(a0),$20(a1)
0001E9C4 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001E9CA 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001E9D0 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001E9D6 D0FC 0020                  		adda.w	#$20,a0
0001E9DA D2FC 0048                  		adda.w	#$48,a1
0001E9DE 3290                       		move.w	(a0),(a1)
0001E9E0 3368 0002 0008             		move.w	2(a0),8(a1)
0001E9E6 3368 0004 0010             		move.w	4(a0),$10(a1)
0001E9EC 3368 0006 0018             		move.w	6(a0),$18(a1)
0001E9F2 3368 0008 0020             		move.w	8(a0),$20(a1)
0001E9F8 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001E9FE 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001EA04 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001EA0A D0FC 0020                  		adda.w	#$20,a0
0001EA0E D2FC 0048                  		adda.w	#$48,a1
0001EA12 3290                       		move.w	(a0),(a1)
0001EA14 3368 0002 0008             		move.w	2(a0),8(a1)
0001EA1A 3368 0004 0010             		move.w	4(a0),$10(a1)
0001EA20 3368 0006 0018             		move.w	6(a0),$18(a1)
0001EA26 3368 0008 0020             		move.w	8(a0),$20(a1)
0001EA2C 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001EA32 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001EA38 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001EA3E D0FC 0020                  		adda.w	#$20,a0
0001EA42 D2FC 0048                  		adda.w	#$48,a1
0001EA46 3290                       		move.w	(a0),(a1)
0001EA48 3368 0002 0008             		move.w	2(a0),8(a1)
0001EA4E 3368 0004 0010             		move.w	4(a0),$10(a1)
0001EA54 3368 0006 0018             		move.w	6(a0),$18(a1)
0001EA5A 3368 0008 0020             		move.w	8(a0),$20(a1)
0001EA60 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001EA66 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001EA6C 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001EA72 D0FC 0020                  		adda.w	#$20,a0
0001EA76 D2FC 0048                  		adda.w	#$48,a1
0001EA7A 4E75                       		rts	
0001EA7C                            ; End of function SS_AniWallsRings
0001EA7C                            
0001EA7C                            ; ===========================================================================
0001EA7C 0142 6142 0142 0142 0142+  SS_WaRiVramSet:	dc.w $142, $6142, $142,	$142, $142, $142, $142,	$6142
0001EA8C 0142 6142 0142 0142 0142+  		dc.w $142, $6142, $142,	$142, $142, $142, $142,	$6142
0001EA9C 2142 0142 2142 2142 2142+  		dc.w $2142, $142, $2142, $2142,	$2142, $2142, $2142, $142
0001EAAC 2142 0142 2142 2142 2142+  		dc.w $2142, $142, $2142, $2142,	$2142, $2142, $2142, $142
0001EABC 4142 2142 4142 4142 4142+  		dc.w $4142, $2142, $4142, $4142, $4142,	$4142, $4142, $2142
0001EACC 4142 2142 4142 4142 4142+  		dc.w $4142, $2142, $4142, $4142, $4142,	$4142, $4142, $2142
0001EADC 6142 4142 6142 6142 6142+  		dc.w $6142, $4142, $6142, $6142, $6142,	$6142, $6142, $4142
0001EAEC 6142 4142 6142 6142 6142+  		dc.w $6142, $4142, $6142, $6142, $6142,	$6142, $6142, $4142
0001EAFC                            ; ---------------------------------------------------------------------------
0001EAFC                            ; Subroutine to	remove items when you collect them in the special stage
0001EAFC                            ; ---------------------------------------------------------------------------
0001EAFC                            
0001EAFC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001EAFC                            
0001EAFC                            
0001EAFC                            SS_RemoveCollectedItem:
0001EAFC 45F9 00FF 4400             		lea	($FF4400).l,a2
0001EB02 303C 001F                  		move.w	#$1F,d0
0001EB06                            
0001EB06                            loc_1B4C4:
0001EB06 4A12                       		tst.b	(a2)
0001EB08 6700                       		beq.s	locret_1B4CE
0001EB0A 504A                       		addq.w	#8,a2
0001EB0C 51C8 FFF8                  		dbf	d0,loc_1B4C4
0001EB10                            
0001EB10                            locret_1B4CE:
0001EB10 4E75                       		rts	
0001EB12                            ; End of function SS_RemoveCollectedItem
0001EB12                            
0001EB12                            ; ---------------------------------------------------------------------------
0001EB12                            ; Subroutine to	animate	special	stage items when you touch them
0001EB12                            ; ---------------------------------------------------------------------------
0001EB12                            
0001EB12                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001EB12                            
0001EB12                            
0001EB12                            SS_AniItems:
0001EB12 41F9 00FF 4400             		lea	($FF4400).l,a0
0001EB18 3E3C 001F                  		move.w	#$1F,d7
0001EB1C                            
0001EB1C                            loc_1B4DA:
0001EB1C 7000                       		moveq	#0,d0
0001EB1E 1010                       		move.b	(a0),d0
0001EB20 6700                       		beq.s	loc_1B4E8
0001EB22 E548                       		lsl.w	#2,d0
0001EB24 227B 0000                  		movea.l	SS_AniIndex-4(pc,d0.w),a1
0001EB28 4E91                       		jsr	(a1)
0001EB2A                            
0001EB2A                            loc_1B4E8:
0001EB2A 5048                       		addq.w	#8,a0
0001EB2C                            
0001EB2C                            loc_1B4EA:
0001EB2C 51CF FFEE                  		dbf	d7,loc_1B4DA
0001EB30                            
0001EB30 4E75                       		rts	
0001EB32                            ; End of function SS_AniItems
0001EB32                            
0001EB32                            ; ===========================================================================
0001EB32 0000 0000                  SS_AniIndex:	dc.l SS_AniRingSparks
0001EB36 0000 0000                  		dc.l SS_AniBumper
0001EB3A 0000 0000                  		dc.l SS_Ani1Up
0001EB3E 0000 0000                  		dc.l SS_AniReverse
0001EB42 0000 0000                  		dc.l SS_AniEmeraldSparks
0001EB46 0000 0000                  		dc.l SS_AniGlassBlock
0001EB4A                            ; ===========================================================================
0001EB4A                            
0001EB4A                            SS_AniRingSparks:
0001EB4A 5328 0002                  		subq.b	#1,2(a0)
0001EB4E 6A00                       		bpl.s	locret_1B530
0001EB50 117C 0005 0002             		move.b	#5,2(a0)
0001EB56 7000                       		moveq	#0,d0
0001EB58 1028 0003                  		move.b	3(a0),d0
0001EB5C 5228 0003                  		addq.b	#1,3(a0)
0001EB60 2268 0004                  		movea.l	4(a0),a1
0001EB64 103B 0000                  		move.b	SS_AniRingData(pc,d0.w),d0
0001EB68 1280                       		move.b	d0,(a1)
0001EB6A 6600                       		bne.s	locret_1B530
0001EB6C 4290                       		clr.l	(a0)
0001EB6E 42A8 0004                  		clr.l	4(a0)
0001EB72                            
0001EB72                            locret_1B530:
0001EB72 4E75                       		rts	
0001EB74                            ; ===========================================================================
0001EB74 4243 4445 0000             SS_AniRingData:	dc.b $42, $43, $44, $45, 0, 0
0001EB7A                            ; ===========================================================================
0001EB7A                            
0001EB7A                            SS_AniBumper:
0001EB7A 5328 0002                  		subq.b	#1,2(a0)
0001EB7E 6A00                       		bpl.s	locret_1B566
0001EB80 117C 0007 0002             		move.b	#7,2(a0)
0001EB86 7000                       		moveq	#0,d0
0001EB88 1028 0003                  		move.b	3(a0),d0
0001EB8C 5228 0003                  		addq.b	#1,3(a0)
0001EB90 2268 0004                  		movea.l	4(a0),a1
0001EB94 103B 0000                  		move.b	SS_AniBumpData(pc,d0.w),d0
0001EB98 6600                       		bne.s	loc_1B564
0001EB9A 4290                       		clr.l	(a0)
0001EB9C 42A8 0004                  		clr.l	4(a0)
0001EBA0 12BC 0025                  		move.b	#$25,(a1)
0001EBA4 4E75                       		rts	
0001EBA6                            ; ===========================================================================
0001EBA6                            
0001EBA6                            loc_1B564:
0001EBA6 1280                       		move.b	d0,(a1)
0001EBA8                            
0001EBA8                            locret_1B566:
0001EBA8 4E75                       		rts	
0001EBAA                            ; ===========================================================================
0001EBAA 3233 3233 0000             SS_AniBumpData:	dc.b $32, $33, $32, $33, 0, 0
0001EBB0                            ; ===========================================================================
0001EBB0                            
0001EBB0                            SS_Ani1Up:
0001EBB0 5328 0002                  		subq.b	#1,2(a0)
0001EBB4 6A00                       		bpl.s	locret_1B596
0001EBB6 117C 0005 0002             		move.b	#5,2(a0)
0001EBBC 7000                       		moveq	#0,d0
0001EBBE 1028 0003                  		move.b	3(a0),d0
0001EBC2 5228 0003                  		addq.b	#1,3(a0)
0001EBC6 2268 0004                  		movea.l	4(a0),a1
0001EBCA 103B 0000                  		move.b	SS_Ani1UpData(pc,d0.w),d0
0001EBCE 1280                       		move.b	d0,(a1)
0001EBD0 6600                       		bne.s	locret_1B596
0001EBD2 4290                       		clr.l	(a0)
0001EBD4 42A8 0004                  		clr.l	4(a0)
0001EBD8                            
0001EBD8                            locret_1B596:
0001EBD8 4E75                       		rts	
0001EBDA                            ; ===========================================================================
0001EBDA 4647 4849 0000             SS_Ani1UpData:	dc.b $46, $47, $48, $49, 0, 0
0001EBE0                            ; ===========================================================================
0001EBE0                            
0001EBE0                            SS_AniReverse:
0001EBE0 5328 0002                  		subq.b	#1,2(a0)
0001EBE4 6A00                       		bpl.s	locret_1B5CC
0001EBE6 117C 0007 0002             		move.b	#7,2(a0)
0001EBEC 7000                       		moveq	#0,d0
0001EBEE 1028 0003                  		move.b	3(a0),d0
0001EBF2 5228 0003                  		addq.b	#1,3(a0)
0001EBF6 2268 0004                  		movea.l	4(a0),a1
0001EBFA 103B 0000                  		move.b	SS_AniRevData(pc,d0.w),d0
0001EBFE 6600                       		bne.s	loc_1B5CA
0001EC00 4290                       		clr.l	(a0)
0001EC02 42A8 0004                  		clr.l	4(a0)
0001EC06 12BC 002B                  		move.b	#$2B,(a1)
0001EC0A 4E75                       		rts	
0001EC0C                            ; ===========================================================================
0001EC0C                            
0001EC0C                            loc_1B5CA:
0001EC0C 1280                       		move.b	d0,(a1)
0001EC0E                            
0001EC0E                            locret_1B5CC:
0001EC0E 4E75                       		rts	
0001EC10                            ; ===========================================================================
0001EC10 2B31 2B31 0000             SS_AniRevData:	dc.b $2B, $31, $2B, $31, 0, 0
0001EC16                            ; ===========================================================================
0001EC16                            
0001EC16                            SS_AniEmeraldSparks:
0001EC16 5328 0002                  		subq.b	#1,2(a0)
0001EC1A 6A00                       		bpl.s	locret_1B60C
0001EC1C 117C 0005 0002             		move.b	#5,2(a0)
0001EC22 7000                       		moveq	#0,d0
0001EC24 1028 0003                  		move.b	3(a0),d0
0001EC28 5228 0003                  		addq.b	#1,3(a0)
0001EC2C 2268 0004                  		movea.l	4(a0),a1
0001EC30 103B 0000                  		move.b	SS_AniEmerData(pc,d0.w),d0
0001EC34 1280                       		move.b	d0,(a1)
0001EC36 6600                       		bne.s	locret_1B60C
0001EC38 4290                       		clr.l	(a0)
0001EC3A 42A8 0004                  		clr.l	4(a0)
0001EC3E 11FC 0004 D024             		move.b	#4,($FFFFD024).w
0001EC4E                            
0001EC4E                            locret_1B60C:
0001EC4E 4E75                       		rts	
0001EC50                            ; ===========================================================================
0001EC50 4647 4849 0000             SS_AniEmerData:	dc.b $46, $47, $48, $49, 0, 0
0001EC56                            ; ===========================================================================
0001EC56                            
0001EC56                            SS_AniGlassBlock:
0001EC56 5328 0002                  		subq.b	#1,2(a0)
0001EC5A 6A00                       		bpl.s	locret_1B640
0001EC5C 117C 0001 0002             		move.b	#1,2(a0)
0001EC62 7000                       		moveq	#0,d0
0001EC64 1028 0003                  		move.b	3(a0),d0
0001EC68 5228 0003                  		addq.b	#1,3(a0)
0001EC6C 2268 0004                  		movea.l	4(a0),a1
0001EC70 103B 0000                  		move.b	SS_AniGlassData(pc,d0.w),d0
0001EC74 1280                       		move.b	d0,(a1)
0001EC76 6600                       		bne.s	locret_1B640
0001EC78 12A8 0004                  		move.b	4(a0),(a1)
0001EC7C 4290                       		clr.l	(a0)
0001EC7E 42A8 0004                  		clr.l	4(a0)
0001EC82                            
0001EC82                            locret_1B640:
0001EC82 4E75                       		rts	
0001EC84                            ; ===========================================================================
0001EC84 4B4C 4D4E 4B4C 4D4E 0000   SS_AniGlassData:dc.b $4B, $4C, $4D, $4E, $4B, $4C, $4D,	$4E, 0,	0
0001EC8E                            
0001EC8E                            ; ---------------------------------------------------------------------------
0001EC8E                            ; Special stage	layout pointers
0001EC8E                            ; ---------------------------------------------------------------------------
0001EC8E                            SS_LayoutIndex:
0001EC8E 0000 0000                  		dc.l SS_1
0001EC92 0000 0000                  		dc.l SS_2
0001EC96 0000 0000                  		dc.l SS_3
0001EC9A 0000 0000                  		dc.l SS_4
0001EC9E 0000 0000                  		dc.l SS_5
0001ECA2 0000 0000                  		dc.l SS_6
0001ECA6                            		even
0001ECA6                            
0001ECA6                            ; ---------------------------------------------------------------------------
0001ECA6                            ; Special stage start locations
0001ECA6                            ; ---------------------------------------------------------------------------
0001ECA6                            SS_StartLoc:	include	"_inc\Start Location Array - Special Stages.asm"
0001ECA6                            ; ---------------------------------------------------------------------------
0001ECA6                            ; Special stage start locations
0001ECA6                            ; ---------------------------------------------------------------------------
0001ECA6                            
0001ECA6                            		incbin	"startpos\ss1.bin"
0001ECAA                            		incbin	"startpos\ss2.bin"
0001ECAE                            		incbin	"startpos\ss3.bin"
0001ECB2                            		incbin	"startpos\ss4.bin"
0001ECB6                            		incbin	"startpos\ss5.bin"
0001ECBA                            		incbin	"startpos\ss6.bin"
0001ECBE                            		even
0001ECBE                            		even
0001ECBE                            
0001ECBE                            ; ---------------------------------------------------------------------------
0001ECBE                            ; Subroutine to	load special stage layout
0001ECBE                            ; ---------------------------------------------------------------------------
0001ECBE                            
0001ECBE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001ECBE                            
0001ECBE                            
0001ECBE                            SS_Load:
0001ECBE 7000                       		moveq	#0,d0
0001ECC0 1038 FE16                  		move.b	(v_lastspecial).w,d0 ; load number of last special stage entered
0001ECC4 5238 FE16                  		addq.b	#1,(v_lastspecial).w
0001ECC8 0C38 0006 FE16             		cmpi.b	#6,(v_lastspecial).w
0001ECCE 6500                       		blo.s	SS_ChkEmldNum
0001ECD0 11FC 0000 FE16             		move.b	#0,(v_lastspecial).w ; reset if higher than 6
0001ECD6                            
0001ECD6                            SS_ChkEmldNum:
0001ECD6 0C38 0006 FE57             		cmpi.b	#6,(v_emeralds).w ; do you have all emeralds?
0001ECDC 6700                       		beq.s	SS_LoadData	; if yes, branch
0001ECDE 7200                       		moveq	#0,d1
0001ECE0 1238 FE57                  		move.b	(v_emeralds).w,d1
0001ECE4 5301                       		subq.b	#1,d1
0001ECE6 6500                       		blo.s	SS_LoadData
0001ECE8 47F8 FE58                  		lea	(v_emldlist).w,a3 ; check which emeralds you have
0001ECEC                            
0001ECEC                            SS_ChkEmldLoop:	
0001ECEC B033 1000                  		cmp.b	(a3,d1.w),d0
0001ECF0 6600                       		bne.s	SS_ChkEmldRepeat
0001ECF2 60CA                       		bra.s	SS_Load
0001ECF4                            ; ===========================================================================
0001ECF4                            
0001ECF4                            SS_ChkEmldRepeat:
0001ECF4 51C9 FFF6                  		dbf	d1,SS_ChkEmldLoop
0001ECF8                            
0001ECF8                            SS_LoadData:
0001ECF8 E548                       		lsl.w	#2,d0
0001ECFA 43FB 00AA                  		lea	SS_StartLoc(pc,d0.w),a1
0001ECFE 31D9 D008                  		move.w	(a1)+,(v_player+obX).w
0001ED02 31D9 D00C                  		move.w	(a1)+,(v_player+obY).w
0001ED06 207B 0086                  		movea.l	SS_LayoutIndex(pc,d0.w),a0
0001ED0A 43F9 00FF 4000             		lea	($FF4000).l,a1
0001ED10 303C 0000                  		move.w	#0,d0
0001ED14 4EB9 0000 18D8             		jsr	(EniDec).l
0001ED1A 43F9 00FF 0000             		lea	($FF0000).l,a1
0001ED20 303C 0FFF                  		move.w	#$FFF,d0
0001ED24                            
0001ED24                            SS_ClrRAM3:
0001ED24 4299                       		clr.l	(a1)+
0001ED26 51C8 FFFC                  		dbf	d0,SS_ClrRAM3
0001ED2A                            
0001ED2A 43F9 00FF 1020             		lea	($FF1020).l,a1
0001ED30 41F9 00FF 4000             		lea	($FF4000).l,a0
0001ED36 723F                       		moveq	#$3F,d1
0001ED38                            
0001ED38                            loc_1B6F6:
0001ED38 743F                       		moveq	#$3F,d2
0001ED3A                            
0001ED3A                            loc_1B6F8:
0001ED3A 12D8                       		move.b	(a0)+,(a1)+
0001ED3C 51CA FFFC                  		dbf	d2,loc_1B6F8
0001ED40                            
0001ED40 43E9 0040                  		lea	$40(a1),a1
0001ED44 51C9 FFF2                  		dbf	d1,loc_1B6F6
0001ED48                            
0001ED48 43F9 00FF 4008             		lea	($FF4008).l,a1
0001ED4E 41F9 0000 0000             		lea	(SS_MapIndex).l,a0
0001ED54 724D                       		moveq	#$4D,d1
0001ED56                            
0001ED56                            loc_1B714:
0001ED56 22D8                       		move.l	(a0)+,(a1)+
0001ED58 32FC 0000                  		move.w	#0,(a1)+
0001ED5C 1368 FFFC FFFF             		move.b	-4(a0),-1(a1)
0001ED62 32D8                       		move.w	(a0)+,(a1)+
0001ED64 51C9 FFF0                  		dbf	d1,loc_1B714
0001ED68                            
0001ED68 43F9 00FF 4400             		lea	($FF4400).l,a1
0001ED6E 323C 003F                  		move.w	#$3F,d1
0001ED72                            
0001ED72                            loc_1B730:
0001ED72                            
0001ED72 4299                       		clr.l	(a1)+
0001ED74 51C9 FFFC                  		dbf	d1,loc_1B730
0001ED78                            
0001ED78 4E75                       		rts	
0001ED7A                            ; End of function SS_Load
0001ED7A                            
0001ED7A                            ; ===========================================================================
0001ED7A                            
0001ED7A                            SS_MapIndex:
0001ED7A                            		include	"_inc\Special Stage Mappings & VRAM Pointers.asm"
0001ED7A                            ; ---------------------------------------------------------------------------
0001ED7A                            ; Special stage	mappings and VRAM pointers
0001ED7A                            ; ---------------------------------------------------------------------------
0001ED7A 0000 0000                  	dc.l Map_SSWalls	; address of mappings
0001ED7E 0142                       	dc.w $142		; VRAM setting
0001ED80 0000 0000                  	dc.l Map_SSWalls
0001ED84 0142                       	dc.w $142
0001ED86 0000 0000                  	dc.l Map_SSWalls
0001ED8A 0142                       	dc.w $142
0001ED8C 0000 0000                  	dc.l Map_SSWalls
0001ED90 0142                       	dc.w $142
0001ED92 0000 0000                  	dc.l Map_SSWalls
0001ED96 0142                       	dc.w $142
0001ED98 0000 0000                  	dc.l Map_SSWalls
0001ED9C 0142                       	dc.w $142
0001ED9E 0000 0000                  	dc.l Map_SSWalls
0001EDA2 0142                       	dc.w $142
0001EDA4 0000 0000                  	dc.l Map_SSWalls
0001EDA8 0142                       	dc.w $142
0001EDAA 0000 0000                  	dc.l Map_SSWalls
0001EDAE 0142                       	dc.w $142
0001EDB0 0000 0000                  	dc.l Map_SSWalls
0001EDB4 2142                       	dc.w $2142
0001EDB6 0000 0000                  	dc.l Map_SSWalls
0001EDBA 2142                       	dc.w $2142
0001EDBC 0000 0000                  	dc.l Map_SSWalls
0001EDC0 2142                       	dc.w $2142
0001EDC2 0000 0000                  	dc.l Map_SSWalls
0001EDC6 2142                       	dc.w $2142
0001EDC8 0000 0000                  	dc.l Map_SSWalls
0001EDCC 2142                       	dc.w $2142
0001EDCE 0000 0000                  	dc.l Map_SSWalls
0001EDD2 2142                       	dc.w $2142
0001EDD4 0000 0000                  	dc.l Map_SSWalls
0001EDD8 2142                       	dc.w $2142
0001EDDA 0000 0000                  	dc.l Map_SSWalls
0001EDDE 2142                       	dc.w $2142
0001EDE0 0000 0000                  	dc.l Map_SSWalls
0001EDE4 2142                       	dc.w $2142
0001EDE6 0000 0000                  	dc.l Map_SSWalls
0001EDEA 4142                       	dc.w $4142
0001EDEC 0000 0000                  	dc.l Map_SSWalls
0001EDF0 4142                       	dc.w $4142
0001EDF2 0000 0000                  	dc.l Map_SSWalls
0001EDF6 4142                       	dc.w $4142
0001EDF8 0000 0000                  	dc.l Map_SSWalls
0001EDFC 4142                       	dc.w $4142
0001EDFE 0000 0000                  	dc.l Map_SSWalls
0001EE02 4142                       	dc.w $4142
0001EE04 0000 0000                  	dc.l Map_SSWalls
0001EE08 4142                       	dc.w $4142
0001EE0A 0000 0000                  	dc.l Map_SSWalls
0001EE0E 4142                       	dc.w $4142
0001EE10 0000 0000                  	dc.l Map_SSWalls
0001EE14 4142                       	dc.w $4142
0001EE16 0000 0000                  	dc.l Map_SSWalls
0001EE1A 4142                       	dc.w $4142
0001EE1C 0000 0000                  	dc.l Map_SSWalls
0001EE20 6142                       	dc.w $6142
0001EE22 0000 0000                  	dc.l Map_SSWalls
0001EE26 6142                       	dc.w $6142
0001EE28 0000 0000                  	dc.l Map_SSWalls
0001EE2C 6142                       	dc.w $6142
0001EE2E 0000 0000                  	dc.l Map_SSWalls
0001EE32 6142                       	dc.w $6142
0001EE34 0000 0000                  	dc.l Map_SSWalls
0001EE38 6142                       	dc.w $6142
0001EE3A 0000 0000                  	dc.l Map_SSWalls
0001EE3E 6142                       	dc.w $6142
0001EE40 0000 0000                  	dc.l Map_SSWalls
0001EE44 6142                       	dc.w $6142
0001EE46 0000 0000                  	dc.l Map_SSWalls
0001EE4A 6142                       	dc.w $6142
0001EE4C 0000 0000                  	dc.l Map_SSWalls
0001EE50 6142                       	dc.w $6142
0001EE52 0001 0FB0                  	dc.l Map_Bump
0001EE56 023B                       	dc.w $23B
0001EE58 0000 0000                  	dc.l Map_SS_R
0001EE5C 0570                       	dc.w $570
0001EE5E 0000 0000                  	dc.l Map_SS_R
0001EE62 0251                       	dc.w $251
0001EE64 0000 0000                  	dc.l Map_SS_R
0001EE68 0370                       	dc.w $370
0001EE6A 0000 0000                  	dc.l Map_SS_Up
0001EE6E 0263                       	dc.w $263
0001EE70 0000 0000                  	dc.l Map_SS_Down
0001EE74 0263                       	dc.w $263
0001EE76 0000 0000                  	dc.l Map_SS_R
0001EE7A 22F0                       	dc.w $22F0
0001EE7C 0000 0000                  	dc.l Map_SS_Glass
0001EE80 0470                       	dc.w $470
0001EE82 0000 0000                  	dc.l Map_SS_Glass
0001EE86 05F0                       	dc.w $5F0
0001EE88 0000 0000                  	dc.l Map_SS_Glass
0001EE8C 65F0                       	dc.w $65F0
0001EE8E 0000 0000                  	dc.l Map_SS_Glass
0001EE92 25F0                       	dc.w $25F0
0001EE94 0000 0000                  	dc.l Map_SS_Glass
0001EE98 45F0                       	dc.w $45F0
0001EE9A 0000 0000                  	dc.l Map_SS_R
0001EE9E 02F0                       	dc.w $2F0
0001EEA0 0101 0FB0                  	dc.l Map_Bump+$1000000	; add frame no.	* $1000000
0001EEA4 023B                       	dc.w $23B
0001EEA6 0201 0FB0                  	dc.l Map_Bump+$2000000
0001EEAA 023B                       	dc.w $23B
0001EEAC 0000 0000                  	dc.l Map_SS_R
0001EEB0 0797                       	dc.w $797
0001EEB2 0000 0000                  	dc.l Map_SS_R
0001EEB6 07A0                       	dc.w $7A0
0001EEB8 0000 0000                  	dc.l Map_SS_R
0001EEBC 07A9                       	dc.w $7A9
0001EEBE 0000 0000                  	dc.l Map_SS_R
0001EEC2 0797                       	dc.w $797
0001EEC4 0000 0000                  	dc.l Map_SS_R
0001EEC8 07A0                       	dc.w $7A0
0001EECA 0000 0000                  	dc.l Map_SS_R
0001EECE 07A9                       	dc.w $7A9
0001EED0 0000 C098                  	dc.l Map_Ring
0001EED4 2798                       	dc.w $2798
0001EED6 0000 0000                  	dc.l Map_SS_Chaos3
0001EEDA 0770                       	dc.w $770
0001EEDC 0000 0000                  	dc.l Map_SS_Chaos3
0001EEE0 2770                       	dc.w $2770
0001EEE2 0000 0000                  	dc.l Map_SS_Chaos3
0001EEE6 4770                       	dc.w $4770
0001EEE8 0000 0000                  	dc.l Map_SS_Chaos3
0001EEEC 6770                       	dc.w $6770
0001EEEE 0000 0000                  	dc.l Map_SS_Chaos1
0001EEF2 0770                       	dc.w $770
0001EEF4 0000 0000                  	dc.l Map_SS_Chaos2
0001EEF8 0770                       	dc.w $770
0001EEFA 0000 0000                  	dc.l Map_SS_R
0001EEFE 04F0                       	dc.w $4F0
0001EF00 0400 C098                  	dc.l Map_Ring+$4000000
0001EF04 2798                       	dc.w $2798
0001EF06 0500 C098                  	dc.l Map_Ring+$5000000
0001EF0A 2798                       	dc.w $2798
0001EF0C 0600 C098                  	dc.l Map_Ring+$6000000
0001EF10 2798                       	dc.w $2798
0001EF12 0700 C098                  	dc.l Map_Ring+$7000000
0001EF16 2798                       	dc.w $2798
0001EF18 0000 0000                  	dc.l Map_SS_Glass
0001EF1C 23F0                       	dc.w $23F0
0001EF1E 0000 0000                  	dc.l Map_SS_Glass+$1000000
0001EF22 23F0                       	dc.w $23F0
0001EF24 0000 0000                  	dc.l Map_SS_Glass+$2000000
0001EF28 23F0                       	dc.w $23F0
0001EF2A 0000 0000                  	dc.l Map_SS_Glass+$3000000
0001EF2E 23F0                       	dc.w $23F0
0001EF30 0000 0000                  	dc.l Map_SS_R+$2000000
0001EF34 04F0                       	dc.w $4F0
0001EF36 0000 0000                  	dc.l Map_SS_Glass
0001EF3A 05F0                       	dc.w $5F0
0001EF3C 0000 0000                  	dc.l Map_SS_Glass
0001EF40 65F0                       	dc.w $65F0
0001EF42 0000 0000                  	dc.l Map_SS_Glass
0001EF46 25F0                       	dc.w $25F0
0001EF48 0000 0000                  	dc.l Map_SS_Glass
0001EF4C 45F0                       	dc.w $45F0
0001EF4C 45F0                       	dc.w $45F0
0001EF4E                            
0001EF4E                            Map_SS_R:	include	"_maps\SS R Block.asm"
0001EF4E                            ; ---------------------------------------------------------------------------
0001EF4E                            ; Sprite mappings - special stage "R" block
0001EF4E                            ; ---------------------------------------------------------------------------
0001EF4E                            Map_SS_R_internal:
0001EF4E 0000                       		dc.w byte_1B912-Map_SS_R_internal
0001EF50 0000                       		dc.w byte_1B918-Map_SS_R_internal
0001EF52 0000                       		dc.w byte_1B91E-Map_SS_R_internal
0001EF54 01                         byte_1B912:	dc.b 1
0001EF55 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0001EF5A 01                         byte_1B918:	dc.b 1
0001EF5B F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
0001EF60 00                         byte_1B91E:	dc.b 0
0001EF62 00                         		even
0001EF62 00                         		even
0001EF62                            Map_SS_Glass:	include	"_maps\SS Glass Block.asm"
0001EF62                            ; ---------------------------------------------------------------------------
0001EF62                            ; Sprite mappings - special stage breakable glass blocks and red-white blocks
0001EF62                            ; ---------------------------------------------------------------------------
0001EF62                            Map_SS_Glass_internal:
0001EF62 0000                       		dc.w byte_1B928-Map_SS_Glass_internal
0001EF64 0000                       		dc.w byte_1B92E-Map_SS_Glass_internal
0001EF66 0000                       		dc.w byte_1B934-Map_SS_Glass_internal
0001EF68 0000                       		dc.w byte_1B93A-Map_SS_Glass_internal
0001EF6A 01                         byte_1B928:	dc.b 1
0001EF6B F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0001EF70 01                         byte_1B92E:	dc.b 1
0001EF71 F40A 0800 F4               		dc.b $F4, $A, 8, 0, $F4
0001EF76 01                         byte_1B934:	dc.b 1
0001EF77 F40A 1800 F4               		dc.b $F4, $A, $18, 0, $F4
0001EF7C 01                         byte_1B93A:	dc.b 1
0001EF7D F40A 1000 F4               		dc.b $F4, $A, $10, 0, $F4
0001EF82                            		even
0001EF82                            		even
0001EF82                            Map_SS_Up:	include	"_maps\SS UP Block.asm"
0001EF82                            ; ---------------------------------------------------------------------------
0001EF82                            ; Sprite mappings - special stage "UP" block
0001EF82                            ; ---------------------------------------------------------------------------
0001EF82                            Map_SS_Up_internal:
0001EF82 0000                       		dc.w byte_1B944-Map_SS_Up_internal
0001EF84 0000                       		dc.w byte_1B94A-Map_SS_Up_internal
0001EF86 01                         byte_1B944:	dc.b 1
0001EF87 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0001EF8C 01                         byte_1B94A:	dc.b 1
0001EF8D F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
0001EF92                            		even
0001EF92                            		even
0001EF92                            Map_SS_Down:	include	"_maps\SS DOWN Block.asm"
0001EF92                            ; ---------------------------------------------------------------------------
0001EF92                            ; Sprite mappings - special stage "DOWN" block
0001EF92                            ; ---------------------------------------------------------------------------
0001EF92                            Map_SS_Down_internal:
0001EF92 0000                       		dc.w byte_1B954-Map_SS_Down_internal
0001EF94 0000                       		dc.w byte_1B95A-Map_SS_Down_internal
0001EF96 01                         byte_1B954:	dc.b 1
0001EF97 F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
0001EF9C 01                         byte_1B95A:	dc.b 1
0001EF9D F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
0001EFA2                            		even
0001EFA2                            		even
0001EFA2                            		include	"_maps\SS Chaos Emeralds.asm"
0001EFA2                            ; ---------------------------------------------------------------------------
0001EFA2                            ; Sprite mappings - special stage chaos	emeralds
0001EFA2                            ; ---------------------------------------------------------------------------
0001EFA2 0000                       Map_SS_Chaos1:	dc.w byte_1B96C-Map_SS_Chaos1
0001EFA4 0000                       		dc.w byte_1B97E-Map_SS_Chaos1
0001EFA6 0000                       Map_SS_Chaos2:	dc.w byte_1B972-Map_SS_Chaos2
0001EFA8 0000                       		dc.w byte_1B97E-Map_SS_Chaos2
0001EFAA 0000                       Map_SS_Chaos3:	dc.w byte_1B978-Map_SS_Chaos3
0001EFAC 0000                       		dc.w byte_1B97E-Map_SS_Chaos3
0001EFAE 01                         byte_1B96C:	dc.b 1
0001EFAF F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0001EFB4 01                         byte_1B972:	dc.b 1
0001EFB5 F805 2004 F8               		dc.b $F8, 5, $20, 4, $F8
0001EFBA 01                         byte_1B978:	dc.b 1
0001EFBB F805 0008 F8               		dc.b $F8, 5, 0,	8, $F8
0001EFC0 01                         byte_1B97E:	dc.b 1
0001EFC1 F805 000C F8               		dc.b $F8, 5, 0,	$C, $F8
0001EFC6                            		even
0001EFC6                            		even
0001EFC6                            
0001EFC6                            		include	"_incObj\09 Sonic in Special Stage.asm"
0001EFC6                            ; ---------------------------------------------------------------------------
0001EFC6                            ; Object 09 - Sonic (special stage)
0001EFC6                            ; ---------------------------------------------------------------------------
0001EFC6                            
0001EFC6                            SonicSpecial:
0001EFC6 4A78 FE08                  		tst.w	(v_debuguse).w	; is debug mode	being used?
0001EFCA 6700                       		beq.s	Obj09_Normal	; if not, branch
0001EFCC 6100 0000                  		bsr.w	SS_FixCamera
0001EFD0 6000 0000                  		bra.w	DebugMode
0001EFD4                            ; ===========================================================================
0001EFD4                            
0001EFD4                            Obj09_Normal:
0001EFD4 7000                       		moveq	#0,d0
0001EFD6 1028 0024                  		move.b	obRoutine(a0),d0
0001EFDA 323B 0000                  		move.w	Obj09_Index(pc,d0.w),d1
0001EFDE 4EFB 1000                  		jmp	Obj09_Index(pc,d1.w)
0001EFE2                            ; ===========================================================================
0001EFE2 0000                       Obj09_Index:	dc.w Obj09_Main-Obj09_Index
0001EFE4 0000                       		dc.w Obj09_ChkDebug-Obj09_Index
0001EFE6 0000                       		dc.w Obj09_ExitStage-Obj09_Index
0001EFE8 0000                       		dc.w Obj09_Exit2-Obj09_Index
0001EFEA                            ; ===========================================================================
0001EFEA                            
0001EFEA                            Obj09_Main:	; Routine 0
0001EFEA 5428 0024                  		addq.b	#2,obRoutine(a0)
0001EFEE 117C 000E 0016             		move.b	#$E,obHeight(a0)
0001EFF4 117C 0007 0017             		move.b	#7,obWidth(a0)
0001EFFA 217C 0000 0000 0004        		move.l	#Map_Sonic,obMap(a0)
0001F002 317C 0780 0002             		move.w	#$780,obGfx(a0)
0001F008 117C 0004 0001             		move.b	#4,obRender(a0)
0001F00E 317C 0000 0018             		move.w	#0,obPriority(a0)
0001F014 117C 0002 001C             		move.b	#id_Roll,obAnim(a0)
0001F01A 08E8 0002 0022             		bset	#2,obStatus(a0)
0001F020 08E8 0001 0022             		bset	#1,obStatus(a0)
0001F026                            
0001F026                            Obj09_ChkDebug:	; Routine 2
0001F026 4A78 FFFA                  		tst.w	(f_debugmode).w	; is debug mode	cheat enabled?
0001F02A 6700                       		beq.s	Obj09_NoDebug	; if not, branch
0001F02C 0838 0004 F605             		btst	#bitB,(v_jpadpress1).w ; is button B pressed?
0001F032 6700                       		beq.s	Obj09_NoDebug	; if not, branch
0001F034 31FC 0001 FE08             		move.w	#1,(v_debuguse).w ; change Sonic into a ring
0001F03A                            
0001F03A                            Obj09_NoDebug:
0001F03A 117C 0000 0030             		move.b	#0,$30(a0)
0001F040 7000                       		moveq	#0,d0
0001F042 1028 0022                  		move.b	obStatus(a0),d0
0001F046 0240 0002                  		andi.w	#2,d0
0001F04A 323B 0000                  		move.w	Obj09_Modes(pc,d0.w),d1
0001F04E 4EBB 1000                  		jsr	Obj09_Modes(pc,d1.w)
0001F052 4EB9 0001 6AAC             		jsr	(Sonic_LoadGfx).l
0001F058 4EF9 0000 FA8C             		jmp	(DisplaySprite).l
0001F05E                            ; ===========================================================================
0001F05E 0000                       Obj09_Modes:	dc.w Obj09_OnWall-Obj09_Modes
0001F060 0000                       		dc.w Obj09_InAir-Obj09_Modes
0001F062                            ; ===========================================================================
0001F062                            
0001F062                            Obj09_OnWall:
0001F062 6100 0000                  		bsr.w	Obj09_Jump
0001F066 6100 0000                  		bsr.w	Obj09_Move
0001F06A 6100 0000                  		bsr.w	Obj09_Fall
0001F06E 6000                       		bra.s	Obj09_Display
0001F070                            ; ===========================================================================
0001F070                            
0001F070                            Obj09_InAir:
0001F070 6100 0000                  		bsr.w	nullsub_2
0001F074 6100 0000                  		bsr.w	Obj09_Move
0001F078 6100 0000                  		bsr.w	Obj09_Fall
0001F07C                            
0001F07C                            Obj09_Display:
0001F07C 6100 0000                  		bsr.w	Obj09_ChkItems
0001F080 6100 0000                  		bsr.w	Obj09_ChkItems2
0001F084 4EB9 0000 FA78             		jsr	(SpeedToPos).l
0001F08A 6100 0000                  		bsr.w	SS_FixCamera
0001F08E 3038 F780                  		move.w	(v_ssangle).w,d0
0001F092 D078 F782                  		add.w	(v_ssrotate).w,d0
0001F096 31C0 F780                  		move.w	d0,(v_ssangle).w
0001F09A 4EB9 0001 6714             		jsr	(Sonic_Animate).l
0001F0A0 4E75                       		rts	
0001F0A2                            
0001F0A2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001F0A2                            
0001F0A2                            
0001F0A2                            Obj09_Move:
0001F0A2 0838 0002 F602             		btst	#bitL,(v_jpadhold2).w ; is left being pressed?
0001F0A8 6700                       		beq.s	Obj09_ChkRight	; if not, branch
0001F0AA 6100 0000                  		bsr.w	Obj09_MoveLeft
0001F0AE                            
0001F0AE                            Obj09_ChkRight:
0001F0AE 0838 0003 F602             		btst	#bitR,(v_jpadhold2).w ; is right being pressed?
0001F0B4 6700                       		beq.s	loc_1BA78	; if not, branch
0001F0B6 6100 0000                  		bsr.w	Obj09_MoveRight
0001F0BA                            
0001F0BA                            loc_1BA78:
0001F0BA 1038 F602                  		move.b	(v_jpadhold2).w,d0
0001F0BE 0200 000C                  		andi.b	#btnL+btnR,d0
0001F0C2 6600                       		bne.s	loc_1BAA8
0001F0C4 3028 0020                  		move.w	obInertia(a0),d0
0001F0C8 6700                       		beq.s	loc_1BAA8
0001F0CA 6B00                       		bmi.s	loc_1BA9A
0001F0CC 0440 000C                  		subi.w	#$C,d0
0001F0D0 6400                       		bcc.s	loc_1BA94
0001F0D2 303C 0000                  		move.w	#0,d0
0001F0D6                            
0001F0D6                            loc_1BA94:
0001F0D6 3140 0020                  		move.w	d0,obInertia(a0)
0001F0DA 6000                       		bra.s	loc_1BAA8
0001F0DC                            ; ===========================================================================
0001F0DC                            
0001F0DC                            loc_1BA9A:
0001F0DC 0640 000C                  		addi.w	#$C,d0
0001F0E0 6400                       		bcc.s	loc_1BAA4
0001F0E2 303C 0000                  		move.w	#0,d0
0001F0E6                            
0001F0E6                            loc_1BAA4:
0001F0E6 3140 0020                  		move.w	d0,obInertia(a0)
0001F0EA                            
0001F0EA                            loc_1BAA8:
0001F0EA 1038 F780                  		move.b	(v_ssangle).w,d0
0001F0EE 0600 0020                  		addi.b	#$20,d0
0001F0F2 0200 00C0                  		andi.b	#$C0,d0
0001F0F6 4400                       		neg.b	d0
0001F0F8 4EB9 0000 3A82             		jsr	(CalcSine).l
0001F0FE C3E8 0020                  		muls.w	obInertia(a0),d1
0001F102 D3A8 0008                  		add.l	d1,obX(a0)
0001F106 C1E8 0020                  		muls.w	obInertia(a0),d0
0001F10A D1A8 000C                  		add.l	d0,obY(a0)
0001F10E 48E7 C000                  		movem.l	d0-d1,-(sp)
0001F112 2428 000C                  		move.l	obY(a0),d2
0001F116 2628 0008                  		move.l	obX(a0),d3
0001F11A 6100 0000                  		bsr.w	sub_1BCE8
0001F11E 6700                       		beq.s	loc_1BAF2
0001F120 4CDF 0003                  		movem.l	(sp)+,d0-d1
0001F124 93A8 0008                  		sub.l	d1,obX(a0)
0001F128 91A8 000C                  		sub.l	d0,obY(a0)
0001F12C 317C 0000 0020             		move.w	#0,obInertia(a0)
0001F132 4E75                       		rts	
0001F134                            ; ===========================================================================
0001F134                            
0001F134                            loc_1BAF2:
0001F134 4CDF 0003                  		movem.l	(sp)+,d0-d1
0001F138 4E75                       		rts	
0001F13A                            ; End of function Obj09_Move
0001F13A                            
0001F13A                            
0001F13A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001F13A                            
0001F13A                            
0001F13A                            Obj09_MoveLeft:
0001F13A 08E8 0000 0022             		bset	#0,obStatus(a0)
0001F140 3028 0020                  		move.w	obInertia(a0),d0
0001F144 6700                       		beq.s	loc_1BB06
0001F146 6A00                       		bpl.s	loc_1BB1A
0001F148                            
0001F148                            loc_1BB06:
0001F148 0440 000C                  		subi.w	#$C,d0
0001F14C 0C40 F800                  		cmpi.w	#-$800,d0
0001F150 6E00                       		bgt.s	loc_1BB14
0001F152 303C F800                  		move.w	#-$800,d0
0001F156                            
0001F156                            loc_1BB14:
0001F156 3140 0020                  		move.w	d0,obInertia(a0)
0001F15A 4E75                       		rts	
0001F15C                            ; ===========================================================================
0001F15C                            
0001F15C                            loc_1BB1A:
0001F15C 0440 0040                  		subi.w	#$40,d0
0001F160 6400                       		bcc.s	loc_1BB22
0001F162 4E71                       		nop	
0001F164                            
0001F164                            loc_1BB22:
0001F164 3140 0020                  		move.w	d0,obInertia(a0)
0001F168 4E75                       		rts	
0001F16A                            ; End of function Obj09_MoveLeft
0001F16A                            
0001F16A                            
0001F16A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001F16A                            
0001F16A                            
0001F16A                            Obj09_MoveRight:
0001F16A 08A8 0000 0022             		bclr	#0,obStatus(a0)
0001F170 3028 0020                  		move.w	obInertia(a0),d0
0001F174 6B00                       		bmi.s	loc_1BB48
0001F176 0640 000C                  		addi.w	#$C,d0
0001F17A 0C40 0800                  		cmpi.w	#$800,d0
0001F17E 6D00                       		blt.s	loc_1BB42
0001F180 303C 0800                  		move.w	#$800,d0
0001F184                            
0001F184                            loc_1BB42:
0001F184 3140 0020                  		move.w	d0,obInertia(a0)
0001F188 6000                       		bra.s	locret_1BB54
0001F18A                            ; ===========================================================================
0001F18A                            
0001F18A                            loc_1BB48:
0001F18A 0640 0040                  		addi.w	#$40,d0
0001F18E 6400                       		bcc.s	loc_1BB50
0001F190 4E71                       		nop	
0001F192                            
0001F192                            loc_1BB50:
0001F192 3140 0020                  		move.w	d0,obInertia(a0)
0001F196                            
0001F196                            locret_1BB54:
0001F196 4E75                       		rts	
0001F198                            ; End of function Obj09_MoveRight
0001F198                            
0001F198                            
0001F198                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001F198                            
0001F198                            
0001F198                            Obj09_Jump:
0001F198 1038 F603                  		move.b	(v_jpadpress2).w,d0
0001F19C 0200 0070                  		andi.b	#btnABC,d0	; is A,	B or C pressed?
0001F1A0 6700                       		beq.s	Obj09_NoJump	; if not, branch
0001F1A2 1038 F780                  		move.b	(v_ssangle).w,d0
0001F1A6 0200 00FC                  		andi.b	#$FC,d0
0001F1AA 4400                       		neg.b	d0
0001F1AC 0400 0040                  		subi.b	#$40,d0
0001F1B0 4EB9 0000 3A82             		jsr	(CalcSine).l
0001F1B6 C3FC 0680                  		muls.w	#$680,d1
0001F1BA E081                       		asr.l	#8,d1
0001F1BC 3141 0010                  		move.w	d1,obVelX(a0)
0001F1C0 C1FC 0680                  		muls.w	#$680,d0
0001F1C4 E080                       		asr.l	#8,d0
0001F1C6 3140 0012                  		move.w	d0,obVelY(a0)
0001F1CA 08E8 0001 0022             		bset	#1,obStatus(a0)
0001F1DA                            
0001F1DA                            Obj09_NoJump:
0001F1DA 4E75                       		rts	
0001F1DC                            ; End of function Obj09_Jump
0001F1DC                            
0001F1DC                            
0001F1DC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001F1DC                            
0001F1DC                            
0001F1DC                            nullsub_2:
0001F1DC 4E75                       		rts	
0001F1DE                            ; End of function nullsub_2
0001F1DE                            
0001F1DE                            ; ===========================================================================
0001F1DE                            ; ---------------------------------------------------------------------------
0001F1DE                            ; unused subroutine to limit Sonic's upward vertical speed
0001F1DE                            ; ---------------------------------------------------------------------------
0001F1DE 323C FC00                  		move.w	#-$400,d1
0001F1E2 B268 0012                  		cmp.w	obVelY(a0),d1
0001F1E6 6F00                       		ble.s	locret_1BBB4
0001F1E8 1038 F602                  		move.b	(v_jpadhold2).w,d0
0001F1EC 0200 0070                  		andi.b	#btnABC,d0
0001F1F0 6600                       		bne.s	locret_1BBB4
0001F1F2 3141 0012                  		move.w	d1,obVelY(a0)
0001F1F6                            
0001F1F6                            locret_1BBB4:
0001F1F6 4E75                       		rts	
0001F1F8                            ; ---------------------------------------------------------------------------
0001F1F8                            ; Subroutine to	fix the	camera on Sonic's position (special stage)
0001F1F8                            ; ---------------------------------------------------------------------------
0001F1F8                            
0001F1F8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001F1F8                            
0001F1F8                            
0001F1F8                            SS_FixCamera:
0001F1F8 3428 000C                  		move.w	obY(a0),d2
0001F1FC 3628 0008                  		move.w	obX(a0),d3
0001F200 3038 F700                  		move.w	(v_screenposx).w,d0
0001F204 0443 00A0                  		subi.w	#$A0,d3
0001F208 6500                       		bcs.s	loc_1BBCE
0001F20A 9043                       		sub.w	d3,d0
0001F20C 9178 F700                  		sub.w	d0,(v_screenposx).w
0001F210                            
0001F210                            loc_1BBCE:
0001F210 3038 F704                  		move.w	(v_screenposy).w,d0
0001F214 0442 0070                  		subi.w	#$70,d2
0001F218 6500                       		bcs.s	locret_1BBDE
0001F21A 9042                       		sub.w	d2,d0
0001F21C 9178 F704                  		sub.w	d0,(v_screenposy).w
0001F220                            
0001F220                            locret_1BBDE:
0001F220 4E75                       		rts	
0001F222                            ; End of function SS_FixCamera
0001F222                            
0001F222                            ; ===========================================================================
0001F222                            
0001F222                            Obj09_ExitStage:
0001F222 0678 0040 F782             		addi.w	#$40,(v_ssrotate).w
0001F228 0C78 1800 F782             		cmpi.w	#$1800,(v_ssrotate).w
0001F22E 6600                       		bne.s	loc_1BBF4
0001F230 11FC 0000 F600             		move.b	#id_Level,(v_gamemode).w
0001F236                            
0001F236                            loc_1BBF4:
0001F236 0C78 3000 F782             		cmpi.w	#$3000,(v_ssrotate).w
0001F23C 6D00                       		blt.s	loc_1BC12
0001F23E 31FC 0000 F782             		move.w	#0,(v_ssrotate).w
0001F244 31FC 4000 F780             		move.w	#$4000,(v_ssangle).w
0001F24A 5428 0024                  		addq.b	#2,obRoutine(a0)
0001F24E 317C 003C 0038             		move.w	#$3C,$38(a0)
0001F254                            
0001F254                            loc_1BC12:
0001F254 3038 F780                  		move.w	(v_ssangle).w,d0
0001F258 D078 F782                  		add.w	(v_ssrotate).w,d0
0001F25C 31C0 F780                  		move.w	d0,(v_ssangle).w
0001F260 4EB9 0001 6714             		jsr	(Sonic_Animate).l
0001F266 4EB9 0001 6AAC             		jsr	(Sonic_LoadGfx).l
0001F26C 6100 FF8A                  		bsr.w	SS_FixCamera
0001F270 4EF9 0000 FA8C             		jmp	(DisplaySprite).l
0001F276                            ; ===========================================================================
0001F276                            
0001F276                            Obj09_Exit2:
0001F276 5368 0038                  		subq.w	#1,$38(a0)
0001F27A 6600                       		bne.s	loc_1BC40
0001F27C 11FC 0000 F600             		move.b	#id_Level,(v_gamemode).w
0001F282                            
0001F282                            loc_1BC40:
0001F282 4EB9 0001 6714             		jsr	(Sonic_Animate).l
0001F288 4EB9 0001 6AAC             		jsr	(Sonic_LoadGfx).l
0001F28E 6100 FF68                  		bsr.w	SS_FixCamera
0001F292 4EF9 0000 FA8C             		jmp	(DisplaySprite).l
0001F298                            
0001F298                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001F298                            
0001F298                            
0001F298                            Obj09_Fall:
0001F298 2428 000C                  		move.l	obY(a0),d2
0001F29C 2628 0008                  		move.l	obX(a0),d3
0001F2A0 1038 F780                  		move.b	(v_ssangle).w,d0
0001F2A4 0200 00FC                  		andi.b	#$FC,d0
0001F2A8 4EB9 0000 3A82             		jsr	(CalcSine).l
0001F2AE 3828 0010                  		move.w	obVelX(a0),d4
0001F2B2 48C4                       		ext.l	d4
0001F2B4 E184                       		asl.l	#8,d4
0001F2B6 C1FC 002A                  		muls.w	#$2A,d0
0001F2BA D084                       		add.l	d4,d0
0001F2BC 3828 0012                  		move.w	obVelY(a0),d4
0001F2C0 48C4                       		ext.l	d4
0001F2C2 E184                       		asl.l	#8,d4
0001F2C4 C3FC 002A                  		muls.w	#$2A,d1
0001F2C8 D284                       		add.l	d4,d1
0001F2CA D680                       		add.l	d0,d3
0001F2CC 6100 0000                  		bsr.w	sub_1BCE8
0001F2D0 6700                       		beq.s	loc_1BCB0
0001F2D2 9680                       		sub.l	d0,d3
0001F2D4 7000                       		moveq	#0,d0
0001F2D6 3140 0010                  		move.w	d0,obVelX(a0)
0001F2DA 08A8 0001 0022             		bclr	#1,obStatus(a0)
0001F2E0 D481                       		add.l	d1,d2
0001F2E2 6100 0000                  		bsr.w	sub_1BCE8
0001F2E6 6700                       		beq.s	loc_1BCC6
0001F2E8 9481                       		sub.l	d1,d2
0001F2EA 7200                       		moveq	#0,d1
0001F2EC 3141 0012                  		move.w	d1,obVelY(a0)
0001F2F0 4E75                       		rts	
0001F2F2                            ; ===========================================================================
0001F2F2                            
0001F2F2                            loc_1BCB0:
0001F2F2 D481                       		add.l	d1,d2
0001F2F4 6100 0000                  		bsr.w	sub_1BCE8
0001F2F8 6700                       		beq.s	loc_1BCD4
0001F2FA 9481                       		sub.l	d1,d2
0001F2FC 7200                       		moveq	#0,d1
0001F2FE 3141 0012                  		move.w	d1,obVelY(a0)
0001F302 08A8 0001 0022             		bclr	#1,obStatus(a0)
0001F308                            
0001F308                            loc_1BCC6:
0001F308 E080                       		asr.l	#8,d0
0001F30A E081                       		asr.l	#8,d1
0001F30C 3140 0010                  		move.w	d0,obVelX(a0)
0001F310 3141 0012                  		move.w	d1,obVelY(a0)
0001F314 4E75                       		rts	
0001F316                            ; ===========================================================================
0001F316                            
0001F316                            loc_1BCD4:
0001F316 E080                       		asr.l	#8,d0
0001F318 E081                       		asr.l	#8,d1
0001F31A 3140 0010                  		move.w	d0,obVelX(a0)
0001F31E 3141 0012                  		move.w	d1,obVelY(a0)
0001F322 08E8 0001 0022             		bset	#1,obStatus(a0)
0001F328 4E75                       		rts	
0001F32A                            ; End of function Obj09_Fall
0001F32A                            
0001F32A                            
0001F32A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001F32A                            
0001F32A                            
0001F32A                            sub_1BCE8:
0001F32A 43F9 00FF 0000             		lea	($FF0000).l,a1
0001F330 7800                       		moveq	#0,d4
0001F332 4842                       		swap	d2
0001F334 3802                       		move.w	d2,d4
0001F336 4842                       		swap	d2
0001F338 0644 0044                  		addi.w	#$44,d4
0001F33C 88FC 0018                  		divu.w	#$18,d4
0001F340 C8FC 0080                  		mulu.w	#$80,d4
0001F344 D3C4                       		adda.l	d4,a1
0001F346 7800                       		moveq	#0,d4
0001F348 4843                       		swap	d3
0001F34A 3803                       		move.w	d3,d4
0001F34C 4843                       		swap	d3
0001F34E 0644 0014                  		addi.w	#$14,d4
0001F352 88FC 0018                  		divu.w	#$18,d4
0001F356 D2C4                       		adda.w	d4,a1
0001F358 7A00                       		moveq	#0,d5
0001F35A 1819                       		move.b	(a1)+,d4
0001F35C 6100                       		bsr.s	sub_1BD30
0001F35E 1819                       		move.b	(a1)+,d4
0001F360 6100                       		bsr.s	sub_1BD30
0001F362 D2FC 007E                  		adda.w	#$7E,a1
0001F366 1819                       		move.b	(a1)+,d4
0001F368 6100                       		bsr.s	sub_1BD30
0001F36A 1819                       		move.b	(a1)+,d4
0001F36C 6100                       		bsr.s	sub_1BD30
0001F36E 4A05                       		tst.b	d5
0001F370 4E75                       		rts	
0001F372                            ; End of function sub_1BCE8
0001F372                            
0001F372                            
0001F372                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001F372                            
0001F372                            
0001F372                            sub_1BD30:
0001F372 6700                       		beq.s	locret_1BD44
0001F374 0C04 0028                  		cmpi.b	#$28,d4
0001F378 6700                       		beq.s	locret_1BD44
0001F37A 0C04 003A                  		cmpi.b	#$3A,d4
0001F37E 6500                       		bcs.s	loc_1BD46
0001F380 0C04 004B                  		cmpi.b	#$4B,d4
0001F384 6400                       		bcc.s	loc_1BD46
0001F386                            
0001F386                            locret_1BD44:
0001F386 4E75                       		rts	
0001F388                            ; ===========================================================================
0001F388                            
0001F388                            loc_1BD46:
0001F388 1144 0030                  		move.b	d4,$30(a0)
0001F38C 2149 0032                  		move.l	a1,$32(a0)
0001F390 7AFF                       		moveq	#-1,d5
0001F392 4E75                       		rts	
0001F394                            ; End of function sub_1BD30
0001F394                            
0001F394                            
0001F394                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001F394                            
0001F394                            
0001F394                            Obj09_ChkItems:
0001F394 43F9 00FF 0000             		lea	($FF0000).l,a1
0001F39A 7800                       		moveq	#0,d4
0001F39C 3828 000C                  		move.w	obY(a0),d4
0001F3A0 0644 0050                  		addi.w	#$50,d4
0001F3A4 88FC 0018                  		divu.w	#$18,d4
0001F3A8 C8FC 0080                  		mulu.w	#$80,d4
0001F3AC D3C4                       		adda.l	d4,a1
0001F3AE 7800                       		moveq	#0,d4
0001F3B0 3828 0008                  		move.w	obX(a0),d4
0001F3B4 0644 0020                  		addi.w	#$20,d4
0001F3B8 88FC 0018                  		divu.w	#$18,d4
0001F3BC D2C4                       		adda.w	d4,a1
0001F3BE 1811                       		move.b	(a1),d4
0001F3C0 6600                       		bne.s	Obj09_ChkCont
0001F3C2 4A28 003A                  		tst.b	$3A(a0)
0001F3C6 6600 0000                  		bne.w	Obj09_MakeGhostSolid
0001F3CA 7800                       		moveq	#0,d4
0001F3CC 4E75                       		rts	
0001F3CE                            ; ===========================================================================
0001F3CE                            
0001F3CE                            Obj09_ChkCont:
0001F3CE 0C04 003A                  		cmpi.b	#$3A,d4		; is the item a	ring?
0001F3D2 6600                       		bne.s	Obj09_Chk1Up
0001F3D4 6100 F726                  		bsr.w	SS_RemoveCollectedItem
0001F3D8 6600                       		bne.s	Obj09_GetCont
0001F3DA 14BC 0001                  		move.b	#1,(a2)
0001F3DE 2549 0004                  		move.l	a1,4(a2)
0001F3E2                            
0001F3E2                            Obj09_GetCont:
0001F3E2 4EB9 0000 BC00             		jsr	(CollectRing).l
0001F3E8 0C78 0032 FE20             		cmpi.w	#50,(v_rings).w	; check if you have 50 rings
0001F3EE 6500                       		bcs.s	Obj09_NoCont
0001F3F0 08F8 0000 FE1B             		bset	#0,(v_lifecount).w
0001F3F6 6600                       		bne.s	Obj09_NoCont
0001F3F8 5238 FE18                  		addq.b	#1,(v_continues).w ; add 1 to number of continues
0001F406                            
0001F406                            Obj09_NoCont:
0001F406 7800                       		moveq	#0,d4
0001F408 4E75                       		rts	
0001F40A                            ; ===========================================================================
0001F40A                            
0001F40A                            Obj09_Chk1Up:
0001F40A 0C04 0028                  		cmpi.b	#$28,d4		; is the item an extra life?
0001F40E 6600                       		bne.s	Obj09_ChkEmer
0001F410 6100 F6EA                  		bsr.w	SS_RemoveCollectedItem
0001F414 6600                       		bne.s	Obj09_Get1Up
0001F416 14BC 0003                  		move.b	#3,(a2)
0001F41A 2549 0004                  		move.l	a1,4(a2)
0001F41E                            
0001F41E                            Obj09_Get1Up:
0001F41E 5238 FE12                  		addq.b	#1,(v_lives).w	; add 1 to number of lives
0001F422 5238 FE1C                  		addq.b	#1,(f_lifecount).w ; update the lives counter
0001F430 7800                       		moveq	#0,d4
0001F432 4E75                       		rts	
0001F434                            ; ===========================================================================
0001F434                            
0001F434                            Obj09_ChkEmer:
0001F434 0C04 003B                  		cmpi.b	#$3B,d4		; is the item an emerald?
0001F438 6500                       		bcs.s	Obj09_ChkGhost
0001F43A 0C04 0040                  		cmpi.b	#$40,d4
0001F43E 6200                       		bhi.s	Obj09_ChkGhost
0001F440 6100 F6BA                  		bsr.w	SS_RemoveCollectedItem
0001F444 6600                       		bne.s	Obj09_GetEmer
0001F446 14BC 0005                  		move.b	#5,(a2)
0001F44A 2549 0004                  		move.l	a1,4(a2)
0001F44E                            
0001F44E                            Obj09_GetEmer:
0001F44E 0C38 0006 FE57             		cmpi.b	#6,(v_emeralds).w ; do you have all the emeralds?
0001F454 6700                       		beq.s	Obj09_NoEmer	; if yes, branch
0001F456 0404 003B                  		subi.b	#$3B,d4
0001F45A 7000                       		moveq	#0,d0
0001F45C 1038 FE57                  		move.b	(v_emeralds).w,d0
0001F460 45F8 FE58                  		lea	(v_emldlist).w,a2
0001F464 1584 0000                  		move.b	d4,(a2,d0.w)
0001F468 5238 FE57                  		addq.b	#1,(v_emeralds).w ; add 1 to number of emeralds
0001F46C                            
0001F46C                            Obj09_NoEmer:
0001F476 7800                       		moveq	#0,d4
0001F478 4E75                       		rts	
0001F47A                            ; ===========================================================================
0001F47A                            
0001F47A                            Obj09_ChkGhost:
0001F47A 0C04 0041                  		cmpi.b	#$41,d4		; is the item a	ghost block?
0001F47E 6600                       		bne.s	Obj09_ChkGhostTag
0001F480 117C 0001 003A             		move.b	#1,$3A(a0)	; mark the ghost block as "passed"
0001F486                            
0001F486                            Obj09_ChkGhostTag:
0001F486 0C04 004A                  		cmpi.b	#$4A,d4		; is the item a	switch for ghost blocks?
0001F48A 6600                       		bne.s	Obj09_NoGhost
0001F48C 0C28 0001 003A             		cmpi.b	#1,$3A(a0)	; have the ghost blocks	been passed?
0001F492 6600                       		bne.s	Obj09_NoGhost	; if not, branch
0001F494 117C 0002 003A             		move.b	#2,$3A(a0)	; mark the ghost blocks	as "solid"
0001F49A                            
0001F49A                            Obj09_NoGhost:
0001F49A 78FF                       		moveq	#-1,d4
0001F49C 4E75                       		rts	
0001F49E                            ; ===========================================================================
0001F49E                            
0001F49E                            Obj09_MakeGhostSolid:
0001F49E 0C28 0002 003A             		cmpi.b	#2,$3A(a0)	; is the ghost marked as "solid"?
0001F4A4 6600                       		bne.s	Obj09_GhostNotSolid ; if not, branch
0001F4A6 43F9 00FF 1020             		lea	($FF1020).l,a1
0001F4AC 723F                       		moveq	#$3F,d1
0001F4AE                            
0001F4AE                            Obj09_GhostLoop2:
0001F4AE 743F                       		moveq	#$3F,d2
0001F4B0                            
0001F4B0                            Obj09_GhostLoop:
0001F4B0 0C11 0041                  		cmpi.b	#$41,(a1)	; is the item a	ghost block?
0001F4B4 6600                       		bne.s	Obj09_NoReplace	; if not, branch
0001F4B6 12BC 002C                  		move.b	#$2C,(a1)	; replace ghost	block with a solid block
0001F4BA                            
0001F4BA                            Obj09_NoReplace:
0001F4BA 5249                       		addq.w	#1,a1
0001F4BC 51CA FFF2                  		dbf	d2,Obj09_GhostLoop
0001F4C0 43E9 0040                  		lea	$40(a1),a1
0001F4C4 51C9 FFE8                  		dbf	d1,Obj09_GhostLoop2
0001F4C8                            
0001F4C8                            Obj09_GhostNotSolid:
0001F4C8 4228 003A                  		clr.b	$3A(a0)
0001F4CC 7800                       		moveq	#0,d4
0001F4CE 4E75                       		rts	
0001F4D0                            ; End of function Obj09_ChkItems
0001F4D0                            
0001F4D0                            
0001F4D0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001F4D0                            
0001F4D0                            
0001F4D0                            Obj09_ChkItems2:
0001F4D0 1028 0030                  		move.b	$30(a0),d0
0001F4D4 6600                       		bne.s	Obj09_ChkBumper
0001F4D6 5328 0036                  		subq.b	#1,$36(a0)
0001F4DA 6A00                       		bpl.s	loc_1BEA0
0001F4DC 117C 0000 0036             		move.b	#0,$36(a0)
0001F4E2                            
0001F4E2                            loc_1BEA0:
0001F4E2 5328 0037                  		subq.b	#1,$37(a0)
0001F4E6 6A00                       		bpl.s	locret_1BEAC
0001F4E8 117C 0000 0037             		move.b	#0,$37(a0)
0001F4EE                            
0001F4EE                            locret_1BEAC:
0001F4EE 4E75                       		rts	
0001F4F0                            ; ===========================================================================
0001F4F0                            
0001F4F0                            Obj09_ChkBumper:
0001F4F0 0C00 0025                  		cmpi.b	#$25,d0		; is the item a	bumper?
0001F4F4 6600                       		bne.s	Obj09_GOAL
0001F4F6 2228 0032                  		move.l	$32(a0),d1
0001F4FA 0481 00FF 0001             		subi.l	#$FF0001,d1
0001F500 3401                       		move.w	d1,d2
0001F502 0241 007F                  		andi.w	#$7F,d1
0001F506 C2FC 0018                  		mulu.w	#$18,d1
0001F50A 0441 0014                  		subi.w	#$14,d1
0001F50E EE4A                       		lsr.w	#7,d2
0001F510 0242 007F                  		andi.w	#$7F,d2
0001F514 C4FC 0018                  		mulu.w	#$18,d2
0001F518 0442 0044                  		subi.w	#$44,d2
0001F51C 9268 0008                  		sub.w	obX(a0),d1
0001F520 9468 000C                  		sub.w	obY(a0),d2
0001F524 4EB9 0000 3D14             		jsr	(CalcAngle).l
0001F52A 4EB9 0000 3A82             		jsr	(CalcSine).l
0001F530 C3FC F900                  		muls.w	#-$700,d1
0001F534 E081                       		asr.l	#8,d1
0001F536 3141 0010                  		move.w	d1,obVelX(a0)
0001F53A C1FC F900                  		muls.w	#-$700,d0
0001F53E E080                       		asr.l	#8,d0
0001F540 3140 0012                  		move.w	d0,obVelY(a0)
0001F544 08E8 0001 0022             		bset	#1,obStatus(a0)
0001F54A 6100 F5B0                  		bsr.w	SS_RemoveCollectedItem
0001F54E 6600                       		bne.s	Obj09_BumpSnd
0001F550 14BC 0002                  		move.b	#2,(a2)
0001F554 2028 0032                  		move.l	$32(a0),d0
0001F558 5380                       		subq.l	#1,d0
0001F55A 2540 0004                  		move.l	d0,4(a2)
0001F55E                            
0001F55E                            Obj09_BumpSnd:
0001F568                            ; ===========================================================================
0001F568                            
0001F568                            Obj09_GOAL:
0001F568 0C00 0027                  		cmpi.b	#$27,d0		; is the item a	"GOAL"?
0001F56C 6600                       		bne.s	Obj09_UPblock
0001F56E 5428 0024                  		addq.b	#2,obRoutine(a0) ; run routine "Obj09_ExitStage"
0001F57C 4E75                       		rts	
0001F57E                            ; ===========================================================================
0001F57E                            
0001F57E                            Obj09_UPblock:
0001F57E 0C00 0029                  		cmpi.b	#$29,d0		; is the item an "UP" block?
0001F582 6600                       		bne.s	Obj09_DOWNblock
0001F584 4A28 0036                  		tst.b	$36(a0)
0001F588 6600 0000                  		bne.w	Obj09_NoGlass
0001F58C 117C 001E 0036             		move.b	#$1E,$36(a0)
0001F592 0838 0006 F783             		btst	#6,($FFFFF783).w
0001F598 6700                       		beq.s	Obj09_UPsnd
0001F59A E1F8 F782                  		asl	(v_ssrotate).w	; increase stage rotation speed
0001F59E 2268 0032                  		movea.l	$32(a0),a1
0001F5A2 5389                       		subq.l	#1,a1
0001F5A4 12BC 002A                  		move.b	#$2A,(a1)	; change item to a "DOWN" block
0001F5A8                            
0001F5A8                            Obj09_UPsnd:
0001F5B2                            ; ===========================================================================
0001F5B2                            
0001F5B2                            Obj09_DOWNblock:
0001F5B2 0C00 002A                  		cmpi.b	#$2A,d0		; is the item a	"DOWN" block?
0001F5B6 6600                       		bne.s	Obj09_Rblock
0001F5B8 4A28 0036                  		tst.b	$36(a0)
0001F5BC 6600 0000                  		bne.w	Obj09_NoGlass
0001F5C0 117C 001E 0036             		move.b	#$1E,$36(a0)
0001F5C6 0838 0006 F783             		btst	#6,(v_ssrotate+1).w
0001F5CC 6600                       		bne.s	Obj09_DOWNsnd
0001F5CE E0F8 F782                  		asr	(v_ssrotate).w	; reduce stage rotation speed
0001F5D2 2268 0032                  		movea.l	$32(a0),a1
0001F5D6 5389                       		subq.l	#1,a1
0001F5D8 12BC 0029                  		move.b	#$29,(a1)	; change item to an "UP" block
0001F5DC                            
0001F5DC                            Obj09_DOWNsnd:
0001F5E6                            ; ===========================================================================
0001F5E6                            
0001F5E6                            Obj09_Rblock:
0001F5E6 0C00 002B                  		cmpi.b	#$2B,d0		; is the item an "R" block?
0001F5EA 6600                       		bne.s	Obj09_ChkGlass
0001F5EC 4A28 0037                  		tst.b	$37(a0)
0001F5F0 6600 0000                  		bne.w	Obj09_NoGlass
0001F5F4 117C 001E 0037             		move.b	#$1E,$37(a0)
0001F5FA 6100 F500                  		bsr.w	SS_RemoveCollectedItem
0001F5FE 6600                       		bne.s	Obj09_RevStage
0001F600 14BC 0004                  		move.b	#4,(a2)
0001F604 2028 0032                  		move.l	$32(a0),d0
0001F608 5380                       		subq.l	#1,d0
0001F60A 2540 0004                  		move.l	d0,4(a2)
0001F60E                            
0001F60E                            Obj09_RevStage:
0001F60E 4478 F782                  		neg.w	(v_ssrotate).w	; reverse stage rotation
0001F61C                            ; ===========================================================================
0001F61C                            
0001F61C                            Obj09_ChkGlass:
0001F61C 0C00 002D                  		cmpi.b	#$2D,d0		; is the item a	glass block?
0001F620 6700                       		beq.s	Obj09_Glass	; if yes, branch
0001F622 0C00 002E                  		cmpi.b	#$2E,d0
0001F626 6700                       		beq.s	Obj09_Glass
0001F628 0C00 002F                  		cmpi.b	#$2F,d0
0001F62C 6700                       		beq.s	Obj09_Glass
0001F62E 0C00 0030                  		cmpi.b	#$30,d0
0001F632 6600                       		bne.s	Obj09_NoGlass	; if not, branch
0001F634                            
0001F634                            Obj09_Glass:
0001F634 6100 F4C6                  		bsr.w	SS_RemoveCollectedItem
0001F638 6600                       		bne.s	Obj09_GlassSnd
0001F63A 14BC 0006                  		move.b	#6,(a2)
0001F63E 2268 0032                  		movea.l	$32(a0),a1
0001F642 5389                       		subq.l	#1,a1
0001F644 2549 0004                  		move.l	a1,4(a2)
0001F648 1011                       		move.b	(a1),d0
0001F64A 5200                       		addq.b	#1,d0		; change glass type when touched
0001F64C 0C00 0030                  		cmpi.b	#$30,d0
0001F650 6300                       		bls.s	Obj09_GlassUpdate ; if glass is	still there, branch
0001F652 4200                       		clr.b	d0		; remove the glass block when it's destroyed
0001F654                            
0001F654                            Obj09_GlassUpdate:
0001F654 1540 0004                  		move.b	d0,4(a2)	; update the stage layout
0001F658                            
0001F658                            Obj09_GlassSnd:
0001F662                            ; ===========================================================================
0001F662                            
0001F662                            Obj09_NoGlass:
0001F662 4E75                       		rts	
0001F664                            ; End of function Obj09_ChkItems2
0001F664                            ; End of function Obj09_ChkItems2
0001F664                            
0001F664                            		include	"_incObj\10.asm"
0001F664                            ; ---------------------------------------------------------------------------
0001F664                            ; Object 10 - After-Image
0001F664                            ; ---------------------------------------------------------------------------
0001F664                            
0001F664                            Obj10:
0001F664 0C38 0018 D01C                   cmpi.b   #id_Death,(v_player+obAnim).w   ; is Sonic using the death animation?
0001F66A 6700 0000                        beq.w   AfterimageEnd      ; if yes, delete the After Image
0001F66E                            
0001F66E 7000                             moveq   #0,d0
0001F670 1028 0024                        move.b   obRoutine(a0),d0
0001F674 323B 0000                        move.w   Afterimage_Index(pc,d0.w),d1
0001F678 4EFB 1000                        jmp	Afterimage_Index(pc,d1.w)
0001F67C                            
0001F67C                            ; ===========================================================================
0001F67C                            ;           Change the length by moving around the "No Afterimage" and "After Image Start/ After Image L Priority" sections.
0001F67C                            ; ===========================================================================
0001F67C                            Afterimage_Index:
0001F67C 0000                             dc.w NoAfterImage-Afterimage_Index
0001F67E 0000                             dc.w NoAfterImage-Afterimage_Index
0001F680 0000                             dc.w NoAfterImage-Afterimage_Index
0001F682 0000                             dc.w AfterimageStart-Afterimage_Index
0001F684 0000                             dc.w NoAfterImage-Afterimage_Index
0001F686 0000                             dc.w NoAfterImage-Afterimage_Index
0001F688 0000                             dc.w NoAfterImage-Afterimage_Index
0001F68A 0000                             dc.w AfterimageLPrio-Afterimage_Index
0001F68C 0000                             dc.w AfterimageEnd-Afterimage_Index
0001F68E                            ; ===========================================================================
0001F68E                            NoAfterImage:
0001F68E 5428 0024                        addq.b   #2,obRoutine(a0)         ; go to next item of index, at the next frame
0001F692 4E75                             rts
0001F694                            ; ===========================================================================
0001F694                            AfterimageStart:
0001F694 117C 0002 0018                   move.b   #2,obPriority(a0)         ; set sprite priority to 2
0001F69A 6000                             bra.s   Afterimage_Show
0001F69C                            ; ===========================================================================
0001F69C                            AfterimageLPrio:
0001F69C 5228 0018                        addq.b   #1,obPriority(a0)         ; set a lower sprite priority
0001F6A0                            ; ===========================================================================
0001F6A0                            Afterimage_Show:
0001F6A0 5428 0024                        addq.b   #2,obRoutine(a0)            ; go to next item of index
0001F6A4 4EB9 0000 3A5C                   jsr   (RandomNumber).l         ; get a random number
0001F6AA 0200 0003                        andi.b   #3,d0               ; get a number equal or lower than 2 (0 until 2)
0001F6AE 6600                             bne.s   AfterimageException   ; if is not 0, branch
0001F6B0 4E75                             rts                        ; if it is 0, then don't show the after-image
0001F6B2                            
0001F6B2                            AfterimageException:
0001F6B2 3178 D002 0002                   move.w   (v_player+obGfx).w,obGfx(a0)      ; copy Sonic map to after-image map
0001F6B8 1178 D001 0001                    move.b   (v_player+obRender).w,obRender(a0)      ; copy Sonic frame infos (horizontal/vertical mirror, coordinate system......)
0001F6BE 2178 D01A 001A                    move.l   (v_player+obFrame).w,obFrame(a0)   ; copy the Sonic animation frame
0001F6C4 4EF9 0000 FA8C                   jmp   DisplaySprite
0001F6CA                            ; ===========================================================================
0001F6CA                            AfterimageEnd:
0001F6CA 4EF9 0000 FACC                   jmp   DeleteObject
0001F6CA 4EF9 0000 FACC                   jmp   DeleteObject
0001F6D0                            
0001F6D0                            		include	"_inc\AnimateLevelGfx.asm"
0001F6D0                            ; ---------------------------------------------------------------------------
0001F6D0                            ; Subroutine to	animate	level graphics
0001F6D0                            ; ---------------------------------------------------------------------------
0001F6D0                            
0001F6D0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001F6D0                            
0001F6D0                            
0001F6D0                            AnimateLevelGfx:
0001F6D0                            		;tst.w	(f_pause).w	; is the game paused?
0001F6D0                            		;bne.s	@ispaused	; if yes, branch
0001F6D0 4DF9 00C0 0000             		lea	(vdp_data_port).l,a6
0001F6D6 6100 0000                  		bsr.w	AniArt_GiantRing
0001F6DA 7000                       		moveq	#0,d0
0001F6DC 1038 FE10                  		move.b	(v_zone).w,d0
0001F6E0 D040                       		add.w	d0,d0
0001F6E2 303B 0000                  		move.w	AniArt_Index(pc,d0.w),d0
0001F6E6 4EFB 0000                  		jmp	AniArt_Index(pc,d0.w)
0001F6EA                            
0001F6EA                            	@ispaused:
0001F6EA 4E75                       		rts	
0001F6EC                            
0001F6EC                            ; ===========================================================================
0001F6EC 0000 0000                  AniArt_Index:	dc.w AniArt_GHZ-AniArt_Index, AniArt_none-AniArt_Index
0001F6F0 0000 0000                  		dc.w AniArt_MZ-AniArt_Index, AniArt_none-AniArt_Index
0001F6F4 0000 0000                  		dc.w AniArt_none-AniArt_Index, AniArt_SBZ-AniArt_Index
0001F6F8 0000                       		dc.w AniArt_Ending-AniArt_Index
0001F6FA                            ; ===========================================================================
0001F6FA                            ; ---------------------------------------------------------------------------
0001F6FA                            ; Animated pattern routine - Green Hill
0001F6FA                            ; ---------------------------------------------------------------------------
0001F6FA                            
0001F6FA                            AniArt_GHZ:
0001F6FA                            
0001F6FA                            AniArt_GHZ_Waterfall:
0001F6FA                            
0001F6FA =00000008                  @size:		equ 8	; number of tiles per frame
0001F6FA                            
0001F6FA 5338 F7B1                  		subq.b	#1,(v_lani0_time).w ; decrement timer
0001F6FE 6A00                       		bpl.s	AniArt_GHZ_Bigflower ; branch if not 0
0001F700                            
0001F700 11FC 0005 F7B1             		move.b	#5,(v_lani0_time).w ; time to display each frame
0001F706 43F9 0000 0000             		lea	(Art_GhzWater).l,a1 ; load waterfall patterns
0001F70C 1038 F7B0                  		move.b	(v_lani0_frame).w,d0
0001F710 5238 F7B0                  		addq.b	#1,(v_lani0_frame).w ; increment frame counter
0001F714 0240 0001                  		andi.w	#1,d0		; there are only 2 frames
0001F718 6700                       		beq.s	@isframe0	; branch if frame 0
0001F71A 43E9 0100                  		lea	@size*$20(a1),a1 ; use graphics for frame 1
0001F71E                            
0001F71E                            	@isframe0:
0001F728 323C 0007                  		move.w	#@size-1,d1	; number of 8x8	tiles
0001F72C 6000 0000                  		bra.w	LoadTiles
0001F730                            ; ===========================================================================
0001F730                            
0001F730                            AniArt_GHZ_Bigflower:
0001F730                            
0001F730 =00000010                  @size:		equ 16	; number of tiles per frame
0001F730                            
0001F730 5338 F7B3                  		subq.b	#1,(v_lani1_time).w
0001F734 6A00                       		bpl.s	AniArt_GHZ_Smallflower
0001F736                            
0001F736 11FC 000F F7B3             		move.b	#$F,(v_lani1_time).w
0001F73C 43F9 0000 0000             		lea	(Art_GhzFlower1).l,a1 ;	load big flower	patterns
0001F742 1038 F7B2                  		move.b	(v_lani1_frame).w,d0
0001F746 5238 F7B2                  		addq.b	#1,(v_lani1_frame).w
0001F74A 0240 0001                  		andi.w	#1,d0
0001F74E 6700                       		beq.s	@isframe0
0001F750 43E9 0200                  		lea	@size*$20(a1),a1
0001F754                            
0001F754                            	@isframe0:
0001F75E 323C 000F                  		move.w	#@size-1,d1
0001F762 6000 0000                  		bra.w	LoadTiles
0001F766                            ; ===========================================================================
0001F766                            
0001F766                            AniArt_GHZ_Smallflower:
0001F766                            
0001F766 =0000000C                  @size:		equ 12	; number of tiles per frame
0001F766                            
0001F766 5338 F7B5                  		subq.b	#1,(v_lani2_time).w
0001F76A 6A00                       		bpl.s	@end
0001F76C                            
0001F76C 11FC 0007 F7B5             		move.b	#7,(v_lani2_time).w
0001F772 1038 F7B4                  		move.b	(v_lani2_frame).w,d0
0001F776 5238 F7B4                  		addq.b	#1,(v_lani2_frame).w ; increment frame counter
0001F77A 0240 0003                  		andi.w	#3,d0		; there are 4 frames
0001F77E 103B 0000                  		move.b	@sequence(pc,d0.w),d0
0001F782 0800 0000                  		btst	#0,d0		; is frame 0 or 2? (actual frame, not frame counter)
0001F786 6600                       		bne.s	@isframe1	; if not, branch
0001F788 11FC 007F F7B5             		move.b	#$7F,(v_lani2_time).w ; set longer duration for frames 0 and 2
0001F78E                            
0001F78E                            	@isframe1:
0001F78E EF48                       		lsl.w	#7,d0		; multiply frame num by $80
0001F790 3200                       		move.w	d0,d1
0001F792 D040                       		add.w	d0,d0
0001F794 D041                       		add.w	d1,d0		; multiply that by 3 (i.e. frame num times 12 * $20)
0001F7A0 43F9 0000 0000             		lea	(Art_GhzFlower2).l,a1 ;	load small flower patterns
0001F7A6 43F1 0000                  		lea	(a1,d0.w),a1	; jump to appropriate tile
0001F7AA 323C 000B                  		move.w	#@size-1,d1
0001F7AE 6100 0000                  		bsr.w	LoadTiles
0001F7B2                            
0001F7B2                            @end:
0001F7B2 4E75                       		rts	
0001F7B4                            
0001F7B4 0001 0201                  @sequence:	dc.b 0,	1, 2, 1
0001F7B8                            ; ===========================================================================
0001F7B8                            ; ---------------------------------------------------------------------------
0001F7B8                            ; Animated pattern routine - Marble
0001F7B8                            ; ---------------------------------------------------------------------------
0001F7B8                            
0001F7B8                            AniArt_MZ:
0001F7B8                            
0001F7B8                            AniArt_MZ_Lava:
0001F7B8                            
0001F7B8 =00000008                  @size:		equ 8	; number of tiles per frame
0001F7B8                            
0001F7B8 5338 F7B1                  		subq.b	#1,(v_lani0_time).w ; decrement timer
0001F7BC 6A00                       		bpl.s	AniArt_MZ_Magma	; branch if not 0
0001F7BE                            
0001F7BE 11FC 0011 F7B1             		move.b	#$11,(v_lani0_time).w ; time to display each frame
0001F7C4 43F9 0000 0000             		lea	(Art_MzLava1).l,a1 ; load lava surface patterns
0001F7CA 7000                       		moveq	#0,d0
0001F7CC 1038 F7B0                  		move.b	(v_lani0_frame).w,d0
0001F7D0 5200                       		addq.b	#1,d0		; increment frame counter
0001F7D2 0C00 0003                  		cmpi.b	#3,d0		; there are 3 frames
0001F7D6 6600                       		bne.s	@frame01or2	; branch if frame 0, 1 or 2
0001F7D8 7000                       		moveq	#0,d0
0001F7DA                            
0001F7DA                            	@frame01or2:
0001F7DA 11C0 F7B0                  		move.b	d0,(v_lani0_frame).w
0001F7DE C0FC 0100                  		mulu.w	#@size*$20,d0
0001F7E2 D2C0                       		adda.w	d0,a1		; jump to appropriate tile
0001F7EE 323C 0007                  		move.w	#@size-1,d1
0001F7F2 6100 0000                  		bsr.w	LoadTiles
0001F7F6                            
0001F7F6                            AniArt_MZ_Magma:
0001F7F6 5338 F7B3                  		subq.b	#1,(v_lani1_time).w ; decrement timer
0001F7FA 6A00                       		bpl.s	AniArt_MZ_Torch	; branch if not 0
0001F7FC                            		
0001F7FC 11FC 0001 F7B3             		move.b	#1,(v_lani1_time).w ; time between each gfx change
0001F802 7000                       		moveq	#0,d0
0001F804 1038 F7B0                  		move.b	(v_lani0_frame).w,d0 ; get surface lava frame number
0001F808 49F9 0000 0000             		lea	(Art_MzLava2).l,a4 ; load magma gfx
0001F80E EE58                       		ror.w	#7,d0		; multiply frame num by $200
0001F810 D8C0                       		adda.w	d0,a4		; jump to appropriate tile
0001F81C 7600                       		moveq	#0,d3
0001F81E 1638 F7B2                  		move.b	(v_lani1_frame).w,d3
0001F822 5238 F7B2                  		addq.b	#1,(v_lani1_frame).w ; increment frame counter (unused)
0001F826 1638 FE68                  		move.b	(v_oscillate+$A).w,d3 ; get oscillating value
0001F82A 343C 0003                  		move.w	#3,d2
0001F82E                            
0001F82E                            	@loop:
0001F82E 3003                       		move.w	d3,d0
0001F830 D040                       		add.w	d0,d0
0001F832 0240 001E                  		andi.w	#$1E,d0
0001F836 47F9 0000 0000             		lea	(AniArt_MZextra).l,a3
0001F83C 3033 0000                  		move.w	(a3,d0.w),d0
0001F840 47F3 0000                  		lea	(a3,d0.w),a3
0001F844 224C                       		movea.l	a4,a1
0001F846 323C 001F                  		move.w	#$1F,d1
0001F84A 4E93                       		jsr	(a3)
0001F84C 5843                       		addq.w	#4,d3
0001F84E 51CA FFDE                  		dbf	d2,@loop
0001F852 4E75                       		rts	
0001F854                            ; ===========================================================================
0001F854                            
0001F854                            AniArt_MZ_Torch:
0001F854                            
0001F854 =00000006                  @size:		equ 6	; number of tiles per frame
0001F854                            
0001F854 5338 F7B5                  		subq.b	#1,(v_lani2_time).w ; decrement timer
0001F858 6A00 0000                  		bpl.w	@end		; branch if not 0
0001F85C                            		
0001F85C 11FC 0004 F7B5             		move.b	#4,(v_lani2_time).w ; time to display each frame
0001F862 43F9 0000 0000             		lea	(Art_MzTorch).l,a1 ; load torch	patterns
0001F868 7000                       		moveq	#0,d0
0001F86A 1038 F7B6                  		move.b	(v_lani3_frame).w,d0
0001F86E 5238 F7B6                  		addq.b	#1,(v_lani3_frame).w ; increment frame counter
0001F872 0238 0003 F7B6             		andi.b	#3,(v_lani3_frame).w ; there are 3 frames
0001F878 C0FC 00C0                  		mulu.w	#@size*$20,d0
0001F87C D2C0                       		adda.w	d0,a1		; jump to appropriate tile
0001F888 323C 0005                  		move.w	#@size-1,d1
0001F88C 6000 0000                  		bra.w	LoadTiles
0001F890                            
0001F890                            @end:
0001F890 4E75                       		rts	
0001F892                            ; ===========================================================================
0001F892                            ; ---------------------------------------------------------------------------
0001F892                            ; Animated pattern routine - Scrap Brain
0001F892                            ; ---------------------------------------------------------------------------
0001F892                            
0001F892                            AniArt_SBZ:
0001F892                            
0001F892 =0000000C                  @size:		equ 12	; number of tiles per frame
0001F892                            
0001F892 4A38 F7B4                  		tst.b	(v_lani2_frame).w
0001F896 6700                       		beq.s	@smokepuff	; branch if counter hits 0
0001F898                            		
0001F898 5338 F7B4                  		subq.b	#1,(v_lani2_frame).w ; decrement counter
0001F89C 6000                       		bra.s	@chk_smokepuff2
0001F89E                            ; ===========================================================================
0001F89E                            
0001F89E                            @smokepuff:
0001F89E 5338 F7B1                  		subq.b	#1,(v_lani0_time).w ; decrement timer
0001F8A2 6A00                       		bpl.s	@chk_smokepuff2 ; branch if not 0
0001F8A4                            		
0001F8A4 11FC 0007 F7B1             		move.b	#7,(v_lani0_time).w ; time to display each frame
0001F8AA 43F9 0000 0000             		lea	(Art_SbzSmoke).l,a1 ; load smoke patterns
0001F8BA 1038 F7B0                  		move.b	(v_lani0_frame).w,d0
0001F8BE 5238 F7B0                  		addq.b	#1,(v_lani0_frame).w ; increment frame counter
0001F8C2 0240 0007                  		andi.w	#7,d0
0001F8C6 6700                       		beq.s	@untilnextpuff	; branch if frame 0
0001F8C8 5340                       		subq.w	#1,d0
0001F8CA C0FC 0180                  		mulu.w	#@size*$20,d0
0001F8CE 43F1 0000                  		lea	(a1,d0.w),a1
0001F8D2 323C 000B                  		move.w	#@size-1,d1
0001F8D6 6000 0000                  		bra.w	LoadTiles
0001F8DA                            ; ===========================================================================
0001F8DA                            
0001F8DA                            @untilnextpuff:
0001F8DA 11FC 00B4 F7B4             		move.b	#180,(v_lani2_frame).w ; time between smoke puffs (3 seconds)
0001F8E0                            
0001F8E0                            @clearsky:
0001F8E0 323C 0005                  		move.w	#(@size/2)-1,d1
0001F8E4 6100 0000                  		bsr.w	LoadTiles
0001F8E8 43F9 0000 0000             		lea	(Art_SbzSmoke).l,a1
0001F8EE 323C 0005                  		move.w	#(@size/2)-1,d1
0001F8F2 6000 0000                  		bra.w	LoadTiles	; load blank tiles for no smoke puff
0001F8F6                            ; ===========================================================================
0001F8F6                            
0001F8F6                            @chk_smokepuff2:
0001F8F6 4A38 F7B5                  		tst.b	(v_lani2_time).w
0001F8FA 6700                       		beq.s	@smokepuff2	; branch if counter hits 0
0001F8FC                            		
0001F8FC 5338 F7B5                  		subq.b	#1,(v_lani2_time).w ; decrement counter
0001F900 6000                       		bra.s	@end
0001F902                            ; ===========================================================================
0001F902                            
0001F902                            @smokepuff2:
0001F902 5338 F7B3                  		subq.b	#1,(v_lani1_time).w ; decrement timer
0001F906 6A00                       		bpl.s	@end		; branch if not 0
0001F908                            		
0001F908 11FC 0007 F7B3             		move.b	#7,(v_lani1_time).w ; time to display each frame
0001F90E 43F9 0000 0000             		lea	(Art_SbzSmoke).l,a1 ; load smoke patterns
0001F91E 1038 F7B2                  		move.b	(v_lani1_frame).w,d0
0001F922 5238 F7B2                  		addq.b	#1,(v_lani1_frame).w ; increment frame counter
0001F926 0240 0007                  		andi.w	#7,d0
0001F92A 6700                       		beq.s	@untilnextpuff2	; branch if frame 0
0001F92C 5340                       		subq.w	#1,d0
0001F92E C0FC 0180                  		mulu.w	#@size*$20,d0
0001F932 43F1 0000                  		lea	(a1,d0.w),a1
0001F936 323C 000B                  		move.w	#@size-1,d1
0001F93A 6000 0000                  		bra.w	LoadTiles
0001F93E                            ; ===========================================================================
0001F93E                            
0001F93E                            @untilnextpuff2:
0001F93E 11FC 0078 F7B5             		move.b	#120,(v_lani2_time).w ; time between smoke puffs (2 seconds)
0001F944 609A                       		bra.s	@clearsky
0001F946                            ; ===========================================================================
0001F946                            
0001F946                            @end:
0001F946 4E75                       		rts	
0001F948                            ; ===========================================================================
0001F948                            ; ---------------------------------------------------------------------------
0001F948                            ; Animated pattern routine - ending sequence
0001F948                            ; ---------------------------------------------------------------------------
0001F948                            
0001F948                            AniArt_Ending:
0001F948                            
0001F948                            AniArt_Ending_BigFlower:
0001F948                            
0001F948 =00000010                  @size:		equ 16	; number of tiles per frame
0001F948                            
0001F948 5338 F7B3                  		subq.b	#1,(v_lani1_time).w ; decrement timer
0001F94C 6A00                       		bpl.s	AniArt_Ending_SmallFlower ; branch if not 0
0001F94E                            		
0001F94E 11FC 0007 F7B3             		move.b	#7,(v_lani1_time).w
0001F954 43F9 0000 0000             		lea	(Art_GhzFlower1).l,a1 ;	load big flower	patterns
0001F95A 45F8 9400                  		lea	($FFFF9400).w,a2 ; load 2nd big flower from RAM
0001F95E 1038 F7B2                  		move.b	(v_lani1_frame).w,d0
0001F962 5238 F7B2                  		addq.b	#1,(v_lani1_frame).w ; increment frame counter
0001F966 0240 0001                  		andi.w	#1,d0		; only 2 frames
0001F96A 6700                       		beq.s	@isframe0	; branch if frame 0
0001F96C 43E9 0200                  		lea	@size*$20(a1),a1
0001F970 45EA 0200                  		lea	@size*$20(a2),a2
0001F974                            
0001F974                            	@isframe0:
0001F97E 323C 000F                  		move.w	#@size-1,d1
0001F982 6100 0000                  		bsr.w	LoadTiles
0001F986 224A                       		movea.l	a2,a1
0001F992 323C 000F                  		move.w	#@size-1,d1
0001F996 6000 0000                  		bra.w	LoadTiles
0001F99A                            ; ===========================================================================
0001F99A                            
0001F99A                            AniArt_Ending_SmallFlower:
0001F99A                            
0001F99A =0000000C                  @size:		equ 12	; number of tiles per frame
0001F99A                            
0001F99A 5338 F7B5                  		subq.b	#1,(v_lani2_time).w ; decrement timer
0001F99E 6A00                       		bpl.s	AniArt_Ending_Flower3 ; branch if not 0
0001F9A0                            		
0001F9A0 11FC 0007 F7B5             		move.b	#7,(v_lani2_time).w
0001F9A6 1038 F7B4                  		move.b	(v_lani2_frame).w,d0
0001F9AA 5238 F7B4                  		addq.b	#1,(v_lani2_frame).w ; increment frame counter
0001F9AE 0240 0007                  		andi.w	#7,d0		; max 8 frames
0001F9B2 103B 0000                  		move.b	@sequence(pc,d0.w),d0 ; get actual frame num from sequence data
0001F9B6 EF48                       		lsl.w	#7,d0		; multiply by $80
0001F9B8 3200                       		move.w	d0,d1
0001F9BA D040                       		add.w	d0,d0
0001F9BC D041                       		add.w	d1,d0		; multiply by 3
0001F9C8 43F9 0000 0000             		lea	(Art_GhzFlower2).l,a1 ;	load small flower patterns
0001F9CE 43F1 0000                  		lea	(a1,d0.w),a1	; jump to appropriate tile
0001F9D2 323C 000B                  		move.w	#@size-1,d1
0001F9D6 6000 0000                  		bra.w	LoadTiles
0001F9DA                            ; ===========================================================================
0001F9DA 0000 0001 0202 0201        @sequence:	dc.b 0,	0, 0, 1, 2, 2, 2, 1
0001F9E2                            ; ===========================================================================
0001F9E2                            
0001F9E2                            AniArt_Ending_Flower3:
0001F9E2                            
0001F9E2 =00000010                  @size:		equ 16	; number of tiles per frame
0001F9E2                            
0001F9E2 5338 F7B9                  		subq.b	#1,(v_lani4_time).w ; decrement timer
0001F9E6 6A00                       		bpl.s	AniArt_Ending_Flower4 ; branch if not 0
0001F9E8                            		
0001F9E8 11FC 000E F7B9             		move.b	#$E,(v_lani4_time).w
0001F9EE 1038 F7B8                  		move.b	(v_lani4_frame).w,d0
0001F9F2 5238 F7B8                  		addq.b	#1,(v_lani4_frame).w ; increment frame counter
0001F9F6 0240 0003                  		andi.w	#3,d0		; max 4 frames
0001F9FA 103B 0000                  		move.b	AniArt_Ending_Flower3_sequence(pc,d0.w),d0 ; get actual frame num from sequence data
0001F9FE E148                       		lsl.w	#8,d0		; multiply by $100
0001FA00 D040                       		add.w	d0,d0		; multiply by 2
0001FA0C 43F8 9800                  		lea	($FFFF9800).w,a1 ; load	special	flower patterns	(from RAM)
0001FA10 43F1 0000                  		lea	(a1,d0.w),a1	; jump to appropriate tile
0001FA14 323C 000F                  		move.w	#@size-1,d1
0001FA18 6000 0000                  		bra.w	LoadTiles
0001FA1C                            ; ===========================================================================
0001FA1C 0001 0201                  AniArt_Ending_Flower3_sequence:	dc.b 0,	1, 2, 1
0001FA20                            ; ===========================================================================
0001FA20                            
0001FA20                            AniArt_Ending_Flower4:
0001FA20                            
0001FA20 =00000010                  @size:		equ 16	; number of tiles per frame
0001FA20                            
0001FA20 5338 F7BB                  		subq.b	#1,(v_lani5_time).w ; decrement timer
0001FA24 6A00                       		bpl.s	@end		; branch if not 0
0001FA26                            		
0001FA26 11FC 000B F7BB             		move.b	#$B,(v_lani5_time).w
0001FA2C 1038 F7BA                  		move.b	(v_lani5_frame).w,d0
0001FA30 5238 F7BA                  		addq.b	#1,(v_lani5_frame).w ; increment frame counter
0001FA34 0240 0003                  		andi.w	#3,d0
0001FA38 103B 00E2                  		move.b	AniArt_Ending_Flower3_sequence(pc,d0.w),d0 ; get actual frame num from sequence data
0001FA3C E148                       		lsl.w	#8,d0		; multiply by $100
0001FA3E D040                       		add.w	d0,d0		; multiply by 2
0001FA4A 43F8 9E00                  		lea	($FFFF9E00).w,a1 ; load	special	flower patterns	(from RAM)
0001FA4E 43F1 0000                  		lea	(a1,d0.w),a1	; jump to appropriate tile
0001FA52 323C 000F                  		move.w	#@size-1,d1
0001FA56 6000 0000                  		bra.w	LoadTiles
0001FA5A                            ; ===========================================================================
0001FA5A                            
0001FA5A                            @end:
0001FA5A 4E75                       		rts	
0001FA5C                            ; ===========================================================================
0001FA5C                            
0001FA5C                            AniArt_none:
0001FA5C 4E75                       		rts	
0001FA5E                            
0001FA5E                            ; ---------------------------------------------------------------------------
0001FA5E                            ; Subroutine to	transfer graphics to VRAM
0001FA5E                            
0001FA5E                            ; input:
0001FA5E                            ;	a1 = source address
0001FA5E                            ;	a6 = vdp_data_port ($C00000)
0001FA5E                            ;	d1 = number of tiles to load (minus one)
0001FA5E                            ; ---------------------------------------------------------------------------
0001FA5E                            
0001FA5E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001FA5E                            
0001FA5E                            
0001FA5E                            LoadTiles:
0001FA5E 2C99                       		move.l	(a1)+,(a6)
0001FA60 2C99                       		move.l	(a1)+,(a6)
0001FA62 2C99                       		move.l	(a1)+,(a6)
0001FA64 2C99                       		move.l	(a1)+,(a6)
0001FA66 2C99                       		move.l	(a1)+,(a6)
0001FA68 2C99                       		move.l	(a1)+,(a6)
0001FA6A 2C99                       		move.l	(a1)+,(a6)
0001FA6C 2C99                       		move.l	(a1)+,(a6)
0001FA6E 51C9 FFEE                  		dbf	d1,LoadTiles
0001FA72 4E75                       		rts	
0001FA74                            ; End of function LoadTiles
0001FA74                            
0001FA74                            ; ===========================================================================
0001FA74                            ; ---------------------------------------------------------------------------
0001FA74                            ; Animated pattern routine - more Marble Zone
0001FA74                            ; ---------------------------------------------------------------------------
0001FA74 0000 0000                  AniArt_MZextra:	dc.w loc_1C3EE-AniArt_MZextra, loc_1C3FA-AniArt_MZextra
0001FA78 0000 0000                  		dc.w loc_1C410-AniArt_MZextra, loc_1C41E-AniArt_MZextra
0001FA7C 0000 0000                  		dc.w loc_1C434-AniArt_MZextra, loc_1C442-AniArt_MZextra
0001FA80 0000 0000                  		dc.w loc_1C458-AniArt_MZextra, loc_1C466-AniArt_MZextra
0001FA84 0000 0000                  		dc.w loc_1C47C-AniArt_MZextra, loc_1C48A-AniArt_MZextra
0001FA88 0000 0000                  		dc.w loc_1C4A0-AniArt_MZextra, loc_1C4AE-AniArt_MZextra
0001FA8C 0000 0000                  		dc.w loc_1C4C4-AniArt_MZextra, loc_1C4D2-AniArt_MZextra
0001FA90 0000 0000                  		dc.w loc_1C4E8-AniArt_MZextra, loc_1C4FA-AniArt_MZextra
0001FA94                            ; ===========================================================================
0001FA94                            
0001FA94                            loc_1C3EE:
0001FA94 2C91                       		move.l	(a1),(a6)
0001FA96 43E9 0010                  		lea	$10(a1),a1
0001FA9A 51C9 FFF8                  		dbf	d1,loc_1C3EE
0001FA9E 4E75                       		rts	
0001FAA0                            ; ===========================================================================
0001FAA0                            
0001FAA0                            loc_1C3FA:
0001FAA0 2029 0002                  		move.l	2(a1),d0
0001FAA4 1029 0001                  		move.b	1(a1),d0
0001FAA8 E098                       		ror.l	#8,d0
0001FAAA 2C80                       		move.l	d0,(a6)
0001FAAC 43E9 0010                  		lea	$10(a1),a1
0001FAB0 51C9 FFEE                  		dbf	d1,loc_1C3FA
0001FAB4 4E75                       		rts	
0001FAB6                            ; ===========================================================================
0001FAB6                            
0001FAB6                            loc_1C410:
0001FAB6 2CA9 0002                  		move.l	2(a1),(a6)
0001FABA 43E9 0010                  		lea	$10(a1),a1
0001FABE 51C9 FFF6                  		dbf	d1,loc_1C410
0001FAC2 4E75                       		rts	
0001FAC4                            ; ===========================================================================
0001FAC4                            
0001FAC4                            loc_1C41E:
0001FAC4 2029 0004                  		move.l	4(a1),d0
0001FAC8 1029 0003                  		move.b	3(a1),d0
0001FACC E098                       		ror.l	#8,d0
0001FACE 2C80                       		move.l	d0,(a6)
0001FAD0 43E9 0010                  		lea	$10(a1),a1
0001FAD4 51C9 FFEE                  		dbf	d1,loc_1C41E
0001FAD8 4E75                       		rts	
0001FADA                            ; ===========================================================================
0001FADA                            
0001FADA                            loc_1C434:
0001FADA 2CA9 0004                  		move.l	4(a1),(a6)
0001FADE 43E9 0010                  		lea	$10(a1),a1
0001FAE2 51C9 FFF6                  		dbf	d1,loc_1C434
0001FAE6 4E75                       		rts	
0001FAE8                            ; ===========================================================================
0001FAE8                            
0001FAE8                            loc_1C442:
0001FAE8 2029 0006                  		move.l	6(a1),d0
0001FAEC 1029 0005                  		move.b	5(a1),d0
0001FAF0 E098                       		ror.l	#8,d0
0001FAF2 2C80                       		move.l	d0,(a6)
0001FAF4 43E9 0010                  		lea	$10(a1),a1
0001FAF8 51C9 FFEE                  		dbf	d1,loc_1C442
0001FAFC 4E75                       		rts	
0001FAFE                            ; ===========================================================================
0001FAFE                            
0001FAFE                            loc_1C458:
0001FAFE 2CA9 0006                  		move.l	6(a1),(a6)
0001FB02 43E9 0010                  		lea	$10(a1),a1
0001FB06 51C9 FFF6                  		dbf	d1,loc_1C458
0001FB0A 4E75                       		rts	
0001FB0C                            ; ===========================================================================
0001FB0C                            
0001FB0C                            loc_1C466:
0001FB0C 2029 0008                  		move.l	8(a1),d0
0001FB10 1029 0007                  		move.b	7(a1),d0
0001FB14 E098                       		ror.l	#8,d0
0001FB16 2C80                       		move.l	d0,(a6)
0001FB18 43E9 0010                  		lea	$10(a1),a1
0001FB1C 51C9 FFEE                  		dbf	d1,loc_1C466
0001FB20 4E75                       		rts	
0001FB22                            ; ===========================================================================
0001FB22                            
0001FB22                            loc_1C47C:
0001FB22 2CA9 0008                  		move.l	8(a1),(a6)
0001FB26 43E9 0010                  		lea	$10(a1),a1
0001FB2A 51C9 FFF6                  		dbf	d1,loc_1C47C
0001FB2E 4E75                       		rts	
0001FB30                            ; ===========================================================================
0001FB30                            
0001FB30                            loc_1C48A:
0001FB30 2029 000A                  		move.l	$A(a1),d0
0001FB34 1029 0009                  		move.b	9(a1),d0
0001FB38 E098                       		ror.l	#8,d0
0001FB3A 2C80                       		move.l	d0,(a6)
0001FB3C 43E9 0010                  		lea	$10(a1),a1
0001FB40 51C9 FFEE                  		dbf	d1,loc_1C48A
0001FB44 4E75                       		rts	
0001FB46                            ; ===========================================================================
0001FB46                            
0001FB46                            loc_1C4A0:
0001FB46 2CA9 000A                  		move.l	$A(a1),(a6)
0001FB4A 43E9 0010                  		lea	$10(a1),a1
0001FB4E 51C9 FFF6                  		dbf	d1,loc_1C4A0
0001FB52 4E75                       		rts	
0001FB54                            ; ===========================================================================
0001FB54                            
0001FB54                            loc_1C4AE:
0001FB54 2029 000C                  		move.l	$C(a1),d0
0001FB58 1029 000B                  		move.b	$B(a1),d0
0001FB5C E098                       		ror.l	#8,d0
0001FB5E 2C80                       		move.l	d0,(a6)
0001FB60 43E9 0010                  		lea	$10(a1),a1
0001FB64 51C9 FFEE                  		dbf	d1,loc_1C4AE
0001FB68 4E75                       		rts	
0001FB6A                            ; ===========================================================================
0001FB6A                            
0001FB6A                            loc_1C4C4:
0001FB6A 2CA9 000C                  		move.l	$C(a1),(a6)
0001FB6E 43E9 0010                  		lea	$10(a1),a1
0001FB72 51C9 FFF6                  		dbf	d1,loc_1C4C4
0001FB76 4E75                       		rts	
0001FB78                            ; ===========================================================================
0001FB78                            
0001FB78                            loc_1C4D2:
0001FB78 2029 000C                  		move.l	$C(a1),d0
0001FB7C E198                       		rol.l	#8,d0
0001FB7E 1011                       		move.b	0(a1),d0
0001FB80 2C80                       		move.l	d0,(a6)
0001FB82 43E9 0010                  		lea	$10(a1),a1
0001FB86 51C9 FFF0                  		dbf	d1,loc_1C4D2
0001FB8A 4E75                       		rts	
0001FB8C                            ; ===========================================================================
0001FB8C                            
0001FB8C                            loc_1C4E8:
0001FB8C 3CA9 000E                  		move.w	$E(a1),(a6)
0001FB90 3C91                       		move.w	0(a1),(a6)
0001FB92 43E9 0010                  		lea	$10(a1),a1
0001FB96 51C9 FFF4                  		dbf	d1,loc_1C4E8
0001FB9A 4E75                       		rts	
0001FB9C                            ; ===========================================================================
0001FB9C                            
0001FB9C                            loc_1C4FA:
0001FB9C 2011                       		move.l	0(a1),d0
0001FB9E 1029 000F                  		move.b	$F(a1),d0
0001FBA2 E098                       		ror.l	#8,d0
0001FBA4 2C80                       		move.l	d0,(a6)
0001FBA6 43E9 0010                  		lea	$10(a1),a1
0001FBAA 51C9 FFF0                  		dbf	d1,loc_1C4FA
0001FBAE 4E75                       		rts	
0001FBB0                            
0001FBB0                            ; ---------------------------------------------------------------------------
0001FBB0                            ; Animated pattern routine - giant ring
0001FBB0                            ; ---------------------------------------------------------------------------
0001FBB0                            
0001FBB0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001FBB0                            
0001FBB0                            
0001FBB0                            AniArt_GiantRing:
0001FBB0                            
0001FBB0 =0000000E                  @size:		equ 14
0001FBB0                            
0001FBB0 4A78 F7BE                  		tst.w	(v_gfxbigring).w	; Is there any of the art left to load?
0001FBB4 6600                       		bne.s	@loadTiles		; If so, get to work
0001FBB6 4E75                       		rts	
0001FBB8                            ; ===========================================================================
0001FBB8                            ; loc_1C518:
0001FBB8                            @loadTiles:
0001FBB8 0478 01C0 F7BE             		subi.w	#@size*$20,(v_gfxbigring).w	; Count-down the 14 tiles we're going to load now
0001FBBE 43F9 0000 0000             		lea	(Art_BigRing).l,a1 ; load giant	ring patterns
0001FBC4 7000                       		moveq	#0,d0
0001FBC6 3038 F7BE                  		move.w	(v_gfxbigring).w,d0
0001FBCA 43F1 0000                  		lea	(a1,d0.w),a1
0001FBCE                            		; Turn VRAM address into VDP command
0001FBCE 0640 8000                  		addi.w	#$8000,d0
0001FBD2 E588                       		lsl.l	#2,d0
0001FBD4 E448                       		lsr.w	#2,d0
0001FBD6 0040 4000                  		ori.w	#$4000,d0
0001FBDA 4840                       		swap	d0
0001FBDC                            		; Send VDP command (write to VRAM at address contained in v_gfxbigring)
0001FBDC 2D40 0004                  		move.l	d0,4(a6)
0001FBE0                            
0001FBE0 323C 000D                  		move.w	#@size-1,d1
0001FBE4 6000 FE78                  		bra.w	LoadTiles
0001FBE8                            
0001FBE8                            ; End of function AniArt_GiantRing
0001FBE8                            ; End of function AniArt_GiantRing
0001FBE8                            
0001FBE8                            		include	"_incObj\21 HUD.asm"
0001FBE8                            ; ---------------------------------------------------------------------------
0001FBE8                            ; Object 21 - SCORE, TIME, RINGS
0001FBE8                            ; ---------------------------------------------------------------------------
0001FBE8                            
0001FBE8                            HUD:
0001FBE8 7000                       		moveq	#0,d0
0001FBEA 1028 0024                  		move.b	obRoutine(a0),d0
0001FBEE 323B 0000                  		move.w	HUD_Index(pc,d0.w),d1
0001FBF2 4EFB 1000                  		jmp	HUD_Index(pc,d1.w)
0001FBF6                            ; ===========================================================================
0001FBF6 0000                       HUD_Index:	dc.w HUD_Main-HUD_Index
0001FBF8 0000                       		dc.w HUD_Flash-HUD_Index
0001FBFA                            ; ===========================================================================
0001FBFA                            
0001FBFA                            HUD_Main:	; Routine 0
0001FBFA 5428 0024                  		addq.b	#2,obRoutine(a0)
0001FBFE 317C 0090 0008             		move.w	#$90,obX(a0)
0001FC04 317C 0108 000A             		move.w	#$108,obScreenY(a0)
0001FC0A 217C 0000 0000 0004        		move.l	#Map_HUD,obMap(a0)
0001FC12 317C 06CA 0002             		move.w	#$6CA,obGfx(a0)
0001FC18 117C 0000 0001             		move.b	#0,obRender(a0)
0001FC1E 317C 0000 0018             		move.w	#0,obPriority(a0)
0001FC24                            
0001FC24                            HUD_Flash:	; Routine 2
0001FC24 7000                       		moveq	#0,d0
0001FC26 0838 0003 FE05             		btst	#3,(v_framebyte).w
0001FC2C 6600                       		bne.s	@display
0001FC2E 4A78 FE20                  		tst.w	(v_rings).w	; do you have any rings?
0001FC32 6600                       		bne.s	@norings	; if so, branch
0001FC34 5240                       		addq.w	#1,d0		; make ring counter flash red
0001FC36                            ; ===========================================================================
0001FC36                            
0001FC36                            @norings:
0001FC36 0C38 0009 FE23             		cmpi.b	#9,(v_timemin).w ; have	9 minutes elapsed?
0001FC3C 6600                       		bne.s	@display	; if not, branch
0001FC3E 5440                       		addq.w	#2,d0		; make time counter flash red
0001FC40                            
0001FC40                            	@display:
0001FC40 1140 001A                  		move.b	d0,obFrame(a0)
0001FC44 4EF9 0000 FA8C             		jmp	DisplaySprite
0001FC44 4EF9 0000 FA8C             		jmp	DisplaySprite
0001FC4A                            Map_HUD:	include	"_maps\HUD.asm"
0001FC4A                            ; ---------------------------------------------------------------------------
0001FC4A                            ; Sprite mappings - SCORE, TIME, RINGS
0001FC4A                            ; ---------------------------------------------------------------------------
0001FC4A                            Map_HUD_internal:
0001FC4A 0000                       		dc.w @allyellow-Map_HUD_internal
0001FC4C 0000                       		dc.w @ringred-Map_HUD_internal
0001FC4E 0000                       		dc.w @timered-Map_HUD_internal
0001FC50 0000                       		dc.w @allred-Map_HUD_internal
0001FC52 0A                         @allyellow:	dc.b $A
0001FC53 800D 8000 00               		dc.b $80, $D, $80, 0, 0
0001FC58 800D 8018 20               		dc.b $80, $D, $80, $18,	$20
0001FC5D 800D 8020 40               		dc.b $80, $D, $80, $20,	$40
0001FC62 900D 8010 00               		dc.b $90, $D, $80, $10,	0
0001FC67 900D 8028 28               		dc.b $90, $D, $80, $28,	$28
0001FC6C A00D 8008 00               		dc.b $A0, $D, $80, 8, 0
0001FC71 A001 8000 20               		dc.b $A0, 1, $80, 0, $20
0001FC76 A009 8030 30               		dc.b $A0, 9, $80, $30, $30
0001FC7B 4005 810A 00               		dc.b $40, 5, $81, $A, 0
0001FC80 400D 810E 10               		dc.b $40, $D, $81, $E, $10
0001FC85 00                         		dc.b 0
0001FC86 0A                         @ringred:	dc.b $A
0001FC87 800D 8000 00               		dc.b $80, $D, $80, 0, 0
0001FC8C 800D 8018 20               		dc.b $80, $D, $80, $18,	$20
0001FC91 800D 8020 40               		dc.b $80, $D, $80, $20,	$40
0001FC96 900D 8010 00               		dc.b $90, $D, $80, $10,	0
0001FC9B 900D 8028 28               		dc.b $90, $D, $80, $28,	$28
0001FCA0 A00D A008 00               		dc.b $A0, $D, $A0, 8, 0
0001FCA5 A001 A000 20               		dc.b $A0, 1, $A0, 0, $20
0001FCAA A009 8030 30               		dc.b $A0, 9, $80, $30, $30
0001FCAF 4005 810A 00               		dc.b $40, 5, $81, $A, 0
0001FCB4 400D 810E 10               		dc.b $40, $D, $81, $E, $10
0001FCB9 00                         		dc.b 0
0001FCBA 0A                         @timered:	dc.b $A
0001FCBB 800D 8000 00               		dc.b $80, $D, $80, 0, 0
0001FCC0 800D 8018 20               		dc.b $80, $D, $80, $18,	$20
0001FCC5 800D 8020 40               		dc.b $80, $D, $80, $20,	$40
0001FCCA 900D A010 00               		dc.b $90, $D, $A0, $10,	0
0001FCCF 900D 8028 28               		dc.b $90, $D, $80, $28,	$28
0001FCD4 A00D 8008 00               		dc.b $A0, $D, $80, 8, 0
0001FCD9 A001 8000 20               		dc.b $A0, 1, $80, 0, $20
0001FCDE A009 8030 30               		dc.b $A0, 9, $80, $30, $30
0001FCE3 4005 810A 00               		dc.b $40, 5, $81, $A, 0
0001FCE8 400D 810E 10               		dc.b $40, $D, $81, $E, $10
0001FCED 00                         		dc.b 0
0001FCEE 0A                         @allred:	dc.b $A
0001FCEF 800D 8000 00               		dc.b $80, $D, $80, 0, 0
0001FCF4 800D 8018 20               		dc.b $80, $D, $80, $18,	$20
0001FCF9 800D 8020 40               		dc.b $80, $D, $80, $20,	$40
0001FCFE 900D A010 00               		dc.b $90, $D, $A0, $10,	0
0001FD03 900D 8028 28               		dc.b $90, $D, $80, $28,	$28
0001FD08 A00D A008 00               		dc.b $A0, $D, $A0, 8, 0
0001FD0D A001 A000 20               		dc.b $A0, 1, $A0, 0, $20
0001FD12 A009 8030 30               		dc.b $A0, 9, $80, $30, $30
0001FD17 4005 810A 00               		dc.b $40, 5, $81, $A, 0
0001FD1C 400D 810E 10               		dc.b $40, $D, $81, $E, $10
0001FD22 00                         		even
0001FD22 00                         		even
0001FD22                            
0001FD22                            ; ---------------------------------------------------------------------------
0001FD22                            ; Add points subroutine
0001FD22                            ; ---------------------------------------------------------------------------
0001FD22                            
0001FD22                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001FD22                            
0001FD22                            
0001FD22                            AddPoints:
0001FD22 11FC 0001 FE1F             		move.b	#1,(f_scorecount).w ; set score counter to update
0001FD28                            
0001FD28                            
0001FD28 47F8 FE26                  			lea     (v_score).w,a3
0001FD2C D193                       			add.l   d0,(a3)
0001FD2E 223C 000F 423F             			move.l  #999999,d1
0001FD34 B293                       			cmp.l   (a3),d1 ; is score below 999999?
0001FD36 6200                       			bhi.s   @belowmax ; if yes, branch
0001FD38 2681                       			move.l  d1,(a3) ; reset score to 999999
0001FD3A                            		@belowmax:
0001FD3A 2013                       			move.l  (a3),d0
0001FD3C B0B8 FFC0                  			cmp.l   (v_scorelife).w,d0 ; has Sonic got 50000+ points?
0001FD40 6500                       			blo.s   @noextralife ; if not, branch
0001FD42                            
0001FD42 06B8 0000 1388 FFC0        			addi.l  #5000,(v_scorelife).w ; increase requirement by 50000
0001FD4A 4A38 FFF8                  			tst.b   (v_megadrive).w
0001FD4E 6B00                       			bmi.s   @noextralife ; branch if Mega Drive is Japanese
0001FD50 5238 FE12                  			addq.b  #1,(v_lives).w ; give extra life
0001FD54 5238 FE1C                  			addq.b  #1,(f_lifecount).w
0001FD62                            
0001FD62                            @locret_1C6B6:
0001FD62                            @noextralife:
0001FD62 4E75                       		rts	
0001FD64                            ; End of function AddPoints
0001FD64                            
0001FD64                            		include	"_inc\HUD_Update.asm"
0001FD64                            ; ---------------------------------------------------------------------------
0001FD64                            ; Subroutine to	update the HUD
0001FD64                            ; ---------------------------------------------------------------------------
0001FD64                            
0001FD64                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001FD64                            
0001FD64                            hudVRAM:	macro loc
0001FD64                            		move.l	#($40000000+((loc&$3FFF)<<16)+((loc&$C000)>>14)),d0
0001FD64                            		endm
0001FD64                            
0001FD64                            
0001FD64                            HUD_Update:
0001FD64 4A78 FFFA                  		tst.w	(f_debugmode).w	; is debug mode	on?
0001FD68 6600 0000                  		bne.w	HudDebug	; if yes, branch
0001FD6C 4A38 FE1F                  		tst.b	(f_scorecount).w ; does the score need updating?
0001FD70 6700                       		beq.s	@chkrings	; if not, branch
0001FD72                            
0001FD72 4238 FE1F                  		clr.b	(f_scorecount).w
0001FD76 203C 5C80 0003             		hudVRAM	$DC80		; set VRAM address
0001FD7C 2238 FE26                  		move.l	(v_score).w,d1	; load score
0001FD80 6100 0000                  		bsr.w	Hud_Score
0001FD84                            
0001FD84                            	@chkrings:
0001FD84 4A38 FE1D                  		tst.b	(f_ringcount).w	; does the ring	counter	need updating?
0001FD88 6700                       		beq.s	@chktime	; if not, branch
0001FD8A 6A00                       		bpl.s	@notzero
0001FD8C 6100 0000                  		bsr.w	Hud_LoadZero	; reset rings to 0 if Sonic is hit
0001FD90                            
0001FD90                            	@notzero:
0001FD90 4238 FE1D                  		clr.b	(f_ringcount).w
0001FD94 203C 5F40 0003             		hudVRAM	$DF40		; set VRAM address
0001FD9A 7200                       		moveq	#0,d1
0001FD9C 3238 FE20                  		move.w	(v_rings).w,d1	; load number of rings
0001FDA0 6100 0000                  		bsr.w	Hud_Rings
0001FDA4                            
0001FDA4                            	@chktime:
0001FDA4 4A38 FE1E                  		tst.b	(f_timecount).w	; does the time	need updating?
0001FDA8 6700                       		beq.s	@chklives	; if not, branch
0001FDAA 4A78 F63A                  		tst.w	(f_pause).w	; is the game paused?
0001FDAE 6600                       		bne.s	@chklives	; if yes, branch
0001FDB0 43F8 FE22                  		lea	(v_time).w,a1
0001FDB4 0C99 0009 3B3B             		cmpi.l	#(9*$10000)+(59*$100)+59,(a1)+ ; is the time 9:59:59?
0001FDBA 6700                       		beq.s	TimeOver	; if yes, branch
0001FDBC                            
0001FDBC 5221                       		addq.b	#1,-(a1)	; increment 1/60s counter
0001FDBE 0C11 003C                  		cmpi.b	#60,(a1)	; check if passed 60
0001FDC2 6500                       		bcs.s	@chklives
0001FDC4 12BC 0000                  		move.b	#0,(a1)
0001FDC8 5221                       		addq.b	#1,-(a1)	; increment second counter
0001FDCA 0C11 003C                  		cmpi.b	#60,(a1)	; check if passed 60
0001FDCE 6500                       		bcs.s	@updatetime
0001FDD0 12BC 0000                  		move.b	#0,(a1)
0001FDD4 5221                       		addq.b	#1,-(a1)	; increment minute counter
0001FDD6 0C11 0009                  		cmpi.b	#9,(a1)		; check if passed 9
0001FDDA 6500                       		bcs.s	@updatetime
0001FDDC 12BC 0009                  		move.b	#9,(a1)		; keep as 9
0001FDE0                            
0001FDE0                            	@updatetime:
0001FDE0 203C 5E40 0003             		hudVRAM	$DE40
0001FDE6 7200                       		moveq	#0,d1
0001FDE8 1238 FE23                  		move.b	(v_timemin).w,d1 ; load	minutes
0001FDEC 6100 0000                  		bsr.w	Hud_Mins
0001FDF0 203C 5EC0 0003             		hudVRAM	$DEC0
0001FDF6 7200                       		moveq	#0,d1
0001FDF8 1238 FE24                  		move.b	(v_timesec).w,d1 ; load	seconds
0001FDFC 6100 0000                  		bsr.w	Hud_Secs
0001FE00                            
0001FE00                            	@chklives:
0001FE00 4A38 FE1C                  		tst.b	(f_lifecount).w ; does the lives counter need updating?
0001FE04 6700                       		beq.s	@chkbonus	; if not, branch
0001FE06 4238 FE1C                  		clr.b	(f_lifecount).w
0001FE0A 6100 0000                  		bsr.w	Hud_Lives
0001FE0E                            
0001FE0E                            	@chkbonus:
0001FE0E 4A38 F7D6                  		tst.b	(f_endactbonus).w ; do time/ring bonus counters need updating?
0001FE12 6700                       		beq.s	@finish		; if not, branch
0001FE14 4238 F7D6                  		clr.b	(f_endactbonus).w
0001FE22 7200                       		moveq	#0,d1
0001FE24 3238 F7D2                  		move.w	(v_timebonus).w,d1 ; load time bonus
0001FE28 6100 0000                  		bsr.w	Hud_TimeRingBonus
0001FE2C 7200                       		moveq	#0,d1
0001FE2E 3238 F7D4                  		move.w	(v_ringbonus).w,d1 ; load ring bonus
0001FE32 6100 0000                  		bsr.w	Hud_TimeRingBonus
0001FE36                            
0001FE36                            	@finish:
0001FE36 4E75                       		rts	
0001FE38                            ; ===========================================================================
0001FE38                            
0001FE38                            TimeOver:
0001FE38 4238 FE1E                  		clr.b	(f_timecount).w
0001FE3C 41F8 D000                  		lea	(v_player).w,a0
0001FE40 2448                       		movea.l	a0,a2
0001FE42 6100 E83A                  		bsr.w	KillSonic
0001FE46 11FC 0001 FE1A             		move.b	#1,(f_timeover).w
0001FE4C 4E75                       		rts	
0001FE4E                            ; ===========================================================================
0001FE4E                            
0001FE4E                            HudDebug:
0001FE4E 6100 0000                  		bsr.w	HudDb_XY
0001FE52 4A38 FE1D                  		tst.b	(f_ringcount).w	; does the ring	counter	need updating?
0001FE56 6700                       		beq.s	@objcounter	; if not, branch
0001FE58 6A00                       		bpl.s	@notzero
0001FE5A 6100 0000                  		bsr.w	Hud_LoadZero	; reset rings to 0 if Sonic is hit
0001FE5E                            
0001FE5E                            	@notzero:
0001FE5E 4238 FE1D                  		clr.b	(f_ringcount).w
0001FE62 203C 5F40 0003             		hudVRAM	$DF40		; set VRAM address
0001FE68 7200                       		moveq	#0,d1
0001FE6A 3238 FE20                  		move.w	(v_rings).w,d1	; load number of rings
0001FE6E 6100 0000                  		bsr.w	Hud_Rings
0001FE72                            
0001FE72                            	@objcounter:
0001FE72 203C 5EC0 0003             		hudVRAM	$DEC0		; set VRAM address
0001FE78 7200                       		moveq	#0,d1
0001FE7A 1238 F62C                  		move.b	(v_spritecount).w,d1 ; load "number of objects" counter
0001FE7E 6100 0000                  		bsr.w	Hud_Secs
0001FE82 4A38 FE1C                  		tst.b	(f_lifecount).w ; does the lives counter need updating?
0001FE86 6700                       		beq.s	@chkbonus	; if not, branch
0001FE88 4238 FE1C                  		clr.b	(f_lifecount).w
0001FE8C 6100 0000                  		bsr.w	Hud_Lives
0001FE90                            
0001FE90                            	@chkbonus:
0001FE90 4A38 F7D6                  		tst.b	(f_endactbonus).w ; does the ring/time bonus counter need updating?
0001FE94 6700                       		beq.s	@finish		; if not, branch
0001FE96 4238 F7D6                  		clr.b	(f_endactbonus).w
0001FEA4 7200                       		moveq	#0,d1
0001FEA6 3238 F7D2                  		move.w	(v_timebonus).w,d1 ; load time bonus
0001FEAA 6100 0000                  		bsr.w	Hud_TimeRingBonus
0001FEAE 7200                       		moveq	#0,d1
0001FEB0 3238 F7D4                  		move.w	(v_ringbonus).w,d1 ; load ring bonus
0001FEB4 6100 0000                  		bsr.w	Hud_TimeRingBonus
0001FEB8                            
0001FEB8                            	@finish:
0001FEB8 4E75                       		rts	
0001FEBA                            ; End of function HUD_Update
0001FEBA                            
0001FEBA                            ; ---------------------------------------------------------------------------
0001FEBA                            ; Subroutine to	load "0" on the	HUD
0001FEBA                            ; ---------------------------------------------------------------------------
0001FEBA                            
0001FEBA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001FEBA                            
0001FEBA                            
0001FEBA                            Hud_LoadZero:
0001FEC4 45FA 0000                  		lea	Hud_TilesZero(pc),a2
0001FEC8 343C 0002                  		move.w	#2,d2
0001FECC 6000                       		bra.s	loc_1C83E
0001FECE                            ; End of function Hud_LoadZero
0001FECE                            
0001FECE                            ; ---------------------------------------------------------------------------
0001FECE                            ; Subroutine to	load uncompressed HUD patterns ("E", "0", colon)
0001FECE                            ; ---------------------------------------------------------------------------
0001FECE                            
0001FECE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001FECE                            
0001FECE                            
0001FECE                            Hud_Base:
0001FECE 4DF9 00C0 0000             		lea	($C00000).l,a6
0001FED4 6100 0000                  		bsr.w	Hud_Lives
0001FEE2 45FA 0000                  		lea	Hud_TilesBase(pc),a2
0001FEE6 343C 000E                  		move.w	#$E,d2
0001FEEA                            
0001FEEA                            loc_1C83E:
0001FEEA 43FA 0000                  		lea	Art_Hud(pc),a1
0001FEEE                            
0001FEEE                            loc_1C842:
0001FEEE 323C 000F                  		move.w	#$F,d1
0001FEF2 101A                       		move.b	(a2)+,d0
0001FEF4 6B00                       		bmi.s	loc_1C85E
0001FEF6 4880                       		ext.w	d0
0001FEF8 EB48                       		lsl.w	#5,d0
0001FEFA 47F1 0000                  		lea	(a1,d0.w),a3
0001FEFE                            
0001FEFE                            loc_1C852:
0001FEFE 2C9B                       		move.l	(a3)+,(a6)
0001FF00 51C9 FFFC                  		dbf	d1,loc_1C852
0001FF04                            
0001FF04                            loc_1C858:
0001FF04 51CA FFE8                  		dbf	d2,loc_1C842
0001FF08                            
0001FF08 4E75                       		rts	
0001FF0A                            ; ===========================================================================
0001FF0A                            
0001FF0A                            loc_1C85E:
0001FF0A 2CBC 0000 0000             		move.l	#0,(a6)
0001FF10 51C9 FFF8                  		dbf	d1,loc_1C85E
0001FF14                            
0001FF14 60EE                       		bra.s	loc_1C858
0001FF16                            ; End of function Hud_Base
0001FF16                            
0001FF16                            ; ===========================================================================
0001FF16 16FF FFFF FFFF FF00 0014+  Hud_TilesBase:	dc.b $16, $FF, $FF, $FF, $FF, $FF, $FF,	0, 0, $14, 0, 0
0001FF22 FFFF 0000                  Hud_TilesZero:	dc.b $FF, $FF, 0, 0
0001FF26                            ; ---------------------------------------------------------------------------
0001FF26                            ; Subroutine to	load debug mode	numbers	patterns
0001FF26                            ; ---------------------------------------------------------------------------
0001FF26                            
0001FF26                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001FF26                            
0001FF26                            
0001FF26                            HudDb_XY:
0001FF30 3238 F700                  		move.w	(v_screenposx).w,d1 ; load camera x-position
0001FF34 4841                       		swap	d1
0001FF36 3238 D008                  		move.w	(v_player+obX).w,d1 ; load Sonic's x-position
0001FF3A 6100                       		bsr.s	HudDb_XY2
0001FF3C 3238 F704                  		move.w	(v_screenposy).w,d1 ; load camera y-position
0001FF40 4841                       		swap	d1
0001FF42 3238 D00C                  		move.w	(v_player+obY).w,d1 ; load Sonic's y-position
0001FF46                            ; End of function HudDb_XY
0001FF46                            
0001FF46                            
0001FF46                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001FF46                            
0001FF46                            
0001FF46                            HudDb_XY2:
0001FF46 7C07                       		moveq	#7,d6
0001FF48 43F9 0000 059E             		lea	(Art_Text).l,a1
0001FF4E                            
0001FF4E                            HudDb_XYLoop:
0001FF4E E959                       		rol.w	#4,d1
0001FF50 3401                       		move.w	d1,d2
0001FF52 0242 000F                  		andi.w	#$F,d2
0001FF56 0C42 000A                  		cmpi.w	#$A,d2
0001FF5A 6500                       		bcs.s	loc_1C8B2
0001FF5C 5E42                       		addq.w	#7,d2
0001FF5E                            
0001FF5E                            loc_1C8B2:
0001FF5E EB4A                       		lsl.w	#5,d2
0001FF60 47F1 2000                  		lea	(a1,d2.w),a3
0001FF64 2C9B                       		move.l	(a3)+,(a6)
0001FF66 2C9B                       		move.l	(a3)+,(a6)
0001FF68 2C9B                       		move.l	(a3)+,(a6)
0001FF6A 2C9B                       		move.l	(a3)+,(a6)
0001FF6C 2C9B                       		move.l	(a3)+,(a6)
0001FF6E 2C9B                       		move.l	(a3)+,(a6)
0001FF70 2C9B                       		move.l	(a3)+,(a6)
0001FF72 2C9B                       		move.l	(a3)+,(a6)
0001FF74 4841                       		swap	d1
0001FF76 51CE FFD6                  		dbf	d6,HudDb_XYLoop	; repeat 7 more	times
0001FF7A                            
0001FF7A 4E75                       		rts	
0001FF7C                            ; End of function HudDb_XY2
0001FF7C                            
0001FF7C                            ; ---------------------------------------------------------------------------
0001FF7C                            ; Subroutine to	load rings numbers patterns
0001FF7C                            ; ---------------------------------------------------------------------------
0001FF7C                            
0001FF7C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001FF7C                            
0001FF7C                            
0001FF7C                            Hud_Rings:
0001FF7C 45F9 0000 0000             		lea	(Hud_100).l,a2
0001FF82 7C02                       		moveq	#2,d6
0001FF84 6000                       		bra.s	Hud_LoadArt
0001FF86                            ; End of function Hud_Rings
0001FF86                            
0001FF86                            ; ---------------------------------------------------------------------------
0001FF86                            ; Subroutine to	load score numbers patterns
0001FF86                            ; ---------------------------------------------------------------------------
0001FF86                            
0001FF86                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001FF86                            
0001FF86                            
0001FF86                            Hud_Score:
0001FF86 45F9 0000 0000             		lea	(Hud_100000).l,a2
0001FF8C 7C05                       		moveq	#5,d6
0001FF8E                            
0001FF8E                            Hud_LoadArt:
0001FF8E 7800                       		moveq	#0,d4
0001FF90 43FA 0000                  		lea	Art_Hud(pc),a1
0001FF94                            
0001FF94                            Hud_ScoreLoop:
0001FF94 7400                       		moveq	#0,d2
0001FF96 261A                       		move.l	(a2)+,d3
0001FF98                            
0001FF98                            loc_1C8EC:
0001FF98 9283                       		sub.l	d3,d1
0001FF9A 6500                       		bcs.s	loc_1C8F4
0001FF9C 5242                       		addq.w	#1,d2
0001FF9E 60F8                       		bra.s	loc_1C8EC
0001FFA0                            ; ===========================================================================
0001FFA0                            
0001FFA0                            loc_1C8F4:
0001FFA0 D283                       		add.l	d3,d1
0001FFA2 4A42                       		tst.w	d2
0001FFA4 6700                       		beq.s	loc_1C8FE
0001FFA6 383C 0001                  		move.w	#1,d4
0001FFAA                            
0001FFAA                            loc_1C8FE:
0001FFAA 4A44                       		tst.w	d4
0001FFAC 6700                       		beq.s	loc_1C92C
0001FFAE ED4A                       		lsl.w	#6,d2
0001FFB0 2D40 0004                  		move.l	d0,4(a6)
0001FFB4 47F1 2000                  		lea	(a1,d2.w),a3
0001FFB8 2C9B                       		move.l	(a3)+,(a6)
0001FFBA 2C9B                       		move.l	(a3)+,(a6)
0001FFBC 2C9B                       		move.l	(a3)+,(a6)
0001FFBE 2C9B                       		move.l	(a3)+,(a6)
0001FFC0 2C9B                       		move.l	(a3)+,(a6)
0001FFC2 2C9B                       		move.l	(a3)+,(a6)
0001FFC4 2C9B                       		move.l	(a3)+,(a6)
0001FFC6 2C9B                       		move.l	(a3)+,(a6)
0001FFC8 2C9B                       		move.l	(a3)+,(a6)
0001FFCA 2C9B                       		move.l	(a3)+,(a6)
0001FFCC 2C9B                       		move.l	(a3)+,(a6)
0001FFCE 2C9B                       		move.l	(a3)+,(a6)
0001FFD0 2C9B                       		move.l	(a3)+,(a6)
0001FFD2 2C9B                       		move.l	(a3)+,(a6)
0001FFD4 2C9B                       		move.l	(a3)+,(a6)
0001FFD6 2C9B                       		move.l	(a3)+,(a6)
0001FFD8                            
0001FFD8                            loc_1C92C:
0001FFD8 0680 0040 0000             		addi.l	#$400000,d0
0001FFDE 51CE FFB4                  		dbf	d6,Hud_ScoreLoop
0001FFE2                            
0001FFE2 4E75                       		rts	
0001FFE4                            
0001FFE4                            ; End of function Hud_Score
0001FFE4                            ; End of function Hud_Score
0001FFE4                            
0001FFE4                            ; ---------------------------------------------------------------------------
0001FFE4                            ; Subroutine to	load countdown numbers on the continue screen
0001FFE4                            ; ---------------------------------------------------------------------------
0001FFE4                            
0001FFE4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001FFE4                            
0001FFE4                            
0001FFE4                            ContScrCounter:
0001FFEE 4DF9 00C0 0000             		lea	(vdp_data_port).l,a6
0001FFF4 45F9 0000 0000             		lea	(Hud_10).l,a2
0001FFFA 7C01                       		moveq	#1,d6
0001FFFC 7800                       		moveq	#0,d4
0001FFFE 43FA 0000                  		lea	Art_Hud(pc),a1 ; load numbers patterns
00020002                            
00020002                            ContScr_Loop:
00020002 7400                       		moveq	#0,d2
00020004 261A                       		move.l	(a2)+,d3
00020006                            
00020006                            loc_1C95A:
00020006 9283                       		sub.l	d3,d1
00020008 6500                       		blo.s	loc_1C962
0002000A 5242                       		addq.w	#1,d2
0002000C 60F8                       		bra.s	loc_1C95A
0002000E                            ; ===========================================================================
0002000E                            
0002000E                            loc_1C962:
0002000E D283                       		add.l	d3,d1
00020010 ED4A                       		lsl.w	#6,d2
00020012 47F1 2000                  		lea	(a1,d2.w),a3
00020016 2C9B                       		move.l	(a3)+,(a6)
00020018 2C9B                       		move.l	(a3)+,(a6)
0002001A 2C9B                       		move.l	(a3)+,(a6)
0002001C 2C9B                       		move.l	(a3)+,(a6)
0002001E 2C9B                       		move.l	(a3)+,(a6)
00020020 2C9B                       		move.l	(a3)+,(a6)
00020022 2C9B                       		move.l	(a3)+,(a6)
00020024 2C9B                       		move.l	(a3)+,(a6)
00020026 2C9B                       		move.l	(a3)+,(a6)
00020028 2C9B                       		move.l	(a3)+,(a6)
0002002A 2C9B                       		move.l	(a3)+,(a6)
0002002C 2C9B                       		move.l	(a3)+,(a6)
0002002E 2C9B                       		move.l	(a3)+,(a6)
00020030 2C9B                       		move.l	(a3)+,(a6)
00020032 2C9B                       		move.l	(a3)+,(a6)
00020034 2C9B                       		move.l	(a3)+,(a6)
00020036 51CE FFCA                  		dbf	d6,ContScr_Loop	; repeat 1 more	time
0002003A                            
0002003A 4E75                       		rts	
0002003C                            ; End of function ContScrCounter
0002003C                            
0002003C                            ; ===========================================================================
0002003C                            
0002003C                            		include	"_inc\HUD (part 2).asm"
0002003C                            ; ---------------------------------------------------------------------------
0002003C                            ; HUD counter sizes
0002003C                            ; ---------------------------------------------------------------------------
0002003C 0001 86A0                  Hud_100000:	dc.l 100000
00020040 0000 2710                  Hud_10000:	dc.l 10000
00020044 0000 03E8                  Hud_1000:	dc.l 1000
00020048 0000 0064                  Hud_100:	dc.l 100
0002004C 0000 000A                  Hud_10:		dc.l 10
00020050 0000 0001                  Hud_1:		dc.l 1
00020054                            
00020054                            ; ---------------------------------------------------------------------------
00020054                            ; Subroutine to	load time numbers patterns
00020054                            ; ---------------------------------------------------------------------------
00020054                            
00020054                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00020054                            
00020054                            
00020054                            Hud_Mins:
00020054 45F9 0002 0050             		lea	(Hud_1).l,a2
0002005A 7C00                       		moveq	#0,d6
0002005C 6000                       		bra.s	loc_1C9BA
0002005E                            ; End of function Hud_Mins
0002005E                            
0002005E                            
0002005E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0002005E                            
0002005E                            
0002005E                            Hud_Secs:
0002005E 45F9 0002 004C             		lea	(Hud_10).l,a2
00020064 7C01                       		moveq	#1,d6
00020066                            
00020066                            loc_1C9BA:
00020066 7800                       		moveq	#0,d4
00020068 43FA 0000                  		lea	Art_Hud(pc),a1
0002006C                            
0002006C                            Hud_TimeLoop:
0002006C 7400                       		moveq	#0,d2
0002006E 261A                       		move.l	(a2)+,d3
00020070                            
00020070                            loc_1C9C4:
00020070 9283                       		sub.l	d3,d1
00020072 6500                       		bcs.s	loc_1C9CC
00020074 5242                       		addq.w	#1,d2
00020076 60F8                       		bra.s	loc_1C9C4
00020078                            ; ===========================================================================
00020078                            
00020078                            loc_1C9CC:
00020078 D283                       		add.l	d3,d1
0002007A 4A42                       		tst.w	d2
0002007C 6700                       		beq.s	loc_1C9D6
0002007E 383C 0001                  		move.w	#1,d4
00020082                            
00020082                            loc_1C9D6:
00020082 ED4A                       		lsl.w	#6,d2
00020084 2D40 0004                  		move.l	d0,4(a6)
00020088 47F1 2000                  		lea	(a1,d2.w),a3
0002008C 2C9B                       		move.l	(a3)+,(a6)
0002008E 2C9B                       		move.l	(a3)+,(a6)
00020090 2C9B                       		move.l	(a3)+,(a6)
00020092 2C9B                       		move.l	(a3)+,(a6)
00020094 2C9B                       		move.l	(a3)+,(a6)
00020096 2C9B                       		move.l	(a3)+,(a6)
00020098 2C9B                       		move.l	(a3)+,(a6)
0002009A 2C9B                       		move.l	(a3)+,(a6)
0002009C 2C9B                       		move.l	(a3)+,(a6)
0002009E 2C9B                       		move.l	(a3)+,(a6)
000200A0 2C9B                       		move.l	(a3)+,(a6)
000200A2 2C9B                       		move.l	(a3)+,(a6)
000200A4 2C9B                       		move.l	(a3)+,(a6)
000200A6 2C9B                       		move.l	(a3)+,(a6)
000200A8 2C9B                       		move.l	(a3)+,(a6)
000200AA 2C9B                       		move.l	(a3)+,(a6)
000200AC 0680 0040 0000             		addi.l	#$400000,d0
000200B2 51CE FFB8                  		dbf	d6,Hud_TimeLoop
000200B6                            
000200B6 4E75                       		rts	
000200B8                            ; End of function Hud_Secs
000200B8                            
000200B8                            ; ---------------------------------------------------------------------------
000200B8                            ; Subroutine to	load time/ring bonus numbers patterns
000200B8                            ; ---------------------------------------------------------------------------
000200B8                            
000200B8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000200B8                            
000200B8                            
000200B8                            Hud_TimeRingBonus:
000200B8 45F9 0002 0044             		lea	(Hud_1000).l,a2
000200BE 7C03                       		moveq	#3,d6
000200C0 7800                       		moveq	#0,d4
000200C2 43FA 0000                  		lea	Art_Hud(pc),a1
000200C6                            
000200C6                            Hud_BonusLoop:
000200C6 7400                       		moveq	#0,d2
000200C8 261A                       		move.l	(a2)+,d3
000200CA                            
000200CA                            loc_1CA1E:
000200CA 9283                       		sub.l	d3,d1
000200CC 6500                       		bcs.s	loc_1CA26
000200CE 5242                       		addq.w	#1,d2
000200D0 60F8                       		bra.s	loc_1CA1E
000200D2                            ; ===========================================================================
000200D2                            
000200D2                            loc_1CA26:
000200D2 D283                       		add.l	d3,d1
000200D4 4A42                       		tst.w	d2
000200D6 6700                       		beq.s	loc_1CA30
000200D8 383C 0001                  		move.w	#1,d4
000200DC                            
000200DC                            loc_1CA30:
000200DC 4A44                       		tst.w	d4
000200DE 6700                       		beq.s	Hud_ClrBonus
000200E0 ED4A                       		lsl.w	#6,d2
000200E2 47F1 2000                  		lea	(a1,d2.w),a3
000200E6 2C9B                       		move.l	(a3)+,(a6)
000200E8 2C9B                       		move.l	(a3)+,(a6)
000200EA 2C9B                       		move.l	(a3)+,(a6)
000200EC 2C9B                       		move.l	(a3)+,(a6)
000200EE 2C9B                       		move.l	(a3)+,(a6)
000200F0 2C9B                       		move.l	(a3)+,(a6)
000200F2 2C9B                       		move.l	(a3)+,(a6)
000200F4 2C9B                       		move.l	(a3)+,(a6)
000200F6 2C9B                       		move.l	(a3)+,(a6)
000200F8 2C9B                       		move.l	(a3)+,(a6)
000200FA 2C9B                       		move.l	(a3)+,(a6)
000200FC 2C9B                       		move.l	(a3)+,(a6)
000200FE 2C9B                       		move.l	(a3)+,(a6)
00020100 2C9B                       		move.l	(a3)+,(a6)
00020102 2C9B                       		move.l	(a3)+,(a6)
00020104 2C9B                       		move.l	(a3)+,(a6)
00020106                            
00020106                            loc_1CA5A:
00020106 51CE FFBE                  		dbf	d6,Hud_BonusLoop ; repeat 3 more times
0002010A                            
0002010A 4E75                       		rts	
0002010C                            ; ===========================================================================
0002010C                            
0002010C                            Hud_ClrBonus:
0002010C 7A0F                       		moveq	#$F,d5
0002010E                            
0002010E                            Hud_ClrBonusLoop:
0002010E 2CBC 0000 0000             		move.l	#0,(a6)
00020114 51CD FFF8                  		dbf	d5,Hud_ClrBonusLoop
00020118                            
00020118 60EC                       		bra.s	loc_1CA5A
0002011A                            ; End of function Hud_TimeRingBonus
0002011A                            
0002011A                            ; ---------------------------------------------------------------------------
0002011A                            ; Subroutine to	load uncompressed lives	counter	patterns
0002011A                            ; ---------------------------------------------------------------------------
0002011A                            
0002011A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0002011A                            
0002011A                            
0002011A                            Hud_Lives:
0002011A 203C 7BA0 0003             		hudVRAM	$FBA0		; set VRAM address
00020120 7200                       		moveq	#0,d1
00020122 1238 FE12                  		move.b	(v_lives).w,d1	; load number of lives
00020126 45F9 0002 004C             		lea	(Hud_10).l,a2
0002012C 7C01                       		moveq	#1,d6
0002012E 7800                       		moveq	#0,d4
00020130 43FA 0000                  		lea	Art_LivesNums(pc),a1
00020134                            
00020134                            Hud_LivesLoop:
00020134 2D40 0004                  		move.l	d0,4(a6)
00020138 7400                       		moveq	#0,d2
0002013A 261A                       		move.l	(a2)+,d3
0002013C                            
0002013C                            loc_1CA90:
0002013C 9283                       		sub.l	d3,d1
0002013E 6500                       		bcs.s	loc_1CA98
00020140 5242                       		addq.w	#1,d2
00020142 60F8                       		bra.s	loc_1CA90
00020144                            ; ===========================================================================
00020144                            
00020144                            loc_1CA98:
00020144 D283                       		add.l	d3,d1
00020146 4A42                       		tst.w	d2
00020148 6700                       		beq.s	loc_1CAA2
0002014A 383C 0001                  		move.w	#1,d4
0002014E                            
0002014E                            loc_1CAA2:
0002014E 4A44                       		tst.w	d4
00020150 6700                       		beq.s	Hud_ClrLives
00020152                            
00020152                            loc_1CAA6:
00020152 EB4A                       		lsl.w	#5,d2
00020154 47F1 2000                  		lea	(a1,d2.w),a3
00020158 2C9B                       		move.l	(a3)+,(a6)
0002015A 2C9B                       		move.l	(a3)+,(a6)
0002015C 2C9B                       		move.l	(a3)+,(a6)
0002015E 2C9B                       		move.l	(a3)+,(a6)
00020160 2C9B                       		move.l	(a3)+,(a6)
00020162 2C9B                       		move.l	(a3)+,(a6)
00020164 2C9B                       		move.l	(a3)+,(a6)
00020166 2C9B                       		move.l	(a3)+,(a6)
00020168                            
00020168                            loc_1CABC:
00020168 0680 0040 0000             		addi.l	#$400000,d0
0002016E 51CE FFC4                  		dbf	d6,Hud_LivesLoop ; repeat 1 more time
00020172                            
00020172 4E75                       		rts	
00020174                            ; ===========================================================================
00020174                            
00020174                            Hud_ClrLives:
00020174 4A46                       		tst.w	d6
00020176 67DA                       		beq.s	loc_1CAA6
00020178 7A07                       		moveq	#7,d5
0002017A                            
0002017A                            Hud_ClrLivesLoop:
0002017A 2CBC 0000 0000             		move.l	#0,(a6)
00020180 51CD FFF8                  		dbf	d5,Hud_ClrLivesLoop
00020184 60E2                       		bra.s	loc_1CABC
00020186                            ; End of function Hud_Lives
00020186                            ; End of function Hud_Lives
00020186                            
00020186                            Art_Hud:	incbin	"artunc\HUD Numbers.bin" ; 8x16 pixel numbers on HUD
00020486                            		even
00020486                            Art_LivesNums:	incbin	"artunc\Lives Counter Numbers.bin" ; 8x8 pixel numbers on lives counter
000205C6                            		even
000205C6                            
000205C6                            		include	"_incObj\DebugMode.asm"
000205C6                            ; ---------------------------------------------------------------------------
000205C6                            ; When debug mode is currently in use
000205C6                            ; ---------------------------------------------------------------------------
000205C6                            
000205C6                            DebugMode:
000205C6 7000                       		moveq	#0,d0
000205C8 1038 FE08                  		move.b	(v_debuguse).w,d0
000205CC 323B 0000                  		move.w	Debug_Index(pc,d0.w),d1
000205D0 4EFB 1000                  		jmp	Debug_Index(pc,d1.w)
000205D4                            ; ===========================================================================
000205D4 0000                       Debug_Index:	dc.w Debug_Main-Debug_Index
000205D6 0000                       		dc.w Debug_Action-Debug_Index
000205D8                            ; ===========================================================================
000205D8                            
000205D8                            Debug_Main:	; Routine 0
000205D8 5438 FE08                  		addq.b	#2,(v_debuguse).w
000205DC 31F8 F72C FEF0             		move.w	(v_limittop2).w,(v_limittopdb).w ; buffer level x-boundary
000205E2 31F8 F726 FEF2             		move.w	(v_limitbtm1).w,(v_limitbtmdb).w ; buffer level y-boundary
000205E8 31FC 0000 F72C             		move.w	#0,(v_limittop2).w
000205EE 31FC 0720 F726             		move.w	#$720,(v_limitbtm1).w
000205F4 0278 07FF D00C             		andi.w	#$7FF,(v_player+obY).w
000205FA 0278 07FF F704             		andi.w	#$7FF,(v_screenposy).w
00020600 0278 03FF F70C             		andi.w	#$3FF,(v_bgscreenposy).w
00020606 117C 0000 001A             		move.b	#0,obFrame(a0)
0002060C 117C 0000 001C             		move.b	#id_Walk,obAnim(a0)
00020612 0C38 0000 F600             		cmpi.b	#id_Special,(v_gamemode).w ; is game mode $10 (special stage)?
00020618 6600                       		bne.s	@islevel	; if not, branch
0002061A                            
0002061A 31FC 0000 F782             		move.w	#0,(v_ssrotate).w ; stop special stage rotating
00020620 31FC 0000 F780             		move.w	#0,(v_ssangle).w ; make	special	stage "upright"
00020626 7006                       		moveq	#6,d0		; use 6th debug	item list
00020628 6000                       		bra.s	@selectlist
0002062A                            ; ===========================================================================
0002062A                            
0002062A                            @islevel:
0002062A 7000                       		moveq	#0,d0
0002062C 1038 FE10                  		move.b	(v_zone).w,d0
00020630                            
00020630                            @selectlist:
00020630 45F9 0000 0000             		lea	(DebugList).l,a2
00020636 D040                       		add.w	d0,d0
00020638 D4F2 0000                  		adda.w	(a2,d0.w),a2
0002063C 3C1A                       		move.w	(a2)+,d6
0002063E BC38 FE06                  		cmp.b	(v_debugitem).w,d6 ; have you gone past the last item?
00020642 6200                       		bhi.s	@noreset	; if not, branch
00020644 11FC 0000 FE06             		move.b	#0,(v_debugitem).w ; back to start of list
0002064A                            
0002064A                            	@noreset:
0002064A 6100 0000                  		bsr.w	Debug_ShowItem
0002064E 11FC 000C FE0A             		move.b	#12,(v_debugxspeed).w
00020654 11FC 0001 FE0B             		move.b	#1,(v_debugyspeed).w
0002065A                            
0002065A                            Debug_Action:	; Routine 2
0002065A 7006                       		moveq	#6,d0
0002065C 0C38 0000 F600             		cmpi.b	#id_Special,(v_gamemode).w
00020662 6700                       		beq.s	@isntlevel
00020664                            
00020664 7000                       		moveq	#0,d0
00020666 1038 FE10                  		move.b	(v_zone).w,d0
0002066A                            
0002066A                            	@isntlevel:
0002066A 45F9 0000 0000             		lea	(DebugList).l,a2
00020670 D040                       		add.w	d0,d0
00020672 D4F2 0000                  		adda.w	(a2,d0.w),a2
00020676 3C1A                       		move.w	(a2)+,d6
00020678 6100 0000                  		bsr.w	Debug_Control
0002067C 4EF9 0000 FA8C             		jmp	(DisplaySprite).l
00020682                            
00020682                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00020682                            
00020682                            
00020682                            Debug_Control:
00020682 7800                       		moveq	#0,d4
00020684 323C 0001                  		move.w	#1,d1
00020688 1838 F605                  		move.b	(v_jpadpress1).w,d4
0002068C 0244 000F                  		andi.w	#btnDir,d4	; is up/down/left/right	pressed?
00020690 6600                       		bne.s	@dirpressed	; if yes, branch
00020692                            
00020692 1038 F604                  		move.b	(v_jpadhold1).w,d0
00020696 0240 000F                  		andi.w	#btnDir,d0	; is up/down/left/right	held?
0002069A 6600                       		bne.s	@dirheld	; if yes, branch
0002069C                            
0002069C 11FC 000C FE0A             		move.b	#12,(v_debugxspeed).w
000206A2 11FC 000F FE0B             		move.b	#15,(v_debugyspeed).w
000206A8 6000 0000                  		bra.w	Debug_ChgItem
000206AC                            ; ===========================================================================
000206AC                            
000206AC                            @dirheld:
000206AC 5338 FE0A                  		subq.b	#1,(v_debugxspeed).w
000206B0 6600                       		bne.s	loc_1D01C
000206B2 11FC 0001 FE0A             		move.b	#1,(v_debugxspeed).w
000206B8 5238 FE0B                  		addq.b	#1,(v_debugyspeed).w
000206BC 6600                       		bne.s	@dirpressed
000206BE 11FC 00FF FE0B             		move.b	#-1,(v_debugyspeed).w
000206C4                            
000206C4                            @dirpressed:
000206C4 1838 F604                  		move.b	(v_jpadhold1).w,d4
000206C8                            
000206C8                            loc_1D01C:
000206C8 7200                       		moveq	#0,d1
000206CA 1238 FE0B                  		move.b	(v_debugyspeed).w,d1
000206CE 5241                       		addq.w	#1,d1
000206D0 4841                       		swap	d1
000206D2 E881                       		asr.l	#4,d1
000206D4 2428 000C                  		move.l	obY(a0),d2
000206D8 2628 0008                  		move.l	obX(a0),d3
000206DC 0804 0000                  		btst	#bitUp,d4	; is up	being pressed?
000206E0 6700                       		beq.s	loc_1D03C	; if not, branch
000206E2 9481                       		sub.l	d1,d2
000206E4 6400                       		bcc.s	loc_1D03C
000206E6 7400                       		moveq	#0,d2
000206E8                            
000206E8                            loc_1D03C:
000206E8 0804 0001                  		btst	#bitDn,d4	; is down being	pressed?
000206EC 6700                       		beq.s	loc_1D052	; if not, branch
000206EE D481                       		add.l	d1,d2
000206F0 0C82 07FF 0000             		cmpi.l	#$7FF0000,d2
000206F6 6500                       		bcs.s	loc_1D052
000206F8 243C 07FF 0000             		move.l	#$7FF0000,d2
000206FE                            
000206FE                            loc_1D052:
000206FE 0804 0002                  		btst	#bitL,d4
00020702 6700                       		beq.s	loc_1D05E
00020704 9681                       		sub.l	d1,d3
00020706 6400                       		bcc.s	loc_1D05E
00020708 7600                       		moveq	#0,d3
0002070A                            
0002070A                            loc_1D05E:
0002070A 0804 0003                  		btst	#bitR,d4
0002070E 6700                       		beq.s	loc_1D066
00020710 D681                       		add.l	d1,d3
00020712                            
00020712                            loc_1D066:
00020712 2142 000C                  		move.l	d2,obY(a0)
00020716 2143 0008                  		move.l	d3,obX(a0)
0002071A                            
0002071A                            Debug_ChgItem:
0002071A 0838 0006 F604             		btst	#bitA,(v_jpadhold1).w ; is button A pressed?
00020720 6700                       		beq.s	@createitem	; if not, branch
00020722 0838 0005 F605             		btst	#bitC,(v_jpadpress1).w ; is button C pressed?
00020728 6700                       		beq.s	@nextitem	; if not, branch
0002072A 5338 FE06                  		subq.b	#1,(v_debugitem).w ; go back 1 item
0002072E 6400                       		bcc.s	@display
00020730 DD38 FE06                  		add.b	d6,(v_debugitem).w
00020734 6000                       		bra.s	@display
00020736                            ; ===========================================================================
00020736                            
00020736                            @nextitem:
00020736 0838 0006 F605             		btst	#bitA,(v_jpadpress1).w ; is button A pressed?
0002073C 6700                       		beq.s	@createitem	; if not, branch
0002073E 5238 FE06                  		addq.b	#1,(v_debugitem).w ; go forwards 1 item
00020742 BC38 FE06                  		cmp.b	(v_debugitem).w,d6
00020746 6200                       		bhi.s	@display
00020748 11FC 0000 FE06             		move.b	#0,(v_debugitem).w ; loop back to first item
0002074E                            
0002074E                            	@display:
0002074E 6000 0000                  		bra.w	Debug_ShowItem
00020752                            ; ===========================================================================
00020752                            
00020752                            @createitem:
00020752 0838 0005 F605             		btst	#bitC,(v_jpadpress1).w ; is button C pressed?
00020758 6700                       		beq.s	@backtonormal	; if not, branch
0002075A 4EB9 0000 FF18             		jsr	(FindFreeObj).l
00020760 6600                       		bne.s	@backtonormal
00020762 3368 0008 0008             		move.w	obX(a0),obX(a1)
00020768 3368 000C 000C             		move.w	obY(a0),obY(a1)
0002076E 12A8 0004                  		move.b	4(a0),0(a1)	; create object
00020772 1368 0001 0001             		move.b	obRender(a0),obRender(a1)
00020778 1368 0001 0022             		move.b	obRender(a0),obStatus(a1)
0002077E 0229 007F 0022             		andi.b	#$7F,obStatus(a1)
00020784 7000                       		moveq	#0,d0
00020786 1038 FE06                  		move.b	(v_debugitem).w,d0
0002078A E748                       		lsl.w	#3,d0
0002078C 1372 0004 0028             		move.b	4(a2,d0.w),obSubtype(a1)
00020792 4E75                       		rts	
00020794                            ; ===========================================================================
00020794                            
00020794                            @backtonormal:
00020794 0838 0004 F605             		btst	#bitB,(v_jpadpress1).w ; is button B pressed?
0002079A 6700                       		beq.s	@stayindebug	; if not, branch
0002079C 7000                       		moveq	#0,d0
0002079E 31C0 FE08                  		move.w	d0,(v_debuguse).w ; deactivate debug mode
000207A2 21FC 0000 0000 D004        		move.l	#Map_Sonic,(v_player+obMap).w
000207AA 31FC 0780 D002             		move.w	#$780,(v_player+obGfx).w
000207B0 11C0 D01C                  		move.b	d0,(v_player+obAnim).w
000207B4 3140 000A                  		move.w	d0,obX+2(a0)
000207B8 3140 000E                  		move.w	d0,obY+2(a0)
000207BC 31F8 FEF0 F72C             		move.w	(v_limittopdb).w,(v_limittop2).w ; restore level boundaries
000207C2 31F8 FEF2 F726             		move.w	(v_limitbtmdb).w,(v_limitbtm1).w
000207C8 0C38 0000 F600             		cmpi.b	#id_Special,(v_gamemode).w ; are you in the special stage?
000207CE 6600                       		bne.s	@stayindebug	; if not, branch
000207D0                            
000207D0 4278 F780                  		clr.w	(v_ssangle).w
000207D4 31FC 0040 F782             		move.w	#$40,(v_ssrotate).w ; set new level rotation speed
000207DA 21FC 0000 0000 D004        		move.l	#Map_Sonic,(v_player+obMap).w
000207E2 31FC 0780 D002             		move.w	#$780,(v_player+obGfx).w
000207E8 11FC 0002 D01C             		move.b	#id_Roll,(v_player+obAnim).w
000207EE 08F8 0002 D022             		bset	#2,(v_player+obStatus).w
000207F4 08F8 0001 D022             		bset	#1,(v_player+obStatus).w
000207FA                            
000207FA                            	@stayindebug:
000207FA 4E75                       		rts	
000207FC                            ; End of function Debug_Control
000207FC                            
000207FC                            
000207FC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000207FC                            
000207FC                            
000207FC                            Debug_ShowItem:
000207FC 7000                       		moveq	#0,d0
000207FE 1038 FE06                  		move.b	(v_debugitem).w,d0
00020802 E748                       		lsl.w	#3,d0
00020804 2172 0000 0004             		move.l	(a2,d0.w),obMap(a0) ; load mappings for item
0002080A 3172 0006 0002             		move.w	6(a2,d0.w),obGfx(a0) ; load VRAM setting for item
00020810 1172 0005 001A             		move.b	5(a2,d0.w),obFrame(a0) ; load frame number for item
00020816 4E75                       		rts	
00020818                            ; End of function Debug_ShowItem
00020818                            ; End of function Debug_ShowItem
00020818                            		include	"_inc\DebugList.asm"
00020818                            ; ---------------------------------------------------------------------------
00020818                            ; Debug	mode item lists
00020818                            ; ---------------------------------------------------------------------------
00020818                            DebugList:
00020818 0000                       	dc.w @GHZ-DebugList
0002081A 0000                       	dc.w @LZ-DebugList
0002081C 0000                       	dc.w @MZ-DebugList
0002081E 0000                       	dc.w @SLZ-DebugList
00020820 0000                       	dc.w @SYZ-DebugList
00020822 0000                       	dc.w @SBZ-DebugList
00020824 0000                       	dc.w @Ending-DebugList
00020826                            
00020826                            dbug:	macro map,object,subtype,frame,vram
00020826                            	dc.l map+(object<<24)
00020826                            	dc.b subtype,frame
00020826                            	dc.w vram
00020826                            	endm
00020826                            
00020826                            @GHZ:
00020826 0000                       	dc.w (@GHZend-@GHZ-2)/8
00020828                            
00020828                            ;		mappings	object		subtype	frame	VRAM setting
00020828 2500 C098 0000 27B2        	dbug 	Map_Ring,	id_Rings,	0,	0,	$27B2
00020830 2600 C85E 0000 0680        	dbug	Map_Monitor,	id_Monitor,	0,	0,	$680
00020838 1F00 B478 0000 0400        	dbug	Map_Crab,	id_Crabmeat,	0,	0,	$400
00020840 2200 B902 0000 0444        	dbug	Map_Buzz,	id_BuzzBomber,	0,	0,	$444
00020848 2B00 D000 0000 047B        	dbug	Map_Chop,	id_Chopper,	0,	0,	$47B
00020850 3600 F436 0000 051B        	dbug	Map_Spike,	id_Spikes,	0,	0,	$51B
00020858 1800 9E1E 0000 4000        	dbug	Map_Plat_GHZ,	id_BasicPlatform, 0,	0,	$4000
00020860 3B00 F55C 0000 63D0        	dbug	Map_PRock,	id_PurpleRock,	0,	0,	$63D0
00020868 4001 1B08 0000 04F0        	dbug	Map_Moto,	id_MotoBug,	0,	0,	$4F0
00020870 4101 01AA 0000 0523        	dbug	Map_Spring,	id_Springs,	0,	0,	$523
00020878 4201 03D0 0000 249B        	dbug	Map_Newt,	id_Newtron,	0,	0,	$249B
00020880 4401 06DE 0000 434C        	dbug	Map_Edge,	id_EdgeWalls,	0,	0,	$434C
00020888 7901 A344 0100 07A0        	dbug	Map_Lamp,	id_Lamppost,	1,	0,	$7A0
00020890 4B00 C0E8 0000 2400        	dbug	Map_GRing,	id_GiantRing,	0,	0,	$2400
00020898 7D01 A506 0101 84B6        	dbug	Map_Bonus,	id_HiddenBonus,	1,	1,	$84B6
000208A0                            	@GHZend:
000208A0                            
000208A0                            @LZ:
000208A0 0000                       	dc.w (@LZend-@LZ-2)/8
000208A2                            
000208A2                            ;		mappings	object		subtype	frame	VRAM setting
000208A2 2500 C098 0000 27B2        	dbug	Map_Ring,	id_Rings,	0,	0,	$27B2
000208AA 2600 C85E 0000 0680        	dbug	Map_Monitor,	id_Monitor,	0,	0,	$680
000208B2 4101 01AA 0000 0523        	dbug	Map_Spring,	id_Springs,	0,	0,	$523
000208BA 2C00 D0A6 0800 2486        	dbug	Map_Jaws,	id_Jaws,	8,	0,	$2486
000208C2 2D00 D292 0002 84A6        	dbug	Map_Burro,	id_Burrobot,	0,	2,	$84A6
000208CA 1601 44CA 0000 03CC        	dbug	Map_Harp,	id_Harpoon,	0,	0,	$3CC
000208D2 1601 44CA 0203 03CC        	dbug	Map_Harp,	id_Harpoon,	2,	3,	$3CC
000208DA 3300 E710 0000 43DE        	dbug	Map_Push,	id_PushBlock,	0,	0,	$43DE
000208E2 3200 E2D0 0000 0513        	dbug	Map_But,	id_Button,	0,	0,	$513
000208EA 3600 F436 0000 051B        	dbug	Map_Spike,	id_Spikes,	0,	0,	$51B
000208F2 5201 25A0 0400 43BC        	dbug	Map_MBlockLZ,	id_MovingBlock,	4,	0,	$43BC
000208FA 6101 46F2 0100 43E6        	dbug	Map_LBlock,	id_LabyrinthBlock, 1,	0,	$43E6
00020902 6101 46F2 1301 43E6        	dbug	Map_LBlock,	id_LabyrinthBlock, $13,	1,	$43E6
0002090A 6101 46F2 0500 43E6        	dbug	Map_LBlock,	id_LabyrinthBlock, 5,	0,	$43E6
00020912 6201 4846 0000 443E        	dbug	Map_Gar,	id_Gargoyle,	0,	0,	$443E
0002091A 6101 46F2 2702 43E6        	dbug	Map_LBlock,	id_LabyrinthBlock, $27,	2,	$43E6
00020922 6101 46F2 3003 43E6        	dbug	Map_LBlock,	id_LabyrinthBlock, $30,	3,	$43E6
0002092A 6301 4BA8 7F00 03F6        	dbug	Map_LConv,	id_LabyrinthConvey, $7F, 0,	$3F6
00020932 6001 4414 0000 0467        	dbug	Map_Orb,	id_Orbinaut,	0,	0,	$467
0002093A 6401 4EF6 8413 8348        	dbug	Map_Bub,	id_Bubble,	$84,	$13,	$8348
00020942 6501 507E 0202 C259        	dbug	Map_WFall,	id_Waterfall,	2,	2,	$C259
0002094A 6501 507E 0909 C259        	dbug	Map_WFall,	id_Waterfall,	9,	9,	$C259
00020952 0B01 3860 0000 43DE        	dbug	Map_Pole,	id_Pole,	0,	0,	$43DE
0002095A 0C01 3930 0200 4328        	dbug	Map_Flap,	id_FlapDoor,	2,	0,	$4328
00020962 7901 A344 0100 07A0        	dbug	Map_Lamp,	id_Lamppost,	1,	0,	$7A0
0002096A                            	@LZend:
0002096A                            
0002096A                            @MZ:
0002096A 0000                       	dc.w (@MZend-@MZ-2)/8
0002096C                            
0002096C                            ;		mappings	object		subtype	frame	VRAM setting
0002096C 2500 C098 0000 27B2        	dbug	Map_Ring,	id_Rings,	0,	0,	$27B2
00020974 2600 C85E 0000 0680        	dbug	Map_Monitor,	id_Monitor,	0,	0,	$680
0002097C 2200 B902 0000 0444        	dbug	Map_Buzz,	id_BuzzBomber,	0,	0,	$444
00020984 3600 F436 0000 051B        	dbug	Map_Spike,	id_Spikes,	0,	0,	$51B
0002098C 4101 01AA 0000 0523        	dbug	Map_Spring,	id_Springs,	0,	0,	$523
00020994 1300 D7A0 0000 0345        	dbug	Map_Fire,	id_LavaMaker,	0,	0,	$345
0002099C 4601 0D8E 0000 4000        	dbug	Map_Brick,	id_MarbleBrick,	0,	0,	$4000
000209A4 6E01 93E0 0400 047E        	dbug	Map_Elec,	id_Electro,	4,	0,	$47E
000209AC 6A01 8D98 0200 43B5        	dbug	Map_Saw,	id_Saws,	2,	0,	$43B5
000209B4 3300 E710 0000 42B8        	dbug	Map_Push,	id_PushBlock,	0,	0,	$42B8
000209BC 1E00 AB90 0400 2302        	dbug	Map_Hog,	id_BallHog,	4,	0,	$2302
000209C4 5101 22C6 0000 42B8        	dbug	Map_Smab,	id_SmashBlock,	0,	0,	$42B8
000209CC 5201 254A 0000 02B8        	dbug	Map_MBlock,	id_MovingBlock,	0,	0,	$2B8
000209D4 5300 A460 0000 62B8        	dbug	Map_CFlo,	id_CollapseFloor, 0,	0,	$62B8
000209DC 5401 166E 0000 8680        	dbug	Map_LTag,	id_LavaTag,	0,	0,	$8680
000209E4 5501 273E 0000 04B8        	dbug	Map_Bas,	id_Basaran,	0,	0,	$4B8
000209EC 7801 9FB0 0000 24FF        	dbug	Map_Cat,	id_Caterkiller,	0,	0,	$24FF
000209F4 7901 A344 0100 07A0        	dbug	Map_Lamp,	id_Lamppost,	1,	0,	$7A0
000209FC                            	@MZend:
000209FC                            
000209FC                            @SLZ:
000209FC 0000                       	dc.w (@SLZend-@SLZ-2)/8
000209FE                            
000209FE                            ;		mappings	object		subtype	frame	VRAM setting
000209FE 2500 C098 0000 27B2        	dbug	Map_Ring,	id_Rings,	0,	0,	$27B2
00020A06 2600 C85E 0000 0680        	dbug	Map_Monitor,	id_Monitor,	0,	0,	$680
00020A0E 5901 3288 0000 4000        	dbug	Map_Elev,	id_Elevator,	0,	0,	$4000
00020A16 5300 A460 0002 44E0        	dbug	Map_CFlo,	id_CollapseFloor, 0,	2,	$44E0
00020A1E 1800 9E7C 0000 4000        	dbug	Map_Plat_SLZ,	id_BasicPlatform, 0,	0,	$4000
00020A26 5A01 33C2 0000 4000        	dbug	Map_Circ,	id_CirclingPlatform, 0,	0,	$4000
00020A2E 5B01 357A 0000 4000        	dbug	Map_Stair,	id_Staircase,	0,	0,	$4000
00020A36 5D01 3B4E 0000 43A0        	dbug	Map_Fan,	id_Fan,		0,	0,	$43A0
00020A3E 5E01 3EE0 0000 0374        	dbug	Map_Seesaw,	id_Seesaw,	0,	0,	$374
00020A46 4101 01AA 0000 0523        	dbug	Map_Spring,	id_Springs,	0,	0,	$523
00020A4E 1300 D7A0 0000 0480        	dbug	Map_Fire,	id_LavaMaker,	0,	0,	$480
00020A56 1C00 A592 0000 44D8        	dbug	Map_Scen,	id_Scenery,	0,	0,	$44D8
00020A5E 5F01 415E 0000 0400        	dbug	Map_Bomb,	id_Bomb,	0,	0,	$400
00020A66 6001 4414 0000 2429        	dbug	Map_Orb,	id_Orbinaut,	0,	0,	$2429
00020A6E 7901 A344 0100 07A0        	dbug	Map_Lamp,	id_Lamppost,	1,	0,	$7A0
00020A76                            	@SLZend:
00020A76                            
00020A76                            @SYZ:
00020A76 0000                       	dc.w (@SYZend-@SYZ-2)/8
00020A78                            
00020A78                            ;		mappings	object		subtype	frame	VRAM setting
00020A78 2500 C098 0000 27B2        	dbug	Map_Ring,	id_Rings,	0,	0,	$27B2
00020A80 2600 C85E 0000 0680        	dbug	Map_Monitor,	id_Monitor,	0,	0,	$680
00020A88 3600 F436 0000 051B        	dbug	Map_Spike,	id_Spikes,	0,	0,	$51B
00020A90 4101 01AA 0000 0523        	dbug	Map_Spring,	id_Springs,	0,	0,	$523
00020A98 4301 0630 0000 04B8        	dbug	Map_Roll,	id_Roller,	0,	0,	$4B8
00020AA0 1201 0E0C 0000 0000        	dbug	Map_Light,	id_SpinningLight, 0,	0,	0
00020AA8 4701 0FB0 0000 0380        	dbug	Map_Bump,	id_Bumper,	0,	0,	$380
00020AB0 1F00 B478 0000 0400        	dbug	Map_Crab,	id_Crabmeat,	0,	0,	$400
00020AB8 2200 B902 0000 0444        	dbug	Map_Buzz,	id_BuzzBomber,	0,	0,	$444
00020AC0 5001 1D98 0000 247B        	dbug	Map_Yad,	id_Yadrin,	0,	0,	$247B
00020AC8 1800 9E6A 0000 4000        	dbug	Map_Plat_SYZ,	id_BasicPlatform, 0,	0,	$4000
00020AD0 5601 2C48 0000 4000        	dbug	Map_FBlock,	id_FloatingBlock, 0,	0,	$4000
00020AD8 3200 E2D0 0000 0513        	dbug	Map_But,	id_Button,	0,	0,	$513
00020AE0 7801 9FB0 0000 24FF        	dbug	Map_Cat,	id_Caterkiller,	0,	0,	$24FF
00020AE8 7901 A344 0100 07A0        	dbug	Map_Lamp,	id_Lamppost,	1,	0,	$7A0
00020AF0                            	@SYZend:
00020AF0                            
00020AF0                            @SBZ:
00020AF0 0000                       	dc.w (@SBZend-@SBZ-2)/8
00020AF2                            
00020AF2                            ;		mappings	object		subtype	frame	VRAM setting
00020AF2 2500 C098 0000 27B2        	dbug	Map_Ring,	id_Rings,	0,	0,	$27B2
00020AFA 2600 C85E 0000 0680        	dbug	Map_Monitor,	id_Monitor,	0,	0,	$680
00020B02 5F01 415E 0000 0400        	dbug	Map_Bomb,	id_Bomb,	0,	0,	$400
00020B0A 6001 4414 0000 0429        	dbug	Map_Orb,	id_Orbinaut,	0,	0,	$429
00020B12 7801 9FB0 0000 22B0        	dbug	Map_Cat,	id_Caterkiller,	0,	0,	$22B0
00020B1A 1501 2FE4 0702 4391        	dbug	Map_BBall,	id_SwingingPlatform, 7,	2,	$4391
00020B22 6701 8886 E000 C344        	dbug	Map_Disc,	id_RunningDisc,	$E0,	0,	$C344
00020B2A 5201 254A 2802 22C0        	dbug	Map_MBlock,	id_MovingBlock,	$28,	2,	$22C0
00020B32 3200 E2D0 0000 0513        	dbug	Map_But,	id_Button,	0,	0,	$513
00020B3A 6901 8AE0 0300 4492        	dbug	Map_Trap,	id_SpinPlatform, 3,	0,	$4492
00020B42 6901 8B3A 8300 04DF        	dbug	Map_Spin,	id_SpinPlatform, $83,	0,	$4DF
00020B4A 6A01 8D98 0200 43B5        	dbug	Map_Saw,	id_Saws,	2,	0,	$43B5
00020B52 5300 A460 0000 43F5        	dbug	Map_CFlo,	id_CollapseFloor, 0,	0,	$43F5
00020B5A 5201 254A 3903 4460        	dbug	Map_MBlock,	id_MovingBlock,	$39,	3,	$4460
00020B62 6B01 9168 0000 22C0        	dbug	Map_Stomp,	id_ScrapStomp,	0,	0,	$22C0
00020B6A 2A00 A722 0000 42E8        	dbug	Map_ADoor,	id_AutoDoor,	0,	0,	$42E8
00020B72 6B01 9168 1301 22C0        	dbug	Map_Stomp,	id_ScrapStomp,	$13,	1,	$22C0
00020B7A 6A01 8D98 0100 43B5        	dbug	Map_Saw,	id_Saws,	1,	0,	$43B5
00020B82 6B01 9168 2401 22C0        	dbug	Map_Stomp,	id_ScrapStomp,	$24,	1,	$22C0
00020B8A 6A01 8D98 0402 43B5        	dbug	Map_Saw,	id_Saws,	4,	2,	$43B5
00020B92 6B01 9168 3401 22C0        	dbug	Map_Stomp,	id_ScrapStomp,	$34,	1,	$22C0
00020B9A 6C01 932A 0000 44C3        	dbug	Map_VanP,	id_VanishPlatform, 0,	0,	$44C3
00020BA2 6D01 0A80 6400 83D9        	dbug	Map_Flame,	id_Flamethrower, $64,	0,	$83D9
00020BAA 6D01 0A80 640B 83D9        	dbug	Map_Flame,	id_Flamethrower, $64,	$B,	$83D9
00020BB2 6E01 93E0 0400 047E        	dbug	Map_Elec,	id_Electro,	4,	0,	$47E
00020BBA 7001 9826 0000 42F0        	dbug	Map_Gird,	id_Girder,	0,	0,	$42F0
00020BC2 7101 39F4 1100 8680        	dbug	Map_Invis,	id_Invisibarrier, $11,	0,	$8680
00020BCA 1E00 AB90 0400 2302        	dbug	Map_Hog,	id_BallHog,	4,	0,	$2302
00020BD2 7901 A344 0100 07A0        	dbug	Map_Lamp,	id_Lamppost,	1,	0,	$7A0
00020BDA                            	@SBZend:
00020BDA                            
00020BDA                            @Ending:
00020BDA 0000                       	dc.w (@Endingend-@Ending-2)/8
00020BDC                            
00020BDC                            ;		mappings	object		subtype	frame	VRAM setting
00020BDC 2500 C098 0000 27B2        	dbug	Map_Ring,	id_Rings,	0,	0,	$27B2
00020BE4 2500 C098 0008 27B2        	dbug	Map_Ring,	id_Rings,	0,	8,	$27B2
00020BEC                            	@Endingend:
00020BEC                            
00020BEC                            	even
00020BEC                            	even
00020BEC                            		include	"_inc\LevelHeaders.asm"
00020BEC                            ; ---------------------------------------------------------------------------
00020BEC                            ; Level Headers
00020BEC                            ; ---------------------------------------------------------------------------
00020BEC                            
00020BEC                            LevelHeaders:
00020BEC                            
00020BEC                            lhead:	macro plc1,lvlgfx,plc2,sixteen,twofivesix,music,pal
00020BEC                            	dc.l (plc1<<24)+lvlgfx
00020BEC                            	dc.l (plc2<<24)+sixteen
00020BEC                            	dc.l twofivesix
00020BEC                            	dc.b 0, music, pal, pal
00020BEC                            	endm
00020BEC                            
00020BEC                            ; 1st PLC, level gfx (unused), 2nd PLC, 16x16 data, 256x256 data,
00020BEC                            ; music (unused), palette (unused), palette
00020BEC                            
00020BEC                            ;		1st PLC				2nd PLC				256x256 data			palette
00020BEC                            ;				level gfx*			16x16 data			music*
00020BEC                            
00020BEC 0000 0000 0000 0000 0000+  	lhead	plcid_GHZ,	Nem_GHZ_2nd,	plcid_GHZ2,	Blk16_GHZ,	Blk256_GHZ,	bgm_GHZ,	palid_GHZ	; Green Hill
00020BFC 0000 0000 0000 0000 0000+  	lhead	plcid_LZ,	Nem_LZ,		plcid_LZ2,	Blk16_LZ,	Blk256_LZ,	bgm_LZ,		palid_LZ	; Labyrinth
00020C0C 0000 0000 0000 0000 0000+  	lhead	plcid_MZ,	Nem_MZ,		plcid_MZ2,	Blk16_MZ,	Blk256_MZ,	bgm_MZ,		palid_MZ	; Marble
00020C1C 0000 0000 0000 0000 0000+  	lhead	plcid_SLZ,	Nem_SLZ,	plcid_SLZ2,	Blk16_SLZ,	Blk256_SLZ,	bgm_SLZ,	palid_SLZ	; Star Light
00020C2C 0000 0000 0000 0000 0000+  	lhead	plcid_SYZ,	Nem_SYZ,	plcid_SYZ2,	Blk16_SYZ,	Blk256_SYZ,	bgm_SYZ,	palid_SYZ	; Spring Yard
00020C3C 0000 0000 0000 0000 0000+  	lhead	plcid_SBZ,	Nem_SBZ,	plcid_SBZ2,	Blk16_SBZ,	Blk256_SBZ,	bgm_SBZ,	palid_SBZ1	; Scrap Brain
00020C4C 0000 0000 0000 0000 0000+  	lhead	0,		Nem_GHZ_2nd,	0,		Blk16_GHZ,	Blk256_GHZ,	bgm_SBZ,	palid_Ending	; Ending
00020C5C                            	even
00020C5C                            
00020C5C                            ;	* music and level gfx are actually set elsewhere, so these values are useless
00020C5C                            ;	* music and level gfx are actually set elsewhere, so these values are useless
00020C5C                            		include	"_inc\Pattern Load Cues.asm"
00020C5C                            ; ---------------------------------------------------------------------------
00020C5C                            ; Pattern load cues
00020C5C                            ; ---------------------------------------------------------------------------
00020C5C                            ArtLoadCues:
00020C5C                            
00020C5C 0000                       ptr_PLC_Main:		dc.w PLC_Main-ArtLoadCues
00020C5E 0000                       ptr_PLC_Main2:		dc.w PLC_Main2-ArtLoadCues
00020C60 0000                       ptr_PLC_Explode:	dc.w PLC_Explode-ArtLoadCues
00020C62 0000                       ptr_PLC_GameOver:	dc.w PLC_GameOver-ArtLoadCues
00020C64                            PLC_Levels:
00020C64 0000                       ptr_PLC_GHZ:		dc.w PLC_GHZ-ArtLoadCues
00020C66 0000                       ptr_PLC_GHZ2:		dc.w PLC_GHZ2-ArtLoadCues
00020C68 0000                       ptr_PLC_LZ:		dc.w PLC_LZ-ArtLoadCues
00020C6A 0000                       ptr_PLC_LZ2:		dc.w PLC_LZ2-ArtLoadCues
00020C6C 0000                       ptr_PLC_MZ:		dc.w PLC_MZ-ArtLoadCues
00020C6E 0000                       ptr_PLC_MZ2:		dc.w PLC_MZ2-ArtLoadCues
00020C70 0000                       ptr_PLC_SLZ:		dc.w PLC_SLZ-ArtLoadCues
00020C72 0000                       ptr_PLC_SLZ2:		dc.w PLC_SLZ2-ArtLoadCues
00020C74 0000                       ptr_PLC_SYZ:		dc.w PLC_SYZ-ArtLoadCues
00020C76 0000                       ptr_PLC_SYZ2:		dc.w PLC_SYZ2-ArtLoadCues
00020C78 0000                       ptr_PLC_SBZ:		dc.w PLC_SBZ-ArtLoadCues
00020C7A 0000                       ptr_PLC_SBZ2:		dc.w PLC_SBZ2-ArtLoadCues
00020C7C 0000                       ptr_PLC_TitleCard:	dc.w PLC_TitleCard-ArtLoadCues
00020C7E 0000                       ptr_PLC_Boss:		dc.w PLC_Boss-ArtLoadCues
00020C80 0000                       ptr_PLC_Signpost:	dc.w PLC_Signpost-ArtLoadCues
00020C82 0000                       ptr_PLC_Warp:		dc.w PLC_Warp-ArtLoadCues
00020C84 0000                       ptr_PLC_SpecialStage:	dc.w PLC_SpecialStage-ArtLoadCues
00020C86                            PLC_Animals:
00020C86 0000                       ptr_PLC_GHZAnimals:	dc.w PLC_GHZAnimals-ArtLoadCues
00020C88 0000                       ptr_PLC_LZAnimals:	dc.w PLC_LZAnimals-ArtLoadCues
00020C8A 0000                       ptr_PLC_MZAnimals:	dc.w PLC_MZAnimals-ArtLoadCues
00020C8C 0000                       ptr_PLC_SLZAnimals:	dc.w PLC_SLZAnimals-ArtLoadCues
00020C8E 0000                       ptr_PLC_SYZAnimals:	dc.w PLC_SYZAnimals-ArtLoadCues
00020C90 0000                       ptr_PLC_SBZAnimals:	dc.w PLC_SBZAnimals-ArtLoadCues
00020C92 0000                       ptr_PLC_SSResult:	dc.w PLC_SSResult-ArtLoadCues
00020C94 0000                       ptr_PLC_Ending:		dc.w PLC_Ending-ArtLoadCues
00020C96 0000                       ptr_PLC_TryAgain:	dc.w PLC_TryAgain-ArtLoadCues
00020C98 0000                       ptr_PLC_EggmanSBZ2:	dc.w PLC_EggmanSBZ2-ArtLoadCues
00020C9A 0000                       ptr_PLC_FZBoss:		dc.w PLC_FZBoss-ArtLoadCues
00020C9C 0000                       ptr_PLC_Egg:		dc.w PLC_Egg-ArtLoadCues
00020C9E                            
00020C9E                            plcm:	macro gfx,vram
00020C9E                            	dc.l gfx
00020C9E                            	dc.w vram
00020C9E                            	endm
00020C9E                            
00020C9E                            ; ---------------------------------------------------------------------------
00020C9E                            ; Pattern load cues - standard block 1
00020C9E                            ; ---------------------------------------------------------------------------
00020C9E 0000                       PLC_Main:	dc.w ((PLC_Mainend-PLC_Main-2)/6)-1
00020CA0 0000 0000 D800             		plcm	Nem_Lamp, $D800		; lamppost
00020CA6 0000 0000 D940             		plcm	Nem_Hud, $D940		; HUD
00020CAC 0000 0000 FA80             		plcm	Nem_Lives, $FA80	; lives	counter
00020CB2 0000 0000 F300             		plcm	Nem_Ring, $F300		; rings
00020CB8 0000 0000 ACA0             		plcm	Nem_Points, $ACA0 	; points from enemy
00020CBE                            	PLC_Mainend:
00020CBE                            ; ---------------------------------------------------------------------------
00020CBE                            ; Pattern load cues - standard block 2
00020CBE                            ; ---------------------------------------------------------------------------
00020CBE 0000                       PLC_Main2:	dc.w ((PLC_Main2end-PLC_Main2-2)/6)-1
00020CC0 0000 0000 D000             		plcm	Nem_Monitors, $D000	; monitors
00020CC6                            	PLC_Main2end:
00020CC6                            ; ---------------------------------------------------------------------------
00020CC6                            ; Pattern load cues - explosion
00020CC6                            ; ---------------------------------------------------------------------------
00020CC6 0000                       PLC_Explode:	dc.w ((PLC_Explodeend-PLC_Explode-2)/6)-1
00020CC8 0000 0000 B400             		plcm	Nem_Explode, $B400	; explosion
00020CCE                            	PLC_Explodeend:
00020CCE                            ; ---------------------------------------------------------------------------
00020CCE                            ; Pattern load cues - game/time	over
00020CCE                            ; ---------------------------------------------------------------------------
00020CCE 0000                       PLC_GameOver:	dc.w ((PLC_GameOverend-PLC_GameOver-2)/6)-1
00020CD0 0000 0000 ABC0             		plcm	Nem_GameOver, $ABC0	; game/time over
00020CD6                            	PLC_GameOverend:
00020CD6                            ; ---------------------------------------------------------------------------
00020CD6                            ; Pattern load cues - Green Hill
00020CD6                            ; ---------------------------------------------------------------------------
00020CD6 0000                       PLC_GHZ:	dc.w ((PLC_GHZ2-PLC_GHZ-2)/6)-1
00020CD8 0000 0000 0000             		plcm	Nem_GHZ_1st, 0		; GHZ main patterns
00020CDE 0000 0000 39A0             		plcm	Nem_GHZ_2nd, $39A0	; GHZ secondary	patterns
00020CE4 0000 0000 6B00             		plcm	Nem_Stalk, $6B00	; flower stalk
00020CEA 0000 0000 7A00             		plcm	Nem_PplRock, $7A00	; purple rock
00020CF0 0000 0000 8000             		plcm	Nem_Crabmeat, $8000	; crabmeat enemy
00020CF6 0000 0000 8880             		plcm	Nem_Mozzietron, $8880	; mozzietron enemy
00020CFC 0000 0000 8F60             		plcm	Nem_Chopper, $8F60	; chopper enemy
00020D02 0000 0000 9360             		plcm	Nem_Newtron, $9360	; newtron enemy
00020D08 0000 0000 9E00             		plcm	Nem_Motobug, $9E00	; motobug enemy
00020D0E 0000 0000 A360             		plcm	Nem_Spikes, $A360	; spikes
00020D14 0000 0000 A460             		plcm	Nem_HSpring, $A460	; horizontal spring
00020D1A 0000 0000 A660             		plcm	Nem_VSpring, $A660	; vertical spring
00020D20                            
00020D20 0000                       PLC_GHZ2:	dc.w ((PLC_GHZ2end-PLC_GHZ2-2)/6)-1
00020D22 0000 0000 7000             		plcm	Nem_Swing, $7000	; swinging platform
00020D28 0000 0000 71C0             		plcm	Nem_Bridge, $71C0	; bridge
00020D2E 0000 0000 7300             		plcm	Nem_SpikePole, $7300	; spiked pole
00020D34 0000 0000 7540             		plcm	Nem_Ball, $7540		; giant	ball
00020D3A 0000 0000 A1E0             		plcm	Nem_GhzWall1, $A1E0	; breakable wall
00020D40 0000 0000 6980             		plcm	Nem_GhzWall2, $6980	; normal wall
00020D46                            	PLC_GHZ2end:
00020D46                            ; ---------------------------------------------------------------------------
00020D46                            ; Pattern load cues - Labyrinth
00020D46                            ; ---------------------------------------------------------------------------
00020D46 0000                       PLC_LZ:		dc.w ((PLC_LZ2-PLC_LZ-2)/6)-1
00020D48 0000 0000 0000             		plcm	Nem_LZ,0		; LZ main patterns
00020D4E                            		;plcm	Nem_LzBlock1, $3C00	; block
00020D4E                            		;plcm	Nem_LzBlock2, $3E00	; blocks
00020D4E                            		;plcm	Nem_Splash, $4B20	; waterfalls and splash
00020D4E 0000 0000 6000             		plcm	Nem_Water, $6000	; water	surface
00020D54 0000 0000 6200             		plcm	Nem_LzSpikeBall, $6200	; spiked ball
00020D5A 0000 0000 6500             		plcm	Nem_FlapDoor, $6500	; flapping door
00020D60 0000 0000 6900             		plcm	Nem_Bubbles, $6900	; bubbles and numbers
00020D66 0000 0000 7780             		plcm	Nem_LzBlock3, $7780	; block
00020D6C 0000 0000 7880             		plcm	Nem_LzDoor1, $7880	; vertical door
00020D72 0000 0000 7980             		plcm	Nem_Harpoon, $7980	; harpoon
00020D78 0000 0000 94C0             		plcm	Nem_Burrobot, $94C0	; burrobot enemy
00020D7E                            
00020D7E 0000                       PLC_LZ2:	dc.w ((PLC_LZ2end-PLC_LZ2-2)/6)-1
00020D80 0000 0000 7BC0             		plcm	Nem_LzPole, $7BC0	; pole that breaks
00020D86 0000 0000 7CC0             		plcm	Nem_LzDoor2, $7CC0	; large	horizontal door
00020D8C 0000 0000 7EC0             		plcm	Nem_LzWheel, $7EC0	; wheel
00020D92 0000 0000 5D20             		plcm	Nem_Gargoyle, $5D20	; gargoyle head
00020D98 0000 0000 89E0             		plcm	Nem_LzPlatfm, $89E0	; rising platform
00020D9E 0000 0000 8CE0             		plcm	Nem_Orbinaut, $8CE0	; orbinaut enemy
00020DA4 0000 0000 90C0             		plcm	Nem_Jaws, $90C0		; jaws enemy
00020DAA 0000 0000 A1E0             		plcm	Nem_LzSwitch, $A1E0	; switch
00020DB0 0000 0000 A000             		plcm	Nem_Cork, $A000		; cork block
00020DB6 0000 0000 A360             		plcm	Nem_Spikes, $A360	; spikes
00020DBC 0000 0000 A460             		plcm	Nem_HSpring, $A460	; horizontal spring
00020DC2 0000 0000 A660             		plcm	Nem_VSpring, $A660	; vertical spring
00020DC8                            	PLC_LZ2end:
00020DC8                            ; ---------------------------------------------------------------------------
00020DC8                            ; Pattern load cues - Marble
00020DC8                            ; ---------------------------------------------------------------------------
00020DC8 0000                       PLC_MZ:		dc.w ((PLC_MZ2-PLC_MZ-2)/6)-1
00020DCA 0000 0000 0000             		plcm	Nem_MZ,0		; MZ main patterns
00020DD0 0000 0000 6040             		plcm	Nem_BallHog, $6040	; ball hog enemy
00020DD6 0000 0000 68A0             		plcm	Nem_MzFire, $68A0	; fireballs
00020DDC 0000 0000 71C0             		plcm	Nem_MzGlass, $71C0	; green	glassy block
00020DE2 0000 0000 75A0             		plcm	Nem_Cutter, $75A0	; pizza	cutter
00020DE8 0000 0000 8000             		plcm	Nem_Bomb, $8000
00020DEE 0000 0000 8880             		plcm	Nem_Buzz, $8880		; buzz bomber enemy
00020DF4 0000 0000 8FC0             		plcm	Nem_Electric, $8FC0	; electric orb
00020DFA 0000 0000 9700             		plcm	Nem_Basaran, $9700	; basaran enemy
00020E00 0000 0000 9C80             		plcm	Nem_Splats, $9C80	; Splats
00020E06                            
00020E06 0000                       PLC_MZ2:	dc.w ((PLC_MZ2end-PLC_MZ2-2)/6)-1
00020E08 0000 0000 7000             		plcm	Nem_Swing, $7000	; swinging platform
00020E0E 0000 0000 5D40             		plcm	Nem_SbzDoor1, $5D40	; door
00020E14                            		;plcm	Nem_MzSwitch, $A260	; switch
00020E14 0000 0000 A360             		plcm	Nem_Spikes, $A360	; spikes
00020E1A 0000 0000 A460             		plcm	Nem_HSpring, $A460	; horizontal spring
00020E20 0000 0000 A660             		plcm	Nem_VSpring, $A660	; vertical spring
00020E26 0000 0000 5700             		plcm	Nem_MzBlock, $5700	; green	stone block
00020E2C 0000 0000 A260             		plcm	Nem_SlzWall, $A260	; breakable wall
00020E32                            	PLC_MZ2end:
00020E32                            ; ---------------------------------------------------------------------------
00020E32                            ; Pattern load cues - Star Light
00020E32                            ; ---------------------------------------------------------------------------
00020E32 0000                       PLC_SLZ:	dc.w ((PLC_SLZ2-PLC_SLZ-2)/6)-1
00020E34 0000 0000 0000             		plcm	Nem_SLZ,0		; SLZ main patterns
00020E3A 0000 0000 8000             		plcm	Nem_Bomb, $8000		; bomb enemy
00020E40 0000 0000 8520             		plcm	Nem_Orbinaut, $8520	; orbinaut enemy
00020E46 0000 0000 9C80             		plcm	Nem_Splats, $9C80	; Splats
00020E4C 0000 0000 9000             		plcm	Nem_MzFire, $9000	; fireballs
00020E52 0000 0000 9C00             		plcm	Nem_SlzBlock, $9C00	; block
00020E58 0000 0000 A260             		plcm	Nem_SlzWall, $A260	; breakable wall
00020E5E 0000 0000 A360             		plcm	Nem_Spikes, $A360	; spikes
00020E64 0000 0000 A460             		plcm	Nem_HSpring, $A460	; horizontal spring
00020E6A 0000 0000 A660             		plcm	Nem_VSpring, $A660	; vertical spring
00020E70                            
00020E70 0000                       PLC_SLZ2:	dc.w ((PLC_SLZ2end-PLC_SLZ2-2)/6)-1
00020E72 0000 0000 6E80             		plcm	Nem_Seesaw, $6E80	; seesaw
00020E78 0000 0000 7400             		plcm	Nem_Fan, $7400		; fan
00020E7E 0000 0000 7980             		plcm	Nem_Pylon, $7980	; foreground pylon
00020E84 0000 0000 7B80             		plcm	Nem_SlzSwing, $7B80	; swinging platform
00020E8A 0000 0000 9B00             		plcm	Nem_SlzCannon, $9B00	; fireball launcher
00020E90 0000 0000 9E00             		plcm	Nem_SlzSpike, $9E00	; spikeball
00020E96                            	PLC_SLZ2end:
00020E96                            ; ---------------------------------------------------------------------------
00020E96                            ; Pattern load cues - Spring Yard
00020E96                            ; ---------------------------------------------------------------------------
00020E96 0000                       PLC_SYZ:	dc.w ((PLC_SYZ2-PLC_SYZ-2)/6)-1
00020E98 0000 0000 0000             		plcm	Nem_SYZ,0		; SYZ main patterns
00020E9E                            		;plcm	Nem_Stomper, $5800	; moving platform and stomper
00020E9E                            		;plcm	Nem_SbzDoor1, $5D40	; door
00020E9E 0000 0000 6900             		plcm	Nem_Bubbles, $6900	; bubbles and numbers
00020EA4 0000 0000 8880             		plcm	Nem_Buzz, $8880		; buzz bomber enemy
00020EAA 0000 0000 8F60             		plcm	Nem_Yadrin, $8F60	; yadrin enemy
00020EB0 0000 0000 9700             		plcm	Nem_Roller, $9700	; roller enemy
00020EB6 0000 0000 7B20             		plcm	Nem_FlamePipe, $7B20	; flaming pipe
00020EBC 0000 0000 7EA0             		plcm	Nem_SbzFloor, $7EA0	; collapsing floor
00020EC2                            		;plcm	Nem_SbzBlock, $9860	; vanishing block
00020EC2                            
00020EC2 0000                       PLC_SYZ2:	dc.w ((PLC_SYZ2end-PLC_SYZ2-2)/6)-1
00020EC4                            		;plcm	Nem_Cater, $5600	; caterkiller enemy
00020EC4 0000 0000 7000             		plcm	Nem_Bumper, $7000	; bumper
00020ECA 0000 0000 72C0             		plcm	Nem_SyzSpike1, $72C0	; large	spikeball
00020ED0 0000 0000 7740             		plcm	Nem_SyzSpike2, $7740	; small	spikeball
00020ED6                            		;plcm	Nem_TrapDoor, $9240	; trapdoor
00020ED6 0000 0000 7F20             		plcm	Nem_SbzFloor, $7F20	; collapsing floor
00020EDC                            		;plcm	Nem_SpinPform, $9BE0	; small	spinning platform
00020EDC 0000 0000 A1E0             		plcm	Nem_LzSwitch, $A1E0	; switch
00020EE2 0000 0000 A360             		plcm	Nem_Spikes, $A360	; spikes
00020EE8 0000 0000 A460             		plcm	Nem_HSpring, $A460	; horizontal spring
00020EEE 0000 0000 A660             		plcm	Nem_VSpring, $A660	; vertical spring
00020EF4                            	PLC_SYZ2end:
00020EF4                            ; ---------------------------------------------------------------------------
00020EF4                            ; Pattern load cues - Scrap Brain
00020EF4                            ; ---------------------------------------------------------------------------
00020EF4 0000                       PLC_SBZ:	dc.w ((PLC_SBZ2-PLC_SBZ-2)/6)-1
00020EF6 0000 0000 0000             		plcm	Nem_SBZ,0		; SBZ main patterns
00020EFC 0000 0000 4B20             		plcm	Nem_Splash, $4B20	; waterfalls and splash
00020F02                            		;plcm	Nem_Stomper, $5800	; moving platform and stomper
00020F02                            		;plcm	Nem_SbzDoor1, $5D00	; door
00020F02                            		;plcm	Nem_Girder, $5E00	; girder
00020F02 0000 0000 6880             		plcm	Nem_SbzWheel1, $6880	; spot on large	wheel
00020F08 0000 0000 6900             		plcm	Nem_Bubbles, $6900	; bubbles and numbers
00020F0E                            		;plcm	Nem_SbzWheel2, $6900	; wheel	that grabs Sonic
00020F0E 0000 0000 7220             		plcm	Nem_SyzSpike1, $7220	; large	spikeball
00020F14 0000 0000 7B20             		plcm	Nem_FlamePipe, $7B20	; flaming pipe
00020F1A 0000 0000 7EA0             		plcm	Nem_SbzFloor, $7EA0	; collapsing floor
00020F20 0000 0000 9860             		plcm	Nem_SbzBlock, $9860	; vanishing block
00020F26                            
00020F26 0000                       PLC_SBZ2:	dc.w ((PLC_SBZ2end-PLC_SBZ2-2)/6)-1
00020F28                            		;plcm	Nem_Cater, $5600	; caterkiller enemy
00020F28 0000 0000 8000             		plcm	Nem_Bomb, $8000		; bomb enemy
00020F2E 0000 0000 8C00             		plcm	Nem_SlideFloor, $8C00	; floor	that slides away
00020F34                            		;plcm	Nem_SbzDoor2, $8DE0	; horizontal door
00020F34 0000 0000 8FC0             		plcm	Nem_Electric, $8FC0	; electric orb
00020F3A 0000 0000 9240             		plcm	Nem_TrapDoor, $9240	; trapdoor
00020F40 0000 0000 7F20             		plcm	Nem_SbzFloor, $7F20	; collapsing floor
00020F46 0000 0000 9BE0             		plcm	Nem_SpinPform, $9BE0	; small	spinning platform
00020F4C 0000 0000 A1E0             		plcm	Nem_LzSwitch, $A1E0	; switch
00020F52 0000 0000 A360             		plcm	Nem_Spikes, $A360	; spikes
00020F58 0000 0000 A460             		plcm	Nem_HSpring, $A460	; horizontal spring
00020F5E 0000 0000 A660             		plcm	Nem_VSpring, $A660	; vertical spring
00020F64                            	PLC_SBZ2end:
00020F64                            ; ---------------------------------------------------------------------------
00020F64                            ; Pattern load cues - title card
00020F64                            ; ---------------------------------------------------------------------------
00020F64 0000                       PLC_TitleCard:	dc.w ((PLC_TitleCardend-PLC_TitleCard-2)/6)-1
00020F66 0000 0000 B000             		plcm	Nem_TitleCard, $B000
00020F6C                            	PLC_TitleCardend:
00020F6C                            ; ---------------------------------------------------------------------------
00020F6C                            ; Pattern load cues - act 3 boss
00020F6C                            ; ---------------------------------------------------------------------------
00020F6C 0000                       PLC_Boss:	dc.w ((PLC_Bossend-PLC_Boss-2)/6)-1
00020F6E 0000 0000 8000             		plcm	Nem_Eggman, $8000	; Eggman main patterns
00020F74 0000 0000 8D80             		plcm	Nem_Weapons, $8D80	; Eggman's weapons
00020F7A 0000 0000 93A0             		plcm	Nem_Prison, $93A0	; prison capsule
00020F80 0000 0000 A300             		plcm	Nem_Bomb, $A300		; bomb enemy ((gets overwritten)
00020F86 0000 0000 A300             		plcm	Nem_SlzSpike, $A300	; spikeball ((SLZ boss)
00020F8C 0000 0000 A540             		plcm	Nem_Exhaust, $A540	; exhaust flame
00020F92 0000 0000 D000             		plcm	Nem_SignPost, $D000	; signpost
00020F98                            	PLC_Bossend:
00020F98                            ; ---------------------------------------------------------------------------
00020F98                            ; Pattern load cues - act 1/2 signpost
00020F98                            ; ---------------------------------------------------------------------------
00020F98 0000                       PLC_Signpost:	dc.w ((PLC_Signpostend-PLC_Signpost-2)/6)-1
00020F9A 0000 0000 D000             		plcm	Nem_SignPost, $D000	; signpost
00020FA0 0000 0000 96C0             		plcm	Nem_Bonus, $96C0	; hidden bonus points
00020FA6 0000 0000 8C40             		plcm	Nem_BigFlash, $8C40	; giant	ring flash effect
00020FAC                            		;plcm	Nem_SSEmerald, $EE00	; emeralds
00020FAC                            	PLC_Signpostend:
00020FAC                            ; ---------------------------------------------------------------------------
00020FAC                            ; Pattern load cues - beta special stage warp effect
00020FAC                            ; ---------------------------------------------------------------------------
00020FAC                            PLC_Warp:
00020FAC                            	PLC_Warpend:
00020FAC                            ; ---------------------------------------------------------------------------
00020FAC                            ; Pattern load cues - special stage
00020FAC                            ; ---------------------------------------------------------------------------
00020FAC 0000                       PLC_SpecialStage:	dc.w ((PLC_SpeStageend-PLC_SpecialStage-2)/6)-1
00020FAE 0000 0000 0000             		plcm	Nem_SSBgCloud, 0	; bubble and cloud background
00020FB4 0000 0000 0A20             		plcm	Nem_SSBgFish, $A20	; bird and fish	background
00020FBA 0000 0000 2840             		plcm	Nem_SSWalls, $2840	; walls
00020FC0 0000 0000 4760             		plcm	Nem_Bumper, $4760	; bumper
00020FC6 0000 0000 4A20             		plcm	Nem_SSGOAL, $4A20	; GOAL block
00020FCC 0000 0000 4C60             		plcm	Nem_SSUpDown, $4C60	; UP and DOWN blocks
00020FD2 0000 0000 5E00             		plcm	Nem_SSRBlock, $5E00	; R block
00020FD8 0000 0000 6E00             		plcm	Nem_SS1UpBlock, $6E00	; 1UP block
00020FDE 0000 0000 7E00             		plcm	Nem_SSEmStars, $7E00	; emerald collection stars
00020FE4 0000 0000 8E00             		plcm	Nem_SSRedWhite, $8E00	; red and white	block
00020FEA 0000 0000 9E00             		plcm	Nem_SSGhost, $9E00	; ghost	block
00020FF0 0000 0000 AE00             		plcm	Nem_SSWBlock, $AE00	; W block
00020FF6 0000 0000 BE00             		plcm	Nem_SSGlass, $BE00	; glass	block
00020FFC 0000 0000 EE00             		plcm	Nem_SSEmerald, $EE00	; emeralds
00021002                            		;plcm	Nem_SSZone1, $F2E0	; ZONE 1 block
00021002                            		;plcm	Nem_SSZone2, $F400	; ZONE 2 block
00021002                            		;plcm	Nem_SSZone3, $F520	; ZONE 3 block
00021002                            	PLC_SpeStageend:
00021002                            		;plcm	Nem_SSZone4, $F2E0	; ZONE 4 block
00021002                            		;plcm	Nem_SSZone5, $F400	; ZONE 5 block
00021002                            		;plcm	Nem_SSZone6, $F520	; ZONE 6 block
00021002                            ; ---------------------------------------------------------------------------
00021002                            ; Pattern load cues - GHZ animals
00021002                            ; ---------------------------------------------------------------------------
00021002 0000                       PLC_GHZAnimals:	dc.w ((PLC_GHZAnimalsend-PLC_GHZAnimals-2)/6)-1
00021004 0000 0000 B000             		plcm	Nem_Rabbit, $B000	; rabbit
0002100A 0000 0000 B240             		plcm	Nem_Flicky, $B240	; flicky
00021010                            	PLC_GHZAnimalsend:
00021010                            ; ---------------------------------------------------------------------------
00021010                            ; Pattern load cues - LZ animals
00021010                            ; ---------------------------------------------------------------------------
00021010 0000                       PLC_LZAnimals:	dc.w ((PLC_LZAnimalsend-PLC_LZAnimals-2)/6)-1
00021012 0000 0000 B000             		plcm	Nem_BlackBird, $B000	; blackbird
00021018 0000 0000 B240             		plcm	Nem_Seal, $B240		; seal
0002101E                            	PLC_LZAnimalsend:
0002101E                            ; ---------------------------------------------------------------------------
0002101E                            ; Pattern load cues - MZ animals
0002101E                            ; ---------------------------------------------------------------------------
0002101E 0000                       PLC_MZAnimals:	dc.w ((PLC_MZAnimalsend-PLC_MZAnimals-2)/6)-1
00021020 0000 0000 B000             		plcm	Nem_Squirrel, $B000	; squirrel
00021026 0000 0000 B240             		plcm	Nem_Seal, $B240		; seal
0002102C                            	PLC_MZAnimalsend:
0002102C                            ; ---------------------------------------------------------------------------
0002102C                            ; Pattern load cues - SLZ animals
0002102C                            ; ---------------------------------------------------------------------------
0002102C 0000                       PLC_SLZAnimals:	dc.w ((PLC_SLZAnimalsend-PLC_SLZAnimals-2)/6)-1
0002102E 0000 0000 B000             		plcm	Nem_Pig, $B000		; pig
00021034 0000 0000 B240             		plcm	Nem_Flicky, $B240	; flicky
0002103A                            	PLC_SLZAnimalsend:
0002103A                            ; ---------------------------------------------------------------------------
0002103A                            ; Pattern load cues - SYZ animals
0002103A                            ; ---------------------------------------------------------------------------
0002103A 0000                       PLC_SYZAnimals:	dc.w ((PLC_SYZAnimalsend-PLC_SYZAnimals-2)/6)-1
0002103C 0000 0000 B000             		plcm	Nem_Pig, $B000		; pig
00021042 0000 0000 B240             		plcm	Nem_Chicken, $B240	; chicken
00021048                            	PLC_SYZAnimalsend:
00021048                            ; ---------------------------------------------------------------------------
00021048                            ; Pattern load cues - SBZ animals
00021048                            ; ---------------------------------------------------------------------------
00021048 0000                       PLC_SBZAnimals:	dc.w ((PLC_SBZAnimalsend-PLC_SBZAnimals-2)/6)-1
0002104A 0000 0000 B000             		plcm	Nem_Rabbit, $B000		; rabbit
00021050 0000 0000 B240             		plcm	Nem_Chicken, $B240	; chicken
00021056                            	PLC_SBZAnimalsend:
00021056                            ; ---------------------------------------------------------------------------
00021056                            ; Pattern load cues - special stage results screen
00021056                            ; ---------------------------------------------------------------------------
00021056 0000                       PLC_SSResult:dc.w ((PLC_SpeStResultend-PLC_SSResult-2)/6)-1
00021058 0000 0000 A820             		plcm	Nem_ResultEm, $A820	; emeralds
0002105E 0000 0000 AA20             		plcm	Nem_MiniSonic, $AA20	; mini Sonic
00021064                            	PLC_SpeStResultend:
00021064                            ; ---------------------------------------------------------------------------
00021064                            ; Pattern load cues - ending sequence
00021064                            ; ---------------------------------------------------------------------------
00021064 0000                       PLC_Ending:	dc.w ((PLC_Endingend-PLC_Ending-2)/6)-1
00021066 0000 0000 0000             		plcm	Nem_GHZ_1st,0		; GHZ main patterns
0002106C 0000 0000 39A0             		plcm	Nem_GHZ_2nd, $39A0	; GHZ secondary	patterns
00021072 0000 0000 6B00             		plcm	Nem_Stalk, $6B00	; flower stalk
00021078                            		;plcm	Nem_EndFlower, $7400	; flowers
00021078 0000 0000 78A0             		plcm	Nem_EndEm, $78A0	; emeralds
0002107E 0000 0000 7C20             		plcm	Nem_EndSonic, $7C20	; Sonic
00021084 0000 0000 AA60             		plcm	Nem_Rabbit, $AA60	; rabbit
0002108A 0000 0000 ACA0             		plcm	Nem_Chicken, $ACA0	; chicken
00021090 0000 0000 AE60             		plcm	Nem_BlackBird, $AE60	; blackbird
00021096 0000 0000 B0A0             		plcm	Nem_Seal, $B0A0		; seal
0002109C 0000 0000 B260             		plcm	Nem_Pig, $B260		; pig
000210A2 0000 0000 B4A0             		plcm	Nem_Flicky, $B4A0	; flicky
000210A8 0000 0000 B660             		plcm	Nem_Squirrel, $B660	; squirrel
000210AE 0000 0000 B8A0             		plcm	Nem_EndStH, $B8A0	; "SONIC THE HEDGEHOG"
000210B4                            	PLC_Endingend:
000210B4                            ; ---------------------------------------------------------------------------
000210B4                            ; Pattern load cues - "TRY AGAIN" and "END" screens
000210B4                            ; ---------------------------------------------------------------------------
000210B4 0000                       PLC_TryAgain:	dc.w ((PLC_TryAgainend-PLC_TryAgain-2)/6)-1
000210B6 0000 0000 78A0             		plcm	Nem_EndEm, $78A0	; emeralds
000210BC 0000 0000 7C20             		plcm	Nem_TryAgain, $7C20	; Eggman
000210C2 0000 0000 B400             		plcm	Nem_CreditText, $B400	; credits alphabet
000210C8                            	PLC_TryAgainend:
000210C8                            ; ---------------------------------------------------------------------------
000210C8                            ; Pattern load cues - Eggman on SBZ 2
000210C8                            ; ---------------------------------------------------------------------------
000210C8 0000                       PLC_EggmanSBZ2:	dc.w ((PLC_EggmanSBZ2end-PLC_EggmanSBZ2-2)/6)-1
000210CA 0000 0000 A300             		plcm	Nem_SbzBlock, $A300	; block
000210D0 0000 0000 8000             		plcm	Nem_Sbz2Eggman, $8000	; Eggman
000210D6 0000 0000 9400             		plcm	Nem_LzSwitch, $9400	; switch
000210DC                            	PLC_EggmanSBZ2end:
000210DC                            ; ---------------------------------------------------------------------------
000210DC                            ; Pattern load cues - final boss
000210DC                            ; ---------------------------------------------------------------------------
000210DC 0000                       PLC_FZBoss:	dc.w ((PLC_FZBossend-PLC_FZBoss-2)/6)-1
000210DE 0000 0000 7400             		plcm	Nem_FzEggman, $7400	; Eggman after boss
000210E4 0000 0000 6000             		plcm	Nem_FzBoss, $6000	; FZ boss
000210EA 0000 0000 8000             		plcm	Nem_Eggman, $8000	; Eggman main patterns
000210F0 0000 0000 8E00             		plcm	Nem_Sbz2Eggman, $8E00	; Eggman without ship
000210F6 0000 0000 A540             		plcm	Nem_Exhaust, $A540	; exhaust flame
000210FC                            	PLC_FZBossend:
000210FC                            ; ---------------------------------------------------------------------------
000210FC                            ; Pattern load cues - Eggman
000210FC                            ; ---------------------------------------------------------------------------
000210FC 0006                       PLC_Egg:	dc.w ((PLC_Bossend-PLC_Boss-2)/6)-1
000210FE 0000 0000 8000             		plcm	Nem_Eggman, $8000	; Eggman main patterns
00021104 0000 0000 8D80             		plcm	Nem_Weapons, $8D80	; Eggman's weapons
0002110A 0000 0000 93A0             		plcm	Nem_Prison, $93A0	; prison capsule
00021110 0000 0000 A360             		plcm	Nem_Spikes, $A360	; spikes
00021116 0000 0000 A460             		plcm	Nem_HSpring, $A460	; horizontal spring
0002111C 0000 0000 A540             		plcm	Nem_Exhaust, $A540	; exhaust flame
00021122                            	PLC_Eggend:
00021122                            		even
00021122                            ; ---------------------------------------------------------------------------
00021122                            ; Pattern load cue IDs
00021122                            ; ---------------------------------------------------------------------------
00021122 =00000000                  plcid_Main:		equ (ptr_PLC_Main-ArtLoadCues)/2	; 0
00021122 =00000001                  plcid_Main2:		equ (ptr_PLC_Main2-ArtLoadCues)/2	; 1
00021122 =00000002                  plcid_Explode:		equ (ptr_PLC_Explode-ArtLoadCues)/2	; 2
00021122 =00000003                  plcid_GameOver:		equ (ptr_PLC_GameOver-ArtLoadCues)/2	; 3
00021122 =00000004                  plcid_GHZ:		equ (ptr_PLC_GHZ-ArtLoadCues)/2		; 4
00021122 =00000005                  plcid_GHZ2:		equ (ptr_PLC_GHZ2-ArtLoadCues)/2	; 5
00021122 =00000006                  plcid_LZ:		equ (ptr_PLC_LZ-ArtLoadCues)/2		; 6
00021122 =00000007                  plcid_LZ2:		equ (ptr_PLC_LZ2-ArtLoadCues)/2		; 7
00021122 =00000008                  plcid_MZ:		equ (ptr_PLC_MZ-ArtLoadCues)/2		; 8
00021122 =00000009                  plcid_MZ2:		equ (ptr_PLC_MZ2-ArtLoadCues)/2		; 9
00021122 =0000000A                  plcid_SLZ:		equ (ptr_PLC_SLZ-ArtLoadCues)/2		; $A
00021122 =0000000B                  plcid_SLZ2:		equ (ptr_PLC_SLZ2-ArtLoadCues)/2	; $B
00021122 =0000000C                  plcid_SYZ:		equ (ptr_PLC_SYZ-ArtLoadCues)/2		; $C
00021122 =0000000D                  plcid_SYZ2:		equ (ptr_PLC_SYZ2-ArtLoadCues)/2	; $D
00021122 =0000000E                  plcid_SBZ:		equ (ptr_PLC_SBZ-ArtLoadCues)/2		; $E
00021122 =0000000F                  plcid_SBZ2:		equ (ptr_PLC_SBZ2-ArtLoadCues)/2	; $F
00021122 =00000010                  plcid_TitleCard:	equ (ptr_PLC_TitleCard-ArtLoadCues)/2	; $10
00021122 =00000011                  plcid_Boss:		equ (ptr_PLC_Boss-ArtLoadCues)/2	; $11
00021122 =00000012                  plcid_Signpost:		equ (ptr_PLC_Signpost-ArtLoadCues)/2	; $12
00021122 =00000013                  plcid_Warp:		equ (ptr_PLC_Warp-ArtLoadCues)/2	; $13
00021122 =00000014                  plcid_SpecialStage:	equ (ptr_PLC_SpecialStage-ArtLoadCues)/2 ; $14
00021122 =00000015                  plcid_GHZAnimals:	equ (ptr_PLC_GHZAnimals-ArtLoadCues)/2	; $15
00021122 =00000016                  plcid_LZAnimals:	equ (ptr_PLC_LZAnimals-ArtLoadCues)/2	; $16
00021122 =00000017                  plcid_MZAnimals:	equ (ptr_PLC_MZAnimals-ArtLoadCues)/2	; $17
00021122 =00000018                  plcid_SLZAnimals:	equ (ptr_PLC_SLZAnimals-ArtLoadCues)/2	; $18
00021122 =00000019                  plcid_SYZAnimals:	equ (ptr_PLC_SYZAnimals-ArtLoadCues)/2	; $19
00021122 =0000001A                  plcid_SBZAnimals:	equ (ptr_PLC_SBZAnimals-ArtLoadCues)/2	; $1A
00021122 =0000001B                  plcid_SSResult:		equ (ptr_PLC_SSResult-ArtLoadCues)/2	; $1B
00021122 =0000001C                  plcid_Ending:		equ (ptr_PLC_Ending-ArtLoadCues)/2	; $1C
00021122 =0000001D                  plcid_TryAgain:		equ (ptr_PLC_TryAgain-ArtLoadCues)/2	; $1D
00021122 =0000001E                  plcid_EggmanSBZ2:	equ (ptr_PLC_EggmanSBZ2-ArtLoadCues)/2	; $1E
00021122 =0000001F                  plcid_FZBoss:		equ (ptr_PLC_FZBoss-ArtLoadCues)/2	; $1F
00021122 =00000020                  plcid_Egg:		equ (ptr_PLC_Egg-ArtLoadCues)/2	; $11
00021122 =00000020                  plcid_Egg:		equ (ptr_PLC_Egg-ArtLoadCues)/2	; $11
00021122                            
00021200                            			dcb.b	$300,$FF
00021500                            	Nem_SegaLogo:	incbin	"artnem\Sega Logo (JP1).bin" ; large Sega logo
00021970                            			even
00021970                            	Eni_SegaLogo:	incbin	"tilemaps\Sega Logo (JP1).bin" ; large Sega logo (mappings)
00021A6C                            			even
00021A6C                            Eni_Title:	incbin	"tilemaps\Title Screen.bin" ; title screen foreground (mappings)
00021B4C                            		even
00021B4C                            Nem_TitleFg:	incbin	"artnem\Title Screen Foreground.bin"
00022FB8                            		even
00022FB8                            Nem_TitleSonic:	incbin	"artnem\Title Screen Sonic.bin"
00024A52                            		even
00024A52                            Nem_TitleTM:	incbin	"artnem\Title Screen TM.bin"
00024A86                            		even
00024A86                            Nem_TitleMenu:   incbin   "artnem\titlemenu.bin"  
00024CB6                            		even		
00024CB6                            Eni_JapNames:	incbin	"tilemaps\Hidden Japanese Credits.bin" ; Japanese credits (mappings)
00024D74                            		even
00024D74                            Nem_JapNames:	incbin	"artnem\Hidden Japanese Credits.bin"
0002521C                            		even
0002521C                            
0002521C                            Map_Sonic:	include	"_maps\Sonic.asm"
0002521C                            ; --------------------------------------------------------------------------------
0002521C                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0002521C                            ; --------------------------------------------------------------------------------
0002521C                            
0002521C                            SME_Lx_Kl:	
0002521C 0000 0000                  		dc.w SME_Lx_Kl_142-SME_Lx_Kl, SME_Lx_Kl_143-SME_Lx_Kl	
00025220 0000 0000                  		dc.w SME_Lx_Kl_158-SME_Lx_Kl, SME_Lx_Kl_186-SME_Lx_Kl	
00025224 0000 0000                  		dc.w SME_Lx_Kl_1B9-SME_Lx_Kl, SME_Lx_Kl_1CE-SME_Lx_Kl	
00025228 0000 0000                  		dc.w SME_Lx_Kl_1DE-SME_Lx_Kl, SME_Lx_Kl_1EE-SME_Lx_Kl	
0002522C 0000 0000                  		dc.w SME_Lx_Kl_203-SME_Lx_Kl, SME_Lx_Kl_20E-SME_Lx_Kl	
00025230 0000 0000                  		dc.w SME_Lx_Kl_21E-SME_Lx_Kl, SME_Lx_Kl_22E-SME_Lx_Kl	
00025234 0000 0000                  		dc.w SME_Lx_Kl_23E-SME_Lx_Kl, SME_Lx_Kl_253-SME_Lx_Kl	
00025238 0000 0000                  		dc.w SME_Lx_Kl_263-SME_Lx_Kl, SME_Lx_Kl_287-SME_Lx_Kl	
0002523C 0000 0000                  		dc.w SME_Lx_Kl_2A1-SME_Lx_Kl, SME_Lx_Kl_2AC-SME_Lx_Kl	
00025240 0000 0000                  		dc.w SME_Lx_Kl_2BC-SME_Lx_Kl, SME_Lx_Kl_2D1-SME_Lx_Kl	
00025244 0000 0000                  		dc.w SME_Lx_Kl_2DC-SME_Lx_Kl, SME_Lx_Kl_2EC-SME_Lx_Kl	
00025248 0000 0000                  		dc.w SME_Lx_Kl_306-SME_Lx_Kl, SME_Lx_Kl_320-SME_Lx_Kl	
0002524C 0000 0000                  		dc.w SME_Lx_Kl_33F-SME_Lx_Kl, SME_Lx_Kl_354-SME_Lx_Kl	
00025250 0000 0000                  		dc.w SME_Lx_Kl_364-SME_Lx_Kl, SME_Lx_Kl_37E-SME_Lx_Kl	
00025254 0000 0000                  		dc.w SME_Lx_Kl_393-SME_Lx_Kl, SME_Lx_Kl_3A3-SME_Lx_Kl	
00025258 0000 0000                  		dc.w SME_Lx_Kl_3BD-SME_Lx_Kl, SME_Lx_Kl_3D2-SME_Lx_Kl	
0002525C 0000 0000                  		dc.w SME_Lx_Kl_3DD-SME_Lx_Kl, SME_Lx_Kl_3E8-SME_Lx_Kl	
00025260 0000 0000                  		dc.w SME_Lx_Kl_402-SME_Lx_Kl, SME_Lx_Kl_417-SME_Lx_Kl	
00025264 0000 0000                  		dc.w SME_Lx_Kl_422-SME_Lx_Kl, SME_Lx_Kl_432-SME_Lx_Kl	
00025268 0000 0000                  		dc.w SME_Lx_Kl_442-SME_Lx_Kl, SME_Lx_Kl_461-SME_Lx_Kl	
0002526C 0000 0000                  		dc.w SME_Lx_Kl_480-SME_Lx_Kl, SME_Lx_Kl_495-SME_Lx_Kl	
00025270 0000 0000                  		dc.w SME_Lx_Kl_4A5-SME_Lx_Kl, SME_Lx_Kl_4BF-SME_Lx_Kl	
00025274 0000 0000                  		dc.w SME_Lx_Kl_4D4-SME_Lx_Kl, SME_Lx_Kl_4E4-SME_Lx_Kl	
00025278 0000 0000                  		dc.w SME_Lx_Kl_4FE-SME_Lx_Kl, SME_Lx_Kl_509-SME_Lx_Kl	
0002527C 0000 0000                  		dc.w SME_Lx_Kl_514-SME_Lx_Kl, SME_Lx_Kl_51F-SME_Lx_Kl	
00025280 0000 0000                  		dc.w SME_Lx_Kl_52A-SME_Lx_Kl, SME_Lx_Kl_535-SME_Lx_Kl	
00025284 0000 0000                  		dc.w SME_Lx_Kl_540-SME_Lx_Kl, SME_Lx_Kl_54B-SME_Lx_Kl	
00025288 0000 0000                  		dc.w SME_Lx_Kl_556-SME_Lx_Kl, SME_Lx_Kl_56B-SME_Lx_Kl	
0002528C 0000 0000                  		dc.w SME_Lx_Kl_57B-SME_Lx_Kl, SME_Lx_Kl_58B-SME_Lx_Kl	
00025290 0000 0000                  		dc.w SME_Lx_Kl_59B-SME_Lx_Kl, SME_Lx_Kl_5B0-SME_Lx_Kl	
00025294 0000 0000                  		dc.w SME_Lx_Kl_5C0-SME_Lx_Kl, SME_Lx_Kl_5D0-SME_Lx_Kl	
00025298 0000 0000                  		dc.w SME_Lx_Kl_5E0-SME_Lx_Kl, SME_Lx_Kl_5EB-SME_Lx_Kl	
0002529C 0000 0000                  		dc.w SME_Lx_Kl_5F6-SME_Lx_Kl, SME_Lx_Kl_601-SME_Lx_Kl	
000252A0 0000 0000                  		dc.w SME_Lx_Kl_60C-SME_Lx_Kl, SME_Lx_Kl_617-SME_Lx_Kl	
000252A4 0000 0000                  		dc.w SME_Lx_Kl_622-SME_Lx_Kl, SME_Lx_Kl_62D-SME_Lx_Kl	
000252A8 0000 0000                  		dc.w SME_Lx_Kl_638-SME_Lx_Kl, SME_Lx_Kl_64D-SME_Lx_Kl	
000252AC 0000 0000                  		dc.w SME_Lx_Kl_65D-SME_Lx_Kl, SME_Lx_Kl_668-SME_Lx_Kl	
000252B0 0000 0000                  		dc.w SME_Lx_Kl_678-SME_Lx_Kl, SME_Lx_Kl_68D-SME_Lx_Kl	
000252B4 0000 0000                  		dc.w SME_Lx_Kl_69D-SME_Lx_Kl, SME_Lx_Kl_6A8-SME_Lx_Kl	
000252B8 0000 0000                  		dc.w SME_Lx_Kl_6B8-SME_Lx_Kl, SME_Lx_Kl_6C8-SME_Lx_Kl	
000252BC 0000 0000                  		dc.w SME_Lx_Kl_6D8-SME_Lx_Kl, SME_Lx_Kl_706-SME_Lx_Kl	
000252C0 0000 0000                  		dc.w SME_Lx_Kl_734-SME_Lx_Kl, SME_Lx_Kl_744-SME_Lx_Kl	
000252C4 0000 0000                  		dc.w SME_Lx_Kl_754-SME_Lx_Kl, SME_Lx_Kl_764-SME_Lx_Kl	
000252C8 0000 0000                  		dc.w SME_Lx_Kl_77E-SME_Lx_Kl, SME_Lx_Kl_78E-SME_Lx_Kl	
000252CC 0000 0000                  		dc.w SME_Lx_Kl_79E-SME_Lx_Kl, SME_Lx_Kl_7B8-SME_Lx_Kl	
000252D0 0000 0000                  		dc.w SME_Lx_Kl_7D2-SME_Lx_Kl, SME_Lx_Kl_7E7-SME_Lx_Kl	
000252D4 0000 0000                  		dc.w SME_Lx_Kl_7FC-SME_Lx_Kl, SME_Lx_Kl_811-SME_Lx_Kl	
000252D8 0000 0000                  		dc.w SME_Lx_Kl_826-SME_Lx_Kl, SME_Lx_Kl_82C-SME_Lx_Kl	
000252DC 0000 0000                  		dc.w SME_Lx_Kl_832-SME_Lx_Kl, SME_Lx_Kl_838-SME_Lx_Kl	
000252E0 0000 0000                  		dc.w SME_Lx_Kl_83E-SME_Lx_Kl, SME_Lx_Kl_844-SME_Lx_Kl	
000252E4 0000 0000                  		dc.w SME_Lx_Kl_84A-SME_Lx_Kl, SME_Lx_Kl_850-SME_Lx_Kl	
000252E8 0000 0000                  		dc.w SME_Lx_Kl_860-SME_Lx_Kl, SME_Lx_Kl_866-SME_Lx_Kl	
000252EC 0000 0000                  		dc.w SME_Lx_Kl_871-SME_Lx_Kl, SME_Lx_Kl_877-SME_Lx_Kl	
000252F0 0000 0000                  		dc.w SME_Lx_Kl_882-SME_Lx_Kl, SME_Lx_Kl_888-SME_Lx_Kl	
000252F4 0000 0000                  		dc.w SME_Lx_Kl_89D-SME_Lx_Kl, SME_Lx_Kl_8C1-SME_Lx_Kl	
000252F8 0000 0000                  		dc.w SME_Lx_Kl_8DB-SME_Lx_Kl, SME_Lx_Kl_8EB-SME_Lx_Kl	
000252FC 0000 0000                  		dc.w SME_Lx_Kl_8F6-SME_Lx_Kl, SME_Lx_Kl_90B-SME_Lx_Kl	
00025300 0000 0000                  		dc.w SME_Lx_Kl_920-SME_Lx_Kl, SME_Lx_Kl_935-SME_Lx_Kl	
00025304 0000 0000                  		dc.w SME_Lx_Kl_963-SME_Lx_Kl, SME_Lx_Kl_973-SME_Lx_Kl	
00025308 0000 0000                  		dc.w SME_Lx_Kl_983-SME_Lx_Kl, SME_Lx_Kl_98E-SME_Lx_Kl	
0002530C 0000 0000                  		dc.w SME_Lx_Kl_98F-SME_Lx_Kl, SME_Lx_Kl_9B8-SME_Lx_Kl	
00025310 0000 0000                  		dc.w SME_Lx_Kl_9DC-SME_Lx_Kl, SME_Lx_Kl_9F1-SME_Lx_Kl	
00025314 0000 0000                  		dc.w SME_Lx_Kl_A01-SME_Lx_Kl, SME_Lx_Kl_A11-SME_Lx_Kl	
00025318 0000 0000                  		dc.w SME_Lx_Kl_A21-SME_Lx_Kl, SME_Lx_Kl_A2C-SME_Lx_Kl	
0002531C 0000 0000                  		dc.w SME_Lx_Kl_A3C-SME_Lx_Kl, SME_Lx_Kl_A4C-SME_Lx_Kl	
00025320 0000 0000                  		dc.w SME_Lx_Kl_A5C-SME_Lx_Kl, SME_Lx_Kl_A6C-SME_Lx_Kl	
00025324 0000 0000                  		dc.w SME_Lx_Kl_A81-SME_Lx_Kl, SME_Lx_Kl_AAA-SME_Lx_Kl	
00025328 0000 0000                  		dc.w SME_Lx_Kl_ABF-SME_Lx_Kl, SME_Lx_Kl_AD4-SME_Lx_Kl	
0002532C 0000 0000                  		dc.w SME_Lx_Kl_AEE-SME_Lx_Kl, SME_Lx_Kl_B08-SME_Lx_Kl	
00025330 0000 0000                  		dc.w SME_Lx_Kl_B13-SME_Lx_Kl, SME_Lx_Kl_B2D-SME_Lx_Kl	
00025334 0000 0000                  		dc.w SME_Lx_Kl_B3D-SME_Lx_Kl, SME_Lx_Kl_B57-SME_Lx_Kl	
00025338 0000 0000                  		dc.w SME_Lx_Kl_B62-SME_Lx_Kl, SME_Lx_Kl_B72-SME_Lx_Kl	
0002533C 0000 0000                  		dc.w SME_Lx_Kl_B82-SME_Lx_Kl, SME_Lx_Kl_B92-SME_Lx_Kl	
00025340 0000 0000                  		dc.w SME_Lx_Kl_B9D-SME_Lx_Kl, SME_Lx_Kl_BAD-SME_Lx_Kl	
00025344 0000 0000                  		dc.w SME_Lx_Kl_BE5-SME_Lx_Kl, SME_Lx_Kl_C04-SME_Lx_Kl	
00025348 0000 0000                  		dc.w SME_Lx_Kl_C14-SME_Lx_Kl, SME_Lx_Kl_C38-SME_Lx_Kl	
0002534C 0000 0000                  		dc.w SME_Lx_Kl_C43-SME_Lx_Kl, SME_Lx_Kl_C58-SME_Lx_Kl	
00025350 0000 0000                  		dc.w SME_Lx_Kl_C68-SME_Lx_Kl, SME_Lx_Kl_C78-SME_Lx_Kl	
00025354 0000 0000                  		dc.w SME_Lx_Kl_C8D-SME_Lx_Kl, SME_Lx_Kl_C93-SME_Lx_Kl	
00025358 0000 0000                  		dc.w SME_Lx_Kl_C99-SME_Lx_Kl, SME_Lx_Kl_C9F-SME_Lx_Kl	
0002535C 0000                       		dc.w SME_Lx_Kl_CA5-SME_Lx_Kl	
0002535E 00                         SME_Lx_Kl_142:	dc.b 0	
0002535F 04                         SME_Lx_Kl_143:	dc.b 4	
00025360 EC08 0000 F0               		dc.b $EC, 8, 0, 0, $F0	
00025365 F40D 0003 F0               		dc.b $F4, $D, 0, 3, $F0	
0002536A 0408 000B F0               		dc.b 4, 8, 0, $B, $F0	
0002536F 0C08 000E F8               		dc.b $C, 8, 0, $E, $F8	
00025374 09                         SME_Lx_Kl_158:	dc.b 9	
00025375 EC08 0000 F0               		dc.b $EC, 8, 0, 0, $F0	
0002537A 0408 0003 F0               		dc.b 4, 8, 0, 3, $F0	
0002537F 0C08 0006 F8               		dc.b $C, 8, 0, 6, $F8	
00025384 F401 0009 F0               		dc.b $F4, 1, 0, 9, $F0	
00025389 FC00 000B 00               		dc.b $FC, 0, 0, $B, 0	
0002538E F400 000C 08               		dc.b $F4, 0, 0, $C, 8	
00025393 FC00 000D F8               		dc.b $FC, 0, 0, $D, $F8	
00025398 FC00 000E 08               		dc.b $FC, 0, 0, $E, 8	
0002539D F404 000F F8               		dc.b $F4, 4, 0, $F, $F8	
000253A2 0A                         SME_Lx_Kl_186:	dc.b $A	
000253A3 EC08 0000 F0               		dc.b $EC, 8, 0, 0, $F0	
000253A8 0408 0003 F0               		dc.b 4, 8, 0, 3, $F0	
000253AD 0C08 0006 F8               		dc.b $C, 8, 0, 6, $F8	
000253B2 F401 0009 F0               		dc.b $F4, 1, 0, 9, $F0	
000253B7 FC00 000B 00               		dc.b $FC, 0, 0, $B, 0	
000253BC F400 000C 08               		dc.b $F4, 0, 0, $C, 8	
000253C1 FC00 000D 08               		dc.b $FC, 0, 0, $D, 8	
000253C6 F400 000E F8               		dc.b $F4, 0, 0, $E, $F8	
000253CB F400 000F 00               		dc.b $F4, 0, 0, $F, 0	
000253D0 FC00 0010 F8               		dc.b $FC, 0, 0, $10, $F8	
000253D5 04                         SME_Lx_Kl_1B9:	dc.b 4	
000253D6 EC0B 0000 F0               		dc.b $EC, $B, 0, 0, $F0	
000253DB F400 000C 08               		dc.b $F4, 0, 0, $C, 8	
000253E0 FC00 100D 08               		dc.b $FC, 0, $10, $D, 8	
000253E5 0C08 000E F8               		dc.b $C, 8, 0, $E, $F8	
000253EA 03                         SME_Lx_Kl_1CE:	dc.b 3	
000253EB EC09 0000 F0               		dc.b $EC, 9, 0, 0, $F0	
000253F0 FC09 0006 F0               		dc.b $FC, 9, 0, 6, $F0	
000253F5 0C08 000C F8               		dc.b $C, 8, 0, $C, $F8	
000253FA 03                         SME_Lx_Kl_1DE:	dc.b 3	
000253FB EC09 0000 F0               		dc.b $EC, 9, 0, 0, $F0	
00025400 FC09 0006 F0               		dc.b $FC, 9, 0, 6, $F0	
00025405 0C08 000C F8               		dc.b $C, 8, 0, $C, $F8	
0002540A 04                         SME_Lx_Kl_1EE:	dc.b 4	
0002540B EC09 0000 F0               		dc.b $EC, 9, 0, 0, $F0	
00025410 FC09 0006 F0               		dc.b $FC, 9, 0, 6, $F0	
00025415 0C04 000C 00               		dc.b $C, 4, 0, $C, 0	
0002541A 0C00 000E F8               		dc.b $C, 0, 0, $E, $F8	
0002541F 02                         SME_Lx_Kl_203:	dc.b 2	
00025420 F40B 0000 F0               		dc.b $F4, $B, 0, 0, $F0	
00025425 0401 000C 08               		dc.b 4, 1, 0, $C, 8	
0002542A 03                         SME_Lx_Kl_20E:	dc.b 3	
0002542B FC06 0000 F0               		dc.b $FC, 6, 0, 0, $F0	
00025430 FC02 0006 00               		dc.b $FC, 2, 0, 6, 0	
00025435 0405 0009 08               		dc.b 4, 5, 0, 9, 8	
0002543A 03                         SME_Lx_Kl_21E:	dc.b 3	
0002543B FC06 0000 F0               		dc.b $FC, 6, 0, 0, $F0	
00025440 FC02 0006 00               		dc.b $FC, 2, 0, 6, 0	
00025445 0405 0009 08               		dc.b 4, 5, 0, 9, 8	
0002544A 03                         SME_Lx_Kl_22E:	dc.b 3	
0002544B F40B 0000 F0               		dc.b $F4, $B, 0, 0, $F0	
00025450 EC08 000C F0               		dc.b $EC, 8, 0, $C, $F0	
00025455 FC02 000F 08               		dc.b $FC, 2, 0, $F, 8	
0002545A 04                         SME_Lx_Kl_23E:	dc.b 4	
0002545B 0408 0000 F0               		dc.b 4, 8, 0, 0, $F0	
00025460 0C08 0003 F8               		dc.b $C, 8, 0, 3, $F8	
00025465 EC0A 0006 F0               		dc.b $EC, $A, 0, 6, $F0	
0002546A F400 000F 08               		dc.b $F4, 0, 0, $F, 8	
0002546F 03                         SME_Lx_Kl_253:	dc.b 3	
00025470 EC0A 0000 F0               		dc.b $EC, $A, 0, 0, $F0	
00025475 0408 0009 F0               		dc.b 4, 8, 0, 9, $F0	
0002547A 0C08 000C F8               		dc.b $C, 8, 0, $C, $F8	
0002547F 07                         SME_Lx_Kl_263:	dc.b 7	
00025480 FB09 0000 ED               		dc.b $FB, 9, 0, 0, $ED	
00025485 FB06 0006 05               		dc.b $FB, 6, 0, 6, 5	
0002548A 0B04 000C ED               		dc.b $B, 4, 0, $C, $ED	
0002548F F300 000E F5               		dc.b $F3, 0, 0, $E, $F5	
00025494 EB05 000F FD               		dc.b $EB, 5, 0, $F, $FD	
00025499 EB00 0013 F5               		dc.b $EB, 0, 0, $13, $F5	
0002549E F300 0014 ED               		dc.b $F3, 0, 0, $14, $ED	
000254A3 05                         SME_Lx_Kl_287:	dc.b 5	
000254A4 FC0E 0000 F5               		dc.b $FC, $E, 0, 0, $F5	
000254A9 F400 000C F5               		dc.b $F4, 0, 0, $C, $F5	
000254AE EC05 000D FD               		dc.b $EC, 5, 0, $D, $FD	
000254B3 EC00 0011 F5               		dc.b $EC, 0, 0, $11, $F5	
000254B8 F400 0012 ED               		dc.b $F4, 0, 0, $12, $ED	
000254BD 02                         SME_Lx_Kl_2A1:	dc.b 2	
000254BE FD0A 0000 F5               		dc.b $FD, $A, 0, 0, $F5	
000254C3 ED09 0009 F5               		dc.b $ED, 9, 0, 9, $F5	
000254C8 03                         SME_Lx_Kl_2AC:	dc.b 3	
000254C9 F30F 0000 F0               		dc.b $F3, $F, 0, 0, $F0	
000254CE EB0C 0010 F0               		dc.b $EB, $C, 0, $10, $F0	
000254D3 0500 0014 10               		dc.b 5, 0, 0, $14, $10	
000254D8 04                         SME_Lx_Kl_2BC:	dc.b 4	
000254D9 EB09 0000 F5               		dc.b $EB, 9, 0, 0, $F5	
000254DE FB09 0006 ED               		dc.b $FB, 9, 0, 6, $ED	
000254E3 FB06 000C 05               		dc.b $FB, 6, 0, $C, 5	
000254E8 0B04 0012 ED               		dc.b $B, 4, 0, $12, $ED	
000254ED 02                         SME_Lx_Kl_2D1:	dc.b 2	
000254EE EC09 0000 F6               		dc.b $EC, 9, 0, 0, $F6	
000254F3 FC0E 0006 EE               		dc.b $FC, $E, 0, 6, $EE	
000254F8 03                         SME_Lx_Kl_2DC:	dc.b 3	
000254F9 ED09 0000 F6               		dc.b $ED, 9, 0, 0, $F6	
000254FE FD06 0006 F6               		dc.b $FD, 6, 0, 6, $F6	
00025503 FD00 000C 06               		dc.b $FD, 0, 0, $C, 6	
00025508 05                         SME_Lx_Kl_2EC:	dc.b 5	
00025509 FD0C 0000 F6               		dc.b $FD, $C, 0, 0, $F6	
0002550E 0509 0004 F6               		dc.b 5, 9, 0, 4, $F6	
00025513 F500 000A EE               		dc.b $F5, 0, 0, $A, $EE	
00025518 ED01 000B F6               		dc.b $ED, 1, 0, $B, $F6	
0002551D ED05 000D FE               		dc.b $ED, 5, 0, $D, $FE	
00025522 05                         SME_Lx_Kl_306:	dc.b 5	
00025523 EC09 0000 EC               		dc.b $EC, 9, 0, 0, $EC	
00025528 EC06 0006 04               		dc.b $EC, 6, 0, 6, 4	
0002552D FC08 000C EC               		dc.b $FC, 8, 0, $C, $EC	
00025532 0409 000F F4               		dc.b 4, 9, 0, $F, $F4	
00025537 1400 0015 FC               		dc.b $14, 0, 0, $15, $FC	
0002553C 06                         SME_Lx_Kl_320:	dc.b 6	
0002553D ED09 0000 ED               		dc.b $ED, 9, 0, 0, $ED	
00025542 ED01 0006 05               		dc.b $ED, 1, 0, 6, 5	
00025547 FD0C 0008 ED               		dc.b $FD, $C, 0, 8, $ED	
0002554C 0509 000C F5               		dc.b 5, 9, 0, $C, $F5	
00025551 FD05 0012 0D               		dc.b $FD, 5, 0, $12, $D	
00025556 F500 0016 15               		dc.b $F5, 0, 0, $16, $15	
0002555B 04                         SME_Lx_Kl_33F:	dc.b 4	
0002555C EE09 0000 EE               		dc.b $EE, 9, 0, 0, $EE	
00025561 EE01 0006 06               		dc.b $EE, 1, 0, 6, 6	
00025566 FE0D 0008 F6               		dc.b $FE, $D, 0, 8, $F6	
0002556B 0E08 0010 FE               		dc.b $E, 8, 0, $10, $FE	
00025570 03                         SME_Lx_Kl_354:	dc.b 3	
00025571 ED0F 0000 EF               		dc.b $ED, $F, 0, 0, $EF	
00025576 ED03 0010 0F               		dc.b $ED, 3, 0, $10, $F	
0002557B 0D0C 0014 F7               		dc.b $D, $C, 0, $14, $F7	
00025580 05                         SME_Lx_Kl_364:	dc.b 5	
00025581 EC09 0000 EC               		dc.b $EC, 9, 0, 0, $EC	
00025586 EC05 0006 04               		dc.b $EC, 5, 0, 6, 4	
0002558B FC0D 000A F4               		dc.b $FC, $D, 0, $A, $F4	
00025590 0C08 0012 F4               		dc.b $C, 8, 0, $12, $F4	
00025595 1404 0015 FC               		dc.b $14, 4, 0, $15, $FC	
0002559A 04                         SME_Lx_Kl_37E:	dc.b 4	
0002559B EC09 0000 ED               		dc.b $EC, 9, 0, 0, $ED	
000255A0 EC01 0006 05               		dc.b $EC, 1, 0, 6, 5	
000255A5 FC0D 0008 F5               		dc.b $FC, $D, 0, 8, $F5	
000255AA 0C08 0010 FD               		dc.b $C, 8, 0, $10, $FD	
000255AF 03                         SME_Lx_Kl_393:	dc.b 3	
000255B0 ED0F 0000 ED               		dc.b $ED, $F, 0, 0, $ED	
000255B5 ED03 0010 0D               		dc.b $ED, 3, 0, $10, $D	
000255BA 0D0C 0014 F5               		dc.b $D, $C, 0, $14, $F5	
000255BF 05                         SME_Lx_Kl_3A3:	dc.b 5	
000255C0 ED09 0000 EE               		dc.b $ED, 9, 0, 0, $EE	
000255C5 ED01 0006 06               		dc.b $ED, 1, 0, 6, 6	
000255CA FD00 0008 EE               		dc.b $FD, 0, 0, 8, $EE	
000255CF FD0D 0009 F6               		dc.b $FD, $D, 0, 9, $F6	
000255D4 0D08 0011 FE               		dc.b $D, 8, 0, $11, $FE	
000255D9 04                         SME_Lx_Kl_3BD:	dc.b 4	
000255DA F307 0000 ED               		dc.b $F3, 7, 0, 0, $ED	
000255DF EB09 0008 FD               		dc.b $EB, 9, 0, 8, $FD	
000255E4 FB04 000E FD               		dc.b $FB, 4, 0, $E, $FD	
000255E9 0309 0010 FD               		dc.b 3, 9, 0, $10, $FD	
000255EE 02                         SME_Lx_Kl_3D2:	dc.b 2	
000255EF F407 0000 ED               		dc.b $F4, 7, 0, 0, $ED	
000255F4 EC0B 0008 FD               		dc.b $EC, $B, 0, 8, $FD	
000255F9 02                         SME_Lx_Kl_3DD:	dc.b 2	
000255FA F40A 0000 FD               		dc.b $F4, $A, 0, 0, $FD	
000255FF F406 0009 ED               		dc.b $F4, 6, 0, 9, $ED	
00025604 05                         SME_Lx_Kl_3E8:	dc.b 5	
00025605 E900 0000 04               		dc.b $E9, 0, 0, 0, 4	
0002560A F10C 0001 F4               		dc.b $F1, $C, 0, 1, $F4	
0002560F F100 0005 EC               		dc.b $F1, 0, 0, 5, $EC	
00025614 F90E 0006 EC               		dc.b $F9, $E, 0, 6, $EC	
00025619 F902 0012 0C               		dc.b $F9, 2, 0, $12, $C	
0002561E 04                         SME_Lx_Kl_402:	dc.b 4	
0002561F F306 0000 EC               		dc.b $F3, 6, 0, 0, $EC	
00025624 EB09 0006 FC               		dc.b $EB, 9, 0, 6, $FC	
00025629 FB04 000C FC               		dc.b $FB, 4, 0, $C, $FC	
0002562E 0309 000E FC               		dc.b 3, 9, 0, $E, $FC	
00025633 02                         SME_Lx_Kl_417:	dc.b 2	
00025634 F306 0000 ED               		dc.b $F3, 6, 0, 0, $ED	
00025639 F30B 0006 FD               		dc.b $F3, $B, 0, 6, $FD	
0002563E 03                         SME_Lx_Kl_422:	dc.b 3	
0002563F F408 0000 ED               		dc.b $F4, 8, 0, 0, $ED	
00025644 FC0D 0003 ED               		dc.b $FC, $D, 0, 3, $ED	
00025649 FC01 000B 0D               		dc.b $FC, 1, 0, $B, $D	
0002564E 03                         SME_Lx_Kl_432:	dc.b 3	
0002564F F407 0000 ED               		dc.b $F4, 7, 0, 0, $ED	
00025654 EC00 0008 FD               		dc.b $EC, 0, 0, 8, $FD	
00025659 F40A 0009 FD               		dc.b $F4, $A, 0, 9, $FD	
0002565E 06                         SME_Lx_Kl_442:	dc.b 6	
0002565F FC06 0000 EE               		dc.b $FC, 6, 0, 0, $EE	
00025664 EC04 0006 F6               		dc.b $EC, 4, 0, 6, $F6	
00025669 F404 0008 EE               		dc.b $F4, 4, 0, 8, $EE	
0002566E F40A 000A FE               		dc.b $F4, $A, 0, $A, $FE	
00025673 0C00 0013 FE               		dc.b $C, 0, 0, $13, $FE	
00025678 FC00 0014 16               		dc.b $FC, 0, 0, $14, $16	
0002567D 06                         SME_Lx_Kl_461:	dc.b 6	
0002567E FC06 0000 EF               		dc.b $FC, 6, 0, 0, $EF	
00025683 E408 0006 F7               		dc.b $E4, 8, 0, 6, $F7	
00025688 EC04 0009 FF               		dc.b $EC, 4, 0, 9, $FF	
0002568D F404 000B EF               		dc.b $F4, 4, 0, $B, $EF	
00025692 F40A 000D FF               		dc.b $F4, $A, 0, $D, $FF	
00025697 0C00 0016 FF               		dc.b $C, 0, 0, $16, $FF	
0002569C 04                         SME_Lx_Kl_480:	dc.b 4	
0002569D FB06 0000 EF               		dc.b $FB, 6, 0, 0, $EF	
000256A2 F304 0006 EF               		dc.b $F3, 4, 0, 6, $EF	
000256A7 EB0A 0008 FF               		dc.b $EB, $A, 0, 8, $FF	
000256AC 0304 0011 FF               		dc.b 3, 4, 0, $11, $FF	
000256B1 03                         SME_Lx_Kl_495:	dc.b 3	
000256B2 E90F 0000 F5               		dc.b $E9, $F, 0, 0, $F5	
000256B7 F102 0010 ED               		dc.b $F1, 2, 0, $10, $ED	
000256BC 0908 0013 ED               		dc.b 9, 8, 0, $13, $ED	
000256C1 05                         SME_Lx_Kl_4A5:	dc.b 5	
000256C2 FC06 0000 EE               		dc.b $FC, 6, 0, 0, $EE	
000256C7 EC08 0006 F6               		dc.b $EC, 8, 0, 6, $F6	
000256CC F404 0009 EE               		dc.b $F4, 4, 0, 9, $EE	
000256D1 F40D 000B FE               		dc.b $F4, $D, 0, $B, $FE	
000256D6 0408 0013 FE               		dc.b 4, 8, 0, $13, $FE	
000256DB 04                         SME_Lx_Kl_4BF:	dc.b 4	
000256DC FC06 0000 EF               		dc.b $FC, 6, 0, 0, $EF	
000256E1 F404 0006 EF               		dc.b $F4, 4, 0, 6, $EF	
000256E6 EC0A 0008 FF               		dc.b $EC, $A, 0, 8, $FF	
000256EB 0404 0011 FF               		dc.b 4, 4, 0, $11, $FF	
000256F0 03                         SME_Lx_Kl_4D4:	dc.b 3	
000256F1 EB0F 0000 F0               		dc.b $EB, $F, 0, 0, $F0	
000256F6 0B08 0010 F0               		dc.b $B, 8, 0, $10, $F0	
000256FB EB01 0013 0F               		dc.b $EB, 1, 0, $13, $F	
00025700 05                         SME_Lx_Kl_4E4:	dc.b 5	
00025701 FB06 0000 EF               		dc.b $FB, 6, 0, 0, $EF	
00025706 EB0A 0006 FF               		dc.b $EB, $A, 0, 6, $FF	
0002570B F304 000F EF               		dc.b $F3, 4, 0, $F, $EF	
00025710 0304 0011 FF               		dc.b 3, 4, 0, $11, $FF	
00025715 0B00 0013 FF               		dc.b $B, 0, 0, $13, $FF	
0002571A 02                         SME_Lx_Kl_4FE:	dc.b 2	
0002571B EE09 0000 F4               		dc.b $EE, 9, 0, 0, $F4	
00025720 FE0E 0006 EC               		dc.b $FE, $E, 0, 6, $EC	
00025725 02                         SME_Lx_Kl_509:	dc.b 2	
00025726 FE0E 0000 EC               		dc.b $FE, $E, 0, 0, $EC	
0002572B EE09 000C F4               		dc.b $EE, 9, 0, $C, $F4	
00025730 02                         SME_Lx_Kl_514:	dc.b 2	
00025731 EE09 0000 F4               		dc.b $EE, 9, 0, 0, $F4	
00025736 FE0E 0006 EC               		dc.b $FE, $E, 0, 6, $EC	
0002573B 02                         SME_Lx_Kl_51F:	dc.b 2	
0002573C EE09 0000 F4               		dc.b $EE, 9, 0, 0, $F4	
00025741 FE0E 0006 EC               		dc.b $FE, $E, 0, 6, $EC	
00025746 02                         SME_Lx_Kl_52A:	dc.b 2	
00025747 EE09 0000 F4               		dc.b $EE, 9, 0, 0, $F4	
0002574C FE0E 0006 EC               		dc.b $FE, $E, 0, 6, $EC	
00025751 02                         SME_Lx_Kl_535:	dc.b 2	
00025752 EE09 0000 F4               		dc.b $EE, 9, 0, 0, $F4	
00025757 FE0E 0006 EC               		dc.b $FE, $E, 0, 6, $EC	
0002575C 02                         SME_Lx_Kl_540:	dc.b 2	
0002575D EE09 0000 F4               		dc.b $EE, 9, 0, 0, $F4	
00025762 FE0E 0006 EC               		dc.b $FE, $E, 0, 6, $EC	
00025767 02                         SME_Lx_Kl_54B:	dc.b 2	
00025768 EE09 0000 F4               		dc.b $EE, 9, 0, 0, $F4	
0002576D FE0E 0006 EC               		dc.b $FE, $E, 0, 6, $EC	
00025772 04                         SME_Lx_Kl_556:	dc.b 4	
00025773 EE09 0000 EE               		dc.b $EE, 9, 0, 0, $EE	
00025778 EE01 0006 06               		dc.b $EE, 1, 0, 6, 6	
0002577D FE0E 0008 F6               		dc.b $FE, $E, 0, 8, $F6	
00025782 FE00 0014 EE               		dc.b $FE, 0, 0, $14, $EE	
00025787 03                         SME_Lx_Kl_56B:	dc.b 3	
00025788 F60F 0000 F6               		dc.b $F6, $F, 0, 0, $F6	
0002578D EE02 0010 EE               		dc.b $EE, 2, 0, $10, $EE	
00025792 EE08 0013 F6               		dc.b $EE, 8, 0, $13, $F6	
00025797 03                         SME_Lx_Kl_57B:	dc.b 3	
00025798 EE09 0000 EE               		dc.b $EE, 9, 0, 0, $EE	
0002579D EE01 0006 06               		dc.b $EE, 1, 0, 6, 6	
000257A2 FE0E 0008 F6               		dc.b $FE, $E, 0, 8, $F6	
000257A7 03                         SME_Lx_Kl_58B:	dc.b 3	
000257A8 FE0E 0000 F6               		dc.b $FE, $E, 0, 0, $F6	
000257AD EE0D 000C EE               		dc.b $EE, $D, 0, $C, $EE	
000257B2 FE00 0014 EE               		dc.b $FE, 0, 0, $14, $EE	
000257B7 04                         SME_Lx_Kl_59B:	dc.b 4	
000257B8 EE09 0000 EE               		dc.b $EE, 9, 0, 0, $EE	
000257BD EE01 0006 06               		dc.b $EE, 1, 0, 6, 6	
000257C2 FE0E 0008 F6               		dc.b $FE, $E, 0, 8, $F6	
000257C7 FE00 0014 EE               		dc.b $FE, 0, 0, $14, $EE	
000257CC 03                         SME_Lx_Kl_5B0:	dc.b 3	
000257CD FE0E 0000 F6               		dc.b $FE, $E, 0, 0, $F6	
000257D2 EE0D 000C EE               		dc.b $EE, $D, 0, $C, $EE	
000257D7 FE00 0014 EE               		dc.b $FE, 0, 0, $14, $EE	
000257DC 03                         SME_Lx_Kl_5C0:	dc.b 3	
000257DD EE09 0000 EE               		dc.b $EE, 9, 0, 0, $EE	
000257E2 EE01 0006 06               		dc.b $EE, 1, 0, 6, 6	
000257E7 FE0E 0008 F6               		dc.b $FE, $E, 0, 8, $F6	
000257EC 03                         SME_Lx_Kl_5D0:	dc.b 3	
000257ED EE0D 0000 EE               		dc.b $EE, $D, 0, 0, $EE	
000257F2 FE0E 0008 F6               		dc.b $FE, $E, 0, 8, $F6	
000257F7 FE00 0014 EE               		dc.b $FE, 0, 0, $14, $EE	
000257FC 02                         SME_Lx_Kl_5E0:	dc.b 2	
000257FD F406 0000 EE               		dc.b $F4, 6, 0, 0, $EE	
00025802 F40B 0006 FE               		dc.b $F4, $B, 0, 6, $FE	
00025807 02                         SME_Lx_Kl_5EB:	dc.b 2	
00025808 F406 0000 EE               		dc.b $F4, 6, 0, 0, $EE	
0002580D F40B 0006 FE               		dc.b $F4, $B, 0, 6, $FE	
00025812 02                         SME_Lx_Kl_5F6:	dc.b 2	
00025813 F406 0000 EE               		dc.b $F4, 6, 0, 0, $EE	
00025818 F40B 0006 FE               		dc.b $F4, $B, 0, 6, $FE	
0002581D 02                         SME_Lx_Kl_601:	dc.b 2	
0002581E F406 0000 EE               		dc.b $F4, 6, 0, 0, $EE	
00025823 F40B 0006 FE               		dc.b $F4, $B, 0, 6, $FE	
00025828 02                         SME_Lx_Kl_60C:	dc.b 2	
00025829 F406 0000 EE               		dc.b $F4, 6, 0, 0, $EE	
0002582E F40B 0006 FE               		dc.b $F4, $B, 0, 6, $FE	
00025833 02                         SME_Lx_Kl_617:	dc.b 2	
00025834 F406 0000 EE               		dc.b $F4, 6, 0, 0, $EE	
00025839 F40B 0006 FE               		dc.b $F4, $B, 0, 6, $FE	
0002583E 02                         SME_Lx_Kl_622:	dc.b 2	
0002583F F406 0000 EE               		dc.b $F4, 6, 0, 0, $EE	
00025844 F40B 0006 FE               		dc.b $F4, $B, 0, 6, $FE	
00025849 02                         SME_Lx_Kl_62D:	dc.b 2	
0002584A F406 0000 EE               		dc.b $F4, 6, 0, 0, $EE	
0002584F F40B 0006 FE               		dc.b $F4, $B, 0, 6, $FE	
00025854 04                         SME_Lx_Kl_638:	dc.b 4	
00025855 FA06 0000 EE               		dc.b $FA, 6, 0, 0, $EE	
0002585A F204 0006 EE               		dc.b $F2, 4, 0, 6, $EE	
0002585F EA0B 0008 FE               		dc.b $EA, $B, 0, 8, $FE	
00025864 0A00 0014 FE               		dc.b $A, 0, 0, $14, $FE	
00025869 03                         SME_Lx_Kl_64D:	dc.b 3	
0002586A EA0B 0000 FE               		dc.b $EA, $B, 0, 0, $FE	
0002586F 0A08 000C EE               		dc.b $A, 8, 0, $C, $EE	
00025874 F206 000F EE               		dc.b $F2, 6, 0, $F, $EE	
00025879 02                         SME_Lx_Kl_65D:	dc.b 2	
0002587A F207 0000 EE               		dc.b $F2, 7, 0, 0, $EE	
0002587F EA0B 0008 FE               		dc.b $EA, $B, 0, 8, $FE	
00025884 03                         SME_Lx_Kl_668:	dc.b 3	
00025885 EA0B 0000 FE               		dc.b $EA, $B, 0, 0, $FE	
0002588A 0A08 000C EE               		dc.b $A, 8, 0, $C, $EE	
0002588F F206 000F EE               		dc.b $F2, 6, 0, $F, $EE	
00025894 04                         SME_Lx_Kl_678:	dc.b 4	
00025895 FA06 0000 EE               		dc.b $FA, 6, 0, 0, $EE	
0002589A F204 0006 EE               		dc.b $F2, 4, 0, 6, $EE	
0002589F EA0B 0008 FE               		dc.b $EA, $B, 0, 8, $FE	
000258A4 0A00 0014 FE               		dc.b $A, 0, 0, $14, $FE	
000258A9 03                         SME_Lx_Kl_68D:	dc.b 3	
000258AA EA0B 0000 FE               		dc.b $EA, $B, 0, 0, $FE	
000258AF 0A08 000C EE               		dc.b $A, 8, 0, $C, $EE	
000258B4 F206 000F EE               		dc.b $F2, 6, 0, $F, $EE	
000258B9 02                         SME_Lx_Kl_69D:	dc.b 2	
000258BA F207 0000 EE               		dc.b $F2, 7, 0, 0, $EE	
000258BF EA0B 0008 FE               		dc.b $EA, $B, 0, 8, $FE	
000258C4 03                         SME_Lx_Kl_6A8:	dc.b 3	
000258C5 EA0B 0000 FE               		dc.b $EA, $B, 0, 0, $FE	
000258CA 0A08 000C EE               		dc.b $A, 8, 0, $C, $EE	
000258CF F206 000F EE               		dc.b $F2, 6, 0, $F, $EE	
000258D4 03                         SME_Lx_Kl_6B8:	dc.b 3	
000258D5 F00B 0000 FB               		dc.b $F0, $B, 0, 0, $FB	
000258DA 1008 000C FB               		dc.b $10, 8, 0, $C, $FB	
000258DF F806 000F EB               		dc.b $F8, 6, 0, $F, $EB	
000258E4 03                         SME_Lx_Kl_6C8:	dc.b 3	
000258E5 F00B 0000 FB               		dc.b $F0, $B, 0, 0, $FB	
000258EA 1008 000C FB               		dc.b $10, 8, 0, $C, $FB	
000258EF F806 000F EB               		dc.b $F8, 6, 0, $F, $EB	
000258F4 09                         SME_Lx_Kl_6D8:	dc.b 9	
000258F5 1008 0000 FB               		dc.b $10, 8, 0, 0, $FB	
000258FA F806 0003 EB               		dc.b $F8, 6, 0, 3, $EB	
000258FF 1000 0009 F3               		dc.b $10, 0, 0, 9, $F3	
00025904 0001 000A FB               		dc.b 0, 1, 0, $A, $FB	
00025909 0001 000C 03               		dc.b 0, 1, 0, $C, 3	
0002590E 0001 000E 0B               		dc.b 0, 1, 0, $E, $B	
00025913 F001 0010 FB               		dc.b $F0, 1, 0, $10, $FB	
00025918 F001 0012 03               		dc.b $F0, 1, 0, $12, 3	
0002591D F001 0014 0B               		dc.b $F0, 1, 0, $14, $B	
00025922 09                         SME_Lx_Kl_706:	dc.b 9	
00025923 1008 0000 FB               		dc.b $10, 8, 0, 0, $FB	
00025928 F806 0003 EB               		dc.b $F8, 6, 0, 3, $EB	
0002592D 1000 0009 F0               		dc.b $10, 0, 0, 9, $F0	
00025932 0001 000A FB               		dc.b 0, 1, 0, $A, $FB	
00025937 0001 000C 03               		dc.b 0, 1, 0, $C, 3	
0002593C 0001 000E 0B               		dc.b 0, 1, 0, $E, $B	
00025941 F001 0010 FB               		dc.b $F0, 1, 0, $10, $FB	
00025946 F001 0012 03               		dc.b $F0, 1, 0, $12, 3	
0002594B F001 0014 0B               		dc.b $F0, 1, 0, $14, $B	
00025950 03                         SME_Lx_Kl_734:	dc.b 3	
00025951 F20F 0000 F5               		dc.b $F2, $F, 0, 0, $F5	
00025956 0201 0010 ED               		dc.b 2, 1, 0, $10, $ED	
0002595B EA0C 0012 F5               		dc.b $EA, $C, 0, $12, $F5	
00025960 03                         SME_Lx_Kl_744:	dc.b 3	
00025961 F40B 0000 EF               		dc.b $F4, $B, 0, 0, $EF	
00025966 EC07 000C 07               		dc.b $EC, 7, 0, $C, 7	
0002596B EC04 0014 F7               		dc.b $EC, 4, 0, $14, $F7	
00025970 03                         SME_Lx_Kl_754:	dc.b 3	
00025971 F30F 0000 F4               		dc.b $F3, $F, 0, 0, $F4	
00025976 EB0C 0010 F4               		dc.b $EB, $C, 0, $10, $F4	
0002597B 0300 0014 EC               		dc.b 3, 0, 0, $14, $EC	
00025980 05                         SME_Lx_Kl_764:	dc.b 5	
00025981 F10E 0000 F7               		dc.b $F1, $E, 0, 0, $F7	
00025986 090C 000C EF               		dc.b 9, $C, 0, $C, $EF	
0002598B F901 0010 EF               		dc.b $F9, 1, 0, $10, $EF	
00025990 1104 0012 F7               		dc.b $11, 4, 0, $12, $F7	
00025995 E908 0014 F7               		dc.b $E9, 8, 0, $14, $F7	
0002599A 03                         SME_Lx_Kl_77E:	dc.b 3	
0002599B ED0E 0000 EE               		dc.b $ED, $E, 0, 0, $EE	
000259A0 ED02 000C 0E               		dc.b $ED, 2, 0, $C, $E	
000259A5 0509 000F F6               		dc.b 5, 9, 0, $F, $F6	
000259AA 03                         SME_Lx_Kl_78E:	dc.b 3	
000259AB ED0E 0000 EE               		dc.b $ED, $E, 0, 0, $EE	
000259B0 ED02 000C 0E               		dc.b $ED, 2, 0, $C, $E	
000259B5 0509 000F F6               		dc.b 5, 9, 0, $F, $F6	
000259BA 05                         SME_Lx_Kl_79E:	dc.b 5	
000259BB 0509 0000 F6               		dc.b 5, 9, 0, 0, $F6	
000259C0 ED02 0006 0E               		dc.b $ED, 2, 0, 6, $E	
000259C5 0500 0009 0E               		dc.b 5, 0, 0, 9, $E	
000259CA ED06 000A FE               		dc.b $ED, 6, 0, $A, $FE	
000259CF ED06 0010 EE               		dc.b $ED, 6, 0, $10, $EE	
000259D4 05                         SME_Lx_Kl_7B8:	dc.b 5	
000259D5 ED02 0000 0E               		dc.b $ED, 2, 0, 0, $E	
000259DA 0509 0003 F6               		dc.b 5, 9, 0, 3, $F6	
000259DF 0800 0009 0E               		dc.b 8, 0, 0, 9, $E	
000259E4 ED06 000A FE               		dc.b $ED, 6, 0, $A, $FE	
000259E9 ED06 0010 EE               		dc.b $ED, 6, 0, $10, $EE	
000259EE 04                         SME_Lx_Kl_7D2:	dc.b 4	
000259EF F00E 0000 E9               		dc.b $F0, $E, 0, 0, $E9	
000259F4 0808 000C F9               		dc.b 8, 8, 0, $C, $F9	
000259F9 E808 000F F1               		dc.b $E8, 8, 0, $F, $F1	
000259FE F002 0012 09               		dc.b $F0, 2, 0, $12, 9	
00025A03 04                         SME_Lx_Kl_7E7:	dc.b 4	
00025A04 E60B 0000 F3               		dc.b $E6, $B, 0, 0, $F3	
00025A09 0608 000C F3               		dc.b 6, 8, 0, $C, $F3	
00025A0E F602 000F 0B               		dc.b $F6, 2, 0, $F, $B	
00025A13 EE02 0012 EB               		dc.b $EE, 2, 0, $12, $EB	
00025A18 04                         SME_Lx_Kl_7FC:	dc.b 4	
00025A19 EA0F 0000 EA               		dc.b $EA, $F, 0, 0, $EA	
00025A1E F202 0010 0A               		dc.b $F2, 2, 0, $10, $A	
00025A23 0A00 0013 02               		dc.b $A, 0, 0, $13, 2	
00025A28 0A00 0014 0A               		dc.b $A, 0, 0, $14, $A	
00025A2D 04                         SME_Lx_Kl_811:	dc.b 4	
00025A2E E80F 0000 ED               		dc.b $E8, $F, 0, 0, $ED	
00025A33 0808 0010 F5               		dc.b 8, 8, 0, $10, $F5	
00025A38 F801 0013 0D               		dc.b $F8, 1, 0, $13, $D	
00025A3D F001 0015 E5               		dc.b $F0, 1, 0, $15, $E5	
00025A42 01                         SME_Lx_Kl_826:	dc.b 1	
00025A43 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0	
00025A48 01                         SME_Lx_Kl_82C:	dc.b 1	
00025A49 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0	
00025A4E 01                         SME_Lx_Kl_832:	dc.b 1	
00025A4F F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0	
00025A54 01                         SME_Lx_Kl_838:	dc.b 1	
00025A55 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0	
00025A5A 01                         SME_Lx_Kl_83E:	dc.b 1	
00025A5B F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0	
00025A60 01                         SME_Lx_Kl_844:	dc.b 1	
00025A61 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0	
00025A66 01                         SME_Lx_Kl_84A:	dc.b 1	
00025A67 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0	
00025A6C 03                         SME_Lx_Kl_850:	dc.b 3	
00025A6D F00A 0000 F0               		dc.b $F0, $A, 0, 0, $F0	
00025A72 080C 0009 F0               		dc.b 8, $C, 0, 9, $F0	
00025A77 F002 000D 08               		dc.b $F0, 2, 0, $D, 8	
00025A7C 01                         SME_Lx_Kl_860:	dc.b 1	
00025A7D F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0	
00025A82 02                         SME_Lx_Kl_866:	dc.b 2	
00025A83 F40E 0000 EC               		dc.b $F4, $E, 0, 0, $EC	
00025A88 F402 000C 0C               		dc.b $F4, 2, 0, $C, $C	
00025A8D 01                         SME_Lx_Kl_871:	dc.b 1	
00025A8E F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0	
00025A93 02                         SME_Lx_Kl_877:	dc.b 2	
00025A94 EC0B 0000 F4               		dc.b $EC, $B, 0, 0, $F4	
00025A99 0C08 000C F4               		dc.b $C, 8, 0, $C, $F4	
00025A9E 01                         SME_Lx_Kl_882:	dc.b 1	
00025A9F F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0	
00025AA4 04                         SME_Lx_Kl_888:	dc.b 4	
00025AA5 ED09 0000 F0               		dc.b $ED, 9, 0, 0, $F0	
00025AAA FD0E 0006 F0               		dc.b $FD, $E, 0, 6, $F0	
00025AAF F501 0012 E8               		dc.b $F5, 1, 0, $12, $E8	
00025AB4 F500 0014 08               		dc.b $F5, 0, 0, $14, 8	
00025AB9 07                         SME_Lx_Kl_89D:	dc.b 7	
00025ABA ED09 0000 F0               		dc.b $ED, 9, 0, 0, $F0	
00025ABF FD0D 0006 F0               		dc.b $FD, $D, 0, 6, $F0	
00025AC4 0D04 000E 00               		dc.b $D, 4, 0, $E, 0	
00025AC9 F500 0010 E8               		dc.b $F5, 0, 0, $10, $E8	
00025ACE F500 0011 08               		dc.b $F5, 0, 0, $11, 8	
00025AD3 0D00 0012 F8               		dc.b $D, 0, 0, $12, $F8	
00025AD8 FD00 0013 E8               		dc.b $FD, 0, 0, $13, $E8	
00025ADD 05                         SME_Lx_Kl_8C1:	dc.b 5	
00025ADE F502 0000 F0               		dc.b $F5, 2, 0, 0, $F0	
00025AE3 F50B 0003 F8               		dc.b $F5, $B, 0, 3, $F8	
00025AE8 ED08 000F F0               		dc.b $ED, 8, 0, $F, $F0	
00025AED F501 0012 E8               		dc.b $F5, 1, 0, $12, $E8	
00025AF2 ED00 0014 08               		dc.b $ED, 0, 0, $14, 8	
00025AF7 03                         SME_Lx_Kl_8DB:	dc.b 3	
00025AF8 F50B 0000 F8               		dc.b $F5, $B, 0, 0, $F8	
00025AFD ED03 000C F0               		dc.b $ED, 3, 0, $C, $F0	
00025B02 ED04 0010 F8               		dc.b $ED, 4, 0, $10, $F8	
00025B07 02                         SME_Lx_Kl_8EB:	dc.b 2	
00025B08 0C08 0000 F8               		dc.b $C, 8, 0, 0, $F8	
00025B0D EC0F 0003 F0               		dc.b $EC, $F, 0, 3, $F0	
00025B12 04                         SME_Lx_Kl_8F6:	dc.b 4	
00025B13 F402 0000 F8               		dc.b $F4, 2, 0, 0, $F8	
00025B18 F402 0003 00               		dc.b $F4, 2, 0, 3, 0	
00025B1D F402 0006 08               		dc.b $F4, 2, 0, 6, 8	
00025B22 0C08 0009 F8               		dc.b $C, 8, 0, 9, $F8	
00025B27 04                         SME_Lx_Kl_90B:	dc.b 4	
00025B28 F404 0000 03               		dc.b $F4, 4, 0, 0, 3	
00025B2D FC0D 0002 F8               		dc.b $FC, $D, 0, 2, $F8	
00025B32 0C08 000A F8               		dc.b $C, 8, 0, $A, $F8	
00025B37 0C00 000D 10               		dc.b $C, 0, 0, $D, $10	
00025B3C 04                         SME_Lx_Kl_920:	dc.b 4	
00025B3D EC08 0800 E8               		dc.b $EC, 8, 8, 0, $E8	
00025B42 F402 0803 00               		dc.b $F4, 2, 8, 3, 0	
00025B47 F40F 0806 E0               		dc.b $F4, $F, 8, 6, $E0	
00025B4C EC00 0016 00               		dc.b $EC, 0, 0, $16, 0	
00025B51 09                         SME_Lx_Kl_935:	dc.b 9	
00025B52 F402 0000 00               		dc.b $F4, 2, 0, 0, 0	
00025B57 EC0C 0003 E8               		dc.b $EC, $C, 0, 3, $E8	
00025B5C F407 0007 E0               		dc.b $F4, 7, 0, 7, $E0	
00025B61 0C00 080F F8               		dc.b $C, 0, 8, $F, $F8	
00025B66 F400 0010 F0               		dc.b $F4, 0, 0, $10, $F0	
00025B6B F402 0011 F8               		dc.b $F4, 2, 0, $11, $F8	
00025B70 0400 0014 F0               		dc.b 4, 0, 0, $14, $F0	
00025B75 0C00 0015 F0               		dc.b $C, 0, 0, $15, $F0	
00025B7A FC00 0016 F0               		dc.b $FC, 0, 0, $16, $F0	
00025B7F 03                         SME_Lx_Kl_963:	dc.b 3	
00025B80 EC0E 0800 E8               		dc.b $EC, $E, 8, 0, $E8	
00025B85 040D 080C E0               		dc.b 4, $D, 8, $C, $E0	
00025B8A 0C00 1814 00               		dc.b $C, 0, $18, $14, 0	
00025B8F 03                         SME_Lx_Kl_973:	dc.b 3	
00025B90 F40F 0000 E8               		dc.b $F4, $F, 0, 0, $E8	
00025B95 0401 0010 E0               		dc.b 4, 1, 0, $10, $E0	
00025B9A EC0C 0012 E8               		dc.b $EC, $C, 0, $12, $E8	
00025B9F 02                         SME_Lx_Kl_983:	dc.b 2	
00025BA0 F40F 0000 E8               		dc.b $F4, $F, 0, 0, $E8	
00025BA5 EC0C 0010 E8               		dc.b $EC, $C, 0, $10, $E8	
00025BAA 00                         SME_Lx_Kl_98E:	dc.b 0	
00025BAB 08                         SME_Lx_Kl_98F:	dc.b 8	
00025BAC E80C 0000 F0               		dc.b $E8, $C, 0, 0, $F0	
00025BB1 E801 0004 10               		dc.b $E8, 1, 0, 4, $10	
00025BB6 F002 0006 F8               		dc.b $F0, 2, 0, 6, $F8	
00025BBB F001 0009 00               		dc.b $F0, 1, 0, 9, 0	
00025BC0 F001 000B 08               		dc.b $F0, 1, 0, $B, 8	
00025BC5 0006 000D 00               		dc.b 0, 6, 0, $D, 0	
00025BCA 0801 0013 F8               		dc.b 8, 1, 0, $13, $F8	
00025BCF 1000 0015 10               		dc.b $10, 0, 0, $15, $10	
00025BD4 07                         SME_Lx_Kl_9B8:	dc.b 7	
00025BD5 E80C 0000 F0               		dc.b $E8, $C, 0, 0, $F0	
00025BDA E801 0004 10               		dc.b $E8, 1, 0, 4, $10	
00025BDF F002 0006 F8               		dc.b $F0, 2, 0, 6, $F8	
00025BE4 F001 0009 00               		dc.b $F0, 1, 0, 9, 0	
00025BE9 F001 000B 08               		dc.b $F0, 1, 0, $B, 8	
00025BEE 0006 000D 00               		dc.b 0, 6, 0, $D, 0	
00025BF3 0801 0013 10               		dc.b 8, 1, 0, $13, $10	
00025BF8 04                         SME_Lx_Kl_9DC:	dc.b 4	
00025BF9 E80C 0000 F0               		dc.b $E8, $C, 0, 0, $F0	
00025BFE F00A 0004 F8               		dc.b $F0, $A, 0, 4, $F8	
00025C03 E801 000D 10               		dc.b $E8, 1, 0, $D, $10	
00025C08 0809 000F F0               		dc.b 8, 9, 0, $F, $F0	
00025C0D 03                         SME_Lx_Kl_9F1:	dc.b 3	
00025C0E F40D 0800 FC               		dc.b $F4, $D, 8, 0, $FC	
00025C13 FC00 0808 F4               		dc.b $FC, 0, 8, 8, $F4	
00025C18 040C 0809 F4               		dc.b 4, $C, 8, 9, $F4	
00025C1D 03                         SME_Lx_Kl_A01:	dc.b 3	
00025C1E F40D 0000 FC               		dc.b $F4, $D, 0, 0, $FC	
00025C23 FC05 0008 EC               		dc.b $FC, 5, 0, 8, $EC	
00025C28 0408 000C FC               		dc.b 4, 8, 0, $C, $FC	
00025C2D 03                         SME_Lx_Kl_A11:	dc.b 3	
00025C2E F40D 0000 FC               		dc.b $F4, $D, 0, 0, $FC	
00025C33 040C 0008 F4               		dc.b 4, $C, 0, 8, $F4	
00025C38 FC00 000C F4               		dc.b $FC, 0, 0, $C, $F4	
00025C3D 02                         SME_Lx_Kl_A21:	dc.b 2	
00025C3E F40A 0000 F0               		dc.b $F4, $A, 0, 0, $F0	
00025C43 F40A 0800 08               		dc.b $F4, $A, 8, 0, 8	
00025C48 03                         SME_Lx_Kl_A2C:	dc.b 3	
00025C49 F40D 0800 F4               		dc.b $F4, $D, 8, 0, $F4	
00025C4E 040C 0808 FC               		dc.b 4, $C, 8, 8, $FC	
00025C53 FC00 080C 14               		dc.b $FC, 0, 8, $C, $14	
00025C58 03                         SME_Lx_Kl_A3C:	dc.b 3	
00025C59 F40D 0800 F4               		dc.b $F4, $D, 8, 0, $F4	
00025C5E FC05 0808 14               		dc.b $FC, 5, 8, 8, $14	
00025C63 0408 080C FC               		dc.b 4, 8, 8, $C, $FC	
00025C68 03                         SME_Lx_Kl_A4C:	dc.b 3	
00025C69 F40D 0000 F4               		dc.b $F4, $D, 0, 0, $F4	
00025C6E FC00 0008 14               		dc.b $FC, 0, 0, 8, $14	
00025C73 040C 0009 FC               		dc.b 4, $C, 0, 9, $FC	
00025C78 03                         SME_Lx_Kl_A5C:	dc.b 3	
00025C79 F40D 0000 FC               		dc.b $F4, $D, 0, 0, $FC	
00025C7E FC05 0008 EC               		dc.b $FC, 5, 0, 8, $EC	
00025C83 0408 000C FC               		dc.b 4, 8, 0, $C, $FC	
00025C88 04                         SME_Lx_Kl_A6C:	dc.b 4	
00025C89 E90B 0000 F4               		dc.b $E9, $B, 0, 0, $F4	
00025C8E 1100 000C FC               		dc.b $11, 0, 0, $C, $FC	
00025C93 0900 000D FC               		dc.b 9, 0, 0, $D, $FC	
00025C98 0900 000E 04               		dc.b 9, 0, 0, $E, 4	
00025C9D 08                         SME_Lx_Kl_A81:	dc.b 8	
00025C9E E909 0000 F4               		dc.b $E9, 9, 0, 0, $F4	
00025CA3 F901 0006 04               		dc.b $F9, 1, 0, 6, 4	
00025CA8 0900 0008 FC               		dc.b 9, 0, 0, 8, $FC	
00025CAD 1100 0009 FC               		dc.b $11, 0, 0, 9, $FC	
00025CB2 F901 000A FC               		dc.b $F9, 1, 0, $A, $FC	
00025CB7 F900 000C F4               		dc.b $F9, 0, 0, $C, $F4	
00025CBC 0100 000D F4               		dc.b 1, 0, 0, $D, $F4	
00025CC1 0900 000E 04               		dc.b 9, 0, 0, $E, 4	
00025CC6 04                         SME_Lx_Kl_AAA:	dc.b 4	
00025CC7 F80E 0000 E8               		dc.b $F8, $E, 0, 0, $E8	
00025CCC 0005 000C 08               		dc.b 0, 5, 0, $C, 8	
00025CD1 F800 0010 08               		dc.b $F8, 0, 0, $10, 8	
00025CD6 F000 0011 F8               		dc.b $F0, 0, 0, $11, $F8	
00025CDB 04                         SME_Lx_Kl_ABF:	dc.b 4	
00025CDC F80E 0000 E8               		dc.b $F8, $E, 0, 0, $E8	
00025CE1 0005 000C 08               		dc.b 0, 5, 0, $C, 8	
00025CE6 F800 0010 08               		dc.b $F8, 0, 0, $10, 8	
00025CEB F000 0011 F8               		dc.b $F0, 0, 0, $11, $F8	
00025CF0 05                         SME_Lx_Kl_AD4:	dc.b 5	
00025CF1 E80A 0000 F4               		dc.b $E8, $A, 0, 0, $F4	
00025CF6 F001 0009 0C               		dc.b $F0, 1, 0, 9, $C	
00025CFB 0009 000B F4               		dc.b 0, 9, 0, $B, $F4	
00025D00 1004 0011 F4               		dc.b $10, 4, 0, $11, $F4	
00025D05 0000 0013 EC               		dc.b 0, 0, 0, $13, $EC	
00025D0A 05                         SME_Lx_Kl_AEE:	dc.b 5	
00025D0B E80A 0000 F4               		dc.b $E8, $A, 0, 0, $F4	
00025D10 E801 0009 0C               		dc.b $E8, 1, 0, 9, $C	
00025D15 0009 000B F4               		dc.b 0, 9, 0, $B, $F4	
00025D1A 1004 0011 F4               		dc.b $10, 4, 0, $11, $F4	
00025D1F 0000 0013 EC               		dc.b 0, 0, 0, $13, $EC	
00025D24 02                         SME_Lx_Kl_B08:	dc.b 2	
00025D25 ED0A 0000 F3               		dc.b $ED, $A, 0, 0, $F3	
00025D2A 050D 0009 EB               		dc.b 5, $D, 0, 9, $EB	
00025D2F 05                         SME_Lx_Kl_B13:	dc.b 5	
00025D30 0505 0000 EB               		dc.b 5, 5, 0, 0, $EB	
00025D35 ED02 0004 F3               		dc.b $ED, 2, 0, 4, $F3	
00025D3A F503 0007 FB               		dc.b $F5, 3, 0, 7, $FB	
00025D3F ED03 000B 03               		dc.b $ED, 3, 0, $B, 3	
00025D44 ED00 000F FB               		dc.b $ED, 0, 0, $F, $FB	
00025D49 03                         SME_Lx_Kl_B2D:	dc.b 3	
00025D4A EC0A 0000 F3               		dc.b $EC, $A, 0, 0, $F3	
00025D4F 0408 0009 F3               		dc.b 4, 8, 0, 9, $F3	
00025D54 0C04 000C F3               		dc.b $C, 4, 0, $C, $F3	
00025D59 05                         SME_Lx_Kl_B3D:	dc.b 5	
00025D5A 0D00 0000 EB               		dc.b $D, 0, 0, 0, $EB	
00025D5F F503 0001 F3               		dc.b $F5, 3, 0, 1, $F3	
00025D64 F503 0005 FB               		dc.b $F5, 3, 0, 5, $FB	
00025D69 F503 0009 03               		dc.b $F5, 3, 0, 9, 3	
00025D6E ED08 000D F3               		dc.b $ED, 8, 0, $D, $F3	
00025D73 02                         SME_Lx_Kl_B57:	dc.b 2	
00025D74 ED0A 0000 F3               		dc.b $ED, $A, 0, 0, $F3	
00025D79 050D 0009 EB               		dc.b 5, $D, 0, 9, $EB	
00025D7E 03                         SME_Lx_Kl_B62:	dc.b 3	
00025D7F F50B 0000 F3               		dc.b $F5, $B, 0, 0, $F3	
00025D84 0501 000C EB               		dc.b 5, 1, 0, $C, $EB	
00025D89 ED08 000E F3               		dc.b $ED, 8, 0, $E, $F3	
00025D8E 03                         SME_Lx_Kl_B72:	dc.b 3	
00025D8F EC0A 0000 F3               		dc.b $EC, $A, 0, 0, $F3	
00025D94 0408 0009 F3               		dc.b 4, 8, 0, 9, $F3	
00025D99 0C04 000C F3               		dc.b $C, 4, 0, $C, $F3	
00025D9E 03                         SME_Lx_Kl_B82:	dc.b 3	
00025D9F F50B 0000 F3               		dc.b $F5, $B, 0, 0, $F3	
00025DA4 0501 000C EB               		dc.b 5, 1, 0, $C, $EB	
00025DA9 ED08 000E F3               		dc.b $ED, 8, 0, $E, $F3	
00025DAE 02                         SME_Lx_Kl_B92:	dc.b 2	
00025DAF EC09 0000 F0               		dc.b $EC, 9, 0, 0, $F0	
00025DB4 FC0E 0006 F0               		dc.b $FC, $E, 0, 6, $F0	
00025DB9 03                         SME_Lx_Kl_B9D:	dc.b 3	
00025DBA E80D 2000 EC               		dc.b $E8, $D, $20, 0, $EC	
00025DBF E801 2008 0C               		dc.b $E8, 1, $20, 8, $C	
00025DC4 F80B 200A F4               		dc.b $F8, $B, $20, $A, $F4	
00025DC9 0B                         SME_Lx_Kl_BAD:	dc.b $B	
00025DCA E80D 0000 EC               		dc.b $E8, $D, 0, 0, $EC	
00025DCF E801 0008 0C               		dc.b $E8, 1, 0, 8, $C	
00025DD4 1000 000A F4               		dc.b $10, 0, 0, $A, $F4	
00025DD9 0808 000B F4               		dc.b 8, 8, 0, $B, $F4	
00025DDE 1000 000E 04               		dc.b $10, 0, 0, $E, 4	
00025DE3 F800 000F FC               		dc.b $F8, 0, 0, $F, $FC	
00025DE8 F800 0010 F4               		dc.b $F8, 0, 0, $10, $F4	
00025DED F800 0011 04               		dc.b $F8, 0, 0, $11, 4	
00025DF2 0000 0012 FC               		dc.b 0, 0, 0, $12, $FC	
00025DF7 0000 0013 04               		dc.b 0, 0, 0, $13, 4	
00025DFC 0000 0014 F4               		dc.b 0, 0, 0, $14, $F4	
00025E01 06                         SME_Lx_Kl_BE5:	dc.b 6	
00025E02 E80D 0000 EC               		dc.b $E8, $D, 0, 0, $EC	
00025E07 E801 0008 0C               		dc.b $E8, 1, 0, 8, $C	
00025E0C F809 000A F4               		dc.b $F8, 9, 0, $A, $F4	
00025E11 1000 0010 F4               		dc.b $10, 0, 0, $10, $F4	
00025E16 0808 0011 F4               		dc.b 8, 8, 0, $11, $F4	
00025E1B 1000 0014 04               		dc.b $10, 0, 0, $14, 4	
00025E20 03                         SME_Lx_Kl_C04:	dc.b 3	
00025E21 EB09 0000 F4               		dc.b $EB, 9, 0, 0, $F4	
00025E26 FB0E 0006 EC               		dc.b $FB, $E, 0, 6, $EC	
00025E2B 0301 0012 0C               		dc.b 3, 1, 0, $12, $C	
00025E30 07                         SME_Lx_Kl_C14:	dc.b 7	
00025E31 F801 0000 0C               		dc.b $F8, 1, 0, 0, $C	
00025E36 080C 0002 F4               		dc.b 8, $C, 0, 2, $F4	
00025E3B F801 0006 FC               		dc.b $F8, 1, 0, 6, $FC	
00025E40 F000 0008 FC               		dc.b $F0, 0, 0, 8, $FC	
00025E45 F801 0009 EC               		dc.b $F8, 1, 0, 9, $EC	
00025E4A F002 000B F4               		dc.b $F0, 2, 0, $B, $F4	
00025E4F F002 000E 04               		dc.b $F0, 2, 0, $E, 4	
00025E54 02                         SME_Lx_Kl_C38:	dc.b 2	
00025E55 F00F 0000 EC               		dc.b $F0, $F, 0, 0, $EC	
00025E5A F802 0010 0C               		dc.b $F8, 2, 0, $10, $C	
00025E5F 04                         SME_Lx_Kl_C43:	dc.b 4	
00025E60 F80E 0000 F4               		dc.b $F8, $E, 0, 0, $F4	
00025E65 F800 000C EC               		dc.b $F8, 0, 0, $C, $EC	
00025E6A F008 000E F4               		dc.b $F0, 8, 0, $E, $F4	
00025E6F 0000 0011 EC               		dc.b 0, 0, 0, $11, $EC	
00025E74 03                         SME_Lx_Kl_C58:	dc.b 3	
00025E75 F80E 0000 F4               		dc.b $F8, $E, 0, 0, $F4	
00025E7A F801 000C EC               		dc.b $F8, 1, 0, $C, $EC	
00025E7F F008 000E F4               		dc.b $F0, 8, 0, $E, $F4	
00025E84 03                         SME_Lx_Kl_C68:	dc.b 3	
00025E85 F80E 0000 F4               		dc.b $F8, $E, 0, 0, $F4	
00025E8A F008 000C F4               		dc.b $F0, 8, 0, $C, $F4	
00025E8F F801 000F EC               		dc.b $F8, 1, 0, $F, $EC	
00025E94 04                         SME_Lx_Kl_C78:	dc.b 4	
00025E95 0002 0000 F4               		dc.b 0, 2, 0, 0, $F4	
00025E9A F803 0003 FC               		dc.b $F8, 3, 0, 3, $FC	
00025E9F F803 0007 04               		dc.b $F8, 3, 0, 7, 4	
00025EA4 F802 000B 0C               		dc.b $F8, 2, 0, $B, $C	
00025EA9 01                         SME_Lx_Kl_C8D:	dc.b 1	
00025EAA F80F 0000 F4               		dc.b $F8, $F, 0, 0, $F4	
00025EAF 01                         SME_Lx_Kl_C93:	dc.b 1	
00025EB0 F80F 0000 F4               		dc.b $F8, $F, 0, 0, $F4	
00025EB5 01                         SME_Lx_Kl_C99:	dc.b 1	
00025EB6 F80F 0000 F4               		dc.b $F8, $F, 0, 0, $F4	
00025EBB 01                         SME_Lx_Kl_C9F:	dc.b 1	
00025EBC F80F 0000 F4               		dc.b $F8, $F, 0, 0, $F4	
00025EC1 02                         SME_Lx_Kl_CA5:	dc.b 2	
00025EC2 F80B 0000 F4               		dc.b $F8, $B, 0, 0, $F4	
00025EC7 F802 000C 0C               		dc.b $F8, 2, 0, $C, $C	
00025ECC                            		even
00025ECC                            		even
00025ECC                            SonicDynPLC:	include	"_maps\Sonic - Dynamic Gfx Script.asm"
00025ECC                            ; --------------------------------------------------------------------------------
00025ECC                            ; Dynamic Pattern Loading Cues - output from SonMapEd - Sonic 1 format; --------------------------------------------------------------------------------
00025ECC                            
00025ECC                            SME_vJmm3:	
00025ECC 0000 0000                  		dc.w SME_vJmm3_142-SME_vJmm3, SME_vJmm3_143-SME_vJmm3	
00025ED0 0000 0000                  		dc.w SME_vJmm3_14C-SME_vJmm3, SME_vJmm3_15F-SME_vJmm3	
00025ED4 0000 0000                  		dc.w SME_vJmm3_174-SME_vJmm3, SME_vJmm3_17D-SME_vJmm3	
00025ED8 0000 0000                  		dc.w SME_vJmm3_184-SME_vJmm3, SME_vJmm3_18B-SME_vJmm3	
00025EDC 0000 0000                  		dc.w SME_vJmm3_194-SME_vJmm3, SME_vJmm3_199-SME_vJmm3	
00025EE0 0000 0000                  		dc.w SME_vJmm3_1A0-SME_vJmm3, SME_vJmm3_1A7-SME_vJmm3	
00025EE4 0000 0000                  		dc.w SME_vJmm3_1AE-SME_vJmm3, SME_vJmm3_1B7-SME_vJmm3	
00025EE8 0000 0000                  		dc.w SME_vJmm3_1BE-SME_vJmm3, SME_vJmm3_1CD-SME_vJmm3	
00025EEC 0000 0000                  		dc.w SME_vJmm3_1D8-SME_vJmm3, SME_vJmm3_1DF-SME_vJmm3	
00025EF0 0000 0000                  		dc.w SME_vJmm3_1E6-SME_vJmm3, SME_vJmm3_1EF-SME_vJmm3	
00025EF4 0000 0000                  		dc.w SME_vJmm3_1F4-SME_vJmm3, SME_vJmm3_1FB-SME_vJmm3	
00025EF8 0000 0000                  		dc.w SME_vJmm3_206-SME_vJmm3, SME_vJmm3_211-SME_vJmm3	
00025EFC 0000 0000                  		dc.w SME_vJmm3_21E-SME_vJmm3, SME_vJmm3_227-SME_vJmm3	
00025F00 0000 0000                  		dc.w SME_vJmm3_22E-SME_vJmm3, SME_vJmm3_239-SME_vJmm3	
00025F04 0000 0000                  		dc.w SME_vJmm3_242-SME_vJmm3, SME_vJmm3_249-SME_vJmm3	
00025F08 0000 0000                  		dc.w SME_vJmm3_254-SME_vJmm3, SME_vJmm3_25D-SME_vJmm3	
00025F0C 0000 0000                  		dc.w SME_vJmm3_262-SME_vJmm3, SME_vJmm3_267-SME_vJmm3	
00025F10 0000 0000                  		dc.w SME_vJmm3_272-SME_vJmm3, SME_vJmm3_27B-SME_vJmm3	
00025F14 0000 0000                  		dc.w SME_vJmm3_280-SME_vJmm3, SME_vJmm3_287-SME_vJmm3	
00025F18 0000 0000                  		dc.w SME_vJmm3_28E-SME_vJmm3, SME_vJmm3_29B-SME_vJmm3	
00025F1C 0000 0000                  		dc.w SME_vJmm3_2A8-SME_vJmm3, SME_vJmm3_2B1-SME_vJmm3	
00025F20 0000 0000                  		dc.w SME_vJmm3_2B8-SME_vJmm3, SME_vJmm3_2C3-SME_vJmm3	
00025F24 0000 0000                  		dc.w SME_vJmm3_2CC-SME_vJmm3, SME_vJmm3_2D3-SME_vJmm3	
00025F28 0000 0000                  		dc.w SME_vJmm3_2DE-SME_vJmm3, SME_vJmm3_2E3-SME_vJmm3	
00025F2C 0000 0000                  		dc.w SME_vJmm3_2E8-SME_vJmm3, SME_vJmm3_2ED-SME_vJmm3	
00025F30 0000 0000                  		dc.w SME_vJmm3_2F2-SME_vJmm3, SME_vJmm3_2F7-SME_vJmm3	
00025F34 0000 0000                  		dc.w SME_vJmm3_2FC-SME_vJmm3, SME_vJmm3_301-SME_vJmm3	
00025F38 0000 0000                  		dc.w SME_vJmm3_306-SME_vJmm3, SME_vJmm3_30F-SME_vJmm3	
00025F3C 0000 0000                  		dc.w SME_vJmm3_316-SME_vJmm3, SME_vJmm3_31D-SME_vJmm3	
00025F40 0000 0000                  		dc.w SME_vJmm3_324-SME_vJmm3, SME_vJmm3_32D-SME_vJmm3	
00025F44 0000 0000                  		dc.w SME_vJmm3_334-SME_vJmm3, SME_vJmm3_33B-SME_vJmm3	
00025F48 0000 0000                  		dc.w SME_vJmm3_342-SME_vJmm3, SME_vJmm3_347-SME_vJmm3	
00025F4C 0000 0000                  		dc.w SME_vJmm3_34C-SME_vJmm3, SME_vJmm3_351-SME_vJmm3	
00025F50 0000 0000                  		dc.w SME_vJmm3_356-SME_vJmm3, SME_vJmm3_35B-SME_vJmm3	
00025F54 0000 0000                  		dc.w SME_vJmm3_360-SME_vJmm3, SME_vJmm3_365-SME_vJmm3	
00025F58 0000 0000                  		dc.w SME_vJmm3_36A-SME_vJmm3, SME_vJmm3_373-SME_vJmm3	
00025F5C 0000 0000                  		dc.w SME_vJmm3_37A-SME_vJmm3, SME_vJmm3_37F-SME_vJmm3	
00025F60 0000 0000                  		dc.w SME_vJmm3_386-SME_vJmm3, SME_vJmm3_38F-SME_vJmm3	
00025F64 0000 0000                  		dc.w SME_vJmm3_396-SME_vJmm3, SME_vJmm3_39B-SME_vJmm3	
00025F68 0000 0000                  		dc.w SME_vJmm3_3A2-SME_vJmm3, SME_vJmm3_3A9-SME_vJmm3	
00025F6C 0000 0000                  		dc.w SME_vJmm3_3B0-SME_vJmm3, SME_vJmm3_3C3-SME_vJmm3	
00025F70 0000 0000                  		dc.w SME_vJmm3_3D6-SME_vJmm3, SME_vJmm3_3DD-SME_vJmm3	
00025F74 0000 0000                  		dc.w SME_vJmm3_3E4-SME_vJmm3, SME_vJmm3_3EB-SME_vJmm3	
00025F78 0000 0000                  		dc.w SME_vJmm3_3F6-SME_vJmm3, SME_vJmm3_3FD-SME_vJmm3	
00025F7C 0000 0000                  		dc.w SME_vJmm3_404-SME_vJmm3, SME_vJmm3_40F-SME_vJmm3	
00025F80 0000 0000                  		dc.w SME_vJmm3_41A-SME_vJmm3, SME_vJmm3_423-SME_vJmm3	
00025F84 0000 0000                  		dc.w SME_vJmm3_42C-SME_vJmm3, SME_vJmm3_435-SME_vJmm3	
00025F88 0000 0000                  		dc.w SME_vJmm3_43E-SME_vJmm3, SME_vJmm3_441-SME_vJmm3	
00025F8C 0000 0000                  		dc.w SME_vJmm3_444-SME_vJmm3, SME_vJmm3_447-SME_vJmm3	
00025F90 0000 0000                  		dc.w SME_vJmm3_44A-SME_vJmm3, SME_vJmm3_44D-SME_vJmm3	
00025F94 0000 0000                  		dc.w SME_vJmm3_450-SME_vJmm3, SME_vJmm3_453-SME_vJmm3	
00025F98 0000 0000                  		dc.w SME_vJmm3_45A-SME_vJmm3, SME_vJmm3_45D-SME_vJmm3	
00025F9C 0000 0000                  		dc.w SME_vJmm3_462-SME_vJmm3, SME_vJmm3_465-SME_vJmm3	
00025FA0 0000 0000                  		dc.w SME_vJmm3_46A-SME_vJmm3, SME_vJmm3_46D-SME_vJmm3	
00025FA4 0000 0000                  		dc.w SME_vJmm3_476-SME_vJmm3, SME_vJmm3_485-SME_vJmm3	
00025FA8 0000 0000                  		dc.w SME_vJmm3_490-SME_vJmm3, SME_vJmm3_497-SME_vJmm3	
00025FAC 0000 0000                  		dc.w SME_vJmm3_49C-SME_vJmm3, SME_vJmm3_4A5-SME_vJmm3	
00025FB0 0000 0000                  		dc.w SME_vJmm3_4AE-SME_vJmm3, SME_vJmm3_4B7-SME_vJmm3	
00025FB4 0000 0000                  		dc.w SME_vJmm3_4CA-SME_vJmm3, SME_vJmm3_4D1-SME_vJmm3	
00025FB8 0000 0000                  		dc.w SME_vJmm3_4D8-SME_vJmm3, SME_vJmm3_4DD-SME_vJmm3	
00025FBC 0000 0000                  		dc.w SME_vJmm3_4DE-SME_vJmm3, SME_vJmm3_4EF-SME_vJmm3	
00025FC0 0000 0000                  		dc.w SME_vJmm3_4FE-SME_vJmm3, SME_vJmm3_507-SME_vJmm3	
00025FC4 0000 0000                  		dc.w SME_vJmm3_50E-SME_vJmm3, SME_vJmm3_515-SME_vJmm3	
00025FC8 0000 0000                  		dc.w SME_vJmm3_51C-SME_vJmm3, SME_vJmm3_51F-SME_vJmm3	
00025FCC 0000 0000                  		dc.w SME_vJmm3_526-SME_vJmm3, SME_vJmm3_52D-SME_vJmm3	
00025FD0 0000 0000                  		dc.w SME_vJmm3_534-SME_vJmm3, SME_vJmm3_53B-SME_vJmm3	
00025FD4 0000 0000                  		dc.w SME_vJmm3_544-SME_vJmm3, SME_vJmm3_555-SME_vJmm3	
00025FD8 0000 0000                  		dc.w SME_vJmm3_55E-SME_vJmm3, SME_vJmm3_567-SME_vJmm3	
00025FDC 0000 0000                  		dc.w SME_vJmm3_572-SME_vJmm3, SME_vJmm3_57D-SME_vJmm3	
00025FE0 0000 0000                  		dc.w SME_vJmm3_582-SME_vJmm3, SME_vJmm3_58D-SME_vJmm3	
00025FE4 0000 0000                  		dc.w SME_vJmm3_594-SME_vJmm3, SME_vJmm3_59F-SME_vJmm3	
00025FE8 0000 0000                  		dc.w SME_vJmm3_5A4-SME_vJmm3, SME_vJmm3_5AB-SME_vJmm3	
00025FEC 0000 0000                  		dc.w SME_vJmm3_5B2-SME_vJmm3, SME_vJmm3_5B9-SME_vJmm3	
00025FF0 0000 0000                  		dc.w SME_vJmm3_5BE-SME_vJmm3, SME_vJmm3_5C5-SME_vJmm3	
00025FF4 0000 0000                  		dc.w SME_vJmm3_5DC-SME_vJmm3, SME_vJmm3_5E9-SME_vJmm3	
00025FF8 0000 0000                  		dc.w SME_vJmm3_5F0-SME_vJmm3, SME_vJmm3_5FF-SME_vJmm3	
00025FFC 0000 0000                  		dc.w SME_vJmm3_604-SME_vJmm3, SME_vJmm3_60D-SME_vJmm3	
00026000 0000 0000                  		dc.w SME_vJmm3_614-SME_vJmm3, SME_vJmm3_61B-SME_vJmm3	
00026004 0000 0000                  		dc.w SME_vJmm3_624-SME_vJmm3, SME_vJmm3_627-SME_vJmm3	
00026008 0000 0000                  		dc.w SME_vJmm3_62A-SME_vJmm3, SME_vJmm3_62D-SME_vJmm3	
0002600C 0000                       		dc.w SME_vJmm3_630-SME_vJmm3	
0002600E 00                         SME_vJmm3_142:	dc.b 0	
0002600F 0420 0070 0320 0B20 0E     SME_vJmm3_143:	dc.b 4, $20, 0, $70, 3, $20, $B, $20, $E	
00026018 0920 0020 0B20 0E10 0300+  SME_vJmm3_14C:	dc.b 9, $20, 0, $20, $B, $20, $E, $10, 3, 0, 8, 0, 9, 0, 6, 0, $A, $10, $1D	
0002602B 0A20 0020 0B20 0E10 0300+  SME_vJmm3_15F:	dc.b $A, $20, 0, $20, $B, $20, $E, $10, 3, 0, 8, 0, 9, 0, $A, 0, $1F, 0, $26, 0, $32	
00026040 04B6 C606 D200 0920 0E     SME_vJmm3_174:	dc.b 4, $B6, $C6, 6, $D2, 0, 9, $20, $E	
00026049 0350 1150 1720 0E          SME_vJmm3_17D:	dc.b 3, $50, $11, $50, $17, $20, $E	
00026050 0350 2050 1720 0E          SME_vJmm3_184:	dc.b 3, $50, $20, $50, $17, $20, $E	
00026057 0450 2050 1710 2700 0E     SME_vJmm3_18B:	dc.b 4, $50, $20, $50, $17, $10, $27, 0, $E	
00026060 02B6 D316 DF               SME_vJmm3_194:	dc.b 2, $B6, $D3, $16, $DF	
00026065 0356 E126 E736 EA          SME_vJmm3_199:	dc.b 3, $56, $E1, $26, $E7, $36, $EA	
0002606C 0356 E126 E736 EE          SME_vJmm3_1A0:	dc.b 3, $56, $E1, $26, $E7, $36, $EE	
00026073 03B6 F226 FE27 01          SME_vJmm3_1A7:	dc.b 3, $B6, $F2, $26, $FE, $27, 1	
0002607A 0420 0B20 0E87 0A07 13     SME_vJmm3_1AE:	dc.b 4, $20, $B, $20, $E, $87, $A, 7, $13	
00026083 0380 2920 0B20 0E          SME_vJmm3_1B7:	dc.b 3, $80, $29, $20, $B, $20, $E	
0002608A 0750 3A50 4010 4600 3530+  SME_vJmm3_1BE:	dc.b 7, $50, $3A, $50, $40, $10, $46, 0, $35, $30, $36, 0, $34, 0, $33	
00026099 05B0 4800 3530 3600 3400+  SME_vJmm3_1CD:	dc.b 5, $B0, $48, 0, $35, $30, $36, 0, $34, 0, $33	
000260A4 0380 5A57 0400 09          SME_vJmm3_1D8:	dc.b 3, $80, $5A, $57, 4, 0, 9	
000260AB 03F7 1437 2407 28          SME_vJmm3_1DF:	dc.b 3, $F7, $14, $37, $24, 7, $28	
000260B2 0450 5450 6350 6910 6F     SME_vJmm3_1E6:	dc.b 4, $50, $54, $50, $63, $50, $69, $10, $6F	
000260BB 0250 54B0 71               SME_vJmm3_1EF:	dc.b 2, $50, $54, $B0, $71	
000260C0 0357 0457 2907 2F          SME_vJmm3_1F4:	dc.b 3, $57, 4, $57, $29, 7, $2F	
000260C7 0530 7D50 8100 3310 3430+  SME_vJmm3_1FB:	dc.b 5, $30, $7D, $50, $81, 0, $33, $10, $34, $30, $36	
000260D2 0550 8750 8D20 9350 9600+  SME_vJmm3_206:	dc.b 5, $50, $87, $50, $8D, $20, $93, $50, $96, 0, $9C	
000260DD 0650 8710 9D30 9F50 A330+  SME_vJmm3_211:	dc.b 6, $50, $87, $10, $9D, $30, $9F, $50, $A3, $30, $A9, 0, $AD	
000260EA 0450 AE10 B470 B620 BE     SME_vJmm3_21E:	dc.b 4, $50, $AE, $10, $B4, $70, $B6, $20, $BE	
000260F3 03F9 7539 8539 89          SME_vJmm3_227:	dc.b 3, $F9, $75, $39, $85, $39, $89	
000260FA 0550 C130 C770 CB20 D310+  SME_vJmm3_22E:	dc.b 5, $50, $C1, $30, $C7, $70, $CB, $20, $D3, $10, $D6	
00026105 0450 C110 D870 DA20 E2     SME_vJmm3_239:	dc.b 4, $50, $C1, $10, $D8, $70, $DA, $20, $E2	
0002610E 03F9 8D39 9D39 A1          SME_vJmm3_242:	dc.b 3, $F9, $8D, $39, $9D, $39, $A1	
00026115 0550 8710 9D00 9370 E520+  SME_vJmm3_249:	dc.b 5, $50, $87, $10, $9D, 0, $93, $70, $E5, $20, $ED	
00026120 0470 F050 F810 FE51 00     SME_vJmm3_254:	dc.b 4, $70, $F0, $50, $F8, $10, $FE, $51, 0	
00026129 0270 F0B1 06               SME_vJmm3_25D:	dc.b 2, $70, $F0, $B1, 6	
0002612E 0281 1858 F9               SME_vJmm3_262:	dc.b 2, $81, $18, $58, $F9	
00026133 0508 FF39 0009 04B9 0529+  SME_vJmm3_267:	dc.b 5, 8, $FF, $39, 0, 9, 4, $B9, 5, $29, $11	
0002613E 0451 1251 2111 2751 29     SME_vJmm3_272:	dc.b 4, $51, $12, $51, $21, $11, $27, $51, $29	
00026147 0251 12B1 2F               SME_vJmm3_27B:	dc.b 2, $51, $12, $B1, $2F	
0002614C 0329 1479 1719 1F          SME_vJmm3_280:	dc.b 3, $29, $14, $79, $17, $19, $1F	
00026153 0370 F001 0681 3B          SME_vJmm3_287:	dc.b 3, $70, $F0, 1, 6, $81, $3B	
0002615A 0651 4411 4A11 4C81 4E01+  SME_vJmm3_28E:	dc.b 6, $51, $44, $11, $4A, $11, $4C, $81, $4E, 1, $57, 1, $58	
00026167 0651 4421 5911 5C11 5E81+  SME_vJmm3_29B:	dc.b 6, $51, $44, $21, $59, $11, $5C, $11, $5E, $81, $60, 1, $57	
00026174 0451 6911 6F81 7111 7A     SME_vJmm3_2A8:	dc.b 4, $51, $69, $11, $6F, $81, $71, $11, $7A	
0002617D 03F9 A529 B529 B8          SME_vJmm3_2B1:	dc.b 3, $F9, $A5, $29, $B5, $29, $B8	
00026184 0551 7C21 8211 8571 8721+  SME_vJmm3_2B8:	dc.b 5, $51, $7C, $21, $82, $11, $85, $71, $87, $21, $8F	
0002618F 0451 7C11 9281 9411 9D     SME_vJmm3_2C3:	dc.b 4, $51, $7C, $11, $92, $81, $94, $11, $9D	
00026198 03F9 BB29 CB19 CE          SME_vJmm3_2CC:	dc.b 3, $F9, $BB, $29, $CB, $19, $CE	
0002619F 0551 4481 9F11 5E11 A801+  SME_vJmm3_2D3:	dc.b 5, $51, $44, $81, $9F, $11, $5E, $11, $A8, 1, $57	
000261AA 0251 AAB1 B0               SME_vJmm3_2DE:	dc.b 2, $51, $AA, $B1, $B0	
000261AF 02B7 3057 3C               SME_vJmm3_2E3:	dc.b 2, $B7, $30, $57, $3C	
000261B4 0250 54B1 BC               SME_vJmm3_2E8:	dc.b 2, $50, $54, $B1, $BC	
000261B9 0257 3CB7 42               SME_vJmm3_2ED:	dc.b 2, $57, $3C, $B7, $42	
000261BE 0251 AAB1 C8               SME_vJmm3_2F2:	dc.b 2, $51, $AA, $B1, $C8	
000261C3 0257 3CB7 4E               SME_vJmm3_2F7:	dc.b 2, $57, $3C, $B7, $4E	
000261C8 0250 54B1 D4               SME_vJmm3_2FC:	dc.b 2, $50, $54, $B1, $D4	
000261CD 0257 3CB7 5A               SME_vJmm3_301:	dc.b 2, $57, $3C, $B7, $5A	
000261D2 0451 E011 E6B1 E801 F4     SME_vJmm3_306:	dc.b 4, $51, $E0, $11, $E6, $B1, $E8, 1, $F4	
000261DB 03F8 7128 8128 84          SME_vJmm3_30F:	dc.b 3, $F8, $71, $28, $81, $28, $84	
000261E2 0351 F511 FBB1 FD          SME_vJmm3_316:	dc.b 3, $51, $F5, $11, $FB, $B1, $FD	
000261E9 03B8 BD78 C901 F4          SME_vJmm3_31D:	dc.b 3, $B8, $BD, $78, $C9, 1, $F4	
000261F0 0451 E012 09B2 0B01 F4     SME_vJmm3_324:	dc.b 4, $51, $E0, $12, 9, $B2, $B, 1, $F4	
000261F9 03B8 D178 DD01 F4          SME_vJmm3_32D:	dc.b 3, $B8, $D1, $78, $DD, 1, $F4	
00026200 0351 F511 FBB2 17          SME_vJmm3_334:	dc.b 3, $51, $F5, $11, $FB, $B2, $17	
00026207 0378 E5B8 ED01 F4          SME_vJmm3_33B:	dc.b 3, $78, $E5, $B8, $ED, 1, $F4	
0002620E 0252 23B2 29               SME_vJmm3_342:	dc.b 2, $52, $23, $B2, $29	
00026213 0258 87B8 8D               SME_vJmm3_347:	dc.b 2, $58, $87, $B8, $8D	
00026218 0251 12B2 35               SME_vJmm3_34C:	dc.b 2, $51, $12, $B2, $35	
0002621D 0258 87B8 99               SME_vJmm3_351:	dc.b 2, $58, $87, $B8, $99	
00026222 0252 23B2 41               SME_vJmm3_356:	dc.b 2, $52, $23, $B2, $41	
00026227 0258 87B8 A5               SME_vJmm3_35B:	dc.b 2, $58, $87, $B8, $A5	
0002622C 0251 12B2 4D               SME_vJmm3_360:	dc.b 2, $51, $12, $B2, $4D	
00026231 0258 87B8 B1               SME_vJmm3_365:	dc.b 2, $58, $87, $B8, $B1	
00026236 0452 5912 5FB2 6102 6D     SME_vJmm3_36A:	dc.b 4, $52, $59, $12, $5F, $B2, $61, 2, $6D	
0002623F 03B9 2129 2D59 30          SME_vJmm3_373:	dc.b 3, $B9, $21, $29, $2D, $59, $30	
00026246 0272 6EB2 76               SME_vJmm3_37A:	dc.b 2, $72, $6E, $B2, $76	
0002624B 03B9 3629 4259 45          SME_vJmm3_37F:	dc.b 3, $B9, $36, $29, $42, $59, $45	
00026252 0452 5912 82B2 8402 6D     SME_vJmm3_386:	dc.b 4, $52, $59, $12, $82, $B2, $84, 2, $6D	
0002625B 03B9 4B29 5759 5A          SME_vJmm3_38F:	dc.b 3, $B9, $4B, $29, $57, $59, $5A	
00026262 0272 6EB2 90               SME_vJmm3_396:	dc.b 2, $72, $6E, $B2, $90	
00026267 03B9 6029 6C59 6F          SME_vJmm3_39B:	dc.b 3, $B9, $60, $29, $6C, $59, $6F	
0002626E 03B4 EE24 FA54 FD          SME_vJmm3_3A2:	dc.b 3, $B4, $EE, $24, $FA, $54, $FD	
00026275 03B5 0325 0F55 12          SME_vJmm3_3A9:	dc.b 3, $B5, 3, $25, $F, $55, $12	
0002627C 0925 1E55 2105 3715 1815+  SME_vJmm3_3B0:	dc.b 9, $25, $1E, $55, $21, 5, $37, $15, $18, $15, $1A, $15, $1C, $14, $EE, $14, $F2, $14, $F6	
0002628F 0925 2D55 3005 3615 2715+  SME_vJmm3_3C3:	dc.b 9, $25, $2D, $55, $30, 5, $36, $15, $27, $15, $29, $15, $2B, $15, 3, $15, 7, $15, $B	
000262A2 03F6 6416 7436 76          SME_vJmm3_3D6:	dc.b 3, $F6, $64, $16, $74, $36, $76	
000262A9 03B6 8176 8D16 95          SME_vJmm3_3DD:	dc.b 3, $B6, $81, $76, $8D, $16, $95	
000262B0 03F5 3835 4805 4C          SME_vJmm3_3E4:	dc.b 3, $F5, $38, $35, $48, 5, $4C	
000262B7 05B5 4D35 5915 5D15 5F25+  SME_vJmm3_3EB:	dc.b 5, $B5, $4D, $35, $59, $15, $5D, $15, $5F, $25, $61	
000262C2 03B5 6425 7055 73          SME_vJmm3_3F6:	dc.b 3, $B5, $64, $25, $70, $55, $73	
000262C9 03B5 7925 8555 88          SME_vJmm3_3FD:	dc.b 3, $B5, $79, $25, $85, $55, $88	
000262D0 0555 9425 9A05 AD55 8E55+  SME_vJmm3_404:	dc.b 5, $55, $94, $25, $9A, 5, $AD, $55, $8E, $55, $64	
000262DB 0525 A355 A605 AC55 9D55+  SME_vJmm3_40F:	dc.b 5, $25, $A3, $55, $A6, 5, $AC, $55, $9D, $55, $79	
000262E6 04B5 BA25 C625 C925 CC     SME_vJmm3_41A:	dc.b 4, $B5, $BA, $25, $C6, $25, $C9, $25, $CC	
000262EF 04B5 AE25 CF25 D225 D5     SME_vJmm3_423:	dc.b 4, $B5, $AE, $25, $CF, $25, $D2, $25, $D5	
000262F8 04F5 D825 E805 EB05 EC     SME_vJmm3_42C:	dc.b 4, $F5, $D8, $25, $E8, 5, $EB, 5, $EC	
00026301 04F5 ED25 FD16 0016 02     SME_vJmm3_435:	dc.b 4, $F5, $ED, $25, $FD, $16, 0, $16, 2	
0002630A 01F2 9C                    SME_vJmm3_43E:	dc.b 1, $F2, $9C	
0002630D 01F6 2B                    SME_vJmm3_441:	dc.b 1, $F6, $2B	
00026310 01F2 AC                    SME_vJmm3_444:	dc.b 1, $F2, $AC	
00026313 01F6 3B                    SME_vJmm3_447:	dc.b 1, $F6, $3B	
00026316 01F2 BC                    SME_vJmm3_44A:	dc.b 1, $F2, $BC	
00026319 01F6 4B                    SME_vJmm3_44D:	dc.b 1, $F6, $4B	
0002631C 01F2 CC                    SME_vJmm3_450:	dc.b 1, $F2, $CC	
0002631F 0386 5B36 7A26 7E          SME_vJmm3_453:	dc.b 3, $86, $5B, $36, $7A, $26, $7E	
00026326 01F2 DC                    SME_vJmm3_45A:	dc.b 1, $F2, $DC	
00026329 02B2 EC22 F8               SME_vJmm3_45D:	dc.b 2, $B2, $EC, $22, $F8	
0002632E 01F2 FB                    SME_vJmm3_462:	dc.b 1, $F2, $FB	
00026331 02B3 0B23 17               SME_vJmm3_465:	dc.b 2, $B3, $B, $23, $17	
00026336 01F3 1A                    SME_vJmm3_46A:	dc.b 1, $F3, $1A	
00026339 0453 2AB3 3018 1508 17     SME_vJmm3_46D:	dc.b 4, $53, $2A, $B3, $30, $18, $15, 8, $17	
00026342 0753 3C73 4213 4A03 4C08+  SME_vJmm3_476:	dc.b 7, $53, $3C, $73, $42, $13, $4A, 3, $4C, 8, $1A, 8, $19, 8, $18	
00026351 0528 1BB8 1E28 2A18 2D08+  SME_vJmm3_485:	dc.b 5, $28, $1B, $B8, $1E, $28, $2A, $18, $2D, 8, $2F	
0002635C 03B8 3038 3C18 40          SME_vJmm3_490:	dc.b 3, $B8, $30, $38, $3C, $18, $40	
00026363 0220 0EF4 88               SME_vJmm3_497:	dc.b 2, $20, $E, $F4, $88	
00026368 0427 6627 6927 6C20 0E     SME_vJmm3_49C:	dc.b 4, $27, $66, $27, $69, $27, $6C, $20, $E	
00026371 0413 4D73 4F23 5703 5A     SME_vJmm3_4A5:	dc.b 4, $13, $4D, $73, $4F, $23, $57, 3, $5A	
0002637A 0423 5B23 5EF3 6108 42     SME_vJmm3_4AE:	dc.b 4, $23, $5B, $23, $5E, $F3, $61, 8, $42	
00026383 0928 5338 5678 4303 6408+  SME_vJmm3_4B7:	dc.b 9, $28, $53, $38, $56, $78, $43, 3, $64, 8, $4B, $28, $4F, 8, $4D, 8, $4E, 8, $52	
00026396 03B3 7173 7D00 71          SME_vJmm3_4CA:	dc.b 3, $B3, $71, $73, $7D, 0, $71	
0002639D 03F8 5B18 6B38 6D          SME_vJmm3_4D1:	dc.b 3, $F8, $5B, $18, $6B, $38, $6D	
000263A4 02F8 0138 11               SME_vJmm3_4D8:	dc.b 2, $F8, 1, $38, $11	
000263A9 00                         SME_vJmm3_4DD:	dc.b 0	
000263AA 0839 E219 EF29 E619 E919+  SME_vJmm3_4DE:	dc.b 8, $39, $E2, $19, $EF, $29, $E6, $19, $E9, $19, $EC, $59, $F7, $19, $FD, 9, $FF	
000263BB 0739 E219 EF29 E619 E919+  SME_vJmm3_4EF:	dc.b 7, $39, $E2, $19, $EF, $29, $E6, $19, $E9, $19, $EC, $5A, 0, $1A, 6	
000263CA 0439 E289 E619 EF59 F1     SME_vJmm3_4FE:	dc.b 4, $39, $E2, $89, $E6, $19, $EF, $59, $F1	
000263D3 0373 9D03 A533 A6          SME_vJmm3_507:	dc.b 3, $73, $9D, 3, $A5, $33, $A6	
000263DA 0373 8533 8D23 91          SME_vJmm3_50E:	dc.b 3, $73, $85, $33, $8D, $23, $91	
000263E1 0376 9736 9F06 A3          SME_vJmm3_515:	dc.b 3, $76, $97, $36, $9F, 6, $A3	
000263E8 0183 94                    SME_vJmm3_51C:	dc.b 1, $83, $94	
000263EB 0376 9736 9F06 A3          SME_vJmm3_51F:	dc.b 3, $76, $97, $36, $9F, 6, $A3	
000263F2 0373 8533 8D23 91          SME_vJmm3_526:	dc.b 3, $73, $85, $33, $8D, $23, $91	
000263F9 0373 9D03 A533 A6          SME_vJmm3_52D:	dc.b 3, $73, $9D, 3, $A5, $33, $A6	
00026400 0373 AA33 B223 B6          SME_vJmm3_534:	dc.b 3, $73, $AA, $33, $B2, $23, $B6	
00026407 04B3 B903 C603 C503 C7     SME_vJmm3_53B:	dc.b 4, $B3, $B9, 3, $C6, 3, $C5, 3, $C7	
00026410 0856 1113 C303 C503 C613+  SME_vJmm3_544:	dc.b 8, $56, $11, $13, $C3, 3, $C5, 3, $C6, $13, $BF, 6, 5, 6, 6, 3, $C7	
00026421 04B3 DA33 E603 EA03 EB     SME_vJmm3_555:	dc.b 4, $B3, $DA, $33, $E6, 3, $EA, 3, $EB	
0002642A 04B3 C833 D403 D803 D9     SME_vJmm3_55E:	dc.b 4, $B3, $C8, $33, $D4, 3, $D8, 3, $D9	
00026433 0583 EC13 F553 F713 FD03+  SME_vJmm3_567:	dc.b 5, $83, $EC, $13, $F5, $53, $F7, $13, $FD, 3, $FF	
0002643E 0584 0014 0953 F713 FD03+  SME_vJmm3_572:	dc.b 5, $84, 0, $14, 9, $53, $F7, $13, $FD, 3, $FF	
00026449 0284 0B74 14               SME_vJmm3_57D:	dc.b 2, $84, $B, $74, $14	
0002644E 0534 9824 9C34 9F34 A304+  SME_vJmm3_582:	dc.b 5, $34, $98, $24, $9C, $34, $9F, $34, $A3, 4, $A7	
00026459 0384 1C24 2514 28          SME_vJmm3_58D:	dc.b 3, $84, $1C, $24, $25, $14, $28	
00026460 0504 A834 A934 AD34 B124+  SME_vJmm3_594:	dc.b 5, 4, $A8, $34, $A9, $34, $AD, $34, $B1, $24, $B5	
0002646B 0284 2A74 33               SME_vJmm3_59F:	dc.b 2, $84, $2A, $74, $33	
00026470 03B7 DF17 EB27 ED          SME_vJmm3_5A4:	dc.b 3, $B7, $DF, $17, $EB, $27, $ED	
00026477 0384 1C24 3B14 3E          SME_vJmm3_5AB:	dc.b 3, $84, $1C, $24, $3B, $14, $3E	
0002647E 03B7 F017 FC27 FE          SME_vJmm3_5B2:	dc.b 3, $B7, $F0, $17, $FC, $27, $FE	
00026485 0254 40B4 46               SME_vJmm3_5B9:	dc.b 2, $54, $40, $B4, $46	
0002648A 0374 5214 5AB4 5C          SME_vJmm3_5BE:	dc.b 3, $74, $52, $14, $5A, $B4, $5C	
00026491 0B74 6814 7004 7924 7504+  SME_vJmm3_5C5:	dc.b $B, $74, $68, $14, $70, 4, $79, $24, $75, 4, $78, 4, $73, 4, $72, 4, $74, 4, $85, 4, $87, 4, $83	
000264A8 0674 7A14 7054 8204 7924+  SME_vJmm3_5DC:	dc.b 6, $74, $7A, $14, $70, $54, $82, 4, $79, $24, $75, 4, $78	
000264B5 0354 C9B4 CF10 6D          SME_vJmm3_5E9:	dc.b 3, $54, $C9, $B4, $CF, $10, $6D	
000264BC 0714 C334 C514 BE04 BD14+  SME_vJmm3_5F0:	dc.b 7, $14, $C3, $34, $C5, $14, $BE, 4, $BD, $14, $B8, $24, $BA, $24, $C0	
000264CB 02F4 DB24 EB               SME_vJmm3_5FF:	dc.b 2, $F4, $DB, $24, $EB	
000264D0 04B6 A416 B026 B206 B1     SME_vJmm3_604:	dc.b 4, $B6, $A4, $16, $B0, $26, $B2, 6, $B1	
000264D9 03B6 B516 C126 C3          SME_vJmm3_60D:	dc.b 3, $B6, $B5, $16, $C1, $26, $C3	
000264E0 03B9 D129 DD19 E0          SME_vJmm3_614:	dc.b 3, $B9, $D1, $29, $DD, $19, $E0	
000264E7 0427 6F37 7237 7627 7A     SME_vJmm3_61B:	dc.b 4, $27, $6F, $37, $72, $37, $76, $27, $7A	
000264F0 01F7 7E                    SME_vJmm3_624:	dc.b 1, $F7, $7E	
000264F3 01F7 8E                    SME_vJmm3_627:	dc.b 1, $F7, $8E	
000264F6 01F7 9E                    SME_vJmm3_62A:	dc.b 1, $F7, $9E	
000264F9 01F7 AE                    SME_vJmm3_62D:	dc.b 1, $F7, $AE	
000264FC 01F7 BE                    SME_vJmm3_630:	dc.b 1, $F7, $BE	
00026500 00                         		even
00026500 00                         		even
00026500                            
00026500                            ; ---------------------------------------------------------------------------
00026500                            ; Uncompressed graphics	- Sonic
00026500                            ; ---------------------------------------------------------------------------
00026500                            Art_Sonic:	incbin	"artunc\Sonic.bin"	; Sonic
0003CB00                            		even
0003CB00                            ; ---------------------------------------------------------------------------
0003CB00                            ; Compressed graphics - various
0003CB00                            ; ---------------------------------------------------------------------------
0003CB00                            Unc_GShield:	incbin	"artunc\Gold Shield.bin"
0003CE60                            		even
0003CE60                            Unc_RedShield:	incbin	"artunc\Red Shield.bin"
0003D1C0                            		even
0003D1C0                            Unc_SpShield:	incbin	"artunc\Gray Shield.bin"
0003D520                            		even
0003D520                            Unc_Shield:	incbin	"artunc\Shield.bin"
0003D880                            		even
0003D880                            Unc_Stars:	incbin	"artunc\Invincibility Stars.bin"
0003DD00                            		even
0003DD00                            
0003DD00                            Map_SSWalls:	include	"_maps\SS Walls.asm"
0003DD00                            ; ---------------------------------------------------------------------------
0003DD00                            ; Sprite mappings - walls of the special stage
0003DD00                            ; ---------------------------------------------------------------------------
0003DD00                            Map_SSWalls_internal:
0003DD00 0000                       		dc.w byte_2C584-Map_SSWalls_internal
0003DD02 0000                       		dc.w byte_2C58A-Map_SSWalls_internal
0003DD04 0000                       		dc.w byte_2C590-Map_SSWalls_internal
0003DD06 0000                       		dc.w byte_2C596-Map_SSWalls_internal
0003DD08 0000                       		dc.w byte_2C59C-Map_SSWalls_internal
0003DD0A 0000                       		dc.w byte_2C5A2-Map_SSWalls_internal
0003DD0C 0000                       		dc.w byte_2C5A8-Map_SSWalls_internal
0003DD0E 0000                       		dc.w byte_2C5AE-Map_SSWalls_internal
0003DD10 0000                       		dc.w byte_2C5B4-Map_SSWalls_internal
0003DD12 0000                       		dc.w byte_2C5BA-Map_SSWalls_internal
0003DD14 0000                       		dc.w byte_2C5C0-Map_SSWalls_internal
0003DD16 0000                       		dc.w byte_2C5C6-Map_SSWalls_internal
0003DD18 0000                       		dc.w byte_2C5CC-Map_SSWalls_internal
0003DD1A 0000                       		dc.w byte_2C5D2-Map_SSWalls_internal
0003DD1C 0000                       		dc.w byte_2C5D8-Map_SSWalls_internal
0003DD1E 0000                       		dc.w byte_2C5DE-Map_SSWalls_internal
0003DD20 01                         byte_2C584:	dc.b 1
0003DD21 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0003DD26 01                         byte_2C58A:	dc.b 1
0003DD27 F00F 0009 F0               		dc.b $F0, $F, 0, 9, $F0
0003DD2C 01                         byte_2C590:	dc.b 1
0003DD2D F00F 0019 F0               		dc.b $F0, $F, 0, $19, $F0
0003DD32 01                         byte_2C596:	dc.b 1
0003DD33 F00F 0029 F0               		dc.b $F0, $F, 0, $29, $F0
0003DD38 01                         byte_2C59C:	dc.b 1
0003DD39 F00F 0039 F0               		dc.b $F0, $F, 0, $39, $F0
0003DD3E 01                         byte_2C5A2:	dc.b 1
0003DD3F F00F 0049 F0               		dc.b $F0, $F, 0, $49, $F0
0003DD44 01                         byte_2C5A8:	dc.b 1
0003DD45 F00F 0059 F0               		dc.b $F0, $F, 0, $59, $F0
0003DD4A 01                         byte_2C5AE:	dc.b 1
0003DD4B F00F 0069 F0               		dc.b $F0, $F, 0, $69, $F0
0003DD50 01                         byte_2C5B4:	dc.b 1
0003DD51 F00F 0079 F0               		dc.b $F0, $F, 0, $79, $F0
0003DD56 01                         byte_2C5BA:	dc.b 1
0003DD57 F00F 0089 F0               		dc.b $F0, $F, 0, $89, $F0
0003DD5C 01                         byte_2C5C0:	dc.b 1
0003DD5D F00F 0099 F0               		dc.b $F0, $F, 0, $99, $F0
0003DD62 01                         byte_2C5C6:	dc.b 1
0003DD63 F00F 00A9 F0               		dc.b $F0, $F, 0, $A9, $F0
0003DD68 01                         byte_2C5CC:	dc.b 1
0003DD69 F00F 00B9 F0               		dc.b $F0, $F, 0, $B9, $F0
0003DD6E 01                         byte_2C5D2:	dc.b 1
0003DD6F F00F 00C9 F0               		dc.b $F0, $F, 0, $C9, $F0
0003DD74 01                         byte_2C5D8:	dc.b 1
0003DD75 F00F 00D9 F0               		dc.b $F0, $F, 0, $D9, $F0
0003DD7A 01                         byte_2C5DE:	dc.b 1
0003DD7B F00F 00E9 F0               		dc.b $F0, $F, 0, $E9, $F0
0003DD80                            		even
0003DD80                            		even
0003DD80                            
0003DD80                            ; ---------------------------------------------------------------------------
0003DD80                            ; Compressed graphics - special stage
0003DD80                            ; ---------------------------------------------------------------------------
0003DD80                            Nem_SSWalls:	incbin	"artnem\Special Walls.bin" ; special stage walls
0003E6B8                            		even
0003E6B8                            Eni_SSBg1:	incbin	"tilemaps\SS Background 1.bin" ; special stage background (mappings)
0003E7EC                            		even
0003E7EC                            Nem_SSBgFish:	incbin	"artnem\Special Birds & Fish.bin" ; special stage birds and fish background
0003F47C                            		even
0003F47C                            Eni_SSBg2:	incbin	"tilemaps\SS Background 2.bin" ; special stage background (mappings)
0003F77C                            		even
0003F77C                            Nem_SSBgCloud:	incbin	"artnem\Special Clouds.bin" ; special stage clouds background
0003FC70                            		even
0003FC70                            Nem_SSGOAL:	incbin	"artnem\Special GOAL.bin" ; special stage GOAL block
0003FD5E                            		even
0003FD5E                            Nem_SSRBlock:	incbin	"artnem\Special R.bin"	; special stage R block
0003FE2E                            		even
0003FE2E                            Nem_SS1UpBlock:	incbin	"artnem\Special 1UP.bin" ; special stage 1UP block
0003FF24                            		even
0003FF24                            Nem_SSEmStars:	incbin	"artnem\Special Emerald Twinkle.bin" ; special stage stars from a collected emerald
0003FF82                            		even
0003FF82                            Nem_SSRedWhite:	incbin	"artnem\Special Red-White.bin" ; special stage red/white block
00040014                            		even
00040014                            Nem_SSZone1:	incbin	"artnem\Special ZONE1.bin" ; special stage ZONE1 block
000400D6                            		even
000400D6                            Nem_SSZone2:	incbin	"artnem\Special ZONE2.bin" ; ZONE2 block
000401A4                            		even
000401A4                            Nem_SSZone3:	incbin	"artnem\Special ZONE3.bin" ; ZONE3 block
00040270                            		even
00040270                            Nem_SSZone4:	incbin	"artnem\Special ZONE4.bin" ; ZONE4 block
00040338                            		even
00040338                            Nem_SSZone5:	incbin	"artnem\Special ZONE5.bin" ; ZONE5 block
00040402                            		even
00040402                            Nem_SSZone6:	incbin	"artnem\Special ZONE6.bin" ; ZONE6 block
000404D2                            		even
000404D2                            Nem_SSUpDown:	incbin	"artnem\Special UP-DOWN.bin" ; special stage UP/DOWN block
000406C6                            		even
000406C6                            Nem_SSEmerald:	incbin	"artnem\Special Emeralds.bin" ; special stage chaos emeralds
0004082E                            		even
0004082E                            Nem_SSGhost:	incbin	"artnem\Special Ghost.bin" ; special stage ghost block
000408DE                            		even
000408DE                            Nem_SSWBlock:	incbin	"artnem\Special W.bin"	; special stage W block
000409B8                            		even
000409B8                            Nem_SSGlass:	incbin	"artnem\Special Glass.bin" ; special stage destroyable glass block
00040A3C                            		even
00040A3C                            Nem_ResultEm:	incbin	"artnem\Special Result Emeralds.bin" ; chaos emeralds on special stage results screen
00040BBA                            		even
00040BBA                            ; ---------------------------------------------------------------------------
00040BBA                            ; Compressed graphics - GHZ stuff
00040BBA                            ; ---------------------------------------------------------------------------
00040BBA                            Nem_Stalk:	incbin	"artnem\GHZ Flower Stalk.bin"
00040C1C                            		even
00040C1C                            Nem_Swing:	incbin	"artnem\GHZ Swinging Platform.bin"
00040D36                            		even
00040D36                            Nem_Bridge:	incbin	"artnem\GHZ Bridge.bin"
00040E54                            		even
00040E54                            Nem_GhzUnkBlock:incbin	"artnem\Unused - GHZ Block.bin"
00040E9C                            		even
00040E9C                            Nem_Ball:	incbin	"artnem\GHZ Giant Ball.bin"
0004103A                            		even
0004103A                            Nem_Spikes:	incbin	"artnem\Spikes.bin"
000410B6                            		even
000410B6                            Nem_GhzLog:	incbin	"artnem\Unused - GHZ Log.bin"
000412CA                            		even
000412CA                            Nem_SpikePole:	incbin	"artnem\GHZ Spiked Log.bin"
000413F6                            		even
000413F6                            Nem_PplRock:	incbin	"artnem\GHZ Purple Rock.bin"
0004154A                            		even
0004154A                            Nem_GhzWall1:	incbin	"artnem\GHZ Breakable Wall.bin"
000415FA                            		even
000415FA                            Nem_GhzWall2:	incbin	"artnem\GHZ Edge Wall.bin"
0004165A                            		even
0004165A                            ; ---------------------------------------------------------------------------
0004165A                            ; Compressed graphics - LZ stuff
0004165A                            ; ---------------------------------------------------------------------------
0004165A                            Nem_Water:	incbin	"artnem\LZ Water Surface.bin"
00041732                            		even
00041732                            Nem_Splash:	incbin	"artnem\LZ Water & Splashes.bin"
00041F26                            		even
00041F26                            Nem_LzSpikeBall:incbin	"artnem\LZ Spiked Ball & Chain.bin"
000420B8 00                         		even
000420B8                            Nem_FlapDoor:	incbin	"artnem\LZ Flapping Door.bin"
00042222                            		even
00042222                            Nem_Bubbles:	incbin	"artnem\LZ Bubbles & Countdown.bin"
00042862 00                         		even
00042862                            Nem_LzBlock3:	incbin	"artnem\LZ 32x16 Block.bin"
00042904 00                         		even
00042904                            Nem_LzDoor1:	incbin	"artnem\LZ Vertical Door.bin"
00042988                            		even
00042988                            Nem_Harpoon:	incbin	"artnem\LZ Harpoon.bin"
00042AEE 00                         		even
00042AEE                            Nem_LzPole:	incbin	"artnem\LZ Breakable Pole.bin"
00042B74 00                         		even
00042B74                            Nem_LzDoor2:	incbin	"artnem\LZ Horizontal Door.bin"
00042CE2                            		even
00042CE2                            Nem_LzWheel:	incbin	"artnem\LZ Wheel.bin"
000431C4                            		even
000431C4                            Nem_Gargoyle:	incbin	"artnem\LZ Gargoyle & Fireball.bin"
00043334                            		even
00043334                            Nem_LzBlock2:	incbin	"artnem\LZ Blocks.bin"
000435EC                            		even
000435EC                            Nem_LzPlatfm:	incbin	"artnem\LZ Rising Platform.bin"
00043732                            		even
00043732                            Nem_Cork:	incbin	"artnem\LZ Cork.bin"
0004385C                            		even
0004385C                            Nem_LzBlock1:	incbin	"artnem\LZ 32x32 Block.bin"
000439D8 00                         		even
000439D8                            ; ---------------------------------------------------------------------------
000439D8                            ; Compressed graphics - MZ stuff
000439D8                            ; ---------------------------------------------------------------------------
000439D8                            Nem_MzMetal:	incbin	"artnem\MZ Metal Blocks.bin"
00043C66                            		even
00043C66                            Nem_MzSwitch:	incbin	"artnem\MZ Switch.bin"
00043D24                            		even
00043D24                            Nem_MzGlass:	incbin	"artnem\MZ Green Glass Block.bin"
00043DFC                            		even
00043DFC                            Nem_UnkGrass:	incbin	"artnem\Unused - Grass.bin"
00043E50                            		even
00043E50                            Nem_MzFire:	incbin	"artnem\Fireballs.bin"
0004416E 00                         		even
0004416E                            Nem_Lava:	incbin	"artnem\MZ Lava.bin"
00044A84                            		even
00044A84                            Nem_MzBlock:	incbin	"artnem\MZ Green Pushable Block.bin"
00044BDC                            		even
00044BDC                            Nem_MzUnkBlock:	incbin	"artnem\Unused - MZ Background.bin"
00044C64                            		even
00044C64                            ; ---------------------------------------------------------------------------
00044C64                            ; Compressed graphics - SLZ stuff
00044C64                            ; ---------------------------------------------------------------------------
00044C64                            Nem_Seesaw:	incbin	"artnem\SLZ Seesaw.bin"
00044EA0                            		even
00044EA0                            Nem_SlzSpike:	incbin	"artnem\SLZ Little Spikeball.bin"
00044FE6                            		even
00044FE6                            Nem_Fan:	incbin	"artnem\SLZ Fan.bin"
0004522A                            		even
0004522A                            Nem_SlzWall:	incbin	"artnem\SLZ Breakable Wall.bin"
000452C6 00                         		even
000452C6                            Nem_Pylon:	incbin	"artnem\SLZ Pylon.bin"
000453A8                            		even
000453A8                            Nem_SlzSwing:	incbin	"artnem\SLZ Swinging Platform.bin"
0004558A                            		even
0004558A                            Nem_SlzBlock:	incbin	"artnem\SLZ 32x32 Block.bin"
00045696                            		even
00045696                            Nem_SlzCannon:	incbin	"artnem\SLZ Cannon.bin"
0004573A                            		even
0004573A                            ; ---------------------------------------------------------------------------
0004573A                            ; Compressed graphics - SYZ stuff
0004573A                            ; ---------------------------------------------------------------------------
0004573A                            Nem_Bumper:	incbin	"artnem\SYZ Bumper.bin"
000458CA                            		even
000458CA                            Nem_SyzSpike2:	incbin	"artnem\SYZ Small Spikeball.bin"
0004592C                            		even
0004592C                            Nem_LzSwitch:	incbin	"artnem\Switch.bin"
000459FC 00                         		even
000459FC                            Nem_SyzSpike1:	incbin	"artnem\SYZ Large Spikeball.bin"
00045C8A                            		even
00045C8A                            ; ---------------------------------------------------------------------------
00045C8A                            ; Compressed graphics - SBZ stuff
00045C8A                            ; ---------------------------------------------------------------------------
00045C8A                            Nem_SbzWheel1:	incbin	"artnem\SBZ Running Disc.bin"
00045CDE                            		even
00045CDE                            Nem_SbzWheel2:	incbin	"artnem\SBZ Junction Wheel.bin"
00045F7A                            		even
00045F7A                            Nem_Cutter:	incbin	"artnem\SBZ Pizza Cutter.bin"
0004616A                            		even
0004616A                            Nem_Stomper:	incbin	"artnem\SBZ Stomper.bin"
00046308                            		even
00046308                            Nem_SpinPform:	incbin	"artnem\SBZ Spinning Platform.bin"
00046638                            		even
00046638                            Nem_TrapDoor:	incbin	"artnem\SBZ Trapdoor.bin"
00046816                            		even
00046816                            Nem_SbzFloor:	incbin	"artnem\SBZ Collapsing Floor.bin"
0004686E                            		even
0004686E                            Nem_Electric:	incbin	"artnem\SBZ Electrocuter.bin"
00046A20 00                         		even
00046A20                            Nem_SbzBlock:	incbin	"artnem\SBZ Vanishing Block.bin"
00046BF0 00                         		even
00046BF0                            Nem_FlamePipe:	incbin	"artnem\SBZ Flaming Pipe.bin"
00046D7E                            		even
00046D7E                            Nem_SbzDoor1:	incbin	"artnem\SBZ Small Vertical Door.bin"
00046E18                            		even
00046E18                            Nem_SlideFloor:	incbin	"artnem\SBZ Sliding Floor Trap.bin"
00046E70                            		even
00046E70                            Nem_SbzDoor2:	incbin	"artnem\SBZ Large Horizontal Door.bin"
00046F6C                            		even
00046F6C                            Nem_Girder:	incbin	"artnem\SBZ Crushing Girder.bin"
00047082                            		even
00047082                            ; ---------------------------------------------------------------------------
00047082                            ; Compressed graphics - enemies
00047082                            ; ---------------------------------------------------------------------------
00047082                            Nem_BallHog:	incbin	"artnem\Enemy Ball Hog.bin"
000474CA 00                         		even
000474CA                            Nem_Crabmeat:	incbin	"artnem\Enemy Crabmeat.bin"
000479BA 00                         		even
000479BA                            Nem_Mozzietron:	incbin	"artnem\Enemy Mozzietron.bin"
00047C9E 00                         		even
00047C9E                            Nem_Buzz:	incbin	"artnem\Enemy Buzz Bomber.bin"
00048012 00                         		even
00048012                            Nem_UnkExplode:	incbin	"artnem\Unused - Explosion.bin"
000481FA                            		even
000481FA                            Nem_Burrobot:	incbin	"artnem\Enemy Burrobot.bin"
00048928 00                         		even
00048928                            Nem_Chopper:	incbin	"artnem\Enemy Chopper.bin"
00048BB0 00                         		even
00048BB0                            Nem_Jaws:	incbin	"artnem\Enemy Jaws.bin"
00048E4C 00                         		even
00048E4C                            Nem_Roller:	incbin	"artnem\Enemy Roller.bin"
00049420                            		even
00049420                            Nem_Motobug:	incbin	"artnem\Enemy Motobug.bin"
000496B2                            		even
000496B2                            Nem_Newtron:	incbin	"artnem\Enemy Newtron.bin"
00049CFC 00                         		even
00049CFC                            Nem_Yadrin:	incbin	"artnem\Enemy Yadrin.bin"
0004A138                            		even
0004A138                            Nem_Basaran:	incbin	"artnem\Enemy Basaran.bin"
0004A446 00                         		even
0004A446                            Nem_Splats:	incbin	"artnem\Enemy Splats.bin"
0004A6A6                            		even
0004A6A6                            Nem_Bomb:	incbin	"artnem\Enemy Bomb.bin"
0004A9A4                            		even
0004A9A4                            Nem_Orbinaut:	incbin	"artnem\Enemy Orbinaut.bin"
0004ABD0 00                         		even
0004ABD0                            Nem_Cater:	incbin	"artnem\Enemy Caterkiller.bin"
0004AD5E                            		even
0004AD5E                            ; ---------------------------------------------------------------------------
0004AD5E                            ; Compressed graphics - various
0004AD5E                            ; ---------------------------------------------------------------------------
0004AD5E                            Nem_TitleCard:	incbin	"artnem\Title Cards.bin"
0004B3AC 00                         		even
0004B3AC                            Nem_Hud:	incbin	"artnem\HUD.bin"	; HUD (rings, time, score)
0004B524 00                         		even
0004B524                            Nem_Lives:	incbin	"artnem\HUD - Life Counter Icon.bin"
0004B648                            		even
0004B648                            Nem_Ring:	incbin	"artnem\Rings.bin"
0004B79C 00                         		even
0004B79C                            Nem_Monitors:	incbin	"artnem\Monitors.bin"
0004BC46                            		even
0004BC46                            Nem_Explode:	incbin	"artnem\Explosion.bin"
0004C2BA                            		even
0004C2BA                            Nem_Points:	incbin	"artnem\Points.bin"	; points from destroyed enemy or object
0004C354 00                         		even
0004C354                            Nem_GameOver:	incbin	"artnem\Game Over.bin"	; game over / time over
0004C4E6                            		even
0004C4E6                            Nem_HSpring:	incbin	"artnem\Spring Horizontal.bin"
0004C604 00                         		even
0004C604                            Nem_VSpring:	incbin	"artnem\Spring Vertical.bin"
0004C6F0                            		even
0004C6F0                            Nem_SignPost:	incbin	"artnem\Signpost.bin"	; end of level signpost
0004CC68 00                         		even
0004CC68                            Nem_Lamp:	incbin	"artnem\Lamppost.bin"
0004CD52                            		even
0004CD52                            Nem_BigFlash:	incbin	"artnem\Giant Ring Flash.bin"
0004CEC6                            		even
0004CEC6                            Nem_Bonus:	incbin	"artnem\Hidden Bonuses.bin" ; hidden bonuses at end of a level
0004D24E 00                         		even
0004D24E                            ; ---------------------------------------------------------------------------
0004D24E                            ; Compressed graphics - continue screen
0004D24E                            ; ---------------------------------------------------------------------------
0004D24E                            Nem_ContSonic:	incbin	"artnem\Continue Screen Sonic.bin"
0004D522 00                         		even
0004D522                            Nem_MiniSonic:	incbin	"artnem\Continue Screen Stuff.bin"
0004D7BC 00                         		even
0004D7BC                            ; ---------------------------------------------------------------------------
0004D7BC                            ; Compressed graphics - animals
0004D7BC                            ; ---------------------------------------------------------------------------
0004D7BC                            Nem_Rabbit:	incbin	"artnem\Animal Rabbit.bin"
0004D914                            		even
0004D914                            Nem_Chicken:	incbin	"artnem\Animal Chicken.bin"
0004DA70                            		even
0004DA70                            Nem_BlackBird:	incbin	"artnem\Animal Blackbird.bin"
0004DBEC                            		even
0004DBEC                            Nem_Seal:	incbin	"artnem\Animal Seal.bin"
0004DD08                            		even
0004DD08                            Nem_Pig:	incbin	"artnem\Animal Pig.bin"
0004DE82                            		even
0004DE82                            Nem_Flicky:	incbin	"artnem\Animal Flicky.bin"
0004DFBC                            		even
0004DFBC                            Nem_Squirrel:	incbin	"artnem\Animal Squirrel.bin"
0004E118                            		even
0004E118                            ; ---------------------------------------------------------------------------
0004E118                            ; Compressed graphics - primary patterns and block mappings
0004E118                            ; ---------------------------------------------------------------------------
0004E118                            Blk16_GHZ:	incbin	"map16\GHZ.bin"
0004EB1A                            		even
0004EB1A                            Nem_GHZ_1st:	incbin	"artnem\8x8 - GHZ1.bin"	; GHZ primary patterns
000503E8                            		even
000503E8                            Nem_GHZ_2nd:	incbin	"artnem\8x8 - GHZ2.bin"	; GHZ secondary patterns
0005197C                            		even
0005197C                            Blk256_GHZ:	incbin	"map256\GHZ.bin"
00053D5C                            		even
00053D5C                            Blk16_TS:	incbin	"map16\TS.bin"
00053FE0                            		even
00053FE0                            Nem_TS_1st:	incbin	"artnem\8x8 - TS1.bin"	; GHZ primary patterns
0005511E                            		even
0005511E                            Blk256_TS:	incbin	"map256\TS.bin"
00055CCC                            		even
00055CCC                            Blk16_LZ:	incbin	"map16\LZ.bin"
00056F48                            		even
00056F48                            Nem_LZ:		incbin	"artnem\8x8 - LZ.bin"	; LZ primary patterns
0005A41A                            		even
0005A41A                            Blk256_LZ:	incbin	"map256\LZ.bin"
0005D8D8                            		even
0005D8D8                            Blk16_MZ:	incbin	"map16\MZ.bin"
0005E0C6                            		even
0005E0C6                            Nem_MZ:		incbin	"artnem\8x8 - MZ.bin"	; MZ primary patterns
00060B5E                            		even
00060B5E                            		incbin	"map256\MZ (JP1).bin"
00062B2C                            		even
00062B2C                            Blk16_SLZ:	incbin	"map16\SLZ.bin"
000631AE                            		even
000631AE                            Nem_SLZ:	incbin	"artnem\8x8 - SLZ.bin"	; SLZ primary patterns
00066C18                            		even
00066C18                            Blk256_SLZ:	incbin	"map256\SLZ.bin"
00069022                            		even
00069022                            Blk16_SYZ:	incbin	"map16\SYZ.bin"
00069BA8                            		even
00069BA8                            Nem_SYZ:	incbin	"artnem\8x8 - SYZ.bin"	; SYZ primary patterns
0006CF98                            		even
0006CF98                            Blk256_SYZ:	incbin	"map256\SYZ.bin"
0006E354                            		even
0006E354                            Blk16_SBZ:	incbin	"map16\SBZ.bin"
0006EF4E                            		even
0006EF4E                            Nem_SBZ:	incbin	"artnem\8x8 - SBZ.bin"	; SBZ primary patterns
00071790                            		even
00071790                            		incbin	"map256\SBZ (JP1).bin"
0007231C                            		even
0007231C                            ; ---------------------------------------------------------------------------
0007231C                            ; Compressed graphics - bosses and ending sequence
0007231C                            ; ---------------------------------------------------------------------------
0007231C                            Nem_Eggman:	incbin	"artnem\Boss - Main.bin"
00072B98 00                         		even
00072B98                            Nem_Weapons:	incbin	"artnem\Boss - Weapons.bin"
00072E82                            		even
00072E82                            Nem_Prison:	incbin	"artnem\Prison Capsule.bin"
00073706                            		even
00073706                            Nem_Sbz2Eggman:	incbin	"artnem\Boss - Eggman in SBZ2 & FZ.bin"
00073F44 00                         		even
00073F44                            Nem_FzBoss:	incbin	"artnem\Boss - Final Zone.bin"
00074712 00                         		even
00074712                            Nem_FzEggman:	incbin	"artnem\Boss - Eggman after FZ Fight.bin"
00074C3A                            		even
00074C3A                            Nem_Exhaust:	incbin	"artnem\Boss - Exhaust Flame.bin"
00074D5A                            		even
00074D5A                            Nem_EndEm:	incbin	"artnem\Ending - Emeralds.bin"
00074F62 00                         		even
00074F62                            Nem_EndSonic:	incbin	"artnem\Ending - Sonic.bin"
00076140                            		even
00076140                            Nem_TryAgain:	incbin	"artnem\Ending - Try Again.bin"
00076A84                            		even
00076A84                            		even
00076A84                            Kos_EndFlowers:	incbin	"artkos\Flowers at Ending.bin" ; ending sequence animated flowers
00077014                            		even
00077014                            Nem_EndFlower:	incbin	"artnem\Ending - Flowers.bin"
0007729C                            		even
0007729C                            Nem_CreditText:	incbin	"artnem\Ending - Credits.bin"
0007789A                            		even
0007789A                            Nem_EndStH:	incbin	"artnem\Ending - StH Logo.bin"
00077B22                            		even
00077B22                            
00077B22 FFFF FFFF FFFF FFFF FFFF+  		dcb.b $40,$FF
00077B62                            ; ---------------------------------------------------------------------------
00077B62                            ; Collision data
00077B62                            ; ---------------------------------------------------------------------------
00077B62                            AngleMap:	incbin	"collide\Angle Map.bin"
00077C62                            		even
00077C62                            CollArray1:	incbin	"collide\Collision Array (Normal).bin"
00078C62                            		even
00078C62                            CollArray2:	incbin	"collide\Collision Array (Rotated).bin"
00079C62                            		even
00079C62                            Col_GHZ:	incbin	"collide\GHZ.bin"	; GHZ index
00079E20 00                         		even
00079E20                            Col_LZ:		incbin	"collide\LZ.bin"	; LZ index
0007A0DE                            		even
0007A0DE                            Col_MZ:		incbin	"collide\MZ.bin"	; MZ index
0007A258 00                         		even
0007A258                            Col_SLZ:	incbin	"collide\SLZ.bin"	; SLZ index
0007A44C                            		even
0007A44C                            Col_SYZ:	incbin	"collide\SYZ.bin"	; SYZ index
0007A638 00                         		even
0007A638                            Col_SBZ:	incbin	"collide\SBZ.bin"	; SBZ index
0007A808 00                         		even
0007A808                            ; ---------------------------------------------------------------------------
0007A808                            ; Special Stage layouts
0007A808                            ; ---------------------------------------------------------------------------
0007A808                            SS_1:		incbin	"sslayout\1.bin"
0007AA82                            		even
0007AA82                            SS_2:		incbin	"sslayout\2.bin"
0007AE94                            		even
0007AE94                            SS_3:		incbin	"sslayout\3.bin"
0007B1F0                            		even
0007B1F0                            SS_4:		incbin	"sslayout\4.bin"
0007B6CA                            		even
0007B6CA                            	SS_5:		incbin	"sslayout\5 (JP1).bin"
0007BB7A                            			even
0007BB7A                            	SS_6:		incbin	"sslayout\6 (JP1).bin"
0007BE6C                            		even
0007BE6C                            ; ---------------------------------------------------------------------------
0007BE6C                            ; Animated uncompressed graphics
0007BE6C                            ; ---------------------------------------------------------------------------
0007BE6C                            Art_GhzWater:	incbin	"artunc\GHZ Waterfall.bin"
0007C06C                            		even
0007C06C                            Art_GhzFlower1:	incbin	"artunc\GHZ Flower Large.bin"
0007C46C                            		even
0007C46C                            Art_GhzFlower2:	incbin	"artunc\GHZ Flower Small.bin"
0007C8EC                            		even
0007C8EC                            Art_MzLava1:	incbin	"artunc\MZ Lava Surface.bin"
0007CBEC                            		even
0007CBEC                            Art_MzLava2:	incbin	"artunc\MZ Lava.bin"
0007D1EC                            		even
0007D1EC                            Art_MzTorch:	incbin	"artunc\MZ Background Torch.bin"
0007D4EC                            		even
0007D4EC                            Art_SbzSmoke:	incbin	"artunc\SBZ Background Smoke.bin"
0007DF6C                            		even
0007DF6C                            
0007DF6C                            ; ---------------------------------------------------------------------------
0007DF6C                            ; Level	layout index
0007DF6C                            ; ---------------------------------------------------------------------------
0007DF6C                            Level_Index:
0007DF6C                            		; GHZ
0007DF6C 0000 0000 0000             		dc.w Level_GHZ1-Level_Index, Level_GHZbg-Level_Index, byte_68D70-Level_Index
0007DF72 0000 0000 0000             		dc.w Level_GHZ2-Level_Index, Level_GHZbg-Level_Index, byte_68E3C-Level_Index
0007DF78 0000 0000 0000             		dc.w Level_GHZ3-Level_Index, Level_GHZbg-Level_Index, byte_68F84-Level_Index
0007DF7E 0000 0000 0000             		dc.w byte_68F88-Level_Index, byte_68F88-Level_Index, byte_68F88-Level_Index
0007DF84                            		; LZ
0007DF84 0000 0000 0000             		dc.w Level_LZ1-Level_Index, Level_LZbg-Level_Index, byte_69190-Level_Index
0007DF8A 0000 0000 0000             		dc.w Level_LZ2-Level_Index, Level_LZbg-Level_Index, byte_6922E-Level_Index
0007DF90 0000 0000 0000             		dc.w Level_LZ3-Level_Index, Level_LZbg-Level_Index, byte_6934C-Level_Index
0007DF96 0000 0000 0000             		dc.w Level_SBZ3-Level_Index, Level_LZbg-Level_Index, byte_6940A-Level_Index
0007DF9C                            		; MZ
0007DF9C 0000 0000 0000             		dc.w Level_MZ1-Level_Index, Level_MZ1bg-Level_Index, Level_MZ1-Level_Index
0007DFA2 0000 0000 0000             		dc.w Level_MZ2-Level_Index, Level_MZ2bg-Level_Index, byte_6965C-Level_Index
0007DFA8 0000 0000 0000             		dc.w Level_MZ3-Level_Index, Level_MZ3bg-Level_Index, byte_697E6-Level_Index
0007DFAE 0000 0000 0000             		dc.w byte_697EA-Level_Index, byte_697EA-Level_Index, byte_697EA-Level_Index
0007DFB4                            		; SLZ
0007DFB4 0000 0000 0000             		dc.w Level_SLZ1-Level_Index, Level_SLZbg-Level_Index, byte_69B84-Level_Index
0007DFBA 0000 0000 0000             		dc.w Level_SLZ2-Level_Index, Level_SLZbg-Level_Index, byte_69B84-Level_Index
0007DFC0 0000 0000 0000             		dc.w Level_SLZ3-Level_Index, Level_SLZbg-Level_Index, byte_69B84-Level_Index
0007DFC6 0000 0000 0000             		dc.w byte_69B84-Level_Index, byte_69B84-Level_Index, byte_69B84-Level_Index
0007DFCC                            		; SYZ
0007DFCC 0000 0000 0000             		dc.w Level_SYZ1-Level_Index, Level_SYZbg-Level_Index, byte_69C7E-Level_Index
0007DFD2 0000 0000 0000             		dc.w Level_SYZ2-Level_Index, Level_SYZbg-Level_Index, byte_69D86-Level_Index
0007DFD8 0000 0000 0000             		dc.w Level_SYZ3-Level_Index, Level_SYZbg-Level_Index, byte_69EE4-Level_Index
0007DFDE 0000 0000 0000             		dc.w byte_69EE8-Level_Index, byte_69EE8-Level_Index, byte_69EE8-Level_Index
0007DFE4                            		; SBZ
0007DFE4 0000 0000 0000             		dc.w Level_SBZ1-Level_Index, Level_SBZ1bg-Level_Index, Level_SBZ1bg-Level_Index
0007DFEA 0000 0000 0000             		dc.w Level_SBZ2-Level_Index, Level_SBZ2bg-Level_Index, Level_SBZ2bg-Level_Index
0007DFF0 0000 0000 0000             		dc.w Level_SBZ2-Level_Index, Level_SBZ2bg-Level_Index, byte_6A2F8-Level_Index
0007DFF6 0000 0000 0000             		dc.w byte_6A2FC-Level_Index, byte_6A2FC-Level_Index, byte_6A2FC-Level_Index
0007DFFC                            		; Ending
0007DFFC 0000 0000 0000             		dc.w Level_End-Level_Index, Level_GHZbg-Level_Index, byte_6A320-Level_Index
0007E002 0000 0000 0000             		dc.w Level_End-Level_Index, Level_GHZbg-Level_Index, byte_6A320-Level_Index
0007E008 0000 0000 0000             		dc.w byte_6A320-Level_Index, byte_6A320-Level_Index, byte_6A320-Level_Index
0007E00E 0000 0000 0000             		dc.w byte_6A320-Level_Index, byte_6A320-Level_Index, byte_6A320-Level_Index
0007E014                            
0007E014                            Level_GHZ1:	incbin	"levels\ghz1.bin"
0007E246                            		even
0007E246 0000 0000                  byte_68D70:	dc.b 0,	0, 0, 0
0007E24A                            Level_GHZ2:	incbin	"levels\ghz2.bin"
0007E36C                            		even
0007E36C 0000 0000                  byte_68E3C:	dc.b 0,	0, 0, 0
0007E370                            Level_GHZ3:	incbin	"levels\ghz3.bin"
0007E492                            		even
0007E492                            Level_GHZbg:	incbin	"levels\ghzbg.bin"
0007E4D4                            		even
0007E4D4 0000 0000                  byte_68F84:	dc.b 0,	0, 0, 0
0007E4D8 0000 0000                  byte_68F88:	dc.b 0,	0, 0, 0
0007E4DC                            
0007E4DC                            Level_LZ1:	incbin	"levels\lz1.bin"
0007E59E                            		even
0007E59E                            Level_LZbg:	incbin	"levels\lzbg.bin"
0007E6A0                            		even
0007E6A0 0000 0000                  byte_69190:	dc.b 0,	0, 0, 0
0007E6A4                            Level_LZ2:	incbin	"levels\lz2.bin"
0007E73E                            		even
0007E73E 0000 0000                  byte_6922E:	dc.b 0,	0, 0, 0
0007E742                            Level_LZ3:	incbin	"levels\lz3.bin"
0007E85C                            		even
0007E85C 0000 0000                  byte_6934C:	dc.b 0,	0, 0, 0
0007E860                            Level_SBZ3:	incbin	"levels\sbz3.bin"
0007E91A                            		even
0007E91A 0000 0000                  byte_6940A:	dc.b 0,	0, 0, 0
0007E91E                            
0007E91E                            Level_MZ1:	incbin	"levels\mz1.bin"
0007EA10                            		even
0007EA10                            Level_MZ1bg:	incbin	"levels\mz1bg.bin"
0007EB32                            		even
0007EB32                            Level_MZ2:	incbin	"levels\mz2.bin"
0007EC24                            		even
0007EC24                            Level_MZ2bg:	incbin	"levels\mz2bg.bin"
0007ED46                            		even
0007ED46 0000 0000                  byte_6965C:	dc.b 0,	0, 0, 0
0007ED4A                            Level_MZ3:	incbin	"levels\mz3.bin"
0007EDE4                            		even
0007EDE4                            Level_MZ3bg:	incbin	"levels\mz3bg.bin"
0007EF06                            		even
0007EF06 0000 0000                  byte_697E6:	dc.b 0,	0, 0, 0
0007EF0A 0000 0000                  byte_697EA:	dc.b 0,	0, 0, 0
0007EF0E                            
0007EF0E                            Level_SLZ1:	incbin	"levels\slz1.bin"
0007F020                            		even
0007F020                            Level_SLZbg:	incbin	"levels\slzbg.bin"
0007F09A                            		even
0007F09A                            Level_SLZ2:	incbin	"levels\slz2.bin"
0007F18A                            		even
0007F18A                            Level_SLZ3:	incbin	"levels\slz3.bin"
0007F2A4                            		even
0007F2A4 0000 0000                  byte_69B84:	dc.b 0,	0, 0, 0
0007F2A8                            
0007F2A8                            Level_SYZ1:	incbin	"levels\syz1.bin"
0007F3AC                            		even
0007F3AC                            		incbin	"levels\syzbg (JP1).bin"
0007F3E6                            		even
0007F3E6 0000 0000                  byte_69C7E:	dc.b 0,	0, 0, 0
0007F3EA                            Level_SYZ2:	incbin	"levels\syz2.bin"
0007F4EE                            		even
0007F4EE 0000 0000                  byte_69D86:	dc.b 0,	0, 0, 0
0007F4F2                            Level_SYZ3:	incbin	"levels\syz3.bin"
0007F64C 00                         		even
0007F64C 0000 0000                  byte_69EE4:	dc.b 0,	0, 0, 0
0007F650 0000 0000                  byte_69EE8:	dc.b 0,	0, 0, 0
0007F654                            
0007F654                            Level_SBZ1:	incbin	"levels\sbz1.bin"
0007F776                            		even
0007F776                            Level_SBZ1bg:	incbin	"levels\sbz1bg.bin"
0007F7B4                            		even
0007F7B4                            Level_SBZ2:	incbin	"levels\sbz2.bin"
0007F8F6                            		even
0007F8F6                            Level_SBZ2bg:	incbin	"levels\sbz2bg.bin"
0007FA60                            		even
0007FA60 0000 0000                  byte_6A2F8:	dc.b 0,	0, 0, 0
0007FA64 0000 0000                  byte_6A2FC:	dc.b 0,	0, 0, 0
0007FA68                            Level_End:	incbin	"levels\ending.bin"
0007FA98 00                         		even
0007FA98 0000 0000                  byte_6A320:	dc.b 0,	0, 0, 0
0007FA9C                            
0007FA9C                            
0007FA9C                            Art_BigRing:	incbin	"artunc\Giant Ring.bin"
000806DC                            		even
000806DC                            
00080700                            
00080700                            ; ---------------------------------------------------------------------------
00080700                            ; Sprite locations index
00080700                            ; ---------------------------------------------------------------------------
00080700                            ObjPos_Index:
00080700                            		; GHZ
00080700 0000 0000                  		dc.w ObjPos_GHZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00080704 0000 0000                  		dc.w ObjPos_GHZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
00080708 0000 0000                  		dc.w ObjPos_GHZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
0008070C 0000 0000                  		dc.w ObjPos_GHZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00080710                            		; LZ
00080710 0000 0000                  		dc.w ObjPos_LZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00080714 0000 0000                  		dc.w ObjPos_LZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
00080718 0000 0000                  		dc.w ObjPos_LZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
0008071C 0000 0000                  		dc.w ObjPos_SBZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
00080720                            		; MZ
00080720 0000 0000                  		dc.w ObjPos_MZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00080724 0000 0000                  		dc.w ObjPos_MZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
00080728 0000 0000                  		dc.w ObjPos_MZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
0008072C 0000 0000                  		dc.w ObjPos_MZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00080730                            		; SLZ
00080730 0000 0000                  		dc.w ObjPos_SLZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00080734 0000 0000                  		dc.w ObjPos_SLZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
00080738 0000 0000                  		dc.w ObjPos_SLZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
0008073C 0000 0000                  		dc.w ObjPos_SLZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00080740                            		; SYZ
00080740 0000 0000                  		dc.w ObjPos_SYZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00080744 0000 0000                  		dc.w ObjPos_SYZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
00080748 0000 0000                  		dc.w ObjPos_SYZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
0008074C 0000 0000                  		dc.w ObjPos_SYZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00080750                            		; SBZ
00080750 0000 0000                  		dc.w ObjPos_SBZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00080754 0000 0000                  		dc.w ObjPos_SBZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
00080758 0000 0000                  		dc.w ObjPos_FZ-ObjPos_Index, ObjPos_Null-ObjPos_Index
0008075C 0000 0000                  		dc.w ObjPos_SBZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00080760                            		; Ending
00080760 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
00080764 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
00080768 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
0008076C 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
00080770                            		; --- Put extra object data here. ---
00080770                            ObjPosLZPlatform_Index:
00080770 0000 0000                  		dc.w ObjPos_LZ1pf1-ObjPos_Index, ObjPos_LZ1pf2-ObjPos_Index
00080774 0000 0000                  		dc.w ObjPos_LZ2pf1-ObjPos_Index, ObjPos_LZ2pf2-ObjPos_Index
00080778 0000 0000                  		dc.w ObjPos_LZ3pf1-ObjPos_Index, ObjPos_LZ3pf2-ObjPos_Index
0008077C 0000 0000                  		dc.w ObjPos_LZ1pf1-ObjPos_Index, ObjPos_LZ1pf2-ObjPos_Index
00080780                            ObjPosSBZPlatform_Index:
00080780 0000 0000                  		dc.w ObjPos_SBZ1pf1-ObjPos_Index, ObjPos_SBZ1pf2-ObjPos_Index
00080784 0000 0000                  		dc.w ObjPos_SBZ1pf3-ObjPos_Index, ObjPos_SBZ1pf4-ObjPos_Index
00080788 0000 0000                  		dc.w ObjPos_SBZ1pf5-ObjPos_Index, ObjPos_SBZ1pf6-ObjPos_Index
0008078C 0000 0000                  		dc.w ObjPos_SBZ1pf1-ObjPos_Index, ObjPos_SBZ1pf2-ObjPos_Index
00080790 FFFF 0000 0000             		dc.b $FF, $FF, 0, 0, 0,	0
00080796                            ObjPos_GHZ1:	incbin	"objpos\ghz1.bin"
00080DF6                            		even
00080DF6                            ObjPos_GHZ2:	incbin	"objpos\ghz2.bin"
00081246                            		even
00081246                            		incbin	"objpos\ghz3 (JP1).bin"
000815C4                            		even
000815C4                            		incbin	"objpos\lz1 (JP1).bin"
000815FA                            		even
000815FA                            ObjPos_LZ2:	incbin	"objpos\lz2.bin"
0008193C                            		even
0008193C                            		incbin	"objpos\lz3 (JP1).bin"
00081F00                            		even
00081F00                            ObjPos_SBZ3:	incbin	"objpos\sbz3.bin"
00082476                            		even
00082476                            ObjPos_LZ1pf1:	incbin	"objpos\lz1pf1.bin"
000824A8                            		even
000824A8                            ObjPos_LZ1pf2:	incbin	"objpos\lz1pf2.bin"
000824DA                            		even
000824DA                            ObjPos_LZ2pf1:	incbin	"objpos\lz2pf1.bin"
0008250C                            		even
0008250C                            ObjPos_LZ2pf2:	incbin	"objpos\lz2pf2.bin"
0008253E                            		even
0008253E                            ObjPos_LZ3pf1:	incbin	"objpos\lz3pf1.bin"
00082588                            		even
00082588                            ObjPos_LZ3pf2:	incbin	"objpos\lz3pf2.bin"
000825C6                            		even
000825C6                            		incbin	"objpos\mz1 (JP1).bin"
00082BA8                            		even
00082BA8                            ObjPos_MZ2:	incbin	"objpos\mz2.bin"
00082F8C                            		even
00082F8C                            ObjPos_MZ3:	incbin	"objpos\mz3.bin"
000831E4                            		even
000831E4                            ObjPos_SLZ1:	incbin	"objpos\slz1.bin"
00083718                            		even
00083718                            ObjPos_SLZ2:	incbin	"objpos\slz2.bin"
00083B86                            		even
00083B86                            ObjPos_SLZ3:	incbin	"objpos\slz3.bin"
00084168                            		even
00084168                            ObjPos_SYZ1:	incbin	"objpos\syz1.bin"
000841C8                            		even
000841C8                            ObjPos_SYZ2:	incbin	"objpos\syz2.bin"
000841F2                            		even
000841F2                            		incbin	"objpos\syz3 (JP1).bin"
00084222                            		even
00084222                            		incbin	"objpos\sbz1 (JP1).bin"
0008426A                            		even
0008426A                            ObjPos_SBZ2:	incbin	"objpos\sbz2.bin"
00084294                            		even
00084294                            ObjPos_FZ:	incbin	"objpos\fz.bin"
000842D0                            		even
000842D0                            ObjPos_SBZ1pf1:	incbin	"objpos\sbz1pf1.bin"
00084302                            		even
00084302                            ObjPos_SBZ1pf2:	incbin	"objpos\sbz1pf2.bin"
00084334                            		even
00084334                            ObjPos_SBZ1pf3:	incbin	"objpos\sbz1pf3.bin"
00084366                            		even
00084366                            ObjPos_SBZ1pf4:	incbin	"objpos\sbz1pf4.bin"
00084398                            		even
00084398                            ObjPos_SBZ1pf5:	incbin	"objpos\sbz1pf5.bin"
000843CA                            		even
000843CA                            ObjPos_SBZ1pf6:	incbin	"objpos\sbz1pf6.bin"
00084402                            		even
00084402                            ObjPos_End:	incbin	"objpos\ending.bin"
0008455E                            		even
0008455E FFFF 0000 0000             ObjPos_Null:	dc.b $FF, $FF, 0, 0, 0,	0
00084564                            
00084564                            		dcb.b $63C,$FF
00084BA0                            		;dcb.b ($10000-(*%$10000))-(EndOfRom-SoundDriver),$FF
00084BA0                            
00084BA0                            SoundDriver:	include "s1.sounddriver.asm"
00084BA0                            ; ---------------------------------------------------------------------------
00084BA0                            ; Modified (early?) SMPS 68k Type 1b
00084BA0                            ; ---------------------------------------------------------------------------
00084BA0                            ; Go_SoundTypes:
00084BA0 0000 0000                  Go_SoundPriorities:	dc.l SoundPriorities
00084BA4                            ; Go_SoundD0:
00084BA4 0000 0000                  Go_SpecSoundIndex:	dc.l SpecSoundIndex
00084BA8 0000 0000                  Go_MusicIndex:		dc.l MusicIndex
00084BAC 0000 0000                  Go_SoundIndex:		dc.l SoundIndex
00084BB0                            ; off_719A0:
00084BB0 0000 0000                  Go_SpeedUpIndex:	dc.l SpeedUpIndex
00084BB4 0000 0000                  Go_PSGIndex:		dc.l PSG_Index
00084BB8                            ; ---------------------------------------------------------------------------
00084BB8                            ; PSG instruments used in music
00084BB8                            ; ---------------------------------------------------------------------------
00084BB8                            PSG_Index:
00084BB8 0000 0000 0000 0000 0000+  		dc.l PSG1, PSG2, PSG3
00084BC4 0000 0000 0000 0000 0000+  		dc.l PSG4, PSG5, PSG6
00084BD0 0000 0000 0000 0000 0000+  		dc.l PSG7, PSG8, PSG9
00084BDC                            PSG1:		incbin	"sound/psg/psg1.bin"
00084BF3                            PSG2:		incbin	"sound/psg/psg2.bin"
00084BFA                            PSG3:		incbin	"sound/psg/psg3.bin"
00084C0B                            PSG4:		incbin	"sound/psg/psg4.bin"
00084C16                            PSG6:		incbin	"sound/psg/psg6.bin"
00084C25                            PSG5:		incbin	"sound/psg/psg5.bin"
00084C4F                            PSG7:		incbin	"sound/psg/psg7.bin"
00084C6B                            PSG8:		incbin	"sound/psg/psg8.bin"
00084C93                            PSG9:		incbin	"sound/psg/psg9.bin"
00084CA4                            ; ---------------------------------------------------------------------------
00084CA4                            ; New tempos for songs during speed shoes
00084CA4                            ; ---------------------------------------------------------------------------
00084CA4                            ; DANGER! several songs will use the first few bytes of MusicIndex as their main
00084CA4                            ; tempos while speed shoes are active. If you don't want that, you should add
00084CA4                            ; their "correct" sped-up main tempos to the list.
00084CA4                            ; byte_71A94:
00084CA4                            SpeedUpIndex:
00084CA4 07                         		dc.b 7		; GHZ
00084CA5 72                         		dc.b $72	; LZ
00084CA6 73                         		dc.b $73	; MZ
00084CA7 26                         		dc.b $26	; SLZ
00084CA8 15                         		dc.b $15	; SYZ
00084CA9 08                         		dc.b 8		; SBZ
00084CAA FF                         		dc.b $FF	; Invincibility
00084CAB 05                         		dc.b 5		; Extra Life
00084CAC                            		;dc.b ?		; Special Stage
00084CAC                            		;dc.b ?		; Title Screen
00084CAC                            		;dc.b ?		; Ending
00084CAC                            		;dc.b ?		; Boss
00084CAC                            		;dc.b ?		; FZ
00084CAC                            		;dc.b ?		; Sonic Got Through
00084CAC                            		;dc.b ?		; Game Over
00084CAC                            		;dc.b ?		; Continue Screen
00084CAC                            		;dc.b ?		; Credits
00084CAC                            		;dc.b ?		; Drowning
00084CAC                            		;dc.b ?		; Get Emerald
00084CAC                            
00084CAC                            ; ---------------------------------------------------------------------------
00084CAC                            ; Music	Pointers
00084CAC                            ; ---------------------------------------------------------------------------
00084CAC                            MusicIndex:
00084CAC 0000 0000                  ptr_mus81:	dc.l Music81
00084CB0 0000 0000                  ptr_mus82:	dc.l Music82
00084CB4 0000 0000                  ptr_mus83:	dc.l Music83
00084CB8 0000 0000                  ptr_mus84:	dc.l Music84
00084CBC 0000 0000                  ptr_mus85:	dc.l Music85
00084CC0 0000 0000                  ptr_mus86:	dc.l Music86
00084CC4 0000 0000                  ptr_mus87:	dc.l Music87
00084CC8 0000 0000                  ptr_mus88:	dc.l Music88
00084CCC 0000 0000                  ptr_mus89:	dc.l Music89
00084CD0 0000 0000                  ptr_mus8A:	dc.l Music8A
00084CD4 0000 0000                  ptr_mus8B:	dc.l Music8B
00084CD8 0000 0000                  ptr_mus8C:	dc.l Music8C
00084CDC 0000 0000                  ptr_mus8D:	dc.l Music8D
00084CE0 0000 0000                  ptr_mus8E:	dc.l Music8E
00084CE4 0000 0000                  ptr_mus8F:	dc.l Music8F
00084CE8 0000 0000                  ptr_mus90:	dc.l Music90
00084CEC 0000 0000                  ptr_mus91:	dc.l Music91
00084CF0 0000 0000                  ptr_mus92:	dc.l Music92
00084CF4 0000 0000                  ptr_mus93:	dc.l Music93
00084CF8 0000 0000                  ptr_mus94:	dc.l Music94
00084CFC 0000 0000                  ptr_mus95:	dc.l Music95
00084D00 0000 0000                  ptr_mus96:	dc.l Music96
00084D04 0000 0000                  ptr_mus97:	dc.l Music97
00084D08 0000 0000                  ptr_mus98:	dc.l Music98
00084D0C 0000 0000                  ptr_mus99:	dc.l Music99
00084D10                            ptr_musend
00084D10                            ; ---------------------------------------------------------------------------
00084D10                            ; Priority of sound. New music or SFX must have a priority higher than or equal
00084D10                            ; to what is stored in v_sndprio or it won't play. If bit 7 of new priority is
00084D10                            ; set ($80 and up), the new music or SFX will not set its priority -- meaning
00084D10                            ; any music or SFX can override it (as long as it can override whatever was
00084D10                            ; playing before). Usually, SFX will only override SFX, special SFX ($D0-$DF)
00084D10                            ; will only override special SFX and music will only override music.
00084D10                            ; ---------------------------------------------------------------------------
00084D10                            ; SoundTypes:
00084D10                            SoundPriorities:
00084D10 9090 9090 9090 9090 9090+  		dc.b     $90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90	; $81
00084D1F 9090 9090 9090 9090 9090+  		dc.b $90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90	; $90
00084D2F 8070 7070 7070 7070 7070+  		dc.b $80,$70,$70,$70,$70,$70,$70,$70,$70,$70,$68,$70,$70,$70,$60,$70	; $A0
00084D3F 7060 7060 7070 7070 7070+  		dc.b $70,$60,$70,$60,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70,$7F	; $B0
00084D4F 6070 7070 7070 7070 7070+  		dc.b $60,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70	; $C0
00084D5F 8080 8080 8080 8080 8080+  		dc.b $80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80	; $D0
00084D6F 9090 9090 90               		dc.b $90,$90,$90,$90,$90                                            	; $E0
00084D74                            
00084D74                            ; ---------------------------------------------------------------------------
00084D74                            ; Subroutine to update music more than once per frame
00084D74                            ; (Called by horizontal & vert. interrupts)
00084D74                            ; ---------------------------------------------------------------------------
00084D74                            
00084D74                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00084D74                            
00084D74                            ; sub_71B4C:
00084D74                            UpdateMusic:
00084D74 33FC 0100 00A1 1100        		stopZ80
00084D7C 4E71                       		nop	
00084D7E 4E71                       		nop	
00084D80 4E71                       		nop	
00084D82                            ; loc_71B5A:
00084D82                            @updateloop:
00084D82 0839 0000 00A1 1100        		btst	#0,(z80_bus_request).l		; Is the z80 busy?
00084D8A 66F6                       		bne.s	@updateloop			; If so, wait
00084D8C                            
00084D8C 0839 0007 00A0 1FFD        		btst	#7,(z80_dac_status).l		; Is DAC accepting new samples?
00084D94 6700                       		beq.s	@driverinput			; Branch if yes
00084D96 33FC 0000 00A1 1100        		startZ80
00084D9E 4E71                       		nop	
00084DA0 4E71                       		nop	
00084DA2 4E71                       		nop	
00084DA4 4E71                       		nop	
00084DA6 4E71                       		nop	
00084DA8 60CA                       		bra.s	UpdateMusic
00084DAA                            ; ===========================================================================
00084DAA                            ; loc_71B82:
00084DAA                            @driverinput:
00084DAA 4DF9 00FF F000             		lea	(v_snddriver_ram&$FFFFFF).l,a6
00084DB0 422E 000E                  		clr.b	f_voice_selector(a6)
00084DB4 4A2E 0003                  		tst.b	f_pausemusic(a6)		; is music paused?
00084DB8 6600 0000                  		bne.w	PauseMusic			; if yes, branch
00084DBC 532E 0001                  		subq.b	#1,v_main_tempo_timeout(a6)	; Has main tempo timer expired?
00084DC0 6600                       		bne.s	@skipdelay
00084DC2 4EBA 0000                  		jsr	TempoWait(pc)
00084DC6                            ; loc_71B9E:
00084DC6                            @skipdelay:
00084DC6 102E 0004                  		move.b	v_fadeout_counter(a6),d0
00084DCA 6700                       		beq.s	@skipfadeout
00084DCC 4EBA 0000                  		jsr	DoFadeOut(pc)
00084DD0                            ; loc_71BA8:
00084DD0                            @skipfadeout:
00084DD0 4A2E 0024                  		tst.b	f_fadein_flag(a6)
00084DD4 6700                       		beq.s	@skipfadein
00084DD6 4EBA 0000                  		jsr	DoFadeIn(pc)
00084DDA                            ; loc_71BB2:
00084DDA                            @skipfadein:
00084DDA                            		; DANGER! The following line only checks v_soundqueue0 and v_soundqueue1, breaking v_soundqueue2.
00084DDA 4A6E 000A                  		tst.w	v_soundqueue0(a6)	; is a music or sound queued for played?
00084DDE 6700                       		beq.s	@nosndinput		; if not, branch
00084DE0 4EBA 0000                  		jsr	CycleSoundQueue(pc)
00084DE4                            ; loc_71BBC:
00084DE4                            @nosndinput:
00084DE4 0C2E 0080 0009             		cmpi.b	#$80,v_sound_id(a6)	; is song queue set for silence (empty)?
00084DEA 6700                       		beq.s	@nonewsound		; If yes, branch
00084DEC 4EBA 0000                  		jsr	PlaySoundID(pc)
00084DF0                            ; loc_71BC8:
00084DF0                            @nonewsound:
00084DF0 4A38 C901                  		tst.b	($FFFFC901).w
00084DF4 6700                       		beq.s	@cont
00084DF6 5338 C901                  		subq.b	#1,($FFFFC901).w
00084DFA                            		
00084DFA                            @cont:
00084DFA 4BEE 0040                  		lea	v_music_dac_track(a6),a5
00084DFE 4A15                       		tst.b	(a5)			; Is DAC track playing? (TrackPlaybackControl)
00084E00 6A00                       		bpl.s	@dacdone		; Branch if not
00084E02 4EBA 0000                  		jsr	DACUpdateTrack(pc)
00084E06                            ; loc_71BD4:
00084E06                            @dacdone:
00084E06 422E 0008                  		clr.b	f_updating_dac(a6)
00084E0A 7E05                       		moveq	#((v_music_fm_tracks_end-v_music_fm_tracks)/TrackSz)-1,d7	; 6 FM tracks
00084E0C                            ; loc_71BDA:
00084E0C                            @bgmfmloop:
00084E0C DAFC 0030                  		adda.w	#TrackSz,a5
00084E10 4A15                       		tst.b	(a5)			; Is track playing? (TrackPlaybackControl)
00084E12 6A00                       		bpl.s	@bgmfmnext		; Branch if not
00084E14 4EBA 0000                  		jsr	FMUpdateTrack(pc)
00084E18                            ; loc_71BE6:
00084E18                            @bgmfmnext:
00084E18 51CF FFF2                  		dbf	d7,@bgmfmloop
00084E1C                            
00084E1C 7E02                       		moveq	#((v_music_psg_tracks_end-v_music_psg_tracks)/TrackSz)-1,d7 ; 3 PSG tracks
00084E1E                            ; loc_71BEC:
00084E1E                            @bgmpsgloop:
00084E1E DAFC 0030                  		adda.w	#TrackSz,a5
00084E22 4A15                       		tst.b	(a5)			; Is track playing? (TrackPlaybackControl)
00084E24 6A00                       		bpl.s	@bgmpsgnext		; Branch if not
00084E26 4EBA 0000                  		jsr	PSGUpdateTrack(pc)
00084E2A                            ; loc_71BF8:
00084E2A                            @bgmpsgnext:
00084E2A 51CF FFF2                  		dbf	d7,@bgmpsgloop
00084E2E                            
00084E2E 1D7C 0080 000E             		move.b	#$80,f_voice_selector(a6)			; Now at SFX tracks
00084E34 7E02                       		moveq	#((v_sfx_fm_tracks_end-v_sfx_fm_tracks)/TrackSz)-1,d7	; 3 FM tracks (SFX)
00084E36                            ; loc_71C04:
00084E36                            @sfxfmloop:
00084E36 DAFC 0030                  		adda.w	#TrackSz,a5
00084E3A 4A15                       		tst.b	(a5)			; Is track playing? (TrackPlaybackControl)
00084E3C 6A00                       		bpl.s	@sfxfmnext		; Branch if not
00084E3E 4EBA 0000                  		jsr	FMUpdateTrack(pc)
00084E42                            ; loc_71C10:
00084E42                            @sfxfmnext:
00084E42 51CF FFF2                  		dbf	d7,@sfxfmloop
00084E46                            
00084E46 7E02                       		moveq	#((v_sfx_psg_tracks_end-v_sfx_psg_tracks)/TrackSz)-1,d7 ; 3 PSG tracks (SFX)
00084E48                            ; loc_71C16:
00084E48                            @sfxpsgloop:
00084E48 DAFC 0030                  		adda.w	#TrackSz,a5
00084E4C 4A15                       		tst.b	(a5)			; Is track playing? (TrackPlaybackControl)
00084E4E 6A00                       		bpl.s	@sfxpsgnext		; Branch of not
00084E50 4EBA 0000                  		jsr	PSGUpdateTrack(pc)
00084E54                            ; loc_71C22:
00084E54                            @sfxpsgnext:
00084E54 51CF FFF2                  		dbf	d7,@sfxpsgloop
00084E58                            		
00084E58 1D7C 0040 000E             		move.b	#$40,f_voice_selector(a6) ; Now at special SFX tracks
00084E5E DAFC 0030                  		adda.w	#TrackSz,a5
00084E62 4A15                       		tst.b	(a5)			; Is track playing? (TrackPlaybackControl)
00084E64 6A00                       		bpl.s	@specfmdone		; Branch if not
00084E66 4EBA 0000                  		jsr	FMUpdateTrack(pc)
00084E6A                            ; loc_71C38:
00084E6A                            @specfmdone:
00084E6A DAFC 0030                  		adda.w	#TrackSz,a5
00084E6E 4A15                       		tst.b	(a5)			; Is track playing (TrackPlaybackControl)
00084E70 6A00                       		bpl.s	DoStartZ80		; Branch if not
00084E72 4EBA 0000                  		jsr	PSGUpdateTrack(pc)
00084E76                            ; loc_71C44:
00084E76                            DoStartZ80:
00084E76 33FC 0000 00A1 1100        		startZ80
00084E7E 0838 0006 FFF8             		btst #6,(v_megadrive).w ; is Megadrive PAL?
00084E84 6700                       		beq.s @end ; if not, branch
00084E86 0C38 0005 F015             		cmpi.b #$5,(v_palmuscounter).w ; 5th frame?
00084E8C 6600                       		bne.s @end ; if not, branch
00084E8E 11FC 0000 F015             		move.b #$0,(v_palmuscounter).w ; reset counter
00084E94 6000 FEDE                  		bra.w UpdateMusic ; run sound driver again
00084E98                            
00084E98                            	@end:
00084E98 5238 F015                  		addq.b #$1,(v_palmuscounter).w ; add 1 to frame count
00084E9C 4E75                       		rts
00084E9E                            ; End of function UpdateMusic
00084E9E                            
00084E9E                            
00084E9E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00084E9E                            
00084E9E                            ; sub_71C4E: UpdateDAC:
00084E9E                            DACUpdateTrack:
00084E9E 532D 000E                  		subq.b	#1,TrackDurationTimeout(a5)	; Has DAC sample timeout expired?
00084EA2 6600                       		bne.s	@locret				; Return if not
00084EA4 1D7C 0080 0008             		move.b	#$80,f_updating_dac(a6)		; Set flag to indicate this is the DAC
00084EAA                            ;DACDoNext:
00084EAA 286D 0004                  		movea.l	TrackDataPointer(a5),a4	; DAC track data pointer
00084EAE                            ; loc_71C5E:
00084EAE                            @sampleloop:
00084EAE 7A00                       		moveq	#0,d5
00084EB0 1A1C                       		move.b	(a4)+,d5	; Get next SMPS unit
00084EB2 0C05 00E0                  		cmpi.b	#$E0,d5		; Is it a coord. flag?
00084EB6 6500                       		blo.s	@notcoord	; Branch if not
00084EB8 4EBA 0000                  		jsr	CoordFlag(pc)
00084EBC 60F0                       		bra.s	@sampleloop
00084EBE                            ; ===========================================================================
00084EBE                            ; loc_71C6E:
00084EBE                            @notcoord:
00084EBE 4A05                       		tst.b	d5			; Is it a sample?
00084EC0 6A00                       		bpl.s	@gotduration		; Branch if not (duration)
00084EC2 1B45 0010                  		move.b	d5,TrackSavedDAC(a5)	; Store new sample
00084EC6 1A1C                       		move.b	(a4)+,d5		; Get another byte
00084EC8 6A00                       		bpl.s	@gotduration		; Branch if it is a duration
00084ECA 534C                       		subq.w	#1,a4			; Put byte back
00084ECC 1B6D 000F 000E             		move.b	TrackSavedDuration(a5),TrackDurationTimeout(a5) ; Use last duration
00084ED2 6000                       		bra.s	@gotsampleduration
00084ED4                            ; ===========================================================================
00084ED4                            ; loc_71C84:
00084ED4                            @gotduration:
00084ED4 4EBA 0000                  		jsr	SetDuration(pc)
00084ED8                            ; loc_71C88:
00084ED8                            @gotsampleduration:
00084ED8 2B4C 0004                  		move.l	a4,TrackDataPointer(a5) ; Save pointer
00084EDC 0815 0002                  		btst	#2,(a5)			; Is track being overridden? (TrackPlaybackControl)
00084EE0 6600                       		bne.s	@locret			; Return if yes
00084EE2 7000                       		moveq	#0,d0
00084EE4 102D 0010                  		move.b	TrackSavedDAC(a5),d0	; Get sample
00084EE8 0C00 0080                  		cmpi.b	#$80,d0			; Is it a rest?
00084EEC 6700                       		beq.s	@locret			; Return if yes
00084EEE 0800 0003                  		btst	#3,d0			; Is bit 3 set (samples between $88-$8F)?
00084EF2 6600                       		bne.s	@timpani		; Various timpani
00084EF4 13C0 00A0 1FFF             		move.b	d0,(z80_dac_sample).l
00084EFA                            ; locret_71CAA:
00084EFA                            @locret:
00084EFA 4E75                       		rts	
00084EFC                            ; ===========================================================================
00084EFC                            ; loc_71CAC:
00084EFC                            @timpani:
00084EFC 0400 0088                  		subi.b	#$88,d0		; Convert into an index
00084F00 103B 0000                  		move.b	DAC_sample_rate(pc,d0.w),d0
00084F04                            		; Warning: this affects the raw pitch of sample $83, meaning it will
00084F04                            		; use this value from then on.
00084F04 13C0 00A0 00EA             		move.b	d0,(z80_dac3_pitch).l
00084F0A 13FC 0083 00A0 1FFF        		move.b	#$83,(z80_dac_sample).l	; Use timpani
00084F12 4E75                       		rts	
00084F14                            ; End of function DACUpdateTrack
00084F14                            
00084F14                            ; ===========================================================================
00084F14                            ; Note: this only defines rates for samples $88-$8D, meaning $8E-$8F are invalid.
00084F14                            ; Also, $8C-$8D are so slow you may want to skip them.
00084F14                            ; byte_71CC4:
00084F14 171A 2122 FFFF             DAC_sample_rate: dc.b $17, $1A, $21, $22, $FF, $FF
00084F1A                            
00084F1A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00084F1A                            
00084F1A                            ; sub_71CCA:
00084F1A                            FMUpdateTrack:
00084F1A 532D 000E                  		subq.b	#1,TrackDurationTimeout(a5) ; Update duration timeout
00084F1E 6600                       		bne.s	@notegoing		; Branch if it hasn't expired
00084F20 0895 0004                  		bclr	#4,(a5)			; Clear 'do not attack next note' bit (TrackPlaybackControl)
00084F24 4EBA 0000                  		jsr	FMDoNext(pc)
00084F28 4EBA 0000                  		jsr	FMPrepareNote(pc)
00084F2C 6000 0000                  		bra.w	FMNoteOn
00084F30                            ; ===========================================================================
00084F30                            ; loc_71CE0:
00084F30                            @notegoing:
00084F30 4EBA 0000                  		jsr	NoteTimeoutUpdate(pc)
00084F34 4EBA 0000                  		jsr	DoModulation(pc)
00084F38 6000 0000                  		bra.w	FMUpdateFreq
00084F3C                            ; End of function FMUpdateTrack
00084F3C                            
00084F3C                            
00084F3C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00084F3C                            
00084F3C                            ; sub_71CEC:
00084F3C                            FMDoNext:
00084F3C 286D 0004                  		movea.l	TrackDataPointer(a5),a4 ; Track data pointer
00084F40 0895 0001                  		bclr	#1,(a5)			; Clear 'track at rest' bit (TrackPlaybackControl)
00084F44                            ; loc_71CF4:
00084F44                            @noteloop:
00084F44 7A00                       		moveq	#0,d5
00084F46 1A1C                       		move.b	(a4)+,d5	; Get byte from track
00084F48 0C05 00E0                  		cmpi.b	#$E0,d5		; Is this a coord. flag?
00084F4C 6500                       		blo.s	@gotnote	; Branch if not
00084F4E 4EBA 0000                  		jsr	CoordFlag(pc)
00084F52 60F0                       		bra.s	@noteloop
00084F54                            ; ===========================================================================
00084F54                            ; loc_71D04:
00084F54                            @gotnote:
00084F54 4EBA 0000                  		jsr	FMNoteOff(pc)
00084F58 4A05                       		tst.b	d5		; Is this a note?
00084F5A 6A00                       		bpl.s	@gotduration	; Branch if not
00084F5C 4EBA 0000                  		jsr	FMSetFreq(pc)
00084F60 1A1C                       		move.b	(a4)+,d5	; Get another byte
00084F62 6A00                       		bpl.s	@gotduration	; Branch if it is a duration
00084F64 534C                       		subq.w	#1,a4		; Otherwise, put it back
00084F66 6000 0000                  		bra.w	FinishTrackUpdate
00084F6A                            ; ===========================================================================
00084F6A                            ; loc_71D1A:
00084F6A                            @gotduration:
00084F6A 4EBA 0000                  		jsr	SetDuration(pc)
00084F6E 6000 0000                  		bra.w	FinishTrackUpdate
00084F72                            ; End of function FMDoNext
00084F72                            
00084F72                            
00084F72                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00084F72                            
00084F72                            ; sub_71D22:
00084F72                            FMSetFreq:
00084F72 0405 0080                  		subi.b	#$80,d5			; Make it a zero-based index
00084F76 6700                       		beq.s	TrackSetRest
00084F78 DA2D 0008                  		add.b	TrackTranspose(a5),d5	; Add track transposition
00084F7C 0245 007F                  		andi.w	#$7F,d5			; Clear high byte and sign bit
00084F80 E34D                       		lsl.w	#1,d5
00084F82 41FA 0000                  		lea	FMFrequencies(pc),a0
00084F86 3C30 5000                  		move.w	(a0,d5.w),d6
00084F8A 3B46 0010                  		move.w	d6,TrackFreq(a5)	; Store new frequency
00084F8E 4E75                       		rts	
00084F90                            ; End of function FMSetFreq
00084F90                            
00084F90                            
00084F90                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00084F90                            
00084F90                            ; sub_71D40:
00084F90                            SetDuration:
00084F90 1005                       		move.b	d5,d0
00084F92 122D 0002                  		move.b	TrackTempoDivider(a5),d1	; Get dividing timing
00084F96                            ; loc_71D46:
00084F96                            @multloop:
00084F96 5301                       		subq.b	#1,d1
00084F98 6700                       		beq.s	@donemult
00084F9A D005                       		add.b	d5,d0
00084F9C 60F8                       		bra.s	@multloop
00084F9E                            ; ===========================================================================
00084F9E                            ; loc_71D4E:
00084F9E                            @donemult:
00084F9E 1B40 000F                  		move.b	d0,TrackSavedDuration(a5)	; Save duration
00084FA2 1B40 000E                  		move.b	d0,TrackDurationTimeout(a5)	; Save duration timeout
00084FA6 4E75                       		rts	
00084FA8                            ; End of function SetDuration
00084FA8                            
00084FA8                            ; ===========================================================================
00084FA8                            ; loc_71D58:
00084FA8                            TrackSetRest:
00084FA8 08D5 0001                  		bset	#1,(a5)		; Set 'track at rest' bit (TrackPlaybackControl)
00084FAC 426D 0010                  		clr.w	TrackFreq(a5)	; Clear frequency
00084FB0                            
00084FB0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00084FB0                            
00084FB0                            ; sub_71D60:
00084FB0                            FinishTrackUpdate:
00084FB0 2B4C 0004                  		move.l	a4,TrackDataPointer(a5)	; Store new track position
00084FB4 1B6D 000F 000E             		move.b	TrackSavedDuration(a5),TrackDurationTimeout(a5)	; Reset note timeout
00084FBA 0815 0004                  		btst	#4,(a5)				; Is track set to not attack note? (TrackPlaybackControl)
00084FBE 6600                       		bne.s	@locret				; If so, branch
00084FC0 1B6D 0013 0012             		move.b	TrackNoteTimeoutMaster(a5),TrackNoteTimeout(a5)	; Reset note fill timeout
00084FC6 422D 000C                  		clr.b	TrackVolEnvIndex(a5)		; Reset PSG volume envelope index (even on FM tracks...)
00084FCA 0815 0003                  		btst	#3,(a5)				; Is modulation on? (TrackPlaybackControl)
00084FCE 6700                       		beq.s	@locret				; If not, return (TrackPlaybackControl)
00084FD0 206D 0014                  		movea.l	TrackModulationPtr(a5),a0	; Modulation data pointer
00084FD4 1B58 0018                  		move.b	(a0)+,TrackModulationWait(a5)	; Reset wait
00084FD8 1B58 0019                  		move.b	(a0)+,TrackModulationSpeed(a5)	; Reset speed
00084FDC 1B58 001A                  		move.b	(a0)+,TrackModulationDelta(a5)	; Reset delta
00084FE0 1018                       		move.b	(a0)+,d0			; Get steps
00084FE2 E208                       		lsr.b	#1,d0				; Halve them
00084FE4 1B40 001B                  		move.b	d0,TrackModulationSteps(a5)	; Then store
00084FE8 426D 001C                  		clr.w	TrackModulationVal(a5)		; Reset frequency change
00084FEC                            ; locret_71D9C:
00084FEC                            @locret:
00084FEC 4E75                       		rts	
00084FEE                            ; End of function FinishTrackUpdate
00084FEE                            
00084FEE                            
00084FEE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00084FEE                            
00084FEE                            ; sub_71D9E: NoteFillUpdate
00084FEE                            NoteTimeoutUpdate:
00084FEE 4A2D 0012                  		tst.b	TrackNoteTimeout(a5)	; Is note fill on?
00084FF2 6700                       		beq.s	@locret
00084FF4 532D 0012                  		subq.b	#1,TrackNoteTimeout(a5)	; Update note fill timeout
00084FF8 6600                       		bne.s	@locret				; Return if it hasn't expired
00084FFA 08D5 0001                  		bset	#1,(a5)				; Put track at rest (TrackPlaybackControl)
00084FFE 4A2D 0001                  		tst.b	TrackVoiceControl(a5)		; Is this a psg track?
00085002 6B00 0000                  		bmi.w	@psgnoteoff			; If yes, branch
00085006 4EBA 0000                  		jsr	FMNoteOff(pc)
0008500A 584F                       		addq.w	#4,sp				; Do not return to caller
0008500C 4E75                       		rts	
0008500E                            ; ===========================================================================
0008500E                            ; loc_71DBE:
0008500E                            @psgnoteoff:
0008500E 4EBA 0000                  		jsr	PSGNoteOff(pc)
00085012 584F                       		addq.w	#4,sp		; Do not return to caller
00085014                            ; locret_71DC4:
00085014                            @locret:
00085014 4E75                       		rts	
00085016                            ; End of function NoteTimeoutUpdate
00085016                            
00085016                            
00085016                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00085016                            
00085016                            ; sub_71DC6:
00085016                            DoModulation:
00085016 584F                       		addq.w	#4,sp				; Do not return to caller (but see below)
00085018 0815 0003                  		btst	#3,(a5)				; Is modulation active? (TrackPlaybackControl)
0008501C 6700                       		beq.s	@locret				; Return if not
0008501E 4A2D 0018                  		tst.b	TrackModulationWait(a5)	; Has modulation wait expired?
00085022 6700                       		beq.s	@waitdone			; If yes, branch
00085024 532D 0018                  		subq.b	#1,TrackModulationWait(a5)	; Update wait timeout
00085028 4E75                       		rts	
0008502A                            ; ===========================================================================
0008502A                            ; loc_71DDA:
0008502A                            @waitdone:
0008502A 532D 0019                  		subq.b	#1,TrackModulationSpeed(a5)	; Update speed
0008502E 6700                       		beq.s	@updatemodulation		; If it expired, want to update modulation
00085030 4E75                       		rts	
00085032                            ; ===========================================================================
00085032                            ; loc_71DE2:
00085032                            @updatemodulation:
00085032 206D 0014                  		movea.l	TrackModulationPtr(a5),a0	; Get modulation data
00085036 1B68 0001 0019             		move.b	1(a0),TrackModulationSpeed(a5)	; Restore modulation speed
0008503C 4A2D 001B                  		tst.b	TrackModulationSteps(a5)	; Check number of steps
00085040 6600                       		bne.s	@calcfreq			; If nonzero, branch
00085042 1B68 0003 001B             		move.b	3(a0),TrackModulationSteps(a5)	; Restore from modulation data
00085048 442D 001A                  		neg.b	TrackModulationDelta(a5)	; Negate modulation delta
0008504C 4E75                       		rts	
0008504E                            ; ===========================================================================
0008504E                            ; loc_71DFE:
0008504E                            @calcfreq:
0008504E 532D 001B                  		subq.b	#1,TrackModulationSteps(a5)	; Update modulation steps
00085052 1C2D 001A                  		move.b	TrackModulationDelta(a5),d6	; Get modulation delta
00085056 4886                       		ext.w	d6
00085058 DC6D 001C                  		add.w	TrackModulationVal(a5),d6	; Add cumulative modulation change
0008505C 3B46 001C                  		move.w	d6,TrackModulationVal(a5)	; Store it
00085060 DC6D 0010                  		add.w	TrackFreq(a5),d6		; Add note frequency to it
00085064 594F                       		subq.w	#4,sp		; In this case, we want to return to caller after all
00085066                            ; locret_71E16:
00085066                            @locret:
00085066 4E75                       		rts	
00085068                            ; End of function DoModulation
00085068                            
00085068                            
00085068                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00085068                            
00085068                            ; sub_71E18:
00085068                            FMPrepareNote:
00085068 0815 0001                  		btst	#1,(a5)			; Is track resting? (TrackPlaybackControl)
0008506C 6600                       		bne.s	locret_71E48		; Return if so
0008506E 3C2D 0010                  		move.w	TrackFreq(a5),d6	; Get current note frequency
00085072 6700                       		beq.s	FMSetRest		; Branch if zero
00085074                            ; loc_71E24:
00085074                            FMUpdateFreq:
00085074 102D 001E                  		move.b	TrackDetune(a5),d0 	; Get detune value
00085078 4880                       		ext.w	d0
0008507A DC40                       		add.w	d0,d6			; Add note frequency
0008507C 0815 0002                  		btst	#2,(a5)			; Is track being overridden? (TrackPlaybackControl)
00085080 6600                       		bne.s	locret_71E48		; Return if so
00085082 3206                       		move.w	d6,d1
00085084 E049                       		lsr.w	#8,d1
00085086 103C 00A4                  		move.b	#$A4,d0			; Register for upper 6 bits of frequency
0008508A 4EBA 0000                  		jsr	WriteFMIorII(pc)
0008508E 1206                       		move.b	d6,d1
00085090 103C 00A0                  		move.b	#$A0,d0			; Register for lower 8 bits of frequency
00085094 4EBA 0000                  		jsr	WriteFMIorII(pc)	; (It would be better if this were a jmp)
00085098                            ; locret_71E48:
00085098                            locret_71E48:
00085098 4E75                       		rts	
0008509A                            ; ===========================================================================
0008509A                            ; loc_71E4A:
0008509A                            FMSetRest:
0008509A 08D5 0001                  		bset	#1,(a5)		; Set 'track at rest' bit (TrackPlaybackControl)
0008509E 4E75                       		rts	
000850A0                            ; End of function FMPrepareNote
000850A0                            
000850A0                            ; ===========================================================================
000850A0                            ; loc_71E50:
000850A0                            PauseMusic:
000850A0 6B00                       		bmi.s	@unpausemusic		; Branch if music is being unpaused
000850A2 0C2E 0002 0003             		cmpi.b	#2,f_pausemusic(a6)
000850A8 6700 0000                  		beq.w	@unpausedallfm
000850AC 1D7C 0002 0003             		move.b	#2,f_pausemusic(a6)
000850B2 7602                       		moveq	#2,d3
000850B4 103C 00B4                  		move.b	#$B4,d0		; Command to set AMS/FMS/panning
000850B8 7200                       		moveq	#0,d1		; No panning, AMS or FMS
000850BA                            ; loc_71E6A:
000850BA                            @killpanloop:
000850BA 4EBA 0000                  		jsr	WriteFMI(pc)
000850BE 4EBA 0000                  		jsr	WriteFMII(pc)
000850C2 5200                       		addq.b	#1,d0
000850C4 51CB FFF4                  		dbf	d3,@killpanloop
000850C8                            
000850C8 7602                       		moveq	#2,d3
000850CA 7028                       		moveq	#$28,d0		; Key on/off register
000850CC                            ; loc_71E7C:
000850CC                            @noteoffloop:
000850CC 1203                       		move.b	d3,d1		; FM1, FM2, FM3
000850CE 4EBA 0000                  		jsr	WriteFMI(pc)
000850D2 5801                       		addq.b	#4,d1		; FM4, FM5, FM6
000850D4 4EBA 0000                  		jsr	WriteFMI(pc)
000850D8 51CB FFF2                  		dbf	d3,@noteoffloop
000850DC                            
000850DC 4EBA 0000                  		jsr	PSGSilenceAll(pc)
000850E0 6000 FD94                  		bra.w	DoStartZ80
000850E4                            ; ===========================================================================
000850E4                            ; loc_71E94:
000850E4                            @unpausemusic:
000850E4 422E 0003                  		clr.b	f_pausemusic(a6)
000850E8 7630                       		moveq	#TrackSz,d3
000850EA 4BEE 0040                  		lea	v_music_fmdac_tracks(a6),a5
000850EE 7806                       		moveq	#((v_music_fmdac_tracks_end-v_music_fmdac_tracks)/TrackSz)-1,d4	; 6 FM + 1 DAC tracks
000850F0                            ; loc_71EA0:
000850F0                            @bgmfmloop:
000850F0 0815 0007                  		btst	#7,(a5)			; Is track playing? (TrackPlaybackControl)
000850F4 6700                       		beq.s	@bgmfmnext		; Branch if not
000850F6 0815 0002                  		btst	#2,(a5)			; Is track being overridden? (TrackPlaybackControl)
000850FA 6600                       		bne.s	@bgmfmnext		; Branch if yes
000850FC 103C 00B4                  		move.b	#$B4,d0			; Command to set AMS/FMS/panning
00085100 122D 000A                  		move.b	TrackAMSFMSPan(a5),d1	; Get value from track RAM
00085104 4EBA 0000                  		jsr	WriteFMIorII(pc)
00085108                            ; loc_71EB8:
00085108                            @bgmfmnext:
00085108 DAC3                       		adda.w	d3,a5
0008510A 51CC FFE4                  		dbf	d4,@bgmfmloop
0008510E                            
0008510E 4BEE 0220                  		lea	v_sfx_fm_tracks(a6),a5
00085112 7802                       		moveq	#((v_sfx_fm_tracks_end-v_sfx_fm_tracks)/TrackSz)-1,d4	; 3 FM tracks (SFX)
00085114                            ; loc_71EC4:
00085114                            @sfxfmloop:
00085114 0815 0007                  		btst	#7,(a5)			; Is track playing? (TrackPlaybackControl)
00085118 6700                       		beq.s	@sfxfmnext		; Branch if not
0008511A 0815 0002                  		btst	#2,(a5)			; Is track being overridden? (TrackPlaybackControl)
0008511E 6600                       		bne.s	@sfxfmnext		; Branch if yes
00085120 103C 00B4                  		move.b	#$B4,d0			; Command to set AMS/FMS/panning
00085124 122D 000A                  		move.b	TrackAMSFMSPan(a5),d1	; Get value from track RAM
00085128 4EBA 0000                  		jsr	WriteFMIorII(pc)
0008512C                            ; loc_71EDC:
0008512C                            @sfxfmnext:
0008512C DAC3                       		adda.w	d3,a5
0008512E 51CC FFE4                  		dbf	d4,@sfxfmloop
00085132                            
00085132 4BEE 0340                  		lea	v_spcsfx_track_ram(a6),a5
00085136 0815 0007                  		btst	#7,(a5)			; Is track playing? (TrackPlaybackControl)
0008513A 6700                       		beq.s	@unpausedallfm		; Branch if not
0008513C 0815 0002                  		btst	#2,(a5)			; Is track being overridden? (TrackPlaybackControl)
00085140 6600                       		bne.s	@unpausedallfm		; Branch if yes
00085142 103C 00B4                  		move.b	#$B4,d0			; Command to set AMS/FMS/panning
00085146 122D 000A                  		move.b	TrackAMSFMSPan(a5),d1	; Get value from track RAM
0008514A 4EBA 0000                  		jsr	WriteFMIorII(pc)
0008514E                            ; loc_71EFE:
0008514E                            @unpausedallfm:
0008514E 6000 FD26                  		bra.w	DoStartZ80
00085152                            
00085152                            ; ---------------------------------------------------------------------------
00085152                            ; Subroutine to	play a sound or	music track
00085152                            ; ---------------------------------------------------------------------------
00085152                            
00085152                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00085152                            
00085152                            ; Sound_Play:
00085152                            CycleSoundQueue:
00085152 2079 0008 4BA0             		movea.l	(Go_SoundPriorities).l,a0
00085158 43EE 000A                  		lea	v_soundqueue0(a6),a1	; load music track number
0008515C 1616                       		move.b	v_sndprio(a6),d3	; Get priority of currently playing SFX
0008515E 7802                       		moveq	#2,d4			; Number of queues-1 (v_soundqueue0, v_soundqueue1, v_soundqueue2)
00085160                            ; loc_71F12:
00085160                            @inputloop:
00085160 1011                       		move.b	(a1),d0			; move track number to d0
00085162 1200                       		move.b	d0,d1
00085164 4219                       		clr.b	(a1)+			; Clear entry
00085166 0400 0081                  		subi.b	#bgm__First,d0		; Make it into 0-based index
0008516A 6500                       		bcs.s	@nextinput		; If negative (i.e., it was $80 or lower), branch
0008516C 0C2E 0080 0009             		cmpi.b	#$80,v_sound_id(a6)	; Is v_sound_id a $80 (silence/empty)?
00085172 6700                       		beq.s	@havesound		; If yes, branch
00085174 1D41 000A                  		move.b	d1,v_soundqueue0(a6)	; Put sound into v_soundqueue0
00085178 6000                       		bra.s	@nextinput
0008517A                            ; ===========================================================================
0008517A                            ; loc_71F2C:
0008517A                            @havesound:
0008517A 0240 007F                  		andi.w	#$7F,d0			; Clear high byte and sign bit
0008517E 1430 0000                  		move.b	(a0,d0.w),d2		; Get sound type
00085182 B403                       		cmp.b	d3,d2			; Is it a lower priority sound?
00085184 6500                       		blo.s	@nextinput		; Branch if yes
00085186 1602                       		move.b	d2,d3			; Store new priority
00085188 1D41 0009                  		move.b	d1,v_sound_id(a6)	; Queue sound for play
0008518C                            ; loc_71F3E:
0008518C                            @nextinput:
0008518C 51CC FFD2                  		dbf	d4,@inputloop
00085190                            
00085190 4A03                       		tst.b	d3			; We don't want to change sound priority if it is negative
00085192 6B00                       		bmi.s	@locret
00085194 1C83                       		move.b	d3,v_sndprio(a6)	; Set new sound priority
00085196                            ; locret_71F4A:
00085196                            @locret:
00085196 4E75                       		rts	
00085198                            ; End of function CycleSoundQueue
00085198                            
00085198                            
00085198                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00085198                            
00085198                            ; Sound_ChkValue:
00085198                            PlaySoundID:
00085198 7E00                       		moveq	#0,d7
0008519A 1E2E 0009                  		move.b	v_sound_id(a6),d7
0008519E 6700 0000                  		beq.w	StopAllSound
000851A2 6A00                       		bpl.s	@locret			; If >= 0, return (not a valid sound, bgm or command)
000851A4 1D7C 0080 0009             		move.b	#$80,v_sound_id(a6)	; reset	music flag
000851AA                            		; DANGER! Music ends at $93, yet this checks until $9F; attempting to
000851AA                            		; play sounds $94-$9F will cause a crash! Remove the '+$C' to fix this.
000851AA                            		; See LevSel_NoCheat for more.
000851AA 0C07 0000                  		cmpi.b	#bgm__Last,d7	; Is this music ($81-$9F)?
000851AE 6300 0000                  		bls.w	Sound_PlayBGM		; Branch if yes
000851B2 0C07 00A0                  		cmpi.b	#sfx__First,d7		; Is this after music but before sfx? (redundant check)
000851B6 6500 0000                  		blo.w	@locret			; Return if yes
000851BA 0C07 0000                  		cmpi.b	#sfx__Last,d7		; Is this sfx ($A0-$CF)?
000851BE 6300 0000                  		bls.w	Sound_PlaySFX		; Branch if yes
000851C2 0C07 00D0                  		cmpi.b	#spec__First,d7		; Is this after sfx but before special sfx? (redundant check)
000851C6 6500 0000                  		blo.w	@locret			; Return if yes
000851CA 0C07 00D1                  		cmpi.b	#$D1,d7
000851CE 6500 0000                  		bcs.w	Sound_PlaySpecial
000851D2 0C07 00DF                  		cmp.b	#$DF,d7
000851D6 6F00 0000                  		ble.w	Sound_D1toDF
000851DA 0C07 00E0                  		cmpi.b	#flg__First,d7		; Is this after special sfx but before $E0?
000851DE 6500 0000                  		blo.w	@locret			; Return if yes
000851E2 0C07 0000                  		cmpi.b	#flg__Last,d7		; Is this $E0-$E4?
000851E6 6300                       		bls.s	Sound_E0toE4		; Branch if yes
000851E8                            ; locret_71F8C:
000851E8                            @locret:
000851E8 4E75                       		rts	
000851EA                            ; ===========================================================================
000851EA                            
000851EA                            Sound_E0toE4:
000851EA 0407 00E0                  		subi.b	#flg__First,d7
000851EE E54F                       		lsl.w	#2,d7
000851F0 4EFB 7000                  		jmp	Sound_ExIndex(pc,d7.w)
000851F4                            ; ===========================================================================
000851F4                            
000851F4                            Sound_ExIndex:
000851F4 6000 0000                  ptr_flgE0:	bra.w	FadeOutMusic		; $E0
000851F8 6000 0000                  ptr_flgE1:	bra.w	PlaySegaSound		; $E1
000851FC 6000 0000                  ptr_flgE2:	bra.w	SpeedUpMusic		; $E2
00085200 6000 0000                  ptr_flgE3:	bra.w	SlowDownMusic		; $E3
00085204 6000 0000                  ptr_flgE4:	bra.w	StopAllSound		; $E4
00085208                            ptr_flgend
00085208                            ; ===========================================================================
00085208                            ; ---------------------------------------------------------------------------
00085208                            ; Play "Say-gaa" PCM sound
00085208                            ; ---------------------------------------------------------------------------
00085208                            ; Sound_E1: PlaySega:
00085208                            PlaySegaSound:
00085208 13FC 0088 00A0 1FFF        		move.b	#$88,(z80_dac_sample).l	; Queue Sega PCM
00085210 33FC 0000 00A1 1100        		startZ80
00085218 323C 0011                  		move.w	#$11,d1
0008521C                            ; loc_71FC0:
0008521C                            @busyloop_outer:
0008521C 303C FFFF                  		move.w	#-1,d0
00085220                            ; loc_71FC4:
00085220                            @busyloop:
00085220 4E71                       		nop	
00085222 51C8 FFFC                  		dbf	d0,@busyloop
00085226                            
00085226 51C9 FFF4                  		dbf	d1,@busyloop_outer
0008522A                            
0008522A 584F                       		addq.w	#4,sp	; Tamper return value so we don't return to caller
0008522C 4E75                       		rts	
0008522E                            ; ===========================================================================
0008522E                            ; ---------------------------------------------------------------------------
0008522E                            ; Play music track $81-$9F
0008522E                            ; ---------------------------------------------------------------------------
0008522E                            ; Sound_81to9F:
0008522E                            Sound_PlayBGM:
0008522E 0C07 0000                  		cmpi.b	#bgm_ExtraLife,d7	; is the "extra life" music to be played?
00085232 6600                       		bne.s	@bgmnot1up		; if not, branch
00085234 4A2E 0027                  		tst.b	f_1up_playing(a6)	; Is a 1-up music playing?
00085238 6600 0000                  		bne.w	@locdblret		; if yes, branch
0008523C 4BEE 0040                  		lea	v_music_track_ram(a6),a5
00085240 7009                       		moveq	#((v_music_track_ram_end-v_music_track_ram)/TrackSz)-1,d0	; 1 DAC + 6 FM + 3 PSG tracks
00085242                            ; loc_71FE6:
00085242                            @clearsfxloop:
00085242 0895 0002                  		bclr	#2,(a5)			; Clear 'SFX is overriding' bit (TrackPlaybackControl)
00085246 DAFC 0030                  		adda.w	#TrackSz,a5
0008524A 51C8 FFF6                  		dbf	d0,@clearsfxloop
0008524E                            
0008524E 4BEE 0220                  		lea	v_sfx_track_ram(a6),a5
00085252 7005                       		moveq	#((v_sfx_track_ram_end-v_sfx_track_ram)/TrackSz)-1,d0	; 3 FM + 3 PSG tracks (SFX)
00085254                            ; loc_71FF8:
00085254                            @cleartrackplayloop:
00085254 0895 0007                  		bclr	#7,(a5)			; Clear 'track is playing' bit (TrackPlaybackControl)
00085258 DAFC 0030                  		adda.w	#TrackSz,a5
0008525C 51C8 FFF6                  		dbf	d0,@cleartrackplayloop
00085260                            
00085260 4216                       		clr.b	v_sndprio(a6)		; Clear priority
00085262 204E                       		movea.l	a6,a0
00085264 43EE 03A0                  		lea	v_1up_ram_copy(a6),a1
00085268 303C 0087                  		move.w	#((v_music_track_ram_end-v_startofvariables)/4)-1,d0	; Backup $220 bytes: all variables and music track data
0008526C                            ; loc_72012:
0008526C                            @backupramloop:
0008526C 22D8                       		move.l	(a0)+,(a1)+
0008526E 51C8 FFFC                  		dbf	d0,@backupramloop
00085272                            
00085272 1D7C 0080 0027             		move.b	#$80,f_1up_playing(a6)
00085278 4216                       		clr.b	v_sndprio(a6)		; Clear priority again (?)
0008527A 6000                       		bra.s	@bgm_loadMusic
0008527C                            ; ===========================================================================
0008527C                            ; loc_72024:
0008527C                            @bgmnot1up:
0008527C 422E 0027                  		clr.b	f_1up_playing(a6)
00085280 422E 0026                  		clr.b	v_fadein_counter(a6)
00085284                            ; loc_7202C:
00085284                            @bgm_loadMusic:
00085284 4EBA 0000                  		jsr	InitMusicPlayback(pc)
00085288 2879 0008 4BB0             		movea.l	(Go_SpeedUpIndex).l,a4
0008528E 0407 0081                  		subi.b	#bgm__First,d7
00085292 1D74 7000 0029             		move.b	(a4,d7.w),v_speeduptempo(a6)
00085298 2879 0008 4BA8             		movea.l	(Go_MusicIndex).l,a4
0008529E E54F                       		lsl.w	#2,d7
000852A0 2874 7000                  		movea.l	(a4,d7.w),a4		; a4 now points to (uncompressed) song data
000852A4 7000                       		moveq	#0,d0
000852A6 3014                       		move.w	(a4),d0			; load voice pointer
000852A8 D08C                       		add.l	a4,d0			; It is a relative pointer
000852AA 2D40 0018                  		move.l	d0,v_voice_ptr(a6)
000852AE 102C 0005                  		move.b	5(a4),d0		; load tempo
000852B2 1D40 0028                  		move.b	d0,v_tempo_mod(a6)
000852B6                            		;tst.b	f_speedup(a6)
000852B6                            		;beq.s	@nospeedshoes
000852B6                            		;move.b	v_speeduptempo(a6),d0
000852B6                            ; loc_72068:
000852B6                            ;@nospeedshoes:
000852B6 1D40 0002                  		move.b	d0,v_main_tempo(a6)
000852BA 1D40 0001                  		move.b	d0,v_main_tempo_timeout(a6)
000852BE 7200                       		moveq	#0,d1
000852C0 264C                       		movea.l	a4,a3
000852C2 5C4C                       		addq.w	#6,a4			; Point past header
000852C4 7E00                       		moveq	#0,d7
000852C6 1E2B 0002                  		move.b	2(a3),d7		; load number of FM+DAC tracks
000852CA 6700 0000                  		beq.w	@bgm_fmdone		; branch if zero
000852CE 5307                       		subq.b	#1,d7
000852D0 123C 00C0                  		move.b	#$C0,d1			; Default AMS+FMS+Panning
000852D4 182B 0004                  		move.b	4(a3),d4		; load tempo dividing timing
000852D8 7C30                       		moveq	#TrackSz,d6
000852DA 1A3C 0001                  		move.b	#1,d5			; Note duration for first "note"
000852DE 43EE 0040                  		lea	v_music_fmdac_tracks(a6),a1
000852E2 45FA 0000                  		lea	FMDACInitBytes(pc),a2
000852E6                            ; loc_72098:
000852E6                            @bmg_fmloadloop:
000852E6 08D1 0007                  		bset	#7,(a1)				; Initial playback control: set 'track playing' bit (TrackPlaybackControl)
000852EA 135A 0001                  		move.b	(a2)+,TrackVoiceControl(a1)	; Voice control bits
000852EE 1344 0002                  		move.b	d4,TrackTempoDivider(a1)
000852F2 1346 000D                  		move.b	d6,TrackStackPointer(a1)	; set "gosub" (coord flag F8h) stack init value
000852F6 1341 000A                  		move.b	d1,TrackAMSFMSPan(a1)		; Set AMS/FMS/Panning
000852FA 1345 000E                  		move.b	d5,TrackDurationTimeout(a1)	; Set duration of first "note"
000852FE 7000                       		moveq	#0,d0
00085300 301C                       		move.w	(a4)+,d0			; load DAC/FM pointer
00085302 D08B                       		add.l	a3,d0				; Relative pointer
00085304 2340 0004                  		move.l	d0,TrackDataPointer(a1)	; Store track pointer
00085308 335C 0008                  		move.w	(a4)+,TrackTranspose(a1)	; load FM channel modifier
0008530C D2C6                       		adda.w	d6,a1
0008530E 51CF FFD6                  		dbf	d7,@bmg_fmloadloop
00085312                            		
00085312 0C2B 0007 0002             		cmpi.b	#7,2(a3)	; Are 7 FM tracks defined?
00085318 6600                       		bne.s	@silencefm6
0008531A 702B                       		moveq	#$2B,d0		; DAC enable/disable register
0008531C 7200                       		moveq	#0,d1		; Disable DAC
0008531E 4EBA 0000                  		jsr	WriteFMI(pc)
00085322 6000 0000                  		bra.w	@bgm_fmdone
00085326                            ; ===========================================================================
00085326                            ; loc_720D8:
00085326                            @silencefm6:
00085326 7028                       		moveq	#$28,d0		; Key on/off register
00085328 7206                       		moveq	#6,d1		; Note off on all operators of channel 6
0008532A 4EBA 0000                  		jsr	WriteFMI(pc)
0008532E 103C 0042                  		move.b	#$42,d0		; TL for operator 1 of FM6
00085332 727F                       		moveq	#$7F,d1		; Total silence
00085334 4EBA 0000                  		jsr	WriteFMII(pc)
00085338 103C 004A                  		move.b	#$4A,d0		; TL for operator 3 of FM6
0008533C 727F                       		moveq	#$7F,d1		; Total silence
0008533E 4EBA 0000                  		jsr	WriteFMII(pc)
00085342 103C 0046                  		move.b	#$46,d0		; TL for operator 2 of FM6
00085346 727F                       		moveq	#$7F,d1		; Total silence
00085348 4EBA 0000                  		jsr	WriteFMII(pc)
0008534C 103C 004E                  		move.b	#$4E,d0		; TL for operator 4 of FM6
00085350 727F                       		moveq	#$7F,d1		; Total silence
00085352 4EBA 0000                  		jsr	WriteFMII(pc)
00085356 103C 00B6                  		move.b	#$B6,d0		; AMS/FMS/panning of FM6
0008535A 123C 00C0                  		move.b	#$C0,d1		; Stereo
0008535E 4EBA 0000                  		jsr	WriteFMII(pc)
00085362                            ; loc_72114:
00085362                            @bgm_fmdone:
00085362 7E00                       		moveq	#0,d7
00085364 1E2B 0003                  		move.b	3(a3),d7	; Load number of PSG tracks
00085368 6700                       		beq.s	@bgm_psgdone	; branch if zero
0008536A 5307                       		subq.b	#1,d7
0008536C 43EE 0190                  		lea	v_music_psg_tracks(a6),a1
00085370 45FA 0000                  		lea	PSGInitBytes(pc),a2
00085374                            ; loc_72126:
00085374                            @bgm_psgloadloop:
00085374 08D1 0007                  		bset	#7,(a1)				; Initial playback control: set 'track playing' bit (TrackPlaybackControl)
00085378 135A 0001                  		move.b	(a2)+,TrackVoiceControl(a1)	; Voice control bits
0008537C 1344 0002                  		move.b	d4,TrackTempoDivider(a1)
00085380 1346 000D                  		move.b	d6,TrackStackPointer(a1)	; set "gosub" (coord flag F8h) stack init value
00085384 1345 000E                  		move.b	d5,TrackDurationTimeout(a1)	; Set duration of first "note"
00085388 7000                       		moveq	#0,d0
0008538A 301C                       		move.w	(a4)+,d0			; load PSG channel pointer
0008538C D08B                       		add.l	a3,d0				; Relative pointer
0008538E 2340 0004                  		move.l	d0,TrackDataPointer(a1)	; Store track pointer
00085392 335C 0008                  		move.w	(a4)+,TrackTranspose(a1)	; load PSG modifier
00085396 101C                       		move.b	(a4)+,d0			; load redundant byte
00085398 135C 000B                  		move.b	(a4)+,TrackVoiceIndex(a1)	; Initial PSG tone
0008539C D2C6                       		adda.w	d6,a1
0008539E 51CF FFD4                  		dbf	d7,@bgm_psgloadloop
000853A2                            ; loc_72154:
000853A2                            @bgm_psgdone:
000853A2 43EE 0220                  		lea	v_sfx_track_ram(a6),a1
000853A6 7E05                       		moveq	#((v_sfx_track_ram_end-v_sfx_track_ram)/TrackSz)-1,d7	; 6 SFX tracks
000853A8                            ; loc_7215A:
000853A8                            @sfxstoploop:
000853A8 4A11                       		tst.b	(a1)		; Is SFX playing? (TrackPlaybackControl)
000853AA 6A00 0000                  		bpl.w	@sfxnext	; Branch if not
000853AE 7000                       		moveq	#0,d0
000853B0 1029 0001                  		move.b	TrackVoiceControl(a1),d0 ; Get voice control bits
000853B4 6B00                       		bmi.s	@sfxpsgchannel		; Branch if this is a PSG channel
000853B6 5500                       		subq.b	#2,d0			; SFX can't have FM1 or FM2
000853B8 E508                       		lsl.b	#2,d0			; Convert to index
000853BA 6000                       		bra.s	@gotchannelindex
000853BC                            ; ===========================================================================
000853BC                            ; loc_7216E:
000853BC                            @sfxpsgchannel:
000853BC E608                       		lsr.b	#3,d0		; Convert to index
000853BE                            ; loc_72170:
000853BE                            @gotchannelindex:
000853BE 41FA 0000                  		lea	SFX_BGMChannelRAM(pc),a0
000853C2 2070 0000                  		movea.l	(a0,d0.w),a0
000853C6 08D0 0002                  		bset	#2,(a0)		; Set 'SFX is overriding' bit (TrackPlaybackControl)
000853CA                            ; loc_7217C:
000853CA                            @sfxnext:
000853CA D2C6                       		adda.w	d6,a1
000853CC 51CF FFDA                  		dbf	d7,@sfxstoploop
000853D0                            
000853D0 4A6E 0340                  		tst.w	v_spcsfx_fm4_track+TrackPlaybackControl(a6)	; Is special SFX being played?
000853D4 6A00                       		bpl.s	@checkspecialpsg				; Branch if not
000853D6 08EE 0002 0100             		bset	#2,v_music_fm4_track+TrackPlaybackControl(a6)	; Set 'SFX is overriding' bit
000853DC                            ; loc_7218E:
000853DC                            @checkspecialpsg:
000853DC 4A6E 0370                  		tst.w	v_spcsfx_psg3_track+TrackPlaybackControl(a6)	; Is special SFX being played?
000853E0 6A00                       		bpl.s	@sendfmnoteoff					; Branch if not
000853E2 08EE 0002 01F0             		bset	#2,v_music_psg3_track+TrackPlaybackControl(a6)	; Set 'SFX is overriding' bit
000853E8                            ; loc_7219A:
000853E8                            @sendfmnoteoff:
000853E8 4BEE 0070                  		lea	v_music_fm_tracks(a6),a5
000853EC 7805                       		moveq	#((v_music_fm_tracks_end-v_music_fm_tracks)/TrackSz)-1,d4	; 6 FM tracks
000853EE                            ; loc_721A0:
000853EE                            @fmnoteoffloop:
000853EE 4EBA 0000                  		jsr	FMNoteOff(pc)
000853F2 DAC6                       		adda.w	d6,a5
000853F4 51CC FFF8                  		dbf	d4,@fmnoteoffloop		; run all FM tracks
000853F8 7802                       		moveq	#((v_music_psg_tracks_end-v_music_psg_tracks)/TrackSz)-1,d4 ; 3 PSG tracks
000853FA                            ; loc_721AC:
000853FA                            @psgnoteoffloop:
000853FA 4EBA 0000                  		jsr	PSGNoteOff(pc)
000853FE DAC6                       		adda.w	d6,a5
00085400 51CC FFF8                  		dbf	d4,@psgnoteoffloop		; run all PSG tracks
00085404                            ; loc_721B6:
00085404                            @locdblret:
00085404 584F                       		addq.w	#4,sp	; Tamper with return value to not return to caller
00085406 4E75                       		rts	
00085408                            ; ===========================================================================
00085408                            ; byte_721BA:
00085408 0600 0102 0405 06          FMDACInitBytes:	dc.b 6,	0, 1, 2, 4, 5, 6	; first byte is for DAC; then notice the 0, 1, 2 then 4, 5, 6; this is the gap between parts I and II for YM2612 port writes
00085410 00                         		even
00085410                            ; byte_721C2:
00085410 80A0 C0                    PSGInitBytes:	dc.b $80, $A0, $C0	; Specifically, these configure writes to the PSG port for each channel
00085414 00                         		even
00085414                            ; ===========================================================================
00085414                            ; ---------------------------------------------------------------------------
00085414                            ; Play Spin Dash sound effect
00085414                            ; ---------------------------------------------------------------------------
00085414                            Sound_D1toDF:
00085414 4A2E 0027                  		tst.b	$27(a6)
00085418 6600 0000                  		bne.w	loc_722C6
0008541C 4A2E 0004                  		tst.b	4(a6)
00085420 6600 0000                  		bne.w	loc_722C6
00085424 4A2E 0024                  		tst.b	$24(a6)
00085428 6600 0000                  		bne.w	loc_722C6
0008542C 4238 C900                  		clr.b	($FFFFC900).w
00085430 0C07 00D5                  		cmp.b	#$D5,d7		; is this the Spin Dash sound?
00085434 6600                       		bne.s	@cont3	; if not, branch
00085436 3F00                       		move.w	d0,-(sp)
00085438 1038 C902                  		move.b	($FFFFC902).w,d0	; store extra frequency
0008543C 4A38 C901                  		tst.b	($FFFFC901).w	; is the Spin Dash timer active?
00085440 6600                       		bne.s	@cont1		; if it is, branch
00085442 103C 00FF                  		move.b	#-1,d0		; otherwise, reset frequency (becomes 0 on next line)
00085446                            		
00085446                            @cont1:
00085446 5200                       		addq.b	#1,d0
00085448 0C00 000C                  		cmp.b	#$C,d0		; has the limit been reached?
0008544C 6400                       		bcc.s	@cont2		; if it has, branch
0008544E 11C0 C902                  		move.b	d0,($FFFFC902).w	; otherwise, set new frequency
00085452                            		
00085452                            @cont2:
00085452 11FC 0001 C900             		move.b	#1,($FFFFC900).w	; set flag
00085458 11FC 003C C901             		move.b	#60,($FFFFC901).w	; set timer
0008545E 301F                       		move.w	(sp)+,d0
00085460                            		
00085460                            @cont3:	
00085460 2079 0008 4BAC             		movea.l	(Go_SoundIndex).l,a0
00085466 0407 00A0                  		sub.b	#$A0,d7
0008546A 6000                       		bra.s	SoundEffects_Common
0008546C                            ; ---------------------------------------------------------------------------
0008546C                            ; Play normal sound effect
0008546C                            ; ---------------------------------------------------------------------------
0008546C                            ; Sound_A0toCF:
0008546C                            Sound_PlaySFX:
0008546C 4A2E 0027                  		tst.b	f_1up_playing(a6)	; Is 1-up playing?
00085470 6600 0000                  		bne.w	loc_722C6		; Exit is it is
00085474 4A2E 0004                  		tst.b	v_fadeout_counter(a6)	; Is music being faded out?
00085478 6600 0000                  		bne.w	loc_722C6		; Exit if it is
0008547C 4A2E 0024                  		tst.b	f_fadein_flag(a6)	; Is music being faded in?
00085480 6600 0000                  		bne.w	loc_722C6		; Exit if it is
00085484 4238 C900                  		clr.b	($FFFFC900).w
00085488 0C07 0000                  		cmpi.b	#sfx_Ring,d7		; is ring sound	effect played?
0008548C 6600                       		bne.s	Sound_notB5		; if not, branch
0008548E 4A2E 002B                  		tst.b	v_ring_speaker(a6)	; Is the ring sound playing on right speaker?
00085492 6600                       		bne.s	loc_721EE		; Branch if not
00085494 1E3C 0000                  		move.b	#sfx_RingLeft,d7	; play ring sound in left speaker
00085498                            
00085498                            loc_721EE:
00085498 086E 0000 002B             		bchg	#0,v_ring_speaker(a6)	; change speaker
0008549E                            
0008549E                            Sound_notB5:
0008549E 0C07 0000                  		cmpi.b	#sfx_Push,d7		; is "pushing" sound played?
000854A2 6600                       		bne.s	Sound_notA7		; if not, branch
000854A4 4A2E 002C                  		tst.b	f_push_playing(a6)	; Is pushing sound already playing?
000854A8 6600 0000                  		bne.w	locret_722C4			; Return if not
000854AC 1D7C 0080 002C             		move.b	#$80,f_push_playing(a6)	; Mark it as playing
000854B2                            		
000854B2                            Sound_notA7:
000854B2 2079 0008 4BAC             		movea.l	(Go_SoundIndex).l,a0
000854B8 0407 00A0                  		subi.b	#sfx__First,d7		; Make it 0-based
000854BC                            
000854BC                            SoundEffects_Common:		
000854BC E54F                       		lsl.w	#2,d7			; Convert sfx ID into index
000854BE 2670 7000                  		movea.l	(a0,d7.w),a3		; SFX data pointer
000854C2 224B                       		movea.l	a3,a1
000854C4 7200                       		moveq	#0,d1
000854C6 3219                       		move.w	(a1)+,d1		; Voice pointer
000854C8 D28B                       		add.l	a3,d1			; Relative pointer
000854CA 1A19                       		move.b	(a1)+,d5		; Dividing timing	
000854CC                            		; DANGER! there is a missing 'moveq	#0,d7' here, without which SFXes whose
000854CC                            		; index entry is above $3F will cause a crash. This is actually the same way that
000854CC                            		; this bug is fixed in Ristar's driver.
000854CC 7E00                       		moveq	#0,d7	
000854CE 1E19                       		move.b	(a1)+,d7	; Number of tracks (FM + PSG)
000854D0 5307                       		subq.b	#1,d7
000854D2 7C30                       		moveq	#TrackSz,d6
000854D4                            
000854D4                            loc_72228:
000854D4 7600                       		moveq	#0,d3
000854D6 1629 0001                  		move.b	1(a1),d3	; Channel assignment bits
000854DA 1803                       		move.b	d3,d4
000854DC 6B00                       		bmi.s	loc_72244	; Branch if PSG
000854DE 5543                       		subq.w	#2,d3		; SFX can only have FM3, FM4 or FM5
000854E0 E54B                       		lsl.w	#2,d3
000854E2 4BFA 0000                  		lea	SFX_BGMChannelRAM(pc),a5
000854E6 2A75 3000                  		movea.l	(a5,d3.w),a5
000854EA 08D5 0002                  		bset	#2,(a5)		; Mark music track as being overridden (TrackPlaybackControl)
000854EE 6000                       		bra.s	loc_7226E
000854F0                            ; ===========================================================================
000854F0                            
000854F0                            loc_72244:
000854F0 E64B                       		lsr.w	#3,d3
000854F2 4BFA 0000                  		lea	SFX_BGMChannelRAM(pc),a5
000854F6 2A75 3000                  		movea.l	(a5,d3.w),a5
000854FA 08D5 0002                  		bset	#2,(a5)			; Mark music track as being overridden (TrackPlaybackControl)
000854FE 0C04 00C0                  		cmpi.b	#$C0,d4			; Is this PSG 3?
00085502 6600                       		bne.s	loc_7226E	; Branch if not
00085504 1004                       		move.b	d4,d0
00085506 0000 001F                  		ori.b	#$1F,d0			; Command to silence PSG 3
0008550A 13C0 00C0 0011             		move.b	d0,(psg_input).l
00085510 0840 0005                  		bchg	#5,d0			; Command to silence noise channel
00085514 13C0 00C0 0011             		move.b	d0,(psg_input).l
0008551A                            
0008551A                            loc_7226E:
0008551A 4BFA 0000                  		lea	SFX_SFXChannelRAM(pc),a5
0008551E 2A75 3000                  		movea.l	(a5,d3.w),a5
00085522 244D                       		movea.l	a5,a2
00085524 700B                       		moveq	#(TrackSz/4)-1,d0	; $30 bytes
00085526                            
00085526                            loc_72276:
00085526 429A                       		clr.l	(a2)+
00085528 51C8 FFFC                  		dbf	d0,loc_72276
0008552C                            
0008552C 3A99                       		move.w	(a1)+,(a5)			; Initial playback control bits (TrackPlaybackControl)
0008552E 1B45 0002                  		move.b	d5,TrackTempoDivider(a5)	; Initial voice control bits
00085532 7000                       		moveq	#0,d0
00085534 3019                       		move.w	(a1)+,d0			; Track data pointer
00085536 D08B                       		add.l	a3,d0				; Relative pointer
00085538 2B40 0004                  		move.l	d0,TrackDataPointer(a5)	; Store track pointer
0008553C 3B59 0008                  		move.w	(a1)+,8(a5)
00085540 4A38 C900                  		tst.b	($FFFFC900).w	; is the Spin Dash sound playing?
00085544 6700                       		beq.s	@cont		; if not, branch
00085546 3F00                       		move.w	d0,-(sp)
00085548 1038 C902                  		move.b	($FFFFC902).w,d0
0008554C D12D 0008                  		add.b	d0,8(a5)
00085550 301F                       		move.w	(sp)+,d0
00085552                            		
00085552                            @cont:
00085552 1B7C 0001 000E             		move.b	#1,$E(a5)
00085558 1B46 000D                  		move.b	d6,TrackStackPointer(a5)	; set "gosub" (coord flag F8h) stack init value
0008555C 4A04                       		tst.b	d4				; Is this a PSG channel?
0008555E 6B00                       		bmi.s	loc_722A8		; Branch if yes
00085560 1B7C 00C0 000A             		move.b	#$C0,TrackAMSFMSPan(a5)	; AMS/FMS/Panning
00085566 2B41 0020                  		move.l	d1,TrackVoicePtr(a5)		; Voice pointer
0008556A                            
0008556A                            loc_722A8:
0008556A 51CF FF68                  		dbf	d7,loc_72228
0008556E                            
0008556E 4A2E 0250                  		tst.b	v_sfx_fm4_track+TrackPlaybackControl(a6)	; Is special SFX being played?
00085572 6A00                       		bpl.s	loc_722B8				; Branch if not
00085574 08EE 0002 0340             		bset	#2,v_spcsfx_fm4_track+TrackPlaybackControl(a6)	; Set 'SFX is overriding' bit
0008557A                            
0008557A                            loc_722B8:
0008557A 4A2E 0310                  		tst.b	v_sfx_psg3_track+TrackPlaybackControl(a6)	; Is SFX being played?
0008557E 6A00                       		bpl.s	locret_722C4						; Branch if not
00085580 08EE 0002 0370             		bset	#2,v_spcsfx_psg3_track+TrackPlaybackControl(a6)	; Set 'SFX is overriding' bit
00085586                            
00085586                            locret_722C4:
00085586 4E75                       		rts	
00085588                            ; ===========================================================================
00085588                            
00085588                            loc_722C6:
00085588 4216                       		clr.b	v_sndprio(a6)	; Clear priority
0008558A 4E75                       		rts	
0008558C                            ; ===========================================================================
0008558C                            ; ---------------------------------------------------------------------------
0008558C                            ; RAM addresses for FM and PSG channel variables used by the SFX
0008558C                            ; ---------------------------------------------------------------------------
0008558C                            ; dword_722CC: BGMChannelRAM:
0008558C                            SFX_BGMChannelRAM:
0008558C 00FF F0D0                  		dc.l (v_snddriver_ram+v_music_fm3_track)&$FFFFFF
00085590 0000 0000                  		dc.l 0
00085594 00FF F100                  		dc.l (v_snddriver_ram+v_music_fm4_track)&$FFFFFF
00085598 00FF F130                  		dc.l (v_snddriver_ram+v_music_fm5_track)&$FFFFFF
0008559C 00FF F190                  		dc.l (v_snddriver_ram+v_music_psg1_track)&$FFFFFF
000855A0 00FF F1C0                  		dc.l (v_snddriver_ram+v_music_psg2_track)&$FFFFFF
000855A4 00FF F1F0                  		dc.l (v_snddriver_ram+v_music_psg3_track)&$FFFFFF	; Plain PSG3
000855A8 00FF F1F0                  		dc.l (v_snddriver_ram+v_music_psg3_track)&$FFFFFF	; Noise
000855AC                            ; dword_722EC: SFXChannelRAM:
000855AC                            SFX_SFXChannelRAM:
000855AC 00FF F220                  		dc.l (v_snddriver_ram+v_sfx_fm3_track)&$FFFFFF
000855B0 0000 0000                  		dc.l 0
000855B4 00FF F250                  		dc.l (v_snddriver_ram+v_sfx_fm4_track)&$FFFFFF
000855B8 00FF F280                  		dc.l (v_snddriver_ram+v_sfx_fm5_track)&$FFFFFF
000855BC 00FF F2B0                  		dc.l (v_snddriver_ram+v_sfx_psg1_track)&$FFFFFF
000855C0 00FF F2E0                  		dc.l (v_snddriver_ram+v_sfx_psg2_track)&$FFFFFF
000855C4 00FF F310                  		dc.l (v_snddriver_ram+v_sfx_psg3_track)&$FFFFFF	; Plain PSG3
000855C8 00FF F310                  		dc.l (v_snddriver_ram+v_sfx_psg3_track)&$FFFFFF	; Noise
000855CC                            ; ===========================================================================
000855CC                            ; ---------------------------------------------------------------------------
000855CC                            ; Play GHZ waterfall sound
000855CC                            ; ---------------------------------------------------------------------------
000855CC                            ; Sound_D0toDF:
000855CC                            Sound_PlaySpecial:
000855CC 4A2E 0027                  		tst.b	f_1up_playing(a6)	; Is 1-up playing?
000855D0 6600 0000                  		bne.w	@locret			; Return if so
000855D4 4A2E 0004                  		tst.b	v_fadeout_counter(a6)	; Is music being faded out?
000855D8 6600 0000                  		bne.w	@locret			; Exit if it is
000855DC 4A2E 0024                  		tst.b	f_fadein_flag(a6)	; Is music being faded in?
000855E0 6600 0000                  		bne.w	@locret			; Exit if it is
000855E4 2079 0008 4BA4             		movea.l	(Go_SpecSoundIndex).l,a0
000855EA 0407 00D0                  		subi.b	#spec__First,d7		; Make it 0-based
000855EE E54F                       		lsl.w	#2,d7
000855F0 2670 7000                  		movea.l	(a0,d7.w),a3
000855F4 224B                       		movea.l	a3,a1
000855F6 7000                       		moveq	#0,d0
000855F8 3019                       		move.w	(a1)+,d0			; Voice pointer
000855FA D08B                       		add.l	a3,d0				; Relative pointer
000855FC 2D40 0020                  		move.l	d0,v_special_voice_ptr(a6)	; Store voice pointer
00085600 1A19                       		move.b	(a1)+,d5			; Dividing timing
00085602                            		; DANGER! there is a missing 'moveq	#0,d7' here, without which special SFXes whose
00085602                            		; index entry is above $3F will cause a crash. This instance was not fixed in Ristar's driver.
00085602 7E00                       		moveq	#0,d7	
00085604 1E19                       		move.b	(a1)+,d7			; Number of tracks (FM + PSG)
00085606 5307                       		subq.b	#1,d7
00085608 7C30                       		moveq	#TrackSz,d6
0008560A                            ; loc_72348:
0008560A                            @sfxloadloop:
0008560A 1829 0001                  		move.b	1(a1),d4					; Voice control bits
0008560E 6B00                       		bmi.s	@sfxoverridepsg					; Branch if PSG
00085610 08EE 0002 0100             		bset	#2,v_music_fm4_track+TrackPlaybackControl(a6)	; Set 'SFX is overriding' bit
00085616 4BEE 0340                  		lea	v_spcsfx_fm4_track(a6),a5
0008561A 6000                       		bra.s	@sfxinitpsg
0008561C                            ; ===========================================================================
0008561C                            ; loc_7235A:
0008561C                            @sfxoverridepsg:
0008561C 08EE 0002 01F0             		bset	#2,v_music_psg3_track+TrackPlaybackControl(a6)	; Set 'SFX is overriding' bit
00085622 4BEE 0370                  		lea	v_spcsfx_psg3_track(a6),a5
00085626                            ; loc_72364:
00085626                            @sfxinitpsg:
00085626 244D                       		movea.l	a5,a2
00085628 700B                       		moveq	#(TrackSz/4)-1,d0	; $30 bytes
0008562A                            ; loc_72368:
0008562A                            @clearsfxtrackram:
0008562A 429A                       		clr.l	(a2)+
0008562C 51C8 FFFC                  		dbf	d0,@clearsfxtrackram
00085630                            
00085630 3A99                       		move.w	(a1)+,(a5)			; Initial playback control bits & voice control bits (TrackPlaybackControl)
00085632 1B45 0002                  		move.b	d5,TrackTempoDivider(a5)
00085636 7000                       		moveq	#0,d0
00085638 3019                       		move.w	(a1)+,d0			; Track data pointer
0008563A D08B                       		add.l	a3,d0				; Relative pointer
0008563C 2B40 0004                  		move.l	d0,TrackDataPointer(a5)	; Store track pointer
00085640 3B59 0008                  		move.w	(a1)+,TrackTranspose(a5)	; load FM/PSG channel modifier
00085644 1B7C 0001 000E             		move.b	#1,TrackDurationTimeout(a5)	; Set duration of first "note"
0008564A 1B46 000D                  		move.b	d6,TrackStackPointer(a5)	; set "gosub" (coord flag F8h) stack init value
0008564E 4A04                       		tst.b	d4				; Is this a PSG channel?
00085650 6B00                       		bmi.s	@sfxpsginitdone			; Branch if yes
00085652 1B7C 00C0 000A             		move.b	#$C0,TrackAMSFMSPan(a5)	; AMS/FMS/Panning
00085658                            ; loc_72396:
00085658                            @sfxpsginitdone:
00085658 51CF FFB0                  		dbf	d7,@sfxloadloop
0008565C                            
0008565C 4A2E 0250                  		tst.b	v_sfx_fm4_track+TrackPlaybackControl(a6)	; Is track playing?
00085660 6A00                       		bpl.s	@doneoverride					; Branch if not
00085662 08EE 0002 0340             		bset	#2,v_spcsfx_fm4_track+TrackPlaybackControl(a6)	; Set 'SFX is overriding' bit
00085668                            ; loc_723A6:
00085668                            @doneoverride:
00085668 4A2E 0310                  		tst.b	v_sfx_psg3_track+TrackPlaybackControl(a6)	; Is track playing?
0008566C 6A00                       		bpl.s	@locret						; Branch if not
0008566E 08EE 0002 0370             		bset	#2,v_spcsfx_psg3_track+TrackPlaybackControl(a6)	; Set 'SFX is overriding' bit
00085674 0004 001F                  		ori.b	#$1F,d4						; Command to silence channel
00085678 13C4 00C0 0011             		move.b	d4,(psg_input).l
0008567E 0844 0005                  		bchg	#5,d4			; Command to silence noise channel
00085682 13C4 00C0 0011             		move.b	d4,(psg_input).l
00085688                            ; locret_723C6:
00085688                            @locret:
00085688 4E75                       		rts	
0008568A                            ; End of function PlaySoundID
0008568A                            
0008568A                            ; ===========================================================================
0008568A                            ; ---------------------------------------------------------------------------
0008568A                            ; Unused RAM addresses for FM and PSG channel variables used by the Special SFX
0008568A                            ; ---------------------------------------------------------------------------
0008568A                            ; The first block would have been used for overriding the music tracks
0008568A                            ; as they have a lower priority, just as they are in Sound_PlaySFX
0008568A                            ; The third block would be used to set up the Special SFX
0008568A                            ; The second block, however, is for the SFX tracks, which have a higher priority
0008568A                            ; and would be checked for if they're currently playing
0008568A                            ; If they are, then the third block would be used again, this time to mark
0008568A                            ; the new tracks as 'currently playing'
0008568A                            
0008568A                            ; These were actually used in Moonwalker's driver (and other SMPS 68k Type 1a drivers)
0008568A                            
0008568A                            ; BGMFM4PSG3RAM:
0008568A                            ;SpecSFX_BGMChannelRAM:
0008568A 00FF F100                  		dc.l (v_snddriver_ram+v_music_fm4_track)&$FFFFFF
0008568E 00FF F1F0                  		dc.l (v_snddriver_ram+v_music_psg3_track)&$FFFFFF
00085692                            ; SFXFM4PSG3RAM:
00085692                            ;SpecSFX_SFXChannelRAM:
00085692 00FF F250                  		dc.l (v_snddriver_ram+v_sfx_fm4_track)&$FFFFFF
00085696 00FF F310                  		dc.l (v_snddriver_ram+v_sfx_psg3_track)&$FFFFFF
0008569A                            ; SpecialSFXFM4PSG3RAM:
0008569A                            ;SpecSFX_SpecSFXChannelRAM:
0008569A 00FF F340                  		dc.l (v_snddriver_ram+v_spcsfx_fm4_track)&$FFFFFF
0008569E 00FF F370                  		dc.l (v_snddriver_ram+v_spcsfx_psg3_track)&$FFFFFF
000856A2                            
000856A2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000856A2                            
000856A2                            ; Snd_FadeOut1: Snd_FadeOutSFX: FadeOutSFX:
000856A2                            StopSFX:
000856A2 4216                       		clr.b	v_sndprio(a6)		; Clear priority
000856A4 4BEE 0220                  		lea	v_sfx_track_ram(a6),a5
000856A8 7E05                       		moveq	#((v_sfx_track_ram_end-v_sfx_track_ram)/TrackSz)-1,d7	; 3 FM + 3 PSG tracks (SFX)
000856AA                            ; loc_723EA:
000856AA                            @trackloop:
000856AA 4A15                       		tst.b	(a5)		; Is track playing? (TrackPlaybackControl)
000856AC 6A00 0000                  		bpl.w	@nexttrack	; Branch if not
000856B0 0895 0007                  		bclr	#7,(a5)		; Stop track (TrackPlaybackControl)
000856B4 7600                       		moveq	#0,d3
000856B6 162D 0001                  		move.b	TrackVoiceControl(a5),d3	; Get voice control bits
000856BA 6B00                       		bmi.s	@trackpsg			; Branch if PSG
000856BC 4EBA 0000                  		jsr	FMNoteOff(pc)
000856C0 0C03 0004                  		cmpi.b	#4,d3						; Is this FM4?
000856C4 6600                       		bne.s	@getfmpointer					; Branch if not
000856C6 4A2E 0340                  		tst.b	v_spcsfx_fm4_track+TrackPlaybackControl(a6)	; Is special SFX playing?
000856CA 6A00                       		bpl.s	@getfmpointer					; Branch if not
000856CC                            		; DANGER! there is a missing 'movea.l	a5,a3' here, without which the
000856CC                            		; code is broken. It is dangerous to do a fade out when a GHZ waterfall
000856CC                            		; is playing its sound!
000856CC 4BEE 0340                  		lea	v_spcsfx_fm4_track(a6),a5
000856D0 226E 0020                  		movea.l	v_special_voice_ptr(a6),a1	; Get special voice pointer
000856D4 6000                       		bra.s	@gotfmpointer
000856D6                            ; ===========================================================================
000856D6                            ; loc_72416:
000856D6                            @getfmpointer:
000856D6 5503                       		subq.b	#2,d3		; SFX only has FM3 and up
000856D8 E50B                       		lsl.b	#2,d3
000856DA 41FA FEB0                  		lea	SFX_BGMChannelRAM(pc),a0
000856DE 264D                       		movea.l	a5,a3
000856E0 2A70 3000                  		movea.l	(a0,d3.w),a5
000856E4 226E 0018                  		movea.l	v_voice_ptr(a6),a1	; Get music voice pointer
000856E8                            ; loc_72428:
000856E8                            @gotfmpointer:
000856E8 0895 0002                  		bclr	#2,(a5)			; Clear 'SFX is overriding' bit (TrackPlaybackControl)
000856EC 08D5 0001                  		bset	#1,(a5)			; Set 'track at rest' bit (TrackPlaybackControl)
000856F0 102D 000B                  		move.b	TrackVoiceIndex(a5),d0	; Current voice
000856F4 4EBA 0000                  		jsr	SetVoice(pc)
000856F8 2A4B                       		movea.l	a3,a5
000856FA 6000                       		bra.s	@nexttrack
000856FC                            ; ===========================================================================
000856FC                            ; loc_7243C:
000856FC                            @trackpsg:
000856FC 4EBA 0000                  		jsr	PSGNoteOff(pc)
00085700 41EE 0370                  		lea	v_spcsfx_psg3_track(a6),a0
00085704 0C03 00E0                  		cmpi.b	#$E0,d3			; Is this a noise channel:
00085708 6700                       		beq.s	@gotpsgpointer		; Branch if yes
0008570A 0C03 00C0                  		cmpi.b	#$C0,d3			; Is this PSG 3?
0008570E 6700                       		beq.s	@gotpsgpointer		; Branch if yes
00085710 E60B                       		lsr.b	#3,d3
00085712 41FA FE78                  		lea	SFX_BGMChannelRAM(pc),a0
00085716 2070 3000                  		movea.l	(a0,d3.w),a0
0008571A                            ; loc_7245A:
0008571A                            @gotpsgpointer:
0008571A 0890 0002                  		bclr	#2,(a0)				; Clear 'SFX is overriding' bit (TrackPlaybackControl)
0008571E 08D0 0001                  		bset	#1,(a0)				; Set 'track at rest' bit (TrackPlaybackControl)
00085722 0C28 00E0 0001             		cmpi.b	#$E0,TrackVoiceControl(a0)	; Is this a noise channel?
00085728 6600                       		bne.s	@nexttrack			; Branch if not
0008572A 13E8 001F 00C0 0011        		move.b	TrackPSGNoise(a0),(psg_input).l ; Set noise type
00085732                            ; loc_72472:
00085732                            @nexttrack:
00085732 DAFC 0030                  		adda.w	#TrackSz,a5
00085736 51CF FF72                  		dbf	d7,@trackloop
0008573A                            
0008573A 4E75                       		rts	
0008573C                            ; End of function StopSFX
0008573C                            
0008573C                            
0008573C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0008573C                            
0008573C                            ; Snd_FadeOut2: FadeOutSFX2: FadeOutSpecialSFX:
0008573C                            StopSpecialSFX:
0008573C 4BEE 0340                  		lea	v_spcsfx_fm4_track(a6),a5
00085740 4A15                       		tst.b	(a5)			; Is track playing? (TrackPlaybackControl)
00085742 6A00                       		bpl.s	@fadedfm		; Branch if not
00085744 0895 0007                  		bclr	#7,(a5)			; Stop track (TrackPlaybackControl)
00085748 0815 0002                  		btst	#2,(a5)			; Is SFX overriding? (TrackPlaybackControl)
0008574C 6600                       		bne.s	@fadedfm		; Branch if not
0008574E 4EBA 0000                  		jsr	SendFMNoteOff(pc)
00085752 4BEE 0100                  		lea	v_music_fm4_track(a6),a5
00085756 0895 0002                  		bclr	#2,(a5)			; Clear 'SFX is overriding' bit (TrackPlaybackControl)
0008575A 08D5 0001                  		bset	#1,(a5)			; Set 'track at rest' bit (TrackPlaybackControl)
0008575E 4A15                       		tst.b	(a5)			; Is track playing? (TrackPlaybackControl)
00085760 6A00                       		bpl.s	@fadedfm		; Branch if not
00085762 226E 0018                  		movea.l	v_voice_ptr(a6),a1	; Voice pointer
00085766 102D 000B                  		move.b	TrackVoiceIndex(a5),d0	; Current voice
0008576A 4EBA 0000                  		jsr	SetVoice(pc)
0008576E                            ; loc_724AE:
0008576E                            @fadedfm:
0008576E 4BEE 0370                  		lea	v_spcsfx_psg3_track(a6),a5
00085772 4A15                       		tst.b	(a5)			; Is track playing? (TrackPlaybackControl)
00085774 6A00                       		bpl.s	@fadedpsg		; Branch if not
00085776 0895 0007                  		bclr	#7,(a5)			; Stop track (TrackPlaybackControl)
0008577A 0815 0002                  		btst	#2,(a5)			; Is SFX overriding? (TrackPlaybackControl)
0008577E 6600                       		bne.s	@fadedpsg		; Return if not
00085780 4EBA 0000                  		jsr	SendPSGNoteOff(pc)
00085784 4BEE 01F0                  		lea	v_music_psg3_track(a6),a5
00085788 0895 0002                  		bclr	#2,(a5)			; Clear 'SFX is overriding' bit (TrackPlaybackControl)
0008578C 08D5 0001                  		bset	#1,(a5)			; Set 'track at rest' bit (TrackPlaybackControl)
00085790 4A15                       		tst.b	(a5)			; Is track playing? (TrackPlaybackControl)
00085792 6A00                       		bpl.s	@fadedpsg		; Return if not
00085794 0C2D 00E0 0001             		cmpi.b	#$E0,TrackVoiceControl(a5)	; Is this a noise channel?
0008579A 6600                       		bne.s	@fadedpsg			; Return if not
0008579C 13ED 001F 00C0 0011        		move.b	TrackPSGNoise(a5),(psg_input).l ; Set noise type
000857A4                            ; locret_724E4:
000857A4                            @fadedpsg:
000857A4 4E75                       		rts	
000857A6                            ; End of function StopSpecialSFX
000857A6                            
000857A6                            ; ===========================================================================
000857A6                            ; ---------------------------------------------------------------------------
000857A6                            ; Fade out music
000857A6                            ; ---------------------------------------------------------------------------
000857A6                            ; Sound_E0:
000857A6                            FadeOutMusic:
000857A6 4EBA FEFA                  		jsr	StopSFX(pc)
000857AA 4EBA FF90                  		jsr	StopSpecialSFX(pc)
000857AE 1D7C 0003 0006             		move.b	#3,v_fadeout_delay(a6)			; Set fadeout delay to 3
000857B4 1D7C 0028 0004             		move.b	#$28,v_fadeout_counter(a6)		; Set fadeout counter
000857BA 422E 0040                  		clr.b	v_music_dac_track+TrackPlaybackControl(a6)	; Stop DAC track
000857BE 422E 002A                  		clr.b	f_speedup(a6)				; Disable speed shoes tempo
000857C2 4E75                       		rts	
000857C4                            
000857C4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000857C4                            
000857C4                            ; sub_72504:
000857C4                            DoFadeOut:
000857C4 102E 0006                  		move.b	v_fadeout_delay(a6),d0	; Has fadeout delay expired?
000857C8 6700                       		beq.s	@continuefade		; Branch if yes
000857CA 532E 0006                  		subq.b	#1,v_fadeout_delay(a6)
000857CE 4E75                       		rts	
000857D0                            ; ===========================================================================
000857D0                            ; loc_72510:
000857D0                            @continuefade:
000857D0 532E 0004                  		subq.b	#1,v_fadeout_counter(a6)	; Update fade counter
000857D4 6700 0000                  		beq.w	StopAllSound			; Branch if fade is done
000857D8 1D7C 0003 0006             		move.b	#3,v_fadeout_delay(a6)		; Reset fade delay
000857DE 4BEE 0070                  		lea	v_music_fm_tracks(a6),a5
000857E2 7E05                       		moveq	#((v_music_fm_tracks_end-v_music_fm_tracks)/TrackSz)-1,d7	; 6 FM tracks
000857E4                            ; loc_72524:
000857E4                            @fmloop:
000857E4 4A15                       		tst.b	(a5)			; Is track playing? (TrackPlaybackControl)
000857E6 6A00                       		bpl.s	@nextfm			; Branch if not
000857E8 522D 0009                  		addq.b	#1,TrackVolume(a5)	; Increase volume attenuation
000857EC 6A00                       		bpl.s	@sendfmtl		; Branch if still positive
000857EE 0895 0007                  		bclr	#7,(a5)			; Stop track (TrackPlaybackControl)
000857F2 6000                       		bra.s	@nextfm
000857F4                            ; ===========================================================================
000857F4                            ; loc_72534:
000857F4                            @sendfmtl:
000857F4 4EBA 0000                  		jsr	SendVoiceTL(pc)
000857F8                            ; loc_72538:
000857F8                            @nextfm:
000857F8 DAFC 0030                  		adda.w	#TrackSz,a5
000857FC 51CF FFE6                  		dbf	d7,@fmloop
00085800                            
00085800 7E02                       		moveq	#((v_music_psg_tracks_end-v_music_psg_tracks)/TrackSz)-1,d7	; 3 PSG tracks
00085802                            ; loc_72542:
00085802                            @psgloop:
00085802 4A15                       		tst.b	(a5)			; Is track playing? (TrackPlaybackControl)
00085804 6A00                       		bpl.s	@nextpsg		; branch if not
00085806 522D 0009                  		addq.b	#1,TrackVolume(a5)	; Increase volume attenuation
0008580A 0C2D 0010 0009             		cmpi.b	#$10,TrackVolume(a5)	; Is it greater than $F?
00085810 6500                       		blo.s	@sendpsgvol		; Branch if not
00085812 0895 0007                  		bclr	#7,(a5)			; Stop track (TrackPlaybackControl)
00085816 6000                       		bra.s	@nextpsg
00085818                            ; ===========================================================================
00085818                            ; loc_72558:
00085818                            @sendpsgvol:
00085818 1C2D 0009                  		move.b	TrackVolume(a5),d6	; Store new volume attenuation
0008581C 4EBA 0000                  		jsr	SetPSGVolume(pc)
00085820                            ; loc_72560:
00085820                            @nextpsg:
00085820 DAFC 0030                  		adda.w	#TrackSz,a5
00085824 51CF FFDC                  		dbf	d7,@psgloop
00085828                            
00085828 4E75                       		rts	
0008582A                            ; End of function DoFadeOut
0008582A                            
0008582A                            
0008582A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0008582A                            
0008582A                            ; sub_7256A:
0008582A                            FMSilenceAll:
0008582A 7602                       		moveq	#2,d3		; 3 FM channels for each YM2612 parts
0008582C 7028                       		moveq	#$28,d0		; FM key on/off register
0008582E                            ; loc_7256E:
0008582E                            @noteoffloop:
0008582E 1203                       		move.b	d3,d1
00085830 4EBA 0000                  		jsr	WriteFMI(pc)
00085834 5801                       		addq.b	#4,d1		; Move to YM2612 part 1
00085836 4EBA 0000                  		jsr	WriteFMI(pc)
0008583A 51CB FFF2                  		dbf	d3,@noteoffloop
0008583E                            
0008583E 7040                       		moveq	#$40,d0		; Set TL on FM channels...
00085840 727F                       		moveq	#$7F,d1		; ... to total attenuation...
00085842 7802                       		moveq	#2,d4		; ... for all 3 channels...
00085844                            ; loc_72584:
00085844                            @channelloop:
00085844 7603                       		moveq	#3,d3		; ... for all operators on each channel...
00085846                            ; loc_72586:
00085846                            @channeltlloop:
00085846 4EBA 0000                  		jsr	WriteFMI(pc)	; ... for part 0...
0008584A 4EBA 0000                  		jsr	WriteFMII(pc)	; ... and part 1.
0008584E 5840                       		addq.w	#4,d0		; Next TL operator
00085850 51CB FFF4                  		dbf	d3,@channeltlloop
00085854                            
00085854 0400 000F                  		subi.b	#$F,d0		; Move to TL operator 1 of next channel
00085858 51CC FFEA                  		dbf	d4,@channelloop
0008585C                            
0008585C 4E75                       		rts	
0008585E                            ; End of function FMSilenceAll
0008585E                            
0008585E                            ; ===========================================================================
0008585E                            ; ---------------------------------------------------------------------------
0008585E                            ; Stop music
0008585E                            ; ---------------------------------------------------------------------------
0008585E                            ; Sound_E4: StopSoundAndMusic:
0008585E                            StopAllSound:
0008585E 702B                       		moveq	#$2B,d0		; Enable/disable DAC
00085860 123C 0080                  		move.b	#$80,d1		; Enable DAC
00085864 4EBA 0000                  		jsr	WriteFMI(pc)
00085868 7027                       		moveq	#$27,d0		; Timers, FM3/FM6 mode
0008586A 7200                       		moveq	#0,d1		; FM3/FM6 normal mode, disable timers
0008586C 4EBA 0000                  		jsr	WriteFMI(pc)
00085870 204E                       		movea.l	a6,a0
00085872                            		; DANGER! This should be clearing all variables and track data, but misses the last $10 bytes of v_spcsfx_psg3_track.
00085872                            		; Remove the '-$10' to fix this.
00085872 303C 00E7                  		move.w	#((v_spcsfx_track_ram_end-v_startofvariables)/4)-1,d0	; Clear $390 bytes: all variables and most track data
00085876                            ; loc_725B6:
00085876                            @clearramloop:
00085876 4298                       		clr.l	(a0)+
00085878 51C8 FFFC                  		dbf	d0,@clearramloop
0008587C                            
0008587C 1D7C 0080 0009             		move.b	#$80,v_sound_id(a6)	; set music to $80 (silence)
00085882 4EBA FFA6                  		jsr	FMSilenceAll(pc)
00085886 6000 0000                  		bra.w	PSGSilenceAll
0008588A                            
0008588A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0008588A                            
0008588A                            ; sub_725CA:
0008588A                            InitMusicPlayback:
0008588A 204E                       		movea.l	a6,a0
0008588C                            		; Save several values
0008588C 1216                       		move.b	v_sndprio(a6),d1
0008588E 142E 0027                  		move.b	f_1up_playing(a6),d2
00085892 162E 002A                  		move.b	f_speedup(a6),d3
00085896 182E 0026                  		move.b	v_fadein_counter(a6),d4
0008589A                            		; DANGER! Only v_soundqueue0 and v_soundqueue1 are backed up, once again breaking v_soundqueue2
0008589A 3A2E 000A                  		move.w	v_soundqueue0(a6),d5
0008589E 303C 0087                  		move.w	#((v_music_track_ram_end-v_startofvariables)/4)-1,d0	; Clear $220 bytes: all variables and music track data
000858A2                            ; loc_725E4:
000858A2                            @clearramloop:
000858A2 4298                       		clr.l	(a0)+
000858A4 51C8 FFFC                  		dbf	d0,@clearramloop
000858A8                            
000858A8                            		; Restore the values saved above
000858A8 1C81                       		move.b	d1,v_sndprio(a6)
000858AA 1D42 0027                  		move.b	d2,f_1up_playing(a6)
000858AE 1D43 002A                  		move.b	d3,f_speedup(a6)
000858B2 1D44 0026                  		move.b	d4,v_fadein_counter(a6)
000858B6 3D45 000A                  		move.w	d5,v_soundqueue0(a6)
000858BA 1D7C 0080 0009             		move.b	#$80,v_sound_id(a6)	; set music to $80 (silence)
000858C0                            		; DANGER! This silences ALL channels, even the ones being used
000858C0                            		; by SFX, and not music! @sendfmnoteoff does this already, and
000858C0                            		; doesn't affect SFX channels, either.
000858C0                            		; This should be replaced with an 'rts'.
000858C0 4EBA FF68                  		jsr	FMSilenceAll(pc)
000858C4 6000 0000                  		bra.w	PSGSilenceAll
000858C8                            		; DANGER! InitMusicPlayback, and Sound_PlayBGM for that matter,
000858C8                            		; don't do a very good job of setting up the music tracks.
000858C8                            		; Tracks that aren't defined in a music file's header don't have
000858C8                            		; their channels defined, meaning @sendfmnoteoff won't silence
000858C8                            		; hardware properly. In combination with removing the above
000858C8                            		; calls to FMSilenceAll/PSGSilenceAll, this will cause hanging
000858C8                            		; notes.
000858C8                            		; To fix this, I suggest using this code, instead of an 'rts':
000858C8                            		;lea	v_music_track_ram+TrackVoiceControl(a6),a1
000858C8                            		;lea	FMDACInitBytes(pc),a2
000858C8                            		;moveq	#((v_music_fmdac_tracks_end-v_music_fmdac_tracks)/TrackSz)-1,d1		; 7 DAC/FM tracks
000858C8                            		;bsr.s	@writeloop
000858C8                            		;lea	PSGInitBytes(pc),a2
000858C8                            		;moveq	#((v_music_psg_tracks_end-v_music_psg_tracks)/TrackSz)-1,d1	; 3 PSG tracks
000858C8                            
000858C8                            ;@writeloop:
000858C8                            		;move.b	(a2)+,(a1)		; Write track's channel byte
000858C8                            		;lea	TrackSz(a1),a1		; Next track
000858C8                            		;dbf	d1,@writeloop		; Loop for all DAC/FM/PSG tracks
000858C8                            
000858C8                            		;rts
000858C8                            	
000858C8                            ; End of function InitMusicPlayback
000858C8                            
000858C8                            
000858C8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000858C8                            
000858C8                            ; sub_7260C:
000858C8                            TempoWait:
000858C8 1D6E 0002 0001             		move.b	v_main_tempo(a6),v_main_tempo_timeout(a6)	; Reset main tempo timeout
000858CE 41EE 004E                  		lea	v_music_track_ram+TrackDurationTimeout(a6),a0	; note timeout
000858D2 7030                       		moveq	#TrackSz,d0
000858D4 7209                       		moveq	#((v_music_track_ram_end-v_music_track_ram)/TrackSz)-1,d1		; 1 DAC + 6 FM + 3 PSG tracks
000858D6                            ; loc_7261A:
000858D6                            @tempoloop:
000858D6 5210                       		addq.b	#1,(a0)	; Delay note by 1 frame
000858D8 D0C0                       		adda.w	d0,a0	; Advance to next track
000858DA 51C9 FFFA                  		dbf	d1,@tempoloop
000858DE                            
000858DE 4E75                       		rts	
000858E0                            ; End of function TempoWait
000858E0                            
000858E0                            ; ===========================================================================
000858E0                            ; ---------------------------------------------------------------------------
000858E0                            ; Speed	up music
000858E0                            ; ---------------------------------------------------------------------------
000858E0                            ; Sound_E2:
000858E0                            SpeedUpMusic:
000858E0 4A2E 0027                  		tst.b	f_1up_playing(a6)
000858E4 6600                       		bne.s	@speedup_1up
000858E6 1D6E 0029 0002             		move.b	v_speeduptempo(a6),v_main_tempo(a6)
000858EC 1D6E 0029 0001             		move.b	v_speeduptempo(a6),v_main_tempo_timeout(a6)
000858F2 1D7C 0080 002A             		move.b	#$80,f_speedup(a6)
000858F8 4E75                       		rts	
000858FA                            ; ===========================================================================
000858FA                            ; loc_7263E:
000858FA                            @speedup_1up:
000858FA 1D6E 03C9 03A2             		move.b	v_1up_ram_copy+v_speeduptempo(a6),v_1up_ram_copy+v_main_tempo(a6)
00085900 1D6E 03C9 03A1             		move.b	v_1up_ram_copy+v_speeduptempo(a6),v_1up_ram_copy+v_main_tempo_timeout(a6)
00085906 1D7C 0080 03CA             		move.b	#$80,v_1up_ram_copy+f_speedup(a6)
0008590C 4E75                       		rts	
0008590E                            ; ===========================================================================
0008590E                            ; ---------------------------------------------------------------------------
0008590E                            ; Change music back to normal speed
0008590E                            ; ---------------------------------------------------------------------------
0008590E                            ; Sound_E3:
0008590E                            SlowDownMusic:
0008590E 4A2E 0027                  		tst.b	f_1up_playing(a6)
00085912 6600                       		bne.s	@slowdown_1up
00085914 1D6E 0028 0002             		move.b	v_tempo_mod(a6),v_main_tempo(a6)
0008591A 1D6E 0028 0001             		move.b	v_tempo_mod(a6),v_main_tempo_timeout(a6)
00085920 422E 002A                  		clr.b	f_speedup(a6)
00085924 4E75                       		rts	
00085926                            ; ===========================================================================
00085926                            ; loc_7266A:
00085926                            @slowdown_1up:
00085926 1D6E 03C8 03A2             		move.b	v_1up_ram_copy+v_tempo_mod(a6),v_1up_ram_copy+v_main_tempo(a6)
0008592C 1D6E 03C8 03A1             		move.b	v_1up_ram_copy+v_tempo_mod(a6),v_1up_ram_copy+v_main_tempo_timeout(a6)
00085932 422E 03CA                  		clr.b	v_1up_ram_copy+f_speedup(a6)
00085936 4E75                       		rts	
00085938                            
00085938                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00085938                            
00085938                            ; sub_7267C:
00085938                            DoFadeIn:
00085938 4A2E 0025                  		tst.b	v_fadein_delay(a6)	; Has fadein delay expired?
0008593C 6700                       		beq.s	@continuefade		; Branch if yes
0008593E 532E 0025                  		subq.b	#1,v_fadein_delay(a6)
00085942 4E75                       		rts	
00085944                            ; ===========================================================================
00085944                            ; loc_72688:
00085944                            @continuefade:
00085944 4A2E 0026                  		tst.b	v_fadein_counter(a6)	; Is fade done?
00085948 6700                       		beq.s	@fadedone		; Branch if yes
0008594A 532E 0026                  		subq.b	#1,v_fadein_counter(a6)	; Update fade counter
0008594E 1D7C 0002 0025             		move.b	#2,v_fadein_delay(a6)	; Reset fade delay
00085954 4BEE 0070                  		lea	v_music_fm_tracks(a6),a5
00085958 7E05                       		moveq	#((v_music_fm_tracks_end-v_music_fm_tracks)/TrackSz)-1,d7	; 6 FM tracks
0008595A                            ; loc_7269E:
0008595A                            @fmloop:
0008595A 4A15                       		tst.b	(a5)			; Is track playing? (TrackPlaybackControl)
0008595C 6A00                       		bpl.s	@nextfm			; Branch if not
0008595E 532D 0009                  		subq.b	#1,TrackVolume(a5)	; Reduce volume attenuation
00085962 4EBA 0000                  		jsr	SendVoiceTL(pc)
00085966                            ; loc_726AA:
00085966                            @nextfm:
00085966 DAFC 0030                  		adda.w	#TrackSz,a5
0008596A 51CF FFEE                  		dbf	d7,@fmloop
0008596E 7E02                       		moveq	#((v_music_psg_tracks_end-v_music_psg_tracks)/TrackSz)-1,d7		; 3 PSG tracks
00085970                            ; loc_726B4:
00085970                            @psgloop:
00085970 4A15                       		tst.b	(a5)			; Is track playing? (TrackPlaybackControl)
00085972 6A00                       		bpl.s	@nextpsg		; Branch if not
00085974 532D 0009                  		subq.b	#1,TrackVolume(a5)	; Reduce volume attenuation
00085978 1C2D 0009                  		move.b	TrackVolume(a5),d6	; Get value
0008597C 0C06 0010                  		cmpi.b	#$10,d6			; Is it is < $10?
00085980 6500                       		blo.s	@sendpsgvol		; Branch if yes
00085982 7C0F                       		moveq	#$F,d6			; Limit to $F (maximum attenuation)
00085984                            ; loc_726C8:
00085984                            @sendpsgvol:
00085984 4EBA 0000                  		jsr	SetPSGVolume(pc)
00085988                            ; loc_726CC:
00085988                            @nextpsg:
00085988 DAFC 0030                  		adda.w	#TrackSz,a5
0008598C 51CF FFE2                  		dbf	d7,@psgloop
00085990 4E75                       		rts	
00085992                            ; ===========================================================================
00085992                            ; loc_726D6:
00085992                            @fadedone:
00085992 08AE 0002 0040             		bclr	#2,v_music_dac_track+TrackPlaybackControl(a6)	; Clear 'SFX overriding' bit
00085998 422E 0024                  		clr.b	f_fadein_flag(a6)				; Stop fadein
0008599C 4E75                       		rts	
0008599E                            ; End of function DoFadeIn
0008599E                            
0008599E                            ; ===========================================================================
0008599E                            ; loc_726E2:
0008599E                            FMNoteOn:
0008599E 0815 0001                  		btst	#1,(a5)		; Is track resting? (TrackPlaybackControl)
000859A2 6600                       		bne.s	@locret		; Return if so
000859A4 0815 0002                  		btst	#2,(a5)		; Is track being overridden? (TrackPlaybackControl)
000859A8 6600                       		bne.s	@locret		; Return if so
000859AA 7028                       		moveq	#$28,d0		; Note on/off register
000859AC 122D 0001                  		move.b	TrackVoiceControl(a5),d1 ; Get channel bits
000859B0 0001 00F0                  		ori.b	#$F0,d1		; Note on on all operators
000859B4 6000 0000                  		bra.w	WriteFMI
000859B8                            ; ===========================================================================
000859B8                            ; locret_726FC:
000859B8                            @locret:
000859B8 4E75                       		rts	
000859BA                            
000859BA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000859BA                            
000859BA                            ; sub_726FE:
000859BA                            FMNoteOff:
000859BA 0815 0004                  		btst	#4,(a5)		; Is 'do not attack next note' set? (TrackPlaybackControl)
000859BE 6600                       		bne.s	locret_72714	; Return if yes
000859C0 0815 0002                  		btst	#2,(a5)		; Is SFX overriding? (TrackPlaybackControl)
000859C4 6600                       		bne.s	locret_72714	; Return if yes
000859C6                            ; loc_7270A:
000859C6                            SendFMNoteOff:
000859C6 7028                       		moveq	#$28,d0		; Note on/off register
000859C8 122D 0001                  		move.b	TrackVoiceControl(a5),d1 ; Note off to this channel
000859CC 6000 0000                  		bra.w	WriteFMI
000859D0                            ; ===========================================================================
000859D0                            
000859D0                            locret_72714:
000859D0 4E75                       		rts	
000859D2                            ; End of function FMNoteOff
000859D2                            
000859D2                            ; ===========================================================================
000859D2                            ; loc_72716:
000859D2                            WriteFMIorIIMain:
000859D2 0815 0002                  		btst	#2,(a5)		; Is track being overriden by sfx? (TrackPlaybackControl)
000859D6 6600                       		bne.s	@locret		; Return if yes
000859D8 6000 0000                  		bra.w	WriteFMIorII
000859DC                            ; ===========================================================================
000859DC                            ; locret_72720:
000859DC                            @locret:
000859DC 4E75                       		rts	
000859DE                            
000859DE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000859DE                            
000859DE                            ; sub_72722:
000859DE                            WriteFMIorII:
000859DE 082D 0002 0001             		btst	#2,TrackVoiceControl(a5)	; Is this bound for part I or II?
000859E4 6600                       		bne.s	WriteFMIIPart			; Branch if for part II
000859E6 D02D 0001                  		add.b	TrackVoiceControl(a5),d0	; Add in voice control bits
000859EA                            ; End of function WriteFMIorII
000859EA                            
000859EA                            
000859EA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000859EA                            
000859EA                            ; The reason I think this is an *early* SMPS 68k Type 1b
000859EA                            ; is because this subroutine is the one from Type 1a:
000859EA                            ; other Type 1b drivers have a newer, optimised version.
000859EA                            ; The driver itself is Type 1b, with this odd exception.
000859EA                            
000859EA                            ; sub_7272E:
000859EA                            WriteFMI:
000859EA 1439 00A0 4000             		move.b	(ym2612_a0).l,d2
000859F0 0802 0007                  		btst	#7,d2		; Is FM busy?
000859F4 66F4                       		bne.s	WriteFMI	; Loop if so
000859F6 13C0 00A0 4000             		move.b	d0,(ym2612_a0).l
000859FC 4E71                       		nop	
000859FE 4E71                       		nop	
00085A00 4E71                       		nop	
00085A02                            ; loc_72746:
00085A02                            @waitloop:
00085A02 1439 00A0 4000             		move.b	(ym2612_a0).l,d2
00085A08 0802 0007                  		btst	#7,d2		; Is FM busy?
00085A0C 66F4                       		bne.s	@waitloop	; Loop if so
00085A0E                            
00085A0E 13C1 00A0 4001             		move.b	d1,(ym2612_d0).l
00085A14 4E75                       		rts	
00085A16                            ; End of function WriteFMI
00085A16                            
00085A16                            ; ===========================================================================
00085A16                            ; loc_7275A:
00085A16                            WriteFMIIPart:
00085A16 142D 0001                  		move.b	TrackVoiceControl(a5),d2 ; Get voice control bits
00085A1A 0882 0002                  		bclr	#2,d2			; Clear chip toggle
00085A1E D002                       		add.b	d2,d0			; Add in to destination register
00085A20                            
00085A20                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00085A20                            
00085A20                            ; sub_72764:
00085A20                            WriteFMII:
00085A20 1439 00A0 4000             		move.b	(ym2612_a0).l,d2
00085A26 0802 0007                  		btst	#7,d2		; Is FM busy?
00085A2A 66F4                       		bne.s	WriteFMII	; Loop if so
00085A2C 13C0 00A0 4002             		move.b	d0,(ym2612_a1).l
00085A32 4E71                       		nop	
00085A34 4E71                       		nop	
00085A36 4E71                       		nop	
00085A38                            ; loc_7277C:
00085A38                            @waitloop:
00085A38 1439 00A0 4000             		move.b	(ym2612_a0).l,d2
00085A3E 0802 0007                  		btst	#7,d2		; Is FM busy?
00085A42 66F4                       		bne.s	@waitloop	; Loop if so
00085A44                            
00085A44 13C1 00A0 4003             		move.b	d1,(ym2612_d1).l
00085A4A 4E75                       		rts	
00085A4C                            ; End of function WriteFMII
00085A4C                            
00085A4C                            ; ===========================================================================
00085A4C                            ; ---------------------------------------------------------------------------
00085A4C                            ; FM Note Values: b-0 to a#8
00085A4C                            ; ---------------------------------------------------------------------------
00085A4C                            ; word_72790: FM_Notes:
00085A4C                            FMFrequencies:
00085A4C 025E 0284 02AB 02D3 02FE+  	dc.w $025E,$0284,$02AB,$02D3,$02FE,$032D,$035C,$038F,$03C5,$03FF,$043C,$047C
00085A64 0A5E 0A84 0AAB 0AD3 0AFE+  	dc.w $0A5E,$0A84,$0AAB,$0AD3,$0AFE,$0B2D,$0B5C,$0B8F,$0BC5,$0BFF,$0C3C,$0C7C
00085A7C 125E 1284 12AB 12D3 12FE+  	dc.w $125E,$1284,$12AB,$12D3,$12FE,$132D,$135C,$138F,$13C5,$13FF,$143C,$147C
00085A94 1A5E 1A84 1AAB 1AD3 1AFE+  	dc.w $1A5E,$1A84,$1AAB,$1AD3,$1AFE,$1B2D,$1B5C,$1B8F,$1BC5,$1BFF,$1C3C,$1C7C
00085AAC 225E 2284 22AB 22D3 22FE+  	dc.w $225E,$2284,$22AB,$22D3,$22FE,$232D,$235C,$238F,$23C5,$23FF,$243C,$247C
00085AC4 2A5E 2A84 2AAB 2AD3 2AFE+  	dc.w $2A5E,$2A84,$2AAB,$2AD3,$2AFE,$2B2D,$2B5C,$2B8F,$2BC5,$2BFF,$2C3C,$2C7C
00085ADC 325E 3284 32AB 32D3 32FE+  	dc.w $325E,$3284,$32AB,$32D3,$32FE,$332D,$335C,$338F,$33C5,$33FF,$343C,$347C
00085AF4 3A5E 3A84 3AAB 3AD3 3AFE+  	dc.w $3A5E,$3A84,$3AAB,$3AD3,$3AFE,$3B2D,$3B5C,$3B8F,$3BC5,$3BFF,$3C3C,$3C7C
00085B0C                            
00085B0C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00085B0C                            
00085B0C                            ; sub_72850:
00085B0C                            PSGUpdateTrack:
00085B0C 532D 000E                  		subq.b	#1,TrackDurationTimeout(a5)	; Update note timeout
00085B10 6600                       		bne.s	@notegoing
00085B12 0895 0004                  		bclr	#4,(a5)				; Clear 'do not attack note' bit (TrackPlaybackControl)
00085B16 4EBA 0000                  		jsr	PSGDoNext(pc)
00085B1A 4EBA 0000                  		jsr	PSGDoNoteOn(pc)
00085B1E 6000 0000                  		bra.w	PSGDoVolFX
00085B22                            ; ===========================================================================
00085B22                            ; loc_72866:
00085B22                            @notegoing:
00085B22 4EBA F4CA                  		jsr	NoteTimeoutUpdate(pc)
00085B26 4EBA 0000                  		jsr	PSGUpdateVolFX(pc)
00085B2A 4EBA F4EA                  		jsr	DoModulation(pc)
00085B2E 4EBA 0000                  		jsr	PSGUpdateFreq(pc)	; It would be better if this were a jmp and the rts was removed
00085B32 4E75                       		rts
00085B34                            ; End of function PSGUpdateTrack
00085B34                            
00085B34                            
00085B34                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00085B34                            
00085B34                            ; sub_72878:
00085B34                            PSGDoNext:
00085B34 0895 0001                  		bclr	#1,(a5)				; Clear 'track at rest' bit (TrackPlaybackControl)
00085B38 286D 0004                  		movea.l	TrackDataPointer(a5),a4	; Get track data pointer
00085B3C                            ; loc_72880:
00085B3C                            @noteloop:
00085B3C 7A00                       		moveq	#0,d5
00085B3E 1A1C                       		move.b	(a4)+,d5	; Get byte from track
00085B40 0C05 00E0                  		cmpi.b	#$E0,d5		; Is it a coord. flag?
00085B44 6500                       		blo.s	@gotnote	; Branch if not
00085B46 4EBA 0000                  		jsr	CoordFlag(pc)
00085B4A 60F0                       		bra.s	@noteloop
00085B4C                            ; ===========================================================================
00085B4C                            ; loc_72890:
00085B4C                            @gotnote:
00085B4C 4A05                       		tst.b	d5		; Is it a note?
00085B4E 6A00                       		bpl.s	@gotduration	; Branch if not
00085B50 4EBA 0000                  		jsr	PSGSetFreq(pc)
00085B54 1A1C                       		move.b	(a4)+,d5	; Get another byte
00085B56 4A05                       		tst.b	d5		; Is it a duration?
00085B58 6A00                       		bpl.s	@gotduration	; Branch if yes
00085B5A 534C                       		subq.w	#1,a4		; Put byte back
00085B5C 6000 F452                  		bra.w	FinishTrackUpdate
00085B60                            ; ===========================================================================
00085B60                            ; loc_728A4:
00085B60                            @gotduration:
00085B60 4EBA F42E                  		jsr	SetDuration(pc)
00085B64 6000 F44A                  		bra.w	FinishTrackUpdate
00085B68                            ; End of function PSGDoNext
00085B68                            
00085B68                            
00085B68                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00085B68                            
00085B68                            ; sub_728AC:
00085B68                            PSGSetFreq:
00085B68 0405 0081                  		subi.b	#$81,d5		; Convert to 0-based index
00085B6C 6500                       		bcs.s	@restpsg	; If $80, put track at rest
00085B6E DA2D 0008                  		add.b	TrackTranspose(a5),d5 ; Add in channel transposition
00085B72 0245 007F                  		andi.w	#$7F,d5		; Clear high byte and sign bit
00085B76 E34D                       		lsl.w	#1,d5
00085B78 41FA 0000                  		lea	PSGFrequencies(pc),a0
00085B7C 3B70 5000 0010             		move.w	(a0,d5.w),TrackFreq(a5)	; Set new frequency
00085B82 6000 F42C                  		bra.w	FinishTrackUpdate
00085B86                            ; ===========================================================================
00085B86                            ; loc_728CA:
00085B86                            @restpsg:
00085B86 08D5 0001                  		bset	#1,(a5)			; Set 'track at rest' bit (TrackPlaybackControl)
00085B8A 3B7C FFFF 0010             		move.w	#-1,TrackFreq(a5)	; Invalidate note frequency
00085B90 4EBA F41E                  		jsr	FinishTrackUpdate(pc)
00085B94 6000 0000                  		bra.w	PSGNoteOff
00085B98                            ; End of function PSGSetFreq
00085B98                            
00085B98                            
00085B98                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00085B98                            
00085B98                            ; sub_728DC:
00085B98                            PSGDoNoteOn:
00085B98 3C2D 0010                  		move.w	TrackFreq(a5),d6	; Get note frequency
00085B9C 6B00                       		bmi.s	PSGSetRest		; If invalid, branch
00085B9E                            ; End of function PSGDoNoteOn
00085B9E                            
00085B9E                            
00085B9E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00085B9E                            
00085B9E                            ; sub_728E2:
00085B9E                            PSGUpdateFreq:
00085B9E 102D 001E                  		move.b	TrackDetune(a5),d0	; Get detune value
00085BA2 4880                       		ext.w	d0
00085BA4 DC40                       		add.w	d0,d6		; Add to frequency
00085BA6 0815 0002                  		btst	#2,(a5)		; Is track being overridden? (TrackPlaybackControl)
00085BAA 6600                       		bne.s	@locret		; Return if yes
00085BAC 0815 0001                  		btst	#1,(a5)		; Is track at rest? (TrackPlaybackControl)
00085BB0 6600                       		bne.s	@locret		; Return if yes
00085BB2 102D 0001                  		move.b	TrackVoiceControl(a5),d0 ; Get channel bits
00085BB6 0C00 00E0                  		cmpi.b	#$E0,d0		; Is it a noise channel?
00085BBA 6600                       		bne.s	@notnoise	; Branch if not
00085BBC 103C 00C0                  		move.b	#$C0,d0		; Use PSG 3 channel bits
00085BC0                            ; loc_72904:
00085BC0                            @notnoise:
00085BC0 3206                       		move.w	d6,d1
00085BC2 0201 000F                  		andi.b	#$F,d1		; Low nibble of frequency
00085BC6 8001                       		or.b	d1,d0		; Latch tone data to channel
00085BC8 E84E                       		lsr.w	#4,d6		; Get upper 6 bits of frequency
00085BCA 0206 003F                  		andi.b	#$3F,d6		; Send to latched channel
00085BCE 13C0 00C0 0011             		move.b	d0,(psg_input).l
00085BD4 13C6 00C0 0011             		move.b	d6,(psg_input).l
00085BDA                            ; locret_7291E:
00085BDA                            @locret:
00085BDA 4E75                       		rts	
00085BDC                            ; End of function PSGUpdateFreq
00085BDC                            
00085BDC                            ; ===========================================================================
00085BDC                            ; loc_72920:
00085BDC                            PSGSetRest:
00085BDC 08D5 0001                  		bset	#1,(a5)	; Set 'track at rest' bit (TrackPlaybackControl)
00085BE0 4E75                       		rts	
00085BE2                            
00085BE2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00085BE2                            
00085BE2                            ; sub_72926:
00085BE2                            PSGUpdateVolFX:
00085BE2 4A2D 000B                  		tst.b	TrackVoiceIndex(a5)	; Test PSG tone
00085BE6 6700 0000                  		beq.w	locret_7298A		; Return if it is zero
00085BEA                            ; loc_7292E:
00085BEA                            PSGDoVolFX:	; This can actually be made a bit more efficient, see the comments for more
00085BEA 1C2D 0009                  		move.b	TrackVolume(a5),d6	; Get volume
00085BEE 7000                       		moveq	#0,d0
00085BF0 102D 000B                  		move.b	TrackVoiceIndex(a5),d0	; Get PSG tone
00085BF4 6700                       		beq.s	SetPSGVolume
00085BF6 2079 0008 4BB4             		movea.l	(Go_PSGIndex).l,a0
00085BFC 5340                       		subq.w	#1,d0
00085BFE E548                       		lsl.w	#2,d0
00085C00 2070 0000                  		movea.l	(a0,d0.w),a0
00085C04 102D 000C                  		move.b	TrackVolEnvIndex(a5),d0	; Get volume envelope index		; move.b	TrackVolEnvIndex(a5),d0
00085C08 1030 0000                  		move.b	(a0,d0.w),d0			; Volume envelope value			; addq.b	#1,TrackVolEnvIndex(a5)
00085C0C 522D 000C                  		addq.b	#1,TrackVolEnvIndex(a5)	; Increment volume envelope index	; move.b	(a0,d0.w),d0
00085C10 0800 0007                  		btst	#7,d0				; Is volume envelope value negative?	; <-- makes this line redundant
00085C14 6700                       		beq.s	@gotflutter			; Branch if not				; but you gotta make this one a bpl
00085C16 0C00 0080                  		cmpi.b	#$80,d0				; Is it the terminator?			; Since this is the only check, you can take the optimisation a step further:
00085C1A 6700                       		beq.s	VolEnvHold			; If so, branch				; Change the previous beq (bpl) to a bmi and make it branch to VolEnvHold to make these last two lines redundant
00085C1C                            ; loc_72960:
00085C1C                            @gotflutter:
00085C1C DC40                       		add.w	d0,d6		; Add volume envelope value to volume
00085C1E 0C06 0010                  		cmpi.b	#$10,d6		; Is volume $10 or higher?
00085C22 6500                       		blo.s	SetPSGVolume	; Branch if not
00085C24 7C0F                       		moveq	#$F,d6		; Limit to silence and fall through
00085C26                            ; End of function PSGUpdateVolFX
00085C26                            
00085C26                            
00085C26                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00085C26                            
00085C26                            ; sub_7296A:
00085C26                            SetPSGVolume:
00085C26 0815 0001                  		btst	#1,(a5)		; Is track at rest? (TrackPlaybackControl)
00085C2A 6600                       		bne.s	locret_7298A	; Return if so
00085C2C 0815 0002                  		btst	#2,(a5)		; Is SFX overriding? (TrackPlaybackControl)
00085C30 6600                       		bne.s	locret_7298A	; Return if so
00085C32 0815 0004                  		btst	#4,(a5)		; Is track set to not attack next note? (TrackPlaybackControl)
00085C36 6600                       		bne.s	PSGCheckNoteTimeout ; Branch if yes
00085C38                            ; loc_7297C:
00085C38                            PSGSendVolume:
00085C38 8C2D 0001                  		or.b	TrackVoiceControl(a5),d6 ; Add in track selector bits
00085C3C 0606 0010                  		addi.b	#$10,d6			; Mark it as a volume command
00085C40 13C6 00C0 0011             		move.b	d6,(psg_input).l
00085C46                            
00085C46                            locret_7298A:
00085C46 4E75                       		rts	
00085C48                            ; ===========================================================================
00085C48                            ; loc_7298C: PSGCheckNoteFill:
00085C48                            PSGCheckNoteTimeout:
00085C48 4A2D 0013                  		tst.b	TrackNoteTimeoutMaster(a5)	; Is note timeout on?
00085C4C 67EA                       		beq.s	PSGSendVolume			; Branch if not
00085C4E 4A2D 0012                  		tst.b	TrackNoteTimeout(a5)		; Has note timeout expired?
00085C52 66E4                       		bne.s	PSGSendVolume			; Branch if not
00085C54 4E75                       		rts	
00085C56                            ; End of function SetPSGVolume
00085C56                            
00085C56                            ; ===========================================================================
00085C56                            ; loc_7299A: FlutterDone:
00085C56                            VolEnvHold:
00085C56 532D 000C                  		subq.b	#1,TrackVolEnvIndex(a5)	; Decrement volume envelope index
00085C5A 4E75                       		rts	
00085C5C                            
00085C5C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00085C5C                            
00085C5C                            ; sub_729A0:
00085C5C                            PSGNoteOff:
00085C5C 0815 0002                  		btst	#2,(a5)		; Is SFX overriding? (TrackPlaybackControl)
00085C60 6600                       		bne.s	locret_729B4	; Return if so
00085C62                            ; loc_729A6:
00085C62                            SendPSGNoteOff:
00085C62 102D 0001                  		move.b	TrackVoiceControl(a5),d0	; PSG channel to change
00085C66 0000 001F                  		ori.b	#$1F,d0				; Maximum volume attenuation
00085C6A 13C0 00C0 0011             		move.b	d0,(psg_input).l
00085C70                            		; DANGER! If InitMusicPlayback doesn't silence all channels, there's the
00085C70                            		; risk of music accidentally playing noise because it can't detect if
00085C70                            		; the PSG4/noise channel needs muting on track initialisation.
00085C70                            		; S&K's driver fixes it by doing this:
00085C70 0C00 00DF                  		cmpi.b	#$DF,d0				; Are stopping PSG3?
00085C74 6600                       		bne.s	locret_729B4
00085C76 13FC 00FF 00C0 0011        		move.b	#$FF,(psg_input).l		; If so, stop noise channel while we're at it
00085C7E                            
00085C7E                            locret_729B4:
00085C7E 4E75                       		rts	
00085C80                            ; End of function PSGNoteOff
00085C80                            
00085C80                            
00085C80                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00085C80                            
00085C80                            ; sub_729B6:
00085C80                            PSGSilenceAll:
00085C80 41F9 00C0 0011             		lea	(psg_input).l,a0
00085C86 10BC 009F                  		move.b	#$9F,(a0)	; Silence PSG 1
00085C8A 10BC 00BF                  		move.b	#$BF,(a0)	; Silence PSG 2
00085C8E 10BC 00DF                  		move.b	#$DF,(a0)	; Silence PSG 3
00085C92 10BC 00FF                  		move.b	#$FF,(a0)	; Silence noise channel
00085C96 4E75                       		rts	
00085C98                            ; End of function PSGSilenceAll
00085C98                            
00085C98                            ; ===========================================================================
00085C98                            ; word_729CE:
00085C98                            PSGFrequencies:
00085C98 0356 0326 02F9 02CE 02A5+  		dc.w $356, $326, $2F9, $2CE, $2A5, $280, $25C, $23A
00085CA8 021A 01FB 01DF 01C4 01AB+  		dc.w $21A, $1FB, $1DF, $1C4, $1AB, $193, $17D, $167
00085CB8 0153 0140 012E 011D 010D+  		dc.w $153, $140, $12E, $11D, $10D,  $FE,  $EF,  $E2
00085CC8 00D6 00C9 00BE 00B4 00A9+  		dc.w  $D6,  $C9,  $BE,  $B4,  $A9,  $A0,  $97,  $8F
00085CD8 0087 007F 0078 0071 006B+  		dc.w  $87,  $7F,  $78,  $71,  $6B,  $65,  $5F,  $5A
00085CE8 0055 0050 004B 0047 0043+  		dc.w  $55,  $50,  $4B,  $47,  $43,  $40,  $3C,  $39
00085CF8 0036 0033 0030 002D 002B+  		dc.w  $36,  $33,  $30,  $2D,  $2B,  $28,  $26,  $24
00085D08 0022 0020 001F 001D 001B+  		dc.w  $22,  $20,  $1F,  $1D,  $1B,  $1A,  $18,  $17
00085D18 0016 0015 0013 0012 0011+  		dc.w  $16,  $15,  $13,  $12,  $11,    0
00085D24                            
00085D24                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00085D24                            
00085D24                            ; sub_72A5A:
00085D24                            CoordFlag:
00085D24 0445 00E0                  		subi.w	#$E0,d5
00085D28 E54D                       		lsl.w	#2,d5
00085D2A 4EFB 5000                  		jmp	coordflagLookup(pc,d5.w)
00085D2E                            ; End of function CoordFlag
00085D2E                            
00085D2E                            ; ===========================================================================
00085D2E                            ; loc_72A64:
00085D2E                            coordflagLookup:
00085D2E 6000 0000                  		bra.w	cfPanningAMSFMS		; $E0
00085D32                            ; ===========================================================================
00085D32 6000 0000                  		bra.w	cfDetune		; $E1
00085D36                            ; ===========================================================================
00085D36 6000 0000                  		bra.w	cfSetCommunication	; $E2
00085D3A                            ; ===========================================================================
00085D3A 6000 0000                  		bra.w	cfJumpReturn		; $E3
00085D3E                            ; ===========================================================================
00085D3E 6000 0000                  		bra.w	cfFadeInToPrevious	; $E4
00085D42                            ; ===========================================================================
00085D42 6000 0000                  		bra.w	cfSetTempoDivider	; $E5
00085D46                            ; ===========================================================================
00085D46 6000 0000                  		bra.w	cfChangeFMVolume	; $E6
00085D4A                            ; ===========================================================================
00085D4A 6000 0000                  		bra.w	cfHoldNote		; $E7
00085D4E                            ; ===========================================================================
00085D4E 6000 0000                  		bra.w	cfNoteTimeout		; $E8
00085D52                            ; ===========================================================================
00085D52 6000 0000                  		bra.w	cfChangeTransposition	; $E9
00085D56                            ; ===========================================================================
00085D56 6000 0000                  		bra.w	cfSetTempo		; $EA
00085D5A                            ; ===========================================================================
00085D5A 6000 0000                  		bra.w	cfSetTempoDividerAll	; $EB
00085D5E                            ; ===========================================================================
00085D5E 6000 0000                  		bra.w	cfChangePSGVolume	; $EC
00085D62                            ; ===========================================================================
00085D62 6000 0000                  		bra.w	cfClearPush		; $ED
00085D66                            ; ===========================================================================
00085D66 6000 0000                  		bra.w	cfStopSpecialFM4	; $EE
00085D6A                            ; ===========================================================================
00085D6A 6000 0000                  		bra.w	cfSetVoice		; $EF
00085D6E                            ; ===========================================================================
00085D6E 6000 0000                  		bra.w	cfModulation		; $F0
00085D72                            ; ===========================================================================
00085D72 6000 0000                  		bra.w	cfEnableModulation	; $F1
00085D76                            ; ===========================================================================
00085D76 6000 0000                  		bra.w	cfStopTrack		; $F2
00085D7A                            ; ===========================================================================
00085D7A 6000 0000                  		bra.w	cfSetPSGNoise		; $F3
00085D7E                            ; ===========================================================================
00085D7E 6000 0000                  		bra.w	cfDisableModulation	; $F4
00085D82                            ; ===========================================================================
00085D82 6000 0000                  		bra.w	cfSetPSGTone		; $F5
00085D86                            ; ===========================================================================
00085D86 6000 0000                  		bra.w	cfJumpTo		; $F6
00085D8A                            ; ===========================================================================
00085D8A 6000 0000                  		bra.w	cfRepeatAtPos		; $F7
00085D8E                            ; ===========================================================================
00085D8E 6000 0000                  		bra.w	cfJumpToGosub		; $F8
00085D92                            ; ===========================================================================
00085D92 6000 0000                  		bra.w	cfOpF9			; $F9
00085D96                            ; ===========================================================================
00085D96                            ; loc_72ACC:
00085D96                            cfPanningAMSFMS:
00085D96 121C                       		move.b	(a4)+,d1		; New AMS/FMS/panning value
00085D98 4A2D 0001                  		tst.b	TrackVoiceControl(a5)	; Is this a PSG track?
00085D9C 6B00                       		bmi.s	locret_72AEA		; Return if yes
00085D9E 102D 000A                  		move.b	TrackAMSFMSPan(a5),d0	; Get current AMS/FMS/panning
00085DA2 0200 0037                  		andi.b	#$37,d0			; Retain bits 0-2, 3-4 if set
00085DA6 8200                       		or.b	d0,d1			; Mask in new value
00085DA8 1B41 000A                  		move.b	d1,TrackAMSFMSPan(a5)	; Store value
00085DAC 103C 00B4                  		move.b	#$B4,d0			; Command to set AMS/FMS/panning
00085DB0 6000 FC20                  		bra.w	WriteFMIorIIMain
00085DB4                            ; ===========================================================================
00085DB4                            
00085DB4                            locret_72AEA:
00085DB4 4E75                       		rts	
00085DB6                            ; ===========================================================================
00085DB6                            ; loc_72AEC: cfAlterNotes:
00085DB6                            cfDetune:
00085DB6 1B5C 001E                  		move.b	(a4)+,TrackDetune(a5)	; Set detune value
00085DBA 4E75                       		rts	
00085DBC                            ; ===========================================================================
00085DBC                            ; loc_72AF2: cfUnknown1:
00085DBC                            cfSetCommunication:
00085DBC 1D5C 0007                  		move.b	(a4)+,v_communication_byte(a6)	; Set otherwise unused communication byte to parameter
00085DC0 4E75                       		rts	
00085DC2                            ; ===========================================================================
00085DC2                            ; loc_72AF8:
00085DC2                            cfJumpReturn:
00085DC2 7000                       		moveq	#0,d0
00085DC4 102D 000D                  		move.b	TrackStackPointer(a5),d0 ; Track stack pointer
00085DC8 2875 0000                  		movea.l	(a5,d0.w),a4		; Set track return address
00085DCC 2BBC 0000 0000 0000        		move.l	#0,(a5,d0.w)		; Set 'popped' value to zero
00085DD4 544C                       		addq.w	#2,a4			; Skip jump target address from gosub flag
00085DD6 5800                       		addq.b	#4,d0			; Actually 'pop' value
00085DD8 1B40 000D                  		move.b	d0,TrackStackPointer(a5) ; Set new stack pointer
00085DDC 4E75                       		rts	
00085DDE                            ; ===========================================================================
00085DDE                            ; loc_72B14:
00085DDE                            cfFadeInToPrevious:
00085DDE 204E                       		movea.l	a6,a0
00085DE0 43EE 03A0                  		lea	v_1up_ram_copy(a6),a1
00085DE4 303C 0087                  		move.w	#((v_music_track_ram_end-v_startofvariables)/4)-1,d0	; $220 bytes to restore: all variables and music track data
00085DE8                            ; loc_72B1E:
00085DE8                            @restoreramloop:
00085DE8 20D9                       		move.l	(a1)+,(a0)+
00085DEA 51C8 FFFC                  		dbf	d0,@restoreramloop
00085DEE                            
00085DEE 08EE 0002 0040             		bset	#2,v_music_dac_track+TrackPlaybackControl(a6)	; Set 'SFX overriding' bit
00085DF4 264D                       		movea.l	a5,a3
00085DF6 1C3C 0028                  		move.b	#$28,d6
00085DFA 9C2E 0026                  		sub.b	v_fadein_counter(a6),d6			; If fade already in progress, this adjusts track volume accordingly
00085DFE 7E05                       		moveq	#((v_music_fm_tracks_end-v_music_fm_tracks)/TrackSz)-1,d7	; 6 FM tracks
00085E00 4BEE 0070                  		lea	v_music_fm_tracks(a6),a5
00085E04                            ; loc_72B3A:
00085E04                            @fmloop:
00085E04 0815 0007                  		btst	#7,(a5)		; Is track playing? (TrackPlaybackControl)
00085E08 6700                       		beq.s	@nextfm		; Branch if not
00085E0A 08D5 0001                  		bset	#1,(a5)		; Set 'track at rest' bit (TrackPlaybackControl)
00085E0E DD2D 0009                  		add.b	d6,TrackVolume(a5) ; Apply current volume fade-in
00085E12 0815 0002                  		btst	#2,(a5)		; Is SFX overriding? (TrackPlaybackControl)
00085E16 6600                       		bne.s	@nextfm		; Branch if yes
00085E18 7000                       		moveq	#0,d0
00085E1A 102D 000B                  		move.b	TrackVoiceIndex(a5),d0	; Get voice
00085E1E 226E 0018                  		movea.l	v_voice_ptr(a6),a1	; Voice pointer
00085E22 4EBA 0000                  		jsr	SetVoice(pc)
00085E26                            ; loc_72B5C:
00085E26                            @nextfm:
00085E26 DAFC 0030                  		adda.w	#TrackSz,a5
00085E2A 51CF FFD8                  		dbf	d7,@fmloop
00085E2E                            
00085E2E 7E02                       		moveq	#((v_music_psg_tracks_end-v_music_psg_tracks)/TrackSz)-1,d7	; 3 PSG tracks
00085E30                            ; loc_72B66:
00085E30                            @psgloop:
00085E30 0815 0007                  		btst	#7,(a5)		; Is track playing? (TrackPlaybackControl)
00085E34 6700                       		beq.s	@nextpsg	; Branch if not
00085E36 08D5 0001                  		bset	#1,(a5)		; Set 'track at rest' bit (TrackPlaybackControl)
00085E3A 4EBA FE20                  		jsr	PSGNoteOff(pc)
00085E3E DD2D 0009                  		add.b	d6,TrackVolume(a5)	; Apply current volume fade-in
00085E42                            ; loc_72B78:
00085E42                            @nextpsg:
00085E42 DAFC 0030                  		adda.w	#TrackSz,a5
00085E46 51CF FFE8                  		dbf	d7,@psgloop
00085E4A                            		
00085E4A 2A4B                       		movea.l	a3,a5
00085E4C 1D7C 0080 0024             		move.b	#$80,f_fadein_flag(a6)		; Trigger fade-in
00085E52 1D7C 0028 0026             		move.b	#$28,v_fadein_counter(a6)	; Fade-in delay
00085E58 422E 0027                  		clr.b	f_1up_playing(a6)
00085E5C 33FC 0000 00A1 1100        		startZ80
00085E64 504F                       		addq.w	#8,sp		; Tamper return value so we don't return to caller
00085E66 4E75                       		rts	
00085E68                            ; ===========================================================================
00085E68                            ; loc_72B9E:
00085E68                            cfSetTempoDivider:
00085E68 1B5C 0002                  		move.b	(a4)+,TrackTempoDivider(a5)	; Set tempo divider on current track
00085E6C 4E75                       		rts	
00085E6E                            ; ===========================================================================
00085E6E                            ; loc_72BA4: cfSetVolume:
00085E6E                            cfChangeFMVolume:
00085E6E 101C                       		move.b	(a4)+,d0		; Get parameter
00085E70 D12D 0009                  		add.b	d0,TrackVolume(a5)	; Add to current volume
00085E74 6000 0000                  		bra.w	SendVoiceTL
00085E78                            ; ===========================================================================
00085E78                            ; loc_72BAE: cfPreventAttack:
00085E78                            cfHoldNote:
00085E78 08D5 0004                  		bset	#4,(a5)		; Set 'do not attack next note' bit (TrackPlaybackControl)
00085E7C 4E75                       		rts	
00085E7E                            ; ===========================================================================
00085E7E                            ; loc_72BB4: cfNoteFill
00085E7E                            cfNoteTimeout:
00085E7E 1B54 0012                  		move.b	(a4),TrackNoteTimeout(a5)		; Note fill timeout
00085E82 1B5C 0013                  		move.b	(a4)+,TrackNoteTimeoutMaster(a5)	; Note fill master
00085E86 4E75                       		rts	
00085E88                            ; ===========================================================================
00085E88                            ; loc_72BBE: cfAddKey:
00085E88                            cfChangeTransposition:
00085E88 101C                       		move.b	(a4)+,d0		; Get parameter
00085E8A D12D 0008                  		add.b	d0,TrackTranspose(a5)	; Add to transpose value
00085E8E 4E75                       		rts	
00085E90                            ; ===========================================================================
00085E90                            ; loc_72BC6:
00085E90                            cfSetTempo:
00085E90 1D54 0002                  		move.b	(a4),v_main_tempo(a6)		; Set main tempo
00085E94 1D5C 0001                  		move.b	(a4)+,v_main_tempo_timeout(a6)	; And reset timeout (!)
00085E98 4E75                       		rts	
00085E9A                            ; ===========================================================================
00085E9A                            ; loc_72BD0: cfSetTempoMod:
00085E9A                            cfSetTempoDividerAll:
00085E9A 41EE 0040                  		lea	v_music_track_ram(a6),a0
00085E9E 101C                       		move.b	(a4)+,d0			; Get new tempo divider
00085EA0 7230                       		moveq	#TrackSz,d1
00085EA2 7409                       		moveq	#((v_music_track_ram_end-v_music_track_ram)/TrackSz)-1,d2	; 1 DAC + 6 FM + 3 PSG tracks
00085EA4                            ; loc_72BDA:
00085EA4                            @trackloop:
00085EA4 1140 0002                  		move.b	d0,TrackTempoDivider(a0)	; Set track's tempo divider
00085EA8 D0C1                       		adda.w	d1,a0
00085EAA 51CA FFF8                  		dbf	d2,@trackloop
00085EAE                            
00085EAE 4E75                       		rts	
00085EB0                            ; ===========================================================================
00085EB0                            ; loc_72BE6: cfChangeVolume:
00085EB0                            cfChangePSGVolume:
00085EB0 101C                       		move.b	(a4)+,d0		; Get volume change
00085EB2 D12D 0009                  		add.b	d0,TrackVolume(a5)	; Apply it
00085EB6 4E75                       		rts	
00085EB8                            ; ===========================================================================
00085EB8                            ; loc_72BEE:
00085EB8                            cfClearPush:
00085EB8 422E 002C                  		clr.b	f_push_playing(a6)	; Allow push sound to be played once more
00085EBC 4E75                       		rts	
00085EBE                            ; ===========================================================================
00085EBE                            ; loc_72BF4:
00085EBE                            cfStopSpecialFM4:
00085EBE 0895 0007                  		bclr	#7,(a5)		; Stop track (TrackPlaybackControl)
00085EC2 0895 0004                  		bclr	#4,(a5)		; Clear 'do not attack next note' bit (TrackPlaybackControl)
00085EC6 4EBA FAF2                  		jsr	FMNoteOff(pc)
00085ECA 4A2E 0250                  		tst.b	v_sfx_fm4_track+TrackPlaybackControl(a6)	; Is SFX using FM4?
00085ECE 6B00                       		bmi.s	@locexit					; Branch if yes
00085ED0 264D                       		movea.l	a5,a3
00085ED2 4BEE 0100                  		lea	v_music_fm4_track(a6),a5
00085ED6 226E 0018                  		movea.l	v_voice_ptr(a6),a1	; Voice pointer
00085EDA 0895 0002                  		bclr	#2,(a5)			; Clear 'SFX is overriding' bit (TrackPlaybackControl)
00085EDE 08D5 0001                  		bset	#1,(a5)			; Set 'track at rest' bit (TrackPlaybackControl)
00085EE2 102D 000B                  		move.b	TrackVoiceIndex(a5),d0	; Current voice
00085EE6 4EBA 0000                  		jsr	SetVoice(pc)
00085EEA 2A4B                       		movea.l	a3,a5
00085EEC                            ; loc_72C22:
00085EEC                            @locexit:
00085EEC 504F                       		addq.w	#8,sp		; Tamper with return value so we don't return to caller
00085EEE 4E75                       		rts	
00085EF0                            ; ===========================================================================
00085EF0                            ; loc_72C26:
00085EF0                            cfSetVoice:
00085EF0 7000                       		moveq	#0,d0
00085EF2 101C                       		move.b	(a4)+,d0		; Get new voice
00085EF4 1B40 000B                  		move.b	d0,TrackVoiceIndex(a5)	; Store it
00085EF8 0815 0002                  		btst	#2,(a5)			; Is SFX overriding this track? (TrackPlaybackControl)
00085EFC 6600 0000                  		bne.w	locret_72CAA		; Return if yes
00085F00 226E 0018                  		movea.l	v_voice_ptr(a6),a1	; Music voice pointer
00085F04 4A2E 000E                  		tst.b	f_voice_selector(a6)	; Are we updating a music track?
00085F08 6700                       		beq.s	SetVoice		; If yes, branch
00085F0A 226D 0020                  		movea.l	TrackVoicePtr(a5),a1	; SFX track voice pointer
00085F0E 4A2E 000E                  		tst.b	f_voice_selector(a6)	; Are we updating a SFX track?
00085F12 6B00                       		bmi.s	SetVoice		; If yes, branch
00085F14 226E 0020                  		movea.l	v_special_voice_ptr(a6),a1 ; Special SFX voice pointer
00085F18                            
00085F18                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00085F18                            
00085F18                            ; sub_72C4E:
00085F18                            SetVoice:
00085F18 5340                       		subq.w	#1,d0
00085F1A 6B00                       		bmi.s	@havevoiceptr
00085F1C 323C 0019                  		move.w	#25,d1
00085F20                            ; loc_72C56:
00085F20                            @voicemultiply:
00085F20 D2C1                       		adda.w	d1,a1
00085F22 51C8 FFFC                  		dbf	d0,@voicemultiply
00085F26                            ; loc_72C5C:
00085F26                            @havevoiceptr:
00085F26 1219                       		move.b	(a1)+,d1		; feedback/algorithm
00085F28 1B41 001F                  		move.b	d1,TrackFeedbackAlgo(a5) ; Save it to track RAM
00085F2C 1801                       		move.b	d1,d4
00085F2E 103C 00B0                  		move.b	#$B0,d0			; Command to write feedback/algorithm
00085F32 4EBA FAAA                  		jsr	WriteFMIorII(pc)
00085F36 45FA 0000                  		lea	FMInstrumentOperatorTable(pc),a2
00085F3A 7600                       		moveq	#(FMInstrumentOperatorTable_End-FMInstrumentOperatorTable)-1,d3		; Don't want to send TL yet
00085F3C                            ; loc_72C72:
00085F3C                            @sendvoiceloop:
00085F3C 101A                       		move.b	(a2)+,d0
00085F3E 1219                       		move.b	(a1)+,d1
00085F40 4EBA FA9C                  		jsr	WriteFMIorII(pc)
00085F44 51CB FFF6                  		dbf	d3,@sendvoiceloop
00085F48                            
00085F48 7A03                       		moveq	#3,d5
00085F4A 0244 0007                  		andi.w	#7,d4			; Get algorithm
00085F4E 183B 4000                  		move.b	FMSlotMask(pc,d4.w),d4	; Get slot mask for algorithm
00085F52 162D 0009                  		move.b	TrackVolume(a5),d3	; Track volume attenuation
00085F56                            ; loc_72C8C:
00085F56                            @sendtlloop:
00085F56 101A                       		move.b	(a2)+,d0
00085F58 1219                       		move.b	(a1)+,d1
00085F5A E20C                       		lsr.b	#1,d4		; Is bit set for this operator in the mask?
00085F5C 6400                       		bcc.s	@sendtl		; Branch if not
00085F5E D203                       		add.b	d3,d1		; Include additional attenuation
00085F60                            ; loc_72C96:
00085F60                            @sendtl:
00085F60 4EBA FA7C                  		jsr	WriteFMIorII(pc)
00085F64 51CD FFF0                  		dbf	d5,@sendtlloop
00085F68                            		
00085F68 103C 00B4                  		move.b	#$B4,d0			; Register for AMS/FMS/Panning
00085F6C 122D 000A                  		move.b	TrackAMSFMSPan(a5),d1	; Value to send
00085F70 4EBA FA6C                  		jsr	WriteFMIorII(pc) 	; (It would be better if this were a jmp)
00085F74                            
00085F74                            locret_72CAA:
00085F74 4E75                       		rts	
00085F76                            ; End of function SetVoice
00085F76                            
00085F76                            ; ===========================================================================
00085F76                            ; byte_72CAC:
00085F76 0808 0808 0A0E 0E0F        FMSlotMask:	dc.b 8,	8, 8, 8, $A, $E, $E, $F
00085F7E                            
00085F7E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00085F7E                            
00085F7E                            ; sub_72CB4:
00085F7E                            SendVoiceTL:
00085F7E 0815 0002                  		btst	#2,(a5)		; Is SFX overriding? (TrackPlaybackControl)
00085F82 6600                       		bne.s	@locret		; Return if so
00085F84 7000                       		moveq	#0,d0
00085F86 102D 000B                  		move.b	TrackVoiceIndex(a5),d0	; Current voice
00085F8A 226E 0018                  		movea.l	v_voice_ptr(a6),a1	; Voice pointer
00085F8E 4A2E 000E                  		tst.b	f_voice_selector(a6)
00085F92 6700                       		beq.s	@gotvoiceptr
00085F94                            		; DANGER! This uploads the wrong voice! It should have been a5 instead
00085F94                            		; of a6!
00085F94 226D 0020                  		movea.l	TrackVoicePtr(a5),a1
00085F98 4A2E 000E                  		tst.b	f_voice_selector(a6)
00085F9C 6B00                       		bmi.s	@gotvoiceptr
00085F9E 226E 0020                  		movea.l	v_special_voice_ptr(a6),a1
00085FA2                            ; loc_72CD8:
00085FA2                            @gotvoiceptr:
00085FA2 5340                       		subq.w	#1,d0
00085FA4 6B00                       		bmi.s	@gotvoice
00085FA6 323C 0019                  		move.w	#25,d1
00085FAA                            ; loc_72CE0:
00085FAA                            @voicemultiply:
00085FAA D2C1                       		adda.w	d1,a1
00085FAC 51C8 FFFC                  		dbf	d0,@voicemultiply
00085FB0                            ; loc_72CE6:
00085FB0                            @gotvoice:
00085FB0 D2FC 0015                  		adda.w	#21,a1				; Want TL
00085FB4 45FA 0000                  		lea	FMInstrumentTLTable(pc),a2
00085FB8 102D 001F                  		move.b	TrackFeedbackAlgo(a5),d0	; Get feedback/algorithm
00085FBC 0240 0007                  		andi.w	#7,d0				; Want only algorithm
00085FC0 183B 00B4                  		move.b	FMSlotMask(pc,d0.w),d4		; Get slot mask
00085FC4 162D 0009                  		move.b	TrackVolume(a5),d3		; Get track volume attenuation
00085FC8 6B00                       		bmi.s	@locret				; If negative, stop
00085FCA 7A00                       		moveq	#(FMInstrumentTLTable_End-FMInstrumentTLTable)-1,d5
00085FCC                            ; loc_72D02:
00085FCC                            @sendtlloop:
00085FCC 101A                       		move.b	(a2)+,d0
00085FCE 1219                       		move.b	(a1)+,d1
00085FD0 E20C                       		lsr.b	#1,d4		; Is bit set for this operator in the mask?
00085FD2 6400                       		bcc.s	@senttl		; Branch if not
00085FD4 D203                       		add.b	d3,d1		; Include additional attenuation
00085FD6 6500                       		bcs.s	@senttl		; Branch on overflow
00085FD8 4EBA FA04                  		jsr	WriteFMIorII(pc)
00085FDC                            ; loc_72D12:
00085FDC                            @senttl:
00085FDC 51CD FFEE                  		dbf	d5,@sendtlloop
00085FE0                            ; locret_72D16:
00085FE0                            @locret:
00085FE0 4E75                       		rts	
00085FE2                            ; End of function SendVoiceTL
00085FE2                            
00085FE2                            ; ===========================================================================
00085FE2                            ; byte_72D18:
00085FE2                            FMInstrumentOperatorTable:
00085FE2 30                         		dc.b  $30		; Detune/multiple operator 1
00085FE3 38                         		dc.b  $38		; Detune/multiple operator 3
00085FE4 34                         		dc.b  $34		; Detune/multiple operator 2
00085FE5 3C                         		dc.b  $3C		; Detune/multiple operator 4
00085FE6 50                         		dc.b  $50		; Rate scalling/attack rate operator 1
00085FE7 58                         		dc.b  $58		; Rate scalling/attack rate operator 3
00085FE8 54                         		dc.b  $54		; Rate scalling/attack rate operator 2
00085FE9 5C                         		dc.b  $5C		; Rate scalling/attack rate operator 4
00085FEA 60                         		dc.b  $60		; Amplitude modulation/first decay rate operator 1
00085FEB 68                         		dc.b  $68		; Amplitude modulation/first decay rate operator 3
00085FEC 64                         		dc.b  $64		; Amplitude modulation/first decay rate operator 2
00085FED 6C                         		dc.b  $6C		; Amplitude modulation/first decay rate operator 4
00085FEE 70                         		dc.b  $70		; Secondary decay rate operator 1
00085FEF 78                         		dc.b  $78		; Secondary decay rate operator 3
00085FF0 74                         		dc.b  $74		; Secondary decay rate operator 2
00085FF1 7C                         		dc.b  $7C		; Secondary decay rate operator 4
00085FF2 80                         		dc.b  $80		; Secondary amplitude/release rate operator 1
00085FF3 88                         		dc.b  $88		; Secondary amplitude/release rate operator 3
00085FF4 84                         		dc.b  $84		; Secondary amplitude/release rate operator 2
00085FF5 8C                         		dc.b  $8C		; Secondary amplitude/release rate operator 4
00085FF6                            FMInstrumentOperatorTable_End
00085FF6                            ; byte_72D2C:
00085FF6                            FMInstrumentTLTable:
00085FF6 40                         		dc.b  $40		; Total level operator 1
00085FF7 48                         		dc.b  $48		; Total level operator 3
00085FF8 44                         		dc.b  $44		; Total level operator 2
00085FF9 4C                         		dc.b  $4C		; Total level operator 4
00085FFA                            FMInstrumentTLTable_End
00085FFA                            ; ===========================================================================
00085FFA                            ; loc_72D30:
00085FFA                            cfModulation:
00085FFA 08D5 0003                  		bset	#3,(a5)				; Turn on modulation (TrackPlaybackControl)
00085FFE 2B4C 0014                  		move.l	a4,TrackModulationPtr(a5)	; Save pointer to modulation data
00086002 1B5C 0018                  		move.b	(a4)+,TrackModulationWait(a5)	; Modulation delay
00086006 1B5C 0019                  		move.b	(a4)+,TrackModulationSpeed(a5)	; Modulation speed
0008600A 1B5C 001A                  		move.b	(a4)+,TrackModulationDelta(a5)	; Modulation delta
0008600E 101C                       		move.b	(a4)+,d0			; Modulation steps...
00086010 E208                       		lsr.b	#1,d0				; ... divided by 2...
00086012 1B40 001B                  		move.b	d0,TrackModulationSteps(a5)	; ... before being stored
00086016 426D 001C                  		clr.w	TrackModulationVal(a5)		; Total accumulated modulation frequency change
0008601A 4E75                       		rts	
0008601C                            ; ===========================================================================
0008601C                            ; loc_72D52:
0008601C                            cfEnableModulation:
0008601C 08D5 0003                  		bset	#3,(a5)		; Turn on modulation (TrackPlaybackControl)
00086020 4E75                       		rts	
00086022                            ; ===========================================================================
00086022                            ; loc_72D58:
00086022                            cfStopTrack:
00086022 0895 0007                  		bclr	#7,(a5)			; Stop track (TrackPlaybackControl)
00086026 0895 0004                  		bclr	#4,(a5)			; Clear 'do not attack next note' bit (TrackPlaybackControl)
0008602A 4A2D 0001                  		tst.b	TrackVoiceControl(a5)	; Is this a PSG track?
0008602E 6B00                       		bmi.s	@stoppsg		; Branch if yes
00086030 4A2E 0008                  		tst.b	f_updating_dac(a6)	; Is this the DAC we are updating?
00086034 6B00 0000                  		bmi.w	@locexit		; Exit if yes
00086038 4EBA F980                  		jsr	FMNoteOff(pc)
0008603C 6000                       		bra.s	@stoppedchannel
0008603E                            ; ===========================================================================
0008603E                            ; loc_72D74:
0008603E                            @stoppsg:
0008603E 4EBA FC1C                  		jsr	PSGNoteOff(pc)
00086042                            ; loc_72D78:
00086042                            @stoppedchannel:
00086042 4A2E 000E                  		tst.b	f_voice_selector(a6)	; Are we updating SFX?
00086046 6A00 0000                  		bpl.w	@locexit		; Exit if not
0008604A 4216                       		clr.b	v_sndprio(a6)		; Clear priority
0008604C 7000                       		moveq	#0,d0
0008604E 102D 0001                  		move.b	TrackVoiceControl(a5),d0 ; Get voice control bits
00086052 6B00                       		bmi.s	@getpsgptr		; Branch if PSG
00086054 41FA F536                  		lea	SFX_BGMChannelRAM(pc),a0
00086058 264D                       		movea.l	a5,a3
0008605A 0C00 0004                  		cmpi.b	#4,d0			; Is this FM4?
0008605E 6600                       		bne.s	@getpointer		; Branch if not
00086060 4A2E 0340                  		tst.b	v_spcsfx_fm4_track+TrackPlaybackControl(a6)	; Is special SFX playing?
00086064 6A00                       		bpl.s	@getpointer		; Branch if not
00086066 4BEE 0340                  		lea	v_spcsfx_fm4_track(a6),a5
0008606A 226E 0020                  		movea.l	v_special_voice_ptr(a6),a1	; Get voice pointer
0008606E 6000                       		bra.s	@gotpointer
00086070                            ; ===========================================================================
00086070                            ; loc_72DA8:
00086070                            @getpointer:
00086070 5500                       		subq.b	#2,d0		; SFX can only use FM3 and up
00086072 E508                       		lsl.b	#2,d0
00086074 2A70 0000                  		movea.l	(a0,d0.w),a5
00086078 4A15                       		tst.b	(a5)			; Is track playing? (TrackPlaybackControl)
0008607A 6A00                       		bpl.s	@novoiceupd		; Branch if not
0008607C 226E 0018                  		movea.l	v_voice_ptr(a6),a1	; Get voice pointer
00086080                            ; loc_72DB8:
00086080                            @gotpointer:
00086080 0895 0002                  		bclr	#2,(a5)			; Clear 'SFX overriding' bit (TrackPlaybackControl)
00086084 08D5 0001                  		bset	#1,(a5)			; Set 'track at rest' bit (TrackPlaybackControl)
00086088 102D 000B                  		move.b	TrackVoiceIndex(a5),d0	; Current voice
0008608C 4EBA FE8A                  		jsr	SetVoice(pc)
00086090                            ; loc_72DC8:
00086090                            @novoiceupd:
00086090 2A4B                       		movea.l	a3,a5
00086092 6000                       		bra.s	@locexit
00086094                            ; ===========================================================================
00086094                            ; loc_72DCC:
00086094                            @getpsgptr:
00086094 41EE 0370                  		lea	v_spcsfx_psg3_track(a6),a0
00086098 4A10                       		tst.b	(a0)		; Is track playing? (TrackPlaybackControl)
0008609A 6A00                       		bpl.s	@getchannelptr	; Branch if not
0008609C 0C00 00E0                  		cmpi.b	#$E0,d0		; Is it the noise channel?
000860A0 6700                       		beq.s	@gotchannelptr	; Branch if yes
000860A2 0C00 00C0                  		cmpi.b	#$C0,d0		; Is it PSG 3?
000860A6 6700                       		beq.s	@gotchannelptr	; Branch if yes
000860A8                            ; loc_72DE0:
000860A8                            @getchannelptr:
000860A8 41FA F4E2                  		lea	SFX_BGMChannelRAM(pc),a0
000860AC E608                       		lsr.b	#3,d0
000860AE 2070 0000                  		movea.l	(a0,d0.w),a0
000860B2                            ; loc_72DEA:
000860B2                            @gotchannelptr:
000860B2 0890 0002                  		bclr	#2,(a0)				; Clear 'SFX overriding' bit (TrackPlaybackControl)
000860B6 08D0 0001                  		bset	#1,(a0)				; Set 'track at rest' bit (TrackPlaybackControl)
000860BA 0C28 00E0 0001             		cmpi.b	#$E0,TrackVoiceControl(a0)	; Is this a noise pointer?
000860C0 6600                       		bne.s	@locexit			; Branch if not
000860C2 13E8 001F 00C0 0011        		move.b	TrackPSGNoise(a0),(psg_input).l ; Set noise tone
000860CA                            ; loc_72E02:
000860CA                            @locexit:
000860CA 504F                       		addq.w	#8,sp		; Tamper with return value so we don't go back to caller
000860CC 4E75                       		rts	
000860CE                            ; ===========================================================================
000860CE                            ; loc_72E06:
000860CE                            cfSetPSGNoise:
000860CE 1B7C 00E0 0001             		move.b	#$E0,TrackVoiceControl(a5)	; Turn channel into noise channel
000860D4 1B5C 001F                  		move.b	(a4)+,TrackPSGNoise(a5)	; Save noise tone
000860D8 0815 0002                  		btst	#2,(a5)				; Is track being overridden? (TrackPlaybackControl)
000860DC 6600                       		bne.s	@locret				; Return if yes
000860DE 13EC FFFF 00C0 0011        		move.b	-1(a4),(psg_input).l		; Set tone
000860E6                            ; locret_72E1E:
000860E6                            @locret:
000860E6 4E75                       		rts	
000860E8                            ; ===========================================================================
000860E8                            ; loc_72E20:
000860E8                            cfDisableModulation:
000860E8 0895 0003                  		bclr	#3,(a5)		; Disable modulation (TrackPlaybackControl)
000860EC 4E75                       		rts	
000860EE                            ; ===========================================================================
000860EE                            ; loc_72E26:
000860EE                            cfSetPSGTone:
000860EE 1B5C 000B                  		move.b	(a4)+,TrackVoiceIndex(a5)	; Set current PSG tone
000860F2 4E75                       		rts	
000860F4                            ; ===========================================================================
000860F4                            ; loc_72E2C:
000860F4                            cfJumpTo:
000860F4 101C                       		move.b	(a4)+,d0	; High byte of offset
000860F6 E148                       		lsl.w	#8,d0		; Shift it into place
000860F8 101C                       		move.b	(a4)+,d0	; Low byte of offset
000860FA D8C0                       		adda.w	d0,a4		; Add to current position
000860FC 534C                       		subq.w	#1,a4		; Put back one byte
000860FE 4E75                       		rts	
00086100                            ; ===========================================================================
00086100                            ; loc_72E38:
00086100                            cfRepeatAtPos:
00086100 7000                       		moveq	#0,d0
00086102 101C                       		move.b	(a4)+,d0			; Loop index
00086104 121C                       		move.b	(a4)+,d1			; Repeat count
00086106 4A35 0024                  		tst.b	TrackLoopCounters(a5,d0.w)	; Has this loop already started?
0008610A 6600                       		bne.s	@loopexists			; Branch if yes
0008610C 1B81 0024                  		move.b	d1,TrackLoopCounters(a5,d0.w)	; Initialize repeat count
00086110                            ; loc_72E48:
00086110                            @loopexists:
00086110 5335 0024                  		subq.b	#1,TrackLoopCounters(a5,d0.w)	; Decrease loop's repeat count
00086114 66DE                       		bne.s	cfJumpTo			; If nonzero, branch to target
00086116 544C                       		addq.w	#2,a4				; Skip target address
00086118 4E75                       		rts	
0008611A                            ; ===========================================================================
0008611A                            ; loc_72E52:
0008611A                            cfJumpToGosub:
0008611A 7000                       		moveq	#0,d0
0008611C 102D 000D                  		move.b	TrackStackPointer(a5),d0	; Current stack pointer
00086120 5900                       		subq.b	#4,d0				; Add space for another target
00086122 2B8C 0000                  		move.l	a4,(a5,d0.w)			; Put in current address (*before* target for jump!)
00086126 1B40 000D                  		move.b	d0,TrackStackPointer(a5)	; Store new stack pointer
0008612A 60C8                       		bra.s	cfJumpTo
0008612C                            ; ===========================================================================
0008612C                            ; loc_72E64:
0008612C                            cfOpF9:
0008612C 103C 0088                  		move.b	#$88,d0		; D1L/RR of Operator 3
00086130 123C 000F                  		move.b	#$F,d1		; Loaded with fixed value (max RR, 1TL)
00086134 4EBA F8B4                  		jsr	WriteFMI(pc)
00086138 103C 008C                  		move.b	#$8C,d0		; D1L/RR of Operator 4
0008613C 123C 000F                  		move.b	#$F,d1		; Loaded with fixed value (max RR, 1TL)
00086140 6000 F8A8                  		bra.w	WriteFMI
00086144                            ; ===========================================================================
00086144                            
00086144                            Kos_Z80:
00086144                            		incbin	"sound\z80.bin", 0, $15
00086159 00                         		dc.b ((SegaPCM&$FF8000)/$8000)&1						; Least bit of bank ID (bit 15 of address)
0008615A                            		incbin	"sound\z80.bin", $16, 6
00086160 00                         		dc.b ((SegaPCM&$FF8000)/$8000)>>1						; ... the remaining bits of bank ID (bits 16-23)
00086161                            		incbin	"sound\z80.bin", $1D, $93
000861F4 0000                       		dc.w ((SegaPCM&$FF)<<8)+((SegaPCM&$7F00)>>8)|$80				; Pointer to Sega PCM, relative to start of ROM bank (i.e., little_endian($8000 + SegaPCM&$7FFF)
000861F6                            		incbin	"sound\z80.bin", $B2, 1
000861F7 0000                       		dc.w (((SegaPCM_End-SegaPCM)&$FF)<<8)+(((SegaPCM_End-SegaPCM)&$FF00)>>8)	; ... the size of the Sega PCM (little endian)
000861F9                            		incbin	"sound\z80.bin", $B5, $16AB
0008789A                            		even
0008789A                            
0008789A                            Music81:	incbin	"sound/music/Mus81 - GHZ.bin"
00088BBE 00                         		even
00088BBE                            Music82:	incbin	"sound/music/Mus82 - LZ.bin"
0008A446                            		even
0008A446                            Music83:	incbin	"sound/music/Mus83 - MZ.bin"
00091DC6 00                         		even
00091DC6                            Music84:	incbin	"sound/music/Mus84 - SLZ.bin"
000935DA 00                         		even
000935DA                            Music85:	incbin	"sound/music/Mus85 - SYZ.bin"
00094380                            		even
00094380                            Music86:	incbin	"sound/music/Mus86 - SBZ.bin"
00095738                            		even
00095738                            Music87:	incbin	"sound/music/Mus87 - Invincibility.bin"
00096030 00                         		even
00096030                            Music88:	include	"sound/music/Mus88 - Extra Life.asm"
00096030                            extralifejingle_Header:
00096030                            	smpsHeaderStartSong 1
00096032 0703                       	smpsHeaderChan      $07, $03
00096034 0100                       	smpsHeaderTempo     $01, $00
00096036                            
0009603A 0000 0000                  	smpsHeaderFM        extralifejingle_FM1,	$00, $00
0009603E 0000 0000                  	smpsHeaderFM        extralifejingle_FM2,	$00, $00
00096042 0000 0000                  	smpsHeaderFM        extralifejingle_FM3,	$00, $00
00096046 0000 0000                  	smpsHeaderFM        extralifejingle_FM4,	$00, $00
0009604A 0000 0000                  	smpsHeaderFM        extralifejingle_FM5,	$00, $00
0009604E 0000 0000                  	smpsHeaderFM        extralifejingle_FM6,	$00, $00
00096064                            
00096064                            ; DAC Data
00096064                            extralifejingle_DAC:
00096064 807F 55                    	dc.b	nRst, $7F, $55
00096067 E4                         	smpsFade
00096068                            ; PSG1 Data
00096068                            extralifejingle_PSG1:
00096068                            ; PSG2 Data
00096068                            extralifejingle_PSG2:
00096068                            ; PSG3 Data
00096068                            extralifejingle_PSG3:
00096068 F2                         	smpsStop
00096069                            
00096069                            ; FM1 Data
00096069                            extralifejingle_FM1:
00096069 EF00                       	smpsSetvoice        $00
0009606B E616                       	smpsAlterVol        $16
0009606D E0C0                       	smpsPan             panCenter, $00
0009606F A61A BC13 BB12 B913 B60D+  	dc.b	nCs3, $1A, nB4, $13, nBb4, $12, nAb4, $13, nF4, $0D, nG3, $2C
0009607B AC06 800C                  	dc.b	nG3, $06, nRst, $0C
0009607F F2                         	smpsStop
00096080                            
00096080                            ; FM2 Data
00096080                            extralifejingle_FM2:
00096080 EF01                       	smpsSetvoice        $01
00096082 E616                       	smpsAlterVol        $16
00096084 E0C0                       	smpsPan             panCenter, $00
00096086 B61A AD13 AB12 AA13 A60D+  	dc.b	nF4, $1A, nAb3, $13, nFs3, $12, nF3, $13, nCs3, $0D, nA2, $2C
00096092 A206 800C                  	dc.b	nA2, $06, nRst, $0C
00096096 F2                         	smpsStop
00096097                            
00096097                            ; FM3 Data
00096097                            extralifejingle_FM3:
00096097 EF01                       	smpsSetvoice        $01
00096099 E616                       	smpsAlterVol        $16
0009609B E0C0                       	smpsPan             panCenter, $00
0009609D AD0D BC13 B9B7 B60C B20D+  	dc.b	nAb3, $0D, nB4, $13, nAb4, nFs4, nF4, $0C, nCs4, $0D, nC4, $2C
000960A9 B106 800C                  	dc.b	nC4, $06, nRst, $0C
000960AD F2                         	smpsStop
000960AE                            
000960AE                            ; FM4 Data
000960AE                            extralifejingle_FM4:
000960AE EF02                       	smpsSetvoice        $02
000960B0 E0C0                       	smpsPan             panCenter, $00
000960B2 8001                       	dc.b	nRst, $01
000960B4 E616                       	smpsAlterVol        $16
000960B6 BE0C B913 ABAA A60C A20D+  	dc.b	nCs5, $0C, nAb4, $13, nFs3, nF3, nCs3, $0C, nA2, $0D, nE5, $2C
000960C2 C106 800C                  	dc.b	nE5, $06, nRst, $0C
000960C6 F2                         	smpsStop
000960C7                            
000960C7                            ; FM5 Data
000960C7                            extralifejingle_FM5:
000960C7 EF03                       	smpsSetvoice        $03
000960C9 E602                       	smpsAlterVol        $02
000960CB E0C0                       	smpsPan             panCenter, $00
000960CD 8001                       	dc.b	nRst, $01
000960CF EF05                       	smpsSetvoice        $05
000960D1 E60A                       	smpsAlterVol        $0A
000960D3 E780 0CC8 06B2 07B9 06C7+  	dc.b	smpsNoAttack, nRst, $0C, nB5, $06, nCs4, $07, nAb4, $06, nBb5, nCs4, $07
000960DF B706 C5C8 B607 C206 B2BE+  	dc.b	nFs4, $06, nAb5, nB5, nF4, $07, nF5, $06, nCs4, nCs5, $07, nA5
000960EB 06BD C1C4 07BD 06C1 C407+  	dc.b	$06, nC5, nE5, nG5, $07, nC5, $06, nE5, nG5, $07, nC5, $06
000960F7 C1C4 80                    	dc.b	nE5, nG5, nRst
000960FA F2                         	smpsStop
000960FB                            
000960FB                            ; FM6 Data
000960FB                            extralifejingle_FM6:
000960FB EF04                       	smpsSetvoice        $04
000960FD E607                       	smpsAlterVol        $07
000960FF E0C0                       	smpsPan             panCenter, $00
00096101 8001                       	dc.b	nRst, $01
00096103 EF06                       	smpsSetvoice        $06
00096105 E6F9                       	smpsAlterVol        $F9
00096107 A658 A72C A70C 80          	dc.b	nCs3, $58, nD3, $2C, nD3, $0C, nRst
0009610E F2                         	smpsStop
0009610F                            
0009610F                            extralifejingle_Voices:
0009610F                            ;	Voice $00
0009610F                            ;	$3A
0009610F                            ;	$34, $73, $74, $31, 	$1F, $1F, $1F, $1F, 	$1F, $1F, $1F, $1F
0009610F                            ;	$00, $00, $00, $00, 	$03, $03, $03, $05, 	$22, $22, $22, $00
0009610F                            	smpsVcAlgorithm     $02
0009610F                            	smpsVcFeedback      $07
0009610F                            	smpsVcUnusedBits    $00
0009610F                            	smpsVcDetune        $03, $07, $07, $03
0009610F                            	smpsVcCoarseFreq    $01, $04, $03, $04
0009610F                            	smpsVcRateScale     $00, $00, $00, $00
0009610F                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
0009610F                            	smpsVcAmpMod        $00, $00, $00, $00
0009610F                            	smpsVcDecayRate1    $1F, $1F, $1F, $1F
0009610F                            	smpsVcDecayRate2    $00, $00, $00, $00
0009610F                            	smpsVcDecayLevel    $00, $00, $00, $00
0009610F                            	smpsVcReleaseRate   $05, $03, $03, $03
00096128                            
00096128                            ;	Voice $01
00096128                            ;	$3A
00096128                            ;	$34, $73, $74, $31, 	$1F, $1F, $1F, $1F, 	$1F, $1F, $1F, $1F
00096128                            ;	$00, $00, $00, $00, 	$03, $03, $03, $05, 	$22, $22, $22, $00
00096128                            	smpsVcAlgorithm     $02
00096128                            	smpsVcFeedback      $07
00096128                            	smpsVcUnusedBits    $00
00096128                            	smpsVcDetune        $03, $07, $07, $03
00096128                            	smpsVcCoarseFreq    $01, $04, $03, $04
00096128                            	smpsVcRateScale     $00, $00, $00, $00
00096128                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
00096128                            	smpsVcAmpMod        $00, $00, $00, $00
00096128                            	smpsVcDecayRate1    $1F, $1F, $1F, $1F
00096128                            	smpsVcDecayRate2    $00, $00, $00, $00
00096128                            	smpsVcDecayLevel    $00, $00, $00, $00
00096128                            	smpsVcReleaseRate   $05, $03, $03, $03
00096141                            
00096141                            ;	Voice $02
00096141                            ;	$3A
00096141                            ;	$34, $73, $74, $31, 	$1F, $1F, $1F, $1F, 	$1F, $1F, $1F, $1F
00096141                            ;	$00, $00, $00, $00, 	$03, $03, $03, $05, 	$22, $22, $22, $00
00096141                            	smpsVcAlgorithm     $02
00096141                            	smpsVcFeedback      $07
00096141                            	smpsVcUnusedBits    $00
00096141                            	smpsVcDetune        $03, $07, $07, $03
00096141                            	smpsVcCoarseFreq    $01, $04, $03, $04
00096141                            	smpsVcRateScale     $00, $00, $00, $00
00096141                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
00096141                            	smpsVcAmpMod        $00, $00, $00, $00
00096141                            	smpsVcDecayRate1    $1F, $1F, $1F, $1F
00096141                            	smpsVcDecayRate2    $00, $00, $00, $00
00096141                            	smpsVcDecayLevel    $00, $00, $00, $00
00096141                            	smpsVcReleaseRate   $05, $03, $03, $03
0009615A                            
0009615A                            ;	Voice $03
0009615A                            ;	$00
0009615A                            ;	$01, $0E, $00, $00, 	$1E, $1E, $1E, $1D, 	$1A, $1C, $10, $10
0009615A                            ;	$00, $00, $00, $00, 	$FD, $FE, $F8, $F8, 	$1A, $25, $05, $00
0009615A                            	smpsVcAlgorithm     $00
0009615A                            	smpsVcFeedback      $00
0009615A                            	smpsVcUnusedBits    $00
0009615A                            	smpsVcDetune        $00, $00, $00, $00
0009615A                            	smpsVcCoarseFreq    $00, $00, $0E, $01
0009615A                            	smpsVcRateScale     $00, $00, $00, $00
0009615A                            	smpsVcAttackRate    $1D, $1E, $1E, $1E
0009615A                            	smpsVcAmpMod        $00, $00, $00, $00
0009615A                            	smpsVcDecayRate1    $10, $10, $1C, $1A
0009615A                            	smpsVcDecayRate2    $00, $00, $00, $00
0009615A                            	smpsVcDecayLevel    $0F, $0F, $0F, $0F
0009615A                            	smpsVcReleaseRate   $08, $08, $0E, $0D
00096173                            
00096173                            ;	Voice $04
00096173                            ;	$03
00096173                            ;	$66, $40, $40, $31, 	$1F, $1F, $1F, $1C, 	$0E, $05, $02, $01
00096173                            ;	$01, $00, $04, $06, 	$AA, $6A, $16, $18, 	$2A, $1A, $20, $00
00096173                            	smpsVcAlgorithm     $03
00096173                            	smpsVcFeedback      $00
00096173                            	smpsVcUnusedBits    $00
00096173                            	smpsVcDetune        $03, $04, $04, $06
00096173                            	smpsVcCoarseFreq    $01, $00, $00, $06
00096173                            	smpsVcRateScale     $00, $00, $00, $00
00096173                            	smpsVcAttackRate    $1C, $1F, $1F, $1F
00096173                            	smpsVcAmpMod        $00, $00, $00, $00
00096173                            	smpsVcDecayRate1    $01, $02, $05, $0E
00096173                            	smpsVcDecayRate2    $06, $04, $00, $01
00096173                            	smpsVcDecayLevel    $01, $01, $06, $0A
00096173                            	smpsVcReleaseRate   $08, $06, $0A, $0A
0009618C                            
0009618C                            ;	Voice $05
0009618C                            ;	$34
0009618C                            ;	$33, $7E, $01, $74, 	$9B, $1F, $5F, $1F, 	$14, $07, $07, $08
0009618C                            ;	$00, $00, $00, $00, 	$F6, $E4, $F7, $F7, 	$19, $71, $00, $00
0009618C                            	smpsVcAlgorithm     $04
0009618C                            	smpsVcFeedback      $06
0009618C                            	smpsVcUnusedBits    $00
0009618C                            	smpsVcDetune        $07, $00, $07, $03
0009618C                            	smpsVcCoarseFreq    $04, $01, $0E, $03
0009618C                            	smpsVcRateScale     $00, $01, $00, $02
0009618C                            	smpsVcAttackRate    $1F, $1F, $1F, $1B
0009618C                            	smpsVcAmpMod        $00, $00, $00, $00
0009618C                            	smpsVcDecayRate1    $08, $07, $07, $14
0009618C                            	smpsVcDecayRate2    $00, $00, $00, $00
0009618C                            	smpsVcDecayLevel    $0F, $0F, $0E, $0F
0009618C                            	smpsVcReleaseRate   $07, $07, $04, $06
000961A5                            
000961A5                            ;	Voice $06
000961A5                            ;	$30
000961A5                            ;	$01, $00, $00, $01, 	$9F, $1F, $1F, $5C, 	$0F, $0D, $10, $14
000961A5                            ;	$08, $18, $05, $08, 	$6F, $00, $0F, $18, 	$15, $1F, $19, $00
000961A5                            	smpsVcAlgorithm     $00
000961A5                            	smpsVcFeedback      $06
000961A5                            	smpsVcUnusedBits    $00
000961A5                            	smpsVcDetune        $00, $00, $00, $00
000961A5                            	smpsVcCoarseFreq    $01, $00, $00, $01
000961A5                            	smpsVcRateScale     $01, $00, $00, $02
000961A5                            	smpsVcAttackRate    $1C, $1F, $1F, $1F
000961A5                            	smpsVcAmpMod        $00, $00, $00, $00
000961A5                            	smpsVcDecayRate1    $14, $10, $0D, $0F
000961A5                            	smpsVcDecayRate2    $08, $05, $18, $08
000961A5                            	smpsVcDecayLevel    $01, $00, $00, $06
000961A5                            	smpsVcReleaseRate   $08, $0F, $00, $0F
000961BE                            
000961BE                            
000961BE                            		even
000961BE                            Music89:	incbin	"sound/music/Mus89 - Special Stage.bin"
00096A16 00                         		even
00096A16                            Music8A:	incbin	"sound/music/Mus8A - Title Screen.bin"
00096F36                            		even
00096F36                            Music8B:	incbin	"sound/music/Mus8B - Ending.bin"
000971F8 00                         		even
000971F8                            Music8C:	incbin	"sound/music/Mus8C - Boss.bin"
00098050                            		even
00098050                            Music8D:	incbin	"sound/music/Mus8D - FZ.bin"
0009829C 00                         		even
0009829C                            Music8E:	incbin	"sound/music/Mus8E - Sonic Got Through.bin"
000985D2 00                         		even
000985D2                            Music8F:	incbin	"sound/music/Mus8F - Game Over.bin"
0009877E 00                         		even
0009877E                            Music90:	incbin	"sound/music/Mus90 - Continue Screen.bin"
0009898C 00                         		even
0009898C                            Music91:	incbin	"sound/music/Mus91 - Credits.bin"
00098C70 00                         		even
00098C70                            Music92:	incbin	"sound/music/Mus92 - Drowning.bin"
000993A0 00                         		even
000993A0                            Music93:	incbin	"sound/music/Mus93 - Get Emerald.bin"
0009946E                            		even
0009946E                            Music94:	incbin	"sound/music/Mus94 - Final Boss Pinch.bin"
000998DC 00                         		even
000998DC                            Music95:		incbin	"sound/music/Mus95 - Seaside Front.bin"
0009A3D2                            		even
0009A3D2                            Music96:		incbin	"sound/music/Mus96 - TTZ BF US.bin"
0009AFB4                            		even
0009AFB4                            Music97:		incbin	"sound/music/Mus97 - Granada Game Over.bin"
0009C2BA 00                         		even
0009C2BA                            Music98:		include	"sound/music/Mus98 - Options Theme.asm"
0009C2BA                            PasswordEntry_Header:
0009C2BA                            	smpsHeaderStartSong 3
0009C2BC 0603                       	smpsHeaderChan      $06, $03
0009C2BE 0105                       	smpsHeaderTempo     $01, $05
0009C2C0                            
0009C2C4 0000 0013                  	smpsHeaderFM        PasswordEntry_FM1,	$00, $13
0009C2C8 0000 F40B                  	smpsHeaderFM        PasswordEntry_FM2,	$F4, $0B
0009C2CC 0000 000F                  	smpsHeaderFM        PasswordEntry_FM3,	$00, $0F
0009C2D0 0000 000F                  	smpsHeaderFM        PasswordEntry_FM4,	$00, $0F
0009C2D4 0000 001D                  	smpsHeaderFM        PasswordEntry_FM5,	$00, $1D
0009C2EA                            
0009C2EA                            ; FM1 Data
0009C2EA                            PasswordEntry_FM1:
0009C2EA EF00                       	smpsSetvoice        $00
0009C2F1                            
0009C2F1                            PasswordEntry_Jump00:
0009C2F1 CD30 CED0 D010 CE08 CD10+  	dc.b	nE6, $30, nF6, nG6, nG6, $10, nF6, $08, nE6, $10, nF6, $08
0009C2FD C930 CBCD CE10 CD08 CB10+  	dc.b	nC6, $30, nD6, nE6, nF6, $10, nE6, $08, nD6, $10, nE6, $08
0009C309 C960 C830 C4C6 C210 C6C9+  	dc.b	nC6, $60, nB5, $30, nG5, nA5, nF5, $10, nA5, nC6, nB5, $30
0009C315 C918 CB                    	dc.b	nC6, $18, nD6
0009C318 F6FF D7                    	smpsJump            PasswordEntry_Jump00
0009C31B                            
0009C31B                            ; FM2 Data
0009C31B                            PasswordEntry_FM2:
0009C31B EF01                       	smpsSetvoice        $01
0009C31D                            
0009C31D                            PasswordEntry_Jump03:
0009C31D B118 1818 10AC 08B1 1818+  	dc.b	nC4, $18, $18, $18, $10, nG3, $08, nC4, $18, $18, $18, nB3
0009C329 AEAE AEAE 10B5 08AE 1818+  	dc.b	nA3, nA3, nA3, nA3, $10, nE4, $08, nA3, $18, $18, $18, nG3
0009C335 AAAA AAAA 1008 B518 1818+  	dc.b	nF3, nF3, nF3, nF3, $10, $08, nE4, $18, $18, $18, $10, $08
0009C341 AC18 1818 1008 1818 AEB0   	dc.b	nG3, $18, $18, $18, $10, $08, $18, $18, nA3, nB3
0009C34B F6FF D0                    	smpsJump            PasswordEntry_Jump03
0009C34E                            
0009C34E                            ; FM3 Data
0009C34E                            PasswordEntry_FM3:
0009C34E E080                       	smpsPan             panLeft, $00
0009C350 EF02                       	smpsSetvoice        $02
0009C352                            
0009C352                            PasswordEntry_Jump02:
0009C352 C104 8014 C408 8010 C208+  	dc.b	nE5, $04, nRst, $14, nG5, $08, nRst, $10, nF5, $08, nRst, $10
0009C35E C204 8014 C104 8014 C104+  	dc.b	nF5, $04, nRst, $14, nE5, $04, nRst, $14, nE5, $04, nRst, $0C
0009C36A C204 8014 C21C 8004 C404+  	dc.b	nF5, $04, nRst, $14, nF5, $1C, nRst, $04, nG5, $04, nRst, $14
0009C376 C408 8010 C204 8014 C204+  	dc.b	nG5, $08, nRst, $10, nF5, $04, nRst, $14, nF5, $04, nRst, $14
0009C382 C108 8010 C104 800C C204+  	dc.b	nE5, $08, nRst, $10, nE5, $04, nRst, $0C, nF5, $04, nRst, $14
0009C38E C21C 8004 C108 8010 C108+  	dc.b	nF5, $1C, nRst, $04, nE5, $08, nRst, $10, nE5, $08, nRst, $10
0009C39A BF08 8010 C20C 800C C408+  	dc.b	nD5, $08, nRst, $10, nF5, $0C, nRst, $0C, nG5, $08, nRst, $10
0009C3A6 C408 8010 BF08 8010 BF0C+  	dc.b	nG5, $08, nRst, $10, nD5, $08, nRst, $10, nD5, $0C, nRst, $0C
0009C3B2 BA08 8010 BD0C 800C BD0C+  	dc.b	nA4, $08, nRst, $10, nC5, $0C, nRst, $0C, nC5, $0C, nRst, $0C
0009C3BE BD0C 800C BF08 8010 BF08+  	dc.b	nC5, $0C, nRst, $0C, nD5, $08, nRst, $10, nD5, $08, nRst, $10
0009C3CA BF08 8010 BF08 8010        	dc.b	nD5, $08, nRst, $10, nD5, $08, nRst, $10
0009C3D2 F6FF 7E                    	smpsJump            PasswordEntry_Jump02
0009C3D5                            
0009C3D5                            ; FM4 Data
0009C3D5                            PasswordEntry_FM4:
0009C3D5 E040                       	smpsPan             panRight, $00
0009C3D7 EF02                       	smpsSetvoice        $02
0009C3D9                            
0009C3D9                            PasswordEntry_Jump01:
0009C3D9 C404 8014 C104 8014 BF04+  	dc.b	nG5, $04, nRst, $14, nE5, $04, nRst, $14, nD5, $04, nRst, $14
0009C3E5 BF04 8014 BD04 8014 BD04+  	dc.b	nD5, $04, nRst, $14, nC5, $04, nRst, $14, nC5, $04, nRst, $0C
0009C3F1 BF04 8014 BF18 8008 C104+  	dc.b	nD5, $04, nRst, $14, nD5, $18, nRst, $08, nE5, $04, nRst, $14
0009C3FD C104 8014 BF04 8014 BF04+  	dc.b	nE5, $04, nRst, $14, nD5, $04, nRst, $14, nD5, $04, nRst, $14
0009C409 BD04 8014 BD04 800C BF04+  	dc.b	nC5, $04, nRst, $14, nC5, $04, nRst, $0C, nD5, $04, nRst, $14
0009C415 BF1C 8004 C408 8010 C408+  	dc.b	nD5, $1C, nRst, $04, nG5, $08, nRst, $10, nG5, $08, nRst, $10
0009C421 C208 8010 BF08 8010 BF08+  	dc.b	nF5, $08, nRst, $10, nD5, $08, nRst, $10, nD5, $08, nRst, $10
0009C42D BF08 8010 BC08 8010 BC0C+  	dc.b	nD5, $08, nRst, $10, nB4, $08, nRst, $10, nB4, $0C, nRst, $0C
0009C439 BD08 8010 BA08 8010 BA08+  	dc.b	nC5, $08, nRst, $10, nA4, $08, nRst, $10, nA4, $08, nRst, $10
0009C445 BA08 8010 BC08 8010 BC08+  	dc.b	nA4, $08, nRst, $10, nB4, $08, nRst, $10, nB4, $08, nRst, $10
0009C451 BC08 8010 BC08 8010        	dc.b	nB4, $08, nRst, $10, nB4, $08, nRst, $10
0009C459 F6FF 7E                    	smpsJump            PasswordEntry_Jump01
0009C45C                            
0009C45C                            ; FM5 Data
0009C45C                            PasswordEntry_FM5:
0009C45C EF00                       	smpsSetvoice        $00
0009C45E E1FB                       	smpsAlterNote       $FB
0009C460 800C                       	dc.b	nRst, $0C
0009C462 F6FE 8D                    	smpsJump            PasswordEntry_Jump00
0009C465                            
0009C465                            ; PSG1 Data
0009C465                            PasswordEntry_PSG1:
0009C465 C410 C908 CD10 D038 C410+  	dc.b	nG5, $10, nC6, $08, nE6, $10, nG6, $38, nG5, $10, nC6, $08
0009C471 CD10 D038 C410 C908 CD10+  	dc.b	nE6, $10, nG6, $38, nG5, $10, nC6, $08, nE6, $10, nG6, $38
0009C47D C410 C908 CD10 D038 C410+  	dc.b	nG5, $10, nC6, $08, nE6, $10, nG6, $38, nG5, $10, nC6, $08
0009C489 CD10 D038 C410 C808 CB10+  	dc.b	nE6, $10, nG6, $38, nG5, $10, nB5, $08, nD6, $10, nG6, $38
0009C495 C210 C608 C910 CE18 C908+  	dc.b	nF5, $10, nA5, $08, nC6, $10, nF6, $18, nC6, $08, nA5, $10
0009C4A1 C208 C410 C808 CB10 D018+  	dc.b	nF5, $08, nG5, $10, nB5, $08, nD6, $10, nG6, $18, nD6, $08
0009C4AD C810 C408                  	dc.b	nB5, $10, nG5, $08
0009C4B1 F6FF B2                    	smpsJump            PasswordEntry_PSG1
0009C4B4                            
0009C4B4                            ; PSG2 Data
0009C4B4                            PasswordEntry_PSG2:
0009C4B4 E1FF                       	smpsAlterNote       $FF
0009C4B6 800C                       	dc.b	nRst, $0C
0009C4B8 F6FF AB                    	smpsJump            PasswordEntry_PSG1
0009C4BB                            
0009C4BB                            ; PSG3 Data
0009C4BB                            PasswordEntry_PSG3:
0009C4BB F502                       	smpsPSGvoice        fTone_02
0009C4BD F3E7                       	smpsPSGform         $E7
0009C4BF C508 80C5 C508 80C5 C508+  	dc.b	nAb5, $08, nRst, nAb5, nAb5, $08, nRst, nAb5, nAb5, $08, nRst, nAb5
0009C4CB C508 80C5 C508 80C5 C508+  	dc.b	nAb5, $08, nRst, nAb5, nAb5, $08, nRst, nAb5, nAb5, $08, nRst, nAb5
0009C4D7 C508 80C5 C508 C5          	dc.b	nAb5, $08, nRst, nAb5, nAb5, $08, nAb5
0009C4DE F503                       	smpsPSGvoice        fTone_03
0009C4E0 C5                         	dc.b	nAb5
0009C4E1 F6FF D8                    	smpsJump            PasswordEntry_PSG3
0009C4E4                            
0009C4E4                            ; DAC Data
0009C4E4                            PasswordEntry_DAC:
0009C4E4 8118 8281 8210 8108 8118+  	dc.b	dKick, $18, dSnare, dKick, dSnare, $10, dKick, $08, dKick, $18, dSnare, dKick
0009C4F0 0880 0881 8210 8108        	dc.b	$08, nRst, $08, dKick, dSnare, $10, dKick, $08
0009C4F8 F700 03FF E8               	smpsLoop            $00, $03, PasswordEntry_DAC
0009C4FD 8118 8281 8210 8108 8118+  	dc.b	dKick, $18, dSnare, dKick, dSnare, $10, dKick, $08, dKick, $18, dSnare, dKick
0009C509 0880 0881 8210 8208        	dc.b	$08, nRst, $08, dKick, dSnare, $10, dSnare, $08
0009C511                            
0009C511                            PasswordEntry_Loop00:
0009C511 8118 8281 8210 8108 8118+  	dc.b	dKick, $18, dSnare, dKick, dSnare, $10, dKick, $08, dKick, $18, dSnare, dKick
0009C51D 0880 0881 8210 8108        	dc.b	$08, nRst, $08, dKick, dSnare, $10, dKick, $08
0009C525 F700 03FF E8               	smpsLoop            $00, $03, PasswordEntry_Loop00
0009C52A 8118 8281 8210 8108 8108+  	dc.b	dKick, $18, dSnare, dKick, dSnare, $10, dKick, $08, dKick, $08, nRst, $08
0009C536 8182 8182 8282 8889 898A   	dc.b	dKick, dSnare, dKick, dSnare, dSnare, dSnare, dHiTimpani, dMidTimpani, dMidTimpani, dLowTimpani
0009C540 F6FF A2                    	smpsJump            PasswordEntry_DAC
0009C543                            
0009C543                            PasswordEntry_Voices:
0009C543                            ;	Voice $00
0009C543                            ;	$04
0009C543                            ;	$02, $01, $01, $00, 	$1F, $10, $1F, $12, 	$09, $03, $0B, $04
0009C543                            ;	$03, $00, $00, $05, 	$EF, $FF, $2F, $0F, 	$1C, $80, $19, $80
0009C543                            	smpsVcAlgorithm     $04
0009C543                            	smpsVcFeedback      $00
0009C543                            	smpsVcUnusedBits    $00
0009C543                            	smpsVcDetune        $00, $00, $00, $00
0009C543                            	smpsVcCoarseFreq    $00, $01, $01, $02
0009C543                            	smpsVcRateScale     $00, $00, $00, $00
0009C543                            	smpsVcAttackRate    $12, $1F, $10, $1F
0009C543                            	smpsVcAmpMod        $00, $00, $00, $00
0009C543                            	smpsVcDecayRate1    $04, $0B, $03, $09
0009C543                            	smpsVcDecayRate2    $05, $00, $00, $03
0009C543                            	smpsVcDecayLevel    $00, $02, $0F, $0E
0009C543                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
0009C55C                            
0009C55C                            ;	Voice $01
0009C55C                            ;	$39
0009C55C                            ;	$03, $61, $40, $00, 	$1F, $5F, $5F, $5F, 	$10, $11, $09, $09
0009C55C                            ;	$06, $00, $00, $00, 	$C8, $F8, $F8, $F8, 	$1E, $24, $20, $80
0009C55C                            	smpsVcAlgorithm     $01
0009C55C                            	smpsVcFeedback      $07
0009C55C                            	smpsVcUnusedBits    $00
0009C55C                            	smpsVcDetune        $00, $04, $06, $00
0009C55C                            	smpsVcCoarseFreq    $00, $00, $01, $03
0009C55C                            	smpsVcRateScale     $01, $01, $01, $00
0009C55C                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
0009C55C                            	smpsVcAmpMod        $00, $00, $00, $00
0009C55C                            	smpsVcDecayRate1    $09, $09, $11, $10
0009C55C                            	smpsVcDecayRate2    $00, $00, $00, $06
0009C55C                            	smpsVcDecayLevel    $0F, $0F, $0F, $0C
0009C55C                            	smpsVcReleaseRate   $08, $08, $08, $08
0009C575                            
0009C575                            ;	Voice $02
0009C575                            ;	$2C
0009C575                            ;	$41, $00, $23, $00, 	$1F, $1F, $1F, $1F, 	$08, $0A, $0B, $0A
0009C575                            ;	$04, $05, $00, $05, 	$45, $56, $85, $86, 	$14, $82, $18, $82
0009C575                            	smpsVcAlgorithm     $04
0009C575                            	smpsVcFeedback      $05
0009C575                            	smpsVcUnusedBits    $00
0009C575                            	smpsVcDetune        $00, $02, $00, $04
0009C575                            	smpsVcCoarseFreq    $00, $03, $00, $01
0009C575                            	smpsVcRateScale     $00, $00, $00, $00
0009C575                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
0009C575                            	smpsVcAmpMod        $00, $00, $00, $00
0009C575                            	smpsVcDecayRate1    $0A, $0B, $0A, $08
0009C575                            	smpsVcDecayRate2    $05, $00, $05, $04
0009C575                            	smpsVcDecayLevel    $08, $08, $05, $04
0009C575                            	smpsVcReleaseRate   $06, $05, $06, $05
0009C58E                            
0009C58E                            
0009C58E                            		even	
0009C58E                            Music99:		include	"sound/music/Mus99 - Toxic Landfill.asm"
0009C58E                            ToxicLandfill_Header:
0009C58E                            	smpsHeaderStartSong 1
0009C590 0603                       	smpsHeaderChan      $06, $03
0009C592 0208                       	smpsHeaderTempo     $02, $08
0009C594                            
0009C598 0000 000A                  	smpsHeaderFM        ToxicLandfill_FM1,	$00, $0A
0009C59C 0000 000A                  	smpsHeaderFM        ToxicLandfill_FM2,	$00, $0A	
0009C5A0 0000 0C0B                  	smpsHeaderFM        ToxicLandfill_FM3,	$0C, $0B
0009C5A4 0000 0C0B                  	smpsHeaderFM        ToxicLandfill_FM4,	$0C, $0B
0009C5A8 0000 0012                  	smpsHeaderFM        ToxicLandfill_FM5,	$00, $12
0009C5BE                            
0009C5BE                            ; DAC Data
0009C5BE                            ToxicLandfill_DAC:
0009C5BE E0C0                       	smpsPan             panCenter, $00
0009C5C0 807F 7F22 8106 1803 0382+  	dc.b	nRst, $7F, $7F, $22, dKick, $06, $18, $03, $03, dSnare, $06, dKick
0009C5CC 8181 8281 0306 8281 0382+  	dc.b	dKick, dKick, dSnare, dKick, $03, $06, dSnare, dKick, $03, dSnare, dKick
0009C5D7                            
0009C5D7                            ToxicLandfill_Loop00:
0009C5D7 82                         	dc.b	dSnare
0009C5D8                            
0009C5D8                            ToxicLandfill_Loop01:
0009C5D8 82                         	dc.b	dSnare
0009C5D9                            
0009C5D9                            ToxicLandfill_Jump00:
0009C5D9 8106 8203 8106 0382 8181+  	dc.b	dKick, $06, dSnare, $03, dKick, $06, $03, dSnare, dKick, dKick, $06, dSnare
0009C5E5 0381 0603                  	dc.b	$03, dKick, $06, $03
0009C5E9 F700 03FF EA               	smpsLoop            $00, $03, ToxicLandfill_Loop00
0009C5EE 8282 8206 8103 8206 8103+  	dc.b	dSnare, dSnare, dSnare, $06, dKick, $03, dSnare, $06, dKick, $03, dSnare, dKick
0009C5FA 0682 0381 8281 8281        	dc.b	$06, dSnare, $03, dKick, dSnare, dKick, dSnare, dKick
0009C602 F701 02FF D2               	smpsLoop            $01, $02, ToxicLandfill_Loop01
0009C607                            
0009C607                            ToxicLandfill_Loop06:
0009C607 82                         	dc.b	dSnare
0009C608                            
0009C608                            ToxicLandfill_Loop02:
0009C608 8181 8281                  	dc.b	dKick, dKick, dSnare, dKick
0009C60C F700 06FF F8               	smpsLoop            $00, $06, ToxicLandfill_Loop02
0009C611                            
0009C611                            ToxicLandfill_Loop03:
0009C611 8281 81                    	dc.b	dSnare, dKick, dKick
0009C614 F700 03FF F9               	smpsLoop            $00, $03, ToxicLandfill_Loop03
0009C619                            
0009C619                            ToxicLandfill_Loop04:
0009C619 8182 8181                  	dc.b	dKick, dSnare, dKick, dKick
0009C61D F700 03FF F8               	smpsLoop            $00, $03, ToxicLandfill_Loop04
0009C622 8182 81                    	dc.b	dKick, dSnare, dKick
0009C625                            
0009C625                            ToxicLandfill_Loop05:
0009C625 8102 0182 03               	dc.b	dKick, $02, $01, dSnare, $03
0009C62A F700 06FF F7               	smpsLoop            $00, $06, ToxicLandfill_Loop05
0009C62F 0303 03                    	dc.b	$03, $03, $03
0009C632 F701 02FF D1               	smpsLoop            $01, $02, ToxicLandfill_Loop06
0009C637                            
0009C637                            ToxicLandfill_Loop08:
0009C637 03                         	dc.b	$03
0009C638                            
0009C638                            ToxicLandfill_Loop07:
0009C638 8106 8203 8106 0382 06     	dc.b	dKick, $06, dSnare, $03, dKick, $06, $03, dSnare, $06
0009C641 F700 07FF F3               	smpsLoop            $00, $07, ToxicLandfill_Loop07
0009C646 8182 0381 8282 82          	dc.b	dKick, dSnare, $03, dKick, dSnare, dSnare, dSnare
0009C64D F701 02FF E6               	smpsLoop            $01, $02, ToxicLandfill_Loop08
0009C652                            
0009C652                            ToxicLandfill_Loop0D:
0009C652 82                         	dc.b	dSnare
0009C653                            
0009C653                            ToxicLandfill_Loop09:
0009C653 8181 8281                  	dc.b	dKick, dKick, dSnare, dKick
0009C657 F700 06FF F8               	smpsLoop            $00, $06, ToxicLandfill_Loop09
0009C65C                            
0009C65C                            ToxicLandfill_Loop0A:
0009C65C 8281 81                    	dc.b	dSnare, dKick, dKick
0009C65F F700 03FF F9               	smpsLoop            $00, $03, ToxicLandfill_Loop0A
0009C664                            
0009C664                            ToxicLandfill_Loop0B:
0009C664 8182 8181                  	dc.b	dKick, dSnare, dKick, dKick
0009C668 F700 03FF F8               	smpsLoop            $00, $03, ToxicLandfill_Loop0B
0009C66D 8182 81                    	dc.b	dKick, dSnare, dKick
0009C670                            
0009C670                            ToxicLandfill_Loop0C:
0009C670 8102 0182 03               	dc.b	dKick, $02, $01, dSnare, $03
0009C675 F700 06FF F7               	smpsLoop            $00, $06, ToxicLandfill_Loop0C
0009C67A 0303 03                    	dc.b	$03, $03, $03
0009C67D F701 02FF D1               	smpsLoop            $01, $02, ToxicLandfill_Loop0D
0009C682                            
0009C682                            ToxicLandfill_Loop0E:
0009C682 03                         	dc.b	$03
0009C683                            
0009C683                            ToxicLandfill_Loop0F:
0009C683 8106 8203 8106 0382 8181+  	dc.b	dKick, $06, dSnare, $03, dKick, $06, $03, dSnare, dKick, dKick, $06, dSnare
0009C68F 0381 0603 82               	dc.b	$03, dKick, $06, $03, dSnare
0009C694 F700 03FF EA               	smpsLoop            $00, $03, ToxicLandfill_Loop0E
0009C699 8282 0681 0382 0681 0382+  	dc.b	dSnare, dSnare, $06, dKick, $03, dSnare, $06, dKick, $03, dSnare, dKick, $06
0009C6A5 8203 8182 8182 8182        	dc.b	dSnare, $03, dKick, dSnare, dKick, dSnare, dKick, dSnare
0009C6AD F701 02FF D2               	smpsLoop            $01, $02, ToxicLandfill_Loop0F
0009C6B2                            
0009C6B2                            ToxicLandfill_Loop10:
0009C6B2 8106 8203 8106 0382 06     	dc.b	dKick, $06, dSnare, $03, dKick, $06, $03, dSnare, $06
0009C6BB F700 07FF F3               	smpsLoop            $00, $07, ToxicLandfill_Loop10
0009C6C0 8182 0381 8282 8282        	dc.b	dKick, dSnare, $03, dKick, dSnare, dSnare, dSnare, dSnare
0009C6C8 F701 04FF E6               	smpsLoop            $01, $04, ToxicLandfill_Loop10
0009C6CD F6FF 0A                    	smpsJump            ToxicLandfill_Jump00
0009C6D0                            
0009C6D0                            ; FM1 Data
0009C6D0                            ToxicLandfill_FM1:
0009C6D0 E0C0                       	smpsPan             panCenter, $00
0009C6D2 EF00                       	smpsSetvoice        $00
0009C6D4 807F 7F76 A902 AA01 AB02+  	dc.b	nRst, $7F, $7F, $76, nE3, $02, nF3, $01, nFs3, $02, nG3, $01
0009C6E0 AD02 AE01 AF02 B001        	dc.b	nAb3, $02, nA3, $01, nBb3, $02, nB3, $01
0009C6E8                            
0009C6E8                            ToxicLandfill_Loop44:
0009C6E8 AC09 0909 AA03 AC06 06AF+  	dc.b	nG3, $09, $09, $09, nF3, $03, nG3, $06, $06, nBb3, nG3, $09
0009C6F4 0909 AA03 AC06 06B1 AC09+  	dc.b	$09, $09, nF3, $03, nG3, $06, $06, nC4, nG3, $09, $09, $09
0009C700 AA03 AC06 06AF A709 0909+  	dc.b	nF3, $03, nG3, $06, $06, nBb3, nD3, $09, $09, $09, nC3, $03
0009C70C A706 06AA                  	dc.b	nD3, $06, $06, nF3
0009C710 F700 02FF D4               	smpsLoop            $00, $02, ToxicLandfill_Loop44
0009C715                            
0009C715                            ToxicLandfill_Loop46:
0009C715 AC12 AA36 A902 A801 A702+  	dc.b	nG3, $12, nF3, $36, nE3, $02, nEb3, $01, nD3, $02, nCs3, $01
0009C721 A502 A401 A302 A201 A102+  	dc.b	nC3, $02, nB2, $01, nBb2, $02, nA2, $01, nAb2, $02, nG2, $01
0009C72D 9F02 9E01 9D02 9C01 9B02+  	dc.b	nFs2, $02, nF2, $01, nE2, $02, nEb2, $01, nD2, $02, nCs2, $01
0009C739 AC12 AA2A 03A9 AAA9        	dc.b	nG3, $12, nF3, $2A, $03, nE3, nF3, nE3
0009C741                            
0009C741                            ToxicLandfill_Loop45:
0009C741 AA02 A901                  	dc.b	nF3, $02, nE3, $01
0009C745 F700 04FF F8               	smpsLoop            $00, $04, ToxicLandfill_Loop45
0009C74A AA02 A5A1 AAA5 A1          	dc.b	nF3, $02, nC3, nAb2, nF3, nC3, nAb2
0009C751 F701 02FF C0               	smpsLoop            $01, $02, ToxicLandfill_Loop46
0009C756                            
0009C756                            ToxicLandfill_Loop47:
0009C756 B106 ACAF B003 B109 AC06+  	dc.b	nC4, $06, nG3, nBb3, nB3, $03, nC4, $09, nG3, $06, nBb3, nB3
0009C762 F700 02FF F0               	smpsLoop            $00, $02, ToxicLandfill_Loop47
0009C767                            
0009C767                            ToxicLandfill_Loop48:
0009C767 B1AA ACAF 03B1 09AA 06AC+  	dc.b	nC4, nF3, nG3, nBb3, $03, nC4, $09, nF3, $06, nG3, nBb3
0009C772 F700 02FF F1               	smpsLoop            $00, $02, ToxicLandfill_Loop48
0009C777 F701 02FF DB               	smpsLoop            $01, $02, ToxicLandfill_Loop47
0009C77C                            
0009C77C                            ToxicLandfill_Loop4A:
0009C77C B812 B636 B502 B401 B302+  	dc.b	nG4, $12, nF4, $36, nE4, $02, nEb4, $01, nD4, $02, nCs4, $01
0009C788 B102 B001 AF02 AE01 AD02+  	dc.b	nC4, $02, nB3, $01, nBb3, $02, nA3, $01, nAb3, $02, nG3, $01
0009C794 AB02 AA01 A902 A801 A702+  	dc.b	nFs3, $02, nF3, $01, nE3, $02, nEb3, $01, nD3, $02, nCs3, $01
0009C7A0 B812 B62A 03B5 B6B5        	dc.b	nG4, $12, nF4, $2A, $03, nE4, nF4, nE4
0009C7A8                            
0009C7A8                            ToxicLandfill_Loop49:
0009C7A8 B602 B501                  	dc.b	nF4, $02, nE4, $01
0009C7AC F700 04FF F8               	smpsLoop            $00, $04, ToxicLandfill_Loop49
0009C7B1 B602 B1AD B6B1 AD          	dc.b	nF4, $02, nC4, nAb3, nF4, nC4, nAb3
0009C7B8 F701 02FF C0               	smpsLoop            $01, $02, ToxicLandfill_Loop4A
0009C7BD                            
0009C7BD                            ToxicLandfill_Loop4B:
0009C7BD B809 0909 B603 B806 06BB+  	dc.b	nG4, $09, $09, $09, nF4, $03, nG4, $06, $06, nBb4, nG4, $09
0009C7C9 0909 B603 B806 06BD B809+  	dc.b	$09, $09, nF4, $03, nG4, $06, $06, nC5, nG4, $09, $09, $09
0009C7D5 B603 B806 06BB B309 0909+  	dc.b	nF4, $03, nG4, $06, $06, nBb4, nD4, $09, $09, $09, nC4, $03
0009C7E1 B306 06B6                  	dc.b	nD4, $06, $06, nF4
0009C7E5 F700 02FF D4               	smpsLoop            $00, $02, ToxicLandfill_Loop4B
0009C7EA                            
0009C7EA                            ToxicLandfill_Loop4C:
0009C7EA BDB8 BBBC 03BD 09B8 06BB+  	dc.b	nC5, nG4, nBb4, nB4, $03, nC5, $09, nG4, $06, nBb4, nB4
0009C7F5 F700 02FF F1               	smpsLoop            $00, $02, ToxicLandfill_Loop4C
0009C7FA                            
0009C7FA                            ToxicLandfill_Loop4D:
0009C7FA BDB6 B8BB 03BD 09B6 06B8+  	dc.b	nC5, nF4, nG4, nBb4, $03, nC5, $09, nF4, $06, nG4, nBb4
0009C805 F700 02FF F1               	smpsLoop            $00, $02, ToxicLandfill_Loop4D
0009C80A F701 04FF DC               	smpsLoop            $01, $04, ToxicLandfill_Loop4C
0009C80F F6FE D7                    	smpsJump            ToxicLandfill_Loop44
0009C812                            
0009C812                            ; FM2 Data
0009C812                            ToxicLandfill_FM2:
0009C812 E0C0                       	smpsPan             panCenter, $00
0009C814 EF00                       	smpsSetvoice        $00
0009C816 807F 7F76 A902 AA01 AB02+  	dc.b	nRst, $7F, $7F, $76, nE3, $02, nF3, $01, nFs3, $02, nG3, $01
0009C822 AD02 AE01 AF02 B001        	dc.b	nAb3, $02, nA3, $01, nBb3, $02, nB3, $01
0009C82A                            
0009C82A                            ToxicLandfill_Loop3A:
0009C82A B109 0909 AF03 B106 06B4+  	dc.b	nC4, $09, $09, $09, nBb3, $03, nC4, $06, $06, nEb4, nC4, $09
0009C836 0909 AF03 B106 06B6 B109+  	dc.b	$09, $09, nBb3, $03, nC4, $06, $06, nF4, nC4, $09, $09, $09
0009C842 AF03 B106 06B4 AC09 0909+  	dc.b	nBb3, $03, nC4, $06, $06, nEb4, nG3, $09, $09, $09, nF3, $03
0009C84E AC06 06AF                  	dc.b	nG3, $06, $06, nBb3
0009C852 F700 02FF D4               	smpsLoop            $00, $02, ToxicLandfill_Loop3A
0009C857                            
0009C857                            ToxicLandfill_Loop3C:
0009C857 B112 AF36 AE02 AD01 AC02+  	dc.b	nC4, $12, nBb3, $36, nA3, $02, nAb3, $01, nG3, $02, nFs3, $01
0009C863 AA02 A901 A802 A701 A602+  	dc.b	nF3, $02, nE3, $01, nEb3, $02, nD3, $01, nCs3, $02, nC3, $01
0009C86F A402 A301 A202 A101 A002+  	dc.b	nB2, $02, nBb2, $01, nA2, $02, nAb2, $01, nG2, $02, nFs2, $01
0009C87B B112 AF2A 03AE AFAE        	dc.b	nC4, $12, nBb3, $2A, $03, nA3, nBb3, nA3
0009C883                            
0009C883                            ToxicLandfill_Loop3B:
0009C883 AF02 AE01                  	dc.b	nBb3, $02, nA3, $01
0009C887 F700 04FF F8               	smpsLoop            $00, $04, ToxicLandfill_Loop3B
0009C88C AF02 AAA6 AFAA A6          	dc.b	nBb3, $02, nF3, nCs3, nBb3, nF3, nCs3
0009C893 F701 02FF C0               	smpsLoop            $01, $02, ToxicLandfill_Loop3C
0009C898                            
0009C898                            ToxicLandfill_Loop3D:
0009C898 AC06 A7AA AB03 AC09 A706+  	dc.b	nG3, $06, nD3, nF3, nFs3, $03, nG3, $09, nD3, $06, nF3, nFs3
0009C8A4 F700 02FF F0               	smpsLoop            $00, $02, ToxicLandfill_Loop3D
0009C8A9                            
0009C8A9                            ToxicLandfill_Loop3E:
0009C8A9 ACA5 A7AA 03AC 09A5 06A7+  	dc.b	nG3, nC3, nD3, nF3, $03, nG3, $09, nC3, $06, nD3, nF3
0009C8B4 F700 02FF F1               	smpsLoop            $00, $02, ToxicLandfill_Loop3E
0009C8B9 F701 02FF DB               	smpsLoop            $01, $02, ToxicLandfill_Loop3D
0009C8BE                            
0009C8BE                            ToxicLandfill_Loop40:
0009C8BE BD12 BB36 BA02 B901 B802+  	dc.b	nC5, $12, nBb4, $36, nA4, $02, nAb4, $01, nG4, $02, nFs4, $01
0009C8CA B602 B501 B402 B301 B202+  	dc.b	nF4, $02, nE4, $01, nEb4, $02, nD4, $01, nCs4, $02, nC4, $01
0009C8D6 B002 AF01 AE02 AD01 AC02+  	dc.b	nB3, $02, nBb3, $01, nA3, $02, nAb3, $01, nG3, $02, nFs3, $01
0009C8E2 BD12 BB2A 03BA BBBA        	dc.b	nC5, $12, nBb4, $2A, $03, nA4, nBb4, nA4
0009C8EA                            
0009C8EA                            ToxicLandfill_Loop3F:
0009C8EA BB02 BA01                  	dc.b	nBb4, $02, nA4, $01
0009C8EE F700 04FF F8               	smpsLoop            $00, $04, ToxicLandfill_Loop3F
0009C8F3 BB02 B6B2 BBB6 B2          	dc.b	nBb4, $02, nF4, nCs4, nBb4, nF4, nCs4
0009C8FA F701 02FF C0               	smpsLoop            $01, $02, ToxicLandfill_Loop40
0009C8FF                            
0009C8FF                            ToxicLandfill_Loop41:
0009C8FF BD09 0909 BB03 BD06 06C0+  	dc.b	nC5, $09, $09, $09, nBb4, $03, nC5, $06, $06, nEb5, nC5, $09
0009C90B 0909 BB03 BD06 06C2 BD09+  	dc.b	$09, $09, nBb4, $03, nC5, $06, $06, nF5, nC5, $09, $09, $09
0009C917 BB03 BD06 06C0 B809 0909+  	dc.b	nBb4, $03, nC5, $06, $06, nEb5, nG4, $09, $09, $09, nF4, $03
0009C923 B806 06BB                  	dc.b	nG4, $06, $06, nBb4
0009C927 F700 02FF D4               	smpsLoop            $00, $02, ToxicLandfill_Loop41
0009C92C B8B3 B6B7 03B8 09B3 06B6+  	dc.b	nG4, nD4, nF4, nFs4, $03, nG4, $09, nD4, $06, nF4, nFs4, nG4
0009C938 B3B6 B703 8009 B306 B6B7+  	dc.b	nD4, nF4, nFs4, $03, nRst, $09, nD4, $06, nF4, nFs4, nG4, nC4
0009C944 B3B6 03B8 09B1 06B3 B6B8+  	dc.b	nD4, nF4, $03, nG4, $09, nC4, $06, nD4, nF4, nG4, nC4, nD4
0009C950 B603 8009 B106 B3B6 B8B3+  	dc.b	nF4, $03, nRst, $09, nC4, $06, nD4, nF4, nG4, nD4, nF4, nFs4
0009C95C 03B8 09B3 06B6 B7B8 B3B6+  	dc.b	$03, nG4, $09, nD4, $06, nF4, nFs4, nG4, nD4, nF4, nFs4, $03
0009C968 8009 B306 B6B7             	dc.b	nRst, $09, nD4, $06, nF4, nFs4
0009C96E                            
0009C96E                            ToxicLandfill_Loop42:
0009C96E B8B1 B3B6 03B8 09B1 06B3+  	dc.b	nG4, nC4, nD4, nF4, $03, nG4, $09, nC4, $06, nD4, nF4
0009C979 F700 02FF F1               	smpsLoop            $00, $02, ToxicLandfill_Loop42
0009C97E                            
0009C97E                            ToxicLandfill_Loop43:
0009C97E B8B3 B6B7 03B8 09B3 06B6+  	dc.b	nG4, nD4, nF4, nFs4, $03, nG4, $09, nD4, $06, nF4, nFs4
0009C989 F700 02FF F1               	smpsLoop            $00, $02, ToxicLandfill_Loop43
0009C98E F701 02FF DC               	smpsLoop            $01, $02, ToxicLandfill_Loop42
0009C993 B8B1 B3B6 03B8 09B1 06B3+  	dc.b	nG4, nC4, nD4, nF4, $03, nG4, $09, nC4, $06, nD4, nF4, nG4
0009C99F B1B3 B603 8009 B106 B3B6   	dc.b	nC4, nD4, nF4, $03, nRst, $09, nC4, $06, nD4, nF4
0009C9A9 F6FE 7F                    	smpsJump            ToxicLandfill_Loop3A
0009C9AC                            
0009C9AC                            ; FM3 Data
0009C9AC                            ToxicLandfill_FM3:
0009C9AC E0C0                       	smpsPan             panCenter, $00
0009C9AE EF01                       	smpsSetvoice        $01
0009C9B0                            
0009C9B0                            ToxicLandfill_Loop2D:
0009C9B0 9903 A580 9E80 9F80 A080+  	dc.b	nC2, $03, nC3, nRst, nF2, nRst, nFs2, nRst, nG2, nRst, nFs2, nRst
0009C9BC 9E80 9C9E 9C99 9C80 9E80+  	dc.b	nF2, nRst, nEb2, nF2, nEb2, nC2, nEb2, nRst, nF2, nRst, nEb2, nRst
0009C9C8 9E80 9F9E 9C9E 9C97 98     	dc.b	nF2, nRst, nFs2, nF2, nEb2, nF2, nEb2, nBb1, nB1
0009C9D1 F700 03FF DB               	smpsLoop            $00, $03, ToxicLandfill_Loop2D
0009C9D6 99A5 809E 809F 80A0 809F+  	dc.b	nC2, nC3, nRst, nF2, nRst, nFs2, nRst, nG2, nRst, nFs2, nRst, nF2
0009C9E2 809C 9E9C 999C 809E 809C+  	dc.b	nRst, nEb2, nF2, nEb2, nC2, nEb2, nRst, nF2, nRst, nEb2, nRst, nF2
0009C9EE 809F 9E9C 9D02 9E01 9F02+  	dc.b	nRst, nFs2, nF2, nEb2, nE2, $02, nF2, $01, nFs2, $02, nG2, $01
0009C9FA A102 A201 A302 A401        	dc.b	nAb2, $02, nA2, $01, nBb2, $02, nB2, $01
0009CA02                            
0009CA02                            ToxicLandfill_Loop2E:
0009CA02 A506 A0A3 A403 A509 A006+  	dc.b	nC3, $06, nG2, nBb2, nB2, $03, nC3, $09, nG2, $06, nBb2, nB2
0009CA0E F700 02FF F0               	smpsLoop            $00, $02, ToxicLandfill_Loop2E
0009CA13 A59E A0A3 03A5 099E 06A0+  	dc.b	nC3, nF2, nG2, nBb2, $03, nC3, $09, nF2, $06, nG2, nBb2, nG2
0009CA1F 0909 0909 06A3             	dc.b	$09, $09, $09, $09, $06, nBb2
0009CA25 F701 02FF D9               	smpsLoop            $01, $02, ToxicLandfill_Loop2E
0009CA2A                            
0009CA2A                            ToxicLandfill_Loop31:
0009CA2A A503 9999 A5               	dc.b	nC3, $03, nC2, nC2, nC3
0009CA2F                            
0009CA2F                            ToxicLandfill_Loop2F:
0009CA2F 9999 A3                    	dc.b	nC2, nC2, nBb2
0009CA32 F700 03FF F9               	smpsLoop            $00, $03, ToxicLandfill_Loop2F
0009CA37 99A3                       	dc.b	nC2, nBb2
0009CA39                            
0009CA39                            ToxicLandfill_Loop30:
0009CA39 99A3 99                    	dc.b	nC2, nBb2, nC2
0009CA3C F700 04FF F9               	smpsLoop            $00, $04, ToxicLandfill_Loop30
0009CA41 99A3 A0A3 A4               	dc.b	nC2, nBb2, nG2, nBb2, nB2
0009CA46 F701 04FF E0               	smpsLoop            $01, $04, ToxicLandfill_Loop31
0009CA4B                            
0009CA4B                            ToxicLandfill_Loop32:
0009CA4B A506 06A0 A003 A309 A006+  	dc.b	nC3, $06, $06, nG2, nG2, $03, nBb2, $09, nG2, $06, nBb2, nB2
0009CA57 F700 02FF F0               	smpsLoop            $00, $02, ToxicLandfill_Loop32
0009CA5C                            
0009CA5C                            ToxicLandfill_Loop33:
0009CA5C A5A5 9E9E 03A0 0906 A3A4   	dc.b	nC3, nC3, nF2, nF2, $03, nG2, $09, $06, nBb2, nB2
0009CA66 F700 02FF F2               	smpsLoop            $00, $02, ToxicLandfill_Loop33
0009CA6B F701 02FF DC               	smpsLoop            $01, $02, ToxicLandfill_Loop32
0009CA70                            
0009CA70                            ToxicLandfill_Loop36:
0009CA70 A503 9999 A5               	dc.b	nC3, $03, nC2, nC2, nC3
0009CA75                            
0009CA75                            ToxicLandfill_Loop34:
0009CA75 9999 A3                    	dc.b	nC2, nC2, nBb2
0009CA78 F700 03FF F9               	smpsLoop            $00, $03, ToxicLandfill_Loop34
0009CA7D 99A3                       	dc.b	nC2, nBb2
0009CA7F                            
0009CA7F                            ToxicLandfill_Loop35:
0009CA7F 99A3 99                    	dc.b	nC2, nBb2, nC2
0009CA82 F700 04FF F9               	smpsLoop            $00, $04, ToxicLandfill_Loop35
0009CA87 99A3 A0A3 A4               	dc.b	nC2, nBb2, nG2, nBb2, nB2
0009CA8C F701 04FF E0               	smpsLoop            $01, $04, ToxicLandfill_Loop36
0009CA91                            
0009CA91                            ToxicLandfill_Loop37:
0009CA91 A506 A0A3 A403 A509 A006+  	dc.b	nC3, $06, nG2, nBb2, nB2, $03, nC3, $09, nG2, $06, nBb2, nB2
0009CA9D F700 02FF F0               	smpsLoop            $00, $02, ToxicLandfill_Loop37
0009CAA2 A59E A0A3 03A5 099E 06A0+  	dc.b	nC3, nF2, nG2, nBb2, $03, nC3, $09, nF2, $06, nG2, nBb2, nG2
0009CAAE 0909 0909 06A3             	dc.b	$09, $09, $09, $09, $06, nBb2
0009CAB4 F701 02FF D9               	smpsLoop            $01, $02, ToxicLandfill_Loop37
0009CAB9                            
0009CAB9                            ToxicLandfill_Loop38:
0009CAB9 A5A5 A0A0 03A3 09A0 06A3+  	dc.b	nC3, nC3, nG2, nG2, $03, nBb2, $09, nG2, $06, nBb2, nB2
0009CAC4 F700 02FF F1               	smpsLoop            $00, $02, ToxicLandfill_Loop38
0009CAC9                            
0009CAC9                            ToxicLandfill_Loop39:
0009CAC9 A5A5 9E9E 03A0 0906 A3A4   	dc.b	nC3, nC3, nF2, nF2, $03, nG2, $09, $06, nBb2, nB2
0009CAD3 F700 02FF F2               	smpsLoop            $00, $02, ToxicLandfill_Loop39
0009CAD8 F701 04FF DD               	smpsLoop            $01, $04, ToxicLandfill_Loop38
0009CADD F6FF 23                    	smpsJump            ToxicLandfill_Loop2E
0009CAE0                            
0009CAE0                            ; FM4 Data
0009CAE0                            ToxicLandfill_FM4:
0009CAE0 E0C0                       	smpsPan             panCenter, $00
0009CAE2 EF01                       	smpsSetvoice        $01
0009CAE4                            
0009CAE4                            ToxicLandfill_Loop20:
0009CAE4 8D03 9980 9280 9380 9480+  	dc.b	nC1, $03, nC2, nRst, nF1, nRst, nFs1, nRst, nG1, nRst, nFs1, nRst
0009CAF0 9280 9092 908D 9080 9280+  	dc.b	nF1, nRst, nEb1, nF1, nEb1, nC1, nEb1, nRst, nF1, nRst, nEb1, nRst
0009CAFC 9280 9392 9092 908B 8C     	dc.b	nF1, nRst, nFs1, nF1, nEb1, nF1, nEb1, nBb0, nB0
0009CB05 F700 03FF DB               	smpsLoop            $00, $03, ToxicLandfill_Loop20
0009CB0A 8D99 8092 8093 8094 8093+  	dc.b	nC1, nC2, nRst, nF1, nRst, nFs1, nRst, nG1, nRst, nFs1, nRst, nF1
0009CB16 8090 9290 8D90 8092 8090+  	dc.b	nRst, nEb1, nF1, nEb1, nC1, nEb1, nRst, nF1, nRst, nEb1, nRst, nF1
0009CB22 8093 9290 9293 0294 0195+  	dc.b	nRst, nFs1, nF1, nEb1, nF1, nFs1, $02, nG1, $01, nAb1, $02, nA1
0009CB2E 0197 0298 01               	dc.b	$01, nBb1, $02, nB1, $01
0009CB33                            
0009CB33                            ToxicLandfill_Loop21:
0009CB33 9906 9497 9803 9909 9406+  	dc.b	nC2, $06, nG1, nBb1, nB1, $03, nC2, $09, nG1, $06, nBb1, nB1
0009CB3F F700 02FF F0               	smpsLoop            $00, $02, ToxicLandfill_Loop21
0009CB44 9992 9497 0399 0992 0694+  	dc.b	nC2, nF1, nG1, nBb1, $03, nC2, $09, nF1, $06, nG1, nBb1, nG1
0009CB50 0909 0909 0697             	dc.b	$09, $09, $09, $09, $06, nBb1
0009CB56 F701 02FF D9               	smpsLoop            $01, $02, ToxicLandfill_Loop21
0009CB5B                            
0009CB5B                            ToxicLandfill_Loop24:
0009CB5B 9903 8D8D 99               	dc.b	nC2, $03, nC1, nC1, nC2
0009CB60                            
0009CB60                            ToxicLandfill_Loop22:
0009CB60 8D8D 97                    	dc.b	nC1, nC1, nBb1
0009CB63 F700 03FF F9               	smpsLoop            $00, $03, ToxicLandfill_Loop22
0009CB68 8D97                       	dc.b	nC1, nBb1
0009CB6A                            
0009CB6A                            ToxicLandfill_Loop23:
0009CB6A 8D97 8D                    	dc.b	nC1, nBb1, nC1
0009CB6D F700 04FF F9               	smpsLoop            $00, $04, ToxicLandfill_Loop23
0009CB72 8D97 9497 98               	dc.b	nC1, nBb1, nG1, nBb1, nB1
0009CB77 F701 04FF E0               	smpsLoop            $01, $04, ToxicLandfill_Loop24
0009CB7C                            
0009CB7C                            ToxicLandfill_Loop25:
0009CB7C 9906 0694 9403 9709 9406+  	dc.b	nC2, $06, $06, nG1, nG1, $03, nBb1, $09, nG1, $06, nBb1, nB1
0009CB88 F700 02FF F0               	smpsLoop            $00, $02, ToxicLandfill_Loop25
0009CB8D                            
0009CB8D                            ToxicLandfill_Loop26:
0009CB8D 9999 9292 0394 0906 9798   	dc.b	nC2, nC2, nF1, nF1, $03, nG1, $09, $06, nBb1, nB1
0009CB97 F700 02FF F2               	smpsLoop            $00, $02, ToxicLandfill_Loop26
0009CB9C F701 02FF DC               	smpsLoop            $01, $02, ToxicLandfill_Loop25
0009CBA1                            
0009CBA1                            ToxicLandfill_Loop29:
0009CBA1 9903 8D8D 99               	dc.b	nC2, $03, nC1, nC1, nC2
0009CBA6                            
0009CBA6                            ToxicLandfill_Loop27:
0009CBA6 8D8D 97                    	dc.b	nC1, nC1, nBb1
0009CBA9 F700 03FF F9               	smpsLoop            $00, $03, ToxicLandfill_Loop27
0009CBAE 8D97                       	dc.b	nC1, nBb1
0009CBB0                            
0009CBB0                            ToxicLandfill_Loop28:
0009CBB0 8D97 8D                    	dc.b	nC1, nBb1, nC1
0009CBB3 F700 04FF F9               	smpsLoop            $00, $04, ToxicLandfill_Loop28
0009CBB8 8D97 9497 98               	dc.b	nC1, nBb1, nG1, nBb1, nB1
0009CBBD F701 04FF E0               	smpsLoop            $01, $04, ToxicLandfill_Loop29
0009CBC2                            
0009CBC2                            ToxicLandfill_Loop2A:
0009CBC2 9906 9497 9803 9909 9406+  	dc.b	nC2, $06, nG1, nBb1, nB1, $03, nC2, $09, nG1, $06, nBb1, nB1
0009CBCE F700 02FF F0               	smpsLoop            $00, $02, ToxicLandfill_Loop2A
0009CBD3 9992 9497 0399 0992 0694+  	dc.b	nC2, nF1, nG1, nBb1, $03, nC2, $09, nF1, $06, nG1, nBb1, nG1
0009CBDF 0909 0909 0697             	dc.b	$09, $09, $09, $09, $06, nBb1
0009CBE5 F701 02FF D9               	smpsLoop            $01, $02, ToxicLandfill_Loop2A
0009CBEA                            
0009CBEA                            ToxicLandfill_Loop2B:
0009CBEA 9999 9494 0397 0994 0697+  	dc.b	nC2, nC2, nG1, nG1, $03, nBb1, $09, nG1, $06, nBb1, nB1
0009CBF5 F700 02FF F1               	smpsLoop            $00, $02, ToxicLandfill_Loop2B
0009CBFA                            
0009CBFA                            ToxicLandfill_Loop2C:
0009CBFA 9999 9292 0394 0906 9798   	dc.b	nC2, nC2, nF1, nF1, $03, nG1, $09, $06, nBb1, nB1
0009CC04 F700 02FF F2               	smpsLoop            $00, $02, ToxicLandfill_Loop2C
0009CC09 F701 04FF DD               	smpsLoop            $01, $04, ToxicLandfill_Loop2B
0009CC0E F6FF 23                    	smpsJump            ToxicLandfill_Loop21
0009CC11                            
0009CC11                            ; FM5 Data
0009CC11                            ToxicLandfill_FM5:
0009CC11 E0C0                       	smpsPan             panCenter, $00
0009CC13 E6FC                       	smpsAlterVol			-$04		
0009CC15 E102                       	smpsDetune			$02	
0009CC17 EF00                       	smpsSetvoice        $00
0009CC19 807F 7F78 A902 AA01 AB02+  	dc.b	nRst, $7F, $7F, $78, nE3, $02, nF3, $01, nFs3, $02, nG3, $01
0009CC25 AD02 AE01 AF               	dc.b	nAb3, $02, nA3, $01, nBb3
0009CC2A                            
0009CC2A                            ToxicLandfill_Jump01:
0009CC2A E701 B0                    	dc.b	smpsNoAttack, $01, nB3
0009CC2D                            
0009CC2D                            ToxicLandfill_Loop11:
0009CC2D AC09 0909 AA03 AC06 06AF+  	dc.b	nG3, $09, $09, $09, nF3, $03, nG3, $06, $06, nBb3, nG3, $09
0009CC39 0909 AA03 AC06 06B1 AC09+  	dc.b	$09, $09, nF3, $03, nG3, $06, $06, nC4, nG3, $09, $09, $09
0009CC45 AA03 AC06 06AF A709 0909+  	dc.b	nF3, $03, nG3, $06, $06, nBb3, nD3, $09, $09, $09, nC3, $03
0009CC51 A706 06AA                  	dc.b	nD3, $06, $06, nF3
0009CC55 F700 02FF D4               	smpsLoop            $00, $02, ToxicLandfill_Loop11
0009CC5A                            
0009CC5A                            ToxicLandfill_Loop13:
0009CC5A AC12 AA36 A902 A801 A702+  	dc.b	nG3, $12, nF3, $36, nE3, $02, nEb3, $01, nD3, $02, nCs3, $01
0009CC66 A502 A401 A302 A201 A102+  	dc.b	nC3, $02, nB2, $01, nBb2, $02, nA2, $01, nAb2, $02, nG2, $01
0009CC72 9F02 9E01 9D02 9C01 9B02+  	dc.b	nFs2, $02, nF2, $01, nE2, $02, nEb2, $01, nD2, $02, nCs2, $01
0009CC7E AC12 AA2A 03A9 AAA9        	dc.b	nG3, $12, nF3, $2A, $03, nE3, nF3, nE3
0009CC86                            
0009CC86                            ToxicLandfill_Loop12:
0009CC86 AA02 A901                  	dc.b	nF3, $02, nE3, $01
0009CC8A F700 04FF F8               	smpsLoop            $00, $04, ToxicLandfill_Loop12
0009CC8F AA02 A5A1 AAA5 A1          	dc.b	nF3, $02, nC3, nAb2, nF3, nC3, nAb2
0009CC96 F701 02FF C0               	smpsLoop            $01, $02, ToxicLandfill_Loop13
0009CC9B                            
0009CC9B                            ToxicLandfill_Loop14:
0009CC9B B106 ACAF B003 B109 AC06+  	dc.b	nC4, $06, nG3, nBb3, nB3, $03, nC4, $09, nG3, $06, nBb3, nB3
0009CCA7 F700 02FF F0               	smpsLoop            $00, $02, ToxicLandfill_Loop14
0009CCAC                            
0009CCAC                            ToxicLandfill_Loop15:
0009CCAC B1AA ACAF 03B1 09AA 06AC+  	dc.b	nC4, nF3, nG3, nBb3, $03, nC4, $09, nF3, $06, nG3, nBb3
0009CCB7 F700 02FF F1               	smpsLoop            $00, $02, ToxicLandfill_Loop15
0009CCBC F701 02FF DB               	smpsLoop            $01, $02, ToxicLandfill_Loop14
0009CCC1                            
0009CCC1                            ToxicLandfill_Loop17:
0009CCC1 B812 B636 B502 B401 B302+  	dc.b	nG4, $12, nF4, $36, nE4, $02, nEb4, $01, nD4, $02, nCs4, $01
0009CCCD B102 B001 AF02 AE01 AD02+  	dc.b	nC4, $02, nB3, $01, nBb3, $02, nA3, $01, nAb3, $02, nG3, $01
0009CCD9 AB02 AA01 A902 A801 A702+  	dc.b	nFs3, $02, nF3, $01, nE3, $02, nEb3, $01, nD3, $02, nCs3, $01
0009CCE5 B812 B62A 03B5 B6B5        	dc.b	nG4, $12, nF4, $2A, $03, nE4, nF4, nE4
0009CCED                            
0009CCED                            ToxicLandfill_Loop16:
0009CCED B602 B501                  	dc.b	nF4, $02, nE4, $01
0009CCF1 F700 04FF F8               	smpsLoop            $00, $04, ToxicLandfill_Loop16
0009CCF6 B602 B1AD B6B1 AD          	dc.b	nF4, $02, nC4, nAb3, nF4, nC4, nAb3
0009CCFD F701 02FF C0               	smpsLoop            $01, $02, ToxicLandfill_Loop17
0009CD02                            
0009CD02                            ToxicLandfill_Loop18:
0009CD02 B809 0909 B603 B806 06BB+  	dc.b	nG4, $09, $09, $09, nF4, $03, nG4, $06, $06, nBb4, nG4, $09
0009CD0E 0909 B603 B806 06BD B809+  	dc.b	$09, $09, nF4, $03, nG4, $06, $06, nC5, nG4, $09, $09, $09
0009CD1A B603 B806 06BB B309 0909+  	dc.b	nF4, $03, nG4, $06, $06, nBb4, nD4, $09, $09, $09, nC4, $03
0009CD26 B306 06B6                  	dc.b	nD4, $06, $06, nF4
0009CD2A F700 02FF D4               	smpsLoop            $00, $02, ToxicLandfill_Loop18
0009CD2F                            
0009CD2F                            ToxicLandfill_Loop19:
0009CD2F BDB8 BBBC 03BD 09B8 06BB+  	dc.b	nC5, nG4, nBb4, nB4, $03, nC5, $09, nG4, $06, nBb4, nB4
0009CD3A F700 02FF F1               	smpsLoop            $00, $02, ToxicLandfill_Loop19
0009CD3F                            
0009CD3F                            ToxicLandfill_Loop1A:
0009CD3F BDB6 B8BB 03BD 09B6 06B8+  	dc.b	nC5, nF4, nG4, nBb4, $03, nC5, $09, nF4, $06, nG4, nBb4
0009CD4A F700 02FF F1               	smpsLoop            $00, $02, ToxicLandfill_Loop1A
0009CD4F                            
0009CD4F                            ToxicLandfill_Loop1B:
0009CD4F BDB8 BBBC 03BD 09B8 06BB+  	dc.b	nC5, nG4, nBb4, nB4, $03, nC5, $09, nG4, $06, nBb4, nB4
0009CD5A F700 02FF F1               	smpsLoop            $00, $02, ToxicLandfill_Loop1B
0009CD5F BDB6 B8BB 03BD 09B6 06B8+  	dc.b	nC5, nF4, nG4, nBb4, $03, nC5, $09, nF4, $06, nG4, nBb4, nC5
0009CD6B B6B8 BB03 BD09 B606 B8BB+  	dc.b	nF4, nG4, nBb4, $03, nC5, $09, nF4, $06, nG4, nBb4, $02, nRst
0009CD77 EF00                       	smpsSetvoice        $00
0009CD79 E1FE                       	smpsDetune			-$02
0009CD7B E604                       	smpsAlterVol		$04
0009CD7D                            	
0009CD7D                            ToxicLandfill_Loop1C:
0009CD7D B106 ACAF B003 B109 AC06+  	dc.b	nC4, $06, nG3, nBb3, nB3, $03, nC4, $09, nG3, $06, nBb3, nB3	
0009CD89 F700 02FF F0               	smpsLoop            $00, $02, ToxicLandfill_Loop1C
0009CD8E                            
0009CD8E                            ToxicLandfill_Loop1D:
0009CD8E B1AA ACAF 03B1 09AA 06AC+  	dc.b	nC4, nF3, nG3, nBb3, $03, nC4, $09, nF3, $06, nG3, nBb3
0009CD99 F700 02FF F1               	smpsLoop            $00, $02, ToxicLandfill_Loop1D
0009CD9E                            
0009CD9E                            ToxicLandfill_Loop1E:
0009CD9E BDB8 BBBC 03BD 09B8 06BB+  	dc.b	nC5, nG4, nBb4, nB4, $03, nC5, $09, nG4, $06, nBb4, nB4
0009CDA9 F700 02FF F1               	smpsLoop            $00, $02, ToxicLandfill_Loop1E
0009CDAE                            
0009CDAE                            ToxicLandfill_Loop1F:
0009CDAE BDC2 B8BB 03BD 09C2 06B8+  	dc.b	nC5, nF5, nG4, nBb4, $03, nC5, $09, nF5, $06, nG4, nBb4
0009CDB9 F700 02FF F1               	smpsLoop            $00, $02, ToxicLandfill_Loop1F
0009CDBE EF01                       	smpsSetvoice        $01
0009CDC0 E102                       	smpsDetune			$02
0009CDC2 E6FC                       	smpsAlterVol		-$04	
0009CDC4 F6FE 64                    	smpsJump            ToxicLandfill_Jump01
0009CDC7                            
0009CDC7                            ; PSG1 Data
0009CDC7                            ToxicLandfill_PSG1:
0009CDC7 807F 7F7F 03               	dc.b	nRst, $7F, $7F, $7F, $03
0009CDCC                            
0009CDCC                            ToxicLandfill_Jump04:
0009CDCC 80                         	dc.b	nRst
0009CDCD                            
0009CDCD                            ToxicLandfill_Loop57:
0009CDCD 60                         	dc.b	$60
0009CDCE F700 08FF FB               	smpsLoop            $00, $08, ToxicLandfill_Loop57
0009CDD3                            
0009CDD3                            ToxicLandfill_Loop58:
0009CDD3 A506 A0A3 A403 A509 A006+  	dc.b	nC3, $06, nG2, nBb2, nB2, $03, nC3, $09, nG2, $06, nBb2, nB2
0009CDDF F700 02FF F0               	smpsLoop            $00, $02, ToxicLandfill_Loop58
0009CDE4                            
0009CDE4                            ToxicLandfill_Loop59:
0009CDE4 A59E A0A3 03A5 099E 06A0+  	dc.b	nC3, nF2, nG2, nBb2, $03, nC3, $09, nF2, $06, nG2, nBb2
0009CDEF F700 02FF F1               	smpsLoop            $00, $02, ToxicLandfill_Loop59
0009CDF4                            
0009CDF4                            ToxicLandfill_Loop5A:
0009CDF4 A5A0 A3A4 03A5 09A0 06A3+  	dc.b	nC3, nG2, nBb2, nB2, $03, nC3, $09, nG2, $06, nBb2, nB2
0009CDFF F700 02FF F1               	smpsLoop            $00, $02, ToxicLandfill_Loop5A
0009CE04 A59E A0A3 03A5 099E 06A0+  	dc.b	nC3, nF2, nG2, nBb2, $03, nC3, $09, nF2, $06, nG2, nBb2, nC3
0009CE10 9EA0 A303 A509 9E06 A0A3+  	dc.b	nF2, nG2, nBb2, $03, nC3, $09, nF2, $06, nG2, nBb2, $04, nRst
0009CE1C                            
0009CE1C                            ToxicLandfill_Loop5B:
0009CE1C 6E                         	dc.b	$6E
0009CE1D F700 07FF FB               	smpsLoop            $00, $07, ToxicLandfill_Loop5B
0009CE22                            
0009CE22                            ToxicLandfill_Loop5C:
0009CE22 A506 A0A3 A403 A509 A006+  	dc.b	nC3, $06, nG2, nBb2, nB2, $03, nC3, $09, nG2, $06, nBb2, nB2
0009CE2E F700 02FF F0               	smpsLoop            $00, $02, ToxicLandfill_Loop5C
0009CE33                            
0009CE33                            ToxicLandfill_Loop5D:
0009CE33 A59E A0A3 03A5 099E 06A0+  	dc.b	nC3, nF2, nG2, nBb2, $03, nC3, $09, nF2, $06, nG2, nBb2
0009CE3E F700 02FF F1               	smpsLoop            $00, $02, ToxicLandfill_Loop5D
0009CE43 F701 03FF DB               	smpsLoop            $01, $03, ToxicLandfill_Loop5C
0009CE48                            
0009CE48                            ToxicLandfill_Loop5E:
0009CE48 A5A0 A3A4 03A5 09A0 06A3+  	dc.b	nC3, nG2, nBb2, nB2, $03, nC3, $09, nG2, $06, nBb2, nB2
0009CE53 F700 02FF F1               	smpsLoop            $00, $02, ToxicLandfill_Loop5E
0009CE58 A59E A0A3 03A5 099E 06A0+  	dc.b	nC3, nF2, nG2, nBb2, $03, nC3, $09, nF2, $06, nG2, nBb2, nC3
0009CE64 9EA0 A303 A509 9E06 A0A3+  	dc.b	nF2, nG2, nBb2, $03, nC3, $09, nF2, $06, nG2, nBb2, $05, nRst
0009CE70 01                         	dc.b	$01
0009CE71 F6FF 59                    	smpsJump            ToxicLandfill_Jump04
0009CE74                            
0009CE74                            ; PSG2 Data
0009CE74                            ToxicLandfill_PSG2:
0009CE74 807F 7F7F 03               	dc.b	nRst, $7F, $7F, $7F, $03
0009CE79                            
0009CE79                            ToxicLandfill_Jump03:
0009CE79 80                         	dc.b	nRst
0009CE7A                            
0009CE7A                            ToxicLandfill_Loop50:
0009CE7A 60                         	dc.b	$60
0009CE7B F700 08FF FB               	smpsLoop            $00, $08, ToxicLandfill_Loop50
0009CE80 A006 9B9E 9F03 A009 9B06+  	dc.b	nG2, $06, nD2, nF2, nFs2, $03, nG2, $09, nD2, $06, nF2, nFs2
0009CE8C A09B 9E9F 03A0 0880 019B+  	dc.b	nG2, nD2, nF2, nFs2, $03, nG2, $08, nRst, $01, nD2, $06, nF2
0009CE98 9FA0 999B 9E03 A009 9906+  	dc.b	nFs2, nG2, nC2, nD2, nF2, $03, nG2, $09, nC2, $06, nD2, nF2
0009CEA4 A099 9B9E 03A0 0880 0199+  	dc.b	nG2, nC2, nD2, nF2, $03, nG2, $08, nRst, $01, nC2, $06, nD2
0009CEB0 9E                         	dc.b	nF2
0009CEB1                            
0009CEB1                            ToxicLandfill_Loop51:
0009CEB1 A09B 9E9F 03A0 099B 069E+  	dc.b	nG2, nD2, nF2, nFs2, $03, nG2, $09, nD2, $06, nF2, nFs2
0009CEBC F700 02FF F1               	smpsLoop            $00, $02, ToxicLandfill_Loop51
0009CEC1 A099 9B9E 03A0 0999 069B+  	dc.b	nG2, nC2, nD2, nF2, $03, nG2, $09, nC2, $06, nD2, nF2, nG2
0009CECD 999B 9E03 A008 8001 9906+  	dc.b	nC2, nD2, nF2, $03, nG2, $08, nRst, $01, nC2, $06, nD2, nF2
0009CED9 0580                       	dc.b	$05, nRst
0009CEDB                            
0009CEDB                            ToxicLandfill_Loop52:
0009CEDB 60                         	dc.b	$60
0009CEDC F700 08FF FB               	smpsLoop            $00, $08, ToxicLandfill_Loop52
0009CEE1 01                         	dc.b	$01
0009CEE2                            
0009CEE2                            ToxicLandfill_Loop53:
0009CEE2 A006 9B9E 9F03 A009 9B06+  	dc.b	nG2, $06, nD2, nF2, nFs2, $03, nG2, $09, nD2, $06, nF2, nFs2
0009CEEE A09B 9E9F 03A0 0880 019B+  	dc.b	nG2, nD2, nF2, nFs2, $03, nG2, $08, nRst, $01, nD2, $06, nF2
0009CEFA 9FA0 999B 9E03 A009 9906+  	dc.b	nFs2, nG2, nC2, nD2, nF2, $03, nG2, $09, nC2, $06, nD2, nF2
0009CF06 A099 9B9E 03A0 0880 0199+  	dc.b	nG2, nC2, nD2, nF2, $03, nG2, $08, nRst, $01, nC2, $06, nD2
0009CF12 9E                         	dc.b	nF2
0009CF13 F700 02FF CB               	smpsLoop            $00, $02, ToxicLandfill_Loop53
0009CF18                            
0009CF18                            ToxicLandfill_Loop54:
0009CF18 A09B 9E9F 03A0 099B 069E+  	dc.b	nG2, nD2, nF2, nFs2, $03, nG2, $09, nD2, $06, nF2, nFs2
0009CF23 F700 02FF F1               	smpsLoop            $00, $02, ToxicLandfill_Loop54
0009CF28                            
0009CF28                            ToxicLandfill_Loop55:
0009CF28 A099 9B9E 03A0 0999 069B+  	dc.b	nG2, nC2, nD2, nF2, $03, nG2, $09, nC2, $06, nD2, nF2
0009CF33 F700 02FF F1               	smpsLoop            $00, $02, ToxicLandfill_Loop55
0009CF38                            
0009CF38                            ToxicLandfill_Loop56:
0009CF38 A09B 9E9F 03A0 099B 069E+  	dc.b	nG2, nD2, nF2, nFs2, $03, nG2, $09, nD2, $06, nF2, nFs2
0009CF43 F700 02FF F1               	smpsLoop            $00, $02, ToxicLandfill_Loop56
0009CF48 A099 9B9E 03A0 0999 069B+  	dc.b	nG2, nC2, nD2, nF2, $03, nG2, $09, nC2, $06, nD2, nF2, nG2
0009CF54 999B 9E03 A009 9906 9B9E+  	dc.b	nC2, nD2, nF2, $03, nG2, $09, nC2, $06, nD2, nF2, $05, nRst
0009CF60 01                         	dc.b	$01
0009CF61 F6FF 16                    	smpsJump            ToxicLandfill_Jump03
0009CF64                            
0009CF64                            ; PSG3 Data
0009CF64                            ToxicLandfill_PSG3:
0009CF64 F3E7                       	smpsPSGform         $E7
0009CF66 807F 41C6 0C0C 0C0C        	dc.b	nRst, $7F, $41, nMaxPSG, $0C, $0C, $0C, $0C
0009CF6E                            
0009CF6E                            ToxicLandfill_Loop4E:
0009CF6E 0C0C 0603 03               	dc.b	$0C, $0C, $06, $03, $03
0009CF73 F501                       	smpsPSGvoice        fTone_01
0009CF75 0C                         	dc.b	$0C
0009CF76 F502                       	smpsPSGvoice        fTone_02
0009CF78 F700 02FF F2               	smpsLoop            $00, $02, ToxicLandfill_Loop4E
0009CF7D 0603 03                    	dc.b	$06, $03, $03
0009CF80 F501                       	smpsPSGvoice        fTone_01
0009CF82 06                         	dc.b	$06
0009CF83 F502                       	smpsPSGvoice        fTone_02
0009CF85 03                         	dc.b	$03
0009CF86 F501                       	smpsPSGvoice        fTone_01
0009CF88 0906 0606                  	dc.b	$09, $06, $06, $06
0009CF8C                            
0009CF8C                            ToxicLandfill_Jump02:
0009CF8C E77F E77F E77F E715        	dc.b	smpsNoAttack, $7F, smpsNoAttack, $7F, smpsNoAttack, $7F, smpsNoAttack, $15
0009CF94 F502                       	smpsPSGvoice        fTone_02
0009CF96 C618 1818                  	dc.b	nMaxPSG, $18, $18, $18
0009CF9A F501                       	smpsPSGvoice        fTone_01
0009CF9C 18                         	dc.b	$18
0009CF9D F502                       	smpsPSGvoice        fTone_02
0009CF9F 1806                       	dc.b	$18, $06
0009CFA1 F501                       	smpsPSGvoice        fTone_01
0009CFA3 0909 0909 0618             	dc.b	$09, $09, $09, $09, $06, $18
0009CFA9 F502                       	smpsPSGvoice        fTone_02
0009CFAB 1818 18                    	dc.b	$18, $18, $18
0009CFAE F501                       	smpsPSGvoice        fTone_01
0009CFB0 18                         	dc.b	$18
0009CFB1 F502                       	smpsPSGvoice        fTone_02
0009CFB3 1806                       	dc.b	$18, $06
0009CFB5 F501                       	smpsPSGvoice        fTone_01
0009CFB7 0909 0909 067F E77F E77F+  	dc.b	$09, $09, $09, $09, $06, $7F, smpsNoAttack, $7F, smpsNoAttack, $7F, smpsNoAttack, $1B
0009CFC3 F502                       	smpsPSGvoice        fTone_02
0009CFC5 1818 18                    	dc.b	$18, $18, $18
0009CFC8 F501                       	smpsPSGvoice        fTone_01
0009CFCA 18                         	dc.b	$18
0009CFCB F502                       	smpsPSGvoice        fTone_02
0009CFCD 1806                       	dc.b	$18, $06
0009CFCF F501                       	smpsPSGvoice        fTone_01
0009CFD1 0909 0909 0618             	dc.b	$09, $09, $09, $09, $06, $18
0009CFD7 F502                       	smpsPSGvoice        fTone_02
0009CFD9 1818 18                    	dc.b	$18, $18, $18
0009CFDC F501                       	smpsPSGvoice        fTone_01
0009CFDE 18                         	dc.b	$18
0009CFDF F502                       	smpsPSGvoice        fTone_02
0009CFE1 1806                       	dc.b	$18, $06
0009CFE3 F501                       	smpsPSGvoice        fTone_01
0009CFE5 0909 0909 06               	dc.b	$09, $09, $09, $09, $06
0009CFEA                            
0009CFEA                            ToxicLandfill_Loop4F:
0009CFEA 59E7                       	dc.b	$59, smpsNoAttack
0009CFEC F700 0CFF FA               	smpsLoop            $00, $0C, ToxicLandfill_Loop4F
0009CFF1 5A                         	dc.b	$5A
0009CFF2 F6FF 98                    	smpsJump            ToxicLandfill_Jump02
0009CFF5                            
0009CFF5                            
0009CFF5                            ToxicLandfill_Voices:
0009CFF5                            ;	Voice $00
0009CFF5                            ;	$29
0009CFF5                            ;	$33, $02, $02, $01, 	$1F, $1F, $1F, $19, 	$00, $02, $00, $0B
0009CFF5                            ;	$03, $02, $00, $03, 	$0A, $1A, $0A, $1A, 	$1A, $1D, $20, $05
0009CFF5                            	smpsVcAlgorithm     $01
0009CFF5                            	smpsVcFeedback      $05
0009CFF5                            	smpsVcUnusedBits    $00
0009CFF5                            	smpsVcDetune        $00, $00, $00, $03
0009CFF5                            	smpsVcCoarseFreq    $01, $02, $02, $03
0009CFF5                            	smpsVcRateScale     $00, $00, $00, $00
0009CFF5                            	smpsVcAttackRate    $19, $1F, $1F, $1F
0009CFF5                            	smpsVcAmpMod        $00, $00, $00, $00
0009CFF5                            	smpsVcDecayRate1    $0B, $00, $02, $00
0009CFF5                            	smpsVcDecayRate2    $03, $00, $02, $03
0009CFF5                            	smpsVcDecayLevel    $01, $00, $01, $00
0009CFF5                            	smpsVcReleaseRate   $0A, $0A, $0A, $0A
0009D00E                            	
0009D00E                            ;	Voice $01
0009D00E                            ;	$18
0009D00E                            ;	$37, $30, $30, $31, 	$9E, $DC, $1C, $9C, 	$0D, $06, $04, $01
0009D00E                            ;	$08, $0A, $03, $05, 	$BF, $BF, $3F, $2F, 	$32, $22, $14, $00
0009D00E                            	smpsVcAlgorithm     $00
0009D00E                            	smpsVcFeedback      $03
0009D00E                            	smpsVcUnusedBits    $00
0009D00E                            	smpsVcDetune        $03, $03, $03, $03
0009D00E                            	smpsVcCoarseFreq    $01, $00, $00, $07
0009D00E                            	smpsVcRateScale     $02, $00, $03, $02
0009D00E                            	smpsVcAttackRate    $1C, $1C, $1C, $1E
0009D00E                            	smpsVcAmpMod        $00, $00, $00, $00
0009D00E                            	smpsVcDecayRate1    $01, $04, $06, $0D
0009D00E                            	smpsVcDecayRate2    $05, $03, $0A, $08
0009D00E                            	smpsVcDecayLevel    $02, $03, $0B, $0B
0009D00E                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
0009D027                            
0009D027                            ;	Voice $02
0009D027                            ;	$2C
0009D027                            ;	$72, $78, $34, $34, 	$1F, $12, $1F, $12, 	$00, $0A, $00, $0A
0009D027                            ;	$00, $00, $00, $00, 	$00, $16, $00, $16, 	$16, $00, $17, $00
0009D027                            	smpsVcAlgorithm     $04
0009D027                            	smpsVcFeedback      $05
0009D027                            	smpsVcUnusedBits    $00
0009D027                            	smpsVcDetune        $03, $03, $07, $07
0009D027                            	smpsVcCoarseFreq    $04, $04, $08, $02
0009D027                            	smpsVcRateScale     $00, $00, $00, $00
0009D027                            	smpsVcAttackRate    $12, $1F, $12, $1F
0009D027                            	smpsVcAmpMod        $00, $00, $00, $00
0009D027                            	smpsVcDecayRate1    $0A, $00, $0A, $00
0009D027                            	smpsVcDecayRate2    $00, $00, $00, $00
0009D027                            	smpsVcDecayLevel    $01, $00, $01, $00
0009D027                            	smpsVcReleaseRate   $06, $00, $06, $00
0009D040                            		even			
0009D040                            ; ---------------------------------------------------------------------------
0009D040                            ; Sound	effect pointers
0009D040                            ; ---------------------------------------------------------------------------
0009D040                            SoundIndex:
0009D040 0000 0000                  ptr_sndA0:	dc.l SoundA0
0009D044 0000 0000                  ptr_sndA1:	dc.l SoundA1
0009D048 0000 0000                  ptr_sndA2:	dc.l SoundA2
0009D04C 0000 0000                  ptr_sndA3:	dc.l SoundA3
0009D050 0000 0000                  ptr_sndA4:	dc.l SoundA4
0009D054 0000 0000                  ptr_sndA5:	dc.l SoundA5
0009D058 0000 0000                  ptr_sndA6:	dc.l SoundA6
0009D05C 0000 0000                  ptr_sndA7:	dc.l SoundA7
0009D060 0000 0000                  ptr_sndA8:	dc.l SoundA8
0009D064 0000 0000                  ptr_sndA9:	dc.l SoundA9
0009D068 0000 0000                  ptr_sndAA:	dc.l SoundAA
0009D06C 0000 0000                  ptr_FireShield:	dc.l SoundAB
0009D070 0000 0000                  ptr_sndAC:	dc.l SoundAC
0009D074 0000 0000                  ptr_sndAD:	dc.l SoundAD
0009D078 0000 0000                  ptr_sndAE:	dc.l SoundAE
0009D07C 0000 0000                  ptr_sndAF:	dc.l SoundAF
0009D080 0000 0000                  ptr_sndB0:	dc.l SoundB0
0009D084 0000 0000                  ptr_sndB1:	dc.l SoundB1
0009D088 0000 0000                  ptr_sndB2:	dc.l SoundB2
0009D08C 0000 0000                  ptr_sndB3:	dc.l SoundB3
0009D090 0000 0000                  ptr_sndB4:	dc.l SoundB4
0009D094 0000 0000                  ptr_sndB5:	dc.l SoundB5
0009D098 0000 0000                  ptr_sndB6:	dc.l SoundB6
0009D09C 0000 0000                  ptr_sndB7:	dc.l SoundB7
0009D0A0 0000 0000                  ptr_sndB8:	dc.l SoundB8
0009D0A4 0000 0000                  ptr_sndB9:	dc.l SoundB9
0009D0A8 0000 0000                  ptr_sndBA:	dc.l SoundBA
0009D0AC 0000 0000                  ptr_sndBB:	dc.l SoundBB
0009D0B0 0000 0000                  ptr_sndBC:	dc.l SoundBC
0009D0B4 0000 0000                  ptr_sndBD:	dc.l SoundBD
0009D0B8 0000 0000                  ptr_sndBE:	dc.l SoundBE
0009D0BC 0000 0000                  ptr_sndBF:	dc.l SoundBF
0009D0C0 0000 0000                  ptr_sndC0:	dc.l SoundC0
0009D0C4 0000 0000                  ptr_sndC1:	dc.l SoundC1
0009D0C8 0000 0000                  ptr_sndC2:	dc.l SoundC2
0009D0CC 0000 0000                  ptr_sndC3:	dc.l SoundC3
0009D0D0 0000 0000                  ptr_sndC4:	dc.l SoundC4
0009D0D4 0000 0000                  ptr_sndC5:	dc.l SoundC5
0009D0D8 0000 0000                  ptr_sndC6:	dc.l SoundC6
0009D0DC 0000 0000                  ptr_sndC7:	dc.l SoundC7
0009D0E0 0000 0000                  ptr_sndC8:	dc.l SoundC8
0009D0E4 0000 0000                  ptr_sndC9:	dc.l SoundC9
0009D0E8 0000 0000                  ptr_sndCA:	dc.l SoundCA
0009D0EC 0000 0000                  ptr_sndCB:	dc.l SoundCB
0009D0F0 0000 0000                  ptr_sndCC:	dc.l SoundCC
0009D0F4 0000 0000                  ptr_sndCD:	dc.l SoundCD
0009D0F8 0000 0000                  ptr_sndCE:	dc.l SoundCE
0009D0FC 0000 0000                  ptr_sndCF:	dc.l SoundCF
0009D100                            ptr_sndend
0009D100                            ; ---------------------------------------------------------------------------
0009D100                            ; Special sound effect pointers
0009D100                            ; ---------------------------------------------------------------------------
0009D100                            SpecSoundIndex:
0009D100 0000 0000                  ptr_sndD0:	dc.l SoundD0
0009D104 0000 0000                  ptr_sndD1:	dc.l SoundD1
0009D108 0000 0000                  ptr_sndD2:	dc.l SoundD2
0009D10C 0000 0000                  ptr_sndD3:	dc.l SoundD3
0009D110 0000 0000                  ptr_sndD4:	dc.l SoundD4
0009D114 0000 0000                  ptr_sndD5:	dc.l SoundD5
0009D118                            ptr_specend
0009D118                            SoundA0:	include	"sound/sfx/Jump.asm"
0009D118                            SndA0_Jump_Header:
0009D118                            	smpsHeaderStartSong 1
0009D11A 01                         	smpsHeaderTempoSFX  $01
0009D11B 01                         	smpsHeaderChanSFX   $01
0009D11C                            
0009D122                            
0009D122                            ; PSG2 Data
0009D122                            SndA0_Jump_PSG2:
0009D122 F500                       	smpsPSGvoice        $00
0009D124 9E05                       	dc.b	nF2, $05
0009D12B A315                       	dc.b	nBb2, $15
0009D12D F2                         	smpsStop
0009D12E                            
0009D12E                            ; Song seems to not use any FM voices
0009D12E                            SndA0_Jump_Voices:
0009D12E                            SndA0_Jump_Voices:
0009D12E                            		even
0009D12E                            SoundA1:	incbin	"sound/sfx/SndA1 - Lamppost.bin"
0009D158                            		even
0009D158                            SoundA2:	include	"sound/sfx/DrowningSound.asm"
0009D158                            SndDF_Header:
0009D158                            	smpsHeaderStartSong 3
0009D15A 01                         	smpsHeaderTempoSFX  $01
0009D15B 01                         	smpsHeaderChanSFX   $01
0009D15C                            
0009D162                            
0009D162                            ; FM5 Data
0009D162                            SndDF_FM5:
0009D162 EF00                       	smpsSetvoice        $00
0009D164                            
0009D164                            SndDF_Loop00:
0009D164 F800 00                    	smpsCall            SndDF_Call00
0009D167 E905                       	smpsAlterPitch $05
0009D169 E608                       	smpsFMAlterVol      $08
0009D16B F701 03FF F5               	smpsLoop            $01, $03, SndDF_Loop00
0009D170 E9EC                       	smpsAlterPitch $EC
0009D172 E6E0                       	smpsFMAlterVol      $E0
0009D174 F2                         	smpsStop
0009D175                            
0009D175                            SndDF_Call00:
0009D175 9902                       	dc.b	nC2, $02
0009D177 E901                       	smpsAlterPitch $01
0009D179 F700 0AFF F8               	smpsLoop            $00, $0A, SndDF_Call00
0009D17E E9F6                       	smpsAlterPitch $F6
0009D180 E3                         	smpsReturn
0009D181                            
0009D181                            SndDF_Voices:
0009D181                            ;	Voice $00
0009D181                            ;	$07
0009D181                            ;	$04, $04, $05, $04, 	$1F, $1F, $15, $15, 	$00, $00, $00, $00
0009D181                            ;	$00, $00, $00, $00, 	$1F, $1F, $1F, $1F, 	$7F, $7F, $80, $80
0009D181                            	smpsVcAlgorithm     $07
0009D181                            	smpsVcFeedback      $00
0009D181                            	smpsVcUnusedBits    $00
0009D181                            	smpsVcDetune        $00, $00, $00, $00
0009D181                            	smpsVcCoarseFreq    $04, $05, $04, $04
0009D181                            	smpsVcRateScale     $00, $00, $00, $00
0009D181                            	smpsVcAttackRate    $15, $15, $1F, $1F
0009D181                            	smpsVcAmpMod        $00, $00, $00, $00
0009D181                            	smpsVcDecayRate1    $00, $00, $00, $00
0009D181                            	smpsVcDecayRate2    $00, $00, $00, $00
0009D181                            	smpsVcDecayLevel    $01, $01, $01, $01
0009D181                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
0009D19A                            		even
0009D19A                            SoundA3:	incbin	"sound/sfx/SndA3 - Death.bin"
0009D1CC                            		even
0009D1CC                            SoundA4:	incbin	"sound/sfx/SndA4 - Skid.bin"
0009D210 00                         		even
0009D210                            SoundA5:	include	"sound/sfx/LargeRingBox.asm"
0009D210                            SndD2_Header:
0009D210                            	smpsHeaderStartSong 3
0009D212 01                         	smpsHeaderTempoSFX  $01
0009D213 01                         	smpsHeaderChanSFX   $01
0009D214                            
0009D21A                            
0009D21A                            ; FM4 Data
0009D21A                            SndD2_FM4:
0009D21A EF00                       	smpsSetvoice        $00
0009D221 C645                       	dc.b	nA5, $45
0009D223 F2                         	smpsStop
0009D224                            
0009D224                            SndD2_Voices:
0009D224                            ;	Voice $00
0009D224                            ;	$04
0009D224                            ;	$27, $02, $07, $47, 	$1F, $1F, $1F, $1F, 	$07, $0A, $07, $0D
0009D224                            ;	$00, $0B, $00, $0B, 	$1F, $0F, $1F, $0F, 	$1F, $80, $23, $80
0009D224                            	smpsVcAlgorithm     $04
0009D224                            	smpsVcFeedback      $00
0009D224                            	smpsVcUnusedBits    $00
0009D224                            	smpsVcDetune        $04, $00, $00, $02
0009D224                            	smpsVcCoarseFreq    $07, $07, $02, $07
0009D224                            	smpsVcRateScale     $00, $00, $00, $00
0009D224                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
0009D224                            	smpsVcAmpMod        $00, $00, $00, $00
0009D224                            	smpsVcDecayRate1    $0D, $07, $0A, $07
0009D224                            	smpsVcDecayRate2    $0B, $00, $0B, $00
0009D224                            	smpsVcDecayLevel    $00, $01, $00, $01
0009D224                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
0009D23E 00                         		even
0009D23E                            SoundA6:	incbin	"sound/sfx/SndA6 - Hit Spikes.bin"
0009D26E                            		even
0009D26E                            SoundA7:	incbin	"sound/sfx/SndA7 - Push Block.bin"
0009D29E                            		even
0009D29E                            SoundA8:	incbin	"sound/sfx/SndA8 - SS Goal.bin"
0009D2D2                            		even
0009D2D2                            SoundA9:	incbin	"sound/sfx/SndA9 - SS Item.bin"
0009D2E4                            		even
0009D2E4                            SoundAA:	include	"sound/sfx/Splash.asm"
0009D2E4                            SndA2_Header:
0009D2E4                            	smpsHeaderStartSong 3
0009D2E6 01                         	smpsHeaderTempoSFX  $01
0009D2E7 02                         	smpsHeaderChanSFX   $02
0009D2E8                            
0009D2F4                            
0009D2F4                            ; FM3 Data
0009D2F4                            SndA2_FM3:
0009D2F4 EF00                       	smpsSetvoice        $00
0009D2FB 8106                       	dc.b	nC0, $06
0009D2FD                            
0009D2FD                            SndA2_Loop00:
0009D2FD 810E                       	dc.b	nC0, $0E
0009D2FF E60E                       	smpsAlterVol      $0E
0009D301 F700 04FF F8               	smpsLoop            $00, $04, SndA2_Loop00
0009D306 F2                         	smpsStop
0009D307                            
0009D307                            ; FM4 Data
0009D307                            SndA2_FM4:
0009D307 EF01                       	smpsSetvoice        $01
0009D309 A606 14                    	dc.b	nCs3, $06, $14
0009D30C F2                         	smpsStop
0009D30D                            
0009D30D                            SndA2_Voices:
0009D30D                            ;	Voice $00
0009D30D                            ;	$F9
0009D30D                            ;	$21, $30, $10, $32, 	$1C, $1F, $1F, $10, 	$05, $18, $09, $02
0009D30D                            ;	$0B, $1F, $10, $05, 	$1F, $2F, $4F, $2F, 	$0C, $06, $04, $80
0009D30D                            	smpsVcAlgorithm     $01
0009D30D                            	smpsVcFeedback      $07
0009D30D                            	smpsVcUnusedBits    $03
0009D30D                            	smpsVcDetune        $03, $01, $03, $02
0009D30D                            	smpsVcCoarseFreq    $02, $00, $00, $01
0009D30D                            	smpsVcRateScale     $00, $00, $00, $00
0009D30D                            	smpsVcAttackRate    $10, $1F, $1F, $1C
0009D30D                            	smpsVcAmpMod        $00, $00, $00, $00
0009D30D                            	smpsVcDecayRate1    $02, $09, $18, $05
0009D30D                            	smpsVcDecayRate2    $05, $10, $1F, $0B
0009D30D                            	smpsVcDecayLevel    $02, $04, $02, $01
0009D30D                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
0009D326                            
0009D326                            ;	Voice $01
0009D326                            ;	$00
0009D326                            ;	$00, $03, $02, $00, 	$D9, $DF, $1F, $1F, 	$12, $11, $14, $0F
0009D326                            ;	$0A, $00, $0A, $0D, 	$FF, $FF, $FF, $FF, 	$22, $07, $27, $80
0009D326                            	smpsVcAlgorithm     $00
0009D326                            	smpsVcFeedback      $00
0009D326                            	smpsVcUnusedBits    $00
0009D326                            	smpsVcDetune        $00, $00, $00, $00
0009D326                            	smpsVcCoarseFreq    $00, $02, $03, $00
0009D326                            	smpsVcRateScale     $00, $00, $03, $03
0009D326                            	smpsVcAttackRate    $1F, $1F, $1F, $19
0009D326                            	smpsVcAmpMod        $00, $00, $00, $00
0009D326                            	smpsVcDecayRate1    $0F, $14, $11, $12
0009D326                            	smpsVcDecayRate2    $0D, $0A, $00, $0A
0009D326                            	smpsVcDecayLevel    $0F, $0F, $0F, $0F
0009D326                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
0009D340 00                         		even
0009D340                            SoundAB:	include	"sound/sfx/FireShield.asm"
0009D340                            Sound_3E_Header:
0009D340                            	smpsHeaderStartSong 3
0009D342 01                         	smpsHeaderTempoSFX  $01
0009D343 01                         	smpsHeaderChanSFX   $01
0009D344                            
0009D34A                            
0009D34A                            ; FM5 Data
0009D34A                            Sound_3E_3F_40_41_FM5:
0009D34A EF00                       	smpsSetvoice        $00
0009D34C A305 E7A4 26               	dc.b	nBb2, $05, smpsNoAttack, nB2, $26
0009D351 F2                         	smpsStop
0009D352                            
0009D352                            Sound_3E_Voices:
0009D352                            ;	Voice $00
0009D352                            ;	$0C
0009D352                            ;	$01, $21, $31, $31, 	$1E, $0C, $0E, $1C, 	$0A, $00, $04, $00
0009D352                            ;	$08, $12, $08, $0C, 	$FF, $0F, $BF, $0F, 	$03, $80, $0D, $80
0009D352                            	smpsVcAlgorithm     $04
0009D352                            	smpsVcFeedback      $01
0009D352                            	smpsVcUnusedBits    $00
0009D352                            	smpsVcDetune        $03, $03, $02, $00
0009D352                            	smpsVcCoarseFreq    $01, $01, $01, $01
0009D352                            	smpsVcRateScale     $00, $00, $00, $00
0009D352                            	smpsVcAttackRate    $1C, $0E, $0C, $1E
0009D352                            	smpsVcAmpMod        $00, $00, $00, $00
0009D352                            	smpsVcDecayRate1    $00, $04, $00, $0A
0009D352                            	smpsVcDecayRate2    $0C, $08, $12, $08
0009D352                            	smpsVcDecayLevel    $00, $0B, $00, $0F
0009D352                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
0009D36B                            
0009D36B                            
0009D36C 00                         		even
0009D36C                            SoundAC:	incbin	"sound/sfx/SndAC - Hit Boss.bin"
0009D3A0                            		even
0009D3A0                            SoundAD:	incbin	"sound/sfx/SndAD - Get Bubble.bin"
0009D3D6                            		even
0009D3D6                            SoundAE:	include	"sound/sfx/Fireball.asm"
0009D3D6                            Sound_70_Header:
0009D3D6                            	smpsHeaderStartSong 3
0009D3D8 01                         	smpsHeaderTempoSFX  $01
0009D3D9 02                         	smpsHeaderChanSFX   $02
0009D3DA                            
0009D3E6                            
0009D3E6                            ; FM5 Data
0009D3E6                            Sound_70_FM5:
0009D3E6 EF00                       	smpsSetvoice        $00
0009D3E8 8001                       	dc.b	nRst, $01
0009D3EF 8306 8502                  	dc.b	nD0, $06, nE0, $02
0009D3F3 F2                         	smpsStop
0009D3F4                            
0009D3F4                            ; PSG3 Data
0009D3F4                            Sound_70_PSG3:
0009D3F4 F500                       	smpsPSGvoice        sTone_0D
0009D3F6 800B                       	dc.b	nRst, $0B
0009D3F8 F3E7                       	smpsPSGform         $E7
0009D3FA C501 E7                    	dc.b	(nMaxPSG1-$D)&$FF, $01, smpsNoAttack
0009D3FD                            
0009D3FD                            Sound_70_Loop00:
0009D3FD 02                         	dc.b	$02
0009D3FE EC01                       	smpsPSGAlterVol     $01
0009D400 E7                         	dc.b	smpsNoAttack
0009D401 F700 10FF F8               	smpsLoop            $00, $10, Sound_70_Loop00
0009D406 F2                         	smpsStop
0009D407                            
0009D407                            Sound_70_Voices:
0009D407                            ;	Voice $00
0009D407                            ;	$FA
0009D407                            ;	$02, $03, $00, $05, 	$12, $11, $0F, $13, 	$05, $18, $09, $02
0009D407                            ;	$06, $0F, $06, $02, 	$1F, $2F, $4F, $2F, 	$2F, $1A, $0E, $80
0009D407                            	smpsVcAlgorithm     $02
0009D407                            	smpsVcFeedback      $07
0009D407                            	smpsVcUnusedBits    $03
0009D407                            	smpsVcDetune        $00, $00, $00, $00
0009D407                            	smpsVcCoarseFreq    $05, $00, $03, $02
0009D407                            	smpsVcRateScale     $00, $00, $00, $00
0009D407                            	smpsVcAttackRate    $13, $0F, $11, $12
0009D407                            	smpsVcAmpMod        $00, $00, $00, $00
0009D407                            	smpsVcDecayRate1    $02, $09, $18, $05
0009D407                            	smpsVcDecayRate2    $02, $06, $0F, $06
0009D407                            	smpsVcDecayLevel    $02, $04, $02, $01
0009D407                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
0009D420                            
0009D420                            
0009D420                            		even
0009D420                            SoundAF:	incbin	"sound/sfx/SndAF - Shield.bin"
0009D44E                            		even
0009D44E                            SoundB0:	incbin	"sound/sfx/SndB0 - Saw.bin"
0009D480                            		even
0009D480                            SoundB1:	incbin	"sound/sfx/SndB1 - Electric.bin"
0009D4AC                            		even
0009D4AC                            SoundB2:	incbin	"sound/sfx/SndB2 - Drown Death.bin"
0009D4FC                            		even
0009D4FC                            SoundB3:	incbin	"sound/sfx/SndB3 - Flamethrower.bin"
0009D546                            		even
0009D546                            SoundB4:	incbin	"sound/sfx/SndB4 - Bumper.bin"
0009D5A2                            		even
0009D5A2                            SoundB5:	incbin	"sound/sfx/SndB5 - Ring.bin"
0009D5D0                            		even
0009D5D0                            SoundB6:	include	"sound/sfx/Spikes.asm"
0009D5D0                            SpikesSFX_Header:
0009D5D0                            	smpsHeaderStartSong 3
0009D5D2 01                         	smpsHeaderTempoSFX  $01
0009D5D3 02                         	smpsHeaderChanSFX   $02
0009D5D4                            
0009D5E0                            
0009D5E0                            ; FM6 Data
0009D5E0                            SndB7_FM3:
0009D5E0 EF01                       	smpsSetvoice        $01
0009D5E7 B105                       	dc.b	nC4, $05
0009D5E9 F1                         	smpsModOn
0009D5EA E10A                       	smpsAlterNote       $0A
0009D5EC E601                       	smpsAlterVol        $01
0009D5EE F2                         	smpsStop
0009D5EF                            
0009D5EF                            ; FM5 Data
0009D5EF                            SndB7_FM5:
0009D5EF 8005                       	dc.b	nRst, $05			 
0009D5F1 EF00                       	smpsSetvoice        $00
0009D5F3 DB01 8001 DB11             	dc.b	nFs7, $01, nRst, $01, nFs7, $11
0009D5F9 F2                         	smpsStop
0009D5FA                            
0009D5FA                            SndB7_Voices:
0009D5FA                            ;	Voice $00
0009D5FA                            ;	$34
0009D5FA                            ;	$09, $0F, $01, $D7, 	$1F, $1F, $1F, $1F, 	$0C, $11, $09, $0F
0009D5FA                            ;	$0A, $0E, $0D, $0E, 	$35, $1A, $55, $3A, 	$0C, $80, $0F, $80
0009D5FA                            	smpsVcAlgorithm     $04
0009D5FA                            	smpsVcFeedback      $06
0009D5FA                            	smpsVcUnusedBits    $00
0009D5FA                            	smpsVcDetune        $0D, $00, $00, $00
0009D5FA                            	smpsVcCoarseFreq    $07, $01, $0F, $09
0009D5FA                            	smpsVcRateScale     $00, $00, $00, $00
0009D5FA                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
0009D5FA                            	smpsVcAmpMod        $00, $00, $00, $00
0009D5FA                            	smpsVcDecayRate1    $0F, $09, $11, $0C
0009D5FA                            	smpsVcDecayRate2    $0E, $0D, $0E, $0A
0009D5FA                            	smpsVcDecayLevel    $03, $05, $01, $03
0009D5FA                            	smpsVcReleaseRate   $0A, $05, $0A, $05
0009D613                            
0009D613                            ;	Voice $01
0009D613                            ;	$FA
0009D613                            ;	$21, $3A, $19, $30, 	$1F, $1F, $1F, $1F, 	$05, $18, $09, $02
0009D613                            ;	$0B, $1F, $10, $05, 	$1F, $2F, $4F, $2F, 	$0E, $07, $04, $80
0009D613                            	smpsVcAlgorithm     $02
0009D613                            	smpsVcFeedback      $07
0009D613                            	smpsVcUnusedBits    $03
0009D613                            	smpsVcDetune        $03, $01, $03, $02
0009D613                            	smpsVcCoarseFreq    $00, $09, $0A, $01
0009D613                            	smpsVcRateScale     $00, $00, $00, $00
0009D613                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
0009D613                            	smpsVcAmpMod        $00, $00, $00, $00
0009D613                            	smpsVcDecayRate1    $02, $09, $18, $05
0009D613                            	smpsVcDecayRate2    $05, $10, $1F, $0B
0009D613                            	smpsVcDecayLevel    $02, $04, $02, $01
0009D613                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
0009D62C                            		even
0009D62C                            SoundB7:	incbin	"sound/sfx/SndB7 - Rumbling.bin"
0009D668                            		even
0009D668                            SoundB8:	include	"sound/sfx/ScoreTallying.asm"
0009D668                            SndBD_Header:
0009D668                            	smpsHeaderStartSong 3
0009D66A 01                         	smpsHeaderTempoSFX  $01
0009D66B 01                         	smpsHeaderChanSFX   $01
0009D66C                            
0009D672                            
0009D672                            ; FM6 Data
0009D672                            SndBD_FM3:
0009D672 EF00                       	smpsSetvoice        $00
0009D674                            
0009D674                            SndBD_Loop00:
0009D674 C009                       	dc.b	nEb5, $09
0009D676 F700 08FF FA               	smpsLoop            $00, $08, SndBD_Loop00
0009D67B F2                         	smpsStop
0009D67C                            
0009D67C                            SndBD_Voices:
0009D67C                            ;	Voice $00
0009D67C                            ;	$02
0009D67C                            ;	$02, $51, $20, $01, 	$1E, $1E, $1E, $1E, 	$10, $0A, $14, $13
0009D67C                            ;	$01, $00, $00, $00, 	$FF, $FF, $FF, $FF, 	$24, $0E, $1F, $80
0009D67C                            	smpsVcAlgorithm     $02
0009D67C                            	smpsVcFeedback      $00
0009D67C                            	smpsVcUnusedBits    $00
0009D67C                            	smpsVcDetune        $00, $02, $05, $00
0009D67C                            	smpsVcCoarseFreq    $01, $00, $01, $02
0009D67C                            	smpsVcRateScale     $00, $00, $00, $00
0009D67C                            	smpsVcAttackRate    $1E, $1E, $1E, $1E
0009D67C                            	smpsVcAmpMod        $00, $00, $00, $00
0009D67C                            	smpsVcDecayRate1    $13, $14, $0A, $10
0009D67C                            	smpsVcDecayRate2    $00, $00, $00, $01
0009D67C                            	smpsVcDecayLevel    $0F, $0F, $0F, $0F
0009D67C                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
0009D696 00                         		even
0009D696                            SoundB9:	include	"sound/sfx/BreakFloor.asm"
0009D696                            Sound_59_Header:
0009D696                            	smpsHeaderStartSong 3
0009D698 01                         	smpsHeaderTempoSFX  $01
0009D699 04                         	smpsHeaderChanSFX   $04
0009D69A                            
0009D6B2                            
0009D6B2                            ; FM3 Data
0009D6B2                            Sound_59_FM3:
0009D6B2 E040                       	smpsPan             panRight, $00
0009D6B4 8002                       	dc.b	nRst, $02
0009D6B6 F600 00                    	smpsJump            Sound_59_FM4
0009D6B9                            
0009D6B9                            ; FM5 Data
0009D6B9                            Sound_59_FM5:
0009D6B9 E080                       	smpsPan             panLeft, $00
0009D6BB 8001                       	dc.b	nRst, $01
0009D6BD                            
0009D6BD                            ; FM4 Data
0009D6BD                            Sound_59_FM4:
0009D6BD EF00                       	smpsSetvoice        $00
0009D6C4 8110                       	dc.b	nC0, $10
0009D6C6 F2                         	smpsStop
0009D6C7                            
0009D6C7                            ; PSG3 Data
0009D6C7                            Sound_59_PSG3:
0009D6CC F3E7                       	smpsPSGform         $E7
0009D6CE                            
0009D6CE                            Sound_59_Loop00:
0009D6CE B018 E7                    	dc.b	nB3, $18, smpsNoAttack
0009D6D1 EC03                       	smpsPSGAlterVol     $03
0009D6D3 F700 05FF F7               	smpsLoop            $00, $05, Sound_59_Loop00
0009D6D8 F2                         	smpsStop
0009D6D9                            
0009D6D9                            Sound_59_Voices:
0009D6D9                            ;	Voice $00
0009D6D9                            ;	$F9
0009D6D9                            ;	$21, $30, $10, $32, 	$1F, $1F, $1F, $1F, 	$05, $18, $09, $02
0009D6D9                            ;	$0B, $1F, $10, $05, 	$1F, $2F, $4F, $2F, 	$0E, $07, $04, $80
0009D6D9                            	smpsVcAlgorithm     $01
0009D6D9                            	smpsVcFeedback      $07
0009D6D9                            	smpsVcUnusedBits    $03
0009D6D9                            	smpsVcDetune        $03, $01, $03, $02
0009D6D9                            	smpsVcCoarseFreq    $02, $00, $00, $01
0009D6D9                            	smpsVcRateScale     $00, $00, $00, $00
0009D6D9                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
0009D6D9                            	smpsVcAmpMod        $00, $00, $00, $00
0009D6D9                            	smpsVcDecayRate1    $02, $09, $18, $05
0009D6D9                            	smpsVcDecayRate2    $05, $10, $1F, $0B
0009D6D9                            	smpsVcDecayLevel    $02, $04, $02, $01
0009D6D9                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
0009D6F2                            
0009D6F2                            
0009D6F2                            		even
0009D6F2                            SoundBA:	incbin	"sound/sfx/SndBA - SS Glass.bin"
0009D71A                            		even
0009D71A                            SoundBB:	incbin	"sound/sfx/SndBB - Door.bin"
0009D746                            		even
0009D746                            SoundBC:	include	"sound/sfx/DashRelease.asm"
0009D746                            Sound_B6_Header:
0009D746                            	smpsHeaderStartSong 3
0009D748 01                         	smpsHeaderTempoSFX  $01
0009D749 02                         	smpsHeaderChanSFX   $02
0009D74A                            
0009D756                            
0009D756                            ; FM5 Data
0009D756                            Sound_B6_FM5:
0009D756 EF00                       	smpsSetvoice        $00
0009D75D CD0F                       	dc.b	nE6, $0F
0009D75F F2                         	smpsStop
0009D760                            
0009D760                            ; PSG3 Data
0009D760                            Sound_B6_PSG3:
0009D760 F507                       	smpsPSGvoice        sTone_1D
0009D762 8006                       	dc.b	nRst, $06
0009D769 F3E7                       	smpsPSGform         $E7
0009D76B CD4F                       	dc.b	nE6, $4F
0009D76D F2                         	smpsStop
0009D76E                            
0009D76E                            Sound_B6_Voices:
0009D76E                            ;	Voice $00
0009D76E                            ;	$3D
0009D76E                            ;	$09, $03, $00, $00, 	$1F, $1F, $1F, $1F, 	$10, $0C, $0C, $0C
0009D76E                            ;	$0B, $1F, $10, $05, 	$1F, $2F, $4F, $2F, 	$09, $84, $92, $8E
0009D76E                            	smpsVcAlgorithm     $05
0009D76E                            	smpsVcFeedback      $07
0009D76E                            	smpsVcUnusedBits    $00
0009D76E                            	smpsVcDetune        $00, $00, $00, $00
0009D76E                            	smpsVcCoarseFreq    $00, $00, $03, $09
0009D76E                            	smpsVcRateScale     $00, $00, $00, $00
0009D76E                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
0009D76E                            	smpsVcAmpMod        $00, $00, $00, $00
0009D76E                            	smpsVcDecayRate1    $0C, $0C, $0C, $10
0009D76E                            	smpsVcDecayRate2    $05, $10, $1F, $0B
0009D76E                            	smpsVcDecayLevel    $02, $04, $02, $01
0009D76E                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
0009D787                            
0009D787                            
0009D788 00                         		even
0009D788                            SoundBD:	incbin	"sound/sfx/SndBD - ChainStomp.bin"
0009D7DC                            		even
0009D7DC                            SoundBE:	incbin	"sound/sfx/SndBE - Roll.bin"
0009D816                            		even
0009D816                            SoundBF:	incbin	"sound/sfx/SndBF - Get Continue.bin"
0009D888                            		even
0009D888                            SoundC0:	incbin	"sound/sfx/SndC0 - Basaran Flap.bin"
0009D8B6                            		even
0009D8B6                            SoundC1:	incbin	"sound/sfx/SndC1 - Break Item.bin"
0009D8F0                            		even
0009D8F0                            SoundC2:	include	"sound/sfx/DrowningWarning.asm"
0009D8F0                            SndC1_Header:
0009D8F0                            	smpsHeaderStartSong 3
0009D8F2 01                         	smpsHeaderTempoSFX  $01
0009D8F3 01                         	smpsHeaderChanSFX   $01
0009D8F4                            
0009D8FA                            
0009D8FA                            ; FM4 Data
0009D8FA                            SndC1_FM4:
0009D8FA EF00                       	smpsSetvoice        $00
0009D8FC D506 40                    	dc.b	nC7, $06, $40
0009D8FF F2                         	smpsStop
0009D900                            
0009D900                            SndC1_Voices:
0009D900                            ;	Voice $00
0009D900                            ;	$38
0009D900                            ;	$01, $00, $00, $00, 	$1F, $1F, $1F, $1F, 	$09, $09, $09, $0B
0009D900                            ;	$00, $00, $00, $00, 	$FF, $FF, $FF, $FF, 	$5C, $22, $27, $80
0009D900                            	smpsVcAlgorithm     $00
0009D900                            	smpsVcFeedback      $07
0009D900                            	smpsVcUnusedBits    $00
0009D900                            	smpsVcDetune        $00, $00, $00, $00
0009D900                            	smpsVcCoarseFreq    $00, $00, $00, $01
0009D900                            	smpsVcRateScale     $00, $00, $00, $00
0009D900                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
0009D900                            	smpsVcAmpMod        $00, $00, $00, $00
0009D900                            	smpsVcDecayRate1    $0B, $09, $09, $09
0009D900                            	smpsVcDecayRate2    $00, $00, $00, $00
0009D900                            	smpsVcDecayLevel    $0F, $0F, $0F, $0F
0009D900                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
0009D91A 00                         		even
0009D91A                            SoundC3:	incbin	"sound/sfx/SndC3 - Giant Ring.bin"
0009D994                            		even
0009D994                            SoundC4:	incbin	"sound/sfx/SndC4 - Bomb.bin"
0009D9BC                            		even
0009D9BC                            SoundC5:	include	"sound/sfx/Cash Register.asm"
0009D9BC                            Sound_B0_Header:
0009D9BC                            	smpsHeaderStartSong 3
0009D9BE 01                         	smpsHeaderTempoSFX  $01
0009D9BF 03                         	smpsHeaderChanSFX   $03
0009D9C0                            
0009D9D2                            
0009D9D2                            ; FM5 Data
0009D9D2                            Sound_B0_FM5:
0009D9D2 EF00                       	smpsSetvoice        $00
0009D9D4 8A08 8002 8A08             	dc.b	nA0, $08, nRst, $02, nA0, $08
0009D9DA F2                         	smpsStop
0009D9DB                            
0009D9DB                            ; FM4 Data
0009D9DB                            Sound_B0_FM4:
0009D9DB EF01                       	smpsSetvoice        $01
0009D9DD 8012 C655                  	dc.b	nRst, $12, nA5, $55
0009D9E1 F2                         	smpsStop
0009D9E2                            
0009D9E2                            ; FM3 Data
0009D9E2                            Sound_B0_FM3:
0009D9E2 EF02                       	smpsSetvoice        $02
0009D9E4 8002 C205 0405 04          	dc.b	nRst, $02, nF5, $05, $04, $05, $04
0009D9EB F2                         	smpsStop
0009D9EC                            
0009D9EC                            Sound_B0_Voices:
0009D9EC                            ;	Voice $00
0009D9EC                            ;	$3B
0009D9EC                            ;	$03, $02, $03, $06, 	$18, $1A, $1A, $96, 	$17, $0E, $0A, $10
0009D9EC                            ;	$00, $00, $00, $00, 	$FF, $FF, $FF, $FF, 	$00, $28, $39, $80
0009D9EC                            	smpsVcAlgorithm     $03
0009D9EC                            	smpsVcFeedback      $07
0009D9EC                            	smpsVcUnusedBits    $00
0009D9EC                            	smpsVcDetune        $00, $00, $00, $00
0009D9EC                            	smpsVcCoarseFreq    $06, $03, $02, $03
0009D9EC                            	smpsVcRateScale     $02, $00, $00, $00
0009D9EC                            	smpsVcAttackRate    $16, $1A, $1A, $18
0009D9EC                            	smpsVcAmpMod        $00, $00, $00, $00
0009D9EC                            	smpsVcDecayRate1    $10, $0A, $0E, $17
0009D9EC                            	smpsVcDecayRate2    $00, $00, $00, $00
0009D9EC                            	smpsVcDecayLevel    $0F, $0F, $0F, $0F
0009D9EC                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
0009DA05                            
0009DA05                            ;	Voice $01
0009DA05                            ;	$04
0009DA05                            ;	$37, $72, $77, $49, 	$1F, $1F, $1F, $1F, 	$07, $0A, $07, $0D
0009DA05                            ;	$00, $0B, $00, $0B, 	$1F, $0F, $1F, $0F, 	$23, $80, $23, $80
0009DA05                            	smpsVcAlgorithm     $04
0009DA05                            	smpsVcFeedback      $00
0009DA05                            	smpsVcUnusedBits    $00
0009DA05                            	smpsVcDetune        $04, $07, $07, $03
0009DA05                            	smpsVcCoarseFreq    $09, $07, $02, $07
0009DA05                            	smpsVcRateScale     $00, $00, $00, $00
0009DA05                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
0009DA05                            	smpsVcAmpMod        $00, $00, $00, $00
0009DA05                            	smpsVcDecayRate1    $0D, $07, $0A, $07
0009DA05                            	smpsVcDecayRate2    $0B, $00, $0B, $00
0009DA05                            	smpsVcDecayLevel    $00, $01, $00, $01
0009DA05                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
0009DA1E                            
0009DA1E                            ;	Voice $02
0009DA1E                            ;	$3C
0009DA1E                            ;	$0F, $00, $00, $00, 	$1F, $1A, $18, $1C, 	$17, $11, $1A, $0E
0009DA1E                            ;	$00, $0F, $14, $10, 	$1F, $9F, $9F, $2F, 	$07, $80, $26, $8C
0009DA1E                            	smpsVcAlgorithm     $04
0009DA1E                            	smpsVcFeedback      $07
0009DA1E                            	smpsVcUnusedBits    $00
0009DA1E                            	smpsVcDetune        $00, $00, $00, $00
0009DA1E                            	smpsVcCoarseFreq    $00, $00, $00, $0F
0009DA1E                            	smpsVcRateScale     $00, $00, $00, $00
0009DA1E                            	smpsVcAttackRate    $1C, $18, $1A, $1F
0009DA1E                            	smpsVcAmpMod        $00, $00, $00, $00
0009DA1E                            	smpsVcDecayRate1    $0E, $1A, $11, $17
0009DA1E                            	smpsVcDecayRate2    $10, $14, $0F, $00
0009DA1E                            	smpsVcDecayLevel    $02, $09, $09, $01
0009DA1E                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
0009DA37                            
0009DA37                            
0009DA38 00                         		even
0009DA38                            SoundC6:	incbin	"sound/sfx/SndC6 - Ring Loss.bin"
0009DA7A                            		even
0009DA7A                            SoundC7:	incbin	"sound/sfx/SndC7 - Chain Rising.bin"
0009DAA8                            		even
0009DAA8                            SoundC8:	incbin	"sound/sfx/SndC8 - Burning.bin"
0009DABA                            		even
0009DABA                            SoundC9:	incbin	"sound/sfx/SndC9 - Hidden Bonus.bin"
0009DAE8                            		even
0009DAE8                            SoundCA:	incbin	"sound/sfx/SndCA - Enter SS.bin"
0009DB16                            		even
0009DB16                            SoundCB:	incbin	"sound/sfx/SndCB - Wall Smash.bin"
0009DB62                            		even
0009DB62                            SoundCC:	include	"sound/sfx/Spring.asm"
0009DB62                            Spring_Header:
0009DB62                            	smpsHeaderStartSong 1
0009DB64 01                         	smpsHeaderTempoSFX  $01
0009DB65 01                         	smpsHeaderChanSFX   $01
0009DB66                            
0009DB6C                            
0009DB6C                            ; FM6 Data
0009DB6C                            Spring_FM6:
0009DB6C EF00                       	smpsSetvoice        $00
0009DB6E 8001                       	dc.b	nRst, $01
0009DB75 B006                       	dc.b	nB3, $06
0009DB77 F4                         	smpsModOff
0009DB78 EF01                       	smpsSetvoice        $01
0009DB7A                            
0009DB7A                            Spring_Loop00:
0009DB7A BD02                       	dc.b	nC5, $02
0009DB7C E601                       	smpsAlterVol      $01
0009DB7E E7                         	dc.b	smpsNoAttack
0009DB7F F700 19FF F7               	smpsLoop            $00, $19, Spring_Loop00
0009DB84 F2                         	smpsStop
0009DB85                            
0009DB85                            Spring_Voices:
0009DB85                            ;	Voice $00
0009DB85                            ;	$20
0009DB85                            ;	$36, $35, $30, $31, 	$DF, $DF, $9F, $9F, 	$07, $06, $09, $06
0009DB85                            ;	$07, $06, $06, $08, 	$2F, $1F, $1F, $FF, 	$16, $30, $13, $80
0009DB85                            	smpsVcAlgorithm     $00
0009DB85                            	smpsVcFeedback      $04
0009DB85                            	smpsVcUnusedBits    $00
0009DB85                            	smpsVcDetune        $03, $03, $03, $03
0009DB85                            	smpsVcCoarseFreq    $01, $00, $05, $06
0009DB85                            	smpsVcRateScale     $02, $02, $03, $03
0009DB85                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
0009DB85                            	smpsVcAmpMod        $00, $00, $00, $00
0009DB85                            	smpsVcDecayRate1    $06, $09, $06, $07
0009DB85                            	smpsVcDecayRate2    $08, $06, $06, $07
0009DB85                            	smpsVcDecayLevel    $0F, $01, $01, $02
0009DB85                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
0009DB9E                            
0009DB9E                            ;	Voice $01
0009DB9E                            ;	$20
0009DB9E                            ;	$31, $33, $30, $31, 	$9F, $9F, $9F, $9F, 	$07, $06, $09, $06
0009DB9E                            ;	$07, $06, $06, $08, 	$2F, $1F, $1F, $FF, 	$19, $23, $11, $80
0009DB9E                            	smpsVcAlgorithm     $00
0009DB9E                            	smpsVcFeedback      $04
0009DB9E                            	smpsVcUnusedBits    $00
0009DB9E                            	smpsVcDetune        $03, $03, $03, $03
0009DB9E                            	smpsVcCoarseFreq    $01, $00, $03, $01
0009DB9E                            	smpsVcRateScale     $02, $02, $02, $02
0009DB9E                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
0009DB9E                            	smpsVcAmpMod        $00, $00, $00, $00
0009DB9E                            	smpsVcDecayRate1    $06, $09, $06, $07
0009DB9E                            	smpsVcDecayRate2    $08, $06, $06, $07
0009DB9E                            	smpsVcDecayLevel    $0F, $01, $01, $02
0009DB9E                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
0009DBB8 00                         		even
0009DBB8                            SoundCD:	include	"sound/sfx/Beep.asm"
0009DBB8                            Snd99_Header:
0009DBB8                            	smpsHeaderStartSong 3
0009DBBA 01                         	smpsHeaderTempoSFX  $01
0009DBBB 01                         	smpsHeaderChanSFX   $01
0009DBBC                            
0009DBC2                            
0009DBC2                            ; FM4 Data
0009DBC2                            Snd99_FM4:
0009DBC2 EF00                       	smpsSetvoice        $00
0009DBC4 B502                       	dc.b	nE4, $02
0009DBC6 F2                         	smpsStop
0009DBC7                            
0009DBC7                            Snd99_Voices:
0009DBC7                            ;	Voice $00
0009DBC7                            ;	$07
0009DBC7                            ;	$0A, $0A, $0A, $0A, 	$1F, $1F, $1F, $1F, 	$00, $00, $00, $00
0009DBC7                            ;	$00, $00, $00, $00, 	$0F, $0F, $0F, $0F, 	$88, $88, $88, $88
0009DBC7                            	smpsVcAlgorithm     $07
0009DBC7                            	smpsVcFeedback      $00
0009DBC7                            	smpsVcUnusedBits    $00
0009DBC7                            	smpsVcDetune        $00, $00, $00, $00
0009DBC7                            	smpsVcCoarseFreq    $0A, $0A, $0A, $0A
0009DBC7                            	smpsVcRateScale     $00, $00, $00, $00
0009DBC7                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
0009DBC7                            	smpsVcAmpMod        $00, $00, $00, $00
0009DBC7                            	smpsVcDecayRate1    $00, $00, $00, $00
0009DBC7                            	smpsVcDecayRate2    $00, $00, $00, $00
0009DBC7                            	smpsVcDecayLevel    $00, $00, $00, $00
0009DBC7                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
0009DBE0                            		even
0009DBE0                            SoundCE:	incbin	"sound/sfx/SndCE - Ring Left Speaker.bin"
0009DC0E                            		even
0009DC0E                            SoundCF:	include	"sound/sfx/Signpost.asm"
0009DC0E                            SignpostCD_Header:
0009DC0E                            	smpsHeaderStartSong 3
0009DC10 01                         	smpsHeaderTempoSFX  $01
0009DC11 02                         	smpsHeaderChanSFX   $02
0009DC12                            
0009DC1E                            
0009DC1E                            ; FM5 Data
0009DC1E                            Snd9D_FM5:
0009DC1E 8004                       	dc.b	nRst, $04
0009DC20                            
0009DC20                            ; FM4 Data
0009DC20                            Snd9D_FM4:
0009DC20 EF00                       	smpsSetvoice        $00
0009DC22                            
0009DC22                            Snd9D_Loop00:
0009DC22 B405                       	dc.b	nEb4, $05
0009DC24 E604                       	smpsFMAlterVol      $04
0009DC26 F700 08FF F8               	smpsLoop            $00, $08, Snd9D_Loop00
0009DC2B F2                         	smpsStop
0009DC2C                            
0009DC2C                            Snd9D_Voices:
0009DC2C                            ;	Voice $00
0009DC2C                            ;	$F4
0009DC2C                            ;	$06, $04, $0F, $0E, 	$1F, $1F, $1F, $1F, 	$00, $00, $0B, $0B
0009DC2C                            ;	$00, $00, $05, $08, 	$0F, $0F, $FF, $FF, 	$0C, $85, $00, $80
0009DC2C                            	smpsVcAlgorithm     $04
0009DC2C                            	smpsVcFeedback      $06
0009DC2C                            	smpsVcUnusedBits    $03
0009DC2C                            	smpsVcDetune        $00, $00, $00, $00
0009DC2C                            	smpsVcCoarseFreq    $0E, $0F, $04, $06
0009DC2C                            	smpsVcRateScale     $00, $00, $00, $00
0009DC2C                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
0009DC2C                            	smpsVcAmpMod        $00, $00, $00, $00
0009DC2C                            	smpsVcDecayRate1    $0B, $0B, $00, $00
0009DC2C                            	smpsVcDecayRate2    $08, $05, $00, $00
0009DC2C                            	smpsVcDecayLevel    $0F, $0F, $00, $00
0009DC2C                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
0009DC46 00                         		even
0009DC46                            SoundD0:	incbin	"sound/sfx/SndD0 - Waterfall.bin"
0009DC80                            		even
0009DC80                            SoundD1:	include	"sound/sfx/Lightning Shield.asm"
0009DC80                            Sound_41_Header:
0009DC80                            	smpsHeaderStartSong 3
0009DC82 01                         	smpsHeaderTempoSFX  $01
0009DC83 01                         	smpsHeaderChanSFX   $01
0009DC84                            
0009DC8A                            	
0009DC8A                            Sound41_FM5:
0009DC8A EF00                       	smpsSetvoice        $00
0009DC8C A305 E7A4 26               	dc.b	nBb2, $05, smpsNoAttack, nB2, $26
0009DC91 F2                         	smpsStop
0009DC92                            
0009DC92                            Sound_41_Voices:
0009DC92                            ;	Voice $00
0009DC92                            ;	$36
0009DC92                            ;	$07, $10, $0E, $0C, 	$1F, $1F, $1F, $1F, 	$00, $00, $00, $00
0009DC92                            ;	$00, $0D, $0D, $0E, 	$0F, $0F, $0F, $0F, 	$17, $80, $80, $80
0009DC92                            	smpsVcAlgorithm     $06
0009DC92                            	smpsVcFeedback      $06
0009DC92                            	smpsVcUnusedBits    $00
0009DC92                            	smpsVcDetune        $00, $00, $01, $00
0009DC92                            	smpsVcCoarseFreq    $0C, $0E, $00, $07
0009DC92                            	smpsVcRateScale     $00, $00, $00, $00
0009DC92                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
0009DC92                            	smpsVcAmpMod        $00, $00, $00, $00
0009DC92                            	smpsVcDecayRate1    $00, $00, $00, $00
0009DC92                            	smpsVcDecayRate2    $0E, $0D, $0D, $00
0009DC92                            	smpsVcDecayLevel    $00, $00, $00, $00
0009DC92                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
0009DCAB                            
0009DCAB                            
0009DCAC 00                         		even
0009DCAC                            SoundD2:	include	"sound/sfx/CD_Charge.asm"
0009DCAC                            Snd9B_Header:
0009DCAC                            	smpsHeaderStartSong 3
0009DCAE 01                         	smpsHeaderTempoSFX  $01
0009DCAF 01                         	smpsHeaderChanSFX   $01
0009DCB0                            
0009DCB6                            
0009DCB6                            ; FM5 Data
0009DCB6                            Snd9B_FM5:
0009DCB6 EF00                       	smpsSetvoice        $00
0009DCB8 8001                       	dc.b	nRst, $01
0009DCBF CA25                       	dc.b	nCs6, $25
0009DCC1 F4                         	smpsModOff
0009DCC2                            
0009DCC2                            Snd9B_Loop00:
0009DCC2 E7                         	dc.b	smpsNoAttack
0009DCC3 E601                       	smpsFMAlterVol      $01
0009DCC5 D102                       	dc.b	nAb6, $02
0009DCC7 F700 2AFF F7               	smpsLoop            $00, $2A, Snd9B_Loop00
0009DCCC F2                         	smpsStop
0009DCCD                            
0009DCCD                            Snd9B_Voices:
0009DCCD                            ;	Voice $00
0009DCCD                            ;	$3C
0009DCCD                            ;	$00, $44, $02, $02, 	$1F, $1F, $1F, $15, 	$00, $1F, $00, $00
0009DCCD                            ;	$00, $00, $00, $00, 	$0F, $0F, $0F, $0F, 	$0D, $80, $28, $80
0009DCCD                            	smpsVcAlgorithm     $04
0009DCCD                            	smpsVcFeedback      $07
0009DCCD                            	smpsVcUnusedBits    $00
0009DCCD                            	smpsVcDetune        $00, $00, $04, $00
0009DCCD                            	smpsVcCoarseFreq    $02, $02, $04, $00
0009DCCD                            	smpsVcRateScale     $00, $00, $00, $00
0009DCCD                            	smpsVcAttackRate    $15, $1F, $1F, $1F
0009DCCD                            	smpsVcAmpMod        $00, $00, $00, $00
0009DCCD                            	smpsVcDecayRate1    $00, $00, $1F, $00
0009DCCD                            	smpsVcDecayRate2    $00, $00, $00, $00
0009DCCD                            	smpsVcDecayLevel    $00, $00, $00, $00
0009DCCD                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
0009DCE6                            
0009DCE6                            
0009DCE6                            		even		
0009DCE6                            SoundD3:	incbin	"sound/sfx/Peelout_Release.bin"
0009DD7E                            		even
0009DD7E                            SoundD4:	incbin	"sound/sfx/Peelout_Stop.bin"
0009DD8A                            		even				
0009DD8A                            SoundD5:	incbin	"sound/sfx/Spindash.bin"
0009DDC6                            		even			
0009DDC6                            		; Don't let Sega sample cross $8000-byte boundary
0009DDC6                            		; (DAC driver doesn't switch banks automatically)
000A0000                            SegaPCM:	incbin	"sound/dac/sega.pcm"
000A6978                            SegaPCM_End
000A6978                            		even
000A6978                            
000A6978                            
000A6978                            
000A6978                            
000A6978                            			include "_inc\Sonic 2 Options.asm"
000A6978                            ; ---------------------------------------------------------------------------
000A6978                            ; Common menu screen subroutine for transferring text to RAM
000A6978                            
000A6978                            ; ARGUMENTS:
000A6978                            ; d0 = starting art tile
000A6978                            ; a1 = data source
000A6978                            ; a2 = destination
000A6978                            ;
000A6978                            ; ---------------------------------------------------------------------------
000A6978                            MenuScreen:
000A6978 103C 0000                  		move.b	#bgm_Fade,d0
000A697C 4EB8 12A0                  		jsr	PlaySound_Special ; fade out music
000A6980 4EB8 21D2                  		jsr	PaletteFadeOut
000A6984 46FC 2700                  		move	#$2700,sr
000A6988 3038 F60C                  		move.w	($FFFFF60C).w,d0
000A698C 0200 00BF                  		andi.b	#-$41,d0
000A6990 33C0 00C0 0004             		move.w	d0,($00C00004).l
000A6996 4EB8 11D0                  		jsr	ClearScreen
000A699A 4DF9 00C0 0004             		lea		($00C00004).l,a6
000A69A0 3CBC 8004                  		move.w	#$8004,(a6)
000A69A4 3CBC 8230                  		move.w	#$8230,(a6)
000A69A8 3CBC 8407                  		move.w	#$8407,(a6)
000A69AC 3CBC 8230                  		move.w	#$8230,(a6)
000A69B0 3CBC 8700                  		move.w	#$8700,(a6)
000A69B4 3CBC 8C81                  		move.w	#$8C81,(a6)
000A69B8 3CBC 9001                  		move.w	#$9001,(a6)
000A69BC 43F8 AC00                  		lea	($FFFFAC00).w,a1
000A69C0 7000                       		moveq	#0,d0
000A69C2 323C 00FF                  		move.w	#$FF,d1
000A69C6                            
000A69C6                            MenuScreen_ClrObjRam:
000A69C6 22C0                       		move.l	d0,(a1)+
000A69C8 51C9 FFFC                  		dbf		d1,MenuScreen_ClrObjRam
000A69CC                            
000A69CC                            ; ===========================================================================
000A69CC                            
000A69CC 31FC C800 C8FC             		ResetDMAQueue
000A69D2                            
000A69DC 41F9 0000 0000             		lea		(Nem_MenuFont).l,a0
000A69E2 4EB8 134E                  		jsr	NemDec
000A69F0 41F9 0000 0000             		lea		(Nem_MenuBox).l,a0
000A69F6 4EB8 134E                  		jsr	NemDec
000A69FA 43F9 00FF 0000             		lea	($FF0000).l,a1
000A6A00 41F9 0000 0000             		lea	(Eni_MenuBg).l,a0 ; load SONIC/MILES mappings
000A6A06 303C 6000                  		move.w	#$6000,d0
000A6A0A 4EB8 18D8                  		jsr	EniDec
000A6A0E                            
000A6A0E 43F9 00FF 0000 203C 6000+  		copyTilemap	$FF0000,$E000,$27,$1B
000A6A22                            
000A6A22 6100 0000                  		bsr.w	MenuScreen_Options	; if yes, branch
000A6A26                            
000A6A26                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
000A6A26                            
000A6A26                            ; sub_8FBE:
000A6A26                            MenuScreenTextToRAM:
000A6A26 7200                       		moveq	#0,d1
000A6A28 1219                       		move.b	(a1)+,d1
000A6A2A                            
000A6A2A                            MenuScreenTextToRAM_Cont:
000A6A2A 1019                       		move.b	(a1)+,d0
000A6A2C 34C0                       		move.w	d0,(a2)+
000A6A2E 51C9 FFFA                  		dbf	d1,MenuScreenTextToRAM_Cont
000A6A32 4E75                       		rts
000A6A34                            ; End of function MenuScreenTextToRAM
000A6A34                            
000A6A34                            ; ===========================================================================
000A6A34                            ; loc_8FCC:
000A6A34                            MenuScreen_Options:
000A6A34 43F9 00FF 0000             		lea	(v_256x256).l,a1
000A6A3A 41F9 0000 0000             		lea	(Eni_MenuBox).l,a0
000A6A40 303C 0070                  		move.w	#$70,d0
000A6A44 4EB8 18D8                  		jsr	EniDec
000A6A48 43F9 00FF 0160             		lea	(v_256x256+$160).l,a1
000A6A4E 41F9 0000 0000             		lea	(Eni_MenuBox).l,a0
000A6A54 303C 2070                  		move.w	#$2070,d0
000A6A58 4EB8 18D8                  		jsr	EniDec
000A6A5C 4238 FF8C                  		clr.b	(Options_menu_box).w
000A6A60 6100 0000                  		bsr.w	OptionScreen_DrawSelected
000A6A64 5238 FF8C                  		addq.b	#1,(Options_menu_box).w
000A6A68 6100 0000                  		bsr.w	OptionScreen_DrawUnselected
000A6A6C 5238 FF8C                  		addq.b	#1,(Options_menu_box).w
000A6A70 6100 0000                  		bsr.w	OptionScreen_DrawUnselected
000A6A74 4238 FF8C                  		clr.b	(Options_menu_box).w
000A6A78 4238 F711                  		clr.b	($FFFFF711).w		
000A6A7C 4278 F7F0                  		clr.w	($FFFFF7F0).w					 
000A6A80                            ;-------------------------------------------------------------------------------
000A6A80 4278 F7B8                  		clr.w	($FFFFF7B8).w
000A6A84 45F9 0000 0000             		lea	(Sonic_Miles_Spr).l,a2 ; sonic/miles background load
000A6A8A 6100 0000                  		bsr.w	Dynamic_Menu
000A6A8E                            ;-------------------------------------------------------------------------------
000A6A8E 7014                       		moveq	#palid_Options,d0
000A6A90 4EB8 247C                  		jsr		PalLoad1
000A6A94 103C 0098                  		move.b	#$98,d0
000A6A98 4EB8 12A0                  		jsr	PlaySound_Special ; play options music
000A6A9C 42B8 F700                  		clr.l	(v_screenposx).w
000A6AA0 42B8 F704                  		clr.l	(v_screenposy).w
000A6AA4 11FC 0016 F62A             		move.b	#$16,(v_vbla_routine).w
000A6AAA 4EB8 3A50                  		jsr	WaitForVBla
000A6AAE 3038 F60C                  		move.w	(v_vdp_buffer1).w,d0
000A6AB2 0000 0040                  		ori.b	#$40,d0
000A6AB6 33C0 00C0 0004             		move.w	d0,(vdp_control_port).l
000A6ABC 4EB8 212C                  		jsr	PaletteFadeIn
000A6AC0                            ; loc_9060:
000A6AC0                            OptionScreen_Main:
000A6AC0 11FC 0016 F62A             		move.b	#$16,(v_vbla_routine).w
000A6AC6 4EB8 3A50                  		jsr	WaitForVBla				
000A6ACA 46FC 2700                  		move	#$2700,sr
000A6ACE 6100 0000                  		bsr.w	OptionScreen_DrawUnselected
000A6AD2 6100 0000                  		bsr.w	OptionScreen_Controls			
000A6AD6 6100 0000                  		bsr.w	OptionScreen_DrawSelected
000A6ADA 46FC 2300                  		move	#$2300,sr
000A6ADE 45F9 0000 0000             		lea	(Sonic_Miles_Spr).l,a2 ; sonic/miles background load	
000A6AE4 6100 0000                  		bsr.w	Dynamic_Menu		
000A6AE8 0238 0080 F605             		andi.b	#btnStart,(v_jpadpress1).w ; check if Start is pressed
000A6AEE                            
000A6AEE 6600                       		bne.s	OptionScreen_Select		; if yes, branch
000A6AF0 60CE                       		bra.s	OptionScreen_Main
000A6AF2                            ; ===========================================================================
000A6AF2                            ; loc_909A:
000A6AF2                            OptionScreen_Select:
000A6AF2 1038 FF8C                  		move.b	(Options_menu_box).w,d0
000A6AF6 6600                       		bne.s	OptionScreen_Select_Not1P
000A6AF8 7000                       		moveq	#0,d0
000A6AFA 11FC 0000 F600             		move.b	#id_Title,(v_gamemode).w ; => SegaScreen
000A6B00 4E75                       		rts
000A6B02                            ; ===========================================================================
000A6B02                            ; loc_90B6:
000A6B02                            OptionScreen_Select_Not1P:
000A6B02 5300                       		subq.b	#1,d0
000A6B04 6600                       		bne.s	OptionScreen_Select_Other
000A6B06 60B8                       		bra.s	OptionScreen_Main
000A6B08                            ; ===========================================================================
000A6B08                            ; loc_90D8:
000A6B08                            OptionScreen_Select_Other:
000A6B08 11FC 0000 F600             		move.b	#id_Sega,(v_gamemode).w ; => SegaScreen
000A6B0E 4E75                       		rts
000A6B10                            
000A6B10                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
000A6B10                            
000A6B10                            ;sub_90E0:
000A6B10                            OptionScreen_Controls:
000A6B10 7400                       		moveq	#0,d2
000A6B12 1438 FF8C                  		move.b	(Options_menu_box).w,d2			
000A6B16 1038 F605                  		move.b	(v_jpadpress1).w,d0		; Ctrl_1_Press
000A6B1A 0800 0000                  		btst	#0,d0			; is up pressed?
000A6B1E 6700                       		beq.s	Option_Controls_Down	; if not, branch
000A6B20 5302                       		subq.b	#1,d2					; move up 1 selection
000A6B22 6400                       		bcc.s	Option_Controls_Down
000A6B24 143C 0002                  		move.b	#2,d2
000A6B28                            
000A6B28                            Option_Controls_Down:
000A6B28 0800 0001                  		btst	#1,d0			; is down pressed?
000A6B2C 6700                       		beq.s	Option_Controls_Refresh	; if not, branch
000A6B2E 5202                       		addq.b	#1,d2					; move down 1 selection
000A6B30 0C02 0003                  		cmpi.b	#3,d2
000A6B34 6500                       		blo.s	Option_Controls_Refresh
000A6B36 7400                       		moveq	#0,d2
000A6B38                            
000A6B38                            Option_Controls_Refresh:
000A6B38 11C2 FF8C                  		move.b	d2,(Options_menu_box).w
000A6B3C E54A                       		lsl.w	#2,d2
000A6B3E 163B 2000                  		move.b	OptionScreen_Choices(pc,d2.w),d3 ; number of choices for the option
000A6B42 227B 2000                  		movea.l	OptionScreen_Choices(pc,d2.w),a1 ; location where the choice is stored (in RAM)
000A6B46 3411                       		move.w	(a1),d2
000A6B48 0800 0002                  		btst	#2,d0				; is left pressed?
000A6B4C 6700                       		beq.s	Option_Controls_Right		; if not, branch
000A6B4E 5302                       		subq.b	#1,d2						; subtract 1 from sound test
000A6B50 6400                       		bcc.s	Option_Controls_Right
000A6B52 1403                       		move.b	d3,d2
000A6B54                            
000A6B54                            Option_Controls_Right:
000A6B54 0800 0003                  		btst	#3,d0			; is right pressed?
000A6B58 6700                       		beq.s	Option_Controls_Button_A	; if not, branch
000A6B5A 5202                       		addq.b	#1,d2						; add 1 to sound test
000A6B5C B403                       		cmp.b	d3,d2
000A6B5E 6300                       		bls.s	Option_Controls_Button_A
000A6B60 7400                       		moveq	#0,d2
000A6B62                            
000A6B62                            Option_Controls_Button_A:
000A6B62 0800 0006                  		btst	#6,d0				; is button A pressed?
000A6B66 6700                       		beq.s	Option_Controls_Refresh2	; if not, branch
000A6B68 0602 0010                  		addi.b	#$10,d2						; add $10 to sound test
000A6B6C B403                       		cmp.b	d3,d2
000A6B6E 6300                       		bls.s	Option_Controls_Refresh2
000A6B70 7400                       		moveq	#0,d2
000A6B72                            
000A6B72                            Option_Controls_Refresh2:
000A6B72 3282                       		move.w	d2,(a1)
000A6B74                            
000A6B74                            Option_Controls_NoMove:
000A6B74 4E75                       		rts
000A6B76                            ; End of function OptionScreen_Controls
000A6B76                            
000A6B76                            ; ===========================================================================
000A6B76                            ; word_917A:
000A6B76                            OptionScreen_Choices:
000A6B76 09FF FFBE                  		dc.l ($A-1)<<24|($FFFFBE&$FFFFFF)
000A6B7A 01FF FF8A                  		dc.l (2-1)<<24|($FFFF8A&$FFFFFF)
000A6B7E 01FF FF84                  		dc.l (2-1)<<24|($FFFF84&$FFFFFF)
000A6B82                            		even
000A6B82                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
000A6B82                            
000A6B82                            
000A6B82                            OptionScreen_DrawSelected:
000A6B82 6100 0000                  		bsr.w	loc_9268
000A6B86 7200                       		moveq	#0,d1
000A6B88 1238 FF8C                  		move.b	(Options_menu_box).w,d1
000A6B8C E749                       		lsl.w	#3,d1
000A6B8E 47F9 0000 0000             		lea	(OptScrBoxData).l,a3
000A6B94 47F3 1000                  		lea	(a3,d1.w),a3
000A6B98 303C 6000                  		move.w	#$6000,d0
000A6B9C 45F9 FFFF 0030             		lea	($FFFF0030).l,a2
000A6BA2 225B                       		movea.l	(a3)+,a1
000A6BA4 6100 FE80                  		bsr.w	MenuScreenTextToRAM
000A6BA8 45F9 FFFF 00B6             		lea	($FFFF00B6).l,a2
000A6BAE 7200                       		moveq	#0,d1
000A6BB0 0C38 0002 FF8C             		cmpi.b	#2,(Options_menu_box).w
000A6BB6 6700                       		beq.s	loc_9186
000A6BB8 1238 FF8C                  		move.b	(Options_menu_box).w,d1
000A6BBC E549                       		lsl.w	#2,d1
000A6BBE 43FA FFB6                  		lea	OptionScreen_Choices(pc),a1
000A6BC2 2271 1000                  		movea.l	(a1,d1.w),a1
000A6BC6 3211                       		move.w	(a1),d1
000A6BC8 E549                       		lsl.w	#2,d1
000A6BCA                            
000A6BCA                            loc_9186:		
000A6BCA 2274 1000                  		movea.l	(a4,d1.w),a1
000A6BCE 6100 FE56                  		bsr.w	MenuScreenTextToRAM
000A6BD2                            		;cmpi.b	#2,(Options_menu_box).w
000A6BD2                            		;bne.s	loc2_9186
000A6BD2                            		;lea	($FFFF00C2).l,a2
000A6BD2                            		;bsr.w	loc_9296
000A6BD2                            
000A6BD2                            loc2_9186:		
000A6BD2 43F9 00FF 0000             		lea	(v_256x256).l,a1
000A6BD8 201B                       		move.l	(a3)+,d0
000A6BDA 7215                       		moveq	#$15,d1
000A6BDC 7407                       		moveq	#7,d2
000A6BDE 4EF8 1324                  		jmp	TilemapToVRAM
000A6BE2                            ; ===========================================================================
000A6BE2                            
000A6BE2                            OptionScreen_DrawUnselected:
000A6BE2 6100 0000                  		bsr.w	loc_9268
000A6BE6 7200                       		moveq	#0,d1
000A6BE8 1238 FF8C                  		move.b	(Options_menu_box).w,d1
000A6BEC E749                       		lsl.w	#3,d1
000A6BEE 47F9 0000 0000             		lea	(OptScrBoxData).l,a3
000A6BF4 47F3 1000                  		lea	(a3,d1.w),a3
000A6BF8 7000                       		moveq	#0,d0
000A6BFA 45F9 FFFF 0190             		lea	($FFFF0190).l,a2
000A6C00 225B                       		movea.l	(a3)+,a1
000A6C02 6100 FE22                  		bsr.w	MenuScreenTextToRAM
000A6C06 45F9 FFFF 0216             		lea	($FFFF0216).l,a2
000A6C0C 7200                       		moveq	#0,d1
000A6C0E 0C38 0002 FF8C             		cmpi.b	#2,(Options_menu_box).w
000A6C14 6700                       		beq.s	loc2_91F8
000A6C16 1238 FF8C                  		move.b	(Options_menu_box).w,d1
000A6C1A E549                       		lsl.w	#2,d1
000A6C1C 43FA FF58                  		lea	OptionScreen_Choices(pc),a1
000A6C20 2271 1000                  		movea.l	(a1,d1.w),a1
000A6C24 3211                       		move.w	(a1),d1
000A6C26 E549                       		lsl.w	#2,d1
000A6C28                            
000A6C28                            loc2_91F8		
000A6C28 2274 1000                  		movea.l	(a4,d1.w),a1
000A6C2C 6100 FDF8                  		bsr.w	MenuScreenTextToRAM
000A6C30                            		;cmpi.b	#2,(Options_menu_box).w
000A6C30                            		;bne.s	loc3_91F8
000A6C30                            		;lea	($FFFF0222).l,a2
000A6C30                            		;bsr.w	loc_9296
000A6C30                            
000A6C30                            loc3_91F8		
000A6C30 43F9 FFFF 0160             		lea	($FFFF0160).l,a1
000A6C36 201B                       		move.l	(a3)+,d0
000A6C38 7215                       		moveq	#$15,d1
000A6C3A 7407                       		moveq	#7,d2
000A6C3C 4EF8 1324                  		jmp	TilemapToVRAM
000A6C40                            ; ===========================================================================
000A6C40                            
000A6C40                            loc_9268:
000A6C40 49F9 0000 0000             		lea	(off_92D2).l,a4
000A6C46 4A38 FFF8                  		tst.b	(v_megadrive).w
000A6C4A 6A00                       		bpl.s	loc2_9268
000A6C4C 49F9 0000 0000             		lea	(off_92DE).l,a4
000A6C52                            
000A6C52                            loc2_9268:
000A6C52 4A38 FF8C                  		tst.b	(Options_menu_box).w
000A6C56 6700                       		beq.s	loc3_9268
000A6C58 49F9 0000 0000             		lea	(off_92EA).l,a4
000A6C5E                            
000A6C5E                            loc3_9268:
000A6C5E 0C38 0002 FF8C             		cmpi.b	#2,(Options_menu_box).w
000A6C64 6600                       		bne.s	loc4_9268		; rts
000A6C66 49F9 0000 0000             		lea	(off_92F2).l,a4
000A6C6C                            
000A6C6C                            loc4_9268:
000A6C6C 4E75                       		rts
000A6C6E                            ; ===========================================================================
000A6C6E                            
000A6C6E                            loc_9296:
000A6C6E 4E75                       		rts
000A6C70                            
000A6C70                            Dynamic_Menu:
000A6C70 5338 F7B9                                  subq.b  #$01, ($FFFFF7B9).w          ; remove 1 from frame count
000A6C74 6A00                                       bpl.s   Exit_Dinamic_Menu            ; exit menu
000A6C76 11FC 0007 F7B9                             move.b  #$07, ($FFFFF7B9).w          ; Set time for frame display
000A6C7C 1038 F7B8                                  move.b  ($FFFFF7B8).w, D0            ; Current Frame D0
000A6C80 5238 F7B8                                  addq.b  #$01, ($FFFFF7B8).w          ; Advance frame $FFFFFFB8
000A6C84 0240 001F                                  andi.w  #$001F, D0
000A6C88 103B 0000                                  move.b  Sonic_Miles_Frame_Select(PC, D0), D0  ; Id frame D0
000A6C8C                                          ; muls.w  #$0140, D0                   ; as above
000A6C8C ED48                                       lsl.w   #$06, D0
000A6C8E 4DF9 00C0 0000                             lea     ($00C00000), A6
000A6C94 2D7C 4020 0000 0004                        move.l  #$40200000, $0004(A6)
000A6C9C 43F9 0000 0000                             lea     (Sonic_Miles_Spr), A1
000A6CA2 43F1 0000                                  lea     $00(A1, D0), A1
000A6CA6 303C 0009                                  move.w  #$0009, D0                   ; load tiles
000A6CAA                                            
000A6CAA                            Menu_Loop_Load_Tiles:
000A6CAA                            
000A6CAA 2C99                                       move.l  (A1)+, (A6)
000A6CAC 2C99                                       move.l  (A1)+, (A6)     
000A6CAE 2C99                                       move.l  (A1)+, (A6)     
000A6CB0 2C99                                       move.l  (A1)+, (A6)     
000A6CB2 2C99                                       move.l  (A1)+, (A6)     
000A6CB4 2C99                                       move.l  (A1)+, (A6)
000A6CB6 2C99                                       move.l  (A1)+, (A6)
000A6CB8 2C99                                       move.l  (A1)+, (A6)
000A6CBA 51C8 FFEE                                  dbra    D0, Menu_Loop_Load_Tiles
000A6CBE                            Exit_Dinamic_Menu:                
000A6CBE                                           
000A6CBE 4E75                                       rts      
000A6CC0                                                    
000A6CC0                            Sonic_Miles_Frame_Select:     
000A6CC0 0000 0000 0000 0000 0000+                  dc.b    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
000A6CCE 050A                                       dc.b    $05, $0A
000A6CD0 0F0F 0F0F 0F0F 0F0F 0F0F+                  dc.b    $0F, $0F, $0F, $0F, $0F, $0F, $0F, $0F, $0F, $0F, $0F, $0F, $0F, $0F
000A6CDE 0A05                                       dc.b    $0A, $05   
000A6CE0                            ; ===========================================================================
000A6CE0                            ; off_92BA:
000A6CE0                            OptScrBoxData:
000A6CE0                            
000A6CE0 0000 0000                  		dc.l TextOptScr_PlayerSelect
000A6CE4 4192                       		dc.w $4192
000A6CE6 0003                       		dc.w 3
000A6CE8 0000 0000                  		dc.l TextOptScr_LivesSystem
000A6CEC 4592                       		dc.w $4592
000A6CEE 0003                       		dc.w 3
000A6CF0 0000 0000                  		dc.l TextOptScr_SoundTest
000A6CF4 4992                       		dc.w $4992
000A6CF6 0003                       		dc.w 3
000A6CF8                            
000A6CF8                            off_92D2:
000A6CF8 0000 0000                  		dc.l TextOptScr_Default
000A6CFC 0000 0000                  		dc.l TextOptScr_Original
000A6D00 0000 0000                  		dc.l TextOptScr_Beta
000A6D04 0000 0000                  		dc.l TextOptScr_Midnight
000A6D08 0000 0000                  		dc.l TextOptScr_C2
000A6D0C 0000 0000                  		dc.l TextOptScr_Clackers
000A6D10 0000 0000                  		dc.l TextOptScr_RHS
000A6D14 0000 0000                  		dc.l TextOptScr_Socket
000A6D18 0000 0000                  		dc.l TextOptScr_Cringe
000A6D1C 0000 0000                  		dc.l TextOptScr_Dark		
000A6D20                            off_92DE:
000A6D20 0000 0000                  		dc.l TextOptScr_Default
000A6D24 0000 0000                  		dc.l TextOptScr_Original
000A6D28 0000 0000                  		dc.l TextOptScr_Beta
000A6D2C 0000 0000                  		dc.l TextOptScr_Midnight
000A6D30 0000 0000                  		dc.l TextOptScr_C2
000A6D34 0000 0000                  		dc.l TextOptScr_Clackers
000A6D38 0000 0000                  		dc.l TextOptScr_RHS
000A6D3C 0000 0000                  		dc.l TextOptScr_Socket
000A6D40 0000 0000                  		dc.l TextOptScr_Cringe
000A6D44 0000 0000                  		dc.l TextOptScr_Dark	
000A6D48                            off_92EA:
000A6D48 0000 0000                  		dc.l TextOptScr_On
000A6D4C 0000 0000                  		dc.l TextOptScr_Off
000A6D50                            off_92F2:
000A6D50 0000 0000                  		dc.l TextOptScr_Null
000A6D54 0000 0000                  		dc.l TextOptScr_Null2
000A6D58                            ; ===========================================================================
000A6D58                            
000A6E77                            ; ============================================================================
000A6E77                            
000A6E77                            Sonic_Miles_Spr:incbin  "artunc/Sonic and Miles text.bin"
000A7378 00                         		even
000A7378                            Eni_MenuBg:    incbin    "tilemaps/menubgeni.bin"
000A7524                            		even
000A7524                            Nem_MenuFont:    incbin    "artnem/Standard font.bin"
000A7A8E                            		even
000A7A8E                            Nem_MenuBox:    incbin   "artnem/Menu Box.bin"
000A7B0E                            		even
000A7B0E                            Eni_MenuBox:    incbin    "tilemaps/menuboxeni.bin"
000A7B3A                            		even
000A7B3A                            		even
000A7B3A                            
000A7B3A                            SHC2022:    incbin "SHC22_Full_Sonic12.bin"
001253BE                                        even
001253BE                            
001253BE                            Art_Dust:	incbin	artunc\spindust.bin
00126CFE                            
00126CFE                            ; ===============================================================
00126CFE                            ; ---------------------------------------------------------------
00126CFE                            ; Error handling module
00126CFE                            ; ---------------------------------------------------------------
00126CFE                             
00126CFE 4EBA 0000                  BusError:   jsr ErrorHandler(pc)
00126D02 4255 5320 4552 524F 5200           dc.b    "BUS ERROR",0           ; text
00126D0C 01                                 dc.b    1               ; extended stack frame
00126D0E 00                                 even
00126D0E                             
00126D0E 4EBA 0000                  AddressError:   jsr ErrorHandler(pc)
00126D12 4144 4452 4553 5320 4552+          dc.b    "ADDRESS ERROR",0       ; text
00126D20 01                                 dc.b    1               ; extended stack frame
00126D22 00                                 even
00126D22                             
00126D22 4EBA 0000                  IllegalInstr:   jsr ErrorHandler(pc)
00126D26 494C 4C45 4741 4C20 494E+          dc.b    "ILLEGAL INSTRUCTION",0     ; text
00126D3A 00                                 dc.b    0               ; extended stack frame
00126D3C 00                                 even
00126D3C                             
00126D3C 4EBA 0000                  ZeroDivide: jsr ErrorHandler(pc)
00126D40 5A45 524F 2044 4956 4944+          dc.b    "ZERO DIVIDE",0         ; text
00126D4C 00                                 dc.b    0               ; extended stack frame
00126D4E 00                                 even
00126D4E                             
00126D4E 4EBA 0000                  ChkInstr:   jsr ErrorHandler(pc)
00126D52 4348 4B20 494E 5354 5255+          dc.b    "CHK INSTRUCTION",0         ; text
00126D62 00                                 dc.b    0               ; extended stack frame
00126D64 00                                 even
00126D64                             
00126D64 4EBA 0000                  TrapvInstr: jsr ErrorHandler(pc)
00126D68 5452 4150 5620 494E 5354+          dc.b    "TRAPV INSTRUCTION",0       ; text
00126D7A 00                                 dc.b    0               ; extended stack frame
00126D7C 00                                 even
00126D7C                             
00126D7C 4EBA 0000                  PrivilegeViol:  jsr ErrorHandler(pc)
00126D80 5052 4956 494C 4547 4520+          dc.b    "PRIVILEGE VIOLATION",0     ; text
00126D94 00                                 dc.b    0               ; extended stack frame
00126D96 00                                 even
00126D96                             
00126D96 4EBA 0000                  Trace:      jsr ErrorHandler(pc)
00126D9A 5452 4143 4500                     dc.b    "TRACE",0           ; text
00126DA0 00                                 dc.b    0               ; extended stack frame
00126DA2 00                                 even
00126DA2                             
00126DA2 4EBA 0000                  Line1010Emu:    jsr ErrorHandler(pc)
00126DA6 4C49 4E45 2031 3031 3020+          dc.b    "LINE 1010 EMULATOR",0      ; text
00126DB9 00                                 dc.b    0               ; extended stack frame
00126DBA                                    even
00126DBA                             
00126DBA 4EBA 0000                  Line1111Emu:    jsr ErrorHandler(pc)
00126DBE 4C49 4E45 2031 3131 3120+          dc.b    "LINE 1111 EMULATOR",0      ; text
00126DD1 00                                 dc.b    0               ; extended stack frame
00126DD2                                    even
00126DD2                             
00126DD2 4EBA 0000                  ErrorExcept:    jsr ErrorHandler(pc)
00126DD6 4552 524F 5220 4558 4345+          dc.b    "ERROR EXCEPTION",0         ; text
00126DE6 00                                 dc.b    0               ; extended stack frame
00126DE8 00                                 even
00126DE8                             
00126DE8                            ErrorHandler:   incbin  "ErrorHandler.bin"
001275CC                            
001275CC                            ; end of 'ROM'
001275CC                            		even
001275CC                            EndOfRom:
001275CC                            
001275CC                            
