00000000                            ;  =========================================================================
00000000                            ; |           Sonic the Hedgehog Disassembly for Sega Mega Drive            |
00000000                            ;  =========================================================================
00000000                            ;
00000000                            ; Disassembly created by Hivebrain
00000000                            ; thanks to drx, Stealth and Esrael L.G. Neto
00000000                            
00000000                            ; ===========================================================================
00000000                            
00000000                            	include	"_s1smps2asm_inc.asm"
00000000                            ; =============================================================================================
00000000                            ; Created by Flamewing, based on S1SMPS2ASM version 1.1 by Marc Gordon (AKA Cinossu)
00000000                            ; =============================================================================================
00000000 =00000001                  SourceDriver = 1 ; Please don't modify the value.
00000000                            ; PSG conversion to S3/S&K/S3D drivers require a tone shift of 12 semi-tones.
00000000 =0000000C                  psgdelta	EQU 12
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Standard Octave Pitch Equates
00000000 =00000088                  smpsPitch10lo	EQU $88
00000000 =00000094                  smpsPitch09lo	EQU $94
00000000 =000000A0                  smpsPitch08lo	EQU $A0
00000000 =000000AC                  smpsPitch07lo	EQU $AC
00000000 =000000B8                  smpsPitch06lo	EQU $B8
00000000 =000000C4                  smpsPitch05lo	EQU $C4
00000000 =000000D0                  smpsPitch04lo	EQU $D0
00000000 =000000DC                  smpsPitch03lo	EQU $DC
00000000 =000000E8                  smpsPitch02lo	EQU $E8
00000000 =000000F4                  smpsPitch01lo	EQU $F4
00000000 =00000000                  smpsPitch00		EQU $00
00000000 =0000000C                  smpsPitch01hi	EQU $0C
00000000 =00000018                  smpsPitch02hi	EQU $18
00000000 =00000024                  smpsPitch03hi	EQU $24
00000000 =00000030                  smpsPitch04hi	EQU $30
00000000 =0000003C                  smpsPitch05hi	EQU $3C
00000000 =00000048                  smpsPitch06hi	EQU $48
00000000 =00000054                  smpsPitch07hi	EQU $54
00000000 =00000060                  smpsPitch08hi	EQU $60
00000000 =0000006C                  smpsPitch09hi	EQU $6C
00000000 =00000078                  smpsPitch10hi	EQU $78
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Note Equates
00000000 =00000080                  nRst		EQU	$80
00000000 =00000081                  nC0			EQU	$81
00000000 =00000082                  nCs0		EQU	$82
00000000 =00000083                  nD0			EQU	$83
00000000 =00000084                  nEb0		EQU	$84
00000000 =00000085                  nE0			EQU	$85
00000000 =00000086                  nF0			EQU	$86
00000000 =00000087                  nFs0		EQU	$87
00000000 =00000088                  nG0			EQU	$88
00000000 =00000089                  nAb0		EQU	$89
00000000 =0000008A                  nA0			EQU	$8A
00000000 =0000008B                  nBb0		EQU	$8B
00000000 =0000008C                  nB0			EQU	$8C
00000000 =0000008D                  nC1			EQU	$8D
00000000 =0000008E                  nCs1		EQU	$8E
00000000 =0000008F                  nD1			EQU	$8F
00000000 =00000090                  nEb1		EQU	$90
00000000 =00000091                  nE1			EQU	$91
00000000 =00000092                  nF1			EQU	$92
00000000 =00000093                  nFs1		EQU	$93
00000000 =00000094                  nG1			EQU	$94
00000000 =00000095                  nAb1		EQU	$95
00000000 =00000096                  nA1			EQU	$96
00000000 =00000097                  nBb1		EQU	$97
00000000 =00000098                  nB1			EQU	$98
00000000 =00000099                  nC2			EQU	$99
00000000 =0000009A                  nCs2		EQU	$9A
00000000 =0000009B                  nD2			EQU	$9B
00000000 =0000009C                  nEb2		EQU	$9C
00000000 =0000009D                  nE2			EQU	$9D
00000000 =0000009E                  nF2			EQU	$9E
00000000 =0000009F                  nFs2		EQU	$9F
00000000 =000000A0                  nG2			EQU	$A0
00000000 =000000A1                  nAb2		EQU	$A1
00000000 =000000A2                  nA2			EQU	$A2
00000000 =000000A3                  nBb2		EQU	$A3
00000000 =000000A4                  nB2			EQU	$A4
00000000 =000000A5                  nC3			EQU	$A5
00000000 =000000A6                  nCs3		EQU	$A6
00000000 =000000A7                  nD3			EQU	$A7
00000000 =000000A8                  nEb3		EQU	$A8
00000000 =000000A9                  nE3			EQU	$A9
00000000 =000000AA                  nF3			EQU	$AA
00000000 =000000AB                  nFs3		EQU	$AB
00000000 =000000AC                  nG3			EQU	$AC
00000000 =000000AD                  nAb3		EQU	$AD
00000000 =000000AE                  nA3			EQU	$AE
00000000 =000000AF                  nBb3		EQU	$AF
00000000 =000000B0                  nB3			EQU	$B0
00000000 =000000B1                  nC4			EQU	$B1
00000000 =000000B2                  nCs4		EQU	$B2
00000000 =000000B3                  nD4			EQU	$B3
00000000 =000000B4                  nEb4		EQU	$B4
00000000 =000000B5                  nE4			EQU	$B5
00000000 =000000B6                  nF4			EQU	$B6
00000000 =000000B7                  nFs4		EQU	$B7
00000000 =000000B8                  nG4			EQU	$B8
00000000 =000000B9                  nAb4		EQU	$B9
00000000 =000000BA                  nA4			EQU	$BA
00000000 =000000BB                  nBb4		EQU	$BB
00000000 =000000BC                  nB4			EQU	$BC
00000000 =000000BD                  nC5			EQU	$BD
00000000 =000000BE                  nCs5		EQU	$BE
00000000 =000000BF                  nD5			EQU	$BF
00000000 =000000C0                  nEb5		EQU	$C0
00000000 =000000C1                  nE5			EQU	$C1
00000000 =000000C2                  nF5			EQU	$C2
00000000 =000000C3                  nFs5		EQU	$C3
00000000 =000000C4                  nG5			EQU	$C4
00000000 =000000C5                  nAb5		EQU	$C5
00000000 =000000C6                  nA5			EQU	$C6
00000000 =000000C7                  nBb5		EQU	$C7
00000000 =000000C8                  nB5			EQU	$C8
00000000 =000000C9                  nC6			EQU	$C9
00000000 =000000CA                  nCs6		EQU	$CA
00000000 =000000CB                  nD6			EQU	$CB
00000000 =000000CC                  nEb6		EQU	$CC
00000000 =000000CD                  nE6			EQU	$CD
00000000 =000000CE                  nF6			EQU	$CE
00000000 =000000CF                  nFs6		EQU	$CF
00000000 =000000D0                  nG6			EQU	$D0
00000000 =000000D1                  nAb6		EQU	$D1
00000000 =000000D2                  nA6			EQU	$D2
00000000 =000000D3                  nBb6		EQU	$D3
00000000 =000000D4                  nB6			EQU	$D4
00000000 =000000D5                  nC7			EQU	$D5
00000000 =000000D6                  nCs7		EQU	$D6
00000000 =000000D7                  nD7			EQU	$D7
00000000 =000000D8                  nEb7		EQU	$D8
00000000 =000000D9                  nE7			EQU	$D9
00000000 =000000DA                  nF7			EQU	$DA
00000000 =000000DB                  nFs7		EQU	$DB
00000000 =000000DC                  nG7			EQU	$DC
00000000 =000000DD                  nAb7		EQU	$DD
00000000 =000000DE                  nA7			EQU	$DE
00000000 =000000DF                  nBb7		EQU	$DF
00000000                            ; SMPS2ASM uses nMaxPSG for songs from S1/S2 drivers.
00000000                            ; nMaxPSG1 and nMaxPSG2 are used only for songs from S3/S&K/S3D drivers.
00000000                            ; The use of psgdelta is intended to undo the effects of PSGPitchConvert
00000000                            ; and ensure that the ending note is indeed the maximum PSG frequency.
00000000 =000000C6                  nMaxPSG				EQU nA5
00000000 =000000D2                  nMaxPSG1			EQU nA5+psgdelta
00000000 =000000D2                  nMaxPSG2			EQU nA5+psgdelta
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; PSG Flutter Equates
00000000 =00000000                  fTone_00	EQU	$00
00000000 =00000001                  fTone_01	EQU	$01
00000000 =00000002                  fTone_02	EQU	$02
00000000 =00000003                  fTone_03	EQU	$03
00000000 =00000004                  fTone_04	EQU	$04
00000000 =00000005                  fTone_05	EQU	$05
00000000 =00000006                  fTone_06	EQU	$06
00000000 =00000007                  fTone_07	EQU	$07
00000000 =00000008                  fTone_08	EQU	$08
00000000 =00000009                  fTone_09	EQU	$09
00000000 =00000007                  fTone_0A	EQU	$07
00000000 =00000005                  fTone_0B	EQU	$05
00000000 =00000000                  fTone_0C	EQU	$00
00000000                            ;fTone_0D	EQU	$00
00000000 =00000002                  sTone_01	EQU	$02
00000000 =00000002                  sTone_02	EQU	$02
00000000 =00000005                  sTone_03	EQU	$05
00000000 =00000003                  sTone_04	EQU	$03
00000000 =00000001                  sTone_05	EQU	$01
00000000 =00000003                  sTone_06	EQU	$03
00000000 =00000000                  sTone_07	EQU	$00	; SFX envelope, probably unused in S3K
00000000 =00000009                  sTone_08	EQU	$09
00000000 =00000005                  sTone_09	EQU	$05
00000000 =00000007                  sTone_0A	EQU	$07
00000000 =00000000                  sTone_0B	EQU	$00	; For FM volume envelopes
00000000 =00000009                  sTone_0C	EQU	$09
00000000 =00000000                  sTone_0D	EQU	$00	; This time it matches 100%
00000000 =00000002                  sTone_0E	EQU	$02	; Duplicate of 01
00000000 =00000002                  sTone_0F	EQU	$02	; Duplicate of 02
00000000 =00000000                  sTone_10	EQU	$00
00000000 =00000006                  sTone_11	EQU	$06
00000000 =00000001                  sTone_12	EQU	$01	; Duplicate of 05
00000000 =00000003                  sTone_13	EQU	$03	; Duplicate of 06
00000000 =00000000                  sTone_14	EQU	$00	; SFX envelope, probably unused in S3K
00000000 =00000009                  sTone_15	EQU	$09	; Duplicate of 08
00000000 =00000005                  sTone_16	EQU	$05	; Duplicate of 09
00000000 =00000007                  sTone_17	EQU	$07	; Duplicate of 0A
00000000 =00000000                  sTone_18	EQU	$00	; For FM volume envelopes
00000000 =00000009                  sTone_19	EQU	$09	; Duplicate of 0C
00000000 =00000002                  sTone_1A	EQU	$02
00000000 =00000009                  sTone_1B	EQU	$09	; Duplicate of 0C
00000000 =00000006                  sTone_1C	EQU	$06
00000000 =00000007                  sTone_1D	EQU	$07
00000000 =00000002                  sTone_1E	EQU	$02
00000000 =00000004                  sTone_1F	EQU	$04
00000000 =00000000                  sTone_20	EQU	$00	; This time it matches 100%
00000000 =00000009                  sTone_21	EQU	$09
00000000 =00000004                  sTone_22	EQU	$04
00000000 =00000007                  sTone_23	EQU	$07
00000000 =00000002                  sTone_24	EQU	$02
00000000 =00000009                  sTone_25	EQU	$09
00000000 =00000007                  sTone_26	EQU	$07
00000000 =00000003                  sTone_27	EQU	$03
00000000                            ;sTone_28	EQU	$09
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; DAC Equates
00000000 =00000081                  dKick equ $81
00000000 =00000082                  dSnare equ $82
00000000 =00000085                  dCrashCymbal equ $85
00000000 =00000088                  dHiTimpani equ $88
00000000 =00000089                  dMidTimpani equ $89
00000000 =0000008A                  dLowTimpani equ $8A
00000000 =0000008B                  dVLowTimpani equ $8B
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Channel IDs for SFX
00000000 =00000080                  cPSG1				EQU $80
00000000 =000000A0                  cPSG2				EQU $A0
00000000 =000000C0                  cPSG3				EQU $C0
00000000 =000000E0                  cNoise				EQU $E0	; Not for use in S3/S&K/S3D
00000000 =00000002                  cFM3				EQU $02
00000000 =00000004                  cFM4				EQU $04
00000000 =00000005                  cFM5				EQU $05
00000000 =00000006                  cFM6				EQU $06	; Only in S3/S&K/S3D, overrides DAC
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Conversion macros and functions
00000000                            
00000000                            ;conv0To256  macro val 
00000000                            	;if val<$01
00000000                            		;dc.b (256-val+$FF)&$FF
00000000                            	;else	
00000000                            		;dc.b (256-val)&$FF	
00000000                            	;endc
00000000                            	;endm
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Header Macros
00000000                            smpsHeaderStartSong macro ver
00000000                            SourceDriver set ver
00000000                            songStart set *
00000000                            	endm
00000000                            
00000000                            smpsHeaderStartSongConvert macro ver
00000000                            SourceDriver set ver
00000000                            songStart set *
00000000                            	endm
00000000                            
00000000                            smpsHeaderVoiceNull macro
00000000                            	if songStart<>*
00000000                            		fatal "Missing smpsHeaderStartSong or smpsHeaderStartSongConvert"
00000000                            	endif
00000000                            	dc.w	$0000
00000000                            	endm
00000000                            
00000000                            ; Header - Set up Voice Location
00000000                            ; Common to music and SFX
00000000                            smpsHeaderVoice macro loc
00000000                            	if songStart<>*
00000000                            		fatal "Missing smpsHeaderStartSong or smpsHeaderStartSongConvert"
00000000                            	endif
00000000                            	dc.w	loc-songStart
00000000                            	endm
00000000                            
00000000                            ; Header macros for music (not for SFX)
00000000                            ; Header - Set up Channel Usage
00000000                            smpsHeaderChan macro fm,psg
00000000                            	dc.b	fm,psg
00000000                            	endm
00000000                            
00000000                            ; Header - Set up Tempo
00000000                            smpsHeaderTempo macro div,mod
00000000                            	dc.b	div
00000000                            tempoDivider set div
00000000                            	dc.b    mod
00000000                            	endm
00000000                            
00000000                            ; Header - Set up DAC Channel
00000000                            smpsHeaderDAC macro loc,pitch,vol
00000000                            	dc.w	loc-songStart
00000000                            	if (narg=2)
00000000                            		dc.b	pitch
00000000                            		if (narg=3)
00000000                            			dc.b	vol
00000000                            		else
00000000                            			dc.b	$00
00000000                            		endif
00000000                            	else
00000000                            		dc.w	$00
00000000                            	endif
00000000                            	endm
00000000                            
00000000                            ; Header - Set up FM Channel
00000000                            smpsHeaderFM macro loc,pitch,vol
00000000                            	dc.w	loc-songStart
00000000                            	dc.b	pitch,vol
00000000                            	endm
00000000                            
00000000                            ; Header - Set up PSG Channel
00000000                            smpsHeaderPSG macro loc,pitch,vol,mod,voice
00000000                            	dc.w	loc-songStart
00000000                            	if SourceDriver>=3
00000000                            		dc.b	(pitch-psgdelta)&$FF
00000000                            	else
00000000                            		dc.b	pitch
00000000                            	endif
00000000                            	dc.b	vol,mod,voice
00000000                            	endm
00000000                            
00000000                            ; Header macros for SFX (not for music)
00000000                            ; Header - Set up Tempo
00000000                            smpsHeaderTempoSFX macro div
00000000                            	dc.b	div
00000000                            	endm
00000000                            
00000000                            ; Header - Set up Channel Usage
00000000                            smpsHeaderChanSFX macro chan
00000000                            	dc.b	chan
00000000                            	endm
00000000                            
00000000                            ; Header - Set up FM Channel
00000000                            smpsHeaderSFXChannel macro chanid,loc,pitch,vol
00000000                            	if (chanid=cNoise)
00000000                            		fatal "Using channel ID of FM6 ($06) in Sonic 1 or Sonic 2 drivers is unsupported. Change it to another channel."
00000000                            	endif
00000000                            	dc.b	$80,chanid
00000000                            	dc.w	loc-songStart
00000000                            	if (chanid&$80)<>0
00000000                            	if SourceDriver>=3
00000000                            		dc.b	(pitch-psgdelta)&$FF
00000000                            	else
00000000                            		dc.b	pitch
00000000                            	endif
00000000                            	else
00000000                            		dc.b	pitch
00000000                            	endif
00000000                            	dc.b	vol
00000000                            	endm
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Co-ord Flag Macros and Equates
00000000                            ; E0xx - Panning, AMS, FMS
00000000                            smpsPan macro direction,amsfms
00000000                            panNone set $00
00000000                            panRight set $40
00000000                            panLeft set $80
00000000                            panCentre set $C0
00000000                            panCenter set $C0 ; silly Americans :U
00000000                            	dc.b $E0,direction+amsfms
00000000                            	endm
00000000                            
00000000                            ; E1xx - Set channel frequency displacement to xx
00000000                            smpsAlterNote macro val
00000000                            	dc.b	$E1,val
00000000                            	endm
00000000                            
00000000                            smpsDetune macro val
00000000                            	smpsAlterNote val
00000000                            	endm
00000000                            
00000000                            ; E2xx - Useless
00000000                            smpsNop macro val
00000000                            	dc.b	$E2,val
00000000                            	endm
00000000                            
00000000                            ; Return (used after smpsCall)
00000000                            smpsReturn macro val
00000000                            	dc.b	$E3
00000000                            	endm
00000000                            
00000000                            ; Fade in previous song (ie. 1-Up)
00000000                            smpsFade macro val
00000000                            	dc.b	$E4
00000000                            	endm
00000000                            
00000000                            ; E5xx - Set channel tempo divider to xx
00000000                            smpsChanTempoDiv macro val
00000000                            	dc.b	$E5,val
00000000                            	endm
00000000                            
00000000                            ; E6xx - Alter Volume by xx
00000000                            smpsAlterVol macro val
00000000                            	dc.b	$E6,val
00000000                            	endm
00000000 =000000E6                  sVol	EQU $E6
00000000                            
00000000                            ; E7 - Prevent attack of next note
00000000 =000000E7                  smpsNoAttack	EQU $E7
00000000 =000000E7                  smpsNA	EQU smpsNoAttack
00000000 =000000E7                  sNA	EQU smpsNoAttack
00000000                            
00000000                            ; E8xx - Set note fill to xx
00000000                            smpsNoteFill macro val
00000000                            	dc.b	$E8,val
00000000                            	endm
00000000                            
00000000                            ; Add xx to channel pitch
00000000                            smpsAlterPitch macro val
00000000                            	dc.b	$E9,val
00000000                            	endm
00000000                            
00000000                            smpsChangeTransposition macro val
00000000                            	if SourceDriver>=3
00000000                            		dc.b	$FF,val
00000000                            	else
00000000                            		dc.b	$E9,val
00000000                            	endif
00000000                            	endm
00000000                            
00000000                            ; Set music tempo modifier to xx
00000000                            smpsSetTempoMod macro val
00000000                            	dc.b	$EA
00000000                            	dc.b    val
00000000                            	endm
00000000                            
00000000                            ; Set music tempo divider to xx
00000000                            smpsSetTempoDiv macro val
00000000                            	dc.b	$EB,val
00000000                            	endm
00000000                            
00000000                            ; ECxx - Set Volume to xx
00000000                            smpsSetVol macro val
00000000                            	fatal "Coord. Flag to set volume (instead of volume attenuation) does not exist in S1 or S2 drivers. Complain to Flamewing to add it."
00000000                            	endm
00000000                            
00000000                            ; Works on all drivers
00000000                            smpsPSGAlterVol macro vol
00000000                            	dc.b	$EC,vol
00000000                            	endm
00000000 =000000EC                  spVol	EQU $EC
00000000                            
00000000                            ; Clears pushing sound flag in S1
00000000                            smpsClearPush macro
00000000                            	dc.b	$ED
00000000                            	endm
00000000                            
00000000                            ; Stops special SFX (S1 only) and restarts overridden music track
00000000                            smpsStopSpecial macro
00000000                            	dc.b	$EE
00000000                            	endm
00000000                            
00000000                            ; EFxx[yy] - Set Voice of FM channel to xx; xx < 0 means yy present
00000000                            smpsSetvoice macro voice,songID
00000000                            	dc.b	$EF,voice
00000000                            	endm
00000000                            
00000000                            ; EFxx - Set Voice of FM channel to xx
00000000                            smpsFMvoice macro voice
00000000                            	dc.b	$EF,voice
00000000                            	endm
00000000                            
00000000                            ; F0wwxxyyzz - Modulation - ww: wait time - xx: modulation speed - yy: change per step - zz: number of steps
00000000                            smpsModSet macro wait,speed,change,step
00000000                            	dc.b	$F0
00000000                            	if SourceDriver>=3
00000000                            		dc.b	wait+1,speed,change,(step*speed-1)&$FF
00000000                            	else
00000000                            		dc.b	wait,speed,change,step
00000000                            	endif
00000000                            	;dc.b	speed,change,step
00000000                            	endm
00000000                            
00000000                            ; Turn on Modulation
00000000                            smpsModOn macro
00000000                            	dc.b	$F1
00000000                            	endm
00000000                            
00000000                            ; F2 - End of channel
00000000                            smpsStop macro
00000000                            	dc.b	$F2
00000000                            	endm
00000000                            
00000000                            ; F3xx - PSG waveform to xx
00000000                            smpsPSGform macro form
00000000                            	dc.b	$F3,form
00000000                            	endm
00000000                            
00000000                            ; Turn off Modulation
00000000                            smpsModOff macro
00000000                            	dc.b	$F4
00000000                            	endm
00000000                            
00000000                            ; F5xx - PSG voice to xx
00000000                            smpsPSGvoice macro voice
00000000                            	dc.b	$F5,voice
00000000                            	endm
00000000                            
00000000                            ; F6xxxx - Jump to xxxx
00000000                            smpsJump macro loc
00000000                            	dc.b	$F6
00000000                            	dc.w	loc-*-1
00000000                            	endm
00000000                            
00000000                            ; F7xxyyzzzz - Loop back to zzzz yy times, xx being the loop index for loop recursion fixing
00000000                            smpsLoop macro index,loops,loc
00000000                            	dc.b	$F7
00000000                            	dc.b	index,loops
00000000                            	dc.w	loc-*-1
00000000                            	endm
00000000                            
00000000                            ; F8xxxx - Call pattern at xxxx, saving return point
00000000                            smpsCall macro loc
00000000                            	dc.b	$F8
00000000                            	dc.w	loc-*-1
00000000                            	endm
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Alter Volume
00000000                            smpsFMAlterVol macro val1,val2
00000000                            	dc.b	$E6,val1
00000000                            	endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; S1/S2 only coordination flag
00000000                            ; Sets D1L to maximum volume (minimum attenuation) and RR to maximum for operators 3 and 4 of FM1
00000000                            smpsWeirdD1LRR macro
00000000                            	dc.b	$F9
00000000                            	endm
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Macros for FM instruments
00000000                            ; Voices - Feedback
00000000                            smpsVcFeedback macro val
00000000                            vcFeedback set val
00000000                            	endm
00000000                            
00000000                            ; Voices - Algorithm
00000000                            smpsVcAlgorithm macro val
00000000                            vcAlgorithm set val
00000000                            	endm
00000000                            
00000000                            smpsVcUnusedBits macro val
00000000                            vcUnusedBits set val
00000000                            	endm
00000000                            
00000000                            ; Voices - Detune
00000000                            smpsVcDetune macro op1,op2,op3,op4
00000000                            vcDT1 set op1
00000000                            vcDT2 set op2
00000000                            vcDT3 set op3
00000000                            vcDT4 set op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Coarse-Frequency
00000000                            smpsVcCoarseFreq macro op1,op2,op3,op4
00000000                            vcCF1 set op1
00000000                            vcCF2 set op2
00000000                            vcCF3 set op3
00000000                            vcCF4 set op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Rate Scale
00000000                            smpsVcRateScale macro op1,op2,op3,op4
00000000                            vcRS1 set op1
00000000                            vcRS2 set op2
00000000                            vcRS3 set op3
00000000                            vcRS4 set op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Attack Rate
00000000                            smpsVcAttackRate macro op1,op2,op3,op4
00000000                            vcAR1 set op1
00000000                            vcAR2 set op2
00000000                            vcAR3 set op3
00000000                            vcAR4 set op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Amplitude Modulation
00000000                            smpsVcAmpMod macro op1,op2,op3,op4
00000000                            vcAM1 set op1
00000000                            vcAM2 set op2
00000000                            vcAM3 set op3
00000000                            vcAM4 set op4
00000000                            	endm
00000000                            
00000000                            ; Voices - First Decay Rate
00000000                            smpsVcDecayRate1 macro op1,op2,op3,op4
00000000                            vcD1R1 set op1
00000000                            vcD1R2 set op2
00000000                            vcD1R3 set op3
00000000                            vcD1R4 set op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Second Decay Rate
00000000                            smpsVcDecayRate2 macro op1,op2,op3,op4
00000000                            vcD2R1 set op1
00000000                            vcD2R2 set op2
00000000                            vcD2R3 set op3
00000000                            vcD2R4 set op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Decay Level
00000000                            smpsVcDecayLevel macro op1,op2,op3,op4
00000000                            vcDL1 set op1
00000000                            vcDL2 set op2
00000000                            vcDL3 set op3
00000000                            vcDL4 set op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Release Rate
00000000                            smpsVcReleaseRate macro op1,op2,op3,op4
00000000                            vcRR1 set op1
00000000                            vcRR2 set op2
00000000                            vcRR3 set op3
00000000                            vcRR4 set op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Total Level
00000000                            smpsVcTotalLevel macro op1,op2,op3,op4
00000000                            vcTL1 set op1
00000000                            vcTL2 set op2
00000000                            vcTL3 set op3
00000000                            vcTL4 set op4
00000000                            	dc.b	(vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
00000000                            	dc.b	(vcDT4<<4)+vcCF4, (vcDT3<<4)+vcCF3, (vcDT2<<4)+vcCF2, (vcDT1<<4)+vcCF1
00000000                            	dc.b	(vcRS4<<6)+vcAR4, (vcRS3<<6)+vcAR3, (vcRS2<<6)+vcAR2, (vcRS1<<6)+vcAR1
00000000                            	dc.b	(vcAM4<<5)+vcD1R4, (vcAM3<<5)+vcD1R3, (vcAM2<<5)+vcD1R2, (vcAM1<<5)+vcD1R1
00000000                            	dc.b	vcD2R4, vcD2R3, vcD2R2, vcD2R1
00000000                            	dc.b	(vcDL4<<4)+vcRR4, (vcDL3<<4)+vcRR3, (vcDL2<<4)+vcRR2, (vcDL1<<4)+vcRR1
00000000                            	;dc.b	vcTL4|vcTLMask4, vcTL3|vcTLMask3, vcTL2|vcTLMask2, vcTL1|vcTLMask1
00000000                            	if vcAlgorithm=7
00000000                            		dc.b	op4|$80
00000000                            	else
00000000                            		dc.b	op4
00000000                            	endif
00000000                            
00000000                            	if vcAlgorithm>=4
00000000                            		dc.b    op3|$80
00000000                            	else
00000000                            		dc.b    op3
00000000                            	endif
00000000                            
00000000                            	if vcAlgorithm>=5
00000000                            		dc.b    op2|$80
00000000                            	else
00000000                            		dc.b    op2
00000000                            	endif
00000000                            		dc.b    op1|$80
00000000                            	endm
00000000                            
00000000                            
00000000                            	include	"Constants.asm"
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; Constants
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000 =00006978                  Size_of_SegaPCM:		equ $6978
00000000                            
00000000                            ; VDP addressses
00000000 =00C00000                  vdp_data_port:		equ $C00000
00000000 =00C00004                  vdp_control_port:	equ $C00004
00000000 =00C00008                  vdp_counter:		equ $C00008
00000000                            
00000000 =00C00011                  psg_input:		equ $C00011
00000000                            
00000000                            ; Z80 addresses
00000000 =00A00000                  z80_ram:		equ $A00000	; start of Z80 RAM
00000000 =00A000EA                  z80_dac3_pitch:		equ $A000EA
00000000 =00A01FFD                  z80_dac_status:		equ $A01FFD
00000000 =00A01FFF                  z80_dac_sample:		equ $A01FFF
00000000 =00A02000                  z80_ram_end:		equ $A02000	; end of non-reserved Z80 RAM
00000000 =00A10001                  z80_version:		equ $A10001
00000000 =00A10002                  z80_port_1_data:	equ $A10002
00000000 =00A10008                  z80_port_1_control:	equ $A10008
00000000 =00A1000A                  z80_port_2_control:	equ $A1000A
00000000 =00A1000C                  z80_expansion_control:	equ $A1000C
00000000 =00A11100                  z80_bus_request:	equ $A11100
00000000 =00A11200                  z80_reset:		equ $A11200
00000000 =00A04000                  ym2612_a0:		equ $A04000
00000000 =00A04001                  ym2612_d0:		equ $A04001
00000000 =00A04002                  ym2612_a1:		equ $A04002
00000000 =00A04003                  ym2612_d1:		equ $A04003
00000000                            
00000000 =00A14000                  security_addr:		equ $A14000
00000000                            
00000000                            ; Sound driver constants
00000000 =00000000                  TrackPlaybackControl:	equ 0		; All tracks
00000000 =00000001                  TrackVoiceControl:	equ 1		; All tracks
00000000 =00000002                  TrackTempoDivider:	equ 2		; All tracks
00000000 =00000004                  TrackDataPointer:	equ 4		; All tracks (4 bytes)
00000000 =00000008                  TrackTranspose:		equ 8		; FM/PSG only (sometimes written to as a word, to include TrackVolume)
00000000 =00000009                  TrackVolume:		equ 9		; FM/PSG only
00000000 =0000000A                  TrackAMSFMSPan:		equ $A		; FM/DAC only
00000000 =0000000B                  TrackVoiceIndex:	equ $B		; FM/PSG only
00000000 =0000000C                  TrackVolEnvIndex:	equ $C		; PSG only
00000000 =0000000D                  TrackStackPointer:	equ $D		; All tracks
00000000 =0000000E                  TrackDurationTimeout:	equ $E		; All tracks
00000000 =0000000F                  TrackSavedDuration:	equ $F		; All tracks
00000000 =00000010                  TrackSavedDAC:		equ $10		; DAC only
00000000 =00000010                  TrackFreq:		equ $10		; FM/PSG only (2 bytes)
00000000 =00000012                  TrackNoteTimeout:	equ $12		; FM/PSG only
00000000 =00000013                  TrackNoteTimeoutMaster:equ $13		; FM/PSG only
00000000 =00000014                  TrackModulationPtr:	equ $14		; FM/PSG only (4 bytes)
00000000 =00000018                  TrackModulationWait:	equ $18		; FM/PSG only
00000000 =00000019                  TrackModulationSpeed:	equ $19		; FM/PSG only
00000000 =0000001A                  TrackModulationDelta:	equ $1A		; FM/PSG only
00000000 =0000001B                  TrackModulationSteps:	equ $1B		; FM/PSG only
00000000 =0000001C                  TrackModulationVal:	equ $1C		; FM/PSG only (2 bytes)
00000000 =0000001E                  TrackDetune:		equ $1E		; FM/PSG only
00000000 =0000001F                  TrackPSGNoise:		equ $1F		; PSG only
00000000 =0000001F                  TrackFeedbackAlgo:	equ $1F		; FM only
00000000 =00000020                  TrackVoicePtr:		equ $20		; FM SFX only (4 bytes)
00000000 =00000024                  TrackLoopCounters:	equ $24		; All tracks (multiple bytes)
00000000                            TrackGoSubStack:	equ TrackSz	; All tracks (multiple bytes. This constant won't get to be used because of an optimisation that just uses zTrackSz)
00000000                            
00000000 =00000030                  TrackSz:	equ $30
00000000                            
00000000                            ; VRAM data
00000000 =0000C000                  vram_fg:	equ $C000	; foreground namespace
00000000 =0000E000                  vram_bg:	equ $E000	; background namespace
00000000 =0000F000                  vram_sonic:	equ $F000	; Sonic graphics
00000000 =0000F800                  vram_sprites:	equ $F800	; sprite table
00000000 =0000FC00                  vram_hscroll:	equ $FC00	; horizontal scroll table
00000000                            
00000000                            ; Game modes
00000000                            id_Sega:	equ ptr_GM_Sega-GameModeArray	; $00
00000000                            id_Title:	equ ptr_GM_Title-GameModeArray	; $04
00000000                            id_Demo:	equ ptr_GM_Demo-GameModeArray	; $08
00000000                            id_Level:	equ ptr_GM_Level-GameModeArray	; $0C
00000000                            id_Special:	equ ptr_GM_Special-GameModeArray; $10
00000000                            id_Continue:	equ ptr_GM_Cont-GameModeArray	; $14
00000000                            id_Ending:	equ ptr_GM_Ending-GameModeArray	; $18
00000000                            id_Credits:	equ ptr_GM_Credits-GameModeArray; $1C
00000000                            
00000000                            ; Levels
00000000 =00000000                  id_GHZ:		equ 0
00000000 =00000001                  id_LZ:		equ 1
00000000 =00000002                  id_MZ:		equ 2
00000000 =00000003                  id_SLZ:		equ 3
00000000 =00000004                  id_SYZ:		equ 4
00000000 =00000005                  id_SBZ:		equ 5
00000000 =00000006                  id_EndZ:	equ 6
00000000 =00000007                  id_SS:		equ 7
00000000                            
00000000                            ; colors
00000000 =00000000                  cBlack:		equ $000		; color black
00000000 =00000EEE                  cWhite:		equ $EEE		; color white
00000000 =00000E00                  cBlue:		equ $E00		; color blue
00000000 =000000E0                  cGreen:		equ $0E0		; color green
00000000 =0000000E                  cRed:		equ $00E		; color red
00000000 =000000EE                  cYellow:	equ cGreen+cRed		; color yellow
00000000 =00000EE0                  cAqua:		equ cGreen+cBlue	; color aqua
00000000 =00000E0E                  cMagenta:	equ cBlue+cRed		; color magenta
00000000                            
00000000                            ; Joypad input
00000000 =00000080                  btnStart:	equ %10000000 ; Start button	($80)
00000000 =00000040                  btnA:		equ %01000000 ; A		($40)
00000000 =00000020                  btnC:		equ %00100000 ; C		($20)
00000000 =00000010                  btnB:		equ %00010000 ; B		($10)
00000000 =00000008                  btnR:		equ %00001000 ; Right		($08)
00000000 =00000004                  btnL:		equ %00000100 ; Left		($04)
00000000 =00000002                  btnDn:		equ %00000010 ; Down		($02)
00000000 =00000001                  btnUp:		equ %00000001 ; Up		($01)
00000000 =0000000F                  btnDir:		equ %00001111 ; Any direction	($0F)
00000000 =00000070                  btnABC:		equ %01110000 ; A, B or C	($70)
00000000 =00000007                  bitStart:	equ 7
00000000 =00000006                  bitA:		equ 6
00000000 =00000005                  bitC:		equ 5
00000000 =00000004                  bitB:		equ 4
00000000 =00000003                  bitR:		equ 3
00000000 =00000002                  bitL:		equ 2
00000000 =00000001                  bitDn:		equ 1
00000000 =00000000                  bitUp:		equ 0
00000000                            
00000000                            ; Object variables
00000000 =00000001                  obRender:	equ 1	; bitfield for x/y flip, display mode
00000000 =00000002                  obGfx:		equ 2	; palette line & VRAM setting (2 bytes)
00000000 =00000004                  obMap:		equ 4	; mappings address (4 bytes)
00000000 =00000008                  obX:		equ 8	; x-axis position (2-4 bytes)
00000000 =0000000A                  obScreenY:	equ $A	; y-axis position for screen-fixed items (2 bytes)
00000000 =0000000C                  obY:		equ $C	; y-axis position (2-4 bytes)
00000000 =00000010                  obVelX:		equ $10	; x-axis velocity (2 bytes)
00000000 =00000012                  obVelY:		equ $12	; y-axis velocity (2 bytes)
00000000 =00000020                  obInertia:	equ $20	; potential speed (2 bytes)
00000000 =00000016                  obHeight:	equ $16	; height/2
00000000 =00000017                  obWidth:	equ $17	; width/2
00000000 =00000018                  obPriority:	equ $18	; sprite stack priority -- 0 is front
00000000 =00000014                  obActWid:	equ $14	; action width
00000000 =0000001A                  obFrame:	equ $1A	; current frame displayed
00000000 =0000001B                  obAniFrame:	equ $1B	; current frame in animation script
00000000 =0000001C                  obAnim:		equ $1C	; current animation
00000000 =0000001D                  obNextAni:	equ $1D	; next animation
00000000 =0000001E                  obTimeFrame:	equ $1E	; time to next frame
00000000 =0000001F                  obDelayAni:	equ $1F	; time to delay animation
00000000 =00000020                  obColType:	equ $20	; collision response type
00000000 =00000021                  obColProp:	equ $21	; collision extra property
00000000 =00000022                  obStatus:	equ $22	; orientation or mode
00000000 =00000023                  obRespawnNo:	equ $23	; respawn list index number
00000000 =00000024                  obRoutine:	equ $24	; routine number
00000000 =00000025                  ob2ndRout:	equ $25	; secondary routine number
00000000 =00000026                  obAngle:	equ $26	; angle
00000000 =00000028                  obSubtype:	equ $28	; object subtype
00000000 =00000025                  obSolid:	equ ob2ndRout ; solid status flag
00000000                            
00000000                            ; Object variables used by Sonic
00000000 =00000030                  flashtime:	equ $30	; time between flashes after getting hit
00000000 =00000032                  invtime:	equ $32	; time left for invincibility
00000000 =00000034                  shoetime:	equ $34	; time left for speed shoes
00000000                            
00000000                            ; Object variables (Sonic 2 disassembly nomenclature)
00000000 =00000001                  render_flags:	equ 1	; bitfield for x/y flip, display mode
00000000 =00000002                  art_tile:	equ 2	; palette line & VRAM setting (2 bytes)
00000000 =00000004                  mappings:	equ 4	; mappings address (4 bytes)
00000000 =00000008                  x_pos:		equ 8	; x-axis position (2-4 bytes)
00000000 =0000000C                  y_pos:		equ $C	; y-axis position (2-4 bytes)
00000000 =00000010                  x_vel:		equ $10	; x-axis velocity (2 bytes)
00000000 =00000012                  y_vel:		equ $12	; y-axis velocity (2 bytes)
00000000 =00000016                  y_radius:	equ $16	; height/2
00000000 =00000017                  x_radius:	equ $17	; width/2
00000000 =00000018                  priority:	equ $18	; sprite stack priority -- 0 is front
00000000 =00000014                  width_pixels:	equ $14	; action width
00000000 =0000001A                  mapping_frame:	equ $1A	; current frame displayed
00000000 =0000001B                  anim_frame:	equ $1B	; current frame in animation script
00000000 =0000001C                  anim:		equ $1C	; current animation
00000000 =0000001D                  next_anim:	equ $1D	; next animation
00000000 =0000001E                  anim_frame_duration: equ $1E ; time to next frame
00000000 =00000020                  collision_flags: equ $20 ; collision response type
00000000 =00000021                  collision_property: equ $21 ; collision extra property
00000000 =00000022                  status:		equ $22	; orientation or mode
00000000 =00000023                  respawn_index:	equ $23	; respawn list index number
00000000 =00000024                  routine:	equ $24	; routine number
00000000 =00000025                  routine_secondary: equ $25 ; secondary routine number
00000000 =00000026                  angle:		equ $26	; angle
00000000 =00000028                  subtype:	equ $28	; object subtype
00000000                            
00000000                            ; Animation flags
00000000 =000000FF                  afEnd:		equ $FF	; return to beginning of animation
00000000 =000000FE                  afBack:		equ $FE	; go back (specified number) bytes
00000000 =000000FD                  afChange:	equ $FD	; run specified animation
00000000 =000000FC                  afRoutine:	equ $FC	; increment routine counter
00000000 =000000FB                  afReset:	equ $FB	; reset animation and 2nd object routine counter
00000000 =000000FA                  af2ndRoutine:	equ $FA	; increment 2nd routine counter
00000000                            
00000000                            ; Background music
00000000 =00000081                  bgm__First:	equ $81
00000000                            bgm_GHZ:	equ ((ptr_mus81-MusicIndex)/4)+bgm__First
00000000                            bgm_LZ:		equ ((ptr_mus82-MusicIndex)/4)+bgm__First
00000000                            bgm_MZ:		equ ((ptr_mus83-MusicIndex)/4)+bgm__First
00000000                            bgm_SLZ:	equ ((ptr_mus84-MusicIndex)/4)+bgm__First
00000000                            bgm_SYZ:	equ ((ptr_mus85-MusicIndex)/4)+bgm__First
00000000                            bgm_SBZ:	equ ((ptr_mus86-MusicIndex)/4)+bgm__First
00000000                            bgm_Invincible:	equ ((ptr_mus87-MusicIndex)/4)+bgm__First
00000000                            bgm_ExtraLife:	equ ((ptr_mus88-MusicIndex)/4)+bgm__First
00000000                            bgm_SS:		equ ((ptr_mus89-MusicIndex)/4)+bgm__First
00000000                            bgm_Title:	equ ((ptr_mus8A-MusicIndex)/4)+bgm__First
00000000                            bgm_Ending:	equ ((ptr_mus8B-MusicIndex)/4)+bgm__First
00000000                            bgm_Boss:	equ ((ptr_mus8C-MusicIndex)/4)+bgm__First
00000000                            bgm_FZ:		equ ((ptr_mus8D-MusicIndex)/4)+bgm__First
00000000                            bgm_GotThrough:	equ ((ptr_mus8E-MusicIndex)/4)+bgm__First
00000000                            bgm_GameOver:	equ ((ptr_mus8F-MusicIndex)/4)+bgm__First
00000000                            bgm_Continue:	equ ((ptr_mus90-MusicIndex)/4)+bgm__First
00000000                            bgm_Credits:	equ ((ptr_mus91-MusicIndex)/4)+bgm__First
00000000                            bgm_Drowning:	equ ((ptr_mus92-MusicIndex)/4)+bgm__First
00000000                            bgm_Emerald:	equ ((ptr_mus93-MusicIndex)/4)+bgm__First
00000000                            bgm_Pinch:		equ ((ptr_mus94-MusicIndex)/4)+bgm__First
00000000                            bgm_Seaside:	equ ((ptr_mus95-MusicIndex)/4)+bgm__First
00000000                            bgm_SBZ3:		equ ((ptr_mus96-MusicIndex)/4)+bgm__First
00000000                            bgm_Granada:	equ ((ptr_mus97-MusicIndex)/4)+bgm__First
00000000                            bgm__Last:	equ ((ptr_musend-MusicIndex-4)/4)+bgm__First
00000000                            
00000000                            ; Sound effects
00000000 =000000A0                  sfx__First:	equ $A0
00000000                            sfx_Jump:	equ ((ptr_sndA0-SoundIndex)/4)+sfx__First
00000000                            sfx_Lamppost:	equ ((ptr_sndA1-SoundIndex)/4)+sfx__First
00000000                            sfx_A2:		equ ((ptr_sndA2-SoundIndex)/4)+sfx__First
00000000                            sfx_Death:	equ ((ptr_sndA3-SoundIndex)/4)+sfx__First
00000000                            sfx_Skid:	equ ((ptr_sndA4-SoundIndex)/4)+sfx__First
00000000                            sfx_LRingBox:	equ ((ptr_sndA5-SoundIndex)/4)+sfx__First
00000000                            sfx_HitSpikes:	equ ((ptr_sndA6-SoundIndex)/4)+sfx__First
00000000                            sfx_Push:	equ ((ptr_sndA7-SoundIndex)/4)+sfx__First
00000000                            sfx_SSGoal:	equ ((ptr_sndA8-SoundIndex)/4)+sfx__First
00000000                            sfx_SSItem:	equ ((ptr_sndA9-SoundIndex)/4)+sfx__First
00000000                            sfx_Splash:	equ ((ptr_sndAA-SoundIndex)/4)+sfx__First
00000000                            sfx_FireShield:	equ ((ptr_FireShield-SoundIndex)/4)+sfx__First
00000000                            sfx_HitBoss:	equ ((ptr_sndAC-SoundIndex)/4)+sfx__First
00000000                            sfx_Bubble:	equ ((ptr_sndAD-SoundIndex)/4)+sfx__First
00000000                            sfx_Fireball:	equ ((ptr_sndAE-SoundIndex)/4)+sfx__First
00000000                            sfx_Shield:	equ ((ptr_sndAF-SoundIndex)/4)+sfx__First
00000000                            sfx_Saw:	equ ((ptr_sndB0-SoundIndex)/4)+sfx__First
00000000                            sfx_Electric:	equ ((ptr_sndB1-SoundIndex)/4)+sfx__First
00000000                            sfx_Drown:	equ ((ptr_sndB2-SoundIndex)/4)+sfx__First
00000000                            sfx_Flamethrower:equ ((ptr_sndB3-SoundIndex)/4)+sfx__First
00000000                            sfx_Bumper:	equ ((ptr_sndB4-SoundIndex)/4)+sfx__First
00000000                            sfx_Ring:	equ ((ptr_sndB5-SoundIndex)/4)+sfx__First
00000000                            sfx_SpikesMove:	equ ((ptr_sndB6-SoundIndex)/4)+sfx__First
00000000                            sfx_Rumbling:	equ ((ptr_sndB7-SoundIndex)/4)+sfx__First
00000000                            sfx_B8:		equ ((ptr_sndB8-SoundIndex)/4)+sfx__First
00000000                            sfx_Collapse:	equ ((ptr_sndB9-SoundIndex)/4)+sfx__First
00000000                            sfx_SSGlass:	equ ((ptr_sndBA-SoundIndex)/4)+sfx__First
00000000                            sfx_Door:	equ ((ptr_sndBB-SoundIndex)/4)+sfx__First
00000000                            sfx_Teleport:	equ ((ptr_sndBC-SoundIndex)/4)+sfx__First
00000000                            sfx_ChainStomp:	equ ((ptr_sndBD-SoundIndex)/4)+sfx__First
00000000                            sfx_Roll:	equ ((ptr_sndBE-SoundIndex)/4)+sfx__First
00000000                            sfx_Continue:	equ ((ptr_sndBF-SoundIndex)/4)+sfx__First
00000000                            sfx_Basaran:	equ ((ptr_sndC0-SoundIndex)/4)+sfx__First
00000000                            sfx_BreakItem:	equ ((ptr_sndC1-SoundIndex)/4)+sfx__First
00000000                            sfx_Warning:	equ ((ptr_sndC2-SoundIndex)/4)+sfx__First
00000000                            sfx_GiantRing:	equ ((ptr_sndC3-SoundIndex)/4)+sfx__First
00000000                            sfx_Bomb:	equ ((ptr_sndC4-SoundIndex)/4)+sfx__First
00000000                            sfx_Cash:	equ ((ptr_sndC5-SoundIndex)/4)+sfx__First
00000000                            sfx_RingLoss:	equ ((ptr_sndC6-SoundIndex)/4)+sfx__First
00000000                            sfx_ChainRise:	equ ((ptr_sndC7-SoundIndex)/4)+sfx__First
00000000                            sfx_Burning:	equ ((ptr_sndC8-SoundIndex)/4)+sfx__First
00000000                            sfx_Bonus:	equ ((ptr_sndC9-SoundIndex)/4)+sfx__First
00000000                            sfx_EnterSS:	equ ((ptr_sndCA-SoundIndex)/4)+sfx__First
00000000                            sfx_WallSmash:	equ ((ptr_sndCB-SoundIndex)/4)+sfx__First
00000000                            sfx_Spring:	equ ((ptr_sndCC-SoundIndex)/4)+sfx__First
00000000                            sfx_Switch:	equ ((ptr_sndCD-SoundIndex)/4)+sfx__First
00000000                            sfx_RingLeft:	equ ((ptr_sndCE-SoundIndex)/4)+sfx__First
00000000                            sfx_Signpost:	equ ((ptr_sndCF-SoundIndex)/4)+sfx__First
00000000                            sfx__Last:	equ ((ptr_sndend-SoundIndex-4)/4)+sfx__First
00000000                            
00000000                            ; Special sound effects
00000000 =000000D0                  spec__First:	equ $D0
00000000                            sfx_Waterfall:	equ ((ptr_sndD0-SpecSoundIndex)/4)+spec__First
00000000                            sfx_LightningShield:	equ ((ptr_sndD1-SpecSoundIndex)/4)+spec__First
00000000                            sfx_Peelout:	equ ((ptr_sndD2-SpecSoundIndex)/4)+spec__First
00000000                            sfx_PeeloutRelease:	equ ((ptr_sndD3-SpecSoundIndex)/4)+spec__First
00000000                            sfx_PeeloutStop:	equ ((ptr_sndD4-SpecSoundIndex)/4)+spec__First
00000000                            sfx_Spindash:	equ ((ptr_sndD5-SpecSoundIndex)/4)+spec__First
00000000                            spec__Last:	equ ((ptr_specend-SpecSoundIndex-4)/4)+spec__First
00000000                            
00000000 =000000E0                  flg__First:	equ $E0
00000000                            bgm_Fade:	equ ((ptr_flgE0-Sound_ExIndex)/4)+flg__First
00000000                            sfx_Sega:	equ ((ptr_flgE1-Sound_ExIndex)/4)+flg__First
00000000                            bgm_Speedup:	equ ((ptr_flgE2-Sound_ExIndex)/4)+flg__First
00000000                            bgm_Slowdown:	equ ((ptr_flgE3-Sound_ExIndex)/4)+flg__First
00000000                            bgm_Stop:	equ ((ptr_flgE4-Sound_ExIndex)/4)+flg__First
00000000                            flg__Last:	equ ((ptr_flgend-Sound_ExIndex-4)/4)+flg__First
00000000                            
00000000                            ; Sonic frame IDs
00000000 =00000000                  fr_Null:	equ 0
00000000 =00000001                  fr_Stand:	equ 1
00000000 =00000002                  fr_Blink:	equ 2
00000000 =00000003                  fr_Wait1:	equ 3
00000000 =00000004                  fr_Wait2:	equ 4
00000000 =00000005                  fr_Wait3:	equ 5
00000000 =00000006                  fr_Wait4:	equ 6
00000000 =00000007                  fr_Wait5:	equ 7
00000000 =00000008                  fr_Wait6:	equ 8
00000000 =00000009                  fr_Wait7:	equ 9
00000000 =0000000A                  fr_Wait8:	equ $A
00000000 =0000000B                  fr_Wait9:	equ $B
00000000 =0000000C                  fr_LookUp1:	equ $C
00000000 =0000000D                  fr_LookUp2:	equ $D
00000000 =0000000E                  fr_Walk11:	equ $E
00000000 =0000000F                  fr_Walk12:	equ $F
00000000 =00000010                  fr_Walk13:	equ $10
00000000 =00000011                  fr_Walk14:	equ $11
00000000 =00000012                  fr_Walk15:	equ $12
00000000 =00000013                  fr_Walk16:	equ $13
00000000 =00000014                  fr_Walk17:	equ $14
00000000 =00000015                  fr_Walk18:	equ $15
00000000 =00000016                  fr_Walk21:	equ $16
00000000 =00000017                  fr_Walk22:	equ $17
00000000 =00000018                  fr_Walk23:	equ $18
00000000 =00000019                  fr_Walk24:	equ $19
00000000 =0000001A                  fr_Walk25:	equ $1A
00000000 =0000001B                  fr_Walk26:	equ $1B
00000000 =0000001C                  fr_Walk27:	equ $1C
00000000 =0000001D                  fr_Walk28:	equ $1D
00000000 =0000001E                  fr_Walk31:	equ $1E
00000000 =0000001F                  fr_Walk32:	equ $1F
00000000 =00000020                  fr_Walk33:	equ $20
00000000 =00000021                  fr_Walk34:	equ $21
00000000 =00000022                  fr_Walk35:	equ $22
00000000 =00000023                  fr_Walk36:	equ $23
00000000 =00000024                  fr_Walk37:	equ $24
00000000 =00000025                  fr_Walk38:	equ $25
00000000 =00000026                  fr_Walk41:	equ $26
00000000 =00000027                  fr_Walk42:	equ $27
00000000 =00000028                  fr_Walk43:	equ $28
00000000 =00000029                  fr_Walk44:	equ $29
00000000 =0000002A                  fr_Walk45:	equ $2A
00000000 =0000002B                  fr_Walk46:	equ $2B
00000000 =0000002C                  fr_Walk47:	equ $2C
00000000 =0000002D                  fr_Walk48:	equ $2D
00000000 =0000002E                  fr_Run11:	equ $2E
00000000 =0000002F                  fr_Run12:	equ $2F
00000000 =00000030                  fr_Run13:	equ $30
00000000 =00000031                  fr_Run14:	equ $31
00000000 =00000032                  fr_Run15:	equ $32
00000000 =00000033                  fr_Run16:	equ $33
00000000 =00000034                  fr_Run17:	equ $34
00000000 =00000035                  fr_Run18:	equ $35
00000000 =00000036                  fr_Run21:	equ $36
00000000 =00000037                  fr_Run22:	equ $37
00000000 =00000038                  fr_Run23:	equ $38
00000000 =00000039                  fr_Run24:	equ $39
00000000 =0000003A                  fr_Run25:	equ $3A
00000000 =0000003B                  fr_Run26:	equ $3B
00000000 =0000003C                  fr_Run27:	equ $3C
00000000 =0000003D                  fr_Run28:	equ $3D
00000000 =0000003E                  fr_Run31:	equ $3E
00000000 =0000003F                  fr_Run32:	equ $3F
00000000 =00000040                  fr_Run33:	equ $40
00000000 =00000041                  fr_Run34:	equ $41
00000000 =00000042                  fr_Run35:	equ $42
00000000 =00000043                  fr_Run36:	equ $43
00000000 =00000044                  fr_Run37:	equ $44
00000000 =00000045                  fr_Run38:	equ $45
00000000 =00000046                  fr_Run41:	equ $46
00000000 =00000047                  fr_Run42:	equ $47
00000000 =00000048                  fr_Run43:	equ $48
00000000 =00000049                  fr_Run44:	equ $49
00000000 =0000004A                  fr_Run45:	equ $4A
00000000 =0000004B                  fr_Run46:	equ $4B
00000000 =0000004C                  fr_Run47:	equ $4C
00000000 =0000004D                  fr_Run48:	equ $4D
00000000 =0000004E                  fr_peelout11:	equ $4E
00000000 =0000004F                  fr_peelout12:	equ $4F
00000000 =00000050                  fr_peelout13:	equ $50
00000000 =00000051                  fr_peelout14:	equ $51
00000000 =00000052                  fr_peelout21:	equ $52
00000000 =00000053                  fr_peelout22:	equ $53
00000000 =00000054                  fr_peelout23:	equ $54
00000000 =00000055                  fr_peelout24:	equ $55
00000000 =00000056                  fr_peelout31:	equ $56
00000000 =00000057                  fr_peelout32:	equ $57
00000000 =00000058                  fr_peelout33:	equ $58
00000000 =00000059                  fr_peelout34:	equ $59
00000000 =0000005A                  fr_peelout41:	equ $5A
00000000 =0000005B                  fr_peelout42:	equ $5B
00000000 =0000005C                  fr_peelout43:	equ $5C
00000000 =0000005D                  fr_peelout44:	equ $5D
00000000 =0000005E                  fr_Roll1:	equ $5E
00000000 =00000060                  fr_Roll2:	equ $60
00000000 =00000062                  fr_Roll3:	equ $62
00000000 =00000064                  fr_Roll4:	equ $64
00000000 =00000066                  fr_Roll5:	equ $66
00000000 =0000005F                  fr_Roll6:	equ $5F
00000000 =00000061                  fr_Roll7:	equ $61
00000000 =00000063                  fr_Roll8:	equ $63
00000000 =00000065                  fr_Roll9:	equ $65
00000000 =00000067                  fr_Warp1:	equ $67
00000000 =00000068                  fr_Warp2:	equ $68
00000000 =00000069                  fr_Warp3:	equ $69
00000000 =0000006A                  fr_Warp4:	equ $6A
00000000 =0000006B                  fr_Stop1:	equ $6B
00000000 =0000006C                  fr_Stop2:	equ $6C
00000000 =0000006D                  fr_Stop3:	equ $6D
00000000 =0000006E                  fr_Stop4:	equ $6E
00000000 =0000006F                  fr_Duck3:	equ $6F
00000000 =00000070                  fr_Duck2:	equ $70
00000000 =00000071                  fr_Duck:	equ $71
00000000 =00000072                  fr_Balance1:	equ $72
00000000 =00000073                  fr_Balance2:	equ $73
00000000 =00000074                  fr_Balance3:	equ $74
00000000 =00000075                  fr_Balance4:	equ $75
00000000 =00000076                  fr_Balance5:	equ $76
00000000 =00000077                  fr_Blank:		equ $77
00000000 =00000078                  fr_VHang1:		equ $78
00000000 =00000079                  fr_VHang2:		equ $79
00000000 =0000007A                  fr_VHang3:		equ $7A
00000000                            
00000000 =0000007C                  fr_Float1:	equ $7C
00000000 =0000007E                  fr_Float2:	equ $7E
00000000 =00000081                  fr_Float3:	equ $81
00000000 =00000082                  fr_Float4:	equ $82
00000000 =00000080                  fr_Float5:	equ $80
00000000 =0000007B                  fr_Float6:	equ $7B
00000000 =0000007D                  fr_float7:	equ $7D
00000000 =0000007F                  fr_float8:	equ $7F
00000000 =00000083                  fr_Spring:	equ $83
00000000 =00000084                  fr_Spring2:	equ $84
00000000 =00000085                  fr_Hang1:	equ $85
00000000 =00000086                  fr_Hang2:	equ $86
00000000 =00000087                  fr_Leap1:	equ $87
00000000 =00000088                  fr_Leap2:	equ $88
00000000 =00000089                  fr_Push1:	equ $89
00000000 =0000008A                  fr_Push2:	equ $8A
00000000 =0000008B                  fr_Push3:	equ $8B
00000000 =0000008C                  fr_Push4:	equ $8C
00000000 =0000008D                  fr_Push5:	equ $8D
00000000 =0000008E                  fr_Push6:	equ $8E
00000000 =0000008F                  fr_Push7:	equ $8F
00000000 =00000090                  fr_Push8:	equ $90
00000000 =00000091                  fr_Surf:	equ $91
00000000 =00000092                  fr_Burnt:	equ $92
00000000 =00000093                  fr_Drown:	equ $93
00000000 =00000094                  fr_Death:	equ $94
00000000 =00000095                  fr_GetAir:	equ $95
00000000 =00000096                  fr_Injury:	equ $96
00000000 =00000097                  fr_WaterSlide:	equ $97
00000000 =00000098                  fr_skele1:	equ $98
00000000 =00000099                  fr_skele2:	equ $99
00000000 =0000009A                  fr_skele3:	equ $9A
00000000 =0000009B                  fr_Spindash1	equ $9B
00000000 =0000009C                  fr_Spindash2	equ $9C
00000000 =0000009D                  fr_Spindash3	equ $9D
00000000 =0000009E                  fr_Spindash4	equ $9E
00000000 =0000009F                  fr_Spindash5	equ $9F
00000000 =000000A0                  fr_Spindash6	equ $A0
00000000 =000000A0                  fr_Spindash6	equ $A0
00000000                            	include	"Variables.asm"
00000000                            ; Variables (v) and Flags (f)
00000000                            
00000000 =FFFFFC00                  v_regbuffer:	equ $FFFFFC00	; stores registers d0-a7 during an error event ($40 bytes)
00000000 =FFFFFC40                  v_spbuffer:	equ $FFFFFC40	; stores most recent sp address (4 bytes)
00000000 =FFFFFC44                  v_errortype:	equ $FFFFFC44	; error type
00000000                            
00000000 =00FF0000                  v_256x256:	equ   $FF0000	; 256x256 tile mappings ($A400 bytes)
00000000 =FFFFA400                  v_lvllayout:	equ $FFFFA400	; level and background layouts ($400 bytes)
00000000 =FFFFA800                  v_bgscroll_buffer:	equ	$FFFFA800	; background scroll buffer ($200 bytes)
00000000 =FFFFAA00                  v_ngfx_buffer:	equ $FFFFAA00	; Nemesis graphics decompression buffer ($200 bytes)
00000000 =FFFFAC00                  v_spritequeue:	equ $FFFFAC00	; sprite display queue, in order of priority ($400 bytes)
00000000 =FFFFB000                  v_16x16:		equ $FFFFB000	; 16x16 tile mappings
00000000 =FFFFC800                  VDP_Command_Buffer:	equ $FFFFC800
00000000                            
00000000 =FFFFC8FC                  VDP_Command_Buffer_Slot:equ VDP_Command_Buffer+7*$12*2
00000000 =FFFFC800                  v_sgfx_buffer:	equ $FFFFC800	; buffered Sonic graphics ($17 cells) ($2E0 bytes)
00000000 =FFFFCB00                  v_tracksonic:	equ $FFFFCB00	; position tracking data for Sonic ($100 bytes)
00000000 =FFFFCC00                  v_hscrolltablebuffer:	equ $FFFFCC00 ; scrolling table data (actually $380 bytes, but $400 is reserved for it)
00000000 =FFFFD000                  v_objspace:	equ $FFFFD000	; object variable space ($40 bytes per object) ($2000 bytes)
00000000 =FFFFD000                  v_player:	equ v_objspace	; object variable space for Sonic ($40 bytes)
00000000 =FFFFD800                  v_lvlobjspace:	equ $FFFFD800	; level object variable space ($1800 bytes)
00000000 =FFFFF015                  v_palmuscounter:	equ $FFFFF015
00000000 =FFFFF000                  v_snddriver_ram:	equ $FFFFF000 ; start of RAM for the sound driver data ($5C0 bytes)
00000000                            
00000000                            ; =================================================================================
00000000                            ; From here on, until otherwise stated, all offsets are relative to v_snddriver_ram
00000000                            ; =================================================================================
00000000 =00000000                  v_startofvariables:	equ $000
00000000 =00000000                  v_sndprio:		equ $000	; sound priority (priority of new music/SFX must be higher or equal to this value or it won't play; bit 7 of priority being set prevents this value from changing)
00000000 =00000001                  v_main_tempo_timeout:	equ $001	; Counts down to zero; when zero, resets to next value and delays song by 1 frame
00000000 =00000002                  v_main_tempo:		equ $002	; Used for music only
00000000 =00000003                  f_pausemusic:		equ $003	; flag set to stop music when paused
00000000 =00000004                  v_fadeout_counter:	equ $004
00000000                            
00000000 =00000006                  v_fadeout_delay:	equ $006
00000000 =00000007                  v_communication_byte:	equ $007	; used in Ristar to sync with a boss' attacks; unused here
00000000 =00000008                  f_updating_dac:		equ $008	; $80 if updating DAC, $00 otherwise
00000000 =00000009                  v_sound_id:		equ $009	; sound or music copied from below
00000000 =0000000A                  v_soundqueue0:		equ $00A	; sound or music to play
00000000 =0000000B                  v_soundqueue1:		equ $00B	; special sound to play
00000000 =0000000C                  v_soundqueue2:		equ $00C	; unused sound to play
00000000                            
00000000 =0000000E                  f_voice_selector:	equ $00E	; $00 = use music voice pointer; $40 = use special voice pointer; $80 = use track voice pointer
00000000                            
00000000 =00000018                  v_voice_ptr:		equ $018	; voice data pointer (4 bytes)
00000000                            
00000000 =00000020                  v_special_voice_ptr:	equ $020	; voice data pointer for special SFX ($D0-$DF) (4 bytes)
00000000                            
00000000 =00000024                  f_fadein_flag:		equ $024	; Flag for fade in
00000000 =00000025                  v_fadein_delay:		equ $025
00000000 =00000026                  v_fadein_counter:	equ $026	; Timer for fade in/out
00000000 =00000027                  f_1up_playing:		equ $027	; flag indicating 1-up song is playing
00000000 =00000028                  v_tempo_mod:		equ $028	; music - tempo modifier
00000000 =00000029                  v_speeduptempo:		equ $029	; music - tempo modifier with speed shoes
00000000 =0000002A                  f_speedup:		equ $02A	; flag indicating whether speed shoes tempo is on ($80) or off ($00)
00000000 =0000002B                  v_ring_speaker:		equ $02B	; which speaker the "ring" sound is played in (00 = right; 01 = left)
00000000 =0000002C                  f_push_playing:		equ $02C	; if set, prevents further push sounds from playing
00000000                            
00000000 =00000040                  v_music_track_ram:	equ $040	; Start of music RAM
00000000                            
00000000 =00000040                  v_music_fmdac_tracks:	equ v_music_track_ram+TrackSz*0
00000000 =00000040                  v_music_dac_track:	equ v_music_fmdac_tracks+TrackSz*0
00000000 =00000070                  v_music_fm_tracks:	equ v_music_fmdac_tracks+TrackSz*1
00000000 =00000070                  v_music_fm1_track:	equ v_music_fm_tracks+TrackSz*0
00000000 =000000A0                  v_music_fm2_track:	equ v_music_fm_tracks+TrackSz*1
00000000 =000000D0                  v_music_fm3_track:	equ v_music_fm_tracks+TrackSz*2
00000000 =00000100                  v_music_fm4_track:	equ v_music_fm_tracks+TrackSz*3
00000000 =00000130                  v_music_fm5_track:	equ v_music_fm_tracks+TrackSz*4
00000000 =00000160                  v_music_fm6_track:	equ v_music_fm_tracks+TrackSz*5
00000000 =00000190                  v_music_fm_tracks_end:	equ v_music_fm_tracks+TrackSz*6
00000000 =00000190                  v_music_fmdac_tracks_end:	equ v_music_fm_tracks_end
00000000 =00000190                  v_music_psg_tracks:	equ v_music_fmdac_tracks_end
00000000 =00000190                  v_music_psg1_track:	equ v_music_psg_tracks+TrackSz*0
00000000 =000001C0                  v_music_psg2_track:	equ v_music_psg_tracks+TrackSz*1
00000000 =000001F0                  v_music_psg3_track:	equ v_music_psg_tracks+TrackSz*2
00000000 =00000220                  v_music_psg_tracks_end:	equ v_music_psg_tracks+TrackSz*3
00000000 =00000220                  v_music_track_ram_end:	equ v_music_psg_tracks_end
00000000                            
00000000 =00000220                  v_sfx_track_ram:	equ v_music_track_ram_end	; Start of SFX RAM, straight after the end of music RAM
00000000                            
00000000 =00000220                  v_sfx_fm_tracks:	equ v_sfx_track_ram+TrackSz*0
00000000 =00000220                  v_sfx_fm3_track:	equ v_sfx_fm_tracks+TrackSz*0
00000000 =00000250                  v_sfx_fm4_track:	equ v_sfx_fm_tracks+TrackSz*1
00000000 =00000280                  v_sfx_fm5_track:	equ v_sfx_fm_tracks+TrackSz*2
00000000 =000002B0                  v_sfx_fm_tracks_end:	equ v_sfx_fm_tracks+TrackSz*3
00000000 =000002B0                  v_sfx_psg_tracks:	equ v_sfx_fm_tracks_end
00000000 =000002B0                  v_sfx_psg1_track:	equ v_sfx_psg_tracks+TrackSz*0
00000000 =000002E0                  v_sfx_psg2_track:	equ v_sfx_psg_tracks+TrackSz*1
00000000 =00000310                  v_sfx_psg3_track:	equ v_sfx_psg_tracks+TrackSz*2
00000000 =00000340                  v_sfx_psg_tracks_end:	equ v_sfx_psg_tracks+TrackSz*3
00000000 =00000340                  v_sfx_track_ram_end:	equ v_sfx_psg_tracks_end
00000000                            
00000000 =00000340                  v_spcsfx_track_ram:	equ v_sfx_track_ram_end	; Start of special SFX RAM, straight after the end of SFX RAM
00000000                            
00000000 =00000340                  v_spcsfx_fm4_track:	equ v_spcsfx_track_ram+TrackSz*0
00000000 =00000370                  v_spcsfx_psg3_track:	equ v_spcsfx_track_ram+TrackSz*1
00000000 =000003A0                  v_spcsfx_track_ram_end:	equ v_spcsfx_track_ram+TrackSz*2
00000000                            
00000000 =000003A0                  v_1up_ram_copy:		equ v_spcsfx_track_ram_end
00000000                            
00000000                            ; =================================================================================
00000000                            ; From here on, no longer relative to sound driver RAM
00000000                            ; =================================================================================
00000000                            
00000000 =FFFFF600                  v_gamemode:	equ $FFFFF600	; game mode (00=Sega; 04=Title; 08=Demo; 0C=Level; 10=SS; 14=Cont; 18=End; 1C=Credit; +8C=PreLevel)
00000000 =FFFFF602                  v_jpadhold2:	equ $FFFFF602	; joypad input - held, duplicate
00000000 =FFFFF603                  v_jpadpress2:	equ $FFFFF603	; joypad input - pressed, duplicate
00000000 =FFFFF604                  v_jpadhold1:	equ $FFFFF604	; joypad input - held
00000000 =FFFFF605                  v_jpadpress1:	equ $FFFFF605	; joypad input - pressed
00000000                            
00000000 =FFFFF60C                  v_vdp_buffer1:	equ $FFFFF60C	; VDP instruction buffer (2 bytes)
00000000                            
00000000 =FFFFF614                  v_demolength:	equ $FFFFF614	; the length of a demo in frames (2 bytes)
00000000 =FFFFF616                  v_scrposy_dup:	equ $FFFFF616	; screen position y (duplicate) (2 bytes)
00000000 =FFFFF618                  v_bgscrposy_dup:	equ $FFFFF618	; background screen position y (duplicate) (2 bytes)
00000000 =FFFFF61A                  v_scrposx_dup:	equ $FFFFF61A	; screen position x (duplicate) (2 bytes)
00000000 =FFFFF61C                  v_bgscreenposx_dup_unused:	equ $FFFFF61C	; background screen position x (duplicate) (2 bytes)
00000000 =FFFFF61E                  v_bg3screenposy_dup_unused:	equ $FFFFF61E	; (2 bytes)
00000000 =FFFFF620                  v_bg3screenposx_dup_unused:	equ $FFFFF620	; (2 bytes)
00000000                            
00000000 =FFFFF624                  v_hbla_hreg:	equ $FFFFF624	; VDP H.interrupt register buffer (8Axx) (2 bytes)
00000000 =FFFFF625                  v_hbla_line:	equ $FFFFF625	; screen line where water starts and palette is changed by HBlank
00000000 =FFFFF626                  v_pfade_start:	equ $FFFFF626	; palette fading - start position in bytes
00000000 =FFFFF627                  v_pfade_size:	equ $FFFFF627	; palette fading - number of colors
00000000 =FFFFF62A                  v_vbla_routine:	equ $FFFFF62A	; VBlank - routine counter
00000000 =FFFFF62C                  v_spritecount:	equ $FFFFF62C	; number of sprites on-screen
00000000 =FFFFF632                  v_pcyc_num:	equ $FFFFF632	; palette cycling - current reference number (2 bytes)
00000000 =FFFFF634                  v_pcyc_time:	equ $FFFFF634	; palette cycling - time until the next change (2 bytes)
00000000 =FFFFF636                  v_random:	equ $FFFFF636	; pseudo random number buffer (4 bytes)
00000000 =FFFFF63A                  f_pause:		equ $FFFFF63A	; flag set to pause the game (2 bytes)
00000000 =FFFFF640                  v_vdp_buffer2:	equ $FFFFF640	; VDP instruction buffer (2 bytes)
00000000 =FFFFF644                  f_hbla_pal:	equ $FFFFF644	; flag set to change palette during HBlank (0000 = no; 0001 = change) (2 bytes)
00000000 =FFFFF646                  v_waterpos1:	equ $FFFFF646	; water height, actual (2 bytes)
00000000 =FFFFF648                  v_waterpos2:	equ $FFFFF648	; water height, ignoring sway (2 bytes)
00000000 =FFFFF64A                  v_waterpos3:	equ $FFFFF64A	; water height, next target (2 bytes)
00000000 =FFFFF64C                  f_water:		equ $FFFFF64C	; flag set for water
00000000 =FFFFF64D                  v_wtr_routine:	equ $FFFFF64D	; water event - routine counter
00000000 =FFFFF64E                  f_wtr_state:	equ $FFFFF64E	; water palette state when water is above/below the screen (00 = partly/all dry; 01 = all underwater)
00000000                            
00000000 =FFFFF650                  v_pal_buffer:	equ $FFFFF650	; palette data buffer (used for palette cycling) ($30 bytes)
00000000 =FFFFF680                  v_plc_buffer:	equ $FFFFF680	; pattern load cues buffer (maximum $10 PLCs) ($60 bytes)
00000000 =FFFFF6E0                  v_ptrnemcode:	equ $FFFFF6E0	; pointer for nemesis decompression code ($1502 or $150C) (4 bytes)
00000000                            
00000000 =FFFFF6F8                  f_plc_execute:	equ $FFFFF6F8	; flag set for pattern load cue execution (2 bytes)
00000000                            
00000000 =FFFFF700                  v_screenposx:	equ $FFFFF700	; screen position x (2 bytes)
00000000 =FFFFF704                  v_screenposy:	equ $FFFFF704	; screen position y (2 bytes)
00000000 =FFFFF708                  v_bgscreenposx:	equ $FFFFF708	; background screen position x (2 bytes)
00000000 =FFFFF70C                  v_bgscreenposy:	equ $FFFFF70C	; background screen position y (2 bytes)
00000000 =FFFFF710                  v_bg2screenposx:	equ $FFFFF710	; 2 bytes
00000000 =FFFFF714                  v_bg2screenposy:	equ $FFFFF714	; 2 bytes
00000000 =FFFFF718                  v_bg3screenposx:	equ $FFFFF718	; 2 bytes
00000000 =FFFFF71C                  v_bg3screenposy:	equ $FFFFF71C	; 2 bytes
00000000                            
00000000 =FFFFF720                  v_limitleft1:	equ $FFFFF720	; left level boundary (2 bytes)
00000000 =FFFFF722                  v_limitright1:	equ $FFFFF722	; right level boundary (2 bytes)
00000000 =FFFFF724                  v_limittop1:	equ $FFFFF724	; top level boundary (2 bytes)
00000000 =FFFFF726                  v_limitbtm1:	equ $FFFFF726	; bottom level boundary (2 bytes)
00000000 =FFFFF728                  v_limitleft2:	equ $FFFFF728	; left level boundary (2 bytes)
00000000 =FFFFF72A                  v_limitright2:	equ $FFFFF72A	; right level boundary (2 bytes)
00000000 =FFFFF72C                  v_limittop2:	equ $FFFFF72C	; top level boundary (2 bytes)
00000000 =FFFFF72E                  v_limitbtm2:	equ $FFFFF72E	; bottom level boundary (2 bytes)
00000000                            
00000000 =FFFFF732                  v_limitleft3:	equ $FFFFF732	; left level boundary, at the end of an act (2 bytes)
00000000                            
00000000 =FFFFF73A                  v_scrshiftx:	equ $FFFFF73A	; x-screen shift (new - last) * $100
00000000 =FFFFF73C                  v_scrshifty:	equ $FFFFF73C	; y-screen shift (new - last) * $100
00000000                            
00000000 =FFFFF73E                  v_lookshift:	equ $FFFFF73E	; screen shift when Sonic looks up/down (2 bytes)
00000000 =FFFFF742                  v_dle_routine:	equ $FFFFF742	; dynamic level event - routine counter
00000000 =FFFFF744                  f_nobgscroll:	equ $FFFFF744	; flag set to cancel background scrolling
00000000                            
00000000 =FFFFF74A                  v_fg_xblock:	equ	$FFFFF74A	; foreground x-block parity (for redraw)
00000000 =FFFFF74B                  v_fg_yblock:	equ	$FFFFF74B	; foreground y-block parity (for redraw)
00000000 =FFFFF74C                  v_bg1_xblock:	equ	$FFFFF74C	; background x-block parity (for redraw)
00000000 =FFFFF74D                  v_bg1_yblock:	equ	$FFFFF74D	; background y-block parity (for redraw)
00000000 =FFFFF74E                  v_bg2_xblock:	equ	$FFFFF74E	; secondary background x-block parity (for redraw)
00000000 =FFFFF74F                  v_bg2_yblock:	equ	$FFFFF74F	; secondary background y-block parity (unused)
00000000 =FFFFF750                  v_bg3_xblock:	equ	$FFFFF750	; teritary background x-block parity (for redraw)
00000000 =FFFFF751                  v_bg3_yblock:	equ	$FFFFF751	; teritary background y-block parity (unused)
00000000                            
00000000 =FFFFF754                  v_fg_scroll_flags:	equ $FFFFF754	; screen redraw flags for foreground
00000000 =FFFFF756                  v_bg1_scroll_flags:	equ $FFFFF756	; screen redraw flags for background 1
00000000 =FFFFF758                  v_bg2_scroll_flags:	equ $FFFFF758	; screen redraw flags for background 2
00000000 =FFFFF75A                  v_bg3_scroll_flags:	equ $FFFFF75A	; screen redraw flags for background 3
00000000 =FFFFF75C                  f_bgscrollvert:	equ $FFFFF75C	; flag for vertical background scrolling
00000000 =FFFFF760                  v_sonspeedmax:	equ $FFFFF760	; Sonic's maximum speed (2 bytes)
00000000 =FFFFF762                  v_sonspeedacc:	equ $FFFFF762	; Sonic's acceleration (2 bytes)
00000000 =FFFFF764                  v_sonspeeddec:	equ $FFFFF764	; Sonic's deceleration (2 bytes)
00000000 =FFFFF766                  v_sonframenum:	equ $FFFFF766	; frame to display for Sonic
00000000 =FFFFF767                  f_sonframechg:	equ $FFFFF767	; flag set to update Sonic's sprite frame
00000000 =FFFFF768                  v_anglebuffer:	equ $FFFFF768	; angle of collision block that Sonic or object is standing on
00000000                            
00000000 =FFFFF76C                  v_opl_routine:	equ $FFFFF76C	; ObjPosLoad - routine counter
00000000 =FFFFF76E                  v_opl_screen:	equ $FFFFF76E	; ObjPosLoad - screen variable
00000000 =FFFFF770                  v_opl_data:	equ $FFFFF770	; ObjPosLoad - data buffer ($10 bytes)
00000000                            
00000000 =FFFFF780                  v_ssangle:	equ $FFFFF780	; Special Stage angle (2 bytes)
00000000 =FFFFF782                  v_ssrotate:	equ $FFFFF782	; Special Stage rotation speed (2 bytes)
00000000 =FFFFF790                  v_btnpushtime1:	equ $FFFFF790	; button push duration - in level (2 bytes)
00000000 =FFFFF792                  v_btnpushtime2:	equ $FFFFF792	; button push duration - in demo (2 bytes)
00000000 =FFFFF794                  v_palchgspeed:	equ $FFFFF794	; palette fade/transition speed (0 is fastest) (2 bytes)
00000000 =FFFFF796                  v_collindex:	equ $FFFFF796	; ROM address for collision index of current level (4 bytes)
00000000 =FFFFF79A                  v_palss_num:	equ $FFFFF79A	; palette cycling in Special Stage - reference number (2 bytes)
00000000 =FFFFF79C                  v_palss_time:	equ $FFFFF79C	; palette cycling in Special Stage - time until next change (2 bytes)
00000000                            
00000000 =FFFFF7A0                  v_camera_pan:	equ $FFFFF7A0    ; Extended Camera - how far the camera/view is panned to the left or right of Sonic (2 bytes)
00000000                            
00000000 =FFFFF7A4                  v_obj31ypos:	equ $FFFFF7A4	; y-position of object 31 (MZ stomper) (2 bytes)
00000000 =FFFFF7A7                  v_bossstatus:	equ $FFFFF7A7	; status of boss and prison capsule (01 = boss defeated; 02 = prison opened)
00000000 =FFFFF7A8                  v_trackpos:	equ $FFFFF7A8	; position tracking reference number (2 bytes)
00000000 =FFFFF7A9                  v_trackbyte:	equ $FFFFF7A9	; low byte for position tracking
00000000 =FFFFF7AA                  f_lockscreen:	equ $FFFFF7AA	; flag set to lock screen during bosses
00000000 =FFFFF7AC                  v_256loop1:	equ $FFFFF7AC	; 256x256 level tile which contains a loop (GHZ/SLZ)
00000000 =FFFFF7AD                  v_256loop2:	equ $FFFFF7AD	; 256x256 level tile which contains a loop (GHZ/SLZ)
00000000 =FFFFF7AE                  v_256roll1:	equ $FFFFF7AE	; 256x256 level tile which contains a roll tunnel (GHZ)
00000000 =FFFFF7AF                  v_256roll2:	equ $FFFFF7AF	; 256x256 level tile which contains a roll tunnel (GHZ)
00000000 =FFFFF7B0                  v_lani0_frame:	equ $FFFFF7B0	; level graphics animation 0 - current frame
00000000 =FFFFF7B1                  v_lani0_time:	equ $FFFFF7B1	; level graphics animation 0 - time until next frame
00000000 =FFFFF7B2                  v_lani1_frame:	equ $FFFFF7B2	; level graphics animation 1 - current frame
00000000 =FFFFF7B3                  v_lani1_time:	equ $FFFFF7B3	; level graphics animation 1 - time until next frame
00000000 =FFFFF7B4                  v_lani2_frame:	equ $FFFFF7B4	; level graphics animation 2 - current frame
00000000 =FFFFF7B5                  v_lani2_time:	equ $FFFFF7B5	; level graphics animation 2 - time until next frame
00000000 =FFFFF7B6                  v_lani3_frame:	equ $FFFFF7B6	; level graphics animation 3 - current frame
00000000 =FFFFF7B7                  v_lani3_time:	equ $FFFFF7B7	; level graphics animation 3 - time until next frame
00000000 =FFFFF7B8                  v_lani4_frame:	equ $FFFFF7B8	; level graphics animation 4 - current frame
00000000 =FFFFF7B9                  v_lani4_time:	equ $FFFFF7B9	; level graphics animation 4 - time until next frame
00000000 =FFFFF7BA                  v_lani5_frame:	equ $FFFFF7BA	; level graphics animation 5 - current frame
00000000 =FFFFF7BB                  v_lani5_time:	equ $FFFFF7BB	; level graphics animation 5 - time until next frame
00000000 =FFFFF7BE                  v_gfxbigring:	equ $FFFFF7BE	; settings for giant ring graphics loading (2 bytes)
00000000 =FFFFF7C0                  f_conveyrev:	equ $FFFFF7C0	; flag set to reverse conveyor belts in LZ/SBZ
00000000 =FFFFF7C1                  v_obj63:		equ $FFFFF7C1	; object 63 (LZ/SBZ platforms) variables (6 bytes)
00000000 =FFFFF7C7                  f_wtunnelmode:	equ $FFFFF7C7	; LZ water tunnel mode
00000000 =FFFFF7C8                  f_lockmulti:	equ $FFFFF7C8	; flag set to lock controls, lock Sonic's position & animation
00000000 =FFFFF7C9                  f_wtunnelallow:	equ $FFFFF7C9	; LZ water tunnels (00 = enabled; 01 = disabled)
00000000 =FFFFF7CA                  f_jumponly:	equ $FFFFF7CA	; flag set to lock controls apart from jumping
00000000 =FFFFF7CB                  v_obj6B:		equ $FFFFF7CB	; object 6B (SBZ stomper) variable
00000000 =FFFFF7CC                  f_lockctrl:	equ $FFFFF7CC	; flag set to lock controls during ending sequence
00000000 =FFFFF7CD                  f_bigring:	equ $FFFFF7CD	; flag set when Sonic collects the giant ring
00000000 =FFFFF7D0                  v_itembonus:	equ $FFFFF7D0	; item bonus from broken enemies, blocks etc. (2 bytes)
00000000 =FFFFF7D2                  v_timebonus:	equ $FFFFF7D2	; time bonus at the end of an act (2 bytes)
00000000 =FFFFF7D4                  v_ringbonus:	equ $FFFFF7D4	; ring bonus at the end of an act (2 bytes)
00000000 =FFFFF7D6                  f_endactbonus:	equ $FFFFF7D6	; time/ring bonus update flag at the end of an act
00000000 =FFFFF7D7                  v_sonicend:	equ $FFFFF7D7	; routine counter for Sonic in the ending sequence
00000000 =FFFFF7D8                  v_lz_deform:	equ	$FFFFF7D8	; LZ deformtaion offset, in units of $80 (2 bytes)
00000000 =FFFFF7E0                  f_switch:	equ $FFFFF7E0	; flags set when Sonic stands on a switch ($10 bytes)
00000000 =FFFFF7F0                  v_scroll_block_1_size:	equ $FFFFF7F0	; (2 bytes)
00000000 =FFFFF7F2                  v_scroll_block_2_size:	equ $FFFFF7F2	; unused (2 bytes)
00000000 =FFFFF7F4                  v_scroll_block_3_size:	equ $FFFFF7F4	; unused (2 bytes)
00000000 =FFFFF7F6                  v_scroll_block_4_size:	equ $FFFFF7F6	; unused (2 bytes)
00000000                            
00000000 =FFFFF800                  v_spritetablebuffer:	equ $FFFFF800 ; sprite table ($280 bytes, last $80 bytes are overwritten by v_pal_water_dup)
00000000 =FFFFFA00                  v_pal_water_dup:	equ $FFFFFA00 ; duplicate underwater palette, used for transitions ($80 bytes)
00000000 =FFFFFA80                  v_pal_water:	equ $FFFFFA80	; main underwater palette ($80 bytes)
00000000 =FFFFFB00                  v_pal_dry:	equ $FFFFFB00	; main palette ($80 bytes)
00000000 =FFFFFB80                  v_pal_dry_dup:	equ $FFFFFB80	; duplicate palette, used for transitions ($80 bytes)
00000000 =FFFFFC00                  v_objstate:	equ $FFFFFC00	; object state list ($200 bytes)
00000000                            
00000000                            
00000000 =FFFFFE00                  v_systemstack:	equ $FFFFFE00
00000000 =FFFFFE02                  f_restart:	equ $FFFFFE02	; restart level flag (2 bytes)
00000000 =FFFFFE04                  v_framecount:	equ $FFFFFE04	; frame counter (adds 1 every frame) (2 bytes)
00000000 =FFFFFE05                  v_framebyte:	equ v_framecount+1; low byte for frame counter
00000000 =FFFFFE06                  v_debugitem:	equ $FFFFFE06	; debug item currently selected (NOT the object number of the item)
00000000 =FFFFFE08                  v_debuguse:	equ $FFFFFE08	; debug mode use & routine counter (when Sonic is a ring/item) (2 bytes)
00000000 =FFFFFE0A                  v_debugxspeed:	equ $FFFFFE0A	; debug mode - horizontal speed
00000000 =FFFFFE0B                  v_debugyspeed:	equ $FFFFFE0B	; debug mode - vertical speed
00000000 =FFFFFE0C                  v_vbla_count:	equ $FFFFFE0C	; vertical interrupt counter (adds 1 every VBlank) (4 bytes)
00000000 =FFFFFE0E                  v_vbla_word:	equ v_vbla_count+2 ; low word for vertical interrupt counter (2 bytes)
00000000 =FFFFFE0F                  v_vbla_byte:	equ v_vbla_word+1	; low byte for vertical interrupt counter
00000000 =FFFFFE10                  v_zone:		equ $FFFFFE10	; current zone number
00000000 =FFFFFE11                  v_act:		equ $FFFFFE11	; current act number
00000000 =FFFFFE12                  v_lives:		equ $FFFFFE12	; number of lives
00000000 =FFFFFE14                  v_air:		equ $FFFFFE14	; air remaining while underwater (2 bytes)
00000000 =FFFFFE15                  v_airbyte:	equ v_air+1	; low byte for air
00000000 =FFFFFE16                  v_lastspecial:	equ $FFFFFE16	; last special stage number
00000000 =FFFFFE18                  v_continues:	equ $FFFFFE18	; number of continues
00000000 =FFFFFE1A                  f_timeover:	equ $FFFFFE1A	; time over flag
00000000 =FFFFFE1B                  v_lifecount:	equ $FFFFFE1B	; lives counter value (for actual number, see "v_lives")
00000000 =FFFFFE1C                  f_lifecount:	equ $FFFFFE1C	; lives counter update flag
00000000 =FFFFFE1D                  f_ringcount:	equ $FFFFFE1D	; ring counter update flag
00000000 =FFFFFE1E                  f_timecount:	equ $FFFFFE1E	; time counter update flag
00000000 =FFFFFE1F                  f_scorecount:	equ $FFFFFE1F	; score counter update flag
00000000 =FFFFFE20                  v_rings:		equ $FFFFFE20	; rings (2 bytes)
00000000 =FFFFFE21                  v_ringbyte:	equ v_rings+1	; low byte for rings
00000000 =FFFFFE22                  v_time:		equ $FFFFFE22	; time (4 bytes)
00000000 =FFFFFE23                  v_timemin:	equ $FFFFFE23	; time - minutes
00000000 =FFFFFE24                  v_timesec:	equ $FFFFFE24	; time - seconds
00000000 =FFFFFE25                  v_timecent:	equ $FFFFFE25	; time - centiseconds
00000000 =FFFFFE26                  v_score:		equ $FFFFFE26	; score (4 bytes)
00000000 =FFFFFE2C                  v_shield:	equ $FFFFFE2C	; shield status (00 = no; 01 = yes)
00000000 =FFFFFE2D                  v_invinc:	equ $FFFFFE2D	; invinciblity status (00 = no; 01 = yes)
00000000 =FFFFFE2E                  v_shoes:		equ $FFFFFE2E	; speed shoes status (00 = no; 01 = yes)
00000000 =FFFFFE30                  v_lastlamp:	equ $FFFFFE30	; number of the last lamppost you hit
00000000 =FFFFFE32                  v_lamp_xpos:	equ v_lastlamp+2	; x-axis for Sonic to respawn at lamppost (2 bytes)
00000000 =FFFFFE34                  v_lamp_ypos:	equ v_lastlamp+4	; y-axis for Sonic to respawn at lamppost (2 bytes)
00000000 =FFFFFE36                  v_lamp_rings:	equ v_lastlamp+6	; rings stored at lamppost (2 bytes)
00000000 =FFFFFE38                  v_lamp_time:	equ v_lastlamp+8	; time stored at lamppost (2 bytes)
00000000 =FFFFFE3C                  v_lamp_dle:	equ v_lastlamp+$C	; dynamic level event routine counter at lamppost
00000000 =FFFFFE3E                  v_lamp_limitbtm:	equ v_lastlamp+$E	; level bottom boundary at lamppost (2 bytes)
00000000 =FFFFFE40                  v_lamp_scrx:	equ v_lastlamp+$10 ; x-axis screen at lamppost (2 bytes)
00000000 =FFFFFE42                  v_lamp_scry:	equ v_lastlamp+$12 ; y-axis screen at lamppost (2 bytes)
00000000                            
00000000 =FFFFFE50                  v_lamp_wtrpos:	equ v_lastlamp+$20 ; water position at lamppost (2 bytes)
00000000 =FFFFFE52                  v_lamp_wtrrout:	equ v_lastlamp+$22 ; water routine at lamppost
00000000 =FFFFFE53                  v_lamp_wtrstat:	equ v_lastlamp+$23 ; water state at lamppost
00000000 =FFFFFE54                  v_lamp_lives:	equ v_lastlamp+$24 ; lives counter at lamppost
00000000 =FFFFFE57                  v_emeralds:	equ $FFFFFE57	; number of chaos emeralds
00000000 =FFFFFE58                  v_emldlist:	equ $FFFFFE58	; which individual emeralds you have (00 = no; 01 = yes) (6 bytes)
00000000 =FFFFFE5E                  v_oscillate:	equ $FFFFFE5E	; values which oscillate - for swinging platforms, et al ($42 bytes)
00000000 =FFFFFEC0                  v_ani0_time:	equ $FFFFFEC0	; synchronised sprite animation 0 - time until next frame (used for synchronised animations)
00000000 =FFFFFEC1                  v_ani0_frame:	equ $FFFFFEC1	; synchronised sprite animation 0 - current frame
00000000 =FFFFFEC2                  v_ani1_time:	equ $FFFFFEC2	; synchronised sprite animation 1 - time until next frame
00000000 =FFFFFEC3                  v_ani1_frame:	equ $FFFFFEC3	; synchronised sprite animation 1 - current frame
00000000 =FFFFFEC4                  v_ani2_time:	equ $FFFFFEC4	; synchronised sprite animation 2 - time until next frame
00000000 =FFFFFEC5                  v_ani2_frame:	equ $FFFFFEC5	; synchronised sprite animation 2 - current frame
00000000 =FFFFFEC6                  v_ani3_time:	equ $FFFFFEC6	; synchronised sprite animation 3 - time until next frame
00000000 =FFFFFEC7                  v_ani3_frame:	equ $FFFFFEC7	; synchronised sprite animation 3 - current frame
00000000 =FFFFFEC8                  v_ani3_buf:	equ $FFFFFEC8	; synchronised sprite animation 3 - info buffer (2 bytes)
00000000 =FFFFFEC9                  v_ani4_frame:	equ $FFFFFEC9	; synchronised sprite animation 4 - current frame
00000000 =FFFFFEF0                  v_limittopdb:	equ $FFFFFEF0	; level upper boundary, buffered for debug mode (2 bytes)
00000000 =FFFFFEF2                  v_limitbtmdb:	equ $FFFFFEF2	; level bottom boundary, buffered for debug mode (2 bytes)
00000000                            
00000000 =FFFFFF10                  v_screenposx_dup:	equ $FFFFFF10	; screen position x (duplicate) (2 bytes)
00000000 =FFFFFF14                  v_screenposy_dup:	equ $FFFFFF14	; screen position y (duplicate) (2 bytes)
00000000 =FFFFFF18                  v_bgscreenposx_dup:	equ $FFFFFF18	; background screen position x (duplicate) (2 bytes)
00000000 =FFFFFF1C                  v_bgscreenposy_dup:	equ $FFFFFF1C	; background screen position y (duplicate) (2 bytes)
00000000 =FFFFFF20                  v_bg2screenposx_dup:	equ $FFFFFF20	; 2 bytes
00000000 =FFFFFF24                  v_bg2screenposy_dup:	equ $FFFFFF24	; 2 bytes
00000000 =FFFFFF28                  v_bg3screenposx_dup:	equ $FFFFFF28	; 2 bytes
00000000 =FFFFFF2C                  v_bg3screenposy_dup:	equ $FFFFFF2C	; 2 bytes
00000000 =FFFFFF30                  v_fg_scroll_flags_dup:	equ $FFFFFF30
00000000 =FFFFFF32                  v_bg1_scroll_flags_dup:	equ $FFFFFF32
00000000 =FFFFFF34                  v_bg2_scroll_flags_dup:	equ $FFFFFF34
00000000 =FFFFFF36                  v_bg3_scroll_flags_dup:	equ $FFFFFF36
00000000                            
00000000 =FFFFFF80                  v_levseldelay:	equ $FFFFFF80	; level select - time until change when up/down is held (2 bytes)
00000000 =FFFFFF82                  v_levselitem:	equ $FFFFFF82	; level select - item selected (2 bytes)
00000000 =FFFFFF84                  v_levselsound:	equ $FFFFFF84	; level select - sound selected (2 bytes)
00000000 =FFFFFFB0                  Title_screen_option:	equ $FFFFFFB0
00000000 =FFFFFFC0                  v_scorecopy:	equ $FFFFFFC0	; score, duplicate (4 bytes)
00000000 =FFFFFFC0                  v_scorelife:	equ $FFFFFFC0	; points required for an extra life (4 bytes) (JP1 only)
00000000 =FFFFFFE0                  f_levselcheat:	equ $FFFFFFE0	; level select cheat flag
00000000 =FFFFFFE1                  f_slomocheat:	equ $FFFFFFE1	; slow motion & frame advance cheat flag
00000000 =FFFFFFE2                  f_debugcheat:	equ $FFFFFFE2	; debug mode cheat flag
00000000 =FFFFFFE3                  f_creditscheat:	equ $FFFFFFE3	; hidden credits & press start cheat flag
00000000 =FFFFFFE4                  v_title_dcount:	equ $FFFFFFE4	; number of times the d-pad is pressed on title screen (2 bytes)
00000000 =FFFFFFE6                  v_title_ccount:	equ $FFFFFFE6	; number of times C is pressed on title screen (2 bytes)
00000000                            
00000000 =FFFFFFF0                  f_demo:		equ $FFFFFFF0	; demo mode flag (0 = no; 1 = yes; $8001 = ending) (2 bytes)
00000000 =FFFFFFF2                  v_demonum:	equ $FFFFFFF2	; demo level number (not the same as the level number) (2 bytes)
00000000 =FFFFFFF4                  v_creditsnum:	equ $FFFFFFF4	; credits index number (2 bytes)
00000000 =FFFFFFF8                  v_megadrive:	equ $FFFFFFF8	; Megadrive machine type
00000000 =FFFFFFFA                  f_debugmode:	equ $FFFFFFFA	; debug mode flag (sometimes 2 bytes)
00000000 =FFFFFFFC                  v_init:		equ $FFFFFFFC	; 'init' text string (4 bytes)
00000000                            
00000000 =FFFFF5C3                  f_emeraldm:	equ $FFFFF5C3
00000000 =FFFFF5C4                  v_tagwater:    	equ $FFFFF5C4   ; TIS  
00000000 =FFFFFF92                  v_watersplashpos:    equ $FFFFFF92    ; TIS  
00000000 =00000039                  f_spindash	= $39
00000000 =FFFFF5C6                  v_Saved_music:	equ $FFFFF5C6
00000000 =FFFFF5C8                  v_rshield:	equ $FFFFF5C8	; shield status (00 = no; 01 = yes)
00000000 =FFFFF5C9                  v_gshield:	equ $FFFFF5C9	; shield status (00 = no; 01 = yes)
00000000 =FFFFF5CA                  v_spshield:	equ $FFFFF5CA	; shield status (00 = no; 01 = yes)
00000000                            
00000000 =FFFFFF8C                  Options_menu_box:	equ  $FFFFFF8C
00000000 =FFFFFF8C                  Options_menu_box:	equ  $FFFFFF8C
00000000                            	include	"Macros.asm"
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; reads ASCII strings and passes them to character generator
00000000                            ; ---------------------------------------------------------------------------
00000000                            asc        macro str
00000000                            ct =    0                            ; accumulates the total num of characters
00000000                                rept narg                        ; repeat for every argumeny
00000000                            lc =        0                        ; the position in the string
00000000                            
00000000                                dc.b strlen(\str)-1                    ; put the string length before the string itself
00000000                                rept strlen(\str)                    ; repeat for each character in string
00000000                            cc         substr lc+1,lc+1,\str                ; get a single character into cc
00000000                            arg =        '\cc'                        ; convert it to a character
00000000                                        char.b arg                ; put the character into the ROM (as byte)
00000000                            
00000000                            lc =        lc+1                        ; go to the next character
00000000                            ct =        ct+1                        ; increment character count
00000000                                    endr
00000000                                shift
00000000                                endr
00000000                                endm
00000000                            
00000000                            ; translates ASCII character to proper hex value
00000000                            char        macro c
00000000                                if c=' '
00000000                                    dc.\0 0                        ; example 1: single letters
00000000                            
00000000                                elseif c='*'
00000000                                    dc.\0 $1A                        ; example 1: single letters
00000000                            
00000000                                elseif (c>='0')&(c<='9')
00000000                                    dc.\0 \c-'0'+$20                ; example 2: range of letters ; gem note: '0' = $30. it's the ascii representation
00000000                            
00000000                                elseif (c>='A')&(c<='Z')
00000000                                    dc.\0 \c-$41+$1E                ; example 2: range of letters ; gem note: '0' = $30. it's the ascii representation
00000000                            
00000000                                else
00000000                                    dc.\0 \c                    ; example 3: any other character
00000000                                endif
00000000                                endm	
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; Align and pad
00000000                            ; input: length to align to, value to use as padding (default is 0)
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            align:	macro
00000000                            	if (narg=1)
00000000                            	dcb.b \1-(*%\1),0
00000000                            	else
00000000                            	dcb.b \1-(*%\1),\2
00000000                            	endc
00000000                            	endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; Set a VRAM address via the VDP control port.
00000000                            ; input: 16-bit VRAM address, control port (default is ($C00004).l)
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            locVRAM:	macro loc,controlport
00000000                            		if (narg=1)
00000000                            		move.l	#($40000000+((loc&$3FFF)<<16)+((loc&$C000)>>14)),(vdp_control_port).l
00000000                            		else
00000000                            		move.l	#($40000000+((loc&$3FFF)<<16)+((loc&$C000)>>14)),controlport
00000000                            		endc
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; DMA copy data from 68K (ROM/RAM) to the VRAM
00000000                            ; input: source, length, destination
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            writeVRAM:	macro
00000000                            		lea	(vdp_control_port).l,a5
00000000                            		move.l	#$94000000+(((\2>>1)&$FF00)<<8)+$9300+((\2>>1)&$FF),(a5)
00000000                            		move.l	#$96000000+(((\1>>1)&$FF00)<<8)+$9500+((\1>>1)&$FF),(a5)
00000000                            		move.w	#$9700+((((\1>>1)&$FF0000)>>16)&$7F),(a5)
00000000                            		move.w	#$4000+(\3&$3FFF),(a5)
00000000                            		move.w	#$80+((\3&$C000)>>14),(v_vdp_buffer2).w
00000000                            		move.w	(v_vdp_buffer2).w,(a5)
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; DMA copy data from 68K (ROM/RAM) to the CRAM
00000000                            ; input: source, length, destination
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            writeCRAM:	macro
00000000                            		lea	(vdp_control_port).l,a5
00000000                            		move.l	#$94000000+(((\2>>1)&$FF00)<<8)+$9300+((\2>>1)&$FF),(a5)
00000000                            		move.l	#$96000000+(((\1>>1)&$FF00)<<8)+$9500+((\1>>1)&$FF),(a5)
00000000                            		move.w	#$9700+((((\1>>1)&$FF0000)>>16)&$7F),(a5)
00000000                            		move.w	#$C000+(\3&$3FFF),(a5)
00000000                            		move.w	#$80+((\3&$C000)>>14),(v_vdp_buffer2).w
00000000                            		move.w	(v_vdp_buffer2).w,(a5)
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; DMA fill VRAM with a value
00000000                            ; input: value, length, destination
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            fillVRAM:	macro value,length,loc
00000000                            		lea	(vdp_control_port).l,a5
00000000                            		move.w	#$8F01,(a5)
00000000                            		move.l	#$94000000+((length&$FF00)<<8)+$9300+(length&$FF),(a5)
00000000                            		move.w	#$9780,(a5)
00000000                            		move.l	#$40000080+((loc&$3FFF)<<16)+((loc&$C000)>>14),(a5)
00000000                            		move.w	#value,(vdp_data_port).l
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; Copy a tilemap from 68K (ROM/RAM) to the VRAM without using DMA
00000000                            ; input: source, destination, width [cells], height [cells]
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            copyTilemap:	macro source,loc,width,height
00000000                            		lea	(source).l,a1
00000000                            		move.l	#$40000000+((loc&$3FFF)<<16)+((loc&$C000)>>14),d0
00000000                            		moveq	#width,d1
00000000                            		moveq	#height,d2
00000000                            		jsr	TilemapToVRAM
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; stop the Z80
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            stopZ80:	macro
00000000                            		move.w	#$100,(z80_bus_request).l
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; wait for Z80 to stop
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            waitZ80:	macro
00000000                            	@wait:	btst	#0,(z80_bus_request).l
00000000                            		bne.s	@wait
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; reset the Z80
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            resetZ80:	macro
00000000                            		move.w	#$100,(z80_reset).l
00000000                            		endm
00000000                            
00000000                            resetZ80a:	macro
00000000                            		move.w	#0,(z80_reset).l
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; start the Z80
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            startZ80:	macro
00000000                            		move.w	#0,(z80_bus_request).l
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; disable interrupts
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            disable_ints:	macro
00000000                            		move	#$2700,sr
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; enable interrupts
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            enable_ints:	macro
00000000                            		move	#$2300,sr
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; long conditional jumps
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            jhi:		macro loc
00000000                            		bls.s	@nojump
00000000                            		jmp	loc
00000000                            	@nojump:
00000000                            		endm
00000000                            
00000000                            jcc:		macro loc
00000000                            		bcs.s	@nojump
00000000                            		jmp	loc
00000000                            	@nojump:
00000000                            		endm
00000000                            
00000000                            jhs:		macro loc
00000000                            		jcc	loc
00000000                            		endm
00000000                            
00000000                            jls:		macro loc
00000000                            		bhi.s	@nojump
00000000                            		jmp	loc
00000000                            	@nojump:
00000000                            		endm
00000000                            
00000000                            jcs:		macro loc
00000000                            		bcc.s	@nojump
00000000                            		jmp	loc
00000000                            	@nojump:
00000000                            		endm
00000000                            
00000000                            jlo:		macro loc
00000000                            		jcs	loc
00000000                            		endm
00000000                            
00000000                            jeq:		macro loc
00000000                            		bne.s	@nojump
00000000                            		jmp	loc
00000000                            	@nojump:
00000000                            		endm
00000000                            
00000000                            jne:		macro loc
00000000                            		beq.s	@nojump
00000000                            		jmp	loc
00000000                            	@nojump:
00000000                            		endm
00000000                            
00000000                            jgt:		macro loc
00000000                            		ble.s	@nojump
00000000                            		jmp	loc
00000000                            	@nojump:
00000000                            		endm
00000000                            
00000000                            jge:		macro loc
00000000                            		blt.s	@nojump
00000000                            		jmp	loc
00000000                            	@nojump:
00000000                            		endm
00000000                            
00000000                            jle:		macro loc
00000000                            		bgt.s	@nojump
00000000                            		jmp	loc
00000000                            	@nojump:
00000000                            		endm
00000000                            
00000000                            jlt:		macro loc
00000000                            		bge.s	@nojump
00000000                            		jmp	loc
00000000                            	@nojump:
00000000                            		endm
00000000                            
00000000                            jpl:		macro loc
00000000                            		bmi.s	@nojump
00000000                            		jmp	loc
00000000                            	@nojump:
00000000                            		endm
00000000                            
00000000                            jmi:		macro loc
00000000                            		bpl.s	@nojump
00000000                            		jmp	loc
00000000                            	@nojump:
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; check if object moves out of range
00000000                            ; input: location to jump to if out of range, x-axis pos (obX(a0) by default)
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            out_of_range:	macro exit,pos
00000000                            		if (narg=2)
00000000                            		move.w	pos,d0		; get object position (if specified as not obX)
00000000                            		else
00000000                            		move.w	obX(a0),d0	; get object position
00000000                            		endc
00000000                            		andi.w	#$FF80,d0	; round down to nearest $80
00000000                            		move.w	(v_screenposx).w,d1 ; get screen position
00000000                            		subi.w	#128,d1
00000000                            		andi.w	#$FF80,d1
00000000                            		sub.w	d1,d0		; approx distance between object and screen
00000000                            		cmpi.w	#128+320+192,d0
00000000                            		bhi.\0	exit
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; play a sound effect or music
00000000                            ; input: track, terminate routine, branch or jump, move operand size
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            music:		macro track,terminate,branch,byte
00000000                            		  if OptimiseSound=1
00000000                            			move.b	#track,(v_snddriver_ram+v_playsnd1).l
00000000                            		    if terminate=1
00000000                            			rts
00000000                            		    endc
00000000                            		  else
00000000                            	 	    if byte=1
00000000                            			move.b	#track,d0
00000000                            		    else
00000000                            			move.w	#track,d0
00000000                            		    endc
00000000                            		    if branch=1
00000000                            		      if terminate=0
00000000                            			bsr.w	PlaySound
00000000                            		      else
00000000                            			bra.w	PlaySound
00000000                            		      endc
00000000                            		    else
00000000                            		      if terminate=0
00000000                            			jsr	(PlaySound).l
00000000                            		      else
00000000                            			jmp	(PlaySound).l
00000000                            		      endc
00000000                            		    endc
00000000                            		  endc
00000000                            		endm
00000000                            
00000000                            sfx:		macro track,terminate,branch,byte
00000000                            		  if OptimiseSound=1
00000000                            			move.b	#track,(v_snddriver_ram+v_playsnd2).l
00000000                            		    if terminate=1
00000000                            			rts
00000000                            		    endc
00000000                            		  else
00000000                            	 	    if byte=1
00000000                            			move.b	#track,d0
00000000                            		    else
00000000                            			move.w	#track,d0
00000000                            		    endc
00000000                            		    if branch=1
00000000                            		      if terminate=0
00000000                            			bsr.w	PlaySound_Special
00000000                            		      else
00000000                            			bra.w	PlaySound_Special
00000000                            		      endc
00000000                            		    else
00000000                            		      if terminate=0
00000000                            			jsr	(PlaySound_Special).l
00000000                            		      else
00000000                            			jmp	(PlaySound_Special).l
00000000                            		      endc
00000000                            		    endc
00000000                            		  endc
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; bankswitch between SRAM and ROM
00000000                            ; (remember to enable SRAM in the header first!)
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            gotoSRAM:	macro
00000000                            		move.b  #1,($A130F1).l
00000000                            		endm
00000000                            
00000000                            gotoROM:	macro
00000000                            		move.b  #0,($A130F1).l
00000000                            		endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; compare the size of an index with ZoneCount constant
00000000                            ; (should be used immediately after the index)
00000000                            ; input: index address, element size
00000000                            ; ---------------------------------------------------------------------------
00000000                            
00000000                            zonewarning:	macro loc,elementsize
00000000                            	@end:
00000000                            		if (@end-loc)-(ZoneCount*elementsize)<>0
00000000                            		inform 1,"Size of \loc ($%h) does not match ZoneCount ($\#ZoneCount).",(@end-loc)/elementsize
00000000                            		endc
00000000                            		endm
00000000                            		endm
00000000                            
00000000 =00000000                  EnableSRAM:	equ 0	; change to 1 to enable SRAM
00000000 =00000001                  BackupSRAM:	equ 1
00000000 =00000003                  AddressSRAM:	equ 3	; 0 = odd+even; 2 = even only; 3 = odd only
00000000                            
00000000                            ; Change to 0 to build the original version of the game, dubbed REV00
00000000                            ; Change to 1 to build the later vesion, dubbed REV01, which includes various bugfixes and enhancements
00000000                            ; Change to 2 to build the version from Sonic Mega Collection, dubbed REVXB, which fixes the infamous "spike bug"
00000000 =00000002                  Revision:	equ 2
00000000                            
00000000 =00000006                  ZoneCount:	equ 6	; discrete zones are: GHZ, MZ, SYZ, LZ, SLZ, and SBZ
00000000                            
00000000 =00000000                  OptimiseSound:	equ 0	; change to 1 to optimise sound queuing
00000000                            
00000000                            ; ===========================================================================
00000000                            
00000000                            StartOfRom:
00000000 00FF FE00                  Vectors:	dc.l v_systemstack&$FFFFFF	; Initial stack pointer value
00000004 0000 0000                  		dc.l EntryPoint			; Start of program
00000008 0000 0000                  		dc.l BusError			; Bus error
0000000C 0000 0000                  		dc.l AddressError		; Address error (4)
00000010 0000 0000                  		dc.l IllegalInstr		; Illegal instruction
00000014 0000 0000                  		dc.l ZeroDivide			; Division by zero
00000018 0000 0000                  		dc.l ChkInstr			; CHK exception
0000001C 0000 0000                  		dc.l TrapvInstr			; TRAPV exception (8)
00000020 0000 0000                  		dc.l PrivilegeViol		; Privilege violation
00000024 0000 0000                  		dc.l Trace				; TRACE exception
00000028 0000 0000                  		dc.l Line1010Emu		; Line-A emulator
0000002C 0000 0000                  		dc.l Line1111Emu		; Line-F emulator (12)
00000030 0000 0000                  		dc.l ErrorExcept		; Unused (reserved)
00000034 0000 0000                  		dc.l ErrorExcept		; Unused (reserved)
00000038 0000 0000                  		dc.l ErrorExcept		; Unused (reserved)
0000003C 0000 0000                  		dc.l ErrorExcept		; Unused (reserved) (16)
00000040 0000 0000                  		dc.l ErrorExcept		; Unused (reserved)
00000044 0000 0000                  		dc.l ErrorExcept		; Unused (reserved)
00000048 0000 0000                  		dc.l ErrorExcept		; Unused (reserved)
0000004C 0000 0000                  		dc.l ErrorExcept		; Unused (reserved) (20)
00000050 0000 0000                  		dc.l ErrorExcept		; Unused (reserved)
00000054 0000 0000                  		dc.l ErrorExcept		; Unused (reserved)
00000058 0000 0000                  		dc.l ErrorExcept		; Unused (reserved)
0000005C 0000 0000                  		dc.l ErrorExcept		; Unused (reserved) (24)
00000060 0000 0000                  		dc.l ErrorExcept		; Spurious exception
00000064 0000 0000                  		dc.l ErrorTrap			; IRQ level 1
00000068 0000 0000                  		dc.l ErrorTrap			; IRQ level 2
0000006C 0000 0000                  		dc.l ErrorTrap			; IRQ level 3 (28)
00000070 0000 0000                  		dc.l HBlank				; IRQ level 4 (horizontal retrace interrupt)
00000074 0000 0000                  		dc.l ErrorTrap			; IRQ level 5
00000078 0000 0000                  		dc.l VBlank				; IRQ level 6 (vertical retrace interrupt)
0000007C 0000 0000                  		dc.l ErrorTrap			; IRQ level 7 (32)
00000080 0000 0000                  		dc.l ErrorTrap			; TRAP #00 exception
00000084 0000 0000                  		dc.l ErrorTrap			; TRAP #01 exception
00000088 0000 0000                  		dc.l ErrorTrap			; TRAP #02 exception
0000008C 0000 0000                  		dc.l ErrorTrap			; TRAP #03 exception (36)
00000090 0000 0000                  		dc.l ErrorTrap			; TRAP #04 exception
00000094 0000 0000                  		dc.l ErrorTrap			; TRAP #05 exception
00000098 0000 0000                  		dc.l ErrorTrap			; TRAP #06 exception
0000009C 0000 0000                  		dc.l ErrorTrap			; TRAP #07 exception (40)
000000A0 0000 0000                  		dc.l ErrorTrap			; TRAP #08 exception
000000A4 0000 0000                  		dc.l ErrorTrap			; TRAP #09 exception
000000A8 0000 0000                  		dc.l ErrorTrap			; TRAP #10 exception
000000AC 0000 0000                  		dc.l ErrorTrap			; TRAP #11 exception (44)
000000B0 0000 0000                  		dc.l ErrorTrap			; TRAP #12 exception
000000B4 0000 0000                  		dc.l ErrorTrap			; TRAP #13 exception
000000B8 0000 0000                  		dc.l ErrorTrap			; TRAP #14 exception
000000BC 0000 0000                  		dc.l ErrorTrap			; TRAP #15 exception (48)
000000C0 0000 0000                  		dc.l ErrorTrap			; Unused (reserved)
000000C4 0000 0000                  		dc.l ErrorTrap			; Unused (reserved)
000000C8 0000 0000                  		dc.l ErrorTrap			; Unused (reserved)
000000CC 0000 0000                  		dc.l ErrorTrap			; Unused (reserved)
000000D0 0000 0000                  		dc.l ErrorTrap			; Unused (reserved)
000000D4 0000 0000                  		dc.l ErrorTrap			; Unused (reserved)
000000D8 0000 0000                  		dc.l ErrorTrap			; Unused (reserved)
000000DC 0000 0000                  		dc.l ErrorTrap			; Unused (reserved)
000000E0                            loc_E0:
000000E0                            		; Relocated code from Spik_Hurt. REVXB was a nasty hex-edit.
000000E0 2628 000C                  		move.l	obY(a0),d3
000000E4 3028 0012                  		move.w	obVelY(a0),d0
000000E8 48C0                       		ext.l	d0
000000EA E180                       		asl.l	#8,d0
000000EC 4EF9 0000 0000             		jmp	(loc_D5A2).l
000000F2                            
000000F2 0000                       		dc.w ErrorTrap
000000F4 0000 0000                  		dc.l ErrorTrap
000000F8 0000 0000                  		dc.l ErrorTrap
000000FC 0000 0000                  		dc.l ErrorTrap
00000100 5345 4741 204D 4547 4120+  Console:	dc.b "SEGA MEGA DRIVE " ; Hardware system ID (Console name)
00000110 2843 2953 4547 4120 3139+  Date:		dc.b "(C)SEGA 1991.APR" ; Copyright holder and release date (generally year)
00000120 534F 4E49 4320 5355 4E56+  Title_Local:	dc.b "SONIC SUNVENTURE                                " ; Domestic name
00000150 534F 4E49 4320 5355 4E56+  Title_Int:	dc.b "SONIC SUNVENTURE                                " ; International name
00000180 474D 2030 3030 3034 3034+  			dc.b "GM 00004049-01" ; Serial/version number (Rev non-0)
0000018E 0000                       Checksum: dc.w $0
00000190 4A20 2020 2020 2020 2020+  		dc.b "J               " ; I/O support
000001A0 0000 0000                  RomStartLoc:	dc.l StartOfRom		; Start address of ROM
000001A4 0000 0000                  RomEndLoc:	dc.l EndOfRom-1		; End address of ROM
000001A8 00FF 0000                  RamStartLoc:	dc.l $FF0000		; Start address of RAM
000001AC 00FF FFFF                  RamEndLoc:	dc.l $FFFFFF		; End address of RAM
000001B0 2020 2020                  		dc.l $20202020
000001B4 2020 2020                  		dc.l $20202020		; SRAM start ($200001)
000001B8 2020 2020                  		dc.l $20202020		; SRAM end ($20xxxx)
000001BC 2020 2020 2020 2020 2020+  Notes:		dc.b "                                                    " ; Notes (unused, anything can be put in this space, but it has to be 52 bytes.)
000001F0 4A55 4520 2020 2020 2020+  Region:		dc.b "JUE             " ; Region (Country code)
00000200                            EndOfHeader:
00000200                            
00000200                            ; ===========================================================================
00000200                            ; Crash/Freeze the 68000. Unlike Sonic 2, Sonic 1 uses the 68000 for playing music, so it stops too
00000200                            
00000200                            ErrorTrap:
00000200 4E71                       		nop	
00000202 4E71                       		nop	
00000204 60FA                       		bra.s	ErrorTrap
00000206                            ; ===========================================================================
00000206                            
00000206                            EntryPoint:
00000206 4AB9 00A1 0008             		tst.l	(z80_port_1_control).l ; test port A & B control registers
0000020C 6600                       		bne.s	PortA_Ok
0000020E 4A79 00A1 000C             		tst.w	(z80_expansion_control).l ; test port C control register
00000214                            
00000214                            PortA_Ok:
00000214 6600                       		bne.s	SkipSetup ; Skip the VDP and Z80 setup code if port A, B or C is ok...?
00000216 4BFA 0000                  		lea	SetupValues(pc),a5	; Load setup values array address.
0000021A 4C9D 00E0                  		movem.w	(a5)+,d5-d7
0000021E 4CDD 1F00                  		movem.l	(a5)+,a0-a4
00000222 1029 EF01                  		move.b	-$10FF(a1),d0	; get hardware version (from $A10001)
00000226 0200 000F                  		andi.b	#$F,d0
0000022A 6700                       		beq.s	SkipSecurity	; If the console has no TMSS, skip the security stuff.
0000022C 237C 5345 4741 2F00        		move.l	#'SEGA',$2F00(a1) ; move "SEGA" to TMSS register ($A14000)
00000234                            
00000234                            SkipSecurity:
00000234 3014                       		move.w	(a4),d0	; clear write-pending flag in VDP to prevent issues if the 68k has been reset in the middle of writing a command long word to the VDP.
00000236 7000                       		moveq	#0,d0	; clear d0
00000238 2C40                       		movea.l	d0,a6	; clear a6
0000023A 4E66                       		move.l	a6,usp	; set usp to $0
0000023C                            
0000023C 7217                       		moveq	#$17,d1
0000023E                            VDPInitLoop:
0000023E 1A1D                       		move.b	(a5)+,d5	; add $8000 to value
00000240 3885                       		move.w	d5,(a4)		; move value to	VDP register
00000242 DA47                       		add.w	d7,d5		; next register
00000244 51C9 FFF8                  		dbf	d1,VDPInitLoop
00000248                            		
00000248 289D                       		move.l	(a5)+,(a4)
0000024A 3680                       		move.w	d0,(a3)		; clear	the VRAM
0000024C 3287                       		move.w	d7,(a1)		; stop the Z80
0000024E 3487                       		move.w	d7,(a2)		; reset	the Z80
00000250                            
00000250                            WaitForZ80:
00000250 0111                       		btst	d0,(a1)		; has the Z80 stopped?
00000252 66FC                       		bne.s	WaitForZ80	; if not, branch
00000254                            
00000254 7425                       		moveq	#$25,d2
00000256                            Z80InitLoop:
00000256 10DD                       		move.b	(a5)+,(a0)+
00000258 51CA FFFC                  		dbf	d2,Z80InitLoop
0000025C                            		
0000025C 3480                       		move.w	d0,(a2)
0000025E 3280                       		move.w	d0,(a1)		; start	the Z80
00000260 3487                       		move.w	d7,(a2)		; reset	the Z80
00000262                            
00000262                            ClrRAMLoop:
00000262 2D00                       		move.l	d0,-(a6)	; clear 4 bytes of RAM
00000264 51CE FFFC                  		dbf	d6,ClrRAMLoop	; repeat until the entire RAM is clear
00000268 289D                       		move.l	(a5)+,(a4)	; set VDP display mode and increment mode
0000026A 289D                       		move.l	(a5)+,(a4)	; set VDP to CRAM write
0000026C                            
0000026C 761F                       		moveq	#$1F,d3	; set repeat times
0000026E                            ClrCRAMLoop:
0000026E 2680                       		move.l	d0,(a3)	; clear 2 palettes
00000270 51CB FFFC                  		dbf	d3,ClrCRAMLoop	; repeat until the entire CRAM is clear
00000274 289D                       		move.l	(a5)+,(a4)	; set VDP to VSRAM write
00000276                            
00000276 7813                       		moveq	#$13,d4
00000278                            ClrVSRAMLoop:
00000278 2680                       		move.l	d0,(a3)	; clear 4 bytes of VSRAM.
0000027A 51CC FFFC                  		dbf	d4,ClrVSRAMLoop	; repeat until the entire VSRAM is clear
0000027E 7A03                       		moveq	#3,d5
00000280                            
00000280                            PSGInitLoop:
00000280 175D 0011                  		move.b	(a5)+,$11(a3)	; reset	the PSG
00000284 51CD FFFA                  		dbf	d5,PSGInitLoop	; repeat for other channels
00000288 3480                       		move.w	d0,(a2)
0000028A 4CD6 7FFF                  		movem.l	(a6),d0-a6	; clear all registers
0000028E 46FC 2700                  		disable_ints
00000292                            
00000292                            SkipSetup:
00000292 6000                       		bra.s	GameProgram	; begin game
00000294                            
00000294                            ; ===========================================================================
00000294 8000                       SetupValues:	dc.w $8000		; VDP register start number
00000296 3FFF                       		dc.w $3FFF		; size of RAM/4
00000298 0100                       		dc.w $100		; VDP register diff
0000029A                            
0000029A 00A0 0000                  		dc.l z80_ram		; start	of Z80 RAM
0000029E 00A1 1100                  		dc.l z80_bus_request	; Z80 bus request
000002A2 00A1 1200                  		dc.l z80_reset		; Z80 reset
000002A6 00C0 0000                  		dc.l vdp_data_port	; VDP data
000002AA 00C0 0004                  		dc.l vdp_control_port	; VDP control
000002AE                            
000002AE 04                         		dc.b 4			; VDP $80 - 8-colour mode
000002AF 14                         		dc.b $14		; VDP $81 - Megadrive mode, DMA enable
000002B0 30                         		dc.b ($C000>>10)	; VDP $82 - foreground nametable address
000002B1 3C                         		dc.b ($F000>>10)	; VDP $83 - window nametable address
000002B2 07                         		dc.b ($E000>>13)	; VDP $84 - background nametable address
000002B3 6C                         		dc.b ($D800>>9)		; VDP $85 - sprite table address
000002B4 00                         		dc.b 0			; VDP $86 - unused
000002B5 00                         		dc.b 0			; VDP $87 - background colour
000002B6 00                         		dc.b 0			; VDP $88 - unused
000002B7 00                         		dc.b 0			; VDP $89 - unused
000002B8 FF                         		dc.b 255		; VDP $8A - HBlank register
000002B9 00                         		dc.b 0			; VDP $8B - full screen scroll
000002BA 81                         		dc.b $81		; VDP $8C - 40 cell display
000002BB 37                         		dc.b ($DC00>>10)	; VDP $8D - hscroll table address
000002BC 00                         		dc.b 0			; VDP $8E - unused
000002BD 01                         		dc.b 1			; VDP $8F - VDP increment
000002BE 01                         		dc.b 1			; VDP $90 - 64 cell hscroll size
000002BF 00                         		dc.b 0			; VDP $91 - window h position
000002C0 00                         		dc.b 0			; VDP $92 - window v position
000002C1 FFFF                       		dc.w $FFFF		; VDP $93/94 - DMA length
000002C3 0000                       		dc.w 0			; VDP $95/96 - DMA source
000002C5 80                         		dc.b $80		; VDP $97 - DMA fill VRAM
000002C6 4000 0080                  		dc.l $40000080		; VRAM address 0
000002CA                            
000002CA AF                         		dc.b $AF		; xor	a
000002CB 01D9 1F                    		dc.b $01, $D9, $1F	; ld	bc,1fd9h
000002CE 1127 00                    		dc.b $11, $27, $00	; ld	de,0027h
000002D1 2126 00                    		dc.b $21, $26, $00	; ld	hl,0026h
000002D4 F9                         		dc.b $F9		; ld	sp,hl
000002D5 77                         		dc.b $77		; ld	(hl),a
000002D6 EDB0                       		dc.b $ED, $B0		; ldir
000002D8 DDE1                       		dc.b $DD, $E1		; pop	ix
000002DA FDE1                       		dc.b $FD, $E1		; pop	iy
000002DC ED47                       		dc.b $ED, $47		; ld	i,a
000002DE ED4F                       		dc.b $ED, $4F		; ld	r,a
000002E0 D1                         		dc.b $D1		; pop	de
000002E1 E1                         		dc.b $E1		; pop	hl
000002E2 F1                         		dc.b $F1		; pop	af
000002E3 08                         		dc.b $08		; ex	af,af'
000002E4 D9                         		dc.b $D9		; exx
000002E5 C1                         		dc.b $C1		; pop	bc
000002E6 D1                         		dc.b $D1		; pop	de
000002E7 E1                         		dc.b $E1		; pop	hl
000002E8 F1                         		dc.b $F1		; pop	af
000002E9 F9                         		dc.b $F9		; ld	sp,hl
000002EA F3                         		dc.b $F3		; di
000002EB ED56                       		dc.b $ED, $56		; im1
000002ED 36E9                       		dc.b $36, $E9		; ld	(hl),e9h
000002EF E9                         		dc.b $E9		; jp	(hl)
000002F0                            
000002F0 8104                       		dc.w $8104		; VDP display mode
000002F2 8F02                       		dc.w $8F02		; VDP increment
000002F4 C000 0000                  		dc.l $C0000000		; CRAM write mode
000002F8 4000 0010                  		dc.l $40000010		; VSRAM address 0
000002FC                            
000002FC 9FBF DFFF                  		dc.b $9F, $BF, $DF, $FF	; values for PSG channel volumes
00000300                            ; ===========================================================================
00000300                            
00000300                            GameProgram:
00000300 4A79 00C0 0004             		tst.w	(vdp_control_port).l
00000306 0839 0006 00A1 000D        		btst	#6,($A1000D).l
0000030E 6700                       		beq.s	CheckSumCheck
00000310 0CB8 696E 6974 FFFC        		cmpi.l	#'init',(v_init).w ; has checksum routine already run?
00000318 6700 0000                  		beq.w	GameInit	; if yes, branch
0000031C                            
0000031C                            CheckSumCheck:
0000031C 207C 0000 0200             		movea.l	#EndOfHeader,a0	; start	checking bytes after the header	($200)
00000322 227C 0000 01A4             		movea.l	#RomEndLoc,a1	; stop at end of ROM
00000328 2011                       		move.l	(a1),d0
0000032A 7200                       		moveq	#0,d1
0000032C                            
0000032C                            	@loop:
0000032C D258                       		add.w	(a0)+,d1
0000032E B088                       		cmp.l	a0,d0
00000330 64FA                       		bhs.s	@loop
00000332 227C 0000 018E             		movea.l	#Checksum,a1	; read the checksum
00000338 B251                       		cmp.w	(a1),d1		; compare checksum in header to ROM
0000033A 6600 0000                  		bne.w	CheckSumError	; if they don't match, branch
0000033E                            
0000033E                            	CheckSumOk:
0000033E 4DF8 FE00                  		lea	($FFFFFE00).w,a6
00000342 7E00                       		moveq	#0,d7
00000344 3C3C 007F                  		move.w	#$7F,d6
00000348                            	@clearRAM:
00000348 2CC7                       		move.l	d7,(a6)+
0000034A 51CE FFFC                  		dbf	d6,@clearRAM	; clear RAM ($FE00-$FFFF)
0000034E                            
0000034E 1039 00A1 0001             		move.b	(z80_version).l,d0
00000354 0200 00C0                  		andi.b	#$C0,d0
00000358 11C0 FFF8                  		move.b	d0,(v_megadrive).w ; get region setting
0000035C 21FC 696E 6974 FFFC        		move.l	#'init',(v_init).w ; set flag so checksum won't run again
00000364                            
00000364                            GameInit:
00000364 4DF9 00FF 0000             		lea	($FF0000).l,a6
0000036A 7E00                       		moveq	#0,d7
0000036C 3C3C 3F7F                  		move.w	#$3F7F,d6
00000370                            	@clearRAM:
00000370 2CC7                       		move.l	d7,(a6)+
00000372 51CE FFFC                  		dbf	d6,@clearRAM	; clear RAM ($0000-$FDFF)
00000376 4EB9 0000 0000                     jsr	(InitDMAQueue).l	
0000037C 6100 0000                  		bsr.w	VDPSetupGame
00000380 6100 0000                  		bsr.w	SoundDriverLoad
00000384 6100 0000                  		bsr.w	JoypadInit
00000388 11FC 0000 F600             		move.b	#id_Sega,(v_gamemode).w ; set Game Mode to Sega Screen
0000038E                            
0000038E                            MainGameLoop:
0000038E 1038 F600                  		move.b	(v_gamemode).w,d0 ; load Game Mode
00000392 0240 001C                  		andi.w	#$1C,d0	; limit Game Mode value to $1C max (change to a maximum of 7C to add more game modes)
00000396 4EBB 0000                  		jsr	GameModeArray(pc,d0.w) ; jump to apt location in ROM
0000039A 60F2                       		bra.s	MainGameLoop	; loop indefinitely
0000039C                            ; ===========================================================================
0000039C                            ; ---------------------------------------------------------------------------
0000039C                            ; Main game mode array
0000039C                            ; ---------------------------------------------------------------------------
0000039C                            
0000039C                            GameModeArray:
0000039C                            
0000039C 6000 0000                  ptr_GM_Sega:	bra.w	GM_Sega		; Sega Screen ($00)
000003A0                            
000003A0 6000 0000                  ptr_GM_Title:	bra.w	GM_Title	; Title	Screen ($04)
000003A4                            
000003A4 6000 0000                  ptr_GM_Demo:	bra.w	GM_Level	; Demo Mode ($08)
000003A8                            
000003A8 6000 0000                  ptr_GM_Level:	bra.w	GM_Level	; Normal Level ($0C)
000003AC                            
000003AC 6000 0000                  ptr_GM_Special:	bra.w	GM_Special	; Special Stage	($10)
000003B0                            
000003B0 6000 0000                  ptr_GM_Cont:	bra.w	GM_Continue	; Continue Screen ($14)
000003B4                            
000003B4 6000 0000                  ptr_GM_Ending:	bra.w	GM_Ending	; End of game sequence ($18)
000003B8                            
000003B8 6000 0000                  ptr_GM_Credits:	bra.w	GM_Credits	; Credits ($1C)
000003BC                            
000003BC 4E75                       		rts	
000003BE                            ; ===========================================================================
000003BE                            
000003BE                            CheckSumError:
000003BE 6100 0000                  		bsr.w	VDPSetupGame
000003C2 23FC C000 0000 00C0 0004   		move.l	#$C0000000,(vdp_control_port).l ; set VDP to CRAM write
000003CC 7E3F                       		moveq	#$3F,d7
000003CE                            
000003CE                            	@fillred:
000003CE 33FC 000E 00C0 0000        		move.w	#cRed,(vdp_data_port).l ; fill palette with red
000003D6 51CF FFF6                  		dbf	d7,@fillred	; repeat $3F more times
000003DA                            
000003DA                            	@endlessloop:
000003DA 60FE                       		bra.s	@endlessloop
000003DC                            ; ===========================================================================
000003DC                            
000003DC                            
000003DC                            ; ===========================================================================
000003DC                            
000003DC                            loc_43A:
000003DC 46FC 2700                  		disable_ints
000003E0 544F                       		addq.w	#2,sp
000003E2 21DF FC40                  		move.l	(sp)+,(v_spbuffer).w
000003E6 544F                       		addq.w	#2,sp
000003E8 48F8 FFFF FC00             		movem.l	d0-a7,(v_regbuffer).w
000003EE 6100 0000                  		bsr.w	ShowErrorMessage
000003F2 202F 0002                  		move.l	2(sp),d0
000003F6 6100 0000                  		bsr.w	ShowErrorValue
000003FA 2038 FC40                  		move.l	(v_spbuffer).w,d0
000003FE 6100 0000                  		bsr.w	ShowErrorValue
00000402 6000                       		bra.s	loc_478
00000404                            ; ===========================================================================
00000404                            
00000404                            loc_462:
00000404 46FC 2700                  		disable_ints
00000408 48F8 FFFF FC00             		movem.l	d0-a7,(v_regbuffer).w
0000040E 6100 0000                  		bsr.w	ShowErrorMessage
00000412 202F 0002                  		move.l	2(sp),d0
00000416 6100 0000                  		bsr.w	ShowErrorValue
0000041A                            
0000041A                            loc_478:
0000041A 6100 0000                  		bsr.w	ErrorWaitForC
0000041E 4CF8 FFFF FC00             		movem.l	(v_regbuffer).w,d0-a7
00000424 46FC 2300                  		enable_ints
00000428 4E73                       		rte	
0000042A                            
0000042A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000042A                            
0000042A                            
0000042A                            ShowErrorMessage:
0000042A 4DF9 00C0 0000             		lea	(vdp_data_port).l,a6
0000043A 41F9 0000 0000             		lea	(Art_Text).l,a0
00000440 323C 027F                  		move.w	#$27F,d1
00000444                            	@loadgfx:
00000444 3C98                       		move.w	(a0)+,(a6)
00000446 51C9 FFFC                  		dbf	d1,@loadgfx
0000044A                            
0000044A 7000                       		moveq	#0,d0		; clear	d0
0000044C 1038 FC44                  		move.b	(v_errortype).w,d0 ; load error code
00000450 303B 0000                  		move.w	ErrorText(pc,d0.w),d0
00000454 41FB 0000                  		lea	ErrorText(pc,d0.w),a0
00000462 7212                       		moveq	#$12,d1		; number of characters (minus 1)
00000464                            
00000464                            	@showchars:
00000464 7000                       		moveq	#0,d0
00000466 1018                       		move.b	(a0)+,d0
00000468 0640 0790                  		addi.w	#$790,d0
0000046C 3C80                       		move.w	d0,(a6)
0000046E 51C9 FFF4                  		dbf	d1,@showchars	; repeat for number of characters
00000472 4E75                       		rts	
00000474                            ; End of function ShowErrorMessage
00000474                            
00000474                            ; ===========================================================================
00000474 0000 0000                  ErrorText:	dc.w @exception-ErrorText, @bus-ErrorText
00000478 0000 0000                  		dc.w @address-ErrorText, @illinstruct-ErrorText
0000047C 0000 0000                  		dc.w @zerodivide-ErrorText, @chkinstruct-ErrorText
00000480 0000 0000                  		dc.w @trapv-ErrorText, @privilege-ErrorText
00000484 0000 0000                  		dc.w @trace-ErrorText, @line1010-ErrorText
00000488 0000                       		dc.w @line1111-ErrorText
0000048A 4552 524F 5220 4558 4345+  @exception:	dc.b "ERROR EXCEPTION    "
0000049D 4255 5320 4552 524F 5220+  @bus:		dc.b "BUS ERROR          "
000004B0 4144 4452 4553 5320 4552+  @address:	dc.b "ADDRESS ERROR      "
000004C3 494C 4C45 4741 4C20 494E+  @illinstruct:	dc.b "ILLEGAL INSTRUCTION"
000004D6 4045 524F 2044 4956 4944+  @zerodivide:	dc.b "@ERO DIVIDE        "
000004E9 4348 4B20 494E 5354 5255+  @chkinstruct:	dc.b "CHK INSTRUCTION    "
000004FC 5452 4150 5620 494E 5354+  @trapv:		dc.b "TRAPV INSTRUCTION  "
0000050F 5052 4956 494C 4547 4520+  @privilege:	dc.b "PRIVILEGE VIOLATION"
00000522 5452 4143 4520 2020 2020+  @trace:		dc.b "TRACE              "
00000535 4C49 4E45 2031 3031 3020+  @line1010:	dc.b "LINE 1010 EMULATOR "
00000548 4C49 4E45 2031 3131 3120+  @line1111:	dc.b "LINE 1111 EMULATOR "
0000055C 00                         		even
0000055C                            
0000055C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000055C                            
0000055C                            
0000055C                            ShowErrorValue:
0000055C 3CBC 07CA                  		move.w	#$7CA,(a6)	; display "$" symbol
00000560 7407                       		moveq	#7,d2
00000562                            
00000562                            	@loop:
00000562 E998                       		rol.l	#4,d0
00000564 6100                       		bsr.s	@shownumber	; display 8 numbers
00000566 51CA FFFA                  		dbf	d2,@loop
0000056A 4E75                       		rts	
0000056C                            ; End of function ShowErrorValue
0000056C                            
0000056C                            
0000056C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000056C                            
0000056C                            
0000056C                            @shownumber:
0000056C 3200                       		move.w	d0,d1
0000056E 0241 000F                  		andi.w	#$F,d1
00000572 0C41 000A                  		cmpi.w	#$A,d1
00000576 6500                       		blo.s	@chars0to9
00000578 5E41                       		addq.w	#7,d1		; add 7 for characters A-F
0000057A                            
0000057A                            	@chars0to9:
0000057A 0641 07C0                  		addi.w	#$7C0,d1
0000057E 3C81                       		move.w	d1,(a6)
00000580 4E75                       		rts	
00000582                            ; End of function sub_5CA
00000582                            
00000582                            
00000582                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00000582                            
00000582                            
00000582                            ErrorWaitForC:
00000582 6100 0000                  		bsr.w	ReadJoypads
00000586 0C38 0020 F605             		cmpi.b	#btnC,(v_jpadpress1).w ; is button C pressed?
0000058C 6600 FFF4                  		bne.w	ErrorWaitForC	; if not, branch
00000590 4E75                       		rts	
00000592                            ; End of function ErrorWaitForC
00000592                            
00000592                            ; ===========================================================================
00000592                            
00000592                            Art_Text:	incbin	"artunc\menutext.bin" ; text used in level select and debug mode
00000AB2                            		even
00000AB2                            
00000AB2                            ; ===========================================================================
00000AB2                            ; ---------------------------------------------------------------------------
00000AB2                            ; Vertical interrupt
00000AB2                            ; ---------------------------------------------------------------------------
00000AB2                            
00000AB2                            VBlank:
00000AB2 48E7 FFFE                  		movem.l	d0-a6,-(sp)
00000AB6 4A38 F62A                  		tst.b	(v_vbla_routine).w
00000ABA 6700                       		beq.s	VBla_00
00000ABC 3039 00C0 0004             		move.w	(vdp_control_port).l,d0
00000AC2 23FC 4000 0010 00C0 0004   		move.l	#$40000010,(vdp_control_port).l
00000ACC 23F8 F616 00C0 0000        		move.l	(v_scrposy_dup).w,(vdp_data_port).l ; send screen y-axis pos. to VSRAM
00000AD4 0838 0006 FFF8             		btst	#6,(v_megadrive).w ; is Megadrive PAL?
00000ADA 6700                       		beq.s	@notPAL		; if not, branch
00000ADC                            
00000ADC 303C 0700                  		move.w	#$700,d0
00000AE0                            	@waitPAL:
00000AE0 51C8 FFFE                  		dbf	d0,@waitPAL ; wait here in a loop doing nothing for a while...
00000AE4                            
00000AE4                            	@notPAL:
00000AE4 1038 F62A                  		move.b	(v_vbla_routine).w,d0
00000AE8 11FC 0000 F62A             		move.b	#0,(v_vbla_routine).w
00000AEE 31FC 0001 F644             		move.w	#1,(f_hbla_pal).w
00000AF4 0240 003E                  		andi.w	#$3E,d0
00000AF8 303B 0000                  		move.w	VBla_Index(pc,d0.w),d0
00000AFC 4EBB 0000                  		jsr	VBla_Index(pc,d0.w)
00000B00                            
00000B00                            VBla_Music:
00000B00 4EB9 0000 0000             		jsr		(UpdateMusic).l
00000B06                            
00000B06                            VBla_Exit:
00000B06 52B8 FE0C                  		addq.l	#1,(v_vbla_count).w
00000B0A 4CDF 7FFF                  		movem.l	(sp)+,d0-a6
00000B0E 4E73                       		rte	
00000B10                            ; ===========================================================================
00000B10 0000 0000                  VBla_Index:	dc.w VBla_00-VBla_Index, VBla_02-VBla_Index
00000B14 0000 0000                  		dc.w VBla_04-VBla_Index, VBla_06-VBla_Index
00000B18 0000 0000                  		dc.w VBla_08-VBla_Index, VBla_0A-VBla_Index
00000B1C 0000 0000                  		dc.w VBla_0C-VBla_Index, VBla_0E-VBla_Index
00000B20 0000 0000                  		dc.w VBla_10-VBla_Index, VBla_12-VBla_Index
00000B24 0000 0000                  		dc.w VBla_14-VBla_Index, VBla_16-VBla_Index
00000B28 0000                       		dc.w VBla_0C-VBla_Index
00000B2A                            ; ===========================================================================
00000B2A                            
00000B2A                            VBla_00:
00000B2A 0C38 0000 F600             		cmpi.b	#$80+id_Level,(v_gamemode).w
00000B30 6700                       		beq.s	@islevel
00000B32 0C38 0000 F600             		cmpi.b	#id_Level,(v_gamemode).w ; is game on a level?
00000B38 6600 FFC6                  		bne.w	VBla_Music	; if not, branch
00000B3C                            
00000B3C                            	@islevel:
00000B3C 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w ; is level LZ ?
00000B42 6600 FFBC                  		bne.w	VBla_Music	; if not, branch
00000B46                            
00000B46 3039 00C0 0004             		move.w	(vdp_control_port).l,d0
00000B4C 0838 0006 FFF8             		btst	#6,(v_megadrive).w ; is Megadrive PAL?
00000B52 6700                       		beq.s	@notPAL		; if not, branch
00000B54                            
00000B54 303C 0700                  		move.w	#$700,d0
00000B58                            	@waitPAL:
00000B58 51C8 FFFE                  		dbf	d0,@waitPAL
00000B5C                            
00000B5C                            	@notPAL:
00000B5C 31FC 0001 F644             		move.w	#1,(f_hbla_pal).w ; set HBlank flag
00000B62 33FC 0100 00A1 1100        		stopZ80
00000B6A 0839 0000 00A1 1100 66F6   		waitZ80
00000B74 4A38 F64E                  		tst.b	(f_wtr_state).w	; is water above top of screen?
00000B78 6600                       		bne.s	@waterabove 	; if yes, branch
00000B7A                            
00000B7A 4BF9 00C0 0004 2ABC 9400+  		writeCRAM	v_pal_dry,$80,0
00000B9E 6000                       		bra.s	@waterbelow
00000BA0                            
00000BA0                            @waterabove:
00000BA0 4BF9 00C0 0004 2ABC 9400+  		writeCRAM	v_pal_water,$80,0
00000BC4                            
00000BC4                            	@waterbelow:
00000BC4 3AB8 F624                  		move.w	(v_hbla_hreg).w,(a5)
00000BC8 33FC 0000 00A1 1100        		startZ80
00000BD0 6000 FF2E                  		bra.w	VBla_Music
00000BD4                            ; ===========================================================================
00000BD4                            
00000BD4                            VBla_02:
00000BD4 6100 0000                  		bsr.w	sub_106E
00000BD8                            
00000BD8                            VBla_14:
00000BD8 4A78 F614                  		tst.w	(v_demolength).w
00000BDC 6700 0000                  		beq.w	@end
00000BE0 5378 F614                  		subq.w	#1,(v_demolength).w
00000BE4                            
00000BE4                            	@end:
00000BE4 4E75                       		rts	
00000BE6                            ; ===========================================================================
00000BE6                            
00000BE6                            VBla_04:
00000BE6 6100 0000                  		bsr.w	sub_106E
00000BEA 6100 0000                  		bsr.w	LoadTilesAsYouMove_BGOnly
00000BEE 6100 0000                  		bsr.w	sub_1642
00000BF2 4A78 F614                  		tst.w	(v_demolength).w
00000BF6 6700 0000                  		beq.w	@end
00000BFA 5378 F614                  		subq.w	#1,(v_demolength).w
00000BFE                            
00000BFE                            	@end:
00000BFE 4E75                       		rts	
00000C00                            ; ===========================================================================
00000C00                            
00000C00                            VBla_06:
00000C00 6100 0000                  		bsr.w	sub_106E
00000C04 4E75                       		rts	
00000C06                            ; ===========================================================================
00000C06                            
00000C06                            VBla_10:
00000C06 0C38 0000 F600             		cmpi.b	#id_Special,(v_gamemode).w ; is game on special stage?
00000C0C 6700 0000                  		beq.w	VBla_0A		; if yes, branch
00000C10                            
00000C10                            VBla_08:
00000C10 33FC 0100 00A1 1100        		stopZ80
00000C18 0839 0000 00A1 1100 66F6   		waitZ80
00000C22 6100 0000                  		bsr.w	ReadJoypads
00000C26 4A38 F64E                  		tst.b	(f_wtr_state).w
00000C2A 6600                       		bne.s	@waterabove
00000C2C                            
00000C2C 4BF9 00C0 0004 2ABC 9400+  		writeCRAM	v_pal_dry,$80,0
00000C50 6000                       		bra.s	@waterbelow
00000C52                            
00000C52                            @waterabove:
00000C52 4BF9 00C0 0004 2ABC 9400+  		writeCRAM	v_pal_water,$80,0
00000C76                            
00000C76                            	@waterbelow:
00000C76 3AB8 F624                  		move.w	(v_hbla_hreg).w,(a5)
00000C7A                            
00000C7A 4BF9 00C0 0004 2ABC 9401+  		writeVRAM	v_hscrolltablebuffer,$380,vram_hscroll
00000C9E 4BF9 00C0 0004 2ABC 9401+  		writeVRAM	v_spritetablebuffer,$280,vram_sprites
00000CC2 4EB9 0000 0000             		jsr	(ProcessDMAQueue).l
00000CC8                            
00000CC8                            	@nochg:
00000CC8 33FC 0000 00A1 1100        		startZ80
00000CD0 4CF8 00FF F700             		movem.l	(v_screenposx).w,d0-d7
00000CD6 48F8 00FF FF10             		movem.l	d0-d7,(v_screenposx_dup).w
00000CDC 4CF8 0003 F754             		movem.l	(v_fg_scroll_flags).w,d0-d1
00000CE2 48F8 0003 FF30             		movem.l	d0-d1,(v_fg_scroll_flags_dup).w
00000CE8 0C38 0060 F625             		cmpi.b	#96,(v_hbla_line).w
00000CEE 6400                       		bhs.s	Demo_Time
00000CF0 11FC 0001 F64F             		move.b	#1,($FFFFF64F).w
00000CF6 588F                       		addq.l	#4,sp
00000CF8 6000 FE0C                  		bra.w	VBla_Exit
00000CFC                            
00000CFC                            ; ---------------------------------------------------------------------------
00000CFC                            ; Subroutine to	run a demo for an amount of time
00000CFC                            ; ---------------------------------------------------------------------------
00000CFC                            
00000CFC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00000CFC                            
00000CFC                            
00000CFC                            Demo_Time:
00000CFC 6100 0000                  		bsr.w	LoadTilesAsYouMove
00000D00 4EB9 0000 0000             		jsr	(AnimateLevelGfx).l
00000D06 4EB9 0000 0000             		jsr	(HUD_Update).l
00000D0C 6100 0000                  		bsr.w	ProcessDPLC2
00000D10 4A78 F614                  		tst.w	(v_demolength).w ; is there time left on the demo?
00000D14 6700 0000                  		beq.w	@end		; if not, branch
00000D18 5378 F614                  		subq.w	#1,(v_demolength).w ; subtract 1 from time left
00000D1C                            
00000D1C                            	@end:
00000D1C 4E75                       		rts	
00000D1E                            ; End of function Demo_Time
00000D1E                            
00000D1E                            ; ===========================================================================
00000D1E                            
00000D1E                            VBla_0A:
00000D1E 33FC 0100 00A1 1100        		stopZ80
00000D26 0839 0000 00A1 1100 66F6   		waitZ80
00000D30 6100 0000                  		bsr.w	ReadJoypads
00000D34 4BF9 00C0 0004 2ABC 9400+  		writeCRAM	v_pal_dry,$80,0
00000D58 4BF9 00C0 0004 2ABC 9401+  		writeVRAM	v_spritetablebuffer,$280,vram_sprites
00000D7C 4BF9 00C0 0004 2ABC 9401+  		writeVRAM	v_hscrolltablebuffer,$380,vram_hscroll
00000DA0 33FC 0000 00A1 1100        		startZ80
00000DA8 6100 0000                  		bsr.w	PalCycle_SS
00000DAC 4EB9 0000 0000             		jsr	(ProcessDMAQueue).l
00000DB2                            	@nochg:
00000DB2 4A78 F614                  		tst.w	(v_demolength).w	; is there time left on the demo?
00000DB6 6700 0000                  		beq.w	@end	; if not, return
00000DBA 5378 F614                  		subq.w	#1,(v_demolength).w	; subtract 1 from time left in demo
00000DBE                            
00000DBE                            	@end:
00000DBE 4E75                       		rts	
00000DC0                            ; ===========================================================================
00000DC0                            
00000DC0                            VBla_0C:
00000DC0 33FC 0100 00A1 1100        		stopZ80
00000DC8 0839 0000 00A1 1100 66F6   		waitZ80
00000DD2 6100 0000                  		bsr.w	ReadJoypads
00000DD6 4A38 F64E                  		tst.b	(f_wtr_state).w
00000DDA 6600                       		bne.s	@waterabove
00000DDC                            
00000DDC 4BF9 00C0 0004 2ABC 9400+  		writeCRAM	v_pal_dry,$80,0
00000E00 6000                       		bra.s	@waterbelow
00000E02                            
00000E02                            @waterabove:
00000E02 4BF9 00C0 0004 2ABC 9400+  		writeCRAM	v_pal_water,$80,0
00000E26                            
00000E26                            	@waterbelow:
00000E26 3AB8 F624                  		move.w	(v_hbla_hreg).w,(a5)
00000E2A 4BF9 00C0 0004 2ABC 9401+  		writeVRAM	v_hscrolltablebuffer,$380,vram_hscroll
00000E4E 4BF9 00C0 0004 2ABC 9401+  		writeVRAM	v_spritetablebuffer,$280,vram_sprites
00000E72 4EB9 0000 0000             		jsr	(ProcessDMAQueue).l
00000E78                            
00000E78                            	@nochg:
00000E78 33FC 0000 00A1 1100        		startZ80
00000E80 4CF8 00FF F700             		movem.l	(v_screenposx).w,d0-d7
00000E86 48F8 00FF FF10             		movem.l	d0-d7,(v_screenposx_dup).w
00000E8C 4CF8 0003 F754             		movem.l	(v_fg_scroll_flags).w,d0-d1
00000E92 48F8 0003 FF30             		movem.l	d0-d1,(v_fg_scroll_flags_dup).w
00000E98 6100 0000                  		bsr.w	LoadTilesAsYouMove
00000E9C 4EB9 0000 0000             		jsr	(AnimateLevelGfx).l
00000EA2 4EB9 0000 0000             		jsr	(HUD_Update).l
00000EA8 6100 0000                  		bsr.w	sub_1642
00000EAC 4E75                       		rts	
00000EAE                            ; ===========================================================================
00000EAE                            
00000EAE                            VBla_0E:
00000EAE 6100 0000                  		bsr.w	sub_106E
00000EB2 5238 F628                  		addq.b	#1,($FFFFF628).w
00000EB6 11FC 000E F62A             		move.b	#$E,(v_vbla_routine).w
00000EBC 4E75                       		rts	
00000EBE                            ; ===========================================================================
00000EBE                            
00000EBE                            VBla_12:
00000EBE 6100 0000                  		bsr.w	sub_106E
00000EC2 3AB8 F624                  		move.w	(v_hbla_hreg).w,(a5)
00000EC6 6000 0000                  		bra.w	sub_1642
00000ECA                            ; ===========================================================================
00000ECA                            
00000ECA                            Vbla_16:
00000ECA 3AB8 F624                  		move.w	(v_hbla_hreg).w,(a5)
00000ECE 6100 0000                  		bsr.w	ReadJoypads
00000ED2 4BF9 00C0 0004 2ABC 9401+  		writeVRAM	v_hscrolltablebuffer,$380,vram_hscroll
00000EF6 4BF9 00C0 0004 2ABC 9401+  		writeVRAM	v_spritetablebuffer,$280,vram_sprites
00000F1A 4EB9 0000 0000             		jsr	(ProcessDMAQueue).l
00000F20                            
00000F20                            	@nochg:
00000F20 4A78 F614                  		tst.w	(v_demolength).w
00000F24 6700 0000                  		beq.w	@end
00000F28 5378 F614                  		subq.w	#1,(v_demolength).w
00000F2C                            
00000F2C                            	@end:
00000F2C 4E75                       		rts	
00000F2E                            
00000F2E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00000F2E                            
00000F2E                            
00000F2E                            sub_106E:
00000F2E 33FC 0100 00A1 1100        		stopZ80
00000F36 0839 0000 00A1 1100 66F6   		waitZ80
00000F40 6100 0000                  		bsr.w	ReadJoypads
00000F44 4A38 F64E                  		tst.b	(f_wtr_state).w ; is water above top of screen?
00000F48 6600                       		bne.s	@waterabove	; if yes, branch
00000F4A 4BF9 00C0 0004 2ABC 9400+  		writeCRAM	v_pal_dry,$80,0
00000F6E 6000                       		bra.s	@waterbelow
00000F70                            
00000F70                            	@waterabove:
00000F70 4BF9 00C0 0004 2ABC 9400+  		writeCRAM	v_pal_water,$80,0
00000F94                            
00000F94                            	@waterbelow:
00000F94 4BF9 00C0 0004 2ABC 9401+  		writeVRAM	v_spritetablebuffer,$280,vram_sprites
00000FB8 4BF9 00C0 0004 2ABC 9401+  		writeVRAM	v_hscrolltablebuffer,$380,vram_hscroll
00000FDC 33FC 0000 00A1 1100        		startZ80
00000FE4 4E75                       		rts	
00000FE6                            ; End of function sub_106E
00000FE6                            
00000FE6                            ; ---------------------------------------------------------------------------
00000FE6                            ; Horizontal interrupt
00000FE6                            ; ---------------------------------------------------------------------------
00000FE6                            
00000FE6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00000FE6                            
00000FE6                            
00000FE6                            HBlank:
00000FE6 46FC 2700                  		disable_ints
00000FEA 4A78 F644                  		tst.w	(f_hbla_pal).w	; is palette set to change?
00000FEE 6700                       		beq.s	@nochg		; if not, branch
00000FF0 31FC 0000 F644             		move.w	#0,(f_hbla_pal).w
00000FF6 48E7 00C0                  		movem.l	a0-a1,-(sp)
00000FFA 43F9 00C0 0000             		lea	(vdp_data_port).l,a1
00001000 41F8 FA80                  		lea	(v_pal_water).w,a0 ; get palette from RAM
00001004 237C C000 0000 0004        		move.l	#$C0000000,4(a1) ; set VDP to CRAM write
0000100C 2298                       		move.l	(a0)+,(a1)	; move palette to CRAM
0000100E 2298                       		move.l	(a0)+,(a1)
00001010 2298                       		move.l	(a0)+,(a1)
00001012 2298                       		move.l	(a0)+,(a1)
00001014 2298                       		move.l	(a0)+,(a1)
00001016 2298                       		move.l	(a0)+,(a1)
00001018 2298                       		move.l	(a0)+,(a1)
0000101A 2298                       		move.l	(a0)+,(a1)
0000101C 2298                       		move.l	(a0)+,(a1)
0000101E 2298                       		move.l	(a0)+,(a1)
00001020 2298                       		move.l	(a0)+,(a1)
00001022 2298                       		move.l	(a0)+,(a1)
00001024 2298                       		move.l	(a0)+,(a1)
00001026 2298                       		move.l	(a0)+,(a1)
00001028 2298                       		move.l	(a0)+,(a1)
0000102A 2298                       		move.l	(a0)+,(a1)
0000102C 2298                       		move.l	(a0)+,(a1)
0000102E 2298                       		move.l	(a0)+,(a1)
00001030 2298                       		move.l	(a0)+,(a1)
00001032 2298                       		move.l	(a0)+,(a1)
00001034 2298                       		move.l	(a0)+,(a1)
00001036 2298                       		move.l	(a0)+,(a1)
00001038 2298                       		move.l	(a0)+,(a1)
0000103A 2298                       		move.l	(a0)+,(a1)
0000103C 2298                       		move.l	(a0)+,(a1)
0000103E 2298                       		move.l	(a0)+,(a1)
00001040 2298                       		move.l	(a0)+,(a1)
00001042 2298                       		move.l	(a0)+,(a1)
00001044 2298                       		move.l	(a0)+,(a1)
00001046 2298                       		move.l	(a0)+,(a1)
00001048 2298                       		move.l	(a0)+,(a1)
0000104A 2298                       		move.l	(a0)+,(a1)
0000104C 337C 8ADF 0004             		move.w	#$8A00+223,4(a1) ; reset HBlank register
00001052 4CDF 0300                  		movem.l	(sp)+,a0-a1
00001056 4A38 F64F                  		tst.b	($FFFFF64F).w
0000105A 6600                       		bne.s	loc_119E
0000105C                            
0000105C                            	@nochg:
0000105C 4E73                       		rte	
0000105E                            ; ===========================================================================
0000105E                            
0000105E                            loc_119E:
0000105E 4238 F64F                  		clr.b	($FFFFF64F).w
00001062 48E7 FFFE                  		movem.l	d0-a6,-(sp)
00001066 6100 FC94                  		bsr.w	Demo_Time	
0000106A 4EB9 0000 0000             		jsr	(UpdateMusic).l
00001070 4CDF 7FFF                  		movem.l	(sp)+,d0-a6
00001074 4E73                       		rte	
00001076                            ; End of function HBlank
00001076                            
00001076                            ; ---------------------------------------------------------------------------
00001076                            ; Subroutine to	initialise joypads
00001076                            ; ---------------------------------------------------------------------------
00001076                            
00001076                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001076                            
00001076                            
00001076                            JoypadInit:
00001076 33FC 0100 00A1 1100        		stopZ80
0000107E 0839 0000 00A1 1100 66F6   		waitZ80
00001088 7040                       		moveq	#$40,d0
0000108A 13C0 00A1 0009             		move.b	d0,($A10009).l	; init port 1 (joypad 1)
00001090 13C0 00A1 000B             		move.b	d0,($A1000B).l	; init port 2 (joypad 2)
00001096 13C0 00A1 000D             		move.b	d0,($A1000D).l	; init port 3 (expansion/extra)
0000109C 33FC 0000 00A1 1100        		startZ80
000010A4 4E75                       		rts	
000010A6                            ; End of function JoypadInit
000010A6                            
000010A6                            ; ---------------------------------------------------------------------------
000010A6                            ; Subroutine to	read joypad input, and send it to the RAM
000010A6                            ; ---------------------------------------------------------------------------
000010A6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000010A6                            
000010A6                            
000010A6                            ReadJoypads:
000010A6 41F8 F604                  		lea	(v_jpadhold1).w,a0 ; address where joypad states are written
000010AA 43F9 00A1 0003             		lea	($A10003).l,a1	; first	joypad port
000010B0 6100                       		bsr.s	@read		; do the first joypad
000010B2 5449                       		addq.w	#2,a1		; do the second	joypad
000010B4                            
000010B4                            	@read:
000010B4 12BC 0000                  		move.b	#0,(a1)
000010B8 4E71                       		nop	
000010BA 4E71                       		nop	
000010BC 1011                       		move.b	(a1),d0
000010BE E508                       		lsl.b	#2,d0
000010C0 0200 00C0                  		andi.b	#$C0,d0
000010C4 12BC 0040                  		move.b	#$40,(a1)
000010C8 4E71                       		nop	
000010CA 4E71                       		nop	
000010CC 1211                       		move.b	(a1),d1
000010CE 0201 003F                  		andi.b	#$3F,d1
000010D2 8001                       		or.b	d1,d0
000010D4 4600                       		not.b	d0
000010D6 1210                       		move.b	(a0),d1
000010D8 B101                       		eor.b	d0,d1
000010DA 10C0                       		move.b	d0,(a0)+
000010DC C200                       		and.b	d0,d1
000010DE 10C1                       		move.b	d1,(a0)+
000010E0 4E75                       		rts	
000010E2                            ; End of function ReadJoypads
000010E2                            
000010E2                            
000010E2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000010E2                            
000010E2                            
000010E2                            VDPSetupGame:
000010E2 41F9 00C0 0004             		lea	(vdp_control_port).l,a0
000010E8 43F9 00C0 0000             		lea	(vdp_data_port).l,a1
000010EE 45F9 0000 0000             		lea	(VDPSetupArray).l,a2
000010F4 7E12                       		moveq	#$12,d7
000010F6                            
000010F6                            	@setreg:
000010F6 309A                       		move.w	(a2)+,(a0)
000010F8 51CF FFFC                  		dbf	d7,@setreg	; set the VDP registers
000010FC                            
000010FC 3039 0000 0000             		move.w	(VDPSetupArray+2).l,d0
00001102 31C0 F60C                  		move.w	d0,(v_vdp_buffer1).w
00001106 31FC 8ADF F624             		move.w	#$8A00+223,(v_hbla_hreg).w	; H-INT every 224th scanline
0000110C 7000                       		moveq	#0,d0
0000110E 23FC C000 0000 00C0 0004   		move.l	#$C0000000,(vdp_control_port).l ; set VDP to CRAM write
00001118 3E3C 003F                  		move.w	#$3F,d7
0000111C                            
0000111C                            	@clrCRAM:
0000111C 3280                       		move.w	d0,(a1)
0000111E 51CF FFFC                  		dbf	d7,@clrCRAM	; clear	the CRAM
00001122                            
00001122 42B8 F616                  		clr.l	(v_scrposy_dup).w
00001126 42B8 F61A                  		clr.l	(v_scrposx_dup).w
0000112A 2F01                       		move.l	d1,-(sp)
0000112C 4BF9 00C0 0004 3ABC 8F01+  		fillVRAM	0,$FFFF,0
0000114E                            
0000114E                            	@waitforDMA:
0000114E 3215                       		move.w	(a5),d1
00001150 0801 0001                  		btst	#1,d1		; is DMA (fillVRAM) still running?
00001154 66F8                       		bne.s	@waitforDMA	; if yes, branch
00001156                            
00001156 3ABC 8F02                  		move.w	#$8F02,(a5)	; set VDP increment size
0000115A 221F                       		move.l	(sp)+,d1
0000115C 4E75                       		rts	
0000115E                            ; End of function VDPSetupGame
0000115E                            
0000115E                            ; ===========================================================================
0000115E 8004                       VDPSetupArray:	dc.w $8004		; 8-colour mode
00001160 8134                       		dc.w $8134		; enable V.interrupts, enable DMA
00001162 8230                       		dc.w $8200+(vram_fg>>10) ; set foreground nametable address
00001164 8328                       		dc.w $8300+($A000>>10)	; set window nametable address
00001166 8407                       		dc.w $8400+(vram_bg>>13) ; set background nametable address
00001168 857C                       		dc.w $8500+(vram_sprites>>9) ; set sprite table address
0000116A 8600                       		dc.w $8600		; unused
0000116C 8700                       		dc.w $8700		; set background colour (palette entry 0)
0000116E 8800                       		dc.w $8800		; unused
00001170 8900                       		dc.w $8900		; unused
00001172 8A00                       		dc.w $8A00		; default H.interrupt register
00001174 8B00                       		dc.w $8B00		; full-screen vertical scrolling
00001176 8C81                       		dc.w $8C81		; 40-cell display mode
00001178 8D3F                       		dc.w $8D00+(vram_hscroll>>10) ; set background hscroll address
0000117A 8E00                       		dc.w $8E00		; unused
0000117C 8F02                       		dc.w $8F02		; set VDP increment size
0000117E 9001                       		dc.w $9001		; 64-cell hscroll size
00001180 9100                       		dc.w $9100		; window horizontal position
00001182 9200                       		dc.w $9200		; window vertical position
00001184                            
00001184                            ; ---------------------------------------------------------------------------
00001184                            ; Subroutine to	clear the screen
00001184                            ; ---------------------------------------------------------------------------
00001184                            
00001184                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001184                            
00001184                            
00001184                            ClearScreen:
00001184 4BF9 00C0 0004 3ABC 8F01+  		fillVRAM	0,$FFF,vram_fg ; clear foreground namespace
000011A6                            
000011A6                            	@wait1:
000011A6 3215                       		move.w	(a5),d1
000011A8 0801 0001                  		btst	#1,d1
000011AC 66F8                       		bne.s	@wait1
000011AE                            
000011AE 3ABC 8F02                  		move.w	#$8F02,(a5)
000011B2 4BF9 00C0 0004 3ABC 8F01+  		fillVRAM	0,$FFF,vram_bg ; clear background namespace
000011D4                            
000011D4                            	@wait2:
000011D4 3215                       		move.w	(a5),d1
000011D6 0801 0001                  		btst	#1,d1
000011DA 66F8                       		bne.s	@wait2
000011DC                            
000011DC 3ABC 8F02                  		move.w	#$8F02,(a5)
000011E0 42B8 F616                  		clr.l	(v_scrposy_dup).w
000011E4 42B8 F61A                  		clr.l	(v_scrposx_dup).w
000011E8                            
000011E8 43F8 F800                  		lea	(v_spritetablebuffer).w,a1
000011EC 7000                       		moveq	#0,d0
000011EE 323C 00A0                  		move.w	#($280/4),d1	; This should be ($280/4)-1, leading to a slight bug (first bit of v_pal_water is cleared)
000011F2                            
000011F2                            	@clearsprites:
000011F2 22C0                       		move.l	d0,(a1)+
000011F4 51C9 FFFC                  		dbf	d1,@clearsprites ; clear sprite table (in RAM)
000011F8                            
000011F8 43F8 CC00                  		lea	(v_hscrolltablebuffer).w,a1
000011FC 7000                       		moveq	#0,d0
000011FE 323C 0100                  		move.w	#($400/4),d1	; This should be ($400/4)-1, leading to a slight bug (first bit of the Sonic object's RAM is cleared)
00001202                            
00001202                            	@clearhscroll:
00001202 22C0                       		move.l	d0,(a1)+
00001204 51C9 FFFC                  		dbf	d1,@clearhscroll ; clear hscroll table (in RAM)
00001208 4E75                       		rts	
0000120A                            ; End of function ClearScreen
0000120A                            
0000120A                            ; ---------------------------------------------------------------------------
0000120A                            ; Subroutine to	load the sound driver
0000120A                            ; ---------------------------------------------------------------------------
0000120A                            
0000120A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000120A                            
0000120A                            
0000120A                            SoundDriverLoad:
0000120A 4E71                       		nop	
0000120C 33FC 0100 00A1 1100        		stopZ80
00001214 33FC 0100 00A1 1200        		resetZ80
0000121C 41F9 0000 0000             		lea	(Kos_Z80).l,a0	; load sound driver
00001222 43F9 00A0 0000             		lea	(z80_ram).l,a1	; target Z80 RAM
00001228 6100 0000                  		bsr.w	KosDec		; decompress
0000122C 33FC 0000 00A1 1200        		resetZ80a
00001234 4E71                       		nop	
00001236 4E71                       		nop	
00001238 4E71                       		nop	
0000123A 4E71                       		nop	
0000123C 33FC 0100 00A1 1200        		resetZ80
00001244 33FC 0000 00A1 1100        		startZ80
0000124C 4E75                       		rts	
0000124E                            ; End of function SoundDriverLoad
0000124E                            
0000124E                            		include	"_incObj\sub PlaySound.asm"
0000124E                            ; ---------------------------------------------------------------------------
0000124E                            ; Subroutine to	play a music track
0000124E                            
0000124E                            ; input:
0000124E                            ;	d0 = track to play
0000124E                            ; ---------------------------------------------------------------------------
0000124E                            
0000124E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000124E                            
0000124E                            
0000124E                            PlaySound:
0000124E 11C0 F00A                  		move.b	d0,(v_snddriver_ram+v_soundqueue0).w
00001252 4E75                       		rts	
00001254                            ; End of function PlaySound
00001254                            
00001254                            ; ---------------------------------------------------------------------------
00001254                            ; Subroutine to	play a sound effect
00001254                            ; ---------------------------------------------------------------------------
00001254                            
00001254                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001254                            
00001254                            
00001254                            PlaySound_Special:
00001254 11C0 F00B                  		move.b	d0,(v_snddriver_ram+v_soundqueue1).w
00001258 4E75                       		rts	
0000125A                            ; End of function PlaySound_Special
0000125A                            
0000125A                            ; ===========================================================================
0000125A                            ; ---------------------------------------------------------------------------
0000125A                            ; Unused sound/music subroutine
0000125A                            ; ---------------------------------------------------------------------------
0000125A                            
0000125A                            PlaySound_Unused:
0000125A 11C0 F00C                  		move.b	d0,(v_snddriver_ram+v_soundqueue2).w
0000125E 4E75                       		rts	
0000125E 4E75                       		rts	
00001260                            		include	"_inc\PauseGame.asm"
00001260                            ; ---------------------------------------------------------------------------
00001260                            ; Subroutine to	pause the game
00001260                            ; ---------------------------------------------------------------------------
00001260                            
00001260                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001260                            
00001260                            
00001260                            PauseGame:
00001260 4E71                       		nop	
00001262 4A38 FE12                  		tst.b	(v_lives).w	; do you have any lives	left?
00001266 6700                       		beq.s	Unpause		; if not, branch
00001268 4A78 F63A                  		tst.w	(f_pause).w	; is game already paused?
0000126C 6600                       		bne.s	Pause_StopGame	; if yes, branch
0000126E 0838 0007 F605             		btst	#bitStart,(v_jpadpress1).w ; is Start button pressed?
00001274 6700                       		beq.s	Pause_DoNothing	; if not, branch
00001276                            
00001276                            Pause_StopGame:
00001276 31FC 0001 F63A             		move.w	#1,(f_pause).w	; freeze time
0000127C 11FC 0001 F003             		move.b	#1,(v_snddriver_ram+f_pausemusic).w ; pause music
00001282                            
00001282                            Pause_Loop:
00001282 11FC 0010 F62A             		move.b	#$10,(v_vbla_routine).w
00001288 6100 0000                  		bsr.w	WaitForVBla
0000128C 4A38 FFE1                  		tst.b	(f_slomocheat).w ; is slow-motion cheat on?
00001290 6700                       		beq.s	Pause_ChkStart	; if not, branch
00001292 0838 0006 F605             		btst	#bitA,(v_jpadpress1).w ; is button A pressed?
00001298 6700                       		beq.s	Pause_ChkBC	; if not, branch
0000129A 11FC 0000 F600             		move.b	#id_Title,(v_gamemode).w ; set game mode to 4 (title screen)
000012A0 4E71                       		nop	
000012A2 6000                       		bra.s	Pause_EndMusic
000012A4                            ; ===========================================================================
000012A4                            
000012A4                            Pause_ChkBC:
000012A4 0838 0004 F604             		btst	#bitB,(v_jpadhold1).w ; is button B pressed?
000012AA 6600                       		bne.s	Pause_SlowMo	; if yes, branch
000012AC 0838 0005 F605             		btst	#bitC,(v_jpadpress1).w ; is button C pressed?
000012B2 6600                       		bne.s	Pause_SlowMo	; if yes, branch
000012B4                            
000012B4                            Pause_ChkStart:
000012B4 0838 0007 F605             		btst	#bitStart,(v_jpadpress1).w ; is Start button pressed?
000012BA 67C6                       		beq.s	Pause_Loop	; if not, branch
000012BC                            
000012BC                            Pause_EndMusic:
000012BC 11FC 0080 F003             		move.b	#$80,(v_snddriver_ram+f_pausemusic).w	; unpause the music
000012C2                            
000012C2                            Unpause:
000012C2 31FC 0000 F63A             		move.w	#0,(f_pause).w	; unpause the game
000012C8                            
000012C8                            Pause_DoNothing:
000012C8 4E75                       		rts	
000012CA                            ; ===========================================================================
000012CA                            
000012CA                            Pause_SlowMo:
000012CA 31FC 0001 F63A             		move.w	#1,(f_pause).w
000012D0 11FC 0080 F003             		move.b	#$80,(v_snddriver_ram+f_pausemusic).w	; Unpause the music
000012D6 4E75                       		rts	
000012D8                            ; End of function PauseGame
000012D8                            ; End of function PauseGame
000012D8                            
000012D8                            ; ---------------------------------------------------------------------------
000012D8                            ; Subroutine to	copy a tile map from RAM to VRAM namespace
000012D8                            
000012D8                            ; input:
000012D8                            ;	a1 = tile map address
000012D8                            ;	d0 = VRAM address
000012D8                            ;	d1 = width (cells)
000012D8                            ;	d2 = height (cells)
000012D8                            ; ---------------------------------------------------------------------------
000012D8                            
000012D8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000012D8                            
000012D8                            
000012D8                            TilemapToVRAM:
000012D8 4DF9 00C0 0000             		lea	(vdp_data_port).l,a6
000012DE 283C 0080 0000             		move.l	#$800000,d4
000012E4                            
000012E4                            	Tilemap_Line:
000012E4 2D40 0004                  		move.l	d0,4(a6)	; move d0 to VDP_control_port
000012E8 3601                       		move.w	d1,d3
000012EA                            
000012EA                            	Tilemap_Cell:
000012EA 3C99                       		move.w	(a1)+,(a6)	; write value to namespace
000012EC 51CB FFFC                  		dbf	d3,Tilemap_Cell	; next tile
000012F0 D084                       		add.l	d4,d0		; goto next line
000012F2 51CA FFF0                  		dbf	d2,Tilemap_Line	; next line
000012F6 4E75                       		rts	
000012F8                            ; End of function TilemapToVRAM
000012F8                            
000012F8                            		include	"_inc\Nemesis Decompression.asm"
000012F8                            ; ==============================================================================
000012F8                            ; ------------------------------------------------------------------------------
000012F8                            ; Nemesis decompression routine
000012F8                            ; ------------------------------------------------------------------------------
000012F8                            ; Optimized by vladikcomper
000012F8                            ; ------------------------------------------------------------------------------
000012F8                             
000012F8                            NemDec_RAM:
000012F8 48E7 FFDE                      movem.l d0-a1/a3-a6,-(sp)
000012FC 47FA 0000                      lea NemDec_WriteRowToRAM(pc),a3
00001300 6000                           bra.s   NemDec_Main
00001302                             
00001302                            ; ------------------------------------------------------------------------------
00001302                            NemDec:
00001302 48E7 FFDE                      movem.l d0-a1/a3-a6,-(sp)
00001306 49F9 00C0 0000                 lea $C00000,a4      ; load VDP Data Port     
0000130C 47FA 0000                      lea NemPCD_WriteRowToVDP(pc),a3
00001310                             
00001310                            NemDec_Main:
00001310 43F8 AA00                      lea $FFFFAA00,a1        ; load Nemesis decompression buffer
00001314 3418                           move.w  (a0)+,d2        ; get number of patterns
00001316 6A00                           bpl.s   @0          ; are we in Mode 0?
00001318 47EB 000A                      lea $A(a3),a3       ; if not, use Mode 1
0000131C E74A                       @0  lsl.w   #3,d2
0000131E 3A42                           movea.w d2,a5
00001320 7607                           moveq   #7,d3
00001322 7400                           moveq   #0,d2
00001324 7800                           moveq   #0,d4
00001326 6100 0000                      bsr.w   NemDec_BuildCodeTable
0000132A 1A18                           move.b  (a0)+,d5        ; get first byte of compressed data
0000132C E145                           asl.w   #8,d5           ; shift up by a byte
0000132E 1A18                           move.b  (a0)+,d5        ; get second byte of compressed data
00001330 3C3C 0010                      move.w  #$10,d6         ; set initial shift value
00001334 6100                           bsr.s   NemDec2
00001336 4CDF 7BFF                      movem.l (sp)+,d0-a1/a3-a6
0000133A 4E75                           rts
0000133C                             
0000133C                            ; ---------------------------------------------------------------------------
0000133C                            ; Part of the Nemesis decompressor, processes the actual compressed data
0000133C                            ; ---------------------------------------------------------------------------
0000133C                             
0000133C                            NemDec2:
0000133C 3E06                           move.w  d6,d7
0000133E 5147                           subq.w  #8,d7           ; get shift value
00001340 3205                           move.w  d5,d1
00001342 EE69                           lsr.w   d7,d1           ; shift so that high bit of the code is in bit position 7
00001344 0C01 00FC                      cmpi.b  #%11111100,d1       ; are the high 6 bits set?
00001348 6400                           bcc.s   NemDec_InlineData   ; if they are, it signifies inline data
0000134A 0241 00FF                      andi.w  #$FF,d1
0000134E D241                           add.w   d1,d1
00001350 9C31 1000                      sub.b   (a1,d1.w),d6        ; ~~ subtract from shift value so that the next code is read next time around
00001354 0C46 0009                      cmpi.w  #9,d6           ; does a new byte need to be read?
00001358 6400                           bcc.s   @0          ; if not, branch
0000135A 5046                           addq.w  #8,d6
0000135C E145                           asl.w   #8,d5
0000135E 1A18                           move.b  (a0)+,d5        ; read next byte
00001360 1231 1001                  @0  move.b  1(a1,d1.w),d1
00001364 3001                           move.w  d1,d0
00001366 0241 000F                      andi.w  #$F,d1          ; get palette index for pixel
0000136A 0240 00F0                      andi.w  #$F0,d0
0000136E                             
0000136E                            NemDec_GetRepeatCount:
0000136E E848                           lsr.w   #4,d0           ; get repeat count
00001370                             
00001370                            NemDec_WritePixel:
00001370 E98C                           lsl.l   #4,d4           ; shift up by a nybble
00001372 8801                           or.b    d1,d4           ; write pixel
00001374 51CB 0000                      dbf d3,NemDec_WritePixelLoop; ~~
00001378 4ED3                           jmp (a3)            ; otherwise, write the row to its destination
0000137A                            ; ---------------------------------------------------------------------------
0000137A                             
0000137A                            NemPCD_NewRow:
0000137A 7800                           moveq   #0,d4           ; reset row
0000137C 7607                           moveq   #7,d3           ; reset nybble counter
0000137E                             
0000137E                            NemDec_WritePixelLoop:
0000137E 51C8 FFF0                      dbf d0,NemDec_WritePixel
00001382 60B8                           bra.s   NemDec2
00001384                            ; ---------------------------------------------------------------------------
00001384                             
00001384                            NemDec_InlineData:
00001384 5D46                           subq.w  #6,d6           ; 6 bits needed to signal inline data
00001386 0C46 0009                      cmpi.w  #9,d6
0000138A 6400                           bcc.s   @0
0000138C 5046                           addq.w  #8,d6
0000138E E145                           asl.w   #8,d5
00001390 1A18                           move.b  (a0)+,d5
00001392 5F46                       @0  subq.w  #7,d6           ; and 7 bits needed for the inline data itself
00001394 3205                           move.w  d5,d1
00001396 EC69                           lsr.w   d6,d1           ; shift so that low bit of the code is in bit position 0
00001398 3001                           move.w  d1,d0
0000139A 0241 000F                      andi.w  #$F,d1          ; get palette index for pixel
0000139E 0240 0070                      andi.w  #$70,d0         ; high nybble is repeat count for pixel
000013A2 0C46 0009                      cmpi.w  #9,d6
000013A6 64C6                           bcc.s   NemDec_GetRepeatCount
000013A8 5046                           addq.w  #8,d6
000013AA E145                           asl.w   #8,d5
000013AC 1A18                           move.b  (a0)+,d5
000013AE 60BE                           bra.s   NemDec_GetRepeatCount
000013B0                             
000013B0                            ; ---------------------------------------------------------------------------
000013B0                            ; Subroutines to output decompressed entry
000013B0                            ; Selected depending on current decompression mode
000013B0                            ; ---------------------------------------------------------------------------
000013B0                             
000013B0                            NemPCD_WriteRowToVDP:
000013B0                            loc_1502:
000013B0 2884                           move.l  d4,(a4)         ; write 8-pixel row
000013B2 534D                           subq.w  #1,a5
000013B4 380D                           move.w  a5,d4           ; have all the 8-pixel rows been written?
000013B6 66C2                           bne.s   NemPCD_NewRow         ; if not, branch
000013B8 4E75                           rts
000013BA                            ; ---------------------------------------------------------------------------
000013BA                             
000013BA                            NemPCD_WriteRowToVDP_XOR:
000013BA B982                           eor.l   d4,d2           ; XOR the previous row by the current row
000013BC 2882                           move.l  d2,(a4)         ; and write the result
000013BE 534D                           subq.w  #1,a5
000013C0 380D                           move.w  a5,d4
000013C2 66B6                           bne.s   NemPCD_NewRow
000013C4 4E75                           rts
000013C6                            ; ---------------------------------------------------------------------------
000013C6                             
000013C6                            NemDec_WriteRowToRAM:
000013C6 28C4                           move.l  d4,(a4)+        ; write 8-pixel row
000013C8 534D                           subq.w  #1,a5
000013CA 380D                           move.w  a5,d4           ; have all the 8-pixel rows been written?
000013CC 66AC                           bne.s   NemPCD_NewRow         ; if not, branch
000013CE 4E75                           rts
000013D0                            ; ---------------------------------------------------------------------------
000013D0                             
000013D0                            NemDec_WriteRowToRAM_XOR:
000013D0 B982                           eor.l   d4,d2           ; XOR the previous row by the current row
000013D2 28C2                           move.l  d2,(a4)+        ; and write the result
000013D4 534D                           subq.w  #1,a5
000013D6 380D                           move.w  a5,d4
000013D8 66A0                           bne.s   NemPCD_NewRow
000013DA 4E75                           rts
000013DC                             
000013DC                            ; ---------------------------------------------------------------------------
000013DC                            ; Part of the Nemesis decompressor, builds the code table (in RAM)
000013DC                            ; ---------------------------------------------------------------------------
000013DC                             
000013DC                            NemDec_BuildCodeTable:
000013DC 1018                           move.b  (a0)+,d0        ; read first byte
000013DE                             
000013DE                            @ChkEnd:
000013DE 0C00 00FF                      cmpi.b  #$FF,d0         ; has the end of the code table description been reached?
000013E2 6600                           bne.s   @NewPalIndex        ; if not, branch
000013E4 4E75                           rts
000013E6                            ; ---------------------------------------------------------------------------
000013E6                             
000013E6                            @NewPalIndex:
000013E6 3E00                           move.w  d0,d7
000013E8                             
000013E8                            @ItemLoop:
000013E8 1018                           move.b  (a0)+,d0        ; read next byte
000013EA 6BF2                           bmi.s   @ChkEnd         ; ~~
000013EC 1200                           move.b  d0,d1
000013EE 0247 000F                      andi.w  #$F,d7          ; get palette index
000013F2 0241 0070                      andi.w  #$70,d1         ; get repeat count for palette index
000013F6 8E41                           or.w    d1,d7           ; combine the two
000013F8 0240 000F                      andi.w  #$F,d0          ; get the length of the code in bits
000013FC 1200                           move.b  d0,d1
000013FE E149                           lsl.w   #8,d1
00001400 8E41                           or.w    d1,d7           ; combine with palette index and repeat count to form code table entry
00001402 7208                           moveq   #8,d1
00001404 9240                           sub.w   d0,d1           ; is the code 8 bits long?
00001406 6600                           bne.s   @ItemShortCode      ; if not, a bit of extra processing is needed
00001408 1018                           move.b  (a0)+,d0        ; get code
0000140A D040                           add.w   d0,d0           ; each code gets a word-sized entry in the table
0000140C 3387 0000                      move.w  d7,(a1,d0.w)        ; store the entry for the code
00001410 60D6                           bra.s   @ItemLoop       ; repeat
00001412                            ; ---------------------------------------------------------------------------
00001412                             
00001412                            @ItemShortCode:
00001412 1018                           move.b  (a0)+,d0        ; get code
00001414 E368                           lsl.w   d1,d0           ; shift so that high bit is in bit position 7
00001416 D040                           add.w   d0,d0           ; get index into code table
00001418 7A01                           moveq   #1,d5
0000141A E36D                           lsl.w   d1,d5
0000141C 5345                           subq.w  #1,d5           ; d5 = 2^d1 - 1
0000141E 4DF1 0000                      lea (a1,d0.w),a6        ; ~~
00001422                             
00001422                            @ItemShortCodeLoop:
00001422 3CC7                           move.w  d7,(a6)+        ; ~~ store entry
00001424 51CD FFFC                      dbf d5,@ItemShortCodeLoop   ; repeat for required number of entries
00001428 60BE                           bra.s   @ItemLoop
00001428 60BE                           bra.s   @ItemLoop
0000142A                            
0000142A                              
0000142A                                pusho	; buffer local label symbol config
0000142A                                opt ws+  ; change local label symbol to '.'
0000142A                            
0000142A                            ; ---------------------------------------------------------------------------
0000142A                            ; MACRO ResetDMAQueue
0000142A                            ; Clears the DMA queue, discarding all previously-queued DMAs.
0000142A                            ; ---------------------------------------------------------------------------
0000142A                            ; ROUTINE Process_DMA_Queue / ProcessDMAQueue
0000142A                            ; Performs all queued DMA transfers and clears the DMA queue.
0000142A                            ;
0000142A                            ; Output:
0000142A                            ; 	a1,a5	trashed
0000142A                            ; ---------------------------------------------------------------------------
0000142A                            ; ROUTINE InitDMAQueue
0000142A                            ; Pre-initializes the DMA queue with VDP register numbers in alternating bytes.
0000142A                            ; Must be called before the queue is used, and the queue expects that only it
0000142A                            ; write to this region of RAM.
0000142A                            ;
0000142A                            ; Output:
0000142A                            ; 	a0,d0,d1	trashed
0000142A                            ; ---------------------------------------------------------------------------
0000142A                            ; ROUTINE Add_To_DMA_Queue / QueueDMATransfer
0000142A                            ; Queues a DMA with parameters given in registers.
0000142A                            ;
0000142A                            ; Options:
0000142A                            ; 	AssumeSourceAddressInBytes (default 1)
0000142A                            ; 	AssumeSourceAddressIsRAMSafe (default 0)
0000142A                            ; 	UseRAMSourceSafeDMA (default 1&(AssumeSourceAddressIsRAMSafe=0))
0000142A                            ; 	Use128kbSafeDMA (default 0)
0000142A                            ; 	UseVIntSafeDMA (default 0)
0000142A                            ; Input:
0000142A                            ; 	d1	Source address (in bytes, or in words if AssumeSourceAddressInBytes is
0000142A                            ; 		set to 0)
0000142A                            ; 	d2	Destination address
0000142A                            ; 	d3	Transfer length (in words)
0000142A                            ; Output:
0000142A                            ; 	d0,d1,d2,d3,a1	trashed
0000142A                            ;
0000142A                            ; With the default settings, runs in:
0000142A                            ; * 48(11/0) cycles if queue is full (DMA discarded)
0000142A                            ; * 184(29/9) cycles otherwise (DMA queued)
0000142A                            ;
0000142A                            ; With Use128kbSafeDMA = 1, runs in:
0000142A                            ; * 48(11/0) cycles if queue is full at the start (DMA discarded)
0000142A                            ; * 200(32/9) cycles if the DMA does not cross a 128kB boundary (DMA queued)
0000142A                            ; * 226(38/9) cycles if the DMA crosses a 128kB boundary, and the first piece
0000142A                            ;   fills the queue (second piece is discarded)
0000142A                            ; * 338(56/17) cycles if the DMA crosses a 128kB boundary, and the queue has
0000142A                            ;   space for both pieces (both pieces queued)
0000142A                            ;
0000142A                            ; Setting UseVIntSafeDMA to 1 adds 46(6/1) cycles to all times.
0000142A                            ;
0000142A                            ; Setting AssumeSourceAddressInBytes to 0 reduces all times by 10(1/0) cycles,
0000142A                            ; but only if the DMA is not entirely discarded. However, all callers must be
0000142A                            ; edited to make sure the adresss given is correct.
0000142A                            ;
0000142A                            ; Setting AssumeSourceAddressIsRAMSafe to 1, or UseRAMSourceSafeDMA to 0,
0000142A                            ; reduces all times by 14(2/0) cycles, but only if the DMA is not entirely
0000142A                            ; discarded. However, all callers must be edited to make sure the adresss given
0000142A                            ; in the correct form. You can use the dmaSource function for that.
0000142A                            ; ---------------------------------------------------------------------------
0000142A                            ; MACRO QueueStaticDMA
0000142A                            ; Directly queues a DMA on the spot. Requires all parameters to be known at
0000142A                            ; assembly time; that is, no registers. Gives assembly errors when the DMA
0000142A                            ; crosses a 128kB boundary, is at an odd ROM location, or is zero length.
0000142A                            ;
0000142A                            ; Options:
0000142A                            ; 	UseVIntSafeDMA (default 0)
0000142A                            ; Input:
0000142A                            ; 	Source address (in bytes), transfer length (in bytes), destination address
0000142A                            ; Output:
0000142A                            ; 	d0,a1	trashed
0000142A                            ;
0000142A                            ; With the default settings, runs in:
0000142A                            ; * 32(7/0) cycles if queue is full (DMA discarded)
0000142A                            ; * 122(21/8) cycles otherwise (DMA queued)
0000142A                            ;
0000142A                            ; Setting UseVIntSafeDMA to 1 adds 46(6/1) cycles to both cases.
0000142A                            ; ===========================================================================
0000142A                            ; option: AssumeSourceAddressInBytes
0000142A                            ;
0000142A                            ; This option makes the function work as a drop-in replacement of the original
0000142A                            ; functions. If you modify all callers to supply a position in words instead of
0000142A                            ; bytes (i.e., divide source address by 2) you can set this to 0 to gain 10(1/0)
0000142A =00000001                  AssumeSourceAddressInBytes = 1
0000142A                            ; ===========================================================================
0000142A                            ; option: AssumeSourceAddressIsRAMSafe
0000142A                            ;
0000142A                            ; This option (which is disabled by default) makes the DMA queue assume that the
0000142A                            ; source address is given to the function in a way that makes them safe to use
0000142A                            ; with RAM sources. You need to edit all callers to ensure this.
0000142A                            ; Enabling this option turns off UseRAMSourceSafeDMA, and saves 14(2/0).
0000142A =00000000                  AssumeSourceAddressIsRAMSafe = 0
0000142A                            ; ===========================================================================
0000142A                            ; option: UseRAMSourceSafeDMA
0000142A                            ;
0000142A                            ; This option (which is enabled by default) makes source addresses in RAM safe
0000142A                            ; at the cost of 14(2/0). If you modify all callers so as to clear the top byte
0000142A                            ; of source addresses (i.e., by ANDing them with $FFFFFF).
0000142A =00000001                  UseRAMSourceSafeDMA = 1&(AssumeSourceAddressIsRAMSafe=0)
0000142A                            ; ===========================================================================
0000142A                            ; option: Use128kbSafeDMA
0000142A                            ;
0000142A                            ; This option breaks DMA transfers that crosses a 128kB block into two. It is
0000142A                            ; disabled by default because you can simply align the art in ROM and avoid the
0000142A                            ; issue altogether. It is here so that you have a high-performance routine to do
0000142A                            ; the job in situations where you can't align it in ROM.
0000142A =00000001                  Use128kbSafeDMA = 1
0000142A                            ; ===========================================================================
0000142A                            ; option UseVIntSafeDMA
0000142A                            ;
0000142A                            ; Option to mask interrupts while updating the DMA queue. This fixes many race
0000142A                            ; conditions in the DMA funcion, but it costs 46(6/1) cycles. The better way to
0000142A                            ; handle these race conditions would be to make unsafe callers (such as S3&K's
0000142A                            ; KosM decoder) prevent these by masking off interrupts before calling and then
0000142A                            ; restore interrupts after.
0000142A =00000000                  UseVIntSafeDMA = 0
0000142A                            ; ===========================================================================
0000142A                            
0000142A                            
0000142A                            ; Convenience macros, for increased maintainability of the code.
0000142A =00000027                  DMA = %100111
0000142A =00000021                  VRAM = %100001
0000142A                            ; Like vdpComm, but starting from an address contained in a register
0000142A =00000001                  vdpCommReg_defined = 1
0000142A                            vdpCommReg macro reg,type,rwd,clr
0000142A                            	lsl.l	#2,\reg							; Move high bits into (word-swapped) position, accidentally moving everything else
0000142A                            	if ((\type&\rwd)&3)<>0
0000142A                            		addq.w	#((\type&\rwd)&3),\reg			; Add upper access type bits
0000142A                            	endif
0000142A                            	ror.w	#2,\reg							; Put upper access type bits into place, also moving all other bits into their correct (word-swapped) places
0000142A                            	swap	\reg								; Put all bits in proper places
0000142A                            	if \clr <> 0
0000142A                            		andi.w	#3,\reg						; Strip whatever junk was in upper word of reg
0000142A                            	endif
0000142A                            	if ((\type&\rwd)&$FC)=$20
0000142A                            		tas.b	\reg							; Add in the DMA flag -- tas fails on memory, but works on registers
0000142A                            	elseif ((\type&\rwd)&$FC)<>0
0000142A                            		ori.w	#(((\type&\rwd)&$FC)<<2),\reg	; Add in missing access type bits
0000142A                            	endif
0000142A                            	endm
0000142A                            ; ---------------------------------------------------------------------------
0000142A =00000001                  intMacros_defined = 1
0000142A                            enableInts macro
0000142A                            	move	#$2300,sr
0000142A                            	endm
0000142A                            
0000142A                            disableInts macro
0000142A                            	move	#$2700,sr
0000142A                            	endm
0000142A                            ; ---------------------------------------------------------------------------
0000142A =00000001                  DMAEntry_defined = 1
0000142A                                    rsreset
0000142A =00000000                  DMAEntry.Reg94:		rs.b	1
0000142A                            			  
0000142A =00000001                  DMAEntry.Size:      rs.b    0
0000142A =00000001                  DMAEntry.SizeH:		rs.b	1
0000142A =00000002                  DMAEntry.Reg93:		rs.b	1
0000142A =00000003                  DMAEntry.Source:    rs.b    0
0000142A =00000003                  DMAEntry.SizeL:		rs.b	1
0000142A =00000004                  DMAEntry.Reg97:		rs.b	1
0000142A =00000005                  DMAEntry.SrcH:		rs.b	1
0000142A =00000006                  DMAEntry.Reg96:		rs.b	1
0000142A =00000007                  DMAEntry.SrcM:		rs.b	1
0000142A =00000008                  DMAEntry.Reg95:		rs.b	1
0000142A =00000009                  DMAEntry.SrcL:		rs.b	1
0000142A =0000000A                  DMAEntry.Command:	rs.l	1
0000142A =0000000E                  DMAEntry.len:   rs.w    0
0000142A                            ; ---------------------------------------------------------------------------
0000142A =00000012                  QueueSlotCount = (VDP_Command_Buffer_Slot-VDP_Command_Buffer)/DMAEntry.len
0000142A                            ; ---------------------------------------------------------------------------
0000142A                            						
0000142A                            										   
0000142A                            									   
0000142A                            	  
0000142A                            																			 
0000142A                            							  
0000142A =00000001                  QueueStaticDMA_defined = 1
0000142A                            ; Expects source address and DMA length in bytes. Also, expects source, size, and dest to be known
0000142A                            ; at assembly time. Gives errors if DMA starts at an odd address, transfers
0000142A                            ; crosses a 128kB boundary, or has size 0.
0000142A                            QueueStaticDMA macro src,length,dest
0000142A                                local   len
0000142A                            		if ((\src)&1)<>0
0000142A                            			inform 3,"DMA queued from odd source \1!"
0000142A                            		endif
0000142A                            		if ((\length)&1)<>0
0000142A                            			inform 3,"DMA an odd number of bytes \2!"
0000142A                            		endif
0000142A                            		if (\length)=0
0000142A                            			inform 3,"DMA transferring 0 bytes (becomes a 128kB transfer). If you really mean it, pass 128kB instead."
0000142A                            		endif
0000142A                            		if (((\src)+(\length)-1)>>17)<>((\src)>>17)
0000142A                            			inform 3,"DMA crosses a 128kB boundary. You should either split the DMA manually or align the source adequately."
0000142A                            		endif
0000142A                            	  
0000142A                            	if UseVIntSafeDMA=1
0000142A                            		move.w	sr,-(sp)										; Save current interrupt mask
0000142A                            		disableInts												; Mask off interrupts
0000142A                            	endif ; UseVIntSafeDMA=1
0000142A                            	movea.w	(VDP_Command_Buffer_Slot).w,a1
0000142A                            	cmpa.w	#VDP_Command_Buffer_Slot,a1
0000142A                            	beq.s	.done												; Return if there's no more room in the buffer
0000142A                            	len: = ((length>>1)&$7FFF)
0000142A                                move.b	#(len>>8)&$FF,DMAEntry.SizeH(a1)		; Write top byte of size/2
0000142A                            	move.l	#((len&$FF)<<24)|((src>>1)&$7FFFFF),d0	; Set d0 to bottom byte of size/2 and the low 3 bytes of source/2
0000142A                            	movep.l	d0,DMAEntry.SizeL(a1)								; Write it all to the queue
0000142A                            	lea	DMAEntry.Command(a1),a1									; Seek to correct RAM address to store VDP DMA command
0000142A                            	move.l	#$40000080,(a1)+						; Write VDP DMA command for destination address
0000142A                            	move.w	a1,(VDP_Command_Buffer_Slot).w						; Write next queue slot
0000142A                            .done:
0000142A                            	if UseVIntSafeDMA=1
0000142A                            		move.w	(sp)+,sr										; Restore interrupts to previous state
0000142A                            	endif ;UseVIntSafeDMA=1
0000142A                            	endm
0000142A                            
0000142A                                
0000142A                            
0000142A                            ; ---------------------------------------------------------------------------
0000142A                            ResetDMAQueue: macro
0000142A                            	move.w	#VDP_Command_Buffer,(VDP_Command_Buffer_Slot).w
0000142A                            	endm
0000142A                            ; ===========================================================================
0000142A                            
0000142A                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
0000142A                            
0000142A                            ; sub_144E: DMA_68KtoVRAM: QueueCopyToVRAM: QueueVDPCommand:
0000142A                            Add_To_DMA_Queue:
0000142A                            QueueDMATransfer:
0000142A 3278 C8FC                  	movea.w	(VDP_Command_Buffer_Slot).w,a1
0000142E B2FC C8FC                  	cmpa.w	#VDP_Command_Buffer_Slot,a1
00001432 6700                       	beq.s	.done											; Return if there's no more room in the buffer
00001434                            
00001434 E289                       		lsr.l	#1,d1										; Source address is in words for the VDP registers
00001436 0881 0017                  		bclr.l	#23,d1										; Make sure bit 23 is clear (68k->VDP DMA flag)
0000143A 03C9 0003                  	movep.l	d1,DMAEntry.Source(a1)							; Write source address; the useless top byte will be overwritten later
0000143E 7000                       	moveq	#0,d0											; We need a zero on d0
00001440                            
00001440                            		; Detect if transfer crosses 128KB boundary
00001440                            		; Using sub+sub instead of move+add handles the following edge cases:
00001440                            		; (1) d3.w = 0 => 128kB transfer
00001440                            		;   (a) d1.w = 0 => no carry, don't split the DMA
00001440                            		;   (b) d1.w != 0 => carry, need to split the DMA
00001440                            		; (2) d3.w != 0
00001440                            		;   (a) if there is carry on d1.w + d3.w
00001440                            		;     (* ) if d1.w + d3.w = 0 => transfer comes entirely from current 128kB block, don't split the DMA
00001440                            		;     (**) if d1.w + d3.w != 0 => need to split the DMA
00001440                            		;   (b) if there is no carry on d1.w + d3.w => don't split the DMA
00001440                            		; The reason this works is that carry on d1.w + d3.w means that
00001440                            		; d1.w + d3.w >= $10000, whereas carry on (-d3.w) - (d1.w) means that
00001440                            		; d1.w + d3.w > $10000.
00001440 9043                       		sub.w	d3,d0										; Using sub instead of move and add allows checking edge cases
00001442 9041                       		sub.w	d1,d0										; Does the transfer cross over to the next 128kB block?
00001444 6500                       		bcs.s	.doubletransfer								; Branch if yes
00001446                            	; It does not cross a 128kB boundary. So just finish writing it.
00001446 0789 0001                  	movep.w	d3,DMAEntry.Size(a1)							; Write DMA length, overwriting useless top byte of source address
0000144A                            
0000144A                            .finishxfer:
0000144A                            	; Command to specify destination address and begin DMA
0000144A 3002                       	move.w	d2,d0											; Use the fact that top word of d0 is zero to avoid clearing on vdpCommReg
00001456 43E9 000A                  	lea	DMAEntry.Command(a1),a1								; Seek to correct RAM address to store VDP DMA command
0000145A 22C0                       	move.l	d0,(a1)+										; Write VDP DMA command for destination address
0000145C 31C9 C8FC                  	move.w	a1,(VDP_Command_Buffer_Slot).w					; Write next queue slot
00001460                            
00001460                            .done:
00001460 4E75                       	rts
00001462                            ; ---------------------------------------------------------------------------
00001462                            .doubletransfer:
00001462                            		; We need to split the DMA into two parts, since it crosses a 128kB block
00001462 D043                       		add.w	d3,d0										; Set d0 to the number of words until end of current 128kB block
00001464 0189 0001                  		movep.w	d0,DMAEntry.Size(a1)						; Write DMA length of first part, overwriting useless top byte of source addres
00001468                            
00001468 B2FC C8EE                  		cmpa.w	#VDP_Command_Buffer_Slot-DMAEntry.len,a1	; Does the queue have enough space for both parts?
0000146C 67DC                       		beq.s	.finishxfer									; Branch if not
0000146E                            
0000146E                            		; Get second transfer's source, destination, and length
0000146E 9640                       		sub.w	d0,d3										; Set d3 to the number of words remaining
00001470 D280                       		add.l	d0,d1										; Offset the source address of the second part by the length of the first part
00001472 D040                       		add.w	d0,d0										; Convert to number of bytes
00001474 D042                       		add.w	d2,d0										; Set d0 to the VRAM destination of the second part
00001476                            
00001476                            		; If we know top word of d2 is clear, the following vdpCommReg can be set to not
00001476                            		; clear it. There is, unfortunately, no faster way to clear it than this.
00001484 2342 000A                  		move.l	d2,DMAEntry.Command(a1)						; Write VDP DMA command for destination address of first part
00001488                            
00001488                            		; Do second transfer
00001488 03C9 0011                  		movep.l	d1,DMAEntry.len+DMAEntry.Source(a1)			; Write source address of second part; useless top byte will be overwritten later
0000148C 0789 000F                  		movep.w	d3,DMAEntry.len+DMAEntry.Size(a1)			; Write DMA length of second part, overwriting useless top byte of source addres
00001490                            
00001490                            		; Command to specify destination address and begin DMA
0000149A 43E9 0018                  		lea	DMAEntry.len+DMAEntry.Command(a1),a1			; Seek to correct RAM address to store VDP DMA command of second part
0000149E 22C0                       		move.l	d0,(a1)+									; Write VDP DMA command for destination address of second part
000014A0                            
000014A0 31C9 C8FC                  		move.w	a1,(VDP_Command_Buffer_Slot).w				; Write next queue slot
000014A4 4E75                       		rts
000014A6                            ; End of function QueueDMATransfer
000014A6                            ; ===========================================================================
000014A6                            
000014A6                            ; ---------------------------------------------------------------------------
000014A6                            ; Subroutine for issuing all VDP commands that were queued
000014A6                            ; (by earlier calls to QueueDMATransfer)
000014A6                            ; Resets the queue when it's done
000014A6                            ; ---------------------------------------------------------------------------
000014A6                            
000014A6                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
000014A6                            
000014A6                            ; sub_14AC: CopyToVRAM: IssueVDPCommands: Process_DMA:
000014A6                            Process_DMA_Queue:
000014A6                            ProcessDMAQueue:
000014A6 3278 C8FC                  	movea.w	(VDP_Command_Buffer_Slot).w,a1
000014AA 4EE9 0000                  	jmp	.jump_table-VDP_Command_Buffer(a1)
000014AE                            ; ---------------------------------------------------------------------------
000014AE                            .jump_table:
000014AE 4E75                       	rts
000014B0                            	rept 6
000014B0                            		trap	#0											; Just in case
000014B0 4E40 4E40 4E40 4E40 4E40+  	endr
000014BC                            ; ---------------------------------------------------------------------------
000014BC =00000001                      c: = 1
000014BC                            	rept QueueSlotCount
000014BC                            		lea	(vdp_control_port).l,a5
000014BC                            		lea	(VDP_Command_Buffer).w,a1
000014BC                            		if c<>QueueSlotCount
000014BC                            			bra.w	.jump0 - c*8
000014BC                            		endif
000014BC                                c: = c + 1
000015B4                            ; ---------------------------------------------------------------------------
000015B4                            	rept QueueSlotCount
000015B4                            		move.l	(a1)+,(a5)									; Transfer length
000015B4                            		move.l	(a1)+,(a5)									; Source address high
000015B4                            		move.l	(a1)+,(a5)									; Source address low + destination high
000015B4                            		move.w	(a1)+,(a5)									; Destination low, trigger DMA
000015B4 2A99 2A99 2A99 3A99 2A99+  	endr
00001644                            
00001644                            .jump0:
00001644 31FC C800 C8FC             	ResetDMAQueue
0000164A 4E75                       	rts
0000164C                            ; End of function ProcessDMAQueue
0000164C                            ; ===========================================================================
0000164C                            
0000164C                            ; ---------------------------------------------------------------------------
0000164C                            ; Subroutine for initializing the DMA queue.
0000164C                            ; ---------------------------------------------------------------------------
0000164C                            
0000164C                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
0000164C                            
0000164C                            InitDMAQueue:
0000164C 41F8 C800                  	lea	(VDP_Command_Buffer).w,a0
00001650 7094                       	moveq	#-$6C,d0				; fast-store $94 (sign-extended) in d0
00001652 223C 9397 9695             	move.l	#$93979695,d1
00001658 =00000000                      c: = 0
00001658                            	rept QueueSlotCount
00001658                            		move.b	d0,c + DMAEntry.Reg94(a0)
00001658                            		movep.l	d1,c + DMAEntry.Reg93(a0)
00001658                                c: = c + DMAEntry.len
00001658 1080 03C8 0002 1140 000E+  	endr
000016E6                            
000016E6 31FC C800 C8FC             	ResetDMAQueue
000016EC 4E75                       	rts
000016EE                            ; End of function ProcessDMAQueue
000016EE                            ; ===========================================================================
000016EE                            
000016EE                            
000016EE                                popo	; buffer local label symbol config
000016EE                            
000016EE                            
000016EE                            ; ---------------------------------------------------------------------------
000016EE                            ; Subroutine to load pattern load cues (aka to queue pattern load requests)
000016EE                            ; ---------------------------------------------------------------------------
000016EE                            
000016EE                            ; ARGUMENTS
000016EE                            ; d0 = index of PLC list
000016EE                            ; ---------------------------------------------------------------------------
000016EE                            
000016EE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000016EE                            
000016EE                            ; LoadPLC:
000016EE                            AddPLC:
000016EE 48E7 0060                  		movem.l	a1-a2,-(sp)
000016F2 43F9 0000 0000             		lea	(ArtLoadCues).l,a1
000016F8 D040                       		add.w	d0,d0
000016FA 3031 0000                  		move.w	(a1,d0.w),d0
000016FE 43F1 0000                  		lea	(a1,d0.w),a1		; jump to relevant PLC
00001702 45F8 F680                  		lea	(v_plc_buffer).w,a2 ; PLC buffer space
00001706                            
00001706                            	@findspace:
00001706 4A92                       		tst.l	(a2)		; is space available in RAM?
00001708 6700                       		beq.s	@copytoRAM	; if yes, branch
0000170A 5C4A                       		addq.w	#6,a2		; if not, try next space
0000170C 60F8                       		bra.s	@findspace
0000170E                            ; ===========================================================================
0000170E                            
0000170E                            @copytoRAM:
0000170E 3019                       		move.w	(a1)+,d0	; get length of PLC
00001710 6B00                       		bmi.s	@skip
00001712                            
00001712                            	@loop:
00001712 24D9                       		move.l	(a1)+,(a2)+
00001714 34D9                       		move.w	(a1)+,(a2)+	; copy PLC to RAM
00001716 51C8 FFFA                  		dbf	d0,@loop	; repeat for length of PLC
0000171A                            
0000171A                            	@skip:
0000171A 4CDF 0600                  		movem.l	(sp)+,a1-a2 ; a1=object
0000171E 4E75                       		rts	
00001720                            ; End of function AddPLC
00001720                            
00001720                            
00001720                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001720                            ; Queue pattern load requests, but clear the PLQ first
00001720                            
00001720                            ; ARGUMENTS
00001720                            ; d0 = index of PLC list (see ArtLoadCues)
00001720                            
00001720                            ; NOTICE: This subroutine does not check for buffer overruns. The programmer
00001720                            ;	  (or hacker) is responsible for making sure that no more than
00001720                            ;	  16 load requests are copied into the buffer.
00001720                            ;	  _________DO NOT PUT MORE THAN 16 LOAD REQUESTS IN A LIST!__________
00001720                            ;         (or if you change the size of Plc_Buffer, the limit becomes (Plc_Buffer_Only_End-Plc_Buffer)/6)
00001720                            
00001720                            ; LoadPLC2:
00001720                            NewPLC:
00001720 48E7 0060                  		movem.l	a1-a2,-(sp)
00001724 43F9 0000 0000             		lea	(ArtLoadCues).l,a1
0000172A D040                       		add.w	d0,d0
0000172C 3031 0000                  		move.w	(a1,d0.w),d0
00001730 43F1 0000                  		lea	(a1,d0.w),a1	; jump to relevant PLC
00001734 6100                       		bsr.s	ClearPLC	; erase any data in PLC buffer space
00001736 45F8 F680                  		lea	(v_plc_buffer).w,a2
0000173A 3019                       		move.w	(a1)+,d0	; get length of PLC
0000173C 6B00                       		bmi.s	@skip		; if it's negative, skip the next loop
0000173E                            
0000173E                            	@loop:
0000173E 24D9                       		move.l	(a1)+,(a2)+
00001740 34D9                       		move.w	(a1)+,(a2)+	; copy PLC to RAM
00001742 51C8 FFFA                  		dbf	d0,@loop		; repeat for length of PLC
00001746                            
00001746                            	@skip:
00001746 4CDF 0600                  		movem.l	(sp)+,a1-a2
0000174A 4E75                       		rts	
0000174C                            ; End of function NewPLC
0000174C                            
0000174C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000174C                            
0000174C                            ; ---------------------------------------------------------------------------
0000174C                            ; Subroutine to	clear the pattern load cues
0000174C                            ; ---------------------------------------------------------------------------
0000174C                            
0000174C                            ; Clear the pattern load queue ($FFF680 - $FFF700)
0000174C                            
0000174C                            
0000174C                            ClearPLC:
0000174C 45F8 F680                  		lea	(v_plc_buffer).w,a2 ; PLC buffer space in RAM
00001750 701F                       		moveq	#$1F,d0	; bytesToLcnt(v_plc_buffer_end-v_plc_buffer)
00001752                            
00001752                            	@loop:
00001752 429A                       		clr.l	(a2)+
00001754 51C8 FFFC                  		dbf	d0,@loop
00001758 4E75                       		rts	
0000175A                            ; End of function ClearPLC
0000175A                            
0000175A                            ; ---------------------------------------------------------------------------
0000175A                            ; Subroutine to	use graphics listed in a pattern load cue
0000175A                            ; ---------------------------------------------------------------------------
0000175A                            
0000175A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000175A                            
0000175A                            
0000175A                            RunPLC:
0000175A 4AB8 F680                  		tst.l	(v_plc_buffer).w
0000175E 6700                       		beq.s	Rplc_Exit
00001760 4A78 F6F8                  		tst.w	(f_plc_execute).w
00001764 6600                       		bne.s	Rplc_Exit
00001766 2078 F680                  		movea.l	(v_plc_buffer).w,a0
0000176A 47F9 0000 13B0             		lea	(NemPCD_WriteRowToVDP).l,a3
00001770 43F8 AA00                  		lea	(v_ngfx_buffer).w,a1
00001774 3418                       		move.w	(a0)+,d2
00001776 6A00                       		bpl.s	loc_160E
00001778 D6FC 000A                  		adda.w	#$A,a3
0000177C                            
0000177C                            loc_160E:
0000177C 0242 7FFF                  		andi.w	#$7FFF,d2
00001780 31C2 F6F8                  		move.w	d2,(f_plc_execute).w
00001784 6100 FC56                  		bsr.w	NemDec_BuildCodeTable
00001788 1A18                       		move.b	(a0)+,d5
0000178A E145                       		asl.w	#8,d5
0000178C 1A18                       		move.b	(a0)+,d5
0000178E 7C10                       		moveq	#$10,d6
00001790 7000                       		moveq	#0,d0
00001792 21C8 F680                  		move.l	a0,(v_plc_buffer).w
00001796 21CB F6E0                  		move.l	a3,(v_ptrnemcode).w
0000179A 21C0 F6E4                  		move.l	d0,($FFFFF6E4).w
0000179E 21C0 F6E8                  		move.l	d0,($FFFFF6E8).w
000017A2 21C0 F6EC                  		move.l	d0,($FFFFF6EC).w
000017A6 21C5 F6F0                  		move.l	d5,($FFFFF6F0).w
000017AA 21C6 F6F4                  		move.l	d6,($FFFFF6F4).w
000017AE                            
000017AE                            Rplc_Exit:
000017AE 4E75                       		rts	
000017B0                            ; End of function RunPLC
000017B0                            
000017B0                            
000017B0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000017B0                            
000017B0                            
000017B0                            sub_1642:
000017B0 4A78 F6F8                  		tst.w	(f_plc_execute).w
000017B4 6700 0000                  		beq.w	locret_16DA
000017B8 31FC 0009 F6FA             		move.w	#9,($FFFFF6FA).w
000017BE 7000                       		moveq	#0,d0
000017C0 3038 F684                  		move.w	($FFFFF684).w,d0
000017C4 0678 0120 F684             		addi.w	#$120,($FFFFF684).w
000017CA 6000                       		bra.s	loc_1676
000017CC                            ; End of function sub_1642
000017CC                            
000017CC                            
000017CC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000017CC                            
000017CC                            
000017CC                            ; sub_165E:
000017CC                            ProcessDPLC2:
000017CC 4A78 F6F8                  		tst.w	(f_plc_execute).w
000017D0 6700                       		beq.s	locret_16DA
000017D2 31FC 0003 F6FA             		move.w	#3,($FFFFF6FA).w
000017D8 7000                       		moveq	#0,d0
000017DA 3038 F684                  		move.w	($FFFFF684).w,d0
000017DE 0678 0060 F684             		addi.w	#$60,($FFFFF684).w
000017E4                            
000017E4                            loc_1676:
000017E4 49F9 00C0 0004             		lea	(vdp_control_port).l,a4
000017EA E588                       		lsl.l	#2,d0
000017EC E448                       		lsr.w	#2,d0
000017EE 0040 4000                  		ori.w	#$4000,d0
000017F2 4840                       		swap	d0
000017F4 2880                       		move.l	d0,(a4)
000017F6 594C                       		subq.w	#4,a4
000017F8 2078 F680                  		movea.l	(v_plc_buffer).w,a0
000017FC 2678 F6E0                  		movea.l	(v_ptrnemcode).w,a3
00001800 2038 F6E4                  		move.l	($FFFFF6E4).w,d0
00001804 2238 F6E8                  		move.l	($FFFFF6E8).w,d1
00001808 2438 F6EC                  		move.l	($FFFFF6EC).w,d2
0000180C 2A38 F6F0                  		move.l	($FFFFF6F0).w,d5
00001810 2C38 F6F4                  		move.l	($FFFFF6F4).w,d6
00001814 43F8 AA00                  		lea	(v_ngfx_buffer).w,a1
00001818                            
00001818                            loc_16AA:
00001818 3A7C 0008                  		movea.w	#8,a5
0000181C 6100 FB5C                  		bsr.w	NemPCD_NewRow
00001820 5378 F6F8                  		subq.w	#1,(f_plc_execute).w
00001824 6700                       		beq.s	loc_16DC
00001826 5378 F6FA                  		subq.w	#1,($FFFFF6FA).w
0000182A 66EC                       		bne.s	loc_16AA
0000182C 21C8 F680                  		move.l	a0,(v_plc_buffer).w
00001830 21CB F6E0                  		move.l	a3,(v_ptrnemcode).w
00001834 21C0 F6E4                  		move.l	d0,($FFFFF6E4).w
00001838 21C1 F6E8                  		move.l	d1,($FFFFF6E8).w
0000183C 21C2 F6EC                  		move.l	d2,($FFFFF6EC).w
00001840 21C5 F6F0                  		move.l	d5,($FFFFF6F0).w
00001844 21C6 F6F4                  		move.l	d6,($FFFFF6F4).w
00001848                            
00001848                            locret_16DA:
00001848 4E75                       		rts	
0000184A                            ; ===========================================================================
0000184A                            
0000184A                            loc_16DC:
0000184A 41F8 F680                  		lea	(v_plc_buffer).w,a0
0000184E 7015                       		moveq	#$15,d0
00001850                            
00001850                            loc_16E2:
00001850 20E8 0006                  		move.l	6(a0),(a0)+
00001854 51C8 FFFA                  		dbf	d0,loc_16E2
00001858 4E75                       		rts	
0000185A                            ; End of function ProcessDPLC2
0000185A                            
0000185A                            ; ---------------------------------------------------------------------------
0000185A                            ; Subroutine to	execute	the pattern load cue
0000185A                            ; ---------------------------------------------------------------------------
0000185A                            
0000185A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000185A                            
0000185A                            
0000185A                            QuickPLC:
0000185A 43F9 0000 0000             		lea	(ArtLoadCues).l,a1 ; load the PLC index
00001860 D040                       		add.w	d0,d0
00001862 3031 0000                  		move.w	(a1,d0.w),d0
00001866 43F1 0000                  		lea	(a1,d0.w),a1
0000186A 3219                       		move.w	(a1)+,d1	; get length of PLC
0000186C                            
0000186C                            	Qplc_Loop:
0000186C 2059                       		movea.l	(a1)+,a0	; get art pointer
0000186E 7000                       		moveq	#0,d0
00001870 3019                       		move.w	(a1)+,d0	; get VRAM address
00001872 E588                       		lsl.l	#2,d0
00001874 E448                       		lsr.w	#2,d0
00001876 0040 4000                  		ori.w	#$4000,d0
0000187A 4840                       		swap	d0
0000187C 23C0 00C0 0004             		move.l	d0,(vdp_control_port).l ; converted VRAM address to VDP format
00001882 6100 FA7E                  		bsr.w	NemDec		; decompress
00001886 51C9 FFE4                  		dbf	d1,Qplc_Loop	; repeat for length of PLC
0000188A 4E75                       		rts	
0000188C                            ; End of function QuickPLC
0000188C                            
0000188C                            		include	"_inc\Enigma Decompression.asm"
0000188C                            ; ---------------------------------------------------------------------------
0000188C                            ; Enigma decompression algorithm
0000188C                            
0000188C                            ; input:
0000188C                            ;	d0 = starting art tile (added to each 8x8 before writing to destination)
0000188C                            ;	a0 = source address
0000188C                            ;	a1 = destination address
0000188C                            
0000188C                            ; usage:
0000188C                            ;	lea	(source).l,a0
0000188C                            ;	lea	(destination).l,a1
0000188C                            ;	move.w	#arttile,d0
0000188C                            ;	bsr.w	EniDec
0000188C                            
0000188C                            ; See http://www.segaretro.org/Enigma_compression for format description
0000188C                            ; ---------------------------------------------------------------------------
0000188C                            
0000188C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000188C                            
0000188C                            
0000188C                            EniDec:
0000188C 48E7 FF7C                  		movem.l	d0-d7/a1-a5,-(sp)
00001890 3640                       		movea.w	d0,a3		; store starting art tile
00001892 1018                       		move.b	(a0)+,d0
00001894 4880                       		ext.w	d0
00001896 3A40                       		movea.w	d0,a5		; store number of bits in inline copy value
00001898 1818                       		move.b	(a0)+,d4
0000189A E70C                       		lsl.b	#3,d4		; store PCCVH flags bitfield
0000189C 3458                       		movea.w	(a0)+,a2
0000189E D4CB                       		adda.w	a3,a2		; store incremental copy word
000018A0 3858                       		movea.w	(a0)+,a4
000018A2 D8CB                       		adda.w	a3,a4		; store literal copy word
000018A4 1A18                       		move.b	(a0)+,d5
000018A6 E145                       		asl.w	#8,d5
000018A8 1A18                       		move.b	(a0)+,d5	; get first word in format list
000018AA 7C10                       		moveq	#16,d6		; initial shift value
000018AC                            ; loc_173E:
000018AC                            Eni_Loop:
000018AC 7007                       		moveq	#7,d0		; assume a format list entry is 7 bits
000018AE 3E06                       		move.w	d6,d7
000018B0 9E40                       		sub.w	d0,d7
000018B2 3205                       		move.w	d5,d1
000018B4 EE69                       		lsr.w	d7,d1
000018B6 0241 007F                  		andi.w	#$7F,d1		; get format list entry
000018BA 3401                       		move.w	d1,d2		; and copy it
000018BC 0C41 0040                  		cmpi.w	#$40,d1		; is the high bit of the entry set?
000018C0 6400                       		bhs.s	@sevenbitentry
000018C2 7006                       		moveq	#6,d0		; if it isn't, the entry is actually 6 bits
000018C4 E24A                       		lsr.w	#1,d2
000018C6                            ; loc_1758:
000018C6                            @sevenbitentry:
000018C6 6100 0000                  		bsr.w	EniDec_FetchByte
000018CA 0242 000F                  		andi.w	#$F,d2		; get repeat count
000018CE E849                       		lsr.w	#4,d1
000018D0 D241                       		add.w	d1,d1
000018D2 4EFB 1000                  		jmp	EniDec_Index(pc,d1.w)
000018D6                            ; End of function EniDec
000018D6                            
000018D6                            ; ===========================================================================
000018D6                            ; loc_1768:
000018D6                            EniDec_00:
000018D6 32CA                       @loop:		move.w	a2,(a1)+	; copy incremental copy word
000018D8 524A                       		addq.w	#1,a2		; increment it
000018DA 51CA FFFA                  		dbf	d2,@loop	; repeat
000018DE 60CC                       		bra.s	Eni_Loop
000018E0                            ; ===========================================================================
000018E0                            ; loc_1772:
000018E0                            EniDec_01:
000018E0 32CC                       @loop:		move.w	a4,(a1)+	; copy literal copy word
000018E2 51CA FFFC                  		dbf	d2,@loop	; repeat
000018E6 60C4                       		bra.s	Eni_Loop
000018E8                            ; ===========================================================================
000018E8                            ; loc_177A:
000018E8                            EniDec_100:
000018E8 6100 0000                  		bsr.w	EniDec_FetchInlineValue
000018EC                            ; loc_177E:
000018EC 32C1                       @loop:		move.w	d1,(a1)+	; copy inline value
000018EE 51CA FFFC                  		dbf	d2,@loop	; repeat
000018F2                            
000018F2 60B8                       		bra.s	Eni_Loop
000018F4                            ; ===========================================================================
000018F4                            ; loc_1786:
000018F4                            EniDec_101:
000018F4 6100 0000                  		bsr.w	EniDec_FetchInlineValue
000018F8                            ; loc_178A:
000018F8 32C1                       @loop:		move.w	d1,(a1)+	; copy inline value
000018FA 5241                       		addq.w	#1,d1		; increment
000018FC 51CA FFFA                  		dbf	d2,@loop	; repeat
00001900                            
00001900 60AA                       		bra.s	Eni_Loop
00001902                            ; ===========================================================================
00001902                            ; loc_1794:
00001902                            EniDec_110:
00001902 6100 0000                  		bsr.w	EniDec_FetchInlineValue
00001906                            ; loc_1798:
00001906 32C1                       @loop:		move.w	d1,(a1)+	; copy inline value
00001908 5341                       		subq.w	#1,d1		; decrement
0000190A 51CA FFFA                  		dbf	d2,@loop	; repeat
0000190E                            
0000190E 609C                       		bra.s	Eni_Loop
00001910                            ; ===========================================================================
00001910                            ; loc_17A2:
00001910                            EniDec_111:
00001910 0C42 000F                  		cmpi.w	#$F,d2
00001914 6700                       		beq.s	EniDec_Done
00001916                            ; loc_17A8:
00001916 6100 0000                  @loop:		bsr.w	EniDec_FetchInlineValue	; fetch new inline value
0000191A 32C1                       		move.w	d1,(a1)+	; copy it
0000191C 51CA FFF8                  		dbf	d2,@loop	; and repeat
00001920                            
00001920 608A                       		bra.s	Eni_Loop
00001922                            ; ===========================================================================
00001922                            ; loc_17B4:
00001922                            EniDec_Index:
00001922 60B2                       		bra.s	EniDec_00
00001924 60B0                       		bra.s	EniDec_00
00001926 60B8                       		bra.s	EniDec_01
00001928 60B6                       		bra.s	EniDec_01
0000192A 60BC                       		bra.s	EniDec_100
0000192C 60C6                       		bra.s	EniDec_101
0000192E 60D2                       		bra.s	EniDec_110
00001930 60DE                       		bra.s	EniDec_111
00001932                            ; ===========================================================================
00001932                            ; loc_17C4:
00001932                            EniDec_Done:
00001932 5348                       		subq.w	#1,a0		; go back by one byte
00001934 0C46 0010                  		cmpi.w	#16,d6		; were we going to start on a completely new byte?
00001938 6600                       		bne.s	@notnewbyte	; if not, branch
0000193A 5348                       		subq.w	#1,a0		; and another one if needed
0000193C                            ; loc_17CE:
0000193C                            @notnewbyte:
0000193C 3008                       		move.w	a0,d0
0000193E E248                       		lsr.w	#1,d0		; are we on an odd byte?
00001940 6400                       		bcc.s	@evenbyte	; if not, branch
00001942 5248                       		addq.w	#1,a0		; ensure we're on an even byte
00001944                            ; loc_17D6:
00001944                            @evenbyte:
00001944 4CDF 3EFF                  		movem.l	(sp)+,d0-d7/a1-a5
00001948 4E75                       		rts	
0000194A                            
0000194A                            ; ---------------------------------------------------------------------------
0000194A                            ; Part of the Enigma decompressor
0000194A                            ; Fetches an inline copy value and stores it in d1
0000194A                            ; ---------------------------------------------------------------------------
0000194A                            
0000194A                            ; =============== S U B R O U T I N E =======================================
0000194A                            
0000194A                            ; loc_17DC:
0000194A                            EniDec_FetchInlineValue:
0000194A 360B                       		move.w	a3,d3		; copy starting art tile
0000194C 1204                       		move.b	d4,d1		; copy PCCVH bitfield
0000194E D201                       		add.b	d1,d1		; is the priority bit set?
00001950 6400                       		bcc.s	@skippriority	; if not, branch
00001952 5346                       		subq.w	#1,d6
00001954 0D05                       		btst	d6,d5		; is the priority bit set in the inline render flags?
00001956 6700                       		beq.s	@skippriority	; if not, branch
00001958 0043 8000                  		ori.w	#$8000,d3	; otherwise set priority bit in art tile
0000195C                            ; loc_17EE:
0000195C                            @skippriority:
0000195C D201                       		add.b	d1,d1		; is the high palette line bit set?
0000195E 6400                       		bcc.s	@skiphighpal	; if not, branch
00001960 5346                       		subq.w	#1,d6
00001962 0D05                       		btst	d6,d5
00001964 6700                       		beq.s	@skiphighpal
00001966 0643 4000                  		addi.w	#$4000,d3	; set second palette line bit
0000196A                            ; loc_17FC:
0000196A                            @skiphighpal:
0000196A D201                       		add.b	d1,d1		; is the low palette line bit set?
0000196C 6400                       		bcc.s	@skiplowpal	; if not, branch
0000196E 5346                       		subq.w	#1,d6
00001970 0D05                       		btst	d6,d5
00001972 6700                       		beq.s	@skiplowpal
00001974 0643 2000                  		addi.w	#$2000,d3	; set first palette line bit
00001978                            ; loc_180A:
00001978                            @skiplowpal:
00001978 D201                       		add.b	d1,d1		; is the vertical flip flag set?
0000197A 6400                       		bcc.s	@skipyflip	; if not, branch
0000197C 5346                       		subq.w	#1,d6
0000197E 0D05                       		btst	d6,d5
00001980 6700                       		beq.s	@skipyflip
00001982 0043 1000                  		ori.w	#$1000,d3	; set Y-flip bit
00001986                            ; loc_1818:
00001986                            @skipyflip:
00001986 D201                       		add.b	d1,d1		; is the horizontal flip flag set?
00001988 6400                       		bcc.s	@skipxflip	; if not, branch
0000198A 5346                       		subq.w	#1,d6
0000198C 0D05                       		btst	d6,d5
0000198E 6700                       		beq.s	@skipxflip
00001990 0043 0800                  		ori.w	#$800,d3	; set X-flip bit
00001994                            ; loc_1826:
00001994                            @skipxflip:
00001994 3205                       		move.w	d5,d1
00001996 3E06                       		move.w	d6,d7
00001998 9E4D                       		sub.w	a5,d7		; subtract length in bits of inline copy value
0000199A 6400                       		bcc.s	@enoughbits	; branch if a new word doesn't need to be read
0000199C 3C07                       		move.w	d7,d6
0000199E 0646 0010                  		addi.w	#16,d6
000019A2 4447                       		neg.w	d7		; calculate bit deficit
000019A4 EF69                       		lsl.w	d7,d1		; and make space for that many bits
000019A6 1A10                       		move.b	(a0),d5		; get next byte
000019A8 EF3D                       		rol.b	d7,d5		; and rotate the required bits into the lowest positions
000019AA DE47                       		add.w	d7,d7
000019AC CA7B 7000                  		and.w	EniDec_Masks-2(pc,d7.w),d5
000019B0 D245                       		add.w	d5,d1		; combine upper bits with lower bits
000019B2                            ; loc_1844:
000019B2                            @maskvalue:
000019B2 300D                       		move.w	a5,d0		; get length in bits of inline copy value
000019B4 D040                       		add.w	d0,d0
000019B6 C27B 0000                  		and.w	EniDec_Masks-2(pc,d0.w),d1	; mask value appropriately
000019BA D243                       		add.w	d3,d1		; add starting art tile
000019BC 1A18                       		move.b	(a0)+,d5
000019BE E14D                       		lsl.w	#8,d5
000019C0 1A18                       		move.b	(a0)+,d5	; get next word
000019C2 4E75                       		rts	
000019C4                            ; ===========================================================================
000019C4                            ; loc_1856:
000019C4                            @enoughbits:
000019C4 6700                       		beq.s	@justenough	; if the word has been exactly exhausted, branch
000019C6 EE69                       		lsr.w	d7,d1	; get inline copy value
000019C8 300D                       		move.w	a5,d0
000019CA D040                       		add.w	d0,d0
000019CC C27B 0000                  		and.w	EniDec_Masks-2(pc,d0.w),d1	; and mask it appropriately
000019D0 D243                       		add.w	d3,d1	; add starting art tile
000019D2 300D                       		move.w	a5,d0
000019D4 6000                       		bra.s	EniDec_FetchByte
000019D6                            ; ===========================================================================
000019D6                            ; loc_1868:
000019D6                            @justenough:
000019D6 7C10                       		moveq	#16,d6	; reset shift value
000019D8 60D8                       		bra.s	@maskvalue
000019DA                            ; ===========================================================================
000019DA                            ; word_186C:
000019DA                            EniDec_Masks:
000019DA 0001 0003 0007 000F        		dc.w	 1,    3,    7,   $F
000019E2 001F 003F 007F 00FF        		dc.w   $1F,  $3F,  $7F,  $FF
000019EA 01FF 03FF 07FF 0FFF        		dc.w  $1FF, $3FF, $7FF, $FFF
000019F2 1FFF 3FFF 7FFF FFFF        		dc.w $1FFF,$3FFF,$7FFF,$FFFF
000019FA                            
000019FA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000019FA                            
000019FA                            ; sub_188C:
000019FA                            EniDec_FetchByte:
000019FA 9C40                       		sub.w	d0,d6	; subtract length of current entry from shift value so that next entry is read next time around
000019FC 0C46 0009                  		cmpi.w	#9,d6	; does a new byte need to be read?
00001A00 6400                       		bhs.s	@locret	; if not, branch
00001A02 5046                       		addq.w	#8,d6
00001A04 E145                       		asl.w	#8,d5
00001A06 1A18                       		move.b	(a0)+,d5
00001A08                            @locret:
00001A08 4E75                       		rts	
00001A0A                            ; End of function EniDec_FetchByte
00001A0A                            ; End of function EniDec_FetchByte
00001A0A                            		include	"_inc\Kosinski Decompression.asm"
00001A0A                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
00001A0A                            ; ---------------------------------------------------------------------------
00001A0A                            ; KOSINSKI DECOMPRESSION PROCEDURE
00001A0A                            ; (sometimes called KOZINSKI decompression)
00001A0A                            ;
00001A0A                            ; ARGUMENTS:
00001A0A                            ; a0 = source address
00001A0A                            ; a1 = destination address
00001A0A                            ;
00001A0A                            ; For format explanation see http://info.sonicretro.org/Kosinski@compression
00001A0A                            ; New faster version by written by vladikcomper, with additional improvements by
00001A0A                            ; MarkeyJester and Flamewing
00001A0A                            ; Converted to ASM68K by Beta Filter.
00001A0A                            ; ---------------------------------------------------------------------------
00001A0A =00000001                  Kos_UseLUT: equ 1
00001A0A =00000003                  Kos_LoopUnroll: equ 3
00001A0A =00000001                  Kos_ExtremeUnrolling: equ 1
00001A0A                            
00001A0A                            Kos_RunBitStream macro
00001A0A                                dbra    d2,@skip\@
00001A0A                                moveq   #7,d2                   ; Set repeat count to 8.
00001A0A                                move.b  d1,d0                   ; Use the remaining 8 bits.
00001A0A                                not.w   d3                      ; Have all 16 bits been used up?
00001A0A                                bne.s   @skip\@                   ; Branch if not.
00001A0A                                move.b  (a0)+,d0                ; Get desc field low-byte.
00001A0A                                move.b  (a0)+,d1                ; Get desc field hi-byte.
00001A0A                                if Kos_UseLUT=1
00001A0A                                move.b  (a4,d0.w),d0            ; Invert bit order...
00001A0A                                move.b  (a4,d1.w),d1            ; ... for both bytes.
00001A0A                                endif
00001A0A                            @skip\@
00001A0A                                endm
00001A0A                            
00001A0A                            Kos_ReadBit macro
00001A0A                                if Kos_UseLUT=1
00001A0A                                add.b   d0,d0                   ; Get a bit from the bitstream.
00001A0A                                else
00001A0A                                lsr.b   #1,d0                   ; Get a bit from the bitstream.
00001A0A                                endif
00001A0A                                endm
00001A0A                            ; ===========================================================================
00001A0A                            ; KozDec@193A:
00001A0A                            KosDec:
00001A0A 7E07                           moveq   #(1<<Kos_LoopUnroll)-1,d7
00001A0C 7000                           moveq   #0,d0
00001A0E 7200                           moveq   #0,d1
00001A10 49FA 0000                      lea KosDec_ByteMap(pc),a4       ; Load LUT pointer.
00001A14 1018                           move.b  (a0)+,d0                ; Get desc field low-byte.
00001A16 1218                           move.b  (a0)+,d1                ; Get desc field hi-byte.
00001A18 1034 0000                      move.b  (a4,d0.w),d0            ; Invert bit order...
00001A1C 1234 1000                      move.b  (a4,d1.w),d1            ; ... for both bytes.
00001A20 7407                           moveq   #7,d2                   ; Set repeat count to 8.
00001A22 7600                           moveq   #0,d3                   ; d3 will be desc field switcher.
00001A24 6000                           bra.s   @FetchNewCode
00001A26                            ; ---------------------------------------------------------------------------
00001A26                            @FetchCodeLoop:
00001A26                                ; Code 1 (Uncompressed byte).
00001A3E 12D8                           move.b  (a0)+,(a1)+
00001A40                            
00001A40                            @FetchNewCode:
00001A42 65E2                           bcs.s   @FetchCodeLoop          ; If code = 1, branch.
00001A44                            
00001A44                                ; Codes 00 and 01.
00001A44 7AFF                           moveq   #-1,d5
00001A46 4BD1                           lea (a1),a5
00001A62 6500 0000                      bcs.w   @Code_01
00001A66                            
00001A66                                ; Code 00 (Dictionary ref. short).
00001A80 6500                           bcs.s   @Copy45
00001A9C 6500                           bcs.s   @Copy3
00001AB6 1A18                           move.b  (a0)+,d5                ; d5 = displacement.
00001AB8 DAC5                           adda.w  d5,a5
00001ABA 12DD                           move.b  (a5)+,(a1)+
00001ABC 12DD                           move.b  (a5)+,(a1)+
00001ABE 6080                           bra.s   @FetchNewCode
00001AC0                            ; ---------------------------------------------------------------------------
00001AC0                            @Copy3:
00001AD8 1A18                           move.b  (a0)+,d5                ; d5 = displacement.
00001ADA DAC5                           adda.w  d5,a5
00001ADC 12DD                           move.b  (a5)+,(a1)+
00001ADE 12DD                           move.b  (a5)+,(a1)+
00001AE0 12DD                           move.b  (a5)+,(a1)+
00001AE2 6000 FF5C                      bra.w   @FetchNewCode
00001AE6                            ; ---------------------------------------------------------------------------
00001AE6                            @Copy45:
00001B00 6500                           bcs.s   @Copy5
00001B1A 1A18                           move.b  (a0)+,d5                ; d5 = displacement.
00001B1C DAC5                           adda.w  d5,a5
00001B1E 12DD                           move.b  (a5)+,(a1)+
00001B20 12DD                           move.b  (a5)+,(a1)+
00001B22 12DD                           move.b  (a5)+,(a1)+
00001B24 12DD                           move.b  (a5)+,(a1)+
00001B26 6000 FF18                      bra.w   @FetchNewCode
00001B2A                            ; ---------------------------------------------------------------------------
00001B2A                            @Copy5:
00001B42 1A18                           move.b  (a0)+,d5                ; d5 = displacement.
00001B44 DAC5                           adda.w  d5,a5
00001B46 12DD                           move.b  (a5)+,(a1)+
00001B48 12DD                           move.b  (a5)+,(a1)+
00001B4A 12DD                           move.b  (a5)+,(a1)+
00001B4C 12DD                           move.b  (a5)+,(a1)+
00001B4E 12DD                           move.b  (a5)+,(a1)+
00001B50 6000 FEEE                      bra.w   @FetchNewCode
00001B54                            ; ---------------------------------------------------------------------------
00001B54                            ; ---------------------------------------------------------------------------
00001B54                            @Code_01:
00001B54 7800                           moveq   #0,d4                   ; d4 will contain copy count.
00001B56                                ; Code 01 (Dictionary ref. long / special).
00001B6E 1C18                           move.b  (a0)+,d6                ; d6 = %LLLLLLLL.
00001B70 1818                           move.b  (a0)+,d4                ; d4 = %HHHHHCCC.
00001B72 1A04                           move.b  d4,d5                   ; d5 = %11111111 HHHHHCCC.
00001B74 EB4D                           lsl.w   #5,d5                   ; d5 = %111HHHHH CCC00000.
00001B76 1A06                           move.b  d6,d5                   ; d5 = %111HHHHH LLLLLLLL.
00001B78 C847                           and.w   d7,d4                   ; d4 = %00000CCC.
00001B7A 6600                           bne.s   @StreamCopy             ; if CCC=0, branch.
00001B7C                            
00001B7C                                ; special mode (extended counter)
00001B7C 1818                           move.b  (a0)+,d4                ; Read cnt
00001B7E 6700                           beq.s   @Quit                   ; If cnt=0, quit decompression.
00001B80 5304                           subq.b  #1,d4
00001B82 6700 FEBC                      beq.w   @FetchNewCode           ; If cnt=1, fetch a new code.
00001B86                            
00001B86 DAC5                           adda.w  d5,a5
00001B88 12DD                           move.b  (a5)+,(a1)+             ; Do 1 extra copy (to compensate +1 to copy counter).
00001B8A 3C04                           move.w  d4,d6
00001B8C 4646                           not.w   d6
00001B8E CC47                           and.w   d7,d6
00001B90 DC46                           add.w   d6,d6
00001B92 E64C                           lsr.w   #Kos_LoopUnroll,d4
00001B94 4EFB 6000                      jmp @largecopy(pc,d6.w)
00001B98                            ; ---------------------------------------------------------------------------
00001B98                            @largecopy:
00001B98                                rept (1<<Kos_LoopUnroll)
00001B98                                move.b  (a5)+,(a1)+
00001B98 12DD 12DD 12DD 12DD 12DD+      endr
00001BA8 51CC FFEE                      dbra    d4,@largecopy
00001BAC 6000 FE92                      bra.w   @FetchNewCode
00001BB0                            ; ---------------------------------------------------------------------------
00001BB0                            @StreamCopy:
00001BB0 DAC5                           adda.w  d5,a5
00001BB2 12DD                           move.b  (a5)+,(a1)+             ; Do 1 extra copy (to compensate +1 to copy counter).
00001BB4 BF44                           eor.w   d7,d4
00001BB6 D844                           add.w   d4,d4
00001BB8 4EFB 4000                      jmp @mediumcopy(pc,d4.w)
00001BBC                            ; ---------------------------------------------------------------------------
00001BBC                            @mediumcopy:
00001BBC                                rept 8
00001BBC                                move.b  (a5)+,(a1)+
00001BBC 12DD 12DD 12DD 12DD 12DD+      endr
00001BCC 6000 FE72                      bra.w   @FetchNewCode
00001BD0                            ; ---------------------------------------------------------------------------
00001BD0                            @Quit:
00001BD0 4E75                           rts                             ; End of function KosDec.
00001BD2                            ; ===========================================================================
00001BD2                            KosDec_ByteMap:
00001BD2 0080 40C0 20A0 60E0 1090+      dc.b    $00,$80,$40,$C0,$20,$A0,$60,$E0,$10,$90,$50,$D0,$30,$B0,$70,$F0
00001BE2 0888 48C8 28A8 68E8 1898+      dc.b    $08,$88,$48,$C8,$28,$A8,$68,$E8,$18,$98,$58,$D8,$38,$B8,$78,$F8
00001BF2 0484 44C4 24A4 64E4 1494+      dc.b    $04,$84,$44,$C4,$24,$A4,$64,$E4,$14,$94,$54,$D4,$34,$B4,$74,$F4
00001C02 0C8C 4CCC 2CAC 6CEC 1C9C+      dc.b    $0C,$8C,$4C,$CC,$2C,$AC,$6C,$EC,$1C,$9C,$5C,$DC,$3C,$BC,$7C,$FC
00001C12 0282 42C2 22A2 62E2 1292+      dc.b    $02,$82,$42,$C2,$22,$A2,$62,$E2,$12,$92,$52,$D2,$32,$B2,$72,$F2
00001C22 0A8A 4ACA 2AAA 6AEA 1A9A+      dc.b    $0A,$8A,$4A,$CA,$2A,$AA,$6A,$EA,$1A,$9A,$5A,$DA,$3A,$BA,$7A,$FA
00001C32 0686 46C6 26A6 66E6 1696+      dc.b    $06,$86,$46,$C6,$26,$A6,$66,$E6,$16,$96,$56,$D6,$36,$B6,$76,$F6
00001C42 0E8E 4ECE 2EAE 6EEE 1E9E+      dc.b    $0E,$8E,$4E,$CE,$2E,$AE,$6E,$EE,$1E,$9E,$5E,$DE,$3E,$BE,$7E,$FE
00001C52 0181 41C1 21A1 61E1 1191+      dc.b    $01,$81,$41,$C1,$21,$A1,$61,$E1,$11,$91,$51,$D1,$31,$B1,$71,$F1
00001C62 0989 49C9 29A9 69E9 1999+      dc.b    $09,$89,$49,$C9,$29,$A9,$69,$E9,$19,$99,$59,$D9,$39,$B9,$79,$F9
00001C72 0585 45C5 25A5 65E5 1595+      dc.b    $05,$85,$45,$C5,$25,$A5,$65,$E5,$15,$95,$55,$D5,$35,$B5,$75,$F5
00001C82 0D8D 4DCD 2DAD 6DED 1D9D+      dc.b    $0D,$8D,$4D,$CD,$2D,$AD,$6D,$ED,$1D,$9D,$5D,$DD,$3D,$BD,$7D,$FD
00001C92 0383 43C3 23A3 63E3 1393+      dc.b    $03,$83,$43,$C3,$23,$A3,$63,$E3,$13,$93,$53,$D3,$33,$B3,$73,$F3
00001CA2 0B8B 4BCB 2BAB 6BEB 1B9B+      dc.b    $0B,$8B,$4B,$CB,$2B,$AB,$6B,$EB,$1B,$9B,$5B,$DB,$3B,$BB,$7B,$FB
00001CB2 0787 47C7 27A7 67E7 1797+      dc.b    $07,$87,$47,$C7,$27,$A7,$67,$E7,$17,$97,$57,$D7,$37,$B7,$77,$F7
00001CC2 0F8F 4FCF 2FAF 6FEF 1F9F+      dc.b    $0F,$8F,$4F,$CF,$2F,$AF,$6F,$EF,$1F,$9F,$5F,$DF,$3F,$BF,$7F,$FF
00001CD2                            ; ===========================================================================
00001CD2                            ; ===========================================================================
00001CD2                            
00001CD2                            		include	"_inc\PaletteCycle.asm"
00001CD2                            ; ---------------------------------------------------------------------------
00001CD2                            ; Palette cycling routine loading subroutine
00001CD2                            ; ---------------------------------------------------------------------------
00001CD2                            
00001CD2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001CD2                            
00001CD2                            
00001CD2                            PaletteCycle:
00001CD2 7400                       		moveq	#0,d2
00001CD4 7000                       		moveq	#0,d0
00001CD6 1038 FE10                  		move.b	(v_zone).w,d0	; get level number
00001CDA D040                       		add.w	d0,d0
00001CDC 303B 0000                  		move.w	PCycle_Index(pc,d0.w),d0
00001CE0 4EFB 0000                  		jmp	PCycle_Index(pc,d0.w) ; jump to relevant palette routine
00001CE4                            ; End of function PaletteCycle
00001CE4                            
00001CE4                            ; ===========================================================================
00001CE4                            ; ---------------------------------------------------------------------------
00001CE4                            ; Palette cycling routines
00001CE4                            ; ---------------------------------------------------------------------------
00001CE4 0000                       PCycle_Index:	dc.w PCycle_GHZ-PCycle_Index
00001CE6 0000                       		dc.w PCycle_LZ-PCycle_Index
00001CE8 0000                       		dc.w PCycle_MZ-PCycle_Index
00001CEA 0000                       		dc.w PalCycle_SLZ-PCycle_Index
00001CEC 0000                       		dc.w PalCycle_SYZ-PCycle_Index
00001CEE 0000                       		dc.w PalCycle_SBZ-PCycle_Index
00001CF0 0000                       		dc.w PCycle_GHZ-PCycle_Index	; Ending
00001CF2                            
00001CF2                            
00001CF2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001CF2                            
00001CF2                            
00001CF2                            PCycle_Title:
00001CF2 41F9 0000 0000             		lea	(Pal_TitleCyc).l,a0
00001CF8 6000                       		bra.s	PCycGHZ_Go
00001CFA                            ; ===========================================================================
00001CFA                            
00001CFA                            PCycle_GHZ:
00001CFA 41F9 0000 0000             		lea	(Pal_GHZCyc).l,a0
00001D00                            
00001D00                            PCycGHZ_Go:
00001D00 5378 F634                  		subq.w	#1,(v_pcyc_time).w ; decrement timer
00001D04 6A00                       		bpl.s	PCycGHZ_Skip	; if time remains, branch
00001D06                            
00001D06 31FC 0003 F634             		move.w	#3,(v_pcyc_time).w ; reset timer to 5 frames
00001D0C 3038 F632                  		move.w	(v_pcyc_num).w,d0 ; get cycle number
00001D10 5278 F632                  		addq.w	#1,(v_pcyc_num).w ; increment cycle number
00001D14 0240 0003                  		andi.w	#3,d0		; if cycle > 3, reset to 0
00001D18 E748                       		lsl.w	#3,d0
00001D1A 43F8 FB50                  		lea	(v_pal_dry+$50).w,a1
00001D1E 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001D22 22B0 0004                  		move.l	4(a0,d0.w),(a1)	; copy palette data to RAM
00001D26                            
00001D26                            PCycGHZ_Skip:
00001D26 4E75                       		rts	
00001D28                            ; End of function PCycle_GHZ
00001D28                            
00001D28                            
00001D28                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001D28                            
00001D28                            
00001D28                            PCycle_LZ:
00001D28                            ; Waterfalls
00001D28 5378 F634                  		subq.w	#1,(v_pcyc_time).w ; decrement timer
00001D2C 6A00                       		bpl.s	PCycLZ_Skip1	; if time remains, branch
00001D2E                            
00001D2E 31FC 0003 F634             		move.w	#3,(v_pcyc_time).w ; reset timer to 2 frames
00001D34 3038 F632                  		move.w	(v_pcyc_num).w,d0
00001D38 5278 F632                  		addq.w	#1,(v_pcyc_num).w ; increment cycle number
00001D3C 0240 0003                  		andi.w	#3,d0		; if cycle > 3, reset to 0
00001D40 E748                       		lsl.w	#3,d0
00001D42 41F9 0000 0000             		lea	(Pal_LZCyc1).l,a0
00001D48 0C38 0003 FE11             		cmpi.b	#3,(v_act).w	; check if level is SBZ3
00001D4E 6600                       		bne.s	PCycLZ_NotSBZ3
00001D50 41F9 0000 0000             		lea	(Pal_SBZ3Cyc1).l,a0 ; load SBZ3	palette instead
00001D56                            
00001D56                            	PCycLZ_NotSBZ3:
00001D56 43F8 FB56                  		lea	(v_pal_dry+$56).w,a1
00001D5A 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001D5E 22B0 0004                  		move.l	4(a0,d0.w),(a1)
00001D62 43F8 FAD6                  		lea	(v_pal_water+$56).w,a1
00001D66 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001D6A 22B0 0004                  		move.l	4(a0,d0.w),(a1)
00001D6E                            
00001D6E                            PCycLZ_Skip1:
00001D6E                            ; Conveyor belts
00001D6E                            		;move.w	(v_framecount).w,d0
00001D6E                            		;andi.w	#7,d0
00001D6E                            		;move.b	PCycLZ_Seq(pc,d0.w),d0 ; get byte from palette sequence
00001D6E                            		;beq.s	PCycLZ_Skip2	; if byte is 0, branch
00001D6E                            		;moveq	#1,d1
00001D6E                            		;tst.b	(f_conveyrev).w	; have conveyor belts been reversed?
00001D6E                            		;beq.s	PCycLZ_NoRev	; if not, branch
00001D6E                            		;neg.w	d1
00001D6E                            
00001D6E                            	;PCycLZ_NoRev:
00001D6E                            		;move.w	(v_pal_buffer).w,d0
00001D6E                            		;andi.w	#3,d0
00001D6E                            		;add.w	d1,d0
00001D6E                            		;cmpi.w	#3,d0
00001D6E                            		;bcs.s	loc_1A0A
00001D6E                            		;move.w	d0,d1
00001D6E                            		;moveq	#0,d0
00001D6E                            		;tst.w	d1
00001D6E                            		;bpl.s	loc_1A0A
00001D6E                            		;moveq	#2,d0
00001D6E                            
00001D6E                            ;loc_1A0A:
00001D6E                            		;move.w	d0,(v_pal_buffer).w
00001D6E                            		;add.w	d0,d0
00001D6E                            		;move.w	d0,d1
00001D6E                            		;add.w	d0,d0
00001D6E                            		;add.w	d1,d0
00001D6E                            		;lea	(Pal_LZCyc2).l,a0
00001D6E                            		;lea	(v_pal_dry+$76).w,a1
00001D6E                            		;move.l	(a0,d0.w),(a1)+
00001D6E                            		;move.w	4(a0,d0.w),(a1)
00001D6E                            		;lea	(Pal_LZCyc3).l,a0
00001D6E                            		;lea	(v_pal_water+$76).w,a1
00001D6E                            		;move.l	(a0,d0.w),(a1)+
00001D6E                            		;move.w	4(a0,d0.w),(a1)
00001D6E                            
00001D6E                            ;PCycLZ_Skip2:
00001D6E 4E75                       		rts	
00001D70                            ; End of function PCycle_LZ
00001D70                            
00001D70                            ; ===========================================================================
00001D70 0100 0001 0000 0100        PCycLZ_Seq:	dc.b 1,	0, 0, 1, 0, 0, 1, 0
00001D78                            ; ===========================================================================
00001D78                            
00001D78                            PCycle_MZ:
00001D78 4E75                       		rts	
00001D7A                            
00001D7A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001D7A                            
00001D7A                            
00001D7A                            PalCycle_SLZ:
00001D7A 5378 F634                  		subq.w	#1,(v_pcyc_time).w
00001D7E 6A00                       		bpl.s	locret_1A80
00001D80 31FC 0007 F634             		move.w	#7,(v_pcyc_time).w
00001D86 3038 F632                  		move.w	(v_pcyc_num).w,d0
00001D8A 5240                       		addq.w	#1,d0
00001D8C 0C40 0006                  		cmpi.w	#6,d0
00001D90 6500                       		bcs.s	loc_1A60
00001D92 7000                       		moveq	#0,d0
00001D94                            
00001D94                            loc_1A60:
00001D94 31C0 F632                  		move.w	d0,(v_pcyc_num).w
00001D98 3200                       		move.w	d0,d1
00001D9A D241                       		add.w	d1,d1
00001D9C D041                       		add.w	d1,d0
00001D9E D040                       		add.w	d0,d0
00001DA0 41F9 0000 0000             		lea	(Pal_SLZCyc).l,a0
00001DA6 43F8 FB56                  		lea	(v_pal_dry+$56).w,a1
00001DAA 32B0 0000                  		move.w	(a0,d0.w),(a1)
00001DAE 2370 0002 0004             		move.l	2(a0,d0.w),4(a1)
00001DB4                            
00001DB4                            locret_1A80:
00001DB4 4E75                       		rts	
00001DB6                            ; End of function PalCycle_SLZ
00001DB6                            
00001DB6                            
00001DB6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001DB6                            
00001DB6                            
00001DB6                            PalCycle_SYZ:
00001DB6 5378 F634                  		subq.w	#1,(v_pcyc_time).w
00001DBA 6A00                       		bpl.s	locret_1AC6
00001DBC 31FC 0005 F634             		move.w	#5,(v_pcyc_time).w
00001DC2 3038 F632                  		move.w	(v_pcyc_num).w,d0
00001DC6 5278 F632                  		addq.w	#1,(v_pcyc_num).w
00001DCA 0240 0003                  		andi.w	#3,d0
00001DCE E548                       		lsl.w	#2,d0
00001DD0 3200                       		move.w	d0,d1
00001DD2 D040                       		add.w	d0,d0
00001DD4 41F9 0000 0000             		lea	(Pal_SYZCyc1).l,a0
00001DDA 43F8 FB6E                  		lea	(v_pal_dry+$6E).w,a1
00001DDE 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001DE2 22B0 0004                  		move.l	4(a0,d0.w),(a1)
00001DE6 41F9 0000 0000             		lea	(Pal_SYZCyc2).l,a0
00001DEC 43F8 FB76                  		lea	(v_pal_dry+$76).w,a1
00001DF0 32B0 1000                  		move.w	(a0,d1.w),(a1)
00001DF4 3370 1002 0004             		move.w	2(a0,d1.w),4(a1)
00001DFA                            
00001DFA                            locret_1AC6:
00001DFA 4E75                       		rts	
00001DFC                            ; End of function PalCycle_SYZ
00001DFC                            
00001DFC                            
00001DFC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001DFC                            
00001DFC                            
00001DFC                            PalCycle_SBZ:
00001DFC 45F9 0000 0000             		lea	(Pal_SBZCycList2).l,a2
00001E02 4A38 FE11                  		tst.b	(v_act).w
00001E06 6700                       		beq.s	loc_1ADA
00001E08 45F9 0000 0000             		lea	(Pal_SBZCycList2).l,a2
00001E0E                            
00001E0E                            loc_1ADA:
00001E0E 43F8 F650                  		lea	(v_pal_buffer).w,a1
00001E12 321A                       		move.w	(a2)+,d1
00001E14                            
00001E14                            loc_1AE0:
00001E14 5311                       		subq.b	#1,(a1)
00001E16 6B00                       		bmi.s	loc_1AEA
00001E18 5489                       		addq.l	#2,a1
00001E1A 5C8A                       		addq.l	#6,a2
00001E1C 6000                       		bra.s	loc_1B06
00001E1E                            ; ===========================================================================
00001E1E                            
00001E1E                            loc_1AEA:
00001E1E 12DA                       		move.b	(a2)+,(a1)+
00001E20 1011                       		move.b	(a1),d0
00001E22 5200                       		addq.b	#1,d0
00001E24 B01A                       		cmp.b	(a2)+,d0
00001E26 6500                       		bcs.s	loc_1AF6
00001E28 7000                       		moveq	#0,d0
00001E2A                            
00001E2A                            loc_1AF6:
00001E2A 12C0                       		move.b	d0,(a1)+
00001E2C 0240 000F                  		andi.w	#$F,d0
00001E30 D040                       		add.w	d0,d0
00001E32 305A                       		movea.w	(a2)+,a0
00001E34 365A                       		movea.w	(a2)+,a3
00001E36 36B0 0000                  		move.w	(a0,d0.w),(a3)
00001E3A                            
00001E3A                            loc_1B06:
00001E3A 51C9 FFD8                  		dbf	d1,loc_1AE0
00001E3E 5378 F634                  		subq.w	#1,(v_pcyc_time).w
00001E42 6A00                       		bpl.s	locret_1B64
00001E44 41F9 0000 0000             		lea	(Pal_SBZCyc4).l,a0
00001E4A 31FC 0003 F634             		move.w	#3,(v_pcyc_time).w
00001E50 4A38 FE11                  		tst.b	(v_act).w
00001E54 6700                       		beq.s	loc_1B2E
00001E56 41F9 0000 0000             		lea	(Pal_SBZCyc10).l,a0
00001E5C 31FC 0002 F634             		move.w	#2,(v_pcyc_time).w
00001E62                            
00001E62                            loc_1B2E:
00001E62 72FF                       		moveq	#-1,d1
00001E64 4A38 F7C0                  		tst.b	(f_conveyrev).w
00001E68 6700                       		beq.s	loc_1B38
00001E6A 4441                       		neg.w	d1
00001E6C                            
00001E6C                            loc_1B38:
00001E6C 3038 F632                  		move.w	(v_pcyc_num).w,d0
00001E70 0240 0003                  		andi.w	#3,d0
00001E74 D041                       		add.w	d1,d0
00001E76 0C40 0003                  		cmpi.w	#3,d0
00001E7A 6500                       		bcs.s	loc_1B52
00001E7C 3200                       		move.w	d0,d1
00001E7E 7000                       		moveq	#0,d0
00001E80 4A41                       		tst.w	d1
00001E82 6A00                       		bpl.s	loc_1B52
00001E84 7002                       		moveq	#2,d0
00001E86                            
00001E86                            loc_1B52:
00001E86 31C0 F632                  		move.w	d0,(v_pcyc_num).w
00001E8A D040                       		add.w	d0,d0
00001E8C 43F8 FB58                  		lea	(v_pal_dry+$58).w,a1
00001E90 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001E94 32B0 0004                  		move.w	4(a0,d0.w),(a1)
00001E98                            
00001E98                            locret_1B64:
00001E98 4E75                       		rts	
00001E9A                            ; End of function PalCycle_SBZ
00001E9A                            ; End of function PalCycle_SBZ
00001E9A                            
00001E9A                            Pal_TitleCyc:	incbin	"palette\Cycle - Title Screen Water.bin"
00001EBA                            Pal_GHZCyc:	incbin	"palette\Cycle - GHZ.bin"
00001EDA                            Pal_LZCyc1:	incbin	"palette\Cycle - LZ Waterfall.bin"
00001EFA                            Pal_LZCyc2:	incbin	"palette\Cycle - LZ Conveyor Belt.bin"
00001F0C                            Pal_LZCyc3:	incbin	"palette\Cycle - LZ Conveyor Belt Underwater.bin"
00001F1E                            Pal_SBZ3Cyc1:	incbin	"palette\Cycle - SBZ3 Waterfall.bin"
00001F86                            Pal_SLZCyc:	incbin	"palette\Cycle - SLZ.bin"
00001FAA                            Pal_SYZCyc1:	incbin	"palette\Cycle - SYZ1.bin"
00001FCA                            Pal_SYZCyc2:	incbin	"palette\Cycle - SYZ2.bin"
00001FDA                            
00001FDA                            		include	"_inc\SBZ Palette Scripts.asm"
00001FDA                            ; ---------------------------------------------------------------------------
00001FDA                            ; Scrap Brain Zone palette cycling script
00001FDA                            ; ---------------------------------------------------------------------------
00001FDA                            
00001FDA                            mSBZp:	macro duration,colors,paladdress,ramaddress
00001FDA                            	dc.b duration, colors
00001FDA                            	dc.w paladdress, ramaddress
00001FDA                            	endm
00001FDA                            
00001FDA                            ; duration in frames, number of colors, palette address, RAM address
00001FDA                            
00001FDA                            Pal_SBZCycList1:
00001FDA 0000                       	dc.w ((end_SBZCycList1-Pal_SBZCycList1-2)/6)-1
00001FDC 0708 0000 FB50             	mSBZp	7,8,Pal_SBZCyc1,v_pal_dry+$50
00001FE2 0D08 0000 FB52             	mSBZp	$D,8,Pal_SBZCyc2,v_pal_dry+$52
00001FE8 0E08 0000 FB6E             	mSBZp	$E,8,Pal_SBZCyc3,v_pal_dry+$6E
00001FEE 0B08 0000 FB70             	mSBZp	$B,8,Pal_SBZCyc5,v_pal_dry+$70
00001FF4 0708 0000 FB72             	mSBZp	7,8,Pal_SBZCyc6,v_pal_dry+$72
00001FFA 1C10 0000 FB7E             	mSBZp	$1C,$10,Pal_SBZCyc7,v_pal_dry+$7E
00002000 0303 0000 FB78             	mSBZp	3,3,Pal_SBZCyc8,v_pal_dry+$78
00002006 0303 0000 FB7A             	mSBZp	3,3,Pal_SBZCyc8+2,v_pal_dry+$7A
0000200C 0303 0000 FB7C             	mSBZp	3,3,Pal_SBZCyc8+4,v_pal_dry+$7C
00002012                            end_SBZCycList1:
00002012                            	even
00002012                            
00002012                            Pal_SBZCycList2:
00002012 0000                       	dc.w ((end_SBZCycList2-Pal_SBZCycList2-2)/6)-1
00002014 0708 0000 FB50             	mSBZp	7,8,Pal_SBZCyc1,v_pal_dry+$50
0000201A 0D08 0000 FB52             	mSBZp	$D,8,Pal_SBZCyc2,v_pal_dry+$52
00002020 0908 0000 FB70             	mSBZp	9,8,Pal_SBZCyc9,v_pal_dry+$70
00002026 0708 0000 FB72             	mSBZp	7,8,Pal_SBZCyc6,v_pal_dry+$72
0000202C 0303 0000 FB78             	mSBZp	3,3,Pal_SBZCyc8,v_pal_dry+$78
00002032 0303 0000 FB7A             	mSBZp	3,3,Pal_SBZCyc8+2,v_pal_dry+$7A
00002038 0303 0000 FB7C             	mSBZp	3,3,Pal_SBZCyc8+4,v_pal_dry+$7C
0000203E                            end_SBZCycList2:
0000203E                            	even
0000203E                            	even
0000203E                            
0000203E                            Pal_SBZCyc1:	incbin	"palette\Cycle - SBZ 1.bin"
0000204E                            Pal_SBZCyc2:	incbin	"palette\Cycle - SBZ 2.bin"
0000205E                            Pal_SBZCyc3:	incbin	"palette\Cycle - SBZ 3.bin"
0000206E                            Pal_SBZCyc4:	incbin	"palette\Cycle - SBZ 4.bin"
0000207A                            Pal_SBZCyc5:	incbin	"palette\Cycle - SBZ 5.bin"
0000208A                            Pal_SBZCyc6:	incbin	"palette\Cycle - SBZ 6.bin"
0000209A                            Pal_SBZCyc7:	incbin	"palette\Cycle - SBZ 7.bin"
000020BA                            Pal_SBZCyc8:	incbin	"palette\Cycle - SBZ 8.bin"
000020C4                            Pal_SBZCyc9:	incbin	"palette\Cycle - SBZ 9.bin"
000020D4                            Pal_SBZCyc10:	incbin	"palette\Cycle - SBZ 10.bin"
000020E0                            ; ---------------------------------------------------------------------------
000020E0                            ; Subroutine to	fade in from black
000020E0                            ; ---------------------------------------------------------------------------
000020E0                            
000020E0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000020E0                            
000020E0                            
000020E0                            PaletteFadeIn:
000020E0 31FC 003F F626             		move.w	#$003F,(v_pfade_start).w ; set start position = 0; size = $40
000020E6                            
000020E6                            PalFadeIn_Alt:				; start position and size are already set
000020E6 7000                       		moveq	#0,d0
000020E8 41F8 FB00                  		lea	(v_pal_dry).w,a0
000020EC 1038 F626                  		move.b	(v_pfade_start).w,d0
000020F0 D0C0                       		adda.w	d0,a0
000020F2 7200                       		moveq	#cBlack,d1
000020F4 1038 F627                  		move.b	(v_pfade_size).w,d0
000020F8                            
000020F8                            	@fill:
000020F8 30C1                       		move.w	d1,(a0)+
000020FA 51C8 FFFC                  		dbf	d0,@fill 	; fill palette with black
000020FE                            
000020FE 383C 0015                  		move.w	#$15,d4
00002102                            
00002102                            	@mainloop:
00002102 11FC 0012 F62A             		move.b	#$12,(v_vbla_routine).w
00002108 6100 0000                  		bsr.w	WaitForVBla
0000210C 6100                       		bsr.s	FadeIn_FromBlack
0000210E 6100 F64A                  		bsr.w	RunPLC
00002112 51CC FFEE                  		dbf	d4,@mainloop
00002116 4E75                       		rts	
00002118                            ; End of function PaletteFadeIn
00002118                            
00002118                            
00002118                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002118                            
00002118                            
00002118                            FadeIn_FromBlack:
00002118 7000                       		moveq	#0,d0
0000211A 41F8 FB00                  		lea	(v_pal_dry).w,a0
0000211E 43F8 FB80                  		lea	(v_pal_dry_dup).w,a1
00002122 1038 F626                  		move.b	(v_pfade_start).w,d0
00002126 D0C0                       		adda.w	d0,a0
00002128 D2C0                       		adda.w	d0,a1
0000212A 1038 F627                  		move.b	(v_pfade_size).w,d0
0000212E                            
0000212E                            	@addcolour:
0000212E 6100                       		bsr.s	FadeIn_AddColour ; increase colour
00002130 51C8 FFFC                  		dbf	d0,@addcolour	; repeat for size of palette
00002134                            
00002134 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w	; is level Labyrinth?
0000213A 6600                       		bne.s	@exit		; if not, branch
0000213C                            
0000213C 7000                       		moveq	#0,d0
0000213E 41F8 FA80                  		lea	(v_pal_water).w,a0
00002142 43F8 FA00                  		lea	(v_pal_water_dup).w,a1
00002146 1038 F626                  		move.b	(v_pfade_start).w,d0
0000214A D0C0                       		adda.w	d0,a0
0000214C D2C0                       		adda.w	d0,a1
0000214E 1038 F627                  		move.b	(v_pfade_size).w,d0
00002152                            
00002152                            	@addcolour2:
00002152 6100                       		bsr.s	FadeIn_AddColour ; increase colour again
00002154 51C8 FFFC                  		dbf	d0,@addcolour2 ; repeat
00002158                            
00002158                            @exit:
00002158 4E75                       		rts	
0000215A                            ; End of function FadeIn_FromBlack
0000215A                            
0000215A                            
0000215A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000215A                            
0000215A                            
0000215A                            FadeIn_AddColour:
0000215A                            @addblue:
0000215A 3419                       		move.w	(a1)+,d2
0000215C 3610                       		move.w	(a0),d3
0000215E B642                       		cmp.w	d2,d3		; is colour already at threshold level?
00002160 6700                       		beq.s	@next		; if yes, branch
00002162 3203                       		move.w	d3,d1
00002164 0641 0200                  		addi.w	#$200,d1	; increase blue	value
00002168 B242                       		cmp.w	d2,d1		; has blue reached threshold level?
0000216A 6200                       		bhi.s	@addgreen	; if yes, branch
0000216C 30C1                       		move.w	d1,(a0)+	; update palette
0000216E 4E75                       		rts	
00002170                            ; ===========================================================================
00002170                            
00002170                            @addgreen:
00002170 3203                       		move.w	d3,d1
00002172 0641 0020                  		addi.w	#$20,d1		; increase green value
00002176 B242                       		cmp.w	d2,d1
00002178 6200                       		bhi.s	@addred
0000217A 30C1                       		move.w	d1,(a0)+	; update palette
0000217C 4E75                       		rts	
0000217E                            ; ===========================================================================
0000217E                            
0000217E                            @addred:
0000217E 5458                       		addq.w	#2,(a0)+	; increase red value
00002180 4E75                       		rts	
00002182                            ; ===========================================================================
00002182                            
00002182                            @next:
00002182 5448                       		addq.w	#2,a0		; next colour
00002184 4E75                       		rts	
00002186                            ; End of function FadeIn_AddColour
00002186                            
00002186                            
00002186                            ; ---------------------------------------------------------------------------
00002186                            ; Subroutine to fade out to black
00002186                            ; ---------------------------------------------------------------------------
00002186                            
00002186                            
00002186                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002186                            
00002186                            
00002186                            PaletteFadeOut:
00002186 31FC 003F F626             		move.w	#$003F,(v_pfade_start).w ; start position = 0; size = $40
0000218C 383C 0015                  		move.w	#$15,d4
00002190                            
00002190                            	@mainloop:
00002190 11FC 0012 F62A             		move.b	#$12,(v_vbla_routine).w
00002196 6100 0000                  		bsr.w	WaitForVBla
0000219A 6100                       		bsr.s	FadeOut_ToBlack
0000219C 6100 F5BC                  		bsr.w	RunPLC
000021A0 51CC FFEE                  		dbf	d4,@mainloop
000021A4 4E75                       		rts	
000021A6                            ; End of function PaletteFadeOut
000021A6                            
000021A6                            
000021A6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000021A6                            
000021A6                            
000021A6                            FadeOut_ToBlack:
000021A6 7000                       		moveq	#0,d0
000021A8 41F8 FB00                  		lea	(v_pal_dry).w,a0
000021AC 1038 F626                  		move.b	(v_pfade_start).w,d0
000021B0 D0C0                       		adda.w	d0,a0
000021B2 1038 F627                  		move.b	(v_pfade_size).w,d0
000021B6                            
000021B6                            	@decolour:
000021B6 6100                       		bsr.s	FadeOut_DecColour ; decrease colour
000021B8 51C8 FFFC                  		dbf	d0,@decolour	; repeat for size of palette
000021BC                            
000021BC 7000                       		moveq	#0,d0
000021BE 41F8 FA80                  		lea	(v_pal_water).w,a0
000021C2 1038 F626                  		move.b	(v_pfade_start).w,d0
000021C6 D0C0                       		adda.w	d0,a0
000021C8 1038 F627                  		move.b	(v_pfade_size).w,d0
000021CC                            
000021CC                            	@decolour2:
000021CC 6100                       		bsr.s	FadeOut_DecColour
000021CE 51C8 FFFC                  		dbf	d0,@decolour2
000021D2 4E75                       		rts	
000021D4                            ; End of function FadeOut_ToBlack
000021D4                            
000021D4                            
000021D4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000021D4                            
000021D4                            
000021D4                            FadeOut_DecColour:
000021D4                            @dered:
000021D4 3410                       		move.w	(a0),d2
000021D6 6700                       		beq.s	@next
000021D8 3202                       		move.w	d2,d1
000021DA 0241 000E                  		andi.w	#$E,d1
000021DE 6700                       		beq.s	@degreen
000021E0 5558                       		subq.w	#2,(a0)+	; decrease red value
000021E2 4E75                       		rts	
000021E4                            ; ===========================================================================
000021E4                            
000021E4                            @degreen:
000021E4 3202                       		move.w	d2,d1
000021E6 0241 00E0                  		andi.w	#$E0,d1
000021EA 6700                       		beq.s	@deblue
000021EC 0458 0020                  		subi.w	#$20,(a0)+	; decrease green value
000021F0 4E75                       		rts	
000021F2                            ; ===========================================================================
000021F2                            
000021F2                            @deblue:
000021F2 3202                       		move.w	d2,d1
000021F4 0241 0E00                  		andi.w	#$E00,d1
000021F8 6700                       		beq.s	@next
000021FA 0458 0200                  		subi.w	#$200,(a0)+	; decrease blue	value
000021FE 4E75                       		rts	
00002200                            ; ===========================================================================
00002200                            
00002200                            @next:
00002200 5448                       		addq.w	#2,a0
00002202 4E75                       		rts	
00002204                            ; End of function FadeOut_DecColour
00002204                            
00002204                            ; ---------------------------------------------------------------------------
00002204                            ; Subroutine to	fade in from white (Special Stage)
00002204                            ; ---------------------------------------------------------------------------
00002204                            
00002204                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002204                            
00002204                            
00002204                            PaletteWhiteIn:
00002204 31FC 003F F626             		move.w	#$003F,(v_pfade_start).w ; start position = 0; size = $40
0000220A 7000                       		moveq	#0,d0
0000220C 41F8 FB00                  		lea	(v_pal_dry).w,a0
00002210 1038 F626                  		move.b	(v_pfade_start).w,d0
00002214 D0C0                       		adda.w	d0,a0
00002216 323C 0EEE                  		move.w	#cWhite,d1
0000221A 1038 F627                  		move.b	(v_pfade_size).w,d0
0000221E                            
0000221E                            	@fill:
0000221E 30C1                       		move.w	d1,(a0)+
00002220 51C8 FFFC                  		dbf	d0,@fill 	; fill palette with white
00002224                            
00002224 383C 0015                  		move.w	#$15,d4
00002228                            
00002228                            	@mainloop:
00002228 11FC 0012 F62A             		move.b	#$12,(v_vbla_routine).w
0000222E 6100 0000                  		bsr.w	WaitForVBla
00002232 6100                       		bsr.s	WhiteIn_FromWhite
00002234 6100 F524                  		bsr.w	RunPLC
00002238 51CC FFEE                  		dbf	d4,@mainloop
0000223C 4E75                       		rts	
0000223E                            ; End of function PaletteWhiteIn
0000223E                            
0000223E                            
0000223E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000223E                            
0000223E                            
0000223E                            WhiteIn_FromWhite:
0000223E 7000                       		moveq	#0,d0
00002240 41F8 FB00                  		lea	(v_pal_dry).w,a0
00002244 43F8 FB80                  		lea	(v_pal_dry_dup).w,a1
00002248 1038 F626                  		move.b	(v_pfade_start).w,d0
0000224C D0C0                       		adda.w	d0,a0
0000224E D2C0                       		adda.w	d0,a1
00002250 1038 F627                  		move.b	(v_pfade_size).w,d0
00002254                            
00002254                            	@decolour:
00002254 6100                       		bsr.s	WhiteIn_DecColour ; decrease colour
00002256 51C8 FFFC                  		dbf	d0,@decolour	; repeat for size of palette
0000225A                            
0000225A 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w	; is level Labyrinth?
00002260 6600                       		bne.s	@exit		; if not, branch
00002262 7000                       		moveq	#0,d0
00002264 41F8 FA80                  		lea	(v_pal_water).w,a0
00002268 43F8 FA00                  		lea	(v_pal_water_dup).w,a1
0000226C 1038 F626                  		move.b	(v_pfade_start).w,d0
00002270 D0C0                       		adda.w	d0,a0
00002272 D2C0                       		adda.w	d0,a1
00002274 1038 F627                  		move.b	(v_pfade_size).w,d0
00002278                            
00002278                            	@decolour2:
00002278 6100                       		bsr.s	WhiteIn_DecColour
0000227A 51C8 FFFC                  		dbf	d0,@decolour2
0000227E                            
0000227E                            	@exit:
0000227E 4E75                       		rts	
00002280                            ; End of function WhiteIn_FromWhite
00002280                            
00002280                            
00002280                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002280                            
00002280                            
00002280                            WhiteIn_DecColour:
00002280                            @deblue:
00002280 3419                       		move.w	(a1)+,d2
00002282 3610                       		move.w	(a0),d3
00002284 B642                       		cmp.w	d2,d3
00002286 6700                       		beq.s	@next
00002288 3203                       		move.w	d3,d1
0000228A 0441 0200                  		subi.w	#$200,d1	; decrease blue	value
0000228E 6500                       		blo.s	@degreen
00002290 B242                       		cmp.w	d2,d1
00002292 6500                       		blo.s	@degreen
00002294 30C1                       		move.w	d1,(a0)+
00002296 4E75                       		rts	
00002298                            ; ===========================================================================
00002298                            
00002298                            @degreen:
00002298 3203                       		move.w	d3,d1
0000229A 0441 0020                  		subi.w	#$20,d1		; decrease green value
0000229E 6500                       		blo.s	@dered
000022A0 B242                       		cmp.w	d2,d1
000022A2 6500                       		blo.s	@dered
000022A4 30C1                       		move.w	d1,(a0)+
000022A6 4E75                       		rts	
000022A8                            ; ===========================================================================
000022A8                            
000022A8                            @dered:
000022A8 5558                       		subq.w	#2,(a0)+	; decrease red value
000022AA 4E75                       		rts	
000022AC                            ; ===========================================================================
000022AC                            
000022AC                            @next:
000022AC 5448                       		addq.w	#2,a0
000022AE 4E75                       		rts	
000022B0                            ; End of function WhiteIn_DecColour
000022B0                            
000022B0                            ; ---------------------------------------------------------------------------
000022B0                            ; Subroutine to fade to white (Special Stage)
000022B0                            ; ---------------------------------------------------------------------------
000022B0                            
000022B0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000022B0                            
000022B0                            
000022B0                            PaletteWhiteOut:
000022B0 31FC 003F F626             		move.w	#$003F,(v_pfade_start).w ; start position = 0; size = $40
000022B6 383C 0015                  		move.w	#$15,d4
000022BA                            
000022BA                            	@mainloop:
000022BA 11FC 0012 F62A             		move.b	#$12,(v_vbla_routine).w
000022C0 6100 0000                  		bsr.w	WaitForVBla
000022C4 6100                       		bsr.s	WhiteOut_ToWhite
000022C6 6100 F492                  		bsr.w	RunPLC
000022CA 51CC FFEE                  		dbf	d4,@mainloop
000022CE 4E75                       		rts	
000022D0                            ; End of function PaletteWhiteOut
000022D0                            
000022D0                            
000022D0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000022D0                            
000022D0                            
000022D0                            WhiteOut_ToWhite:
000022D0 7000                       		moveq	#0,d0
000022D2 41F8 FB00                  		lea	(v_pal_dry).w,a0
000022D6 1038 F626                  		move.b	(v_pfade_start).w,d0
000022DA D0C0                       		adda.w	d0,a0
000022DC 1038 F627                  		move.b	(v_pfade_size).w,d0
000022E0                            
000022E0                            	@addcolour:
000022E0 6100                       		bsr.s	WhiteOut_AddColour
000022E2 51C8 FFFC                  		dbf	d0,@addcolour
000022E6                            
000022E6 7000                       		moveq	#0,d0
000022E8 41F8 FA80                  		lea	(v_pal_water).w,a0
000022EC 1038 F626                  		move.b	(v_pfade_start).w,d0
000022F0 D0C0                       		adda.w	d0,a0
000022F2 1038 F627                  		move.b	(v_pfade_size).w,d0
000022F6                            
000022F6                            	@addcolour2:
000022F6 6100                       		bsr.s	WhiteOut_AddColour
000022F8 51C8 FFFC                  		dbf	d0,@addcolour2
000022FC 4E75                       		rts	
000022FE                            ; End of function WhiteOut_ToWhite
000022FE                            
000022FE                            
000022FE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000022FE                            
000022FE                            
000022FE                            WhiteOut_AddColour:
000022FE                            @addred:
000022FE 3410                       		move.w	(a0),d2
00002300 0C42 0EEE                  		cmpi.w	#cWhite,d2
00002304 6700                       		beq.s	@next
00002306 3202                       		move.w	d2,d1
00002308 0241 000E                  		andi.w	#$E,d1
0000230C 0C41 000E                  		cmpi.w	#cRed,d1
00002310 6700                       		beq.s	@addgreen
00002312 5458                       		addq.w	#2,(a0)+	; increase red value
00002314 4E75                       		rts	
00002316                            ; ===========================================================================
00002316                            
00002316                            @addgreen:
00002316 3202                       		move.w	d2,d1
00002318 0241 00E0                  		andi.w	#$E0,d1
0000231C 0C41 00E0                  		cmpi.w	#cGreen,d1
00002320 6700                       		beq.s	@addblue
00002322 0658 0020                  		addi.w	#$20,(a0)+	; increase green value
00002326 4E75                       		rts	
00002328                            ; ===========================================================================
00002328                            
00002328                            @addblue:
00002328 3202                       		move.w	d2,d1
0000232A 0241 0E00                  		andi.w	#$E00,d1
0000232E 0C41 0E00                  		cmpi.w	#cBlue,d1
00002332 6700                       		beq.s	@next
00002334 0658 0200                  		addi.w	#$200,(a0)+	; increase blue	value
00002338 4E75                       		rts	
0000233A                            ; ===========================================================================
0000233A                            
0000233A                            @next:
0000233A 5448                       		addq.w	#2,a0
0000233C 4E75                       		rts	
0000233E                            ; End of function WhiteOut_AddColour
0000233E                            
0000233E                            ; ---------------------------------------------------------------------------
0000233E                            ; Palette cycling routine - Sega logo
0000233E                            ; ---------------------------------------------------------------------------
0000233E                            
0000233E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000233E                            
0000233E                            
0000233E                            PalCycle_Sega:
0000233E 4A38 F635                  		tst.b	(v_pcyc_time+1).w
00002342 6600                       		bne.s	loc_206A
00002344 43F8 FB20                  		lea	(v_pal_dry+$20).w,a1
00002348 41F9 0000 0000             		lea	(Pal_Sega1).l,a0
0000234E 7205                       		moveq	#5,d1
00002350 3038 F632                  		move.w	(v_pcyc_num).w,d0
00002354                            
00002354                            loc_2020:
00002354 6A00                       		bpl.s	loc_202A
00002356 5448                       		addq.w	#2,a0
00002358 5341                       		subq.w	#1,d1
0000235A 5440                       		addq.w	#2,d0
0000235C 60F6                       		bra.s	loc_2020
0000235E                            ; ===========================================================================
0000235E                            
0000235E                            loc_202A:
0000235E 3400                       		move.w	d0,d2
00002360 0242 001E                  		andi.w	#$1E,d2
00002364 6600                       		bne.s	loc_2034
00002366 5440                       		addq.w	#2,d0
00002368                            
00002368                            loc_2034:
00002368 0C40 0060                  		cmpi.w	#$60,d0
0000236C 6400                       		bhs.s	loc_203E
0000236E 3398 0000                  		move.w	(a0)+,(a1,d0.w)
00002372                            
00002372                            loc_203E:
00002372 5440                       		addq.w	#2,d0
00002374 51C9 FFE8                  		dbf	d1,loc_202A
00002378                            
00002378 3038 F632                  		move.w	(v_pcyc_num).w,d0
0000237C 5440                       		addq.w	#2,d0
0000237E 3400                       		move.w	d0,d2
00002380 0242 001E                  		andi.w	#$1E,d2
00002384 6600                       		bne.s	loc_2054
00002386 5440                       		addq.w	#2,d0
00002388                            
00002388                            loc_2054:
00002388 0C40 0064                  		cmpi.w	#$64,d0
0000238C 6D00                       		blt.s	loc_2062
0000238E 31FC 0401 F634             		move.w	#$401,(v_pcyc_time).w
00002394 70F4                       		moveq	#-$C,d0
00002396                            
00002396                            loc_2062:
00002396 31C0 F632                  		move.w	d0,(v_pcyc_num).w
0000239A 7001                       		moveq	#1,d0
0000239C 4E75                       		rts	
0000239E                            ; ===========================================================================
0000239E                            
0000239E                            loc_206A:
0000239E 5338 F634                  		subq.b	#1,(v_pcyc_time).w
000023A2 6A00                       		bpl.s	loc_20BC
000023A4 11FC 0004 F634             		move.b	#4,(v_pcyc_time).w
000023AA 3038 F632                  		move.w	(v_pcyc_num).w,d0
000023AE 0640 000C                  		addi.w	#$C,d0
000023B2 0C40 0030                  		cmpi.w	#$30,d0
000023B6 6500                       		blo.s	loc_2088
000023B8 7000                       		moveq	#0,d0
000023BA 4E75                       		rts	
000023BC                            ; ===========================================================================
000023BC                            
000023BC                            loc_2088:
000023BC 31C0 F632                  		move.w	d0,(v_pcyc_num).w
000023C0 41F9 0000 0000             		lea	(Pal_Sega2).l,a0
000023C6 41F0 0000                  		lea	(a0,d0.w),a0
000023CA 43F8 FB04                  		lea	(v_pal_dry+$04).w,a1
000023CE 22D8                       		move.l	(a0)+,(a1)+
000023D0 22D8                       		move.l	(a0)+,(a1)+
000023D2 3298                       		move.w	(a0)+,(a1)
000023D4 43F8 FB20                  		lea	(v_pal_dry+$20).w,a1
000023D8 7000                       		moveq	#0,d0
000023DA 722C                       		moveq	#$2C,d1
000023DC                            
000023DC                            loc_20A8:
000023DC 3400                       		move.w	d0,d2
000023DE 0242 001E                  		andi.w	#$1E,d2
000023E2 6600                       		bne.s	loc_20B2
000023E4 5440                       		addq.w	#2,d0
000023E6                            
000023E6                            loc_20B2:
000023E6 3390 0000                  		move.w	(a0),(a1,d0.w)
000023EA 5440                       		addq.w	#2,d0
000023EC 51C9 FFEE                  		dbf	d1,loc_20A8
000023F0                            
000023F0                            loc_20BC:
000023F0 7001                       		moveq	#1,d0
000023F2 4E75                       		rts	
000023F4                            ; End of function PalCycle_Sega
000023F4                            
000023F4                            ; ===========================================================================
000023F4                            
000023F4                            Pal_Sega1:	incbin	"palette\Sega1.bin"
00002400                            Pal_Sega2:	incbin	"palette\Sega2.bin"
00002430                            
00002430                            ; ---------------------------------------------------------------------------
00002430                            ; Subroutines to load palettes
00002430                            
00002430                            ; input:
00002430                            ;	d0 = index number for palette
00002430                            ; ---------------------------------------------------------------------------
00002430                            
00002430                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002430                            
00002430                            
00002430                            ; ---------------------------------------------------------------------------
00002430                            ; Subroutines to load pallets
00002430                            ; ---------------------------------------------------------------------------
00002430                            
00002430                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
00002430                            
00002430                            PalLoad1:
00002430 1238 FE11                  		move.b ($FFFFFE11),d1
00002434 43F9 0000 0000             		lea (PalPointers).l,a1
0000243A 0C01 0000                  		cmp.b #0,d1
0000243E 6700 0000                  		beq.w PalLoad1_Continue
00002442 43F9 0000 0000             		lea (PalPointers2).l,a1
00002448 0C01 0001                  		cmp.b #1,d1
0000244C 6700 0000                  		beq.w PalLoad1_Continue
00002450 43F9 0000 0000             		lea (PalPointers3).l,a1
00002456                            
00002456                            PalLoad1_Continue:
00002456 E748                       		lsl.w #3,d0
00002458 D2C0                       		adda.w d0,a1
0000245A 2459                       		movea.l (a1)+,a2
0000245C 3659                       		movea.w (a1)+,a3
0000245E D6FC 0080                  		adda.w #$80,a3
00002462 3E19                       		move.w (a1)+,d7
00002464                            
00002464                            loc_2110:
00002464 26DA                       		move.l (a2)+,(a3)+
00002466 51CF FFFC                  		dbf d7,loc_2110
0000246A 4E75                       		rts
0000246C                             ; End of function PalLoad1
0000246C                            
0000246C                            
0000246C                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
0000246C                            
0000246C                            PalLoad2:
0000246C 1238 FE11                  		move.b ($FFFFFE11),d1
00002470 43F9 0000 0000             		lea (PalPointers).l,a1
00002476 0C01 0000                  		cmp.b #0,d1
0000247A 6700 0000                  		beq.w PalLoad2_Continue
0000247E 43F9 0000 0000             		lea (PalPointers2).l,a1
00002484 0C01 0001                  		cmp.b #1,d1
00002488 6700 0000                  		beq.w PalLoad2_Continue
0000248C 43F9 0000 0000             		lea (PalPointers3).l,a1
00002492                            
00002492                            
00002492                            PalLoad2_Continue:
00002492 E748                       		lsl.w #3,d0
00002494 D2C0                       		adda.w d0,a1
00002496 2459                       		movea.l (a1)+,a2
00002498 3659                       		movea.w (a1)+,a3
0000249A 3E19                       		move.w (a1)+,d7
0000249C                            
0000249C                            loc_2128:
0000249C 26DA                       		move.l (a2)+,(a3)+
0000249E 51CF FFFC                  		dbf d7,loc_2128
000024A2 4E75                       		rts
000024A4                            ; End of function PalLoad2
000024A4                            
000024A4                            ; ||||||||||||||| S U B    R O U T    I N E |||||||||||||||||||||||||||||||||||||||
000024A4                            
000024A4                            
000024A4                            PalLoad_Loop: ;Quick load - TIS
000024A4                                    
000024A4 34D9                               move.w    (a1)+,(a2)+              ;Copy pallete data to RAM
000024A6 51C8 FFFC                          dbf    d0,PalLoad_Loop               ;Loop d0 (length)
000024AA 4E75                               rts
000024AC                            
000024AC                            ; ---------------------------------------------------------------------------
000024AC                            ; Underwater pallet loading subroutine
000024AC                            ; ---------------------------------------------------------------------------
000024AC                            
000024AC                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
000024AC                            
000024AC                            PalLoad3_Water:
000024AC 1238 FE11                  		move.b ($FFFFFE11),d1
000024B0 43F9 0000 0000             		lea (PalPointers).l,a1
000024B6 0C01 0000                  		cmp.b #0,d1
000024BA 6700 0000                  		beq.w PalLoad3_Continue
000024BE 43F9 0000 0000             		lea (PalPointers2).l,a1
000024C4 0C01 0001                  		cmp.b #1,d1
000024C8 6700 0000                  		beq.w PalLoad3_Continue
000024CC 43F9 0000 0000             		lea (PalPointers3).l,a1
000024D2                            
000024D2                            PalLoad3_Continue:
000024D2 E748                       		lsl.w #3,d0
000024D4 D2C0                       		adda.w d0,a1
000024D6 2459                       		movea.l (a1)+,a2
000024D8 3659                       		movea.w (a1)+,a3
000024DA 96FC 0080                  		suba.w #$80,a3
000024DE 3E19                       		move.w (a1)+,d7
000024E0                            
000024E0                            loc_2144:
000024E0 26DA                       		move.l (a2)+,(a3)+
000024E2 51CF FFFC                  		dbf d7,loc_2144
000024E6 4E75                       		rts
000024E8                            ; End of function PalLoad3_Water
000024E8                            
000024E8                            
000024E8                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
000024E8                            
000024E8                            
000024E8                            PalLoad4_Water:
000024E8 1238 FE11                  		move.b ($FFFFFE11),d1
000024EC 43F9 0000 0000             		lea (PalPointers).l,a1
000024F2 0C01 0000                  		cmp.b #0,d1
000024F6 6700 0000                  		beq.w PalLoad4_Continue
000024FA 43F9 0000 0000             		lea (PalPointers2).l,a1
00002500 0C01 0001                  		cmp.b #1,d1
00002504 6700 0000                  		beq.w PalLoad4_Continue
00002508 43F9 0000 0000             		lea (PalPointers3).l,a1
0000250E                            
0000250E                            PalLoad4_Continue:
0000250E E748                       		lsl.w #3,d0
00002510 D2C0                       		adda.w d0,a1
00002512 2459                       		movea.l (a1)+,a2
00002514 3659                       		movea.w (a1)+,a3
00002516 96FC 0100                  		suba.w #$100,a3
0000251A 3E19                       		move.w (a1)+,d7
0000251C                            loc_2160:
0000251C 26DA                       		move.l (a2)+,(a3)+
0000251E 51CF FFFC                  		dbf d7,loc_2160
00002522 4E75                       		rts
00002524                             ; End of function PalLoad4_Water
00002524                            
00002524                            ; ===========================================================================
00002524                            
00002524                            		include	"_inc\Palette Pointers.asm"
00002524                            ; ---------------------------------------------------------------------------
00002524                            ; Palette pointers
00002524                            ; ---------------------------------------------------------------------------
00002524                            
00002524                            palp:	macro paladdress,ramaddress,colors
00002524                            	dc.l paladdress
00002524                            	dc.w ramaddress, (colors>>1)-1
00002524                            	endm
00002524                            
00002524                            PalPointers:
00002524                            
00002524                            ; palette address, RAM address, colors
00002524                            
00002524 0000 0000 FB00 001F        ptr_Pal_SegaBG:		palp	Pal_SegaBG,v_pal_dry,$40		; 0 - Sega logo
0000252C 0000 0000 FB00 001F        ptr_Pal_Title:		palp	Pal_Title,v_pal_dry,$40		; 1 - title screen
00002534 0000 0000 FB00 001F        ptr_Pal_LevelSel:	palp	Pal_LevelSel,v_pal_dry,$40		; 2 - level select
0000253C 0000 0000 FB00 0007        ptr_Pal_Sonic:		palp	Pal_Sonic,v_pal_dry,$10		; 3 - Sonic
00002544                            Pal_Levels:
00002544 0000 0000 FB20 0017        ptr_Pal_GHZ:		palp	Pal_GHZ,v_pal_dry+$20, $30		; 4 - GHZ
0000254C 0000 0000 FB20 0017        ptr_Pal_LZ:		palp	Pal_LZ,v_pal_dry+$20,$30		; 5 - LZ
00002554 0000 0000 FB20 0017        ptr_Pal_MZ:		palp	Pal_MZ,v_pal_dry+$20,$30		; 6 - MZ
0000255C 0000 0000 FB20 0017        ptr_Pal_SLZ:		palp	Pal_SLZ,v_pal_dry+$20,$30		; 7 - SLZ
00002564 0000 0000 FB20 0017        ptr_Pal_SYZ:		palp	Pal_SYZ,v_pal_dry+$20,$30		; 8 - SYZ
0000256C 0000 0000 FB20 0017        ptr_Pal_SBZ1:		palp	Pal_SBZ1,v_pal_dry+$20,$30		; 9 - SBZ1
00002574 0000 0000 FB00 001F        ptr_Pal_Special:	palp	Pal_Special,v_pal_dry,$40		; $A (10) - special stage
0000257C 0000 0000 FB00 001F        ptr_Pal_LZWater:	palp	Pal_LZWater,v_pal_dry,$40		; $B (11) - LZ underwater
00002584 0000 0000 FB20 0017        ptr_Pal_SBZ3:		palp	Pal_SBZ3,v_pal_dry+$20,$30		; $C (12) - SBZ3
0000258C 0000 0000 FB00 001F        ptr_Pal_SBZ3Water:	palp	Pal_SBZ3Water,v_pal_dry,$40		; $D (13) - SBZ3 underwater
00002594 0000 0000 FB20 0017        ptr_Pal_SBZ2:		palp	Pal_SBZ2,v_pal_dry+$20,$30		; $E (14) - SBZ2
0000259C 0000 0000 FB00 0007        ptr_Pal_LZSonWater:	palp	Pal_LZSonWater,v_pal_dry,$10	; $F (15) - LZ Sonic underwater
000025A4 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat:	palp	Pal_SBZ3SonWat,v_pal_dry,$10	; $10 (16) - SBZ3 Sonic underwater
000025AC 0000 0000 FB00 001F        ptr_Pal_SSResult:	palp	Pal_SSResult,v_pal_dry,$40		; $11 (17) - special stage results
000025B4 0000 0000 FB00 000F        ptr_Pal_Continue:	palp	Pal_Continue,v_pal_dry,$20		; $12 (18) - special stage results continue
000025BC 0000 0000 FB00 001F        ptr_Pal_Ending:		palp	Pal_Ending,v_pal_dry,$40		; $13 (19) - ending sequence
000025C4 0000 0000 FB00 001F        ptr_Pal_Options:		palp	Pal_Options,v_pal_dry,$40		; $14 (20) - options screen
000025CC 0000 0000 FB00 0007        ptr_Pal_Sonic2:		palp	Pal_Sonic2,v_pal_dry,$10		; $15 (20) - Sonic (Sonic 1)
000025D4 0000 0000 FB00 0007        ptr_Pal_Sonic3:		palp	Pal_Sonic3,v_pal_dry,$10		; $16 (21) - Sonic (Beta)
000025DC 0000 0000 FB00 0007        ptr_Pal_Sonic4:		palp	Pal_Sonic4,v_pal_dry,$10		; $17 (22) - Sonic (Midnight)
000025E4 0000 0000 FB00 0007        ptr_Pal_Sonic5:		palp	Pal_Sonic5,v_pal_dry,$10		; $18 (23) - Sonic (C2)
000025EC 0000 0000 FB00 0007        ptr_Pal_Sonic6:		palp	Pal_Sonic6,v_pal_dry,$10		; $19 (24) - Sonic (Crackers)
000025F4 0000 0000 FB00 0007        ptr_Pal_Sonic7:		palp	Pal_Sonic7,v_pal_dry,$10		; $1A (25) - Sonic (RHS)
000025FC 0000 0000 FB00 0007        ptr_Pal_Sonic8:		palp	Pal_Sonic8,v_pal_dry,$10		; $1B (26) - Sonic (Socket)
00002604 0000 0000 FB00 0007        ptr_Pal_Sonic9:		palp	Pal_Sonic9,v_pal_dry,$10		; $1C (27) - Sonic (Cringe)
0000260C 0000 0000 FB00 0007        ptr_Pal_Sonic10:		palp	Pal_Sonic10,v_pal_dry,$10		; $1D (28) - Sonic (Darker)
00002614 0000 0000 FB00 0007        ptr_Pal_SonWater2:		palp	Pal_SonWater2,v_pal_dry,$10		; $15 (20) - Sonic Underwater (Sonic 1)
0000261C 0000 0000 FB00 0007        ptr_Pal_SonWater3:		palp	Pal_SonWater3,v_pal_dry,$10		; $16 (21) - Sonic Underwater (Beta)
00002624 0000 0000 FB00 0007        ptr_Pal_SonWater4:		palp	Pal_SonWater4,v_pal_dry,$10		; $17 (22) - Sonic Underwater (Midnight)
0000262C 0000 0000 FB00 0007        ptr_Pal_SonWater5:		palp	Pal_SonWater5,v_pal_dry,$10		; $18 (23) - Sonic Underwater (C2)
00002634 0000 0000 FB00 0007        ptr_Pal_SonWater6:		palp	Pal_SonWater6,v_pal_dry,$10		; $19 (24) - Sonic Underwater (Crackers)
0000263C 0000 0000 FB00 0007        ptr_Pal_SonWater7:		palp	Pal_SonWater7,v_pal_dry,$10		; $1A (25) - Sonic Underwater (RHS)
00002644 0000 0000 FB00 0007        ptr_Pal_SonWater8:		palp	Pal_SonWater8,v_pal_dry,$10		; $1B (26) - Sonic Underwater (Socket)
0000264C 0000 0000 FB00 0007        ptr_Pal_SonWater9:		palp	Pal_SonWater9,v_pal_dry,$10		; $1C (27) - Sonic Underwater (Cringe)
00002654 0000 0000 FB00 0007        ptr_Pal_SonWater10:		palp	Pal_SonWater10,v_pal_dry,$10		; $1D (28) - Sonic Underwater (Darker)
0000265C 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat2:	palp	Pal_SBZ3SonWat2,v_pal_dry,$10		; $15 (20) - Sonic Underwater (Sonic 1)
00002664 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat3:	palp	Pal_SBZ3SonWat3,v_pal_dry,$10	; $16 (21) - Sonic Underwater (Beta)
0000266C 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat4:	palp	Pal_SBZ3SonWat4,v_pal_dry,$10	; $17 (22) - Sonic Underwater (Midnight)
00002674 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat5:	palp	Pal_SBZ3SonWat5,v_pal_dry,$10	; $18 (23) - Sonic Underwater (C2)
0000267C 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat6:	palp	Pal_SBZ3SonWat6,v_pal_dry,$10	; $19 (24) - Sonic Underwater (Crackers)
00002684 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat7:	palp	Pal_SBZ3SonWat7,v_pal_dry,$10	; $1A (25) - Sonic Underwater (RHS)
0000268C 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat8:	palp	Pal_SBZ3SonWat8,v_pal_dry,$10	; $1B (26) - Sonic Underwater (Socket)
00002694 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat9:	palp	Pal_SBZ3SonWat9,v_pal_dry,$10	; $1C (27) - Sonic Underwater (Cringe)
0000269C 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat10:	palp	Pal_SBZ3SonWat10,v_pal_dry,$10	; $1D (28) - Sonic Underwater (Darker)
000026A4                            			even
000026A4                            
000026A4                            PalPointers2:
000026A4                            
000026A4                            ; palette address, RAM address, colors
000026A4                            ; Note, Uses Duplicate entries to ensure they are in the correct place, but they are not needed in the IDs
000026A4 0000 0000 FB00 001F        ptr_Pal_SegaBG_D:		palp	Pal_SegaBG,v_pal_dry,$40		; 0 - Sega logo
000026AC 0000 0000 FB00 001F        ptr_Pal_Title_D:		palp	Pal_Title,v_pal_dry,$40		; 1 - title screen
000026B4 0000 0000 FB00 001F        ptr_Pal_LevelSel_D:	palp	Pal_LevelSel,v_pal_dry,$40		; 2 - level select
000026BC 0000 0000 FB00 0007        ptr_Pal_SonicD:		palp	Pal_Sonic,v_pal_dry,$10		; 3 - Sonic
000026C4                            Pal_Levels_2:
000026C4 0000 0000 FB20 0017        ptr_Pal_GHZ2:		palp	Pal_GHZ2,v_pal_dry+$20, $30		; 4 - GHZ
000026CC 0000 0000 FB20 0017        ptr_Pal_LZ2:		palp	Pal_LZ2,v_pal_dry+$20,$30		; 5 - LZ
000026D4 0000 0000 FB20 0017        ptr_Pal_MZ2:		palp	Pal_MZ2,v_pal_dry+$20,$30		; 6 - MZ
000026DC 0000 0000 FB20 0017        ptr_Pal_SLZ2:		palp	Pal_SLZ2,v_pal_dry+$20,$30		; 7 - SLZ
000026E4 0000 0000 FB20 0017        ptr_Pal_SYZ2:		palp	Pal_SYZ2,v_pal_dry+$20,$30		; 8 - SYZ
000026EC 0000 0000 FB20 0017        ptr_Pal_SBZ1_D:		palp	Pal_SBZ1,v_pal_dry+$20,$30		; 9 - SBZ1
000026F4 0000 0000 FB00 001F        ptr_Pal_Special_D:	palp	Pal_Special,v_pal_dry,$40		; $A (10) - special stage
000026FC 0000 0000 FB00 001F        ptr_Pal_LZWatr2:	palp	Pal_LZWatr2,v_pal_dry,$40		; $B (11) - LZ underwater
00002704 0000 0000 FB20 0017        ptr_Pal_SBZ3_D:		palp	Pal_SBZ3,v_pal_dry+$20,$30		; $C (12) - SBZ3
0000270C 0000 0000 FB00 001F        ptr_Pal_SBZ3Water_D:	palp	Pal_SBZ3Water,v_pal_dry,$40		; $D (13) - SBZ3 underwater
00002714 0000 0000 FB20 0017        ptr_Pal_SBZ2_D:		palp	Pal_SBZ2,v_pal_dry+$20,$30		; $E (14) - SBZ2
0000271C 0000 0000 FB00 0007        ptr_Pal_LZSonWatr2:	palp	Pal_LZSonWatr2,v_pal_dry,$10	; $F (15) - LZ Sonic underwater
00002724 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat_D:	palp	Pal_SBZ3SonWat,v_pal_dry,$10	; $10 (16) - SBZ3 Sonic underwater
0000272C 0000 0000 FB00 001F        ptr_Pal_SSResult_D:	palp	Pal_SSResult,v_pal_dry,$40		; $11 (17) - special stage results
00002734 0000 0000 FB00 000F        ptr_Pal_Continue_D:	palp	Pal_Continue,v_pal_dry,$20		; $12 (18) - special stage results continue
0000273C 0000 0000 FB00 001F        ptr_Pal_Options_D:		palp	Pal_Options,v_pal_dry,$40		; $13 (20) - options screen
00002744 0000 0000 FB00 001F        ptr_Pal_Ending_D:		palp	Pal_Ending,v_pal_dry,$40		; $14 (21) - ending sequence
0000274C 0000 0000 FB00 0007        ptr_Pal_Sonic2_D:		palp	Pal_Sonic2,v_pal_dry,$10		; $15 (22) - Sonic (Sonic 1)
00002754 0000 0000 FB00 0007        ptr_Pal_Sonic3_D:		palp	Pal_Sonic3,v_pal_dry,$10		; $16 (23) - Sonic (Beta)
0000275C 0000 0000 FB00 0007        ptr_Pal_Sonic4_D:		palp	Pal_Sonic4,v_pal_dry,$10		; $17 (24) - Sonic (Midnight)
00002764 0000 0000 FB00 0007        ptr_Pal_Sonic5_D:		palp	Pal_Sonic5,v_pal_dry,$10		; $18 (25) - Sonic (C2)
0000276C 0000 0000 FB00 0007        ptr_Pal_Sonic6_D:		palp	Pal_Sonic6,v_pal_dry,$10		; $19 (26) - Sonic (Crackers)
00002774 0000 0000 FB00 0007        ptr_Pal_Sonic7_D:		palp	Pal_Sonic7,v_pal_dry,$10		; $1A (27) - Sonic (RHS)
0000277C 0000 0000 FB00 0007        ptr_Pal_Sonic8_D:		palp	Pal_Sonic8,v_pal_dry,$10		; $1B (28) - Sonic (Socket)
00002784 0000 0000 FB00 0007        ptr_Pal_Sonic9_D:		palp	Pal_Sonic9,v_pal_dry,$10		; $1C (29) - Sonic (Cringe)
0000278C 0000 0000 FB00 0007        ptr_Pal_Sonic10_D:		palp	Pal_Sonic10,v_pal_dry,$10		; $1D (30) - Sonic (Darker)
00002794 0000 0000 FB00 0007        ptr_Pal_SonWater2_D:		palp	Pal_SonWater2,v_pal_dry,$10		; $15 (31) - Sonic Underwater (Sonic 1)
0000279C 0000 0000 FB00 0007        ptr_Pal_SonWater3_D:		palp	Pal_SonWater3,v_pal_dry,$10		; $16 (32) - Sonic Underwater (Beta)
000027A4 0000 0000 FB00 0007        ptr_Pal_SonWater4_D:		palp	Pal_SonWater4,v_pal_dry,$10		; $17 (33) - Sonic Underwater (Midnight)
000027AC 0000 0000 FB00 0007        ptr_Pal_SonWater5_D:		palp	Pal_SonWater5,v_pal_dry,$10		; $18 (34) - Sonic Underwater (C2)
000027B4 0000 0000 FB00 0007        ptr_Pal_SonWater6_D:		palp	Pal_SonWater6,v_pal_dry,$10		; $19 (35) - Sonic Underwater (Crackers)
000027BC 0000 0000 FB00 0007        ptr_Pal_SonWater7_D:		palp	Pal_SonWater7,v_pal_dry,$10		; $1A (36) - Sonic Underwater (RHS)
000027C4 0000 0000 FB00 0007        ptr_Pal_SonWater8_D:		palp	Pal_SonWater8,v_pal_dry,$10		; $1B (37) - Sonic Underwater (Socket)
000027CC 0000 0000 FB00 0007        ptr_Pal_SonWater9_D:		palp	Pal_SonWater9,v_pal_dry,$10		; $1C (38) - Sonic Underwater (Cringe)
000027D4 0000 0000 FB00 0007        ptr_Pal_SonWater10_D:		palp	Pal_SonWater10,v_pal_dry,$10		; $1D (39) - Sonic Underwater (Darker)
000027DC 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat2D:	palp	Pal_SBZ3SonWat2,v_pal_dry,$10		; $15 (40) - Sonic Underwater (Sonic 1)
000027E4 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat3D:	palp	Pal_SBZ3SonWat3,v_pal_dry,$10	; $16 (41) - Sonic Underwater (Beta)
000027EC 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat4D:	palp	Pal_SBZ3SonWat4,v_pal_dry,$10	; $17 (42) - Sonic Underwater (Midnight)
000027F4 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat5D:	palp	Pal_SBZ3SonWat5,v_pal_dry,$10	; $18 (43) - Sonic Underwater (C2)
000027FC 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat6D:	palp	Pal_SBZ3SonWat6,v_pal_dry,$10	; $19 (44) - Sonic Underwater (Crackers)
00002804 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat7D:	palp	Pal_SBZ3SonWat7,v_pal_dry,$10	; $1A (45) - Sonic Underwater (RHS)
0000280C 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat8D:	palp	Pal_SBZ3SonWat8,v_pal_dry,$10	; $1B (46) - Sonic Underwater (Socket)
00002814 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat9D:	palp	Pal_SBZ3SonWat9,v_pal_dry,$10	; $1C (47) - Sonic Underwater (Cringe)
0000281C 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat10D:	palp	Pal_SBZ3SonWat10,v_pal_dry,$10	; $1D (48) - Sonic Underwater (Darker)
00002824                            			even
00002824                            			
00002824                            PalPointers3:
00002824                            			
00002824                            ; Note, Uses Duplicate entries to ensure they are in the correct place, but they are not needed in the IDs
00002824 0000 0000 FB00 001F        ptr_Pal_SegaBG_E:		palp	Pal_SegaBG,v_pal_dry,$40		; 0 - Sega logo
0000282C 0000 0000 FB00 001F        ptr_Pal_Title_E:		palp	Pal_Title,v_pal_dry,$40		; 1 - title screen
00002834 0000 0000 FB00 001F        ptr_Pal_LevelSel_E:		palp	Pal_LevelSel,v_pal_dry,$40		; 2 - level select
0000283C 0000 0000 FB00 0007        ptr_Pal_SonicE:			palp	Pal_Sonic,v_pal_dry,$10		; 3 - Sonic
00002844                            Pal_Levels_3:
00002844 0000 0000 FB20 0017        ptr_Pal_GHZ3:		palp	Pal_GHZ3,v_pal_dry+$20, $30		; 4 - GHZ
0000284C 0000 0000 FB20 0017        ptr_Pal_LZ3:		palp	Pal_LZ3,v_pal_dry+$20,$30		; 5 - LZ
00002854 0000 0000 FB20 0017        ptr_Pal_MZ3:		palp	Pal_MZ3,v_pal_dry+$20,$30		; 6 - MZ
0000285C 0000 0000 FB20 0017        ptr_Pal_SLZ3:		palp	Pal_SLZ3,v_pal_dry+$20,$30		; 7 - SLZ
00002864 0000 0000 FB20 0017        ptr_Pal_SYZ3:		palp	Pal_SYZ3,v_pal_dry+$20,$30		; 8 - SYZ
0000286C 0000 0000 FB20 0017        ptr_Pal_SBZ1_E:		palp	Pal_SBZ1,v_pal_dry+$20,$30		; 9 - SBZ1
00002874 0000 0000 FB00 001F        ptr_Pal_Special_E:	palp	Pal_Special,v_pal_dry,$40		; $A (10) - special stage
0000287C 0000 0000 FB00 001F        ptr_Pal_LZWatr3:	palp	Pal_LZWatr3,v_pal_dry,$40		; $B (11) - LZ underwater
00002884 0000 0000 FB20 0017        ptr_Pal_SBZ3_E:		palp	Pal_SBZ3,v_pal_dry+$20,$30		; $C (12) - SBZ3
0000288C 0000 0000 FB00 001F        ptr_Pal_SBZ3Water_E:	palp	Pal_SBZ3Water,v_pal_dry,$40		; $D (13) - SBZ3 underwater
00002894 0000 0000 FB20 0017        ptr_Pal_SBZ2_E:		palp	Pal_SBZ2,v_pal_dry+$20,$30		; $E (14) - SBZ2
0000289C 0000 0000 FB00 0007        ptr_Pal_LZSonWatr2E:	palp	Pal_LZSonWatr2,v_pal_dry,$10	; $F (15) - LZ Sonic underwater
000028A4 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat_E:	palp	Pal_SBZ3SonWat,v_pal_dry,$10	; $10 (16) - SBZ3 Sonic underwater
000028AC 0000 0000 FB00 001F        ptr_Pal_SSResult_E:	palp	Pal_SSResult,v_pal_dry,$40		; $11 (17) - special stage results
000028B4 0000 0000 FB00 000F        ptr_Pal_Continue_E:	palp	Pal_Continue,v_pal_dry,$20		; $12 (18) - special stage results continue
000028BC 0000 0000 FB00 001F        ptr_Pal_Ending_E:		palp	Pal_Ending,v_pal_dry,$40		; $13 (19) - ending sequence
000028C4 0000 0000 FB00 001F        ptr_Pal_Options_E:		palp	Pal_Options,v_pal_dry,$40		; $14 (21) - options screen
000028CC 0000 0000 FB00 0007        ptr_Pal_Sonic2_E:		palp	Pal_Sonic2,v_pal_dry,$10		; $15 (22) - Sonic (Sonic 1)
000028D4 0000 0000 FB00 0007        ptr_Pal_Sonic3_E:		palp	Pal_Sonic3,v_pal_dry,$10		; $16 (23) - Sonic (Beta)
000028DC 0000 0000 FB00 0007        ptr_Pal_Sonic4_E:		palp	Pal_Sonic4,v_pal_dry,$10		; $17 (24) - Sonic (Midnight)
000028E4 0000 0000 FB00 0007        ptr_Pal_Sonic5_E:		palp	Pal_Sonic5,v_pal_dry,$10		; $18 (25) - Sonic (C2)
000028EC 0000 0000 FB00 0007        ptr_Pal_Sonic6_E:		palp	Pal_Sonic6,v_pal_dry,$10		; $19 (26) - Sonic (Crackers)
000028F4 0000 0000 FB00 0007        ptr_Pal_Sonic7_E:		palp	Pal_Sonic7,v_pal_dry,$10		; $1A (27) - Sonic (RHS)
000028FC 0000 0000 FB00 0007        ptr_Pal_Sonic8_E:		palp	Pal_Sonic8,v_pal_dry,$10		; $1B (28) - Sonic (Socket)
00002904 0000 0000 FB00 0007        ptr_Pal_Sonic9_E:		palp	Pal_Sonic9,v_pal_dry,$10		; $1C (29) - Sonic (Cringe)
0000290C 0000 0000 FB00 0007        ptr_Pal_Sonic10_E:		palp	Pal_Sonic10,v_pal_dry,$10		; $1D (30) - Sonic (Darker)
00002914 0000 0000 FB00 0007        ptr_Pal_SonWater2_E:		palp	Pal_SonWater2,v_pal_dry,$10		; $15 (31) - Sonic Underwater (Sonic 1)
0000291C 0000 0000 FB00 0007        ptr_Pal_SonWater3_E:		palp	Pal_SonWater3,v_pal_dry,$10		; $16 (32) - Sonic Underwater (Beta)
00002924 0000 0000 FB00 0007        ptr_Pal_SonWater4_E:		palp	Pal_SonWater4,v_pal_dry,$10		; $17 (33) - Sonic Underwater (Midnight)
0000292C 0000 0000 FB00 0007        ptr_Pal_SonWater5_E:		palp	Pal_SonWater5,v_pal_dry,$10		; $18 (34) - Sonic Underwater (C2)
00002934 0000 0000 FB00 0007        ptr_Pal_SonWater6_E:		palp	Pal_SonWater6,v_pal_dry,$10		; $19 (35) - Sonic Underwater (Crackers)
0000293C 0000 0000 FB00 0007        ptr_Pal_SonWater7_E:		palp	Pal_SonWater7,v_pal_dry,$10		; $1A (36) - Sonic Underwater (RHS)
00002944 0000 0000 FB00 0007        ptr_Pal_SonWater8_E:		palp	Pal_SonWater8,v_pal_dry,$10		; $1B (37) - Sonic Underwater (Socket)
0000294C 0000 0000 FB00 0007        ptr_Pal_SonWater9_E:		palp	Pal_SonWater9,v_pal_dry,$10		; $1C (38) - Sonic Underwater (Cringe)
00002954 0000 0000 FB00 0007        ptr_Pal_SonWater10_E:		palp	Pal_SonWater10,v_pal_dry,$10		; $1D (39) - Sonic Underwater (Darker)
0000295C 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat2E:	palp	Pal_SBZ3SonWat2,v_pal_dry,$10		; $15 (40) - Sonic Underwater (Sonic 1)
00002964 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat3E:	palp	Pal_SBZ3SonWat3,v_pal_dry,$10	; $16 (41) - Sonic Underwater (Beta)
0000296C 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat4E:	palp	Pal_SBZ3SonWat4,v_pal_dry,$10	; $17 (42) - Sonic Underwater (Midnight)
00002974 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat5E:	palp	Pal_SBZ3SonWat5,v_pal_dry,$10	; $18 (43) - Sonic Underwater (C2)
0000297C 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat6E:	palp	Pal_SBZ3SonWat6,v_pal_dry,$10	; $19 (44) - Sonic Underwater (Crackers)
00002984 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat7E:	palp	Pal_SBZ3SonWat7,v_pal_dry,$10	; $1A (45) - Sonic Underwater (RHS)
0000298C 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat8E:	palp	Pal_SBZ3SonWat8,v_pal_dry,$10	; $1B (46) - Sonic Underwater (Socket)
00002994 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat9E:	palp	Pal_SBZ3SonWat9,v_pal_dry,$10	; $1C (47) - Sonic Underwater (Cringe)
0000299C 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat10E:	palp	Pal_SBZ3SonWat10,v_pal_dry,$10	; $1D (48) - Sonic Underwater (Darker)
000029A4                            			even
000029A4                            
000029A4                            
000029A4 =00000000                  palid_SegaBG:		equ (ptr_Pal_SegaBG-PalPointers)/8
000029A4 =00000001                  palid_Title:		equ (ptr_Pal_Title-PalPointers)/8
000029A4 =00000002                  palid_LevelSel:		equ (ptr_Pal_LevelSel-PalPointers)/8
000029A4 =00000003                  palid_Sonic:		equ (ptr_Pal_Sonic-PalPointers)/8
000029A4 =00000004                  palid_GHZ:		equ (ptr_Pal_GHZ-PalPointers)/8
000029A4 =00000005                  palid_LZ:		equ (ptr_Pal_LZ-PalPointers)/8
000029A4 =00000006                  palid_MZ:		equ (ptr_Pal_MZ-PalPointers)/8
000029A4 =00000007                  palid_SLZ:		equ (ptr_Pal_SLZ-PalPointers)/8
000029A4 =00000008                  palid_SYZ:		equ (ptr_Pal_SYZ-PalPointers)/8
000029A4 =00000009                  palid_SBZ1:		equ (ptr_Pal_SBZ1-PalPointers)/8
000029A4 =0000000A                  palid_Special:		equ (ptr_Pal_Special-PalPointers)/8
000029A4 =0000000B                  palid_LZWater:		equ (ptr_Pal_LZWater-PalPointers)/8
000029A4 =0000000C                  palid_SBZ3:		equ (ptr_Pal_SBZ3-PalPointers)/8
000029A4 =0000000D                  palid_SBZ3Water:	equ (ptr_Pal_SBZ3Water-PalPointers)/8
000029A4 =0000000E                  palid_SBZ2:		equ (ptr_Pal_SBZ2-PalPointers)/8
000029A4 =0000000F                  palid_LZSonWater:	equ (ptr_Pal_LZSonWater-PalPointers)/8
000029A4 =00000010                  palid_SBZ3SonWat:	equ (ptr_Pal_SBZ3SonWat-PalPointers)/8
000029A4 =00000011                  palid_SSResult:		equ (ptr_Pal_SSResult-PalPointers)/8
000029A4 =00000012                  palid_Continue:		equ (ptr_Pal_Continue-PalPointers)/8
000029A4 =00000013                  palid_Ending:		equ (ptr_Pal_Ending-PalPointers)/8
000029A4 =00000014                  palid_Options:		equ (ptr_Pal_Options-PalPointers)/8
000029A4 =00000004                  palid_GHZ2:		equ (ptr_Pal_GHZ-PalPointers)/8
000029A4 =00000005                  palid_LZ2:		equ (ptr_Pal_LZ-PalPointers)/8
000029A4 =00000006                  palid_MZ2:		equ (ptr_Pal_MZ-PalPointers)/8
000029A4 =00000007                  palid_SLZ2:		equ (ptr_Pal_SLZ-PalPointers)/8
000029A4 =00000008                  palid_SYZ2:		equ (ptr_Pal_SYZ-PalPointers)/8
000029A4 =0000003B                  palid_LZWatr2:		equ (ptr_Pal_LZWatr2-PalPointers)/8
000029A4 =0000000F                  palid_LZSonWatr2:	equ (ptr_Pal_LZSonWater-PalPointers)/8
000029A4 =00000064                  palid_GHZ3:		equ (ptr_Pal_GHZ3-PalPointers)/8
000029A4 =00000065                  palid_LZ3:		equ (ptr_Pal_LZ3-PalPointers)/8
000029A4 =00000066                  palid_MZ3:		equ (ptr_Pal_MZ3-PalPointers)/8
000029A4 =00000067                  palid_SLZ3:		equ (ptr_Pal_SLZ3-PalPointers)/8
000029A4 =00000068                  palid_SYZ3:		equ (ptr_Pal_SYZ3-PalPointers)/8
000029A4 =0000006B                  palid_LZWatr3:		equ (ptr_Pal_LZWatr3-PalPointers)/8
000029A4 =0000000F                  palid_LZSonWatr3:	equ (ptr_Pal_LZSonWater-PalPointers)/8
000029A4 =00000015                  palid_Sonic2:		equ (ptr_Pal_Sonic2-PalPointers)/8
000029A4 =00000016                  palid_Sonic3:		equ (ptr_Pal_Sonic3-PalPointers)/8
000029A4 =00000017                  palid_Sonic4:		equ (ptr_Pal_Sonic4-PalPointers)/8
000029A4 =00000018                  palid_Sonic5:		equ (ptr_Pal_Sonic5-PalPointers)/8
000029A4 =00000019                  palid_Sonic6:		equ (ptr_Pal_Sonic6-PalPointers)/8
000029A4 =0000001A                  palid_Sonic7:		equ (ptr_Pal_Sonic7-PalPointers)/8
000029A4 =0000001B                  palid_Sonic8:		equ (ptr_Pal_Sonic8-PalPointers)/8
000029A4 =0000001C                  palid_Sonic9:		equ (ptr_Pal_Sonic9-PalPointers)/8
000029A4 =0000001D                  palid_Sonic10:		equ (ptr_Pal_Sonic10-PalPointers)/8
000029A4 =0000001E                  palid_SonWater2:		equ (ptr_Pal_SonWater2-PalPointers)/8
000029A4 =0000001F                  palid_SonWater3:		equ (ptr_Pal_SonWater3-PalPointers)/8
000029A4 =00000020                  palid_SonWater4:		equ (ptr_Pal_SonWater4-PalPointers)/8
000029A4 =00000021                  palid_SonWater5:		equ (ptr_Pal_SonWater5-PalPointers)/8
000029A4 =00000022                  palid_SonWater6:		equ (ptr_Pal_SonWater6-PalPointers)/8
000029A4 =00000023                  palid_SonWater7:		equ (ptr_Pal_SonWater7-PalPointers)/8
000029A4 =00000024                  palid_SonWater8:		equ (ptr_Pal_SonWater8-PalPointers)/8
000029A4 =00000025                  palid_SonWater9:		equ (ptr_Pal_SonWater9-PalPointers)/8
000029A4 =00000026                  palid_SonWater10:		equ (ptr_Pal_SonWater10-PalPointers)/8
000029A4 =00000027                  palid_SBZ3SonWat2:		equ (ptr_Pal_SBZ3SonWat2-PalPointers)/8
000029A4 =00000028                  palid_SBZ3SonWat3:		equ (ptr_Pal_SBZ3SonWat3-PalPointers)/8
000029A4 =00000029                  palid_SBZ3SonWat4:		equ (ptr_Pal_SBZ3SonWat4-PalPointers)/8
000029A4 =0000002A                  palid_SBZ3SonWat5:		equ (ptr_Pal_SBZ3SonWat5-PalPointers)/8
000029A4 =0000002B                  palid_SBZ3SonWat6:		equ (ptr_Pal_SBZ3SonWat6-PalPointers)/8
000029A4 =0000002C                  palid_SBZ3SonWat7:		equ (ptr_Pal_SBZ3SonWat7-PalPointers)/8
000029A4 =0000002D                  palid_SBZ3SonWat8:		equ (ptr_Pal_SBZ3SonWat8-PalPointers)/8
000029A4 =0000002E                  palid_SBZ3SonWat9:		equ (ptr_Pal_SBZ3SonWat9-PalPointers)/8
000029A4 =0000002F                  palid_SBZ3SonWat10:		equ (ptr_Pal_SBZ3SonWat10-PalPointers)/8
000029A4 =0000002F                  palid_SBZ3SonWat10:		equ (ptr_Pal_SBZ3SonWat10-PalPointers)/8
000029A4                            		
000029A4                            		;include	"_inc\Palette Pointers2.asm"
000029A4                            		
000029A4                            		;include	"_inc\Palette Pointers3.asm"
000029A4                            		
000029A4                            
000029A4                            ; ---------------------------------------------------------------------------
000029A4                            ; Palette data
000029A4                            ; ---------------------------------------------------------------------------
000029A4                            Pal_SegaBG:	incbin	"palette\Sega Background.bin"
00002A24                            Pal_Title:	incbin	"palette\Title Screen.bin"
00002AA4                            Pal_LevelSel:	incbin	"palette\Level Select.bin"
00002B24                            Pal_Sonic:	incbin	"palette\Sonic Pal\01 Default.bin"
00002B44                            Pal_GHZ:	incbin	"palette\Green Hill Zone.bin"
00002BA4                            Pal_GHZ2:	incbin	"palette\Green Hill Zone2.bin"
00002C04                            Pal_GHZ3:	incbin	"palette\Green Hill Zone3.bin"
00002C64                            Pal_LZ:		incbin	"palette\Labyrinth Zone.bin"
00002CC4                            Pal_LZ2:	incbin	"palette\Labyrinth Zone2.bin"
00002D24                            Pal_LZ3:	incbin	"palette\Labyrinth Zone3.bin"
00002D84                            Pal_LZWater:	incbin	"palette\Labyrinth Zone Underwater.bin"
00002E04                            Pal_LZWatr2:	incbin	"palette\Labyrinth Zone Underwater2.bin"
00002E84                            Pal_LZWatr3:	incbin	"palette\Labyrinth Zone Underwater3.bin"
00002F04                            Pal_MZ:		incbin	"palette\Marble Zone.bin"
00002F64                            Pal_MZ2:	incbin	"palette\Marble Zone2.bin"
00002FC4                            Pal_MZ3:	incbin	"palette\Marble Zone3.bin"
00003024                            Pal_SLZ:	incbin	"palette\Star Light Zone.bin"
00003084                            Pal_SLZ2:	incbin	"palette\Star Light Zone2.bin"
000030E4                            Pal_SLZ3:	incbin	"palette\Star Light Zone3.bin"
00003144                            Pal_SYZ:	incbin	"palette\Spring Yard Zone.bin"
000031A4                            Pal_SYZ2:	incbin	"palette\Spring Yard Zone2.bin"
00003204                            Pal_SYZ3:	incbin	"palette\Spring Yard Zone3.bin"
00003264                            Pal_SBZ1:	incbin	"palette\SBZ Act 1.bin"
000032C4                            Pal_SBZ2:	incbin	"palette\SBZ Act 2.bin"
00003324                            Pal_Special:	incbin	"palette\Special Stage.bin"
000033A4                            Pal_SBZ3:	incbin	"palette\SBZ Act 3.bin"
00003404                            Pal_SBZ3Water:	incbin	"palette\SBZ Act 3 Underwater.bin"
00003484                            Pal_LZSonWater:	incbin	"palette\Sonic - LZ Underwater.bin"
000034A4                            Pal_LZSonWatr2:	incbin	"palette\Sonic - LZ2 Underwater.bin"
000034C4                            Pal_SBZ3SonWat:	incbin	"palette\Sonic - SBZ3 Underwater.bin"
000034E4                            Pal_SSResult:	incbin	"palette\Special Stage Results.bin"
00003564                            Pal_Continue:	incbin	"palette\Special Stage Continue Bonus.bin"
000035A4                            Pal_Ending:	incbin	"palette\Ending.bin"
00003624                            Pal_Options:	incbin	"palette\Options.bin"
000036A4                            Pal_Sonic2:	incbin	"palette\Sonic Pal\02 Sonic 1.bin"
000036C4                            Pal_Sonic3:	incbin	"palette\Sonic Pal\03 Beta.bin"
000036E4                            Pal_Sonic4:	incbin	"palette\Sonic Pal\04 Midnight.bin"
00003704                            Pal_Sonic5:	incbin	"palette\Sonic Pal\05 C2.bin"
00003724                            Pal_Sonic6:	incbin	"palette\Sonic Pal\06 Clacker.bin"
00003744                            Pal_Sonic7:	incbin	"palette\Sonic Pal\07 Red Hot.bin"
00003764                            Pal_Sonic8:	incbin	"palette\Sonic Pal\08 Socket.bin"
00003784                            Pal_Sonic9:	incbin	"palette\Sonic Pal\09 Cringe.bin"
000037A4                            Pal_Sonic10:	incbin	"palette\Sonic Pal\10 Dark.bin"
000037C4                            Pal_SonWater2:	incbin	"palette\Sonic Pal\02 Sonic 1 Underwater.bin"
000037E4                            Pal_SonWater3:	incbin	"palette\Sonic Pal\03 Beta Underwater.bin"
00003804                            Pal_SonWater4:	incbin	"palette\Sonic Pal\04 Midnight Underwater.bin"
00003824                            Pal_SonWater5:	incbin	"palette\Sonic Pal\05 C2 Underwater.bin"
00003844                            Pal_SonWater6:	incbin	"palette\Sonic Pal\06 Clacker Underwater.bin"
00003864                            Pal_SonWater7:	incbin	"palette\Sonic Pal\07 Red Hot Underwater.bin"
00003884                            Pal_SonWater8:	incbin	"palette\Sonic Pal\08 Socket Underwater.bin"
000038A4                            Pal_SonWater9:	incbin	"palette\Sonic Pal\09 Cringe Underwater.bin"
000038C4                            Pal_SonWater10:	incbin	"palette\Sonic Pal\10 Dark Underwater.bin"
000038E4                            Pal_SBZ3SonWat2:	incbin	"palette\Sonic Pal\02 Sonic 1 SBZ3.bin"
00003904                            Pal_SBZ3SonWat3:	incbin	"palette\Sonic Pal\03 Beta SBZ3.bin"
00003924                            Pal_SBZ3SonWat4:	incbin	"palette\Sonic Pal\04 Midnight SBZ3.bin"
00003944                            Pal_SBZ3SonWat5:	incbin	"palette\Sonic Pal\05 C2 SBZ3.bin"
00003964                            Pal_SBZ3SonWat6:	incbin	"palette\Sonic Pal\06 Clacker SBZ3.bin"
00003984                            Pal_SBZ3SonWat7:	incbin	"palette\Sonic Pal\07 Red Hot SBZ3.bin"
000039A4                            Pal_SBZ3SonWat8:	incbin	"palette\Sonic Pal\08 Socket SBZ3.bin"
000039C4                            Pal_SBZ3SonWat9:	incbin	"palette\Sonic Pal\09 Cringe SBZ3.bin"
000039E4                            Pal_SBZ3SonWat10:	incbin	"palette\Sonic Pal\10 Dark SBZ3.bin"
00003A04                            ; ---------------------------------------------------------------------------
00003A04                            ; Subroutine to	wait for VBlank routines to complete
00003A04                            ; ---------------------------------------------------------------------------
00003A04                            
00003A04                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00003A04                            
00003A04                            
00003A04                            WaitForVBla:
00003A04 46FC 2300                  		enable_ints
00003A08                            
00003A08                            	@wait:
00003A08 4A38 F62A                  		tst.b	(v_vbla_routine).w ; has VBlank routine finished?
00003A0C 66FA                       		bne.s	@wait		; if not, branch
00003A0E 4E75                       		rts	
00003A10                            ; End of function WaitForVBla
00003A10                            
00003A10                            		include	"_incObj\sub RandomNumber.asm"
00003A10                            ; ---------------------------------------------------------------------------
00003A10                            ; Subroutine to	generate a pseudo-random number	in d0
00003A10                            ; ---------------------------------------------------------------------------
00003A10                            
00003A10                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00003A10                            
00003A10                            
00003A10                            RandomNumber:
00003A10 2238 F636                  		move.l	(v_random).w,d1
00003A14 6600                       		bne.s	@scramble	; if d1 is not 0, branch
00003A16 223C 2A6D 365A             		move.l	#$2A6D365A,d1	; if d1 is 0, use seed number
00003A1C                            
00003A1C                            	@scramble:
00003A1C 2001                       		move.l	d1,d0
00003A1E E581                       		asl.l	#2,d1
00003A20 D280                       		add.l	d0,d1
00003A22 E781                       		asl.l	#3,d1
00003A24 D280                       		add.l	d0,d1
00003A26 3001                       		move.w	d1,d0
00003A28 4841                       		swap	d1
00003A2A D041                       		add.w	d1,d0
00003A2C 3200                       		move.w	d0,d1
00003A2E 4841                       		swap	d1
00003A30 21C1 F636                  		move.l	d1,(v_random).w
00003A34 4E75                       		rts	
00003A34 4E75                       		rts	
00003A36                            		include	"_incObj\sub CalcSine.asm"
00003A36                            ; ---------------------------------------------------------------------------
00003A36                            ; Subroutine calculate a sine
00003A36                            
00003A36                            ; input:
00003A36                            ;	d0 = angle
00003A36                            
00003A36                            ; output:
00003A36                            ;	d0 = sine
00003A36                            ;	d1 = cosine
00003A36                            ; ---------------------------------------------------------------------------
00003A36                            
00003A36                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00003A36                            
00003A36                            
00003A36                            CalcSine:
00003A36 0240 00FF                          andi.w  #$FF,d0
00003A3A 5040                               addq.w  #8,d0
00003A3C D040                               add.w   d0,d0
00003A3E 323B 0000                          move.w  Sine_Data+($40*2)-16(pc,d0.w),d1
00003A42 303B 0000                          move.w  Sine_Data-16(pc,d0.w),d0
00003A46 4E75                               rts
00003A48                            ; End of function CalcSine
00003A48                            
00003A48                            ; ===========================================================================
00003A48                            
00003A48                            Sine_Data:	incbin	"misc\sinewave.bin"	; values for a 360° sine wave
00003CC8                            
00003CC8                            ; ===========================================================================
00003CC8                            ; ===========================================================================
00003CC8                            		include	"_incObj\sub CalcAngle.asm"
00003CC8                            ; ---------------------------------------------------------------------------
00003CC8                            ; Subroutine calculate an angle
00003CC8                            
00003CC8                            ; input:
00003CC8                            ;	d1 = x-axis distance
00003CC8                            ;	d2 = y-axis distance
00003CC8                            
00003CC8                            ; output:
00003CC8                            ;	d0 = angle
00003CC8                            ; ---------------------------------------------------------------------------
00003CC8                            
00003CC8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00003CC8                            
00003CC8                            
00003CC8                            CalcAngle:
00003CC8 48E7 1800                  		movem.l	d3-d4,-(sp)
00003CCC 7600                       		moveq	#0,d3
00003CCE 7800                       		moveq	#0,d4
00003CD0 3601                       		move.w	d1,d3
00003CD2 3802                       		move.w	d2,d4
00003CD4 8843                       		or.w	d3,d4
00003CD6 6700                       		beq.s	loc_2D04
00003CD8 3802                       		move.w	d2,d4
00003CDA 4A43                       		tst.w	d3
00003CDC 6A00 0000                  		bpl.w	loc_2CC2
00003CE0 4443                       		neg.w	d3
00003CE2                            
00003CE2                            loc_2CC2:
00003CE2 4A44                       		tst.w	d4
00003CE4 6A00 0000                  		bpl.w	loc_2CCA
00003CE8 4444                       		neg.w	d4
00003CEA                            
00003CEA                            loc_2CCA:
00003CEA B843                       		cmp.w	d3,d4
00003CEC 6400 0000                  		bcc.w	loc_2CDC
00003CF0 E18C                       		lsl.l	#8,d4
00003CF2 88C3                       		divu.w	d3,d4
00003CF4 7000                       		moveq	#0,d0
00003CF6 103B 4000                  		move.b	Angle_Data(pc,d4.w),d0
00003CFA 6000                       		bra.s	loc_2CE6
00003CFC                            ; ===========================================================================
00003CFC                            
00003CFC                            loc_2CDC:
00003CFC E18B                       		lsl.l	#8,d3
00003CFE 86C4                       		divu.w	d4,d3
00003D00 7040                       		moveq	#$40,d0
00003D02 903B 3000                  		sub.b	Angle_Data(pc,d3.w),d0
00003D06                            
00003D06                            loc_2CE6:
00003D06 4A41                       		tst.w	d1
00003D08 6A00 0000                  		bpl.w	loc_2CF2
00003D0C 4440                       		neg.w	d0
00003D0E 0640 0080                  		addi.w	#$80,d0
00003D12                            
00003D12                            loc_2CF2:
00003D12 4A42                       		tst.w	d2
00003D14 6A00 0000                  		bpl.w	loc_2CFE
00003D18 4440                       		neg.w	d0
00003D1A 0640 0100                  		addi.w	#$100,d0
00003D1E                            
00003D1E                            loc_2CFE:
00003D1E 4CDF 0018                  		movem.l	(sp)+,d3-d4
00003D22 4E75                       		rts	
00003D24                            ; ===========================================================================
00003D24                            
00003D24                            loc_2D04:
00003D24 303C 0040                  		move.w	#$40,d0
00003D28 4CDF 0018                  		movem.l	(sp)+,d3-d4
00003D2C 4E75                       		rts	
00003D2E                            ; End of function CalcAngle
00003D2E                            
00003D2E                            ; ===========================================================================
00003D2E                            
00003D2E                            Angle_Data:	incbin	"misc\angles.bin"
00003E30                            
00003E30                            ; ===========================================================================
00003E30                            ; ===========================================================================
00003E30                            
00003E30                            ; ---------------------------------------------------------------------------
00003E30                            ; Sega screen
00003E30                            ; ---------------------------------------------------------------------------
00003E30                            
00003E30                            GM_Sega:
00003E38 6100 D912                  		bsr.w	ClearPLC
00003E3C 6100 E348                  		bsr.w	PaletteFadeOut
00003E40 4DF9 00C0 0004             		lea	(vdp_control_port).l,a6
00003E46 3CBC 8004                  		move.w	#$8004,(a6)	; use 8-colour mode
00003E4A 3CBC 8230                  		move.w	#$8200+(vram_fg>>10),(a6) ; set foreground nametable address
00003E4E 3CBC 8407                  		move.w	#$8400+(vram_bg>>13),(a6) ; set background nametable address
00003E52 3CBC 8700                  		move.w	#$8700,(a6)	; set background colour (palette entry 0)
00003E56 3CBC 8B00                  		move.w	#$8B00,(a6)	; full-screen vertical scrolling
00003E5A 4238 F64E                  		clr.b	(f_wtr_state).w
00003E5E 46FC 2700                  		disable_ints
00003E62 3038 F60C                  		move.w	(v_vdp_buffer1).w,d0
00003E66 0200 00BF                  		andi.b	#$BF,d0
00003E6A 33C0 00C0 0004             		move.w	d0,(vdp_control_port).l
00003E70 6100 D312                  		bsr.w	ClearScreen
00003E7E 41F9 0000 0000             		lea	(Nem_SegaLogo).l,a0 ; load Sega	logo patterns
00003E84 6100 D47C                  		bsr.w	NemDec
00003E88 43F9 00FF 0000             		lea	($FF0000).l,a1
00003E8E 41F9 0000 0000             		lea	(Eni_SegaLogo).l,a0 ; load Sega	logo mappings
00003E94 303C 0000                  		move.w	#0,d0
00003E98 6100 D9F2                  		bsr.w	EniDec
00003E9C                            
00003E9C 43F9 00FF 0000 203C 6510+  		copyTilemap	$FF0000,$E510,$17,7
00003EB0 43F9 00FF 0180 203C 4000+  		copyTilemap	$FF0180,$C000,$27,$1B
00003EC4                            
00003EC4 4A38 FFF8                  			tst.b   (v_megadrive).w	; is console Japanese?
00003EC8 6B00                       			bmi.s   @loadpal
00003ECA 43F9 00FF 0A40 203C 453A+  			copyTilemap	$FF0A40,$C53A,2,1 ; hide "TM" with a white rectangle
00003EDE                            
00003EDE                            	@loadpal:
00003EDE 7000                       		moveq	#palid_SegaBG,d0
00003EE0 6100 E58A                  		bsr.w	PalLoad2	; load Sega logo palette
00003EE4 47F9 FFFF FB80                     lea        ($FFFFFB80).l,a3
00003EEA 7E3F                               moveq    #$3F,d7
00003EEC                             
00003EEC                                .loop:
00003EEC 36FC 0000                          move.w    #cBlack,(a3)+    ; move data to RAM
00003EF0 51CF FFFA                          dbf        d7,.loop
00003EF4 6100 E1EA                          bsr.w     PaletteFadeIn ; added to allow fade in			
00003EF8 31FC FFF6 F632             		move.w	#-$A,(v_pcyc_num).w
00003EFE 31FC 0000 F634             		move.w	#0,(v_pcyc_time).w
00003F04 31FC 0000 F662             		move.w	#0,(v_pal_buffer+$12).w
00003F0A 31FC 0000 F660             		move.w	#0,(v_pal_buffer+$10).w
00003F10 3038 F60C                  		move.w	(v_vdp_buffer1).w,d0
00003F14 0000 0040                  		ori.b	#$40,d0
00003F18 33C0 00C0 0004             		move.w	d0,(vdp_control_port).l
00003F1E                            
00003F1E                            Sega_WaitPal:
00003F1E 11FC 0002 F62A             		move.b	#2,(v_vbla_routine).w
00003F24 6100 FADE                  		bsr.w	WaitForVBla
00003F28 6100 E414                  		bsr.w	PalCycle_Sega
00003F2C 66F0                       		bne.s	Sega_WaitPal
00003F2E                            
00003F36 11FC 0014 F62A             		move.b	#$14,(v_vbla_routine).w
00003F3C 6100 FAC6                  		bsr.w	WaitForVBla
00003F40 31FC 001E F614             		move.w	#$1E,(v_demolength).w
00003F46                            
00003F46                            Sega_WaitEnd:
00003F46 11FC 0002 F62A             		move.b	#2,(v_vbla_routine).w
00003F4C 6100 FAB6                  		bsr.w	WaitForVBla
00003F50 4A78 F614                  		tst.w	(v_demolength).w
00003F54 6700                       		beq.s	Sega_GotoTitle
00003F56 0238 0080 F605             		andi.b	#btnStart,(v_jpadpress1).w ; is Start button pressed?
00003F5C 67E8                       		beq.s	Sega_WaitEnd	; if not, branch
00003F5E                            
00003F5E                            Sega_GotoTitle:
00003F5E 11FC 0000 F600             		move.b	#id_Title,(v_gamemode).w ; go to title screen
00003F64 4E75                       		rts	
00003F66                            ; ===========================================================================
00003F66                            
00003F66                            ; ---------------------------------------------------------------------------
00003F66                            ; Title	screen
00003F66                            ; ---------------------------------------------------------------------------
00003F66                            
00003F66                            GM_Title:
00003F6E 6100 D7DC                  		bsr.w	ClearPLC
00003F72 6100 E212                  		bsr.w	PaletteFadeOut
00003F76 46FC 2700                  		disable_ints
00003F7A 6100 D28E                  		bsr.w	SoundDriverLoad
00003F7E 4DF9 00C0 0004             		lea	(vdp_control_port).l,a6
00003F84 3CBC 8004                  		move.w	#$8004,(a6)	; 8-colour mode
00003F88 3CBC 8230                  		move.w	#$8200+(vram_fg>>10),(a6) ; set foreground nametable address
00003F8C 3CBC 8407                  		move.w	#$8400+(vram_bg>>13),(a6) ; set background nametable address
00003F90 3CBC 9001                  		move.w	#$9001,(a6)	; 64-cell hscroll size
00003F94 3CBC 9200                  		move.w	#$9200,(a6)	; window vertical position
00003F98 3CBC 8B03                  		move.w	#$8B03,(a6)
00003F9C 3CBC 8720                  		move.w	#$8720,(a6)	; set background colour (palette line 2, entry 0)
00003FA0 4238 F64E                  		clr.b	(f_wtr_state).w
00003FA4 6100 D1DE                  		bsr.w	ClearScreen
00003FA8 4EB9 0000 0000             		jsr		SHC2022 
00003FAE                            
00003FAE 43F8 D000                  		lea	(v_objspace).w,a1
00003FB2 7000                       		moveq	#0,d0
00003FB4 323C 07FF                  		move.w	#$7FF,d1
00003FB8                            
00003FB8                            	Tit_ClrObj1:
00003FB8 22C0                       		move.l	d0,(a1)+
00003FBA 51C9 FFFC                  		dbf	d1,Tit_ClrObj1	; fill object space ($D000-$EFFF) with 0
00003FBE                            
00003FC8 41F9 0000 0000             		lea	(Nem_JapNames).l,a0 ; load Japanese credits
00003FCE 6100 D332                  		bsr.w	NemDec
00003FDC 41F9 0000 0000             		lea	(Nem_CreditText).l,a0 ;	load alphabet
00003FE2 6100 D31E                  		bsr.w	NemDec
00003FE6 43F9 00FF 0000             		lea	($FF0000).l,a1
00003FEC 41F9 0000 0000             		lea	(Eni_JapNames).l,a0 ; load mappings for	Japanese credits
00003FF2 303C 0000                  		move.w	#0,d0
00003FF6 6100 D894                  		bsr.w	EniDec
00003FFA                            
00003FFA 43F9 00FF 0000 203C 4000+  		copyTilemap	$FF0000,$C000,$27,$1B
0000400E                            
0000400E 43F8 FB80                  		lea	(v_pal_dry_dup).w,a1
00004012 7000                       		moveq	#cBlack,d0
00004014 323C 001F                  		move.w	#$1F,d1
00004018                            
00004018                            	Tit_ClrPal:
00004018 22C0                       		move.l	d0,(a1)+
0000401A 51C9 FFFC                  		dbf	d1,Tit_ClrPal	; fill palette with 0 (black)
0000401E                            
0000401E 4EB9 0000 0000             		jsr		LoadPlayerPal
00004024 6100 E40A                  		bsr.w	PalLoad1
00004028 11FC 0000 D080             		move.b	#id_CreditsText,(v_objspace+$80).w ; load "SONIC TEAM PRESENTS" object
0000402E 4EB9 0000 0000             		jsr	(ExecuteObjects).l
00004034 4EB9 0000 0000             		jsr	(BuildSprites).l
0000403A 6100 E0A4                  		bsr.w	PaletteFadeIn
0000403E 46FC 2700                  		disable_ints
0000404C 41F9 0000 0000             		lea	(Nem_TitleFg).l,a0 ; load title	screen patterns
00004052 6100 D2AE                  		bsr.w	NemDec
00004060 41F9 0000 0000             		lea	(Nem_TitleSonic).l,a0 ;	load Sonic title screen	patterns
00004066 6100 D29A                  		bsr.w	NemDec
00004074 41F9 0000 0000             		lea (Nem_TitleMenu).l,a0 ; Load Menu Text/Characters pattern
0000407A 6100 D286                  		bsr.w 	NemDec
0000407E 4DF9 00C0 0000             		lea	(vdp_data_port).l,a6
0000408C 4BF9 0000 0592             		lea	(Art_Text).l,a5	; load level select font
00004092 323C 028F                  		move.w	#$28F,d1
00004096                            
00004096                            	Tit_LoadText:
00004096 3C9D                       		move.w	(a5)+,(a6)
00004098 51C9 FFFC                  		dbf	d1,Tit_LoadText	; load level select font
0000409C                            
0000409C 11FC 0000 FE30             		move.b	#0,(v_lastlamp).w ; clear lamppost counter
000040A2 31FC 0000 FE08             		move.w	#0,(v_debuguse).w ; disable debug item placement mode
000040A8 31FC 0000 FFF0             		move.w	#0,(f_demo).w	; disable debug mode
000040AE 31FC 0000 FFEA             		move.w	#0,($FFFFFFEA).w ; unused variable
000040B4 31FC 0000 FE10             		move.w	#(id_GHZ<<8),(v_zone).w	; set level to GHZ (00)
000040BA 31FC 0000 F634             		move.w	#0,(v_pcyc_time).w ; disable palette cycling
000040C0 6100 0000                  		bsr.w	LevelSizeLoad
000040C4 6100 0000                  		bsr.w	DeformLayers
000040C8 43F8 B000                  		lea	(v_16x16).w,a1
000040CC 41F9 0000 0000             		lea	(Blk16_TS).l,a0 ; load	GHZ 16x16 mappings
000040D2 303C 0000                  		move.w	#0,d0
000040D6 6100 D7B4                  		bsr.w	EniDec
000040DA 41F9 0000 0000             		lea	(Blk256_TS).l,a0 ; load GHZ 256x256 mappings
000040E0 43F9 00FF 0000             		lea	(v_256x256).l,a1
000040E6 6100 D922                  		bsr.w	KosDec
000040EA 6100 0000                  		bsr.w	LevelLayoutLoad
000040EE 6100 E096                  		bsr.w	PaletteFadeOut
000040F2 46FC 2700                  		disable_ints
000040F6 6100 D08C                  		bsr.w	ClearScreen
000040FA 4BF9 00C0 0004             		lea	(vdp_control_port).l,a5
00004100 4DF9 00C0 0000             		lea	(vdp_data_port).l,a6
00004106 47F8 F708                  		lea	(v_bgscreenposx).w,a3
0000410A 49F8 A440                  		lea	(v_lvllayout+$40).w,a4
0000410E 343C 6000                  		move.w	#$6000,d2
00004112 6100 0000                  		bsr.w	DrawChunks
00004116 43F9 00FF 0000             		lea	($FF0000).l,a1
0000411C 41F9 0000 0000             		lea	(Eni_Title).l,a0 ; load	title screen mappings
00004122 303C 0000                  		move.w	#0,d0
00004126 6100 D764                  		bsr.w	EniDec
0000412A                            
0000412A 43F9 00FF 0000 203C 4206+  		copyTilemap	$FF0000,$C206,$21,$15
0000413E                            
00004148 41F9 0000 0000             		lea	(Nem_TS_1st).l,a0 ; load title screen patterns
0000414E 6100 D1B2                  		bsr.w	NemDec
00004152 7001                       		moveq	#palid_Title,d0	; load title screen palette
00004154 6100 E2DA                  		bsr.w	PalLoad1
00004160 11FC 0000 FFFA             		move.b	#0,(f_debugmode).w ; disable debug mode
00004166 31FC 0900 F614             		move.w	#$900,(v_demolength).w ; run title screen for $178 frames
0000416C 43F8 D080                  		lea	(v_objspace+$80).w,a1
00004170 7000                       		moveq	#0,d0
00004172 323C 0007                  		move.w	#7,d1
00004176                            
00004176                            	Tit_ClrObj2:
00004176 22C0                       		move.l	d0,(a1)+
00004178 51C9 FFFC                  		dbf	d1,Tit_ClrObj2
0000417C                            
0000417C 11FC 0000 D040             		move.b	#id_TitleSonic,(v_objspace+$40).w ; load big Sonic object
00004182 11FC 0000 D080             		move.b	#id_PSBTM,(v_objspace+$80).w ; load "PRESS START BUTTON" object
00004188 4238 D0A4                  		clr.b	(v_objspace+$80+obRoutine).w ; The 'Mega Games 10' version of Sonic 1 added this line, to fix the 'PRESS START BUTTON' object not appearing
0000418C                            
0000418C 4A38 FFF8                  			tst.b   (v_megadrive).w	; is console Japanese?
00004190 6A00                       			bpl.s   @isjap		; if yes, branch
00004192                            
00004192 11FC 0000 D0C0             		move.b	#id_PSBTM,(v_objspace+$C0).w ; load "TM" object
00004198 11FC 0003 D0DA             		move.b	#3,(v_objspace+$C0+obFrame).w
0000419E                            	@isjap:
0000419E 11FC 0000 D100             		move.b	#id_PSBTM,(v_objspace+$100).w ; load object which hides part of Sonic
000041A4 11FC 0002 D11A             		move.b	#2,(v_objspace+$100+obFrame).w
000041AA 4EB9 0000 0000             		jsr	(ExecuteObjects).l
000041B0 6100 0000                  		bsr.w	DeformLayers
000041B4 4EB9 0000 0000             		jsr	(BuildSprites).l
000041BA 7000                       		moveq	#plcid_Main,d0
000041BC 6100 D562                  		bsr.w	NewPLC
000041C0 31FC 0000 FFE4             		move.w	#0,(v_title_dcount).w
000041C6 31FC 0000 FFE6             		move.w	#0,(v_title_ccount).w
000041CC 3038 F60C                  		move.w	(v_vdp_buffer1).w,d0
000041D0 0000 0040                  		ori.b	#$40,d0
000041D4 33C0 00C0 0004             		move.w	d0,(vdp_control_port).l
000041DA 6100 DF04                  		bsr.w	PaletteFadeIn
000041DE                            
000041DE                            Tit_MainLoop:
000041DE 11FC 0004 F62A             		move.b	#4,(v_vbla_routine).w
000041E4 6100 F81E                  		bsr.w	WaitForVBla
000041E8 4EB9 0000 0000             		jsr	(ExecuteObjects).l
000041EE 6100 0000                  		bsr.w	DeformLayers
000041F2 4EB9 0000 0000             		jsr	(BuildSprites).l
000041F8 6100 DAF8                  		bsr.w	PCycle_Title
000041FC 6100 D55C                  		bsr.w	RunPLC
00004200 3038 D008                  		move.w	(v_objspace+obX).w,d0
00004204 5440                       		addq.w	#2,d0
00004206 31C0 D008                  		move.w	d0,(v_objspace+obX).w ; move Sonic to the right
0000420A 0C40 1C00                  		cmpi.w	#$1C00,d0	; has Sonic object passed $1C00 on x-axis?
0000420E 6500                       		blo.s	Tit_ChkRegion	; if not, branch
00004210                            
00004210 11FC 0000 F600             		move.b	#id_Sega,(v_gamemode).w ; go to Sega screen
00004216 4E75                       		rts	
00004218                            ; ===========================================================================
00004218                            
00004218                            Tit_ChkRegion:
00004218 4A38 FFF8                  		tst.b	(v_megadrive).w	; check	if the machine is US or	Japanese
0000421C 6A00                       		bpl.s	Tit_RegionJap	; if Japanese, branch
0000421E                            
0000421E 41F9 0000 0000             		lea	(LevSelCode_US).l,a0 ; load US code
00004224 6000                       		bra.s	Tit_EnterCheat
00004226                            
00004226                            	Tit_RegionJap:
00004226 41F9 0000 0000             		lea	(LevSelCode_J).l,a0 ; load J code
0000422C                            
0000422C                            Tit_EnterCheat:
0000422C 3038 FFE4                  		move.w	(v_title_dcount).w,d0
00004230 D0C0                       		adda.w	d0,a0
00004232 1038 F605                  		move.b	(v_jpadpress1).w,d0 ; get button press
00004236 0200 000F                  		andi.b	#btnDir,d0	; read only UDLR buttons
0000423A B010                       		cmp.b	(a0),d0		; does button press match the cheat code?
0000423C 6600                       		bne.s	Tit_ResetCheat	; if not, branch
0000423E 5278 FFE4                  		addq.w	#1,(v_title_dcount).w ; next button press
00004242 4A00                       		tst.b	d0
00004244 6600                       		bne.s	Tit_CountC
00004246 41F8 FFE0                  		lea	(f_levselcheat).w,a0
0000424A 3238 FFE6                  		move.w	(v_title_ccount).w,d1
0000424E E249                       		lsr.w	#1,d1
00004250 0241 0003                  		andi.w	#3,d1
00004254 6700                       		beq.s	Tit_PlayRing
00004256 4A38 FFF8                  		tst.b	(v_megadrive).w
0000425A 6A00                       		bpl.s	Tit_PlayRing
0000425C 7201                       		moveq	#1,d1
0000425E 1181 1001                  		move.b	d1,1(a0,d1.w)	; cheat depends on how many times C is pressed
00004262                            
00004262                            	Tit_PlayRing:
00004262 11BC 0001 1000             		move.b	#1,(a0,d1.w)	; activate cheat
00004270 6000                       		bra.s	Tit_CountC
00004272                            ; ===========================================================================
00004272                            
00004272                            Tit_ResetCheat:
00004272 4A00                       		tst.b	d0
00004274 6700                       		beq.s	Tit_CountC
00004276 0C78 0009 FFE4             		cmpi.w	#9,(v_title_dcount).w
0000427C 6700                       		beq.s	Tit_CountC
0000427E 31FC 0000 FFE4             		move.w	#0,(v_title_dcount).w ; reset UDLR counter
00004284                            
00004284                            Tit_CountC:
00004284 1038 F605                  		move.b	(v_jpadpress1).w,d0
00004288 0200 0020                  		andi.b	#btnC,d0	; is C button pressed?
0000428C                            
0000428C                            loc_3230:
0000428C 4A78 F614                  		tst.w	(v_demolength).w
00004290 6700 0000                  		beq.w	GotoDemo
00004294 0238 0080 F605             		andi.b	#btnStart,(v_jpadpress1).w ; check if Start is pressed
0000429A 6700 FF42                  		beq.w	Tit_MainLoop	; if not, branch
0000429E                            
0000429E                            Tit_ChkLevSel:
0000429E 4A38 FFE0                  		tst.b	(f_levselcheat).w ; check if level select code is on
000042A2 6700 0000                  		beq.w	@cont	; if not, play level
000042A6 0838 0006 F604             		btst	#bitA,(v_jpadhold1).w ; check if A is pressed
000042AC 6700 0000                  		beq.w	@cont	; if not, play level
000042B0 6000 0000                  		bra.w	Tit_LevelSelect
000042B4                            
000042B4                            	@cont:		
000042B4 7400                       		moveq   #0,d2
000042B6 1438 FFB0                  		move.b   (Title_screen_option).w,d2   ; load the choice
000042BA D442                       		add.w   d2,d2            ; multiply by 2
000042BC 343B 2000                  		move.w   Tit_Menu_Choice(pc,d2.w),d2
000042C0 4EFB 2000                  		jmp   Tit_Menu_Choice(pc,d2.w)   ; jump to the choice code
000042C4                            
000042C4                            ; ===========================================================================
000042C4                            Tit_Menu_Choice:
000042C4 0000                       		dc.w PlayLevel-Tit_Menu_Choice   ; 0
000042C6 0000                       		dc.w Menu_Options-Tit_Menu_Choice  ; 2
000042C8                            ; ===========================================================================
000042C8                            
000042C8                            Menu_Options:
000042C8 4EF9 0000 0000             	jmp	MenuScreen ; => OptionsMenu
000042CE 4E75                       	rts
000042D0                            
000042D0                            Tit_LevelSelect:	
000042D0 7002                       		moveq	#palid_LevelSel,d0
000042D2 6100 E198                  		bsr.w	PalLoad2	; load level select palette
000042D6 43F8 CC00                  		lea	(v_hscrolltablebuffer).w,a1
000042DA 7000                       		moveq	#0,d0
000042DC 323C 00DF                  		move.w	#$DF,d1
000042E0                            
000042E0                            	Tit_ClrScroll1:
000042E0 22C0                       		move.l	d0,(a1)+
000042E2 51C9 FFFC                  		dbf	d1,Tit_ClrScroll1 ; clear scroll data (in RAM)
000042E6                            
000042E6 21C0 F616                  		move.l	d0,(v_scrposy_dup).w
000042EA 46FC 2700                  		disable_ints
000042EE 4DF9 00C0 0000             		lea	(vdp_data_port).l,a6
000042FE 323C 03FF                  		move.w	#$3FF,d1
00004302                            
00004302                            	Tit_ClrScroll2:
00004302 2C80                       		move.l	d0,(a6)
00004304 51C9 FFFC                  		dbf	d1,Tit_ClrScroll2 ; clear scroll data (in VRAM)
00004308                            
00004308 6100 0000                  		bsr.w	LevSelTextLoad
0000430C                            
0000430C                            ; ---------------------------------------------------------------------------
0000430C                            ; Level	Select
0000430C                            ; ---------------------------------------------------------------------------
0000430C                            
0000430C                            LevelSelect:
0000430C 11FC 0004 F62A             		move.b	#4,(v_vbla_routine).w
00004312 6100 F6F0                  		bsr.w	WaitForVBla
00004316 6100 0000                  		bsr.w	LevSelControls
0000431A 6100 D43E                  		bsr.w	RunPLC
0000431E 4AB8 F680                  		tst.l	(v_plc_buffer).w
00004322 66E8                       		bne.s	LevelSelect
00004324 0238 00F0 F605             		andi.b	#btnABC+btnStart,(v_jpadpress1).w ; is A, B, C, or Start pressed?
0000432A 67E0                       		beq.s	LevelSelect	; if not, branch
0000432C 3038 FF82                  		move.w	(v_levselitem).w,d0
00004330 0C40 0014                  		cmpi.w	#$14,d0		; have you selected item $14 (sound test)?
00004334 6600                       		bne.s	LevSel_Level_SS	; if not, go to	Level/SS subroutine
00004336 3038 FF84                  		move.w	(v_levselsound).w,d0
0000433A 0640 0080                  		addi.w	#$80,d0
0000433E 0C40 009F                  		cmpi.w	#$9F,d0		; is sound $9F being played?
00004342 6700                       		beq.s	LevSel_Ending	; if yes, branch
00004344 0C40 009E                  		cmpi.w	#$9E,d0		; is sound $9E being played?
00004348 6700                       		beq.s	LevSel_Credits	; if yes, branch
0000434A                            
0000434A                            LevSel_PlaySnd:
0000434A 6100 CF08                  		bsr.w	PlaySound_Special
0000434E 60BC                       		bra.s	LevelSelect
00004350                            ; ===========================================================================
00004350                            
00004350                            LevSel_Ending:
00004350 11FC 0000 F600             		move.b	#id_Ending,(v_gamemode).w ; set screen mode to $18 (Ending)
00004356 31FC 0600 FE10             		move.w	#(id_EndZ<<8),(v_zone).w ; set level to 0600 (Ending)
0000435C 4E75                       		rts	
0000435E                            ; ===========================================================================
0000435E                            
0000435E                            LevSel_Credits:
0000435E 11FC 0000 F600             		move.b	#id_Credits,(v_gamemode).w ; set screen mode to $1C (Credits)
0000436C 31FC 0000 FFF4             		move.w	#0,(v_creditsnum).w
00004372 4E75                       		rts	
00004374                            ; ===========================================================================
00004374                            
00004374                            LevSel_Level_SS:
00004374 D040                       		add.w	d0,d0
00004376 303B 0000                  		move.w	LevSel_Ptrs(pc,d0.w),d0 ; load level number
0000437A 6B00 FF90                  		bmi.w	LevelSelect
0000437E 0C40 0700                  		cmpi.w	#id_SS*$100,d0	; check	if level is 0700 (Special Stage)
00004382 6600                       		bne.s	LevSel_Level	; if not, branch
00004384 11FC 0000 F600             		move.b	#id_Special,(v_gamemode).w ; set screen mode to $10 (Special Stage)
0000438A 4278 FE10                  		clr.w	(v_zone).w	; clear	level
0000438E 11FC 0003 FE12             		move.b	#3,(v_lives).w	; set lives to 3
00004394 7000                       		moveq	#0,d0
00004396 31C0 FE20                  		move.w	d0,(v_rings).w	; clear rings
0000439A 21C0 FE22                  		move.l	d0,(v_time).w	; clear time
0000439E 21C0 FE26                  		move.l	d0,(v_score).w	; clear score
000043A2 21FC 0000 1388 FFC0        			move.l	#5000,(v_scorelife).w ; extra life is awarded at 50000 points
000043AA 4E75                       		rts	
000043AC                            ; ===========================================================================
000043AC                            
000043AC                            LevSel_Level:
000043AC 0240 3FFF                  		andi.w	#$3FFF,d0
000043B0 31C0 FE10                  		move.w	d0,(v_zone).w	; set level number
000043B4                            
000043B4                            PlayLevel:
000043B4 11FC 0000 F600             		move.b	#id_Level,(v_gamemode).w ; set screen mode to $0C (level)
000043BA 11FC 0003 FE12             		move.b	#3,(v_lives).w	; set lives to 3
000043C0 7000                       		moveq	#0,d0
000043C2 31C0 FE20                  		move.w	d0,(v_rings).w	; clear rings
000043C6 21C0 FE22                  		move.l	d0,(v_time).w	; clear time
000043CA 21C0 FE26                  		move.l	d0,(v_score).w	; clear score
000043CE 11C0 FE16                  		move.b	d0,(v_lastspecial).w ; clear special stage number
000043D2 11C0 FE57                  		move.b	d0,(v_emeralds).w ; clear emeralds
000043D6 21C0 FE58                  		move.l	d0,(v_emldlist).w ; clear emeralds
000043DA 21C0 FE5C                  		move.l	d0,(v_emldlist+4).w ; clear emeralds
000043DE 11FC 0001 FE18             		move.b	#1,(v_continues).w ; set continues to 1
000043E4 21FC 0000 1388 FFC0        			move.l	#5000,(v_scorelife).w ; extra life is awarded at 50000 points
000043F4 4E75                       		rts	
000043F6                            ; ===========================================================================
000043F6                            ; ---------------------------------------------------------------------------
000043F6                            ; Level	select - level pointers
000043F6                            ; ---------------------------------------------------------------------------
000043F6                            		; correct level order
000043F6 0000                       		dc.b id_GHZ, 0
000043F8 0001                       		dc.b id_GHZ, 1
000043FA 0002                       		dc.b id_GHZ, 2
000043FC 0200                       		dc.b id_MZ, 0
000043FE 0201                       		dc.b id_MZ, 1
00004400 0202                       		dc.b id_MZ, 2
00004402 0400                       		dc.b id_SYZ, 0
00004404 0401                       		dc.b id_SYZ, 1
00004406 0402                       		dc.b id_SYZ, 2
00004408 0100                       		dc.b id_LZ, 0
0000440A 0101                       		dc.b id_LZ, 1
0000440C 0102                       		dc.b id_LZ, 2
0000440E 0300                       		dc.b id_SLZ, 0
00004410 0301                       		dc.b id_SLZ, 1
00004412 0302                       		dc.b id_SLZ, 2
00004414 0500                       		dc.b id_SBZ, 0
00004416 0501                       		dc.b id_SBZ, 1
00004418 0103                       		dc.b id_LZ, 3
0000441A 0502                       		dc.b id_SBZ, 2
0000441C 0700                       		dc.b id_SS, 0		; Special Stage
0000441E 8000                       		dc.w $8000		; Sound Test
00004420                            		even
00004420                            ; ---------------------------------------------------------------------------
00004420                            ; Level	select codes
00004420                            ; ---------------------------------------------------------------------------
00004420 0102 0202 0408 00FF        		dc.b btnUp,btnDn,btnDn,btnDn,btnL,btnR,0,$FF
00004428                            		even
00004428                            
00004428 0102 0408 00FF             LevSelCode_US:	dc.b btnUp,btnDn,btnL,btnR,0,$FF
0000442E                            		even
0000442E                            ; ===========================================================================
0000442E                            
0000442E                            ; ---------------------------------------------------------------------------
0000442E                            ; Demo mode
0000442E                            ; ---------------------------------------------------------------------------
0000442E                            
0000442E                            GotoDemo:
0000442E 31FC 001E F614             		move.w	#$1E,(v_demolength).w
00004434                            
00004434                            loc_33B6:
00004434 11FC 0004 F62A             		move.b	#4,(v_vbla_routine).w
0000443A 6100 F5C8                  		bsr.w	WaitForVBla
0000443E 6100 0000                  		bsr.w	DeformLayers
00004442 6100 D88E                  		bsr.w	PaletteCycle
00004446 6100 D312                  		bsr.w	RunPLC
0000444A 3038 D008                  		move.w	(v_objspace+obX).w,d0
0000444E 5440                       		addq.w	#2,d0
00004450 31C0 D008                  		move.w	d0,(v_objspace+obX).w
00004454 0C40 1C00                  		cmpi.w	#$1C00,d0
00004458 6500                       		blo.s	loc_33E4
0000445A 11FC 0000 F600             		move.b	#id_Sega,(v_gamemode).w
00004460 4E75                       		rts	
00004462                            ; ===========================================================================
00004462                            
00004462                            loc_33E4:
00004462 0238 0080 F605             		andi.b	#btnStart,(v_jpadpress1).w ; is Start button pressed?
00004468 6600 FE34                  		bne.w	Tit_ChkLevSel	; if yes, branch
0000446C 4A78 F614                  		tst.w	(v_demolength).w
00004470 6600 FFC2                  		bne.w	loc_33B6
0000447C 3038 FFF2                  		move.w	(v_demonum).w,d0 ; load	demo number
00004480 0240 0007                  		andi.w	#7,d0
00004484 D040                       		add.w	d0,d0
00004486 303B 0000                  		move.w	Demo_Levels(pc,d0.w),d0	; load level number for	demo
0000448A 31C0 FE10                  		move.w	d0,(v_zone).w
0000448E 5278 FFF2                  		addq.w	#1,(v_demonum).w ; add 1 to demo number
00004492 0C78 0004 FFF2             		cmpi.w	#4,(v_demonum).w ; is demo number less than 4?
00004498 6500                       		blo.s	loc_3422	; if yes, branch
0000449A 31FC 0000 FFF2             		move.w	#0,(v_demonum).w ; reset demo number to	0
000044A0                            
000044A0                            loc_3422:
000044A0 31FC 0001 FFF0             		move.w	#1,(f_demo).w	; turn demo mode on
000044A6 11FC 0000 F600             		move.b	#id_Demo,(v_gamemode).w ; set screen mode to 08 (demo)
000044AC 0C40 0600                  		cmpi.w	#$600,d0	; is level number 0600 (special	stage)?
000044B0 6600                       		bne.s	Demo_Level	; if not, branch
000044B2 11FC 0000 F600             		move.b	#id_Special,(v_gamemode).w ; set screen mode to $10 (Special Stage)
000044B8 4278 FE10                  		clr.w	(v_zone).w	; clear	level number
000044BC 4238 FE16                  		clr.b	(v_lastspecial).w ; clear special stage number
000044C0                            
000044C0                            Demo_Level:
000044C0 11FC 0003 FE12             		move.b	#3,(v_lives).w	; set lives to 3
000044C6 7000                       		moveq	#0,d0
000044C8 31C0 FE20                  		move.w	d0,(v_rings).w	; clear rings
000044CC 21C0 FE22                  		move.l	d0,(v_time).w	; clear time
000044D0 21C0 FE26                  		move.l	d0,(v_score).w	; clear score
000044D4 21FC 0000 1388 FFC0        			move.l	#5000,(v_scorelife).w ; extra life is awarded at 50000 points
000044DC 4E75                       		rts	
000044DE                            ; ===========================================================================
000044DE                            ; ---------------------------------------------------------------------------
000044DE                            ; Levels used in demos
000044DE                            ; ---------------------------------------------------------------------------
000044DE                            Demo_Levels:	incbin	"misc\Demo Level Order - Intro.bin"
000044E6                            		even
000044E6                            
000044E6                            ; ---------------------------------------------------------------------------
000044E6                            ; Subroutine to	change what you're selecting in the level select
000044E6                            ; ---------------------------------------------------------------------------
000044E6                            
000044E6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000044E6                            
000044E6                            
000044E6                            LevSelControls:
000044E6 1238 F605                  		move.b	(v_jpadpress1).w,d1
000044EA 0201 0003                  		andi.b	#btnUp+btnDn,d1	; is up/down pressed and held?
000044EE 6600                       		bne.s	LevSel_UpDown	; if yes, branch
000044F0 5378 FF80                  		subq.w	#1,(v_levseldelay).w ; subtract 1 from time to next move
000044F4 6A00                       		bpl.s	LevSel_SndTest	; if time remains, branch
000044F6                            
000044F6                            LevSel_UpDown:
000044F6 31FC 000B FF80             		move.w	#$B,(v_levseldelay).w ; reset time delay
000044FC 1238 F604                  		move.b	(v_jpadhold1).w,d1
00004500 0201 0003                  		andi.b	#btnUp+btnDn,d1	; is up/down pressed?
00004504 6700                       		beq.s	LevSel_SndTest	; if not, branch
00004506 3038 FF82                  		move.w	(v_levselitem).w,d0
0000450A 0801 0000                  		btst	#bitUp,d1	; is up	pressed?
0000450E 6700                       		beq.s	LevSel_Down	; if not, branch
00004510 5340                       		subq.w	#1,d0		; move up 1 selection
00004512 6400                       		bhs.s	LevSel_Down
00004514 7014                       		moveq	#$14,d0		; if selection moves below 0, jump to selection	$14
00004516                            
00004516                            LevSel_Down:
00004516 0801 0001                  		btst	#bitDn,d1	; is down pressed?
0000451A 6700                       		beq.s	LevSel_Refresh	; if not, branch
0000451C 5240                       		addq.w	#1,d0		; move down 1 selection
0000451E 0C40 0015                  		cmpi.w	#$15,d0
00004522 6500                       		blo.s	LevSel_Refresh
00004524 7000                       		moveq	#0,d0		; if selection moves above $14,	jump to	selection 0
00004526                            
00004526                            LevSel_Refresh:
00004526 31C0 FF82                  		move.w	d0,(v_levselitem).w ; set new selection
0000452A 6100 0000                  		bsr.w	LevSelTextLoad	; refresh text
0000452E 4E75                       		rts	
00004530                            ; ===========================================================================
00004530                            
00004530                            LevSel_SndTest:
00004530 0C78 0014 FF82             		cmpi.w	#$14,(v_levselitem).w ; is item $14 selected?
00004536 6600                       		bne.s	LevSel_NoMove	; if not, branch
00004538 1238 F605                  		move.b	(v_jpadpress1).w,d1
0000453C 0201 000C                  		andi.b	#btnR+btnL,d1	; is left/right	pressed?
00004540 6700                       		beq.s	LevSel_NoMove	; if not, branch
00004542 3038 FF84                  		move.w	(v_levselsound).w,d0
00004546 0801 0002                  		btst	#bitL,d1	; is left pressed?
0000454A 6700                       		beq.s	LevSel_Right	; if not, branch
0000454C 5340                       		subq.w	#1,d0		; subtract 1 from sound	test
0000454E 6400                       		bhs.s	LevSel_Right
00004550 705F                       		moveq	#$5F,d0		; if sound test	moves below 0, set to $4F
00004552                            
00004552                            LevSel_Right:
00004552 0801 0003                  		btst	#bitR,d1	; is right pressed?
00004556 6700                       		beq.s	LevSel_Refresh2	; if not, branch
00004558 5240                       		addq.w	#1,d0		; add 1	to sound test
0000455A 0C40 0050                  		cmpi.w	#$50,d0
0000455E 6500                       		blo.s	LevSel_Refresh2
00004560 7000                       		moveq	#0,d0		; if sound test	moves above $4F, set to	0
00004562                            
00004562                            LevSel_Refresh2:
00004562 31C0 FF84                  		move.w	d0,(v_levselsound).w ; set sound test number
00004566 6100 0000                  		bsr.w	LevSelTextLoad	; refresh text
0000456A                            
0000456A                            LevSel_NoMove:
0000456A 4E75                       		rts	
0000456C                            ; End of function LevSelControls
0000456C                            
0000456C                            ; ---------------------------------------------------------------------------
0000456C                            ; Subroutine to load level select text
0000456C                            ; ---------------------------------------------------------------------------
0000456C                            
0000456C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000456C                            
0000456C                            
0000456C                            LevSelTextLoad:
0000456C                            
0000456C =62100003                  	textpos:	= ($40000000+(($E210&$3FFF)<<16)+(($E210&$C000)>>14))
0000456C                            					; $E210 is a VRAM address
0000456C                            
0000456C 43F9 0000 0000             		lea	(LevelMenuText).l,a1
00004572 4DF9 00C0 0000             		lea	(vdp_data_port).l,a6
00004578 283C 6210 0003             		move.l	#textpos,d4	; text position on screen
0000457E 363C E680                  		move.w	#$E680,d3	; VRAM setting (4th palette, $680th tile)
00004582 7214                       		moveq	#$14,d1		; number of lines of text
00004584                            
00004584                            	LevSel_DrawAll:
00004584 2D44 0004                  		move.l	d4,4(a6)
00004588 6100 0000                  		bsr.w	LevSel_ChgLine	; draw line of text
0000458C 0684 0080 0000             		addi.l	#$800000,d4	; jump to next line
00004592 51C9 FFF0                  		dbf	d1,LevSel_DrawAll
00004596                            
00004596 7000                       		moveq	#0,d0
00004598 3038 FF82                  		move.w	(v_levselitem).w,d0
0000459C 3200                       		move.w	d0,d1
0000459E 283C 6210 0003             		move.l	#textpos,d4
000045A4 EF48                       		lsl.w	#7,d0
000045A6 4840                       		swap	d0
000045A8 D880                       		add.l	d0,d4
000045AA 43F9 0000 0000             		lea	(LevelMenuText).l,a1
000045B0 E749                       		lsl.w	#3,d1
000045B2 3001                       		move.w	d1,d0
000045B4 D241                       		add.w	d1,d1
000045B6 D240                       		add.w	d0,d1
000045B8 D2C1                       		adda.w	d1,a1
000045BA 363C C680                  		move.w	#$C680,d3	; VRAM setting (3rd palette, $680th tile)
000045BE 2D44 0004                  		move.l	d4,4(a6)
000045C2 6100 0000                  		bsr.w	LevSel_ChgLine	; recolour selected line
000045C6 363C E680                  		move.w	#$E680,d3
000045CA 0C78 0014 FF82             		cmpi.w	#$14,(v_levselitem).w
000045D0 6600                       		bne.s	LevSel_DrawSnd
000045D2 363C C680                  		move.w	#$C680,d3
000045D6                            
000045D6                            LevSel_DrawSnd:
000045E0 3038 FF84                  		move.w	(v_levselsound).w,d0
000045E4 0640 0080                  		addi.w	#$80,d0
000045E8 1400                       		move.b	d0,d2
000045EA E808                       		lsr.b	#4,d0
000045EC 6100 0000                  		bsr.w	LevSel_ChgSnd	; draw 1st digit
000045F0 1002                       		move.b	d2,d0
000045F2 6100 0000                  		bsr.w	LevSel_ChgSnd	; draw 2nd digit
000045F6 4E75                       		rts	
000045F8                            ; End of function LevSelTextLoad
000045F8                            
000045F8                            
000045F8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000045F8                            
000045F8                            
000045F8                            LevSel_ChgSnd:
000045F8 0240 000F                  		andi.w	#$F,d0
000045FC 0C00 000A                  		cmpi.b	#$A,d0		; is digit $A-$F?
00004600 6500                       		blo.s	LevSel_Numb	; if not, branch
00004602 5E00                       		addi.b	#7,d0		; use alpha characters
00004604                            
00004604                            	LevSel_Numb:
00004604 D043                       		add.w	d3,d0
00004606 3C80                       		move.w	d0,(a6)
00004608 4E75                       		rts	
0000460A                            ; End of function LevSel_ChgSnd
0000460A                            
0000460A                            
0000460A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000460A                            
0000460A                            
0000460A                            LevSel_ChgLine:
0000460A 7417                       		moveq	#$17,d2		; number of characters per line
0000460C                            
0000460C                            	LevSel_LineLoop:
0000460C 7000                       		moveq	#0,d0
0000460E 1019                       		move.b	(a1)+,d0	; get character
00004610 6A00                       		bpl.s	LevSel_CharOk	; branch if valid
00004612 3CBC 0000                  		move.w	#0,(a6)		; use blank character
00004616 51CA FFF4                  		dbf	d2,LevSel_LineLoop
0000461A 4E75                       		rts	
0000461C                            
0000461C                            
0000461C                            	LevSel_CharOk:
0000461C D043                       		add.w	d3,d0		; combine char with VRAM setting
0000461E 3C80                       		move.w	d0,(a6)		; send to VRAM
00004620 51CA FFEA                  		dbf	d2,LevSel_LineLoop
00004624 4E75                       		rts	
00004626                            ; End of function LevSel_ChgLine
00004626                            
00004626                            ; ===========================================================================
00004626                            ; ---------------------------------------------------------------------------
00004626                            ; Level	select menu text
00004626                            ; ---------------------------------------------------------------------------
00004626                            		incbin	"misc\Level Select Text (JP1).bin"
0000481E                            		even
0000481E                            ; ---------------------------------------------------------------------------
0000481E                            ; Music	playlist
0000481E                            ; ---------------------------------------------------------------------------
0000481E                            MusicList:
0000481E 00                         			dc.b bgm_GHZ    ; GHZ1
0000481F 00                                 	dc.b bgm_LZ    ; GHZ2
00004820 00                                 	dc.b bgm_Seaside   ; GHZ3
00004821 00                                 	dc.b bgm_LZ    ; GHZ4
00004822 00                                 	dc.b bgm_Stop    ; LZ1
00004823 00                                 	dc.b bgm_Stop   ; LZ2
00004824 00                                 	dc.b bgm_Stop    ; LZ3
00004825 00                                 	dc.b bgm_SBZ3    ; LZ4
00004826 00                                 	dc.b bgm_MZ    ; MZ1
00004827 00                                 	dc.b bgm_SBZ    ; MZ2
00004828 00                                 	dc.b bgm_MZ    ; MZ3
00004829 00                                 	dc.b bgm_SBZ    ; MZ4
0000482A 00                                 	dc.b bgm_LZ    ; SLZ1
0000482B 00                                 	dc.b bgm_LZ    ; SLZ2
0000482C 00                                 	dc.b bgm_LZ    ; SLZ3
0000482D 00                                 	dc.b bgm_LZ    ; SLZ4
0000482E 00                                 	dc.b bgm_SYZ    ; SYZ1
0000482F 00                                 	dc.b bgm_SLZ    ; SYZ2
00004830 00                                 	dc.b bgm_SLZ    ; SYZ3
00004831 00                                 	dc.b bgm_SLZ    ; SYZ4
00004832 00                                 	dc.b bgm_SBZ    ; SBZ1
00004833 00                                 	dc.b bgm_SBZ    ; SBZ2
00004834 00                                 	dc.b bgm_FZ		; SBZ3
00004835 00                                 	dc.b bgm_SBZ    ; SBZ4
00004836 00                                 	dc.b bgm_GHZ    ; GHZ1
00004837 00                                 	dc.b bgm_GHZ    ; GHZ1
00004838 00                                 	dc.b bgm_GHZ    ; GHZ1
00004839 00                                 	dc.b bgm_GHZ    ; GHZ1
0000483A                                    	even
0000483A                            ; ===========================================================================
0000483A                            
0000483A                            ; ---------------------------------------------------------------------------
0000483A                            ; Level
0000483A                            ; ---------------------------------------------------------------------------
0000483A                            
0000483A                            GM_Level:
0000483A 08F8 0007 F600             		bset	#7,(v_gamemode).w ; add $80 to screen mode (for pre level sequence)
00004840 4A78 FFF0                  		tst.w	(f_demo).w
00004844 6B00                       		bmi.s	Level_NoMusicFade
0000484E                            
0000484E                            	Level_NoMusicFade:
0000484E 6100 CEFC                  		bsr.w	ClearPLC
00004852 6100 D932                  		bsr.w	PaletteFadeOut
00004856 4A78 FFF0                  		tst.w	(f_demo).w	; is an ending sequence demo running?
0000485A 6B00                       		bmi.s	Level_ClrRam	; if yes, branch
0000485C 46FC 2700                  		disable_ints
0000486A 41F9 0000 0000             		lea	(Nem_TitleCard).l,a0 ; load title card patterns
00004870 6100 CA90                  		bsr.w	NemDec
00004874 46FC 2300                  		enable_ints
00004878 7000                       		moveq	#0,d0
0000487A 1038 FE10                  		move.b	(v_zone).w,d0
0000487E E948                       		lsl.w	#4,d0
00004880 45F9 0000 0000             		lea	(LevelHeaders).l,a2
00004886 45F2 0000                  		lea	(a2,d0.w),a2
0000488A 7000                       		moveq	#0,d0
0000488C 1012                       		move.b	(a2),d0
0000488E 6700                       		beq.s	loc_37FC
00004890 6100 CE5C                  		bsr.w	AddPLC		; load level patterns
00004894                            
00004894                            loc_37FC:
00004894 7000                       		moveq	#plcid_Main2,d0
00004896 6100 CE56                  		bsr.w	AddPLC		; load standard	patterns
0000489A                            
0000489A                            Level_ClrRam:
0000489A 43F8 D000                  		lea	(v_objspace).w,a1
0000489E 7000                       		moveq	#0,d0
000048A0 323C 07FF                  		move.w	#$7FF,d1
000048A4                            
000048A4                            	Level_ClrObjRam:
000048A4 22C0                       		move.l	d0,(a1)+
000048A6 51C9 FFFC                  		dbf	d1,Level_ClrObjRam ; clear object RAM
000048AA                            
000048AA 43F8 F628                  		lea	($FFFFF628).w,a1
000048AE 7000                       		moveq	#0,d0
000048B0 323C 0015                  		move.w	#$15,d1
000048B4                            
000048B4                            	Level_ClrVars1:
000048B4 22C0                       		move.l	d0,(a1)+
000048B6 51C9 FFFC                  		dbf	d1,Level_ClrVars1 ; clear misc variables
000048BA                            
000048BA 43F8 F700                  		lea	(v_screenposx).w,a1
000048BE 7000                       		moveq	#0,d0
000048C0 323C 003F                  		move.w	#$3F,d1
000048C4                            
000048C4                            	Level_ClrVars2:
000048C4 22C0                       		move.l	d0,(a1)+
000048C6 51C9 FFFC                  		dbf	d1,Level_ClrVars2 ; clear misc variables
000048CA                            
000048CA 43F8 FE60                  		lea	(v_oscillate+2).w,a1
000048CE 7000                       		moveq	#0,d0
000048D0 323C 0047                  		move.w	#$47,d1
000048D4                            
000048D4                            	Level_ClrVars3:
000048D4 22C0                       		move.l	d0,(a1)+
000048D6 51C9 FFFC                  		dbf	d1,Level_ClrVars3 ; clear object variables
000048DA                            
000048DA 46FC 2700                  		disable_ints
000048DE 6100 C8A4                  		bsr.w	ClearScreen
000048E2 4DF9 00C0 0004             		lea	(vdp_control_port).l,a6
000048E8 3CBC 8B03                  		move.w	#$8B03,(a6)	; line scroll mode
000048EC 3CBC 8230                  		move.w	#$8200+(vram_fg>>10),(a6) ; set foreground nametable address
000048F0 3CBC 8407                  		move.w	#$8400+(vram_bg>>13),(a6) ; set background nametable address
000048F4 3CBC 857C                  		move.w	#$8500+(vram_sprites>>9),(a6) ; set sprite table address
000048F8 3CBC 9001                  		move.w	#$9001,(a6)		; 64-cell hscroll size
000048FC 3CBC 8004                  		move.w	#$8004,(a6)		; 8-colour mode
00004900 3CBC 8720                  		move.w	#$8720,(a6)		; set background colour (line 3; colour 0)
00004904 31FC 8ADF F624             		move.w	#$8A00+223,(v_hbla_hreg).w ; set palette change position (for water)
0000490A 3CB8 F624                  		move.w	(v_hbla_hreg).w,(a6)
0000490E 31FC C800 C8FC             		ResetDMAQueue	
00004914 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w ; is level LZ?
0000491A 6600                       		bne.s	Level_LoadPal	; if not, branch
0000491C                            
0000491C 3CBC 8014                  		move.w	#$8014,(a6)	; enable H-interrupts
00004920 7000                       		moveq	#0,d0
00004922 1038 FE11                  		move.b	(v_act).w,d0
00004926 D040                       		add.w	d0,d0
00004928 43F9 0000 0000             		lea	(WaterHeight).l,a1 ; load water	height array
0000492E 3031 0000                  		move.w	(a1,d0.w),d0
00004932 31C0 F646                  		move.w	d0,(v_waterpos1).w ; set water heights
00004936 31C0 F648                  		move.w	d0,(v_waterpos2).w
0000493A 31C0 F64A                  		move.w	d0,(v_waterpos3).w
0000493E 4238 F64D                  		clr.b	(v_wtr_routine).w ; clear water routine counter
00004942 4238 F64E                  		clr.b	(f_wtr_state).w	; clear	water state
00004946 11FC 0001 F64C             		move.b	#1,(f_water).w	; enable water
0000494C                            
0000494C                            Level_LoadPal:
0000494C 31FC 001E FE14             		move.w	#$1E,($FFFFFE14).w
00004952 46FC 2300                  		move	#$2300,sr
00004956 4EB9 0000 0000             		jsr		LoadPlayerPal
0000495C 6100 DB0E                  		bsr.w	PalLoad2	; load Sonic's pallet line
00004960 0C38 0001 F64C             		cmp.b	#1,(f_water).w ; Is water enabled?
00004966 6600                       		bne.s	Level_GetBgm	; if not, branch
00004968 4EB9 0000 0000             		jsr		LoadPlayerWaterPal
0000496E 6100 DB3C                  		bsr.w	PalLoad3_Water	; load underwater pallet (see d0)
00004972 4A38 FE30                  		tst.b	($FFFFFE30).w
00004976 6700                       		beq.s	Level_GetBgm
00004978 11F8 FE53 F64E             		move.b	($FFFFFE53).w,($FFFFF64E).w
0000497E                            
0000497E                            	Level_GetBgm:
0000497E 4A78 FFF0                  		tst.w	(f_demo).w
00004982 6B00                               	bmi.s	Level_SkipTtlCard
00004984 7000                               	moveq	#0,d0
00004986 3038 FE10                  		move.w	(v_zone).w,d0
0000498A E418                       		ror.b	#2,d0
0000498C EC48                       		lsr.w   #6,d0
0000498E 43F9 0000 481E                     	lea	(MusicList).l,a1 ; load    music playlist
00004994 1031 0000                          	move.b	(a1,d0.w),d0
00004998 11C0 F5C6                  		move.b	d0,((v_Saved_music)).w
0000499C 6100 C8B0                          	bsr.w	PlaySound    ; play music
000049A0 11FC 0000 D080                     	move.b	#id_TitleCard,(v_objspace+$80).w ; load title card object
000049A6                            
000049A6                            
000049A6                            Level_TtlCardLoop:
000049A6 11FC 000C F62A             		move.b	#$C,(v_vbla_routine).w
000049AC 6100 F056                  		bsr.w	WaitForVBla
000049B0 4EB9 0000 0000             		jsr	(ExecuteObjects).l
000049B6 4EB9 0000 0000             		jsr	(BuildSprites).l
000049BC 6100 CD9C                  		bsr.w	RunPLC
000049C0 3038 D108                  		move.w	(v_objspace+$108).w,d0
000049C4 B078 D130                  		cmp.w	(v_objspace+$130).w,d0 ; has title card sequence finished?
000049C8 66DC                       		bne.s	Level_TtlCardLoop ; if not, branch
000049CA 4AB8 F680                  		tst.l	(v_plc_buffer).w ; are there any items in the pattern load cue?
000049CE 66D6                       		bne.s	Level_TtlCardLoop ; if yes, branch
000049D0 4EB9 0000 0000             		jsr	(Hud_Base).l	; load basic HUD gfx
000049D6                            
000049D6                            	Level_SkipTtlCard:
000049D6 4EB9 0000 0000             		jsr		LoadPlayerPal
000049DC 6100 DA52                  		bsr.w	PalLoad1	; load Sonic's palette
000049E0 6100 0000                  		bsr.w	LevelSizeLoad
000049E4 6100 0000                  		bsr.w	DeformLayers
000049E8 08F8 0002 F754             		bset	#2,(v_fg_scroll_flags).w
000049EE 6100 0000                  		bsr.w	LevelDataLoad ; load block mappings and palettes
000049F2 6100 0000                  		bsr.w	LoadTilesFromStart
000049F6 4EB9 0000 0000             		jsr	(FloorLog_Unk).l
000049FC 6100 0000                  		bsr.w	ColIndexLoad
00004A00 6100 0000                  		bsr.w	LZWaterFeatures
00004A04 11FC 0000 D000             		move.b	#id_SonicPlayer,(v_player).w ; load Sonic object
00004A0A 4A78 FFF0                  		tst.w	(f_demo).w
00004A0E 6B00                       		bmi.s	Level_ChkDebug
00004A10 11FC 0000 D040             		move.b	#id_HUD,(v_objspace+$40).w ; load HUD object
00004A16                            
00004A16                            Level_ChkDebug:
00004A16 4A38 FFE2                  		tst.b	(f_debugcheat).w ; has debug cheat been entered?
00004A1A 6700                       		beq.s	Level_ChkWater	; if not, branch
00004A1C 0838 0006 F604             		btst	#bitA,(v_jpadhold1).w ; is A button held?
00004A22 6700                       		beq.s	Level_ChkWater	; if not, branch
00004A24 11FC 0001 FFFA             		move.b	#1,(f_debugmode).w ; enable debug mode
00004A2A                            
00004A2A                            Level_ChkWater:
00004A2A 31FC 0000 F602             		move.w	#0,(v_jpadhold2).w
00004A30 31FC 0000 F604             		move.w	#0,(v_jpadhold1).w
00004A36 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w ; is level LZ?
00004A3C 6600                       		bne.s	Level_LoadObj	; if not, branch
00004A3E 11FC 0000 D780             		move.b	#id_WaterSurface,(v_objspace+$780).w ; load water surface object
00004A44 31FC 0060 D788             		move.w	#$60,(v_objspace+$780+obX).w
00004A4A 11FC 0000 D7C0             		move.b	#id_WaterSurface,(v_objspace+$7C0).w
00004A50 31FC 0120 D7C8             		move.w	#$120,(v_objspace+$7C0+obX).w
00004A56                            
00004A56                            Level_LoadObj:
00004A56 4EB9 0000 0000             		jsr	(ObjPosLoad).l
00004A5C 4EB9 0000 0000             		jsr	(ExecuteObjects).l
00004A62 4EB9 0000 0000             		jsr	(BuildSprites).l
00004A68 7000                       		moveq	#0,d0
00004A6A 4A38 FE30                  		tst.b	(v_lastlamp).w	; are you starting from	a lamppost?
00004A6E 6600                       		bne.s	Level_SkipClr	; if yes, branch
00004A70 31C0 FE20                  		move.w	d0,(v_rings).w	; clear rings
00004A74 21C0 FE22                  		move.l	d0,(v_time).w	; clear time
00004A78 11C0 FE1B                  		move.b	d0,(v_lifecount).w ; clear lives counter
00004A7C                            
00004A7C                            	Level_SkipClr:
00004A7C 11C0 FE1A                  		move.b	d0,(f_timeover).w
00004A80 11C0 FE2C                  		move.b	d0,(v_shield).w	; clear shield
00004A84 11C0 F5C8                  		move.b	d0,(v_rshield).w; clear red shield
00004A88 11C0 F5C9                  		move.b	d0,(v_gshield).w; clear gold shield
00004A8C 11C0 F5CA                  		move.b	d0,(v_spshield).w; clear gold shield
00004A90 11C0 FE2D                  		move.b	d0,(v_invinc).w	; clear invincibility
00004A94 11C0 FE2E                  		move.b	d0,(v_shoes).w	; clear speed shoes
00004A98 11C0 FE2F                  		move.b	d0,($FFFFFE2F).w
00004A9C 31C0 FE08                  		move.w	d0,(v_debuguse).w
00004AA0 31C0 FE02                  		move.w	d0,(f_restart).w
00004AA4 31C0 FE04                  		move.w	d0,(v_framecount).w
00004AA8 6100 0000                  		bsr.w	OscillateNumInit
00004AAC 11FC 0001 FE1F             		move.b	#1,(f_scorecount).w ; update score counter
00004AB2 11FC 0001 FE1D             		move.b	#1,(f_ringcount).w ; update rings counter
00004AB8 11FC 0001 FE1E             		move.b	#1,(f_timecount).w ; update time counter
00004ABE 31FC 0000 F790             		move.w	#0,(v_btnpushtime1).w
00004AC4 43F9 0000 0000             		lea	(DemoDataPtr).l,a1 ; load demo data
00004ACA 7000                       		moveq	#0,d0
00004ACC 1038 FE10                  		move.b	(v_zone).w,d0
00004AD0 E548                       		lsl.w	#2,d0
00004AD2 2271 0000                  		movea.l	(a1,d0.w),a1
00004AD6 4A78 FFF0                  		tst.w	(f_demo).w	; is demo mode on?
00004ADA 6A00                       		bpl.s	Level_Demo	; if yes, branch
00004ADC 43F9 0000 0000             		lea	(DemoEndDataPtr).l,a1 ; load ending demo data
00004AE2 3038 FFF4                  		move.w	(v_creditsnum).w,d0
00004AE6 5340                       		subq.w	#1,d0
00004AE8 E548                       		lsl.w	#2,d0
00004AEA 2271 0000                  		movea.l	(a1,d0.w),a1
00004AEE                            
00004AEE                            Level_Demo:
00004AEE 11E9 0001 F792             		move.b	1(a1),(v_btnpushtime2).w ; load key press duration
00004AF4 5338 F792                  		subq.b	#1,(v_btnpushtime2).w ; subtract 1 from duration
00004AF8 31FC 0708 F614             		move.w	#1800,(v_demolength).w
00004AFE 4A78 FFF0                  		tst.w	(f_demo).w
00004B02 6A00                       		bpl.s	Level_ChkWaterPal
00004B04 31FC 021C F614             		move.w	#540,(v_demolength).w
00004B0A 0C78 0004 FFF4             		cmpi.w	#4,(v_creditsnum).w
00004B10 6600                       		bne.s	Level_ChkWaterPal
00004B12 31FC 01FE F614             		move.w	#510,(v_demolength).w
00004B18                            
00004B18                            Level_ChkWaterPal:
00004B18 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w ; is level LZ/SBZ3?
00004B1E 6600                       		bne.s	Level_Delay	; if not, branch
00004B20 700B                       		moveq	#palid_LZWater,d0 ; palette $B (LZ underwater)
00004B22 0C38 0003 FE11             		cmpi.b	#3,(v_act).w	; is level SBZ3?
00004B28 6600                       		bne.s	Level_WtrNotSbz	; if not, branch
00004B2A 700D                       		moveq	#palid_SBZ3Water,d0 ; palette $D (SBZ3 underwater)
00004B2C                            
00004B2C                            	Level_WtrNotSbz:
00004B2C 6100 D9BA                  		bsr.w	PalLoad4_Water
00004B30                            
00004B30                            Level_Delay:
00004B30 323C 0003                  		move.w	#3,d1
00004B34                            
00004B34                            	Level_DelayLoop:
00004B34 11FC 0008 F62A             		move.b	#8,(v_vbla_routine).w
00004B3A 6100 EEC8                  		bsr.w	WaitForVBla
00004B3E 51C9 FFF4                  		dbf	d1,Level_DelayLoop
00004B42                            
00004B42 31FC 202F F626             		move.w	#$202F,(v_pfade_start).w ; fade in 2nd, 3rd & 4th palette lines
00004B48 6100 D59C                  		bsr.w	PalFadeIn_Alt
00004B4C 4A78 FFF0                  		tst.w	(f_demo).w	; is an ending sequence demo running?
00004B50 6B00                       		bmi.s	Level_ClrCardArt ; if yes, branch
00004B52 5438 D0A4                  		addq.b	#2,(v_objspace+$80+obRoutine).w ; make title card move
00004B56 5838 D0E4                  		addq.b	#4,(v_objspace+$C0+obRoutine).w
00004B5A 5838 D124                  		addq.b	#4,(v_objspace+$100+obRoutine).w
00004B5E 5838 D164                  		addq.b	#4,(v_objspace+$140+obRoutine).w
00004B62 6000                       		bra.s	Level_StartGame
00004B64                            ; ===========================================================================
00004B64                            
00004B64                            Level_ClrCardArt:
00004B64 7000                       		moveq	#plcid_Explode,d0
00004B66 4EB9 0000 16EE             		jsr	(AddPLC).l	; load explosion gfx
00004B6C 7000                       		moveq	#0,d0
00004B6E 1038 FE10                  		move.b	(v_zone).w,d0
00004B72 0640 0000                  		addi.w	#plcid_GHZAnimals,d0
00004B76 4EB9 0000 16EE             		jsr	(AddPLC).l	; load animal gfx (level no. + $15)
00004B7C                            
00004B7C                            Level_StartGame:
00004B7C 08B8 0007 F600             		bclr	#7,(v_gamemode).w ; subtract $80 from mode to end pre-level stuff
00004B82                            
00004B82                            ; ---------------------------------------------------------------------------
00004B82                            ; Main level loop (when	all title card and loading sequences are finished)
00004B82                            ; ---------------------------------------------------------------------------
00004B82                            
00004B82                            Level_MainLoop:
00004B82 6100 C6DC                  		bsr.w	PauseGame
00004B86 11FC 0008 F62A             		move.b	#8,(v_vbla_routine).w
00004B8C 6100 EE76                  		bsr.w	WaitForVBla
00004B90 5278 FE04                  		addq.w	#1,(v_framecount).w ; add 1 to level timer
00004B94 6100 0000                  		bsr.w	MoveSonicInDemo
00004B98 6100 0000                  		bsr.w	LZWaterFeatures
00004B9C 4EB9 0000 0000             		jsr	(ExecuteObjects).l
00004BA2 4A78 FE02                  			tst.w   (f_restart).w
00004BA6 6600 FC92                  			bne     GM_Level
00004BAA 4A78 FE08                  		tst.w	(v_debuguse).w	; is debug mode being used?
00004BAE 6600                       		bne.s	Level_DoScroll	; if yes, branch
00004BB0 0C38 0006 D024             		cmpi.b	#6,(v_player+obRoutine).w ; has Sonic just died?
00004BB6 6400                       		bhs.s	Level_SkipScroll ; if yes, branch
00004BB8                            
00004BB8                            	Level_DoScroll:
00004BB8 6100 0000                  		bsr.w	DeformLayers
00004BBC                            
00004BBC                            	Level_SkipScroll:
00004BBC 4EB9 0000 0000             		jsr	(BuildSprites).l
00004BC2 4EB9 0000 0000             		jsr	(ObjPosLoad).l
00004BC8 6100 D108                  		bsr.w	PaletteCycle
00004BCC 6100 CB8C                  		bsr.w	RunPLC
00004BD0 6100 0000                  		bsr.w	OscillateNumDo
00004BD4 6100 0000                  		bsr.w	SynchroAnimate
00004BD8 6100 0000                  		bsr.w	SignpostArtLoad
00004BDC                            
00004BDC 0C38 0000 F600             		cmpi.b	#id_Demo,(v_gamemode).w
00004BE2 6700                       		beq.s	Level_ChkDemo	; if mode is 8 (demo), branch
00004BE4 0C38 0000 F600             		cmpi.b	#id_Level,(v_gamemode).w
00004BEA 6700 FF96                  		beq.w	Level_MainLoop	; if mode is $C (level), branch
00004BEE 4E75                       		rts	
00004BF0                            ; ===========================================================================
00004BF0                            
00004BF0                            Level_ChkDemo:
00004BF0 4A78 FE02                  		tst.w	(f_restart).w	; is level set to restart?
00004BF4 6600                       		bne.s	Level_EndDemo	; if yes, branch
00004BF6 4A78 F614                  		tst.w	(v_demolength).w ; is there time left on the demo?
00004BFA 6700                       		beq.s	Level_EndDemo	; if not, branch
00004BFC 0C38 0000 F600             		cmpi.b	#id_Demo,(v_gamemode).w
00004C02 6700 FF7E                  		beq.w	Level_MainLoop	; if mode is 8 (demo), branch
00004C06 11FC 0000 F600             		move.b	#id_Sega,(v_gamemode).w ; go to Sega screen
00004C0C 4E75                       		rts	
00004C0E                            ; ===========================================================================
00004C0E                            
00004C0E                            Level_EndDemo:
00004C0E 0C38 0000 F600             		cmpi.b	#id_Demo,(v_gamemode).w
00004C14 6600                       		bne.s	Level_FadeDemo	; if mode is 8 (demo), branch
00004C16 11FC 0000 F600             		move.b	#id_Sega,(v_gamemode).w ; go to Sega screen
00004C1C 4A78 FFF0                  		tst.w	(f_demo).w	; is demo mode on & not ending sequence?
00004C20 6A00                       		bpl.s	Level_FadeDemo	; if yes, branch
00004C22 11FC 0000 F600             		move.b	#id_Credits,(v_gamemode).w ; go to credits
00004C28                            
00004C28                            Level_FadeDemo:
00004C28 31FC 003C F614             		move.w	#$3C,(v_demolength).w
00004C2E 31FC 003F F626             		move.w	#$3F,(v_pfade_start).w
00004C34 4278 F794                  		clr.w	(v_palchgspeed).w
00004C38                            
00004C38                            	Level_FDLoop:
00004C38 11FC 0008 F62A             		move.b	#8,(v_vbla_routine).w
00004C3E 6100 EDC4                  		bsr.w	WaitForVBla
00004C42 6100 0000                  		bsr.w	MoveSonicInDemo
00004C46 4EB9 0000 0000             		jsr	(ExecuteObjects).l
00004C4C 4EB9 0000 0000             		jsr	(BuildSprites).l
00004C52 4EB9 0000 0000             		jsr	(ObjPosLoad).l
00004C58 5378 F794                  		subq.w	#1,(v_palchgspeed).w
00004C5C 6A00                       		bpl.s	loc_3BC8
00004C5E 31FC 0002 F794             		move.w	#2,(v_palchgspeed).w
00004C64 6100 D540                  		bsr.w	FadeOut_ToBlack
00004C68                            
00004C68                            loc_3BC8:
00004C68 4A78 F614                  		tst.w	(v_demolength).w
00004C6C 66CA                       		bne.s	Level_FDLoop
00004C6E 4E75                       		rts	
00004C70                            ; ===========================================================================
00004C70                            
00004C70                            		include	"_inc\LZWaterFeatures.asm"
00004C70                            ; ---------------------------------------------------------------------------
00004C70                            ; Subroutine to	do special water effects in Labyrinth Zone
00004C70                            ; ---------------------------------------------------------------------------
00004C70                            
00004C70                            LZWaterFeatures:
00004C70 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w ; check if level is LZ
00004C76 6600                       		bne.s	@notlabyrinth	; if not, branch
00004C78 4A38 F744                  			tst.b   (f_nobgscroll).w
00004C7C 6600                       			bne.s	@setheight
00004C7E 0C38 0006 D024             		cmpi.b	#6,(v_player+obRoutine).w ; has Sonic just died?
00004C84 6400                       		bcc.s	@setheight	; if yes, skip other effects
00004C86                            
00004C86 6100 0000                  		bsr.w	LZWindTunnels
00004C8A 6100 0000                  		bsr.w	LZWaterSlides
00004C8E 6100 0000                  		bsr.w	LZDynamicWater
00004C92                            
00004C92                            @setheight:
00004C92 4238 F64E                  		clr.b	(f_wtr_state).w
00004C96 7000                       		moveq	#0,d0
00004C98 1038 FE60                  		move.b	(v_oscillate+2).w,d0
00004C9C E248                       		lsr.w	#1,d0
00004C9E D078 F648                  		add.w	(v_waterpos2).w,d0
00004CA2 31C0 F646                  		move.w	d0,(v_waterpos1).w
00004CA6 3038 F646                  		move.w	(v_waterpos1).w,d0
00004CAA 9078 F704                  		sub.w	(v_screenposy).w,d0
00004CAE 6400                       		bcc.s	@isbelow
00004CB0 4A40                       		tst.w	d0
00004CB2 6A00                       		bpl.s	@isbelow	; if water is below top of screen, branch
00004CB4                            
00004CB4 11FC 00DF F625             		move.b	#223,(v_hbla_line).w
00004CBA 11FC 0001 F64E             		move.b	#1,(f_wtr_state).w ; screen is all underwater
00004CC0                            
00004CC0                            	@isbelow:
00004CC0 0C40 00DF                  		cmpi.w	#223,d0		; is water within 223 pixels of top of screen?
00004CC4 6500                       		bcs.s	@isvisible	; if yes, branch
00004CC6 303C 00DF                  		move.w	#223,d0
00004CCA                            
00004CCA                            	@isvisible:
00004CCA 11C0 F625                  		move.b	d0,(v_hbla_line).w ; set water surface as on-screen
00004CCE                            
00004CCE                            @notlabyrinth:
00004CCE 4E75                       		rts	
00004CD0                            ; ===========================================================================
00004CD0                            ; ---------------------------------------------------------------------------
00004CD0                            ; Initial water heights
00004CD0                            ; ---------------------------------------------------------------------------
00004CD0 0420                       WaterHeight:	dc.w $420	; Labyrinth 1
00004CD2 0328                       		dc.w $328	; Labyrinth 2
00004CD4 0900                       		dc.w $900	; Labyrinth 3
00004CD6 0228                       		dc.w $228	; Scrap Brain 3
00004CD8                            		even
00004CD8                            ; ===========================================================================
00004CD8                            
00004CD8                            ; ---------------------------------------------------------------------------
00004CD8                            ; Labyrinth dynamic water routines
00004CD8                            ; ---------------------------------------------------------------------------
00004CD8                            
00004CD8                            LZDynamicWater:
00004CD8 7000                       		moveq	#0,d0
00004CDA 1038 FE11                  		move.b	(v_act).w,d0
00004CDE D040                       		add.w	d0,d0
00004CE0 303B 0000                  		move.w	DynWater_Index(pc,d0.w),d0
00004CE4 4EBB 0000                  		jsr	DynWater_Index(pc,d0.w)
00004CE8 7200                       		moveq	#0,d1
00004CEA 1238 F64C                  		move.b	(f_water).w,d1
00004CEE 3038 F64A                  		move.w	(v_waterpos3).w,d0
00004CF2 9078 F648                  		sub.w	(v_waterpos2).w,d0
00004CF6 6700                       		beq.s	@exit		; if water level is correct, branch
00004CF8 6400                       		bcc.s	@movewater	; if water level is too high, branch
00004CFA 4441                       		neg.w	d1		; set water to move up instead
00004CFC                            
00004CFC                            	@movewater:
00004CFC D378 F648                  		add.w	d1,(v_waterpos2).w ; move water up/down
00004D00                            
00004D00                            	@exit:
00004D00 4E75                       		rts	
00004D02                            ; ===========================================================================
00004D02 0000                       DynWater_Index:	dc.w DynWater_LZ1-DynWater_Index
00004D04 0000                       		dc.w DynWater_LZ2-DynWater_Index
00004D06 0000                       		dc.w DynWater_LZ3-DynWater_Index
00004D08 0000                       		dc.w DynWater_SBZ3-DynWater_Index
00004D0A                            ; ===========================================================================
00004D0A                            
00004D0A                            DynWater_LZ1:
00004D0A 4E75                       		rts	
00004D0C                            ; ===========================================================================
00004D0C                            
00004D0C                            DynWater_LZ2:
00004D0C 3038 F700                  		move.w	(v_screenposx).w,d0
00004D10 323C 0328                  		move.w	#$328,d1
00004D14 0C40 0500                  		cmpi.w	#$500,d0
00004D18 6500                       		bcs.s	@setwater
00004D1A 323C 03C8                  		move.w	#$3C8,d1
00004D1E 0C40 0B00                  		cmpi.w	#$B00,d0
00004D22 6500                       		bcs.s	@setwater
00004D24 323C 0428                  		move.w	#$428,d1
00004D28                            
00004D28                            	@setwater:
00004D28 31C1 F64A                  		move.w	d1,(v_waterpos3).w
00004D2C 4E75                       		rts	
00004D2E                            ; ===========================================================================
00004D2E                            
00004D2E                            DynWater_LZ3:
00004D2E 3038 F700                  		move.w	(v_screenposx).w,d0
00004D32 1438 F64D                  		move.b	(v_wtr_routine).w,d2
00004D36 6600                       		bne.s	@routine2
00004D38                            
00004D38 323C 0900                  		move.w	#$900,d1
00004D3C 0C40 0600                  		cmpi.w	#$600,d0	; has screen reached position?
00004D40 6500                       		bcs.s	@setwaterlz3	; if not, branch
00004D42 0C78 03C0 D00C             		cmpi.w	#$3C0,(v_player+obY).w
00004D48 6500                       		bcs.s	@setwaterlz3
00004D4A 0C78 0600 D00C             		cmpi.w	#$600,(v_player+obY).w ; is Sonic in a y-axis range?
00004D50 6400                       		bcc.s	@setwaterlz3	; if not, branch
00004D52                            
00004D52 323C 04C8                  		move.w	#$4C8,d1	; set new water height
00004D56 11FC 004B A506             		move.b	#$4B,(v_lvllayout+$106).w ; update level layout
00004D5C 11FC 0001 F64D             		move.b	#1,(v_wtr_routine).w ; use second routine next
00004D6A                            
00004D6A                            	@setwaterlz3:
00004D6A 31C1 F64A                  		move.w	d1,(v_waterpos3).w
00004D6E 31C1 F648                  		move.w	d1,(v_waterpos2).w ; change water height instantly
00004D72 4E75                       		rts	
00004D74                            ; ===========================================================================
00004D74                            
00004D74                            @routine2:
00004D74 5302                       		subq.b	#1,d2
00004D76 6600                       		bne.s	@routine3
00004D78 323C 04C8                  		move.w	#$4C8,d1
00004D7C 0C40 0770                  		cmpi.w	#$770,d0
00004D80 6500                       		bcs.s	@setwater2
00004D82 323C 0308                  		move.w	#$308,d1
00004D86 0C40 1400                  		cmpi.w	#$1400,d0
00004D8A 6500                       		bcs.s	@setwater2
00004D8C 0C78 0508 F64A             		cmpi.w	#$508,(v_waterpos3).w
00004D92 6700                       		beq.s	@sonicislow
00004D94 0C78 0600 D00C             		cmpi.w	#$600,(v_player+obY).w ; is Sonic below $600 y-axis?
00004D9A 6400                       		bcc.s	@sonicislow	; if yes, branch
00004D9C 0C78 0280 D00C             		cmpi.w	#$280,(v_player+obY).w
00004DA2 6400                       		bcc.s	@setwater2
00004DA4                            
00004DA4                            @sonicislow:
00004DA4 323C 0508                  		move.w	#$508,d1
00004DA8 31C1 F648                  		move.w	d1,(v_waterpos2).w
00004DAC 0C40 1770                  		cmpi.w	#$1770,d0
00004DB0 6500                       		bcs.s	@setwater2
00004DB2 11FC 0002 F64D             		move.b	#2,(v_wtr_routine).w
00004DB8                            
00004DB8                            	@setwater2:
00004DB8 31C1 F64A                  		move.w	d1,(v_waterpos3).w
00004DBC 4E75                       		rts	
00004DBE                            ; ===========================================================================
00004DBE                            
00004DBE                            @routine3:
00004DBE 5302                       		subq.b	#1,d2
00004DC0 6600                       		bne.s	@routine4
00004DC2 323C 0508                  		move.w	#$508,d1
00004DC6 0C40 1860                  		cmpi.w	#$1860,d0
00004DCA 6500                       		bcs.s	@setwater3
00004DCC 323C 0188                  		move.w	#$188,d1
00004DD0 0C40 1AF0                  		cmpi.w	#$1AF0,d0
00004DD4 6400                       		bcc.s	@loc_3DC6
00004DD6 B278 F648                  		cmp.w	(v_waterpos2).w,d1
00004DDA 6600                       		bne.s	@setwater3
00004DDC                            
00004DDC                            	@loc_3DC6:
00004DDC 11FC 0003 F64D             		move.b	#3,(v_wtr_routine).w
00004DE2                            
00004DE2                            	@setwater3:
00004DE2 31C1 F64A                  		move.w	d1,(v_waterpos3).w
00004DE6 4E75                       		rts	
00004DE8                            ; ===========================================================================
00004DE8                            
00004DE8                            @routine4:
00004DE8 5302                       		subq.b	#1,d2
00004DEA 6600                       		bne.s	@routine5
00004DEC 323C 0188                  		move.w	#$188,d1
00004DF0 0C40 1AF0                  		cmpi.w	#$1AF0,d0
00004DF4 6500                       		bcs.s	@setwater4
00004DF6 323C 0900                  		move.w	#$900,d1
00004DFA 0C40 1BC0                  		cmpi.w	#$1BC0,d0
00004DFE 6500                       		bcs.s	@setwater4
00004E00 11FC 0004 F64D             		move.b	#4,(v_wtr_routine).w
00004E06 31FC 0608 F64A             		move.w	#$608,(v_waterpos3).w
00004E0C 31FC 07C0 F648             		move.w	#$7C0,(v_waterpos2).w
00004E12 11FC 0001 F7E8             		move.b	#1,(f_switch+8).w
00004E18 4E75                       		rts	
00004E1A                            ; ===========================================================================
00004E1A                            
00004E1A                            @setwater4:
00004E1A 31C1 F64A                  		move.w	d1,(v_waterpos3).w
00004E1E 31C1 F648                  		move.w	d1,(v_waterpos2).w
00004E22 4E75                       		rts	
00004E24                            ; ===========================================================================
00004E24                            
00004E24                            @routine5:
00004E24 0C40 1E00                  		cmpi.w	#$1E00,d0	; has screen passed final position?
00004E28 6500                       		bcs.s	@dontset	; if not, branch
00004E2A 31FC 0128 F64A             		move.w	#$128,(v_waterpos3).w
00004E30                            
00004E30                            	@dontset:
00004E30 4E75                       		rts	
00004E32                            ; ===========================================================================
00004E32                            
00004E32                            DynWater_SBZ3:
00004E32 323C 0228                  		move.w	#$228,d1
00004E36 0C78 0F00 F700             		cmpi.w	#$F00,(v_screenposx).w
00004E3C 6500                       		bcs.s	@setwater
00004E3E 323C 04C8                  		move.w	#$4C8,d1
00004E42                            
00004E42                            	@setwater:
00004E42 31C1 F64A                  		move.w	d1,(v_waterpos3).w
00004E46 4E75                       		rts
00004E48                            
00004E48                            ; ---------------------------------------------------------------------------
00004E48                            ; Labyrinth Zone "wind tunnels"	subroutine
00004E48                            ; ---------------------------------------------------------------------------
00004E48                            
00004E48                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004E48                            
00004E48                            
00004E48                            LZWindTunnels:
00004E48 4A78 FE08                  		tst.w	(v_debuguse).w	; is debug mode	being used?
00004E4C 6600 0000                  		bne.w	@quit	; if yes, branch
00004E50 45F9 0000 0000             		lea	(LZWind_Data+8).l,a2
00004E56 7000                       		moveq	#0,d0
00004E58 1038 FE11                  		move.b	(v_act).w,d0	; get act number
00004E5C E748                       		lsl.w	#3,d0		; multiply by 8
00004E5E D4C0                       		adda.w	d0,a2		; add to address for data
00004E60 7200                       		moveq	#0,d1
00004E62 4A38 FE11                  		tst.b	(v_act).w	; is act number 1?
00004E66 6600                       		bne.s	@notact1	; if not, branch
00004E68 7201                       		moveq	#1,d1
00004E6A 514A                       		subq.w	#8,a2		; use different data for act 1
00004E6C                            
00004E6C                            	@notact1:
00004E6C 43F8 D000                  		lea	(v_player).w,a1
00004E70                            
00004E70                            @chksonic:
00004E70 3029 0008                  		move.w	obX(a1),d0
00004E74 B052                       		cmp.w	(a2),d0
00004E76 6500 0000                  		bcs.w	@chknext
00004E7A B06A 0004                  		cmp.w	4(a2),d0
00004E7E 6400 0000                  		bcc.w	@chknext
00004E82 3429 000C                  		move.w	obY(a1),d2
00004E86 B46A 0002                  		cmp.w	2(a2),d2
00004E8A 6500                       		bcs.s	@chknext
00004E8C B46A 0006                  		cmp.w	6(a2),d2
00004E90 6400                       		bcc.s	@chknext	; branch if Sonic is outside a range
00004E92 1038 FE0F                  		move.b	(v_vbla_byte).w,d0
00004E96 0200 003F                  		andi.b	#$3F,d0		; does VInt counter fall on 0, $40, $80 or $C0?
00004E9A 6600                       		bne.s	@skipsound	; if not, branch
00004EA6                            
00004EA6                            	@skipsound:
00004EA6 4A38 F7C9                  		tst.b	(f_wtunnelallow).w ; are wind tunnels disabled?
00004EAA 6600 0000                  		bne.w	@quit	; if yes, branch
00004EAE 0C29 0004 0024             		cmpi.b	#4,obRoutine(a1) ; is Sonic hurt/dying?
00004EB4 6400                       		bcc.s	@clrquit	; if yes, branch
00004EB6 11FC 0001 F7C7             		move.b	#1,(f_wtunnelmode).w
00004EBC 0440 0080                  		subi.w	#$80,d0
00004EC0 B052                       		cmp.w	(a2),d0
00004EC2 6400                       		bcc.s	@movesonic
00004EC4 7002                       		moveq	#2,d0
00004EC6 0C38 0001 FE11             		cmpi.b	#1,(v_act).w	; is act number 2?
00004ECC 6600                       		bne.s	@notact2	; if not, branch
00004ECE 4440                       		neg.w	d0
00004ED0                            
00004ED0                            	@notact2:
00004ED0 D169 000C                  		add.w	d0,obY(a1)	; adjust Sonic's y-axis for curve of tunnel
00004ED4                            
00004ED4                            @movesonic:
00004ED4 5869 0008                  		addq.w	#4,obX(a1)
00004ED8 337C 0400 0010             		move.w	#$400,obVelX(a1) ; move Sonic horizontally
00004EDE 337C 0000 0012             		move.w	#0,obVelY(a1)
00004EE4 137C 0000 001C             		move.b	#id_Float2,obAnim(a1)	; use floating animation
00004EEA 08E9 0001 0022             		bset	#1,obStatus(a1)
00004EF0 0838 0000 F602             		btst	#0,(v_jpadhold2).w ; is up pressed?
00004EF6 6700                       		beq.s	@down		; if not, branch
00004EF8 5369 000C                  		subq.w	#1,obY(a1)	; move Sonic up on pole
00004EFC                            
00004EFC                            	@down:
00004EFC 0838 0001 F602             		btst	#1,(v_jpadhold2).w ; is down being pressed?
00004F02 6700                       		beq.s	@end		; if not, branch
00004F04 5269 000C                  		addq.w	#1,obY(a1)	; move Sonic down on pole
00004F08                            
00004F08                            	@end:
00004F08 4E75                       		rts	
00004F0A                            ; ===========================================================================
00004F0A                            
00004F0A                            @chknext:
00004F0A 504A                       		addq.w	#8,a2		; use second set of values (act 1 only)
00004F0C 51C9 FF62                  		dbf	d1,@chksonic	; on act 1, repeat for a second tunnel
00004F10 4A38 F7C7                  		tst.b	(f_wtunnelmode).w ; is Sonic still in a tunnel?
00004F14 6700                       		beq.s	@quit		; if yes, branch
00004F16 137C 0000 001C             		move.b	#id_Walk,obAnim(a1)	; use walking animation
00004F1C                            
00004F1C                            @clrquit:
00004F1C 4238 F7C7                  		clr.b	(f_wtunnelmode).w ; finish tunnel
00004F20                            
00004F20                            @quit:
00004F20 4E75                       		rts	
00004F22                            ; End of function LZWindTunnels
00004F22                            
00004F22                            ; ===========================================================================
00004F22                            
00004F22                            		;    left, top,  right, bottom boundaries
00004F22 0A80 0300 0C10 0380        LZWind_Data:	dc.w $A80, $300, $C10,  $380 ; act 1 values (set 1)
00004F2A 0F80 0100 1410 0180        		dc.w $F80, $100, $1410,	$180 ; act 1 values (set 2)
00004F32 0460 0400 0710 0480        		dc.w $460, $400, $710,  $480 ; act 2 values
00004F3A 0A20 0600 1610 06E0        		dc.w $A20, $600, $1610, $6E0 ; act 3 values
00004F42 0C80 0600 13D0 0680        		dc.w $C80, $600, $13D0, $680 ; SBZ act 3 values
00004F4A                            		even
00004F4A                            
00004F4A                            ; ---------------------------------------------------------------------------
00004F4A                            ; Labyrinth Zone water slide subroutine
00004F4A                            ; ---------------------------------------------------------------------------
00004F4A                            
00004F4A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004F4A                            
00004F4A                            
00004F4A                            LZWaterSlides:
00004F4A 43F8 D000                  		lea	(v_player).w,a1
00004F4E 0829 0001 0022             		btst	#1,obStatus(a1)	; is Sonic jumping?
00004F54 6600                       		bne.s	loc_3F6A	; if not, branch
00004F56 3029 000C                  		move.w	obY(a1),d0
00004F5A E248                       		lsr.w	#1,d0
00004F5C 0240 0380                  		andi.w	#$380,d0
00004F60 1229 0008                  		move.b	obX(a1),d1
00004F64 0241 007F                  		andi.w	#$7F,d1
00004F68 D041                       		add.w	d1,d0
00004F6A 45F8 A400                  		lea	(v_lvllayout).w,a2
00004F6E 1032 0000                  		move.b	(a2,d0.w),d0
00004F72 45FA 0000                  		lea	Slide_Chunks_End(pc),a2
00004F76 7200                       		moveq	#Slide_Chunks_End-Slide_Chunks-1,d1
00004F78                            
00004F78                            loc_3F62:
00004F78 B022                       		cmp.b	-(a2),d0
00004F7A 57C9 FFFC                  		dbeq	d1,loc_3F62
00004F7E 6700                       		beq.s	LZSlide_Move
00004F80                            
00004F80                            loc_3F6A:
00004F80 4A38 F7CA                  		tst.b	(f_jumponly).w
00004F84 6700                       		beq.s	locret_3F7A
00004F86 337C 0005 003E             		move.w	#5,$3E(a1)
00004F8C 4238 F7CA                  		clr.b	(f_jumponly).w
00004F90                            
00004F90                            locret_3F7A:
00004F90 4E75                       		rts	
00004F92                            ; ===========================================================================
00004F92                            
00004F92                            LZSlide_Move:
00004F92 0C41 0003                  		cmpi.w	#3,d1
00004F96 6400                       		bcc.s	loc_3F84
00004F98 4E71                       		nop	
00004F9A                            
00004F9A                            loc_3F84:
00004F9A 08A9 0000 0022             		bclr	#0,obStatus(a1)
00004FA0 103B 1000                  		move.b	Slide_Speeds(pc,d1.w),d0
00004FA4 1340 0020                  		move.b	d0,obInertia(a1)
00004FA8 6A00                       		bpl.s	loc_3F9A
00004FAA 08E9 0000 0022             		bset	#0,obStatus(a1)
00004FB0                            
00004FB0                            loc_3F9A:
00004FB0 4229 0021                  		clr.b	obInertia+1(a1)
00004FB4 137C 0000 001C             		move.b	#id_WaterSlide,obAnim(a1) ; use Sonic's "sliding" animation
00004FBA 11FC 0001 F7CA             		move.b	#1,(f_jumponly).w ; lock controls (except jumping)
00004FC0 1038 FE0F                  		move.b	(v_vbla_byte).w,d0
00004FC4 0200 001F                  		andi.b	#$1F,d0
00004FC8 6600                       		bne.s	locret_3FBE
00004FD4                            
00004FD4                            locret_3FBE:
00004FD4 4E75                       		rts	
00004FD6                            ; End of function LZWaterSlides
00004FD6                            
00004FD6                            ; ===========================================================================
00004FD6                            ; byte_3FC0:
00004FD6                            Slide_Speeds:
00004FD6 0AF5 0AF6 F5F4 0B          		dc.b $A, $F5, $A, $F6, $F5, $F4, $B
00004FDE 00                         		even
00004FDE                            
00004FDE                            Slide_Chunks:
00004FDE 54                         		dc.b $54 ;2, 7, 3, $4C, $4B, 8, 4
00004FDF                            ; byte_3FCF
00004FDF                            Slide_Chunks_End
00004FE0 00                         		even
00004FE0 00                         		even
00004FE0                            		include	"_inc\MoveSonicInDemo.asm"
00004FE0                            ; ---------------------------------------------------------------------------
00004FE0                            ; Subroutine to	move Sonic in demo mode
00004FE0                            ; ---------------------------------------------------------------------------
00004FE0                            
00004FE0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004FE0                            
00004FE0                            
00004FE0                            MoveSonicInDemo:
00004FE0 4A78 FFF0                  		tst.w	(f_demo).w	; is demo mode on?
00004FE4 6600                       		bne.s	MDemo_On	; if yes, branch
00004FE6 4E75                       		rts	
00004FE8                            ; ===========================================================================
00004FE8                            
00004FE8                            ; This is an unused subroutine for recording a demo
00004FE8                            
00004FE8                            DemoRecorder:
00004FE8 43F9 0008 0000             		lea	($80000).l,a1
00004FEE 3038 F790                  		move.w	(v_btnpushtime1).w,d0
00004FF2 D2C0                       		adda.w	d0,a1
00004FF4 1038 F604                  		move.b	(v_jpadhold1).w,d0
00004FF8 B011                       		cmp.b	(a1),d0
00004FFA 6600                       		bne.s	@next
00004FFC 5229 0001                  		addq.b	#1,1(a1)
00005000 0C29 00FF 0001             		cmpi.b	#$FF,1(a1)
00005006 6700                       		beq.s	@next
00005008 4E75                       		rts	
0000500A                            
0000500A                            	@next:
0000500A 1340 0002                  		move.b	d0,2(a1)
0000500E 137C 0000 0003             		move.b	#0,3(a1)
00005014 5478 F790                  		addq.w	#2,(v_btnpushtime1).w
00005018 0278 03FF F790             		andi.w	#$3FF,(v_btnpushtime1).w
0000501E 4E75                       		rts	
00005020                            ; ===========================================================================
00005020                            
00005020                            MDemo_On:
00005020 4A38 F604                  		tst.b	(v_jpadhold1).w	; is start button pressed?
00005024 6A00                       		bpl.s	@dontquit	; if not, branch
00005026 4A78 FFF0                  		tst.w	(f_demo).w	; is this an ending sequence demo?
0000502A 6B00                       		bmi.s	@dontquit	; if yes, branch
0000502C 11FC 0000 F600             		move.b	#id_Title,(v_gamemode).w ; go to title screen
00005032                            
00005032                            	@dontquit:
00005032 43F9 0000 0000             		lea	(DemoDataPtr).l,a1
00005038 7000                       		moveq	#0,d0
0000503A 1038 FE10                  		move.b	(v_zone).w,d0
0000503E 0C38 0000 F600             		cmpi.b	#id_Special,(v_gamemode).w ; is this a special stage?
00005044 6600                       		bne.s	@notspecial	; if not, branch
00005046 7006                       		moveq	#6,d0		; use demo #6
00005048                            
00005048                            	@notspecial:
00005048 E548                       		lsl.w	#2,d0
0000504A 2271 0000                  		movea.l	(a1,d0.w),a1	; fetch address for demo data
0000504E 4A78 FFF0                  		tst.w	(f_demo).w	; is this an ending sequence demo?
00005052 6A00                       		bpl.s	@notcredits	; if not, branch
00005054 43F9 0000 0000             		lea	(DemoEndDataPtr).l,a1
0000505A 3038 FFF4                  		move.w	(v_creditsnum).w,d0
0000505E 5340                       		subq.w	#1,d0
00005060 E548                       		lsl.w	#2,d0
00005062 2271 0000                  		movea.l	(a1,d0.w),a1	; fetch address for credits demo
00005066                            
00005066                            	@notcredits:
00005066 3038 F790                  		move.w	(v_btnpushtime1).w,d0
0000506A D2C0                       		adda.w	d0,a1
0000506C 1011                       		move.b	(a1),d0
0000506E 41F8 F604                  		lea	(v_jpadhold1).w,a0
00005072 1200                       		move.b	d0,d1
00005074 7400                       			moveq	#0,d2
00005076 B500                       		eor.b	d2,d0
00005078 10C1                       		move.b	d1,(a0)+
0000507A C001                       		and.b	d1,d0
0000507C 10C0                       		move.b	d0,(a0)+
0000507E 5338 F792                  		subq.b	#1,(v_btnpushtime2).w
00005082 6400                       		bcc.s	@end
00005084 11E9 0003 F792             		move.b	3(a1),(v_btnpushtime2).w
0000508A 5478 F790                  		addq.w	#2,(v_btnpushtime1).w
0000508E                            
0000508E                            	@end:
0000508E 4E75                       		rts	
00005090                            ; End of function MoveSonicInDemo
00005090                            
00005090                            ; ===========================================================================
00005090                            ; ---------------------------------------------------------------------------
00005090                            ; Demo sequence	pointers
00005090                            ; ---------------------------------------------------------------------------
00005090 0000 0000                  DemoDataPtr:	dc.l Demo_GHZ		; demos run after the title screen
00005094 0000 0000                  		dc.l Demo_GHZ
00005098 0000 0000                  		dc.l Demo_MZ
0000509C 0000 0000                  		dc.l Demo_MZ
000050A0 0000 0000                  		dc.l Demo_SYZ
000050A4 0000 0000                  		dc.l Demo_SYZ
000050A8 0000 0000                  		dc.l Demo_SS
000050AC 0000 0000                  		dc.l Demo_SS
000050B0                            
000050B0 0000 0000                  DemoEndDataPtr:	dc.l Demo_EndGHZ1	; demos run during the credits
000050B4 0000 0000                  		dc.l Demo_EndMZ
000050B8 0000 0000                  		dc.l Demo_EndSYZ
000050BC 0000 0000                  		dc.l Demo_EndLZ
000050C0 0000 0000                  		dc.l Demo_EndSLZ
000050C4 0000 0000                  		dc.l Demo_EndSBZ1
000050C8 0000 0000                  		dc.l Demo_EndSBZ2
000050CC 0000 0000                  		dc.l Demo_EndGHZ2
000050D0                            
000050D0 008B 0837 0042 085C 006A+  		dc.b 0,	$8B, 8,	$37, 0,	$42, 8,	$5C, 0,	$6A, 8,	$5F, 0,	$2F, 8,	$2C
000050E0 0021 0803 2830 0808 002E+  		dc.b 0,	$21, 8,	3, $28,	$30, 8,	8, 0, $2E, 8, $15, 0, $F, 8, $46
000050F0 001A 08FF 08CA 0000 0000+  		dc.b 0,	$1A, 8,	$FF, 8,	$CA, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0
00005100                            		even
00005100                            		even
00005100                            
00005100                            ; ---------------------------------------------------------------------------
00005100                            ; Collision index pointer loading subroutine
00005100                            ; ---------------------------------------------------------------------------
00005100                            
00005100                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00005100                            
00005100                            
00005100                            ColIndexLoad:
00005100 7000                       		moveq	#0,d0
00005102 1038 FE10                  		move.b	(v_zone).w,d0
00005106 E548                       		lsl.w	#2,d0
00005108 21FB 0000 F796             		move.l	ColPointers(pc,d0.w),(v_collindex).w
0000510E 4E75                       		rts	
00005110                            ; End of function ColIndexLoad
00005110                            
00005110                            ; ===========================================================================
00005110                            ; ---------------------------------------------------------------------------
00005110                            ; Collision index pointers
00005110                            ; ---------------------------------------------------------------------------
00005110 0000 0000                  ColPointers:	dc.l Col_GHZ
00005114 0000 0000                  		dc.l Col_LZ
00005118 0000 0000                  		dc.l Col_MZ
0000511C 0000 0000                  		dc.l Col_SLZ
00005120 0000 0000                  		dc.l Col_SYZ
00005124 0000 0000                  		dc.l Col_SBZ
00005128                            ;		dc.l Col_GHZ ; Pointer for Ending is missing by default.
00005128                            
00005128                            		include	"_inc\Oscillatory Routines.asm"
00005128                            ; ---------------------------------------------------------------------------
00005128                            ; Oscillating number subroutines
00005128                            ; ---------------------------------------------------------------------------
00005128                            
00005128                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00005128                            
00005128                            ; Initialise the values
00005128                            
00005128                            OscillateNumInit:
00005128 43F8 FE5E                  		lea	(v_oscillate).w,a1
0000512C 45F9 0000 0000             		lea	(@baselines).l,a2
00005132 7220                       		moveq	#$20,d1
00005134                            
00005134                            	@loop:
00005134 32DA                       		move.w	(a2)+,(a1)+	; copy baseline values to RAM
00005136 51C9 FFFC                  		dbf	d1,@loop
0000513A 4E75                       		rts	
0000513C                            
0000513C                            
0000513C                            ; ===========================================================================
0000513C 007C                       @baselines:	dc.w %0000000001111100	; oscillation direction bitfield
0000513E 0080 0000                  		dc.w $80, 0
00005142 0080 0000                  		dc.w $80, 0
00005146 0080 0000                  		dc.w $80, 0
0000514A 0080 0000                  		dc.w $80, 0
0000514E 0080 0000                  		dc.w $80, 0
00005152 0080 0000                  		dc.w $80, 0
00005156 0080 0000                  		dc.w $80, 0
0000515A 0080 0000                  		dc.w $80, 0
0000515E 0080 0000                  		dc.w $80, 0
00005162 50F0 011E                  		dc.w $50F0, $11E
00005166 2080 00B4                  		dc.w $2080, $B4
0000516A 3080 010E                  		dc.w $3080, $10E
0000516E 5080 01C2                  		dc.w $5080, $1C2
00005172 7080 0276                  		dc.w $7080, $276
00005176 0080 0000                  		dc.w $80, 0
0000517A 0080 0000                  		dc.w $80, 0
0000517E                            		even
0000517E                            
0000517E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000517E                            
0000517E                            ; Oscillate values
0000517E                            
0000517E                            OscillateNumDo:
0000517E 0C38 0006 D024             		cmpi.b	#6,(v_player+obRoutine).w ; has Sonic just died?
00005184 6400                       		bcc.s	@end		; if yes, branch
00005186 43F8 FE5E                  		lea	(v_oscillate).w,a1
0000518A 45F9 0000 0000             		lea	(@settings).l,a2
00005190 3619                       		move.w	(a1)+,d3	; get oscillation direction bitfield
00005192 720F                       		moveq	#$F,d1
00005194                            
00005194                            @loop:
00005194 341A                       		move.w	(a2)+,d2	; get frequency
00005196 381A                       		move.w	(a2)+,d4	; get amplitude
00005198 0303                       		btst	d1,d3		; check oscillation direction
0000519A 6600                       		bne.s	@down		; branch if 1
0000519C                            
0000519C                            	@up:
0000519C 3029 0002                  		move.w	2(a1),d0	; get current rate
000051A0 D042                       		add.w	d2,d0		; add frequency
000051A2 3340 0002                  		move.w	d0,2(a1)
000051A6 D151                       		add.w	d0,0(a1)	; add rate to value
000051A8 B811                       		cmp.b	0(a1),d4
000051AA 6200                       		bhi.s	@next
000051AC 03C3                       		bset	d1,d3
000051AE 6000                       		bra.s	@next
000051B0                            
000051B0                            	@down:
000051B0 3029 0002                  		move.w	2(a1),d0
000051B4 9042                       		sub.w	d2,d0
000051B6 3340 0002                  		move.w	d0,2(a1)
000051BA D151                       		add.w	d0,0(a1)
000051BC B811                       		cmp.b	0(a1),d4
000051BE 6300                       		bls.s	@next
000051C0 0383                       		bclr	d1,d3
000051C2                            
000051C2                            	@next:
000051C2 5849                       		addq.w	#4,a1
000051C4 51C9 FFCE                  		dbf	d1,@loop
000051C8 31C3 FE5E                  		move.w	d3,(v_oscillate).w
000051CC                            
000051CC                            @end:
000051CC 4E75                       		rts	
000051CE                            ; End of function OscillateNumDo
000051CE                            
000051CE                            ; ===========================================================================
000051CE 0002 0010                  @settings:	dc.w 2,	$10	; frequency, amplitude
000051D2 0002 0018                  		dc.w 2,	$18
000051D6 0002 0020                  		dc.w 2,	$20
000051DA 0002 0030                  		dc.w 2,	$30
000051DE 0004 0020                  		dc.w 4,	$20
000051E2 0008 0008                  		dc.w 8,	8
000051E6 0008 0040                  		dc.w 8,	$40
000051EA 0004 0040                  		dc.w 4,	$40
000051EE 0002 0050                  		dc.w 2,	$50
000051F2 0002 0050                  		dc.w 2,	$50
000051F6 0002 0020                  		dc.w 2,	$20
000051FA 0003 0030                  		dc.w 3,	$30
000051FE 0005 0050                  		dc.w 5,	$50
00005202 0007 0070                  		dc.w 7,	$70
00005206 0002 0010                  		dc.w 2,	$10
0000520A 0002 0010                  		dc.w 2,	$10
0000520E                            		even
0000520E                            		even
0000520E                            
0000520E                            ; ---------------------------------------------------------------------------
0000520E                            ; Subroutine to	change synchronised animation variables (rings, giant rings)
0000520E                            ; ---------------------------------------------------------------------------
0000520E                            
0000520E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000520E                            
0000520E                            
0000520E                            SynchroAnimate:
0000520E                            
0000520E                            ; Used for GHZ spiked log
0000520E                            Sync1:
0000520E 5338 FEC0                  		subq.b	#1,(v_ani0_time).w ; has timer reached 0?
00005212 6A00                       		bpl.s	Sync2		; if not, branch
00005214 11FC 000B FEC0             		move.b	#$B,(v_ani0_time).w ; reset timer
0000521A 5338 FEC1                  		subq.b	#1,(v_ani0_frame).w ; next frame
0000521E 0238 0007 FEC1             		andi.b	#7,(v_ani0_frame).w ; max frame is 7
00005224                            
00005224                            ; Used for rings and giant rings
00005224                            Sync2:
00005224 5338 FEC2                  		subq.b	#1,(v_ani1_time).w
00005228 6A00                       		bpl.s	Sync3
0000522A 11FC 0007 FEC2             		move.b	#7,(v_ani1_time).w
00005230 5238 FEC3                  		addq.b	#1,(v_ani1_frame).w
00005234 0238 0003 FEC3             		andi.b	#3,(v_ani1_frame).w
0000523A                            
0000523A                            ; Used for nothing
0000523A                            Sync3:
0000523A 5338 FEC4                  		subq.b	#1,(v_ani2_time).w
0000523E 6A00                       		bpl.s	Sync4
00005240 11FC 0007 FEC4             		move.b	#7,(v_ani2_time).w
00005246 5238 FEC5                  		addq.b	#1,(v_ani2_frame).w
0000524A 0C38 0006 FEC5             		cmpi.b	#6,(v_ani2_frame).w
00005250 6500                       		blo.s	Sync4
00005252 11FC 0000 FEC5             		move.b	#0,(v_ani2_frame).w
00005258                            
00005258                            ; Used for bouncing rings
00005258                            Sync4:
00005258 4A38 FEC6                  		tst.b	(v_ani3_time).w
0000525C 6700                       		beq.s	SyncEnd
0000525E 7000                       		moveq	#0,d0
00005260 1038 FEC6                  		move.b	(v_ani3_time).w,d0
00005264 D078 FEC8                  		add.w	(v_ani3_buf).w,d0
00005268 31C0 FEC8                  		move.w	d0,(v_ani3_buf).w
0000526C EF58                       		rol.w	#7,d0
0000526E 0240 0003                  		andi.w	#3,d0
00005272 11C0 FEC7                  		move.b	d0,(v_ani3_frame).w
00005276 5338 FEC6                  		subq.b	#1,(v_ani3_time).w
0000527A                            
0000527A                            SyncEnd:
0000527A 4E75                       		rts	
0000527C                            ; End of function SynchroAnimate
0000527C                            
0000527C                            ; ---------------------------------------------------------------------------
0000527C                            ; End-of-act signpost pattern loading subroutine
0000527C                            ; ---------------------------------------------------------------------------
0000527C                            
0000527C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000527C                            
0000527C                            
0000527C                            SignpostArtLoad:
0000527C 4A78 FE08                  		tst.w	(v_debuguse).w	; is debug mode	being used?
00005280 6600 0000                  		bne.w	@exit		; if yes, branch
00005284 0C38 0002 FE11             		cmpi.b	#2,(v_act).w	; is act number 02 (act 3)?
0000528A 6700                       		beq.s	@exit		; if yes, branch
0000528C                            
0000528C 3038 F700                  		move.w	(v_screenposx).w,d0
00005290 3238 F72A                  		move.w	(v_limitright2).w,d1
00005294 0441 0100                  		subi.w	#$100,d1
00005298 B041                       		cmp.w	d1,d0		; has Sonic reached the	edge of	the level?
0000529A 6D00                       		blt.s	@exit		; if not, branch
0000529C 4A38 FE1E                  		tst.b	(f_timecount).w
000052A0 6700                       		beq.s	@exit
000052A2 B278 F728                  		cmp.w	(v_limitleft2).w,d1
000052A6 6700                       		beq.s	@exit
000052A8 31C1 F728                  		move.w	d1,(v_limitleft2).w ; move left boundary to current screen position
000052AC 7000                       		moveq	#plcid_Signpost,d0
000052AE 6000 C470                  		bra.w	NewPLC		; load signpost	patterns
000052B2                            
000052B2                            	@exit:
000052B2 4E75                       		rts	
000052B4                            ; End of function SignpostArtLoad
000052B4                            
000052B4                            ; ===========================================================================
000052B4                            Demo_GHZ:	incbin	"demodata\Intro - GHZ.bin"
00005334                            Demo_MZ:	incbin	"demodata\Intro - MZ.bin"
00005464                            Demo_SYZ:	incbin	"demodata\Intro - SYZ.bin"
000054E4                            Demo_SS:	incbin	"demodata\Intro - Special Stage.bin"
000055E4                            ; ===========================================================================
000055E4                            
000055E4                            ; ---------------------------------------------------------------------------
000055E4                            ; Special Stage
000055E4                            ; ---------------------------------------------------------------------------
000055E4                            
000055E4                            GM_Special:
000055EC 6100 CCC2                  		bsr.w	PaletteWhiteOut
000055F0 46FC 2700                  		disable_ints
000055F4 4DF9 00C0 0004             		lea	(vdp_control_port).l,a6
000055FA 3CBC 8B03                  		move.w	#$8B03,(a6)	; line scroll mode
000055FE 3CBC 8004                  		move.w	#$8004,(a6)	; 8-colour mode
00005602 31FC 8AAF F624             		move.w	#$8A00+175,(v_hbla_hreg).w
00005608 3CBC 9011                  		move.w	#$9011,(a6)	; 128-cell hscroll size
0000560C 3038 F60C                  		move.w	(v_vdp_buffer1).w,d0
00005610 0200 00BF                  		andi.b	#$BF,d0
00005614 33C0 00C0 0004             		move.w	d0,(vdp_control_port).l
0000561A 6100 BB68                  		bsr.w	ClearScreen
0000561E 46FC 2300                  		enable_ints
00005622 4BF9 00C0 0004 3ABC 8F01+  		fillVRAM	0,$6FFF,$5000
00005644                            
00005644                            	SS_WaitForDMA:
00005644 3215                       		move.w	(a5),d1		; read control port ($C00004)
00005646 0801 0001                  		btst	#1,d1		; is DMA running?
0000564A 66F8                       		bne.s	SS_WaitForDMA	; if yes, branch
0000564C 3ABC 8F02                  		move.w	#$8F02,(a5)	; set VDP increment to 2 bytes
00005650 6100 0000                  		bsr.w	SS_BGLoad
00005654 7000                       		moveq	#plcid_SpecialStage,d0
00005656 6100 C202                  		bsr.w	QuickPLC	; load special stage patterns
0000565A                            
0000565A 43F8 D000                  		lea	(v_objspace).w,a1
0000565E 7000                       		moveq	#0,d0
00005660 323C 07FF                  		move.w	#$7FF,d1
00005664                            	SS_ClrObjRam:
00005664 22C0                       		move.l	d0,(a1)+
00005666 51C9 FFFC                  		dbf	d1,SS_ClrObjRam	; clear	the object RAM
0000566A                            
0000566A 43F8 F700                  		lea	(v_screenposx).w,a1
0000566E 7000                       		moveq	#0,d0
00005670 323C 003F                  		move.w	#$3F,d1
00005674                            	SS_ClrRam1:
00005674 22C0                       		move.l	d0,(a1)+
00005676 51C9 FFFC                  		dbf	d1,SS_ClrRam1	; clear	variables
0000567A                            
0000567A 43F8 FE60                  		lea	(v_oscillate+2).w,a1
0000567E 7000                       		moveq	#0,d0
00005680 323C 0027                  		move.w	#$27,d1
00005684                            	SS_ClrRam2:
00005684 22C0                       		move.l	d0,(a1)+
00005686 51C9 FFFC                  		dbf	d1,SS_ClrRam2	; clear	variables
0000568A                            
0000568A 43F8 AA00                  		lea	(v_ngfx_buffer).w,a1
0000568E 7000                       		moveq	#0,d0
00005690 323C 007F                  		move.w	#$7F,d1
00005694                            	SS_ClrNemRam:
00005694 22C0                       		move.l	d0,(a1)+
00005696 51C9 FFFC                  		dbf	d1,SS_ClrNemRam	; clear	Nemesis	buffer
0000569A                            
0000569A 4238 F64E                  		clr.b	(f_wtr_state).w
0000569E 4278 FE02                  		clr.w	(f_restart).w
000056A2 700A                       		moveq	#palid_Special,d0
000056A4 6100 CD8A                  		bsr.w	PalLoad1	; load special stage palette
000056A8 4EB9 0000 0000             		jsr	(SS_Load).l		; load SS layout data
000056AE 21FC 0000 0000 F700        		move.l	#0,(v_screenposx).w
000056B6 21FC 0000 0000 F704        		move.l	#0,(v_screenposy).w
000056BE 11FC 0000 D000             		move.b	#id_SonicSpecial,(v_player).w ; load special stage Sonic object
000056C4 6100 0000                  		bsr.w	PalCycle_SS
000056C8 4278 F780                  		clr.w	(v_ssangle).w	; set stage angle to "upright"
000056CC 31FC 0040 F782             		move.w	#$40,(v_ssrotate).w ; set stage rotation speed
000056DA 31FC 0000 F790             		move.w	#0,(v_btnpushtime1).w
000056E0 43F9 0000 5090             		lea	(DemoDataPtr).l,a1
000056E6 7006                       		moveq	#6,d0
000056E8 E548                       		lsl.w	#2,d0
000056EA 2271 0000                  		movea.l	(a1,d0.w),a1
000056EE 11E9 0001 F792             		move.b	1(a1),(v_btnpushtime2).w
000056F4 5338 F792                  		subq.b	#1,(v_btnpushtime2).w
000056F8 4278 FE20                  		clr.w	(v_rings).w
000056FC 4238 FE1B                  		clr.b	(v_lifecount).w
00005700 31FC 0000 FE08             		move.w	#0,(v_debuguse).w
00005706 31FC 0708 F614             		move.w	#1800,(v_demolength).w
0000570C 4A38 FFE2                  		tst.b	(f_debugcheat).w ; has debug cheat been entered?
00005710 6700                       		beq.s	SS_NoDebug	; if not, branch
00005712 0838 0006 F604             		btst	#bitA,(v_jpadhold1).w ; is A button pressed?
00005718 6700                       		beq.s	SS_NoDebug	; if not, branch
0000571A 11FC 0001 FFFA             		move.b	#1,(f_debugmode).w ; enable debug mode
00005720                            
00005720                            	SS_NoDebug:
00005720 3038 F60C                  		move.w	(v_vdp_buffer1).w,d0
00005724 0000 0040                  		ori.b	#$40,d0
00005728 33C0 00C0 0004             		move.w	d0,(vdp_control_port).l
0000572E 6100 CAD4                  		bsr.w	PaletteWhiteIn
00005732                            
00005732                            ; ---------------------------------------------------------------------------
00005732                            ; Main Special Stage loop
00005732                            ; ---------------------------------------------------------------------------
00005732                            
00005732                            SS_MainLoop:
00005732 6100 BB2C                  		bsr.w	PauseGame
00005736 11FC 000A F62A             		move.b	#$A,(v_vbla_routine).w
0000573C 6100 E2C6                  		bsr.w	WaitForVBla
00005740 6100 F89E                  		bsr.w	MoveSonicInDemo
00005744 31F8 F604 F602             		move.w	(v_jpadhold1).w,(v_jpadhold2).w
0000574A 4EB9 0000 0000             		jsr	(ExecuteObjects).l
00005750 4EB9 0000 0000             		jsr	(BuildSprites).l
00005756 4EB9 0000 0000             		jsr	(SS_ShowLayout).l
0000575C 6100 0000                  		bsr.w	SS_BGAnimate
00005760 4A78 FFF0                  		tst.w	(f_demo).w	; is demo mode on?
00005764 6700                       		beq.s	SS_ChkEnd	; if not, branch
00005766 4A78 F614                  		tst.w	(v_demolength).w ; is there time left on the demo?
0000576A 6700 0000                  		beq.w	SS_ToSegaScreen	; if not, branch
0000576E                            
0000576E                            	SS_ChkEnd:
0000576E 0C38 0000 F600             		cmpi.b	#id_Special,(v_gamemode).w ; is game mode $10 (special stage)?
00005774 6700 FFBC                  		beq.w	SS_MainLoop	; if yes, branch
00005778                            
00005778 4A78 FFF0                  		tst.w	(f_demo).w	; is demo mode on?
0000577C 6600 0000                  		bne.w	SS_ToLevel
00005780 11FC 0000 F600             		move.b	#id_Level,(v_gamemode).w ; set screen mode to $0C (level)
00005786 0C78 0503 FE10             		cmpi.w	#(id_SBZ<<8)+3,(v_zone).w ; is level number higher than FZ?
0000578C 6500                       		blo.s	SS_Finish	; if not, branch
0000578E 4278 FE10                  		clr.w	(v_zone).w	; set to GHZ1
00005792                            
00005792                            SS_Finish:
00005792 31FC 003C F614             		move.w	#60,(v_demolength).w ; set delay time to 1 second
00005798 31FC 003F F626             		move.w	#$3F,(v_pfade_start).w
0000579E 4278 F794                  		clr.w	(v_palchgspeed).w
000057A2                            
000057A2                            	SS_FinLoop:
000057A2 11FC 0016 F62A             		move.b	#$16,(v_vbla_routine).w
000057A8 6100 E25A                  		bsr.w	WaitForVBla
000057AC 6100 F832                  		bsr.w	MoveSonicInDemo
000057B0 31F8 F604 F602             		move.w	(v_jpadhold1).w,(v_jpadhold2).w
000057B6 4EB9 0000 0000             		jsr	(ExecuteObjects).l
000057BC 4EB9 0000 0000             		jsr	(BuildSprites).l
000057C2 4EB9 0000 0000             		jsr	(SS_ShowLayout).l
000057C8 6100 0000                  		bsr.w	SS_BGAnimate
000057CC 5378 F794                  		subq.w	#1,(v_palchgspeed).w
000057D0 6A00                       		bpl.s	loc_47D4
000057D2 31FC 0002 F794             		move.w	#2,(v_palchgspeed).w
000057D8 6100 CAF6                  		bsr.w	WhiteOut_ToWhite
000057DC                            
000057DC                            loc_47D4:
000057DC 4A78 F614                  		tst.w	(v_demolength).w
000057E0 66C0                       		bne.s	SS_FinLoop
000057E2                            
000057E2 46FC 2700                  		disable_ints
000057E6 4DF9 00C0 0004             		lea	(vdp_control_port).l,a6
000057EC 3CBC 8230                  		move.w	#$8200+(vram_fg>>10),(a6) ; set foreground nametable address
000057F0 3CBC 8407                  		move.w	#$8400+(vram_bg>>13),(a6) ; set background nametable address
000057F4 3CBC 9001                  		move.w	#$9001,(a6)		; 64-cell hscroll size
000057F8 6100 B98A                  		bsr.w	ClearScreen
00005806 41F9 0000 0000             		lea	(Nem_TitleCard).l,a0 ; load title card patterns
0000580C 6100 BAF4                  		bsr.w	NemDec
00005810 4EB9 0000 0000             		jsr	(Hud_Base).l
00005816 31FC C800 C8FC             		ResetDMAQueue	
0000581C 46FC 2300                  		enable_ints
00005820 7011                       		moveq	#palid_SSResult,d0
00005822 6100 CC48                  		bsr.w	PalLoad2	; load results screen palette
00005826 7000                       		moveq	#plcid_Main,d0
00005828 6100 BEF6                  		bsr.w	NewPLC
0000582C 7000                       		moveq	#plcid_SSResult,d0
0000582E 6100 BEBE                  		bsr.w	AddPLC		; load results screen patterns
00005832 11FC 0001 FE1F             		move.b	#1,(f_scorecount).w ; update score counter
00005838 11FC 0001 F7D6             		move.b	#1,(f_endactbonus).w ; update ring bonus counter
0000583E 3038 FE20                  		move.w	(v_rings).w,d0
00005842 C0FC 000A                  		mulu.w	#10,d0		; multiply rings by 10
00005846 31C0 F7D4                  		move.w	d0,(v_ringbonus).w ; set rings bonus
00005854                            
00005854 43F8 D000                  		lea	(v_objspace).w,a1
00005858 7000                       		moveq	#0,d0
0000585A 323C 07FF                  		move.w	#$7FF,d1
0000585E                            	SS_EndClrObjRam:
0000585E 22C0                       		move.l	d0,(a1)+
00005860 51C9 FFFC                  		dbf	d1,SS_EndClrObjRam ; clear object RAM
00005864                            
00005864 11FC 0000 D5C0             		move.b	#id_SSResult,(v_objspace+$5C0).w ; load results screen object
0000586A                            
0000586A                            SS_NormalExit:
0000586A 6100 B9F4                  		bsr.w	PauseGame
0000586E 11FC 000C F62A             		move.b	#$C,(v_vbla_routine).w
00005874 6100 E18E                  		bsr.w	WaitForVBla
00005878 4EB9 0000 0000             		jsr	(ExecuteObjects).l
0000587E 4EB9 0000 0000             		jsr	(BuildSprites).l
00005884 6100 BED4                  		bsr.w	RunPLC
00005888 4A78 FE02                  		tst.w	(f_restart).w
0000588C 67DC                       		beq.s	SS_NormalExit
0000588E 4AB8 F680                  		tst.l	(v_plc_buffer).w
00005892 66D6                       		bne.s	SS_NormalExit
0000589C 6100 CA12                  		bsr.w	PaletteWhiteOut
000058A0 4E75                       		rts	
000058A2                            ; ===========================================================================
000058A2                            
000058A2                            SS_ToSegaScreen:
000058A2 11FC 0000 F600             		move.b	#id_Sega,(v_gamemode).w ; goto Sega screen
000058A8 4E75                       		rts
000058AA                            
000058AA 0C38 0000 F600             SS_ToLevel:	cmpi.b	#id_Level,(v_gamemode).w
000058B0 67F0                       		beq.s	SS_ToSegaScreen
000058B2 4E75                       		rts
000058B4                            
000058B4                            ; ---------------------------------------------------------------------------
000058B4                            ; Special stage	background loading subroutine
000058B4                            ; ---------------------------------------------------------------------------
000058B4                            
000058B4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000058B4                            
000058B4                            
000058B4                            SS_BGLoad:
000058B4 43F9 00FF 0000             		lea	($FF0000).l,a1
000058BA 41F9 0000 0000             		lea	(Eni_SSBg1).l,a0 ; load	mappings for the birds and fish
000058C0 303C 4051                  		move.w	#$4051,d0
000058C4 6100 BFC6                  		bsr.w	EniDec
000058C8 263C 5000 0001             		move.l	#$50000001,d3
000058CE 45F9 00FF 0080             		lea	($FF0080).l,a2
000058D4 7E06                       		moveq	#6,d7
000058D6                            
000058D6                            loc_48BE:
000058D6 2003                       		move.l	d3,d0
000058D8 7C03                       		moveq	#3,d6
000058DA 7800                       		moveq	#0,d4
000058DC 0C47 0003                  		cmpi.w	#3,d7
000058E0 6400                       		bhs.s	loc_48CC
000058E2 7801                       		moveq	#1,d4
000058E4                            
000058E4                            loc_48CC:
000058E4 7A07                       		moveq	#7,d5
000058E6                            
000058E6                            loc_48CE:
000058E6 224A                       		movea.l	a2,a1
000058E8 0A04 0001                  		eori.b	#1,d4
000058EC 6600                       		bne.s	loc_48E2
000058EE 0C47 0006                  		cmpi.w	#6,d7
000058F2 6600                       		bne.s	loc_48F2
000058F4 43F9 00FF 0000             		lea	($FF0000).l,a1
000058FA                            
000058FA                            loc_48E2:
000058FA 48E7 F800                  		movem.l	d0-d4,-(sp)
000058FE 7207                       		moveq	#7,d1
00005900 7407                       		moveq	#7,d2
00005902 6100 B9D4                  		bsr.w	TilemapToVRAM
00005906 4CDF 001F                  		movem.l	(sp)+,d0-d4
0000590A                            
0000590A                            loc_48F2:
0000590A 0680 0010 0000             		addi.l	#$100000,d0
00005910 51CD FFD4                  		dbf	d5,loc_48CE
00005914 0680 0380 0000             		addi.l	#$3800000,d0
0000591A 0A04 0001                  		eori.b	#1,d4
0000591E 51CE FFC4                  		dbf	d6,loc_48CC
00005922 0683 1000 0000             		addi.l	#$10000000,d3
00005928 6A00                       		bpl.s	loc_491C
0000592A 4843                       		swap	d3
0000592C 0683 0000 C000             		addi.l	#$C000,d3
00005932 4843                       		swap	d3
00005934                            
00005934                            loc_491C:
00005934 D4FC 0080                  		adda.w	#$80,a2
00005938 51CF FF9C                  		dbf	d7,loc_48BE
0000593C 43F9 00FF 0000             		lea	($FF0000).l,a1
00005942 41F9 0000 0000             		lea	(Eni_SSBg2).l,a0 ; load	mappings for the clouds
00005948 303C 4000                  		move.w	#$4000,d0
0000594C 6100 BF3E                  		bsr.w	EniDec
00005950 43F9 00FF 0000             		lea	($FF0000).l,a1
00005956 203C 4000 0003             		move.l	#$40000003,d0
0000595C 723F                       		moveq	#$3F,d1
0000595E 741F                       		moveq	#$1F,d2
00005960 6100 B976                  		bsr.w	TilemapToVRAM
00005964 43F9 00FF 0000             		lea	($FF0000).l,a1
0000596A 203C 5000 0003             		move.l	#$50000003,d0
00005970 723F                       		moveq	#$3F,d1
00005972 743F                       		moveq	#$3F,d2
00005974 6100 B962                  		bsr.w	TilemapToVRAM
00005978 4E75                       		rts	
0000597A                            ; End of function SS_BGLoad
0000597A                            
0000597A                            ; ---------------------------------------------------------------------------
0000597A                            ; Palette cycling routine - special stage
0000597A                            ; ---------------------------------------------------------------------------
0000597A                            
0000597A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000597A                            
0000597A                            
0000597A                            PalCycle_SS:
0000597A 4A78 F63A                  		tst.w	(f_pause).w
0000597E 6600                       		bne.s	locret_49E6
00005980 5378 F79C                  		subq.w	#1,(v_palss_time).w
00005984 6A00                       		bpl.s	locret_49E6
00005986 4DF9 00C0 0004             		lea	(vdp_control_port).l,a6
0000598C 3038 F79A                  		move.w	(v_palss_num).w,d0
00005990 5278 F79A                  		addq.w	#1,(v_palss_num).w
00005994 0240 001F                  		andi.w	#$1F,d0
00005998 E548                       		lsl.w	#2,d0
0000599A 41F9 0000 0000             		lea	(byte_4A3C).l,a0
000059A0 D0C0                       		adda.w	d0,a0
000059A2 1018                       		move.b	(a0)+,d0
000059A4 6A00                       		bpl.s	loc_4992
000059A6 303C 01FF                  		move.w	#$1FF,d0
000059AA                            
000059AA                            loc_4992:
000059AA 31C0 F79C                  		move.w	d0,(v_palss_time).w
000059AE 7000                       		moveq	#0,d0
000059B0 1018                       		move.b	(a0)+,d0
000059B2 31C0 F7A0                  		move.w	d0,($FFFFF7A0).w
000059B6 43F9 0000 0000             		lea	(byte_4ABC).l,a1
000059BC 43F1 0000                  		lea	(a1,d0.w),a1
000059C0 303C 8200                  		move.w	#-$7E00,d0
000059C4 1019                       		move.b	(a1)+,d0
000059C6 3C80                       		move.w	d0,(a6)
000059C8 11D1 F616                  		move.b	(a1),(v_scrposy_dup).w
000059CC 303C 8400                  		move.w	#-$7C00,d0
000059D0 1018                       		move.b	(a0)+,d0
000059D2 3C80                       		move.w	d0,(a6)
000059D4 23FC 4000 0010 00C0 0004   		move.l	#$40000010,(vdp_control_port).l
000059DE 23F8 F616 00C0 0000        		move.l	(v_scrposy_dup).w,(vdp_data_port).l
000059E6 7000                       		moveq	#0,d0
000059E8 1018                       		move.b	(a0)+,d0
000059EA 6B00                       		bmi.s	loc_49E8
000059EC 43F9 0000 0000             		lea	(Pal_SSCyc1).l,a1
000059F2 D2C0                       		adda.w	d0,a1
000059F4 45F8 FB4E                  		lea	(v_pal_dry+$4E).w,a2
000059F8 24D9                       		move.l	(a1)+,(a2)+
000059FA 24D9                       		move.l	(a1)+,(a2)+
000059FC 24D9                       		move.l	(a1)+,(a2)+
000059FE                            
000059FE                            locret_49E6:
000059FE 4E75                       		rts	
00005A00                            ; ===========================================================================
00005A00                            
00005A00                            loc_49E8:
00005A00 3238 F79E                  		move.w	($FFFFF79E).w,d1
00005A04 0C40 008A                  		cmpi.w	#$8A,d0
00005A08 6500                       		blo.s	loc_49F4
00005A0A 5241                       		addq.w	#1,d1
00005A0C                            
00005A0C                            loc_49F4:
00005A0C C2FC 002A                  		mulu.w	#$2A,d1
00005A10 43F9 0000 0000             		lea	(Pal_SSCyc2).l,a1
00005A16 D2C1                       		adda.w	d1,a1
00005A18 0240 007F                  		andi.w	#$7F,d0
00005A1C 0880 0000                  		bclr	#0,d0
00005A20 6700                       		beq.s	loc_4A18
00005A22 45F8 FB6E                  		lea	(v_pal_dry+$6E).w,a2
00005A26 24D1                       		move.l	(a1),(a2)+
00005A28 24E9 0004                  		move.l	4(a1),(a2)+
00005A2C 24E9 0008                  		move.l	8(a1),(a2)+
00005A30                            
00005A30                            loc_4A18:
00005A30 D2FC 000C                  		adda.w	#$C,a1
00005A34 45F8 FB5A                  		lea	(v_pal_dry+$5A).w,a2
00005A38 0C40 000A                  		cmpi.w	#$A,d0
00005A3C 6500                       		blo.s	loc_4A2E
00005A3E 0440 000A                  		subi.w	#$A,d0
00005A42 45F8 FB7A                  		lea	(v_pal_dry+$7A).w,a2
00005A46                            
00005A46                            loc_4A2E:
00005A46 3200                       		move.w	d0,d1
00005A48 D040                       		add.w	d0,d0
00005A4A D041                       		add.w	d1,d0
00005A4C D2C0                       		adda.w	d0,a1
00005A4E 24D9                       		move.l	(a1)+,(a2)+
00005A50 34D9                       		move.w	(a1)+,(a2)+
00005A52 4E75                       		rts	
00005A54                            ; End of function PalCycle_SS
00005A54                            
00005A54                            ; ===========================================================================
00005A54 0300 0792 0300 0790 0300+  byte_4A3C:	dc.b 3,	0, 7, $92, 3, 0, 7, $90, 3, 0, 7, $8E, 3, 0, 7,	$8C
00005A64                            
00005A64 0300 078B 0300 0780 0300+  		dc.b 3,	0, 7, $8B, 3, 0, 7, $80, 3, 0, 7, $82, 3, 0, 7,	$84
00005A74 0300 0786 0300 0788 0708+  		dc.b 3,	0, 7, $86, 3, 0, 7, $88, 7, 8, 7, 0, 7,	$A, 7, $C
00005A84 FF0C 0718 FF0C 0718 070A+  		dc.b $FF, $C, 7, $18, $FF, $C, 7, $18, 7, $A, 7, $C, 7,	8, 7, 0
00005A94 0300 0688 0300 0686 0300+  		dc.b 3,	0, 6, $88, 3, 0, 6, $86, 3, 0, 6, $84, 3, 0, 6,	$82
00005AA4 0300 0681 0300 068A 0300+  		dc.b 3,	0, 6, $81, 3, 0, 6, $8A, 3, 0, 6, $8C, 3, 0, 6,	$8E
00005AB4 0300 0690 0300 0692 0702+  		dc.b 3,	0, 6, $90, 3, 0, 6, $92, 7, 2, 6, $24, 7, 4, 6,	$30
00005AC4 FF06 063C FF06 063C 0704+  		dc.b $FF, 6, 6,	$3C, $FF, 6, 6,	$3C, 7,	4, 6, $30, 7, 2, 6, $24
00005AD4                            		even
00005AD4 1001 1800 1801 2000 2001+  byte_4ABC:	dc.b $10, 1, $18, 0, $18, 1, $20, 0, $20, 1, $28, 0, $28, 1
00005AE2                            		even
00005AE2                            
00005AE2                            Pal_SSCyc1:	incbin	"palette\Cycle - Special Stage 1.bin"
00005B2A                            		even
00005B2A                            Pal_SSCyc2:	incbin	"palette\Cycle - Special Stage 2.bin"
00005BFC                            		even
00005BFC                            
00005BFC                            ; ---------------------------------------------------------------------------
00005BFC                            ; Subroutine to	make the special stage background animated
00005BFC                            ; ---------------------------------------------------------------------------
00005BFC                            
00005BFC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00005BFC                            
00005BFC                            
00005BFC                            SS_BGAnimate:
00005BFC 3038 F7A0                  		move.w	($FFFFF7A0).w,d0
00005C00 6600                       		bne.s	loc_4BF6
00005C02 31FC 0000 F70C             		move.w	#0,(v_bgscreenposy).w
00005C08 31F8 F70C F618             		move.w	(v_bgscreenposy).w,(v_bgscrposy_dup).w
00005C0E                            
00005C0E                            loc_4BF6:
00005C0E 0C40 0008                  		cmpi.w	#8,d0
00005C12 6400                       		bhs.s	loc_4C4E
00005C14 0C40 0006                  		cmpi.w	#6,d0
00005C18 6600                       		bne.s	loc_4C10
00005C1A 5278 F718                  		addq.w	#1,(v_bg3screenposx).w
00005C1E 5278 F70C                  		addq.w	#1,(v_bgscreenposy).w
00005C22 31F8 F70C F618             		move.w	(v_bgscreenposy).w,(v_bgscrposy_dup).w
00005C28                            
00005C28                            loc_4C10:
00005C28 7000                       		moveq	#0,d0
00005C2A 3038 F708                  		move.w	(v_bgscreenposx).w,d0
00005C2E 4440                       		neg.w	d0
00005C30 4840                       		swap	d0
00005C32 43F9 0000 0000             		lea	(byte_4CCC).l,a1
00005C38 47F8 AA00                  		lea	(v_ngfx_buffer).w,a3
00005C3C 7609                       		moveq	#9,d3
00005C3E                            
00005C3E                            loc_4C26:
00005C3E 302B 0002                  		move.w	2(a3),d0
00005C42 6100 DDF2                  		bsr.w	CalcSine
00005C46 7400                       		moveq	#0,d2
00005C48 1419                       		move.b	(a1)+,d2
00005C4A C1C2                       		muls.w	d2,d0
00005C4C E080                       		asr.l	#8,d0
00005C4E 36C0                       		move.w	d0,(a3)+
00005C50 1419                       		move.b	(a1)+,d2
00005C52 4882                       		ext.w	d2
00005C54 D55B                       		add.w	d2,(a3)+
00005C56 51CB FFE6                  		dbf	d3,loc_4C26
00005C5A 47F8 AA00                  		lea	(v_ngfx_buffer).w,a3
00005C5E 45F9 0000 0000             		lea	(byte_4CB8).l,a2
00005C64 6000                       		bra.s	loc_4C7E
00005C66                            ; ===========================================================================
00005C66                            
00005C66                            loc_4C4E:
00005C66 0C40 000C                  		cmpi.w	#$C,d0
00005C6A 6600                       		bne.s	loc_4C74
00005C6C 5378 F718                  		subq.w	#1,(v_bg3screenposx).w
00005C70 47F8 AB00                  		lea	($FFFFAB00).w,a3
00005C74 243C 0001 8000             		move.l	#$18000,d2
00005C7A 7206                       		moveq	#6,d1
00005C7C                            
00005C7C                            loc_4C64:
00005C7C 2013                       		move.l	(a3),d0
00005C7E 9082                       		sub.l	d2,d0
00005C80 26C0                       		move.l	d0,(a3)+
00005C82 0482 0000 2000             		subi.l	#$2000,d2
00005C88 51C9 FFF2                  		dbf	d1,loc_4C64
00005C8C                            
00005C8C                            loc_4C74:
00005C8C 47F8 AB00                  		lea	($FFFFAB00).w,a3
00005C90 45F9 0000 0000             		lea	(byte_4CC4).l,a2
00005C96                            
00005C96                            loc_4C7E:
00005C96 43F8 CC00                  		lea	(v_hscrolltablebuffer).w,a1
00005C9A 3038 F718                  		move.w	(v_bg3screenposx).w,d0
00005C9E 4440                       		neg.w	d0
00005CA0 4840                       		swap	d0
00005CA2 7600                       		moveq	#0,d3
00005CA4 161A                       		move.b	(a2)+,d3
00005CA6 3438 F70C                  		move.w	(v_bgscreenposy).w,d2
00005CAA 4442                       		neg.w	d2
00005CAC 0242 00FF                  		andi.w	#$FF,d2
00005CB0 E54A                       		lsl.w	#2,d2
00005CB2                            
00005CB2                            loc_4C9A:
00005CB2 301B                       		move.w	(a3)+,d0
00005CB4 544B                       		addq.w	#2,a3
00005CB6 7200                       		moveq	#0,d1
00005CB8 121A                       		move.b	(a2)+,d1
00005CBA 5341                       		subq.w	#1,d1
00005CBC                            
00005CBC                            loc_4CA4:
00005CBC 2380 2000                  		move.l	d0,(a1,d2.w)
00005CC0 5842                       		addq.w	#4,d2
00005CC2 0242 03FC                  		andi.w	#$3FC,d2
00005CC6 51C9 FFF4                  		dbf	d1,loc_4CA4
00005CCA 51CB FFE6                  		dbf	d3,loc_4C9A
00005CCE 4E75                       		rts	
00005CD0                            ; End of function SS_BGAnimate
00005CD0                            
00005CD0                            ; ===========================================================================
00005CD0 0928 1810 2818 1030 1808+  byte_4CB8:	dc.b 9,	$28, $18, $10, $28, $18, $10, $30, $18,	8, $10,	0
00005CDC                            		even
00005CDC 0630 3030 2818 1818        byte_4CC4:	dc.b 6,	$30, $30, $30, $28, $18, $18, $18
00005CE4                            		even
00005CE4 0802 04FF 0203 08FF 0402+  byte_4CCC:	dc.b 8,	2, 4, $FF, 2, 3, 8, $FF, 4, 2, 2, 3, 8,	$FD, 4,	2, 2, 3, 2, $FF
00005CF8                            		even
00005CF8                            
00005CF8                            ; ===========================================================================
00005CF8                            
00005CF8                            ; ---------------------------------------------------------------------------
00005CF8                            ; Continue screen
00005CF8                            ; ---------------------------------------------------------------------------
00005CF8                            
00005CF8                            GM_Continue:
00005CF8 6100 C48C                  		bsr.w	PaletteFadeOut
00005CFC 46FC 2700                  		disable_ints
00005D00 3038 F60C                  		move.w	(v_vdp_buffer1).w,d0
00005D04 0200 00BF                  		andi.b	#$BF,d0
00005D08 33C0 00C0 0004             		move.w	d0,(vdp_control_port).l
00005D0E 4DF9 00C0 0004             		lea	(vdp_control_port).l,a6
00005D14 3CBC 8004                  		move.w	#$8004,(a6)	; 8 colour mode
00005D18 3CBC 8700                  		move.w	#$8700,(a6)	; background colour
00005D1C 6100 B466                  		bsr.w	ClearScreen
00005D20                            
00005D20 43F8 D000                  		lea	(v_objspace).w,a1
00005D24 7000                       		moveq	#0,d0
00005D26 323C 07FF                  		move.w	#$7FF,d1
00005D2A                            	Cont_ClrObjRam:
00005D2A 22C0                       		move.l	d0,(a1)+
00005D2C 51C9 FFFC                  		dbf	d1,Cont_ClrObjRam ; clear object RAM
00005D30                            
00005D3A 41F9 0000 0000             		lea	(Nem_TitleCard).l,a0 ; load title card patterns
00005D40 6100 B5C0                  		bsr.w	NemDec
00005D4E 41F9 0000 0000             		lea	(Nem_ContSonic).l,a0 ; load Sonic patterns
00005D54 6100 B5AC                  		bsr.w	NemDec
00005D62 41F9 0000 0000             		lea	(Nem_MiniSonic).l,a0 ; load continue screen patterns
00005D68 6100 B598                  		bsr.w	NemDec
00005D6C 720A                       		moveq	#10,d1
00005D6E 4EB9 0000 0000             		jsr	(ContScrCounter).l	; run countdown	(start from 10)
00005D74 7012                       		moveq	#palid_Continue,d0
00005D76 6100 C6B8                  		bsr.w	PalLoad1	; load continue	screen palette
00005D82 31FC 0293 F614             		move.w	#659,(v_demolength).w ; set time delay to 11 seconds
00005D88 42B8 F700                  		clr.l	(v_screenposx).w
00005D8C 21FC 0100 0000 F704        		move.l	#$1000000,(v_screenposy).w
00005D94 11FC 0000 D000             		move.b	#id_ContSonic,(v_player).w ; load Sonic object
00005D9A 11FC 0000 D040             		move.b	#id_ContScrItem,(v_objspace+$40).w ; load continue screen objects
00005DA0 11FC 0000 D080             		move.b	#id_ContScrItem,(v_objspace+$80).w
00005DA6 11FC 0003 D098             		move.b	#3,(v_objspace+$80+obPriority).w
00005DAC 11FC 0004 D09A             		move.b	#4,(v_objspace+$80+obFrame).w
00005DB2 11FC 0000 D0C0             		move.b	#id_ContScrItem,(v_objspace+$C0).w
00005DB8 11FC 0004 D0E4             		move.b	#4,(v_objspace+$C0+obRoutine).w
00005DBE 4EB9 0000 0000             		jsr	(ExecuteObjects).l
00005DC4 4EB9 0000 0000             		jsr	(BuildSprites).l
00005DCA 3038 F60C                  		move.w	(v_vdp_buffer1).w,d0
00005DCE 0000 0040                  		ori.b	#$40,d0
00005DD2 33C0 00C0 0004             		move.w	d0,(vdp_control_port).l
00005DD8 6100 C306                  		bsr.w	PaletteFadeIn
00005DDC                            
00005DDC                            ; ---------------------------------------------------------------------------
00005DDC                            ; Continue screen main loop
00005DDC                            ; ---------------------------------------------------------------------------
00005DDC                            
00005DDC                            Cont_MainLoop:
00005DDC 11FC 0016 F62A             		move.b	#$16,(v_vbla_routine).w
00005DE2 6100 DC20                  		bsr.w	WaitForVBla
00005DE6 0C38 0006 D024             		cmpi.b	#6,(v_player+obRoutine).w
00005DEC 6400                       		bhs.s	loc_4DF2
00005DEE 46FC 2700                  		disable_ints
00005DF2 3238 F614                  		move.w	(v_demolength).w,d1
00005DF6 82FC 003C                  		divu.w	#$3C,d1
00005DFA 0281 0000 000F             		andi.l	#$F,d1
00005E00 4EB9 0000 0000             		jsr	(ContScrCounter).l
00005E06 46FC 2300                  		enable_ints
00005E0A                            
00005E0A                            loc_4DF2:
00005E0A 4EB9 0000 0000             		jsr	(ExecuteObjects).l
00005E10 4EB9 0000 0000             		jsr	(BuildSprites).l
00005E16 0C78 0180 D008             		cmpi.w	#$180,(v_player+obX).w ; has Sonic run off screen?
00005E1C 6400                       		bhs.s	Cont_GotoLevel	; if yes, branch
00005E1E 0C38 0006 D024             		cmpi.b	#6,(v_player+obRoutine).w
00005E24 64B6                       		bhs.s	Cont_MainLoop
00005E26 4A78 F614                  		tst.w	(v_demolength).w
00005E2A 6600 FFB0                  		bne.w	Cont_MainLoop
00005E2E 11FC 0000 F600             		move.b	#id_Sega,(v_gamemode).w ; go to Sega screen
00005E34 4E75                       		rts	
00005E36                            ; ===========================================================================
00005E36                            
00005E36                            Cont_GotoLevel:
00005E36 11FC 0000 F600             		move.b	#id_Level,(v_gamemode).w ; set screen mode to $0C (level)
00005E3C 11FC 0003 FE12             		move.b	#3,(v_lives).w	; set lives to 3
00005E42 7000                       		moveq	#0,d0
00005E44 31C0 FE20                  		move.w	d0,(v_rings).w	; clear rings
00005E48 21C0 FE22                  		move.l	d0,(v_time).w	; clear time
00005E4C 21C0 FE26                  		move.l	d0,(v_score).w	; clear score
00005E50 11C0 FE30                  		move.b	d0,(v_lastlamp).w ; clear lamppost count
00005E54 5338 FE18                  		subq.b	#1,(v_continues).w ; subtract 1 from continues
00005E58 4E75                       		rts	
00005E5A                            ; ===========================================================================
00005E5A                            
00005E5A                            		include	"_incObj\80 Continue Screen Elements.asm"
00005E5A                            ; ---------------------------------------------------------------------------
00005E5A                            ; Object 80 - Continue screen elements
00005E5A                            ; ---------------------------------------------------------------------------
00005E5A                            
00005E5A                            ContScrItem:
00005E5A 7000                       		moveq	#0,d0
00005E5C 1028 0024                  		move.b	$24(a0),d0
00005E60 323B 0000                  		move.w	CSI_Index(pc,d0.w),d1
00005E64 4EFB 1000                  		jmp	CSI_Index(pc,d1.w)
00005E68                            ; ===========================================================================
00005E68 0000                       CSI_Index:	dc.w CSI_Main-CSI_Index
00005E6A 0000                       		dc.w CSI_Display-CSI_Index
00005E6C 0000                       		dc.w CSI_MakeMiniSonic-CSI_Index
00005E6E 0000                       		dc.w CSI_ChkDel-CSI_Index
00005E70                            ; ===========================================================================
00005E70                            
00005E70                            CSI_Main:	; Routine 0
00005E70 5428 0024                  		addq.b	#2,obRoutine(a0)
00005E74 217C 0000 0000 0004        		move.l	#Map_ContScr,obMap(a0)
00005E7C 317C 8500 0002             		move.w	#$8500,obGfx(a0)
00005E82 117C 0000 0001             		move.b	#0,obRender(a0)
00005E88 117C 003C 0014             		move.b	#$3C,obActWid(a0)
00005E8E 317C 0120 0008             		move.w	#$120,obX(a0)
00005E94 317C 00C0 000A             		move.w	#$C0,obScreenY(a0)
00005E9A 31FC 0000 FE20             		move.w	#0,(v_rings).w	; clear rings
00005EA0                            
00005EA0                            CSI_Display:	; Routine 2
00005EA0 4EF9 0000 0000             		jmp	(DisplaySprite).l
00005EA6                            ; ===========================================================================
00005EA6                            
00005EA6                            	CSI_MiniSonicPos:
00005EA6 0116 012A 0102 013E 00EE+  		dc.w $116, $12A, $102, $13E, $EE, $152, $DA, $166, $C6
00005EB8 017A 00B2 018E 009E 01A2+  		dc.w $17A, $B2,	$18E, $9E, $1A2, $8A
00005EC4                            
00005EC4                            CSI_MakeMiniSonic:
00005EC4                            		; Routine 4
00005EC4 2248                       		movea.l	a0,a1
00005EC6 45F9 0000 5EA6             		lea	(CSI_MiniSonicPos).l,a2
00005ECC 7200                       		moveq	#0,d1
00005ECE 1238 FE18                  		move.b	(v_continues).w,d1
00005ED2 5501                       		subq.b	#2,d1
00005ED4 6400                       		bcc.s	CSI_MoreThan1
00005ED6 4EF9 0000 0000             		jmp	(DeleteObject).l	; cancel if you have 0-1 continues
00005EDC                            
00005EDC                            	CSI_MoreThan1:
00005EDC 7601                       		moveq	#1,d3
00005EDE 0C01 000E                  		cmpi.b	#14,d1		; do you have fewer than 16 continues
00005EE2 6500                       		bcs.s	CSI_FewerThan16	; if yes, branch
00005EE4                            
00005EE4 7600                       		moveq	#0,d3
00005EE6 720E                       		moveq	#14,d1		; cap at 15 mini-Sonics
00005EE8                            
00005EE8                            	CSI_FewerThan16:
00005EE8 1401                       		move.b	d1,d2
00005EEA 0202 0001                  		andi.b	#1,d2
00005EEE                            
00005EEE                            CSI_MiniSonicLoop:
00005EEE 12BC 0000                  		move.b	#id_ContScrItem,0(a1) ; load mini-Sonic object
00005EF2 335A 0008                  		move.w	(a2)+,obX(a1)	; use above data for x-axis position
00005EF6 4A02                       		tst.b	d2		; do you have an even number of continues?
00005EF8 6700                       		beq.s	CSI_Even	; if yes, branch
00005EFA 0469 000A 0008             		subi.w	#$A,obX(a1)	; shift mini-Sonics slightly to the right
00005F00                            
00005F00                            	CSI_Even:
00005F00 337C 00D0 000A             		move.w	#$D0,obScreenY(a1)
00005F06 137C 0006 001A             		move.b	#6,obFrame(a1)
00005F0C 137C 0006 0024             		move.b	#6,obRoutine(a1)
00005F12 237C 0000 0000 0004        		move.l	#Map_ContScr,obMap(a1)
00005F1A 337C 8551 0002             		move.w	#$8551,obGfx(a1)
00005F20 137C 0000 0001             		move.b	#0,obRender(a1)
00005F26 43E9 0040                  		lea	$40(a1),a1
00005F2A 51C9 FFC2                  		dbf	d1,CSI_MiniSonicLoop ; repeat for number of continues
00005F2E                            
00005F2E 43E9 FFC0                  		lea	-$40(a1),a1
00005F32 1343 0028                  		move.b	d3,obSubtype(a1)
00005F36                            
00005F36                            CSI_ChkDel:	; Routine 6
00005F36 4A28 0028                  		tst.b	obSubtype(a0)	; do you have 16 or more continues?
00005F3A 6700                       		beq.s	CSI_Animate	; if yes, branch
00005F3C 0C38 0006 D024             		cmpi.b	#6,(v_player+obRoutine).w ; is Sonic running?
00005F42 6500                       		bcs.s	CSI_Animate	; if not, branch
00005F44 1038 FE0F                  		move.b	(v_vbla_byte).w,d0
00005F48 0200 0001                  		andi.b	#1,d0
00005F4C 6600                       		bne.s	CSI_Animate
00005F4E 4A78 D010                  		tst.w	(v_player+obVelX).w ; is Sonic running?
00005F52 6600                       		bne.s	CSI_Delete	; if yes, goto delete
00005F54 4E75                       		rts	
00005F56                            
00005F56                            CSI_Animate:
00005F56 1038 FE0F                  		move.b	(v_vbla_byte).w,d0
00005F5A 0200 000F                  		andi.b	#$F,d0
00005F5E 6600                       		bne.s	CSI_Display2
00005F60 0868 0000 001A             		bchg	#0,obFrame(a0)
00005F66                            
00005F66                            	CSI_Display2:
00005F66 4EF9 0000 0000             		jmp	(DisplaySprite).l
00005F6C                            ; ===========================================================================
00005F6C                            
00005F6C                            CSI_Delete:
00005F6C 4EF9 0000 0000             		jmp	(DeleteObject).l
00005F6C 4EF9 0000 0000             		jmp	(DeleteObject).l
00005F72                            		include	"_incObj\81 Continue Screen Sonic.asm"
00005F72                            ; ---------------------------------------------------------------------------
00005F72                            ; Object 81 - Sonic on the continue screen
00005F72                            ; ---------------------------------------------------------------------------
00005F72                            
00005F72                            ContSonic:
00005F72 7000                       		moveq	#0,d0
00005F74 1028 0024                  		move.b	obRoutine(a0),d0
00005F78 323B 0000                  		move.w	CSon_Index(pc,d0.w),d1
00005F7C 4EBB 1000                  		jsr	CSon_Index(pc,d1.w)
00005F80 4EF9 0000 0000             		jmp	(DisplaySprite).l
00005F86                            ; ===========================================================================
00005F86 0000                       CSon_Index:	dc.w CSon_Main-CSon_Index
00005F88 0000                       		dc.w CSon_ChkLand-CSon_Index
00005F8A 0000                       		dc.w CSon_Animate-CSon_Index
00005F8C 0000                       		dc.w CSon_Run-CSon_Index
00005F8E                            ; ===========================================================================
00005F8E                            
00005F8E                            CSon_Main:	; Routine 0
00005F8E 5428 0024                  		addq.b	#2,obRoutine(a0)
00005F92 317C 00A0 0008             		move.w	#$A0,obX(a0)
00005F98 317C 00C0 000C             		move.w	#$C0,obY(a0)
00005F9E 217C 0000 0000 0004        		move.l	#Map_Sonic,obMap(a0)
00005FA6 317C 0780 0002             		move.w	#$780,obGfx(a0)
00005FAC 117C 0004 0001             		move.b	#4,obRender(a0)
00005FB2 317C 0100 0018             		move.w	#$100,obPriority(a0)
00005FB8 117C 0000 001C             		move.b	#id_Float3,obAnim(a0) ; use "floating" animation
00005FBE 317C 0400 0012             		move.w	#$400,obVelY(a0) ; make Sonic fall from above
00005FC4                            
00005FC4                            CSon_ChkLand:	; Routine 2
00005FC4 0C68 01A0 000C             		cmpi.w	#$1A0,obY(a0)	; has Sonic landed yet?
00005FCA 6600                       		bne.s	CSon_ShowFall	; if not, branch
00005FCC                            
00005FCC 5428 0024                  		addq.b	#2,obRoutine(a0)
00005FD0 4268 0012                  		clr.w	obVelY(a0)	; stop Sonic falling
00005FD4 217C 0000 0000 0004        		move.l	#Map_ContScr,obMap(a0)
00005FDC 317C 8500 0002             		move.w	#$8500,obGfx(a0)
00005FE2 117C 0000 001C             		move.b	#id_Walk,obAnim(a0)
00005FE8 6000                       		bra.s	CSon_Animate
00005FEA                            
00005FEA                            CSon_ShowFall:
00005FEA 4EB9 0000 0000             		jsr	(SpeedToPos).l
00005FF0 4EB9 0000 0000             		jsr	(Sonic_Animate).l
00005FF6 4EF9 0000 0000             		jmp	(Sonic_LoadGfx).l
00005FFC                            ; ===========================================================================
00005FFC                            
00005FFC                            CSon_Animate:	; Routine 4
00005FFC 4A38 F605                  		tst.b	(v_jpadpress1).w ; is Start button pressed?
00006000 6B00                       		bmi.s	CSon_GetUp	; if yes, branch
00006002 43F9 0000 0000             		lea	(AniScript_CSon).l,a1
00006008 4EF9 0000 0000             		jmp	(AnimateSprite).l
0000600E                            
0000600E                            CSon_GetUp:
0000600E 5428 0024                  		addq.b	#2,obRoutine(a0)
00006012 217C 0000 0000 0004        		move.l	#Map_Sonic,obMap(a0)
0000601A 317C 0780 0002             		move.w	#$780,obGfx(a0)
00006020 117C 0000 001C             		move.b	#id_Float4,obAnim(a0) ; use "getting up" animation
00006026 4268 0020                  		clr.w	obInertia(a0)
0000602A 5168 000C                  		subq.w	#8,obY(a0)
00006036                            
00006036                            CSon_Run:	; Routine 6
00006036 0C68 0800 0020             		cmpi.w	#$800,obInertia(a0) ; check Sonic's inertia
0000603C 6600                       		bne.s	CSon_AddInertia	; if too low, branch
0000603E 317C 1000 0010             		move.w	#$1000,obVelX(a0) ; move Sonic to the right
00006044 6000                       		bra.s	CSon_ShowRun
00006046                            
00006046                            CSon_AddInertia:
00006046 0668 0020 0020             		addi.w	#$20,obInertia(a0) ; increase inertia
0000604C                            
0000604C                            CSon_ShowRun:
0000604C 4EB9 0000 0000             		jsr	(SpeedToPos).l
00006052 4EB9 0000 0000             		jsr	(Sonic_Animate).l
00006058 4EF9 0000 0000             		jmp	(Sonic_LoadGfx).l
00006058 4EF9 0000 0000             		jmp	(Sonic_LoadGfx).l
0000605E                            		include	"_anim\Continue Screen Sonic.asm"
0000605E                            ; ---------------------------------------------------------------------------
0000605E                            ; Animation script - Sonic on the continue screen
0000605E                            ; ---------------------------------------------------------------------------
0000605E 0000                       AniScript_CSon:	dc.w A_CSon_1-AniScript_CSon
00006060 0401 0101 0102 0202 0303+  A_CSon_1:	dc.b 4,	1, 1, 1, 1, 2, 2, 2, 3,	3, afEnd
0000606C 00                         		even
0000606C 00                         		even
0000606C                            Map_ContScr:	include	"_maps\Continue Screen.asm"
0000606C                            ; ---------------------------------------------------------------------------
0000606C                            ; Sprite mappings - Continue screen
0000606C                            ; ---------------------------------------------------------------------------
0000606C                            Map_ContScr_internal:
0000606C 0000                       		dc.w M_Cont_text-Map_ContScr_internal
0000606E 0000                       		dc.w M_Cont_Sonic1-Map_ContScr_internal
00006070 0000                       		dc.w M_Cont_Sonic2-Map_ContScr_internal
00006072 0000                       		dc.w M_Cont_Sonic3-Map_ContScr_internal
00006074 0000                       		dc.w M_Cont_oval-Map_ContScr_internal
00006076 0000                       		dc.w M_Cont_Mini1-Map_ContScr_internal
00006078 0000                       		dc.w M_Cont_Mini1-Map_ContScr_internal
0000607A 0000                       		dc.w M_Cont_Mini2-Map_ContScr_internal
0000607C 0B                         M_Cont_text:	dc.b $B
0000607D F805 0088 C4               		dc.b $F8, 5, 0,	$88, $C4 ; "CONTINUE", stars and countdown
00006082 F805 00B2 D4               		dc.b $F8, 5, 0,	$B2, $D4
00006087 F805 00AE E4               		dc.b $F8, 5, 0,	$AE, $E4
0000608C F805 00C2 F4               		dc.b $F8, 5, 0,	$C2, $F4
00006091 F801 00A0 04               		dc.b $F8, 1, 0,	$A0, 4
00006096 F805 00AE 0C               		dc.b $F8, 5, 0,	$AE, $C
0000609B F805 00C6 1C               		dc.b $F8, 5, 0,	$C6, $1C
000060A0 F805 0090 2C               		dc.b $F8, 5, 0,	$90, $2C
000060A5 3805 2021 E8               		dc.b $38, 5, $20, $21, $E8
000060AA 3805 2021 08               		dc.b $38, 5, $20, $21, 8
000060AF 3605 01FC F8               		dc.b $36, 5, 1,	$FC, $F8
000060B4 03                         M_Cont_Sonic1:	dc.b 3
000060B5 0405 0015 FC               		dc.b 4,	5, 0, $15, $FC	; Sonic	on floor
000060BA F40A 0006 EC               		dc.b $F4, $A, 0, 6, $EC
000060BF F406 000F 04               		dc.b $F4, 6, 0,	$F, 4
000060C4 03                         M_Cont_Sonic2:	dc.b 3
000060C5 0405 0019 FC               		dc.b 4,	5, 0, $19, $FC	; Sonic	on floor #2
000060CA F40A 0006 EC               		dc.b $F4, $A, 0, 6, $EC
000060CF F406 000F 04               		dc.b $F4, 6, 0,	$F, 4
000060D4 03                         M_Cont_Sonic3:	dc.b 3
000060D5 0405 001D FC               		dc.b 4,	5, 0, $1D, $FC	; Sonic	on floor #3
000060DA F40A 0006 EC               		dc.b $F4, $A, 0, 6, $EC
000060DF F406 000F 04               		dc.b $F4, 6, 0,	$F, 4
000060E4 02                         M_Cont_oval:	dc.b 2
000060E5 6009 2000 E8               		dc.b $60, 9, $20, 0, $E8 ; circle on the floor
000060EA 6009 2800 00               		dc.b $60, 9, $28, 0, 0
000060EF 01                         M_Cont_Mini1:	dc.b 1
000060F0 0006 0012 00               		dc.b 0,	6, 0, $12, 0	; mini Sonic
000060F5 01                         M_Cont_Mini2:	dc.b 1
000060F6 0006 0018 00               		dc.b 0,	6, 0, $18, 0	; mini Sonic #2
000060FC 00                         		even
000060FC 00                         		even
000060FC                            
000060FC                            ; ===========================================================================
000060FC                            ; ---------------------------------------------------------------------------
000060FC                            ; Ending sequence in Green Hill	Zone
000060FC                            ; ---------------------------------------------------------------------------
000060FC                            
000060FC                            GM_Ending:
00006104 6100 C080                  		bsr.w	PaletteFadeOut
00006108                            
00006108 43F8 D000                  		lea	(v_objspace).w,a1
0000610C 7000                       		moveq	#0,d0
0000610E 323C 07FF                  		move.w	#$7FF,d1
00006112                            	End_ClrObjRam:
00006112 22C0                       		move.l	d0,(a1)+
00006114 51C9 FFFC                  		dbf	d1,End_ClrObjRam ; clear object	RAM
00006118                            
00006118 43F8 F628                  		lea	($FFFFF628).w,a1
0000611C 7000                       		moveq	#0,d0
0000611E 323C 0015                  		move.w	#$15,d1
00006122                            	End_ClrRam1:
00006122 22C0                       		move.l	d0,(a1)+
00006124 51C9 FFFC                  		dbf	d1,End_ClrRam1	; clear	variables
00006128                            
00006128 43F8 F700                  		lea	(v_screenposx).w,a1
0000612C 7000                       		moveq	#0,d0
0000612E 323C 003F                  		move.w	#$3F,d1
00006132                            	End_ClrRam2:
00006132 22C0                       		move.l	d0,(a1)+
00006134 51C9 FFFC                  		dbf	d1,End_ClrRam2	; clear	variables
00006138                            
00006138 43F8 FE60                  		lea	(v_oscillate+2).w,a1
0000613C 7000                       		moveq	#0,d0
0000613E 323C 0047                  		move.w	#$47,d1
00006142                            	End_ClrRam3:
00006142 22C0                       		move.l	d0,(a1)+
00006144 51C9 FFFC                  		dbf	d1,End_ClrRam3	; clear	variables
00006148                            
00006148 46FC 2700                  		disable_ints
0000614C 3038 F60C                  		move.w	(v_vdp_buffer1).w,d0
00006150 0200 00BF                  		andi.b	#$BF,d0
00006154 33C0 00C0 0004             		move.w	d0,(vdp_control_port).l
0000615A 6100 B028                  		bsr.w	ClearScreen
0000615E 4DF9 00C0 0004             		lea	(vdp_control_port).l,a6
00006164 3CBC 8B03                  		move.w	#$8B03,(a6)	; line scroll mode
00006168 3CBC 8230                  		move.w	#$8200+(vram_fg>>10),(a6) ; set foreground nametable address
0000616C 3CBC 8407                  		move.w	#$8400+(vram_bg>>13),(a6) ; set background nametable address
00006170 3CBC 857C                  		move.w	#$8500+(vram_sprites>>9),(a6) ; set sprite table address
00006174 3CBC 9001                  		move.w	#$9001,(a6)		; 64-cell hscroll size
00006178 3CBC 8004                  		move.w	#$8004,(a6)		; 8-colour mode
0000617C 3CBC 8720                  		move.w	#$8720,(a6)		; set background colour (line 3; colour 0)
00006180 31FC 8ADF F624             		move.w	#$8A00+223,(v_hbla_hreg).w ; set palette change position (for water)
00006186 3CB8 F624                  		move.w	(v_hbla_hreg).w,(a6)
0000618A 31FC 001E FE14             		move.w	#30,(v_air).w
00006190 31FC 0600 FE10             		move.w	#id_EndZ<<8,(v_zone).w ; set level number to 0600 (extra flowers)
00006196 0C38 0000 FE57             		cmpi.b	#0,(v_emeralds).w ; do you have all 6 emeralds?
0000619C 6700                       		beq.s	End_LoadData	; if yes, branch
0000619E 31FC 0601 FE10             		move.w	#(id_EndZ<<8)+1,(v_zone).w ; set level number to 0601 (no flowers)
000061A4                            
000061A4                            End_LoadData:
000061A4 7000                       		moveq	#plcid_Ending,d0
000061A6 6100 B6B2                  		bsr.w	QuickPLC	; load ending sequence patterns
000061AA 4EB9 0000 0000             		jsr	(Hud_Base).l
000061B0 6100 0000                  		bsr.w	LevelSizeLoad
000061B4 6100 0000                  		bsr.w	DeformLayers
000061B8 08F8 0002 F754             		bset	#2,(v_fg_scroll_flags).w
000061BE 6100 0000                  		bsr.w	LevelDataLoad
000061C2 6100 0000                  		bsr.w	LoadTilesFromStart
000061C6 21FC 0000 0000 F796        		move.l	#Col_GHZ,(v_collindex).w ; load collision index
000061CE 46FC 2300                  		enable_ints
000061D2 41F9 0000 0000             		lea	(Kos_EndFlowers).l,a0 ;	load extra flower patterns
000061D8 43F8 9400                  		lea	($FFFF9400).w,a1 ; RAM address to buffer the patterns
000061DC 6100 B82C                  		bsr.w	KosDec
000061E0 4EB9 0000 0000             		jsr		LoadPlayerPal
000061E6 6100 C248                  		bsr.w	PalLoad1	; load Sonic's palette
000061F2 0838 0006 F604             		btst	#bitA,(v_jpadhold1).w ; is button A pressed?
000061F8 6700                       		beq.s	End_LoadSonic	; if not, branch
000061FA 11FC 0001 FFFA             		move.b	#1,(f_debugmode).w ; enable debug mode
00006200                            
00006200                            End_LoadSonic:
00006200 11FC 0000 D000             		move.b	#id_SonicPlayer,(v_player).w ; load Sonic object
00006206 08F8 0000 D022             		bset	#0,(v_player+obStatus).w ; make Sonic face left
0000620C 11FC 0001 F7CC             		move.b	#1,(f_lockctrl).w ; lock controls
00006212 31FC 0400 F602             		move.w	#(btnL<<8),(v_jpadhold2).w ; move Sonic to the left
00006218 31FC F800 D020             		move.w	#$F800,(v_player+obInertia).w ; set Sonic's speed
0000621E 11FC 0000 D040             		move.b	#id_HUD,(v_objspace+$40).w ; load HUD object
00006224 4EB9 0000 0000             		jsr	(ObjPosLoad).l
0000622A 4EB9 0000 0000             		jsr	(ExecuteObjects).l
00006230 4EB9 0000 0000             		jsr	(BuildSprites).l
00006236 7000                       		moveq	#0,d0
00006238 31C0 FE20                  		move.w	d0,(v_rings).w
0000623C 21C0 FE22                  		move.l	d0,(v_time).w
00006240 11C0 FE1B                  		move.b	d0,(v_lifecount).w
00006244 11C0 FE2C                  		move.b	d0,(v_shield).w
00006248 11C0 FE2D                  		move.b	d0,(v_invinc).w
0000624C 11C0 FE2E                  		move.b	d0,(v_shoes).w
00006250 11C0 FE2F                  		move.b	d0,($FFFFFE2F).w
00006254 31C0 FE08                  		move.w	d0,(v_debuguse).w
00006258 31C0 FE02                  		move.w	d0,(f_restart).w
0000625C 31C0 FE04                  		move.w	d0,(v_framecount).w
00006260 6100 EEC6                  		bsr.w	OscillateNumInit
00006264 11FC 0001 FE1F             		move.b	#1,(f_scorecount).w
0000626A 11FC 0001 FE1D             		move.b	#1,(f_ringcount).w
00006270 11FC 0000 FE1E             		move.b	#0,(f_timecount).w
00006276 31FC 0708 F614             		move.w	#1800,(v_demolength).w
0000627C 11FC 0018 F62A             		move.b	#$18,(v_vbla_routine).w
00006282 6100 D780                  		bsr.w	WaitForVBla
00006286 3038 F60C                  		move.w	(v_vdp_buffer1).w,d0
0000628A 0000 0040                  		ori.b	#$40,d0
0000628E 33C0 00C0 0004             		move.w	d0,(vdp_control_port).l
00006294 31FC 003F F626             		move.w	#$3F,(v_pfade_start).w
0000629A 6100 BE44                  		bsr.w	PaletteFadeIn
0000629E                            
0000629E                            ; ---------------------------------------------------------------------------
0000629E                            ; Main ending sequence loop
0000629E                            ; ---------------------------------------------------------------------------
0000629E                            
0000629E                            End_MainLoop:
0000629E 6100 AFC0                  		bsr.w	PauseGame
000062A2 11FC 0018 F62A             		move.b	#$18,(v_vbla_routine).w
000062A8 6100 D75A                  		bsr.w	WaitForVBla
000062AC 5278 FE04                  		addq.w	#1,(v_framecount).w
000062B0 6100 0000                  		bsr.w	End_MoveSonic
000062B4 4EB9 0000 0000             		jsr	(ExecuteObjects).l
000062BA 6100 0000                  		bsr.w	DeformLayers
000062BE 4EB9 0000 0000             		jsr	(BuildSprites).l
000062C4 4EB9 0000 0000             		jsr	(ObjPosLoad).l
000062CA 6100 BA06                  		bsr.w	PaletteCycle
000062CE 6100 EEAE                  		bsr.w	OscillateNumDo
000062D2 6100 EF3A                  		bsr.w	SynchroAnimate
000062D6 0C38 0000 F600             		cmpi.b	#id_Ending,(v_gamemode).w ; is game mode $18 (ending)?
000062DC 6700                       		beq.s	End_ChkEmerald	; if yes, branch
000062DE                            
000062DE 11FC 0000 F600             		move.b	#id_Credits,(v_gamemode).w ; goto credits
000062EC 31FC 0000 FFF4             		move.w	#0,(v_creditsnum).w ; set credits index number to 0
000062F2 4E75                       		rts	
000062F4                            ; ===========================================================================
000062F4                            
000062F4                            End_ChkEmerald:
000062F4 4A78 FE02                  		tst.w	(f_restart).w	; has Sonic released the emeralds?
000062F8 6700 FFA4                  		beq.w	End_MainLoop	; if not, branch
000062FC                            
000062FC 4278 FE02                  		clr.w	(f_restart).w
00006300 31FC 003F F626             		move.w	#$3F,(v_pfade_start).w
00006306 4278 F794                  		clr.w	(v_palchgspeed).w
0000630A                            
0000630A                            	End_AllEmlds:
0000630A 6100 AF54                  		bsr.w	PauseGame
0000630E 11FC 0018 F62A             		move.b	#$18,(v_vbla_routine).w
00006314 6100 D6EE                  		bsr.w	WaitForVBla
00006318 5278 FE04                  		addq.w	#1,(v_framecount).w
0000631C 6100 0000                  		bsr.w	End_MoveSonic
00006320 4EB9 0000 0000             		jsr	(ExecuteObjects).l
00006326 6100 0000                  		bsr.w	DeformLayers
0000632A 4EB9 0000 0000             		jsr	(BuildSprites).l
00006330 4EB9 0000 0000             		jsr	(ObjPosLoad).l
00006336 6100 EE46                  		bsr.w	OscillateNumDo
0000633A 6100 EED2                  		bsr.w	SynchroAnimate
0000633E 5378 F794                  		subq.w	#1,(v_palchgspeed).w
00006342 6A00                       		bpl.s	End_SlowFade
00006344 31FC 0002 F794             		move.w	#2,(v_palchgspeed).w
0000634A 6100 BF84                  		bsr.w	WhiteOut_ToWhite
0000634E                            
0000634E                            	End_SlowFade:
0000634E 4A78 FE02                  		tst.w	(f_restart).w
00006352 6700 FFB6                  		beq.w	End_AllEmlds
00006356 4278 FE02                  		clr.w	(f_restart).w
0000635A 31FC 2829 A480             		move.w	#$2829,(v_lvllayout+$80).w ; modify level layout
00006360 4BF9 00C0 0004             		lea	(vdp_control_port).l,a5
00006366 4DF9 00C0 0000             		lea	(vdp_data_port).l,a6
0000636C 47F8 F700                  		lea	(v_screenposx).w,a3
00006370 49F8 A400                  		lea	(v_lvllayout).w,a4
00006374 343C 4000                  		move.w	#$4000,d2
00006378 6100 0000                  		bsr.w	DrawChunks
0000637C 7013                       		moveq	#palid_Ending,d0
0000637E 6100 C0B0                  		bsr.w	PalLoad1	; load ending palette
00006382 6100 BE80                  		bsr.w	PaletteWhiteIn
00006386 6000 FF16                  		bra.w	End_MainLoop
0000638A                            
0000638A                            ; ---------------------------------------------------------------------------
0000638A                            ; Subroutine controlling Sonic on the ending sequence
0000638A                            ; ---------------------------------------------------------------------------
0000638A                            
0000638A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000638A                            
0000638A                            
0000638A                            End_MoveSonic:
0000638A 1038 F7D7                  		move.b	(v_sonicend).w,d0
0000638E 6600                       		bne.s	End_MoveSon2
00006390 0C78 0090 D008             		cmpi.w	#$90,(v_player+obX).w ; has Sonic passed $90 on x-axis?
00006396 6400                       		bhs.s	End_MoveSonExit	; if not, branch
00006398                            
00006398 5438 F7D7                  		addq.b	#2,(v_sonicend).w
0000639C 11FC 0001 F7CC             		move.b	#1,(f_lockctrl).w ; lock player's controls
000063A2 31FC 0800 F602             		move.w	#(btnR<<8),(v_jpadhold2).w ; move Sonic to the right
000063A8 4E75                       		rts	
000063AA                            ; ===========================================================================
000063AA                            
000063AA                            End_MoveSon2:
000063AA 5500                       		subq.b	#2,d0
000063AC 6600                       		bne.s	End_MoveSon3
000063AE 0C78 00A0 D008             		cmpi.w	#$A0,(v_player+obX).w ; has Sonic passed $A0 on x-axis?
000063B4 6500                       		blo.s	End_MoveSonExit	; if not, branch
000063B6                            
000063B6 5438 F7D7                  		addq.b	#2,(v_sonicend).w
000063BA 7000                       		moveq	#0,d0
000063BC 11C0 F7CC                  		move.b	d0,(f_lockctrl).w
000063C0 31C0 F602                  		move.w	d0,(v_jpadhold2).w ; stop Sonic moving
000063C4 31C0 D020                  		move.w	d0,(v_player+obInertia).w
000063C8 11FC 0081 F7C8             		move.b	#$81,(f_lockmulti).w ; lock controls & position
000063CE 11FC 0003 D01A             		move.b	#3,(v_player+obFrame).w
000063D4 31FC 0000 D01C             		move.w	#(id_Wait<<8)+id_Wait,(v_player+obAnim).w ; use "standing" animation
000063DA 11FC 0003 D01E             		move.b	#3,(v_player+obTimeFrame).w
000063E0 4E75                       		rts	
000063E2                            ; ===========================================================================
000063E2                            
000063E2                            End_MoveSon3:
000063E2 5500                       		subq.b	#2,d0
000063E4 6600                       		bne.s	End_MoveSonExit
000063E6 5438 F7D7                  		addq.b	#2,(v_sonicend).w
000063EA 31FC 00A0 D008             		move.w	#$A0,(v_player+obX).w
000063F0 11FC 0000 D000             		move.b	#id_EndSonic,(v_player).w ; load Sonic ending sequence object
000063F6 4278 D024                  		clr.w	(v_player+obRoutine).w
000063FA                            
000063FA                            End_MoveSonExit:
000063FA 4E75                       		rts	
000063FC                            ; End of function End_MoveSonic
000063FC                            
000063FC                            ; ===========================================================================
000063FC                            
000063FC                            		include	"_incObj\87 Ending Sequence Sonic.asm"
000063FC                            ; ---------------------------------------------------------------------------
000063FC                            ; Object 87 - Sonic on ending sequence
000063FC                            ; ---------------------------------------------------------------------------
000063FC                            
000063FC                            EndSonic:
000063FC 7000                       		moveq	#0,d0
000063FE 1028 0025                  		move.b	ob2ndRout(a0),d0
00006402 323B 0000                  		move.w	ESon_Index(pc,d0.w),d1
00006406 4EBB 1000                  		jsr	ESon_Index(pc,d1.w)
0000640A 4EF9 0000 0000             		jmp	(DisplaySprite).l
00006410                            ; ===========================================================================
00006410 0000 0000                  ESon_Index:	dc.w ESon_Main-ESon_Index, ESon_MakeEmeralds-ESon_Index
00006414 0000 0000                  		dc.w Obj87_Animate-ESon_Index,	Obj87_LookUp-ESon_Index
00006418 0000 0000                  		dc.w Obj87_ClrObjRam-ESon_Index, Obj87_Animate-ESon_Index
0000641C 0000 0000                  		dc.w Obj87_MakeLogo-ESon_Index, Obj87_Animate-ESon_Index
00006420 0000 0000                  		dc.w Obj87_Leap-ESon_Index, Obj87_Animate-ESon_Index
00006424                            
00006424 =00000030                  eson_time:	equ $30	; time to wait between events
00006424                            ; ===========================================================================
00006424                            
00006424                            ESon_Main:	; Routine 0
00006424 0C38 0006 FE57             		cmpi.b	#6,(v_emeralds).w ; do you have all 6 emeralds?
0000642A 6700                       		beq.s	ESon_Main2	; if yes, branch
0000642C 0628 0010 0025             		addi.b	#$10,ob2ndRout(a0) ; else, skip emerald sequence
00006432 317C 00D8 0030             		move.w	#216,eson_time(a0)
00006438 4E75                       		rts	
0000643A                            ; ===========================================================================
0000643A                            
0000643A                            ESon_Main2:
0000643A 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0000643E 217C 0000 0000 0004        		move.l	#Map_ESon,obMap(a0)
00006446 317C 03E1 0002             		move.w	#$3E1,obGfx(a0)
0000644C 117C 0004 0001             		move.b	#4,obRender(a0)
00006452 4228 0022                  		clr.b	obStatus(a0)
00006456 317C 0100 0018             		move.w	#$100,obPriority(a0)
0000645C 117C 0000 001A             		move.b	#0,obFrame(a0)
00006462 317C 0050 0030             		move.w	#80,eson_time(a0) ; set duration for Sonic to pause
00006468                            
00006468                            ESon_MakeEmeralds:
00006468                            		; Routine 2
00006468 5368 0030                  		subq.w	#1,eson_time(a0) ; subtract 1 from duration
0000646C 6600                       		bne.s	ESon_Wait
0000646E 5428 0025                  		addq.b	#2,ob2ndRout(a0)
00006472 317C 0001 001C             		move.w	#1,obAnim(a0)
00006478 11FC 0000 D400             		move.b	#id_EndChaos,(v_objspace+$400).w ; load chaos emeralds objects
0000647E                            
0000647E                            	ESon_Wait:
0000647E 4E75                       		rts	
00006480                            ; ===========================================================================
00006480                            
00006480                            Obj87_LookUp:	; Routine 6
00006480 0C79 2000 00FF D43C        		cmpi.w	#$2000,((v_objspace&$FFFFFF)+$400+$3C).l
00006488 6600                       		bne.s	locret_5480
0000648A 31FC 0001 FE02             		move.w	#1,(f_restart).w ; set level to	restart	(causes	flash)
00006490 317C 005A 0030             		move.w	#90,eson_time(a0)
00006496 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0000649A                            
0000649A                            locret_5480:
0000649A 4E75                       		rts	
0000649C                            ; ===========================================================================
0000649C                            
0000649C                            Obj87_ClrObjRam:
0000649C                            		; Routine 8
0000649C 5368 0030                  		subq.w	#1,eson_time(a0)
000064A0 6600                       		bne.s	ESon_Wait2
000064A2 43F8 D400                  		lea	(v_objspace+$400).w,a1
000064A6 323C 00FF                  		move.w	#$FF,d1
000064AA                            
000064AA                            Obj87_ClrLoop:
000064AA 4299                       		clr.l	(a1)+
000064AC 51C9 FFFC                  		dbf	d1,Obj87_ClrLoop ; clear the object RAM
000064B0 31FC 0001 FE02             		move.w	#1,(f_restart).w
000064B6 5428 0025                  		addq.b	#2,ob2ndRout(a0)
000064BA 117C 0001 001C             		move.b	#1,obAnim(a0)
000064C0 317C 003C 0030             		move.w	#60,eson_time(a0)
000064C6                            
000064C6                            ESon_Wait2:
000064C6 4E75                       		rts	
000064C8                            ; ===========================================================================
000064C8                            
000064C8                            Obj87_MakeLogo:	; Routine $C
000064C8 5368 0030                  		subq.w	#1,eson_time(a0)
000064CC 6600                       		bne.s	ESon_Wait3
000064CE 5428 0025                  		addq.b	#2,ob2ndRout(a0)
000064D2 317C 00B4 0030             		move.w	#180,eson_time(a0)
000064D8 117C 0002 001C             		move.b	#2,obAnim(a0)
000064DE 11FC 0000 D400             		move.b	#id_EndSTH,(v_objspace+$400).w ; load "SONIC THE HEDGEHOG" object
000064E4                            
000064E4                            ESon_Wait3:
000064E4 4E75                       		rts	
000064E6                            ; ===========================================================================
000064E6                            
000064E6                            Obj87_Animate:	; Rountine 4, $A, $E, $12
000064E6 43F9 0000 0000             		lea	(AniScript_ESon).l,a1
000064EC 4EF9 0000 0000             		jmp	(AnimateSprite).l
000064F2                            ; ===========================================================================
000064F2                            
000064F2                            Obj87_Leap:	; Routine $10
000064F2 5368 0030                  		subq.w	#1,eson_time(a0)
000064F6 6600                       		bne.s	ESon_Wait4
000064F8 5428 0025                  		addq.b	#2,ob2ndRout(a0)
000064FC 217C 0000 0000 0004        		move.l	#Map_ESon,obMap(a0)
00006504 317C 03E1 0002             		move.w	#$3E1,obGfx(a0)
0000650A 117C 0004 0001             		move.b	#4,obRender(a0)
00006510 4228 0022                  		clr.b	obStatus(a0)
00006514 317C 0100 0018             		move.w	#$100,obPriority(a0)
0000651A 117C 0005 001A             		move.b	#5,obFrame(a0)
00006520 117C 0002 001C             		move.b	#2,obAnim(a0)	; use "leaping"	animation
00006526 11FC 0000 D400             		move.b	#id_EndSTH,(v_objspace+$400).w ; load "SONIC THE HEDGEHOG" object
0000652C 60B8                       		bra.s	Obj87_Animate
0000652E                            ; ===========================================================================
0000652E                            
0000652E                            ESon_Wait4:
0000652E 4E75                       		rts	
0000652E 4E75                       		rts	
00006530                            		include "_anim\Ending Sequence Sonic.asm"
00006530                            ; ---------------------------------------------------------------------------
00006530                            ; Animation script - Sonic on the ending sequence
00006530                            ; ---------------------------------------------------------------------------
00006530 0000                       AniScript_ESon:	dc.w byte_551C-AniScript_ESon
00006532 0000                       		dc.w byte_552A-AniScript_ESon
00006534 0000                       		dc.w byte_5534-AniScript_ESon
00006536 0301 0001 0001 0001 0001+  byte_551C:	dc.b 3,	1, 0, 1, 0, 1, 0, 1, 0,	1, 0, 1, 2, $FA
00006544 0503 0403 0403 0403 FA00   byte_552A:	dc.b 5,	3, 4, 3, 4, 3, 4, 3, $FA, 0
0000654E 0305 0505 0607 FE01        byte_5534:	dc.b 3,	5, 5, 5, 6, 7, $FE, 1
00006556                            		even
00006556                            		even
00006556                            		include	"_incObj\88 Ending Sequence Emeralds.asm"
00006556                            ; ---------------------------------------------------------------------------
00006556                            ; Object 88 - chaos emeralds on	the ending sequence
00006556                            ; ---------------------------------------------------------------------------
00006556                            
00006556                            EndChaos:
00006556 7000                       		moveq	#0,d0
00006558 1028 0024                  		move.b	obRoutine(a0),d0
0000655C 323B 0000                  		move.w	ECha_Index(pc,d0.w),d1
00006560 4EBB 1000                  		jsr	ECha_Index(pc,d1.w)
00006564 4EF9 0000 0000             		jmp	(DisplaySprite).l
0000656A                            ; ===========================================================================
0000656A 0000                       ECha_Index:	dc.w ECha_Main-ECha_Index
0000656C 0000                       		dc.w ECha_Move-ECha_Index
0000656E                            
0000656E =00000038                  echa_origX:	equ $38	; x-axis centre of emerald circle (2 bytes)
0000656E =0000003A                  echa_origY:	equ $3A	; y-axis centre of emerald circle (2 bytes)
0000656E =0000003C                  echa_radius:	equ $3C	; radius (2 bytes)
0000656E =0000003E                  echa_angle:	equ $3E	; angle for rotation (2 bytes)
0000656E                            ; ===========================================================================
0000656E                            
0000656E                            ECha_Main:	; Routine 0
0000656E 0C38 0002 D01A             		cmpi.b	#2,(v_player+obFrame).w
00006574 6700                       		beq.s	ECha_CreateEms
00006576 588F                       		addq.l	#4,sp
00006578 4E75                       		rts	
0000657A                            ; ===========================================================================
0000657A                            
0000657A                            ECha_CreateEms:
0000657A 3178 D008 0008             		move.w	(v_player+obX).w,obX(a0) ; match X position with Sonic
00006580 3178 D00C 000C             		move.w	(v_player+obY).w,obY(a0) ; match Y position with Sonic
00006586 2248                       		movea.l	a0,a1
00006588 7600                       		moveq	#0,d3
0000658A 7401                       		moveq	#1,d2
0000658C 7205                       		moveq	#5,d1
0000658E                            
0000658E                            	ECha_LoadLoop:
0000658E 12BC 0000                  		move.b	#id_EndChaos,(a1) ; load chaos emerald object
00006592 5429 0024                  		addq.b	#2,obRoutine(a1)
00006596 237C 0000 0000 0004        		move.l	#Map_ECha,obMap(a1)
0000659E 337C 03C5 0002             		move.w	#$3C5,obGfx(a1)
000065A4 137C 0004 0001             		move.b	#4,obRender(a1)
000065AA 337C 0080 0018             		move.w	#$80,obPriority(a1)
000065B0 3368 0008 0038             		move.w	obX(a0),echa_origX(a1)
000065B6 3368 000C 003A             		move.w	obY(a0),echa_origY(a1)
000065BC 1342 001C                  		move.b	d2,obAnim(a1)
000065C0 1342 001A                  		move.b	d2,obFrame(a1)
000065C4 5202                       		addq.b	#1,d2
000065C6 1343 0026                  		move.b	d3,obAngle(a1)
000065CA 0603 002A                  		addi.b	#$100/6,d3	; angle between each emerald
000065CE 43E9 0040                  		lea	$40(a1),a1
000065D2 51C9 FFBA                  		dbf	d1,ECha_LoadLoop ; repeat 5 more times
000065D6                            
000065D6                            ECha_Move:	; Routine 2
000065D6 3028 003E                  		move.w	echa_angle(a0),d0
000065DA D168 0026                  		add.w	d0,obAngle(a0)
000065DE 1028 0026                  		move.b	obAngle(a0),d0
000065E2 4EB9 0000 3A36             		jsr	(CalcSine).l
000065E8 7800                       		moveq	#0,d4
000065EA 1828 003C                  		move.b	echa_radius(a0),d4
000065EE C3C4                       		muls.w	d4,d1
000065F0 E081                       		asr.l	#8,d1
000065F2 C1C4                       		muls.w	d4,d0
000065F4 E080                       		asr.l	#8,d0
000065F6 D268 0038                  		add.w	echa_origX(a0),d1
000065FA D068 003A                  		add.w	echa_origY(a0),d0
000065FE 3141 0008                  		move.w	d1,obX(a0)
00006602 3140 000C                  		move.w	d0,obY(a0)
00006606                            
00006606                            	ECha_Expand:
00006606 0C68 2000 003C             		cmpi.w	#$2000,echa_radius(a0)
0000660C 6700                       		beq.s	ECha_Rotate
0000660E 0668 0020 003C             		addi.w	#$20,echa_radius(a0) ; expand circle of emeralds
00006614                            
00006614                            	ECha_Rotate:
00006614 0C68 2000 003E             		cmpi.w	#$2000,echa_angle(a0)
0000661A 6700                       		beq.s	ECha_Rise
0000661C 0668 0020 003E             		addi.w	#$20,echa_angle(a0) ; move emeralds around the centre
00006622                            
00006622                            	ECha_Rise:
00006622 0C68 0140 003A             		cmpi.w	#$140,echa_origY(a0)
00006628 6700                       		beq.s	ECha_End
0000662A 5368 003A                  		subq.w	#1,echa_origY(a0) ; make circle rise
0000662E                            
0000662E                            ECha_End:
0000662E 4E75                       		rts	
0000662E 4E75                       		rts	
00006630                            		include	"_incObj\89 Ending Sequence STH.asm"
00006630                            ; ---------------------------------------------------------------------------
00006630                            ; Object 89 - "SONIC THE HEDGEHOG" text	on the ending sequence
00006630                            ; ---------------------------------------------------------------------------
00006630                            
00006630                            EndSTH:
00006630 7000                       		moveq	#0,d0
00006632 1028 0024                  		move.b	$24(a0),d0
00006636 323B 0000                  		move.w	ESth_Index(pc,d0.w),d1
0000663A 4EBB 1000                  		jsr	ESth_Index(pc,d1.w)
0000663E 4EF9 0000 0000             		jmp	(DisplaySprite).l
00006644                            ; ===========================================================================
00006644 0000                       ESth_Index:	dc.w ESth_Main-ESth_Index
00006646 0000                       		dc.w ESth_Move-ESth_Index
00006648 0000                       		dc.w ESth_GotoCredits-ESth_Index
0000664A                            
0000664A =00000030                  esth_time:	equ $30		; time until exit
0000664A                            ; ===========================================================================
0000664A                            
0000664A                            ESth_Main:	; Routine 0
0000664A 5428 0024                  		addq.b	#2,obRoutine(a0)
0000664E 317C FFE0 0008             		move.w	#-$20,obX(a0)	; object starts	outside	the level boundary
00006654 317C 00D8 000A             		move.w	#$D8,obScreenY(a0)
0000665A 217C 0000 0000 0004        		move.l	#Map_ESTH,obMap(a0)
00006662 317C 05C5 0002             		move.w	#$5C5,obGfx(a0)
00006668 117C 0000 0001             		move.b	#0,obRender(a0)
0000666E 317C 0000 0018             		move.w	#0,obPriority(a0)
00006674                            
00006674                            ESth_Move:	; Routine 2
00006674 0C68 00C0 0008             		cmpi.w	#$C0,obX(a0)	; has object reached $C0?
0000667A 6700                       		beq.s	ESth_Delay	; if yes, branch
0000667C 0668 0010 0008             		addi.w	#$10,obX(a0)	; move object to the right
00006682 4E75                       		rts
00006684                            
00006684                            ESth_Delay:
00006684 5428 0024                  		addq.b	#2,obRoutine(a0)
00006688 317C 012C 0030             		move.w	#300,esth_time(a0) ; set duration for delay (5 seconds)
0000668E                            
0000668E                            ESth_GotoCredits:
0000668E                            		; Routine 4
0000668E 5368 0030                  		subq.w	#1,esth_time(a0) ; subtract 1 from duration
00006692 6A00                       		bpl.s	ESth_Wait
00006694 11FC 0000 F600             		move.b	#id_Credits,(v_gamemode).w ; exit to credits
0000669A                            
0000669A                            	ESth_Wait:
0000669A 4E75                       		rts
0000669C                            Map_ESon:	include	"_maps\Ending Sequence Sonic.asm"
0000669C                            ; ---------------------------------------------------------------------------
0000669C                            ; Sprite mappings - Sonic on the ending	sequence
0000669C                            ; ---------------------------------------------------------------------------
0000669C                            Map_ESon_internal:
0000669C 0000                       		dc.w M_ESon_Hold1-Map_ESon_internal
0000669E 0000                       		dc.w M_ESon_Hold2-Map_ESon_internal
000066A0 0000                       		dc.w M_ESon_Up-Map_ESon_internal
000066A2 0000                       		dc.w M_ESon_Conf1-Map_ESon_internal
000066A4 0000                       		dc.w M_ESon_Conf2-Map_ESon_internal
000066A6 0000                       		dc.w M_ESon_Leap1-Map_ESon_internal
000066A8 0000                       		dc.w M_ESon_Leap2-Map_ESon_internal
000066AA 0000                       		dc.w M_ESon_Leap3-Map_ESon_internal
000066AC 02                         M_ESon_Hold1:	dc.b 2
000066AD EC0B 0000 F8               		dc.b $EC, $B, 0, 0, $F8	; holding emeralds
000066B2 0C0C 000C F0               		dc.b $C, $C, 0,	$C, $F0
000066B7 03                         M_ESon_Hold2:	dc.b 3
000066B8 FC0D 0010 F0               		dc.b $FC, $D, 0, $10, $F0 ; holding emeralds (glowing)
000066BD EC0B 0000 F8               		dc.b $EC, $B, 0, 0, $F8
000066C2 0C0C 000C F0               		dc.b $C, $C, 0,	$C, $F0
000066C7 02                         M_ESon_Up:	dc.b 2
000066C8 EC09 0018 F8               		dc.b $EC, 9, 0,	$18, $F8 ; looking up
000066CD FC0E 001E F0               		dc.b $FC, $E, 0, $1E, $F0
000066D2 02                         M_ESon_Conf1:	dc.b 2
000066D3 EC09 002A F8               		dc.b $EC, 9, 0,	$2A, $F8 ; confused
000066D8 FC0E 0030 F0               		dc.b $FC, $E, 0, $30, $F0
000066DD 02                         M_ESon_Conf2:	dc.b 2
000066DE EC09 082A F0               		dc.b $EC, 9, 8,	$2A, $F0 ; confused #2
000066E3 FC0E 0830 F0               		dc.b $FC, $E, 8, $30, $F0
000066E8 03                         M_ESon_Leap1:	dc.b 3
000066E9 EC06 003C F0               		dc.b $EC, 6, 0,	$3C, $F0 ; leaping
000066EE EC06 083C 00               		dc.b $EC, 6, 8,	$3C, 0
000066F3 040D 0042 F0               		dc.b 4,	$D, 0, $42, $F0
000066F8 07                         M_ESon_Leap2:	dc.b 7
000066F9 B20C 004A F8               		dc.b $B2, $C, 0, $4A, $F8 ; leaping #2
000066FE BA0F 004E F0               		dc.b $BA, $F, 0, $4E, $F0
00006703 BA05 005E 10               		dc.b $BA, 5, 0,	$5E, $10
00006708 CA02 0062 10               		dc.b $CA, 2, 0,	$62, $10
0000670D DA0C 0065 F0               		dc.b $DA, $C, 0, $65, $F0
00006712 E208 0069 F8               		dc.b $E2, 8, 0,	$69, $F8
00006717 EA05 006C F8               		dc.b $EA, 5, 0,	$6C, $F8
0000671C 18                         M_ESon_Leap3:	dc.b $18
0000671D 800F 0070 F8               		dc.b $80, $F, 0, $70, $F8 ; leaping #3
00006722 900B 0080 E0               		dc.b $90, $B, 0, $80, $E0
00006727 900B 008C 18               		dc.b $90, $B, 0, $8C, $18
0000672C 980B 0098 30               		dc.b $98, $B, 0, $98, $30
00006731 A00F 00A4 58               		dc.b $A0, $F, 0, $A4, $58
00006736 8800 00B4 F0               		dc.b $88, 0, 0,	$B4, $F0
0000673B 8005 00B5 18               		dc.b $80, 5, 0,	$B5, $18
00006740 A00F 00B9 F8               		dc.b $A0, $F, 0, $B9, $F8
00006745 B00B 00C9 E0               		dc.b $B0, $B, 0, $C9, $E0
0000674A B80F 00D5 38               		dc.b $B8, $F, 0, $D5, $38
0000674F A805 00E5 48               		dc.b $A8, 5, 0,	$E5, $48
00006754 C002 00E9 58               		dc.b $C0, 2, 0,	$E9, $58
00006759 C00F 00EC F8               		dc.b $C0, $F, 0, $EC, $F8
0000675E B80F 00FC 18               		dc.b $B8, $F, 0, $FC, $18
00006763 B008 010C 18               		dc.b $B0, 8, 1,	$C, $18
00006768 D80D 010F 30               		dc.b $D8, $D, 1, $F, $30
0000676D D808 0117 18               		dc.b $D8, 8, 1,	$17, $18
00006772 D80F 011A D8               		dc.b $D8, $F, 1, $1A, $D8
00006777 E00D 012A F8               		dc.b $E0, $D, 1, $2A, $F8
0000677C E000 0132 28               		dc.b $E0, 0, 1,	$32, $28
00006781 D004 0133 E0               		dc.b $D0, 4, 1,	$33, $E0
00006786 E805 0135 C8               		dc.b $E8, 5, 1,	$35, $C8
0000678B F80C 0139 C8               		dc.b $F8, $C, 1, $39, $C8
00006790 F006 013D F8               		dc.b $F0, 6, 1,	$3D, $F8
00006796 00                         		even
00006796 00                         		even
00006796                            Map_ECha:	include	"_maps\Ending Sequence Emeralds.asm"
00006796                            ; --------------------------------------------------------------------------------
00006796                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
00006796                            ; --------------------------------------------------------------------------------
00006796                            
00006796                            SME_0ZTmS:	
00006796 0000 0000                  		dc.w SME_0ZTmS_E-SME_0ZTmS, SME_0ZTmS_14-SME_0ZTmS	
0000679A 0000 0000                  		dc.w SME_0ZTmS_1A-SME_0ZTmS, SME_0ZTmS_20-SME_0ZTmS	
0000679E 0000 0000                  		dc.w SME_0ZTmS_26-SME_0ZTmS, SME_0ZTmS_2C-SME_0ZTmS	
000067A2 0000                       		dc.w SME_0ZTmS_32-SME_0ZTmS	
000067A4 01                         SME_0ZTmS_E:	dc.b 1	
000067A5 F805 0000 F8               		dc.b $F8, 5, 0, 0, $F8	
000067AA 01                         SME_0ZTmS_14:	dc.b 1	
000067AB F805 0004 F8               		dc.b $F8, 5, 0, 4, $F8	
000067B0 01                         SME_0ZTmS_1A:	dc.b 1	
000067B1 F805 2008 F8               		dc.b $F8, 5, $20, 8, $F8	
000067B6 01                         SME_0ZTmS_20:	dc.b 1	
000067B7 F805 2018 F8               		dc.b $F8, 5, $20, $18, $F8	
000067BC 01                         SME_0ZTmS_26:	dc.b 1	
000067BD F805 4014 F8               		dc.b $F8, 5, $40, $14, $F8	
000067C2 01                         SME_0ZTmS_2C:	dc.b 1	
000067C3 F805 0008 F8               		dc.b $F8, 5, 0, 8, $F8	
000067C8 01                         SME_0ZTmS_32:	dc.b 1	
000067C9 F805 000C F8               		dc.b $F8, 5, 0, $C, $F8	
000067CE                            		even
000067CE                            		even
000067CE                            Map_ESth:	include	"_maps\Ending Sequence STH.asm"
000067CE                            ; ---------------------------------------------------------------------------
000067CE                            ; Sprite mappings - "SONIC THE HEDGEHOG" text on the ending sequence
000067CE                            ; ---------------------------------------------------------------------------
000067CE                            Map_ESth_internal:
000067CE 0000                       		dc.w M_ESth_1-Map_ESth_internal
000067D0 03                         M_ESth_1:	dc.b 3
000067D1 F00F 0000 D0               		dc.b $F0, $F, 0, 0, $D0
000067D6 F00F 0010 F0               		dc.b $F0, $F, 0, $10, $F0
000067DB F00F 0020 10               		dc.b $F0, $F, 0, $20, $10
000067E0                            		even
000067E0                            		even
000067E0                            
000067E0                            ; ===========================================================================
000067E0                            ; ---------------------------------------------------------------------------
000067E0                            ; Credits ending sequence
000067E0                            ; ---------------------------------------------------------------------------
000067E0                            
000067E0                            GM_Credits:
000067E0                            		
000067E0 6100 AF6A                  		bsr.w	ClearPLC
000067E4 6100 B9A0                  		bsr.w	PaletteFadeOut
000067E8 4DF9 00C0 0004             		lea	(vdp_control_port).l,a6
000067EE 3CBC 8004                  		move.w	#$8004,(a6)	; use 8-colour mode
000067F2 3CBC 8230                  		move.w	#$8200+(vram_fg>>10),(a6) ; set foreground nametable address
000067F6 3CBC 8407                  		move.w	#$8400+(vram_bg>>13),(a6) ; set background nametable address
000067FA 3CBC 9001                  		move.w	#$9001,(a6)	; 64-cell hscroll size
000067FE 3CBC 9200                  		move.w	#$9200,(a6)	; window vertical position
00006802 3CBC 8B03                  		move.w	#$8B03,(a6)	; line scroll mode
00006806 3CBC 8720                  		move.w	#$8720,(a6)	; set background colour (line 3; colour 0)
0000680A 4238 F64E                  		clr.b	(f_wtr_state).w
0000680E 6100 A974                  		bsr.w	ClearScreen
00006812                            
00006812 43F8 D000                  		lea	(v_objspace).w,a1
00006816 7000                       		moveq	#0,d0
00006818 323C 07FF                  		move.w	#$7FF,d1
0000681C                            	TryAg_ClrObjRam:
0000681C 22C0                       		move.l	d0,(a1)+
0000681E 51C9 FFFC                  		dbf	d1,TryAg_ClrObjRam ; clear object RAM
00006822                            
00006822 7000                       		moveq	#plcid_TryAgain,d0
00006824 6100 B034                  		bsr.w	QuickPLC	; load "TRY AGAIN" or "END" patterns
00006828                            
00006828 43F8 FB80                  		lea	(v_pal_dry_dup).w,a1
0000682C 7000                       		moveq	#0,d0
0000682E 323C 001F                  		move.w	#$1F,d1
00006832                            	TryAg_ClrPal:
00006832 22C0                       		move.l	d0,(a1)+
00006834 51C9 FFFC                  		dbf	d1,TryAg_ClrPal ; fill palette with black
00006838                            
00006838 7013                       		moveq	#palid_Ending,d0
0000683A 6100 BBF4                  		bsr.w	PalLoad1	; load ending palette
0000683E 4278 FBC0                  		clr.w	(v_pal_dry_dup+$40).w
00006842 11FC 0000 D080             		move.b	#id_EndEggman,(v_objspace+$80).w ; load Eggman object
00006848 4EB9 0000 0000             		jsr	(ExecuteObjects).l
0000684E 4EB9 0000 0000             		jsr	(BuildSprites).l
00006854 31FC 0708 F614             		move.w	#1800,(v_demolength).w ; show screen for 30 seconds
0000685A 6100 B884                  		bsr.w	PaletteFadeIn
0000685E                            
0000685E                            ; ---------------------------------------------------------------------------
0000685E                            ; "TRY AGAIN" and "END"	screen main loop
0000685E                            ; ---------------------------------------------------------------------------
0000685E                            TryAg_MainLoop:
0000685E 6100 AA00                  		bsr.w	PauseGame
00006862 11FC 0004 F62A             		move.b	#4,(v_vbla_routine).w
00006868 6100 D19A                  		bsr.w	WaitForVBla
0000686C 4EB9 0000 0000             		jsr	(ExecuteObjects).l
00006872 4EB9 0000 0000             		jsr	(BuildSprites).l
00006878 0238 0080 F605             		andi.b	#btnStart,(v_jpadpress1).w ; is Start button pressed?
0000687E 6600                       		bne.s	TryAg_Exit	; if yes, branch
00006880 4A78 F614                  		tst.w	(v_demolength).w ; has 30 seconds elapsed?
00006884 6700                       		beq.s	TryAg_Exit	; if yes, branch
00006886 0C38 0000 F600             		cmpi.b	#id_Credits,(v_gamemode).w
0000688C 67D0                       		beq.s	TryAg_MainLoop
0000688E                            
0000688E                            TryAg_Exit:
0000688E 11FC 0000 F600             		move.b	#id_Sega,(v_gamemode).w ; goto Sega screen
00006894 4E75                       		rts	
00006896                            
00006896                            ; ===========================================================================
00006896                            
00006896                            		include	"_incObj\8B Try Again & End Eggman.asm"
00006896                            ; ---------------------------------------------------------------------------
00006896                            ; Object 8B - Eggman on "TRY AGAIN" and "END"	screens
00006896                            ; ---------------------------------------------------------------------------
00006896                            
00006896                            EndEggman:
00006896 7000                       		moveq	#0,d0
00006898 1028 0024                  		move.b	obRoutine(a0),d0
0000689C 323B 0000                  		move.w	EEgg_Index(pc,d0.w),d1
000068A0 4EBB 1000                  		jsr	EEgg_Index(pc,d1.w)
000068A4 4EF9 0000 0000             		jmp	(DisplaySprite).l
000068AA                            ; ===========================================================================
000068AA 0000                       EEgg_Index:	dc.w EEgg_Main-EEgg_Index
000068AC 0000                       		dc.w EEgg_Animate-EEgg_Index
000068AE 0000                       		dc.w EEgg_Juggle-EEgg_Index
000068B0 0000                       		dc.w EEgg_Wait-EEgg_Index
000068B2                            
000068B2 =00000030                  eegg_time:	equ $30		; time between juggle motions
000068B2                            ; ===========================================================================
000068B2                            
000068B2                            EEgg_Main:	; Routine 0
000068B2 5428 0024                  		addq.b	#2,obRoutine(a0)
000068B6 317C 0120 0008             		move.w	#$120,obX(a0)
000068BC 317C 00F4 000A             		move.w	#$F4,obScreenY(a0)
000068C2 217C 0000 0000 0004        		move.l	#Map_EEgg,obMap(a0)
000068CA 317C 03E1 0002             		move.w	#$3E1,obGfx(a0)
000068D0 117C 0000 0001             		move.b	#0,obRender(a0)
000068D6 317C 0100 0018             		move.w	#$100,obPriority(a0)
000068DC 117C 0002 001C             		move.b	#2,obAnim(a0)	; use "END" animation
000068E2 0C38 0006 FE57             		cmpi.b	#6,(v_emeralds).w ; do you have all 6 emeralds?
000068E8 6700                       		beq.s	EEgg_Animate	; if yes, branch
000068EA                            
000068EA 11FC 0000 D0C0             		move.b	#id_CreditsText,(v_objspace+$C0).w ; load credits object
000068F0 31FC 0009 FFF4             		move.w	#9,(v_creditsnum).w ; use "TRY AGAIN" text
000068F6 11FC 0000 D800             		move.b	#id_TryChaos,(v_objspace+$800).w ; load emeralds object on "TRY AGAIN" screen
000068FC 117C 0000 001C             		move.b	#0,obAnim(a0)	; use "TRY AGAIN" animation
00006902                            
00006902                            EEgg_Animate:	; Routine 2
00006902 43F9 0000 0000             		lea	(Ani_EEgg).l,a1
00006908 4EF9 0000 0000             		jmp	(AnimateSprite).l
0000690E                            ; ===========================================================================
0000690E                            
0000690E                            EEgg_Juggle:	; Routine 4
0000690E 5428 0024                  		addq.b	#2,obRoutine(a0)
00006912 7002                       		moveq	#2,d0
00006914 0828 0000 001C             		btst	#0,obAnim(a0)
0000691A 6700                       		beq.s	@noflip
0000691C 4440                       		neg.w	d0
0000691E                            
0000691E                            	@noflip:
0000691E 43F8 D800                  		lea	(v_objspace+$800).w,a1 ; get RAM address for emeralds
00006922 7205                       		moveq	#5,d1
00006924                            
00006924                            @emeraldloop:
00006924 1340 003E                  		move.b	d0,$3E(a1)
00006928 3400                       		move.w	d0,d2
0000692A E742                       		asl.w	#3,d2
0000692C D529 0026                  		add.b	d2,obAngle(a1)
00006930 43E9 0040                  		lea	$40(a1),a1
00006934 51C9 FFEE                  		dbf	d1,@emeraldloop
00006938 5228 001A                  		addq.b	#1,obFrame(a0)
0000693C 317C 0070 0030             		move.w	#112,eegg_time(a0)
00006942                            
00006942                            EEgg_Wait:	; Routine 6
00006942 5368 0030                  		subq.w	#1,eegg_time(a0) ; decrement timer
00006946 6A00                       		bpl.s	@nochg		; branch if time remains
00006948 0868 0000 001C             		bchg	#0,obAnim(a0)
0000694E 117C 0002 0024             		move.b	#2,obRoutine(a0) ; goto EEgg_Animate next
00006954                            
00006954                            	@nochg:
00006954 4E75                       		rts	
00006954 4E75                       		rts	
00006956                            		include "_anim\Try Again & End Eggman.asm"
00006956                            ; ---------------------------------------------------------------------------
00006956                            ; Animation script - Eggman on the "TRY AGAIN" and "END" screens
00006956                            ; ---------------------------------------------------------------------------
00006956 0000                       Ani_EEgg:	dc.w @tryagain1-Ani_EEgg
00006958 0000                       		dc.w @tryagain2-Ani_EEgg
0000695A 0000                       		dc.w @end-Ani_EEgg
0000695C 0500 FC01                  @tryagain1:	dc.b 5,	0, afRoutine, 1
00006960 0502 FC03                  @tryagain2:	dc.b 5,	2, afRoutine, 3
00006964 0704 0506 0504 0506 0504+  @end:		dc.b 7,	4, 5, 6, 5, 4, 5, 6, 5,	4, 5, 6, 5, 7, 5, 6, 5,	afEnd
00006976                            		even
00006976                            		even
00006976                            		include	"_incObj\8C Try Again Emeralds.asm"
00006976                            ; ---------------------------------------------------------------------------
00006976                            ; Object 8C - chaos emeralds on	the "TRY AGAIN"	screen
00006976                            ; ---------------------------------------------------------------------------
00006976                            
00006976                            TryChaos:
00006976 7000                       		moveq	#0,d0
00006978 1028 0024                  		move.b	obRoutine(a0),d0
0000697C 323B 0000                  		move.w	TCha_Index(pc,d0.w),d1
00006980 4EBB 1000                  		jsr	TCha_Index(pc,d1.w)
00006984 4EF9 0000 0000             		jmp	(DisplaySprite).l
0000698A                            ; ===========================================================================
0000698A 0000                       TCha_Index:	dc.w TCha_Main-TCha_Index
0000698C 0000                       		dc.w TCha_Move-TCha_Index
0000698E                            ; ===========================================================================
0000698E                            
0000698E                            TCha_Main:	; Routine 0
0000698E 2248                       		movea.l	a0,a1
00006990 7400                       		moveq	#0,d2
00006992 7600                       		moveq	#0,d3
00006994 7205                       		moveq	#5,d1
00006996 9238 FE57                  		sub.b	(v_emeralds).w,d1
0000699A                            
0000699A                            @makeemerald:
0000699A 12BC 0000                  		move.b	#id_TryChaos,(a1) ; load emerald object
0000699E 5429 0024                  		addq.b	#2,obRoutine(a1)
000069A2 237C 0000 6796 0004        		move.l	#Map_ECha,obMap(a1)
000069AA 337C 03C5 0002             		move.w	#$3C5,obGfx(a1)
000069B0 137C 0000 0001             		move.b	#0,obRender(a1)
000069B6 337C 0080 0018             		move.w	#$80,obPriority(a1)
000069BC 337C 0104 0008             		move.w	#$104,obX(a1)
000069C2 337C 0120 0038             		move.w	#$120,$38(a1)
000069C8 337C 00EC 000A             		move.w	#$EC,obScreenY(a1)
000069CE 3369 000A 003A             		move.w	obScreenY(a1),$3A(a1)
000069D4 137C 001C 003C             		move.b	#$1C,$3C(a1)
000069DA 47F8 FE58                  		lea	(v_emldlist).w,a3
000069DE                            
000069DE                            	@chkemerald:
000069DE 7000                       		moveq	#0,d0
000069E0 1038 FE57                  		move.b	(v_emeralds).w,d0
000069E4 5340                       		subq.w	#1,d0
000069E6 6500                       		bcs.s	@loc_5B42
000069E8                            
000069E8                            	@chkloop:
000069E8 B433 0000                  		cmp.b	(a3,d0.w),d2
000069EC 6600                       		bne.s	@notgot
000069EE 5202                       		addq.b	#1,d2
000069F0 60EC                       		bra.s	@chkemerald
000069F2                            ; ===========================================================================
000069F2                            
000069F2                            	@notgot:
000069F2 51C8 FFF4                  		dbf	d0,@chkloop
000069F6                            
000069F6                            @loc_5B42:
000069F6 1342 001A                  		move.b	d2,obFrame(a1)
000069FA 5229 001A                  		addq.b	#1,obFrame(a1)
000069FE 5202                       		addq.b	#1,d2
00006A00 137C 0080 0026             		move.b	#$80,obAngle(a1)
00006A06 1343 001E                  		move.b	d3,obTimeFrame(a1)
00006A0A 1343 001F                  		move.b	d3,obDelayAni(a1)
00006A0E 0643 000A                  		addi.w	#10,d3
00006A12 43E9 0040                  		lea	$40(a1),a1
00006A16 51C9 FF82                  		dbf	d1,@makeemerald	; repeat 5 times
00006A1A                            
00006A1A                            TCha_Move:	; Routine 2
00006A1A 4A68 003E                  		tst.w	$3E(a0)
00006A1E 6700                       		beq.s	locret_5BBA
00006A20 4A28 001E                  		tst.b	obTimeFrame(a0)
00006A24 6700                       		beq.s	loc_5B78
00006A26 5328 001E                  		subq.b	#1,obTimeFrame(a0)
00006A2A 6600                       		bne.s	loc_5B80
00006A2C                            
00006A2C                            loc_5B78:
00006A2C 3028 003E                  		move.w	$3E(a0),d0
00006A30 D168 0026                  		add.w	d0,obAngle(a0)
00006A34                            
00006A34                            loc_5B80:
00006A34 1028 0026                  		move.b	obAngle(a0),d0
00006A38 6700                       		beq.s	loc_5B8C
00006A3A 0C00 0080                  		cmpi.b	#$80,d0
00006A3E 6600                       		bne.s	loc_5B96
00006A40                            
00006A40                            loc_5B8C:
00006A40 4268 003E                  		clr.w	$3E(a0)
00006A44 1168 001F 001E             		move.b	obDelayAni(a0),obTimeFrame(a0)
00006A4A                            
00006A4A                            loc_5B96:
00006A4A 4EB9 0000 3A36             		jsr	(CalcSine).l
00006A50 7800                       		moveq	#0,d4
00006A52 1828 003C                  		move.b	$3C(a0),d4
00006A56 C3C4                       		muls.w	d4,d1
00006A58 E081                       		asr.l	#8,d1
00006A5A C1C4                       		muls.w	d4,d0
00006A5C E080                       		asr.l	#8,d0
00006A5E D268 0038                  		add.w	$38(a0),d1
00006A62 D068 003A                  		add.w	$3A(a0),d0
00006A66 3141 0008                  		move.w	d1,obX(a0)
00006A6A 3140 000A                  		move.w	d0,obScreenY(a0)
00006A6E                            
00006A6E                            locret_5BBA:
00006A6E 4E75                       		rts	
00006A6E 4E75                       		rts	
00006A70                            Map_EEgg:	include	"_maps\Try Again & End Eggman.asm"
00006A70                            ; ---------------------------------------------------------------------------
00006A70                            ; Sprite mappings - Robotnik on	the "TRY AGAIN"	and "END" screens
00006A70                            ; ---------------------------------------------------------------------------
00006A70                            Map_EEgg_internal:
00006A70 0000                       		dc.w M_EEgg_Try1-Map_EEgg_internal
00006A72 0000                       		dc.w M_EEgg_Try2-Map_EEgg_internal
00006A74 0000                       		dc.w M_EEgg_Try3-Map_EEgg_internal
00006A76 0000                       		dc.w M_EEgg_Try4-Map_EEgg_internal
00006A78 0000                       		dc.w M_EEgg_End1-Map_EEgg_internal
00006A7A 0000                       		dc.w M_EEgg_End2-Map_EEgg_internal
00006A7C 0000                       		dc.w M_EEgg_End3-Map_EEgg_internal
00006A7E 0000                       		dc.w M_EEgg_End4-Map_EEgg_internal
00006A80 08                         M_EEgg_Try1:	dc.b 8
00006A81 E905 0000 F0               		dc.b $E9, 5, 0,	0, $F0
00006A86 F90C 0004 E0               		dc.b $F9, $C, 0, 4, $E0
00006A8B E904 0008 00               		dc.b $E9, 4, 0,	8, 0
00006A90 F10D 000A 00               		dc.b $F1, $D, 0, $A, 0
00006A95 0106 0023 F0               		dc.b 1,	6, 0, $23, $F0
00006A9A 0106 0823 00               		dc.b 1,	6, 8, $23, 0
00006A9F 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
00006AA4 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
00006AA9 08                         M_EEgg_Try2:	dc.b 8
00006AAA E80D 0012 E0               		dc.b $E8, $D, 0, $12, $E0
00006AAF F808 001A E8               		dc.b $F8, 8, 0,	$1A, $E8
00006AB4 E805 0800 00               		dc.b $E8, 5, 8,	0, 0
00006AB9 F80C 0804 00               		dc.b $F8, $C, 8, 4, 0
00006ABE 0006 001D F0               		dc.b 0,	6, 0, $1D, $F0
00006AC3 0006 081D 00               		dc.b 0,	6, 8, $1D, 0
00006AC8 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
00006ACD 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
00006AD2 08                         M_EEgg_Try3:	dc.b 8
00006AD3 E904 0808 F0               		dc.b $E9, 4, 8,	8, $F0
00006AD8 F10D 080A E0               		dc.b $F1, $D, 8, $A, $E0
00006ADD E905 0800 00               		dc.b $E9, 5, 8,	0, 0
00006AE2 F90C 0804 00               		dc.b $F9, $C, 8, 4, 0
00006AE7 0106 0023 F0               		dc.b 1,	6, 0, $23, $F0
00006AEC 0106 0823 00               		dc.b 1,	6, 8, $23, 0
00006AF1 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
00006AF6 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
00006AFB 08                         M_EEgg_Try4:	dc.b 8
00006AFC E805 0000 F0               		dc.b $E8, 5, 0,	0, $F0
00006B01 F80C 0004 E0               		dc.b $F8, $C, 0, 4, $E0
00006B06 E80D 0812 00               		dc.b $E8, $D, 8, $12, 0
00006B0B F808 081A 00               		dc.b $F8, 8, 8,	$1A, 0
00006B10 0006 001D F0               		dc.b 0,	6, 0, $1D, $F0
00006B15 0006 081D 00               		dc.b 0,	6, 8, $1D, 0
00006B1A 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
00006B1F 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
00006B24 0C                         M_EEgg_End1:	dc.b $C
00006B25 ED0A 002B E8               		dc.b $ED, $A, 0, $2B, $E8
00006B2A F500 0034 E0               		dc.b $F5, 0, 0,	$34, $E0
00006B2F 0504 0035 F0               		dc.b 5,	4, 0, $35, $F0
00006B34 0D08 0037 E8               		dc.b $D, 8, 0, $37, $E8
00006B39 ED0A 082B 00               		dc.b $ED, $A, 8, $2B, 0
00006B3E F500 0834 18               		dc.b $F5, 0, 8,	$34, $18
00006B43 0504 0835 00               		dc.b 5,	4, 8, $35, 0
00006B48 0D08 0837 00               		dc.b $D, 8, 8, $37, 0
00006B4D 100D 0073 E0               		dc.b $10, $D, 0, $73, $E0
00006B52 100D 007B 00               		dc.b $10, $D, 0, $7B, 0
00006B57 1C0C 005B E0               		dc.b $1C, $C, 0, $5B, $E0
00006B5C 1C0C 085B 00               		dc.b $1C, $C, 8, $5B, 0
00006B61 0A                         M_EEgg_End2:	dc.b $A
00006B62 D207 003A F0               		dc.b $D2, 7, 0,	$3A, $F0
00006B67 DA00 0042 E8               		dc.b $DA, 0, 0,	$42, $E8
00006B6C F207 0043 F0               		dc.b $F2, 7, 0,	$43, $F0
00006B71 D207 083A 00               		dc.b $D2, 7, 8,	$3A, 0
00006B76 DA00 0842 10               		dc.b $DA, 0, 8,	$42, $10
00006B7B F207 0843 00               		dc.b $F2, 7, 8,	$43, 0
00006B80 100D 0067 E8               		dc.b $10, $D, 0, $67, $E8
00006B85 1005 006F 08               		dc.b $10, 5, 0,	$6F, 8
00006B8A 1C0C 005F E0               		dc.b $1C, $C, 0, $5F, $E0
00006B8F 1C0C 085F 00               		dc.b $1C, $C, 8, $5F, 0
00006B94 0A                         M_EEgg_End3:	dc.b $A
00006B95 C40B 004B E8               		dc.b $C4, $B, 0, $4B, $E8
00006B9A E408 0057 E8               		dc.b $E4, 8, 0,	$57, $E8
00006B9F EC00 005A F0               		dc.b $EC, 0, 0,	$5A, $F0
00006BA4 C40B 084B 00               		dc.b $C4, $B, 8, $4B, 0
00006BA9 E408 0857 00               		dc.b $E4, 8, 8,	$57, 0
00006BAE EC00 085A 08               		dc.b $EC, 0, 8,	$5A, 8
00006BB3 100D 0067 E8               		dc.b $10, $D, 0, $67, $E8
00006BB8 1005 006F 08               		dc.b $10, 5, 0,	$6F, 8
00006BBD 1C0C 0063 E0               		dc.b $1C, $C, 0, $63, $E0
00006BC2 1C0C 0863 00               		dc.b $1C, $C, 8, $63, 0
00006BC7 0C                         M_EEgg_End4:	dc.b $C
00006BC8 F40A 002B E8               		dc.b $F4, $A, 0, $2B, $E8
00006BCD FC00 0034 E0               		dc.b $FC, 0, 0,	$34, $E0
00006BD2 0C04 0035 F0               		dc.b $C, 4, 0, $35, $F0
00006BD7 1408 0037 E8               		dc.b $14, 8, 0,	$37, $E8
00006BDC F40A 082B 00               		dc.b $F4, $A, 8, $2B, 0
00006BE1 FC00 0834 18               		dc.b $FC, 0, 8,	$34, $18
00006BE6 0C04 0835 00               		dc.b $C, 4, 8, $35, 0
00006BEB 1408 0837 00               		dc.b $14, 8, 8,	$37, 0
00006BF0 180C 0083 E0               		dc.b $18, $C, 0, $83, $E0
00006BF5 180C 0087 00               		dc.b $18, $C, 0, $87, 0
00006BFA 1C0C 005B E0               		dc.b $1C, $C, 0, $5B, $E0
00006BFF 1C0C 085B 00               		dc.b $1C, $C, 8, $5B, 0
00006C04                            		even
00006C04                            		even
00006C04                            
00006C04                            ; ---------------------------------------------------------------------------
00006C04                            ; Ending sequence demos
00006C04                            ; ---------------------------------------------------------------------------
00006C04                            Demo_EndGHZ1:	incbin	"demodata\Ending - GHZ1.bin"
00006C32                            		even
00006C32                            Demo_EndMZ:	incbin	"demodata\Ending - MZ.bin"
00006C72                            		even
00006C72                            Demo_EndSYZ:	incbin	"demodata\Ending - SYZ.bin"
00006CA2                            		even
00006CA2                            Demo_EndLZ:	incbin	"demodata\Ending - LZ.bin"
00006CD2                            		even
00006CD2                            Demo_EndSLZ:	incbin	"demodata\Ending - SLZ.bin"
00006CF2                            		even
00006CF2                            Demo_EndSBZ1:	incbin	"demodata\Ending - SBZ1.bin"
00006D12                            		even
00006D12                            Demo_EndSBZ2:	incbin	"demodata\Ending - SBZ2.bin"
00006D42                            		even
00006D42                            Demo_EndGHZ2:	incbin	"demodata\Ending - GHZ2.bin"
00006D72                            		even
00006D72                            
00006D72                            		include	"_inc\LevelSizeLoad & BgScrollSpeed (JP1).asm"
00006D72                            ; ---------------------------------------------------------------------------
00006D72                            ; Subroutine to	load level boundaries and start	locations
00006D72                            ; ---------------------------------------------------------------------------
00006D72                            
00006D72                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006D72                            
00006D72                            
00006D72                            LevelSizeLoad:
00006D72 7000                       		moveq	#0,d0
00006D74 11C0 F740                  		move.b	d0,($FFFFF740).w
00006D78 11C0 F741                  		move.b	d0,($FFFFF741).w
00006D7C 11C0 F746                  		move.b	d0,($FFFFF746).w
00006D80 11C0 F748                  		move.b	d0,($FFFFF748).w
00006D84 11C0 F742                  		move.b	d0,(v_dle_routine).w
00006D88 3038 FE10                  		move.w	(v_zone).w,d0
00006D8C ED08                       		lsl.b	#6,d0
00006D8E E848                       		lsr.w	#4,d0
00006D90 3200                       		move.w	d0,d1
00006D92 D040                       		add.w	d0,d0
00006D94 D041                       		add.w	d1,d0
00006D96 41FB 0000                  		lea	LevelSizeArray(pc,d0.w),a0 ; load level	boundaries
00006D9A 3018                       		move.w	(a0)+,d0
00006D9C 31C0 F730                  		move.w	d0,($FFFFF730).w
00006DA0 2018                       		move.l	(a0)+,d0
00006DA2 21C0 F728                  		move.l	d0,(v_limitleft2).w
00006DA6 21C0 F720                  		move.l	d0,(v_limitleft1).w
00006DAA 2018                       		move.l	(a0)+,d0
00006DAC 21C0 F72C                  		move.l	d0,(v_limittop2).w
00006DB0 21C0 F724                  		move.l	d0,(v_limittop1).w
00006DB4 3038 F728                  		move.w	(v_limitleft2).w,d0
00006DB8 0640 0240                  		addi.w	#$240,d0
00006DBC 31C0 F732                  		move.w	d0,(v_limitleft3).w
00006DC0 31FC 1010 F74A             		move.w	#$1010,($FFFFF74A).w
00006DC6 3018                       		move.w	(a0)+,d0
00006DC8 31C0 F73E                  		move.w	d0,(v_lookshift).w
00006DCC 31FC 00A0 F7A0             		move.w    #160,(v_camera_pan).w    ; reset the horizontal camera pan value to 160 pixels
00006DD2 6000 0000                  		bra.w	LevSz_ChkLamp
00006DD6                            
00006DD6                            ; ===========================================================================
00006DD6                            ; ---------------------------------------------------------------------------
00006DD6                            ; Level size array
00006DD6                            ; ---------------------------------------------------------------------------
00006DD6                            LevelSizeArray:
00006DD6                            		; GHZ
00006DD6 0004 0000 4470 0000 0400+  		dc.w $0004, $0000, $4470, $0000, $0400, $0060
00006DE2 0004 0000 2960 0000 0300+  		dc.w $0004, $0000, $2960, $0000, $0300, $0060
00006DEE 0004 0000 1360 0000 0400+  		dc.w $0004, $0000, $1360, $0000, $0400, $0060
00006DFA 0004 0000 7EC0 0000 0400+  		dc.w $0004, $0000, $7EC0, $0000, $0400, $0060
00006E06                            		; LZ
00006E06 0004 0000 19AF 0000 0530+  		dc.w $0004, $0000, $19AF, $0000, $0530, $0060
00006E12 0004 0000 10AF 0000 0720+  		dc.w $0004, $0000, $10AF, $0000, $0720, $0060
00006E1E 0004 0000 202F FF00 0800+  		dc.w $0004, $0000, $202F, $FF00, $0800, $0060
00006E2A 0004 0000 20BF 0000 0720+  		dc.w $0004, $0000, $20BF, $0000, $0720, $0060
00006E36                            		; MZ
00006E36 0004 0000 21C0 0000 0520+  		dc.w $0004, $0000, $21C0, $0000, $0520, $0060
00006E42 0004 0000 25E0 0000 0520+  		dc.w $0004, $0000, $25E0, $0000, $0520, $0060
00006E4E 0004 0000 1800 0000 0720+  		dc.w $0004, $0000, $1800, $0000, $0720, $0060
00006E5A 0004 0000 16BF 0000 0720+  		dc.w $0004, $0000, $16BF, $0000, $0720, $0060
00006E66                            		; SLZ
00006E66 0004 0000 1FBF 0000 0640+  		dc.w $0004, $0000, $1FBF, $0000, $0640, $0060
00006E72 0004 0000 1FBF 0000 0640+  		dc.w $0004, $0000, $1FBF, $0000, $0640, $0060
00006E7E 0004 0000 2000 0000 0640+  		dc.w $0004, $0000, $2000, $0000, $0640, $0060
00006E8A 0004 0000 3EC0 0000 0720+  		dc.w $0004, $0000, $3EC0, $0000, $0720, $0060
00006E96                            		; SYZ
00006E96 0004 0000 22C0 0000 0520+  		dc.w $0004, $0000, $22C0, $0000, $0520, $0060
00006EA2 0004 0000 28C0 0000 0520+  		dc.w $0004, $0000, $28C0, $0000, $0520, $0060
00006EAE 0004 0000 2C00 0000 0620+  		dc.w $0004, $0000, $2C00, $0000, $0620, $0060
00006EBA 0004 0000 2EC0 0000 0620+  		dc.w $0004, $0000, $2EC0, $0000, $0620, $0060
00006EC6                            		; SBZ
00006EC6 0004 0000 21C0 0000 0720+  		dc.w $0004, $0000, $21C0, $0000, $0720, $0060
00006ED2 0004 0000 1E40 0000 0800+  		dc.w $0004, $0000, $1E40, $0000, $0800, $0060
00006EDE 0004 2080 2460 0510 0510+  		dc.w $0004, $2080, $2460, $0510, $0510, $0060
00006EEA 0004 0000 3EC0 0000 0720+  		dc.w $0004, $0000, $3EC0, $0000, $0720, $0060
00006EF6                            		; Ending
00006EF6 0004 0000 0500 0110 0110+  		dc.w $0004, $0000, $0500, $0110, $0110, $0060
00006F02 0004 0000 0DC0 0110 0110+  		dc.w $0004, $0000, $0DC0, $0110, $0110, $0060
00006F0E 0004 0000 2FFF 0000 0320+  		dc.w $0004, $0000, $2FFF, $0000, $0320, $0060
00006F1A 0004 0000 2FFF 0000 0320+  		dc.w $0004, $0000, $2FFF, $0000, $0320, $0060
00006F26                            
00006F26                            ; ---------------------------------------------------------------------------
00006F26                            ; Ending start location array
00006F26                            ; ---------------------------------------------------------------------------
00006F26                            EndingStLocArray:
00006F26                            		include	"_inc\Start Location Array - Ending.asm"
00006F26                            ; ---------------------------------------------------------------------------
00006F26                            ; Ending start location array
00006F26                            ; ---------------------------------------------------------------------------
00006F26                            
00006F26                            		incbin	"startpos\ghz1 (Credits demo 1).bin"
00006F2A                            		incbin	"startpos\mz2 (Credits demo).bin"
00006F2E                            		incbin	"startpos\syz3 (Credits demo).bin"
00006F32                            		incbin	"startpos\lz3 (Credits demo).bin"
00006F36                            		incbin	"startpos\slz3 (Credits demo).bin"
00006F3A                            		incbin	"startpos\sbz1 (Credits demo).bin"
00006F3E                            		incbin	"startpos\sbz2 (Credits demo).bin"
00006F42                            		incbin	"startpos\ghz1 (Credits demo 2).bin"
00006F46                            		even
00006F46                            		even
00006F46                            
00006F46                            ; ===========================================================================
00006F46                            
00006F46                            LevSz_ChkLamp:
00006F46 4A38 FE30                  		tst.b	(v_lastlamp).w	; have any lampposts been hit?
00006F4A 6700                       		beq.s	LevSz_StartLoc	; if not, branch
00006F4C                            
00006F4C 4EB9 0000 0000             		jsr	(Lamp_LoadInfo).l
00006F52 3238 D008                  		move.w	(v_player+obX).w,d1
00006F56 3038 D00C                  		move.w	(v_player+obY).w,d0
00006F5A 6000                       		bra.s	LevSz_SkipStartPos
00006F5C                            ; ===========================================================================
00006F5C                            
00006F5C                            LevSz_StartLoc:
00006F5C 3038 FE10                  		move.w	(v_zone).w,d0
00006F60 ED08                       		lsl.b	#6,d0
00006F62 E848                       		lsr.w	#4,d0
00006F64 43FB 0000                  		lea	StartLocArray(pc,d0.w),a1 ; load Sonic's start location
00006F68 4A78 FFF0                  		tst.w	(f_demo).w	; is ending demo mode on?
00006F6C 6A00                       		bpl.s	LevSz_SonicPos	; if not, branch
00006F6E                            
00006F6E 3038 FFF4                  		move.w	(v_creditsnum).w,d0
00006F72 5340                       		subq.w	#1,d0
00006F74 E548                       		lsl.w	#2,d0
00006F76 43FB 00AE                  		lea	EndingStLocArray(pc,d0.w),a1 ; load Sonic's start location
00006F7A                            
00006F7A                            LevSz_SonicPos:
00006F7A 7200                       		moveq	#0,d1
00006F7C 3219                       		move.w	(a1)+,d1
00006F7E 31C1 D008                  		move.w	d1,(v_player+obX).w ; set Sonic's position on x-axis
00006F82 7000                       		moveq	#0,d0
00006F84 3011                       		move.w	(a1),d0
00006F86 31C0 D00C                  		move.w	d0,(v_player+obY).w ; set Sonic's position on y-axis
00006F8A                            
00006F8A                            SetScreen:
00006F8A                            	LevSz_SkipStartPos:
00006F8A 4278 F7A8                  		clr.w (v_trackpos).w ; reset Sonic's position tracking index 
00006F8E 45F8 CB00                  		lea (v_tracksonic).w,a2 ; load the tracking array into a2 
00006F92 743F                       		moveq #63,d2 ; begin a 64-step loop 
00006F94                            @looppoint: 
00006F94 34C1                       		move.w d1,(a2)+ ; fill in X 
00006F96 34C0                       		move.w d0,(a2)+ ; fill in Y 
00006F98 51CA FFFA                  		dbf d2,@looppoint ; loop	
00006F9C 0441 00A0                  		subi.w	#160,d1		; is Sonic more than 160px from left edge?
00006FA0 6400                       		bcc.s	SetScr_WithinLeft ; if yes, branch
00006FA2 7200                       		moveq	#0,d1
00006FA4                            
00006FA4                            	SetScr_WithinLeft:
00006FA4 3438 F72A                  		move.w	(v_limitright2).w,d2
00006FA8 B242                       		cmp.w	d2,d1		; is Sonic inside the right edge?
00006FAA 6500                       		bcs.s	SetScr_WithinRight ; if yes, branch
00006FAC 3202                       		move.w	d2,d1
00006FAE                            
00006FAE                            	SetScr_WithinRight:
00006FAE 31C1 F700                  		move.w	d1,(v_screenposx).w ; set horizontal screen position
00006FB2                            
00006FB2 0440 0060                  		subi.w	#96,d0		; is Sonic within 96px of upper edge?
00006FB6 6400                       		bcc.s	SetScr_WithinTop ; if yes, branch
00006FB8 7000                       		moveq	#0,d0
00006FBA                            
00006FBA                            	SetScr_WithinTop:
00006FBA B078 F72E                  		cmp.w	(v_limitbtm2).w,d0 ; is Sonic above the bottom edge?
00006FBE 6D00                       		blt.s	SetScr_WithinBottom ; if yes, branch
00006FC0 3038 F72E                  		move.w	(v_limitbtm2).w,d0
00006FC4                            
00006FC4                            	SetScr_WithinBottom:
00006FC4 31C0 F704                  		move.w	d0,(v_screenposy).w ; set vertical screen position
00006FC8 6100 0000                  		bsr.w	BgScrollSpeed
00006FCC 7000                       		moveq	#0,d0
00006FCE 1038 FE10                  		move.b	(v_zone).w,d0
00006FD2 E508                       		lsl.b	#2,d0
00006FD4 21FB 0000 F7AC             		move.l	LoopTileNums(pc,d0.w),(v_256loop1).w
00006FDA 4E75                       		rts
00006FDC                            ; ===========================================================================
00006FDC                            ; ---------------------------------------------------------------------------
00006FDC                            ; Sonic start location array
00006FDC                            ; ---------------------------------------------------------------------------
00006FDC                            StartLocArray:	include	"_inc\Start Location Array - Levels.asm"
00006FDC                            ; ---------------------------------------------------------------------------
00006FDC                            ; Sonic start location array
00006FDC                            ; ---------------------------------------------------------------------------
00006FDC                            
00006FDC                            		incbin	"startpos\ghz1.bin"
00006FE0                            		incbin	"startpos\ghz2.bin"
00006FE4                            		incbin	"startpos\ghz3.bin"
00006FE8 0080 00A8                  		dc.w	$80,$A8
00006FEC                            
00006FEC                            		incbin	"startpos\lz1.bin"
00006FF0                            		incbin	"startpos\lz2.bin"
00006FF4                            		incbin	"startpos\lz3.bin"
00006FF8                            		incbin	"startpos\sbz3.bin"
00006FFC                            
00006FFC                            		incbin	"startpos\mz1.bin"
00007000                            		incbin	"startpos\mz2.bin"
00007004                            		incbin	"startpos\mz3.bin"
00007008 0080 00A8                  		dc.w	$80,$A8
0000700C                            
0000700C                            		incbin	"startpos\slz1.bin"
00007010                            		incbin	"startpos\slz2.bin"
00007014                            		incbin	"startpos\slz3.bin"
00007018 0080 00A8                  		dc.w	$80,$A8
0000701C                            
0000701C                            		incbin	"startpos\syz1.bin"
00007020                            		incbin	"startpos\syz2.bin"
00007024                            		incbin	"startpos\syz3.bin"
00007028 0080 00A8                  		dc.w	$80,$A8
0000702C                            
0000702C                            		incbin	"startpos\sbz1.bin"
00007030                            		incbin	"startpos\sbz2.bin"
00007034                            		incbin	"startpos\fz.bin"
00007038 0080 00A8                  		dc.w	$80,$A8
0000703C                            
0000703C                            
0000703C                            		incbin	"startpos\end1.bin"
00007040                            		incbin	"startpos\end2.bin"
00007044 0080 00A8                  		dc.w	$80,$A8
00007048 0080 00A8                  		dc.w	$80,$A8
0000704C                            
0000704C                            		even
0000704C                            		even
0000704C                            
0000704C                            ; ---------------------------------------------------------------------------
0000704C                            ; Which	256x256	tiles contain loops or roll-tunnels
0000704C                            ; ---------------------------------------------------------------------------
0000704C                            
0000704C                            LoopTileNums:
0000704C                            
0000704C                            ; 		loop	loop	tunnel	tunnel
0000704C                            
0000704C B5C0 1F20                  	dc.b	$B5,	$C0,	$1F,	$20	; Green Hill
00007050 7F7F 7F7F                  	dc.b	$7F,	$7F,	$7F,	$7F	; Labyrinth
00007054 7F7F 7F7F                  	dc.b	$7F,	$7F,	$7F,	$7F	; Marble
00007058 AAB4 7F7F                  	dc.b	$AA,	$B4,	$7F,	$7F	; Star Light
0000705C 7F7F 7F7F                  	dc.b	$7F,	$7F,	$7F,	$7F	; Spring Yard
00007060 7F7F 7F7F                  	dc.b	$7F,	$7F,	$7F,	$7F	; Scrap Brain
00007064 7F7F 7F7F                  	dc.b	$7F,	$7F,	$7F,	$7F	; Ending (Green Hill)
00007068                            
00007068                            		even
00007068                            
00007068                            ; ---------------------------------------------------------------------------
00007068                            ; Subroutine to	set scroll speed of some backgrounds
00007068                            ; ---------------------------------------------------------------------------
00007068                            
00007068                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007068                            
00007068                            
00007068                            BgScrollSpeed:
00007068 4A38 FE30                  		tst.b	(v_lastlamp).w
0000706C 6600                       		bne.s	loc_6206
0000706E 31C0 F70C                  		move.w	d0,(v_bgscreenposy).w
00007072 31C0 F714                  		move.w	d0,(v_bg2screenposy).w
00007076 31C1 F708                  		move.w	d1,(v_bgscreenposx).w
0000707A 31C1 F710                  		move.w	d1,(v_bg2screenposx).w
0000707E 31C1 F718                  		move.w	d1,(v_bg3screenposx).w
00007082                            
00007082                            loc_6206:
00007082 7400                       		moveq	#0,d2
00007084 1438 FE10                  		move.b	(v_zone).w,d2
00007088 D442                       		add.w	d2,d2
0000708A 343B 2000                  		move.w	BgScroll_Index(pc,d2.w),d2
0000708E 4EFB 2000                  		jmp	BgScroll_Index(pc,d2.w)
00007092                            ; End of function BgScrollSpeed
00007092                            
00007092                            ; ===========================================================================
00007092 0000 0000                  BgScroll_Index:	dc.w BgScroll_GHZ-BgScroll_Index, BgScroll_LZ-BgScroll_Index
00007096 0000 0000                  		dc.w BgScroll_MZ-BgScroll_Index, BgScroll_SLZ-BgScroll_Index
0000709A 0000 0000                  		dc.w BgScroll_SYZ-BgScroll_Index, BgScroll_SBZ-BgScroll_Index
0000709E 0000                       		dc.w BgScroll_End-BgScroll_Index
000070A0                            ; ===========================================================================
000070A0                            
000070A0                            BgScroll_GHZ:
000070A0 42B8 F708                  		clr.l	(v_bgscreenposx).w
000070A4 42B8 F70C                  		clr.l	(v_bgscreenposy).w
000070A8 42B8 F714                  		clr.l	(v_bg2screenposy).w
000070AC 42B8 F71C                  		clr.l	(v_bg3screenposy).w
000070B0 45F8 A800                  		lea	($FFFFA800).w,a2
000070B4 429A                       		clr.l	(a2)+
000070B6 429A                       		clr.l	(a2)+
000070B8 429A                       		clr.l	(a2)+
000070BA 4E75                       		rts
000070BC                            ; ===========================================================================
000070BC                            
000070BC                            BgScroll_LZ:
000070BC E280                       		asr.l	#1,d0
000070BE 31C0 F70C                  		move.w	d0,(v_bgscreenposy).w
000070C2 4E75                       		rts	
000070C4                            ; ===========================================================================
000070C4                            
000070C4                            BgScroll_MZ:
000070C4 4E75                       		rts	
000070C6                            ; ===========================================================================
000070C6                            
000070C6                            BgScroll_SLZ:
000070C6 E280                       		asr.l	#1,d0
000070C8 0640 00C0                  		addi.w	#$C0,d0
000070CC 31C0 F70C                  		move.w	d0,(v_bgscreenposy).w
000070D0 42B8 F708                  		clr.l	(v_bgscreenposx).w
000070D4 4E75                       		rts	
000070D6                            ; ===========================================================================
000070D6                            
000070D6                            BgScroll_SYZ:
000070D6 E980                       		asl.l	#4,d0
000070D8 2400                       		move.l	d0,d2
000070DA E380                       		asl.l	#1,d0
000070DC D082                       		add.l	d2,d0
000070DE E080                       		asr.l	#8,d0
000070E0 5240                       		addq.w	#1,d0
000070E2 31C0 F70C                  		move.w	d0,(v_bgscreenposy).w
000070E6 42B8 F708                  		clr.l	(v_bgscreenposx).w
000070EA 4E75                       		rts	
000070EC                            ; ===========================================================================
000070EC                            
000070EC                            BgScroll_SBZ:
000070EC 0240 07F8                  		andi.w	#$7F8,d0
000070F0 E640                       		asr.w	#3,d0
000070F2 5240                       		addq.w	#1,d0
000070F4 31C0 F70C                  		move.w	d0,(v_bgscreenposy).w
000070F8 4E75                       		rts	
000070FA                            ; ===========================================================================
000070FA                            
000070FA                            BgScroll_End:
000070FA 3038 F700                  		move.w	(v_screenposx).w,d0
000070FE E240                       		asr.w	#1,d0
00007100 31C0 F708                  		move.w	d0,(v_bgscreenposx).w
00007104 31C0 F710                  		move.w	d0,(v_bg2screenposx).w
00007108 E440                       		asr.w	#2,d0
0000710A 3200                       		move.w	d0,d1
0000710C D040                       		add.w	d0,d0
0000710E D041                       		add.w	d1,d0
00007110 31C0 F718                  		move.w	d0,(v_bg3screenposx).w
00007114 42B8 F70C                  		clr.l	(v_bgscreenposy).w
00007118 42B8 F714                  		clr.l	(v_bg2screenposy).w
0000711C 42B8 F71C                  		clr.l	(v_bg3screenposy).w
00007120 45F8 A800                  		lea	($FFFFA800).w,a2
00007124 429A                       		clr.l	(a2)+
00007126 429A                       		clr.l	(a2)+
00007128 429A                       		clr.l	(a2)+
0000712A 4E75                       		rts
0000712A 4E75                       		rts
0000712C                            		include	"_inc\DeformLayers (JP1).asm"
0000712C                            ; ---------------------------------------------------------------------------
0000712C                            ; Background layer deformation subroutines
0000712C                            ; ---------------------------------------------------------------------------
0000712C                            
0000712C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000712C                            
0000712C                            
0000712C                            DeformLayers:
0000712C 4A38 F744                  		tst.b	(f_nobgscroll).w
00007130 6700                       		beq.s	@bgscroll
00007132 4E75                       		rts	
00007134                            ; ===========================================================================
00007134                            
00007134                            	@bgscroll:
00007134 4278 F754                  		clr.w	(v_fg_scroll_flags).w
00007138 4278 F756                  		clr.w	(v_bg1_scroll_flags).w
0000713C 4278 F758                  		clr.w	(v_bg2_scroll_flags).w
00007140 4278 F75A                  		clr.w	(v_bg3_scroll_flags).w
00007144 6100 0000                  		bsr.w	ScrollHoriz
00007148 6100 0000                  		bsr.w	ScrollVertical
0000714C 6100 0000                  		bsr.w	DynamicLevelEvents
00007150 31F8 F704 F616             		move.w	(v_screenposy).w,(v_scrposy_dup).w
00007156 31F8 F70C F618             		move.w	(v_bgscreenposy).w,(v_bgscrposy_dup).w
0000715C 7000                       		moveq	#0,d0
0000715E 1038 FE10                  		move.b	(v_zone).w,d0
00007162 D040                       		add.w	d0,d0
00007164 303B 0000                  		move.w	Deform_Index(pc,d0.w),d0
00007168 4EFB 0000                  		jmp	Deform_Index(pc,d0.w)
0000716C                            ; End of function DeformLayers
0000716C                            
0000716C                            ; ===========================================================================
0000716C                            ; ---------------------------------------------------------------------------
0000716C                            ; Offset index for background layer deformation	code
0000716C                            ; ---------------------------------------------------------------------------
0000716C 0000 0000                  Deform_Index:	dc.w Deform_GHZ-Deform_Index, Deform_LZ-Deform_Index
00007170 0000 0000                  		dc.w Deform_MZ-Deform_Index, Deform_SLZ-Deform_Index
00007174 0000 0000                  		dc.w Deform_SYZ-Deform_Index, Deform_SBZ-Deform_Index
00007178 0000                       		dc.w Deform_GHZ-Deform_Index
0000717A                            ; ---------------------------------------------------------------------------
0000717A                            ; Green	Hill Zone background layer deformation code
0000717A                            ; ---------------------------------------------------------------------------
0000717A                            
0000717A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000717A                            
0000717A                            
0000717A                            Deform_GHZ:
0000717A                            	;cmpi.b    #id_Title,(v_gamemode).w
0000717A                            	;beq.w    Deform_Title
0000717A                            
0000717A                            ;Deform_GHZ_Stage:
0000717A                            	; block 3 - distant mountains
0000717A 3838 F73A                  		move.w	(v_scrshiftx).w,d4
0000717E 48C4                       		ext.l	d4
00007180 EB84                       		asl.l	#5,d4
00007182 2204                       		move.l	d4,d1
00007184 E384                       		asl.l	#1,d4
00007186 D881                       		add.l	d1,d4
00007188 7C00                       		moveq	#0,d6
0000718A 6100 0000                  		bsr.w	BGScroll_Block3
0000718E                            	; block 2 - hills & waterfalls
0000718E 3838 F73A                  		move.w	(v_scrshiftx).w,d4
00007192 48C4                       		ext.l	d4
00007194 EF84                       		asl.l	#7,d4
00007196 7C00                       		moveq	#0,d6
00007198 6100 0000                  		bsr.w	BGScroll_Block2
0000719C                            	; calculate Y position
0000719C 43F8 CC00                  		lea	(v_hscrolltablebuffer).w,a1
000071A0 3038 F704                  		move.w	(v_screenposy).w,d0
000071A4 0240 07FF                  		andi.w	#$7FF,d0
000071A8 EA48                       		lsr.w	#5,d0
000071AA 4440                       		neg.w	d0
000071AC 0640 0020                  		addi.w	#$20,d0
000071B0 6A00                       		bpl.s	@limitY
000071B2 7000                       		moveq	#0,d0
000071B4                            	@limitY:
000071B4 3800                       		move.w	d0,d4
000071B6 31C0 F618                  		move.w	d0,(v_bgscrposy_dup).w
000071BA 3038 F700                  		move.w	(v_screenposx).w,d0
000071BE 0C38 0000 F600             		cmpi.b	#id_Title,(v_gamemode).w
000071C4 6600                       		bne.s	@notTitle
000071C6 7000                       		moveq	#0,d0	; reset foreground position in title screen
000071C8                            	@notTitle:
000071C8 4440                       		neg.w	d0
000071CA 4840                       		swap	d0
000071CC                            	; auto-scroll clouds
000071CC 45F8 A800                  		lea	(v_bgscroll_buffer).w,a2
000071D0 069A 0001 0000             		addi.l	#$10000,(a2)+
000071D6 069A 0000 C000             		addi.l	#$C000,(a2)+
000071DC 069A 0000 8000             		addi.l	#$8000,(a2)+
000071E2                            	; calculate background scroll	
000071E2 3038 A800                  		move.w	(v_bgscroll_buffer).w,d0
000071E6 D078 F718                  		add.w	(v_bg3screenposx).w,d0
000071EA 4440                       		neg.w	d0
000071EC 323C 001F                  		move.w	#$1F,d1
000071F0 9244                       		sub.w	d4,d1
000071F2 6500                       		bcs.s	@gotoCloud2
000071F4                            	@cloudLoop1:		; upper cloud (32px)
000071F4 22C0                       		move.l	d0,(a1)+
000071F6 51C9 FFFC                  		dbf	d1,@cloudLoop1
000071FA                            
000071FA                            	@gotoCloud2:
000071FA 3038 A804                  		move.w	(v_bgscroll_buffer+4).w,d0
000071FE D078 F718                  		add.w	(v_bg3screenposx).w,d0
00007202 4440                       		neg.w	d0
00007204 323C 000F                  		move.w	#$F,d1
00007208                            	@cloudLoop2:		; middle cloud (16px)
00007208 22C0                       		move.l	d0,(a1)+
0000720A 51C9 FFFC                  		dbf	d1,@cloudLoop2
0000720E                            
0000720E 3038 A808                  		move.w	(v_bgscroll_buffer+8).w,d0
00007212 D078 F718                  		add.w	(v_bg3screenposx).w,d0
00007216 4440                       		neg.w	d0
00007218 323C 000F                  		move.w	#$F,d1
0000721C                            	@cloudLoop3:		; lower cloud (16px)
0000721C 22C0                       		move.l	d0,(a1)+
0000721E 51C9 FFFC                  		dbf	d1,@cloudLoop3
00007222                            
00007222 323C 002F                  		move.w	#$2F,d1
00007226 3038 F718                  		move.w	(v_bg3screenposx).w,d0
0000722A 4440                       		neg.w	d0
0000722C                            	@mountainLoop:		; distant mountains (48px)
0000722C 22C0                       		move.l	d0,(a1)+
0000722E 51C9 FFFC                  		dbf	d1,@mountainLoop
00007232                            
00007232 323C 0027                  		move.w	#$27,d1
00007236 3038 F710                  		move.w	(v_bg2screenposx).w,d0
0000723A 4440                       		neg.w	d0
0000723C                            	@hillLoop:			; hills & waterfalls (40px)
0000723C 22C0                       		move.l	d0,(a1)+
0000723E 51C9 FFFC                  		dbf	d1,@hillLoop
00007242                            
00007242 3038 F710                  		move.w	(v_bg2screenposx).w,d0
00007246 3438 F700                  		move.w	(v_screenposx).w,d2
0000724A 9440                       		sub.w	d0,d2
0000724C 48C2                       		ext.l	d2
0000724E E182                       		asl.l	#8,d2
00007250 85FC 0068                  		divs.w	#$68,d2
00007254 48C2                       		ext.l	d2
00007256 E182                       		asl.l	#8,d2
00007258 7600                       		moveq	#0,d3
0000725A 3600                       		move.w	d0,d3
0000725C 323C 0047                  		move.w	#$47,d1
00007260 D244                       		add.w	d4,d1
00007262                            	@waterLoop:			; water deformation
00007262 3003                       		move.w	d3,d0
00007264 4440                       		neg.w	d0
00007266 22C0                       		move.l	d0,(a1)+
00007268 4843                       		swap	d3
0000726A D682                       		add.l	d2,d3
0000726C 4843                       		swap	d3
0000726E 51C9 FFF2                  		dbf	d1,@waterLoop
00007272 4E75                       		rts
00007274                            ; End of function Deform_GHZ
00007274                            
00007274                            Deform_Title:
00007274 3838 F73A                  		move.w	(v_scrshiftx).w,d4
00007278 48C4                       		ext.l	d4
0000727A EB84                       		asl.l	#5,d4
0000727C 2204                       		move.l	d4,d1
0000727E E384                       		asl.l	#1,d4
00007280 D881                       		add.l	d1,d4
00007282 7A00                       		moveq	#0,d5
00007284 6100 0000                  		bsr.w	BGScroll_Block1
00007288 6100 0000                  		bsr.w	BGScroll_Block3
0000728C 43F8 CC00                  		lea	(v_hscrolltablebuffer).w,a1
00007290 3038 F704                  		move.w	(v_screenposy).w,d0
00007294 0240 07FF                  		andi.w	#$7FF,d0
00007298 EA48                       		lsr.w	#5,d0
0000729A 4440                       		neg.w	d0
0000729C 0640 0026                  		addi.w	#$26,d0
000072A0 31C0 F714                  		move.w	d0,(v_bg2screenposy).w
000072A4 3800                       		move.w	d0,d4
000072A6 6100 0000                  		bsr.w	BGScroll_Block3
000072AA 31F8 F70C F618             		move.w	(v_bgscreenposy).w,(v_bgscrposy_dup).w
000072B0 323C 006F                  		move.w	#$6F,d1
000072B4 9244                       		sub.w	d4,d1
000072B6 3038 F700                  		move.w	(v_screenposx).w,d0
000072BA 0C38 0000 F600             		cmpi.b	#id_Title,(v_gamemode).w
000072C0 6600                       		bne.s	loc_633C
000072C2 7000                       		moveq	#0,d0
000072C4                            
000072C4                            loc_633C:
000072C4 4440                       		neg.w	d0
000072C6 4840                       		swap	d0
000072C8 3038 F708                  		move.w	(v_bgscreenposx).w,d0
000072CC 4440                       		neg.w	d0
000072CE                            
000072CE                            loc_6346:
000072CE 22C0                       		move.l	d0,(a1)+
000072D0 51C9 FFFC                  		dbf	d1,loc_6346
000072D4 323C 0027                  		move.w	#$27,d1
000072D8 3038 F710                  		move.w	(v_bg2screenposx).w,d0
000072DC 4440                       		neg.w	d0
000072DE                            
000072DE                            loc_6356:
000072DE 22C0                       		move.l	d0,(a1)+
000072E0 51C9 FFFC                  		dbf	d1,loc_6356
000072E4 3038 F710                  		move.w	(v_bg2screenposx).w,d0
000072E8 0640 0000                  		addi.w	#0,d0
000072EC 3438 F700                  		move.w	(v_screenposx).w,d2
000072F0 0642 FE00                  		addi.w	#-$200,d2
000072F4 9440                       		sub.w	d0,d2
000072F6 48C2                       		ext.l	d2
000072F8 E182                       		asl.l	#8,d2
000072FA 85FC 0068                  		divs.w	#$68,d2
000072FE 48C2                       		ext.l	d2
00007300 E182                       		asl.l	#8,d2
00007302 7600                       		moveq	#0,d3
00007304 3600                       		move.w	d0,d3
00007306 323C 0047                  		move.w	#$47,d1
0000730A D244                       		add.w	d4,d1
0000730C                            
0000730C                            loc_6384:
0000730C 3003                       		move.w	d3,d0
0000730E 4440                       		neg.w	d0
00007310 22C0                       		move.l	d0,(a1)+
00007312 4843                       		swap	d3
00007314 D682                       		add.l	d2,d3
00007316 4843                       		swap	d3
00007318 51C9 FFF2                  		dbf	d1,loc_6384
0000731C 4E75                       		rts	
0000731E                            
0000731E                            ; ===========================================================================
0000731E                            ; ---------------------------------------------------------------------------
0000731E                            ; Scroll routine for Labyrinth Zone - optimised by MarkeyJester
0000731E                            ; ---------------------------------------------------------------------------
0000731E                             
0000731E                            Deform_LZ:
0000731E 7007                       		moveq	#$07,d0					; prepare multiplication 100 / 2 for BG scrolling
00007320 3838 F73A                  		move.w	(v_scrshiftx).w,d4			; load horizontal movement distance (Since last frame)
00007324 48C4                       		ext.l	d4					; extend to long-word signed
00007326 E1A4                       		asl.l	d0,d4					; align as fixed point 16, but divide by 2 for BG
00007328 3A38 F73C                  		move.w	(v_scrshifty).w,d5			; load vertical movement distance (Since last frame)
0000732C 48C5                       		ext.l	d5					; extend to long-word signed
0000732E E1A5                       		asl.l	d0,d5					; align as fixed point 16, but divide by 2 for BG
00007330 6100 0000                  		bsr.w	BGScroll_Block1				; adjust BG scroll positions (and set draw code direction flags)
00007334 31F8 F70C F618             		move.w	(v_bgscreenposy).w,(v_bgscrposy_dup).w		; set BG V-scroll position
0000733A 43F8 CC00                  		lea	(v_hscrolltablebuffer).w,a1			; load H-scroll buffer
0000733E 3038 F700                  		move.w	(v_screenposx).w,d0			; load FG X position
00007342 4440                       		neg.w	d0					; reverse
00007344 4840                       		swap	d0					; send to upper word
00007346 3038 F708                  		move.w	(v_bgscreenposx).w,d0			; load BG X position
0000734A 4440                       		neg.w	d0					; reverse
0000734C 7600                       		moveq	#$00,d3					; clear d3
0000734E 1638 F7D8                  		move.b	(v_lz_deform).w,d3			; load wave-scroll timer
00007352 0678 0080 F7D8             		addi.w	#$0080,(v_lz_deform).w			; increase wave-scroll timer
00007358 343C 00E0                  		move.w	#$00E0,d2				; prepare water-line count
0000735C 3238 F646                  		move.w	(v_waterpos1).w,d1			; load water line position
00007360 9278 F704                  		sub.w	(v_screenposy).w,d1			; minus FG Y position
00007364 6B00                       		bmi.s	DLZ_Water				; if the screen is already underwater, branch
00007366 B242                       		cmp.w	d2,d1					; is the water line below the screen?
00007368 6F00                       		ble.s	DLZ_NoWater				; if not, branch
0000736A 3202                       		move.w	d2,d1					; set at maximum
0000736C                             
0000736C                            DLZ_NoWater:
0000736C 9441                       		sub.w	d1,d2					; subtract from water-line count
0000736E D601                       		add.b	d1,d3					; advance scroll wave timer to correct amount
00007370 5301                       		subq.b	#$01,d1					; decrease above water count
00007372 6500                       		bcs.s	DLZ_Water				; if finished, branch
00007374                             
00007374                            DLZ_Above:
00007374 22C0                       		move.l	d0,(a1)+				; save scroll position to buffer
00007376 51C9 FFFC                  		dbf	d1,DLZ_Above				; repeat for all above water lines
0000737A                             
0000737A                            DLZ_Water:
0000737A 5302                       		subq.b	#$01,d2					; decrease below water count
0000737C 6500                       		bcs.s	DLZ_Finish				; if finished, branch
0000737E 3200                       		move.w	d0,d1					; copy BG position back to d1
00007380 4840                       		swap	d0					; move FG position back to lower word in d0
00007382 3803                       		move.w	d3,d4					; copy sroll timer for BG use
00007384 D638 F705                  		add.b	(v_screenposy+$01).w,d3			; add FG Y position
00007388 D838 F70D                  		add.b	(v_bgscreenposy+$01).w,d4			; add BG Y position
0000738C D643                       		add.w	d3,d3					; multiply by word size (2)
0000738E D844                       		add.w	d4,d4					; ''
00007390 47F9 0000 0000             		lea	(DLZ_WaveBG).l,a3			; load beginning of BG wave data
00007396 D6C4                       		adda.w	d4,a3					; advance to correct starting point
00007398 1813                       		move.b	(a3),d4					; get current position byte
0000739A E404                       		asr.b	#$02,d4					; get only the position bits
0000739C 4884                       		ext.w	d4					; extend to word
0000739E D244                       		add.w	d4,d1					; adjust BG's current position
000073A0 45FB 3000                  		lea	DLZ_WaveFG(pc,d3.w),a2			; load correct starting point of FG wave data
000073A4 1812                       		move.b	(a2),d4					; get current position byte
000073A6 E404                       		asr.b	#$02,d4					; get only the position bits
000073A8 4884                       		ext.w	d4					; extend to word
000073AA D044                       		add.w	d4,d0					; adjust FG's current position
000073AC                             
000073AC                            DLZ_Below:
000073AC D05A                       		add.w	(a2)+,d0				; alter FG horizontal position
000073AE 32C0                       		move.w	d0,(a1)+				; save to scroll buffer
000073B0 D25B                       		add.w	(a3)+,d1				; alter BG horizontal position
000073B2 32C1                       		move.w	d1,(a1)+				; save to scroll buffer
000073B4 51CA FFF6                  		dbf	d2,DLZ_Below				; repeat for all below water lines
000073B8                             
000073B8                            DLZ_Finish:
000073B8 4E75                       		rts						; return
000073BA                             
000073BA                            ; ---------------------------------------------------------------------------
000073BA                            ; Scroll data for the FG
000073BA                            ; ---------------------------------------------------------------------------
000073BA                             
000073BA                            DLZ_WaveFG:
000073BA                            		rept	$02
000073BA                            		dc.w	$0001,$0400,$0401,$0800,$0801,$0C00,$0C00,$0C00,$0FFF,$0800,$0BFF,$0400,$07FF,$0000,$0000,$0000
000073BA                            		dc.w	$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000
000073BA                            		dc.w	$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000
000073BA                            		dc.w	$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000
000073BA                            		dc.w	$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000
000073BA                            		dc.w	$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000
000073BA                            		dc.w	$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000
000073BA                            		dc.w	$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000
000073BA                            		dc.w	$03FF,$FC00,$FFFF,$F800,$FBFF,$F400,$F400,$F400,$F401,$F800,$F801,$FC00,$FC01,$0000,$0000,$0000
000073BA                            		dc.w	$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000
000073BA                            		dc.w	$0001,$0400,$0401,$0800,$0801,$0C00,$0C00,$0C00,$0FFF,$0800,$0BFF,$0400,$07FF,$0000,$0000,$0000
000073BA                            		dc.w	$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000
000073BA                            		dc.w	$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000
000073BA                            		dc.w	$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000
000073BA                            		dc.w	$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000
000073BA                            		dc.w	$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000,$0000
000073BA 0001 0400 0401 0800 0801+  		endr
000077BA                             
000077BA                            ; ---------------------------------------------------------------------------
000077BA                            ; Scroll data for the BG
000077BA                            ; ---------------------------------------------------------------------------
000077BA                             
000077BA                            DLZ_WaveBG:	rept	$04
000077BA                            		dc.w	$FC01,$0000,$0000,$0000,$0000,$0000,$0001,$0400,$0400,$0400,$0400,$0401,$0800,$0800,$0800,$0800
000077BA                            		dc.w	$0800,$0800,$0801,$0C00,$0C00,$0C00,$0C00,$0C00,$0C00,$0C00,$0C00,$0C00,$0C00,$0C00,$0C00,$0C00
000077BA                            		dc.w	$0C01,$13FF,$0C00,$0C00,$0C00,$0C00,$0C00,$0C00,$0C00,$0C00,$0C00,$0C00,$0C00,$0C00,$0C00,$0FFF
000077BA                            		dc.w	$0800,$0800,$0800,$0800,$0800,$0800,$0BFF,$0400,$0400,$0400,$0400,$07FF,$0000,$0000,$0000,$0000
000077BA                            		dc.w	$0000,$03FF,$FC00,$FC00,$FC00,$FC00,$FFFF,$F800,$F800,$F800,$F800,$FBFF,$F400,$F400,$F400,$F400
000077BA                            		dc.w	$F400,$F400,$F7FF,$F000,$F000,$F000,$F000,$F000,$F000,$F000,$F000,$F000,$F000,$F000,$F000,$F000
000077BA                            		dc.w	$F000,$F000,$F000,$F000,$F000,$F000,$F000,$F000,$F000,$F000,$F000,$F000,$F000,$F000,$F000,$F001
000077BA                            		dc.w	$F400,$F400,$F400,$F400,$F400,$F400,$F401,$F800,$F800,$F800,$F800,$F801,$FC00,$FC00,$FC00,$FC00
000077BA FC01 0000 0000 0000 0000+  		endr
00007BBA                             
00007BBA                            ; ===========================================================================
00007BBA                            ; End of function Deform_LZ
00007BBA                            
00007BBA                            ; ---------------------------------------------------------------------------
00007BBA                            ; Marble Zone background layer deformation code
00007BBA                            ; ---------------------------------------------------------------------------
00007BBA                            
00007BBA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007BBA                            
00007BBA                            
00007BBA                            Deform_MZ:
00007BBA                            	; block 1 - dungeon interior
00007BBA 3838 F73A                  		move.w	(v_scrshiftx).w,d4
00007BBE 48C4                       		ext.l	d4
00007BC0 ED84                       		asl.l	#6,d4
00007BC2 2204                       		move.l	d4,d1
00007BC4 E384                       		asl.l	#1,d4
00007BC6 D881                       		add.l	d1,d4
00007BC8 7C02                       		moveq	#2,d6
00007BCA 6100 0000                  		bsr.w	BGScroll_Block1
00007BCE                            	; block 3 - mountains
00007BCE 3838 F73A                  		move.w	(v_scrshiftx).w,d4
00007BD2 48C4                       		ext.l	d4
00007BD4 ED84                       		asl.l	#6,d4
00007BD6 7C06                       		moveq	#6,d6
00007BD8 6100 0000                  		bsr.w	BGScroll_Block3
00007BDC                            	; block 2 - bushes & antique buildings
00007BDC 3838 F73A                  		move.w	(v_scrshiftx).w,d4
00007BE0 48C4                       		ext.l	d4
00007BE2 EF84                       		asl.l	#7,d4
00007BE4 7C04                       		moveq	#4,d6
00007BE6 6100 0000                  		bsr.w	BGScroll_Block2
00007BEA                            	; calculate y-position of background
00007BEA 303C 0200                  		move.w	#$200,d0	; start with 512px, ignoring 2 chunks
00007BEE 3238 F704                  		move.w	(v_screenposy).w,d1
00007BF2 0441 01C8                  		subi.w	#$1C8,d1	; 0% scrolling when y <= 56px 
00007BF6 6500                       		bcs.s	@noYscroll
00007BF8 3401                       		move.w	d1,d2
00007BFA D241                       		add.w	d1,d1
00007BFC D242                       		add.w	d2,d1
00007BFE E441                       		asr.w	#2,d1
00007C00 D041                       		add.w	d1,d0
00007C02                            	@noYscroll:
00007C02 31C0 F714                  		move.w	d0,(v_bg2screenposy).w
00007C06 31C0 F71C                  		move.w	d0,(v_bg3screenposy).w
00007C0A 6100 0000                  		bsr.w	BGScroll_YAbsolute
00007C0E 31F8 F70C F618             		move.w	(v_bgscreenposy).w,(v_bgscrposy_dup).w
00007C14                            	; do something with redraw flags
00007C14 1038 F756                  		move.b	(v_bg1_scroll_flags).w,d0
00007C18 8038 F758                  		or.b	(v_bg2_scroll_flags).w,d0
00007C1C 8138 F75A                  		or.b	d0,(v_bg3_scroll_flags).w
00007C20 4238 F756                  		clr.b	(v_bg1_scroll_flags).w
00007C24 4238 F758                  		clr.b	(v_bg2_scroll_flags).w
00007C28                            	; calculate background scroll buffer
00007C28 43F8 A800                  		lea	(v_bgscroll_buffer).w,a1
00007C2C 3438 F700                  		move.w	(v_screenposx).w,d2
00007C30 4442                       		neg.w	d2
00007C32 3002                       		move.w	d2,d0
00007C34 E440                       		asr.w	#2,d0
00007C36 9042                       		sub.w	d2,d0
00007C38 48C0                       		ext.l	d0
00007C3A E780                       		asl.l	#3,d0
00007C3C 81FC 0005                  		divs.w	#5,d0
00007C40 48C0                       		ext.l	d0
00007C42 E980                       		asl.l	#4,d0
00007C44 E180                       		asl.l	#8,d0
00007C46 7600                       		moveq	#0,d3
00007C48 3602                       		move.w	d2,d3
00007C4A E243                       		asr.w	#1,d3
00007C4C 323C 0004                  		move.w	#4,d1
00007C50                            	@cloudLoop:		
00007C50 32C3                       		move.w	d3,(a1)+
00007C52 4843                       		swap	d3
00007C54 D680                       		add.l	d0,d3
00007C56 4843                       		swap	d3
00007C58 51C9 FFF6                  		dbf	d1,@cloudLoop
00007C5C                            
00007C5C 3038 F718                  		move.w	(v_bg3screenposx).w,d0
00007C60 4440                       		neg.w	d0
00007C62 323C 0001                  		move.w	#1,d1
00007C66                            	@mountainLoop:		
00007C66 32C0                       		move.w	d0,(a1)+
00007C68 51C9 FFFC                  		dbf	d1,@mountainLoop
00007C6C                            
00007C6C 3038 F710                  		move.w	(v_bg2screenposx).w,d0
00007C70 4440                       		neg.w	d0
00007C72 323C 0008                  		move.w	#8,d1
00007C76                            	@bushLoop:		
00007C76 32C0                       		move.w	d0,(a1)+
00007C78 51C9 FFFC                  		dbf	d1,@bushLoop
00007C7C                            
00007C7C 3038 F708                  		move.w	(v_bgscreenposx).w,d0
00007C80 4440                       		neg.w	d0
00007C82 323C 000F                  		move.w	#$F,d1
00007C86                            	@interiorLoop:		
00007C86 32C0                       		move.w	d0,(a1)+
00007C88 51C9 FFFC                  		dbf	d1,@interiorLoop
00007C8C                            
00007C8C 45F8 A800                  		lea	(v_bgscroll_buffer).w,a2
00007C90 3038 F70C                  		move.w	(v_bgscreenposy).w,d0
00007C94 0440 0200                  		subi.w	#$200,d0	; subtract 512px (unused 2 chunks)
00007C98 3400                       		move.w	d0,d2
00007C9A 0C40 0100                  		cmpi.w	#$100,d0
00007C9E 6500                       		bcs.s	@limitY
00007CA0 303C 0100                  		move.w	#$100,d0
00007CA4                            	@limitY:
00007CA4 0240 01F0                  		andi.w	#$1F0,d0
00007CA8 E648                       		lsr.w	#3,d0
00007CAA 45F2 0000                  		lea	(a2,d0),a2
00007CAE 6000 0000                  		bra.w	Bg_Scroll_X
00007CB2                            ; End of function Deform_MZ
00007CB2                            
00007CB2                            ; ---------------------------------------------------------------------------
00007CB2                            ; Star Light Zone background layer deformation code
00007CB2                            ; ---------------------------------------------------------------------------
00007CB2                            
00007CB2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007CB2                            
00007CB2                            
00007CB2                            Deform_SLZ:
00007CB2                            	; vertical scrolling
00007CB2 3A38 F73C                  		move.w	(v_scrshifty).w,d5
00007CB6 48C5                       		ext.l	d5
00007CB8 EF85                       		asl.l	#7,d5
00007CBA 6100 0000                  		bsr.w	Bg_Scroll_Y
00007CBE 31F8 F70C F618             		move.w	(v_bgscreenposy).w,(v_bgscrposy_dup).w
00007CC4                            	; calculate background scroll buffer
00007CC4 43F8 A800                  		lea	(v_bgscroll_buffer).w,a1
00007CC8 3438 F700                  		move.w	(v_screenposx).w,d2
00007CCC 4442                       		neg.w	d2
00007CCE 3002                       		move.w	d2,d0
00007CD0 E640                       		asr.w	#3,d0
00007CD2 9042                       		sub.w	d2,d0
00007CD4 48C0                       		ext.l	d0
00007CD6 E980                       		asl.l	#4,d0
00007CD8 81FC 001C                  		divs.w	#$1C,d0
00007CDC 48C0                       		ext.l	d0
00007CDE E980                       		asl.l	#4,d0
00007CE0 E180                       		asl.l	#8,d0
00007CE2 7600                       		moveq	#0,d3
00007CE4 3602                       		move.w	d2,d3
00007CE6 323C 001B                  		move.w	#$1B,d1
00007CEA                            	@starLoop:		
00007CEA 32C3                       		move.w	d3,(a1)+
00007CEC 4843                       		swap	d3
00007CEE D680                       		add.l	d0,d3
00007CF0 4843                       		swap	d3
00007CF2 51C9 FFF6                  		dbf	d1,@starLoop
00007CF6                            
00007CF6 3002                       		move.w	d2,d0
00007CF8 E640                       		asr.w	#3,d0
00007CFA 3200                       		move.w	d0,d1
00007CFC E241                       		asr.w	#1,d1
00007CFE D041                       		add.w	d1,d0
00007D00 323C 0004                  		move.w	#4,d1
00007D04                            	@buildingLoop1:		; distant black buildings
00007D04 32C0                       		move.w	d0,(a1)+
00007D06 51C9 FFFC                  		dbf	d1,@buildingLoop1
00007D0A                            
00007D0A 3002                       		move.w	d2,d0
00007D0C E440                       		asr.w	#2,d0
00007D0E 323C 0004                  		move.w	#4,d1
00007D12                            	@buildingLoop2:		; closer buildings
00007D12 32C0                       		move.w	d0,(a1)+
00007D14 51C9 FFFC                  		dbf	d1,@buildingLoop2
00007D18                            
00007D18 3002                       		move.w	d2,d0
00007D1A E240                       		asr.w	#1,d0
00007D1C 323C 001D                  		move.w	#$1D,d1
00007D20                            	@bottomLoop:		; bottom part of background
00007D20 32C0                       		move.w	d0,(a1)+
00007D22 51C9 FFFC                  		dbf	d1,@bottomLoop
00007D26                            
00007D26 45F8 A800                  		lea	(v_bgscroll_buffer).w,a2
00007D2A 3038 F70C                  		move.w	(v_bgscreenposy).w,d0
00007D2E 3400                       		move.w	d0,d2
00007D30 0440 00C0                  		subi.w	#$C0,d0
00007D34 0240 03F0                  		andi.w	#$3F0,d0
00007D38 E648                       		lsr.w	#3,d0
00007D3A 45F2 0000                  		lea	(a2,d0),a2
00007D3E                            ;-------------------------------------------------------------------------------
00007D3E                            ;-------------------------------------------------------------------------------
00007D3E                            Bg_Scroll_X:
00007D3E 43F8 CC00                  		lea	(v_hscrolltablebuffer).w,a1
00007D42 323C 000E                  		move.w	#$E,d1
00007D46 3038 F700                  		move.w	(v_screenposx).w,d0
00007D4A 4440                       		neg.w	d0
00007D4C 4840                       		swap	d0
00007D4E 0242 000F                  		andi.w	#$F,d2
00007D52 D442                       		add.w	d2,d2
00007D54 301A                       		move.w	(a2)+,d0
00007D56 4EFB 2000                  		jmp	@pixelJump(pc,d2.w)		; skip pixels for first row
00007D5A                            	@blockLoop:
00007D5A 301A                       		move.w	(a2)+,d0
00007D5C                            	@pixelJump:		
00007D5C 22C0                       		move.l	d0,(a1)+
00007D5E 22C0                       		move.l	d0,(a1)+
00007D60 22C0                       		move.l	d0,(a1)+
00007D62 22C0                       		move.l	d0,(a1)+
00007D64 22C0                       		move.l	d0,(a1)+
00007D66 22C0                       		move.l	d0,(a1)+
00007D68 22C0                       		move.l	d0,(a1)+
00007D6A 22C0                       		move.l	d0,(a1)+
00007D6C 22C0                       		move.l	d0,(a1)+
00007D6E 22C0                       		move.l	d0,(a1)+
00007D70 22C0                       		move.l	d0,(a1)+
00007D72 22C0                       		move.l	d0,(a1)+
00007D74 22C0                       		move.l	d0,(a1)+
00007D76 22C0                       		move.l	d0,(a1)+
00007D78 22C0                       		move.l	d0,(a1)+
00007D7A 22C0                       		move.l	d0,(a1)+
00007D7C 51C9 FFDC                  		dbf	d1,@blockLoop
00007D80 4E75                       		rts
00007D82                            
00007D82                            ; ---------------------------------------------------------------------------
00007D82                            ; Spring Yard Zone background layer deformation	code
00007D82                            ; ---------------------------------------------------------------------------
00007D82                            
00007D82                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007D82                            
00007D82                            
00007D82                            Deform_SYZ:
00007D82                            	; vertical scrolling
00007D82 3A38 F73C                  		move.w	(v_scrshifty).w,d5
00007D86 48C5                       		ext.l	d5
00007D88 E985                       		asl.l	#4,d5
00007D8A 2205                       		move.l	d5,d1
00007D8C E385                       		asl.l	#1,d5
00007D8E DA81                       		add.l	d1,d5
00007D90 6100 0000                  		bsr.w	Bg_Scroll_Y
00007D94 31F8 F70C F618             		move.w	(v_bgscreenposy).w,(v_bgscrposy_dup).w
00007D9A                            	; calculate background scroll buffer
00007D9A 43F8 A800                  		lea	(v_bgscroll_buffer).w,a1
00007D9E 3438 F700                  		move.w	(v_screenposx).w,d2
00007DA2 4442                       		neg.w	d2
00007DA4 3002                       		move.w	d2,d0
00007DA6 E640                       		asr.w	#3,d0
00007DA8 9042                       		sub.w	d2,d0
00007DAA 48C0                       		ext.l	d0
00007DAC E780                       		asl.l	#3,d0
00007DAE 81FC 0008                  		divs.w	#8,d0
00007DB2 48C0                       		ext.l	d0
00007DB4 E980                       		asl.l	#4,d0
00007DB6 E180                       		asl.l	#8,d0
00007DB8 7600                       		moveq	#0,d3
00007DBA 3602                       		move.w	d2,d3
00007DBC E243                       		asr.w	#1,d3
00007DBE 323C 0007                  		move.w	#7,d1
00007DC2                            	@cloudLoop:		
00007DC2 32C3                       		move.w	d3,(a1)+
00007DC4 4843                       		swap	d3
00007DC6 D680                       		add.l	d0,d3
00007DC8 4843                       		swap	d3
00007DCA 51C9 FFF6                  		dbf	d1,@cloudLoop
00007DCE                            
00007DCE 3002                       		move.w	d2,d0
00007DD0 E640                       		asr.w	#3,d0
00007DD2 323C 0004                  		move.w	#4,d1
00007DD6                            	@mountainLoop:		
00007DD6 32C0                       		move.w	d0,(a1)+
00007DD8 51C9 FFFC                  		dbf	d1,@mountainLoop
00007DDC                            
00007DDC 3002                       		move.w	d2,d0
00007DDE E440                       		asr.w	#2,d0
00007DE0 323C 0005                  		move.w	#5,d1
00007DE4                            	@buildingLoop:		
00007DE4 32C0                       		move.w	d0,(a1)+
00007DE6 51C9 FFFC                  		dbf	d1,@buildingLoop
00007DEA                            
00007DEA 3002                       		move.w	d2,d0
00007DEC 3202                       		move.w	d2,d1
00007DEE E241                       		asr.w	#1,d1
00007DF0 9041                       		sub.w	d1,d0
00007DF2 48C0                       		ext.l	d0
00007DF4 E980                       		asl.l	#4,d0
00007DF6 81FC 000E                  		divs.w	#$E,d0
00007DFA 48C0                       		ext.l	d0
00007DFC E980                       		asl.l	#4,d0
00007DFE E180                       		asl.l	#8,d0
00007E00 7600                       		moveq	#0,d3
00007E02 3602                       		move.w	d2,d3
00007E04 E243                       		asr.w	#1,d3
00007E06 323C 000D                  		move.w	#$D,d1
00007E0A                            	@bushLoop:		
00007E0A 32C3                       		move.w	d3,(a1)+
00007E0C 4843                       		swap	d3
00007E0E D680                       		add.l	d0,d3
00007E10 4843                       		swap	d3
00007E12 51C9 FFF6                  		dbf	d1,@bushLoop
00007E16                            
00007E16 45F8 A800                  		lea	(v_bgscroll_buffer).w,a2
00007E1A 3038 F70C                  		move.w	(v_bgscreenposy).w,d0
00007E1E 3400                       		move.w	d0,d2
00007E20 0240 01F0                  		andi.w	#$1F0,d0
00007E24 E648                       		lsr.w	#3,d0
00007E26 45F2 0000                  		lea	(a2,d0),a2
00007E2A 6000 FF12                  		bra.w	Bg_Scroll_X
00007E2E                            ; End of function Deform_SYZ
00007E2E                            
00007E2E                            ; ---------------------------------------------------------------------------
00007E2E                            ; Scrap	Brain Zone background layer deformation	code
00007E2E                            ; ---------------------------------------------------------------------------
00007E2E                            
00007E2E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007E2E                            
00007E2E                            
00007E2E                            Deform_SBZ:
00007E2E 3838 F73A                  		move.w	(v_scrshiftx).w,d4
00007E32 48C4                       		ext.l	d4
00007E34 ED84                       		asl.l	#6,d4
00007E36 3A38 F73C                  		move.w	(v_scrshifty).w,d5
00007E3A 48C5                       		ext.l	d5
00007E3C E985                       		asl.l	#4,d5
00007E3E E385                       		asl.l	#1,d5
00007E40 6100 0000                  		bsr.w	BGScroll_XY
00007E44 31F8 F70C F618             		move.w	(v_bgscreenposy).w,(v_bgscrposy_dup).w
00007E4A 43F8 CC00                  		lea	(v_hscrolltablebuffer).w,a1
00007E4E 323C 00DF                  		move.w	#223,d1
00007E52 3038 F700                  		move.w	(v_screenposx).w,d0
00007E56 4440                       		neg.w	d0
00007E58 4840                       		swap	d0
00007E5A 3038 F708                  		move.w	(v_bgscreenposx).w,d0
00007E5E 4440                       		neg.w	d0
00007E60                            
00007E60                            loc_6576:
00007E60 22C0                       		move.l	d0,(a1)+
00007E62 51C9 FFFC                  		dbf	d1,loc_6576
00007E66 4E75                       		rts	
00007E68                            ;-------------------------------------------------------------------------------
00007E68                            Deform_SBZ2:;loc_68A2:
00007E68 3838 F73A                  		move.w	(v_scrshiftx).w,d4
00007E6C 48C4                       		ext.l	d4
00007E6E ED84                       		asl.l	#6,d4
00007E70 3A38 F73C                  		move.w	(v_scrshifty).w,d5
00007E74 48C5                       		ext.l	d5
00007E76 E985                       		asl.l	#4,d5
00007E78 E385                       		asl.l	#1,d5
00007E7A 6100 0000                  		bsr.w	BGScroll_XY
00007E7E 31F8 F70C F618             		move.w	(v_bgscreenposy).w,(v_bgscrposy_dup).w
00007E84 43F8 CC00                  		lea	(v_hscrolltablebuffer).w,a1
00007E88 323C 00DF                  		move.w	#223,d1
00007E8C 3038 F700                  		move.w	(v_screenposx).w,d0
00007E90 4440                       		neg.w	d0
00007E92 4840                       		swap	d0
00007E94 3038 F708                  		move.w	(v_bgscreenposx).w,d0
00007E98 4440                       		neg.w	d0
00007E9A                            
00007E9A                            loc_6577:
00007E9A 22C0                       		move.l	d0,(a1)+
00007E9C 51C9 FFFC                  		dbf	d1,loc_6577
00007EA0 4E75                       		rts	
00007EA2                            
00007EA2                            ; ---------------------------------------------------------------------------
00007EA2                            ; Subroutine to	scroll the level horizontally as Sonic moves
00007EA2                            ; ---------------------------------------------------------------------------
00007EA2                            
00007EA2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007EA2                            
00007EA2                            
00007EA2                            ScrollHoriz:
00007EA2 3838 F700                  		move.w	(v_screenposx).w,d4 ; save old screen position
00007EA6 6100                       		bsr.s	MoveScreenHoriz
00007EA8 3038 F700                  		move.w	(v_screenposx).w,d0
00007EAC 0240 0010                  		andi.w	#$10,d0
00007EB0 1238 F74A                  		move.b	(v_fg_xblock).w,d1
00007EB4 B300                       		eor.b	d1,d0
00007EB6 6600                       		bne.s	@return
00007EB8 0A38 0010 F74A             		eori.b	#$10,(v_fg_xblock).w
00007EBE 3038 F700                  		move.w	(v_screenposx).w,d0
00007EC2 9044                       		sub.w	d4,d0		; compare new with old screen position
00007EC4 6A00                       		bpl.s	@scrollRight
00007EC6                            
00007EC6 08F8 0002 F754             		bset	#2,(v_fg_scroll_flags).w ; screen moves backward
00007ECC 4E75                       		rts	
00007ECE                            
00007ECE                            	@scrollRight:
00007ECE 08F8 0003 F754             		bset	#3,(v_fg_scroll_flags).w ; screen moves forward
00007ED4                            
00007ED4                            	@return:
00007ED4 4E75                       		rts	
00007ED6                            ; End of function ScrollHoriz
00007ED6                            
00007ED6                            
00007ED6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007ED6                            
00007ED6                            MoveScreenHoriz:
00007ED6 4A38 FF8B                  		tst.b	($FFFFFF8B).w
00007EDA 6700 0000                  		beq.w	@cont		
00007EDE 4EF9 0000 0000             		jmp	MoveScreenHorizEXT
00007EE4                            		
00007EE4                            	@cont:		
00007EE4 3238 C904                  		move.w	($FFFFC904).w,d1
00007EE8 6700                       		beq.s	@cont1
00007EEA 0441 0100                  		sub.w	#$100,d1
00007EEE 31C1 C904                  		move.w	d1,($FFFFC904).w
00007EF2 7200                       		moveq	#0,d1
00007EF4 1238 C904                  		move.b	($FFFFC904).w,d1
00007EF8 E509                       		lsl.b	#2,d1
00007EFA 5801                       		addq.b	#4,d1
00007EFC 3038 F7A8                  		move.w	($FFFFF7A8).w,d0
00007F00 9001                       		sub.b	d1,d0
00007F02 43F8 CB00                  		lea	($FFFFCB00).w,a1
00007F06 3031 0000                  		move.w	(a1,d0.w),d0
00007F0A 0240 3FFF                  		and.w	#$3FFF,d0
00007F0E 6000                       		bra.s	@cont2
00007F10                            		
00007F10                            @cont1:
00007F10 3038 D008                  		move.w	($FFFFD008).w,d0
00007F14                            		
00007F14                            @cont2:
00007F14 9078 F700                  		sub.w	($FFFFF700).w,d0
00007F18 0440 0090                          subi.w    #144,d0        ; is distance less than 144px?
00007F1C 6500                               bcs.s    SH_BehindMid    ; if yes, branch
00007F1E 0440 0010                          subi.w    #16,d0        ; is distance more than 160px?
00007F22 6400                               bcc.s    SH_AheadOfMid    ; if yes, branch
00007F24 4278 F73A                          clr.w    (v_scrshiftx).w
00007F28 4E75                               rts 
00007F2A                            ; ===========================================================================
00007F2A                            
00007F2A                            SH_AheadOfMid:
00007F2A 0C40 0010                          cmpi.w    #16,d0        ; is Sonic within 16px of middle area?
00007F2E 6500                               bcs.s    SH_Ahead16    ; if yes, branch
00007F30 303C 0010                          move.w    #16,d0        ; set to 16 if greater
00007F34                            
00007F34                                SH_Ahead16:
00007F34 D078 F700                          add.w    (v_screenposx).w,d0
00007F38 B078 F72A                          cmp.w    (v_limitright2).w,d0
00007F3C 6D00                               blt.s    SH_SetScreen
00007F3E 3038 F72A                          move.w    (v_limitright2).w,d0
00007F42                            
00007F42                            SH_SetScreen:
00007F42 3200                               move.w    d0,d1
00007F44 9278 F700                          sub.w    (v_screenposx).w,d1
00007F48 E141                               asl.w    #8,d1
00007F4A 31C0 F700                          move.w    d0,(v_screenposx).w ; set new screen position
00007F4E 31C1 F73A                          move.w    d1,(v_scrshiftx).w ; set distance for screen movement
00007F52 4E75                               rts 
00007F54                            ; ===========================================================================
00007F54                            
00007F54                            SH_BehindMid:
00007F54 0C40 FFF0                  		cmpi.w	#-$10,d0
00007F58 6400                       		bcc.s	@cont
00007F5A 303C FFF0                  		move.w	#-$10,d0	
00007F5E                            
00007F5E                            @cont:
00007F5E D078 F700                  		add.w	(v_screenposx).w,d0
00007F62 B078 F728                  		cmp.w	(v_limitleft2).w,d0
00007F66 6EDA                       		bgt.s	SH_SetScreen
00007F68 3038 F728                  		move.w	(v_limitleft2).w,d0
00007F6C 60D4                       		bra.s	SH_SetScreen
00007F6E                            ; End of function MoveScreenHoriz
00007F6E                            ; ||||||||||||||| S U B    R O U T    I N E |||||||||||||||||||||||||||||||||||||||
00007F6E                            
00007F6E                            MoveScreenHorizEXT:
00007F6E 3238 C904                  		move.w	($FFFFC904).w,d1
00007F72 6700                       		beq.s	@cont1
00007F74 0441 0100                  		sub.w	#$100,d1
00007F78 31C1 C904                  		move.w	d1,($FFFFC904).w
00007F7C 7200                       		moveq	#0,d1
00007F7E 1238 C904                  		move.b	($FFFFC904).w,d1
00007F82 E509                       		lsl.b	#2,d1
00007F84 5801                       		addq.b	#4,d1
00007F86 3038 F7A8                  		move.w	($FFFFF7A8).w,d0
00007F8A 9001                       		sub.b	d1,d0
00007F8C 43F8 CB00                  		lea	($FFFFCB00).w,a1
00007F90 3031 0000                  		move.w	(a1,d0.w),d0
00007F94 0240 3FFF                  		and.w	#$3FFF,d0
00007F98 6000                       		bra.s	@cont2
00007F9A                            		
00007F9A                            @cont1:
00007F9A 3038 D008                  		move.w	($FFFFD008).w,d0
00007F9E                            		
00007F9E                            @cont2:
00007F9E 9078 F700                  		sub.w	($FFFFF700).w,d0
00007FA2 9078 F7A0                          sub.w    (v_camera_pan).w,d0    ; Horizontal camera pan value
00007FA6 6700                               beq.s    SHEXT_ProperlyFramed    ; if zero, branch
00007FA8 6500                               bcs.s    SHEXT_BehindMid    ; if less than, branch
00007FAA 6000                               bra.s    SHEXT_AheadOfMid    ; branch
00007FAC                            ; ===========================================================================
00007FAC                            
00007FAC                            SHEXT_ProperlyFramed:
00007FAC 4278 F73A                          clr.w    (v_scrshiftx).w
00007FB0 4E75                               rts 
00007FB2                            ; ===========================================================================
00007FB2                            
00007FB2                            SHEXT_AheadOfMid:
00007FB2 0C40 0010                          cmpi.w    #16,d0        ; is Sonic within 16px of middle area?
00007FB6 6D00                               blt.s    SHEXT_Ahead16    ; if yes, branch
00007FB8 303C 0010                          move.w    #16,d0        ; set to 16 if greater
00007FBC                            
00007FBC                            SHEXT_Ahead16:
00007FBC D078 F700                          add.w    (v_screenposx).w,d0
00007FC0 B078 F72A                          cmp.w    (v_limitright2).w,d0
00007FC4 6D00                               blt.s    SHEXT_SetScreen
00007FC6 3038 F72A                          move.w    (v_limitright2).w,d0
00007FCA                            
00007FCA                            SHEXT_SetScreen:
00007FCA 3200                               move.w    d0,d1
00007FCC 9278 F700                          sub.w    (v_screenposx).w,d1
00007FD0 E141                               asl.w    #8,d1
00007FD2 31C0 F700                          move.w    d0,(v_screenposx).w ; set new screen position
00007FD6 31C1 F73A                          move.w    d1,(v_scrshiftx).w ; set distance for screen movement
00007FDA 4E75                               rts
00007FDC                            
00007FDC                            ; ===========================================================================
00007FDC                            
00007FDC                            SHEXT_BehindMid:
00007FDC 0C40 FFF0                          cmpi.w    #-16,d0        ; is Sonic within 16px of middle area?
00007FE0 6C00                               bge.s    SHEXT_Behind16    ; if no, branch
00007FE2 303C FFF0                          move.w    #-16,d0        ; set to -16 if less
00007FE6                            
00007FE6                            SHEXT_Behind16:
00007FE6 D078 F700                          add.w    (v_screenposx).w,d0
00007FEA B078 F728                          cmp.w    (v_limitleft2).w,d0
00007FEE 6EDA                               bgt.s    SHEXT_SetScreen
00007FF0 3038 F728                          move.w    (v_limitleft2).w,d0
00007FF4 60D4                               bra.s    SHEXT_SetScreen
00007FF6                                  
00007FF6                            ; End of function MoveScreenHoriz
00007FF6                            
00007FF6                            
00007FF6                            ; ---------------------------------------------------------------------------
00007FF6                            ; Subroutine to	scroll the level vertically as Sonic moves
00007FF6                            ; ---------------------------------------------------------------------------
00007FF6                            
00007FF6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007FF6                            
00007FF6                            
00007FF6                            ScrollVertical:
00007FF6 7200                       		moveq	#0,d1
00007FF8 3038 D00C                  		move.w	(v_player+obY).w,d0
00007FFC 9078 F704                  		sub.w	(v_screenposy).w,d0 ; Sonic's distance from top of screen
00008000 0838 0002 D022             		btst	#2,(v_player+obStatus).w ; is Sonic rolling?
00008006 6700                       		beq.s	SV_NotRolling	; if not, branch
00008008 5B40                       		subq.w	#5,d0
0000800A                            
0000800A                            	SV_NotRolling:
0000800A 0838 0001 D022             		btst	#1,(v_player+obStatus).w ; is Sonic jumping?
00008010 6700                       		beq.s	loc_664A	; if not, branch
00008012                            
00008012 0640 0020                  		addi.w	#32,d0
00008016 9078 F73E                  		sub.w	(v_lookshift).w,d0
0000801A 6500                       		bcs.s	loc_6696
0000801C 0440 0040                  		subi.w	#64,d0
00008020 6400                       		bcc.s	loc_6696
00008022 4A38 F75C                  		tst.b	(f_bgscrollvert).w
00008026 6600                       		bne.s	loc_66A8
00008028 6000                       		bra.s	loc_6656
0000802A                            ; ===========================================================================
0000802A                            
0000802A                            loc_664A:
0000802A 9078 F73E                  		sub.w	(v_lookshift).w,d0
0000802E 6600                       		bne.s	loc_665C
00008030 4A38 F75C                  		tst.b	(f_bgscrollvert).w
00008034 6600                       		bne.s	loc_66A8
00008036                            
00008036                            loc_6656:
00008036 4278 F73C                  		clr.w	(v_scrshifty).w
0000803A 4E75                       		rts	
0000803C                            ; ===========================================================================
0000803C                            
0000803C                            loc_665C:
0000803C 0C78 0060 F73E             		cmpi.w	#$60,(v_lookshift).w
00008042 6600                       		bne.s	loc_6684
00008044 3238 D020                  		move.w	(v_player+obInertia).w,d1
00008048 6A00                       		bpl.s	loc_666C
0000804A 4441                       		neg.w	d1
0000804C                            
0000804C                            loc_666C:
0000804C 0C41 0800                  		cmpi.w	#$800,d1
00008050 6400                       		bcc.s	loc_6696
00008052 323C 0600                  		move.w	#$600,d1
00008056 0C40 0006                  		cmpi.w	#6,d0
0000805A 6E00                       		bgt.s	loc_66F6
0000805C 0C40 FFFA                  		cmpi.w	#-6,d0
00008060 6D00                       		blt.s	loc_66C0
00008062 6000                       		bra.s	loc_66AE
00008064                            ; ===========================================================================
00008064                            
00008064                            loc_6684:
00008064 323C 0200                  		move.w	#$200,d1
00008068 0C40 0002                  		cmpi.w	#2,d0
0000806C 6E00                       		bgt.s	loc_66F6
0000806E 0C40 FFFE                  		cmpi.w	#-2,d0
00008072 6D00                       		blt.s	loc_66C0
00008074 6000                       		bra.s	loc_66AE
00008076                            ; ===========================================================================
00008076                            
00008076                            loc_6696:
00008076 323C 1000                  		move.w	#$1000,d1
0000807A 0C40 0010                  		cmpi.w	#$10,d0
0000807E 6E00                       		bgt.s	loc_66F6
00008080 0C40 FFF0                  		cmpi.w	#-$10,d0
00008084 6D00                       		blt.s	loc_66C0
00008086 6000                       		bra.s	loc_66AE
00008088                            ; ===========================================================================
00008088                            
00008088                            loc_66A8:
00008088 7000                       		moveq	#0,d0
0000808A 11C0 F75C                  		move.b	d0,(f_bgscrollvert).w
0000808E                            
0000808E                            loc_66AE:
0000808E 7200                       		moveq	#0,d1
00008090 3200                       		move.w	d0,d1
00008092 D278 F704                  		add.w	(v_screenposy).w,d1
00008096 4A40                       		tst.w	d0
00008098 6A00 0000                  		bpl.w	loc_6700
0000809C 6000 0000                  		bra.w	loc_66CC
000080A0                            ; ===========================================================================
000080A0                            
000080A0                            loc_66C0:
000080A0 4441                       		neg.w	d1
000080A2 48C1                       		ext.l	d1
000080A4 E181                       		asl.l	#8,d1
000080A6 D2B8 F704                  		add.l	(v_screenposy).w,d1
000080AA 4841                       		swap	d1
000080AC                            
000080AC                            loc_66CC:
000080AC B278 F72C                  		cmp.w	(v_limittop2).w,d1
000080B0 6E00                       		bgt.s	loc_6724
000080B2 0C41 FF00                  		cmpi.w	#-$100,d1
000080B6 6E00                       		bgt.s	loc_66F0
000080B8 0241 07FF                  		andi.w	#$7FF,d1
000080BC 0278 07FF D00C             		andi.w	#$7FF,(v_player+obY).w
000080C2 0278 07FF F704             		andi.w	#$7FF,(v_screenposy).w
000080C8 0278 03FF F70C             		andi.w	#$3FF,(v_bgscreenposy).w
000080CE 6000                       		bra.s	loc_6724
000080D0                            ; ===========================================================================
000080D0                            
000080D0                            loc_66F0:
000080D0 3238 F72C                  		move.w	(v_limittop2).w,d1
000080D4 6000                       		bra.s	loc_6724
000080D6                            ; ===========================================================================
000080D6                            
000080D6                            loc_66F6:
000080D6 48C1                       		ext.l	d1
000080D8 E181                       		asl.l	#8,d1
000080DA D2B8 F704                  		add.l	(v_screenposy).w,d1
000080DE 4841                       		swap	d1
000080E0                            
000080E0                            loc_6700:
000080E0 B278 F72E                  		cmp.w	(v_limitbtm2).w,d1
000080E4 6D00                       		blt.s	loc_6724
000080E6 0441 0800                  		subi.w	#$800,d1
000080EA 6500                       		bcs.s	loc_6720
000080EC 0278 07FF D00C             		andi.w	#$7FF,(v_player+obY).w
000080F2 0478 0800 F704             		subi.w	#$800,(v_screenposy).w
000080F8 0278 03FF F70C             		andi.w	#$3FF,(v_bgscreenposy).w
000080FE 6000                       		bra.s	loc_6724
00008100                            ; ===========================================================================
00008100                            
00008100                            loc_6720:
00008100 3238 F72E                  		move.w	(v_limitbtm2).w,d1
00008104                            
00008104                            loc_6724:
00008104 3838 F704                  		move.w	(v_screenposy).w,d4
00008108 4841                       		swap	d1
0000810A 2601                       		move.l	d1,d3
0000810C 96B8 F704                  		sub.l	(v_screenposy).w,d3
00008110 E09B                       		ror.l	#8,d3
00008112 31C3 F73C                  		move.w	d3,(v_scrshifty).w
00008116 21C1 F704                  		move.l	d1,(v_screenposy).w
0000811A 3038 F704                  		move.w	(v_screenposy).w,d0
0000811E 0240 0010                  		andi.w	#$10,d0
00008122 1238 F74B                  		move.b	(v_fg_yblock).w,d1
00008126 B300                       		eor.b	d1,d0
00008128 6600                       		bne.s	@return
0000812A 0A38 0010 F74B             		eori.b	#$10,(v_fg_yblock).w
00008130 3038 F704                  		move.w	(v_screenposy).w,d0
00008134 9044                       		sub.w	d4,d0
00008136 6A00                       		bpl.s	@scrollBottom
00008138 08F8 0000 F754             		bset	#0,(v_fg_scroll_flags).w
0000813E 4E75                       		rts	
00008140                            ; ===========================================================================
00008140                            
00008140                            	@scrollBottom:
00008140 08F8 0001 F754             		bset	#1,(v_fg_scroll_flags).w
00008146                            
00008146                            	@return:
00008146 4E75                       		rts	
00008148                            ; End of function ScrollVertical
00008148                            
00008148                            
00008148                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008148                            ; Scrolls background and sets redraw flags.
00008148                            ; d4 - background x offset * $10000
00008148                            ; d5 - background y offset * $10000
00008148                            
00008148                            BGScroll_XY:
00008148 2438 F708                  		move.l	(v_bgscreenposx).w,d2
0000814C 2002                       		move.l	d2,d0
0000814E D084                       		add.l	d4,d0
00008150 21C0 F708                  		move.l	d0,(v_bgscreenposx).w
00008154 2200                       		move.l	d0,d1
00008156 4841                       		swap	d1
00008158 0241 0010                  		andi.w	#$10,d1
0000815C 1638 F74C                  		move.b	(v_bg1_xblock).w,d3
00008160 B701                       		eor.b	d3,d1
00008162 6600                       		bne.s	BGScroll_YRelative	; no change in Y
00008164 0A38 0010 F74C             		eori.b	#$10,(v_bg1_xblock).w
0000816A 9082                       		sub.l	d2,d0	; new - old
0000816C 6A00                       		bpl.s	@scrollRight
0000816E 08F8 0002 F756             		bset	#2,(v_bg1_scroll_flags).w
00008174 6000                       		bra.s	BGScroll_YRelative
00008176                            	@scrollRight:
00008176 08F8 0003 F756             		bset	#3,(v_bg1_scroll_flags).w
0000817C                            BGScroll_YRelative:
0000817C 2638 F70C                  		move.l	(v_bgscreenposy).w,d3
00008180 2003                       		move.l	d3,d0
00008182 D085                       		add.l	d5,d0
00008184 21C0 F70C                  		move.l	d0,(v_bgscreenposy).w
00008188 2200                       		move.l	d0,d1
0000818A 4841                       		swap	d1
0000818C 0241 0010                  		andi.w	#$10,d1
00008190 1438 F74D                  		move.b	(v_bg1_yblock).w,d2
00008194 B501                       		eor.b	d2,d1
00008196 6600                       		bne.s	@return
00008198 0A38 0010 F74D             		eori.b	#$10,(v_bg1_yblock).w
0000819E 9083                       		sub.l	d3,d0
000081A0 6A00                       		bpl.s	@scrollBottom
000081A2 08F8 0000 F756             		bset	#0,(v_bg1_scroll_flags).w
000081A8 4E75                       		rts
000081AA                            	@scrollBottom:
000081AA 08F8 0001 F756             		bset	#1,(v_bg1_scroll_flags).w
000081B0                            	@return:
000081B0 4E75                       		rts
000081B2                            ; End of function BGScroll_XY
000081B2                            
000081B2                            Bg_Scroll_Y:
000081B2 2638 F70C                  		move.l	(v_bgscreenposy).w,d3
000081B6 2003                       		move.l	d3,d0
000081B8 D085                       		add.l	d5,d0
000081BA 21C0 F70C                  		move.l	d0,(v_bgscreenposy).w
000081BE 2200                       		move.l	d0,d1
000081C0 4841                       		swap	d1
000081C2 0241 0010                  		andi.w	#$10,d1
000081C6 1438 F74D                  		move.b	(v_bg1_yblock).w,d2
000081CA B501                       		eor.b	d2,d1
000081CC 6600                       		bne.s	@return
000081CE 0A38 0010 F74D             		eori.b	#$10,(v_bg1_yblock).w
000081D4 9083                       		sub.l	d3,d0
000081D6 6A00                       		bpl.s	@scrollBottom
000081D8 08F8 0004 F756             		bset	#4,(v_bg1_scroll_flags).w
000081DE 4E75                       		rts
000081E0                            	@scrollBottom:
000081E0 08F8 0005 F756             		bset	#5,(v_bg1_scroll_flags).w
000081E6                            	@return:
000081E6 4E75                       		rts
000081E8                            
000081E8                            
000081E8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000081E8                            
000081E8                            
000081E8                            BGScroll_YAbsolute:
000081E8 3638 F70C                  		move.w	(v_bgscreenposy).w,d3
000081EC 31C0 F70C                  		move.w	d0,(v_bgscreenposy).w
000081F0 3200                       		move.w	d0,d1
000081F2 0241 0010                  		andi.w	#$10,d1
000081F6 1438 F74D                  		move.b	(v_bg1_yblock).w,d2
000081FA B501                       		eor.b	d2,d1
000081FC 6600                       		bne.s	@return
000081FE 0A38 0010 F74D             		eori.b	#$10,(v_bg1_yblock).w
00008204 9043                       		sub.w	d3,d0
00008206 6A00                       		bpl.s	@scrollBottom
00008208 08F8 0000 F756             		bset	#0,(v_bg1_scroll_flags).w
0000820E 4E75                       		rts
00008210                            	@scrollBottom:
00008210 08F8 0001 F756             		bset	#1,(v_bg1_scroll_flags).w
00008216                            	@return:
00008216 4E75                       		rts
00008218                            ; End of function BGScroll_YAbsolute
00008218                            
00008218                            
00008218                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008218                            ; d6 - bit to set for redraw
00008218                            
00008218                            BGScroll_Block1:
00008218 2438 F708                  		move.l	(v_bgscreenposx).w,d2
0000821C 2002                       		move.l	d2,d0
0000821E D084                       		add.l	d4,d0
00008220 21C0 F708                  		move.l	d0,(v_bgscreenposx).w
00008224 2200                       		move.l	d0,d1
00008226 4841                       		swap	d1
00008228 0241 0010                  		andi.w	#$10,d1
0000822C 1638 F74C                  		move.b	(v_bg1_xblock).w,d3
00008230 B701                       		eor.b	d3,d1
00008232 6600                       		bne.s	@return
00008234 0A38 0010 F74C             		eori.b	#$10,(v_bg1_xblock).w
0000823A 9082                       		sub.l	d2,d0
0000823C 6A00                       		bpl.s	@scrollRight
0000823E 0DF8 F756                  		bset	d6,(v_bg1_scroll_flags).w
00008242 6000                       		bra.s	@return
00008244                            	@scrollRight:
00008244 5206                       		addq.b	#1,d6
00008246 0DF8 F756                  		bset	d6,(v_bg1_scroll_flags).w
0000824A                            	@return:
0000824A 4E75                       		rts
0000824C                            ; End of function BGScroll_Block1
0000824C                            
0000824C                            
0000824C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000824C                            
0000824C                            
0000824C                            BGScroll_Block2:
0000824C 2438 F710                  		move.l	(v_bg2screenposx).w,d2
00008250 2002                       		move.l	d2,d0
00008252 D084                       		add.l	d4,d0
00008254 21C0 F710                  		move.l	d0,(v_bg2screenposx).w
00008258 2200                       		move.l	d0,d1
0000825A 4841                       		swap	d1
0000825C 0241 0010                  		andi.w	#$10,d1
00008260 1638 F74E                  		move.b	(v_bg2_xblock).w,d3
00008264 B701                       		eor.b	d3,d1
00008266 6600                       		bne.s	@return
00008268 0A38 0010 F74E             		eori.b	#$10,(v_bg2_xblock).w
0000826E 9082                       		sub.l	d2,d0
00008270 6A00                       		bpl.s	@scrollRight
00008272 0DF8 F758                  		bset	d6,(v_bg2_scroll_flags).w
00008276 6000                       		bra.s	@return
00008278                            	@scrollRight:
00008278 5206                       		addq.b	#1,d6
0000827A 0DF8 F758                  		bset	d6,(v_bg2_scroll_flags).w
0000827E                            	@return:
0000827E 4E75                       		rts
00008280                            ;-------------------------------------------------------------------------------
00008280                            BGScroll_Block3:
00008280 2438 F718                  		move.l	(v_bg3screenposx).w,d2
00008284 2002                       		move.l	d2,d0
00008286 D084                       		add.l	d4,d0
00008288 21C0 F718                  		move.l	d0,(v_bg3screenposx).w
0000828C 2200                       		move.l	d0,d1
0000828E 4841                       		swap	d1
00008290 0241 0010                  		andi.w	#$10,d1
00008294 1638 F750                  		move.b	(v_bg3_xblock).w,d3
00008298 B701                       		eor.b	d3,d1
0000829A 6600                       		bne.s	@return
0000829C 0A38 0010 F750             		eori.b	#$10,(v_bg3_xblock).w
000082A2 9082                       		sub.l	d2,d0
000082A4 6A00                       		bpl.s	@scrollRight
000082A6 0DF8 F75A                  		bset	d6,(v_bg3_scroll_flags).w
000082AA 6000                       		bra.s	@return
000082AC                            	@scrollRight:
000082AC 5206                       		addq.b	#1,d6
000082AE 0DF8 F75A                  		bset	d6,(v_bg3_scroll_flags).w
000082B2                            	@return:
000082B2 4E75                       		rts
000082B2 4E75                       		rts
000082B4                            
000082B4                            
000082B4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000082B4                            
000082B4                            ; sub_6886:
000082B4                            LoadTilesAsYouMove_BGOnly:
000082B4 4BF9 00C0 0004             		lea	(vdp_control_port).l,a5
000082BA 4DF9 00C0 0000             		lea	(vdp_data_port).l,a6
000082C0 45F8 F756                  		lea	(v_bg1_scroll_flags).w,a2
000082C4 47F8 F708                  		lea	(v_bgscreenposx).w,a3
000082C8 49F8 A440                  		lea	(v_lvllayout+$40).w,a4
000082CC 343C 6000                  		move.w	#$6000,d2
000082D0 6100 0000                  		bsr.w	DrawBGScrollBlock1
000082D4 45F8 F758                  		lea	(v_bg2_scroll_flags).w,a2
000082D8 47F8 F710                  		lea	(v_bg2screenposx).w,a3
000082DC 6000 0000                  		bra.w	DrawBGScrollBlock2
000082E0                            ; End of function sub_6886
000082E0                            
000082E0                            ; ---------------------------------------------------------------------------
000082E0                            ; Subroutine to	display	correct	tiles as you move
000082E0                            ; ---------------------------------------------------------------------------
000082E0                            
000082E0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000082E0                            
000082E0                            
000082E0                            LoadTilesAsYouMove:
000082E0 4BF9 00C0 0004             		lea	(vdp_control_port).l,a5
000082E6 4DF9 00C0 0000             		lea	(vdp_data_port).l,a6
000082EC                            		; First, update the background
000082EC 45F8 FF32                  		lea	(v_bg1_scroll_flags_dup).w,a2	; Scroll block 1 scroll flags
000082F0 47F8 FF18                  		lea	(v_bgscreenposx_dup).w,a3	; Scroll block 1 X coordinate
000082F4 49F8 A440                  		lea	(v_lvllayout+$40).w,a4
000082F8 343C 6000                  		move.w	#$6000,d2			; VRAM thing for selecting Plane B
000082FC 6100 0000                  		bsr.w	DrawBGScrollBlock1
00008300 45F8 FF34                  		lea	(v_bg2_scroll_flags_dup).w,a2	; Scroll block 2 scroll flags
00008304 47F8 FF20                  		lea	(v_bg2screenposx_dup).w,a3	; Scroll block 2 X coordinate
00008308 6100 0000                  		bsr.w	DrawBGScrollBlock2
0000830C                            		; REV01 added a third scroll block, though, technically,
0000830C                            		; the RAM for it was already there in REV00
0000830C 45F8 FF36                  		lea	(v_bg3_scroll_flags_dup).w,a2	; Scroll block 3 scroll flags
00008310 47F8 FF28                  		lea	(v_bg3screenposx_dup).w,a3	; Scroll block 3 X coordinate
00008314 6100 0000                  		bsr.w	DrawBGScrollBlock3
00008318                            		; Then, update the foreground
00008318 45F8 FF30                  		lea	(v_fg_scroll_flags_dup).w,a2	; Foreground scroll flags
0000831C 47F8 FF10                  		lea	(v_screenposx_dup).w,a3		; Foreground X coordinate
00008320 49F8 A400                  		lea	(v_lvllayout).w,a4
00008324 343C 4000                  		move.w	#$4000,d2			; VRAM thing for selecting Plane A
00008328                            		; The FG's update function is inlined here
00008328 4A12                       		tst.b	(a2)
0000832A 6700                       		beq.s	locret_6952	; If there are no flags set, nothing needs updating
0000832C 0892 0000                  		bclr	#0,(a2)
00008330 6700                       		beq.s	loc_6908
00008332                            		; Draw new tiles at the top
00008332 78F0                       		moveq	#-16,d4	; Y coordinate. Note that 16 is the size of a block in pixels
00008334 7AF0                       		moveq	#-16,d5 ; X coordinate
00008336 6100 0000                  		bsr.w	Calc_VRAM_Pos
0000833A 78F0                       		moveq	#-16,d4 ; Y coordinate
0000833C 7AF0                       		moveq	#-16,d5 ; X coordinate
0000833E 6100 0000                  		bsr.w	DrawBlocks_LR
00008342                            
00008342                            loc_6908:
00008342 0892 0001                  		bclr	#1,(a2)
00008346 6700                       		beq.s	loc_6922
00008348                            		; Draw new tiles at the bottom
00008348 383C 00E0                  		move.w	#224,d4	; Start at bottom of the screen. Since this draws from top to bottom, we don't need 224+16
0000834C 7AF0                       		moveq	#-16,d5
0000834E 6100 0000                  		bsr.w	Calc_VRAM_Pos
00008352 383C 00E0                  		move.w	#224,d4
00008356 7AF0                       		moveq	#-16,d5
00008358 6100 0000                  		bsr.w	DrawBlocks_LR
0000835C                            
0000835C                            loc_6922:
0000835C 0892 0002                  		bclr	#2,(a2)
00008360 6700                       		beq.s	loc_6938
00008362                            		; Draw new tiles on the left
00008362 78F0                       		moveq	#-16,d4
00008364 7AF0                       		moveq	#-16,d5
00008366 6100 0000                  		bsr.w	Calc_VRAM_Pos
0000836A 78F0                       		moveq	#-16,d4
0000836C 7AF0                       		moveq	#-16,d5
0000836E 6100 0000                  		bsr.w	DrawBlocks_TB
00008372                            
00008372                            loc_6938:
00008372 0892 0003                  		bclr	#3,(a2)
00008376 6700                       		beq.s	locret_6952
00008378                            		; Draw new tiles on the right
00008378 78F0                       		moveq	#-16,d4
0000837A 3A3C 0140                  		move.w	#320,d5
0000837E 6100 0000                  		bsr.w	Calc_VRAM_Pos
00008382 78F0                       		moveq	#-16,d4
00008384 3A3C 0140                  		move.w	#320,d5
00008388 6100 0000                  		bsr.w	DrawBlocks_TB
0000838C                            
0000838C                            locret_6952:
0000838C 4E75                       		rts	
0000838E                            ; End of function LoadTilesAsYouMove
0000838E                            
0000838E                            
0000838E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000838E                            
0000838E                            ; sub_6954:
0000838E                            DrawBGScrollBlock1:
0000838E 4A12                       		tst.b	(a2)
00008390 6700 0000                  		beq.w	locret_69F2
00008394 0892 0000                  		bclr	#0,(a2)
00008398 6700                       		beq.s	loc_6972
0000839A                            		; Draw new tiles at the top
0000839A 78F0                       		moveq	#-16,d4
0000839C 7AF0                       		moveq	#-16,d5
0000839E 6100 0000                  		bsr.w	Calc_VRAM_Pos
000083A2 78F0                       		moveq	#-16,d4
000083A4 7AF0                       		moveq	#-16,d5
000083A6 6100 0000                  			bsr.w	DrawBlocks_LR
000083AA                            
000083AA                            loc_6972:
000083AA 0892 0001                  		bclr	#1,(a2)
000083AE 6700                       		beq.s	loc_698E
000083B0                            		; Draw new tiles at the top
000083B0 383C 00E0                  		move.w	#224,d4
000083B4 7AF0                       		moveq	#-16,d5
000083B6 6100 0000                  		bsr.w	Calc_VRAM_Pos
000083BA 383C 00E0                  		move.w	#224,d4
000083BE 7AF0                       		moveq	#-16,d5
000083C0 6100 0000                  			bsr.w	DrawBlocks_LR
000083C4                            
000083C4                            loc_698E:
000083C4 0892 0002                  		bclr	#2,(a2)
000083C8                            
000083C8                            
000083C8 6700                       			beq.s	locj_6D56
000083CA                            			; Draw new tiles on the left
000083CA 78F0                       			moveq	#-16,d4
000083CC 7AF0                       			moveq	#-16,d5
000083CE 6100 0000                  			bsr.w	Calc_VRAM_Pos
000083D2 78F0                       			moveq	#-16,d4
000083D4 7AF0                       			moveq	#-16,d5
000083D6 6100 0000                  			bsr.w	DrawBlocks_TB
000083DA                            	locj_6D56:
000083DA                            
000083DA 0892 0003                  			bclr	#3,(a2)
000083DE 6700                       			beq.s	locj_6D70
000083E0                            			; Draw new tiles on the right
000083E0 78F0                       			moveq	#-16,d4
000083E2 3A3C 0140                  			move.w	#320,d5
000083E6 6100 0000                  			bsr.w	Calc_VRAM_Pos
000083EA 78F0                       			moveq	#-16,d4
000083EC 3A3C 0140                  			move.w	#320,d5
000083F0 6100 0000                  			bsr.w	DrawBlocks_TB
000083F4                            	locj_6D70:
000083F4                            
000083F4 0892 0004                  			bclr	#4,(a2)
000083F8 6700                       			beq.s	locj_6D88
000083FA                            			; Draw entire row at the top
000083FA 78F0                       			moveq	#-16,d4
000083FC 7A00                       			moveq	#0,d5
000083FE 6100 0000                  			bsr.w	Calc_VRAM_Pos_2
00008402 78F0                       			moveq	#-16,d4
00008404 7A00                       			moveq	#0,d5
00008406 7C1F                       			moveq	#(512/16)-1,d6
00008408 6100 0000                  			bsr.w	DrawBlocks_LR_3
0000840C                            	locj_6D88:
0000840C                            
0000840C 0892 0005                  			bclr	#5,(a2)
00008410 6700                       			beq.s	locret_69F2
00008412                            			; Draw entire row at the bottom
00008412 383C 00E0                  			move.w	#224,d4
00008416 7A00                       			moveq	#0,d5
00008418 6100 0000                  			bsr.w	Calc_VRAM_Pos_2
0000841C 383C 00E0                  			move.w	#224,d4
00008420 7A00                       			moveq	#0,d5
00008422 7C1F                       			moveq	#(512/16)-1,d6
00008424 6100 0000                  			bsr.w	DrawBlocks_LR_3
00008428                            
00008428                            locret_69F2:
00008428 4E75                       		rts	
0000842A                            ; End of function DrawBGScrollBlock1
0000842A                            
0000842A                            
0000842A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000842A                            
0000842A                            ; Essentially, this draws everything that isn't scroll block 1
0000842A                            ; sub_69F4:
0000842A                            DrawBGScrollBlock2:
0000842A                            
0000842A 4A12                       			tst.b	(a2)
0000842C 6700 0000                  			beq.w	locj_6DF2
00008430 0C38 0005 FE10             			cmpi.b	#id_SBZ,(v_zone).w
00008436 6700 0000                  			beq.w	Draw_SBz
0000843A 0892 0000                  			bclr	#0,(a2)
0000843E 6700                       			beq.s	locj_6DD2
00008440                            			; Draw new tiles on the left
00008440 383C 0070                  			move.w	#224/2,d4	; Draw the bottom half of the screen
00008444 7AF0                       			moveq	#-16,d5
00008446 6100 0000                  			bsr.w	Calc_VRAM_Pos
0000844A 383C 0070                  			move.w	#224/2,d4
0000844E 7AF0                       			moveq	#-16,d5
00008450 7C02                       			moveq	#3-1,d6		; Draw three rows... could this be a repurposed version of the above unused code?
00008452 6100 0000                  			bsr.w	DrawBlocks_TB_2
00008456                            	locj_6DD2:
00008456 0892 0001                  			bclr	#1,(a2)
0000845A 6700                       			beq.s	locj_6DF2
0000845C                            			; Draw new tiles on the right
0000845C 383C 0070                  			move.w	#224/2,d4
00008460 3A3C 0140                  			move.w	#320,d5
00008464 6100 0000                  			bsr.w	Calc_VRAM_Pos
00008468 383C 0070                  			move.w	#224/2,d4
0000846C 3A3C 0140                  			move.w	#320,d5
00008470 7C02                       			moveq	#3-1,d6
00008472 6100 0000                  			bsr.w	DrawBlocks_TB_2
00008476                            	locj_6DF2:
00008476 4E75                       			rts
00008478                            ;===============================================================================
00008478                            	locj_6DF4:
00008478 0000 0000 0006 0606 0606+  			dc.b $00,$00,$00,$00,$00,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$04
00008488 0404 0404 0404 0202 0202+  			dc.b $04,$04,$04,$04,$04,$04,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02
00008498 0200                       			dc.b $02,$00						
0000849A                            ;===============================================================================
0000849A                            	Draw_SBz:
0000849A 78F0                       			moveq	#-16,d4
0000849C 0892 0000                  			bclr	#0,(a2)
000084A0 6600                       			bne.s	locj_6E28
000084A2 0892 0001                  			bclr	#1,(a2)
000084A6 6700                       			beq.s	locj_6E72
000084A8 383C 00E0                  			move.w	#224,d4
000084AC                            	locj_6E28:
000084AC 41F9 0000 8479             			lea	(locj_6DF4+1).l,a0
000084B2 3038 F70C                  			move.w	(v_bgscreenposy).w,d0
000084B6 D044                       			add.w	d4,d0
000084B8 0240 01F0                  			andi.w	#$1F0,d0
000084BC E848                       			lsr.w	#4,d0
000084BE 1030 0000                  			move.b	(a0,d0.w),d0
000084C2 47F9 0000 0000             			lea	(locj_6FE4).l,a3
000084C8 3673 0000                  			movea.w	(a3,d0.w),a3
000084CC 6700                       			beq.s	locj_6E5E
000084CE 7AF0                       			moveq	#-16,d5
000084D0 48E7 0C00                  			movem.l	d4/d5,-(sp)
000084D4 6100 0000                  			bsr.w	Calc_VRAM_Pos
000084D8 4CDF 0030                  			movem.l	(sp)+,d4/d5
000084DC 6100 0000                  			bsr.w	DrawBlocks_LR
000084E0 6000                       			bra.s	locj_6E72
000084E2                            ;===============================================================================
000084E2                            	locj_6E5E:
000084E2 7A00                       			moveq	#0,d5
000084E4 48E7 0C00                  			movem.l	d4/d5,-(sp)
000084E8 6100 0000                  			bsr.w	Calc_VRAM_Pos_2
000084EC 4CDF 0030                  			movem.l	(sp)+,d4/d5
000084F0 7C1F                       			moveq	#(512/16)-1,d6
000084F2 6100 0000                  			bsr.w	DrawBlocks_LR_3
000084F6                            	locj_6E72:
000084F6 4A12                       			tst.b	(a2)
000084F8 6600                       			bne.s	locj_6E78
000084FA 4E75                       			rts
000084FC                            ;===============================================================================			
000084FC                            	locj_6E78:
000084FC 78F0                       			moveq	#-16,d4
000084FE 7AF0                       			moveq	#-16,d5
00008500 1012                       			move.b	(a2),d0
00008502 0200 00A8                  			andi.b	#$A8,d0
00008506 6700                       			beq.s	locj_6E8C
00008508 E208                       			lsr.b	#1,d0
0000850A 1480                       			move.b	d0,(a2)
0000850C 3A3C 0140                  			move.w	#320,d5
00008510                            	locj_6E8C:
00008510 41F9 0000 8478             			lea	(locj_6DF4).l,a0
00008516 3038 F70C                  			move.w	(v_bgscreenposy).w,d0
0000851A 0240 01F0                  			andi.w	#$1F0,d0
0000851E E848                       			lsr.w	#4,d0
00008520 41F0 0000                  			lea	(a0,d0.w),a0
00008524 6000 0000                  			bra.w	locj_6FEC						
00008528                            ;===============================================================================
00008528                            
00008528                            
00008528                            	; locj_6EA4:
00008528                            	DrawBGScrollBlock3:
00008528 4A12                       			tst.b	(a2)
0000852A 6700 0000                  			beq.w	locj_6EF0
0000852E 0C38 0002 FE10             			cmpi.b	#id_MZ,(v_zone).w
00008534 6700 0000                  			beq.w	Draw_Mz
00008538 0892 0000                  			bclr	#0,(a2)
0000853C 6700                       			beq.s	locj_6ED0
0000853E                            			; Draw new tiles on the left
0000853E 383C 0040                  			move.w	#$40,d4
00008542 7AF0                       			moveq	#-16,d5
00008544 6100 0000                  			bsr.w	Calc_VRAM_Pos
00008548 383C 0040                  			move.w	#$40,d4
0000854C 7AF0                       			moveq	#-16,d5
0000854E 7C02                       			moveq	#3-1,d6
00008550 6100 0000                  			bsr.w	DrawBlocks_TB_2
00008554                            	locj_6ED0:
00008554 0892 0001                  			bclr	#1,(a2)
00008558 6700                       			beq.s	locj_6EF0
0000855A                            			; Draw new tiles on the right
0000855A 383C 0040                  			move.w	#$40,d4
0000855E 3A3C 0140                  			move.w	#320,d5
00008562 6100 0000                  			bsr.w	Calc_VRAM_Pos
00008566 383C 0040                  			move.w	#$40,d4
0000856A 3A3C 0140                  			move.w	#320,d5
0000856E 7C02                       			moveq	#3-1,d6
00008570 6100 0000                  			bsr.w	DrawBlocks_TB_2
00008574                            	locj_6EF0:
00008574 4E75                       			rts
00008576                            	locj_6EF2:
00008576 0000 0000 0000 0606 0404+  			dc.b $00,$00,$00,$00,$00,$00,$06,$06,$04,$04,$04,$04,$04,$04,$04,$04
00008586 0402 0202 0202 0202 0202+  			dc.b $04,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02
00008596 0202 0202 0202 0202 0202+  			dc.b $02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02
000085A6 0202 0202 0202 0202 0202+  			dc.b $02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02
000085B6 0202 0202 0202 0202 0202+  			dc.b $02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02
000085C6 0202 0202 0202 0202 0202+  			dc.b $02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02
000085D6 0200                       			dc.b $02,$00
000085D8                            ;===============================================================================
000085D8                            	Draw_Mz:
000085D8 78F0                       			moveq	#-16,d4
000085DA 0892 0000                  			bclr	#0,(a2)
000085DE 6600                       			bne.s	locj_6F66
000085E0 0892 0001                  			bclr	#1,(a2)
000085E4 6700                       			beq.s	locj_6FAE
000085E6 383C 00E0                  			move.w	#224,d4
000085EA                            	locj_6F66:
000085EA 41F9 0000 8577             			lea	(locj_6EF2+1).l,a0
000085F0 3038 F70C                  			move.w	(v_bgscreenposy).w,d0
000085F4 0440 0200                  			subi.w	#$200,d0
000085F8 D044                       			add.w	d4,d0
000085FA 0240 07F0                  			andi.w	#$7F0,d0
000085FE E848                       			lsr.w	#4,d0
00008600 1030 0000                  			move.b	(a0,d0.w),d0
00008604 367B 0000                  			movea.w	locj_6FE4(pc,d0.w),a3
00008608 6700                       			beq.s	locj_6F9A
0000860A 7AF0                       			moveq	#-16,d5
0000860C 48E7 0C00                  			movem.l	d4/d5,-(sp)
00008610 6100 0000                  			bsr.w	Calc_VRAM_Pos
00008614 4CDF 0030                  			movem.l	(sp)+,d4/d5
00008618 6100 0000                  			bsr.w	DrawBlocks_LR
0000861C 6000                       			bra.s	locj_6FAE
0000861E                            ;===============================================================================
0000861E                            	locj_6F9A:
0000861E 7A00                       			moveq	#0,d5
00008620 48E7 0C00                  			movem.l	d4/d5,-(sp)
00008624 6100 0000                  			bsr.w	Calc_VRAM_Pos_2
00008628 4CDF 0030                  			movem.l	(sp)+,d4/d5
0000862C 7C1F                       			moveq	#(512/16)-1,d6
0000862E 6100 0000                  			bsr.w	DrawBlocks_LR_3
00008632                            	locj_6FAE:
00008632 4A12                       			tst.b	(a2)
00008634 6600                       			bne.s	locj_6FB4
00008636 4E75                       			rts
00008638                            ;===============================================================================			
00008638                            	locj_6FB4:
00008638 78F0                       			moveq	#-16,d4
0000863A 7AF0                       			moveq	#-16,d5
0000863C 1012                       			move.b	(a2),d0
0000863E 0200 00A8                  			andi.b	#$A8,d0
00008642 6700                       			beq.s	locj_6FC8
00008644 E208                       			lsr.b	#1,d0
00008646 1480                       			move.b	d0,(a2)
00008648 3A3C 0140                  			move.w	#320,d5
0000864C                            	locj_6FC8:
0000864C 41F9 0000 8576             			lea	(locj_6EF2).l,a0
00008652 3038 F70C                  			move.w	(v_bgscreenposy).w,d0
00008656 0440 0200                  			subi.w	#$200,d0
0000865A 0240 07F0                  			andi.w	#$7F0,d0
0000865E E848                       			lsr.w	#4,d0
00008660 41F0 0000                  			lea	(a0,d0.w),a0
00008664 6000 0000                  			bra.w	locj_6FEC
00008668                            ;===============================================================================			
00008668                            	locj_6FE4:
00008668 FF18 FF18 FF20 FF28        			dc.w v_bgscreenposx_dup, v_bgscreenposx_dup, v_bg2screenposx_dup, v_bg3screenposx_dup
00008670                            	locj_6FEC:
00008670 7C0F                       			moveq	#((224+16+16)/16)-1,d6
00008672 2E3C 0080 0000             			move.l	#$800000,d7
00008678                            	locj_6FF4:			
00008678 7000                       			moveq	#0,d0
0000867A 1018                       			move.b	(a0)+,d0
0000867C 0112                       			btst	d0,(a2)
0000867E 6700                       			beq.s	locj_701C
00008680 367B 00E6                  			move.w	locj_6FE4(pc,d0.w),a3
00008684 48E7 0C80                  			movem.l	d4/d5/a0,-(sp)
00008688 48E7 0C00                  			movem.l	d4/d5,-(sp)
0000868C 6100 0000                  			bsr.w	GetBlockData
00008690 4CDF 0030                  			movem.l	(sp)+,d4/d5
00008694 6100 0000                  			bsr.w	Calc_VRAM_Pos
00008698 6100 0000                  			bsr.w	DrawBlock
0000869C 4CDF 0130                  			movem.l	(sp)+,d4/d5/a0
000086A0                            	locj_701C:
000086A0 0644 0010                  			addi.w	#16,d4
000086A4 51CE FFD2                  			dbf	d6,locj_6FF4
000086A8 4212                       			clr.b	(a2)
000086AA 4E75                       			rts			
000086AC                            
000086AC                            
000086AC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000086AC                            
000086AC                            ; Don't be fooled by the name: this function's for drawing from left to right
000086AC                            ; when the camera's moving up or down
000086AC                            ; DrawTiles_LR:
000086AC                            DrawBlocks_LR:
000086AC 7C15                       		moveq	#((320+16+16)/16)-1,d6	; Draw the entire width of the screen + two extra columns
000086AE                            ; DrawTiles_LR_2:
000086AE                            DrawBlocks_LR_2:
000086AE 2E3C 0080 0000             		move.l	#$800000,d7	; Delta between rows of tiles
000086B4 2200                       		move.l	d0,d1
000086B6                            
000086B6                            	@loop:
000086B6 48E7 0C00                  		movem.l	d4-d5,-(sp)
000086BA 6100 0000                  		bsr.w	GetBlockData
000086BE 2001                       		move.l	d1,d0
000086C0 6100 0000                  		bsr.w	DrawBlock
000086C4 5801                       		addq.b	#4,d1		; Two tiles ahead
000086C6 0201 007F                  		andi.b	#$7F,d1		; Wrap around row
000086CA 4CDF 0030                  		movem.l	(sp)+,d4-d5
000086CE 0645 0010                  		addi.w	#16,d5		; Move X coordinate one block ahead
000086D2 51CE FFE2                  		dbf	d6,@loop
000086D6 4E75                       		rts
000086D8                            ; End of function DrawBlocks_LR
000086D8                            
000086D8                            ; DrawTiles_LR_3:
000086D8                            DrawBlocks_LR_3:
000086D8 2E3C 0080 0000             		move.l	#$800000,d7
000086DE 2200                       		move.l	d0,d1
000086E0                            
000086E0                            	@loop:
000086E0 48E7 0C00                  		movem.l	d4-d5,-(sp)
000086E4 6100 0000                  		bsr.w	GetBlockData_2
000086E8 2001                       		move.l	d1,d0
000086EA 6100 0000                  		bsr.w	DrawBlock
000086EE 5801                       		addq.b	#4,d1
000086F0 0201 007F                  		andi.b	#$7F,d1
000086F4 4CDF 0030                  		movem.l	(sp)+,d4-d5
000086F8 0645 0010                  		addi.w	#16,d5
000086FC 51CE FFE2                  		dbf	d6,@loop
00008700 4E75                       		rts	
00008702                            ; End of function DrawBlocks_LR_3
00008702                            
00008702                            
00008702                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008702                            
00008702                            ; Don't be fooled by the name: this function's for drawing from top to bottom
00008702                            ; when the camera's moving left or right
00008702                            ; DrawTiles_TB:
00008702                            DrawBlocks_TB:
00008702 7C0F                       		moveq	#((224+16+16)/16)-1,d6	; Draw the entire height of the screen + two extra rows
00008704                            ; DrawTiles_TB_2:
00008704                            DrawBlocks_TB_2:
00008704 2E3C 0080 0000             		move.l	#$800000,d7	; Delta between rows of tiles
0000870A 2200                       		move.l	d0,d1
0000870C                            
0000870C                            	@loop:
0000870C 48E7 0C00                  		movem.l	d4-d5,-(sp)
00008710 6100 0000                  		bsr.w	GetBlockData
00008714 2001                       		move.l	d1,d0
00008716 6100 0000                  		bsr.w	DrawBlock
0000871A 0641 0100                  		addi.w	#$100,d1	; Two rows ahead
0000871E 0241 0FFF                  		andi.w	#$FFF,d1	; Wrap around plane
00008722 4CDF 0030                  		movem.l	(sp)+,d4-d5
00008726 0644 0010                  		addi.w	#16,d4		; Move X coordinate one block ahead
0000872A 51CE FFE0                  		dbf	d6,@loop
0000872E 4E75                       		rts	
00008730                            ; End of function DrawBlocks_TB_2
00008730                            
00008730                            
00008730                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008730                            
00008730                            ; Draws a block's worth of tiles
00008730                            ; Parameters:
00008730                            ; a0 = Pointer to block metadata (block index and X/Y flip)
00008730                            ; a1 = Pointer to block
00008730                            ; a5 = Pointer to VDP command port
00008730                            ; a6 = Pointer to VDP data port
00008730                            ; d0 = VRAM command to access plane
00008730                            ; d2 = VRAM plane A/B specifier
00008730                            ; d7 = Plane row delta
00008730                            ; DrawTiles:
00008730                            DrawBlock:
00008730 8042                       		or.w	d2,d0	; OR in that plane A/B specifier to the VRAM command
00008732 4840                       		swap	d0
00008734 0810 0004                  		btst	#4,(a0)	; Check Y-flip bit
00008738 6600                       		bne.s	DrawFlipY
0000873A 0810 0003                  		btst	#3,(a0)	; Check X-flip bit
0000873E 6600                       		bne.s	DrawFlipX
00008740 2A80                       		move.l	d0,(a5)
00008742 2C99                       		move.l	(a1)+,(a6)	; Write top two tiles
00008744 D087                       		add.l	d7,d0		; Next row
00008746 2A80                       		move.l	d0,(a5)
00008748 2C99                       		move.l	(a1)+,(a6)	; Write bottom two tiles
0000874A 4E75                       		rts	
0000874C                            ; ===========================================================================
0000874C                            
0000874C                            DrawFlipX:
0000874C 2A80                       		move.l	d0,(a5)
0000874E 2819                       		move.l	(a1)+,d4
00008750 0A84 0800 0800             		eori.l	#$8000800,d4	; Invert X-flip bits of each tile
00008756 4844                       		swap	d4		; Swap the tiles around
00008758 2C84                       		move.l	d4,(a6)		; Write top two tiles
0000875A D087                       		add.l	d7,d0		; Next row
0000875C 2A80                       		move.l	d0,(a5)
0000875E 2819                       		move.l	(a1)+,d4
00008760 0A84 0800 0800             		eori.l	#$8000800,d4
00008766 4844                       		swap	d4
00008768 2C84                       		move.l	d4,(a6)		; Write bottom two tiles
0000876A 4E75                       		rts	
0000876C                            ; ===========================================================================
0000876C                            
0000876C                            DrawFlipY:
0000876C 0810 0003                  		btst	#3,(a0)
00008770 6600                       		bne.s	DrawFlipXY
00008772 2A80                       		move.l	d0,(a5)
00008774 2A19                       		move.l	(a1)+,d5
00008776 2819                       		move.l	(a1)+,d4
00008778 0A84 1000 1000             		eori.l	#$10001000,d4
0000877E 2C84                       		move.l	d4,(a6)
00008780 D087                       		add.l	d7,d0
00008782 2A80                       		move.l	d0,(a5)
00008784 0A85 1000 1000             		eori.l	#$10001000,d5
0000878A 2C85                       		move.l	d5,(a6)
0000878C 4E75                       		rts	
0000878E                            ; ===========================================================================
0000878E                            
0000878E                            DrawFlipXY:
0000878E 2A80                       		move.l	d0,(a5)
00008790 2A19                       		move.l	(a1)+,d5
00008792 2819                       		move.l	(a1)+,d4
00008794 0A84 1800 1800             		eori.l	#$18001800,d4
0000879A 4844                       		swap	d4
0000879C 2C84                       		move.l	d4,(a6)
0000879E D087                       		add.l	d7,d0
000087A0 2A80                       		move.l	d0,(a5)
000087A2 0A85 1800 1800             		eori.l	#$18001800,d5
000087A8 4845                       		swap	d5
000087AA 2C85                       		move.l	d5,(a6)
000087AC 4E75                       		rts	
000087AE                            ; End of function DrawBlocks
000087AE                            
000087AE                            ; ===========================================================================
000087AE                            ; unused garbage
000087AE                            
000087AE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000087AE                            
000087AE                            ; Gets address of block at a certain coordinate
000087AE                            ; Parameters:
000087AE                            ; a4 = Pointer to level layout
000087AE                            ; d4 = Relative Y coordinate
000087AE                            ; d5 = Relative X coordinate
000087AE                            ; Returns:
000087AE                            ; a0 = Address of block metadata
000087AE                            ; a1 = Address of block
000087AE                            ; DrawBlocks:
000087AE                            GetBlockData:
000087AE DA53                       			add.w	(a3),d5
000087B0                            	GetBlockData_2:
000087B0 D86B 0004                  			add.w	4(a3),d4
000087B4 43F8 B000                  			lea	(v_16x16).w,a1
000087B8                            		; Turn Y coordinate into index into level layout
000087B8 3604                       		move.w	d4,d3
000087BA E24B                       		lsr.w	#1,d3
000087BC 0243 0380                  		andi.w	#$380,d3
000087C0                            		; Turn X coordinate into index into level layout
000087C0 E64D                       		lsr.w	#3,d5
000087C2 3005                       		move.w	d5,d0
000087C4 EA48                       		lsr.w	#5,d0
000087C6 0240 007F                  		andi.w	#$7F,d0
000087CA                            		; Get chunk from level layout
000087CA D043                       		add.w	d3,d0
000087CC 76FF                       		moveq	#-1,d3
000087CE 1634 0000                  		move.b	(a4,d0.w),d3
000087D2 6700                       		beq.s	locret_6C1E	; If chunk 00, just return a pointer to the first block (expected to be empty)
000087D4                            		; Turn chunk ID into index into chunk table
000087D4 5303                       		subq.b	#1,d3
000087D6 0243 007F                  		andi.w	#$7F,d3
000087DA EE5B                       		ror.w	#7,d3
000087DC                            		; Turn Y coordinate into index into chunk
000087DC D844                       		add.w	d4,d4
000087DE 0244 01E0                  		andi.w	#$1E0,d4
000087E2                            		; Turn X coordinate into index into chunk
000087E2 0245 001E                  		andi.w	#$1E,d5
000087E6                            		; Get block metadata from chunk
000087E6 D644                       		add.w	d4,d3
000087E8 D645                       		add.w	d5,d3
000087EA 2043                       		movea.l	d3,a0
000087EC 3610                       		move.w	(a0),d3
000087EE                            		; Turn block ID into address
000087EE 0243 03FF                  		andi.w	#$3FF,d3
000087F2 E74B                       		lsl.w	#3,d3
000087F4 D2C3                       		adda.w	d3,a1
000087F6                            
000087F6                            locret_6C1E:
000087F6 4E75                       		rts	
000087F8                            ; End of function GetBlockData
000087F8                            
000087F8                            
000087F8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000087F8                            
000087F8                            ; Produces a VRAM plane access command from coordinates
000087F8                            ; Parameters:
000087F8                            ; d4 = Relative Y coordinate
000087F8                            ; d5 = Relative X coordinate
000087F8                            ; Returns VDP command in d0
000087F8                            Calc_VRAM_Pos:
000087F8 DA53                       			add.w	(a3),d5
000087FA                            	Calc_VRAM_Pos_2:
000087FA D86B 0004                  			add.w	4(a3),d4
000087FE                            		; Floor the coordinates to the nearest pair of tiles (the size of a block).
000087FE                            		; Also note that this wraps the value to the size of the plane:
000087FE                            		; The plane is 64*8 wide, so wrap at $100, and it's 32*8 tall, so wrap at $200
000087FE 0244 00F0                  		andi.w	#$F0,d4
00008802 0245 01F0                  		andi.w	#$1F0,d5
00008806                            		; Transform the adjusted coordinates into a VDP command
00008806 E94C                       		lsl.w	#4,d4
00008808 E44D                       		lsr.w	#2,d5
0000880A D845                       		add.w	d5,d4
0000880C 7003                       		moveq	#3,d0	; Highest bits of plane VRAM address
0000880E 4840                       		swap	d0
00008810 3004                       		move.w	d4,d0
00008812 4E75                       		rts	
00008814                            ; End of function Calc_VRAM_Pos
00008814                            
00008814                            
00008814                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008814                            ; not used
00008814                            
00008814                            ; This is just like Calc_VRAM_Pos, but seemingly for an earlier
00008814                            ; VRAM layout: the only difference is the high bits of the
00008814                            ; plane's VRAM address, which are 10 instead of 11.
00008814                            ; Both the foreground and background are at $C000 and $E000
00008814                            ; respectively, so this one starting at $8000 makes no sense.
00008814                            ; sub_6C3C:
00008814                            Calc_VRAM_Pos_Unknown:
00008814 D86B 0004                  		add.w	4(a3),d4
00008818 DA53                       		add.w	(a3),d5
0000881A 0244 00F0                  		andi.w	#$F0,d4
0000881E 0245 01F0                  		andi.w	#$1F0,d5
00008822 E94C                       		lsl.w	#4,d4
00008824 E44D                       		lsr.w	#2,d5
00008826 D845                       		add.w	d5,d4
00008828 7002                       		moveq	#2,d0
0000882A 4840                       		swap	d0
0000882C 3004                       		move.w	d4,d0
0000882E 4E75                       		rts	
00008830                            ; End of function Calc_VRAM_Pos_Unknown
00008830                            
00008830                            ; ---------------------------------------------------------------------------
00008830                            ; Subroutine to	load tiles as soon as the level	appears
00008830                            ; ---------------------------------------------------------------------------
00008830                            
00008830                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008830                            
00008830                            
00008830                            LoadTilesFromStart:
00008830 4BF9 00C0 0004             		lea	(vdp_control_port).l,a5
00008836 4DF9 00C0 0000             		lea	(vdp_data_port).l,a6
0000883C 47F8 F700                  		lea	(v_screenposx).w,a3
00008840 49F8 A400                  		lea	(v_lvllayout).w,a4
00008844 343C 4000                  		move.w	#$4000,d2
00008848 6100                       		bsr.s	DrawChunks
0000884A 47F8 F708                  		lea	(v_bgscreenposx).w,a3
0000884E 49F8 A440                  		lea	(v_lvllayout+$40).w,a4
00008852 343C 6000                  		move.w	#$6000,d2
00008856 4A38 FE10                  			tst.b	(v_zone).w
0000885A 6700 0000                  			beq.w	Draw_GHz_Bg
0000885E 0C38 0002 FE10             			cmpi.b	#id_MZ,(v_zone).w
00008864 6700 0000                  			beq.w	Draw_Mz_Bg
00008868 0C78 0500 FE10             			cmpi.w	#(id_SBZ<<8)+0,(v_zone).w
0000886E 6700 0000                  			beq.w	Draw_SBz_Bg
00008872 0C38 0006 FE10             			cmpi.b	#id_EndZ,(v_zone).w
00008878 6700 0000                  			beq.w	Draw_GHz_Bg
0000887C                            ; End of function LoadTilesFromStart
0000887C                            
0000887C                            
0000887C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000887C                            
0000887C                            
0000887C                            DrawChunks:
0000887C 78F0                       		moveq	#-16,d4
0000887E 7C0F                       		moveq	#((224+16+16)/16)-1,d6
00008880                            
00008880                            	@loop:
00008880 48E7 0E00                  		movem.l	d4-d6,-(sp)
00008884 7A00                       		moveq	#0,d5
00008886 3204                       		move.w	d4,d1
00008888 6100 FF6E                  		bsr.w	Calc_VRAM_Pos
0000888C 3801                       		move.w	d1,d4
0000888E 7A00                       		moveq	#0,d5
00008890 7C1F                       		moveq	#(512/16)-1,d6
00008892 6100 FE1A                  		bsr.w	DrawBlocks_LR_2
00008896 4CDF 0070                  		movem.l	(sp)+,d4-d6
0000889A 0644 0010                  		addi.w	#16,d4
0000889E 51CE FFE0                  		dbf	d6,@loop
000088A2 4E75                       		rts	
000088A4                            ; End of function DrawChunks
000088A4                            
000088A4                            	Draw_GHz_Bg:
000088A4 7800                       			moveq	#0,d4
000088A6 7C0F                       			moveq	#((224+16+16)/16)-1,d6
000088A8                            	locj_7224:			
000088A8 48E7 0E00                  			movem.l	d4-d6,-(sp)
000088AC 41F9 0000 0000             			lea	(locj_724a),a0
000088B2 3038 F70C                  			move.w	(v_bgscreenposy).w,d0
000088B6 D044                       			add.w	d4,d0
000088B8 0240 00F0                  			andi.w	#$F0,d0
000088BC 6100 0000                  			bsr.w	locj_72Ba
000088C0 4CDF 0070                  			movem.l	(sp)+,d4-d6
000088C4 0644 0010                  			addi.w	#16,d4
000088C8 51CE FFDE                  			dbf	d6,locj_7224
000088CC 4E75                       			rts
000088CE                            	locj_724a:
000088CE 0000 0000 0606 0604 0404+  			dc.b $00,$00,$00,$00,$06,$06,$06,$04,$04,$04,$00,$00,$00,$00,$00,$00
000088DE                            ;-------------------------------------------------------------------------------
000088DE                            	Draw_Mz_Bg:;locj_725a:
000088DE 78F0                       			moveq	#-16,d4
000088E0 7C0F                       			moveq	#((224+16+16)/16)-1,d6
000088E2                            	locj_725E:			
000088E2 48E7 0E00                  			movem.l	d4-d6,-(sp)
000088E6 41FA FC8F                  			lea	(locj_6EF2+1),a0
000088EA 3038 F70C                  			move.w	(v_bgscreenposy).w,d0
000088EE 0440 0200                  			subi.w	#$200,d0
000088F2 D044                       			add.w	d4,d0
000088F4 0240 07F0                  			andi.w	#$7F0,d0
000088F8 6100 0000                  			bsr.w	locj_72Ba
000088FC 4CDF 0070                  			movem.l	(sp)+,d4-d6
00008900 0644 0010                  			addi.w	#16,d4
00008904 51CE FFDC                  			dbf	d6,locj_725E
00008908 4E75                       			rts
0000890A                            ;-------------------------------------------------------------------------------
0000890A                            	Draw_SBz_Bg:;locj_7288:
0000890A 78F0                       			moveq	#-16,d4
0000890C 7C0F                       			moveq	#((224+16+16)/16)-1,d6
0000890E                            	locj_728C:			
0000890E 48E7 0E00                  			movem.l	d4-d6,-(sp)
00008912 41FA FB65                  			lea	(locj_6DF4+1),a0
00008916 3038 F70C                  			move.w	(v_bgscreenposy).w,d0
0000891A D044                       			add.w	d4,d0
0000891C 0240 01F0                  			andi.w	#$1F0,d0
00008920 6100 0000                  			bsr.w	locj_72Ba
00008924 4CDF 0070                  			movem.l	(sp)+,d4-d6
00008928 0644 0010                  			addi.w	#16,d4
0000892C 51CE FFE0                  			dbf	d6,locj_728C
00008930 4E75                       			rts
00008932                            ;-------------------------------------------------------------------------------
00008932                            	locj_72B2:
00008932 F708 F708 F710 F718        			dc.w v_bgscreenposx, v_bgscreenposx, v_bg2screenposx, v_bg3screenposx
0000893A                            	locj_72Ba:
0000893A E848                       			lsr.w	#4,d0
0000893C 1030 0000                  			move.b	(a0,d0.w),d0
00008940 367B 00F0                  			movea.w	locj_72B2(pc,d0.w),a3
00008944 6700                       			beq.s	locj_72da
00008946 7AF0                       			moveq	#-16,d5
00008948 48E7 0C00                  			movem.l	d4/d5,-(sp)
0000894C 6100 FEAA                  			bsr.w	Calc_VRAM_Pos
00008950 4CDF 0030                  			movem.l	(sp)+,d4/d5
00008954 6100 FD56                  			bsr.w	DrawBlocks_LR
00008958 6000                       			bra.s	locj_72EE
0000895A                            	locj_72da:
0000895A 7A00                       			moveq	#0,d5
0000895C 48E7 0C00                  			movem.l	d4/d5,-(sp)
00008960 6100 FE98                  			bsr.w	Calc_VRAM_Pos_2
00008964 4CDF 0030                  			movem.l	(sp)+,d4/d5
00008968 7C1F                       			moveq	#(512/16)-1,d6
0000896A 6100 FD6C                  			bsr.w	DrawBlocks_LR_3
0000896E                            	locj_72EE:
0000896E 4E75                       			rts
00008970                            
00008970                            ; ---------------------------------------------------------------------------
00008970                            ; Subroutine to load basic level data
00008970                            ; ---------------------------------------------------------------------------
00008970                            
00008970                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008970                            
00008970                            
00008970                            LevelDataLoad:
00008970 7000                       		moveq	#0,d0
00008972 1038 FE10                  		move.b	(v_zone).w,d0
00008976 E948                       		lsl.w	#4,d0
00008978 45F9 0000 0000             		lea	(LevelHeaders).l,a2
0000897E 45F2 0000                  		lea	(a2,d0.w),a2
00008982 2F0A                       		move.l	a2,-(sp)
00008984 588A                       		addq.l	#4,a2
00008986 205A                       		movea.l	(a2)+,a0
00008988 43F8 B000                  		lea	(v_16x16).w,a1	; RAM address for 16x16 mappings
0000898C 303C 0000                  		move.w	#0,d0
00008990 6100 8EFA                  		bsr.w	EniDec
00008994 205A                       		movea.l	(a2)+,a0
00008996 43F9 00FF 0000             		lea	(v_256x256).l,a1 ; RAM address for 256x256 mappings
0000899C 6100 906C                  		bsr.w	KosDec
000089A0 6100 0000                  		bsr.w	LevelLayoutLoad
000089A4 301A                       		move.w	(a2)+,d0
000089A6 3012                       		move.w	(a2),d0
000089A8 0240 00FF                  		andi.w	#$FF,d0
000089AC 0C78 0103 FE10             		cmpi.w	#(id_LZ<<8)+3,(v_zone).w ; is level SBZ3 (LZ4) ?
000089B2 6600                       		bne.s	@notSBZ3	; if not, branch
000089B4 700C                       		moveq	#palid_SBZ3,d0	; use SB3 palette
000089B6                            
000089B6                            	@notSBZ3:
000089B6 0C78 0501 FE10             		cmpi.w	#(id_SBZ<<8)+1,(v_zone).w ; is level SBZ2?
000089BC 6700                       		beq.s	@isSBZorFZ	; if yes, branch
000089BE 0C78 0502 FE10             		cmpi.w	#(id_SBZ<<8)+2,(v_zone).w ; is level FZ?
000089C4 6600                       		bne.s	@normalpal	; if not, branch
000089C6                            
000089C6                            	@isSBZorFZ:
000089C6 700E                       		moveq	#palid_SBZ2,d0	; use SBZ2/FZ palette
000089C8                            
000089C8                            	@normalpal:
000089C8 6100 9A66                  		bsr.w	PalLoad1	; load palette (based on d0)
000089CC 245F                       		movea.l	(sp)+,a2
000089CE 584A                       		addq.w	#4,a2		; read number for 2nd PLC
000089D0 7000                       		moveq	#0,d0
000089D2 1012                       		move.b	(a2),d0
000089D4 6700                       		beq.s	@skipPLC	; if 2nd PLC is 0 (i.e. the ending sequence), branch
000089D6 6100 8D16                  		bsr.w	AddPLC		; load pattern load cues
000089DA                            
000089DA                            	@skipPLC:
000089DA 4E75                       		rts	
000089DC                            ; End of function LevelDataLoad
000089DC                            
000089DC                            ; ---------------------------------------------------------------------------
000089DC                            ; Level	layout loading subroutine
000089DC                            ; ---------------------------------------------------------------------------
000089DC                            
000089DC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000089DC                            
000089DC                            
000089DC                            LevelLayoutLoad:
000089DC 47F8 A400                  		lea	(v_lvllayout).w,a3
000089E0 323C 01FF                  		move.w	#$1FF,d1
000089E4 7000                       		moveq	#0,d0
000089E6                            
000089E6                            LevLoad_ClrRam:
000089E6 26C0                       		move.l	d0,(a3)+
000089E8 51C9 FFFC                  		dbf	d1,LevLoad_ClrRam ; clear the RAM ($A400-A7FF)
000089EC                            
000089EC 47F8 A400                  		lea	(v_lvllayout).w,a3 ; RAM address for level layout
000089F0 7200                       		moveq	#0,d1
000089F2 6100 0000                  		bsr.w	LevelLayoutLoad2 ; load	level layout into RAM
000089F6 47F8 A440                  		lea	(v_lvllayout+$40).w,a3 ; RAM address for background layout
000089FA 7202                       		moveq	#2,d1
000089FC                            ; End of function LevelLayoutLoad
000089FC                            
000089FC                            ; "LevelLayoutLoad2" is	run twice - for	the level and the background
000089FC                            
000089FC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000089FC                            
000089FC                            
000089FC                            LevelLayoutLoad2:
000089FC 3038 FE10                  		move.w	(v_zone).w,d0
00008A00 ED08                       		lsl.b	#6,d0
00008A02 EA48                       		lsr.w	#5,d0
00008A04 3400                       		move.w	d0,d2
00008A06 D040                       		add.w	d0,d0
00008A08 D042                       		add.w	d2,d0
00008A0A D041                       		add.w	d1,d0
00008A0C 43F9 0000 0000             		lea	(Level_Index).l,a1
00008A12 3031 0000                  		move.w	(a1,d0.w),d0
00008A16 43F1 0000                  		lea	(a1,d0.w),a1
00008A1A 7200                       		moveq	#0,d1
00008A1C 3401                       		move.w	d1,d2
00008A1E 1219                       		move.b	(a1)+,d1	; load level width (in tiles)
00008A20 1419                       		move.b	(a1)+,d2	; load level height (in	tiles)
00008A22                            
00008A22                            LevLoad_NumRows:
00008A22 3001                       		move.w	d1,d0
00008A24 204B                       		movea.l	a3,a0
00008A26                            
00008A26                            LevLoad_Row:
00008A26 10D9                       		move.b	(a1)+,(a0)+
00008A28 51C8 FFFC                  		dbf	d0,LevLoad_Row	; load 1 row
00008A2C 47EB 0080                  		lea	$80(a3),a3	; do next row
00008A30 51CA FFF0                  		dbf	d2,LevLoad_NumRows ; repeat for	number of rows
00008A34 4E75                       		rts	
00008A36                            ; End of function LevelLayoutLoad2
00008A36                            
00008A36                            		include	"_inc\DynamicLevelEvents.asm"
00008A36                            ; ---------------------------------------------------------------------------
00008A36                            ; Dynamic level events
00008A36                            ; ---------------------------------------------------------------------------
00008A36                            
00008A36                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008A36                            
00008A36                            
00008A36                            DynamicLevelEvents:
00008A36 7000                       		moveq	#0,d0
00008A38 1038 FE10                  		move.b	(v_zone).w,d0
00008A3C D040                       		add.w	d0,d0
00008A3E 303B 0000                  		move.w	DLE_Index(pc,d0.w),d0
00008A42 4EBB 0000                  		jsr	DLE_Index(pc,d0.w) ; run level-specific events
00008A46 7202                       		moveq	#2,d1
00008A48 3038 F726                  		move.w	(v_limitbtm1).w,d0
00008A4C 9078 F72E                  		sub.w	(v_limitbtm2).w,d0 ; has lower level boundary changed recently?
00008A50 6700                       		beq.s	DLE_NoChg	; if not, branch
00008A52 6400                       		bcc.s	loc_6DAC
00008A54                            
00008A54 4441                       		neg.w	d1
00008A56 3038 F704                  		move.w	(v_screenposy).w,d0
00008A5A B078 F726                  		cmp.w	(v_limitbtm1).w,d0
00008A5E 6300                       		bls.s	loc_6DA0
00008A60 31C0 F72E                  		move.w	d0,(v_limitbtm2).w
00008A64 0278 FFFE F72E             		andi.w	#$FFFE,(v_limitbtm2).w
00008A6A                            
00008A6A                            loc_6DA0:
00008A6A D378 F72E                  		add.w	d1,(v_limitbtm2).w
00008A6E 11FC 0001 F75C             		move.b	#1,(f_bgscrollvert).w
00008A74                            
00008A74                            DLE_NoChg:
00008A74 4E75                       		rts	
00008A76                            ; ===========================================================================
00008A76                            
00008A76                            loc_6DAC:
00008A76 3038 F704                  		move.w	(v_screenposy).w,d0
00008A7A 5040                       		addq.w	#8,d0
00008A7C B078 F72E                  		cmp.w	(v_limitbtm2).w,d0
00008A80 6500                       		bcs.s	loc_6DC4
00008A82 0838 0001 D022             		btst	#1,(v_player+obStatus).w
00008A88 6700                       		beq.s	loc_6DC4
00008A8A D241                       		add.w	d1,d1
00008A8C D241                       		add.w	d1,d1
00008A8E                            
00008A8E                            loc_6DC4:
00008A8E D378 F72E                  		add.w	d1,(v_limitbtm2).w
00008A92 11FC 0001 F75C             		move.b	#1,(f_bgscrollvert).w
00008A98 4E75                       		rts	
00008A9A                            ; End of function DynamicLevelEvents
00008A9A                            
00008A9A                            ; ===========================================================================
00008A9A                            ; ---------------------------------------------------------------------------
00008A9A                            ; Offset index for dynamic level events
00008A9A                            ; ---------------------------------------------------------------------------
00008A9A 0000 0000                  DLE_Index:	dc.w DLE_GHZ-DLE_Index, DLE_LZ-DLE_Index
00008A9E 0000 0000                  		dc.w DLE_MZ-DLE_Index, DLE_SLZ-DLE_Index
00008AA2 0000 0000                  		dc.w DLE_SYZ-DLE_Index, DLE_SBZ-DLE_Index
00008AA6 0000                       		dc.w DLE_Ending-DLE_Index
00008AA8                            ; ===========================================================================
00008AA8                            ; ---------------------------------------------------------------------------
00008AA8                            ; Green	Hill Zone dynamic level events
00008AA8                            ; ---------------------------------------------------------------------------
00008AA8                            
00008AA8                            DLE_GHZ:
00008AA8 7000                       		moveq	#0,d0
00008AAA 1038 FE11                  		move.b	(v_act).w,d0
00008AAE D040                       		add.w	d0,d0
00008AB0 303B 0000                  		move.w	DLE_GHZx(pc,d0.w),d0
00008AB4 4EFB 0000                  		jmp	DLE_GHZx(pc,d0.w)
00008AB8                            ; ===========================================================================
00008AB8 0000                       DLE_GHZx:	dc.w DLE_GHZ1-DLE_GHZx
00008ABA 0000                       		dc.w DLE_GHZ2-DLE_GHZx
00008ABC 0000                       		dc.w DLE_GHZ3-DLE_GHZx
00008ABE                            ; ===========================================================================
00008ABE                            
00008ABE                            DLE_GHZ1:
00008ABE 0C38 0000 F600             		cmpi.b	#id_Title,(v_gamemode).w
00008AC4 6600                       		bne.s	gohere
00008AC6 31FC 0400 F726             		move.w	#$400,(v_limitbtm1).w ; set lower y-boundary
00008ACC 4E75                       		rts
00008ACE                            gohere:
00008ACE 31FC 0400 F726             		move.w	#$400,(v_limitbtm1).w ; set lower y-boundary
00008AD4 0C78 1680 F700             		cmpi.w	#$1680,(v_screenposx).w ; has the camera reached $1780 on x-axis?
00008ADA 6500                       		bcs.s	locret_6E08	; if not, branch
00008ADC 31FC 0720 F726             		move.w	#$720,(v_limitbtm1).w ; set lower y-boundary
00008AE2                            
00008AE2                            locret_6E08:
00008AE2 4E75                       		rts	
00008AE4                            ; ===========================================================================
00008AE4                            
00008AE4                            DLE_GHZ2:
00008AE4 31FC 0300 F726             		move.w	#$300,(v_limitbtm1).w
00008AEA 0C78 0380 F700             		cmpi.w	#$380,(v_screenposx).w
00008AF0 6500                       		bcs.s	locret_6E3A
00008AF2 31FC 0310 F726             		move.w	#$310,(v_limitbtm1).w
00008AF8 0C78 0960 F700             		cmpi.w	#$960,(v_screenposx).w
00008AFE 6500                       		bcs.s	locret_6E3A
00008B00 0C78 0280 F704             		cmpi.w	#$280,(v_screenposy).w
00008B06 6500                       		bcs.s	loc_6E9A
00008B08 31FC 0400 F726             		move.w	#$400,(v_limitbtm1).w
00008B0E 0C78 1200 F700             		cmpi.w	#$1200,(v_screenposx).w
00008B14 6400                       		bcc.s	loc_6E8F
00008B16 31FC 04C0 F726             		move.w	#$4C0,(v_limitbtm1).w
00008B1C 31FC 04C0 F72E             		move.w	#$4C0,(v_limitbtm2).w
00008B22                            
00008B22                            loc_6E8F:
00008B22 0C78 1200 F700             		cmpi.w	#$1200,(v_screenposx).w
00008B28 6400                       		bcc.s	loc_6E9A
00008B2A                            
00008B2A                            locret_6E3A:
00008B2A 4E75                       		rts	
00008B2C                            ; ===========================================================================
00008B2C                            
00008B2C                            loc_6E9A:
00008B2C 31FC 0300 F726             		move.w	#$300,(v_limitbtm1).w
00008B32 5438 F742                  		addq.b	#2,(v_dle_routine).w
00008B36 4E75                       		rts		
00008B38                            ; ===========================================================================
00008B38                            
00008B38                            DLE_GHZ3:
00008B38 7000                       		moveq	#0,d0
00008B3A 1038 F742                  		move.b	(v_dle_routine).w,d0
00008B3E 303B 0000                  		move.w	off_6E4A(pc,d0.w),d0
00008B42 4EFB 0000                  		jmp	off_6E4A(pc,d0.w)
00008B46                            ; ===========================================================================
00008B46 0000                       off_6E4A:	dc.w DLE_GHZ3main-off_6E4A
00008B48 0000                       		dc.w DLE_GHZ3boss-off_6E4A
00008B4A 0000                       		dc.w DLE_GHZ3end-off_6E4A
00008B4C                            ; ===========================================================================
00008B4C                            
00008B4C                            DLE_GHZ3main:
00008B4C 31FC 0300 F726             		move.w	#$300,(v_limitbtm1).w
00008B52 0C78 0400 F700             		cmpi.w	#$400,(v_screenposx).w
00008B58 6500                       		bcs.s	locret_6E96
00008B5A 31FC 0300 F726             		move.w	#$300,(v_limitbtm1).w
00008B60 0C78 0960 F700             		cmpi.w	#$960,(v_screenposx).w
00008B66 6500                       		bcs.s	locret_6E96
00008B68 0C78 0280 F704             		cmpi.w	#$280,(v_screenposy).w
00008B6E 6500                       		bcs.s	loc_6E98
00008B70 31FC 0300 F726             		move.w	#$300,(v_limitbtm1).w
00008B76 0C78 1380 F700             		cmpi.w	#$1380,(v_screenposx).w
00008B7C 6400                       		bcc.s	loc_6E8E
00008B7E 31FC 0300 F726             		move.w	#$300,(v_limitbtm1).w
00008B84 31FC 0300 F72E             		move.w	#$300,(v_limitbtm2).w
00008B8A                            
00008B8A                            loc_6E8E:
00008B8A 0C78 1700 F700             		cmpi.w	#$1700,(v_screenposx).w
00008B90 6400                       		bcc.s	loc_6E98
00008B92                            
00008B92                            locret_6E96:
00008B92 4E75                       		rts	
00008B94                            ; ===========================================================================
00008B94                            
00008B94                            loc_6E98:
00008B94 31FC 0300 F726             		move.w	#$300,(v_limitbtm1).w
00008B9A 5438 F742                  		addq.b	#2,(v_dle_routine).w
00008B9E 4E75                       		rts	
00008BA0                            ; ===========================================================================
00008BA0                            
00008BA0                            DLE_GHZ3boss:
00008BA0 0C78 0960 F700             		cmpi.w	#$960,(v_screenposx).w
00008BA6 6400                       		bcc.s	loc_6EB0
00008BA8 5538 F742                  		subq.b	#2,(v_dle_routine).w
00008BAC                            
00008BAC                            loc_6EB0:
00008BAC 0C78 1360 F700             		cmpi.w	#$1360,(v_screenposx).w
00008BB2 6500                       		bcs.s	locret_6EE8
00008BB4 6100 0000                  		bsr.w	FindFreeObj
00008BB8 6600                       		bne.s	loc_6ED0
00008BBA 12BC 0000                  		move.b	#id_BossGreenHill,0(a1) ; load GHZ boss	object
00008BBE 337C 1460 0008             		move.w	#$1460,obX(a1)
00008BC4 337C 0280 000C             		move.w	#$280,obY(a1)
00008BCA                            
00008BCA                            loc_6ED0:
00008BD2 11FC 0001 F7AA             		move.b	#1,(f_lockscreen).w ; lock screen
00008BD8 5438 F742                  		addq.b	#2,(v_dle_routine).w
00008BDC 7000                       		moveq	#plcid_Egg,d0
00008BDE 6000 8B0E                  		bra.w	AddPLC		; load boss patterns
00008BE2                            		
00008BE2                            ; ===========================================================================
00008BE2                            
00008BE2                            locret_6EE8:
00008BE2 4E75                       		rts	
00008BE4                            ; ===========================================================================
00008BE4                            
00008BE4                            DLE_GHZ3end:
00008BE4 31F8 F700 F728             		move.w	(v_screenposx).w,(v_limitleft2).w
00008BEA 337C 0280 000C             		move.w	#$280,obY(a1)
00008BF0 4E75                       		rts	
00008BF2                            ; ===========================================================================
00008BF2                            ; ---------------------------------------------------------------------------
00008BF2                            ; Labyrinth Zone dynamic level events
00008BF2                            ; ---------------------------------------------------------------------------
00008BF2                            
00008BF2                            DLE_LZ:
00008BF2 7000                       		moveq	#0,d0
00008BF4 1038 FE11                  		move.b	(v_act).w,d0
00008BF8 D040                       		add.w	d0,d0
00008BFA 303B 0000                  		move.w	DLE_LZx(pc,d0.w),d0
00008BFE 4EFB 0000                  		jmp	DLE_LZx(pc,d0.w)
00008C02                            ; ===========================================================================
00008C02 0000                       DLE_LZx:	dc.w DLE_LZ12-DLE_LZx
00008C04 0000                       		dc.w DLE_LZ12-DLE_LZx
00008C06 0000                       		dc.w DLE_LZ3-DLE_LZx
00008C08 0000                       		dc.w DLE_SBZ3-DLE_LZx
00008C0A                            ; ===========================================================================
00008C0A                            
00008C0A                            DLE_LZ12:
00008C0A 4E75                       		rts	
00008C0C                            ; ===========================================================================
00008C0C                            
00008C0C                            DLE_LZ3:
00008C0C 4A38 F7EF                  		tst.b	(f_switch+$F).w	; has switch $F	been pressed?
00008C10 6700                       		beq.s	loc_6F28	; if not, branch
00008C12 43F8 A506                  		lea	(v_lvllayout+$106).w,a1
00008C16 0C11 0007                  		cmpi.b	#7,(a1)
00008C1A 6700                       		beq.s	loc_6F28
00008C1C 12BC 0007                  		move.b	#7,(a1)		; modify level layout
00008C28                            
00008C28                            loc_6F28:
00008C28 4A38 F742                  		tst.b	(v_dle_routine).w
00008C2C 6600                       		bne.s	locret_6F64
00008C2E 0C78 1CA0 F700             		cmpi.w	#$1CA0,(v_screenposx).w
00008C34 6500                       		bcs.s	locret_6F62
00008C36 0C78 0600 F704             		cmpi.w	#$600,(v_screenposy).w
00008C3C 6400                       		bcc.s	locret_6F62
00008C3E 6100 0000                  		bsr.w	FindFreeObj
00008C42 6600                       		bne.s	loc_6F4A
00008C44 12BC 0000                  		move.b	#id_BossLabyrinth,0(a1) ; load LZ boss object
00008C48                            
00008C48                            loc_6F4A:
00008C50 11FC 0001 F7AA             		move.b	#1,(f_lockscreen).w ; lock screen
00008C56 5438 F742                  		addq.b	#2,(v_dle_routine).w
00008C5A 7000                       		moveq	#plcid_Boss,d0
00008C5C 6000 8A90                  		bra.w	AddPLC		; load boss patterns
00008C60                            ; ===========================================================================
00008C60                            
00008C60                            locret_6F62:
00008C60 4E75                       		rts	
00008C62                            ; ===========================================================================
00008C62                            
00008C62                            locret_6F64:
00008C62 4E75                       		rts	
00008C64                            ; ===========================================================================
00008C64                            
00008C64                            DLE_SBZ3:
00008C64 0C78 0D00 F700             		cmpi.w	#$D00,(v_screenposx).w
00008C6A 6500                       		bcs.s	locret_6F8C
00008C6C 0C78 0018 D00C             		cmpi.w	#$18,(v_player+obY).w ; has Sonic reached the top of the level?
00008C72 6400                       		bcc.s	locret_6F8C	; if not, branch
00008C74 4238 FE30                  		clr.b	(v_lastlamp).w
00008C78 31FC 0001 FE02             		move.w	#1,(f_restart).w ; restart level
00008C7E 31FC 0502 FE10             		move.w	#(id_SBZ<<8)+2,(v_zone).w ; set level number to 0502 (FZ)
00008C84 11FC 0001 F7C8             		move.b	#1,(f_lockmulti).w ; freeze Sonic
00008C8A                            
00008C8A                            locret_6F8C:
00008C8A 4E75                       		rts	
00008C8C                            ; ===========================================================================
00008C8C                            ; ---------------------------------------------------------------------------
00008C8C                            ; Marble Zone dynamic level events
00008C8C                            ; ---------------------------------------------------------------------------
00008C8C                            
00008C8C                            DLE_MZ:
00008C8C 7000                       		moveq	#0,d0
00008C8E 1038 FE11                  		move.b	(v_act).w,d0
00008C92 D040                       		add.w	d0,d0
00008C94 303B 0000                  		move.w	DLE_MZx(pc,d0.w),d0
00008C98 4EFB 0000                  		jmp	DLE_MZx(pc,d0.w)
00008C9C                            ; ===========================================================================
00008C9C 0000                       DLE_MZx:	dc.w DLE_MZ1-DLE_MZx
00008C9E 0000                       		dc.w DLE_MZ2-DLE_MZx
00008CA0 0000                       		dc.w DLE_MZ3-DLE_MZx
00008CA2                            ; ===========================================================================
00008CA2                            
00008CA2                            DLE_MZ1:
00008CA2 31FC 0520 F726             		move.w	#$520,(v_limitbtm1).w
00008CA8 0C78 1F40 F700             		cmpi.w	#$1F40,(v_screenposx).w
00008CAE 6500                       		bcs.s	locret_6FE8
00008CB0 31FC 0220 F726             		move.w	#$220,(v_limitbtm1).w
00008CB6                            
00008CB6                            locret_6FE8:
00008CB6 4E75                       		rts	
00008CB8                            
00008CB8                            ; ===========================================================================
00008CB8                            
00008CB8                            DLE_MZ2:
00008CB8 31FC 0520 F726             		move.w	#$520,(v_limitbtm1).w
00008CBE 0C78 1700 F700             		cmpi.w	#$1700,(v_screenposx).w
00008CC4 6500                       		bcs.s	locret_6FE9
00008CC6 31FC 0110 F726             		move.w	#$110,(v_limitbtm1).w
00008CCC                            		
00008CCC                            locret_6FE9:
00008CCC 4E75                       		rts	
00008CCE                            ; ===========================================================================
00008CCE                            
00008CCE                            DLE_MZ3:
00008CCE 7000                       		moveq	#0,d0
00008CD0 1038 F742                  		move.b	(v_dle_routine).w,d0
00008CD4 303B 0000                  		move.w	off_7098(pc,d0.w),d0
00008CD8 4EFB 0000                  		jmp	off_7098(pc,d0.w)
00008CDC                            ; ===========================================================================
00008CDC 0000                       off_7098:	dc.w DLE_MZ3boss-off_7098
00008CDE 0000                       		dc.w DLE_MZ3end-off_7098
00008CE0                            ; ===========================================================================
00008CE0                            
00008CE0                            DLE_MZ3boss:
00008CE0 31FC 0300 F726             		move.w	#$300,(v_limitbtm1).w
00008CE6 0C78 0E00 F700             		cmpi.w	#$0E00,(v_screenposx).w
00008CEC 6500                       		bcs.s	locret_70E8
00008CEE 31FC 0210 F726             		move.w	#$210,(v_limitbtm1).w
00008CF4 0C78 17F0 F700             		cmpi.w	#$17F0,(v_screenposx).w
00008CFA 6500                       		bcs.s	locret_70E8
00008CFC 6100 0000                  		bsr.w	FindFreeObj
00008D00 6600                       		bne.s	loc_70D0
00008D02 12BC 0000                  		move.b	#id_BossMarble,0(a1) ; load MZ boss object
00008D06 337C 19F0 0008             		move.w	#$19F0,obX(a1)
00008D0C 337C 022C 000C             		move.w	#$22C,obY(a1)
00008D12                            
00008D12                            loc_70D0:
00008D1A 11FC 0001 F7AA             		move.b	#1,(f_lockscreen).w ; lock screen
00008D20 5438 F742                  		addq.b	#2,(v_dle_routine).w
00008D24 7000                       		moveq	#plcid_Boss,d0
00008D26 6000 89C6                  		bra.w	AddPLC		; load boss patterns
00008D2A                            ; ===========================================================================
00008D2A                            
00008D2A                            locret_70E8:
00008D2A 4E75                       		rts	
00008D2C                            ; ===========================================================================
00008D2C                            
00008D2C                            DLE_MZ3end:
00008D2C 31F8 F700 F728             		move.w	(v_screenposx).w,(v_limitleft2).w
00008D32 4E75                       		rts	
00008D34                            		
00008D34                            ; ===========================================================================
00008D34                            ; ---------------------------------------------------------------------------
00008D34                            ; Star Light Zone dynamic level events
00008D34                            ; ---------------------------------------------------------------------------
00008D34                            
00008D34                            DLE_SLZ:
00008D34 7000                       		moveq	#0,d0
00008D36 1038 FE11                  		move.b	(v_act).w,d0
00008D3A D040                       		add.w	d0,d0
00008D3C 303B 0000                  		move.w	DLE_SLZx(pc,d0.w),d0
00008D40 4EFB 0000                  		jmp	DLE_SLZx(pc,d0.w)
00008D44                            ; ===========================================================================
00008D44 0000                       DLE_SLZx:	dc.w DLE_SLZ12-DLE_SLZx
00008D46 0000                       		dc.w DLE_SLZ12-DLE_SLZx
00008D48 0000                       		dc.w DLE_SLZ3-DLE_SLZx
00008D4A                            ; ===========================================================================
00008D4A                            
00008D4A                            DLE_SLZ12:
00008D4A 4E75                       		rts	
00008D4C                            ; ===========================================================================
00008D4C                            
00008D4C                            DLE_SLZ3:
00008D4C 7000                       		moveq	#0,d0
00008D4E 1038 F742                  		move.b	(v_dle_routine).w,d0
00008D52 303B 0000                  		move.w	off_7118(pc,d0.w),d0
00008D56 4EFB 0000                  		jmp	off_7118(pc,d0.w)
00008D5A                            ; ===========================================================================
00008D5A 0000                       off_7118:	dc.w DLE_SLZ3main-off_7118
00008D5C 0000                       		dc.w DLE_SLZ3boss-off_7118
00008D5E 0000                       		dc.w DLE_SLZ3end-off_7118
00008D60                            ; ===========================================================================
00008D60                            
00008D60                            DLE_SLZ3main:
00008D60 0C78 1E70 F700             		cmpi.w	#$1E70,(v_screenposx).w
00008D66 6500                       		bcs.s	locret_7130
00008D68 31FC 0210 F726             		move.w	#$210,(v_limitbtm1).w
00008D6E 5438 F742                  		addq.b	#2,(v_dle_routine).w
00008D72                            
00008D72                            locret_7130:
00008D72 4E75                       		rts	
00008D74                            ; ===========================================================================
00008D74                            
00008D74                            DLE_SLZ3boss:
00008D74 0C78 2000 F700             		cmpi.w	#$2000,(v_screenposx).w
00008D7A 6500                       		bcs.s	locret_715C
00008D7C 6100 0000                  		bsr.w	FindFreeObj
00008D80 6600                       		bne.s	loc_7144
00008D82 12BC 0000                  		move.b	#id_BossStarLight,(a1) ; load SLZ boss object
00008D86                            
00008D86                            loc_7144:
00008D8E 11FC 0001 F7AA             		move.b	#1,(f_lockscreen).w ; lock screen
00008D94 5438 F742                  		addq.b	#2,(v_dle_routine).w
00008D98 7000                       		moveq	#plcid_Boss,d0
00008D9A 6000 8952                  		bra.w	AddPLC		; load boss patterns
00008D9E                            ; ===========================================================================
00008D9E                            
00008D9E                            locret_715C:
00008D9E 4E75                       		rts	
00008DA0                            ; ===========================================================================
00008DA0                            
00008DA0                            DLE_SLZ3end:
00008DA0 31F8 F700 F728             		move.w	(v_screenposx).w,(v_limitleft2).w
00008DA6 4E75                       		rts
00008DA8 4E75                       		rts
00008DAA                            ; ===========================================================================
00008DAA                            ; ---------------------------------------------------------------------------
00008DAA                            ; Spring Yard Zone dynamic level events
00008DAA                            ; ---------------------------------------------------------------------------
00008DAA                            
00008DAA                            DLE_SYZ:
00008DAA 7000                       		moveq	#0,d0
00008DAC 1038 FE11                  		move.b	(v_act).w,d0
00008DB0 D040                       		add.w	d0,d0
00008DB2 303B 0000                  		move.w	DLE_SYZx(pc,d0.w),d0
00008DB6 4EFB 0000                  		jmp	DLE_SYZx(pc,d0.w)
00008DBA                            ; ===========================================================================
00008DBA 0000                       DLE_SYZx:	dc.w DLE_SYZ1-DLE_SYZx
00008DBC 0000                       		dc.w DLE_SYZ2-DLE_SYZx
00008DBE 0000                       		dc.w DLE_SYZ3-DLE_SYZx
00008DC0                            ; ===========================================================================
00008DC0                            
00008DC0                            DLE_SYZ1:
00008DC0 4E75                       		rts	
00008DC2                            ; ===========================================================================
00008DC2                            
00008DC2                            DLE_SYZ2:
00008DC2 31FC 0520 F726             		move.w	#$520,(v_limitbtm1).w
00008DC8 0C78 25A0 F700             		cmpi.w	#$25A0,(v_screenposx).w
00008DCE 6500                       		bcs.s	locret_71A2
00008DD0 31FC 0420 F726             		move.w	#$420,(v_limitbtm1).w
00008DD6 0C78 04D0 D00C             		cmpi.w	#$4D0,(v_player+obY).w
00008DDC 6500                       		bcs.s	locret_71A2
00008DDE 31FC 0520 F726             		move.w	#$520,(v_limitbtm1).w
00008DE4                            
00008DE4                            locret_71A2:
00008DE4 4E75                       		rts	
00008DE6                            ; ===========================================================================
00008DE6                            
00008DE6                            DLE_SYZ3:
00008DE6 7000                       		moveq	#0,d0
00008DE8 1038 F742                  		move.b	(v_dle_routine).w,d0
00008DEC 303B 0000                  		move.w	off_71B2(pc,d0.w),d0
00008DF0 4EFB 0000                  		jmp	off_71B2(pc,d0.w)
00008DF4                            ; ===========================================================================
00008DF4 0000                       off_71B2:	dc.w DLE_SYZ3main-off_71B2
00008DF6 0000                       		dc.w DLE_SYZ3boss-off_71B2
00008DF8 0000                       		dc.w DLE_SYZ3end-off_71B2
00008DFA                            ; ===========================================================================
00008DFA                            
00008DFA                            DLE_SYZ3main:
00008DFA 0C78 2AC0 F700             		cmpi.w	#$2AC0,(v_screenposx).w
00008E00 6500                       		bcs.s	locret_71CE
00008E02 6100 0000                  		bsr.w	FindFreeObj
00008E06 6600                       		bne.s	locret_71CE
00008E08 12BC 0000                  		move.b	#id_BossBlock,(a1) ; load blocks that boss picks up
00008E0C 5438 F742                  		addq.b	#2,(v_dle_routine).w
00008E10                            
00008E10                            locret_71CE:
00008E10 4E75                       		rts	
00008E12                            ; ===========================================================================
00008E12                            
00008E12                            DLE_SYZ3boss:
00008E12 0C78 2C00 F700             		cmpi.w	#$2C00,(v_screenposx).w
00008E18 6500                       		bcs.s	locret_7200
00008E1A 31FC 04CC F726             		move.w	#$4CC,(v_limitbtm1).w
00008E20 6100 0000                  		bsr.w	FindFreeObj
00008E24 6600                       		bne.s	loc_71EC
00008E26 12BC 0000                  		move.b	#id_BossSpringYard,(a1) ; load SYZ boss	object
00008E2A 5438 F742                  		addq.b	#2,(v_dle_routine).w
00008E2E                            
00008E2E                            loc_71EC:
00008E36 11FC 0001 F7AA             		move.b	#1,(f_lockscreen).w ; lock screen
00008E3C 7000                       		moveq	#plcid_Boss,d0
00008E3E 6000 88AE                  		bra.w	AddPLC		; load boss patterns
00008E42                            ; ===========================================================================
00008E42                            
00008E42                            locret_7200:
00008E42 4E75                       		rts	
00008E44                            ; ===========================================================================
00008E44                            
00008E44                            DLE_SYZ3end:
00008E44 31F8 F700 F728             		move.w	(v_screenposx).w,(v_limitleft2).w
00008E4A 4E75                       		rts	
00008E4C                            ; ===========================================================================
00008E4C                            ; ---------------------------------------------------------------------------
00008E4C                            ; Scrap	Brain Zone dynamic level events
00008E4C                            ; ---------------------------------------------------------------------------
00008E4C                            
00008E4C                            DLE_SBZ:
00008E4C 7000                       		moveq	#0,d0
00008E4E 1038 FE11                  		move.b	(v_act).w,d0
00008E52 D040                       		add.w	d0,d0
00008E54 303B 0000                  		move.w	DLE_SBZx(pc,d0.w),d0
00008E58 4EFB 0000                  		jmp	DLE_SBZx(pc,d0.w)
00008E5C                            ; ===========================================================================
00008E5C 0000                       DLE_SBZx:	dc.w DLE_SBZ1-DLE_SBZx
00008E5E 0000                       		dc.w DLE_SBZ2-DLE_SBZx
00008E60 0000                       		dc.w DLE_FZ-DLE_SBZx
00008E62                            ; ===========================================================================
00008E62                            
00008E62                            DLE_SBZ1:
00008E62 31FC 0720 F726             		move.w	#$720,(v_limitbtm1).w
00008E68 0C78 1880 F700             		cmpi.w	#$1880,(v_screenposx).w
00008E6E 6500                       		bcs.s	locret_7242
00008E70 31FC 0620 F726             		move.w	#$620,(v_limitbtm1).w
00008E76 0C78 2000 F700             		cmpi.w	#$2000,(v_screenposx).w
00008E7C 6500                       		bcs.s	locret_7242
00008E7E 31FC 02A0 F726             		move.w	#$2A0,(v_limitbtm1).w
00008E84                            
00008E84                            locret_7242:
00008E84 4E75                       		rts	
00008E86                            ; ===========================================================================
00008E86                            
00008E86                            DLE_SBZ2:
00008E86 7000                       		moveq	#0,d0
00008E88 1038 F742                  		move.b	(v_dle_routine).w,d0
00008E8C 303B 0000                  		move.w	off_7252(pc,d0.w),d0
00008E90 4EFB 0000                  		jmp	off_7252(pc,d0.w)
00008E94                            ; ===========================================================================
00008E94 0000                       off_7252:	dc.w DLE_SBZ2main-off_7252
00008E96 0000                       		dc.w DLE_SBZ2boss-off_7252
00008E98 0000                       		dc.w DLE_SBZ2boss2-off_7252
00008E9A 0000                       		dc.w DLE_SBZ2end-off_7252
00008E9C                            ; ===========================================================================
00008E9C                            
00008E9C                            DLE_SBZ2main:
00008E9C 31FC 0800 F726             		move.w	#$800,(v_limitbtm1).w
00008EA2 0C78 1800 F700             		cmpi.w	#$1800,(v_screenposx).w
00008EA8 6500                       		bcs.s	locret_727A
00008EAA 31FC 0510 F726             		move.w	#$510,(v_limitbtm1).w
00008EB0 0C78 1E00 F700             		cmpi.w	#$1E00,(v_screenposx).w
00008EB6 6500                       		bcs.s	locret_727A
00008EB8 5438 F742                  		addq.b	#2,(v_dle_routine).w
00008EBC                            
00008EBC                            locret_727A:
00008EBC 4E75                       		rts	
00008EBE                            ; ===========================================================================
00008EBE                            
00008EBE                            DLE_SBZ2boss:
00008EBE 0C78 1EB0 F700             		cmpi.w	#$1EB0,(v_screenposx).w
00008EC4 6500                       		bcs.s	locret_7298
00008EC6 6100 0000                  		bsr.w	FindFreeObj
00008ECA 6600                       		bne.s	locret_7298
00008ECC 12BC 0000                  		move.b	#id_FalseFloor,(a1) ; load collapsing block object
00008ED0 5438 F742                  		addq.b	#2,(v_dle_routine).w
00008ED4 7000                       		moveq	#plcid_EggmanSBZ2,d0
00008ED6 6000 8816                  		bra.w	AddPLC		; load SBZ2 Eggman patterns
00008EDA                            ; ===========================================================================
00008EDA                            
00008EDA                            locret_7298:
00008EDA 4E75                       		rts	
00008EDC                            ; ===========================================================================
00008EDC                            
00008EDC                            DLE_SBZ2boss2:
00008EDC 0C78 1F60 F700             		cmpi.w	#$1F60,(v_screenposx).w
00008EE2 6500                       		bcs.s	loc_72B6
00008EE4 6100 0000                  		bsr.w	FindFreeObj
00008EE8 6600                       		bne.s	loc_72B0
00008EEA 12BC 0000                  		move.b	#id_ScrapEggman,(a1) ; load SBZ2 Eggman object
00008EEE 5438 F742                  		addq.b	#2,(v_dle_routine).w
00008EF2                            
00008EF2                            loc_72B0:
00008EF2 11FC 0001 F7AA             		move.b	#1,(f_lockscreen).w ; lock screen
00008EF8                            
00008EF8                            loc_72B6:
00008EF8 6000                       		bra.s	loc_72C2
00008EFA                            ; ===========================================================================
00008EFA                            
00008EFA                            DLE_SBZ2end:
00008EFA 0C78 2050 F700             		cmpi.w	#$2050,(v_screenposx).w
00008F00 6500                       		bcs.s	loc_72C2
00008F02 4E75                       		rts	
00008F04                            ; ===========================================================================
00008F04                            
00008F04                            loc_72C2:
00008F04 31F8 F700 F728             		move.w	(v_screenposx).w,(v_limitleft2).w
00008F0A 4E75                       		rts	
00008F0C                            ; ===========================================================================
00008F0C                            
00008F0C                            DLE_FZ:
00008F0C 7000                       		moveq	#0,d0
00008F0E 1038 F742                  		move.b	(v_dle_routine).w,d0
00008F12 303B 0000                  		move.w	off_72D8(pc,d0.w),d0
00008F16 4EFB 0000                  		jmp	off_72D8(pc,d0.w)
00008F1A                            ; ===========================================================================
00008F1A 0000 0000                  off_72D8:	dc.w DLE_FZmain-off_72D8, DLE_FZboss-off_72D8
00008F1E 0000 0000                  		dc.w DLE_FZend-off_72D8, locret_7322-off_72D8
00008F22 0000                       		dc.w DLE_FZend2-off_72D8
00008F24                            ; ===========================================================================
00008F24                            
00008F24                            DLE_FZmain:
00008F24 0C78 2148 F700             		cmpi.w	#$2148,(v_screenposx).w
00008F2A 6500                       		bcs.s	loc_72F4
00008F2C 5438 F742                  		addq.b	#2,(v_dle_routine).w
00008F30 7000                       		moveq	#plcid_FZBoss,d0
00008F32 6100 87BA                  		bsr.w	AddPLC		; load FZ boss patterns
00008F36                            
00008F36                            loc_72F4:
00008F36 60CC                       		bra.s	loc_72C2
00008F38                            ; ===========================================================================
00008F38                            
00008F38                            DLE_FZboss:
00008F38 0C78 2300 F700             		cmpi.w	#$2300,(v_screenposx).w
00008F3E 6500                       		bcs.s	loc_7312
00008F40 6100 0000                  		bsr.w	FindFreeObj
00008F44 6600                       		bne.s	loc_7312
00008F46 12BC 0000                  		move.b	#id_BossFinal,(a1) ; load FZ boss object
00008F4A 5438 F742                  		addq.b	#2,(v_dle_routine).w
00008F4E 11FC 0001 F7AA             		move.b	#1,(f_lockscreen).w ; lock screen
00008F54                            
00008F54                            loc_7312:
00008F54 60AE                       		bra.s	loc_72C2
00008F56                            ; ===========================================================================
00008F56                            
00008F56                            DLE_FZend:
00008F56 0C78 2450 F700             		cmpi.w	#$2450,(v_screenposx).w
00008F5C 6500                       		bcs.s	loc_7320
00008F5E 5438 F742                  		addq.b	#2,(v_dle_routine).w
00008F62                            
00008F62                            loc_7320:
00008F62 60A0                       		bra.s	loc_72C2
00008F64                            ; ===========================================================================
00008F64                            
00008F64                            locret_7322:
00008F64 4E75                       		rts	
00008F66                            ; ===========================================================================
00008F66                            
00008F66                            DLE_FZend2:
00008F66 609C                       		bra.s	loc_72C2
00008F68                            ; ===========================================================================
00008F68                            ; ---------------------------------------------------------------------------
00008F68                            ; Ending sequence dynamic level events (empty)
00008F68                            ; ---------------------------------------------------------------------------
00008F68                            
00008F68                            DLE_Ending:
00008F68 4E75                       		rts	
00008F68 4E75                       		rts	
00008F6A                            
00008F6A                            		include	"_incObj\11 Bridge (part 1).asm"
00008F6A                            ; ---------------------------------------------------------------------------
00008F6A                            ; Object 11 - GHZ bridge
00008F6A                            ; ---------------------------------------------------------------------------
00008F6A                            
00008F6A                            Bridge:
00008F6A 7000                       		moveq	#0,d0
00008F6C 1028 0024                  		move.b	obRoutine(a0),d0
00008F70 323B 0000                  		move.w	Bri_Index(pc,d0.w),d1
00008F74 4EFB 1000                  		jmp	Bri_Index(pc,d1.w)
00008F78                            ; ===========================================================================
00008F78 0000 0000                  Bri_Index:	dc.w Bri_Main-Bri_Index, Bri_Action-Bri_Index
00008F7C 0000 0000                  		dc.w Bri_Platform-Bri_Index, Bri_Delete-Bri_Index
00008F80 0000 0000                  		dc.w Bri_Delete-Bri_Index, Bri_Display-Bri_Index
00008F84                            ; ===========================================================================
00008F84                            
00008F84                            Bri_Main:	; Routine 0
00008F84 5428 0024                  		addq.b	#2,obRoutine(a0)
00008F88 217C 0000 0000 0004        		move.l	#Map_Bri,obMap(a0)
00008F90 317C 438E 0002             		move.w	#$438E,obGfx(a0)
00008F96 117C 0004 0001             		move.b	#4,obRender(a0)
00008F9C 317C 0180 0018             		move.w	#$180,obPriority(a0)
00008FA2 117C 0080 0014             		move.b	#$80,obActWid(a0)
00008FA8 3428 000C                  		move.w	obY(a0),d2
00008FAC 3628 0008                  		move.w	obX(a0),d3
00008FB0 1810                       		move.b	0(a0),d4	; copy object number ($11) to d4
00008FB2 45E8 0028                  		lea	obSubtype(a0),a2
00008FB6 7200                       		moveq	#0,d1
00008FB8 1212                       		move.b	(a2),d1		; copy bridge length to d1
00008FBA 14FC 0000                  		move.b	#0,(a2)+	; clear bridge length
00008FBE 3001                       		move.w	d1,d0
00008FC0 E248                       		lsr.w	#1,d0
00008FC2 E948                       		lsl.w	#4,d0
00008FC4 9640                       		sub.w	d0,d3		; d3 is position of leftmost log
00008FC6 5501                       		subq.b	#2,d1
00008FC8 6500                       		bcs.s	Bri_Action	; don't make more if bridge has only 1 log
00008FCA                            
00008FCA                            @buildloop:
00008FCA 6100 0000                  		bsr.w	FindFreeObj
00008FCE 6600                       		bne.s	Bri_Action
00008FD0 5228 0028                  		addq.b	#1,obSubtype(a0)
00008FD4 B668 0008                  		cmp.w	obX(a0),d3	; is this log the leftmost one?
00008FD8 6600                       		bne.s	@notleftmost	; if not, branch
00008FDA                            
00008FDA 0643 0010                  		addi.w	#$10,d3
00008FDE 3142 000C                  		move.w	d2,obY(a0)
00008FE2 3142 003C                  		move.w	d2,$3C(a0)
00008FE6 3A08                       		move.w	a0,d5
00008FE8 0445 D000                  		subi.w	#$D000,d5
00008FEC EC4D                       		lsr.w	#6,d5
00008FEE 0245 007F                  		andi.w	#$7F,d5
00008FF2 14C5                       		move.b	d5,(a2)+
00008FF4 5228 0028                  		addq.b	#1,obSubtype(a0)
00008FF8                            
00008FF8                            	@notleftmost:
00008FF8 3A09                       		move.w	a1,d5
00008FFA 0445 D000                  		subi.w	#$D000,d5
00008FFE EC4D                       		lsr.w	#6,d5
00009000 0245 007F                  		andi.w	#$7F,d5
00009004 14C5                       		move.b	d5,(a2)+
00009006 137C 000A 0024             		move.b	#$A,obRoutine(a1)
0000900C 1284                       		move.b	d4,0(a1)	; load bridge object (d4 = $11)
0000900E 3342 000C                  		move.w	d2,obY(a1)
00009012 3342 003C                  		move.w	d2,$3C(a1)
00009016 3343 0008                  		move.w	d3,obX(a1)
0000901A 237C 0000 0000 0004        		move.l	#Map_Bri,obMap(a1)
00009022 337C 438E 0002             		move.w	#$438E,obGfx(a1)
00009028 137C 0004 0001             		move.b	#4,obRender(a1)
0000902E 337C 0180 0018             		move.w	#$180,obPriority(a1)
00009034 137C 0008 0014             		move.b	#8,obActWid(a1)
0000903A 0643 0010                  		addi.w	#$10,d3
0000903E 51C9 FF8A                  		dbf	d1,@buildloop ; repeat d1 times (length of bridge)
00009042                            
00009042                            Bri_Action:	; Routine 2
00009042 6100                       		bsr.s	Bri_Solid
00009044 4A28 003E                  		tst.b	$3E(a0)
00009048 6700                       		beq.s	@display
0000904A 5928 003E                  		subq.b	#4,$3E(a0)
0000904E 6100 0000                  		bsr.w	Bri_Bend
00009052                            
00009052                            	@display:
00009052 6100 0000                  		bsr.w	DisplaySprite
00009056 6000 0000                  		bra.w	Bri_ChkDel
0000905A                            
0000905A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000905A                            
0000905A                            
0000905A                            Bri_Solid:
0000905A 7200                       		moveq	#0,d1
0000905C 1228 0028                  		move.b	obSubtype(a0),d1
00009060 E749                       		lsl.w	#3,d1
00009062 3401                       		move.w	d1,d2
00009064 5041                       		addq.w	#8,d1
00009066 D442                       		add.w	d2,d2
00009068 43F8 D000                  		lea	(v_player).w,a1
0000906C 4A69 0012                  		tst.w	obVelY(a1)
00009070 6B00 0000                  		bmi.w	Plat_Exit
00009074 3029 0008                  		move.w	obX(a1),d0
00009078 9068 0008                  		sub.w	obX(a0),d0
0000907C D041                       		add.w	d1,d0
0000907E 6B00 0000                  		bmi.w	Plat_Exit
00009082 B042                       		cmp.w	d2,d0
00009084 6400 0000                  		bcc.w	Plat_Exit
00009088 6000                       		bra.s	Plat_NoXCheck
0000908A                            ; End of function Bri_Solid
0000908A                            ; End of function Bri_Solid
0000908A                            
0000908A                            ; ---------------------------------------------------------------------------
0000908A                            ; Platform subroutine
0000908A                            ; ---------------------------------------------------------------------------
0000908A                            
0000908A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000908A                            
0000908A                            PlatformObject:
0000908A 43F8 D000                  		lea	(v_player).w,a1
0000908E 4A69 0012                  		tst.w	obVelY(a1)	; is Sonic moving up/jumping?
00009092 6B00 0000                  		bmi.w	Plat_Exit	; if yes, branch
00009096                            
00009096                            ;		perform x-axis range check
00009096 3029 0008                  		move.w	obX(a1),d0
0000909A 9068 0008                  		sub.w	obX(a0),d0
0000909E D041                       		add.w	d1,d0
000090A0 6B00 0000                  		bmi.w	Plat_Exit
000090A4 D241                       		add.w	d1,d1
000090A6 B041                       		cmp.w	d1,d0
000090A8 6400 0000                  		bhs.w	Plat_Exit
000090AC                            
000090AC                            	Plat_NoXCheck:
000090AC 3028 000C                  		move.w	obY(a0),d0
000090B0 5140                       		subq.w	#8,d0
000090B2                            
000090B2                            Platform3:
000090B2                            ;		perform y-axis range check
000090B2 3429 000C                  		move.w	obY(a1),d2
000090B6 1229 0016                  		move.b	obHeight(a1),d1
000090BA 4881                       		ext.w	d1
000090BC D242                       		add.w	d2,d1
000090BE 5841                       		addq.w	#4,d1
000090C0 9041                       		sub.w	d1,d0
000090C2 6200 0000                  		bhi.w	Plat_Exit
000090C6 0C40 FFF0                  		cmpi.w	#-$10,d0
000090CA 6500 0000                  		blo.w	Plat_Exit
000090CE                            
000090CE 4A38 F7C8                  		tst.b	(f_lockmulti).w
000090D2 6B00 0000                  		bmi.w	Plat_Exit
000090D6 0C29 0006 0024             		cmpi.b	#6,obRoutine(a1)
000090DC 6400 0000                  		bhs.w	Plat_Exit
000090E0 D440                       		add.w	d0,d2
000090E2 5642                       		addq.w	#3,d2
000090E4 3342 000C                  		move.w	d2,obY(a1)
000090E8 5428 0024                  		addq.b	#2,obRoutine(a0)
000090EC                            
000090EC                            loc_74AE:
000090EC 0829 0003 0022             		btst	#3,obStatus(a1)
000090F2 6700                       		beq.s	loc_74DC
000090F4 7000                       		moveq	#0,d0
000090F6 1029 003D                  		move.b	$3D(a1),d0
000090FA ED48                       		lsl.w	#6,d0
000090FC 0680 00FF D000             		addi.l	#v_objspace&$FFFFFF,d0
00009102 2440                       		movea.l	d0,a2
00009104 08AA 0003 0022             		bclr	#3,obStatus(a2)
0000910A 422A 0025                  		clr.b	ob2ndRout(a2)
0000910E 0C2A 0004 0024             		cmpi.b	#4,obRoutine(a2)
00009114 6600                       		bne.s	loc_74DC
00009116 552A 0024                  		subq.b	#2,obRoutine(a2)
0000911A                            
0000911A                            loc_74DC:
0000911A 3008                       		move.w	a0,d0
0000911C 0440 D000                  		subi.w	#-$3000,d0
00009120 EC48                       		lsr.w	#6,d0
00009122 0240 007F                  		andi.w	#$7F,d0
00009126 1340 003D                  		move.b	d0,$3D(a1)
0000912A 137C 0000 0026             		move.b	#0,obAngle(a1)
00009130 337C 0000 0012             		move.w	#0,obVelY(a1)
00009136 3369 0010 0020             		move.w	obVelX(a1),obInertia(a1)
0000913C 0829 0001 0022             		btst	#1,obStatus(a1)
00009142 6700                       		beq.s	loc_7512
00009144 2F08                       		move.l	a0,-(sp)
00009146 2049                       		movea.l	a1,a0
00009148 4EB9 0000 0000             		jsr	(Sonic_ResetOnFloor).l
0000914E 205F                       		movea.l	(sp)+,a0
00009150                            
00009150                            loc_7512:
00009150 08E9 0003 0022             		bset	#3,obStatus(a1)
00009156 08E8 0003 0022             		bset	#3,obStatus(a0)
0000915C                            
0000915C                            Plat_Exit:
0000915C 4E75                       		rts	
0000915E                            ; End of function PlatformObject
0000915E                            
0000915E                            ; ---------------------------------------------------------------------------
0000915E                            ; Sloped platform subroutine (GHZ collapsing ledges and	SLZ seesaws)
0000915E                            ; ---------------------------------------------------------------------------
0000915E                            
0000915E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000915E                            
0000915E                            
0000915E                            SlopeObject:
0000915E 43F8 D000                  		lea	(v_player).w,a1
00009162 4A69 0012                  		tst.w	obVelY(a1)
00009166 6B00 FFF4                  		bmi.w	Plat_Exit
0000916A 3029 0008                  		move.w	obX(a1),d0
0000916E 9068 0008                  		sub.w	obX(a0),d0
00009172 D041                       		add.w	d1,d0
00009174 6BE6                       		bmi.s	Plat_Exit
00009176 D241                       		add.w	d1,d1
00009178 B041                       		cmp.w	d1,d0
0000917A 64E0                       		bhs.s	Plat_Exit
0000917C 0828 0000 0001             		btst	#0,obRender(a0)
00009182 6700                       		beq.s	loc_754A
00009184 4640                       		not.w	d0
00009186 D041                       		add.w	d1,d0
00009188                            
00009188                            loc_754A:
00009188 E248                       		lsr.w	#1,d0
0000918A 7600                       		moveq	#0,d3
0000918C 1632 0000                  		move.b	(a2,d0.w),d3
00009190 3028 000C                  		move.w	obY(a0),d0
00009194 9043                       		sub.w	d3,d0
00009196 6000 FF1A                  		bra.w	Platform3
0000919A                            ; End of function SlopeObject
0000919A                            
0000919A                            
0000919A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000919A                            
0000919A                            
0000919A                            Swing_Solid:
0000919A 43F8 D000                  		lea	(v_player).w,a1
0000919E 4A69 0012                  		tst.w	obVelY(a1)
000091A2 6B00 FFB8                  		bmi.w	Plat_Exit
000091A6 3029 0008                  		move.w	obX(a1),d0
000091AA 9068 0008                  		sub.w	obX(a0),d0
000091AE D041                       		add.w	d1,d0
000091B0 6B00 FFAA                  		bmi.w	Plat_Exit
000091B4 D241                       		add.w	d1,d1
000091B6 B041                       		cmp.w	d1,d0
000091B8 6400 FFA2                  		bhs.w	Plat_Exit
000091BC 3028 000C                  		move.w	obY(a0),d0
000091C0 9043                       		sub.w	d3,d0
000091C2 6000 FEEE                  		bra.w	Platform3
000091C6                            ; End of function Obj15_Solid
000091C6                            
000091C6                            ; ===========================================================================
000091C6                            
000091C6                            		include	"_incObj\11 Bridge (part 2).asm"
000091C6                            
000091C6                            Bri_Platform:	; Routine 4
000091C6 6100                       		bsr.s	Bri_WalkOff
000091C8 6100 0000                  		bsr.w	DisplaySprite
000091CC 6000 0000                  		bra.w	Bri_ChkDel
000091D0                            
000091D0                            ; ---------------------------------------------------------------------------
000091D0                            ; Subroutine allowing Sonic to walk off a bridge
000091D0                            ; ---------------------------------------------------------------------------
000091D0                            
000091D0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000091D0                            
000091D0                            
000091D0                            Bri_WalkOff:
000091D0 7200                       		moveq	#0,d1
000091D2 1228 0028                  		move.b	obSubtype(a0),d1
000091D6 E749                       		lsl.w	#3,d1
000091D8 3401                       		move.w	d1,d2
000091DA 5041                       		addq.w	#8,d1
000091DC 6100                       		bsr.s	ExitPlatform2
000091DE 6400                       		bcc.s	locret_75BE
000091E0 E848                       		lsr.w	#4,d0
000091E2 1140 003F                  		move.b	d0,$3F(a0)
000091E6 1028 003E                  		move.b	$3E(a0),d0
000091EA 0C00 0040                  		cmpi.b	#$40,d0
000091EE 6700                       		beq.s	loc_75B6
000091F0 5828 003E                  		addq.b	#4,$3E(a0)
000091F4                            
000091F4                            loc_75B6:
000091F4 6100 0000                  		bsr.w	Bri_Bend
000091F8 6100 0000                  		bsr.w	Bri_MoveSonic
000091FC                            
000091FC                            locret_75BE:
000091FC 4E75                       		rts	
000091FE                            ; End of function Bri_WalkOff
000091FE                            ; End of function Bri_WalkOff
000091FE                            
000091FE                            ; ---------------------------------------------------------------------------
000091FE                            ; Subroutine allowing Sonic to walk or jump off	a platform
000091FE                            ; ---------------------------------------------------------------------------
000091FE                            
000091FE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000091FE                            
000091FE                            
000091FE                            ExitPlatform:
000091FE 3401                       		move.w	d1,d2
00009200                            
00009200                            ExitPlatform2:
00009200 D442                       		add.w	d2,d2
00009202 43F8 D000                  		lea	(v_player).w,a1
00009206 0829 0001 0022             		btst	#1,obStatus(a1)
0000920C 6600                       		bne.s	loc_75E0
0000920E 3029 0008                  		move.w	obX(a1),d0
00009212 9068 0008                  		sub.w	obX(a0),d0
00009216 D041                       		add.w	d1,d0
00009218 6B00                       		bmi.s	loc_75E0
0000921A B042                       		cmp.w	d2,d0
0000921C 6500                       		blo.s	locret_75F2
0000921E                            
0000921E                            loc_75E0:
0000921E 08A9 0003 0022             		bclr	#3,obStatus(a1)
00009224 117C 0002 0024             		move.b	#2,obRoutine(a0)
0000922A 08A8 0003 0022             		bclr	#3,obStatus(a0)
00009230                            
00009230                            locret_75F2:
00009230 4E75                       		rts	
00009232                            ; End of function ExitPlatform
00009232                            
00009232                            		include	"_incObj\11 Bridge (part 3).asm"
00009232                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009232                            
00009232                            
00009232                            Bri_MoveSonic:
00009232 7000                       		moveq	#0,d0
00009234 1028 003F                  		move.b	$3F(a0),d0
00009238 1030 0029                  		move.b	$29(a0,d0.w),d0
0000923C ED48                       		lsl.w	#6,d0
0000923E 0680 00FF D000             		addi.l	#v_objspace&$FFFFFF,d0
00009244 2440                       		movea.l	d0,a2
00009246 43F8 D000                  		lea	(v_player).w,a1
0000924A 302A 000C                  		move.w	obY(a2),d0
0000924E 5140                       		subq.w	#8,d0
00009250 7200                       		moveq	#0,d1
00009252 1229 0016                  		move.b	obHeight(a1),d1
00009256 9041                       		sub.w	d1,d0
00009258 3340 000C                  		move.w	d0,obY(a1)	; change Sonic's position on y-axis
0000925C 4E75                       		rts	
0000925E                            ; End of function Bri_MoveSonic
0000925E                            
0000925E                            
0000925E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000925E                            
0000925E                            
0000925E                            Bri_Bend:
0000925E 1028 003E                  		move.b	$3E(a0),d0
00009262 6100 A7D2                  		bsr.w	CalcSine
00009266 3800                       		move.w	d0,d4
00009268 49F9 0000 0000             		lea	(Obj11_BendData2).l,a4
0000926E 7000                       		moveq	#0,d0
00009270 1028 0028                  		move.b	obSubtype(a0),d0
00009274 E948                       		lsl.w	#4,d0
00009276 7600                       		moveq	#0,d3
00009278 1628 003F                  		move.b	$3F(a0),d3
0000927C 3403                       		move.w	d3,d2
0000927E D640                       		add.w	d0,d3
00009280 7A00                       		moveq	#0,d5
00009282 4BF9 0000 0000             		lea	(Obj11_BendData).l,a5
00009288 1A35 3000                  		move.b	(a5,d3.w),d5
0000928C 0243 000F                  		andi.w	#$F,d3
00009290 E94B                       		lsl.w	#4,d3
00009292 47F4 3000                  		lea	(a4,d3.w),a3
00009296 45E8 0029                  		lea	$29(a0),a2
0000929A                            
0000929A                            loc_765C:
0000929A 7000                       		moveq	#0,d0
0000929C 101A                       		move.b	(a2)+,d0
0000929E ED48                       		lsl.w	#6,d0
000092A0 0680 00FF D000             		addi.l	#v_objspace&$FFFFFF,d0
000092A6 2240                       		movea.l	d0,a1
000092A8 7000                       		moveq	#0,d0
000092AA 101B                       		move.b	(a3)+,d0
000092AC 5240                       		addq.w	#1,d0
000092AE C0C5                       		mulu.w	d5,d0
000092B0 C0C4                       		mulu.w	d4,d0
000092B2 4840                       		swap	d0
000092B4 D069 003C                  		add.w	$3C(a1),d0
000092B8 3340 000C                  		move.w	d0,obY(a1)
000092BC 51CA FFDC                  		dbf	d2,loc_765C
000092C0 7000                       		moveq	#0,d0
000092C2 1028 0028                  		move.b	obSubtype(a0),d0
000092C6 7600                       		moveq	#0,d3
000092C8 1628 003F                  		move.b	$3F(a0),d3
000092CC 5203                       		addq.b	#1,d3
000092CE 9600                       		sub.b	d0,d3
000092D0 4403                       		neg.b	d3
000092D2 6B00                       		bmi.s	locret_76CA
000092D4 3403                       		move.w	d3,d2
000092D6 E94B                       		lsl.w	#4,d3
000092D8 47F4 3000                  		lea	(a4,d3.w),a3
000092DC D6C2                       		adda.w	d2,a3
000092DE 5342                       		subq.w	#1,d2
000092E0 6500                       		bcs.s	locret_76CA
000092E2                            
000092E2                            loc_76A4:
000092E2 7000                       		moveq	#0,d0
000092E4 101A                       		move.b	(a2)+,d0
000092E6 ED48                       		lsl.w	#6,d0
000092E8 0680 00FF D000             		addi.l	#v_objspace&$FFFFFF,d0
000092EE 2240                       		movea.l	d0,a1
000092F0 7000                       		moveq	#0,d0
000092F2 1023                       		move.b	-(a3),d0
000092F4 5240                       		addq.w	#1,d0
000092F6 C0C5                       		mulu.w	d5,d0
000092F8 C0C4                       		mulu.w	d4,d0
000092FA 4840                       		swap	d0
000092FC D069 003C                  		add.w	$3C(a1),d0
00009300 3340 000C                  		move.w	d0,obY(a1)
00009304 51CA FFDC                  		dbf	d2,loc_76A4
00009308                            
00009308                            locret_76CA:
00009308 4E75                       		rts	
0000930A                            ; End of function Bri_Bend
0000930A                            
0000930A                            ; ===========================================================================
0000930A                            ; ---------------------------------------------------------------------------
0000930A                            ; GHZ bridge-bending data
0000930A                            ; (Defines how the bridge bends	when Sonic walks across	it)
0000930A                            ; ---------------------------------------------------------------------------
0000930A                            Obj11_BendData:	incbin	"misc\ghzbend1.bin"
0000941A                            		even
0000941A                            Obj11_BendData2:incbin	"misc\ghzbend2.bin"
0000951A                            		even
0000951A                            
0000951A                            ; ===========================================================================
0000951A                            
0000951A                            Bri_ChkDel:
00009538 4E75                       		rts	
0000953A                            ; ===========================================================================
0000953A                            
0000953A                            @deletebridge:
0000953A 7400                       		moveq	#0,d2
0000953C 45E8 0028                  		lea	obSubtype(a0),a2 ; load bridge length
00009540 141A                       		move.b	(a2)+,d2	; move bridge length to	d2
00009542 5302                       		subq.b	#1,d2		; subtract 1
00009544 6500                       		bcs.s	@delparent
00009546                            
00009546                            	@loop:
00009546 7000                       		moveq	#0,d0
00009548 101A                       		move.b	(a2)+,d0
0000954A ED48                       		lsl.w	#6,d0
0000954C 0680 00FF D000             		addi.l	#v_objspace&$FFFFFF,d0
00009552 2240                       		movea.l	d0,a1
00009554 B048                       		cmp.w	a0,d0
00009556 6700                       		beq.s	@skipdel
00009558 6100 0000                  		bsr.w	DeleteChild
0000955C                            
0000955C                            	@skipdel:
0000955C 51CA FFE8                  		dbf	d2,@loop ; repeat d2 times (bridge length)
00009560                            
00009560                            @delparent:
00009560 6100 0000                  		bsr.w	DeleteObject
00009564 4E75                       		rts	
00009566                            ; ===========================================================================
00009566                            
00009566                            Bri_Delete:	; Routine 6, 8
00009566 6100 0000                  		bsr.w	DeleteObject
0000956A 4E75                       		rts	
0000956C                            ; ===========================================================================
0000956C                            
0000956C                            Bri_Display:	; Routine $A
0000956C 6100 0000                  		bsr.w	DisplaySprite
00009570 4E75                       		rts	
00009570 4E75                       		rts	
00009572                            Map_Bri:	include	"_maps\Bridge.asm"
00009572                            ; ---------------------------------------------------------------------------
00009572                            ; Sprite mappings - GHZ	bridge
00009572                            ; ---------------------------------------------------------------------------
00009572                            Map_Bri_internal:
00009572 0000                       		dc.w M_Bri_Log-Map_Bri_internal
00009574 0000                       		dc.w M_Bri_Stump-Map_Bri_internal
00009576 0000                       		dc.w M_Bri_Rope-Map_Bri_internal
00009578 01                         M_Bri_Log:	dc.b 1
00009579 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8	; log
0000957E 02                         M_Bri_Stump:	dc.b 2
0000957F F804 0004 F0               		dc.b $F8, 4, 0,	4, $F0	; stump & rope
00009584 000C 0006 F0               		dc.b 0,	$C, 0, 6, $F0
00009589 01                         M_Bri_Rope:	dc.b 1
0000958A FC04 0008 F8               		dc.b $FC, 4, 0,	8, $F8	; rope only
00009590 00                         		even
00009590 00                         		even
00009590                            
00009590                            		include	"_incObj\15 Swinging Platforms (part 1).asm"
00009590                            ; ---------------------------------------------------------------------------
00009590                            ; Object 15 - swinging platforms (GHZ, MZ, SLZ)
00009590                            ;	    - spiked ball on a chain (SBZ)
00009590                            ; ---------------------------------------------------------------------------
00009590                            
00009590                            SwingingPlatform:
00009590 7000                       		moveq	#0,d0
00009592 1028 0024                  		move.b	obRoutine(a0),d0
00009596 323B 0000                  		move.w	Swing_Index(pc,d0.w),d1
0000959A 4EFB 1000                  		jmp	Swing_Index(pc,d1.w)
0000959E                            ; ===========================================================================
0000959E 0000 0000                  Swing_Index:	dc.w Swing_Main-Swing_Index, Swing_SetSolid-Swing_Index
000095A2 0000 0000                  		dc.w Swing_Action2-Swing_Index,	Swing_Delete-Swing_Index
000095A6 0000 0000                  		dc.w Swing_Delete-Swing_Index, Swing_Display-Swing_Index
000095AA 0000                       		dc.w Swing_Action-Swing_Index
000095AC                            
000095AC =0000003A                  swing_origX:	equ $3A		; original x-axis position
000095AC =00000038                  swing_origY:	equ $38		; original y-axis position
000095AC                            ; ===========================================================================
000095AC                            
000095AC                            Swing_Main:	; Routine 0
000095AC 5428 0024                  		addq.b	#2,obRoutine(a0)
000095B0 217C 0000 0000 0004        		move.l	#Map_Swing_GHZ,obMap(a0) ; GHZ and MZ specific code
000095B8 317C 4380 0002             		move.w	#$4380,obGfx(a0)
000095BE 117C 0004 0001             		move.b	#4,obRender(a0)
000095C4 317C 0180 0018             		move.w	#$180,obPriority(a0)
000095CA 117C 0018 0014             		move.b	#$18,obActWid(a0)
000095D0 117C 0008 0016             		move.b	#8,obHeight(a0)
000095D6 3168 000C 0038             		move.w	obY(a0),swing_origY(a0)
000095DC 3168 0008 003A             		move.w	obX(a0),swing_origX(a0)
000095E2 0C38 0003 FE10             		cmpi.b	#id_SLZ,(v_zone).w ; check if level is SLZ
000095E8 6600                       		bne.s	@notSLZ
000095EA                            
000095EA 217C 0000 0000 0004        		move.l	#Map_Swing_SLZ,obMap(a0) ; SLZ specific code
000095F2 317C 43DC 0002             		move.w	#$43DC,obGfx(a0)
000095F8 117C 0020 0014             		move.b	#$20,obActWid(a0)
000095FE 117C 0010 0016             		move.b	#$10,obHeight(a0)
00009604 117C 0099 0020             		move.b	#$99,obColType(a0)
0000960A                            
0000960A                            	@notSLZ:
0000960A 0C38 0005 FE10             		cmpi.b	#id_SBZ,(v_zone).w ; check if level is SBZ
00009610 6600                       		bne.s	@length
00009612                            
00009612 217C 0000 0000 0004        		move.l	#Map_BBall,obMap(a0) ; SBZ specific code
0000961A 317C 0391 0002             		move.w	#$391,obGfx(a0)
00009620 117C 0018 0014             		move.b	#$18,obActWid(a0)
00009626 117C 0018 0016             		move.b	#$18,obHeight(a0)
0000962C 117C 0086 0020             		move.b	#$86,obColType(a0)
00009632 117C 000C 0024             		move.b	#$C,obRoutine(a0) ; goto Swing_Action next
00009638                            
00009638                            @length:
00009638 1810                       		move.b	0(a0),d4
0000963A 7200                       		moveq	#0,d1
0000963C 45E8 0028                  		lea	obSubtype(a0),a2 ; move chain length to a2
00009640 1212                       		move.b	(a2),d1		; move a2 to d1
00009642 3F01                       		move.w	d1,-(sp)
00009644 0241 000F                  		andi.w	#$F,d1
00009648 14FC 0000                  		move.b	#0,(a2)+
0000964C 3601                       		move.w	d1,d3
0000964E E94B                       		lsl.w	#4,d3
00009650 5003                       		addq.b	#8,d3
00009652 1143 003C                  		move.b	d3,$3C(a0)
00009656 5103                       		subq.b	#8,d3
00009658 4A28 001A                  		tst.b	obFrame(a0)
0000965C 6700                       		beq.s	@makechain
0000965E 5003                       		addq.b	#8,d3
00009660 5341                       		subq.w	#1,d1
00009662                            
00009662                            @makechain:
00009662 6100 0000                  		bsr.w	FindFreeObj
00009666 6600                       		bne.s	@fail
00009668 5228 0028                  		addq.b	#1,obSubtype(a0)
0000966C 3A09                       		move.w	a1,d5
0000966E 0445 D000                  		subi.w	#$D000,d5
00009672 EC4D                       		lsr.w	#6,d5
00009674 0245 007F                  		andi.w	#$7F,d5
00009678 14C5                       		move.b	d5,(a2)+
0000967A 137C 000A 0024             		move.b	#$A,obRoutine(a1) ; goto Swing_Display next
00009680 1284                       		move.b	d4,0(a1)	; load swinging	object
00009682 2368 0004 0004             		move.l	obMap(a0),obMap(a1)
00009688 3368 0002 0002             		move.w	obGfx(a0),obGfx(a1)
0000968E 08A9 0006 0002             		bclr	#6,obGfx(a1)
00009694 137C 0004 0001             		move.b	#4,obRender(a1)
0000969A 337C 0200 0018             		move.w	#$200,obPriority(a1)
000096A0 137C 0008 0014             		move.b	#8,obActWid(a1)
000096A6 137C 0001 001A             		move.b	#1,obFrame(a1)
000096AC 1343 003C                  		move.b	d3,$3C(a1)
000096B0 0403 0010                  		subi.b	#$10,d3
000096B4 6400                       		bcc.s	@notanchor
000096B6 137C 0002 001A             		move.b	#2,obFrame(a1)
000096BC 337C 0180 0018             		move.w	#$180,obPriority(a1)
000096C2 08E9 0006 0002             		bset	#6,obGfx(a1)
000096C8                            
000096C8                            	@notanchor:
000096C8 51C9 FF98                  		dbf	d1,@makechain ; repeat d1 times (chain length)
000096CC                            
000096CC                            	@fail:
000096CC 3A08                       		move.w	a0,d5
000096CE 0445 D000                  		subi.w	#$D000,d5
000096D2 EC4D                       		lsr.w	#6,d5
000096D4 0245 007F                  		andi.w	#$7F,d5
000096D8 14C5                       		move.b	d5,(a2)+
000096DA 317C 4080 0026             		move.w	#$4080,obAngle(a0)
000096E0 317C FE00 003E             		move.w	#-$200,$3E(a0)
000096E6 321F                       		move.w	(sp)+,d1
000096E8 0801 0004                  		btst	#4,d1		; is object type $1X ?
000096EC 6700                       		beq.s	@not1X	; if not, branch
000096EE 217C 0000 0000 0004        		move.l	#Map_GBall,obMap(a0) ; use GHZ ball mappings
000096F6 317C 43AA 0002             		move.w	#$43AA,obGfx(a0)
000096FC 117C 0001 001A             		move.b	#1,obFrame(a0)
00009702 317C 0100 0018             		move.w	#$100,obPriority(a0)
00009708 117C 0081 0020             		move.b	#$81,obColType(a0) ; make object hurt when touched
0000970E                            
0000970E                            	@not1X:
0000970E 0C38 0005 FE10             		cmpi.b	#id_SBZ,(v_zone).w ; is zone SBZ?
00009714 6700                       		beq.s	Swing_Action	; if yes, branch
00009716                            
00009716                            Swing_SetSolid:	; Routine 2
00009716 7200                       		moveq	#0,d1
00009718 1228 0014                  		move.b	obActWid(a0),d1
0000971C 7600                       		moveq	#0,d3
0000971E 1628 0016                  		move.b	obHeight(a0),d3
00009722 6100 FA76                  		bsr.w	Swing_Solid
00009726                            
00009726                            Swing_Action:	; Routine $C
00009726 6100 0000                  		bsr.w	Swing_Move
0000972A 6100 0000                  		bsr.w	DisplaySprite
0000972E 6000 0000                  		bra.w	Swing_ChkDel
00009732                            ; ===========================================================================
00009732                            
00009732                            Swing_Action2:	; Routine 4
00009732 7200                       		moveq	#0,d1
00009734 1228 0014                  		move.b	obActWid(a0),d1
00009738 6100 FAC4                  		bsr.w	ExitPlatform
0000973C 3F28 0008                  		move.w	obX(a0),-(sp)
00009740 6100 0000                  		bsr.w	Swing_Move
00009744 341F                       		move.w	(sp)+,d2
00009746 7600                       		moveq	#0,d3
00009748 1628 0016                  		move.b	obHeight(a0),d3
0000974C 5203                       		addq.b	#1,d3
0000974E 6100 0000                  		bsr.w	MvSonicOnPtfm
00009752 6100 0000                  		bsr.w	DisplaySprite
00009756 6000 0000                  		bra.w	Swing_ChkDel
0000975A                            
0000975A 4E75                       		rts
0000975A 4E75                       		rts
0000975C                            
0000975C                            ; ---------------------------------------------------------------------------
0000975C                            ; Subroutine to	change Sonic's position with a platform
0000975C                            ; ---------------------------------------------------------------------------
0000975C                            
0000975C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000975C                            
0000975C                            
0000975C                            MvSonicOnPtfm:
0000975C 43F8 D000                  		lea	(v_player).w,a1
00009760 3028 000C                  		move.w	obY(a0),d0
00009764 9043                       		sub.w	d3,d0
00009766 6000                       		bra.s	MvSonic2
00009768                            ; End of function MvSonicOnPtfm
00009768                            
00009768                            ; ---------------------------------------------------------------------------
00009768                            ; Subroutine to	change Sonic's position with a platform
00009768                            ; ---------------------------------------------------------------------------
00009768                            
00009768                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009768                            
00009768                            
00009768                            MvSonicOnPtfm2:
00009768 43F8 D000                  		lea	(v_player).w,a1
0000976C 3028 000C                  		move.w	obY(a0),d0
00009770 0440 0009                  		subi.w	#9,d0
00009774                            
00009774                            MvSonic2:
00009774 4A38 F7C8                  		tst.b	(f_lockmulti).w
00009778 6B00                       		bmi.s	locret_7B62
0000977A 0C38 0006 D024             		cmpi.b	#6,(v_player+obRoutine).w
00009780 6400                       		bhs.s	locret_7B62
00009782 4A78 FE08                  		tst.w	(v_debuguse).w
00009786 6600                       		bne.s	locret_7B62
00009788 7200                       		moveq	#0,d1
0000978A 1229 0016                  		move.b	obHeight(a1),d1
0000978E 9041                       		sub.w	d1,d0
00009790 3340 000C                  		move.w	d0,obY(a1)
00009794 9468 0008                  		sub.w	obX(a0),d2
00009798 9569 0008                  		sub.w	d2,obX(a1)
0000979C                            
0000979C                            locret_7B62:
0000979C 4E75                       		rts	
0000979E                            ; End of function MvSonicOnPtfm2
0000979E                            
0000979E                            		include	"_incObj\15 Swinging Platforms (part 2).asm"
0000979E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000979E                            
0000979E                            
0000979E                            Swing_Move:
0000979E 1038 FE78                  		move.b	(v_oscillate+$1A).w,d0
000097A2 323C 0080                  		move.w	#$80,d1
000097A6 0828 0000 0022             		btst	#0,obStatus(a0)
000097AC 6700                       		beq.s	loc_7B78
000097AE 4440                       		neg.w	d0
000097B0 D041                       		add.w	d1,d0
000097B2                            
000097B2                            loc_7B78:
000097B2 6000                       		bra.s	Swing_Move2
000097B4                            ; End of function Swing_Move
000097B4                            
000097B4                            
000097B4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000097B4                            
000097B4                            
000097B4                            Obj48_Move:
000097B4 4A28 003D                  		tst.b	$3D(a0)
000097B8 6600                       		bne.s	loc_7B9C
000097BA 3028 003E                  		move.w	$3E(a0),d0
000097BE 5040                       		addq.w	#8,d0
000097C0 3140 003E                  		move.w	d0,$3E(a0)
000097C4 D168 0026                  		add.w	d0,obAngle(a0)
000097C8 0C40 0200                  		cmpi.w	#$200,d0
000097CC 6600                       		bne.s	loc_7BB6
000097CE 117C 0001 003D             		move.b	#1,$3D(a0)
000097D4 6000                       		bra.s	loc_7BB6
000097D6                            ; ===========================================================================
000097D6                            
000097D6                            loc_7B9C:
000097D6 3028 003E                  		move.w	$3E(a0),d0
000097DA 5140                       		subq.w	#8,d0
000097DC 3140 003E                  		move.w	d0,$3E(a0)
000097E0 D168 0026                  		add.w	d0,obAngle(a0)
000097E4 0C40 FE00                  		cmpi.w	#-$200,d0
000097E8 6600                       		bne.s	loc_7BB6
000097EA 117C 0000 003D             		move.b	#0,$3D(a0)
000097F0                            
000097F0                            loc_7BB6:
000097F0 1028 0026                  		move.b	obAngle(a0),d0
000097F4                            ; End of function Obj48_Move
000097F4                            
000097F4                            
000097F4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000097F4                            
000097F4                            
000097F4                            Swing_Move2:
000097F4 6100 A240                  		bsr.w	CalcSine
000097F8 3428 0038                  		move.w	$38(a0),d2
000097FC 3628 003A                  		move.w	$3A(a0),d3
00009800 45E8 0028                  		lea	obSubtype(a0),a2
00009804 7C00                       		moveq	#0,d6
00009806 1C1A                       		move.b	(a2)+,d6
00009808                            
00009808                            loc_7BCE:
00009808 7800                       		moveq	#0,d4
0000980A 181A                       		move.b	(a2)+,d4
0000980C ED4C                       		lsl.w	#6,d4
0000980E 0684 00FF D000             		addi.l	#v_objspace&$FFFFFF,d4
00009814 2244                       		movea.l	d4,a1
00009816 7800                       		moveq	#0,d4
00009818 1829 003C                  		move.b	$3C(a1),d4
0000981C 2A04                       		move.l	d4,d5
0000981E C9C0                       		muls.w	d0,d4
00009820 E084                       		asr.l	#8,d4
00009822 CBC1                       		muls.w	d1,d5
00009824 E085                       		asr.l	#8,d5
00009826 D842                       		add.w	d2,d4
00009828 DA43                       		add.w	d3,d5
0000982A 3344 000C                  		move.w	d4,obY(a1)
0000982E 3345 0008                  		move.w	d5,obX(a1)
00009832 51CE FFD4                  		dbf	d6,loc_7BCE
00009836 4E75                       		rts	
00009838                            ; End of function Swing_Move2
00009838                            
00009838                            ; ===========================================================================
00009838                            
00009838                            Swing_ChkDel:
00009856 4E75                       		rts	
00009858                            ; ===========================================================================
00009858                            
00009858                            Swing_DelAll:
00009858 7400                       		moveq	#0,d2
0000985A 45E8 0028                  		lea	obSubtype(a0),a2
0000985E 141A                       		move.b	(a2)+,d2
00009860                            
00009860                            Swing_DelLoop:
00009860 7000                       		moveq	#0,d0
00009862 101A                       		move.b	(a2)+,d0
00009864 ED48                       		lsl.w	#6,d0
00009866 0680 00FF D000             		addi.l	#v_objspace&$FFFFFF,d0
0000986C 2240                       		movea.l	d0,a1
0000986E 6100 0000                  		bsr.w	DeleteChild
00009872 51CA FFEC                  		dbf	d2,Swing_DelLoop ; repeat for length of	chain
00009876 4E75                       		rts	
00009878                            ; ===========================================================================
00009878                            
00009878                            Swing_Delete:	; Routine 6, 8
00009878 6100 0000                  		bsr.w	DeleteObject
0000987C 4E75                       		rts	
0000987E                            ; ===========================================================================
0000987E                            
0000987E                            Swing_Display:	; Routine $A
0000987E 6000 0000                  		bra.w	DisplaySprite
0000987E 6000 0000                  		bra.w	DisplaySprite
00009882                            Map_Swing_GHZ:	include	"_maps\Swinging Platforms (GHZ).asm"
00009882                            ; ---------------------------------------------------------------------------
00009882                            ; Sprite mappings - GHZ	and MZ swinging	platforms
00009882                            ; ---------------------------------------------------------------------------
00009882                            Map_Swing_GHZ_internal:
00009882 0000                       		dc.w @block-Map_Swing_GHZ_internal
00009884 0000                       		dc.w @chain-Map_Swing_GHZ_internal
00009886 0000                       		dc.w @anchor-Map_Swing_GHZ_internal
00009888 02                         @block:		dc.b 2
00009889 F809 0004 E8               		dc.b $F8, 9, 0,	4, $E8
0000988E F809 0004 00               		dc.b $F8, 9, 0,	4, 0
00009893 01                         @chain:		dc.b 1
00009894 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00009899 01                         @anchor:	dc.b 1
0000989A F805 000A F8               		dc.b $F8, 5, 0,	$A, $F8
000098A0 00                         		even
000098A0 00                         		even
000098A0                            Map_Swing_SLZ:	include	"_maps\Swinging Platforms (SLZ).asm"
000098A0                            ; ---------------------------------------------------------------------------
000098A0                            ; Sprite mappings - SLZ	swinging platforms
000098A0                            ; ---------------------------------------------------------------------------
000098A0                            Map_Swing_SLZ_internal:
000098A0 0000                       		dc.w @block-Map_Swing_SLZ_internal
000098A2 0000                       		dc.w @chain-Map_Swing_SLZ_internal
000098A4 0000                       		dc.w @anchor-Map_Swing_SLZ_internal
000098A6 08                         @block:		dc.b 8
000098A7 F00F 0004 E0               		dc.b $F0, $F, 0, 4, $E0
000098AC F00F 0804 00               		dc.b $F0, $F, 8, 4, 0
000098B1 F005 0014 D0               		dc.b $F0, 5, 0,	$14, $D0
000098B6 F005 0814 20               		dc.b $F0, 5, 8,	$14, $20
000098BB 1004 0018 E0               		dc.b $10, 4, 0,	$18, $E0
000098C0 1004 0818 10               		dc.b $10, 4, 8,	$18, $10
000098C5 1001 001A F8               		dc.b $10, 1, 0,	$1A, $F8
000098CA 1001 081A 00               		dc.b $10, 1, 8,	$1A, 0
000098CF 01                         @chain:		dc.b 1
000098D0 F805 4000 F8               		dc.b $F8, 5, $40, 0, $F8
000098D5 01                         @anchor:	dc.b 1
000098D6 F805 001C F8               		dc.b $F8, 5, 0,	$1C, $F8
000098DC 00                         		even
000098DC 00                         		even
000098DC                            		include	"_incObj\17 Spiked Pole Helix.asm"
000098DC                            ; ---------------------------------------------------------------------------
000098DC                            ; Object 17 - helix of spikes on a pole	(GHZ)
000098DC                            ; ---------------------------------------------------------------------------
000098DC                            
000098DC                            Helix:
000098DC 7000                       		moveq	#0,d0
000098DE 1028 0024                  		move.b	obRoutine(a0),d0
000098E2 323B 0000                  		move.w	Hel_Index(pc,d0.w),d1
000098E6 4EFB 1000                  		jmp	Hel_Index(pc,d1.w)
000098EA                            ; ===========================================================================
000098EA 0000                       Hel_Index:	dc.w Hel_Main-Hel_Index
000098EC 0000                       		dc.w Hel_Action-Hel_Index
000098EE 0000                       		dc.w Hel_Action-Hel_Index
000098F0 0000                       		dc.w Hel_Delete-Hel_Index
000098F2 0000                       		dc.w Hel_Display-Hel_Index
000098F4                            
000098F4 =0000003E                  hel_frame:	equ $3E		; start frame (different for each spike)
000098F4                            
000098F4                            ;		$29-38 are used for child object addresses
000098F4                            ; ===========================================================================
000098F4                            
000098F4                            Hel_Main:	; Routine 0
000098F4 5428 0024                  		addq.b	#2,obRoutine(a0)
000098F8 217C 0000 0000 0004        		move.l	#Map_Hel,obMap(a0)
00009900 317C 4398 0002             		move.w	#$4398,obGfx(a0)
00009906 117C 0007 0022             		move.b	#7,obStatus(a0)
0000990C 117C 0004 0001             		move.b	#4,obRender(a0)
00009912 317C 0180 0018             		move.w	#$180,obPriority(a0)
00009918 117C 0008 0014             		move.b	#8,obActWid(a0)
0000991E 3428 000C                  		move.w	obY(a0),d2
00009922 3628 0008                  		move.w	obX(a0),d3
00009926 1810                       		move.b	0(a0),d4
00009928 45E8 0028                  		lea	obSubtype(a0),a2 ; move helix length to a2
0000992C 7200                       		moveq	#0,d1
0000992E 1212                       		move.b	(a2),d1		; move helix length to d1
00009930 14FC 0000                  		move.b	#0,(a2)+	; clear subtype
00009934 3001                       		move.w	d1,d0
00009936 E248                       		lsr.w	#1,d0
00009938 E948                       		lsl.w	#4,d0
0000993A 9640                       		sub.w	d0,d3		; d3 is x-axis position of leftmost spike
0000993C 5501                       		subq.b	#2,d1
0000993E 6500                       		bcs.s	Hel_Action	; skip to action if length is only 1
00009940 7C00                       		moveq	#0,d6
00009942                            
00009942                            Hel_Build:
00009942 6100 0000                  		bsr.w	FindFreeObj
00009946 6600                       		bne.s	Hel_Action
00009948 5228 0028                  		addq.b	#1,obSubtype(a0)
0000994C 3A09                       		move.w	a1,d5
0000994E 0445 D000                  		subi.w	#$D000,d5
00009952 EC4D                       		lsr.w	#6,d5
00009954 0245 007F                  		andi.w	#$7F,d5
00009958 14C5                       		move.b	d5,(a2)+	; copy child address to parent RAM
0000995A 137C 0008 0024             		move.b	#8,obRoutine(a1)
00009960 1284                       		move.b	d4,0(a1)
00009962 3342 000C                  		move.w	d2,ObY(a1)
00009966 3343 0008                  		move.w	d3,obX(a1)
0000996A 2368 0004 0004             		move.l	obMap(a0),obMap(a1)
00009970 337C 4398 0002             		move.w	#$4398,obGfx(a1)
00009976 137C 0004 0001             		move.b	#4,obRender(a1)
0000997C 337C 0180 0018             		move.w	#$180,obPriority(a1)
00009982 137C 0008 0014             		move.b	#8,obActWid(a1)
00009988 1346 003E                  		move.b	d6,hel_frame(a1)
0000998C 5206                       		addq.b	#1,d6
0000998E 0206 0007                  		andi.b	#7,d6
00009992 0643 0010                  		addi.w	#$10,d3
00009996 B668 0008                  		cmp.w	obX(a0),d3	; is this spike in the centre?
0000999A 6600                       		bne.s	Hel_NotCentre	; if not, branch
0000999C                            
0000999C 1146 003E                  		move.b	d6,hel_frame(a0) ; set parent spike frame
000099A0 5206                       		addq.b	#1,d6
000099A2 0206 0007                  		andi.b	#7,d6
000099A6 0643 0010                  		addi.w	#$10,d3		; skip to next spike
000099AA 5228 0028                  		addq.b	#1,obSubtype(a0)
000099AE                            
000099AE                            	Hel_NotCentre:
000099AE 51C9 FF92                  		dbf	d1,Hel_Build ; repeat d1 times (helix length)
000099B2                            
000099B2                            Hel_Action:	; Routine 2, 4
000099B2 6100 0000                  		bsr.w	Hel_RotateSpikes
000099B6 6100 0000                  		bsr.w	DisplaySprite
000099BA 6000 0000                  		bra.w	Hel_ChkDel
000099BE                            
000099BE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000099BE                            
000099BE                            
000099BE                            Hel_RotateSpikes:
000099BE 1038 FEC1                  		move.b	(v_ani0_frame).w,d0
000099C2 117C 0000 0020             		move.b	#0,obColType(a0) ; make object harmless
000099C8 D028 003E                  		add.b	hel_frame(a0),d0
000099CC 0200 0007                  		andi.b	#7,d0
000099D0 1140 001A                  		move.b	d0,obFrame(a0)	; change current frame
000099D4 6600                       		bne.s	locret_7DA6
000099D6 117C 0084 0020             		move.b	#$84,obColType(a0) ; make object harmful
000099DC                            
000099DC                            locret_7DA6:
000099DC 4E75                       		rts	
000099DE                            ; End of function Hel_RotateSpikes
000099DE                            
000099DE                            ; ===========================================================================
000099DE                            
000099DE                            Hel_ChkDel:
000099FC 4E75                       		rts	
000099FE                            ; ===========================================================================
000099FE                            
000099FE                            Hel_DelAll:
000099FE 7400                       		moveq	#0,d2
00009A00 45E8 0028                  		lea	obSubtype(a0),a2 ; move helix length to a2
00009A04 141A                       		move.b	(a2)+,d2	; move helix length to d2
00009A06 5502                       		subq.b	#2,d2
00009A08 6500                       		bcs.s	Hel_Delete
00009A0A                            
00009A0A                            	Hel_DelLoop:
00009A0A 7000                       		moveq	#0,d0
00009A0C 101A                       		move.b	(a2)+,d0
00009A0E ED48                       		lsl.w	#6,d0
00009A10 0680 00FF D000             		addi.l	#v_objspace&$FFFFFF,d0
00009A16 2240                       		movea.l	d0,a1		; get child address
00009A18 6100 0000                  		bsr.w	DeleteChild	; delete object
00009A1C 51CA FFEC                  		dbf	d2,Hel_DelLoop ; repeat d2 times (helix length)
00009A20                            
00009A20                            Hel_Delete:	; Routine 6
00009A20 6100 0000                  		bsr.w	DeleteObject
00009A24 4E75                       		rts	
00009A26                            ; ===========================================================================
00009A26                            
00009A26                            Hel_Display:	; Routine 8
00009A26 6100 FF96                  		bsr.w	Hel_RotateSpikes
00009A2A 6000 0000                  		bra.w	DisplaySprite
00009A2A 6000 0000                  		bra.w	DisplaySprite
00009A2E                            Map_Hel:	include	"_maps\Spiked Pole Helix.asm"
00009A2E                            ; ---------------------------------------------------------------------------
00009A2E                            ; Sprite mappings - helix of spikes on a pole (GHZ)
00009A2E                            ; ---------------------------------------------------------------------------
00009A2E                            Map_Hel_internal:
00009A2E 0000                       		dc.w byte_7E08-Map_Hel_internal
00009A30 0000                       		dc.w byte_7E0E-Map_Hel_internal
00009A32 0000                       		dc.w byte_7E14-Map_Hel_internal
00009A34 0000                       		dc.w byte_7E1A-Map_Hel_internal
00009A36 0000                       		dc.w byte_7E20-Map_Hel_internal
00009A38 0000                       		dc.w byte_7E26-Map_Hel_internal
00009A3A 0000                       		dc.w byte_7E2E-Map_Hel_internal
00009A3C 0000                       		dc.w byte_7E2C-Map_Hel_internal
00009A3E 01                         byte_7E08:	dc.b 1
00009A3F F001 0000 FC               		dc.b $F0, 1, 0,	0, $FC	; points straight up (harmful)
00009A44 01                         byte_7E0E:	dc.b 1
00009A45 F505 0002 F8               		dc.b $F5, 5, 0,	2, $F8	; 45 degree
00009A4A 01                         byte_7E14:	dc.b 1
00009A4B F805 0006 F8               		dc.b $F8, 5, 0,	6, $F8	; 90 degree
00009A50 01                         byte_7E1A:	dc.b 1
00009A51 FB05 000A F8               		dc.b $FB, 5, 0,	$A, $F8	; 45 degree
00009A56 01                         byte_7E20:	dc.b 1
00009A57 0001 000E FC               		dc.b 0,	1, 0, $E, $FC	; straight down
00009A5C 01                         byte_7E26:	dc.b 1
00009A5D 0400 0010 FD               		dc.b 4,	0, 0, $10, $FD	; 45 degree
00009A62 01                         byte_7E2C:	dc.b 1
00009A63 F4                         		dc.b $F4
00009A64                            byte_7E2E:	; reads the 0 below	; not visible
00009A64 0000 11FD                  		dc.b 0, 0,	$11, $FD ; 45 degree
00009A68                            		even
00009A68                            		even
00009A68                            		include	"_incObj\18 Platforms.asm"
00009A68                            ; ---------------------------------------------------------------------------
00009A68                            ; Object 18 - platforms	(GHZ, SYZ, SLZ)
00009A68                            ; ---------------------------------------------------------------------------
00009A68                            
00009A68                            BasicPlatform:
00009A68 7000                       		moveq	#0,d0
00009A6A 1028 0024                  		move.b	obRoutine(a0),d0
00009A6E 323B 0000                  		move.w	Plat_Index(pc,d0.w),d1
00009A72 4EFB 1000                  		jmp	Plat_Index(pc,d1.w)
00009A76                            ; ===========================================================================
00009A76 0000                       Plat_Index:	dc.w Plat_Main-Plat_Index
00009A78 0000                       		dc.w Plat_Solid-Plat_Index
00009A7A 0000                       		dc.w Plat_Action2-Plat_Index
00009A7C 0000                       		dc.w Plat_Delete-Plat_Index
00009A7E 0000                       		dc.w Plat_Action-Plat_Index
00009A80                            ; ===========================================================================
00009A80                            
00009A80                            Plat_Main:	; Routine 0
00009A80 5428 0024                  		addq.b	#2,obRoutine(a0)
00009A84 317C 4000 0002             		move.w	#$4000,obGfx(a0)
00009A8A 217C 0000 0000 0004        		move.l	#Map_Plat_GHZ,obMap(a0)
00009A92 117C 0020 0014             		move.b	#$20,obActWid(a0)
00009A98 0C38 0004 FE10             		cmpi.b	#id_SYZ,(v_zone).w ; check if level is SYZ
00009A9E 6600                       		bne.s	@notSYZ
00009AA0                            
00009AA0 217C 0000 0000 0004        		move.l	#Map_Plat_SYZ,obMap(a0) ; SYZ specific code
00009AA8 117C 0020 0014             		move.b	#$20,obActWid(a0)
00009AAE                            
00009AAE                            	@notSYZ:
00009AAE 0C38 0003 FE10             		cmpi.b	#id_SLZ,(v_zone).w ; check if level is SLZ
00009AB4 6600                       		bne.s	@notSLZ
00009AB6 217C 0000 0000 0004        		move.l	#Map_Plat_SLZ,obMap(a0) ; SLZ specific code
00009ABE 117C 0020 0014             		move.b	#$20,obActWid(a0)
00009AC4 317C 4000 0002             		move.w	#$4000,obGfx(a0)
00009ACA 117C 0003 0028             		move.b	#3,obSubtype(a0)
00009AD0                            
00009AD0                            	@notSLZ:
00009AD0 117C 0004 0001             		move.b	#4,obRender(a0)
00009AD6 317C 0200 0018             		move.w	#$200,obPriority(a0)
00009ADC 3168 000C 002C             		move.w	obY(a0),$2C(a0)
00009AE2 3168 000C 0034             		move.w	obY(a0),$34(a0)
00009AE8 3168 0008 0032             		move.w	obX(a0),$32(a0)
00009AEE 317C 0080 0026             		move.w	#$80,obAngle(a0)
00009AF4 7200                       		moveq	#0,d1
00009AF6 1028 0028                  		move.b	obSubtype(a0),d0
00009AFA 0C00 000A                  		cmpi.b	#$A,d0		; is object type $A (large platform)?
00009AFE 6600                       		bne.s	@setframe	; if not, branch
00009B00 5201                       		addq.b	#1,d1		; use frame #1
00009B02 117C 0020 0014             		move.b	#$20,obActWid(a0) ; set width
00009B08                            
00009B08                            	@setframe:
00009B08 1141 001A                  		move.b	d1,obFrame(a0)	; set frame to d1
00009B0C                            
00009B0C                            Plat_Solid:	; Routine 2
00009B0C 4A28 0038                  		tst.b	$38(a0)
00009B10 6700                       		beq.s	loc_7EE0
00009B12 5928 0038                  		subq.b	#4,$38(a0)
00009B16                            
00009B16                            	loc_7EE0:
00009B16 7200                       		moveq	#0,d1
00009B18 1228 0014                  		move.b	obActWid(a0),d1
00009B1C 6100 F56C                  		bsr.w	PlatformObject
00009B20                            
00009B20                            Plat_Action:	; Routine 8
00009B20 6100 0000                  		bsr.w	Plat_Move
00009B24 6100 0000                  		bsr.w	Plat_Nudge
00009B28 6100 0000                  		bsr.w	DisplaySprite
00009B2C 6000 0000                  		bra.w	Plat_ChkDel
00009B30                            ; ===========================================================================
00009B30                            
00009B30                            Plat_Action2:	; Routine 4
00009B30 0C28 0040 0038             		cmpi.b	#$40,$38(a0)
00009B36 6700                       		beq.s	loc_7F06
00009B38 5828 0038                  		addq.b	#4,$38(a0)
00009B3C                            
00009B3C                            	loc_7F06:
00009B3C 7200                       		moveq	#0,d1
00009B3E 1228 0014                  		move.b	obActWid(a0),d1
00009B42 6100 F6BA                  		bsr.w	ExitPlatform
00009B46 3F28 0008                  		move.w	obX(a0),-(sp)
00009B4A 6100 0000                  		bsr.w	Plat_Move
00009B4E 6100 0000                  		bsr.w	Plat_Nudge
00009B52 341F                       		move.w	(sp)+,d2
00009B54 6100 FC12                  		bsr.w	MvSonicOnPtfm2
00009B58 6100 0000                  		bsr.w	DisplaySprite
00009B5C 6000 0000                  		bra.w	Plat_ChkDel
00009B60                            
00009B60 4E75                       		rts
00009B62                            
00009B62                            ; ---------------------------------------------------------------------------
00009B62                            ; Subroutine to	move platform slightly when you	stand on it
00009B62                            ; ---------------------------------------------------------------------------
00009B62                            
00009B62                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009B62                            
00009B62                            
00009B62                            Plat_Nudge:
00009B62 1028 0038                  		move.b	$38(a0),d0
00009B66 6100 9ECE                  		bsr.w	CalcSine
00009B6A 323C 0400                  		move.w	#$400,d1
00009B6E C1C1                       		muls.w	d1,d0
00009B70 4840                       		swap	d0
00009B72 D068 002C                  		add.w	$2C(a0),d0
00009B76 3140 000C                  		move.w	d0,obY(a0)
00009B7A 4E75                       		rts	
00009B7C                            ; End of function Plat_Nudge
00009B7C                            
00009B7C                            ; ---------------------------------------------------------------------------
00009B7C                            ; Subroutine to	move platforms
00009B7C                            ; ---------------------------------------------------------------------------
00009B7C                            
00009B7C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009B7C                            
00009B7C                            
00009B7C                            Plat_Move:
00009B7C 7000                       		moveq	#0,d0
00009B7E 1028 0028                  		move.b	obSubtype(a0),d0
00009B82 0240 000F                  		andi.w	#$F,d0
00009B86 D040                       		add.w	d0,d0
00009B88 323B 0000                  		move.w	@index(pc,d0.w),d1
00009B8C 4EFB 1000                  		jmp	@index(pc,d1.w)
00009B90                            ; End of function Plat_Move
00009B90                            
00009B90                            ; ===========================================================================
00009B90 0000 0000                  @index:		dc.w @type00-@index, @type01-@index
00009B94 0000 0000                  		dc.w @type02-@index, @type03-@index
00009B98 0000 0000                  		dc.w @type04-@index, @type05-@index
00009B9C 0000 0000                  		dc.w @type06-@index, @type07-@index
00009BA0 0000 0000                  		dc.w @type08-@index, @type00-@index
00009BA4 0000 0000                  		dc.w @type0A-@index, @type0B-@index
00009BA8 0000                       		dc.w @type0C-@index
00009BAA                            ; ===========================================================================
00009BAA                            
00009BAA                            @type00:
00009BAA 4E75                       		rts			; platform 00 doesn't move
00009BAC                            ; ===========================================================================
00009BAC                            
00009BAC                            @type05:
00009BAC 3028 0032                  		move.w	$32(a0),d0
00009BB0 1228 0026                  		move.b	obAngle(a0),d1	; load platform-motion variable
00009BB4 4401                       		neg.b	d1		; reverse platform-motion
00009BB6 0601 0040                  		addi.b	#$40,d1
00009BBA 6000                       		bra.s	@type01_move
00009BBC                            ; ===========================================================================
00009BBC                            
00009BBC                            @type01:
00009BBC 3028 0032                  		move.w	$32(a0),d0
00009BC0 1228 0026                  		move.b	obAngle(a0),d1	; load platform-motion variable
00009BC4 0401 0040                  		subi.b	#$40,d1
00009BC8                            
00009BC8                            	@type01_move:
00009BC8 4881                       		ext.w	d1
00009BCA D041                       		add.w	d1,d0
00009BCC 3140 0008                  		move.w	d0,obX(a0)	; change position on x-axis
00009BD0 6000 0000                  		bra.w	@chgmotion
00009BD4                            ; ===========================================================================
00009BD4                            
00009BD4                            @type0C:
00009BD4 3028 0034                  		move.w	$34(a0),d0
00009BD8 1238 FE6C                  		move.b	(v_oscillate+$E).w,d1 ; load platform-motion variable
00009BDC 4401                       		neg.b	d1		; reverse platform-motion
00009BDE 0601 0030                  		addi.b	#$30,d1
00009BE2 6000                       		bra.s	@type02_move
00009BE4                            ; ===========================================================================
00009BE4                            
00009BE4                            @type0B:
00009BE4 3028 0034                  		move.w	$34(a0),d0
00009BE8 1238 FE6C                  		move.b	(v_oscillate+$E).w,d1 ; load platform-motion variable
00009BEC 0401 0030                  		subi.b	#$30,d1
00009BF0 6000                       		bra.s	@type02_move
00009BF2                            ; ===========================================================================
00009BF2                            
00009BF2                            @type06:
00009BF2 3028 0034                  		move.w	$34(a0),d0
00009BF6 1228 0026                  		move.b	obAngle(a0),d1	; load platform-motion variable
00009BFA 4401                       		neg.b	d1		; reverse platform-motion
00009BFC 0601 0040                  		addi.b	#$40,d1
00009C00 6000                       		bra.s	@type02_move
00009C02                            ; ===========================================================================
00009C02                            
00009C02                            @type02:
00009C02 3028 0034                  		move.w	$34(a0),d0
00009C06 1228 0026                  		move.b	obAngle(a0),d1	; load platform-motion variable
00009C0A 0401 0040                  		subi.b	#$40,d1
00009C0E                            
00009C0E                            	@type02_move:
00009C0E 4881                       		ext.w	d1
00009C10 D041                       		add.w	d1,d0
00009C12 3140 002C                  		move.w	d0,$2C(a0)	; change position on y-axis
00009C16 6000 0000                  		bra.w	@chgmotion
00009C1A                            ; ===========================================================================
00009C1A                            
00009C1A                            @type03:
00009C1A 4A68 003A                  		tst.w	$3A(a0)		; is time delay	set?
00009C1E 6600                       		bne.s	@type03_wait	; if yes, branch
00009C20 0828 0003 0022             		btst	#3,obStatus(a0)	; is Sonic standing on the platform?
00009C26 6700                       		beq.s	@type03_nomove	; if not, branch
00009C28 317C 001E 003A             		move.w	#30,$3A(a0)	; set time delay to 0.5	seconds
00009C2E                            
00009C2E                            	@type03_nomove:
00009C2E 4E75                       		rts	
00009C30                            
00009C30                            	@type03_wait:
00009C30 5368 003A                  		subq.w	#1,$3A(a0)	; subtract 1 from time
00009C34 66F8                       		bne.s	@type03_nomove	; if time is > 0, branch
00009C36 317C 0020 003A             		move.w	#32,$3A(a0)
00009C3C 5228 0028                  		addq.b	#1,obSubtype(a0) ; change to type 04 (falling)
00009C40 4E75                       		rts	
00009C42                            ; ===========================================================================
00009C42                            
00009C42                            @type04:
00009C42 4A68 003A                  		tst.w	$3A(a0)
00009C46 6700                       		beq.s	@loc_8048
00009C48 5368 003A                  		subq.w	#1,$3A(a0)
00009C4C 6600                       		bne.s	@loc_8048
00009C4E 0828 0003 0022             		btst	#3,obStatus(a0)
00009C54 6700                       		beq.s	@loc_8042
00009C56 08E9 0001 0022             		bset	#1,obStatus(a1)
00009C5C 08A9 0003 0022             		bclr	#3,obStatus(a1)
00009C62 137C 0002 0024             		move.b	#2,obRoutine(a1)
00009C68 08A8 0003 0022             		bclr	#3,obStatus(a0)
00009C6E 4228 0025                  		clr.b	$25(a0)
00009C72 3368 0012 0012             		move.w	obVelY(a0),obVelY(a1)
00009C78                            
00009C78                            	@loc_8042:
00009C78 117C 0008 0024             		move.b	#8,obRoutine(a0)
00009C7E                            
00009C7E                            	@loc_8048:
00009C7E 2628 002C                  		move.l	$2C(a0),d3
00009C82 3028 0012                  		move.w	obVelY(a0),d0
00009C86 48C0                       		ext.l	d0
00009C88 E180                       		asl.l	#8,d0
00009C8A D680                       		add.l	d0,d3
00009C8C 2143 002C                  		move.l	d3,$2C(a0)
00009C90 0668 0038 0012             		addi.w	#$38,obVelY(a0)
00009C96 3038 F72E                  		move.w	(v_limitbtm2).w,d0
00009C9A 0640 00E0                  		addi.w	#$E0,d0
00009C9E B068 002C                  		cmp.w	$2C(a0),d0
00009CA2 6400                       		bcc.s	@locret_8074
00009CA4 117C 0006 0024             		move.b	#6,obRoutine(a0)
00009CAA                            
00009CAA                            	@locret_8074:
00009CAA 4E75                       		rts	
00009CAC                            ; ===========================================================================
00009CAC                            
00009CAC                            @type07:
00009CAC 4A68 003A                  		tst.w	$3A(a0)		; is time delay	set?
00009CB0 6600                       		bne.s	@type07_wait	; if yes, branch
00009CB2 45F8 F7E0                  		lea	(f_switch).w,a2	; load switch statuses
00009CB6 7000                       		moveq	#0,d0
00009CB8 1028 0028                  		move.b	obSubtype(a0),d0 ; move object type ($x7) to d0
00009CBC E848                       		lsr.w	#4,d0		; divide d0 by 8, round	down
00009CBE 4A32 0000                  		tst.b	(a2,d0.w)	; has switch no. d0 been pressed?
00009CC2 6700                       		beq.s	@type07_nomove	; if not, branch
00009CC4 317C 003C 003A             		move.w	#60,$3A(a0)	; set time delay to 1 second
00009CCA                            
00009CCA                            	@type07_nomove:
00009CCA 4E75                       		rts	
00009CCC                            
00009CCC                            	@type07_wait:
00009CCC 5368 003A                  		subq.w	#1,$3A(a0)	; subtract 1 from time delay
00009CD0 66F8                       		bne.s	@type07_nomove	; if time is > 0, branch
00009CD2 5228 0028                  		addq.b	#1,obSubtype(a0) ; change to type 08
00009CD6 4E75                       		rts	
00009CD8                            ; ===========================================================================
00009CD8                            
00009CD8                            @type08:
00009CD8 5568 002C                  		subq.w	#2,$2C(a0)	; move platform	up
00009CDC 3028 0034                  		move.w	$34(a0),d0
00009CE0 0440 0200                  		subi.w	#$200,d0
00009CE4 B068 002C                  		cmp.w	$2C(a0),d0	; has platform moved $200 pixels?
00009CE8 6600                       		bne.s	@type08_nostop	; if not, branch
00009CEA 4228 0028                  		clr.b	obSubtype(a0)	; change to type 00 (stop moving)
00009CEE                            
00009CEE                            	@type08_nostop:
00009CEE 4E75                       		rts	
00009CF0                            ; ===========================================================================
00009CF0                            
00009CF0                            @type0A:
00009CF0 3028 0034                  		move.w	$34(a0),d0
00009CF4 1228 0026                  		move.b	obAngle(a0),d1	; load platform-motion variable
00009CF8 0401 0040                  		subi.b	#$40,d1
00009CFC 4881                       		ext.w	d1
00009CFE E241                       		asr.w	#1,d1
00009D00 D041                       		add.w	d1,d0
00009D02 3140 002C                  		move.w	d0,$2C(a0)	; change position on y-axis
00009D06                            
00009D06                            @chgmotion:
00009D06 1178 FE78 0026             		move.b	(v_oscillate+$1A).w,$26(a0) ; update platform-movement variable
00009D0C 4E75                       		rts	
00009D0E                            ; ===========================================================================
00009D0E                            
00009D0E                            Plat_ChkDel:
00009D2A 4E75                       		rts	
00009D2C                            ; ===========================================================================
00009D2C                            
00009D2C                            Plat_Delete:	; Routine 6
00009D2C 6000 0000                  		bra.w	DeleteObject
00009D2C 6000 0000                  		bra.w	DeleteObject
00009D30                            Map_Plat_Unused:include	"_maps\Platforms (unused).asm"
00009D30                            ; ---------------------------------------------------------------------------
00009D30                            ; Sprite mappings - unused
00009D30                            ; ---------------------------------------------------------------------------
00009D30                            Map_Plat_Unused_internal:
00009D30 0000                       		dc.w @small-Map_Plat_Unused_internal
00009D32 0000                       		dc.w @large-Map_Plat_Unused_internal
00009D34 02                         @small:		dc.b 2
00009D35 F40B 003C E8               		dc.b $F4, $B, 0, $3C, $E8
00009D3A F40B 0048 00               		dc.b $F4, $B, 0, $48, 0
00009D3F 0A                         @large:		dc.b $A
00009D40 F40F 00CA E0               		dc.b $F4, $F, 0, $CA, $E0
00009D45 040F 00DA E0               		dc.b 4,	$F, 0, $DA, $E0
00009D4A 240F 00DA E0               		dc.b $24, $F, 0, $DA, $E0
00009D4F 440F 00DA E0               		dc.b $44, $F, 0, $DA, $E0
00009D54 640F 00DA E0               		dc.b $64, $F, 0, $DA, $E0
00009D59 F40F 08CA 00               		dc.b $F4, $F, 8, $CA, 0
00009D5E 040F 08DA 00               		dc.b 4,	$F, 8, $DA, 0
00009D63 240F 08DA 00               		dc.b $24, $F, 8, $DA, 0
00009D68 440F 08DA 00               		dc.b $44, $F, 8, $DA, 0
00009D6D 640F 08DA 00               		dc.b $64, $F, 8, $DA, 0
00009D72                            		even
00009D72                            		even
00009D72                            Map_Plat_GHZ:	include	"_maps\Platforms (GHZ).asm"
00009D72                            ; ---------------------------------------------------------------------------
00009D72                            ; Sprite mappings - GHZ	platforms
00009D72                            ; ---------------------------------------------------------------------------
00009D72                            Map_Plat_GHZ_internal:
00009D72 0000                       		dc.w @small-Map_Plat_GHZ_internal
00009D74 0000                       		dc.w @large-Map_Plat_GHZ_internal
00009D76 04                         @small:		dc.b 4
00009D77 F40B 003B E0               		dc.b $F4, $B, 0, $3B, $E0 ; small platform
00009D7C F407 003F F8               		dc.b $F4, 7, 0,	$3F, $F8
00009D81 F407 003F 08               		dc.b $F4, 7, 0,	$3F, 8
00009D86 F403 0047 18               		dc.b $F4, 3, 0,	$47, $18
00009D8B 0A                         @large:		dc.b $A
00009D8C F40F 00C5 E0               		dc.b $F4, $F, 0, $C5, $E0 ; large column platform
00009D91 040F 00D5 E0               		dc.b 4,	$F, 0, $D5, $E0
00009D96 240F 00D5 E0               		dc.b $24, $F, 0, $D5, $E0
00009D9B 440F 00D5 E0               		dc.b $44, $F, 0, $D5, $E0
00009DA0 640F 00D5 E0               		dc.b $64, $F, 0, $D5, $E0
00009DA5 F40F 08C5 00               		dc.b $F4, $F, 8, $C5, 0
00009DAA 040F 08D5 00               		dc.b 4,	$F, 8, $D5, 0
00009DAF 240F 08D5 00               		dc.b $24, $F, 8, $D5, 0
00009DB4 440F 08D5 00               		dc.b $44, $F, 8, $D5, 0
00009DB9 640F 08D5 00               		dc.b $64, $F, 8, $D5, 0
00009DBE                            		even
00009DBE                            		even
00009DBE                            Map_Plat_SYZ:	include	"_maps\Platforms (SYZ).asm"
00009DBE                            ; ---------------------------------------------------------------------------
00009DBE                            ; Sprite mappings - SYZ	platforms
00009DBE                            ; ---------------------------------------------------------------------------
00009DBE                            Map_Plat_SYZ_internal:
00009DBE 0000                       		dc.w @platform-Map_Plat_SYZ_internal
00009DC0 03                         @platform:	dc.b 3
00009DC1 F60B 0049 E0               		dc.b $F6, $B, 0, $49, $E0
00009DC6 F607 0051 F8               		dc.b $F6, 7, 0,	$51, $F8
00009DCB F60B 0055 08               		dc.b $F6, $B, 0, $55, 8
00009DD0                            		even
00009DD0                            		even
00009DD0                            Map_Plat_SLZ:	include	"_maps\Platforms (SLZ).asm"
00009DD0                            ; ---------------------------------------------------------------------------
00009DD0                            ; Sprite mappings - SLZ	platforms
00009DD0                            ; ---------------------------------------------------------------------------
00009DD0                            Map_Plat_SLZ_internal:
00009DD0 0000                       		dc.w @platform-Map_Plat_SLZ_internal
00009DD2 02                         @platform:	dc.b 2
00009DD3 F80F 0021 E0               		dc.b $F8, $F, 0, $21, $E0
00009DD8 F80F 0021 00               		dc.b $F8, $F, 0, $21, 0
00009DDE 00                         		even
00009DDE 00                         		even
00009DDE                            Map_GBall:	include	"_maps\GHZ Ball.asm"
00009DDE                            ; ---------------------------------------------------------------------------
00009DDE                            ; Sprite mappings - swinging ball on a chain from GHZ boss
00009DDE                            ; ---------------------------------------------------------------------------
00009DDE                            Map_GBall_internal:
00009DDE 0000                       		dc.w @shiny-Map_GBall_internal
00009DE0 0000                       		dc.w @check1-Map_GBall_internal
00009DE2 0000                       		dc.w @check2-Map_GBall_internal
00009DE4 0000                       		dc.w @check3-Map_GBall_internal
00009DE6 06                         @shiny:		dc.b 6
00009DE7 F004 0024 F0               		dc.b $F0, 4, 0,	$24, $F0
00009DEC F804 1024 F0               		dc.b $F8, 4, $10, $24, $F0
00009DF1 E80A 0000 E8               		dc.b $E8, $A, 0, 0, $E8
00009DF6 E80A 0800 00               		dc.b $E8, $A, 8, 0, 0
00009DFB 000A 1000 E8               		dc.b 0,	$A, $10, 0, $E8
00009E00 000A 1800 00               		dc.b 0,	$A, $18, 0, 0
00009E05 04                         @check1:	dc.b 4
00009E06 E80A 0009 E8               		dc.b $E8, $A, 0, 9, $E8
00009E0B E80A 0809 00               		dc.b $E8, $A, 8, 9, 0
00009E10 000A 1009 E8               		dc.b 0,	$A, $10, 9, $E8
00009E15 000A 1809 00               		dc.b 0,	$A, $18, 9, 0
00009E1A 04                         @check2:	dc.b 4
00009E1B E80A 0012 E8               		dc.b $E8, $A, 0, $12, $E8
00009E20 E80A 001B 00               		dc.b $E8, $A, 0, $1B, 0
00009E25 000A 181B E8               		dc.b 0,	$A, $18, $1B, $E8
00009E2A 000A 1812 00               		dc.b 0,	$A, $18, $12, 0
00009E2F 04                         @check3:	dc.b 4
00009E30 E80A 081B E8               		dc.b $E8, $A, 8, $1B, $E8
00009E35 E80A 0812 00               		dc.b $E8, $A, 8, $12, 0
00009E3A 000A 1012 E8               		dc.b 0,	$A, $10, $12, $E8
00009E3F 000A 101B 00               		dc.b 0,	$A, $10, $1B, 0
00009E44                            		even
00009E44                            		even
00009E44                            		include	"_incObj\1A Collapsing Ledge (part 1).asm"
00009E44                            ; ---------------------------------------------------------------------------
00009E44                            ; Object 1A - GHZ collapsing ledge
00009E44                            ; ---------------------------------------------------------------------------
00009E44                            
00009E44                            CollapseLedge:
00009E44 7000                       		moveq	#0,d0
00009E46 1028 0024                  		move.b	obRoutine(a0),d0
00009E4A 323B 0000                  		move.w	Ledge_Index(pc,d0.w),d1
00009E4E 4EFB 1000                  		jmp	Ledge_Index(pc,d1.w)
00009E52                            ; ===========================================================================
00009E52 0000 0000                  Ledge_Index:	dc.w Ledge_Main-Ledge_Index, Ledge_Touch-Ledge_Index
00009E56 0000 0000                  		dc.w Ledge_Collapse-Ledge_Index, Ledge_Display-Ledge_Index
00009E5A 0000 0000                  		dc.w Ledge_Delete-Ledge_Index, Ledge_WalkOff-Ledge_Index
00009E5E                            
00009E5E =00000038                  ledge_timedelay:	equ $38		; time between touching the ledge and it collapsing
00009E5E =0000003A                  ledge_collapse_flag:	equ $3A		; collapse flag
00009E5E                            ; ===========================================================================
00009E5E                            
00009E5E                            Ledge_Main:	; Routine 0
00009E5E 5428 0024                  		addq.b	#2,obRoutine(a0)
00009E62 217C 0000 0000 0004        		move.l	#Map_Ledge,obMap(a0)
00009E6A 317C 4000 0002             		move.w	#$4000,obGfx(a0)
00009E70 0028 0004 0001             		ori.b	#4,obRender(a0)
00009E76 317C 0200 0018             		move.w	#$200,obPriority(a0)
00009E7C 117C 0007 0038             		move.b	#7,ledge_timedelay(a0) ; set time delay for collapse
00009E82 117C 0064 0014             		move.b	#$64,obActWid(a0)
00009E88 1168 0028 001A             		move.b	obSubtype(a0),obFrame(a0)
00009E8E 117C 0038 0016             		move.b	#$38,obHeight(a0)
00009E94 08E8 0004 0001             		bset	#4,obRender(a0)
00009E9A                            
00009E9A                            Ledge_Touch:	; Routine 2
00009E9A 4A28 003A                  		tst.b	ledge_collapse_flag(a0)	; is ledge collapsing?
00009E9E 6700                       		beq.s	@slope		; if not, branch
00009EA0 4A28 0038                  		tst.b	ledge_timedelay(a0)	; has time reached zero?
00009EA4 6700 0000                  		beq.w	Ledge_Fragment	; if yes, branch
00009EA8 5328 0038                  		subq.b	#1,ledge_timedelay(a0) ; subtract 1 from time
00009EAC                            
00009EAC                            	@slope:
00009EAC 323C 0030                  		move.w	#$30,d1
00009EB0 45F9 0000 0000             		lea	(Ledge_SlopeData).l,a2
00009EB6 6100 F2A6                  		bsr.w	SlopeObject
00009EBA 6000 0000                  		bra.w	RememberState
00009EBE                            ; ===========================================================================
00009EBE                            
00009EBE                            Ledge_Collapse:	; Routine 4
00009EBE 4A28 0038                  		tst.b	ledge_timedelay(a0)
00009EC2 6700 0000                  		beq.w	loc_847A
00009EC6 117C 0001 003A             		move.b	#1,ledge_collapse_flag(a0)	; set collapse flag
00009ECC 5328 0038                  		subq.b	#1,ledge_timedelay(a0)
00009ED0                            
00009ED0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009ED0                            
00009ED0                            
00009ED0                            Ledge_WalkOff:	; Routine $A
00009ED0 323C 0030                  		move.w	#$30,d1
00009ED4 6100 F328                  		bsr.w	ExitPlatform
00009ED8 323C 0030                  		move.w	#$30,d1
00009EDC 45F9 0000 0000             		lea	(Ledge_SlopeData).l,a2
00009EE2 3428 0008                  		move.w	obX(a0),d2
00009EE6 6100 0000                  		bsr.w	SlopeObject2
00009EEA 6000 0000                  		bra.w	RememberState
00009EEE                            ; End of function Ledge_WalkOff
00009EEE                            
00009EEE                            ; ===========================================================================
00009EEE                            
00009EEE                            Ledge_Display:	; Routine 6
00009EEE 4A28 0038                  		tst.b	ledge_timedelay(a0)	; has time delay reached zero?
00009EF2 6700                       		beq.s	Ledge_TimeZero	; if yes, branch
00009EF4 4A28 003A                  		tst.b	ledge_collapse_flag(a0)	; is ledge collapsing?
00009EF8 6600 0000                  		bne.w	loc_82D0	; if yes, branch
00009EFC 5328 0038                  		subq.b	#1,ledge_timedelay(a0) ; subtract 1 from time
00009F00 6000 0000                  		bra.w	DisplaySprite
00009F04                            ; ===========================================================================
00009F04                            
00009F04                            loc_82D0:
00009F04 5328 0038                  		subq.b	#1,ledge_timedelay(a0)
00009F08 6100 FFC6                  		bsr.w	Ledge_WalkOff
00009F0C 43F8 D000                  		lea	(v_player).w,a1
00009F10 0829 0003 0022             		btst	#3,obStatus(a1)
00009F16 6700                       		beq.s	loc_82FC
00009F18 4A28 0038                  		tst.b	ledge_timedelay(a0)
00009F1C 6600                       		bne.s	locret_8308
00009F1E 08A9 0003 0022             		bclr	#3,obStatus(a1)
00009F24 08A9 0005 0022             		bclr	#5,obStatus(a1)
00009F2A 137C 0001 001D             		move.b	#1,obNextAni(a1)
00009F30                            
00009F30                            loc_82FC:
00009F30 117C 0000 003A             		move.b	#0,ledge_collapse_flag(a0)
00009F36 117C 0006 0024             		move.b	#6,obRoutine(a0) ; run "Ledge_Display" routine
00009F3C                            
00009F3C                            locret_8308:
00009F3C 4E75                       		rts	
00009F3E                            ; ===========================================================================
00009F3E                            
00009F3E                            Ledge_TimeZero:
00009F3E 6100 0000                  		bsr.w	ObjectFall
00009F42 6100 0000                  		bsr.w	DisplaySprite
00009F46 4A28 0001                  		tst.b	obRender(a0)
00009F4A 6A00                       		bpl.s	Ledge_Delete
00009F4C 4E75                       		rts	
00009F4E                            ; ===========================================================================
00009F4E                            
00009F4E                            Ledge_Delete:	; Routine 8
00009F4E 6100 0000                  		bsr.w	DeleteObject
00009F52 4E75                       		rts	
00009F52 4E75                       		rts	
00009F54                            		include	"_incObj\53 Collapsing Floors.asm"
00009F54                            ; ---------------------------------------------------------------------------
00009F54                            ; Object 53 - collapsing floors	(MZ, SLZ, SBZ)
00009F54                            ; ---------------------------------------------------------------------------
00009F54                            
00009F54                            CollapseFloor:
00009F54 7000                       		moveq	#0,d0
00009F56 1028 0024                  		move.b	obRoutine(a0),d0
00009F5A 323B 0000                  		move.w	CFlo_Index(pc,d0.w),d1
00009F5E 4EFB 1000                  		jmp	CFlo_Index(pc,d1.w)
00009F62                            ; ===========================================================================
00009F62 0000 0000                  CFlo_Index:	dc.w CFlo_Main-CFlo_Index, CFlo_Touch-CFlo_Index
00009F66 0000 0000                  		dc.w CFlo_Collapse-CFlo_Index, CFlo_Display-CFlo_Index
00009F6A 0000 0000                  		dc.w CFlo_Delete-CFlo_Index, CFlo_WalkOff-CFlo_Index
00009F6E                            
00009F6E =00000038                  cflo_timedelay:		equ $38
00009F6E =0000003A                  cflo_collapse_flag:	equ $3A
00009F6E                            ; ===========================================================================
00009F6E                            
00009F6E                            CFlo_Main:	; Routine 0
00009F6E 5428 0024                  		addq.b	#2,obRoutine(a0)
00009F72 217C 0000 0000 0004        		move.l	#Map_CFlo,obMap(a0)
00009F7A 317C 42B8 0002             		move.w	#$42B8,obGfx(a0)
00009F80 0C38 0003 FE10             		cmpi.b	#id_SLZ,(v_zone).w ; check if level is SLZ
00009F86 6600                       		bne.s	@notSLZ
00009F88                            
00009F88 317C 44E0 0002             		move.w	#$44E0,obGfx(a0) ; SLZ specific code
00009F8E 5428 001A                  		addq.b	#2,obFrame(a0)
00009F92                            
00009F92                            	@notSLZ:
00009F92 0C38 0005 FE10             		cmpi.b	#id_SBZ,(v_zone).w ; check if level is SBZ
00009F98 6600                       		bne.s	@notSBZ
00009F9A 317C 43F5 0002             		move.w	#$43F5,obGfx(a0) ; SBZ specific code
00009FA0                            
00009FA0                            	@notSBZ:
00009FA0 0028 0004 0001             		ori.b	#4,obRender(a0)
00009FA6 317C 0200 0018             		move.w	#$200,obPriority(a0)
00009FAC 117C 0007 0038             		move.b	#7,cflo_timedelay(a0)
00009FB2 117C 0044 0014             		move.b	#$44,obActWid(a0)
00009FB8                            
00009FB8                            CFlo_Touch:	; Routine 2
00009FB8 4A28 003A                  		tst.b	cflo_collapse_flag(a0)	; has Sonic touched the	object?
00009FBC 6700                       		beq.s	@solid		; if not, branch
00009FBE 4A28 0038                  		tst.b	cflo_timedelay(a0)	; has time delay reached zero?
00009FC2 6700 0000                  		beq.w	CFlo_Fragment	; if yes, branch
00009FC6 5328 0038                  		subq.b	#1,cflo_timedelay(a0) ; subtract 1 from time
00009FCA                            
00009FCA                            	@solid:
00009FCA 323C 0020                  		move.w	#$20,d1
00009FCE 6100 F0BA                  		bsr.w	PlatformObject
00009FD2 4A28 0028                  		tst.b	obSubtype(a0)
00009FD6 6A00                       		bpl.s	@remstate
00009FD8 0829 0003 0022             		btst	#3,obStatus(a1)
00009FDE 6700                       		beq.s	@remstate
00009FE0 08A8 0000 0001             		bclr	#0,obRender(a0)
00009FE6 3029 0008                  		move.w	obX(a1),d0
00009FEA 9068 0008                  		sub.w	obX(a0),d0
00009FEE 6400                       		bcc.s	@remstate
00009FF0 08E8 0000 0001             		bset	#0,obRender(a0)
00009FF6                            
00009FF6                            	@remstate:
00009FF6 6000 0000                  		bra.w	RememberState
00009FFA                            ; ===========================================================================
00009FFA                            
00009FFA                            CFlo_Collapse:	; Routine 4
00009FFA 4A28 0038                  		tst.b	cflo_timedelay(a0)
00009FFE 6700 0000                  		beq.w	loc_8458
0000A002 117C 0001 003A             		move.b	#1,cflo_collapse_flag(a0)	; set object as	"touched"
0000A008 5328 0038                  		subq.b	#1,cflo_timedelay(a0)
0000A00C                            
0000A00C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000A00C                            
0000A00C                            
0000A00C                            CFlo_WalkOff:	; Routine $A
0000A00C 323C 0020                  		move.w	#$20,d1
0000A010 6100 F1EC                  		bsr.w	ExitPlatform
0000A014 3428 0008                  		move.w	obX(a0),d2
0000A018 6100 F74E                  		bsr.w	MvSonicOnPtfm2
0000A01C 6000 0000                  		bra.w	RememberState
0000A020                            ; End of function CFlo_WalkOff
0000A020                            
0000A020                            ; ===========================================================================
0000A020                            
0000A020                            CFlo_Display:	; Routine 6
0000A020 4A28 0038                  		tst.b	cflo_timedelay(a0)	; has time delay reached zero?
0000A024 6700                       		beq.s	CFlo_TimeZero	; if yes, branch
0000A026 4A28 003A                  		tst.b	cflo_collapse_flag(a0)	; has Sonic touched the	object?
0000A02A 6600 0000                  		bne.w	loc_8402	; if yes, branch
0000A02E 5328 0038                  		subq.b	#1,cflo_timedelay(a0); subtract 1 from time
0000A032 6000 0000                  		bra.w	DisplaySprite
0000A036                            ; ===========================================================================
0000A036                            
0000A036                            loc_8402:
0000A036 5328 0038                  		subq.b	#1,cflo_timedelay(a0)
0000A03A 6100 FFD0                  		bsr.w	CFlo_WalkOff
0000A03E 43F8 D000                  		lea	(v_player).w,a1
0000A042 0829 0003 0022             		btst	#3,obStatus(a1)
0000A048 6700                       		beq.s	loc_842E
0000A04A 4A28 0038                  		tst.b	cflo_timedelay(a0)
0000A04E 6600                       		bne.s	locret_843A
0000A050 08A9 0003 0022             		bclr	#3,obStatus(a1)
0000A056 08A9 0005 0022             		bclr	#5,obStatus(a1)
0000A05C 137C 0001 001D             		move.b	#1,obNextAni(a1)
0000A062                            
0000A062                            loc_842E:
0000A062 117C 0000 003A             		move.b	#0,cflo_collapse_flag(a0)
0000A068 117C 0006 0024             		move.b	#6,obRoutine(a0) ; run "CFlo_Display" routine
0000A06E                            
0000A06E                            locret_843A:
0000A06E 4E75                       		rts	
0000A070                            ; ===========================================================================
0000A070                            
0000A070                            CFlo_TimeZero:
0000A070 6100 0000                  		bsr.w	ObjectFall
0000A074 6100 0000                  		bsr.w	DisplaySprite
0000A078 4A28 0001                  		tst.b	obRender(a0)
0000A07C 6A00                       		bpl.s	CFlo_Delete
0000A07E 4E75                       		rts	
0000A080                            ; ===========================================================================
0000A080                            
0000A080                            CFlo_Delete:	; Routine 8
0000A080 6100 0000                  		bsr.w	DeleteObject
0000A084 4E75                       		rts	
0000A086                            ; ===========================================================================
0000A086                            
0000A086                            CFlo_Fragment:
0000A086 117C 0000 003A             		move.b	#0,cflo_collapse_flag(a0)
0000A08C                            
0000A08C                            loc_8458:
0000A08C 49F9 0000 0000             		lea	(CFlo_Data2).l,a4
0000A092 0828 0000 0028             		btst	#0,obSubtype(a0)
0000A098 6700                       		beq.s	loc_846C
0000A09A 49F9 0000 0000             		lea	(CFlo_Data3).l,a4
0000A0A0                            
0000A0A0                            loc_846C:
0000A0A0 7207                       		moveq	#7,d1
0000A0A2 5228 001A                  		addq.b	#1,obFrame(a0)
0000A0A6 6000                       		bra.s	loc_8486
0000A0A6 6000                       		bra.s	loc_8486
0000A0A8                            
0000A0A8                            ; ===========================================================================
0000A0A8                            
0000A0A8                            Ledge_Fragment:
0000A0A8 117C 0000 003A             		move.b	#0,ledge_collapse_flag(a0)
0000A0AE                            
0000A0AE                            loc_847A:
0000A0AE 49F9 0000 0000             		lea	(CFlo_Data1).l,a4
0000A0B4 7218                       		moveq	#$18,d1
0000A0B6 5428 001A                  		addq.b	#2,obFrame(a0)
0000A0BA                            
0000A0BA                            loc_8486:
0000A0BA 7000                       		moveq	#0,d0
0000A0BC 1028 001A                  		move.b	obFrame(a0),d0
0000A0C0 D040                       		add.w	d0,d0
0000A0C2 2668 0004                  		movea.l	obMap(a0),a3
0000A0C6 D6F3 0000                  		adda.w	(a3,d0.w),a3
0000A0CA 524B                       		addq.w	#1,a3
0000A0CC 08E8 0005 0001             		bset	#5,obRender(a0)
0000A0D2 1810                       		move.b	0(a0),d4
0000A0D4 1A28 0001                  		move.b	obRender(a0),d5
0000A0D8 2248                       		movea.l	a0,a1
0000A0DA 137C 0006 0024             		move.b	#6,obRoutine(a1)
0000A0E0 1284                       		move.b	d4,0(a1)
0000A0E2 234B 0004                  		move.l	a3,obMap(a1)
0000A0E6 1345 0001                  		move.b	d5,obRender(a1)
0000A0EA 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000A0F0 3368 000C 000C             		move.w	obY(a0),obY(a1)
0000A0F6 3368 0002 0002             		move.w	obGfx(a0),obGfx(a1)
0000A0FC 3368 0018 0018             		move.w	obPriority(a0),obPriority(a1)
0000A102 1368 0014 0014             		move.b	obActWid(a0),obActWid(a1)
0000A108 135C 0038                  		move.b	(a4)+,ledge_timedelay(a1)
0000A10C 5341                       		subq.w	#1,d1
0000A10E 43F8 D800                  		lea		(v_lvlobjspace).w,a1
0000A112 303C 005F                  		move.w	#$5F,d0
0000A116                            ; ===========================================================================
0000A116                            
0000A116                            loc_84AA:
0000A116 4A11                       		tst.b	(a1)
0000A118 6700                       		beq.s	@cont		
0000A11A 43E9 0040                  		lea		$40(a1),a1
0000A11E 51C8 FFF6                  		dbf		d0,loc_84AA	
0000A122 6600                       		bne.s	loc_84F2	
0000A124                            	@cont:
0000A124 5A4B                       		addq.w	#5,a3
0000A126                            
0000A126                            loc_84B2:
0000A126 137C 0006 0024             		move.b	#6,obRoutine(a1)
0000A12C 1284                       		move.b	d4,0(a1)
0000A12E 234B 0004                  		move.l	a3,obMap(a1)
0000A132 1345 0001                  		move.b	d5,obRender(a1)
0000A136 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000A13C 3368 000C 000C             		move.w	obY(a0),obY(a1)
0000A142 3368 0002 0002             		move.w	obGfx(a0),obGfx(a1)
0000A148 3368 0018 0018             		move.w	obPriority(a0),obPriority(a1)
0000A14E 1368 0014 0014             		move.b	obActWid(a0),obActWid(a1)
0000A154 135C 0038                  		move.b	(a4)+,ledge_timedelay(a1)
0000A158 6100 0000                  		bsr.w	DisplaySprite1
0000A15C                            
0000A15C                            loc_84EE:
0000A15C 51C9 FFB8                  		dbf	d1,loc_84AA
0000A160                            
0000A160                            loc_84F2:
0000A160 6100 0000                  		bsr.w	DisplaySprite
0000A16E                            ; ===========================================================================
0000A16E                            ; ---------------------------------------------------------------------------
0000A16E                            ; Disintegration data for collapsing ledges (MZ, SLZ, SBZ)
0000A16E                            ; ---------------------------------------------------------------------------
0000A16E 1C18 1410 1A16 120E 0A06+  CFlo_Data1:	dc.b $1C, $18, $14, $10, $1A, $16, $12,	$E, $A,	6, $18,	$14, $10, $C, 8, 4
0000A17E 1612 0E0A 0602 1410 0C00   		dc.b $16, $12, $E, $A, 6, 2, $14, $10, $C, 0
0000A188 1E16 0E06 1A12 0A02        CFlo_Data2:	dc.b $1E, $16, $E, 6, $1A, $12,	$A, 2
0000A190 161E 1A12 060E 0A02        CFlo_Data3:	dc.b $16, $1E, $1A, $12, 6, $E,	$A, 2
0000A198                            
0000A198                            ; ---------------------------------------------------------------------------
0000A198                            ; Sloped platform subroutine (GHZ collapsing ledges and	MZ platforms)
0000A198                            ; ---------------------------------------------------------------------------
0000A198                            
0000A198                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000A198                            
0000A198                            
0000A198                            SlopeObject2:
0000A198 43F8 D000                  		lea	(v_player).w,a1
0000A19C 0829 0003 0022             		btst	#3,obStatus(a1)
0000A1A2 6700                       		beq.s	locret_856E
0000A1A4 3029 0008                  		move.w	obX(a1),d0
0000A1A8 9068 0008                  		sub.w	obX(a0),d0
0000A1AC D041                       		add.w	d1,d0
0000A1AE E248                       		lsr.w	#1,d0
0000A1B0 0828 0000 0001             		btst	#0,obRender(a0)
0000A1B6 6700                       		beq.s	loc_854E
0000A1B8 4640                       		not.w	d0
0000A1BA D041                       		add.w	d1,d0
0000A1BC                            
0000A1BC                            loc_854E:
0000A1BC 7200                       		moveq	#0,d1
0000A1BE 1232 0000                  		move.b	(a2,d0.w),d1
0000A1C2 3028 000C                  		move.w	obY(a0),d0
0000A1C6 9041                       		sub.w	d1,d0
0000A1C8 7200                       		moveq	#0,d1
0000A1CA 1229 0016                  		move.b	obHeight(a1),d1
0000A1CE 9041                       		sub.w	d1,d0
0000A1D0 3340 000C                  		move.w	d0,obY(a1)
0000A1D4 9468 0008                  		sub.w	obX(a0),d2
0000A1D8 9569 0008                  		sub.w	d2,obX(a1)
0000A1DC                            
0000A1DC                            locret_856E:
0000A1DC 4E75                       		rts	
0000A1DE                            ; End of function SlopeObject2
0000A1DE                            
0000A1DE                            ; ===========================================================================
0000A1DE                            ; ---------------------------------------------------------------------------
0000A1DE                            ; Collision data for GHZ collapsing ledge
0000A1DE                            ; ---------------------------------------------------------------------------
0000A1DE                            Ledge_SlopeData:
0000A1DE                            		incbin	"misc\GHZ Collapsing Ledge Heightmap.bin"
0000A20E                            		even
0000A20E                            
0000A20E                            Map_Ledge:	include	"_maps\Collapsing Ledge.asm"
0000A20E                            ; ---------------------------------------------------------------------------
0000A20E                            ; Sprite mappings - GHZ	collapsing ledge
0000A20E                            ; ---------------------------------------------------------------------------
0000A20E                            Map_Ledge_internal:
0000A20E 0000                       		dc.w @left-Map_Ledge_internal
0000A210 0000                       		dc.w @right-Map_Ledge_internal
0000A212 0000                       		dc.w @leftsmash-Map_Ledge_internal
0000A214 0000                       		dc.w @rightsmash-Map_Ledge_internal
0000A216 10                         @left:		dc.b $10
0000A217 C80E 0057 10               		dc.b $C8, $E, 0, $57, $10 ; ledge facing left
0000A21C D00D 0063 F0               		dc.b $D0, $D, 0, $63, $F0
0000A221 E00D 006B 10               		dc.b $E0, $D, 0, $6B, $10
0000A226 E00D 0073 F0               		dc.b $E0, $D, 0, $73, $F0
0000A22B D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
0000A230 D806 0081 D0               		dc.b $D8, 6, 0,	$81, $D0
0000A235 F00D 0087 10               		dc.b $F0, $D, 0, $87, $10
0000A23A F00D 008F F0               		dc.b $F0, $D, 0, $8F, $F0
0000A23F F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
0000A244 F005 009B D0               		dc.b $F0, 5, 0,	$9B, $D0
0000A249 000D 009F 10               		dc.b 0,	$D, 0, $9F, $10
0000A24E 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
0000A253 000D 00AB E0               		dc.b 0,	$D, 0, $AB, $E0
0000A258 0005 00B3 D0               		dc.b 0,	5, 0, $B3, $D0
0000A25D 100D 00AB 10               		dc.b $10, $D, 0, $AB, $10
0000A262 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
0000A267 10                         @right:		dc.b $10
0000A268 C80E 0057 10               		dc.b $C8, $E, 0, $57, $10 ; ledge facing right
0000A26D D00D 0063 F0               		dc.b $D0, $D, 0, $63, $F0
0000A272 E00D 006B 10               		dc.b $E0, $D, 0, $6B, $10
0000A277 E00D 0073 F0               		dc.b $E0, $D, 0, $73, $F0
0000A27C D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
0000A281 D806 00BB D0               		dc.b $D8, 6, 0,	$BB, $D0
0000A286 F00D 0087 10               		dc.b $F0, $D, 0, $87, $10
0000A28B F00D 008F F0               		dc.b $F0, $D, 0, $8F, $F0
0000A290 F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
0000A295 F005 00C1 D0               		dc.b $F0, 5, 0,	$C1, $D0
0000A29A 000D 009F 10               		dc.b 0,	$D, 0, $9F, $10
0000A29F 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
0000A2A4 000D 00AB E0               		dc.b 0,	$D, 0, $AB, $E0
0000A2A9 0005 00B7 D0               		dc.b 0,	5, 0, $B7, $D0
0000A2AE 100D 00AB 10               		dc.b $10, $D, 0, $AB, $10
0000A2B3 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
0000A2B8 19                         @leftsmash:	dc.b $19
0000A2B9 C806 005D 20               		dc.b $C8, 6, 0,	$5D, $20 ; ledge facing	left in	pieces
0000A2BE C806 0057 10               		dc.b $C8, 6, 0,	$57, $10
0000A2C3 D005 0067 00               		dc.b $D0, 5, 0,	$67, 0
0000A2C8 D005 0063 F0               		dc.b $D0, 5, 0,	$63, $F0
0000A2CD E005 006F 20               		dc.b $E0, 5, 0,	$6F, $20
0000A2D2 E005 006B 10               		dc.b $E0, 5, 0,	$6B, $10
0000A2D7 E005 0077 00               		dc.b $E0, 5, 0,	$77, 0
0000A2DC E005 0073 F0               		dc.b $E0, 5, 0,	$73, $F0
0000A2E1 D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
0000A2E6 D806 0081 D0               		dc.b $D8, 6, 0,	$81, $D0
0000A2EB F005 008B 20               		dc.b $F0, 5, 0,	$8B, $20
0000A2F0 F005 0087 10               		dc.b $F0, 5, 0,	$87, $10
0000A2F5 F005 0093 00               		dc.b $F0, 5, 0,	$93, 0
0000A2FA F005 008F F0               		dc.b $F0, 5, 0,	$8F, $F0
0000A2FF F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
0000A304 F005 009B D0               		dc.b $F0, 5, 0,	$9B, $D0
0000A309 0005 008B 20               		dc.b 0,	5, 0, $8B, $20
0000A30E 0005 008B 10               		dc.b 0,	5, 0, $8B, $10
0000A313 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
0000A318 0005 00AB F0               		dc.b 0,	5, 0, $AB, $F0
0000A31D 0005 00AB E0               		dc.b 0,	5, 0, $AB, $E0
0000A322 0005 00B3 D0               		dc.b 0,	5, 0, $B3, $D0
0000A327 1005 00AB 20               		dc.b $10, 5, 0,	$AB, $20
0000A32C 1005 00AB 10               		dc.b $10, 5, 0,	$AB, $10
0000A331 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
0000A336 19                         @rightsmash:	dc.b $19
0000A337 C806 005D 20               		dc.b $C8, 6, 0,	$5D, $20 ; ledge facing	right in pieces
0000A33C C806 0057 10               		dc.b $C8, 6, 0,	$57, $10
0000A341 D005 0067 00               		dc.b $D0, 5, 0,	$67, 0
0000A346 D005 0063 F0               		dc.b $D0, 5, 0,	$63, $F0
0000A34B E005 006F 20               		dc.b $E0, 5, 0,	$6F, $20
0000A350 E005 006B 10               		dc.b $E0, 5, 0,	$6B, $10
0000A355 E005 0077 00               		dc.b $E0, 5, 0,	$77, 0
0000A35A E005 0073 F0               		dc.b $E0, 5, 0,	$73, $F0
0000A35F D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
0000A364 D806 00BB D0               		dc.b $D8, 6, 0,	$BB, $D0
0000A369 F005 008B 20               		dc.b $F0, 5, 0,	$8B, $20
0000A36E F005 0087 10               		dc.b $F0, 5, 0,	$87, $10
0000A373 F005 0093 00               		dc.b $F0, 5, 0,	$93, 0
0000A378 F005 008F F0               		dc.b $F0, 5, 0,	$8F, $F0
0000A37D F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
0000A382 F005 00C1 D0               		dc.b $F0, 5, 0,	$C1, $D0
0000A387 0005 008B 20               		dc.b 0,	5, 0, $8B, $20
0000A38C 0005 008B 10               		dc.b 0,	5, 0, $8B, $10
0000A391 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
0000A396 0005 00AB F0               		dc.b 0,	5, 0, $AB, $F0
0000A39B 0005 00AB E0               		dc.b 0,	5, 0, $AB, $E0
0000A3A0 0005 00B7 D0               		dc.b 0,	5, 0, $B7, $D0
0000A3A5 1005 00AB 20               		dc.b $10, 5, 0,	$AB, $20
0000A3AA 1005 00AB 10               		dc.b $10, 5, 0,	$AB, $10
0000A3AF 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
0000A3B4                            		even
0000A3B4                            		even
0000A3B4                            Map_CFlo:	include	"_maps\Collapsing Floors.asm"
0000A3B4                            ; ---------------------------------------------------------------------------
0000A3B4                            ; Sprite mappings - collapsing floors (MZ, SLZ,	SBZ)
0000A3B4                            ; ---------------------------------------------------------------------------
0000A3B4                            Map_CFlo_internal:
0000A3B4 0000                       		dc.w byte_874E-Map_CFlo_internal
0000A3B6 0000                       		dc.w byte_8763-Map_CFlo_internal
0000A3B8 0000                       		dc.w byte_878C-Map_CFlo_internal
0000A3BA 0000                       		dc.w byte_87A1-Map_CFlo_internal
0000A3BC 04                         byte_874E:	dc.b 4
0000A3BD F80D 0000 E0               		dc.b $F8, $D, 0, 0, $E0	; MZ and SBZ blocks
0000A3C2 080D 0000 E0               		dc.b 8,	$D, 0, 0, $E0
0000A3C7 F80D 0000 00               		dc.b $F8, $D, 0, 0, 0
0000A3CC 080D 0000 00               		dc.b 8,	$D, 0, 0, 0
0000A3D1 08                         byte_8763:	dc.b 8
0000A3D2 F805 0000 E0               		dc.b $F8, 5, 0,	0, $E0
0000A3D7 F805 0000 F0               		dc.b $F8, 5, 0,	0, $F0
0000A3DC F805 0000 00               		dc.b $F8, 5, 0,	0, 0
0000A3E1 F805 0000 10               		dc.b $F8, 5, 0,	0, $10
0000A3E6 0805 0000 E0               		dc.b 8,	5, 0, 0, $E0
0000A3EB 0805 0000 F0               		dc.b 8,	5, 0, 0, $F0
0000A3F0 0805 0000 00               		dc.b 8,	5, 0, 0, 0
0000A3F5 0805 0000 10               		dc.b 8,	5, 0, 0, $10
0000A3FA 04                         byte_878C:	dc.b 4
0000A3FB F80D 0000 E0               		dc.b $F8, $D, 0, 0, $E0	; SLZ blocks
0000A400 080D 0008 E0               		dc.b 8,	$D, 0, 8, $E0
0000A405 F80D 0000 00               		dc.b $F8, $D, 0, 0, 0
0000A40A 080D 0008 00               		dc.b 8,	$D, 0, 8, 0
0000A40F 08                         byte_87A1:	dc.b 8
0000A410 F805 0000 E0               		dc.b $F8, 5, 0,	0, $E0
0000A415 F805 0004 F0               		dc.b $F8, 5, 0,	4, $F0
0000A41A F805 0000 00               		dc.b $F8, 5, 0,	0, 0
0000A41F F805 0004 10               		dc.b $F8, 5, 0,	4, $10
0000A424 0805 0008 E0               		dc.b 8,	5, 0, 8, $E0
0000A429 0805 000C F0               		dc.b 8,	5, 0, $C, $F0
0000A42E 0805 0008 00               		dc.b 8,	5, 0, 8, 0
0000A433 0805 000C 10               		dc.b 8,	5, 0, $C, $10
0000A438                            		even
0000A438                            		even
0000A438                            
0000A438                            		include	"_incObj\1C Scenery.asm"
0000A438                            ; ---------------------------------------------------------------------------
0000A438                            ; Object 1C - scenery (GHZ bridge stump, SLZ lava thrower)
0000A438                            ; ---------------------------------------------------------------------------
0000A438                            
0000A438                            Scenery:
0000A438 7000                       		moveq	#0,d0
0000A43A 1028 0024                  		move.b	obRoutine(a0),d0
0000A43E 323B 0000                  		move.w	Scen_Index(pc,d0.w),d1
0000A442 4EFB 1000                  		jmp	Scen_Index(pc,d1.w)
0000A446                            ; ===========================================================================
0000A446 0000                       Scen_Index:	dc.w Scen_Main-Scen_Index
0000A448 0000                       		dc.w Scen_ChkDel-Scen_Index
0000A44A                            ; ===========================================================================
0000A44A                            
0000A44A                            Scen_Main:	; Routine 0
0000A44A 5428 0024                  		addq.b	#2,obRoutine(a0)
0000A44E 7000                       		moveq	#0,d0
0000A450 1028 0028                  		move.b	obSubtype(a0),d0 ; copy object subtype to d0
0000A454 C0FC 000A                  		mulu.w	#$A,d0		; multiply by $A
0000A458 43FB 0000                  		lea	Scen_Values(pc,d0.w),a1
0000A45C 2159 0004                  		move.l	(a1)+,obMap(a0)
0000A460 3159 0002                  		move.w	(a1)+,obGfx(a0)
0000A464 0028 0004 0001             		ori.b	#4,obRender(a0)
0000A46A 1159 001A                  		move.b	(a1)+,obFrame(a0)
0000A46E 1159 0014                  		move.b	(a1)+,obActWid(a0)
0000A472 1159 0018                  		move.b	(a1)+,obPriority(a0)
0000A476 3028 0018                  		move.w obPriority(a0),d0 
0000A47A E248                       		lsr.w #1,d0 
0000A47C 0240 0380                  		andi.w #$380,d0 
0000A480 3140 0018                  		move.w d0,obPriority(a0)		
0000A484 1159 0020                  		move.b	(a1)+,obColType(a0)
0000A488                            
0000A488                            Scen_ChkDel:	; Routine 2
0000A4A6 6000 0000                  		bra.w	DisplaySprite
0000A4AA                            ; ===========================================================================
0000A4AA                            ; ---------------------------------------------------------------------------
0000A4AA                            ; Variables for	object $1C are stored in an array
0000A4AA                            ; ---------------------------------------------------------------------------
0000A4AA 0000 0000                  Scen_Values:	dc.l Map_Scen		; mappings address
0000A4AE 44D8                       		dc.w $44D8		; VRAM setting
0000A4B0 0008 0200                  		dc.b 0,	8, 2, 0		; frame, width,	priority, collision response
0000A4B4 0000 0000                  		dc.l Map_Scen
0000A4B8 44D8                       		dc.w $44D8
0000A4BA 0008 0200                  		dc.b 0,	8, 2, 0
0000A4BE 0000 0000                  		dc.l Map_Scen
0000A4C2 44D8                       		dc.w $44D8
0000A4C4 0008 0200                  		dc.b 0,	8, 2, 0
0000A4C8 0000 9572                  		dc.l Map_Bri
0000A4CC 438E                       		dc.w $438E
0000A4CE 0110 0100                  		dc.b 1,	$10, 1,	0
0000A4D2                            		even
0000A4D2                            		even
0000A4D2                            Map_Scen:	include	"_maps\Scenery.asm"
0000A4D2                            ; ---------------------------------------------------------------------------
0000A4D2                            ; Sprite mappings - SLZ	lava thrower
0000A4D2                            ; ---------------------------------------------------------------------------
0000A4D2                            Map_Scen_internal:
0000A4D2 0000                       		dc.w byte_8858-Map_Scen_internal
0000A4D4 01                         byte_8858:	dc.b 1
0000A4D5 F007 0000 F8               		dc.b $F0, 7, 0,	0, $F8
0000A4DA                            		even
0000A4DA                            		even
0000A4DA                            
0000A4DA                            		include	"_incObj\1D Unused Switch.asm"
0000A4DA                            ; ---------------------------------------------------------------------------
0000A4DA                            ; Object 1D - switch that activates when Sonic touches it
0000A4DA                            ; (this	is not used anywhere in	the game)
0000A4DA                            ; ---------------------------------------------------------------------------
0000A4DA                            
0000A4DA                            MagicSwitch:
0000A4DA 7000                       		moveq	#0,d0
0000A4DC 1028 0024                  		move.b	obRoutine(a0),d0
0000A4E0 323B 0000                  		move.w	Swi_Index(pc,d0.w),d1
0000A4E4 4EFB 1000                  		jmp	Swi_Index(pc,d1.w)
0000A4E8                            ; ===========================================================================
0000A4E8 0000                       Swi_Index:	dc.w Swi_Main-Swi_Index
0000A4EA 0000                       		dc.w Swi_Action-Swi_Index
0000A4EC 0000                       		dc.w Swi_Delete-Swi_Index
0000A4EE                            
0000A4EE =00000030                  swi_origY:	equ $30		; original y-axis position
0000A4EE                            ; ===========================================================================
0000A4EE                            
0000A4EE                            Swi_Main:	; Routine 0
0000A4EE 5428 0024                  		addq.b	#2,obRoutine(a0)
0000A4F2 217C 0000 0000 0004        		move.l	#Map_Swi,obMap(a0)
0000A4FA 317C 4000 0002             		move.w	#$4000,obGfx(a0)
0000A500 117C 0004 0001             		move.b	#4,obRender(a0)
0000A506 3168 000C 0030             		move.w	obY(a0),swi_origY(a0) ; save position on y-axis
0000A50C 117C 0010 0014             		move.b	#$10,obActWid(a0)
0000A512 317C 0280 0018             		move.w	#$280,obPriority(a0)
0000A518                            
0000A518                            Swi_Action:	; Routine 2
0000A518 3168 0030 000C             		move.w	swi_origY(a0),obY(a0) ; restore position on y-axis
0000A51E 323C 0010                  		move.w	#$10,d1
0000A522 6100 0000                  		bsr.w	Swi_ChkTouch	; check if Sonic touches the switch
0000A526 6700                       		beq.s	Swi_ChkDel	; if not, branch
0000A528                            
0000A528 5468 000C                  		addq.w	#2,obY(a0)	; move object 2	pixels
0000A52C 7001                       		moveq	#1,d0
0000A52E 31C0 F7E0                  		move.w	d0,(f_switch).w	; set switch 0 as "pressed"
0000A532                            
0000A532                            Swi_ChkDel:
0000A532 6100 0000                  		bsr.w	DisplaySprite
0000A554 4E75                       		rts	
0000A556                            ; ===========================================================================
0000A556                            
0000A556                            Swi_Delete:	; Routine 4
0000A556 6100 0000                  		bsr.w	DeleteObject
0000A55A 4E75                       		rts	
0000A55C                            
0000A55C                            ; ---------------------------------------------------------------------------
0000A55C                            ; Subroutine to	check if Sonic touches the object
0000A55C                            ; ---------------------------------------------------------------------------
0000A55C                            
0000A55C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000A55C                            
0000A55C                            
0000A55C                            Swi_ChkTouch:
0000A55C 43F8 D000                  		lea	(v_player).w,a1
0000A560 3029 0008                  		move.w	obX(a1),d0
0000A564 9068 0008                  		sub.w	obX(a0),d0
0000A568 D041                       		add.w	d1,d0
0000A56A 6B00                       		bmi.s	Swi_NoTouch
0000A56C D241                       		add.w	d1,d1
0000A56E B041                       		cmp.w	d1,d0
0000A570 6400                       		bcc.s	Swi_NoTouch
0000A572 3429 000C                  		move.w	obY(a1),d2
0000A576 1229 0016                  		move.b	obHeight(a1),d1
0000A57A 4881                       		ext.w	d1
0000A57C D242                       		add.w	d2,d1
0000A57E 3028 000C                  		move.w	obY(a0),d0
0000A582 0440 0010                  		subi.w	#$10,d0
0000A586 9041                       		sub.w	d1,d0
0000A588 6200                       		bhi.s	Swi_NoTouch
0000A58A 0C40 FFF0                  		cmpi.w	#-$10,d0
0000A58E 6500                       		bcs.s	Swi_NoTouch
0000A590 70FF                       		moveq	#-1,d0		; Sonic has touched it
0000A592 4E75                       		rts	
0000A594                            ; ===========================================================================
0000A594                            
0000A594                            Swi_NoTouch:
0000A594 7000                       		moveq	#0,d0		; Sonic hasn't touched it
0000A596 4E75                       		rts	
0000A598                            ; End of function Swi_ChkTouch
0000A598                            ; End of function Swi_ChkTouch
0000A598                            Map_Swi:	include	"_maps\Unused Switch.asm"
0000A598                            ; ---------------------------------------------------------------------------
0000A598                            ; Sprite mappings - Unused switch thingy
0000A598                            ; ---------------------------------------------------------------------------
0000A598                            Map_Swi_internal:
0000A598 0000                       		dc.w byte_891E-Map_Swi_internal
0000A59A 04                         byte_891E:	dc.b 4
0000A59B E807 0054 F0               		dc.b $E8, 7, 0,	$54, $F0
0000A5A0 0805 005C F0               		dc.b 8,	5, 0, $5C, $F0
0000A5A5 E807 0054 00               		dc.b $E8, 7, 0,	$54, 0
0000A5AA 0805 005C 00               		dc.b 8,	5, 0, $5C, 0
0000A5B0 00                         		even
0000A5B0 00                         		even
0000A5B0                            
0000A5B0                            		include	"_incObj\2A SBZ Small Door.asm"
0000A5B0                            ; ---------------------------------------------------------------------------
0000A5B0                            ; Object 2A - small vertical door (SBZ)
0000A5B0                            ; ---------------------------------------------------------------------------
0000A5B0                            
0000A5B0                            AutoDoor:
0000A5B0 7000                       		moveq	#0,d0
0000A5B2 1028 0024                  		move.b	obRoutine(a0),d0
0000A5B6 323B 0000                  		move.w	ADoor_Index(pc,d0.w),d1
0000A5BA 4EFB 1000                  		jmp	ADoor_Index(pc,d1.w)
0000A5BE                            ; ===========================================================================
0000A5BE 0000                       ADoor_Index:	dc.w ADoor_Main-ADoor_Index
0000A5C0 0000                       		dc.w ADoor_OpenShut-ADoor_Index
0000A5C2                            ; ===========================================================================
0000A5C2                            
0000A5C2                            ADoor_Main:	; Routine 0
0000A5C2 5428 0024                  		addq.b	#2,obRoutine(a0)
0000A5C6 217C 0000 0000 0004        		move.l	#Map_ADoor,obMap(a0)
0000A5CE 317C 42EA 0002             		move.w	#$42EA,obGfx(a0)
0000A5D4 0028 0004 0001             		ori.b	#4,obRender(a0)
0000A5DA 117C 0008 0014             		move.b	#8,obActWid(a0)
0000A5E0                            		;move.b	#4,obPriority(a0)
0000A5E0                            
0000A5E0                            ADoor_OpenShut:	; Routine 2
0000A5E0 323C 0040                  		move.w	#$40,d1		; set range for door detection
0000A5E4 4228 001C                  		clr.b	obAnim(a0)	; use "closing"	animation
0000A5E8 3038 D008                  		move.w	(v_player+obX).w,d0
0000A5EC D041                       		add.w	d1,d0
0000A5EE B068 0008                  		cmp.w	obX(a0),d0
0000A5F2 6500                       		bcs.s	ADoor_Animate
0000A5F4 9041                       		sub.w	d1,d0
0000A5F6 9041                       		sub.w	d1,d0
0000A5F8 B068 0008                  		cmp.w	obX(a0),d0	; is Sonic > $40 pixels from door?
0000A5FC 6400                       		bcc.s	ADoor_Animate	; close door
0000A5FE D041                       		add.w	d1,d0
0000A600 B068 0008                  		cmp.w	obX(a0),d0	; is Sonic left of the door?
0000A604 6400                       		bcc.s	loc_899A	; if yes, branch
0000A606 0828 0000 0022             		btst	#0,obStatus(a0)
0000A60C 6600                       		bne.s	ADoor_Animate
0000A60E 6000                       		bra.s	ADoor_Open
0000A610                            ; ===========================================================================
0000A610                            
0000A610                            loc_899A:
0000A610 0828 0000 0022             		btst	#0,obStatus(a0)
0000A616 6700                       		beq.s	ADoor_Animate
0000A618                            
0000A618                            ADoor_Open:
0000A618 117C 0001 001C             		move.b	#1,obAnim(a0)	; use "opening"	animation
0000A61E                            
0000A61E                            ADoor_Animate:
0000A61E 43F9 0000 0000             		lea	(Ani_ADoor).l,a1
0000A624 6100 0000                  		bsr.w	AnimateSprite
0000A628 4A28 001A                  		tst.b	obFrame(a0)	; is the door open?
0000A62C 6600                       		bne.s	@remember	; if yes, branch
0000A62E 323C 0011                  		move.w	#$11,d1
0000A632 343C 0020                  		move.w	#$20,d2
0000A636 3602                       		move.w	d2,d3
0000A638 5243                       		addq.w	#1,d3
0000A63A 3828 0008                  		move.w	obX(a0),d4
0000A63E 6100 0000                  		bsr.w	SolidObject
0000A642                            
0000A642                            	@remember:
0000A642 6000 0000                  		bra.w	RememberState
0000A642 6000 0000                  		bra.w	RememberState
0000A646                            		include	"_anim\SBZ Small Door.asm"
0000A646                            ; ---------------------------------------------------------------------------
0000A646                            ; Animation script - doors (SBZ)
0000A646                            ; ---------------------------------------------------------------------------
0000A646 0000                       Ani_ADoor:	dc.w @close-Ani_ADoor
0000A648 0000                       		dc.w @open-Ani_ADoor
0000A64A 0008 0706 0504 0302 0100+  @close:		dc.b 0,	8, 7, 6, 5, 4, 3, 2, 1,	0, afBack, 1
0000A656 0000 0102 0304 0506 0708+  @open:		dc.b 0,	0, 1, 2, 3, 4, 5, 6, 7,	8, afBack, 1
0000A662                            		even
0000A662                            		even
0000A662                            Map_ADoor:	include	"_maps\SBZ Small Door.asm"
0000A662                            ; --------------------------------------------------------------------------------
0000A662                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0000A662                            ; --------------------------------------------------------------------------------
0000A662                            
0000A662                            SME_YnmwF:	
0000A662 0000 0000                  		dc.w SME_YnmwF_12-SME_YnmwF, SME_YnmwF_1D-SME_YnmwF	
0000A666 0000 0000                  		dc.w SME_YnmwF_28-SME_YnmwF, SME_YnmwF_33-SME_YnmwF	
0000A66A 0000 0000                  		dc.w SME_YnmwF_3E-SME_YnmwF, SME_YnmwF_49-SME_YnmwF	
0000A66E 0000 0000                  		dc.w SME_YnmwF_54-SME_YnmwF, SME_YnmwF_5F-SME_YnmwF	
0000A672 0000                       		dc.w SME_YnmwF_6A-SME_YnmwF	
0000A674 02                         SME_YnmwF_12:	dc.b 2	
0000A675 E007 0800 F8               		dc.b $E0, 7, 8, 0, $F8	
0000A67A 0007 0800 F8               		dc.b 0, 7, 8, 0, $F8	
0000A67F 02                         SME_YnmwF_1D:	dc.b 2	
0000A680 DC07 0800 F8               		dc.b $DC, 7, 8, 0, $F8	
0000A685 0407 0800 F8               		dc.b 4, 7, 8, 0, $F8	
0000A68A 02                         SME_YnmwF_28:	dc.b 2	
0000A68B D807 0800 F8               		dc.b $D8, 7, 8, 0, $F8	
0000A690 0807 0800 F8               		dc.b 8, 7, 8, 0, $F8	
0000A695 02                         SME_YnmwF_33:	dc.b 2	
0000A696 D407 0800 F8               		dc.b $D4, 7, 8, 0, $F8	
0000A69B 0C07 0800 F8               		dc.b $C, 7, 8, 0, $F8	
0000A6A0 02                         SME_YnmwF_3E:	dc.b 2	
0000A6A1 D007 0800 F8               		dc.b $D0, 7, 8, 0, $F8	
0000A6A6 1007 0800 F8               		dc.b $10, 7, 8, 0, $F8	
0000A6AB 02                         SME_YnmwF_49:	dc.b 2	
0000A6AC CC07 0800 F8               		dc.b $CC, 7, 8, 0, $F8	
0000A6B1 1407 0800 F8               		dc.b $14, 7, 8, 0, $F8	
0000A6B6 02                         SME_YnmwF_54:	dc.b 2	
0000A6B7 C807 0800 F8               		dc.b $C8, 7, 8, 0, $F8	
0000A6BC 1807 0800 F8               		dc.b $18, 7, 8, 0, $F8	
0000A6C1 02                         SME_YnmwF_5F:	dc.b 2	
0000A6C2 C407 0800 F8               		dc.b $C4, 7, 8, 0, $F8	
0000A6C7 1C07 0800 F8               		dc.b $1C, 7, 8, 0, $F8	
0000A6CC 02                         SME_YnmwF_6A:	dc.b 2	
0000A6CD C007 0800 F8               		dc.b $C0, 7, 8, 0, $F8	
0000A6D2 2007 0800 F8               		dc.b $20, 7, 8, 0, $F8	
0000A6D8 00                         		even
0000A6D8 00                         		even
0000A6D8                            
0000A6D8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000A6D8                            
0000A6D8                            
0000A6D8                            Obj44_SolidWall:
0000A6D8 6100 0000                  		bsr.w	Obj44_SolidWall2
0000A6DC 6700                       		beq.s	loc_8AA8
0000A6DE 6B00 0000                  		bmi.w	loc_8AC4
0000A6E2 4A40                       		tst.w	d0
0000A6E4 6700 0000                  		beq.w	loc_8A92
0000A6E8 6B00                       		bmi.s	loc_8A7C
0000A6EA 4A69 0010                  		tst.w	obVelX(a1)
0000A6EE 6B00                       		bmi.s	loc_8A92
0000A6F0 6000                       		bra.s	loc_8A82
0000A6F2                            ; ===========================================================================
0000A6F2                            
0000A6F2                            loc_8A7C:
0000A6F2 4A69 0010                  		tst.w	obVelX(a1)
0000A6F6 6A00                       		bpl.s	loc_8A92
0000A6F8                            
0000A6F8                            loc_8A82:
0000A6F8 9169 0008                  		sub.w	d0,obX(a1)
0000A6FC 337C 0000 0020             		move.w	#0,obInertia(a1)
0000A702 337C 0000 0010             		move.w	#0,obVelX(a1)
0000A708                            
0000A708                            loc_8A92:
0000A708 0829 0001 0022             		btst	#1,obStatus(a1)
0000A70E 6600                       		bne.s	loc_8AB6
0000A710 08E9 0005 0022             		bset	#5,obStatus(a1)
0000A716 08E8 0005 0022             		bset	#5,obStatus(a0)
0000A71C 4E75                       		rts	
0000A71E                            ; ===========================================================================
0000A71E                            
0000A71E                            loc_8AA8:
0000A71E 0828 0005 0022             		btst	#5,obStatus(a0)
0000A724 6700                       		beq.s	locret_8AC2
0000A726 337C 0000 001C             		move.w	#id_Run,obAnim(a1)
0000A72C                            
0000A72C                            loc_8AB6:
0000A72C 08A8 0005 0022             		bclr	#5,obStatus(a0)
0000A732 08A9 0005 0022             		bclr	#5,obStatus(a1)
0000A738                            
0000A738                            locret_8AC2:
0000A738 4E75                       		rts	
0000A73A                            ; ===========================================================================
0000A73A                            
0000A73A                            loc_8AC4:
0000A73A 4A69 0012                  		tst.w	obVelY(a1)
0000A73E 6A00                       		bpl.s	locret_8AD8
0000A740 4A43                       		tst.w	d3
0000A742 6A00                       		bpl.s	locret_8AD8
0000A744 9769 000C                  		sub.w	d3,obY(a1)
0000A748 337C 0000 0012             		move.w	#0,obVelY(a1)
0000A74E                            
0000A74E                            locret_8AD8:
0000A74E 4E75                       		rts	
0000A750                            ; End of function Obj44_SolidWall
0000A750                            
0000A750                            
0000A750                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000A750                            
0000A750                            
0000A750                            Obj44_SolidWall2:
0000A750 43F8 D000                  		lea	(v_player).w,a1
0000A754 3029 0008                  		move.w	obX(a1),d0
0000A758 9068 0008                  		sub.w	obX(a0),d0
0000A75C D041                       		add.w	d1,d0
0000A75E 6B00                       		bmi.s	loc_8B48
0000A760 3601                       		move.w	d1,d3
0000A762 D643                       		add.w	d3,d3
0000A764 B043                       		cmp.w	d3,d0
0000A766 6200                       		bhi.s	loc_8B48
0000A768 1629 0016                  		move.b	obHeight(a1),d3
0000A76C 4883                       		ext.w	d3
0000A76E D443                       		add.w	d3,d2
0000A770 3629 000C                  		move.w	obY(a1),d3
0000A774 9668 000C                  		sub.w	obY(a0),d3
0000A778 D642                       		add.w	d2,d3
0000A77A 6B00                       		bmi.s	loc_8B48
0000A77C 3802                       		move.w	d2,d4
0000A77E D844                       		add.w	d4,d4
0000A780 B644                       		cmp.w	d4,d3
0000A782 6400                       		bhs.s	loc_8B48
0000A784 4A38 F7C8                  		tst.b	(f_lockmulti).w
0000A788 6B00                       		bmi.s	loc_8B48
0000A78A 0C38 0006 D024             		cmpi.b	#6,(v_player+obRoutine).w
0000A790 6400                       		bhs.s	loc_8B48
0000A792 4A78 FE08                  		tst.w	(v_debuguse).w
0000A796 6600                       		bne.s	loc_8B48
0000A798 3A00                       		move.w	d0,d5
0000A79A B240                       		cmp.w	d0,d1
0000A79C 6400                       		bhs.s	loc_8B30
0000A79E D241                       		add.w	d1,d1
0000A7A0 9041                       		sub.w	d1,d0
0000A7A2 3A00                       		move.w	d0,d5
0000A7A4 4445                       		neg.w	d5
0000A7A6                            
0000A7A6                            loc_8B30:
0000A7A6 3203                       		move.w	d3,d1
0000A7A8 B443                       		cmp.w	d3,d2
0000A7AA 6400                       		bhs.s	loc_8B3C
0000A7AC 9644                       		sub.w	d4,d3
0000A7AE 3203                       		move.w	d3,d1
0000A7B0 4441                       		neg.w	d1
0000A7B2                            
0000A7B2                            loc_8B3C:
0000A7B2 BA41                       		cmp.w	d1,d5
0000A7B4 6200                       		bhi.s	loc_8B44
0000A7B6 7801                       		moveq	#1,d4
0000A7B8 4E75                       		rts	
0000A7BA                            ; ===========================================================================
0000A7BA                            
0000A7BA                            loc_8B44:
0000A7BA 78FF                       		moveq	#-1,d4
0000A7BC 4E75                       		rts	
0000A7BE                            ; ===========================================================================
0000A7BE                            
0000A7BE                            loc_8B48:
0000A7BE 7800                       		moveq	#0,d4
0000A7C0 4E75                       		rts	
0000A7C2                            ; End of function Obj44_SolidWall2
0000A7C2                            
0000A7C2                            ; ===========================================================================
0000A7C2                            
0000A7C2                            		include	"_incObj\1E Ball Hog.asm"
0000A7C2                            ; ---------------------------------------------------------------------------
0000A7C2                            ; Object 1E - Ball Hog enemy (SBZ)
0000A7C2                            ; ---------------------------------------------------------------------------
0000A7C2                            
0000A7C2                            BallHog:
0000A7C2 7000                       		moveq	#0,d0
0000A7C4 1028 0024                  		move.b	obRoutine(a0),d0
0000A7C8 323B 0000                  		move.w	Hog_Index(pc,d0.w),d1
0000A7CC 4EFB 1000                  		jmp	Hog_Index(pc,d1.w)
0000A7D0                            ; ===========================================================================
0000A7D0 0000                       Hog_Index:	dc.w Hog_Main-Hog_Index
0000A7D2 0000                       		dc.w Hog_Action-Hog_Index
0000A7D4                            
0000A7D4 =00000032                  hog_launchflag:	equ $32		; 0 to launch a cannonball
0000A7D4                            ; ===========================================================================
0000A7D4                            
0000A7D4                            Hog_Main:	; Routine 0
0000A7D4 117C 0013 0016             		move.b	#$13,obHeight(a0)
0000A7DA 117C 0008 0017             		move.b	#8,obWidth(a0)
0000A7E0 217C 0000 0000 0004        		move.l	#Map_Hog,obMap(a0)
0000A7E8 317C 0302 0002             		move.w	#$302,obGfx(a0)
0000A7EE 117C 0004 0001             		move.b	#4,obRender(a0)
0000A7F4 317C 0200 0018             		move.w	#$200,obPriority(a0)
0000A7FA 117C 0005 0020             		move.b	#5,obColType(a0)
0000A800 117C 000C 0014             		move.b	#$C,obActWid(a0)
0000A806 6100 0000                  		bsr.w	ObjectFall
0000A80A 4EB9 0000 0000             		jsr	(ObjFloorDist).l	; find floor
0000A810 4A41                       		tst.w	d1
0000A812 6A00                       		bpl.s	@floornotfound
0000A814 D368 000C                  		add.w	d1,obY(a0)
0000A818 317C 0000 0012             		move.w	#0,obVelY(a0)
0000A81E 5428 0024                  		addq.b	#2,obRoutine(a0)
0000A822                            
0000A822                            	@floornotfound:
0000A822 4E75                       		rts	
0000A824                            ; ===========================================================================
0000A824                            
0000A824                            Hog_Action:	; Routine 2
0000A824 43F9 0000 0000             		lea	(Ani_Hog).l,a1
0000A82A 6100 0000                  		bsr.w	AnimateSprite
0000A82E 0C28 0001 001A             		cmpi.b	#1,obFrame(a0)	; is final frame (01) displayed?
0000A834 6600                       		bne.s	@setlaunchflag	; if not, branch
0000A836 4A28 0032                  		tst.b	hog_launchflag(a0)	; is it	set to launch cannonball?
0000A83A 6700                       		beq.s	@makeball	; if yes, branch
0000A83C 6000                       		bra.s	@remember
0000A83E                            ; ===========================================================================
0000A83E                            
0000A83E                            @setlaunchflag:
0000A83E 4228 0032                  		clr.b	hog_launchflag(a0)	; set to launch	cannonball
0000A842                            
0000A842                            @remember:
0000A842 6000 0000                  		bra.w	RememberState
0000A846                            ; ===========================================================================
0000A846                            
0000A846                            @makeball:
0000A846 117C 0001 0032             		move.b	#1,hog_launchflag(a0)
0000A84C 6100 0000                  		bsr.w	FindFreeObj
0000A850 6600                       		bne.s	@fail
0000A852 12BC 0000                  		move.b	#id_Cannonball,0(a1) ; load cannonball object ($20)
0000A856 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000A85C 3368 000C 000C             		move.w	obY(a0),obY(a1)
0000A862 337C FF00 0010             		move.w	#-$100,obVelX(a1) ; cannonball bounces to the left
0000A868 337C 0000 0012             		move.w	#0,obVelY(a1)
0000A86E 70FC                       		moveq	#-4,d0
0000A870 0828 0000 0022             		btst	#0,obStatus(a0)	; is Ball Hog facing right?
0000A876 6700                       		beq.s	@noflip		; if not, branch
0000A878 4440                       		neg.w	d0
0000A87A 4469 0010                  		neg.w	obVelX(a1)	; cannonball bounces to	the right
0000A87E                            
0000A87E                            	@noflip:
0000A87E D169 0008                  		add.w	d0,obX(a1)
0000A882 0669 000C 000C             		addi.w	#$C,obY(a1)
0000A888 1368 0028 0028             		move.b	obSubtype(a0),obSubtype(a1) ; copy object type from Ball Hog
0000A88E                            
0000A88E                            	@fail:
0000A88E 60B2                       		bra.s	@remember
0000A88E 60B2                       		bra.s	@remember
0000A890                            		include	"_incObj\20 Cannonball.asm"
0000A890                            ; ---------------------------------------------------------------------------
0000A890                            ; Object 20 - cannonball that Ball Hog throws (SBZ)
0000A890                            ; ---------------------------------------------------------------------------
0000A890                            
0000A890                            Cannonball:
0000A890 7000                       		moveq	#0,d0
0000A892 1028 0024                  		move.b	obRoutine(a0),d0
0000A896 323B 0000                  		move.w	Cbal_Index(pc,d0.w),d1
0000A89A 4EFB 1000                  		jmp	Cbal_Index(pc,d1.w)
0000A89E                            ; ===========================================================================
0000A89E 0000                       Cbal_Index:	dc.w Cbal_Main-Cbal_Index
0000A8A0 0000                       		dc.w Cbal_Bounce-Cbal_Index
0000A8A2                            
0000A8A2 =00000030                  cbal_time:	equ $30		; time until the cannonball explodes (2 bytes)
0000A8A2                            ; ===========================================================================
0000A8A2                            
0000A8A2                            Cbal_Main:	; Routine 0
0000A8A2 5428 0024                  		addq.b	#2,obRoutine(a0)
0000A8A6 117C 0007 0016             		move.b	#7,obHeight(a0)
0000A8AC 217C 0000 0000 0004        		move.l	#Map_Hog,obMap(a0)
0000A8B4 317C 2302 0002             		move.w	#$2302,obGfx(a0)
0000A8BA 117C 0004 0001             		move.b	#4,obRender(a0)
0000A8C0 317C 0180 0018             		move.w	#$180,obPriority(a0)
0000A8C6 117C 0087 0020             		move.b	#$87,obColType(a0)
0000A8CC 117C 0008 0014             		move.b	#8,obActWid(a0)
0000A8D2 7000                       		moveq	#0,d0
0000A8D4 1028 0028                  		move.b	obSubtype(a0),d0 ; move subtype to d0
0000A8D8 C0FC 003C                  		mulu.w	#60,d0		; multiply by 60 frames	(1 second)
0000A8DC 3140 0030                  		move.w	d0,cbal_time(a0) ; set explosion time
0000A8E0 117C 0004 001A             		move.b	#4,obFrame(a0)
0000A8E6                            
0000A8E6                            Cbal_Bounce:	; Routine 2
0000A8E6 4EB9 0000 0000             		jsr	(ObjectFall).l
0000A8EC 4A68 0012                  		tst.w	obVelY(a0)
0000A8F0 6B00                       		bmi.s	Cbal_ChkExplode
0000A8F2 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0000A8F8 4A41                       		tst.w	d1		; has ball hit the floor?
0000A8FA 6A00                       		bpl.s	Cbal_ChkExplode	; if not, branch
0000A8FC                            
0000A8FC D368 000C                  		add.w	d1,obY(a0)
0000A900 317C FD00 0012             		move.w	#-$300,obVelY(a0) ; bounce
0000A906 4A03                       		tst.b	d3
0000A908 6700                       		beq.s	Cbal_ChkExplode
0000A90A 6B00                       		bmi.s	loc_8CA4
0000A90C 4A68 0010                  		tst.w	obVelX(a0)
0000A910 6A00                       		bpl.s	Cbal_ChkExplode
0000A912 4468 0010                  		neg.w	obVelX(a0)
0000A916 6000                       		bra.s	Cbal_ChkExplode
0000A918                            ; ===========================================================================
0000A918                            
0000A918                            loc_8CA4:
0000A918 4A68 0010                  		tst.w	obVelX(a0)
0000A91C 6B00                       		bmi.s	Cbal_ChkExplode
0000A91E 4468 0010                  		neg.w	obVelX(a0)
0000A922                            
0000A922                            Cbal_ChkExplode:
0000A922 5368 0030                  		subq.w	#1,cbal_time(a0) ; subtract 1 from explosion time
0000A926 6A00                       		bpl.s	Cbal_Animate	; if time is > 0, branch
0000A928                            
0000A928                            	Cbal_Explode:
0000A928 10BC 0000                  		move.b	#id_MissileDissolve,0(a0)
0000A92C 10BC 0000                  		move.b	#id_ExplosionBomb,0(a0)	; change object	to an explosion	($3F)
0000A930 117C 0000 0024             		move.b	#0,obRoutine(a0) ; reset routine counter
0000A936 6000 0000                  		bra.w	ExplosionBomb	; jump to explosion code
0000A93A                            ; ===========================================================================
0000A93A                            
0000A93A                            Cbal_Animate:
0000A93A 5328 001E                  		subq.b	#1,obTimeFrame(a0) ; subtract 1 from frame duration
0000A93E 6A00                       		bpl.s	Cbal_Display
0000A940 117C 0005 001E             		move.b	#5,obTimeFrame(a0) ; set frame duration to 5 frames
0000A946 0868 0000 001A             		bchg	#0,obFrame(a0)	; change frame
0000A94C                            
0000A94C                            Cbal_Display:
0000A94C 6100 0000                  		bsr.w	DisplaySprite
0000A950 3038 F72E                  		move.w	(v_limitbtm2).w,d0
0000A954 0640 00E0                  		addi.w	#$E0,d0
0000A958 B068 000C                  		cmp.w	obY(a0),d0	; has object fallen off	the level?
0000A95C 6500 0000                  		bcs.w	DeleteObject	; if yes, branch
0000A960 4E75                       		rts	
0000A960 4E75                       		rts	
0000A962                            		include	"_incObj\24, 27 & 3F Explosions.asm"
0000A962                            ; ---------------------------------------------------------------------------
0000A962                            ; Object 24 - buzz bomber missile vanishing (unused?)
0000A962                            ; ---------------------------------------------------------------------------
0000A962                            
0000A962                            MissileDissolve:
0000A962 7000                       		moveq	#0,d0
0000A964 1028 0024                  		move.b	obRoutine(a0),d0
0000A968 323B 0000                  		move.w	MDis_Index(pc,d0.w),d1
0000A96C 4EFB 1000                  		jmp	MDis_Index(pc,d1.w)
0000A970                            ; ===========================================================================
0000A970 0000                       MDis_Index:	dc.w MDis_Main-MDis_Index
0000A972 0000                       		dc.w MDis_Animate-MDis_Index
0000A974                            ; ===========================================================================
0000A974                            
0000A974                            MDis_Main:	; Routine 0
0000A974 5428 0024                  		addq.b	#2,obRoutine(a0)
0000A978 217C 0000 0000 0004        		move.l	#Map_MisDissolve,obMap(a0)
0000A980 317C 041C 0002             		move.w	#$41C,obGfx(a0)
0000A986 117C 0004 0001             		move.b	#4,obRender(a0)
0000A98C 317C 0080 0018             		move.w	#$80,obPriority(a0)
0000A992 117C 0000 0020             		move.b	#0,obColType(a0)
0000A998 117C 000C 0014             		move.b	#$C,obActWid(a0)
0000A99E 117C 0009 001E             		move.b	#9,obTimeFrame(a0)
0000A9A4 117C 0000 001A             		move.b	#0,obFrame(a0)
0000A9B4                            
0000A9B4                            MDis_Animate:	; Routine 2
0000A9B4 5328 001E                  		subq.b	#1,obTimeFrame(a0) ; subtract 1 from frame duration
0000A9B8 6A00                       		bpl.s	@display
0000A9BA 117C 0009 001E             		move.b	#9,obTimeFrame(a0) ; set frame duration to 9 frames
0000A9C0 5228 001A                  		addq.b	#1,obFrame(a0)	; next frame
0000A9C4 0C28 0004 001A             		cmpi.b	#4,obFrame(a0)	; has animation completed?
0000A9CA 6700 0000                  		beq.w	DeleteObject	; if yes, branch
0000A9CE                            
0000A9CE                            	@display:
0000A9CE 6000 0000                  		bra.w	DisplaySprite
0000A9D2                            ; ===========================================================================
0000A9D2                            
0000A9D2                            ; ---------------------------------------------------------------------------
0000A9D2                            ; Object 27 - explosion	from a destroyed enemy or monitor
0000A9D2                            ; ---------------------------------------------------------------------------
0000A9D2                            
0000A9D2                            ExplosionItem:
0000A9D2 7000                       		moveq	#0,d0
0000A9D4 1028 0024                  		move.b	obRoutine(a0),d0
0000A9D8 323B 0000                  		move.w	ExItem_Index(pc,d0.w),d1
0000A9DC 4EFB 1000                  		jmp	ExItem_Index(pc,d1.w)
0000A9E0                            ; ===========================================================================
0000A9E0 0000                       ExItem_Index:	dc.w ExItem_Animal-ExItem_Index
0000A9E2 0000                       		dc.w ExItem_Main-ExItem_Index
0000A9E4 0000                       		dc.w ExItem_Animate-ExItem_Index
0000A9E6                            ; ===========================================================================
0000A9E6                            
0000A9E6                            ExItem_Animal:	; Routine 0
0000A9E6 5428 0024                  		addq.b	#2,obRoutine(a0)
0000A9EA 6100 0000                  		bsr.w	FindFreeObj
0000A9EE 6600                       		bne.s	ExItem_Main
0000A9F0 12BC 0000                  		move.b	#id_Animals,0(a1) ; load animal object
0000A9F4 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000A9FA 3368 000C 000C             		move.w	obY(a0),obY(a1)
0000AA00 3368 003E 003E             		move.w	$3E(a0),$3E(a1)
0000AA06                            
0000AA06                            ExItem_Main:	; Routine 2
0000AA06 5428 0024                  		addq.b	#2,obRoutine(a0)
0000AA0A 217C 0000 0000 0004        		move.l	#Map_ExplodeItem,obMap(a0)
0000AA12 317C 05A0 0002             		move.w	#$5A0,obGfx(a0)
0000AA18 117C 0004 0001             		move.b	#4,obRender(a0)
0000AA1E 317C 0080 0018             		move.w	#$80,obPriority(a0)
0000AA24 117C 0000 0020             		move.b	#0,obColType(a0)
0000AA2A 117C 000C 0014             		move.b	#$C,obActWid(a0)
0000AA30 117C 0007 001E             		move.b	#7,obTimeFrame(a0) ; set frame duration to 7 frames
0000AA36 117C 0000 001A             		move.b	#0,obFrame(a0)
0000AA46                            
0000AA46                            ExItem_Animate:	; Routine 4 (2 for ExplosionBomb)
0000AA46 5528 001E                  		subq.b	#2,obTimeFrame(a0) ; subtract 1 from frame duration
0000AA4A 6A00                       		bpl.s	@display
0000AA4C 117C 0007 001E             		move.b	#7,obTimeFrame(a0) ; set frame duration to 7 frames
0000AA52 5228 001A                  		addq.b	#1,obFrame(a0)	; next frame
0000AA56 0C28 0005 001A             		cmpi.b	#5,obFrame(a0)	; is the final frame (05) displayed?
0000AA5C 6700 0000                  		beq.w	DeleteObject	; if yes, branch
0000AA60                            
0000AA60                            	@display:
0000AA60 6000 0000                  		bra.w	DisplaySprite
0000AA64                            ; ===========================================================================
0000AA64                            ; ---------------------------------------------------------------------------
0000AA64                            ; Object 3F - explosion	from a destroyed boss, bomb or cannonball
0000AA64                            ; ---------------------------------------------------------------------------
0000AA64                            
0000AA64                            ExplosionBomb:
0000AA64 7000                       		moveq	#0,d0
0000AA66 1028 0024                  		move.b	obRoutine(a0),d0
0000AA6A 323B 0000                  		move.w	ExBom_Index(pc,d0.w),d1
0000AA6E 4EFB 1000                  		jmp	ExBom_Index(pc,d1.w)
0000AA72                            ; ===========================================================================
0000AA72 0000                       ExBom_Index:	dc.w ExBom_Main-ExBom_Index
0000AA74 FFD4                       		dc.w ExItem_Animate-ExBom_Index
0000AA76                            ; ===========================================================================
0000AA76                            
0000AA76                            ExBom_Main:	; Routine 0
0000AA76 5428 0024                  		addq.b	#2,obRoutine(a0)
0000AA7A 217C 0000 0000 0004        		move.l	#Map_ExplodeBomb,obMap(a0)
0000AA82 317C 05A0 0002             		move.w	#$5A0,obGfx(a0)
0000AA88 117C 0004 0001             		move.b	#4,obRender(a0)
0000AA8E 317C 0080 0018             		move.w	#$80,obPriority(a0)
0000AA94 117C 0000 0020             		move.b	#0,obColType(a0)
0000AA9A 117C 000C 0014             		move.b	#$C,obActWid(a0)
0000AAA0 117C 0007 001E             		move.b	#7,obTimeFrame(a0)
0000AAA6 117C 0000 001A             		move.b	#0,obFrame(a0)
0000AAB6                            		include	"_anim\Ball Hog.asm"
0000AAB6                            ; ---------------------------------------------------------------------------
0000AAB6                            ; Animation script - doors (SBZ)
0000AAB6                            ; ---------------------------------------------------------------------------
0000AAB6 0000                       Ani_Hog:	dc.w @hog-Ani_Hog
0000AAB8 0900 0002 0203 0200 0002+  @hog:		dc.b 9,	0, 0, 2, 2, 3, 2, 0, 0,	2, 2, 3, 2, 0, 0, 2, 2, 3, 2, 0, 0, 1, afEnd
0000AAD0 00                         		even
0000AAD0 00                         		even
0000AAD0                            Map_Hog:	include	"_maps\Ball Hog.asm"
0000AAD0                            ; --------------------------------------------------------------------------------
0000AAD0                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0000AAD0                            ; --------------------------------------------------------------------------------
0000AAD0                            
0000AAD0                            SME_ZER01:	
0000AAD0 0000 0000                  		dc.w SME_ZER01_C-SME_ZER01, SME_ZER01_17-SME_ZER01	
0000AAD4 0000 0000                  		dc.w SME_ZER01_22-SME_ZER01, SME_ZER01_2D-SME_ZER01	
0000AAD8 0000 0000                  		dc.w SME_ZER01_38-SME_ZER01, SME_ZER01_3E-SME_ZER01	
0000AADC 02                         SME_ZER01_C:	dc.b 2	
0000AADD EF09 2000 F4               		dc.b $EF, 9, $20, 0, $F4	
0000AAE2 FF0A 2006 F4               		dc.b $FF, $A, $20, 6, $F4	
0000AAE7 02                         SME_ZER01_17:	dc.b 2	
0000AAE8 EF09 2000 F4               		dc.b $EF, 9, $20, 0, $F4	
0000AAED FF0A 200F F4               		dc.b $FF, $A, $20, $F, $F4	
0000AAF2 02                         SME_ZER01_22:	dc.b 2	
0000AAF3 F409 2000 F4               		dc.b $F4, 9, $20, 0, $F4	
0000AAF8 0409 2018 F4               		dc.b 4, 9, $20, $18, $F4	
0000AAFD 02                         SME_ZER01_2D:	dc.b 2	
0000AAFE E409 2000 F4               		dc.b $E4, 9, $20, 0, $F4	
0000AB03 F40A 201E F4               		dc.b $F4, $A, $20, $1E, $F4	
0000AB08 01                         SME_ZER01_38:	dc.b 1	
0000AB09 F805 0027 F8               		dc.b $F8, 5, 0, $27, $F8	
0000AB0E 01                         SME_ZER01_3E:	dc.b 1	
0000AB0F F805 602B F8               		dc.b $F8, 5, $60, $2B, $F8	
0000AB14                            		even
0000AB14                            		even
0000AB14                            Map_MisDissolve:include	"_maps\Buzz Bomber Missile Dissolve.asm"
0000AB14                            ; ---------------------------------------------------------------------------
0000AB14                            ; Sprite mappings - buzz bomber missile vanishing
0000AB14                            ; ---------------------------------------------------------------------------
0000AB14                            Map_MisDissolve_internal:
0000AB14 0000                       		dc.w byte_8EAE-Map_MisDissolve_internal
0000AB16 0000                       		dc.w byte_8EB4-Map_MisDissolve_internal
0000AB18 0000                       		dc.w byte_8EBA-Map_MisDissolve_internal
0000AB1A 0000                       		dc.w byte_8EC0-Map_MisDissolve_internal
0000AB1C 01                         byte_8EAE:	dc.b 1
0000AB1D F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0000AB22 01                         byte_8EB4:	dc.b 1
0000AB23 F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
0000AB28 01                         byte_8EBA:	dc.b 1
0000AB29 F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
0000AB2E 01                         byte_8EC0:	dc.b 1
0000AB2F F40A 001B F4               		dc.b $F4, $A, 0, $1B, $F4
0000AB34                            		even
0000AB34                            		even
0000AB34                            		include	"_maps\Explosions.asm"
0000AB34                            ; ---------------------------------------------------------------------------
0000AB34                            ; Sprite mappings - explosion from a badnik or monitor
0000AB34                            ; ---------------------------------------------------------------------------
0000AB34 0000 0000                  Map_ExplodeItem:dc.w byte_8ED0-Map_ExplodeItem, byte_8ED6-Map_ExplodeItem
0000AB38 0000 0000                  		dc.w byte_8EDC-Map_ExplodeItem, byte_8EE2-Map_ExplodeItem
0000AB3C 0000                       		dc.w byte_8EF7-Map_ExplodeItem
0000AB3E 01                         byte_8ED0:	dc.b 1
0000AB3F F809 0000 F4               		dc.b $F8, 9, 0,	0, $F4
0000AB44 01                         byte_8ED6:	dc.b 1
0000AB45 F00F 0006 F0               		dc.b $F0, $F, 0, 6, $F0
0000AB4A 01                         byte_8EDC:	dc.b 1
0000AB4B F00F 0016 F0               		dc.b $F0, $F, 0, $16, $F0
0000AB50 04                         byte_8EE2:	dc.b 4
0000AB51 EC0A 0026 EC               		dc.b $EC, $A, 0, $26, $EC
0000AB56 EC05 002F 04               		dc.b $EC, 5, 0,	$2F, 4
0000AB5B 0405 182F EC               		dc.b 4,	5, $18,	$2F, $EC
0000AB60 FC0A 1826 FC               		dc.b $FC, $A, $18, $26,	$FC
0000AB65 04                         byte_8EF7:	dc.b 4
0000AB66 EC0A 0033 EC               		dc.b $EC, $A, 0, $33, $EC
0000AB6B EC05 003C 04               		dc.b $EC, 5, 0,	$3C, 4
0000AB70 0405 183C EC               		dc.b 4,	5, $18,	$3C, $EC
0000AB75 FC0A 1833 FC               		dc.b $FC, $A, $18, $33,	$FC
0000AB7A                            		even
0000AB7A                            ; ---------------------------------------------------------------------------
0000AB7A                            ; Sprite mappings - explosion from when	a boss is destroyed
0000AB7A                            ; ---------------------------------------------------------------------------
0000AB7A FFC4                       Map_ExplodeBomb:dc.w byte_8ED0-Map_ExplodeBomb
0000AB7C 0000                       		dc.w byte_8F16-Map_ExplodeBomb
0000AB7E 0000                       		dc.w byte_8F1C-Map_ExplodeBomb
0000AB80 FFD6                       		dc.w byte_8EE2-Map_ExplodeBomb
0000AB82 FFEB                       		dc.w byte_8EF7-Map_ExplodeBomb
0000AB84 01                         byte_8F16:	dc.b 1
0000AB85 F00F 0040 F0               		dc.b $F0, $F, 0, $40, $F0
0000AB8A 01                         byte_8F1C:	dc.b 1
0000AB8B F00F 0050 F0               		dc.b $F0, $F, 0, $50, $F0
0000AB90                            		even
0000AB90                            		even
0000AB90                            
0000AB90                            		include	"_incObj\28 Animals.asm"
0000AB90                            ; ---------------------------------------------------------------------------
0000AB90                            ; Object 28 - animals
0000AB90                            ; ---------------------------------------------------------------------------
0000AB90                            
0000AB90                            Animals:
0000AB90 7000                       		moveq	#0,d0
0000AB92 1028 0024                  		move.b	obRoutine(a0),d0
0000AB96 323B 0000                  		move.w	Anml_Index(pc,d0.w),d1
0000AB9A 4EFB 1000                  		jmp	Anml_Index(pc,d1.w)
0000AB9E                            ; ===========================================================================
0000AB9E 0000 0000                  Anml_Index:	dc.w Anml_Ending-Anml_Index, loc_912A-Anml_Index
0000ABA2 0000 0000                  		dc.w loc_9184-Anml_Index, loc_91C0-Anml_Index
0000ABA6 0000 0000                  		dc.w loc_9184-Anml_Index, loc_9184-Anml_Index
0000ABAA 0000 0000                  		dc.w loc_9184-Anml_Index, loc_91C0-Anml_Index
0000ABAE 0000 0000                  		dc.w loc_9184-Anml_Index, loc_9240-Anml_Index
0000ABB2 0000 0000                  		dc.w loc_9260-Anml_Index, loc_9260-Anml_Index
0000ABB6 0000 0000                  		dc.w loc_9280-Anml_Index, loc_92BA-Anml_Index
0000ABBA 0000 0000                  		dc.w loc_9314-Anml_Index, loc_9332-Anml_Index
0000ABBE 0000 0000                  		dc.w loc_9314-Anml_Index, loc_9332-Anml_Index
0000ABC2 0000 0000                  		dc.w loc_9314-Anml_Index, loc_9370-Anml_Index
0000ABC6 0000                       		dc.w loc_92D6-Anml_Index
0000ABC8                            
0000ABC8 0005 0203 0603 0405 0401+  Anml_VarIndex:	dc.b 0,	5, 2, 3, 6, 3, 4, 5, 4,	1, 0, 1
0000ABD4                            
0000ABD4 FE00 FC00                  Anml_Variables:	dc.w $FE00, $FC00
0000ABD8 0000 0000                  		dc.l Map_Animal1
0000ABDC FE00 FD00                  		dc.w $FE00, $FD00	; horizontal speed, vertical speed
0000ABE0 0000 0000                  		dc.l Map_Animal2	; mappings address
0000ABE4 FE80 FD00                  		dc.w $FE80, $FD00
0000ABE8 0000 0000                  		dc.l Map_Animal1
0000ABEC FEC0 FE80                  		dc.w $FEC0, $FE80
0000ABF0 0000 0000                  		dc.l Map_Animal2
0000ABF4 FE40 FD00                  		dc.w $FE40, $FD00
0000ABF8 0000 0000                  		dc.l Map_Animal3
0000ABFC FD00 FC00                  		dc.w $FD00, $FC00
0000AC00 0000 0000                  		dc.l Map_Animal2
0000AC04 FD80 FC80                  		dc.w $FD80, $FC80
0000AC08 0000 0000                  		dc.l Map_Animal3
0000AC0C                            
0000AC0C FBC0 FC00 FBC0 FC00 FBC0+  Anml_EndSpeed:	dc.w $FBC0, $FC00, $FBC0, $FC00, $FBC0,	$FC00, $FD00, $FC00
0000AC1C FD00 FC00 FE80 FD00 FE80+  		dc.w $FD00, $FC00, $FE80, $FD00, $FE80,	$FD00, $FEC0, $FE80
0000AC2C FE40 FD00 FE00 FD00 FD80+  		dc.w $FE40, $FD00, $FE00, $FD00, $FD80,	$FC80
0000AC38                            
0000AC38 0000 0000 0000 0000 0000+  Anml_EndMap:	dc.l Map_Animal2, Map_Animal2, Map_Animal2, Map_Animal1, Map_Animal1
0000AC4C 0000 0000 0000 0000 0000+  		dc.l Map_Animal1, Map_Animal1, Map_Animal2, Map_Animal3, Map_Animal2
0000AC60 0000 0000                  		dc.l Map_Animal3
0000AC64                            
0000AC64 05A5 05A5 05A5 0553 0553+  Anml_EndVram:	dc.w $5A5, $5A5, $5A5, $553, $553, $573, $573, $585, $593
0000AC76 0565 05B3                  		dc.w $565, $5B3
0000AC7A                            ; ===========================================================================
0000AC7A                            
0000AC7A                            Anml_Ending:	; Routine 0
0000AC7A 4A28 0028                  		tst.b	obSubtype(a0)	; did animal come from a destroyed enemy?
0000AC7E 6700 0000                  		beq.w	Anml_FromEnemy	; if yes, branch
0000AC82 7000                       		moveq	#0,d0
0000AC84 1028 0028                  		move.b	obSubtype(a0),d0 ; move object type to d0
0000AC88 D040                       		add.w	d0,d0		; multiply d0 by 2
0000AC8A 1140 0024                  		move.b	d0,obRoutine(a0) ; move d0 to routine counter
0000AC8E 0440 0014                  		subi.w	#$14,d0
0000AC92 317B 00D0 0002             		move.w	Anml_EndVram(pc,d0.w),obGfx(a0)
0000AC98 D040                       		add.w	d0,d0
0000AC9A 217B 009C 0004             		move.l	Anml_EndMap(pc,d0.w),obMap(a0)
0000ACA0 43FA FF6A                  		lea	Anml_EndSpeed(pc),a1
0000ACA4 3171 0000 0032             		move.w	(a1,d0.w),$32(a0) ; load horizontal speed
0000ACAA 3171 0000 0010             		move.w	(a1,d0.w),obVelX(a0)
0000ACB0 3171 0002 0034             		move.w	2(a1,d0.w),$34(a0) ; load vertical speed
0000ACB6 3171 0002 0012             		move.w	2(a1,d0.w),obVelY(a0)
0000ACBC 117C 000C 0016             		move.b	#$C,obHeight(a0)
0000ACC2 117C 0004 0001             		move.b	#4,obRender(a0)
0000ACC8 08E8 0000 0001             		bset	#0,obRender(a0)
0000ACCE 317C 0300 0018             		move.w	#$300,obPriority(a0)
0000ACD4 117C 0008 0014             		move.b	#8,obActWid(a0)
0000ACDA 117C 0007 001E             		move.b	#7,obTimeFrame(a0)
0000ACE0 6000 0000                  		bra.w	DisplaySprite
0000ACE4                            ; ===========================================================================
0000ACE4                            
0000ACE4                            Anml_FromEnemy:
0000ACE4 5428 0024                  		addq.b	#2,obRoutine(a0)
0000ACE8 6100 8D26                  		bsr.w	RandomNumber
0000ACEC 0240 0001                  		andi.w	#1,d0
0000ACF0 7200                       		moveq	#0,d1
0000ACF2 1238 FE10                  		move.b	(v_zone).w,d1
0000ACF6 D241                       		add.w	d1,d1
0000ACF8 D240                       		add.w	d0,d1
0000ACFA 43FA FECC                  		lea	Anml_VarIndex(pc),a1
0000ACFE 1031 1000                  		move.b	(a1,d1.w),d0
0000AD02 1140 0030                  		move.b	d0,$30(a0)
0000AD06 E748                       		lsl.w	#3,d0
0000AD08 43FA FECA                  		lea	Anml_Variables(pc),a1
0000AD0C D2C0                       		adda.w	d0,a1
0000AD0E 3159 0032                  		move.w	(a1)+,$32(a0)	; load horizontal speed
0000AD12 3159 0034                  		move.w	(a1)+,$34(a0)	; load vertical	speed
0000AD16 2159 0004                  		move.l	(a1)+,obMap(a0)	; load mappings
0000AD1A 317C 0580 0002             		move.w	#$580,obGfx(a0)	; VRAM setting for 1st animal
0000AD20 0828 0000 0030             		btst	#0,$30(a0)	; is 1st animal	used?
0000AD26 6700                       		beq.s	loc_90C0	; if yes, branch
0000AD28 317C 0592 0002             		move.w	#$592,obGfx(a0)	; VRAM setting for 2nd animal
0000AD2E                            
0000AD2E                            loc_90C0:
0000AD2E 117C 000C 0016             		move.b	#$C,obHeight(a0)
0000AD34 117C 0004 0001             		move.b	#4,obRender(a0)
0000AD3A 08E8 0000 0001             		bset	#0,obRender(a0)
0000AD40 317C 0300 0018             		move.w	#$300,obPriority(a0)
0000AD46 117C 0008 0014             		move.b	#8,obActWid(a0)
0000AD4C 117C 0007 001E             		move.b	#7,obTimeFrame(a0)
0000AD52 117C 0002 001A             		move.b	#2,obFrame(a0)
0000AD58 317C FC00 0012             		move.w	#-$400,obVelY(a0)
0000AD5E 4A38 F7A7                  		tst.b	(v_bossstatus).w
0000AD62 6600                       		bne.s	loc_911C
0000AD64 6100 0000                  		bsr.w	FindFreeObj
0000AD68 6600                       		bne.s	Anml_Display
0000AD6A 12BC 0000                  		move.b	#id_Points,0(a1) ; load points object
0000AD6E 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000AD74 3368 000C 000C             		move.w	obY(a0),obY(a1)
0000AD7A 3028 003E                  		move.w	$3E(a0),d0
0000AD7E E248                       		lsr.w	#1,d0
0000AD80 1340 001A                  		move.b	d0,obFrame(a1)
0000AD84                            
0000AD84                            Anml_Display:
0000AD84 6000 0000                  		bra.w	DisplaySprite
0000AD88                            ; ===========================================================================
0000AD88                            
0000AD88                            loc_911C:
0000AD88 117C 0012 0024             		move.b	#$12,obRoutine(a0)
0000AD8E 4268 0010                  		clr.w	obVelX(a0)
0000AD92 6000 0000                  		bra.w	DisplaySprite
0000AD96                            ; ===========================================================================
0000AD96                            
0000AD96                            loc_912A:
0000AD96 4A28 0001                  		tst.b	obRender(a0)
0000AD9A 6A00 0000                  		bpl.w	DeleteObject
0000AD9E 6100 0000                  		bsr.w	ObjectFall
0000ADA2 4A68 0012                  		tst.w	obVelY(a0)
0000ADA6 6B00                       		bmi.s	loc_9180
0000ADA8 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0000ADAE 4A41                       		tst.w	d1
0000ADB0 6A00                       		bpl.s	loc_9180
0000ADB2 D368 000C                  		add.w	d1,obY(a0)
0000ADB6 3168 0032 0010             		move.w	$32(a0),obVelX(a0)
0000ADBC 3168 0034 0012             		move.w	$34(a0),obVelY(a0)
0000ADC2 117C 0001 001A             		move.b	#1,obFrame(a0)
0000ADC8 1028 0030                  		move.b	$30(a0),d0
0000ADCC D000                       		add.b	d0,d0
0000ADCE 5800                       		addq.b	#4,d0
0000ADD0 1140 0024                  		move.b	d0,obRoutine(a0)
0000ADD4 4A38 F7A7                  		tst.b	(v_bossstatus).w
0000ADD8 6700                       		beq.s	loc_9180
0000ADDA 0838 0004 FE0F             		btst	#4,(v_vbla_byte).w
0000ADE0 6700                       		beq.s	loc_9180
0000ADE2 4468 0010                  		neg.w	obVelX(a0)
0000ADE6 0868 0000 0001             		bchg	#0,obRender(a0)
0000ADEC                            
0000ADEC                            loc_9180:
0000ADEC 6000 0000                  		bra.w	DisplaySprite
0000ADF0                            ; ===========================================================================
0000ADF0                            
0000ADF0                            loc_9184:
0000ADF0 6100 0000                  		bsr.w	ObjectFall
0000ADF4 117C 0001 001A             		move.b	#1,obFrame(a0)
0000ADFA 4A68 0012                  		tst.w	obVelY(a0)
0000ADFE 6B00                       		bmi.s	loc_91AE
0000AE00 117C 0000 001A             		move.b	#0,obFrame(a0)
0000AE06 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0000AE0C 4A41                       		tst.w	d1
0000AE0E 6A00                       		bpl.s	loc_91AE
0000AE10 D368 000C                  		add.w	d1,obY(a0)
0000AE14 3168 0034 0012             		move.w	$34(a0),obVelY(a0)
0000AE1A                            
0000AE1A                            loc_91AE:
0000AE1A 4A28 0028                  		tst.b	obSubtype(a0)
0000AE1E 6600                       		bne.s	loc_9224
0000AE20 4A28 0001                  		tst.b	obRender(a0)
0000AE24 6A00 0000                  		bpl.w	DeleteObject
0000AE28 6000 0000                  		bra.w	DisplaySprite
0000AE2C                            ; ===========================================================================
0000AE2C                            
0000AE2C                            loc_91C0:
0000AE2C 6100 0000                  		bsr.w	SpeedToPos
0000AE30 0668 0018 0012             		addi.w	#$18,obVelY(a0)
0000AE36 4A68 0012                  		tst.w	obVelY(a0)
0000AE3A 6B00                       		bmi.s	loc_91FC
0000AE3C 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0000AE42 4A41                       		tst.w	d1
0000AE44 6A00                       		bpl.s	loc_91FC
0000AE46 D368 000C                  		add.w	d1,obY(a0)
0000AE4A 3168 0034 0012             		move.w	$34(a0),obVelY(a0)
0000AE50 4A28 0028                  		tst.b	obSubtype(a0)
0000AE54 6700                       		beq.s	loc_91FC
0000AE56 0C28 000A 0028             		cmpi.b	#$A,obSubtype(a0)
0000AE5C 6700                       		beq.s	loc_91FC
0000AE5E 4468 0010                  		neg.w	obVelX(a0)
0000AE62 0868 0000 0001             		bchg	#0,obRender(a0)
0000AE68                            
0000AE68                            loc_91FC:
0000AE68 5328 001E                  		subq.b	#1,obTimeFrame(a0)
0000AE6C 6A00                       		bpl.s	loc_9212
0000AE6E 117C 0001 001E             		move.b	#1,obTimeFrame(a0)
0000AE74 5228 001A                  		addq.b	#1,obFrame(a0)
0000AE78 0228 0001 001A             		andi.b	#1,obFrame(a0)
0000AE7E                            
0000AE7E                            loc_9212:
0000AE7E 4A28 0028                  		tst.b	obSubtype(a0)
0000AE82 6600                       		bne.s	loc_9224
0000AE84 4A28 0001                  		tst.b	obRender(a0)
0000AE88 6A00 0000                  		bpl.w	DeleteObject
0000AE8C 6000 0000                  		bra.w	DisplaySprite
0000AE90                            ; ===========================================================================
0000AE90                            
0000AE90                            loc_9224:
0000AE90 3028 0008                  		move.w	obX(a0),d0
0000AE94 9078 D008                  		sub.w	(v_player+obX).w,d0
0000AE98 6500                       		bcs.s	loc_923C
0000AE9A 0440 0180                  		subi.w	#$180,d0
0000AE9E 6A00                       		bpl.s	loc_923C
0000AEA0 4A28 0001                  		tst.b	obRender(a0)
0000AEA4 6A00 0000                  		bpl.w	DeleteObject
0000AEA8                            
0000AEA8                            loc_923C:
0000AEA8 6000 0000                  		bra.w	DisplaySprite
0000AEAC                            ; ===========================================================================
0000AEAC                            
0000AEAC                            loc_9240:
0000AEAC 4A28 0001                  		tst.b	obRender(a0)
0000AEB0 6A00 0000                  		bpl.w	DeleteObject
0000AEB4 5368 0036                  		subq.w	#1,$36(a0)
0000AEB8 6600 0000                  		bne.w	loc_925C
0000AEBC 117C 0002 0024             		move.b	#2,obRoutine(a0)
0000AEC2 317C 0180 0018             		move.w	#$180,obPriority(a0)
0000AEC8                            
0000AEC8                            loc_925C:
0000AEC8 6000 0000                  		bra.w	DisplaySprite
0000AECC                            ; ===========================================================================
0000AECC                            
0000AECC                            loc_9260:
0000AECC 6100 0000                  		bsr.w	sub_9404
0000AED0 6400                       		bcc.s	loc_927C
0000AED2 3168 0032 0010             		move.w	$32(a0),obVelX(a0)
0000AED8 3168 0034 0012             		move.w	$34(a0),obVelY(a0)
0000AEDE 117C 000E 0024             		move.b	#$E,obRoutine(a0)
0000AEE4 6000 FF46                  		bra.w	loc_91C0
0000AEE8                            ; ===========================================================================
0000AEE8                            
0000AEE8                            loc_927C:
0000AEE8 6000 FFA6                  		bra.w	loc_9224
0000AEEC                            ; ===========================================================================
0000AEEC                            
0000AEEC                            loc_9280:
0000AEEC 6100 0000                  		bsr.w	sub_9404
0000AEF0 6A00                       		bpl.s	loc_92B6
0000AEF2 4268 0010                  		clr.w	obVelX(a0)
0000AEF6 4268 0032                  		clr.w	$32(a0)
0000AEFA 6100 0000                  		bsr.w	SpeedToPos
0000AEFE 0668 0018 0012             		addi.w	#$18,obVelY(a0)
0000AF04 6100 0000                  		bsr.w	loc_93C4
0000AF08 6100 0000                  		bsr.w	loc_93EC
0000AF0C 5328 001E                  		subq.b	#1,obTimeFrame(a0)
0000AF10 6A00                       		bpl.s	loc_92B6
0000AF12 117C 0001 001E             		move.b	#1,obTimeFrame(a0)
0000AF18 5228 001A                  		addq.b	#1,obFrame(a0)
0000AF1C 0228 0001 001A             		andi.b	#1,obFrame(a0)
0000AF22                            
0000AF22                            loc_92B6:
0000AF22 6000 FF6C                  		bra.w	loc_9224
0000AF26                            ; ===========================================================================
0000AF26                            
0000AF26                            loc_92BA:
0000AF26 6100 0000                  		bsr.w	sub_9404
0000AF2A 6A00                       		bpl.s	loc_9310
0000AF2C 3168 0032 0010             		move.w	$32(a0),obVelX(a0)
0000AF32 3168 0034 0012             		move.w	$34(a0),obVelY(a0)
0000AF38 117C 0004 0024             		move.b	#4,obRoutine(a0)
0000AF3E 6000 FEB0                  		bra.w	loc_9184
0000AF42                            ; ===========================================================================
0000AF42                            
0000AF42                            loc_92D6:
0000AF42 6100 0000                  		bsr.w	ObjectFall
0000AF46 117C 0001 001A             		move.b	#1,obFrame(a0)
0000AF4C 4A68 0012                  		tst.w	obVelY(a0)
0000AF50 6B00                       		bmi.s	loc_9310
0000AF52 117C 0000 001A             		move.b	#0,obFrame(a0)
0000AF58 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0000AF5E 4A41                       		tst.w	d1
0000AF60 6A00                       		bpl.s	loc_9310
0000AF62 4628 0029                  		not.b	$29(a0)
0000AF66 6600                       		bne.s	loc_9306
0000AF68 4468 0010                  		neg.w	obVelX(a0)
0000AF6C 0868 0000 0001             		bchg	#0,obRender(a0)
0000AF72                            
0000AF72                            loc_9306:
0000AF72 D368 000C                  		add.w	d1,obY(a0)
0000AF76 3168 0034 0012             		move.w	$34(a0),obVelY(a0)
0000AF7C                            
0000AF7C                            loc_9310:
0000AF7C 6000 FF12                  		bra.w	loc_9224
0000AF80                            ; ===========================================================================
0000AF80                            
0000AF80                            loc_9314:
0000AF80 6100 0000                  		bsr.w	sub_9404
0000AF84 6A00                       		bpl.s	loc_932E
0000AF86 4268 0010                  		clr.w	obVelX(a0)
0000AF8A 4268 0032                  		clr.w	$32(a0)
0000AF8E 6100 0000                  		bsr.w	ObjectFall
0000AF92 6100 0000                  		bsr.w	loc_93C4
0000AF96 6100 0000                  		bsr.w	loc_93EC
0000AF9A                            
0000AF9A                            loc_932E:
0000AF9A 6000 FEF4                  		bra.w	loc_9224
0000AF9E                            ; ===========================================================================
0000AF9E                            
0000AF9E                            loc_9332:
0000AF9E 6100 0000                  		bsr.w	sub_9404
0000AFA2 6A00                       		bpl.s	loc_936C
0000AFA4 6100 0000                  		bsr.w	ObjectFall
0000AFA8 117C 0001 001A             		move.b	#1,obFrame(a0)
0000AFAE 4A68 0012                  		tst.w	obVelY(a0)
0000AFB2 6B00                       		bmi.s	loc_936C
0000AFB4 117C 0000 001A             		move.b	#0,obFrame(a0)
0000AFBA 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0000AFC0 4A41                       		tst.w	d1
0000AFC2 6A00                       		bpl.s	loc_936C
0000AFC4 4468 0010                  		neg.w	obVelX(a0)
0000AFC8 0868 0000 0001             		bchg	#0,obRender(a0)
0000AFCE D368 000C                  		add.w	d1,obY(a0)
0000AFD2 3168 0034 0012             		move.w	$34(a0),obVelY(a0)
0000AFD8                            
0000AFD8                            loc_936C:
0000AFD8 6000 FEB6                  		bra.w	loc_9224
0000AFDC                            ; ===========================================================================
0000AFDC                            
0000AFDC                            loc_9370:
0000AFDC 6100 0000                  		bsr.w	sub_9404
0000AFE0 6A00                       		bpl.s	loc_93C0
0000AFE2 6100 0000                  		bsr.w	SpeedToPos
0000AFE6 0668 0018 0012             		addi.w	#$18,obVelY(a0)
0000AFEC 4A68 0012                  		tst.w	obVelY(a0)
0000AFF0 6B00                       		bmi.s	loc_93AA
0000AFF2 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0000AFF8 4A41                       		tst.w	d1
0000AFFA 6A00                       		bpl.s	loc_93AA
0000AFFC 4628 0029                  		not.b	$29(a0)
0000B000 6600                       		bne.s	loc_93A0
0000B002 4468 0010                  		neg.w	obVelX(a0)
0000B006 0868 0000 0001             		bchg	#0,obRender(a0)
0000B00C                            
0000B00C                            loc_93A0:
0000B00C D368 000C                  		add.w	d1,obY(a0)
0000B010 3168 0034 0012             		move.w	$34(a0),obVelY(a0)
0000B016                            
0000B016                            loc_93AA:
0000B016 5328 001E                  		subq.b	#1,obTimeFrame(a0)
0000B01A 6A00                       		bpl.s	loc_93C0
0000B01C 117C 0001 001E             		move.b	#1,obTimeFrame(a0)
0000B022 5228 001A                  		addq.b	#1,obFrame(a0)
0000B026 0228 0001 001A             		andi.b	#1,obFrame(a0)
0000B02C                            
0000B02C                            loc_93C0:
0000B02C 6000 FE62                  		bra.w	loc_9224
0000B030                            ; ===========================================================================
0000B030                            
0000B030                            loc_93C4:
0000B030 117C 0001 001A             		move.b	#1,obFrame(a0)
0000B036 4A68 0012                  		tst.w	obVelY(a0)
0000B03A 6B00                       		bmi.s	locret_93EA
0000B03C 117C 0000 001A             		move.b	#0,obFrame(a0)
0000B042 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0000B048 4A41                       		tst.w	d1
0000B04A 6A00                       		bpl.s	locret_93EA
0000B04C D368 000C                  		add.w	d1,obY(a0)
0000B050 3168 0034 0012             		move.w	$34(a0),obVelY(a0)
0000B056                            
0000B056                            locret_93EA:
0000B056 4E75                       		rts	
0000B058                            ; ===========================================================================
0000B058                            
0000B058                            loc_93EC:
0000B058 08E8 0000 0001             		bset	#0,obRender(a0)
0000B05E 3028 0008                  		move.w	obX(a0),d0
0000B062 9078 D008                  		sub.w	(v_player+obX).w,d0
0000B066 6400                       		bcc.s	locret_9402
0000B068 08A8 0000 0001             		bclr	#0,obRender(a0)
0000B06E                            
0000B06E                            locret_9402:
0000B06E 4E75                       		rts	
0000B070                            
0000B070                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000B070                            
0000B070                            
0000B070                            sub_9404:
0000B070 3038 D008                  		move.w	(v_player+obX).w,d0
0000B074 9068 0008                  		sub.w	obX(a0),d0
0000B078 0440 00B8                  		subi.w	#$B8,d0
0000B07C 4E75                       		rts	
0000B07E                            ; End of function sub_9404
0000B07E                            ; End of function sub_9404
0000B07E                            		include	"_incObj\29 Points.asm"
0000B07E                            ; ---------------------------------------------------------------------------
0000B07E                            ; Object 29 - points that appear when you destroy something
0000B07E                            ; ---------------------------------------------------------------------------
0000B07E                            
0000B07E                            Points:
0000B07E 7000                       		moveq	#0,d0
0000B080 1028 0024                  		move.b	obRoutine(a0),d0
0000B084 323B 0000                  		move.w	Poi_Index(pc,d0.w),d1
0000B088 4EBB 1000                  		jsr	Poi_Index(pc,d1.w)
0000B08C 6000 0000                  		bra.w	DisplaySprite
0000B090                            ; ===========================================================================
0000B090 0000                       Poi_Index:	dc.w Poi_Main-Poi_Index
0000B092 0000                       		dc.w Poi_Slower-Poi_Index
0000B094                            ; ===========================================================================
0000B094                            
0000B094                            Poi_Main:	; Routine 0
0000B094 5428 0024                  		addq.b	#2,obRoutine(a0)
0000B098 217C 0000 0000 0004        		move.l	#Map_Poi,obMap(a0)
0000B0A0 317C 2565 0002             		move.w	#$2565,obGfx(a0)
0000B0A6 117C 0004 0001             		move.b	#4,obRender(a0)
0000B0AC 317C 0080 0018             		move.w	#$80,obPriority(a0)
0000B0B2 117C 0008 0014             		move.b	#8,obActWid(a0)
0000B0B8 317C FD00 0012             		move.w	#-$300,obVelY(a0) ; move object upwards
0000B0BE                            
0000B0BE                            Poi_Slower:	; Routine 2
0000B0BE 4A68 0012                  		tst.w	obVelY(a0)	; is object moving?
0000B0C2 6A00 0000                  		bpl.w	DeleteObject	; if not, delete
0000B0C6 6100 0000                  		bsr.w	SpeedToPos
0000B0CA 0668 0018 0012             		addi.w	#$18,obVelY(a0)	; reduce object	speed
0000B0D0 4E75                       		rts	
0000B0D0 4E75                       		rts	
0000B0D2                            Map_Animal1:	include	"_maps\Animals 1.asm"
0000B0D2                            ; ---------------------------------------------------------------------------
0000B0D2                            ; Sprite mappings - animals
0000B0D2                            ; ---------------------------------------------------------------------------
0000B0D2                            Map_Animal1_internal:
0000B0D2 0000                       		dc.w byte_9472-Map_Animal1_internal
0000B0D4 0000                       		dc.w byte_9478-Map_Animal1_internal
0000B0D6 0000                       		dc.w byte_946C-Map_Animal1_internal
0000B0D8 01                         byte_946C:	dc.b 1
0000B0D9 F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
0000B0DE 01                         byte_9472:	dc.b 1
0000B0DF F406 0006 F8               		dc.b $F4, 6, 0,	6, $F8
0000B0E4 01                         byte_9478:	dc.b 1
0000B0E5 F406 000C F8               		dc.b $F4, 6, 0,	$C, $F8
0000B0EA                            		even
0000B0EA                            		even
0000B0EA                            Map_Animal2:	include	"_maps\Animals 2.asm"
0000B0EA                            ; ---------------------------------------------------------------------------
0000B0EA                            ; Sprite mappings - animals
0000B0EA                            ; ---------------------------------------------------------------------------
0000B0EA                            Map_Animal2_internal:
0000B0EA 0000                       		dc.w byte_948A-Map_Animal2_internal
0000B0EC 0000                       		dc.w byte_9490-Map_Animal2_internal
0000B0EE 0000                       		dc.w byte_9484-Map_Animal2_internal
0000B0F0 01                         byte_9484:	dc.b 1
0000B0F1 F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
0000B0F6 01                         byte_948A:	dc.b 1
0000B0F7 FC05 0006 F8               		dc.b $FC, 5, 0,	6, $F8
0000B0FC 01                         byte_9490:	dc.b 1
0000B0FD FC05 000A F8               		dc.b $FC, 5, 0,	$A, $F8
0000B102                            		even
0000B102                            		even
0000B102                            Map_Animal3:	include	"_maps\Animals 3.asm"
0000B102                            ; ---------------------------------------------------------------------------
0000B102                            ; Sprite mappings - animals
0000B102                            ; ---------------------------------------------------------------------------
0000B102                            Map_Animal3_internal:
0000B102 0000                       		dc.w byte_94A2-Map_Animal3_internal
0000B104 0000                       		dc.w byte_94A8-Map_Animal3_internal
0000B106 0000                       		dc.w byte_949C-Map_Animal3_internal
0000B108 01                         byte_949C:	dc.b 1
0000B109 F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
0000B10E 01                         byte_94A2:	dc.b 1
0000B10F FC09 0006 F4               		dc.b $FC, 9, 0,	6, $F4
0000B114 01                         byte_94A8:	dc.b 1
0000B115 FC09 000C F4               		dc.b $FC, 9, 0,	$C, $F4
0000B11A                            		even
0000B11A                            		even
0000B11A                            Map_Poi:	include	"_maps\Points.asm"
0000B11A                            ; --------------------------------------------------------------------------------
0000B11A                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0000B11A                            ; --------------------------------------------------------------------------------
0000B11A                            
0000B11A                            SME_qLvsg:	
0000B11A 0000 0000                  		dc.w SME_qLvsg_E-SME_qLvsg, SME_qLvsg_14-SME_qLvsg	
0000B11E 0000 0000                  		dc.w SME_qLvsg_1A-SME_qLvsg, SME_qLvsg_20-SME_qLvsg	
0000B122 0000 0000                  		dc.w SME_qLvsg_26-SME_qLvsg, SME_qLvsg_2C-SME_qLvsg	
0000B126 0000                       		dc.w SME_qLvsg_37-SME_qLvsg	
0000B128 01                         SME_qLvsg_E:	dc.b 1	
0000B129 FC04 0000 F8               		dc.b $FC, 4, 0, 0, $F8	
0000B12E 01                         SME_qLvsg_14:	dc.b 1	
0000B12F FC04 0002 F8               		dc.b $FC, 4, 0, 2, $F8	
0000B134 01                         SME_qLvsg_1A:	dc.b 1	
0000B135 FC04 0004 F8               		dc.b $FC, 4, 0, 4, $F8	
0000B13A 01                         SME_qLvsg_20:	dc.b 1	
0000B13B FC04 0006 F8               		dc.b $FC, 4, 0, 6, $F8	
0000B140 01                         SME_qLvsg_26:	dc.b 1	
0000B141 FC00 0006 FC               		dc.b $FC, 0, 0, 6, $FC	
0000B146 02                         SME_qLvsg_2C:	dc.b 2	
0000B147 FC08 0006 F4               		dc.b $FC, 8, 0, 6, $F4	
0000B14C FC04 0007 01               		dc.b $FC, 4, 0, 7, 1	
0000B151 02                         SME_qLvsg_37:	dc.b 2	
0000B152 FC08 0006 F4               		dc.b $FC, 8, 0, 6, $F4	
0000B157 FC04 0007 06               		dc.b $FC, 4, 0, 7, 6	
0000B15C                            		even
0000B15C                            		even
0000B15C                            
0000B15C                            		include	"_incObj\1F Crabmeat.asm"
0000B15C                            ; ---------------------------------------------------------------------------
0000B15C                            ; Object 1F - Crabmeat enemy (GHZ, SYZ)
0000B15C                            ; ---------------------------------------------------------------------------
0000B15C                            
0000B15C                            Crabmeat:
0000B15C 7000                       		moveq	#0,d0
0000B15E 1028 0024                  		move.b	obRoutine(a0),d0
0000B162 323B 0000                  		move.w	Crab_Index(pc,d0.w),d1
0000B166 4EFB 1000                  		jmp	Crab_Index(pc,d1.w)
0000B16A                            ; ===========================================================================
0000B16A                            Crab_Index:
0000B16A 0000                       ptr_Crab_Main:		dc.w Crab_Main-Crab_Index
0000B16C 0000                       ptr_Crab_Action:	dc.w Crab_Action-Crab_Index
0000B16E 0000                       ptr_Crab_Delete:	dc.w Crab_Delete-Crab_Index
0000B170 0000                       ptr_Crab_BallMain:	dc.w Crab_BallMain-Crab_Index
0000B172 0000                       ptr_Crab_BallMove:	dc.w Crab_BallMove-Crab_Index
0000B174                            
0000B174 =00000000                  id_Crab_Main:		equ ptr_Crab_Main-Crab_Index	; 0
0000B174 =00000002                  id_Crab_Action:		equ ptr_Crab_Action-Crab_Index	; 2
0000B174 =00000004                  id_Crab_Delete:		equ ptr_Crab_Delete-Crab_Index	; 4
0000B174 =00000006                  id_Crab_BallMain:	equ ptr_Crab_BallMain-Crab_Index	; 6
0000B174 =00000008                  id_Crab_BallMove:	equ ptr_Crab_BallMove-Crab_Index	; 8
0000B174                            
0000B174 =00000030                  crab_timedelay:	equ $30
0000B174 =00000032                  crab_mode:	equ $32
0000B174                            ; ===========================================================================
0000B174                            
0000B174                            Crab_Main:	; Routine 0
0000B174 117C 0010 0016             		move.b	#$10,obHeight(a0)
0000B17A 117C 0008 0017             		move.b	#8,obWidth(a0)
0000B180 217C 0000 0000 0004        		move.l	#Map_Crab,obMap(a0)
0000B188 317C 0400 0002             		move.w	#$400,obGfx(a0)
0000B18E 117C 0004 0001             		move.b	#4,obRender(a0)
0000B194 317C 0180 0018             		move.w	#$180,obPriority(a0)
0000B19A 117C 0006 0020             		move.b	#6,obColType(a0)
0000B1A0 117C 0015 0014             		move.b	#$15,obActWid(a0)
0000B1A6 6100 0000                  		bsr.w	ObjectFall
0000B1AA 4EB9 0000 0000             		jsr	(ObjFloorDist).l	; find floor
0000B1B0 4A41                       		tst.w	d1
0000B1B2 6A00                       		bpl.s	@floornotfound
0000B1B4 D368 000C                  		add.w	d1,obY(a0)
0000B1B8 1143 0026                  		move.b	d3,obAngle(a0)
0000B1BC 317C 0000 0012             		move.w	#0,obVelY(a0)
0000B1C2 5428 0024                  		addq.b	#2,obRoutine(a0)
0000B1C6                            
0000B1C6                            	@floornotfound:
0000B1C6 4E75                       		rts	
0000B1C8                            ; ===========================================================================
0000B1C8                            
0000B1C8                            Crab_Action:	; Routine 2
0000B1C8 7000                       		moveq	#0,d0
0000B1CA 1028 0025                  		move.b	ob2ndRout(a0),d0
0000B1CE 323B 0000                  		move.w	@index(pc,d0.w),d1
0000B1D2 4EBB 1000                  		jsr	@index(pc,d1.w)
0000B1D6 43F9 0000 0000             		lea	(Ani_Crab).l,a1
0000B1DC 6100 0000                  		bsr.w	AnimateSprite
0000B1E0 6000 0000                  		bra.w	RememberState
0000B1E4                            ; ===========================================================================
0000B1E4 0000                       @index:		dc.w @waittofire-@index
0000B1E6 0000                       		dc.w @walkonfloor-@index
0000B1E8                            ; ===========================================================================
0000B1E8                            
0000B1E8                            @waittofire:
0000B1E8 5368 0030                  		subq.w	#1,crab_timedelay(a0) ; subtract 1 from time delay
0000B1EC 6A00                       		bpl.s	@dontmove
0000B1EE 4A28 0001                  		tst.b	obRender(a0)
0000B1F2 6A00                       		bpl.s	@movecrab
0000B1F4 0868 0001 0032             		bchg	#1,crab_mode(a0)
0000B1FA 6600                       		bne.s	@fire
0000B1FC                            
0000B1FC                            	@movecrab:
0000B1FC 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0000B200 317C 007F 0030             		move.w	#127,crab_timedelay(a0) ; set time delay to approx 2 seconds
0000B206 317C 0080 0010             		move.w	#$80,obVelX(a0)	; move Crabmeat	to the right
0000B20C 6100 0000                  		bsr.w	Crab_SetAni
0000B210 5600                       		addq.b	#3,d0
0000B212 1140 001C                  		move.b	d0,obAnim(a0)
0000B216 0868 0000 0022             		bchg	#0,obStatus(a0)
0000B21C 6600                       		bne.s	@noflip
0000B21E 4468 0010                  		neg.w	obVelX(a0)	; change direction
0000B222                            
0000B222                            	@dontmove:
0000B222                            	@noflip:
0000B222 4E75                       		rts	
0000B224                            ; ===========================================================================
0000B224                            
0000B224                            @fire:
0000B224 317C 003B 0030             		move.w	#59,crab_timedelay(a0)
0000B22A 117C 0006 001C             		move.b	#6,obAnim(a0)	; use firing animation
0000B230 6100 0000                  		bsr.w	FindFreeObj
0000B234 6600                       		bne.s	@failleft
0000B236 12BC 0000                  		move.b	#id_Crabmeat,0(a1) ; load left fireball
0000B23A 137C 0006 0024             		move.b	#id_Crab_BallMain,obRoutine(a1)
0000B240 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000B246 0469 0010 0008             		subi.w	#$10,obX(a1)
0000B24C 3368 000C 000C             		move.w	obY(a0),obY(a1)
0000B252 337C FF00 0010             		move.w	#-$100,obVelX(a1)
0000B258                            
0000B258                            	@failleft:
0000B258 6100 0000                  		bsr.w	FindFreeObj
0000B25C 6600                       		bne.s	@failright
0000B25E 12BC 0000                  		move.b	#id_Crabmeat,0(a1) ; load right fireball
0000B262 137C 0006 0024             		move.b	#id_Crab_BallMain,obRoutine(a1)
0000B268 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000B26E 0669 0010 0008             		addi.w	#$10,obX(a1)
0000B274 3368 000C 000C             		move.w	obY(a0),obY(a1)
0000B27A 337C 0100 0010             		move.w	#$100,obVelX(a1)
0000B280                            
0000B280                            	@failright:
0000B280 4E75                       		rts	
0000B282                            ; ===========================================================================
0000B282                            
0000B282                            @walkonfloor:
0000B282 5368 0030                  		subq.w	#1,crab_timedelay(a0)
0000B286 6B00                       		bmi.s	loc_966E
0000B288 6100 0000                  		bsr.w	SpeedToPos
0000B28C 0868 0000 0032             		bchg	#0,crab_mode(a0)
0000B292 6600                       		bne.s	loc_9654
0000B294 3628 0008                  		move.w	obX(a0),d3
0000B298 0643 0010                  		addi.w	#$10,d3
0000B29C 0828 0000 0022             		btst	#0,obStatus(a0)
0000B2A2 6700                       		beq.s	loc_9640
0000B2A4 0443 0020                  		subi.w	#$20,d3
0000B2A8                            
0000B2A8                            loc_9640:
0000B2A8 4EB9 0000 0000             		jsr	(ObjFloorDist2).l
0000B2AE 0C41 FFF8                  		cmpi.w	#-8,d1
0000B2B2 6D00                       		blt.s	loc_966E
0000B2B4 0C41 000C                  		cmpi.w	#$C,d1
0000B2B8 6C00                       		bge.s	loc_966E
0000B2BA 4E75                       		rts	
0000B2BC                            ; ===========================================================================
0000B2BC                            
0000B2BC                            loc_9654:
0000B2BC 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0000B2C2 D368 000C                  		add.w	d1,obY(a0)
0000B2C6 1143 0026                  		move.b	d3,obAngle(a0)
0000B2CA 6100 0000                  		bsr.w	Crab_SetAni
0000B2CE 5600                       		addq.b	#3,d0
0000B2D0 1140 001C                  		move.b	d0,obAnim(a0)
0000B2D4 4E75                       		rts	
0000B2D6                            ; ===========================================================================
0000B2D6                            
0000B2D6                            loc_966E:
0000B2D6 5528 0025                  		subq.b	#2,ob2ndRout(a0)
0000B2DA 317C 003B 0030             		move.w	#59,crab_timedelay(a0)
0000B2E0 317C 0000 0010             		move.w	#0,obVelX(a0)
0000B2E6 6100 0000                  		bsr.w	Crab_SetAni
0000B2EA 1140 001C                  		move.b	d0,obAnim(a0)
0000B2EE 4E75                       		rts	
0000B2F0                            ; ---------------------------------------------------------------------------
0000B2F0                            ; Subroutine to	set the	correct	animation for a	Crabmeat
0000B2F0                            ; ---------------------------------------------------------------------------
0000B2F0                            
0000B2F0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000B2F0                            
0000B2F0                            
0000B2F0                            Crab_SetAni:
0000B2F0 7000                       		moveq	#0,d0
0000B2F2 1628 0026                  		move.b	obAngle(a0),d3
0000B2F6 6B00                       		bmi.s	loc_96A4
0000B2F8 0C03 0006                  		cmpi.b	#6,d3
0000B2FC 6500                       		bcs.s	locret_96A2
0000B2FE 7001                       		moveq	#1,d0
0000B300 0828 0000 0022             		btst	#0,obStatus(a0)
0000B306 6600                       		bne.s	locret_96A2
0000B308 7002                       		moveq	#2,d0
0000B30A                            
0000B30A                            locret_96A2:
0000B30A 4E75                       		rts	
0000B30C                            ; ===========================================================================
0000B30C                            
0000B30C                            loc_96A4:
0000B30C 0C03 00FA                  		cmpi.b	#-6,d3
0000B310 6200                       		bhi.s	locret_96B6
0000B312 7002                       		moveq	#2,d0
0000B314 0828 0000 0022             		btst	#0,obStatus(a0)
0000B31A 6600                       		bne.s	locret_96B6
0000B31C 7001                       		moveq	#1,d0
0000B31E                            
0000B31E                            locret_96B6:
0000B31E 4E75                       		rts	
0000B320                            ; End of function Crab_SetAni
0000B320                            
0000B320                            ; ===========================================================================
0000B320                            
0000B320                            Crab_Delete:	; Routine 4
0000B320 6100 0000                  		bsr.w	DeleteObject
0000B324 4E75                       		rts	
0000B326                            ; ===========================================================================
0000B326                            ; ---------------------------------------------------------------------------
0000B326                            ; Sub-object - missile that the	Crabmeat throws
0000B326                            ; ---------------------------------------------------------------------------
0000B326                            
0000B326                            Crab_BallMain:	; Routine 6
0000B326 5428 0024                  		addq.b	#2,obRoutine(a0)
0000B32A 217C 0000 0000 0004        		move.l	#Map_Crab,obMap(a0)
0000B332 317C 0400 0002             		move.w	#$400,obGfx(a0)
0000B338 117C 0004 0001             		move.b	#4,obRender(a0)
0000B33E 317C 0180 0018             		move.w	#$180,obPriority(a0)
0000B344 117C 0087 0020             		move.b	#$87,obColType(a0)
0000B34A 117C 0008 0014             		move.b	#8,obActWid(a0)
0000B350 317C FC00 0012             		move.w	#-$400,obVelY(a0)
0000B356 117C 0007 001C             		move.b	#7,obAnim(a0)
0000B35C                            
0000B35C                            Crab_BallMove:	; Routine 8
0000B35C 43F9 0000 0000             		lea	(Ani_Crab).l,a1
0000B362 6100 0000                  		bsr.w	AnimateSprite
0000B366 6100 0000                  		bsr.w	ObjectFall
0000B36A 6100 0000                  		bsr.w	DisplaySprite
0000B36E 3038 F72E                  		move.w	(v_limitbtm2).w,d0
0000B372 0640 00E0                  		addi.w	#$E0,d0
0000B376 B068 000C                  		cmp.w	obY(a0),d0	; has object moved below the level boundary?
0000B37A 6500                       		bcs.s	@delete		; if yes, branch
0000B37C 4E75                       		rts	
0000B37E                            
0000B37E                            	@delete:
0000B37E 6000 0000                  		bra.w	DeleteObject
0000B37E 6000 0000                  		bra.w	DeleteObject
0000B382                            		include	"_anim\Crabmeat.asm"
0000B382                            ; ---------------------------------------------------------------------------
0000B382                            ; Animation script - Crabmeat enemy
0000B382                            ; ---------------------------------------------------------------------------
0000B382 0000 0000 0000             Ani_Crab:	dc.w @stand-Ani_Crab, @standslope-Ani_Crab, @standsloperev-Ani_Crab
0000B388 0000 0000 0000             		dc.w @walk-Ani_Crab, @walkslope-Ani_Crab, @walksloperev-Ani_Crab
0000B38E 0000 0000                  		dc.w @firing-Ani_Crab, @ball-Ani_Crab
0000B392 0F00 FF                    @stand:		dc.b $F, 0, afEnd
0000B396 00                         		even
0000B396 0F02 FF                    @standslope:	dc.b $F, 2, afEnd
0000B39A 00                         		even
0000B39A 0F22 FF                    @standsloperev:	dc.b $F, $22, afEnd
0000B39E 00                         		even
0000B39E 0F01 2100 FF               @walk:		dc.b $F, 1, $21, 0, afEnd
0000B3A4 00                         		even
0000B3A4 0F21 0302 FF               @walkslope:	dc.b $F, $21, 3, 2, afEnd
0000B3AA 00                         		even
0000B3AA 0F01 2322 FF               @walksloperev:	dc.b $F, 1, $23, $22, afEnd
0000B3B0 00                         		even
0000B3B0 0F04 FF                    @firing:	dc.b $F, 4, afEnd
0000B3B4 00                         		even
0000B3B4 0105 06FF                  @ball:		dc.b 1,	5, 6, afEnd
0000B3B8                            		even
0000B3B8                            		even
0000B3B8                            Map_Crab:	include	"_maps\Crabmeat.asm"
0000B3B8                            ; ---------------------------------------------------------------------------
0000B3B8                            ; Sprite mappings - Crabmeat enemy (GHZ, SYZ)
0000B3B8                            ; ---------------------------------------------------------------------------
0000B3B8                            Map_Crab_internal:
0000B3B8 0000                       		dc.w @stand-Map_Crab_internal
0000B3BA 0000                       		dc.w @walk-Map_Crab_internal
0000B3BC 0000                       		dc.w @slope1-Map_Crab_internal
0000B3BE 0000                       		dc.w @slope2-Map_Crab_internal
0000B3C0 0000                       		dc.w @firing-Map_Crab_internal
0000B3C2 0000                       		dc.w @ball1-Map_Crab_internal
0000B3C4 0000                       		dc.w @ball2-Map_Crab_internal
0000B3C6 04                         @stand:		dc.b 4
0000B3C7 F009 0000 E8               		dc.b $F0, 9, 0,	0, $E8	; standing/middle walking frame
0000B3CC F009 0800 00               		dc.b $F0, 9, 8,	0, 0
0000B3D1 0005 0006 F0               		dc.b 0,	5, 0, 6, $F0
0000B3D6 0005 0806 00               		dc.b 0,	5, 8, 6, 0
0000B3DB 04                         @walk:		dc.b 4
0000B3DC F009 000A E8               		dc.b $F0, 9, 0,	$A, $E8	; walking
0000B3E1 F009 0010 00               		dc.b $F0, 9, 0,	$10, 0
0000B3E6 0005 0016 F0               		dc.b 0,	5, 0, $16, $F0
0000B3EB 0009 001A 00               		dc.b 0,	9, 0, $1A, 0
0000B3F0 04                         @slope1:	dc.b 4
0000B3F1 EC09 0000 E8               		dc.b $EC, 9, 0,	0, $E8	; walking on slope
0000B3F6 EC09 0800 00               		dc.b $EC, 9, 8,	0, 0
0000B3FB FC05 0806 00               		dc.b $FC, 5, 8,	6, 0
0000B400 FC06 0020 F0               		dc.b $FC, 6, 0,	$20, $F0
0000B405 04                         @slope2:	dc.b 4
0000B406 EC09 000A E8               		dc.b $EC, 9, 0,	$A, $E8	; walking on slope
0000B40B EC09 0010 00               		dc.b $EC, 9, 0,	$10, 0
0000B410 FC09 0026 00               		dc.b $FC, 9, 0,	$26, 0
0000B415 FC06 002C F0               		dc.b $FC, 6, 0,	$2C, $F0
0000B41A 06                         @firing:	dc.b 6
0000B41B F004 0032 F0               		dc.b $F0, 4, 0,	$32, $F0 ; firing projectiles
0000B420 F004 0832 00               		dc.b $F0, 4, 8,	$32, 0
0000B425 F809 0034 E8               		dc.b $F8, 9, 0,	$34, $E8
0000B42A F809 0834 00               		dc.b $F8, 9, 8,	$34, 0
0000B42F 0804 003A F0               		dc.b 8,	4, 0, $3A, $F0
0000B434 0804 083A 00               		dc.b 8,	4, 8, $3A, 0
0000B439 01                         @ball1:		dc.b 1
0000B43A F805 003C F8               		dc.b $F8, 5, 0,	$3C, $F8 ; projectile
0000B43F 01                         @ball2:		dc.b 1
0000B440 F805 0040 F8               		dc.b $F8, 5, 0,	$40, $F8 ; projectile
0000B446 00                         		even
0000B446 00                         		even
0000B446                            		include	"_incObj\06 Mozzietron.asm"
0000B446                            ; ===========================================================================
0000B446                            ; ---------------------------------------------------------------------------
0000B446                            ; Object 06 - Mozzietron enemy	(GHZ)
0000B446                            ; ---------------------------------------------------------------------------
0000B446                            
0000B446                            Mozzietron:					; XREF: Obj_Index
0000B446 7000                       		moveq	#0,d0
0000B448 1028 0024                  		move.b	$24(a0),d0
0000B44C 323B 0000                  		move.w	MozIndex(pc,d0.w),d1
0000B450 4EFB 1000                  		jmp	MozIndex(pc,d1.w)
0000B454                            ; ===========================================================================
0000B454 0000                       MozIndex:	dc.w MozMain-MozIndex
0000B456 0000                       		dc.w MozAction-MozIndex
0000B458 0000                       		dc.w MozDelete-MozIndex
0000B45A                            ; ===========================================================================
0000B45A                            
0000B45A                            MozMain:				; XREF: MozIndex
0000B45A 5428 0024                  		addq.b	#2,$24(a0)
0000B45E 217C 0000 0000 0004        		move.l	#Map_Mozzietron,4(a0)
0000B466 317C 0444 0002             		move.w	#$444,2(a0)
0000B46C 117C 0004 0001             		move.b	#4,1(a0)
0000B472 317C 0180 0018             		move.w	#$180,obPriority(a0)
0000B478 117C 0005 0020             		move.b	#5,$20(a0) ; hit box
0000B47E 117C 0018 0014             		move.b	#$18,obActWid(a0)
0000B484                            MozAction:				; XREF: MozIndex
0000B484 7000                       		moveq	#0,d0
0000B486 1028 0025                  		move.b	$25(a0),d0
0000B48A 323B 0000                  		move.w	MozIndex2(pc,d0.w),d1
0000B48E 4EBB 1000                  		jsr	MozIndex2(pc,d1.w)
0000B492 43F9 0000 0000             		lea	(Ani_Mozzietron).l,a1
0000B498 6100 0000                  		bsr.w	AnimateSprite
0000B49C 6000 0000                  		bra.w	RememberState
0000B4A0                            ; ===========================================================================
0000B4A0 0000                       MozIndex2:	dc.w MozMove-MozIndex2
0000B4A2 0000                       		dc.w MozChkNrSonic-MozIndex2
0000B4A4 0000                       		dc.w MozPinned-MozIndex2
0000B4A6                            ; ===========================================================================
0000B4A6                            
0000B4A6                            MozMove:				; XREF: MozIndex2
0000B4A6 5368 0032                  		subq.w	#1,$32(a0)	; subtract 1 from time delay
0000B4AA 6A00                       		bpl.s	locret_986C	; if time remains, branch
0000B4AC 0828 0001 0034             		btst	#1,$34(a0)	; is Buzz Bomber near Sonic?
0000B4B2 6600                       		bne.s	MozFire	; if yes, branch
0000B4B4 5428 0025                  		addq.b	#2,$25(a0)
0000B4B8 317C 0064 0032             		move.w	#100,$32(a0)	; set time delay to just over 2	seconds
0000B4BE 317C 0100 0010             		move.w	#$100,$10(a0)	; move Buzz Bomber to the right
0000B4C4 117C 0000 001C             		move.b	#0,$1C(a0)	; use "flying" animation
0000B4CA 0828 0000 0022             		btst	#0,$22(a0)	; is Buzz Bomber facing	left?
0000B4D0 6600                       		bne.s	locret_986C	; if not, branch
0000B4D2 4468 0010                  		neg.w	$10(a0)		; move Buzz Bomber to the left
0000B4D6                            
0000B4D6                            locret_986C:
0000B4D6 4E75                       		rts	
0000B4D8                            ; ===========================================================================
0000B4D8                            
0000B4D8                            MozFire:				; XREF: MozMove
0000B4D8 117C 0002 001C             		move.b	#2,$1C(a0)	; use "diving" animation
0000B4DE 6100 0000                  		bsr.w	ObjectFall
0000B4E2 4EB9 0000 0000             		jsr     ObjFloorDist ; check distance between object and floor
0000B4E8 4A41                       		tst.w	d1 ; is floor distance positive? 
0000B4EA 6A00                       		bpl.s   @return ; if yes, branch 
0000B4EC 303C 00B6                  		move.w    #$B6,d0
0000B4F0 4EB9 0000 1254             		jsr    (PlaySound_Special).l ;    play "spikes moving" sound
0000B4F6 117C 0004 0025             		move.b #4,$25(a0) ; set 2nd state to pinned
0000B4FC D368 000C                  		add.w	d1,$C(a0) ; snap to the ground
0000B500 4268 0012                  		clr.w	$12(a0) ; clear Y Velocity 
0000B504 4228 0015                  		clr.b	$15(a0) ; $15(a0) is unused in this object, except this line
0000B508                            		@return:
0000B508 4E75                       	    		rts
0000B50A                            		
0000B50A                            
0000B50A                            ; ===========================================================================
0000B50A                            
0000B50A                            MozPinned:
0000B50A 4E75                               rts
0000B50C                                    
0000B50C                            ; ===========================================================================
0000B50C                            
0000B50C                            MozChkDel:				; XREF: Obj55_DropFly
0000B50C 4A28 0001                  		tst.b	1(a0)
0000B510 6A00 0000                  		bpl.w	DeleteObject
0000B514 4E75                       		rts	
0000B516                            ; ===========================================================================
0000B516                            
0000B516                            MozChkNrSonic:			; XREF: MozIndex2
0000B516                            ;		subq.w	#1,$32(a0)	; subtract 1 from time delay
0000B516 6B00                       		bmi.s	MozChgDir
0000B518 6100 0000                  		bsr.w	SpeedToPos
0000B51C 4A28 0034                  		tst.b	$34(a0)
0000B520 6600                       		bne.s	locret_992A
0000B522 3038 D008                  		move.w	($FFFFD008).w,d0
0000B526 9068 0008                  		sub.w	8(a0),d0
0000B52A 6A00                       		bpl.s	MozSetNrSonic
0000B52C 4440                       		neg.w	d0
0000B52E                            
0000B52E                            MozSetNrSonic:
0000B52E 0C40 0005                  		cmpi.w	#$05,d0		; is Buzz Bomber within	$05 pixels of Sonic?
0000B532 6400                       		bcc.s	locret_992A	; if not, branch
0000B534 4A28 0001                  		tst.b	1(a0)
0000B538 6A00                       		bpl.s	locret_992A
0000B53A 117C 0002 0034             		move.b	#2,$34(a0)	; set Buzz Bomber to "near Sonic"
0000B540 317C 001D 0032             		move.w	#29,$32(a0)	; set time delay to half a second
0000B546 117C 0002 001C             		move.b	#2,$1C(a0)	; use "firing" animation
0000B54C 6000                       		bra.s	MozStop
0000B54E                            ; ===========================================================================
0000B54E                            
0000B54E                            MozChgDir:				; XREF: MozChkNrSonic
0000B54E 117C 0000 0034             		move.b	#0,$34(a0)	; set Buzz Bomber to "normal"
0000B554 0868 0000 0022             		bchg	#0,$22(a0)	; change direction
0000B55A 317C 003B 0032             		move.w	#59,$32(a0)
0000B560                            
0000B560                            MozStop:				; XREF: MozSetNrSonic
0000B560 5528 0025                  		subq.b	#2,$25(a0)	; run "MozFire" routine
0000B564 317C 0000 0010             		move.w	#0,$10(a0)	; stop Buzz Bomber moving
0000B56A 117C 0000 001C             		move.b	#0,$1C(a0)	; use "hovering" animation
0000B570                            
0000B570                            locret_992A:
0000B570 4E75                       		rts	
0000B572                            ; ===========================================================================
0000B572                            
0000B572                            MozDelete:				; XREF: MozIndex
0000B572 6100 0000                  		bsr.w	DeleteObject
0000B576 4E75                       		rts	
0000B576 4E75                       		rts	
0000B578                            		include	"_incObj\22 Buzz Bomber.asm"
0000B578                            ; ===========================================================================
0000B578                            ; ---------------------------------------------------------------------------
0000B578                            ; Object 22 - Buzz Bomber enemy	(GHZ, MZ, SYZ)
0000B578                            ; ---------------------------------------------------------------------------
0000B578                            
0000B578                            BuzzBomber:
0000B578 7000                       		moveq	#0,d0
0000B57A 1028 0024                  		move.b	obRoutine(a0),d0
0000B57E 323B 0000                  		move.w	Buzz_Index(pc,d0.w),d1
0000B582 4EFB 1000                  		jmp	Buzz_Index(pc,d1.w)
0000B586                            ; ===========================================================================
0000B586 0000                       Buzz_Index:	dc.w Buzz_Main-Buzz_Index
0000B588 0000                       		dc.w Buzz_Action-Buzz_Index
0000B58A 0000                       		dc.w Buzz_Delete-Buzz_Index
0000B58C                            
0000B58C =00000032                  buzz_timedelay:	equ $32
0000B58C =00000034                  buzz_buzzstatus:	equ $34
0000B58C =0000003C                  buzz_parent:	equ $3C
0000B58C                            ; ===========================================================================
0000B58C                            
0000B58C                            Buzz_Main:	; Routine 0
0000B58C 5428 0024                  		addq.b	#2,obRoutine(a0)
0000B590 217C 0000 0000 0004        		move.l	#Map_Buzz,obMap(a0)
0000B598 317C 0444 0002             		move.w	#$444,obGfx(a0)
0000B59E 117C 0004 0001             		move.b	#4,obRender(a0)
0000B5A4 317C 0180 0018             		move.w	#$180,obPriority(a0)
0000B5AA 117C 0008 0020             		move.b	#8,obColType(a0)
0000B5B0 117C 0018 0014             		move.b	#$18,obActWid(a0)
0000B5B6                            
0000B5B6                            Buzz_Action:	; Routine 2
0000B5B6 7000                       		moveq	#0,d0
0000B5B8 1028 0025                  		move.b	ob2ndRout(a0),d0
0000B5BC 323B 0000                  		move.w	@index(pc,d0.w),d1
0000B5C0 4EBB 1000                  		jsr	@index(pc,d1.w)
0000B5C4 43F9 0000 0000             		lea	(Ani_Buzz).l,a1
0000B5CA 6100 0000                  		bsr.w	AnimateSprite
0000B5CE 6000 0000                  		bra.w	RememberState
0000B5D2                            ; ===========================================================================
0000B5D2 0000                       @index:		dc.w @move-@index
0000B5D4 0000                       		dc.w @chknearsonic-@index
0000B5D6                            ; ===========================================================================
0000B5D6                            
0000B5D6                            @move:
0000B5D6 5368 0032                  		subq.w	#1,buzz_timedelay(a0) ; subtract 1 from time delay
0000B5DA 6A00                       		bpl.s	@noflip		; if time remains, branch
0000B5DC 0828 0001 0034             		btst	#1,buzz_buzzstatus(a0) ; is Buzz Bomber near Sonic?
0000B5E2 6600                       		bne.s	@fire		; if yes, branch
0000B5E4 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0000B5E8 317C 007F 0032             		move.w	#127,buzz_timedelay(a0) ; set time delay to just over 2 seconds
0000B5EE 317C 0400 0010             		move.w	#$400,obVelX(a0) ; move Buzz Bomber to the right
0000B5F4 117C 0001 001C             		move.b	#1,obAnim(a0)	; use "flying" animation
0000B5FA 0828 0000 0022             		btst	#0,obStatus(a0)	; is Buzz Bomber facing	left?
0000B600 6600                       		bne.s	@noflip		; if not, branch
0000B602 4468 0010                  		neg.w	obVelX(a0)	; move Buzz Bomber to the left
0000B606                            
0000B606                            	@noflip:
0000B606 4E75                       		rts	
0000B608                            ; ===========================================================================
0000B608                            
0000B608                            	@fire:
0000B608 6100 0000                  		bsr.w	FindFreeObj
0000B60C 6600                       		bne.s	@fail
0000B60E 12BC 0000                  		move.b	#id_Missile,0(a1) ; load missile object
0000B612 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000B618 3368 000C 000C             		move.w	obY(a0),obY(a1)
0000B61E 0669 001C 000C             		addi.w	#$1C,obY(a1)
0000B624 337C 0200 0012             		move.w	#$200,obVelY(a1) ; move missile downwards
0000B62A 337C 0200 0010             		move.w	#$200,obVelX(a1) ; move missile to the right
0000B630 303C 0018                  		move.w	#$18,d0
0000B634 0828 0000 0022             		btst	#0,obStatus(a0)	; is Buzz Bomber facing	left?
0000B63A 6600                       		bne.s	@noflip2	; if not, branch
0000B63C 4440                       		neg.w	d0
0000B63E 4469 0010                  		neg.w	obVelX(a1)	; move missile to the left
0000B642                            
0000B642                            	@noflip2:
0000B642 D169 0008                  		add.w	d0,obX(a1)
0000B646 1368 0022 0022             		move.b	obStatus(a0),obStatus(a1)
0000B64C 337C 000E 0032             		move.w	#$E,buzz_timedelay(a1)
0000B652 2348 003C                  		move.l	a0,buzz_parent(a1)
0000B656 117C 0001 0034             		move.b	#1,buzz_buzzstatus(a0) ; set to "already fired" to prevent refiring
0000B65C 317C 003B 0032             		move.w	#59,buzz_timedelay(a0)
0000B662 117C 0002 001C             		move.b	#2,obAnim(a0)	; use "firing" animation
0000B668                            
0000B668                            	@fail:
0000B668 4E75                       		rts	
0000B66A                            ; ===========================================================================
0000B66A                            
0000B66A                            @chknearsonic:
0000B66A 5368 0032                  		subq.w	#1,buzz_timedelay(a0) ; subtract 1 from time delay
0000B66E 6B00                       		bmi.s	@chgdirection
0000B670 6100 0000                  		bsr.w	SpeedToPos
0000B674 4A28 0034                  		tst.b	buzz_buzzstatus(a0)
0000B678 6600                       		bne.s	@keepgoing
0000B67A 3038 D008                  		move.w	(v_player+obX).w,d0
0000B67E 9068 0008                  		sub.w	obX(a0),d0
0000B682 6A00                       		bpl.s	@isleft
0000B684 4440                       		neg.w	d0
0000B686                            
0000B686                            	@isleft:
0000B686 0C40 0060                  		cmpi.w	#$60,d0		; is Buzz Bomber within	$60 pixels of Sonic?
0000B68A 6400                       		bcc.s	@keepgoing	; if not, branch
0000B68C 4A28 0001                  		tst.b	obRender(a0)
0000B690 6A00                       		bpl.s	@keepgoing
0000B692 117C 0002 0034             		move.b	#2,buzz_buzzstatus(a0) ; set Buzz Bomber to "near Sonic"
0000B698 317C 001D 0032             		move.w	#29,buzz_timedelay(a0) ; set time delay to half a second
0000B69E 6000                       		bra.s	@stop
0000B6A0                            ; ===========================================================================
0000B6A0                            
0000B6A0                            	@chgdirection:
0000B6A0 117C 0000 0034             		move.b	#0,buzz_buzzstatus(a0) ; set Buzz Bomber to "normal"
0000B6A6 0868 0000 0022             		bchg	#0,obStatus(a0)	; change direction
0000B6AC 317C 003B 0032             		move.w	#59,buzz_timedelay(a0)
0000B6B2                            
0000B6B2                            	@stop:
0000B6B2 5528 0025                  		subq.b	#2,ob2ndRout(a0)
0000B6B6 317C 0000 0010             		move.w	#0,obVelX(a0)	; stop Buzz Bomber moving
0000B6BC 117C 0000 001C             		move.b	#0,obAnim(a0)	; use "hovering" animation
0000B6C2                            
0000B6C2                            @keepgoing:
0000B6C2 4E75                       		rts	
0000B6C4                            ; ===========================================================================
0000B6C4                            
0000B6C4                            Buzz_Delete:	; Routine 4
0000B6C4 6100 0000                  		bsr.w	DeleteObject
0000B6C8 4E75                       		rts	
0000B6C8 4E75                       		rts	
0000B6CA                            		include	"_incObj\23 Buzz Bomber Missile.asm"
0000B6CA                            ; ---------------------------------------------------------------------------
0000B6CA                            ; Object 23 - missile that Buzz	Bomber throws
0000B6CA                            ; ---------------------------------------------------------------------------
0000B6CA                            
0000B6CA                            Missile:
0000B6CA 7000                       		moveq	#0,d0
0000B6CC 1028 0024                  		move.b	obRoutine(a0),d0
0000B6D0 323B 0000                  		move.w	Msl_Index(pc,d0.w),d1
0000B6D4 4EFB 1000                  		jmp	Msl_Index(pc,d1.w)
0000B6D8                            ; ===========================================================================
0000B6D8 0000                       Msl_Index:	dc.w Msl_Main-Msl_Index
0000B6DA 0000                       		dc.w Msl_Animate-Msl_Index
0000B6DC 0000                       		dc.w Msl_FromBuzz-Msl_Index
0000B6DE 0000                       		dc.w Msl_Delete-Msl_Index
0000B6E0 0000                       		dc.w Msl_FromNewt-Msl_Index
0000B6E2                            
0000B6E2 =0000003C                  msl_parent:	equ $3C
0000B6E2                            ; ===========================================================================
0000B6E2                            
0000B6E2                            Msl_Main:	; Routine 0
0000B6E2 5368 0032                  		subq.w	#1,$32(a0)
0000B6E6 6A00                       		bpl.s	Msl_ChkCancel
0000B6E8 5428 0024                  		addq.b	#2,obRoutine(a0)
0000B6EC 217C 0000 0000 0004        		move.l	#Map_Missile,obMap(a0)
0000B6F4 317C 2444 0002             		move.w	#$2444,obGfx(a0)
0000B6FA 117C 0004 0001             		move.b	#4,obRender(a0)
0000B700 317C 0180 0018             		move.w	#$180,obPriority(a0)
0000B706 117C 0008 0014             		move.b	#8,obActWid(a0)
0000B70C 0228 0003 0022             		andi.b	#3,obStatus(a0)
0000B712 4A28 0028                  		tst.b	obSubtype(a0)	; was object created by	a Newtron?
0000B716 6700                       		beq.s	Msl_Animate	; if not, branch
0000B718                            
0000B718 117C 0008 0024             		move.b	#8,obRoutine(a0) ; run "Msl_FromNewt" routine
0000B71E 117C 0087 0020             		move.b	#$87,obColType(a0)
0000B724 117C 0001 001C             		move.b	#1,obAnim(a0)
0000B72A 6000                       		bra.s	Msl_Animate2
0000B72C                            ; ===========================================================================
0000B72C                            
0000B72C                            Msl_Animate:	; Routine 2
0000B72C 6100                       		bsr.s	Msl_ChkCancel
0000B72E 43F9 0000 0000             		lea	(Ani_Missile).l,a1
0000B734 6100 0000                  		bsr.w	AnimateSprite
0000B738 6000 0000                  		bra.w	DisplaySprite
0000B73C                            
0000B73C                            ; ---------------------------------------------------------------------------
0000B73C                            ; Subroutine to	check if the Buzz Bomber which fired the missile has been
0000B73C                            ; destroyed, and if it has, then cancel	the missile
0000B73C                            ; ---------------------------------------------------------------------------
0000B73C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000B73C                            
0000B73C                            
0000B73C                            Msl_ChkCancel:
0000B73C 2268 003C                  		movea.l	msl_parent(a0),a1
0000B740 0C11 0000                  		cmpi.b	#id_ExplosionItem,0(a1) ; has Buzz Bomber been destroyed?
0000B744 6700                       		beq.s	Msl_Delete	; if yes, branch
0000B746 4E75                       		rts	
0000B748                            ; End of function Msl_ChkCancel
0000B748                            
0000B748                            ; ===========================================================================
0000B748                            
0000B748                            Msl_FromBuzz:	; Routine 4
0000B748 0828 0007 0022             		btst	#7,obStatus(a0)
0000B74E 6600                       		bne.s	@explode
0000B750 117C 0087 0020             		move.b	#$87,obColType(a0)
0000B756 117C 0001 001C             		move.b	#1,obAnim(a0)
0000B75C 6100 0000                  		bsr.w	SpeedToPos
0000B760 43F9 0000 0000             		lea	(Ani_Missile).l,a1
0000B766 6100 0000                  		bsr.w	AnimateSprite
0000B76A 6100 0000                  		bsr.w	DisplaySprite
0000B76E 3038 F72E                  		move.w	(v_limitbtm2).w,d0
0000B772 0640 00E0                  		addi.w	#$E0,d0
0000B776 B068 000C                  		cmp.w	obY(a0),d0	; has object moved below the level boundary?
0000B77A 6500                       		bcs.s	Msl_Delete	; if yes, branch
0000B77C 4E75                       		rts	
0000B77E                            ; ===========================================================================
0000B77E                            
0000B77E                            	@explode:
0000B77E 10BC 0000                  		move.b	#id_MissileDissolve,0(a0) ; change object to an explosion (Obj24)
0000B782 117C 0000 0024             		move.b	#0,obRoutine(a0)
0000B788 6000 F1D8                  		bra.w	MissileDissolve
0000B78C                            ; ===========================================================================
0000B78C                            
0000B78C                            Msl_Delete:	; Routine 6
0000B78C 6100 0000                  		bsr.w	DeleteObject
0000B790 4E75                       		rts	
0000B792                            ; ===========================================================================
0000B792                            
0000B792                            Msl_FromNewt:	; Routine 8
0000B792 4A28 0001                  		tst.b	obRender(a0)
0000B796 6AF4                       		bpl.s	Msl_Delete
0000B798 6100 0000                  		bsr.w	SpeedToPos
0000B79C                            
0000B79C                            Msl_Animate2:
0000B79C 43F9 0000 0000             		lea	(Ani_Missile).l,a1
0000B7A2 6100 0000                  		bsr.w	AnimateSprite
0000B7A6 6100 0000                  		bsr.w	DisplaySprite
0000B7AA 4E75                       		rts	
0000B7AA 4E75                       		rts	
0000B7AC                            		include	"_anim\Mozzietron.asm"
0000B7AC                            ; ---------------------------------------------------------------------------
0000B7AC                            ; Animation script - Buzz Bomber enemy
0000B7AC                            ; ---------------------------------------------------------------------------
0000B7AC 0000                       Ani_Mozzietron:	dc.w byte_9A1E-Ani_Mozzietron;0
0000B7AE 0000                       		dc.w byte_9A22-Ani_Mozzietron;1
0000B7B0 0000                       		dc.w byte_9A26-Ani_Mozzietron;2
0000B7B2 0100 01FF                  byte_9A1E:	dc.b 1,	0, 1, $FF
0000B7B6 0102 03FF                  byte_9A22:	dc.b 1,	2, 3, $FF
0000B7BA 0502 0304 05FE 01          byte_9A26:	dc.b 5, 2, 3, 4, 5, $FE, 1
0000B7C2 00                         		even
0000B7C2 00                         		even
0000B7C2                            		include	"_anim\Buzz Bomber.asm"
0000B7C2                            ; ---------------------------------------------------------------------------
0000B7C2                            ; Animation script - Buzz Bomber enemy
0000B7C2                            ; ---------------------------------------------------------------------------
0000B7C2 0000                       Ani_Buzz:	dc.w @fly1-Ani_Buzz
0000B7C4 0000                       		dc.w @fly2-Ani_Buzz
0000B7C6 0000                       		dc.w @fires-Ani_Buzz
0000B7C8 0100 01FF                  @fly1:		dc.b 1,	0, 1, afEnd
0000B7CC 0102 03FF                  @fly2:		dc.b 1,	2, 3, afEnd
0000B7D0 0104 05FF                  @fires:		dc.b 1,	4, 5, afEnd
0000B7D4                            		even
0000B7D4                            		even
0000B7D4                            		include	"_anim\Buzz Bomber Missile.asm"
0000B7D4                            ; ---------------------------------------------------------------------------
0000B7D4                            ; Animation script - missile that Buzz Bomber throws
0000B7D4                            ; ---------------------------------------------------------------------------
0000B7D4 0000                       Ani_Missile:	dc.w @flare-Ani_Missile
0000B7D6 0000                       		dc.w @missile-Ani_Missile
0000B7D8 0700 01FC                  @flare:		dc.b 7,	0, 1, afRoutine
0000B7DC 0102 03FF                  @missile:	dc.b 1,	2, 3, afEnd
0000B7E0                            		even
0000B7E0                            		even
0000B7E0                            Map_Mozzietron:	include	"_maps\Mozzietron.asm"
0000B7E0                            ; --------------------------------------------------------------------------------
0000B7E0                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0000B7E0                            ; --------------------------------------------------------------------------------
0000B7E0                            
0000B7E0                            SME_qvHIs:	
0000B7E0 0000 0000                  		dc.w SME_qvHIs_C-SME_qvHIs, SME_qvHIs_17-SME_qvHIs	
0000B7E4 0000 0000                  		dc.w SME_qvHIs_1D-SME_qvHIs, SME_qvHIs_28-SME_qvHIs	
0000B7E8 0000 0000                  		dc.w SME_qvHIs_38-SME_qvHIs, SME_qvHIs_4D-SME_qvHIs	
0000B7EC 02                         SME_qvHIs_C:	dc.b 2	
0000B7ED FD0C 2000 F0               		dc.b $FD, $C, $20, 0, $F0	
0000B7F2 ED09 2004 F8               		dc.b $ED, 9, $20, 4, $F8	
0000B7F7 01                         SME_qvHIs_17:	dc.b 1	
0000B7F8 F80D 200A F0               		dc.b $F8, $D, $20, $A, $F0	
0000B7FD 02                         SME_qvHIs_1D:	dc.b 2	
0000B7FE E90A 2012 F8               		dc.b $E9, $A, $20, $12, $F8	
0000B803 F901 201B F0               		dc.b $F9, 1, $20, $1B, $F0	
0000B808 03                         SME_qvHIs_28:	dc.b 3	
0000B809 DF07 2025 FB               		dc.b $DF, 7, $20, $25, $FB	
0000B80E E700 2030 0B               		dc.b $E7, 0, $20, $30, $B	
0000B813 FF00 002D FB               		dc.b $FF, 0, 0, $2D, $FB	
0000B818 04                         SME_qvHIs_38:	dc.b 4	
0000B819 E509 201D F4               		dc.b $E5, 9, $20, $1D, $F4	
0000B81E F501 2023 FC               		dc.b $F5, 1, $20, $23, $FC	
0000B823 F500 202E F4               		dc.b $F5, 0, $20, $2E, $F4	
0000B828 F500 202F 04               		dc.b $F5, 0, $20, $2F, 4	
0000B82D 04                         SME_qvHIs_4D:	dc.b 4	
0000B82E E509 201D F4               		dc.b $E5, 9, $20, $1D, $F4	
0000B833 F501 2023 FC               		dc.b $F5, 1, $20, $23, $FC	
0000B838 F500 202E F4               		dc.b $F5, 0, $20, $2E, $F4	
0000B83D F500 202F 04               		dc.b $F5, 0, $20, $2F, 4	
0000B842                            		even
0000B842                            		even
0000B842                            Map_Buzz:	include	"_maps\Buzz Bomber.asm"
0000B842                            ; --------------------------------------------------------------------------------
0000B842                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0000B842                            ; --------------------------------------------------------------------------------
0000B842                            
0000B842                            SME_yccqJ:	
0000B842 0000 0000                  		dc.w SME_yccqJ_C-SME_yccqJ, SME_yccqJ_2B-SME_yccqJ	
0000B846 0000 0000                  		dc.w SME_yccqJ_4A-SME_yccqJ, SME_yccqJ_69-SME_yccqJ	
0000B84A 0000 0000                  		dc.w SME_yccqJ_88-SME_yccqJ, SME_yccqJ_AC-SME_yccqJ	
0000B84E 06                         SME_yccqJ_C:	dc.b 6	
0000B84F F409 2000 E8               		dc.b $F4, 9, $20, 0, $E8	
0000B854 F409 200F 00               		dc.b $F4, 9, $20, $F, 0	
0000B859 0408 2015 E8               		dc.b 4, 8, $20, $15, $E8	
0000B85E 0404 2018 00               		dc.b 4, 4, $20, $18, 0	
0000B863 EE08 201A E9               		dc.b $EE, 8, $20, $1A, $E9	
0000B868 EE04 201D 01               		dc.b $EE, 4, $20, $1D, 1	
0000B86D 06                         SME_yccqJ_2B:	dc.b 6	
0000B86E F409 2000 E8               		dc.b $F4, 9, $20, 0, $E8	
0000B873 F409 200F 00               		dc.b $F4, 9, $20, $F, 0	
0000B878 0408 2015 E8               		dc.b 4, 8, $20, $15, $E8	
0000B87D 0404 2018 00               		dc.b 4, 4, $20, $18, 0	
0000B882 F108 201F EA               		dc.b $F1, 8, $20, $1F, $EA	
0000B887 F104 2022 02               		dc.b $F1, 4, $20, $22, 2	
0000B88C 06                         SME_yccqJ_4A:	dc.b 6	
0000B88D F409 2000 E8               		dc.b $F4, 9, $20, 0, $E8	
0000B892 F409 200F 00               		dc.b $F4, 9, $20, $F, 0	
0000B897 0408 2015 E8               		dc.b 4, 8, $20, $15, $E8	
0000B89C 0404 2018 00               		dc.b 4, 4, $20, $18, 0	
0000B8A1 EE08 201A E9               		dc.b $EE, 8, $20, $1A, $E9	
0000B8A6 EE04 201D 01               		dc.b $EE, 4, $20, $1D, 1	
0000B8AB 06                         SME_yccqJ_69:	dc.b 6	
0000B8AC F409 2000 E8               		dc.b $F4, 9, $20, 0, $E8	
0000B8B1 F409 200F 00               		dc.b $F4, 9, $20, $F, 0	
0000B8B6 0408 2015 E8               		dc.b 4, 8, $20, $15, $E8	
0000B8BB 0404 2018 00               		dc.b 4, 4, $20, $18, 0	
0000B8C0 F108 201F EA               		dc.b $F1, 8, $20, $1F, $EA	
0000B8C5 F104 2022 02               		dc.b $F1, 4, $20, $22, 2	
0000B8CA 07                         SME_yccqJ_88:	dc.b 7	
0000B8CB F40D 2000 EC               		dc.b $F4, $D, $20, 0, $EC	
0000B8D0 040C 2008 EC               		dc.b 4, $C, $20, 8, $EC	
0000B8D5 0C00 200C 04               		dc.b $C, 0, $20, $C, 4	
0000B8DA EE04 201D 04               		dc.b $EE, 4, $20, $1D, 4	
0000B8DF 0C00 200E FC               		dc.b $C, 0, $20, $E, $FC	
0000B8E4 0C00 200D F4               		dc.b $C, 0, $20, $D, $F4	
0000B8E9 EE08 201A EC               		dc.b $EE, 8, $20, $1A, $EC	
0000B8EE 04                         SME_yccqJ_AC:	dc.b 4	
0000B8EF F40D 2000 EC               		dc.b $F4, $D, $20, 0, $EC	
0000B8F4 040C 2008 EC               		dc.b 4, $C, $20, 8, $EC	
0000B8F9 0C00 200C 04               		dc.b $C, 0, $20, $C, 4	
0000B8FE 0C04 200D F4               		dc.b $C, 4, $20, $D, $F4	
0000B904 00                         		even
0000B904 00                         		even
0000B904                            Map_Missile:	include	"_maps\Buzz Bomber Missile.asm"
0000B904                            ; ---------------------------------------------------------------------------
0000B904                            ; Sprite mappings - missile that Buzz Bomber throws
0000B904                            ; ---------------------------------------------------------------------------
0000B904                            Map_Missile_internal:
0000B904 0000                       		dc.w @Flare1-Map_Missile_internal
0000B906 0000                       		dc.w @Flare2-Map_Missile_internal
0000B908 0000                       		dc.w @Ball1-Map_Missile_internal
0000B90A 0000                       		dc.w @Ball2-Map_Missile_internal
0000B90C 01                         @Flare1:	dc.b 1
0000B90D F805 0024 F8               		dc.b $F8, 5, 0,	$24, $F8 ; buzz bomber firing flare
0000B912 01                         @Flare2:	dc.b 1
0000B913 F805 0028 F8               		dc.b $F8, 5, 0,	$28, $F8
0000B918 01                         @Ball1:		dc.b 1
0000B919 F805 002C F8               		dc.b $F8, 5, 0,	$2C, $F8 ; missile itself
0000B91E 01                         @Ball2:		dc.b 1
0000B91F F805 0033 F8               		dc.b $F8, 5, 0,	$33, $F8
0000B924                            		even
0000B924                            		even
0000B924                            
0000B924                            		include	"_incObj\25 & 37 Rings.asm"
0000B924                            ; ---------------------------------------------------------------------------
0000B924                            ; Object 25 - rings
0000B924                            ; ---------------------------------------------------------------------------
0000B924                            
0000B924                            Rings:
0000B924 7000                       		moveq	#0,d0
0000B926 1028 0024                  		move.b	obRoutine(a0),d0
0000B92A 323B 0000                  		move.w	Ring_Index(pc,d0.w),d1
0000B92E 4EFB 1000                  		jmp	Ring_Index(pc,d1.w)
0000B932                            ; ===========================================================================
0000B932                            Ring_Index:
0000B932 0000                       ptr_Ring_Main:		dc.w Ring_Main-Ring_Index
0000B934 0000                       ptr_Ring_Animate:	dc.w Ring_Animate-Ring_Index
0000B936 0000                       ptr_Ring_Collect:	dc.w Ring_Collect-Ring_Index
0000B938 0000                       ptr_Ring_Sparkle:	dc.w Ring_Sparkle-Ring_Index
0000B93A 0000                       ptr_Ring_Delete:	dc.w Ring_Delete-Ring_Index
0000B93C 0000                       ptr_Ring_Attract:	dc.w Ring_Attract-Ring_Index
0000B93E 0000                       ptr_Ring_Collect1:	dc.w Ring_Collect-Ring_Index
0000B940 0000                       ptr_Ring_Sparkle1:	dc.w Ring_Sparkle-Ring_Index
0000B942 0000                       ptr_Ring_Delete1:	dc.w Ring_Delete-Ring_Index
0000B944                            
0000B944 =00000000                  id_Ring_Main:			equ ptr_Ring_Main-Ring_Index	; 0
0000B944 =00000002                  id_Ring_Animate:		equ ptr_Ring_Animate-Ring_Index	; 2
0000B944 =00000004                  id_Ring_Collect:		equ ptr_Ring_Collect-Ring_Index	; 4
0000B944 =00000006                  id_Ring_Sparkle:		equ ptr_Ring_Sparkle-Ring_Index	; 6
0000B944 =00000008                  id_Ring_Delete:			equ ptr_Ring_Delete-Ring_Index	; 8
0000B944 =0000000A                  id_Ring_Attract:		equ ptr_Ring_Attract-Ring_Index	; $A
0000B944 =00000004                  id_Ring_Collect1:		equ ptr_Ring_Collect-Ring_Index	; $C
0000B944 =00000006                  id_Ring_Sparkle1:		equ ptr_Ring_Sparkle-Ring_Index	; $E
0000B944 =00000008                  id_Ring_Delete1:		equ ptr_Ring_Delete-Ring_Index	; $10
0000B944                            ; ---------------------------------------------------------------------------
0000B944                            ; Distances between rings (format: horizontal, vertical)
0000B944                            ; ---------------------------------------------------------------------------
0000B944 1000                       Ring_PosData:	dc.b $10, 0		; horizontal tight
0000B946 1800                       		dc.b $18, 0		; horizontal normal
0000B948 2000                       		dc.b $20, 0		; horizontal wide
0000B94A 0010                       		dc.b 0,	$10		; vertical tight
0000B94C 0018                       		dc.b 0,	$18		; vertical normal
0000B94E 0020                       		dc.b 0,	$20		; vertical wide
0000B950 1010                       		dc.b $10, $10		; diagonal
0000B952 1818                       		dc.b $18, $18
0000B954 2020                       		dc.b $20, $20
0000B956 F010                       		dc.b $F0, $10
0000B958 E818                       		dc.b $E8, $18
0000B95A E020                       		dc.b $E0, $20
0000B95C 1008                       		dc.b $10, 8
0000B95E 1810                       		dc.b $18, $10
0000B960 F008                       		dc.b $F0, 8
0000B962 E810                       		dc.b $E8, $10
0000B964                            ; ===========================================================================
0000B964                            
0000B964                            Ring_Main:	; Routine 0
0000B964 45F8 FC00                  		lea	(v_objstate).w,a2
0000B968 7000                       		moveq	#0,d0
0000B96A 1028 0023                  		move.b	obRespawnNo(a0),d0
0000B96E 45F2 0002                  		lea	2(a2,d0.w),a2
0000B972 1812                       		move.b	(a2),d4
0000B974 1228 0028                  		move.b	obSubtype(a0),d1
0000B978 1001                       		move.b	d1,d0
0000B97A 0241 0007                  		andi.w	#7,d1
0000B97E 0C41 0007                  		cmpi.w	#7,d1
0000B982 6600                       		bne.s	loc_9B80
0000B984 7206                       		moveq	#6,d1
0000B986                            
0000B986                            	loc_9B80:
0000B986 4841                       		swap	d1
0000B988 323C 0000                  		move.w	#0,d1
0000B98C E808                       		lsr.b	#4,d0
0000B98E D040                       		add.w	d0,d0
0000B990 1A3B 00B2                  		move.b	Ring_PosData(pc,d0.w),d5 ; load ring spacing data
0000B994 4885                       		ext.w	d5
0000B996 1C3B 00AD                  		move.b	Ring_PosData+1(pc,d0.w),d6
0000B99A 4886                       		ext.w	d6
0000B99C 2248                       		movea.l	a0,a1
0000B99E 3428 0008                  		move.w	obX(a0),d2
0000B9A2 3628 000C                  		move.w	obY(a0),d3
0000B9A6 E20C                       		lsr.b	#1,d4
0000B9A8 6500                       		bcs.s	loc_9C02
0000B9AA 0892 0007                  		bclr	#7,(a2)
0000B9AE 6000                       		bra.s	loc_9BBA
0000B9B0                            ; ===========================================================================
0000B9B0                            
0000B9B0                            Ring_MakeRings:
0000B9B0 4841                       		swap	d1
0000B9B2 E20C                       		lsr.b	#1,d4
0000B9B4 6500                       		bcs.s	loc_9C02
0000B9B6 0892 0007                  		bclr	#7,(a2)
0000B9BA 6100 0000                  		bsr.w	FindFreeObj
0000B9BE 6600                       		bne.s	loc_9C0E
0000B9C0                            
0000B9C0                            loc_9BBA:
0000B9C0 12BC 0000                  		move.b	#id_Rings,0(a1)	; load ring object
0000B9C4 5429 0024                  		addq.b	#2,obRoutine(a1)
0000B9C8 3342 0008                  		move.w	d2,obX(a1)	; set x-axis position based on d2
0000B9CC 3368 0008 0032             		move.w	obX(a0),$32(a1)
0000B9D2 3343 000C                  		move.w	d3,obY(a1)	; set y-axis position based on d3
0000B9D6 237C 0000 0000 0004        		move.l	#Map_Ring,obMap(a1)
0000B9DE 337C 2798 0002             		move.w	#$2798,obGfx(a1)
0000B9E4 137C 0004 0001             		move.b	#4,obRender(a1)
0000B9EA 337C 0100 0018             		move.w	#$100,obPriority(a1)
0000B9F0 137C 0047 0020             		move.b	#$47,obColType(a1)
0000B9F6 137C 0008 0014             		move.b	#8,obActWid(a1)
0000B9FC 1368 0023 0023             		move.b	obRespawnNo(a0),obRespawnNo(a1)
0000BA02 1341 0034                  		move.b	d1,$34(a1)
0000BA06                            
0000BA06                            loc_9C02:
0000BA06 5241                       		addq.w	#1,d1
0000BA08 D445                       		add.w	d5,d2		; add ring spacing value to d2
0000BA0A D646                       		add.w	d6,d3		; add ring spacing value to d3
0000BA0C 4841                       		swap	d1
0000BA0E 51C9 FFA0                  		dbf	d1,Ring_MakeRings ; repeat for	number of rings
0000BA12                            
0000BA12                            loc_9C0E:
0000BA12 0812 0000                  		btst	#0,(a2)
0000BA16 6600 0000                  		bne.w	DeleteObject
0000BA1A                            
0000BA1A                            Ring_Animate:	; Routine 2
0000BA1A 4A38 F5C9                  		tst.b	(v_gshield).w
0000BA1E 6700                       		beq.s	@skip
0000BA20 4A28 0001                  		tst.b	obRender(a0)
0000BA24 6A00                       		bpl.s	@skip
0000BA26                            		
0000BA26 43F8 D000                  		lea (v_player).w,a1
0000BA2A                            		
0000BA2A 3029 0008                  		move.w	obX(a1),d0	; load Sonic's x-axis position
0000BA2E 9068 0008                  		sub.w	obX(a0),d0
0000BA32 6A00                       		bpl.s	@a1
0000BA34 4440                       		neg.w	d0
0000BA36                            		
0000BA36                            	@a1:
0000BA36 0C40 0040                  		cmpi.w	#$40,d0
0000BA3A 6200                       		bhi.s	@skip
0000BA3C                            		
0000BA3C 3029 000C                  		move.w	obY(a1),d0	; load Sonic's y-axis position
0000BA40 9068 000C                  		sub.w	obY(a0),d0
0000BA44 6A00                       		bpl.s	@a2
0000BA46 4440                       		neg.w	d0
0000BA48                            		
0000BA48                            	@a2:
0000BA48 0C40 0040                  		cmpi.w	#$40,d0
0000BA4C 6200                       		bhi.s	@skip
0000BA4E                            		
0000BA4E 117C 000A 0024             		move.b	#$A,obRoutine(a0)
0000BA54 45F8 FC00                  		lea	(v_objstate).w,a2
0000BA58 7000                       		moveq	#0,d0
0000BA5A 1028 0023                  		move.b	obRespawnNo(a0),d0
0000BA5E 1228 0034                  		move.b	$34(a0),d1
0000BA62 03F2 0002                  		bset	d1,2(a2,d0.w)
0000BA66                            		
0000BA66                            	@skip:
0000BA66 1178 FEC5 001A             		move.b	(v_ani2_frame).w,obFrame(a0) ; set frame
0000BA6C 6100 0000                  		bsr.w	DisplaySprite
0000BA8C 4E75                       		rts	
0000BA8E                            ; ===========================================================================
0000BA8E                            
0000BA8E                            Ring_Collect:	; Routine 4
0000BA8E 5428 0024                  		addq.b	#2,obRoutine(a0)
0000BA92 117C 0000 0020             		move.b	#0,obColType(a0)
0000BA98 317C 0080 0018             		move.w	#$80,obPriority(a0)
0000BA9E 6100 0000                  		bsr.w	CollectRing
0000BAA2 45F8 FC00                  		lea	(v_objstate).w,a2
0000BAA6 7000                       		moveq	#0,d0
0000BAA8 1028 0023                  		move.b	obRespawnNo(a0),d0
0000BAAC 1228 0034                  		move.b	$34(a0),d1
0000BAB0 03F2 0002                  		bset	d1,2(a2,d0.w)
0000BAB4                            
0000BAB4                            Ring_Sparkle:	; Routine 6
0000BAB4 43F9 0000 0000             		lea	(Ani_Ring).l,a1
0000BABA 6100 0000                  		bsr.w	AnimateSprite
0000BABE 6000 0000                  		bra.w	DisplaySprite
0000BAC2                            ; ===========================================================================
0000BAC2                            
0000BAC2                            Ring_Delete:	; Routine 8
0000BAC2 6000 0000                  		bra.w	DeleteObject
0000BAC6                            
0000BAC6                            Ring_Attract:	; Routine $A
0000BAC6 4A38 F5C9                  		tst.b	(v_gshield).w
0000BACA 6600                       		bne.s	@skip
0000BACC 10BC 0000                  		move.b	#id_RingLoss,0(a0)
0000BAD0 117C 0002 0024             		move.b	#2,obRoutine(a0)
0000BAD6 11FC 00FF FEC6             		move.b	#-1,(v_ani3_time).w
0000BADC 6000                       		bra.s	@display
0000BADE                            		
0000BADE                            	@skip:
0000BADE 323C 0030                  		move.w	#$30,d1	; horizontal
0000BAE2 3038 D008                  		move.w	(v_player+obX).w,d0
0000BAE6 B068 0008                  		cmp.w	obX(a0),d0
0000BAEA 6400                       		bcc.s	@a1
0000BAEC 4441                       		neg.w	d1
0000BAEE 4A68 0010                  		tst.w	obVelX(a0)
0000BAF2 6B00                       		bmi.s	@a2
0000BAF4 D241                       		add.w	d1,d1
0000BAF6 D241                       		add.w	d1,d1
0000BAF8 6000                       		bra.s	@a2
0000BAFA                            
0000BAFA                            	@a1:
0000BAFA 4A68 0010                  		tst.w	obVelX(a0)
0000BAFE 6A00                       		bpl.s	@a2
0000BB00 D241                       		add.w	d1,d1
0000BB02 D241                       		add.w	d1,d1
0000BB04                            
0000BB04                            	@a2:
0000BB04 D368 0010                  		add.w	d1,obVelX(a0)
0000BB08 323C 0030                  		move.w	#$30,d1	; vertical
0000BB0C 3038 D00C                  		move.w	(v_player+obY).w,d0
0000BB10 B068 000C                  		cmp.w	obY(a0),d0
0000BB14 6400                       		bcc.s	@a3
0000BB16 4441                       		neg.w	d1
0000BB18 4A68 0012                  		tst.w	obVelY(a0)
0000BB1C 6B00                       		bmi.s	@a4
0000BB1E D241                       		add.w	d1,d1
0000BB20 D241                       		add.w	d1,d1
0000BB22 6000                       		bra.s	@a4
0000BB24                            
0000BB24                            	@a3:
0000BB24 4A68 0012                  		tst.w	obVelY(a0)
0000BB28 6A00                       		bpl.s	@a4
0000BB2A D241                       		add.w	d1,d1
0000BB2C D241                       		add.w	d1,d1
0000BB2E                            
0000BB2E                            	@a4:
0000BB2E D368 0012                  		add.w	d1,obVelY(a0)
0000BB32 6100 0000                  		bsr.w	SpeedToPos
0000BB36                            		
0000BB36                            	@display:
0000BB36 1178 FEC3 001A             		move.b	(v_ani1_frame).w,obFrame(a0) ; set frame
0000BB3C 6000 0000                  		bra.w	DisplaySprite
0000BB40                            
0000BB40                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000BB40                            
0000BB40                            
0000BB40                            CollectRing:
0000BB40 5278 FE20                  		addq.w	#1,(v_rings).w	; add 1 to rings
0000BB44 0038 0001 FE1D             		ori.b	#1,(f_ringcount).w ; update the rings counter
0000BB4A 303C 0000                  		move.w	#sfx_Ring,d0	; play ring sound
0000BB4E 0C78 0064 FE20             		cmpi.w	#100,(v_rings).w ; do you have < 100 rings?
0000BB54 6500                       		bcs.s	@playsnd	; if yes, branch
0000BB56 08F8 0001 FE1B             		bset	#1,(v_lifecount).w ; update lives counter
0000BB5C 6700                       		beq.s	@got100
0000BB5E 0C78 00C8 FE20             		cmpi.w	#200,(v_rings).w ; do you have < 200 rings?
0000BB64 6500                       		bcs.s	@playsnd	; if yes, branch
0000BB66 08F8 0002 FE1B             		bset	#2,(v_lifecount).w ; update lives counter
0000BB6C 6600                       		bne.s	@playsnd
0000BB6E                            
0000BB6E                            	@got100:
0000BB6E 5238 FE12                  		addq.b	#1,(v_lives).w	; add 1 to the number of lives you have
0000BB72 5238 FE1C                  		addq.b	#1,(f_lifecount).w ; update the lives counter
0000BB76 303C 0000                  		move.w	#bgm_ExtraLife,d0 ; play extra life music
0000BB7A                            		
0000BB7A                            
0000BB7A                            	@playsnd:
0000BB7A 4EF9 0000 1254             		jmp	(PlaySound_Special).l
0000BB80                            ; End of function CollectRing
0000BB80                            
0000BB80                            ; ===========================================================================
0000BB80                            ; ---------------------------------------------------------------------------
0000BB80                            ; Object 37 - rings flying out of Sonic	when he's hit
0000BB80                            ; ---------------------------------------------------------------------------
0000BB80                            
0000BB80                            RingLoss:
0000BB80 7000                       		moveq	#0,d0
0000BB82 1028 0024                  		move.b	obRoutine(a0),d0
0000BB86 323B 0000                  		move.w	RLoss_Index(pc,d0.w),d1
0000BB8A 4EFB 1000                  		jmp	RLoss_Index(pc,d1.w)
0000BB8E                            ; ===========================================================================
0000BB8E 0000                       RLoss_Index:	dc.w RLoss_Count-RLoss_Index
0000BB90 0000                       		dc.w RLoss_Bounce-RLoss_Index
0000BB92 0000                       		dc.w RLoss_Collect-RLoss_Index
0000BB94 0000                       		dc.w RLoss_Sparkle-RLoss_Index
0000BB96 0000                       		dc.w RLoss_Delete-RLoss_Index
0000BB98                            ; ===========================================================================
0000BB98                            
0000BB98                            RLoss_Count:	; Routine 0
0000BB98 2248                       		movea.l	a0,a1
0000BB9A 7A00                       		moveq	#0,d5
0000BB9C 3A38 FE20                  		move.w	(v_rings).w,d5	; check number of rings you have
0000BBA0 47F9 0000 0000                     lea     SpillRingData,a3        ; load the address of the array in a3
0000BBA6 7018                               moveq   #24,d0                  ; lose a max of 24 rings
0000BBA8 45F8 D000                          lea     (v_player).w,a2    ; a2=character
0000BBAC 082A 0006 0022                     btst    #6,obStatus(a2)           ; is Sonic underwater?
0000BBB2 6700                               beq.s   @cont                       ; if not, branch
0000BBB4 47F9 0000 0000                     lea    SpillRingData_Water,a3        ; load the UNDERWATER address of the array in a3
0000BBBA 7010                               moveq   #16,d0                   ; lose a max of 16 rings underwater
0000BBBC                            @cont:
0000BBBC BA40                               cmp.w   d0,d5
0000BBBE 6500                               bcs.s   @belowmax
0000BBC0 3A00                               move.w  d0,d5
0000BBC2                            
0000BBC2                            @belowmax:
0000BBC2 5345                               subq.w  #1,d5
0000BBC4 383C 0288                          move.w  #$288,d4
0000BBC8 6000                       		bra.s	@makerings
0000BBCA                            ; ===========================================================================
0000BBCA                            
0000BBCA                            	@loop:
0000BBCA 6100 0000                  		bsr.w	FindFreeObj
0000BBCE 6600 0000                  		bne.w	@resetcounter
0000BBD2                            
0000BBD2                            @makerings:
0000BBD2 12BC 0000                  		move.b	#id_RingLoss,0(a1) ; load bouncing ring object
0000BBD6 5429 0024                  		addq.b	#2,obRoutine(a1)
0000BBDA 137C 0008 0016             		move.b	#8,obHeight(a1)
0000BBE0 137C 0008 0017             		move.b	#8,obWidth(a1)
0000BBE6 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000BBEC 3368 000C 000C             		move.w	obY(a0),obY(a1)
0000BBF2 237C 0000 0000 0004        		move.l	#Map_Ring,obMap(a1)
0000BBFA 337C 2798 0002             		move.w	#$2798,obGfx(a1)
0000BC00 137C 0004 0001             		move.b	#4,obRender(a1)
0000BC06 137C 0047 0020             		move.b	#$47,obColType(a1)
0000BC0C 137C 0008 0014             		move.b	#8,obActWid(a1)
0000BC12 4A38 F64C                  		tst.b	($FFFFF64C).w		; Does the level have water?
0000BC16 6700                       		beq.s	@skiphalvingvel		; If not, branch and skip underwater checks
0000BC18 3C38 F646                  		move.w	($FFFFF646).w,d6	; Move water level to d6
0000BC1C BC68 000C                  		cmp.w	obY(a0),d6		; Is the ring object underneath the water level?
0000BC20 6E00                       		bgt.s	@skiphalvingvel		; If not, branch and skip underwater commands
0000BC22 E240                       		asr.w	d0			; Half d0. Makes the ring's x_vel bounce to the left/right slower
0000BC24 E241                       		asr.w	d1			; Half d1. Makes the ring's y_vel bounce up/down slower
0000BC26                            @skiphalvingvel:
0000BC26 335B 0010                  		move.w  (a3)+,obVelX(a1)         ; move the data contained in the array to the x velocity and increment the address in a3
0000BC2A 335B 0012                  		move.w  (a3)+,obVelY(a1)         ; move the data contained in the array to the y velocity and increment the address in a3	
0000BC2E 51CD FF9A                  		dbf	d5,@loop	; repeat for number of rings (max 31)
0000BC32                            
0000BC32                            @resetcounter:
0000BC32 31FC 0000 FE20             		move.w	#0,(v_rings).w	; reset number of rings to zero
0000BC38 11FC 0080 FE1D             		move.b	#$80,(f_ringcount).w ; update ring counter
0000BC3E 11FC 0000 FE1B             		move.b	#0,(v_lifecount).w
0000BC44 70FF                               moveq   #-1,d0                  ; Move #-1 to d0
0000BC46 1140 001F                          move.b  d0,obDelayAni(a0)       ; Move d0 to new timer
0000BC4A 11C0 FEC6                          move.b  d0,(v_ani3_time).w      ; Move d0 to old timer (for animated purposes)
0000BC58                            
0000BC58                            RLoss_Bounce:	; Routine 2
0000BC58 1178 FEC7 001A             		move.b	(v_ani3_frame).w,obFrame(a0)
0000BC5E 6100 0000                  		bsr.w	SpeedToPos
0000BC62 0668 0018 0012             		addi.w	#$18,obVelY(a0)
0000BC68 4A38 F64C                  		tst.b	($FFFFF64C).w		; Does the level have water?
0000BC6C 6700                       		beq.s	@skipbounceslow		; If not, branch and skip underwater checks
0000BC6E 3C38 F646                  		move.w	($FFFFF646).w,d6	; Move water level to d6
0000BC72 BC68 000C                  		cmp.w	obY(a0),d6		; Is the ring object underneath the water level?
0000BC76 6E00                       		bgt.s	@skipbounceslow		; If not, branch and skip underwater commands
0000BC78 0468 000E 0012             		subi.w	#$E,obVelY(a0)		; Reduce gravity by $E ($18-$E=$A), giving the underwater effect
0000BC7E                            	@skipbounceslow:
0000BC7E 6B00                       		bmi.s	@chkdel
0000BC80 1038 FE0F                  		move.b	(v_vbla_byte).w,d0
0000BC84 D007                       		add.b	d7,d0
0000BC86 0200 0003                  		andi.b	#3,d0
0000BC8A 6600                       		bne.s	@chkdel
0000BC8C 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0000BC92 4A41                       		tst.w	d1
0000BC94 6A00                       		bpl.s	@chkdel
0000BC96 D368 000C                  		add.w	d1,obY(a0)
0000BC9A 3028 0012                  		move.w	obVelY(a0),d0
0000BC9E E440                       		asr.w	#2,d0
0000BCA0 9168 0012                  		sub.w	d0,obVelY(a0)
0000BCA4 4468 0012                  		neg.w	obVelY(a0)
0000BCA8                            
0000BCA8                            	@chkdel:
0000BCA8 5328 001F                  		subq.b  #1,obDelayAni(a0)  ; Subtract 1   ; RHS Ring Timer fix
0000BCAC 6700 0000                          beq.w   DeleteObject       ; If 0, delete ; RHS Ring Timer fix
0000BCB0 3038 F72E                  		move.w	(v_limitbtm2).w,d0
0000BCB4 0640 00E0                  		addi.w	#$E0,d0
0000BCB8 B068 000C                  		cmp.w	obY(a0),d0	   ; has object moved below level boundary?
0000BCBC 6500 0000                  		bcs.w	RLoss_Delete	   ; if yes, branch
0000BCC0 4A38 F5C9                  		tst.b	(v_gshield).w
0000BCC4 6700                       		beq.s	@skip
0000BCC6 4A28 0001                  		tst.b	obRender(a0)
0000BCCA 6A00                       		bpl.s	@skip
0000BCCC                            		
0000BCCC 43F8 D000                  		lea (v_player).w,a1
0000BCD0                            		
0000BCD0 3029 0008                  		move.w	obX(a1),d0	; load Sonic's x-axis position
0000BCD4 9068 0008                  		sub.w	obX(a0),d0
0000BCD8 6A00                       		bpl.s	@a1
0000BCDA 4440                       		neg.w	d0
0000BCDC                            		
0000BCDC                            	@a1:
0000BCDC 0C40 00A0                  		cmpi.w	#$A0,d0
0000BCE0 6200                       		bhi.s	@skip
0000BCE2                            		
0000BCE2 3029 000C                  		move.w	obY(a1),d0	; load Sonic's y-axis position
0000BCE6 9068 000C                  		sub.w	obY(a0),d0
0000BCEA 6A00                       		bpl.s	@a2
0000BCEC 4440                       		neg.w	d0
0000BCEE                            		
0000BCEE                            	@a2:
0000BCEE 0C40 00A0                  		cmpi.w	#$A0,d0
0000BCF2 6200                       		bhi.s	@skip
0000BCF4                            		
0000BCF4 117C 000A 0024             		move.b	#$A,obRoutine(a0)
0000BCFA 10BC 0000                  		move.b	#id_Rings,0(a0)
0000BCFE                            		
0000BCFE                            	@skip:		
0000BCFE 43F8 AD80                          lea     v_spritequeue+$180,a1
0000BD02 D2FC 0080                          adda.w  #$80,a1
0000BD06 0C51 007E                          cmpi.w  #$7E,(a1)
0000BD0A 6400                               bcc.s   @cont
0000BD0C 5451                               addq.w  #2,(a1)
0000BD0E D2D1                               adda.w  (a1),a1
0000BD10 3288                               move.w  a0,(a1)
0000BD12                            		
0000BD12                            	@cont:
0000BD12 4E75                               rts		
0000BD14                            ; ===========================================================================
0000BD14                            
0000BD14                            RLoss_Collect:	; Routine 4
0000BD14 5428 0024                  		addq.b	#2,obRoutine(a0)
0000BD18 117C 0000 0020             		move.b	#0,obColType(a0)
0000BD1E 6100 FE20                  		bsr.w	CollectRing
0000BD22                            
0000BD22                            RLoss_Sparkle:	; Routine 6
0000BD22 43F9 0000 0000             		lea	(Ani_Ring).l,a1
0000BD28 6100 0000                  		bsr.w	AnimateSprite
0000BD2C 43F8 AD80                  		lea     v_spritequeue+$180,a1
0000BD30 0C51 007E                          cmpi.w  #$7E,(a1)
0000BD34 6400                               bcc.s   @cont
0000BD36 5451                               addq.w  #2,(a1)
0000BD38 D2D1                               adda.w  (a1),a1
0000BD3A 3288                               move.w  a0,(a1)
0000BD3C                            			
0000BD3C                            	@cont:
0000BD3C 4E75                               rts
0000BD3E                            ; ===========================================================================
0000BD3E                            
0000BD3E                            RLoss_Delete:	; Routine 8
0000BD3E 6000 0000                  		bra.w	DeleteObject
0000BD42                            
0000BD42                            ; ----------------------------------------------------------------------------------------------
0000BD42                            ; Ring Spawn Array 
0000BD42                            ; ----------------------------------------------------------------------------------------------
0000BD42                            
0000BD42 FF3C FC14 00C4 FC14 FDC8+  SpillRingData:  dc.w    $FF3C,$FC14, $00C4,$FC14, $FDC8,$FCB0, $0238,$FCB0 ; 4
0000BD52 FCB0 FDC8 0350 FDC8 FC14+                  dc.w    $FCB0,$FDC8, $0350,$FDC8, $FC14,$FF3C, $03EC,$FF3C ; 8
0000BD62 FC14 00C4 03EC 00C4 FCB0+                  dc.w    $FC14,$00C4, $03EC,$00C4, $FCB0,$0238, $0350,$0238 ; 12
0000BD72 FDC8 0350 0238 0350 FF3C+                  dc.w    $FDC8,$0350, $0238,$0350, $FF3C,$03EC, $00C4,$03EC ; 16
0000BD82 FF9E FE0A 0062 FE0A FEE4+                  dc.w    $FF9E,$FE0A, $0062,$FE0A, $FEE4,$FE58, $011C,$FE58 ; 20
0000BD92 FE58 FEE4 01A8 FEE4 FE0A+                  dc.w    $FE58,$FEE4, $01A8,$FEE4, $FE0A,$FF9E, $01F6,$FF9E ; 24
0000BDA2 FE0A 0062 01F6 0062 FE58+                  dc.w    $FE0A,$0062, $01F6,$0062, $FE58,$011C, $01A8,$011C ; 28
0000BDB2 FEE4 01A8 011C 01A8 FF9E+                  dc.w    $FEE4,$01A8, $011C,$01A8, $FF9E,$0156, $0062,$0156 ; 32
0000BDC2                                            even
0000BDC2                            ; ===========================================================================
0000BDC2                            ; -------------------------------------------------------------------------------------
0000BDC2                            ; Ring Spawn Array - Underwater - same thing as I said above. Edit at your own risk!!!
0000BDC2                            ; -------------------------------------------------------------------------------------
0000BDC2                            
0000BDC2                            SpillRingData_Water:
0000BDC2 FF9C FE08 0064 FE08 FEE4+  				dc.w    $FF9C,$FE08, $0064,$FE08, $FEE4,$FE58, $011C,$FE58 ; 4
0000BDD2 FE58 FEE4 01A8 FEE4 FE08+                  dc.w    $FE58,$FEE4, $01A8,$FEE4, $FE08,$FF9C, $01F8,$FF9C ; 8
0000BDE2 FE08 0060 01F8 0060 FE58+                  dc.w    $FE08,$0060, $01F8,$0060, $FE58,$011C, $01A8,$011C ; 12
0000BDF2 FEE4 01A8 011C 01A8 FF9C+                  dc.w    $FEE4,$01A8, $011C,$01A8, $FF9C,$01F4, $0064,$01F4 ; 16
0000BE02 FFCE FF04 0032 FF04 FF72+                  dc.w    $FFCE,$FF04, $0032,$FF04, $FF72,$FF2C, $008E,$FF2C ; 20
0000BE12 FF2C FF72 00D4 FF72 FF04+                  dc.w    $FF2C,$FF72, $00D4,$FF72, $FF04,$FFCE, $00FC,$FFCE ; 24
0000BE22 FF04 0030 00FC 0030 FF2C+                  dc.w    $FF04,$0030, $00FC,$0030, $FF2C,$008E, $00D4,$008E ; 28
0000BE32 FF72 00D4 008E 00D4 FFCE+                  dc.w    $FF72,$00D4, $008E,$00D4, $FFCE,$00FA, $0032,$00FA ; 32
0000BE42                                            even
0000BE42                            ; ===========================================================================				
0000BE42                            ; ===========================================================================				
0000BE42                            		include	"_incObj\4B Giant Ring.asm"
0000BE42                            ; ---------------------------------------------------------------------------
0000BE42                            ; Object 4B - giant ring for entry to special stage
0000BE42                            ; ---------------------------------------------------------------------------
0000BE42                            
0000BE42                            GiantRing:
0000BE42 7000                       		moveq	#0,d0
0000BE44 1028 0024                  		move.b	obRoutine(a0),d0
0000BE48 323B 0000                  		move.w	GRing_Index(pc,d0.w),d1
0000BE4C 4EFB 1000                  		jmp	GRing_Index(pc,d1.w)
0000BE50                            ; ===========================================================================
0000BE50 0000                       GRing_Index:	dc.w GRing_Main-GRing_Index
0000BE52 0000                       		dc.w GRing_Animate-GRing_Index
0000BE54 0000                       		dc.w GRing_Collect-GRing_Index
0000BE56 0000                       		dc.w GRing_Delete-GRing_Index
0000BE58                            ; ===========================================================================
0000BE58                            
0000BE58                            GRing_Main:    ; Routine 0
0000BE58 217C 0000 0000 0004        		move.l	#Map_GRing,obMap(a0)
0000BE60 317C 2400 0002             		move.w	#$2400,obGfx(a0)
0000BE66 0028 0004 0001             		ori.b	#4,obRender(a0)
0000BE6C 117C 0040 0014             		move.b	#$40,obActWid(a0)
0000BE72 4A28 0001                  		tst.b	obRender(a0)
0000BE76 6A00                       		bpl.s	GRing_Animate
0000BE78 0C38 0006 FE57             		cmpi.b	#6,(v_emeralds).w ; do you have 6 emeralds?
0000BE7E 6700 0000                  		beq.w	GRing_Delete    ; if yes, branch
0000BE82 0C38 0002 F5C3             		cmpi.b	#2,(f_emeraldm).w    ;TIS Did you  hit the S-Monitor?
0000BE88 6700                       		beq.s	GRing_Okay    ; if yes, branch
0000BE8A                            
0000BE8A 4E75                       		rts    
0000BE8C                            ; ===========================================================================
0000BE8C                            
0000BE8C                            GRing_Okay:
0000BE8C 5428 0024                  		addq.b	#2,obRoutine(a0)
0000BE90 317C 0100 0018             		move.w	#$100,obPriority(a0)
0000BE96 117C 0052 0020             		move.b	#$52,obColType(a0)
0000BE9C 31FC 0C40 F7BE             		move.w	#$C40,(v_gfxbigring).w	; Signal that Art_BigRing should be loaded ($C40 is the size of Art_BigRing)
0000BEA2                            
0000BEA2                            GRing_Animate:	; Routine 2
0000BEA2 1178 FEC3 001A             		move.b	(v_ani1_frame).w,obFrame(a0)
0000BEC6 6000 0000                  		bra.w	DisplaySprite
0000BECA                            ; ===========================================================================
0000BECA                            
0000BECA                            GRing_Collect:	; Routine 4
0000BECA 5528 0024                  		subq.b	#2,obRoutine(a0)
0000BECE 117C 0000 0020             		move.b	#0,obColType(a0)
0000BED4 6100 0000                  		bsr.w	FindFreeObj
0000BED8 6600 0000                  		bne.w	GRing_PlaySnd
0000BEDC 12BC 0000                  		move.b	#id_RingFlash,0(a1) ; load giant ring flash object
0000BEE0 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000BEE6 3368 000C 000C             		move.w	obY(a0),obY(a1)
0000BEEC 2348 003C                  		move.l	a0,$3C(a1)
0000BEF0 3038 D008                  		move.w	(v_player+obX).w,d0
0000BEF4 B068 0008                  		cmp.w	obX(a0),d0	; has Sonic come from the left?
0000BEF8 6500                       		bcs.s	GRing_PlaySnd	; if yes, branch
0000BEFA 08E9 0000 0001             		bset	#0,obRender(a1)	; reverse flash	object	
0000BF00 11FC 0001 FE57             		move.b  #1,(v_emeralds).w
0000BF06 11FC 0000 F5C3             		move.b  #0,(f_emeraldm).w
0000BF0C                            		
0000BF0C                            GRing_PlaySnd:
0000BF16 608A                       		bra.s	GRing_Animate
0000BF18                            ; ===========================================================================
0000BF18                            
0000BF18                            GRing_Delete:	; Routine 6
0000BF18 6000 0000                  		bra.w	DeleteObject
0000BF18 6000 0000                  		bra.w	DeleteObject
0000BF1C                            		include	"_incObj\7C Ring Flash.asm"
0000BF1C                            ; ---------------------------------------------------------------------------
0000BF1C                            ; Object 7C - flash effect when	you collect the	giant ring
0000BF1C                            ; ---------------------------------------------------------------------------
0000BF1C                            
0000BF1C                            RingFlash:
0000BF1C 7000                       		moveq	#0,d0
0000BF1E 1028 0024                  		move.b	obRoutine(a0),d0
0000BF22 323B 0000                  		move.w	Flash_Index(pc,d0.w),d1
0000BF26 4EFB 1000                  		jmp	Flash_Index(pc,d1.w)
0000BF2A                            ; ===========================================================================
0000BF2A 0000                       Flash_Index:	dc.w Flash_Main-Flash_Index
0000BF2C 0000                       		dc.w Flash_ChkDel-Flash_Index
0000BF2E 0000                       		dc.w Flash_Delete-Flash_Index
0000BF30                            ; ===========================================================================
0000BF30                            
0000BF30                            Flash_Main:	; Routine 0
0000BF30 5428 0024                  		addq.b	#2,obRoutine(a0)
0000BF34 217C 0000 0000 0004        		move.l	#Map_Flash,obMap(a0)
0000BF3C 317C 2462 0002             		move.w	#$2462,obGfx(a0)
0000BF42 0028 0004 0001             		ori.b	#4,obRender(a0)
0000BF48 317C 0000 0018             		move.w	#0,obPriority(a0)
0000BF4E 117C 0020 0014             		move.b	#$20,obActWid(a0)
0000BF54 117C 00FF 001A             		move.b	#$FF,obFrame(a0)
0000BF5A                            
0000BF5A                            Flash_ChkDel:	; Routine 2
0000BF5A 6100                       		bsr.s	Flash_Collect
0000BF7A 6000 0000                  		bra.w	DisplaySprite
0000BF7E                            
0000BF7E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000BF7E                            
0000BF7E                            
0000BF7E                            Flash_Collect:
0000BF7E 5328 001E                  		subq.b	#1,obTimeFrame(a0)
0000BF82 6A00                       		bpl.s	locret_9F76
0000BF84 117C 0001 001E             		move.b	#1,obTimeFrame(a0)
0000BF8A 5228 001A                  		addq.b	#1,obFrame(a0)
0000BF8E 0C28 0008 001A             		cmpi.b	#8,obFrame(a0)	; has animation	finished?
0000BF94 6400                       		bcc.s	Flash_End	; if yes, branch
0000BF96 0C28 0003 001A             		cmpi.b	#3,obFrame(a0)	; is 3rd frame displayed?
0000BF9C 6600                       		bne.s	locret_9F76	; if not, branch
0000BF9E 2268 003C                  		movea.l	$3C(a0),a1	; get parent object address
0000BFA2 137C 0006 0024             		move.b	#6,obRoutine(a1) ; delete parent object
0000BFA8 11FC 0000 D01C             		move.b	#id_Null,(v_player+obAnim).w ; make Sonic invisible
0000BFAE 11FC 0001 F7CD             		move.b	#1,(f_bigring).w ; stop	Sonic getting bonuses
0000BFB4 4238 FE2D                  		clr.b	(v_invinc).w	; remove invincibility
0000BFB8 4238 FE2C                  		clr.b	(v_shield).w	; remove shield
0000BFBC                            
0000BFBC                            locret_9F76:
0000BFBC 4E75                       		rts	
0000BFBE                            ; ===========================================================================
0000BFBE                            
0000BFBE                            Flash_End:
0000BFBE 5428 0024                  		addq.b	#2,obRoutine(a0)
0000BFC2 31FC 0000 D000             		move.w	#0,(v_player).w ; remove Sonic object
0000BFC8 588F                       		addq.l	#4,sp
0000BFCA 4E75                       		rts	
0000BFCC                            ; End of function Flash_Collect
0000BFCC                            
0000BFCC                            ; ===========================================================================
0000BFCC                            
0000BFCC                            Flash_Delete:	; Routine 4
0000BFCC 6000 0000                  		bra.w	DeleteObject
0000BFCC 6000 0000                  		bra.w	DeleteObject
0000BFD0                            
0000BFD0                            		include	"_anim\Rings.asm"
0000BFD0                            ; ---------------------------------------------------------------------------
0000BFD0                            ; Animation script - ring
0000BFD0                            ; ---------------------------------------------------------------------------
0000BFD0 0000                       Ani_Ring:	dc.w @ring-Ani_Ring
0000BFD2 0706 0708 09FC             @ring:		dc.b 7,	6, 7, 8, 9, afRoutine
0000BFD8                            		even
0000BFD8                            		even
0000BFD8                            Map_Ring:		include	"_maps\Rings (JP1).asm"
0000BFD8                            ; --------------------------------------------------------------------------------
0000BFD8                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0000BFD8                            ; --------------------------------------------------------------------------------
0000BFD8                            
0000BFD8                            SME_aSMQh:	
0000BFD8 0000 0000                  		dc.w SME_aSMQh_14-SME_aSMQh, SME_aSMQh_1A-SME_aSMQh	
0000BFDC 0000 0000                  		dc.w SME_aSMQh_20-SME_aSMQh, SME_aSMQh_26-SME_aSMQh	
0000BFE0 0000 0000                  		dc.w SME_aSMQh_2C-SME_aSMQh, SME_aSMQh_32-SME_aSMQh	
0000BFE4 0000 0000                  		dc.w SME_aSMQh_38-SME_aSMQh, SME_aSMQh_3E-SME_aSMQh	
0000BFE8 0000 0000                  		dc.w SME_aSMQh_44-SME_aSMQh, SME_aSMQh_4A-SME_aSMQh	
0000BFEC 01                         SME_aSMQh_14:	dc.b 1	
0000BFED F805 0000 F8               		dc.b $F8, 5, 0, 0, $F8	
0000BFF2 01                         SME_aSMQh_1A:	dc.b 1	
0000BFF3 F805 0004 F8               		dc.b $F8, 5, 0, 4, $F8	
0000BFF8 01                         SME_aSMQh_20:	dc.b 1	
0000BFF9 F805 000A F8               		dc.b $F8, 5, 0, $A, $F8	
0000BFFE 01                         SME_aSMQh_26:	dc.b 1	
0000BFFF F801 0008 FC               		dc.b $F8, 1, 0, 8, $FC	
0000C004 01                         SME_aSMQh_2C:	dc.b 1	
0000C005 F805 080A F8               		dc.b $F8, 5, 8, $A, $F8	
0000C00A 01                         SME_aSMQh_32:	dc.b 1	
0000C00B F805 0804 F8               		dc.b $F8, 5, 8, 4, $F8	
0000C010 01                         SME_aSMQh_38:	dc.b 1	
0000C011 F805 0010 F8               		dc.b $F8, 5, 0, $10, $F8	
0000C016 01                         SME_aSMQh_3E:	dc.b 1	
0000C017 F805 1810 F8               		dc.b $F8, 5, $18, $10, $F8	
0000C01C 01                         SME_aSMQh_44:	dc.b 1	
0000C01D F805 0810 F8               		dc.b $F8, 5, 8, $10, $F8	
0000C022 01                         SME_aSMQh_4A:	dc.b 1	
0000C023 F805 1010 F8               		dc.b $F8, 5, $10, $10, $F8	
0000C028                            		even
0000C028                            		even
0000C028                            Map_GRing:	include	"_maps\Giant Ring.asm"
0000C028                            ; ---------------------------------------------------------------------------
0000C028                            ; Sprite mappings - giant ring
0000C028                            ; ---------------------------------------------------------------------------
0000C028                            Map_GRing_internal:
0000C028 0000                       		dc.w byte_9FDA-Map_GRing_internal
0000C02A 0000                       		dc.w byte_A00D-Map_GRing_internal
0000C02C 0000                       		dc.w byte_A036-Map_GRing_internal
0000C02E 0000                       		dc.w byte_A04B-Map_GRing_internal
0000C030 0A                         byte_9FDA:	dc.b $A
0000C031 E008 0000 E8               		dc.b $E0, 8, 0,	0, $E8	; ring front
0000C036 E008 0003 00               		dc.b $E0, 8, 0,	3, 0
0000C03B E80C 0006 E0               		dc.b $E8, $C, 0, 6, $E0
0000C040 E80C 000A 00               		dc.b $E8, $C, 0, $A, 0
0000C045 F007 000E E0               		dc.b $F0, 7, 0,	$E, $E0
0000C04A F007 0016 10               		dc.b $F0, 7, 0,	$16, $10
0000C04F 100C 001E E0               		dc.b $10, $C, 0, $1E, $E0
0000C054 100C 0022 00               		dc.b $10, $C, 0, $22, 0
0000C059 1808 0026 E8               		dc.b $18, 8, 0,	$26, $E8
0000C05E 1808 0029 00               		dc.b $18, 8, 0,	$29, 0
0000C063 08                         byte_A00D:	dc.b 8
0000C064 E00C 002C F0               		dc.b $E0, $C, 0, $2C, $F0 ; ring angle
0000C069 E808 0030 E8               		dc.b $E8, 8, 0,	$30, $E8
0000C06E E809 0033 00               		dc.b $E8, 9, 0,	$33, 0
0000C073 F007 0039 E8               		dc.b $F0, 7, 0,	$39, $E8
0000C078 F805 0041 08               		dc.b $F8, 5, 0,	$41, 8
0000C07D 0809 0045 00               		dc.b 8,	9, 0, $45, 0
0000C082 1008 004B E8               		dc.b $10, 8, 0,	$4B, $E8
0000C087 180C 004E F0               		dc.b $18, $C, 0, $4E, $F0
0000C08C 04                         byte_A036:	dc.b 4
0000C08D E007 0052 F4               		dc.b $E0, 7, 0,	$52, $F4 ; ring perpendicular
0000C092 E003 0852 04               		dc.b $E0, 3, 8,	$52, 4
0000C097 0007 005A F4               		dc.b 0,	7, 0, $5A, $F4
0000C09C 0003 085A 04               		dc.b 0,	3, 8, $5A, 4
0000C0A1 08                         byte_A04B:	dc.b 8
0000C0A2 E00C 082C F0               		dc.b $E0, $C, 8, $2C, $F0 ; ring angle
0000C0A7 E808 0830 00               		dc.b $E8, 8, 8,	$30, 0
0000C0AC E809 0833 E8               		dc.b $E8, 9, 8,	$33, $E8
0000C0B1 F007 0839 08               		dc.b $F0, 7, 8,	$39, 8
0000C0B6 F805 0841 E8               		dc.b $F8, 5, 8,	$41, $E8
0000C0BB 0809 0845 E8               		dc.b 8,	9, 8, $45, $E8
0000C0C0 1008 084B 00               		dc.b $10, 8, 8,	$4B, 0
0000C0C5 180C 084E F0               		dc.b $18, $C, 8, $4E, $F0
0000C0CA                            		even
0000C0CA                            		even
0000C0CA                            Map_Flash:	include	"_maps\Ring Flash.asm"
0000C0CA                            ; ---------------------------------------------------------------------------
0000C0CA                            ; Sprite mappings - flash effect when you collect the giant ring
0000C0CA                            ; ---------------------------------------------------------------------------
0000C0CA                            Map_Flash_internal:
0000C0CA 0000                       		dc.w byte_A084-Map_Flash_internal
0000C0CC 0000                       		dc.w byte_A08F-Map_Flash_internal
0000C0CE 0000                       		dc.w byte_A0A4-Map_Flash_internal
0000C0D0 0000                       		dc.w byte_A0B9-Map_Flash_internal
0000C0D2 0000                       		dc.w byte_A0CE-Map_Flash_internal
0000C0D4 0000                       		dc.w byte_A0E3-Map_Flash_internal
0000C0D6 0000                       		dc.w byte_A0F8-Map_Flash_internal
0000C0D8 0000                       		dc.w byte_A103-Map_Flash_internal
0000C0DA 02                         byte_A084:	dc.b 2
0000C0DB E00F 0000 00               		dc.b $E0, $F, 0, 0, 0
0000C0E0 000F 1000 00               		dc.b 0,	$F, $10, 0, 0
0000C0E5 04                         byte_A08F:	dc.b 4
0000C0E6 E00F 0010 F0               		dc.b $E0, $F, 0, $10, $F0
0000C0EB E007 0020 10               		dc.b $E0, 7, 0,	$20, $10
0000C0F0 000F 1010 F0               		dc.b 0,	$F, $10, $10, $F0
0000C0F5 0007 1020 10               		dc.b 0,	7, $10,	$20, $10
0000C0FA 04                         byte_A0A4:	dc.b 4
0000C0FB E00F 0028 E8               		dc.b $E0, $F, 0, $28, $E8
0000C100 E00B 0038 08               		dc.b $E0, $B, 0, $38, 8
0000C105 000F 1028 E8               		dc.b 0,	$F, $10, $28, $E8
0000C10A 000B 1038 08               		dc.b 0,	$B, $10, $38, 8
0000C10F 04                         byte_A0B9:	dc.b 4
0000C110 E00F 0834 E0               		dc.b $E0, $F, 8, $34, $E0
0000C115 E00F 0034 00               		dc.b $E0, $F, 0, $34, 0
0000C11A 000F 1834 E0               		dc.b 0,	$F, $18, $34, $E0
0000C11F 000F 1034 00               		dc.b 0,	$F, $10, $34, 0
0000C124 04                         byte_A0CE:	dc.b 4
0000C125 E00B 0838 E0               		dc.b $E0, $B, 8, $38, $E0
0000C12A E00F 0828 F8               		dc.b $E0, $F, 8, $28, $F8
0000C12F 000B 1838 E0               		dc.b 0,	$B, $18, $38, $E0
0000C134 000F 1828 F8               		dc.b 0,	$F, $18, $28, $F8
0000C139 04                         byte_A0E3:	dc.b 4
0000C13A E007 0820 E0               		dc.b $E0, 7, 8,	$20, $E0
0000C13F E00F 0810 F0               		dc.b $E0, $F, 8, $10, $F0
0000C144 0007 1820 E0               		dc.b 0,	7, $18,	$20, $E0
0000C149 000F 1810 F0               		dc.b 0,	$F, $18, $10, $F0
0000C14E 02                         byte_A0F8:	dc.b 2
0000C14F E00F 0800 E0               		dc.b $E0, $F, 8, 0, $E0
0000C154 000F 1800 E0               		dc.b 0,	$F, $18, 0, $E0
0000C159 04                         byte_A103:	dc.b 4
0000C15A E00F 0044 E0               		dc.b $E0, $F, 0, $44, $E0
0000C15F E00F 0844 00               		dc.b $E0, $F, 8, $44, 0
0000C164 000F 1044 E0               		dc.b 0,	$F, $10, $44, $E0
0000C169 000F 1844 00               		dc.b 0,	$F, $18, $44, 0
0000C16E                            		even
0000C16E                            		even
0000C16E                            		include	"_incObj\26 Monitor.asm"
0000C16E                            ; ---------------------------------------------------------------------------
0000C16E                            ; Object 26 - monitors
0000C16E                            ; ---------------------------------------------------------------------------
0000C16E                            
0000C16E                            Monitor:
0000C16E 7000                       		moveq	#0,d0
0000C170 1028 0024                  		move.b	obRoutine(a0),d0
0000C174 323B 0000                  		move.w	Mon_Index(pc,d0.w),d1
0000C178 4EFB 1000                  		jmp	Mon_Index(pc,d1.w)
0000C17C                            ; ===========================================================================
0000C17C 0000                       Mon_Index:	dc.w Mon_Main-Mon_Index
0000C17E 0000                       		dc.w Mon_Solid-Mon_Index
0000C180 0000                       		dc.w Mon_BreakOpen-Mon_Index
0000C182 0000                       		dc.w Mon_Animate-Mon_Index
0000C184 0000                       		dc.w Mon_Display-Mon_Index
0000C186                            ; ===========================================================================
0000C186                            
0000C186                            Mon_Main:	; Routine 0
0000C186 5428 0024                  		addq.b	#2,obRoutine(a0)
0000C18A 117C 000E 0016             		move.b	#$E,obHeight(a0)
0000C190 117C 000E 0017             		move.b	#$E,obWidth(a0)
0000C196 217C 0000 0000 0004        		move.l	#Map_Monitor,obMap(a0)
0000C19E 317C 0680 0002             		move.w	#$680,obGfx(a0)
0000C1A4 117C 0004 0001             		move.b	#4,obRender(a0)
0000C1AA 317C 0180 0018             		move.w	#$180,obPriority(a0)
0000C1B0 117C 000F 0014             		move.b	#$F,obActWid(a0)
0000C1B6 45F8 FC00                  		lea	(v_objstate).w,a2
0000C1BA 7000                       		moveq	#0,d0
0000C1BC 1028 0023                  		move.b	obRespawnNo(a0),d0
0000C1C0 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000C1C6 0832 0000 0002             		btst	#0,2(a2,d0.w)	; has monitor been broken?
0000C1CC 6700                       		beq.s	@notbroken	; if not, branch
0000C1CE 117C 0008 0024             		move.b	#8,obRoutine(a0) ; run "Mon_Display" routine
0000C1D4 117C 000B 001A             		move.b	#$B,obFrame(a0)	; use broken monitor frame
0000C1DA 4E75                       		rts	
0000C1DC                            ; ===========================================================================
0000C1DC                            
0000C1DC                            	@notbroken:
0000C1DC 117C 0046 0020             		move.b	#$46,obColType(a0)
0000C1E2 1168 0028 001C             		move.b	obSubtype(a0),obAnim(a0)
0000C1E8                            
0000C1E8                            Mon_Solid:	; Routine 2
0000C1E8 1028 0025                  		move.b	ob2ndRout(a0),d0 ; is monitor set to fall?
0000C1EC 6700                       		beq.s	@normal		; if not, branch
0000C1EE 5500                       		subq.b	#2,d0
0000C1F0 6600                       		bne.s	@fall
0000C1F2                            
0000C1F2                            		; 2nd Routine 2
0000C1F2 7200                       		moveq	#0,d1
0000C1F4 1228 0014                  		move.b	obActWid(a0),d1
0000C1F8 0641 000B                  		addi.w	#$B,d1
0000C1FC 6100 D000                  		bsr.w	ExitPlatform
0000C200 0829 0003 0022             		btst	#3,obStatus(a1) ; is Sonic on top of the monitor?
0000C206 6600 0000                  		bne.w	@ontop		; if yes, branch
0000C20A 4228 0025                  		clr.b	ob2ndRout(a0)
0000C20E 6000 0000                  		bra.w	Mon_Animate
0000C212                            ; ===========================================================================
0000C212                            
0000C212                            	@ontop:
0000C212 363C 0010                  		move.w	#$10,d3
0000C216 3428 0008                  		move.w	obX(a0),d2
0000C21A 6100 D540                  		bsr.w	MvSonicOnPtfm
0000C21E 6000 0000                  		bra.w	Mon_Animate
0000C222                            ; ===========================================================================
0000C222                            
0000C222                            @fall:		; 2nd Routine 4
0000C222 6100 0000                  		bsr.w	ObjectFall
0000C226 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0000C22C 4A41                       		tst.w	d1
0000C22E 6A00 0000                  		bpl.w	Mon_Animate
0000C232 D368 000C                  		add.w	d1,obY(a0)
0000C236 4268 0012                  		clr.w	obVelY(a0)
0000C23A 4228 0025                  		clr.b	ob2ndRout(a0)
0000C23E 6000 0000                  		bra.w	Mon_Animate
0000C242                            ; ===========================================================================
0000C242                            
0000C242                            @normal:	; 2nd Routine 0
0000C242 323C 001A                  		move.w	#$1A,d1
0000C246 343C 000F                  		move.w	#$F,d2
0000C24A 6100 0000                  		bsr.w	Mon_SolidSides
0000C24E 6700 0000                  		beq.w	loc_A25C
0000C252 4A69 0012                  		tst.w	obVelY(a1)
0000C256 6B00                       		bmi.s	loc_A20A
0000C258 0C29 0000 001C             		cmpi.b	#id_Roll,obAnim(a1) ; is Sonic rolling?
0000C25E 6700                       		beq.s	loc_A25C	; if yes, branch
0000C260 0C29 0000 001C             		cmpi.b	#id_SpinDash,obAnim(a1) ; is Sonic Spindashing?
0000C266 6700                       		beq.s	loc_A25C	; if yes, branch
0000C268 0C29 0000 001C             		cmpi.b	#id_Peelout,obAnim(a1) ; is Sonic Spindashing?
0000C26E 6700                       		beq.s	loc_A25C	; if yes, branch
0000C270                            
0000C270                            loc_A20A:
0000C270 4A41                       		tst.w	d1
0000C272 6A00                       		bpl.s	loc_A220
0000C274 9769 000C                  		sub.w	d3,obY(a1)
0000C278 6100 CE72                  		bsr.w	loc_74AE
0000C27C 117C 0002 0025             		move.b	#2,ob2ndRout(a0)
0000C282 6000 0000                  		bra.w	Mon_Animate
0000C286                            ; ===========================================================================
0000C286                            
0000C286                            loc_A220:
0000C286 4A40                       		tst.w	d0
0000C288 6700 0000                  		beq.w	loc_A246
0000C28C 6B00                       		bmi.s	loc_A230
0000C28E 4A69 0010                  		tst.w	obVelX(a1)
0000C292 6B00                       		bmi.s	loc_A246
0000C294 6000                       		bra.s	loc_A236
0000C296                            ; ===========================================================================
0000C296                            
0000C296                            loc_A230:
0000C296 4A69 0010                  		tst.w	obVelX(a1)
0000C29A 6A00                       		bpl.s	loc_A246
0000C29C                            
0000C29C                            loc_A236:
0000C29C 9169 0008                  		sub.w	d0,obX(a1)
0000C2A0 337C 0000 0020             		move.w	#0,obInertia(a1)
0000C2A6 337C 0000 0010             		move.w	#0,obVelX(a1)
0000C2AC                            
0000C2AC                            loc_A246:
0000C2AC 0829 0001 0022             		btst	#1,obStatus(a1)
0000C2B2 6600                       		bne.s	loc_A26A
0000C2B4 08E9 0005 0022             		bset	#5,obStatus(a1)
0000C2BA 08E8 0005 0022             		bset	#5,obStatus(a0)
0000C2C0 6000                       		bra.s	Mon_Animate
0000C2C2                            ; ===========================================================================
0000C2C2                            
0000C2C2                            loc_A25C:
0000C2C2 0828 0005 0022             		btst	#5,obStatus(a0)
0000C2C8 6700                       		beq.s	Mon_Animate
0000C2CA 0C29 0000 001C             		cmpi.b	#id_Roll,obAnim(a1)	; is Sonic in his jumping/rolling animation?
0000C2D0 6700                       		beq.s	loc_A26A	; if so, branch
0000C2D2 337C 0001 001C             		move.w	#1,obAnim(a1)	; clear obAnim and set obNextAni to 1, putting Sonic in his walking animation
0000C2D8                            
0000C2D8                            loc_A26A:
0000C2D8 08A8 0005 0022             		bclr	#5,obStatus(a0)
0000C2DE 08A9 0005 0022             		bclr	#5,obStatus(a1)
0000C2E4                            
0000C2E4                            Mon_Animate:	; Routine 6
0000C2E4 43F9 0000 0000             		lea	(Ani_Monitor).l,a1
0000C2EA 6100 0000                  		bsr.w	AnimateSprite
0000C2EE                            
0000C2EE                            Mon_Display:	; Routine 8
0000C2EE 6100 0000                  		bsr.w	DisplaySprite
0000C310 4E75                       		rts	
0000C312                            ; ===========================================================================
0000C312                            
0000C312                            Mon_BreakOpen:	; Routine 4
0000C312 5428 0024                  		addq.b	#2,obRoutine(a0)
0000C316 117C 0000 0020             		move.b	#0,obColType(a0)
0000C31C 6100 0000                  		bsr.w	FindFreeObj
0000C320 6600                       		bne.s	Mon_Explode
0000C322 12BC 0000                  		move.b	#id_PowerUp,0(a1) ; load monitor contents object
0000C326 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000C32C 3368 000C 000C             		move.w	obY(a0),obY(a1)
0000C332 1368 001C 001C             		move.b	obAnim(a0),obAnim(a1)
0000C338                            
0000C338                            Mon_Explode:
0000C338 6100 0000                  		bsr.w	FindFreeObj
0000C33C 6600                       		bne.s	@fail
0000C33E 12BC 0000                  		move.b	#id_ExplosionItem,0(a1) ; load explosion object
0000C342 5429 0024                  		addq.b	#2,obRoutine(a1) ; don't create an animal
0000C346 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000C34C 3368 000C 000C             		move.w	obY(a0),obY(a1)
0000C352                            
0000C352                            	@fail:
0000C352 45F8 FC00                  		lea	(v_objstate).w,a2
0000C356 7000                       		moveq	#0,d0
0000C358 1028 0023                  		move.b	obRespawnNo(a0),d0
0000C35C 08F2 0000 0002             		bset	#0,2(a2,d0.w)
0000C362 117C 0009 001C             		move.b	#9,obAnim(a0)	; set monitor type to broken
0000C368 6000 0000                  		bra.w	DisplaySprite
0000C368 6000 0000                  		bra.w	DisplaySprite
0000C36C                            		include	"_incObj\2E Monitor Content Power-Up.asm"
0000C36C                            ; ---------------------------------------------------------------------------
0000C36C                            ; Object 2E - contents of monitors
0000C36C                            ; ---------------------------------------------------------------------------
0000C36C                            
0000C36C                            PowerUp:
0000C36C 7000                       		moveq	#0,d0
0000C36E 1028 0024                  		move.b	obRoutine(a0),d0
0000C372 323B 0000                  		move.w	Pow_Index(pc,d0.w),d1
0000C376 4EBB 1000                  		jsr	Pow_Index(pc,d1.w)
0000C37A 6000 0000                  		bra.w	DisplaySprite
0000C37E                            ; ===========================================================================
0000C37E 0000                       Pow_Index:	dc.w Pow_Main-Pow_Index
0000C380 0000                       		dc.w Pow_Move-Pow_Index
0000C382 0000                       		dc.w Pow_Delete-Pow_Index
0000C384                            ; ===========================================================================
0000C384                            
0000C384                            Pow_Main:	; Routine 0
0000C384 5428 0024                  		addq.b	#2,obRoutine(a0)
0000C388 317C 0680 0002             		move.w	#$680,obGfx(a0)
0000C38E 117C 0024 0001             		move.b	#$24,obRender(a0)
0000C394 317C 0180 0018             		move.w	#$180,obPriority(a0)
0000C39A 117C 0008 0014             		move.b	#8,obActWid(a0)
0000C3A0 317C FD00 0012             		move.w	#-$300,obVelY(a0)
0000C3A6 7000                       		moveq	#0,d0
0000C3A8 1028 001C                  		move.b	obAnim(a0),d0	; get subtype
0000C3AC 5400                       		addq.b	#2,d0
0000C3AE 1140 001A                  		move.b	d0,obFrame(a0)	; use correct frame
0000C3B2 227C 0000 0000             		movea.l	#Map_Monitor,a1
0000C3B8 D000                       		add.b	d0,d0
0000C3BA D2F1 0000                  		adda.w	(a1,d0.w),a1
0000C3BE 5249                       		addq.w	#1,a1
0000C3C0 2149 0004                  		move.l	a1,obMap(a0)
0000C3C4                            
0000C3C4                            Pow_Move:	; Routine 2
0000C3C4 4A68 0012                  		tst.w	obVelY(a0)	; is object moving?
0000C3C8 6A00 0000                  		bpl.w	Pow_Checks	; if not, branch
0000C3CC 6100 0000                  		bsr.w	SpeedToPos
0000C3D0 0668 0018 0012             		addi.w	#$18,obVelY(a0)	; reduce object	speed
0000C3D6 4E75                       		rts	
0000C3D8                            ; ===========================================================================
0000C3D8                            
0000C3D8                            Pow_Checks:
0000C3D8 5428 0024                  		addq.b	#2,obRoutine(a0)
0000C3DC 317C 001D 001E             		move.w	#29,obTimeFrame(a0) ; display icon for half a second
0000C3E2                            
0000C3E2                            Pow_ChkEggman:
0000C3E2 1028 001C                  		move.b	obAnim(a0),d0
0000C3E6 0C00 0001                  		cmpi.b	#1,d0		; does monitor contain Eggman?
0000C3EA 6600                       		bne.s	Pow_ChkSonic
0000C3EC                            		
0000C3EC 4EF9 0000 0000             		jmp	Spik_Hurt
0000C3F2                            		
0000C3F2 4E75                       		rts
0000C3F4                            ; ===========================================================================
0000C3F4                            
0000C3F4                            Pow_ChkSonic:
0000C3F4 0C00 0002                  		cmpi.b	#2,d0		; does monitor contain Sonic?
0000C3F8 6600                       		bne.s	Pow_ChkShoes
0000C3FA                            
0000C3FA                            	ExtraLife:
0000C3FA 5238 FE12                  		addq.b	#1,(v_lives).w	; add 1 to the number of lives you have
0000C3FE 5238 FE1C                  		addq.b	#1,(f_lifecount).w ; update the lives counter
0000C40C                            
0000C40C                            ; ===========================================================================
0000C40C                            
0000C40C                            Pow_ChkShoes:
0000C40C 0C00 0003                  		cmpi.b	#3,d0		; does monitor contain speed shoes?
0000C410 6600                       		bne.s	Pow_ChkShield
0000C412                            
0000C412 11FC 0001 FE2E             		move.b	#1,(v_shoes).w	; speed up the BG music
0000C418 31FC 04B0 D034             		move.w	#$4B0,(v_player+$34).w	; time limit for the power-up
0000C41E 31FC 0C00 F760             		move.w	#$C00,(v_sonspeedmax).w ; change Sonic's top speed
0000C424 31FC 0018 F762             		move.w	#$18,(v_sonspeedacc).w	; change Sonic's acceleration
0000C42A 31FC 0080 F764             		move.w	#$80,(v_sonspeeddec).w	; change Sonic's deceleration
0000C430 4A38 F7AA                  		tst.b	(f_lockscreen).w ; is boss mode on?
0000C434 6600                       		bne.s	Pow_NoMus	; if yes, branch
0000C436 0C78 000C FE14             			cmpi.w	#$C,(v_air).w
0000C43C 6300                       			bls.s	Pow_NoMus
0000C448                            ; ===========================================================================
0000C448                            
0000C448                            Pow_NoMus:
0000C448 4E75                       		rts	
0000C44A                            ; ===========================================================================
0000C44A                            
0000C44A                            Pow_ChkShield:
0000C44A 0C00 0004                  		cmpi.b	#4,d0		; does monitor contain a shield?
0000C44E 6600                       		bne.s	Pow_ChkInvinc
0000C450                            
0000C450 11FC 0000 F5C8             		move.b	#0,(v_rshield).w ; remove red shield
0000C456 11FC 0000 F5C9             		move.b	#0,(v_gshield).w ; remove g shield
0000C45C 11FC 0000 F5CA             		move.b	#0,(v_spshield).w ; remove s shield
0000C462 11FC 0001 FE2C             		move.b	#1,(v_shield).w	; give Sonic a shield
0000C468 11FC 0000 D180             		move.b	#id_ShieldItem,(v_objspace+$180).w ; load shield object ($38)
0000C478                            ; ===========================================================================
0000C478                            
0000C478                            Pow_ChkInvinc:
0000C478 0C00 0005                  		cmpi.b	#5,d0		; does monitor contain invincibility?
0000C47C 6600                       		bne.s	Pow_ChkRings
0000C47E                            
0000C47E 11FC 0001 FE2D             		move.b	#1,(v_invinc).w	; make Sonic invincible
0000C484 31FC 0560 D032             		move.w	#$560,(v_player+$32).w ; time limit for the power-up
0000C48A 11FC 0000 D200             		move.b	#id_InvStars,(v_objspace+$200).w ; load stars object ($3801)
0000C490 11FC 0001 D21C             		move.b	#1,(v_objspace+$200+obAnim).w
0000C496 11FC 0000 D240             		move.b	#id_InvStars,(v_objspace+$240).w ; load stars object ($3802)
0000C49C 11FC 0002 D25C             		move.b	#2,(v_objspace+$240+obAnim).w
0000C4A2 11FC 0000 D280             		move.b	#id_InvStars,(v_objspace+$280).w ; load stars object ($3803)
0000C4A8 11FC 0003 D29C             		move.b	#3,(v_objspace+$280+obAnim).w
0000C4AE 11FC 0000 D2C0             		move.b	#id_InvStars,(v_objspace+$2C0).w ; load stars object ($3804)
0000C4B4 11FC 0004 D2DC             		move.b	#4,(v_objspace+$2C0+obAnim).w
0000C4BA 4A38 F7AA                  		tst.b	(f_lockscreen).w ; is boss mode on?
0000C4BE 6600                       		bne.s	Pow_NoMusic	; if yes, branch
0000C4C0 0C78 000C FE14             			cmpi.w	#$C,(v_air).w
0000C4C6 6300                       			bls.s	Pow_NoMusic
0000C4D2                            ; ===========================================================================
0000C4D2                            
0000C4D2                            Pow_NoMusic:
0000C4D2 4E75                       		rts	
0000C4D4                            ; ===========================================================================
0000C4D4                            
0000C4D4                            Pow_ChkRings:
0000C4D4 0C00 0006                  		cmpi.b	#6,d0		; does monitor contain 10 rings?
0000C4D8 6600                       		bne.s	Pow_ChkS
0000C4DA                            
0000C4DA 0678 000A FE20             		addi.w	#10,(v_rings).w	; add 10 rings to the number of rings you have
0000C4E0 0038 0001 FE1D             		ori.b	#1,(f_ringcount).w ; update the ring counter
0000C4E6 0C78 0064 FE20             		cmpi.w	#100,(v_rings).w ; check if you have 100 rings
0000C4EC 6500                       		bcs.s	Pow_RingSound
0000C4EE 08F8 0001 FE1B             		bset	#1,(v_lifecount).w
0000C4F4 6700 FF04                  		beq.w	ExtraLife
0000C4F8 0C78 00C8 FE20             		cmpi.w	#200,(v_rings).w ; check if you have 200 rings
0000C4FE 6500                       		bcs.s	Pow_RingSound
0000C500 08F8 0002 FE1B             		bset	#2,(v_lifecount).w
0000C506 6700 FEF2                  		beq.w	ExtraLife
0000C50A                            
0000C50A                            	Pow_RingSound:
0000C514                            ; ===========================================================================
0000C514                            
0000C514                            Pow_ChkS:
0000C514 0C00 0007                  		cmpi.b	#7,d0		; does monitor contain 'S'?
0000C518 6600                       		bne.s	Pow_ChkSRing
0000C51A                            		
0000C51A 0C38 0006 FE57             		cmpi.b	#6,(v_emeralds).w ; do you have all the emeralds?
0000C520 6700                       		beq.s	PowS2	; if yes, branch
0000C522 0404 003B                  		subi.b	#$3B,d4
0000C526 7000                       		moveq	#0,d0
0000C528 11FC 0000 F5C3             		move.b	#0,(f_emeraldm).w
0000C52E 11FC 0001 F5C3             		move.b	#1,(f_emeraldm).w
0000C534 6000                       		bra.s	PowSPlay
0000C536                            
0000C536                            PowS2:
0000C536 0678 0032 FE20             		addi.w	#50,(v_rings).w	; add 50 rings to the number of rings you have
0000C53C 0038 0005 FE1D             		ori.b	#5,(f_ringcount).w ; update the ring counter
0000C542 0C78 0064 FE20             		cmpi.w	#100,(v_rings).w ; check if you have 100 rings
0000C548 6500                       		bcs.s	PowSPlay
0000C54A 08F8 0001 FE1B             		bset	#1,(v_lifecount).w
0000C550 6700 FEA8                  		beq.w	ExtraLife
0000C554 0C78 00C8 FE20             		cmpi.w	#200,(v_rings).w ; check if you have 200 rings
0000C55A 6500                       		bcs.s	PowSPlay
0000C55C 08F8 0002 FE1B             		bset	#2,(v_lifecount).w
0000C562 6700 FE96                  		beq.w	ExtraLife	
0000C566                            
0000C566                            PowSPlay:
0000C570                            
0000C570                            		
0000C570                            
0000C570                            
0000C570                            Pow_ChkSRing:
0000C570 0C00 0008                  		cmpi.b	#8,d0		; does monitor contain 'S'?
0000C574 6600                       		bne.s	Pow_ChkRShield
0000C576                            
0000C576                            		
0000C576 0678 0014 FE20             		addi.w	#20,(v_rings).w	; add 20 rings to the number of rings you have
0000C57C 0038 0002 FE1D             		ori.b	#2,(f_ringcount).w ; update the ring counter
0000C582 0C78 0064 FE20             		cmpi.w	#100,(v_rings).w ; check if you have 100 rings
0000C588 6500                       		bcs.s	Pow_ChkSRingSound
0000C58A 08F8 0001 FE1B             		bset	#1,(v_lifecount).w
0000C590 6700 FE68                  		beq.w	ExtraLife
0000C594 0C78 00C8 FE20             		cmpi.w	#200,(v_rings).w ; check if you have 200 rings
0000C59A 6500                       		bcs.s	Pow_ChkSRingSound
0000C59C 08F8 0002 FE1B             		bset	#2,(v_lifecount).w
0000C5A2 6700 FE56                  		beq.w	ExtraLife	
0000C5A6                            
0000C5A6                            Pow_ChkSRingSound:
0000C5B0                            
0000C5B0                            
0000C5B0                            Pow_ChkRShield:
0000C5B0 0C00 000A                  		cmpi.b	#10,d0		; does monitor contain a g shield?
0000C5B4 6600                       		bne.s	Pow_ChkGShield
0000C5B6                            
0000C5B6 11FC 0000 FE2C             		move.b	#0,(v_shield).w ; remove shield
0000C5BC 11FC 0000 F5C9             		move.b	#0,(v_gshield).w ; remove g shield
0000C5C2 11FC 0000 F5CA             		move.b	#0,(v_spshield).w ; remove s shield
0000C5C8 11FC 0002 F5C8             		move.b	#2,(v_rshield).w ; give Sonic a red shield
0000C5CE 11FC 0000 D180             		move.b	#id_RShieldItem,(v_objspace+$180).w ; load red shield object ($38)
0000C5DE                            
0000C5DE                            Pow_ChkGShield:
0000C5DE 0C00 000B                  		cmpi.b	#11,d0		; does monitor contain a g shield?
0000C5E2 6600                       		bne.s	Pow_ChkSpShield
0000C5E4                            
0000C5E4                            
0000C5E4 11FC 0000 FE2C             		move.b	#0,(v_shield).w ; remove shield
0000C5EA 11FC 0000 F5C8             		move.b	#0,(v_rshield).w ; remove r shield
0000C5F0 11FC 0000 F5CA             		move.b	#0,(v_spshield).w ; remove s shield
0000C5F6 11FC 0001 F5C9             		move.b	#1,(v_gshield).w ; give Sonic a g shield
0000C5FC 11FC 0000 D180             		move.b	#id_GShieldItem,(v_objspace+$180).w ; load g shield object ($38)
0000C602                            		
0000C602 0678 0023 FE20             		addi.w	#35,(v_rings).w	; add 35 rings to the number of rings you have
0000C608 0038 0002 FE1D             		ori.b	#2,(f_ringcount).w ; update the ring counter
0000C60E 0C78 0064 FE20             		cmpi.w	#100,(v_rings).w ; check if you have 100 rings
0000C614 6500                       		bcs.s	Pow_ChkGSound
0000C616 08F8 0001 FE1B             		bset	#1,(v_lifecount).w
0000C61C 6700 FDDC                  		beq.w	ExtraLife
0000C620 0C78 00C8 FE20             		cmpi.w	#200,(v_rings).w ; check if you have 200 rings
0000C626 6500                       		bcs.s	Pow_ChkGSound
0000C628 08F8 0002 FE1B             		bset	#2,(v_lifecount).w
0000C62E 6700 FDCA                  		beq.w	ExtraLife	
0000C632                            
0000C632                            Pow_ChkGSound:		
0000C63C                            
0000C63C                            Pow_ChkSpShield:
0000C63C 0C00 000C                  		cmpi.b	#12,d0		; does monitor contain a g shield?
0000C640 6600                       		bne.s	Pow_ChkEnd
0000C642                            
0000C642 11FC 0000 FE2C             		move.b	#0,(v_shield).w 		; remove shield
0000C648 11FC 0000 F5C8             		move.b	#0,(v_rshield).w 		; remove r shield
0000C64E 11FC 0000 F5C9             		move.b	#0,(v_gshield).w 		; remove g shield
0000C654 11FC 0001 F5CA             		move.b	#1,(v_spshield).w 		; give sonic a s shield
0000C65A 11FC 0000 D180             		move.b	#id_SpShieldItem,(v_objspace+$180).w ; load s shield object ($38)	
0000C66A 4E71                       		nop
0000C66C                            
0000C66C                            Pow_ChkEnd:
0000C66C 4E75                       		rts
0000C66E                            ; ===========================================================================
0000C66E                            
0000C66E                            Pow_Delete:	; Routine 4
0000C66E 5368 001E                  		subq.w	#1,obTimeFrame(a0)
0000C672 6B00 0000                  		bmi.w	DeleteObject	; delete after half a second
0000C676 4E75                       		rts	
0000C676 4E75                       		rts	
0000C678                            		include	"_incObj\26 Monitor (SolidSides subroutine).asm"
0000C678                            ; ---------------------------------------------------------------------------
0000C678                            ; Subroutine to	make the sides of a monitor solid
0000C678                            ; ---------------------------------------------------------------------------
0000C678                            
0000C678                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000C678                            
0000C678                            
0000C678                            Mon_SolidSides:
0000C678 43F8 D000                  		lea	(v_player).w,a1
0000C67C 3029 0008                  		move.w	obX(a1),d0
0000C680 9068 0008                  		sub.w	obX(a0),d0
0000C684 D041                       		add.w	d1,d0
0000C686 6B00                       		bmi.s	loc_A4E6
0000C688 3601                       		move.w	d1,d3
0000C68A D643                       		add.w	d3,d3
0000C68C B043                       		cmp.w	d3,d0
0000C68E 6200                       		bhi.s	loc_A4E6
0000C690 1629 0016                  		move.b	obHeight(a1),d3
0000C694 4883                       		ext.w	d3
0000C696 D443                       		add.w	d3,d2
0000C698 3629 000C                  		move.w	obY(a1),d3
0000C69C 9668 000C                  		sub.w	obY(a0),d3
0000C6A0 D642                       		add.w	d2,d3
0000C6A2 6B00                       		bmi.s	loc_A4E6
0000C6A4 D442                       		add.w	d2,d2
0000C6A6 B642                       		cmp.w	d2,d3
0000C6A8 6400                       		bcc.s	loc_A4E6
0000C6AA 4A38 F7C8                  		tst.b	(f_lockmulti).w
0000C6AE 6B00                       		bmi.s	loc_A4E6
0000C6B0 0C38 0006 D024             		cmpi.b	#6,(v_player+obRoutine).w
0000C6B6 6400                       		bcc.s	loc_A4E6
0000C6B8 4A78 FE08                  		tst.w	(v_debuguse).w
0000C6BC 6600                       		bne.s	loc_A4E6
0000C6BE B240                       		cmp.w	d0,d1
0000C6C0 6400                       		bcc.s	loc_A4DC
0000C6C2 D241                       		add.w	d1,d1
0000C6C4 9041                       		sub.w	d1,d0
0000C6C6                            
0000C6C6                            loc_A4DC:
0000C6C6 0C43 0010                  		cmpi.w	#$10,d3
0000C6CA 6500                       		bcs.s	loc_A4EA
0000C6CC                            
0000C6CC                            loc_A4E2:
0000C6CC 7201                       		moveq	#1,d1
0000C6CE 4E75                       		rts	
0000C6D0                            ; ===========================================================================
0000C6D0                            
0000C6D0                            loc_A4E6:
0000C6D0 7200                       		moveq	#0,d1
0000C6D2 4E75                       		rts	
0000C6D4                            ; ===========================================================================
0000C6D4                            
0000C6D4                            loc_A4EA:
0000C6D4 7200                       		moveq	#0,d1
0000C6D6 1228 0014                  		move.b	obActWid(a0),d1
0000C6DA 5841                       		addq.w	#4,d1
0000C6DC 3401                       		move.w	d1,d2
0000C6DE D442                       		add.w	d2,d2
0000C6E0 D269 0008                  		add.w	obX(a1),d1
0000C6E4 9268 0008                  		sub.w	obX(a0),d1
0000C6E8 6BE2                       		bmi.s	loc_A4E2
0000C6EA B242                       		cmp.w	d2,d1
0000C6EC 64DE                       		bcc.s	loc_A4E2
0000C6EE 72FF                       		moveq	#-1,d1
0000C6F0 4E75                       		rts	
0000C6F2                            ; End of function Obj26_SolidSides
0000C6F2                            ; End of function Obj26_SolidSides
0000C6F2                            		include	"_anim\Monitor.asm"
0000C6F2                            ; ---------------------------------------------------------------------------
0000C6F2                            ; Animation script - monitors
0000C6F2                            ; ---------------------------------------------------------------------------
0000C6F2 0000 0000 0000             Ani_Monitor:	dc.w @static-Ani_Monitor, @eggman-Ani_Monitor, @sonic-Ani_Monitor
0000C6F8 0000 0000 0000             		dc.w @shoes-Ani_Monitor, @shield-Ani_Monitor, @invincible-Ani_Monitor
0000C6FE 0000 0000 0000             		dc.w @rings-Ani_Monitor, @s-Ani_Monitor, @goggles-Ani_Monitor
0000C704 0000 0000 0000             		dc.w @breaking-Ani_Monitor, @rshield-Ani_Monitor, @yshield-Ani_Monitor
0000C70A 0000                       		dc.w @spshield-Ani_Monitor
0000C70C                            		
0000C70C 0100 0102 FF               @static:	dc.b 1,	0, 1, 2, afEnd
0000C712 00                         		even
0000C712 0100 0303 0103 0302 0303+  @eggman:	dc.b 1,	0, 3, 3, 1, 3, 3, 2, 3,	3, afEnd
0000C71E 00                         		even
0000C71E 0100 0404 0104 0402 0404+  @sonic:		dc.b 1,	0, 4, 4, 1, 4, 4, 2, 4,	4, afEnd
0000C72A 00                         		even
0000C72A 0100 0505 0105 0502 0505+  @shoes:		dc.b 1,	0, 5, 5, 1, 5, 5, 2, 5,	5, afEnd
0000C736 00                         		even
0000C736 0100 0606 0106 0602 0606+  @shield:	dc.b 1,	0, 6, 6, 1, 6, 6, 2, 6,	6, afEnd
0000C742 00                         		even
0000C742 0100 0707 0107 0702 0707+  @invincible:	dc.b 1,	0, 7, 7, 1, 7, 7, 2, 7,	7, afEnd
0000C74E 00                         		even
0000C74E 0100 0808 0108 0802 0808+  @rings:		dc.b 1,	0, 8, 8, 1, 8, 8, 2, 8,	8, afEnd
0000C75A 00                         		even
0000C75A 0100 0909 0109 0902 0909+  @s:		dc.b 1,	0, 9, 9, 1, 9, 9, 2, 9,	9, afEnd
0000C766 00                         		even
0000C766 0100 0A0A 010A 0A02 0A0A+  @goggles:	dc.b 1,	0, $A, $A, 1, $A, $A, 2, $A, $A, afEnd
0000C772 00                         		even
0000C772 0200 0102 0BFE 01          @breaking:	dc.b 2,	0, 1, 2, $B, afBack, 1
0000C77A 00                         		even
0000C77A 0100 0C0C 010C 0C02 0C0C+  @rshield:	dc.b 1,	0, $C, $C, 1, $C, $C, 2, $C, $C, afEnd
0000C786 00                         		even
0000C786 0100 0D0D 010D 0D02 0D0D+  @yshield:	dc.b 1,	0, $D, $D, 1, $D, $D, 2, $D, $D, afEnd
0000C792 00                         		even
0000C792 0100 0E0E 010E 0E02 0E0E+  @spshield:	dc.b 1,	0, $E, $E, 1, $E, $E, 2, $E, $E, afEnd
0000C79E 00                         		even
0000C79E 00                         		even
0000C79E                            Map_Monitor:	include	"_maps\Monitor.asm"
0000C79E                            ; --------------------------------------------------------------------------------
0000C79E                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0000C79E                            ; --------------------------------------------------------------------------------
0000C79E                            
0000C79E                            SME_YYb7z:	
0000C79E 0000 0000                  		dc.w SME_YYb7z_1E-SME_YYb7z, SME_YYb7z_24-SME_YYb7z	
0000C7A2 0000 0000                  		dc.w SME_YYb7z_2F-SME_YYb7z, SME_YYb7z_3A-SME_YYb7z	
0000C7A6 0000 0000                  		dc.w SME_YYb7z_45-SME_YYb7z, SME_YYb7z_50-SME_YYb7z	
0000C7AA 0000 0000                  		dc.w SME_YYb7z_5B-SME_YYb7z, SME_YYb7z_66-SME_YYb7z	
0000C7AE 0000 0000                  		dc.w SME_YYb7z_71-SME_YYb7z, SME_YYb7z_7C-SME_YYb7z	
0000C7B2 0000 0000                  		dc.w SME_YYb7z_87-SME_YYb7z, SME_YYb7z_92-SME_YYb7z	
0000C7B6 0000 0000                  		dc.w SME_YYb7z_AC-SME_YYb7z, SME_YYb7z_B7-SME_YYb7z	
0000C7BA 0000                       		dc.w SME_YYb7z_C2-SME_YYb7z	
0000C7BC 01                         SME_YYb7z_1E:	dc.b 1	
0000C7BD F10F 0000 F0               		dc.b $F1, $F, 0, 0, $F0	
0000C7C2 02                         SME_YYb7z_24:	dc.b 2	
0000C7C3 F505 0010 F8               		dc.b $F5, 5, 0, $10, $F8	
0000C7C8 F10F 0000 F0               		dc.b $F1, $F, 0, 0, $F0	
0000C7CD 02                         SME_YYb7z_2F:	dc.b 2	
0000C7CE F505 0014 F8               		dc.b $F5, 5, 0, $14, $F8	
0000C7D3 F10F 0000 F0               		dc.b $F1, $F, 0, 0, $F0	
0000C7D8 02                         SME_YYb7z_3A:	dc.b 2	
0000C7D9 F505 0018 F8               		dc.b $F5, 5, 0, $18, $F8	
0000C7DE F10F 0000 F0               		dc.b $F1, $F, 0, 0, $F0	
0000C7E3 02                         SME_YYb7z_45:	dc.b 2	
0000C7E4 F505 0154 F8               		dc.b $F5, 5, 1, $54, $F8	
0000C7E9 F10F 0000 F0               		dc.b $F1, $F, 0, 0, $F0	
0000C7EE 02                         SME_YYb7z_50:	dc.b 2	
0000C7EF F505 0024 F8               		dc.b $F5, 5, 0, $24, $F8	
0000C7F4 F10F 0000 F0               		dc.b $F1, $F, 0, 0, $F0	
0000C7F9 02                         SME_YYb7z_5B:	dc.b 2	
0000C7FA F505 2028 F8               		dc.b $F5, 5, $20, $28, $F8	
0000C7FF F10F 0000 F0               		dc.b $F1, $F, 0, 0, $F0	
0000C804 02                         SME_YYb7z_66:	dc.b 2	
0000C805 F505 002C F8               		dc.b $F5, 5, 0, $2C, $F8	
0000C80A F10F 0000 F0               		dc.b $F1, $F, 0, 0, $F0	
0000C80F 02                         SME_YYb7z_71:	dc.b 2	
0000C810 F505 2030 F8               		dc.b $F5, 5, $20, $30, $F8	
0000C815 F10F 0000 F0               		dc.b $F1, $F, 0, 0, $F0	
0000C81A 02                         SME_YYb7z_7C:	dc.b 2	
0000C81B F505 0034 F8               		dc.b $F5, 5, 0, $34, $F8	
0000C820 F10F 0000 F0               		dc.b $F1, $F, 0, 0, $F0	
0000C825 02                         SME_YYb7z_87:	dc.b 2	
0000C826 F505 0020 F8               		dc.b $F5, 5, 0, $20, $F8	
0000C82B F10F 0000 F0               		dc.b $F1, $F, 0, 0, $F0	
0000C830 05                         SME_YYb7z_92:	dc.b 5	
0000C831 010C 0038 F0               		dc.b 1, $C, 0, $38, $F0	
0000C836 0900 0003 F0               		dc.b 9, 0, 0, 3, $F0	
0000C83B 0900 0007 F8               		dc.b 9, 0, 0, 7, $F8	
0000C840 0900 000B 00               		dc.b 9, 0, 0, $B, 0	
0000C845 0900 000F 08               		dc.b 9, 0, 0, $F, 8	
0000C84A 02                         SME_YYb7z_AC:	dc.b 2	
0000C84B F505 001C F8               		dc.b $F5, 5, 0, $1C, $F8	
0000C850 F10F 0000 F0               		dc.b $F1, $F, 0, 0, $F0	
0000C855 02                         SME_YYb7z_B7:	dc.b 2	
0000C856 F505 201C F8               		dc.b $F5, 5, $20, $1C, $F8	
0000C85B F10F 0000 F0               		dc.b $F1, $F, 0, 0, $F0	
0000C860 02                         SME_YYb7z_C2:	dc.b 2	
0000C861 F505 003C F8               		dc.b $F5, 5, 0, $3C, $F8	
0000C866 F10F 0000 F0               		dc.b $F1, $F, 0, 0, $F0	
0000C86C 00                         		even
0000C86C 00                         		even
0000C86C                            
0000C86C                            		include	"_incObj\0E Title Screen Sonic.asm"
0000C86C                            ; ---------------------------------------------------------------------------
0000C86C                            ; Object 0E - Sonic on the title screen
0000C86C                            ; ---------------------------------------------------------------------------
0000C86C                            
0000C86C                            TitleSonic:
0000C86C 7000                       		moveq	#0,d0
0000C86E 1028 0024                  		move.b	obRoutine(a0),d0
0000C872 323B 0000                  		move.w	TSon_Index(pc,d0.w),d1
0000C876 4EFB 1000                  		jmp	TSon_Index(pc,d1.w)
0000C87A                            ; ===========================================================================
0000C87A 0000                       TSon_Index:	dc.w TSon_Main-TSon_Index
0000C87C 0000                       		dc.w TSon_Delay-TSon_Index
0000C87E 0000                       		dc.w TSon_Move-TSon_Index
0000C880 0000                       		dc.w TSon_Animate-TSon_Index
0000C882                            ; ===========================================================================
0000C882                            
0000C882                            TSon_Main:	; Routine 0
0000C882 5428 0024                  		addq.b	#2,obRoutine(a0)
0000C886 317C 00F0 0008             		move.w	#$F0,obX(a0)
0000C88C 317C 00DE 000A             		move.w	#$DE,obScreenY(a0) ; position is fixed to screen
0000C892 217C 0000 0000 0004        		move.l	#Map_TSon,obMap(a0)
0000C89A 317C 2348 0002             		move.w	#$2348,obGfx(a0)
0000C8A0 317C 0080 0018             		move.w	#$80,obPriority(a0)
0000C8A6 117C 001D 001F             		move.b	#29,obDelayAni(a0) ; set time delay to 0.5 seconds
0000C8AC 43F9 0000 0000             		lea	(Ani_TSon).l,a1
0000C8B2 6100 0000                  		bsr.w	AnimateSprite
0000C8B6                            
0000C8B6                            TSon_Delay:	;Routine 2
0000C8B6 5328 001F                  		subq.b	#1,obDelayAni(a0) ; subtract 1 from time delay
0000C8BA 6A00                       		bpl.s	@wait		; if time remains, branch
0000C8BC 5428 0024                  		addq.b	#2,obRoutine(a0) ; go to next routine
0000C8C0 6000 0000                  		bra.w	DisplaySprite
0000C8C4                            
0000C8C4                            	@wait:
0000C8C4 4E75                       		rts	
0000C8C6                            ; ===========================================================================
0000C8C6                            
0000C8C6                            TSon_Move:	; Routine 4
0000C8C6 5168 000A                  		subq.w	#8,obScreenY(a0) ; move Sonic up
0000C8CA 0C68 0096 000A             		cmpi.w	#$96,obScreenY(a0) ; has Sonic reached final position?
0000C8D0 6600                       		bne.s	@display	; if not, branch
0000C8D2 5428 0024                  		addq.b	#2,obRoutine(a0)
0000C8D6                            
0000C8D6                            	@display:
0000C8D6 6000 0000                  		bra.w	DisplaySprite
0000C8DA                            
0000C8DA 4E75                       		rts	
0000C8DC                            ; ===========================================================================
0000C8DC                            
0000C8DC                            TSon_Animate:	; Routine 6
0000C8DC 43F9 0000 0000             		lea	(Ani_TSon).l,a1
0000C8E2 6100 0000                  		bsr.w	AnimateSprite
0000C8E6 6000 0000                  		bra.w	DisplaySprite
0000C8EA                            
0000C8EA 4E75                       		rts	
0000C8EA 4E75                       		rts	
0000C8EC                            		include	"_incObj\0F Press Start and TM.asm"
0000C8EC                            ; ---------------------------------------------------------------------------
0000C8EC                            ; Object 0F - "PRESS START BUTTON" and "TM" from title screen
0000C8EC                            ; ---------------------------------------------------------------------------
0000C8EC                            
0000C8EC                            PSBTM:
0000C8EC 7000                       		moveq	#0,d0
0000C8EE 1028 0024                  		move.b	obRoutine(a0),d0
0000C8F2 323B 0000                  		move.w	Obj0F_Index(pc,d0.w),d1
0000C8F6 4EBB 1000                  		jsr	Obj0F_Index(pc,d1.w)
0000C8FA 6000 0000                  		bra.w	DisplaySprite
0000C8FE                            ; ===========================================================================
0000C8FE 0000                       Obj0F_Index:	dc.w Obj0F_Init-Obj0F_Index	
0000C900 0000                       		dc.w Obj0F_Main-Obj0F_Index
0000C902 0000                       		dc.w MENURTS-Obj0F_Index	
0000C904                            ; ===========================================================================
0000C904                            Obj0F_Init:
0000C904 5428 0024                  	addq.b	#2,obRoutine(a0) ; => Obj0F_Main
0000C908 217C 0000 0000 0004            move.l   #Map_TitleMenu,4(a0)
0000C910 317C 0101 0008                 move.w   #$101,8(a0)
0000C916 317C 0151 000A                 move.w   #$151,$A(a0)
0000C91C 317C 056F 0002             	move.w	#$56F,2(a0)
0000C922 0238 0001 FFB0             	andi.b	#1,(Title_screen_option).w
0000C928 1178 FFB0 001A             	move.b	(Title_screen_option).w,mapping_frame(a0)
0000C92E                            
0000C92E                            
0000C92E                            Obj0F_Main:
0000C92E 7400                             moveq   #0,d2
0000C930 1438 FFB0                        move.b   (Title_screen_option).w,d2
0000C934 1038 F605                        move.b   ($FFFFF605).w,d0
0000C938 0800 0000                        btst   #0,d0
0000C93C 6700                             beq.s   MAIN2
0000C93E 5302                             subq.b   #1,d2
0000C940 6400                             bcc.s   MAIN2
0000C942 143C 0001                        move.b   #1,d2
0000C946                            
0000C946                            MAIN2:
0000C946 0800 0001                        btst   #1,d0
0000C94A 6700                             beq.s   MAIN3
0000C94C 5202                             addq.b   #1,d2
0000C94E 0C02 0002                        cmpi.b   #2,d2
0000C952 6500                             blo.s   MAIN3
0000C954 7400                             moveq   #0,d2
0000C956                            
0000C956                            MAIN3:
0000C956 1142 001A                        move.b   d2,$1A(a0)
0000C95A 11C2 FFB0                        move.b   d2,(Title_screen_option).w
0000C95E 0200 0003                        andi.b   #3,d0
0000C962 6700                             beq.s   MENURTS   ; rts
0000C964 303C 00CD                        move.w   #$CD,d0 ; selection blip sound
0000C968 4EB8 1254                        jsr   PlaySound_Special
0000C96C                            
0000C96C                            MENURTS:
0000C96C 4E75                             rts															 
0000C96E                            ; ===========================================================================
0000C96E                            
0000C96E                            Map_TitleMenu:
0000C96E                            		include "_maps\Title Screen Menu.asm"		
0000C96E                            ; --------------------------------------------------------------------------------
0000C96E                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0000C96E                            ; --------------------------------------------------------------------------------
0000C96E                            
0000C96E                            SME_g2Qfx:	
0000C96E 0000 0000                  		dc.w SME_g2Qfx_6-SME_g2Qfx, SME_g2Qfx_6B-SME_g2Qfx	
0000C972 10                         SME_g2Qfx_6:	dc.b $10	
0000C973 E004 0020 F8               		dc.b $E0, 4, 0, $20, $F8	
0000C978 E000 000E 08               		dc.b $E0, 0, 0, $E, 8	
0000C97D E000 001F 10               		dc.b $E0, 0, 0, $1F, $10	
0000C982 E000 0021 18               		dc.b $E0, 0, 0, $21, $18	
0000C987 E000 0014 28               		dc.b $E0, 0, 0, $14, $28	
0000C98C E000 000E 30               		dc.b $E0, 0, 0, $E, $30	
0000C991 E000 001A 38               		dc.b $E0, 0, 0, $1A, $38	
0000C996 E000 0012 40               		dc.b $E0, 0, 0, $12, $40	
0000C99B F000 001C 04               		dc.b $F0, 0, 0, $1C, 4	
0000C9A0 F000 001D 0C               		dc.b $F0, 0, 0, $1D, $C	
0000C9A5 F000 0021 14               		dc.b $F0, 0, 0, $21, $14	
0000C9AA F000 0016 1C               		dc.b $F0, 0, 0, $16, $1C	
0000C9AF F000 001C 24               		dc.b $F0, 0, 0, $1C, $24	
0000C9B4 F000 001B 2C               		dc.b $F0, 0, 0, $1B, $2C	
0000C9B9 F000 0020 34               		dc.b $F0, 0, 0, $20, $34	
0000C9BE E004 0028 E0               		dc.b $E0, 4, 0, $28, $E0	
0000C9C3 10                         SME_g2Qfx_6B:	dc.b $10	
0000C9C4 E004 0020 F8               		dc.b $E0, 4, 0, $20, $F8	
0000C9C9 E000 000E 08               		dc.b $E0, 0, 0, $E, 8	
0000C9CE E000 001F 10               		dc.b $E0, 0, 0, $1F, $10	
0000C9D3 E000 0021 18               		dc.b $E0, 0, 0, $21, $18	
0000C9D8 E000 0014 28               		dc.b $E0, 0, 0, $14, $28	
0000C9DD E000 000E 30               		dc.b $E0, 0, 0, $E, $30	
0000C9E2 E000 001A 38               		dc.b $E0, 0, 0, $1A, $38	
0000C9E7 E000 0012 40               		dc.b $E0, 0, 0, $12, $40	
0000C9EC F000 001C 04               		dc.b $F0, 0, 0, $1C, 4	
0000C9F1 F000 001D 0C               		dc.b $F0, 0, 0, $1D, $C	
0000C9F6 F000 0021 14               		dc.b $F0, 0, 0, $21, $14	
0000C9FB F000 0016 1C               		dc.b $F0, 0, 0, $16, $1C	
0000CA00 F000 001C 24               		dc.b $F0, 0, 0, $1C, $24	
0000CA05 F000 001B 2C               		dc.b $F0, 0, 0, $1B, $2C	
0000CA0A F000 0020 34               		dc.b $F0, 0, 0, $20, $34	
0000CA0F F004 0028 E0               		dc.b $F0, 4, 0, $28, $E0
0000CA14                            		even
0000CA14                            		even
0000CA14                            		even
0000CA14                            
0000CA14                            		include	"_anim\Title Screen Sonic.asm"
0000CA14                            ; ---------------------------------------------------------------------------
0000CA14                            ; Animation script - Sonic on the title screen
0000CA14                            ; ---------------------------------------------------------------------------
0000CA14 0000                       Ani_TSon:	dc.w byte_A706-Ani_TSon
0000CA16 0700 0102 0304 0506 07FE+  byte_A706:	dc.b 7,	0, 1, 2, 3, 4, 5, 6, 7,	afBack, 2
0000CA22 00                         		even
0000CA22 00                         		even
0000CA22                            		include	"_anim\Press Start and TM.asm"
0000CA22                            ; ---------------------------------------------------------------------------
0000CA22                            ; Animation script - "TM" and "PRESS START BUTTON" on the title screen
0000CA22                            ; ---------------------------------------------------------------------------
0000CA22 0000                       Ani_PSBTM:	dc.w @flash-Ani_PSBTM
0000CA24 1F00 01FF                  @flash:		dc.b $1F, 0, 1,	afEnd
0000CA28                            		even
0000CA28                            		even
0000CA28                            
0000CA28                            		include	"_incObj\sub AnimateSprite.asm"
0000CA28                            ; ---------------------------------------------------------------------------
0000CA28                            ; Subroutine to	animate	a sprite using an animation script
0000CA28                            ; ---------------------------------------------------------------------------
0000CA28                            
0000CA28                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000CA28                            
0000CA28                            
0000CA28                            AnimateSprite:
0000CA28 7000                       		moveq	#0,d0
0000CA2A 1028 001C                  		move.b	obAnim(a0),d0	; move animation number	to d0
0000CA2E B028 001D                  		cmp.b	obNextAni(a0),d0 ; is animation set to restart?
0000CA32 6700                       		beq.s	Anim_Run	; if not, branch
0000CA34                            
0000CA34 1140 001D                  		move.b	d0,obNextAni(a0) ; set to "no restart"
0000CA38 117C 0000 001B             		move.b	#0,obAniFrame(a0) ; reset animation
0000CA3E 117C 0000 001E             		move.b	#0,obTimeFrame(a0) ; reset frame duration
0000CA44                            
0000CA44                            Anim_Run:
0000CA44 5328 001E                  		subq.b	#1,obTimeFrame(a0) ; subtract 1 from frame duration
0000CA48 6A00                       		bpl.s	Anim_Wait	; if time remains, branch
0000CA4A D040                       		add.w	d0,d0
0000CA4C D2F1 0000                  		adda.w	(a1,d0.w),a1	; jump to appropriate animation	script
0000CA50 1151 001E                  		move.b	(a1),obTimeFrame(a0) ; load frame duration
0000CA54 7200                       		moveq	#0,d1
0000CA56 1228 001B                  		move.b	obAniFrame(a0),d1 ; load current frame number
0000CA5A 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number from script
0000CA5E 6B00                       		bmi.s	Anim_End_FF	; if animation is complete, branch
0000CA60                            
0000CA60                            Anim_Next:
0000CA60 1200                       		move.b	d0,d1
0000CA62 0200 001F                  		andi.b	#$1F,d0
0000CA66 1140 001A                  		move.b	d0,obFrame(a0)	; load sprite number
0000CA6A 1028 0022                  		move.b	obStatus(a0),d0
0000CA6E E719                       		rol.b	#3,d1
0000CA70 B101                       		eor.b	d0,d1
0000CA72 0201 0003                  		andi.b	#3,d1
0000CA76 0228 00FC 0001             		andi.b	#$FC,obRender(a0)
0000CA7C 8328 0001                  		or.b	d1,obRender(a0)
0000CA80 5228 001B                  		addq.b	#1,obAniFrame(a0) ; next frame number
0000CA84                            
0000CA84                            Anim_Wait:
0000CA84 4E75                       		rts	
0000CA86                            ; ===========================================================================
0000CA86                            
0000CA86                            Anim_End_FF:
0000CA86 5200                       		addq.b	#1,d0		; is the end flag = $FF	?
0000CA88 6600                       		bne.s	Anim_End_FE	; if not, branch
0000CA8A 117C 0000 001B             		move.b	#0,obAniFrame(a0) ; restart the animation
0000CA90 1029 0001                  		move.b	1(a1),d0	; read sprite number
0000CA94 60CA                       		bra.s	Anim_Next
0000CA96                            ; ===========================================================================
0000CA96                            
0000CA96                            Anim_End_FE:
0000CA96 5200                       		addq.b	#1,d0		; is the end flag = $FE	?
0000CA98 6600                       		bne.s	Anim_End_FD	; if not, branch
0000CA9A 1031 1002                  		move.b	2(a1,d1.w),d0	; read the next	byte in	the script
0000CA9E 9128 001B                  		sub.b	d0,obAniFrame(a0) ; jump back d0 bytes in the script
0000CAA2 9200                       		sub.b	d0,d1
0000CAA4 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number
0000CAA8 60B6                       		bra.s	Anim_Next
0000CAAA                            ; ===========================================================================
0000CAAA                            
0000CAAA                            Anim_End_FD:
0000CAAA 5200                       		addq.b	#1,d0		; is the end flag = $FD	?
0000CAAC 6600                       		bne.s	Anim_End_FC	; if not, branch
0000CAAE 1171 1002 001C             		move.b	2(a1,d1.w),obAnim(a0) ; read next byte, run that animation
0000CAB4                            
0000CAB4                            Anim_End_FC:
0000CAB4 5200                       		addq.b	#1,d0		; is the end flag = $FC	?
0000CAB6 6600                       		bne.s	Anim_End_FB	; if not, branch
0000CAB8 5428 0024                  		addq.b	#2,obRoutine(a0) ; jump to next routine
0000CABC                            
0000CABC                            Anim_End_FB:
0000CABC 5200                       		addq.b	#1,d0		; is the end flag = $FB	?
0000CABE 6600                       		bne.s	Anim_End_FA	; if not, branch
0000CAC0 117C 0000 001B             		move.b	#0,obAniFrame(a0) ; reset animation
0000CAC6 4228 0025                  		clr.b	ob2ndRout(a0)	; reset	2nd routine counter
0000CACA                            
0000CACA                            Anim_End_FA:
0000CACA 5200                       		addq.b	#1,d0		; is the end flag = $FA	?
0000CACC 6600                       		bne.s	Anim_End	; if not, branch
0000CACE 5428 0025                  		addq.b	#2,ob2ndRout(a0) ; jump to next routine
0000CAD2                            
0000CAD2                            Anim_End:
0000CAD2 4E75                       		rts	
0000CAD4                            ; End of function AnimateSprite
0000CAD4                            ; End of function AnimateSprite
0000CAD4                            
0000CAD4                            Map_PSB:	include	"_maps\Press Start and TM.asm"
0000CAD4                            ; ---------------------------------------------------------------------------
0000CAD4                            ; Sprite mappings - "PRESS START BUTTON" and "TM" from title screen
0000CAD4                            ; ---------------------------------------------------------------------------
0000CAD4                            Map_PSB_internal:
0000CAD4 0000                       		dc.w byte_A7CD-Map_PSB_internal
0000CAD6 0000                       		dc.w M_PSB_PSB-Map_PSB_internal
0000CAD8 0000                       		dc.w M_PSB_Limiter-Map_PSB_internal
0000CADA 0000                       		dc.w M_PSB_TM-Map_PSB_internal
0000CADC 06                         M_PSB_PSB:	dc.b 6			; "PRESS START BUTTON"
0000CADD 000C 00F0 00               byte_A7CD:	dc.b 0,	$C, 0, $F0, 0
0000CAE2 0000 00F3 20               		dc.b 0,	0, 0, $F3, $20
0000CAE7 0000 00F3 30               		dc.b 0,	0, 0, $F3, $30
0000CAEC 000C 00F4 38               		dc.b 0,	$C, 0, $F4, $38
0000CAF1 0008 00F8 60               		dc.b 0,	8, 0, $F8, $60
0000CAF6 0008 00FB 78               		dc.b 0,	8, 0, $FB, $78
0000CAFB 1E                         M_PSB_Limiter:	dc.b $1E		; sprite line limiter
0000CAFC B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000CB01 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000CB06 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000CB0B B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000CB10 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000CB15 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000CB1A B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000CB1F B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000CB24 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000CB29 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000CB2E D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000CB33 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000CB38 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000CB3D D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000CB42 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000CB47 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000CB4C D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000CB51 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000CB56 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000CB5B D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000CB60 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000CB65 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000CB6A F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000CB6F F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000CB74 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000CB79 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000CB7E F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000CB83 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000CB88 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000CB8D F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000CB92 01                         M_PSB_TM:	dc.b 1			; "TM"
0000CB93 FC04 0000 F8               		dc.b $FC, 4, 0,	0, $F8
0000CB98                            		even
0000CB98                            		even
0000CB98                            Map_TSon:	include	"_maps\Title Screen Sonic.asm"
0000CB98                            ; ---------------------------------------------------------------------------
0000CB98                            ; Sprite mappings - Sonic on the title screen
0000CB98                            ; ---------------------------------------------------------------------------
0000CB98                            Map_TSon_internal:
0000CB98 0000                       		dc.w byte_A898-Map_TSon_internal
0000CB9A 0000                       		dc.w byte_A8CB-Map_TSon_internal
0000CB9C 0000                       		dc.w byte_A917-Map_TSon_internal
0000CB9E 0000                       		dc.w byte_A96D-Map_TSon_internal
0000CBA0 0000                       		dc.w byte_A9AF-Map_TSon_internal
0000CBA2 0000                       		dc.w byte_A9E7-Map_TSon_internal
0000CBA4 0000                       		dc.w byte_AA47-Map_TSon_internal
0000CBA6 0000                       		dc.w byte_AAB1-Map_TSon_internal
0000CBA8 0A                         byte_A898:	dc.b $A
0000CBA9 0808 0000 08               		dc.b 8,	8, 0, 0, 8
0000CBAE 100F 0003 08               		dc.b $10, $F, 0, 3, 8
0000CBB3 100F 0013 28               		dc.b $10, $F, 0, $13, $28
0000CBB8 300E 0023 08               		dc.b $30, $E, 0, $23, 8
0000CBBD 300E 002F 28               		dc.b $30, $E, 0, $2F, $28
0000CBC2 480D 003B 00               		dc.b $48, $D, 0, $3B, 0
0000CBC7 4809 0043 20               		dc.b $48, 9, 0,	$43, $20
0000CBCC 4800 0049 38               		dc.b $48, 0, 0,	$49, $38
0000CBD1 580C 004A 08               		dc.b $58, $C, 0, $4A, 8
0000CBD6 5800 004E 28               		dc.b $58, 0, 0,	$4E, $28
0000CBDB 0F                         byte_A8CB:	dc.b $F
0000CBDC 480E 01BD 20               		dc.b $48, $E, 1, $BD, $20
0000CBE1 3805 01C9 38               		dc.b $38, 5, 1,	$C9, $38
0000CBE6 4000 01CD 30               		dc.b $40, 0, 1,	$CD, $30
0000CBEB 4800 01CE 40               		dc.b $48, 0, 1,	$CE, $40
0000CBF0 6000 01CF 20               		dc.b $60, 0, 1,	$CF, $20
0000CBF5 100E 004F 08               		dc.b $10, $E, 0, $4F, 8
0000CBFA 100E 005B 28               		dc.b $10, $E, 0, $5B, $28
0000CBFF 1801 0067 48               		dc.b $18, 1, 0,	$67, $48
0000CC04 2802 0069 00               		dc.b $28, 2, 0,	$69, 0
0000CC09 280F 006C 08               		dc.b $28, $F, 0, $6C, 8
0000CC0E 280F 007C 28               		dc.b $28, $F, 0, $7C, $28
0000CC13 3002 008C 48               		dc.b $30, 2, 0,	$8C, $48
0000CC18 480E 008F 10               		dc.b $48, $E, 0, $8F, $10
0000CC1D 4809 009B 30               		dc.b $48, 9, 0,	$9B, $30
0000CC22 5804 00A1 30               		dc.b $58, 4, 0,	$A1, $30
0000CC27 11                         byte_A917:	dc.b $11
0000CC28 380E 01BD 28               		dc.b $38, $E, 1, $BD, $28
0000CC2D 2805 01C9 40               		dc.b $28, 5, 1,	$C9, $40
0000CC32 3000 01CD 38               		dc.b $30, 0, 1,	$CD, $38
0000CC37 3800 01CE 48               		dc.b $38, 0, 1,	$CE, $48
0000CC3C 5000 01CF 28               		dc.b $50, 0, 1,	$CF, $28
0000CC41 200F 01A9 08               		dc.b $20, $F, 1, $A9, 8
0000CC46 2003 01B9 28               		dc.b $20, 3, 1,	$B9, $28
0000CC4B 100E 004F 08               		dc.b $10, $E, 0, $4F, 8
0000CC50 100E 005B 28               		dc.b $10, $E, 0, $5B, $28
0000CC55 1801 0067 48               		dc.b $18, 1, 0,	$67, $48
0000CC5A 2802 0069 00               		dc.b $28, 2, 0,	$69, 0
0000CC5F 280F 006C 08               		dc.b $28, $F, 0, $6C, 8
0000CC64 280F 007C 28               		dc.b $28, $F, 0, $7C, $28
0000CC69 3002 008C 48               		dc.b $30, 2, 0,	$8C, $48
0000CC6E 480E 008F 10               		dc.b $48, $E, 0, $8F, $10
0000CC73 4809 009B 30               		dc.b $48, 9, 0,	$9B, $30
0000CC78 5804 00A1 30               		dc.b $58, 4, 0,	$A1, $30
0000CC7D 0D                         byte_A96D:	dc.b $D
0000CC7E 100F 00A3 08               		dc.b $10, $F, 0, $A3, 8
0000CC83 0808 00B3 28               		dc.b 8,	8, 0, $B3, $28
0000CC88 100F 00B6 28               		dc.b $10, $F, 0, $B6, $28
0000CC8D 1800 00C6 48               		dc.b $18, 0, 0,	$C6, $48
0000CC92 2006 00C7 48               		dc.b $20, 6, 0,	$C7, $48
0000CC97 3800 00CD 48               		dc.b $38, 0, 0,	$CD, $48
0000CC9C 300D 00CE 08               		dc.b $30, $D, 0, $CE, 8
0000CCA1 300E 00D6 28               		dc.b $30, $E, 0, $D6, $28
0000CCA6 400B 00E2 10               		dc.b $40, $B, 0, $E2, $10
0000CCAB 4808 00EE 28               		dc.b $48, 8, 0,	$EE, $28
0000CCB0 5001 00F1 08               		dc.b $50, 1, 0,	$F1, 8
0000CCB5 5004 00F3 28               		dc.b $50, 4, 0,	$F3, $28
0000CCBA 5800 00F5 28               		dc.b $58, 0, 0,	$F5, $28
0000CCBF 0B                         byte_A9AF:	dc.b $B
0000CCC0 080F 00F6 10               		dc.b 8,	$F, 0, $F6, $10
0000CCC5 080B 0106 30               		dc.b 8,	$B, 1, 6, $30
0000CCCA 1006 0112 48               		dc.b $10, 6, 1,	$12, $48
0000CCCF 280E 0118 18               		dc.b $28, $E, 1, $18, $18
0000CCD4 280E 0124 38               		dc.b $28, $E, 1, $24, $38
0000CCD9 2801 0130 10               		dc.b $28, 1, 1,	$30, $10
0000CCDE 400E 0132 10               		dc.b $40, $E, 1, $32, $10
0000CCE3 4006 013E 30               		dc.b $40, 6, 1,	$3E, $30
0000CCE8 4004 0144 40               		dc.b $40, 4, 1,	$44, $40
0000CCED 4800 0146 40               		dc.b $48, 0, 1,	$46, $40
0000CCF2 5808 0147 18               		dc.b $58, 8, 1,	$47, $18
0000CCF7 13                         byte_A9E7:	dc.b $13
0000CCF8 280E 01E4 38               		dc.b $28, $E, 1, $E4, $38
0000CCFD 1805 01F0 48               		dc.b $18, 5, 1,	$F0, $48
0000CD02 4008 01F4 38               		dc.b $40, 8, 1,	$F4, $38
0000CD07 4804 01F7 38               		dc.b $48, 4, 1,	$F7, $38
0000CD0C 100F 014A 10               		dc.b $10, $F, 1, $4A, $10
0000CD11 0804 015A 20               		dc.b 8,	4, 1, $5A, $20
0000CD16 000B 015C 30               		dc.b 0,	$B, 1, $5C, $30
0000CD1B 0800 0168 48               		dc.b 8,	0, 1, $68, $48
0000CD20 1800 0169 48               		dc.b $18, 0, 1,	$69, $48
0000CD25 1805 016A 00               		dc.b $18, 5, 1,	$6A, 0
0000CD2A 2802 016E 08               		dc.b $28, 2, 1,	$6E, 8
0000CD2F 300F 0171 10               		dc.b $30, $F, 1, $71, $10
0000CD34 200D 0181 30               		dc.b $20, $D, 1, $81, $30
0000CD39 2001 0189 50               		dc.b $20, 1, 1,	$89, $50
0000CD3E 3008 018B 30               		dc.b $30, 8, 1,	$8B, $30
0000CD43 380E 018E 30               		dc.b $38, $E, 1, $8E, $30
0000CD48 500D 019A 08               		dc.b $50, $D, 1, $9A, 8
0000CD4D 500C 01A2 28               		dc.b $50, $C, 1, $A2, $28
0000CD52 5808 01A6 28               		dc.b $58, 8, 1,	$A6, $28
0000CD57 15                         byte_AA47:	dc.b $15
0000CD58 280E 01E4 38               		dc.b $28, $E, 1, $E4, $38
0000CD5D 1805 01F0 48               		dc.b $18, 5, 1,	$F0, $48
0000CD62 4008 01F4 38               		dc.b $40, 8, 1,	$F4, $38
0000CD67 4804 01F7 38               		dc.b $48, 4, 1,	$F7, $38
0000CD6C 180F 01D0 08               		dc.b $18, $F, 1, $D0, 8
0000CD71 1803 01E0 28               		dc.b $18, 3, 1,	$E0, $28
0000CD76 100F 014A 10               		dc.b $10, $F, 1, $4A, $10
0000CD7B 0804 015A 20               		dc.b 8,	4, 1, $5A, $20
0000CD80 000B 015C 30               		dc.b 0,	$B, 1, $5C, $30
0000CD85 0800 0168 48               		dc.b 8,	0, 1, $68, $48
0000CD8A 1800 0169 48               		dc.b $18, 0, 1,	$69, $48
0000CD8F 1805 016A 00               		dc.b $18, 5, 1,	$6A, 0
0000CD94 2802 016E 08               		dc.b $28, 2, 1,	$6E, 8
0000CD99 300F 0171 10               		dc.b $30, $F, 1, $71, $10
0000CD9E 200D 0181 30               		dc.b $20, $D, 1, $81, $30
0000CDA3 2001 0189 50               		dc.b $20, 1, 1,	$89, $50
0000CDA8 3008 018B 30               		dc.b $30, 8, 1,	$8B, $30
0000CDAD 380E 018E 30               		dc.b $38, $E, 1, $8E, $30
0000CDB2 500D 019A 08               		dc.b $50, $D, 1, $9A, 8
0000CDB7 500C 01A2 28               		dc.b $50, $C, 1, $A2, $28
0000CDBC 5808 01A6 28               		dc.b $58, 8, 1,	$A6, $28
0000CDC1 16                         byte_AAB1:	dc.b $16
0000CDC2 1804 01F9 38               		dc.b $18, 4, 1,	$F9, $38
0000CDC7 2000 01FB 38               		dc.b $20, 0, 1,	$FB, $38
0000CDCC 2808 01FC 30               		dc.b $28, 8, 1,	$FC, $30
0000CDD1 3001 01FF 30               		dc.b $30, 1, 1,	$FF, $30
0000CDD6 300B 0201 38               		dc.b $30, $B, 2, 1, $38
0000CDDB 180F 01D0 08               		dc.b $18, $F, 1, $D0, 8
0000CDE0 1803 01E0 28               		dc.b $18, 3, 1,	$E0, $28
0000CDE5 100F 014A 10               		dc.b $10, $F, 1, $4A, $10
0000CDEA 0804 015A 20               		dc.b 8,	4, 1, $5A, $20
0000CDEF 000B 015C 30               		dc.b 0,	$B, 1, $5C, $30
0000CDF4 0800 0168 48               		dc.b 8,	0, 1, $68, $48
0000CDF9 1800 0169 48               		dc.b $18, 0, 1,	$69, $48
0000CDFE 1805 016A 00               		dc.b $18, 5, 1,	$6A, 0
0000CE03 2802 016E 08               		dc.b $28, 2, 1,	$6E, 8
0000CE08 300F 0171 10               		dc.b $30, $F, 1, $71, $10
0000CE0D 200D 0181 30               		dc.b $20, $D, 1, $81, $30
0000CE12 2001 0189 50               		dc.b $20, 1, 1,	$89, $50
0000CE17 3008 018B 30               		dc.b $30, 8, 1,	$8B, $30
0000CE1C 380E 018E 30               		dc.b $38, $E, 1, $8E, $30
0000CE21 500D 019A 08               		dc.b $50, $D, 1, $9A, 8
0000CE26 500C 01A2 28               		dc.b $50, $C, 1, $A2, $28
0000CE2B 5808 01A6 28               		dc.b $58, 8, 1,	$A6, $28
0000CE30                            		even
0000CE30                            		even
0000CE30                            
0000CE30                            		include	"_incObj\2B Chopper.asm"
0000CE30                            ; ---------------------------------------------------------------------------
0000CE30                            ; Object 2B - Chopper enemy (GHZ)
0000CE30                            ; ---------------------------------------------------------------------------
0000CE30                            
0000CE30                            Chopper:
0000CE30 7000                       		moveq	#0,d0
0000CE32 1028 0024                  		move.b	obRoutine(a0),d0
0000CE36 323B 0000                  		move.w	Chop_Index(pc,d0.w),d1
0000CE3A 4EBB 1000                  		jsr	Chop_Index(pc,d1.w)
0000CE3E 6000 0000                  		bra.w	RememberState
0000CE42                            ; ===========================================================================
0000CE42 0000                       Chop_Index:	dc.w Chop_Main-Chop_Index
0000CE44 0000                       		dc.w Chop_ChgSpeed-Chop_Index
0000CE46                            
0000CE46 =00000030                  chop_origY:	equ $30
0000CE46                            ; ===========================================================================
0000CE46                            
0000CE46                            Chop_Main:	; Routine 0
0000CE46 5428 0024                  		addq.b	#2,obRoutine(a0)
0000CE4A 217C 0000 0000 0004        		move.l	#Map_Chop,obMap(a0)
0000CE52 317C 047B 0002             		move.w	#$47B,obGfx(a0)
0000CE58 117C 0004 0001             		move.b	#4,obRender(a0)
0000CE5E 317C 0200 0018             		move.w	#$200,obPriority(a0)
0000CE64 117C 0009 0020             		move.b	#9,obColType(a0)
0000CE6A 117C 0010 0014             		move.b	#$10,obActWid(a0)
0000CE70 317C F900 0012             		move.w	#-$700,obVelY(a0) ; set vertical speed
0000CE76 3168 000C 0030             		move.w	obY(a0),chop_origY(a0) ; save original position
0000CE7C                            
0000CE7C                            Chop_ChgSpeed:	; Routine 2
0000CE7C 43F9 0000 0000             		lea	(Ani_Chop).l,a1
0000CE82 6100 FBA4                  		bsr.w	AnimateSprite
0000CE86 6100 0000                  		bsr.w	SpeedToPos
0000CE8A 0668 0018 0012             		addi.w	#$18,obVelY(a0)	; reduce speed
0000CE90 3028 0030                  		move.w	chop_origY(a0),d0
0000CE94 B068 000C                  		cmp.w	obY(a0),d0	; has Chopper returned to its original position?
0000CE98 6400                       		bcc.s	@chganimation	; if not, branch
0000CE9A 3140 000C                  		move.w	d0,obY(a0)
0000CE9E 317C F900 0012             		move.w	#-$700,obVelY(a0) ; set vertical speed
0000CEA4                            
0000CEA4                            	@chganimation:
0000CEA4 117C 0001 001C             		move.b	#1,obAnim(a0)	; use fast animation
0000CEAA 0440 00C0                  		subi.w	#$C0,d0
0000CEAE B068 000C                  		cmp.w	obY(a0),d0
0000CEB2 6400                       		bcc.s	@nochg
0000CEB4 117C 0000 001C             		move.b	#0,obAnim(a0)	; use slow animation
0000CEBA 4A68 0012                  		tst.w	obVelY(a0)	; is Chopper at	its highest point?
0000CEBE 6B00                       		bmi.s	@nochg		; if not, branch
0000CEC0 117C 0002 001C             		move.b	#2,obAnim(a0)	; use stationary animation
0000CEC6                            
0000CEC6                            	@nochg:
0000CEC6 4E75                       		rts	
0000CEC6 4E75                       		rts	
0000CEC8                            		include	"_anim\Chopper.asm"
0000CEC8                            ; ---------------------------------------------------------------------------
0000CEC8                            ; Animation script - Chopper enemy
0000CEC8                            ; ---------------------------------------------------------------------------
0000CEC8 0000                       Ani_Chop:	dc.w @slow-Ani_Chop
0000CECA 0000                       		dc.w @fast-Ani_Chop
0000CECC 0000                       		dc.w @still-Ani_Chop
0000CECE 0700 01FF                  @slow:		dc.b 7,	0, 1, afEnd
0000CED2 0300 01FF                  @fast:		dc.b 3,	0, 1, afEnd
0000CED6 0700 FF                    @still:		dc.b 7,	0, afEnd
0000CEDA 00                         		even
0000CEDA 00                         		even
0000CEDA                            Map_Chop:	include	"_maps\Chopper.asm"
0000CEDA                            ; ---------------------------------------------------------------------------
0000CEDA                            ; Sprite mappings - Chopper enemy (GHZ)
0000CEDA                            ; ---------------------------------------------------------------------------
0000CEDA                            Map_Chop_internal:
0000CEDA 0000                       		dc.w @mouthshut-Map_Chop_internal
0000CEDC 0000                       		dc.w @mouthopen-Map_Chop_internal
0000CEDE 01                         @mouthshut:	dc.b 1
0000CEDF F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
0000CEE4 01                         @mouthopen:	dc.b 1
0000CEE5 F00F 0010 F0               		dc.b $F0, $F, 0, $10, $F0
0000CEEA                            		even
0000CEEA                            		even
0000CEEA                            		include	"_incObj\2C Jaws.asm"
0000CEEA                            ; ---------------------------------------------------------------------------
0000CEEA                            ; Object 2C - Jaws enemy (LZ)
0000CEEA                            ; ---------------------------------------------------------------------------
0000CEEA                            
0000CEEA                            Jaws:
0000CEEA 7000                       		moveq	#0,d0
0000CEEC 1028 0024                  		move.b	obRoutine(a0),d0
0000CEF0 323B 0000                  		move.w	Jaws_Index(pc,d0.w),d1
0000CEF4 4EFB 1000                  		jmp	Jaws_Index(pc,d1.w)
0000CEF8                            ; ===========================================================================
0000CEF8 0000                       Jaws_Index:	dc.w Jaws_Main-Jaws_Index
0000CEFA 0000                       		dc.w Jaws_Turn-Jaws_Index
0000CEFC                            
0000CEFC =00000030                  jaws_timecount:	equ $30
0000CEFC =00000032                  jaws_timedelay:	equ $32
0000CEFC                            ; ===========================================================================
0000CEFC                            
0000CEFC                            Jaws_Main:	; Routine 0
0000CEFC 5428 0024                  		addq.b	#2,obRoutine(a0)
0000CF00 217C 0000 0000 0004        		move.l	#Map_Jaws,obMap(a0)
0000CF08 317C 2486 0002             		move.w	#$2486,obGfx(a0)
0000CF0E 0028 0004 0001             		ori.b	#4,obRender(a0)
0000CF14 117C 000A 0020             		move.b	#$A,obColType(a0)
0000CF1A 317C 0200 0018             		move.w	#$200,obPriority(a0)
0000CF20 117C 0010 0014             		move.b	#$10,obActWid(a0)
0000CF26 7000                       		moveq	#0,d0
0000CF28 1028 0028                  		move.b	obSubtype(a0),d0 ; load object subtype number
0000CF2C ED48                       		lsl.w	#6,d0		; multiply d0 by 64
0000CF2E 5340                       		subq.w	#1,d0
0000CF30 3140 0030                  		move.w	d0,jaws_timecount(a0) ; set turn delay time
0000CF34 3140 0032                  		move.w	d0,jaws_timedelay(a0)
0000CF38 317C FFC0 0010             		move.w	#-$40,obVelX(a0) ; move Jaws to the left
0000CF3E 0828 0000 0022             		btst	#0,obStatus(a0)	; is Jaws facing left?
0000CF44 6700                       		beq.s	Jaws_Turn	; if yes, branch
0000CF46 4468 0010                  		neg.w	obVelX(a0)	; move Jaws to the right
0000CF4A                            
0000CF4A                            Jaws_Turn:	; Routine 2
0000CF4A 5368 0030                  		subq.w	#1,jaws_timecount(a0) ; subtract 1 from turn delay time
0000CF4E 6A00                       		bpl.s	@animate	; if time remains, branch
0000CF50 3168 0032 0030             		move.w	jaws_timedelay(a0),jaws_timecount(a0) ; reset turn delay time
0000CF56 4468 0010                  		neg.w	obVelX(a0)	; change speed direction
0000CF5A 0868 0000 0022             		bchg	#0,obStatus(a0)	; change Jaws facing direction
0000CF60 117C 0001 001D             		move.b	#1,obNextAni(a0) ; reset animation
0000CF66                            
0000CF66                            	@animate:
0000CF66 43F9 0000 0000             		lea	(Ani_Jaws).l,a1
0000CF6C 6100 FABA                  		bsr.w	AnimateSprite
0000CF70 6100 0000                  		bsr.w	SpeedToPos
0000CF74 6000 0000                  		bra.w	RememberState
0000CF74 6000 0000                  		bra.w	RememberState
0000CF78                            		include	"_anim\Jaws.asm"
0000CF78                            ; ---------------------------------------------------------------------------
0000CF78                            ; Animation script - Jaws enemy
0000CF78                            ; ---------------------------------------------------------------------------
0000CF78 0000                       Ani_Jaws:	dc.w @swim-Ani_Jaws
0000CF7A 0700 0102 03FF             @swim:		dc.b 7,	0, 1, 2, 3, afEnd
0000CF80                            		even
0000CF80                            		even
0000CF80                            Map_Jaws:	include	"_maps\Jaws.asm"
0000CF80                            ; --------------------------------------------------------------------------------
0000CF80                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0000CF80                            ; --------------------------------------------------------------------------------
0000CF80                            
0000CF80                            SME_O5C0c:	
0000CF80 0000 0000                  		dc.w SME_O5C0c_8-SME_O5C0c, SME_O5C0c_13-SME_O5C0c	
0000CF84 0000 0000                  		dc.w SME_O5C0c_1E-SME_O5C0c, SME_O5C0c_29-SME_O5C0c	
0000CF88 02                         SME_O5C0c_8:	dc.b 2	
0000CF89 F40E 0000 F0               		dc.b $F4, $E, 0, 0, $F0	
0000CF8E F505 0018 10               		dc.b $F5, 5, 0, $18, $10	
0000CF93 02                         SME_O5C0c_13:	dc.b 2	
0000CF94 F40E 000C F0               		dc.b $F4, $E, 0, $C, $F0	
0000CF99 F505 001C 10               		dc.b $F5, 5, 0, $1C, $10	
0000CF9E 02                         SME_O5C0c_1E:	dc.b 2	
0000CF9F F40E 0000 F0               		dc.b $F4, $E, 0, 0, $F0	
0000CFA4 F505 0018 10               		dc.b $F5, 5, 0, $18, $10	
0000CFA9 02                         SME_O5C0c_29:	dc.b 2	
0000CFAA F40E 000C F0               		dc.b $F4, $E, 0, $C, $F0	
0000CFAF F505 001C 10               		dc.b $F5, 5, 0, $1C, $10	
0000CFB4                            		even
0000CFB4                            		even
0000CFB4                            		include	"_incObj\2D Burrobot.asm"
0000CFB4                            ; ---------------------------------------------------------------------------
0000CFB4                            ; Object 2D - Burrobot enemy (LZ)
0000CFB4                            ; ---------------------------------------------------------------------------
0000CFB4                            
0000CFB4                            Burrobot:
0000CFB4 7000                       		moveq	#0,d0
0000CFB6 1028 0024                  		move.b	obRoutine(a0),d0
0000CFBA 323B 0000                  		move.w	Burro_Index(pc,d0.w),d1
0000CFBE 4EFB 1000                  		jmp	Burro_Index(pc,d1.w)
0000CFC2                            ; ===========================================================================
0000CFC2 0000                       Burro_Index:	dc.w Burro_Main-Burro_Index
0000CFC4 0000                       		dc.w Burro_Action-Burro_Index
0000CFC6                            
0000CFC6 =00000030                  burro_timedelay:	equ $30		; time between direction changes
0000CFC6                            ; ===========================================================================
0000CFC6                            
0000CFC6                            Burro_Main:	; Routine 0
0000CFC6 5428 0024                  		addq.b	#2,obRoutine(a0)
0000CFCA 117C 0013 0016             		move.b	#$13,obHeight(a0)
0000CFD0 117C 0008 0017             		move.b	#8,obWidth(a0)
0000CFD6 217C 0000 0000 0004        		move.l	#Map_Burro,obMap(a0)
0000CFDE 317C 04A6 0002             		move.w	#$4A6,obGfx(a0)
0000CFE4 0028 0004 0001             		ori.b	#4,obRender(a0)
0000CFEA 317C 0200 0018             		move.w	#$200,obPriority(a0)
0000CFF0 117C 0005 0020             		move.b	#5,obColType(a0)
0000CFF6 117C 000C 0014             		move.b	#$C,obActWid(a0)
0000CFFC 5C28 0025                  		addq.b	#6,ob2ndRout(a0) ; run "Burro_ChkSonic" routine
0000D000 117C 0002 001C             		move.b	#2,obAnim(a0)
0000D006                            
0000D006                            Burro_Action:	; Routine 2
0000D006 7000                       		moveq	#0,d0
0000D008 1028 0025                  		move.b	ob2ndRout(a0),d0
0000D00C 323B 0000                  		move.w	@index(pc,d0.w),d1
0000D010 4EBB 1000                  		jsr	@index(pc,d1.w)
0000D014 43F9 0000 0000             		lea	(Ani_Burro).l,a1
0000D01A 6100 FA0C                  		bsr.w	AnimateSprite
0000D01E 6000 0000                  		bra.w	RememberState
0000D022                            ; ===========================================================================
0000D022 0000                       @index:		dc.w @changedir-@index
0000D024 0000                       		dc.w Burro_Move-@index
0000D026 0000                       		dc.w Burro_Jump-@index
0000D028 0000                       		dc.w Burro_ChkSonic-@index
0000D02A                            ; ===========================================================================
0000D02A                            
0000D02A                            @changedir:
0000D02A 5368 0030                  		subq.w	#1,burro_timedelay(a0)
0000D02E 6A00                       		bpl.s	@nochg
0000D030 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0000D034 317C 00FF 0030             		move.w	#255,burro_timedelay(a0)
0000D03A 317C 0080 0010             		move.w	#$80,obVelX(a0)
0000D040 117C 0001 001C             		move.b	#1,obAnim(a0)
0000D046 0868 0000 0022             		bchg	#0,obStatus(a0)	; change direction the Burrobot	is facing
0000D04C 6700                       		beq.s	@nochg
0000D04E 4468 0010                  		neg.w	obVelX(a0)	; change direction the Burrobot	is moving
0000D052                            
0000D052                            	@nochg:
0000D052 4E75                       		rts	
0000D054                            ; ===========================================================================
0000D054                            
0000D054                            Burro_Move:
0000D054 5368 0030                  		subq.w	#1,burro_timedelay(a0)
0000D058 6B00                       		bmi.s	loc_AD84
0000D05A 6100 0000                  		bsr.w	SpeedToPos
0000D05E 0868 0000 0032             		bchg	#0,$32(a0)
0000D064 6600                       		bne.s	loc_AD78
0000D066 3628 0008                  		move.w	obX(a0),d3
0000D06A 0643 000C                  		addi.w	#$C,d3
0000D06E 0828 0000 0022             		btst	#0,obStatus(a0)
0000D074 6600                       		bne.s	loc_AD6A
0000D076 0443 0018                  		subi.w	#$18,d3
0000D07A                            
0000D07A                            loc_AD6A:
0000D07A 4EB9 0000 0000             		jsr	(ObjFloorDist2).l
0000D080 0C41 000C                  		cmpi.w	#$C,d1
0000D084 6C00                       		bge.s	loc_AD84
0000D086 4E75                       		rts	
0000D088                            ; ===========================================================================
0000D088                            
0000D088                            loc_AD78:
0000D088 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0000D08E D368 000C                  		add.w	d1,obY(a0)
0000D092 4E75                       		rts	
0000D094                            ; ===========================================================================
0000D094                            
0000D094                            loc_AD84:
0000D094 0838 0002 FE0F             		btst	#2,(v_vbla_byte).w
0000D09A 6700                       		beq.s	loc_ADA4
0000D09C 5528 0025                  		subq.b	#2,ob2ndRout(a0)
0000D0A0 317C 003B 0030             		move.w	#59,burro_timedelay(a0)
0000D0A6 317C 0000 0010             		move.w	#0,obVelX(a0)
0000D0AC 117C 0000 001C             		move.b	#0,obAnim(a0)
0000D0B2 4E75                       		rts	
0000D0B4                            ; ===========================================================================
0000D0B4                            
0000D0B4                            loc_ADA4:
0000D0B4 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0000D0B8 317C FC00 0012             		move.w	#-$400,obVelY(a0)
0000D0BE 117C 0002 001C             		move.b	#2,obAnim(a0)
0000D0C4 4E75                       		rts	
0000D0C6                            ; ===========================================================================
0000D0C6                            
0000D0C6                            Burro_Jump:
0000D0C6 6100 0000                  		bsr.w	SpeedToPos
0000D0CA 0668 0018 0012             		addi.w	#$18,obVelY(a0)
0000D0D0 6B00                       		bmi.s	locret_ADF0
0000D0D2 117C 0003 001C             		move.b	#3,obAnim(a0)
0000D0D8 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0000D0DE 4A41                       		tst.w	d1
0000D0E0 6A00                       		bpl.s	locret_ADF0
0000D0E2 D368 000C                  		add.w	d1,obY(a0)
0000D0E6 317C 0000 0012             		move.w	#0,obVelY(a0)
0000D0EC 117C 0001 001C             		move.b	#1,obAnim(a0)
0000D0F2 317C 00FF 0030             		move.w	#255,burro_timedelay(a0)
0000D0F8 5528 0025                  		subq.b	#2,ob2ndRout(a0)
0000D0FC 6100 0000                  		bsr.w	Burro_ChkSonic2
0000D100                            
0000D100                            locret_ADF0:
0000D100 4E75                       		rts	
0000D102                            ; ===========================================================================
0000D102                            
0000D102                            Burro_ChkSonic:
0000D102 343C 0060                  		move.w	#$60,d2
0000D106 6100 0000                  		bsr.w	Burro_ChkSonic2
0000D10A 6400                       		bcc.s	locret_AE20
0000D10C 3038 D00C                  		move.w	(v_player+obY).w,d0
0000D110 9068 000C                  		sub.w	obY(a0),d0
0000D114 6400                       		bcc.s	locret_AE20
0000D116 0C40 FF80                  		cmpi.w	#-$80,d0
0000D11A 6500                       		bcs.s	locret_AE20
0000D11C 4A78 FE08                  		tst.w	(v_debuguse).w
0000D120 6600                       		bne.s	locret_AE20
0000D122 5528 0025                  		subq.b	#2,ob2ndRout(a0)
0000D126 3141 0010                  		move.w	d1,obVelX(a0)
0000D12A 317C FC00 0012             		move.w	#-$400,obVelY(a0)
0000D130                            
0000D130                            locret_AE20:
0000D130 4E75                       		rts	
0000D132                            
0000D132                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000D132                            
0000D132                            
0000D132                            Burro_ChkSonic2:
0000D132 323C 0080                  		move.w	#$80,d1
0000D136 08E8 0000 0022             		bset	#0,obStatus(a0)
0000D13C 3038 D008                  		move.w	(v_player+obX).w,d0
0000D140 9068 0008                  		sub.w	obX(a0),d0
0000D144 6400                       		bcc.s	loc_AE40
0000D146 4440                       		neg.w	d0
0000D148 4441                       		neg.w	d1
0000D14A 08A8 0000 0022             		bclr	#0,obStatus(a0)
0000D150                            
0000D150                            loc_AE40:
0000D150 B042                       		cmp.w	d2,d0
0000D152 4E75                       		rts	
0000D154                            ; End of function Burro_ChkSonic2
0000D154                            ; End of function Burro_ChkSonic2
0000D154                            		include	"_anim\Burrobot.asm"
0000D154                            ; ---------------------------------------------------------------------------
0000D154                            ; Animation script - Burrobot enemy
0000D154                            ; ---------------------------------------------------------------------------
0000D154 0000                       Ani_Burro:	dc.w @walk1-Ani_Burro
0000D156 0000                       		dc.w @walk2-Ani_Burro
0000D158 0000                       		dc.w @digging-Ani_Burro
0000D15A 0000                       		dc.w @fall-Ani_Burro
0000D15C 0300 06FF                  @walk1:		dc.b 3,	0, 6, afEnd
0000D160 0300 01FF                  @walk2:		dc.b 3,	0, 1, afEnd
0000D164 0302 03FF                  @digging:	dc.b 3,	2, 3, afEnd
0000D168 0304 FF                    @fall:		dc.b 3,	4, afEnd
0000D16C 00                         		even
0000D16C 00                         		even
0000D16C                            Map_Burro:	include	"_maps\Burrobot.asm"
0000D16C                            ; --------------------------------------------------------------------------------
0000D16C                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0000D16C                            ; --------------------------------------------------------------------------------
0000D16C                            
0000D16C                            SME_Ag_86:	
0000D16C 0000 0000                  		dc.w SME_Ag_86_E-SME_Ag_86, SME_Ag_86_19-SME_Ag_86	
0000D170 0000 0000                  		dc.w SME_Ag_86_24-SME_Ag_86, SME_Ag_86_2F-SME_Ag_86	
0000D174 0000 0000                  		dc.w SME_Ag_86_3A-SME_Ag_86, SME_Ag_86_45-SME_Ag_86	
0000D178 0000                       		dc.w SME_Ag_86_50-SME_Ag_86	
0000D17A 02                         SME_Ag_86_E:	dc.b 2	
0000D17B EC0A 2000 F0               		dc.b $EC, $A, $20, 0, $F0	
0000D180 0409 2009 F4               		dc.b 4, 9, $20, 9, $F4	
0000D185 02                         SME_Ag_86_19:	dc.b 2	
0000D186 EC0A 200F F0               		dc.b $EC, $A, $20, $F, $F0	
0000D18B 0409 2018 F4               		dc.b 4, 9, $20, $18, $F4	
0000D190 02                         SME_Ag_86_24:	dc.b 2	
0000D191 E80A 201E F4               		dc.b $E8, $A, $20, $1E, $F4	
0000D196 000A 2027 F4               		dc.b 0, $A, $20, $27, $F4	
0000D19B 02                         SME_Ag_86_2F:	dc.b 2	
0000D19C E80A 2030 F4               		dc.b $E8, $A, $20, $30, $F4	
0000D1A1 000A 2039 F4               		dc.b 0, $A, $20, $39, $F4	
0000D1A6 02                         SME_Ag_86_3A:	dc.b 2	
0000D1A7 E80A 200F F0               		dc.b $E8, $A, $20, $F, $F0	
0000D1AC 000A 2042 F4               		dc.b 0, $A, $20, $42, $F4	
0000D1B1 02                         SME_Ag_86_45:	dc.b 2	
0000D1B2 F406 204B E8               		dc.b $F4, 6, $20, $4B, $E8	
0000D1B7 F40A 2051 F8               		dc.b $F4, $A, $20, $51, $F8	
0000D1BC 02                         SME_Ag_86_50:	dc.b 2	
0000D1BD EC0A 200F F0               		dc.b $EC, $A, $20, $F, $F0	
0000D1C2 0409 2009 F4               		dc.b 4, 9, $20, 9, $F4	
0000D1C8 00                         		even
0000D1C8 00                         		even
0000D1C8                            
0000D1C8                            		include	"_incObj\2F MZ Large Grassy Platforms.asm"
0000D1C8                            ; ---------------------------------------------------------------------------
0000D1C8                            ; Object 2F - large grass-covered platforms (MZ)
0000D1C8                            ; ---------------------------------------------------------------------------
0000D1C8                            
0000D1C8                            LargeGrass:
0000D1C8 7000                       		moveq	#0,d0
0000D1CA 1028 0024                  		move.b	obRoutine(a0),d0
0000D1CE 323B 0000                  		move.w	LGrass_Index(pc,d0.w),d1
0000D1D2 4EFB 1000                  		jmp	LGrass_Index(pc,d1.w)
0000D1D6                            ; ===========================================================================
0000D1D6 0000                       LGrass_Index:	dc.w LGrass_Main-LGrass_Index
0000D1D8 0000                       		dc.w LGrass_Action-LGrass_Index
0000D1DA                            
0000D1DA =0000002A                  lgrass_origX:	equ $2A
0000D1DA =0000002C                  lgrass_origY:	equ $2C
0000D1DA                            
0000D1DA 0000                       LGrass_Data:	dc.w LGrass_Data1-LGrass_Data 	; collision angle data
0000D1DC 0040                       		dc.b 0,	$40			; frame	number,	platform width
0000D1DE 0000                       		dc.w LGrass_Data3-LGrass_Data
0000D1E0 0140                       		dc.b 1,	$40
0000D1E2 0000                       		dc.w LGrass_Data2-LGrass_Data
0000D1E4 0220                       		dc.b 2,	$20
0000D1E6                            ; ===========================================================================
0000D1E6                            
0000D1E6                            LGrass_Main:	; Routine 0
0000D1E6 5428 0024                  		addq.b	#2,obRoutine(a0)
0000D1EA 217C 0000 0000 0004        		move.l	#Map_LGrass,obMap(a0)
0000D1F2 317C C000 0002             		move.w	#$C000,obGfx(a0)
0000D1F8 117C 0004 0001             		move.b	#4,obRender(a0)
0000D1FE 317C 0200 0018             		move.w	#$200,obPriority(a0)
0000D204 3168 000C 002C             		move.w	obY(a0),lgrass_origY(a0)
0000D20A 3168 0008 002A             		move.w	obX(a0),lgrass_origX(a0)
0000D210 7000                       		moveq	#0,d0
0000D212 1028 0028                  		move.b	obSubtype(a0),d0
0000D216 E448                       		lsr.w	#2,d0
0000D218 0240 001C                  		andi.w	#$1C,d0
0000D21C 43FB 00BC                  		lea	LGrass_Data(pc,d0.w),a1
0000D220 3019                       		move.w	(a1)+,d0
0000D222 45FB 00B6                  		lea	LGrass_Data(pc,d0.w),a2
0000D226 214A 0030                  		move.l	a2,$30(a0)
0000D22A 1159 001A                  		move.b	(a1)+,obFrame(a0)
0000D22E 1151 0014                  		move.b	(a1),obActWid(a0)
0000D232 0228 000F 0028             		andi.b	#$F,obSubtype(a0)
0000D238 117C 0040 0016             		move.b	#$40,obHeight(a0)
0000D23E 08E8 0004 0001             		bset	#4,1(a0)
0000D244                            
0000D244                            LGrass_Action:	; Routine 2
0000D244 6100 0000                  		bsr.w	LGrass_Types
0000D248 4A28 0025                  		tst.b	ob2ndRout(a0)
0000D24C 6700                       		beq.s	LGrass_Solid
0000D24E 7200                       		moveq	#0,d1
0000D250 1228 0014                  		move.b	obActWid(a0),d1
0000D254 0641 000B                  		addi.w	#$B,d1
0000D258 6100 BFA4                  		bsr.w	ExitPlatform
0000D25C 0829 0003 0022             		btst	#3,obStatus(a1)
0000D262 6600 0000                  		bne.w	LGrass_Slope
0000D266 4228 0025                  		clr.b	ob2ndRout(a0)
0000D26A 6000                       		bra.s	LGrass_Display
0000D26C                            ; ===========================================================================
0000D26C                            
0000D26C                            LGrass_Slope:
0000D26C 7200                       		moveq	#0,d1
0000D26E 1228 0014                  		move.b	obActWid(a0),d1
0000D272 0641 000B                  		addi.w	#$B,d1
0000D276 2468 0030                  		movea.l	$30(a0),a2
0000D27A 3428 0008                  		move.w	obX(a0),d2
0000D27E 6100 CF18                  		bsr.w	SlopeObject2
0000D282 6000                       		bra.s	LGrass_Display
0000D284                            ; ===========================================================================
0000D284                            
0000D284                            LGrass_Solid:
0000D284 7200                       		moveq	#0,d1
0000D286 1228 0014                  		move.b	obActWid(a0),d1
0000D28A 0641 000B                  		addi.w	#$B,d1
0000D28E 343C 0020                  		move.w	#$20,d2
0000D292 0C28 0002 001A             		cmpi.b	#2,obFrame(a0)
0000D298 6600                       		bne.s	loc_AF8E
0000D29A 343C 0030                  		move.w	#$30,d2
0000D29E                            
0000D29E                            loc_AF8E:
0000D29E 2468 0030                  		movea.l	$30(a0),a2
0000D2A2 6100 0000                  		bsr.w	SolidObject2F
0000D2A6                            
0000D2A6                            LGrass_Display:
0000D2A6 6100 0000                  		bsr.w	DisplaySprite
0000D2AA 6000 0000                  		bra.w	LGrass_ChkDel
0000D2AE                            
0000D2AE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000D2AE                            
0000D2AE                            
0000D2AE                            LGrass_Types:
0000D2AE 7000                       		moveq	#0,d0
0000D2B0 1028 0028                  		move.b	obSubtype(a0),d0
0000D2B4 0240 0007                  		andi.w	#7,d0
0000D2B8 D040                       		add.w	d0,d0
0000D2BA 323B 0000                  		move.w	LGrass_TypeIndex(pc,d0.w),d1
0000D2BE 4EFB 1000                  		jmp	LGrass_TypeIndex(pc,d1.w)
0000D2C2                            ; End of function LGrass_Types
0000D2C2                            
0000D2C2                            ; ===========================================================================
0000D2C2 0000                       LGrass_TypeIndex:dc.w LGrass_Type00-LGrass_TypeIndex
0000D2C4 0000                       		dc.w LGrass_Type01-LGrass_TypeIndex
0000D2C6 0000                       		dc.w LGrass_Type02-LGrass_TypeIndex
0000D2C8 0000                       		dc.w LGrass_Type03-LGrass_TypeIndex
0000D2CA 0000                       		dc.w LGrass_Type04-LGrass_TypeIndex
0000D2CC 0000                       		dc.w LGrass_Type05-LGrass_TypeIndex
0000D2CE                            ; ===========================================================================
0000D2CE                            
0000D2CE                            LGrass_Type00:
0000D2CE 4E75                       		rts			; type 00 platform doesn't move
0000D2D0                            ; ===========================================================================
0000D2D0                            
0000D2D0                            LGrass_Type01:
0000D2D0 1038 FE60                  		move.b	(v_oscillate+2).w,d0
0000D2D4 323C 0020                  		move.w	#$20,d1
0000D2D8 6000                       		bra.s	LGrass_Move
0000D2DA                            ; ===========================================================================
0000D2DA                            
0000D2DA                            LGrass_Type02:
0000D2DA 1038 FE64                  		move.b	(v_oscillate+6).w,d0
0000D2DE 323C 0030                  		move.w	#$30,d1
0000D2E2 6000                       		bra.s	LGrass_Move
0000D2E4                            ; ===========================================================================
0000D2E4                            
0000D2E4                            LGrass_Type03:
0000D2E4 1038 FE68                  		move.b	(v_oscillate+$A).w,d0
0000D2E8 323C 0040                  		move.w	#$40,d1
0000D2EC 6000                       		bra.s	LGrass_Move
0000D2EE                            ; ===========================================================================
0000D2EE                            
0000D2EE                            LGrass_Type04:
0000D2EE 1038 FE6C                  		move.b	(v_oscillate+$E).w,d0
0000D2F2 323C 0060                  		move.w	#$60,d1
0000D2F6                            
0000D2F6                            LGrass_Move:
0000D2F6 0828 0003 0028             		btst	#3,obSubtype(a0)
0000D2FC 6700                       		beq.s	loc_AFF2
0000D2FE 4440                       		neg.w	d0
0000D300 D041                       		add.w	d1,d0
0000D302                            
0000D302                            loc_AFF2:
0000D302 3228 002C                  		move.w	lgrass_origY(a0),d1
0000D306 9240                       		sub.w	d0,d1
0000D308 3141 000C                  		move.w	d1,obY(a0)	; update position on y-axis
0000D30C 4E75                       		rts	
0000D30E                            ; ===========================================================================
0000D30E                            
0000D30E                            LGrass_Type05:
0000D30E 1028 0034                  		move.b	$34(a0),d0
0000D312 4A28 0025                  		tst.b	ob2ndRout(a0)
0000D316 6600                       		bne.s	loc_B010
0000D318 5500                       		subq.b	#2,d0
0000D31A 6400                       		bcc.s	loc_B01C
0000D31C 7000                       		moveq	#0,d0
0000D31E 6000                       		bra.s	loc_B01C
0000D320                            ; ===========================================================================
0000D320                            
0000D320                            loc_B010:
0000D320 5800                       		addq.b	#4,d0
0000D322 0C00 0040                  		cmpi.b	#$40,d0
0000D326 6500                       		bcs.s	loc_B01C
0000D328 103C 0040                  		move.b	#$40,d0
0000D32C                            
0000D32C                            loc_B01C:
0000D32C 1140 0034                  		move.b	d0,$34(a0)
0000D330 4EB9 0000 3A36             		jsr	(CalcSine).l
0000D336 E848                       		lsr.w	#4,d0
0000D338 3200                       		move.w	d0,d1
0000D33A D068 002C                  		add.w	lgrass_origY(a0),d0
0000D33E 3140 000C                  		move.w	d0,obY(a0)
0000D342 0C28 0020 0034             		cmpi.b	#$20,$34(a0)
0000D348 6600                       		bne.s	loc_B07A
0000D34A 4A28 0035                  		tst.b	$35(a0)
0000D34E 6600                       		bne.s	loc_B07A
0000D350 117C 0001 0035             		move.b	#1,$35(a0)
0000D356 6100 0000                  		bsr.w	FindNextFreeObj
0000D35A 6600                       		bne.s	loc_B07A
0000D35C 12BC 0000                  		move.b	#id_GrassFire,0(a1) ; load sitting flame object
0000D360 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000D366 3368 002C 002C             		move.w	lgrass_origY(a0),lgrass_origY(a1)
0000D36C 5069 002C                  		addq.w	#8,lgrass_origY(a1)
0000D370 5769 002C                  		subq.w	#3,lgrass_origY(a1)
0000D374 0469 0040 0008             		subi.w	#$40,obX(a1)
0000D37A 2368 0030 0030             		move.l	$30(a0),$30(a1)
0000D380 2348 0038                  		move.l	a0,$38(a1)
0000D384 2448                       		movea.l	a0,a2
0000D386 6100                       		bsr.s	sub_B09C
0000D388                            
0000D388                            loc_B07A:
0000D388 7400                       		moveq	#0,d2
0000D38A 45E8 0036                  		lea	$36(a0),a2
0000D38E 141A                       		move.b	(a2)+,d2
0000D390 5302                       		subq.b	#1,d2
0000D392 6500                       		bcs.s	locret_B09A
0000D394                            
0000D394                            loc_B086:
0000D394 7000                       		moveq	#0,d0
0000D396 101A                       		move.b	(a2)+,d0
0000D398 ED48                       		lsl.w	#6,d0
0000D39A 0640 D000                  		addi.w	#$D000,d0
0000D39E 3240                       		movea.w	d0,a1
0000D3A0 3341 003C                  		move.w	d1,$3C(a1)
0000D3A4 51CA FFEE                  		dbf	d2,loc_B086
0000D3A8                            
0000D3A8                            locret_B09A:
0000D3A8 4E75                       		rts	
0000D3AA                            
0000D3AA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000D3AA                            
0000D3AA                            
0000D3AA                            sub_B09C:
0000D3AA 45EA 0036                  		lea	$36(a2),a2
0000D3AE 7000                       		moveq	#0,d0
0000D3B0 1012                       		move.b	(a2),d0
0000D3B2 5212                       		addq.b	#1,(a2)
0000D3B4 45F2 0001                  		lea	1(a2,d0.w),a2
0000D3B8 3009                       		move.w	a1,d0
0000D3BA 0440 D000                  		subi.w	#$D000,d0
0000D3BE EC48                       		lsr.w	#6,d0
0000D3C0 0240 007F                  		andi.w	#$7F,d0
0000D3C4 1480                       		move.b	d0,(a2)
0000D3C6 4E75                       		rts	
0000D3C8                            ; End of function sub_B09C
0000D3C8                            
0000D3C8                            ; ===========================================================================
0000D3C8                            
0000D3C8                            LGrass_ChkDel:
0000D3C8 4A28 0035                  		tst.b	$35(a0)
0000D3CC 6700                       		beq.s	loc_B0C6
0000D3CE 4A28 0001                  		tst.b	obRender(a0)
0000D3D2 6A00                       		bpl.s	LGrass_DelFlames
0000D3D4                            
0000D3D4                            loc_B0C6:
0000D3F2 4E75                       		rts	
0000D3F4                            ; ===========================================================================
0000D3F4                            
0000D3F4                            LGrass_DelFlames:
0000D3F4 7400                       		moveq	#0,d2
0000D3F6                            
0000D3F6                            loc_B0E8:
0000D3F6 45E8 0036                  		lea	$36(a0),a2
0000D3FA 1412                       		move.b	(a2),d2
0000D3FC 421A                       		clr.b	(a2)+
0000D3FE 5302                       		subq.b	#1,d2
0000D400 6500                       		bcs.s	locret_B116
0000D402                            
0000D402                            loc_B0F4:
0000D402 7000                       		moveq	#0,d0
0000D404 1012                       		move.b	(a2),d0
0000D406 421A                       		clr.b	(a2)+
0000D408 ED48                       		lsl.w	#6,d0
0000D40A 0640 D000                  		addi.w	#$D000,d0
0000D40E 3240                       		movea.w	d0,a1
0000D410 6100 0000                  		bsr.w	DeleteChild
0000D414 51CA FFEC                  		dbf	d2,loc_B0F4
0000D418 117C 0000 0035             		move.b	#0,$35(a0)
0000D41E 117C 0000 0034             		move.b	#0,$34(a0)
0000D424                            
0000D424                            locret_B116:
0000D424 4E75                       		rts	
0000D426                            ; ===========================================================================
0000D426                            ; ---------------------------------------------------------------------------
0000D426                            ; Collision data for large moving platforms (MZ)
0000D426                            ; ---------------------------------------------------------------------------
0000D426                            LGrass_Data1:	incbin	"misc\mz_pfm1.bin"
0000D472                            		even
0000D472                            LGrass_Data2:	incbin	"misc\mz_pfm2.bin"
0000D49E                            		even
0000D49E                            LGrass_Data3:	incbin	"misc\mz_pfm3.bin"
0000D4EA                            		even
0000D4EA                            		even
0000D4EA                            		include	"_incObj\35 Burning Grass.asm"
0000D4EA                            ; ---------------------------------------------------------------------------
0000D4EA                            ; Object 35 - fireball that sits on the	floor (MZ)
0000D4EA                            ; (appears when	you walk on sinking platforms)
0000D4EA                            ; ---------------------------------------------------------------------------
0000D4EA                            
0000D4EA                            GrassFire:
0000D4EA 7000                       		moveq	#0,d0
0000D4EC 1028 0024                  		move.b	obRoutine(a0),d0
0000D4F0 323B 0000                  		move.w	GFire_Index(pc,d0.w),d1
0000D4F4 4EFB 1000                  		jmp	GFire_Index(pc,d1.w)
0000D4F8                            ; ===========================================================================
0000D4F8 0000                       GFire_Index:	dc.w GFire_Main-GFire_Index
0000D4FA 0000                       		dc.w loc_B238-GFire_Index
0000D4FC 0000                       		dc.w GFire_Move-GFire_Index
0000D4FE                            
0000D4FE =0000002A                  gfire_origX:	equ $2A
0000D4FE                            ; ===========================================================================
0000D4FE                            
0000D4FE                            GFire_Main:	; Routine 0
0000D4FE 5428 0024                  		addq.b	#2,obRoutine(a0)
0000D502 217C 0000 0000 0004        		move.l	#Map_Fire,obMap(a0)
0000D50A 317C 0345 0002             		move.w	#$345,obGfx(a0)
0000D510 3168 0008 002A             		move.w	obX(a0),gfire_origX(a0)
0000D516 117C 0004 0001             		move.b	#4,obRender(a0)
0000D51C 317C 0080 0018             		move.w	#$80,obPriority(a0)
0000D522 117C 008B 0020             		move.b	#$8B,obColType(a0)
0000D528 117C 0008 0014             		move.b	#8,obActWid(a0)
0000D538 4A28 0028                  		tst.b	obSubtype(a0)
0000D53C 6700                       		beq.s	loc_B238
0000D53E 5428 0024                  		addq.b	#2,obRoutine(a0)
0000D542 6000 0000                  		bra.w	GFire_Move
0000D546                            ; ===========================================================================
0000D546                            
0000D546                            loc_B238:	; Routine 2
0000D546 2268 0030                  		movea.l	$30(a0),a1
0000D54A 3228 0008                  		move.w	obX(a0),d1
0000D54E 9268 002A                  		sub.w	gfire_origX(a0),d1
0000D552 0641 000C                  		addi.w	#$C,d1
0000D556 3001                       		move.w	d1,d0
0000D558 E248                       		lsr.w	#1,d0
0000D55A 1031 0000                  		move.b	(a1,d0.w),d0
0000D55E 4440                       		neg.w	d0
0000D560 D068 002C                  		add.w	$2C(a0),d0
0000D564 3400                       		move.w	d0,d2
0000D566 D068 003C                  		add.w	$3C(a0),d0
0000D56A 3140 000C                  		move.w	d0,obY(a0)
0000D56E 0C41 0084                  		cmpi.w	#$84,d1
0000D572 6400                       		bcc.s	loc_B2B0
0000D574 06A8 0001 0000 0008        		addi.l	#$10000,obX(a0)
0000D57C 0C41 0080                  		cmpi.w	#$80,d1
0000D580 6400                       		bcc.s	loc_B2B0
0000D582 2028 0008                  		move.l	obX(a0),d0
0000D586 0680 0008 0000             		addi.l	#$80000,d0
0000D58C 0280 000F FFFF             		andi.l	#$FFFFF,d0
0000D592 6600                       		bne.s	loc_B2B0
0000D594 6100 0000                  		bsr.w	FindNextFreeObj
0000D598 6600                       		bne.s	loc_B2B0
0000D59A 12BC 0000                  		move.b	#id_GrassFire,0(a1)
0000D59E 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000D5A4 3342 002C                  		move.w	d2,$2C(a1)
0000D5A8 3368 003C 003C             		move.w	$3C(a0),$3C(a1)
0000D5AE 137C 0001 0028             		move.b	#1,obSubtype(a1)
0000D5B4 2468 0038                  		movea.l	$38(a0),a2
0000D5B8 6100 FDF0                  		bsr.w	sub_B09C
0000D5BC                            
0000D5BC                            loc_B2B0:
0000D5BC 6000                       		bra.s	GFire_Animate
0000D5BE                            ; ===========================================================================
0000D5BE                            
0000D5BE                            GFire_Move:	; Routine 4
0000D5BE 3028 002C                  		move.w	$2C(a0),d0
0000D5C2 D068 003C                  		add.w	$3C(a0),d0
0000D5C6 3140 000C                  		move.w	d0,obY(a0)
0000D5CA                            
0000D5CA                            GFire_Animate:
0000D5CA 43F9 0000 0000             		lea	(Ani_GFire).l,a1
0000D5D0 6100 F456                  		bsr.w	AnimateSprite
0000D5D4 6000 0000                  		bra.w	DisplaySprite
0000D5D4 6000 0000                  		bra.w	DisplaySprite
0000D5D8                            		include	"_anim\Burning Grass.asm"
0000D5D8                            ; ---------------------------------------------------------------------------
0000D5D8                            ; Animation script - burning grass that sits on the floor (MZ)
0000D5D8                            ; ---------------------------------------------------------------------------
0000D5D8 0000                       Ani_GFire:	dc.w @burn-Ani_GFire
0000D5DA 0500 2001 21FF             @burn:		dc.b 5,	0, $20,	1, $21,	afEnd
0000D5E0                            		even
0000D5E0                            		even
0000D5E0                            Map_LGrass:	include	"_maps\MZ Large Grassy Platforms.asm"
0000D5E0                            ; ---------------------------------------------------------------------------
0000D5E0                            ; Sprite mappings - large moving grass-covered platforms (MZ)
0000D5E0                            ; ---------------------------------------------------------------------------
0000D5E0                            Map_LGrass_internal:
0000D5E0 0000                       		dc.w @wide-Map_LGrass_internal
0000D5E2 0000                       		dc.w @sloped-Map_LGrass_internal
0000D5E4 0000                       		dc.w @narrow-Map_LGrass_internal
0000D5E6 0D                         @wide:		dc.b $D
0000D5E7 D806 0057 C0               		dc.b $D8, 6, 0,	$57, $C0 ; wide platform
0000D5EC F005 0053 C0               		dc.b $F0, 5, 0,	$53, $C0
0000D5F1 000F 0001 C0               		dc.b 0,	$F, 0, 1, $C0
0000D5F6 D00F 0027 D0               		dc.b $D0, $F, 0, $27, $D0
0000D5FB F00D 0037 D0               		dc.b $F0, $D, 0, $37, $D0
0000D600 F00F 0001 E0               		dc.b $F0, $F, 0, 1, $E0
0000D605 D00F 0011 F0               		dc.b $D0, $F, 0, $11, $F0
0000D60A D00F 003F 10               		dc.b $D0, $F, 0, $3F, $10
0000D60F F00D 004F 10               		dc.b $F0, $D, 0, $4F, $10
0000D614 F00F 0001 00               		dc.b $F0, $F, 0, 1, 0
0000D619 000F 0001 20               		dc.b 0,	$F, 0, 1, $20
0000D61E D806 0057 30               		dc.b $D8, 6, 0,	$57, $30
0000D623 F005 0053 30               		dc.b $F0, 5, 0,	$53, $30
0000D628 0A                         @sloped:	dc.b $A
0000D629 D00F 0027 C0               		dc.b $D0, $F, 0, $27, $C0 ; sloped platform (catches fire)
0000D62E F00D 0037 C0               		dc.b $F0, $D, 0, $37, $C0
0000D633 000F 0001 C0               		dc.b 0,	$F, 0, 1, $C0
0000D638 C00F 0027 E0               		dc.b $C0, $F, 0, $27, $E0
0000D63D E00D 0037 E0               		dc.b $E0, $D, 0, $37, $E0
0000D642 F00F 0001 E0               		dc.b $F0, $F, 0, 1, $E0
0000D647 C00F 0011 00               		dc.b $C0, $F, 0, $11, 0
0000D64C E00F 0001 00               		dc.b $E0, $F, 0, 1, 0
0000D651 C00F 003F 20               		dc.b $C0, $F, 0, $3F, $20
0000D656 E00D 004F 20               		dc.b $E0, $D, 0, $4F, $20
0000D65B 06                         @narrow:	dc.b 6
0000D65C D00F 0011 E0               		dc.b $D0, $F, 0, $11, $E0 ; narrow platform
0000D661 F00F 0001 E0               		dc.b $F0, $F, 0, 1, $E0
0000D666 100F 0001 E0               		dc.b $10, $F, 0, 1, $E0
0000D66B D00F 0011 00               		dc.b $D0, $F, 0, $11, 0
0000D670 F00F 0001 00               		dc.b $F0, $F, 0, 1, 0
0000D675 100F 0001 00               		dc.b $10, $F, 0, 1, 0
0000D67A                            		even
0000D67A                            		even
0000D67A                            Map_Fire:	include	"_maps\Fireballs.asm"
0000D67A                            ; --------------------------------------------------------------------------------
0000D67A                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0000D67A                            ; --------------------------------------------------------------------------------
0000D67A                            
0000D67A                            SME_gyvTV:	
0000D67A 0000 0000                  		dc.w SME_gyvTV_C-SME_gyvTV, SME_gyvTV_12-SME_gyvTV	
0000D67E 0000 0000                  		dc.w SME_gyvTV_18-SME_gyvTV, SME_gyvTV_1E-SME_gyvTV	
0000D682 0000 0000                  		dc.w SME_gyvTV_24-SME_gyvTV, SME_gyvTV_2A-SME_gyvTV	
0000D686 01                         SME_gyvTV_C:	dc.b 1	
0000D687 E807 6000 F8               		dc.b $E8, 7, $60, 0, $F8	
0000D68C 01                         SME_gyvTV_12:	dc.b 1	
0000D68D E807 6008 F8               		dc.b $E8, 7, $60, 8, $F8	
0000D692 01                         SME_gyvTV_18:	dc.b 1	
0000D693 F006 6010 F8               		dc.b $F0, 6, $60, $10, $F8	
0000D698 01                         SME_gyvTV_1E:	dc.b 1	
0000D699 F80D 6016 E8               		dc.b $F8, $D, $60, $16, $E8	
0000D69E 01                         SME_gyvTV_24:	dc.b 1	
0000D69F F80D 601E E8               		dc.b $F8, $D, $60, $1E, $E8	
0000D6A4 01                         SME_gyvTV_2A:	dc.b 1	
0000D6A5 F809 6026 F0               		dc.b $F8, 9, $60, $26, $F0	
0000D6AA                            		even
0000D6AA                            		even
0000D6AA                            		include	"_incObj\30 MZ Large Green Glass Blocks.asm"
0000D6AA                            ; ---------------------------------------------------------------------------
0000D6AA                            ; Object 30 - large green glass blocks (MZ)
0000D6AA                            ; ---------------------------------------------------------------------------
0000D6AA                            
0000D6AA                            GlassBlock:
0000D6AA 7000                       		moveq	#0,d0
0000D6AC 1028 0024                  		move.b	obRoutine(a0),d0
0000D6B0 323B 0000                  		move.w	Glass_Index(pc,d0.w),d1
0000D6B4 4EBB 1000                  		jsr	Glass_Index(pc,d1.w)
0000D6D6 6000 0000                  		bra.w	DisplaySprite
0000D6DA                            ; ===========================================================================
0000D6DA                            
0000D6DA                            Glass_Delete:
0000D6DA 6000 0000                  		bra.w	DeleteObject
0000D6DE                            ; ===========================================================================
0000D6DE 0000                       Glass_Index:	dc.w Glass_Main-Glass_Index
0000D6E0 0000                       		dc.w Glass_Block012-Glass_Index
0000D6E2 0000                       		dc.w Glass_Reflect012-Glass_Index
0000D6E4 0000                       		dc.w Glass_Block34-Glass_Index
0000D6E6 0000                       		dc.w Glass_Reflect34-Glass_Index
0000D6E8                            
0000D6E8 =00000032                  glass_dist:	equ $32		; distance block moves when switch is pressed
0000D6E8 =0000003C                  glass_parent:	equ $3C		; address of parent object
0000D6E8                            
0000D6E8 0200 00                    Glass_Vars1:	dc.b 2,	0, 0	; routine num, y-axis dist from	origin,	frame num
0000D6EB 0400 01                    		dc.b 4,	0, 1
0000D6EE 0600 02                    Glass_Vars2:	dc.b 6,	0, 2
0000D6F1 0800 01                    		dc.b 8,	0, 1
0000D6F4                            ; ===========================================================================
0000D6F4                            
0000D6F4                            Glass_Main:	; Routine 0
0000D6F4 45F9 0000 D6E8             		lea	(Glass_Vars1).l,a2
0000D6FA 7201                       		moveq	#1,d1
0000D6FC 117C 0048 0016             		move.b	#$48,obHeight(a0)
0000D702 0C28 0003 0028             		cmpi.b	#3,obSubtype(a0) ; is object type 0/1/2 ?
0000D708 6500                       		bcs.s	@IsType012	; if yes, branch
0000D70A                            
0000D70A 45F9 0000 D6EE             		lea	(Glass_Vars2).l,a2
0000D710 7201                       		moveq	#1,d1
0000D712 117C 0038 0016             		move.b	#$38,obHeight(a0)
0000D718                            
0000D718                            	@IsType012:
0000D718 2248                       		movea.l	a0,a1
0000D71A 6000                       		bra.s	@Load		; load main object
0000D71C                            ; ===========================================================================
0000D71C                            
0000D71C                            	@Repeat:
0000D71C 6100 0000                  		bsr.w	FindNextFreeObj
0000D720 6600                       		bne.s	@Fail
0000D722                            
0000D722                            @Load:
0000D722 135A 0024                  		move.b	(a2)+,obRoutine(a1)
0000D726 12BC 0000                  		move.b	#id_GlassBlock,0(a1)
0000D72A 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000D730 101A                       		move.b	(a2)+,d0
0000D732 4880                       		ext.w	d0
0000D734 D068 000C                  		add.w	obY(a0),d0
0000D738 3340 000C                  		move.w	d0,obY(a1)
0000D73C 237C 0000 0000 0004        		move.l	#Map_Glass,obMap(a1)
0000D744 337C C38E 0002             		move.w	#$C38E,obGfx(a1)
0000D74A 137C 0004 0001             		move.b	#4,obRender(a1)
0000D750 3369 000C 0030             		move.w	obY(a1),$30(a1)
0000D756 1368 0028 0028             		move.b	obSubtype(a0),obSubtype(a1)
0000D75C 137C 0020 0014             		move.b	#$20,obActWid(a1)
0000D762 337C 0200 0018             		move.w	#$200,obPriority(a1)
0000D768 135A 001A                  		move.b	(a2)+,obFrame(a1)
0000D76C 2348 003C                  		move.l	a0,glass_parent(a1)
0000D770 51C9 FFAA                  		dbf	d1,@Repeat	; repeat once to load "reflection object"
0000D774                            
0000D774 137C 0010 0014             		move.b	#$10,obActWid(a1)
0000D77A 337C 0180 0018             		move.w	#$180,obPriority(a1)
0000D780 5029 0028                  		addq.b	#8,obSubtype(a1)
0000D784 0229 000F 0028             		andi.b	#$F,obSubtype(a1)
0000D78A                            
0000D78A                            	@Fail:
0000D78A 317C 0090 0032             		move.w	#$90,glass_dist(a0)
0000D790 08E8 0004 0001             		bset	#4,obRender(a0)
0000D796                            
0000D796                            Glass_Block012:	; Routine 2
0000D796 6100 0000                  		bsr.w	Glass_Types
0000D79A 323C 002B                  		move.w	#$2B,d1
0000D79E 343C 0048                  		move.w	#$48,d2
0000D7A2 363C 0049                  		move.w	#$49,d3
0000D7A6 3828 0008                  		move.w	obX(a0),d4
0000D7AA 6000 0000                  		bra.w	SolidObject
0000D7AE                            ; ===========================================================================
0000D7AE                            
0000D7AE                            Glass_Reflect012:
0000D7AE                            		; Routine 4
0000D7AE 2268 003C                  		movea.l	$3C(a0),a1
0000D7B2 3169 0032 0032             		move.w	glass_dist(a1),glass_dist(a0)
0000D7B8 6000 0000                  		bra.w	Glass_Types
0000D7BC                            ; ===========================================================================
0000D7BC                            
0000D7BC                            Glass_Block34:	; Routine 6
0000D7BC 6100 0000                  		bsr.w	Glass_Types
0000D7C0 323C 002B                  		move.w	#$2B,d1
0000D7C4 343C 0038                  		move.w	#$38,d2
0000D7C8 363C 0039                  		move.w	#$39,d3
0000D7CC 3828 0008                  		move.w	obX(a0),d4
0000D7D0 6000 0000                  		bra.w	SolidObject
0000D7D4                            ; ===========================================================================
0000D7D4                            
0000D7D4                            Glass_Reflect34:
0000D7D4                            		; Routine 8
0000D7D4 2268 003C                  		movea.l	$3C(a0),a1
0000D7D8 3169 0032 0032             		move.w	glass_dist(a1),glass_dist(a0)
0000D7DE 3169 000C 0030             		move.w	obY(a1),$30(a0)
0000D7E4 6000 0000                  		bra.w	Glass_Types
0000D7E8                            
0000D7E8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000D7E8                            
0000D7E8                            
0000D7E8                            Glass_Types:
0000D7E8 7000                       		moveq	#0,d0
0000D7EA 1028 0028                  		move.b	obSubtype(a0),d0
0000D7EE 0240 0007                  		andi.w	#7,d0
0000D7F2 D040                       		add.w	d0,d0
0000D7F4 323B 0000                  		move.w	Glass_TypeIndex(pc,d0.w),d1
0000D7F8 4EFB 1000                  		jmp	Glass_TypeIndex(pc,d1.w)
0000D7FC                            ; End of function Glass_Types
0000D7FC                            
0000D7FC                            ; ===========================================================================
0000D7FC 0000                       Glass_TypeIndex:dc.w Glass_Type00-Glass_TypeIndex
0000D7FE 0000                       		dc.w Glass_Type01-Glass_TypeIndex
0000D800 0000                       		dc.w Glass_Type02-Glass_TypeIndex
0000D802 0000                       		dc.w Glass_Type03-Glass_TypeIndex
0000D804 0000                       		dc.w Glass_Type04-Glass_TypeIndex
0000D806                            ; ===========================================================================
0000D806                            
0000D806                            Glass_Type00:
0000D806 4E75                       		rts	
0000D808                            ; ===========================================================================
0000D808                            
0000D808                            Glass_Type01:
0000D808 1038 FE70                  		move.b	(v_oscillate+$12).w,d0
0000D80C 323C 0040                  		move.w	#$40,d1
0000D810 6000                       		bra.s	loc_B514
0000D812                            ; ===========================================================================
0000D812                            
0000D812                            Glass_Type02:
0000D812 1038 FE70                  		move.b	(v_oscillate+$12).w,d0
0000D816 323C 0040                  		move.w	#$40,d1
0000D81A 4440                       		neg.w	d0
0000D81C D041                       		add.w	d1,d0
0000D81E                            
0000D81E                            loc_B514:
0000D81E 0828 0003 0028             		btst	#3,obSubtype(a0)
0000D824 6700                       		beq.s	loc_B526
0000D826 4440                       		neg.w	d0
0000D828 D041                       		add.w	d1,d0
0000D82A E208                       		lsr.b	#1,d0
0000D82C 0640 0020                  		addi.w	#$20,d0
0000D830                            
0000D830                            loc_B526:
0000D830 6000 0000                  		bra.w	loc_B5EE
0000D834                            ; ===========================================================================
0000D834                            
0000D834                            Glass_Type03:
0000D834 0828 0003 0028             		btst	#3,obSubtype(a0)
0000D83A 6700                       		beq.s	loc_B53E
0000D83C 1038 FE70                  		move.b	(v_oscillate+$12).w,d0
0000D840 0440 0010                  		subi.w	#$10,d0
0000D844 6000 0000                  		bra.w	loc_B5EE
0000D848                            ; ===========================================================================
0000D848                            
0000D848                            loc_B53E:
0000D848 0828 0003 0022             		btst	#3,obStatus(a0)
0000D84E 6600                       		bne.s	loc_B54E
0000D850 08A8 0000 0034             		bclr	#0,$34(a0)
0000D856 6000                       		bra.s	loc_B582
0000D858                            ; ===========================================================================
0000D858                            
0000D858                            loc_B54E:
0000D858 4A28 0034                  		tst.b	$34(a0)
0000D85C 6600                       		bne.s	loc_B582
0000D85E 117C 0001 0034             		move.b	#1,$34(a0)
0000D864 08E8 0000 0035             		bset	#0,$35(a0)
0000D86A 6700                       		beq.s	loc_B582
0000D86C 08E8 0007 0034             		bset	#7,$34(a0)
0000D872 317C 0010 0036             		move.w	#$10,$36(a0)
0000D878 117C 000A 0038             		move.b	#$A,$38(a0)
0000D87E 0C68 0040 0032             		cmpi.w	#$40,glass_dist(a0)
0000D884 6600                       		bne.s	loc_B582
0000D886 317C 0040 0036             		move.w	#$40,$36(a0)
0000D88C                            
0000D88C                            loc_B582:
0000D88C 4A28 0034                  		tst.b	$34(a0)
0000D890 6A00                       		bpl.s	loc_B5AA
0000D892 4A28 0038                  		tst.b	$38(a0)
0000D896 6700                       		beq.s	loc_B594
0000D898 5328 0038                  		subq.b	#1,$38(a0)
0000D89C 6600                       		bne.s	loc_B5AA
0000D89E                            
0000D89E                            loc_B594:
0000D89E 4A68 0032                  		tst.w	glass_dist(a0)
0000D8A2 6700                       		beq.s	loc_B5A4
0000D8A4 5368 0032                  		subq.w	#1,glass_dist(a0)
0000D8A8 5368 0036                  		subq.w	#1,$36(a0)
0000D8AC 6600                       		bne.s	loc_B5AA
0000D8AE                            
0000D8AE                            loc_B5A4:
0000D8AE 08A8 0007 0034             		bclr	#7,$34(a0)
0000D8B4                            
0000D8B4                            loc_B5AA:
0000D8B4 3028 0032                  		move.w	glass_dist(a0),d0
0000D8B8 6000                       		bra.s	loc_B5EE
0000D8BA                            ; ===========================================================================
0000D8BA                            
0000D8BA                            Glass_Type04:
0000D8BA 0828 0003 0028             		btst	#3,obSubtype(a0)
0000D8C0 6700                       		beq.s	Glass_ChkSwitch
0000D8C2 1038 FE70                  		move.b	(v_oscillate+$12).w,d0
0000D8C6 0440 0010                  		subi.w	#$10,d0
0000D8CA 6000                       		bra.s	loc_B5EE
0000D8CC                            ; ===========================================================================
0000D8CC                            
0000D8CC                            Glass_ChkSwitch:
0000D8CC 4A28 0034                  		tst.b	$34(a0)
0000D8D0 6600                       		bne.s	loc_B5E0
0000D8D2 45F8 F7E0                  		lea	(f_switch).w,a2
0000D8D6 7000                       		moveq	#0,d0
0000D8D8 1028 0028                  		move.b	obSubtype(a0),d0 ; load object type number
0000D8DC E848                       		lsr.w	#4,d0		; read only the	first nybble
0000D8DE 4A32 0000                  		tst.b	(a2,d0.w)	; has switch number d0 been pressed?
0000D8E2 6700                       		beq.s	loc_B5EA	; if not, branch
0000D8E4 117C 0001 0034             		move.b	#1,$34(a0)
0000D8EA                            
0000D8EA                            loc_B5E0:
0000D8EA 4A68 0032                  		tst.w	glass_dist(a0)
0000D8EE 6700                       		beq.s	loc_B5EA
0000D8F0 5568 0032                  		subq.w	#2,glass_dist(a0)
0000D8F4                            
0000D8F4                            loc_B5EA:
0000D8F4 3028 0032                  		move.w	glass_dist(a0),d0
0000D8F8                            
0000D8F8                            loc_B5EE:
0000D8F8 3228 0030                  		move.w	$30(a0),d1
0000D8FC 9240                       		sub.w	d0,d1
0000D8FE 3141 000C                  		move.w	d1,obY(a0)
0000D902 4E75                       		rts	
0000D902 4E75                       		rts	
0000D904                            Map_Glass:	include	"_maps\MZ Large Green Glass Blocks.asm"
0000D904                            ; --------------------------------------------------------------------------------
0000D904                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0000D904                            ; --------------------------------------------------------------------------------
0000D904                            
0000D904                            SME_NEyTf:	
0000D904 0000 0000                  		dc.w SME_NEyTf_6-SME_NEyTf, SME_NEyTf_43-SME_NEyTf	
0000D908 0000                       		dc.w SME_NEyTf_4E-SME_NEyTf	
0000D90A 0C                         SME_NEyTf_6:	dc.b $C	
0000D90B B80C 0000 E0               		dc.b $B8, $C, 0, 0, $E0	
0000D910 B80C 0800 00               		dc.b $B8, $C, 8, 0, 0	
0000D915 C00F 0004 E0               		dc.b $C0, $F, 0, 4, $E0	
0000D91A C00F 0804 00               		dc.b $C0, $F, 8, 4, 0	
0000D91F E00F 0004 E0               		dc.b $E0, $F, 0, 4, $E0	
0000D924 E00F 0804 00               		dc.b $E0, $F, 8, 4, 0	
0000D929 000F 0004 E0               		dc.b 0, $F, 0, 4, $E0	
0000D92E 000F 0804 00               		dc.b 0, $F, 8, 4, 0	
0000D933 200F 0004 E0               		dc.b $20, $F, 0, 4, $E0	
0000D938 200F 0804 00               		dc.b $20, $F, 8, 4, 0	
0000D93D 400C 1000 E0               		dc.b $40, $C, $10, 0, $E0	
0000D942 400C 1800 00               		dc.b $40, $C, $18, 0, 0	
0000D947 02                         SME_NEyTf_43:	dc.b 2	
0000D948 0806 6014 F0               		dc.b 8, 6, $60, $14, $F0	
0000D94D 0006 6014 00               		dc.b 0, 6, $60, $14, 0	
0000D952 0A                         SME_NEyTf_4E:	dc.b $A	
0000D953 C80C 0000 E0               		dc.b $C8, $C, 0, 0, $E0	
0000D958 C80C 0800 00               		dc.b $C8, $C, 8, 0, 0	
0000D95D D00F 0004 E0               		dc.b $D0, $F, 0, 4, $E0	
0000D962 D00F 0804 00               		dc.b $D0, $F, 8, 4, 0	
0000D967 F00F 0004 E0               		dc.b $F0, $F, 0, 4, $E0	
0000D96C F00F 0804 00               		dc.b $F0, $F, 8, 4, 0	
0000D971 100F 0004 E0               		dc.b $10, $F, 0, 4, $E0	
0000D976 100F 0804 00               		dc.b $10, $F, 8, 4, 0	
0000D97B 300C 1000 E0               		dc.b $30, $C, $10, 0, $E0	
0000D980 300C 1800 00               		dc.b $30, $C, $18, 0, 0	
0000D986 00                         		even
0000D986 00                         		even
0000D986                            		include	"_incObj\31 Chained Stompers.asm"
0000D986                            ; ---------------------------------------------------------------------------
0000D986                            ; Object 31 - stomping metal blocks on chains (MZ)
0000D986                            ; ---------------------------------------------------------------------------
0000D986                            
0000D986                            ChainStomp:
0000D986 7000                       		moveq	#0,d0
0000D988 1028 0024                  		move.b	obRoutine(a0),d0
0000D98C 323B 0000                  		move.w	CStom_Index(pc,d0.w),d1
0000D990 4EFB 1000                  		jmp	CStom_Index(pc,d1.w)
0000D994                            ; ===========================================================================
0000D994 0000                       CStom_Index:	dc.w CStom_Main-CStom_Index
0000D996 0000                       		dc.w loc_B798-CStom_Index
0000D998 0000                       		dc.w loc_B7FE-CStom_Index
0000D99A 0000                       		dc.w CStom_Display2-CStom_Index
0000D99C 0000                       		dc.w loc_B7E2-CStom_Index
0000D99E                            
0000D99E =0000003A                  CStom_switch:	equ $3A			; switch number for the current stomper
0000D99E                            
0000D99E 0000                       CStom_SwchNums:	dc.b 0,	0		; switch number, obj number
0000D9A0 0100                       		dc.b 1,	0
0000D9A2                            
0000D9A2 0200 00                    CStom_Var:	dc.b 2,	0, 0		; routine number, y-position, frame number
0000D9A5 041C 01                    		dc.b 4,	$1C, 1
0000D9A8 08CC 03                    		dc.b 8,	$CC, 3
0000D9AB 06F0 02                    		dc.b 6,	$F0, 2
0000D9AE                            
0000D9AE 7000 A000                  word_B6A4:	dc.w $7000, $A000
0000D9B2 5000 7800                  		dc.w $5000, $7800
0000D9B6 3800 5800                  		dc.w $3800, $5800
0000D9BA B800                       		dc.w $B800
0000D9BC                            ; ===========================================================================
0000D9BC                            
0000D9BC                            CStom_Main:	; Routine 0
0000D9BC 7000                       		moveq	#0,d0
0000D9BE 1028 0028                  		move.b	obSubtype(a0),d0
0000D9C2 6A00                       		bpl.s	loc_B6CE
0000D9C4 0240 007F                  		andi.w	#$7F,d0
0000D9C8 D040                       		add.w	d0,d0
0000D9CA 45FB 00D2                  		lea	CStom_SwchNums(pc,d0.w),a2
0000D9CE 115A 003A                  		move.b	(a2)+,CStom_switch(a0)
0000D9D2 101A                       		move.b	(a2)+,d0
0000D9D4 1140 0028                  		move.b	d0,obSubtype(a0)
0000D9D8                            
0000D9D8                            loc_B6CE:
0000D9D8 0200 000F                  		andi.b	#$F,d0
0000D9DC D040                       		add.w	d0,d0
0000D9DE 343B 00CE                  		move.w	word_B6A4(pc,d0.w),d2
0000D9E2 4A40                       		tst.w	d0
0000D9E4 6600                       		bne.s	loc_B6E0
0000D9E6 3142 0032                  		move.w	d2,$32(a0)
0000D9EA                            
0000D9EA                            loc_B6E0:
0000D9EA 45F9 0000 D9A2             		lea	(CStom_Var).l,a2
0000D9F0 2248                       		movea.l	a0,a1
0000D9F2 7203                       		moveq	#3,d1
0000D9F4 6000                       		bra.s	CStom_MakeStomper
0000D9F6                            ; ===========================================================================
0000D9F6                            
0000D9F6                            CStom_Loop:
0000D9F6 6100 0000                  		bsr.w	FindNextFreeObj
0000D9FA 6600 0000                  		bne.w	CStom_SetSize
0000D9FE                            
0000D9FE                            CStom_MakeStomper:
0000D9FE 135A 0024                  		move.b	(a2)+,obRoutine(a1)
0000DA02 12BC 0000                  		move.b	#id_ChainStomp,0(a1)
0000DA06 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000DA0C 101A                       		move.b	(a2)+,d0
0000DA0E 4880                       		ext.w	d0
0000DA10 D068 000C                  		add.w	obY(a0),d0
0000DA14 3340 000C                  		move.w	d0,obY(a1)
0000DA18 237C 0000 0000 0004        		move.l	#Map_CStom,obMap(a1)
0000DA20 337C 0300 0002             		move.w	#$300,obGfx(a1)
0000DA26 137C 0004 0001             		move.b	#4,obRender(a1)
0000DA2C 3369 000C 0030             		move.w	obY(a1),$30(a1)
0000DA32 1368 0028 0028             		move.b	obSubtype(a0),obSubtype(a1)
0000DA38 137C 0010 0014             		move.b	#$10,obActWid(a1)
0000DA3E 3342 0034                  		move.w	d2,$34(a1)
0000DA42 337C 0200 0018             		move.w	#$200,obPriority(a1)
0000DA48 135A 001A                  		move.b	(a2)+,obFrame(a1)
0000DA4C 0C29 0001 001A             		cmpi.b	#1,obFrame(a1)
0000DA52 6600                       		bne.s	loc_B76A
0000DA54 5341                       		subq.w	#1,d1
0000DA56 1028 0028                  		move.b	obSubtype(a0),d0
0000DA5A 0240 00F0                  		andi.w	#$F0,d0
0000DA5E 0C40 0020                  		cmpi.w	#$20,d0
0000DA62 679A                       		beq.s	CStom_MakeStomper
0000DA64 137C 0038 0014             		move.b	#$38,obActWid(a1)
0000DA6A 137C 0090 0020             		move.b	#$90,obColType(a1)
0000DA70 5241                       		addq.w	#1,d1
0000DA72                            
0000DA72                            loc_B76A:
0000DA72 2348 003C                  		move.l	a0,$3C(a1)
0000DA76 51C9 FF7E                  		dbf	d1,CStom_Loop
0000DA7A                            
0000DA7A 337C 0180 0018             		move.w	#$180,obPriority(a1)
0000DA80                            
0000DA80                            CStom_SetSize:
0000DA80 7000                       		moveq	#0,d0
0000DA82 1028 0028                  		move.b	obSubtype(a0),d0
0000DA86 E648                       		lsr.w	#3,d0
0000DA88 0200 000E                  		andi.b	#$E,d0
0000DA8C 45FB 0000                  		lea	CStom_Var2(pc,d0.w),a2
0000DA90 115A 0014                  		move.b	(a2)+,obActWid(a0)
0000DA94 115A 001A                  		move.b	(a2)+,obFrame(a0)
0000DA98 6000                       		bra.s	loc_B798
0000DA9A                            ; ===========================================================================
0000DA9A 3800                       CStom_Var2:	dc.b $38, 0		; width, frame number
0000DA9C 3009                       		dc.b $30, 9
0000DA9E 100A                       		dc.b $10, $A
0000DAA0                            ; ===========================================================================
0000DAA0                            
0000DAA0                            loc_B798:	; Routine 2
0000DAA0 6100 0000                  		bsr.w	CStom_Types
0000DAA4 31E8 000C F7A4             		move.w	obY(a0),(v_obj31ypos).w
0000DAAA 7200                       		moveq	#0,d1
0000DAAC 1228 0014                  		move.b	obActWid(a0),d1
0000DAB0 0641 000B                  		addi.w	#$B,d1
0000DAB4 343C 000C                  		move.w	#$C,d2
0000DAB8 363C 000D                  		move.w	#$D,d3
0000DABC 3828 0008                  		move.w	obX(a0),d4
0000DAC0 6100 0000                  		bsr.w	SolidObject
0000DAC4 0828 0003 0022             		btst	#3,obStatus(a0)
0000DACA 6700                       		beq.s	CStom_Display
0000DACC 0C28 0010 0032             		cmpi.b	#$10,$32(a0)
0000DAD2 6400                       		bcc.s	CStom_Display
0000DAD4 2448                       		movea.l	a0,a2
0000DAD6 41F8 D000                  		lea	(v_player).w,a0
0000DADA 4EB9 0000 0000             		jsr	(KillSonic).l
0000DAE0 204A                       		movea.l	a2,a0
0000DAE2                            
0000DAE2                            CStom_Display:
0000DAE2 6100 0000                  		bsr.w	DisplaySprite
0000DAE6 6000 0000                  		bra.w	CStom_ChkDel
0000DAEA                            ; ===========================================================================
0000DAEA                            
0000DAEA                            loc_B7E2:	; Routine 8
0000DAEA 117C 0080 0016             		move.b	#$80,obHeight(a0)
0000DAF0 08E8 0004 0001             		bset	#4,obRender(a0)
0000DAF6 2268 003C                  		movea.l	$3C(a0),a1
0000DAFA 1029 0032                  		move.b	$32(a1),d0
0000DAFE EA08                       		lsr.b	#5,d0
0000DB00 5600                       		addq.b	#3,d0
0000DB02 1140 001A                  		move.b	d0,obFrame(a0)
0000DB06                            
0000DB06                            loc_B7FE:	; Routine 4
0000DB06 2268 003C                  		movea.l	$3C(a0),a1
0000DB0A 7000                       		moveq	#0,d0
0000DB0C 1029 0032                  		move.b	$32(a1),d0
0000DB10 D068 0030                  		add.w	$30(a0),d0
0000DB14 3140 000C                  		move.w	d0,obY(a0)
0000DB18                            
0000DB18                            CStom_Display2:	; Routine 6
0000DB18 6100 0000                  		bsr.w	DisplaySprite
0000DB1C                            
0000DB1C                            CStom_ChkDel:
0000DB3A 4E75                       		rts	
0000DB3C                            ; ===========================================================================
0000DB3C                            
0000DB3C                            CStom_Types:
0000DB3C 1028 0028                  		move.b	obSubtype(a0),d0
0000DB40 0240 000F                  		andi.w	#$F,d0
0000DB44 D040                       		add.w	d0,d0
0000DB46 323B 0000                  		move.w	CStom_TypeIndex(pc,d0.w),d1
0000DB4A 4EFB 1000                  		jmp	CStom_TypeIndex(pc,d1.w)
0000DB4E                            ; ===========================================================================
0000DB4E 0000                       CStom_TypeIndex:dc.w CStom_Type00-CStom_TypeIndex
0000DB50 0000                       		dc.w CStom_Type01-CStom_TypeIndex
0000DB52 0000                       		dc.w CStom_Type01-CStom_TypeIndex
0000DB54 0000                       		dc.w CStom_Type03-CStom_TypeIndex
0000DB56 0000                       		dc.w CStom_Type01-CStom_TypeIndex
0000DB58 0000                       		dc.w CStom_Type03-CStom_TypeIndex
0000DB5A 0000                       		dc.w CStom_Type01-CStom_TypeIndex
0000DB5C                            ; ===========================================================================
0000DB5C                            
0000DB5C                            CStom_Type00:
0000DB5C 45F8 F7E0                  		lea	(f_switch).w,a2	; load switch statuses
0000DB60 7000                       		moveq	#0,d0
0000DB62 1028 003A                  		move.b	CStom_switch(a0),d0 ; move number 0 or 1 to d0
0000DB66 4A32 0000                  		tst.b	(a2,d0.w)	; has switch (d0) been pressed?
0000DB6A 6700                       		beq.s	loc_B8A8	; if not, branch
0000DB6C 4A78 F7A4                  		tst.w	(v_obj31ypos).w
0000DB70 6A00                       		bpl.s	loc_B872
0000DB72 0C28 0010 0032             		cmpi.b	#$10,$32(a0)
0000DB78 6700                       		beq.s	loc_B8A0
0000DB7A                            
0000DB7A                            loc_B872:
0000DB7A 4A68 0032                  		tst.w	$32(a0)
0000DB7E 6700                       		beq.s	loc_B8A0
0000DB80 1038 FE0F                  		move.b	(v_vbla_byte).w,d0
0000DB84 0200 000F                  		andi.b	#$F,d0
0000DB88 6600                       		bne.s	loc_B892
0000DB8A 4A28 0001                  		tst.b	1(a0)
0000DB8E 6A00                       		bpl.s	loc_B892
0000DB9A                            
0000DB9A                            loc_B892:
0000DB9A 0468 0080 0032             		subi.w	#$80,$32(a0)
0000DBA0 6400                       		bcc.s	CStom_Restart
0000DBA2 317C 0000 0032             		move.w	#0,$32(a0)
0000DBA8                            
0000DBA8                            loc_B8A0:
0000DBA8 317C 0000 0012             		move.w	#0,obVelY(a0)
0000DBAE 6000                       		bra.s	CStom_Restart
0000DBB0                            ; ===========================================================================
0000DBB0                            
0000DBB0                            loc_B8A8:
0000DBB0 3228 0034                  		move.w	$34(a0),d1
0000DBB4 B268 0032                  		cmp.w	$32(a0),d1
0000DBB8 6700                       		beq.s	CStom_Restart
0000DBBA 3028 0012                  		move.w	obVelY(a0),d0
0000DBBE 0668 0070 0012             		addi.w	#$70,obVelY(a0)	; make object fall
0000DBC4 D168 0032                  		add.w	d0,$32(a0)
0000DBC8 B268 0032                  		cmp.w	$32(a0),d1
0000DBCC 6200                       		bhi.s	CStom_Restart
0000DBCE 3141 0032                  		move.w	d1,$32(a0)
0000DBD2 317C 0000 0012             		move.w	#0,obVelY(a0)	; stop object falling
0000DBD8 4A28 0001                  		tst.b	obRender(a0)
0000DBDC 6A00                       		bpl.s	CStom_Restart
0000DBE8                            
0000DBE8                            CStom_Restart:
0000DBE8 7000                       		moveq	#0,d0
0000DBEA 1028 0032                  		move.b	$32(a0),d0
0000DBEE D068 0030                  		add.w	$30(a0),d0
0000DBF2 3140 000C                  		move.w	d0,obY(a0)
0000DBF6 4E75                       		rts	
0000DBF8                            ; ===========================================================================
0000DBF8                            
0000DBF8                            CStom_Type01:
0000DBF8 4A68 0036                  		tst.w	$36(a0)
0000DBFC 6700                       		beq.s	loc_B938
0000DBFE 4A68 0038                  		tst.w	$38(a0)
0000DC02 6700                       		beq.s	loc_B902
0000DC04 5368 0038                  		subq.w	#1,$38(a0)
0000DC08 6000                       		bra.s	loc_B97C
0000DC0A                            ; ===========================================================================
0000DC0A                            
0000DC0A                            loc_B902:
0000DC0A 1038 FE0F                  		move.b	(v_vbla_byte).w,d0
0000DC0E 0200 000F                  		andi.b	#$F,d0
0000DC12 6600                       		bne.s	loc_B91C
0000DC14 4A28 0001                  		tst.b	obRender(a0)
0000DC18 6A00                       		bpl.s	loc_B91C
0000DC24                            
0000DC24                            loc_B91C:
0000DC24 0468 0080 0032             		subi.w	#$80,$32(a0)
0000DC2A 6400                       		bcc.s	loc_B97C
0000DC2C 317C 0000 0032             		move.w	#0,$32(a0)
0000DC32 317C 0000 0012             		move.w	#0,obVelY(a0)
0000DC38 317C 0000 0036             		move.w	#0,$36(a0)
0000DC3E 6000                       		bra.s	loc_B97C
0000DC40                            ; ===========================================================================
0000DC40                            
0000DC40                            loc_B938:
0000DC40 3228 0034                  		move.w	$34(a0),d1
0000DC44 B268 0032                  		cmp.w	$32(a0),d1
0000DC48 6700                       		beq.s	loc_B97C
0000DC4A 3028 0012                  		move.w	obVelY(a0),d0
0000DC4E 0668 0070 0012             		addi.w	#$70,obVelY(a0)	; make object fall
0000DC54 D168 0032                  		add.w	d0,$32(a0)
0000DC58 B268 0032                  		cmp.w	$32(a0),d1
0000DC5C 6200                       		bhi.s	loc_B97C
0000DC5E 3141 0032                  		move.w	d1,$32(a0)
0000DC62 317C 0000 0012             		move.w	#0,obVelY(a0)	; stop object falling
0000DC68 317C 0001 0036             		move.w	#1,$36(a0)
0000DC6E 317C 003C 0038             		move.w	#$3C,$38(a0)
0000DC74 4A28 0001                  		tst.b	obRender(a0)
0000DC78 6A00                       		bpl.s	loc_B97C
0000DC84                            
0000DC84                            loc_B97C:
0000DC84 6000 FF62                  		bra.w	CStom_Restart
0000DC88                            ; ===========================================================================
0000DC88                            
0000DC88                            CStom_Type03:
0000DC88 3038 D008                  		move.w	(v_player+obX).w,d0
0000DC8C 9068 0008                  		sub.w	obX(a0),d0
0000DC90 6400                       		bcc.s	loc_B98C
0000DC92 4440                       		neg.w	d0
0000DC94                            
0000DC94                            loc_B98C:
0000DC94 0C40 0090                  		cmpi.w	#$90,d0
0000DC98 6400                       		bcc.s	loc_B996
0000DC9A 5228 0028                  		addq.b	#1,obSubtype(a0)
0000DC9E                            
0000DC9E                            loc_B996:
0000DC9E 6000 FF48                  		bra.w	CStom_Restart
0000DC9E 6000 FF48                  		bra.w	CStom_Restart
0000DCA2                            		include	"_incObj\45 Sideways Stomper.asm"
0000DCA2                            ; ---------------------------------------------------------------------------
0000DCA2                            ; Object 45 - spiked metal block from beta version (MZ)
0000DCA2                            ; ---------------------------------------------------------------------------
0000DCA2                            
0000DCA2                            SideStomp:
0000DCA2 7000                       		moveq	#0,d0
0000DCA4 1028 0024                  		move.b	obRoutine(a0),d0
0000DCA8 323B 0000                  		move.w	SStom_Index(pc,d0.w),d1
0000DCAC 4EFB 1000                  		jmp	SStom_Index(pc,d1.w)
0000DCB0                            ; ===========================================================================
0000DCB0 0000                       SStom_Index:	dc.w SStom_Main-SStom_Index
0000DCB2 0000                       		dc.w SStom_Solid-SStom_Index
0000DCB4 0000                       		dc.w loc_BA8E-SStom_Index
0000DCB6 0000                       		dc.w SStom_Display-SStom_Index
0000DCB8 0000                       		dc.w SStom_Pole-SStom_Index
0000DCBA                            
0000DCBA                            		;	routine		frame
0000DCBA                            		;		 xpos
0000DCBA 0204 00                    SStom_Var:	dc.b	2,  	 4,	0	; main block
0000DCBD 04E4 01                    		dc.b	4,	-$1C,	1	; spikes
0000DCC0 0834 03                    		dc.b	8,	 $34,	3	; pole
0000DCC3 0628 02                    		dc.b	6,	 $28,	2	; wall bracket
0000DCC6                            
0000DCC6                            ;word_B9BE:	; Note that this indicates three subtypes
0000DCC6 3800                       SStom_Len:	dc.w $3800	; short
0000DCC8 A000                       		dc.w $A000	; long
0000DCCA 5000                       		dc.w $5000	; medium
0000DCCC                            ; ===========================================================================
0000DCCC                            
0000DCCC                            SStom_Main:	; Routine 0
0000DCCC 7000                       		moveq	#0,d0
0000DCCE 1028 0028                  		move.b	obSubtype(a0),d0
0000DCD2 D040                       		add.w	d0,d0
0000DCD4 343B 00F0                  		move.w	SStom_Len(pc,d0.w),d2
0000DCD8 45F9 0000 DCBA             		lea	(SStom_Var).l,a2
0000DCDE 2248                       		movea.l	a0,a1
0000DCE0 7203                       		moveq	#3,d1
0000DCE2 6000                       		bra.s	@load
0000DCE4                            
0000DCE4                            	@loop:
0000DCE4 6100 0000                  		bsr.w	FindNextFreeObj
0000DCE8 6600                       		bne.s	@fail
0000DCEA                            
0000DCEA                            	@load:
0000DCEA 135A 0024                  		move.b	(a2)+,obRoutine(a1)
0000DCEE 12BC 0000                  		move.b	#id_SideStomp,0(a1)
0000DCF2 3368 000C 000C             		move.w	obY(a0),obY(a1)
0000DCF8 101A                       		move.b	(a2)+,d0
0000DCFA 4880                       		ext.w	d0
0000DCFC D068 0008                  		add.w	obX(a0),d0
0000DD00 3340 0008                  		move.w	d0,obX(a1)
0000DD04 237C 0000 0000 0004        		move.l	#Map_SStom,obMap(a1)
0000DD0C 337C 0300 0002             		move.w	#$300,obGfx(a1)
0000DD12 137C 0004 0001             		move.b	#4,obRender(a1)
0000DD18 3369 0008 0030             		move.w	obX(a1),$30(a1)
0000DD1E 3368 0008 003A             		move.w	obX(a0),$3A(a1)
0000DD24 1368 0028 0028             		move.b	obSubtype(a0),obSubtype(a1)
0000DD2A 137C 0020 0014             		move.b	#$20,obActWid(a1)
0000DD30 3342 0034                  		move.w	d2,$34(a1)
0000DD34 337C 0200 0018             		move.w	#$200,obPriority(a1)
0000DD3A 0C12 0001                  		cmpi.b	#1,(a2)		; is subobject spikes?
0000DD3E 6600                       		bne.s	@notspikes	; if not, branch
0000DD40 137C 0091 0020             		move.b	#$91,obColType(a1) ; use harmful collision type
0000DD46                            
0000DD46                            	@notspikes:
0000DD46 135A 001A                  		move.b	(a2)+,obFrame(a1)
0000DD4A 2348 003C                  		move.l	a0,$3C(a1)
0000DD4E 51C9 FF94                  		dbf	d1,@loop	; repeat 3 times
0000DD52                            
0000DD52 337C 0180 0018             		move.w	#$180,obPriority(a1)
0000DD58                            
0000DD58                            	@fail:
0000DD58 117C 0010 0014             		move.b	#$10,obActWid(a0)
0000DD5E                            
0000DD5E                            SStom_Solid:	; Routine 2
0000DD5E 3F28 0008                  		move.w	obX(a0),-(sp)
0000DD62 6100 0000                  		bsr.w	SStom_Move
0000DD66 323C 0017                  		move.w	#$17,d1
0000DD6A 343C 0020                  		move.w	#$20,d2
0000DD6E 363C 0020                  		move.w	#$20,d3
0000DD72 381F                       		move.w	(sp)+,d4
0000DD74 6100 0000                  		bsr.w	SolidObject
0000DD78 6100 0000                  		bsr.w	DisplaySprite
0000DD7C 6000 0000                  		bra.w	SStom_ChkDel
0000DD80                            ; ===========================================================================
0000DD80                            
0000DD80                            SStom_Pole:	; Routine 8
0000DD80 2268 003C                  		movea.l	$3C(a0),a1
0000DD84 1029 0032                  		move.b	$32(a1),d0
0000DD88 0600 0010                  		addi.b	#$10,d0
0000DD8C EA08                       		lsr.b	#5,d0
0000DD8E 5600                       		addq.b	#3,d0
0000DD90 1140 001A                  		move.b	d0,obFrame(a0)
0000DD94                            
0000DD94                            loc_BA8E:	; Routine 4
0000DD94 2268 003C                  		movea.l	$3C(a0),a1
0000DD98 7000                       		moveq	#0,d0
0000DD9A 1029 0032                  		move.b	$32(a1),d0
0000DD9E 4440                       		neg.w	d0
0000DDA0 D068 0030                  		add.w	$30(a0),d0
0000DDA4 3140 0008                  		move.w	d0,obX(a0)
0000DDA8                            
0000DDA8                            SStom_Display:	; Routine 6
0000DDA8 6100 0000                  		bsr.w	DisplaySprite
0000DDAC                            
0000DDAC                            SStom_ChkDel:
0000DDCA 4E75                       		rts	
0000DDCC                            
0000DDCC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DDCC                            
0000DDCC                            
0000DDCC                            SStom_Move:
0000DDCC 7000                       		moveq	#0,d0
0000DDCE 1028 0028                  		move.b	obSubtype(a0),d0
0000DDD2 D040                       		add.w	d0,d0
0000DDD4 323B 0000                  		move.w	off_BAD6(pc,d0.w),d1
0000DDD8 4EFB 1000                  		jmp	off_BAD6(pc,d1.w)
0000DDDC                            ; End of function SStom_Move
0000DDDC                            
0000DDDC                            ; ===========================================================================
0000DDDC                            		; This indicates only two subtypes... that do the same thing
0000DDDC                            		; Compare to SStom_Len. This breaks subtype 02
0000DDDC 0000                       off_BAD6:	dc.w loc_BADA-off_BAD6
0000DDDE 0000                       		dc.w loc_BADA-off_BAD6
0000DDE0                            ; ===========================================================================
0000DDE0                            
0000DDE0                            loc_BADA:
0000DDE0 4A68 0036                  		tst.w	$36(a0)
0000DDE4 6700                       		beq.s	loc_BB08
0000DDE6 4A68 0038                  		tst.w	$38(a0)
0000DDEA 6700                       		beq.s	loc_BAEC
0000DDEC 5368 0038                  		subq.w	#1,$38(a0)
0000DDF0 6000                       		bra.s	loc_BB3C
0000DDF2                            ; ===========================================================================
0000DDF2                            
0000DDF2                            loc_BAEC:
0000DDF2 0468 0080 0032             		subi.w	#$80,$32(a0)
0000DDF8 6400                       		bcc.s	loc_BB3C
0000DDFA 317C 0000 0032             		move.w	#0,$32(a0)
0000DE00 317C 0000 0010             		move.w	#0,obVelX(a0)
0000DE06 317C 0000 0036             		move.w	#0,$36(a0)
0000DE0C 6000                       		bra.s	loc_BB3C
0000DE0E                            ; ===========================================================================
0000DE0E                            
0000DE0E                            loc_BB08:
0000DE0E 3228 0034                  		move.w	$34(a0),d1
0000DE12 B268 0032                  		cmp.w	$32(a0),d1
0000DE16 6700                       		beq.s	loc_BB3C
0000DE18 3028 0010                  		move.w	obVelX(a0),d0
0000DE1C 0668 0070 0010             		addi.w	#$70,obVelX(a0)
0000DE22 D168 0032                  		add.w	d0,$32(a0)
0000DE26 B268 0032                  		cmp.w	$32(a0),d1
0000DE2A 6200                       		bhi.s	loc_BB3C
0000DE2C 3141 0032                  		move.w	d1,$32(a0)
0000DE30 317C 0000 0010             		move.w	#0,obVelX(a0)
0000DE36 317C 0001 0036             		move.w	#1,$36(a0)
0000DE3C 317C 003C 0038             		move.w	#$3C,$38(a0)
0000DE42                            
0000DE42                            loc_BB3C:
0000DE42 7000                       		moveq	#0,d0
0000DE44 1028 0032                  		move.b	$32(a0),d0
0000DE48 4440                       		neg.w	d0
0000DE4A D068 0030                  		add.w	$30(a0),d0
0000DE4E 3140 0008                  		move.w	d0,obX(a0)
0000DE52 4E75                       		rts	
0000DE52 4E75                       		rts	
0000DE54                            Map_CStom:	include	"_maps\Chained Stompers.asm"
0000DE54                            ; ---------------------------------------------------------------------------
0000DE54                            ; Sprite mappings - metal stomping blocks on chains (MZ)
0000DE54                            ; ---------------------------------------------------------------------------
0000DE54                            Map_CStom_internal:
0000DE54 0000                       		dc.w @wideblock-Map_CStom_internal
0000DE56 0000                       		dc.w @spikes-Map_CStom_internal
0000DE58 0000                       		dc.w @ceiling-Map_CStom_internal
0000DE5A 0000                       		dc.w @chain1-Map_CStom_internal
0000DE5C 0000                       		dc.w @chain2-Map_CStom_internal
0000DE5E 0000                       		dc.w @chain3-Map_CStom_internal
0000DE60 0000                       		dc.w @chain4-Map_CStom_internal
0000DE62 0000                       		dc.w @chain5-Map_CStom_internal
0000DE64 0000                       		dc.w @chain5-Map_CStom_internal
0000DE66 0000                       		dc.w @mediumblock-Map_CStom_internal
0000DE68 0000                       		dc.w @smallblock-Map_CStom_internal
0000DE6A 05                         @wideblock:	dc.b 5
0000DE6B F406 0000 C8               		dc.b $F4, 6, 0,	0, $C8
0000DE70 F40A 0006 D8               		dc.b $F4, $A, 0, 6, $D8
0000DE75 EC0F 000F F0               		dc.b $EC, $F, 0, $F, $F0
0000DE7A F40A 0806 10               		dc.b $F4, $A, 8, 6, $10
0000DE7F F406 0800 28               		dc.b $F4, 6, 8,	0, $28
0000DE84 05                         @spikes:	dc.b 5
0000DE85 F003 121F D4               		dc.b $F0, 3, $12, $1F, $D4
0000DE8A F003 121F E8               		dc.b $F0, 3, $12, $1F, $E8
0000DE8F F003 121F FC               		dc.b $F0, 3, $12, $1F, $FC
0000DE94 F003 121F 10               		dc.b $F0, 3, $12, $1F, $10
0000DE99 F003 121F 24               		dc.b $F0, 3, $12, $1F, $24
0000DE9E 01                         @ceiling:	dc.b 1
0000DE9F DC0F 100F F0               		dc.b $DC, $F, $10, $F, $F0
0000DEA4 02                         @chain1:	dc.b 2
0000DEA5 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000DEAA 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000DEAF 04                         @chain2:	dc.b 4
0000DEB0 E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000DEB5 F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000DEBA 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000DEBF 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000DEC4 06                         @chain3:	dc.b 6
0000DEC5 C001 003F FC               		dc.b $C0, 1, 0,	$3F, $FC
0000DECA D001 003F FC               		dc.b $D0, 1, 0,	$3F, $FC
0000DECF E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000DED4 F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000DED9 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000DEDE 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000DEE3 08                         @chain4:	dc.b 8
0000DEE4 A001 003F FC               		dc.b $A0, 1, 0,	$3F, $FC
0000DEE9 B001 003F FC               		dc.b $B0, 1, 0,	$3F, $FC
0000DEEE C001 003F FC               		dc.b $C0, 1, 0,	$3F, $FC
0000DEF3 D001 003F FC               		dc.b $D0, 1, 0,	$3F, $FC
0000DEF8 E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000DEFD F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000DF02 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000DF07 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000DF0C 0A                         @chain5:	dc.b $A
0000DF0D 8001 003F FC               		dc.b $80, 1, 0,	$3F, $FC
0000DF12 9001 003F FC               		dc.b $90, 1, 0,	$3F, $FC
0000DF17 A001 003F FC               		dc.b $A0, 1, 0,	$3F, $FC
0000DF1C B001 003F FC               		dc.b $B0, 1, 0,	$3F, $FC
0000DF21 C001 003F FC               		dc.b $C0, 1, 0,	$3F, $FC
0000DF26 D001 003F FC               		dc.b $D0, 1, 0,	$3F, $FC
0000DF2B E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000DF30 F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000DF35 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000DF3A 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000DF3F 05                         @mediumblock:	dc.b 5
0000DF40 F406 0000 D0               		dc.b $F4, 6, 0,	0, $D0
0000DF45 F40A 0006 E0               		dc.b $F4, $A, 0, 6, $E0
0000DF4A F40A 0806 08               		dc.b $F4, $A, 8, 6, 8
0000DF4F F406 0800 20               		dc.b $F4, 6, 8,	0, $20
0000DF54 EC0F 000F F0               		dc.b $EC, $F, 0, $F, $F0
0000DF59 01                         @smallblock:	dc.b 1
0000DF5A EC0F 002F F0               		dc.b $EC, $F, 0, $2F, $F0
0000DF60 00                         		even
0000DF60 00                         		even
0000DF60                            Map_SStom:	include	"_maps\Sideways Stomper.asm"
0000DF60                            ; ---------------------------------------------------------------------------
0000DF60                            ; Sprite mappings - spiked metal block from beta version (MZ)
0000DF60                            ; ---------------------------------------------------------------------------
0000DF60                            Map_SStom_internal:
0000DF60 0000                       		dc.w @block-Map_SStom_internal
0000DF62 0000                       		dc.w @spikes-Map_SStom_internal
0000DF64 0000                       		dc.w @wallbracket-Map_SStom_internal
0000DF66 0000                       		dc.w @pole1-Map_SStom_internal
0000DF68 0000                       		dc.w @pole2-Map_SStom_internal
0000DF6A 0000                       		dc.w @pole3-Map_SStom_internal
0000DF6C 0000                       		dc.w @pole4-Map_SStom_internal
0000DF6E 0000                       		dc.w @pole5-Map_SStom_internal
0000DF70 0000                       		dc.w @pole5-Map_SStom_internal
0000DF72 03                         @block:		dc.b 3
0000DF73 E00B 001F F4               		dc.b $E0, $B, 0, $1F, $F4 ; main metal block
0000DF78 000B 101F F4               		dc.b 0,	$B, $10, $1F, $F4
0000DF7D F003 002B 0C               		dc.b $F0, 3, 0,	$2B, $C
0000DF82 03                         @spikes:	dc.b 3
0000DF83 E80C 121B F0               		dc.b $E8, $C, $12, $1B,	$F0 ; three spikes
0000DF88 FC0C 121B F0               		dc.b $FC, $C, $12, $1B,	$F0
0000DF8D 100C 121B F0               		dc.b $10, $C, $12, $1B,	$F0
0000DF92 01                         @wallbracket:	dc.b 1
0000DF93 F003 082B FC               		dc.b $F0, 3, 8,	$2B, $FC ; thing holding it to the wall
0000DF98 02                         @pole1:		dc.b 2
0000DF99 F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0 ; poles of various lengths
0000DF9E F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000DFA3 04                         @pole2:		dc.b 4
0000DFA4 F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000DFA9 F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000DFAE F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000DFB3 F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000DFB8 06                         @pole3:		dc.b 6
0000DFB9 F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000DFBE F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000DFC3 F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000DFC8 F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000DFCD F805 0041 20               		dc.b $F8, 5, 0,	$41, $20
0000DFD2 F805 0041 30               		dc.b $F8, 5, 0,	$41, $30
0000DFD7 08                         @pole4:		dc.b 8
0000DFD8 F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000DFDD F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000DFE2 F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000DFE7 F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000DFEC F805 0041 20               		dc.b $F8, 5, 0,	$41, $20
0000DFF1 F805 0041 30               		dc.b $F8, 5, 0,	$41, $30
0000DFF6 F805 0041 40               		dc.b $F8, 5, 0,	$41, $40
0000DFFB F805 0041 50               		dc.b $F8, 5, 0,	$41, $50
0000E000 08                         @pole5:		dc.b 8		; Incorrect: this should be $A
0000E001 F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000E006 F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000E00B F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000E010 F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000E015 F805 0041 20               		dc.b $F8, 5, 0,	$41, $20
0000E01A F805 0041 30               		dc.b $F8, 5, 0,	$41, $30
0000E01F F805 0041 40               		dc.b $F8, 5, 0,	$41, $40
0000E024 F805 0041 50               		dc.b $F8, 5, 0,	$41, $50
0000E029 F805 0041 60               		dc.b $F8, 5, 0,	$41, $60
0000E02E F805 0041 70               		dc.b $F8, 5, 0,	$41, $70
0000E033                            		; @pole6 should be here, but it isn't...
0000E034 00                         		even
0000E034 00                         		even
0000E034                            
0000E034                            		include	"_incObj\32 Button.asm"
0000E034                            ; ---------------------------------------------------------------------------
0000E034                            ; Object 32 - buttons (MZ, SYZ, LZ, SBZ)
0000E034                            ; ---------------------------------------------------------------------------
0000E034                            
0000E034                            Button:
0000E034 7000                       		moveq	#0,d0
0000E036 1028 0024                  		move.b	obRoutine(a0),d0
0000E03A 323B 0000                  		move.w	But_Index(pc,d0.w),d1
0000E03E 4EFB 1000                  		jmp	But_Index(pc,d1.w)
0000E042                            ; ===========================================================================
0000E042 0000                       But_Index:	dc.w But_Main-But_Index
0000E044 0000                       		dc.w But_Pressed-But_Index
0000E046                            ; ===========================================================================
0000E046                            
0000E046                            But_Main:	; Routine 0
0000E046 5428 0024                  		addq.b	#2,obRoutine(a0)
0000E04A 217C 0000 0000 0004        		move.l	#Map_But,obMap(a0)
0000E052 317C 4513 0002             		move.w	#$4513,obGfx(a0) ; MZ specific code
0000E058 0C38 0002 FE10             		cmpi.b	#id_MZ,(v_zone).w ; is level Marble Zone?
0000E05E 6700                       		beq.s	But_IsMZ	; if yes, branch
0000E060                            
0000E060 317C 0513 0002             		move.w	#$513,obGfx(a0)	; SYZ, LZ and SBZ specific code
0000E066                            
0000E066                            	But_IsMZ:
0000E066 117C 0004 0001             		move.b	#4,obRender(a0)
0000E06C 117C 0010 0014             		move.b	#$10,obActWid(a0)
0000E072 317C 0200 0018             		move.w	#$200,obPriority(a0)
0000E078 5668 000C                  		addq.w	#3,obY(a0)
0000E07C                            
0000E07C                            But_Pressed:	; Routine 2
0000E07C 4A28 0001                  		tst.b	obRender(a0)
0000E080 6A00                       		bpl.s	But_Display
0000E082 323C 001B                  		move.w	#$1B,d1
0000E086 343C 0005                  		move.w	#5,d2
0000E08A 363C 0005                  		move.w	#5,d3
0000E08E 3828 0008                  		move.w	obX(a0),d4
0000E092 6100 0000                  		bsr.w	SolidObject
0000E096 08A8 0000 001A             		bclr	#0,obFrame(a0)	; use "unpressed" frame
0000E09C 1028 0028                  		move.b	obSubtype(a0),d0
0000E0A0 0240 000F                  		andi.w	#$F,d0
0000E0A4 47F8 F7E0                  		lea	(f_switch).w,a3
0000E0A8 47F3 0000                  		lea	(a3,d0.w),a3
0000E0AC 7600                       		moveq	#0,d3
0000E0AE 0828 0006 0028             		btst	#6,obSubtype(a0)
0000E0B4 6700                       		beq.s	loc_BDB2
0000E0B6 7607                       		moveq	#7,d3
0000E0B8                            
0000E0B8                            loc_BDB2:
0000E0B8 4A28 0028                  		tst.b	obSubtype(a0)
0000E0BC 6A00                       		bpl.s	loc_BDBE
0000E0BE 6100 0000                  		bsr.w	But_MZBlock
0000E0C2 6600                       		bne.s	loc_BDC8
0000E0C4                            
0000E0C4                            loc_BDBE:
0000E0C4 4A28 0025                  		tst.b	ob2ndRout(a0)
0000E0C8 6600                       		bne.s	loc_BDC8
0000E0CA 0793                       		bclr	d3,(a3)
0000E0CC 6000                       		bra.s	loc_BDDE
0000E0CE                            ; ===========================================================================
0000E0CE                            
0000E0CE                            loc_BDC8:
0000E0CE 4A13                       		tst.b	(a3)
0000E0D0 6600                       		bne.s	loc_BDD6
0000E0DC                            
0000E0DC                            loc_BDD6:
0000E0DC 07D3                       		bset	d3,(a3)
0000E0DE 08E8 0000 001A             		bset	#0,obFrame(a0)	; use "pressed"	frame
0000E0E4                            
0000E0E4                            loc_BDDE:
0000E0E4 0828 0005 0028             		btst	#5,obSubtype(a0)
0000E0EA 6700                       		beq.s	But_Display
0000E0EC 5328 001E                  		subq.b	#1,obTimeFrame(a0)
0000E0F0 6A00                       		bpl.s	But_Display
0000E0F2 117C 0007 001E             		move.b	#7,obTimeFrame(a0)
0000E0F8 0868 0001 001A             		bchg	#1,obFrame(a0)
0000E0FE                            
0000E0FE                            But_Display:
0000E0FE 6100 0000                  		bsr.w	DisplaySprite
0000E120 4E75                       		rts	
0000E122                            ; ===========================================================================
0000E122                            
0000E122                            But_Delete:
0000E122 6100 0000                  		bsr.w	DeleteObject
0000E126 4E75                       		rts	
0000E128                            
0000E128                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E128                            
0000E128                            
0000E128                            But_MZBlock:
0000E128 3F03                       		move.w	d3,-(sp)
0000E12A 3428 0008                  		move.w	obX(a0),d2
0000E12E 3628 000C                  		move.w	obY(a0),d3
0000E132 0442 0010                  		subi.w	#$10,d2
0000E136 5143                       		subq.w	#8,d3
0000E138 383C 0020                  		move.w	#$20,d4
0000E13C 3A3C 0010                  		move.w	#$10,d5
0000E140 43F8 D800                  		lea	(v_lvlobjspace).w,a1 ; begin checking object RAM
0000E144 3C3C 005F                  		move.w	#$5F,d6
0000E148                            
0000E148                            But_MZLoop:
0000E148 4A29 0001                  		tst.b	obRender(a1)
0000E14C 6A00                       		bpl.s	loc_BE4E
0000E14E 0C11 0000                  		cmpi.b	#id_PushBlock,(a1) ; is the object a green MZ block?
0000E152 6700                       		beq.s	loc_BE5E	; if yes, branch
0000E154                            
0000E154                            loc_BE4E:
0000E154 43E9 0040                  		lea	$40(a1),a1	; check	next object
0000E158 51CE FFEE                  		dbf	d6,But_MZLoop	; repeat $5F times
0000E15C                            
0000E15C 361F                       		move.w	(sp)+,d3
0000E15E 7000                       		moveq	#0,d0
0000E160                            
0000E160                            locret_BE5A:
0000E160 4E75                       		rts	
0000E162                            ; ===========================================================================
0000E162 1010                       But_MZData:	dc.b $10, $10
0000E164                            ; ===========================================================================
0000E164                            
0000E164                            loc_BE5E:
0000E164 7001                       		moveq	#1,d0
0000E166 0240 003F                  		andi.w	#$3F,d0
0000E16A D040                       		add.w	d0,d0
0000E16C 45FB 00F2                  		lea	But_MZData-2(pc,d0.w),a2
0000E170 121A                       		move.b	(a2)+,d1
0000E172 4881                       		ext.w	d1
0000E174 3029 0008                  		move.w	obX(a1),d0
0000E178 9041                       		sub.w	d1,d0
0000E17A 9042                       		sub.w	d2,d0
0000E17C 6400                       		bcc.s	loc_BE80
0000E17E D241                       		add.w	d1,d1
0000E180 D041                       		add.w	d1,d0
0000E182 6500                       		bcs.s	loc_BE84
0000E184 60CE                       		bra.s	loc_BE4E
0000E186                            ; ===========================================================================
0000E186                            
0000E186                            loc_BE80:
0000E186 B044                       		cmp.w	d4,d0
0000E188 62CA                       		bhi.s	loc_BE4E
0000E18A                            
0000E18A                            loc_BE84:
0000E18A 121A                       		move.b	(a2)+,d1
0000E18C 4881                       		ext.w	d1
0000E18E 3029 000C                  		move.w	obY(a1),d0
0000E192 9041                       		sub.w	d1,d0
0000E194 9043                       		sub.w	d3,d0
0000E196 6400                       		bcc.s	loc_BE9A
0000E198 D241                       		add.w	d1,d1
0000E19A D041                       		add.w	d1,d0
0000E19C 6500                       		bcs.s	loc_BE9E
0000E19E 60B4                       		bra.s	loc_BE4E
0000E1A0                            ; ===========================================================================
0000E1A0                            
0000E1A0                            loc_BE9A:
0000E1A0 B045                       		cmp.w	d5,d0
0000E1A2 62B0                       		bhi.s	loc_BE4E
0000E1A4                            
0000E1A4                            loc_BE9E:
0000E1A4 361F                       		move.w	(sp)+,d3
0000E1A6 7001                       		moveq	#1,d0
0000E1A8 4E75                       		rts	
0000E1AA                            ; End of function But_MZBlock
0000E1AA                            ; End of function But_MZBlock
0000E1AA                            Map_But:	include	"_maps\Button.asm"
0000E1AA                            ; ---------------------------------------------------------------------------
0000E1AA                            ; Sprite mappings - switches (MZ, SYZ, LZ, SBZ)
0000E1AA                            ; ---------------------------------------------------------------------------
0000E1AA                            Map_But_internal:
0000E1AA 0000                       		dc.w byte_BEAC-Map_But_internal
0000E1AC 0000                       		dc.w byte_BEB7-Map_But_internal
0000E1AE 0000                       		dc.w byte_BEC2-Map_But_internal
0000E1B0 0000                       		dc.w byte_BEB7-Map_But_internal
0000E1B2 02                         byte_BEAC:	dc.b 2
0000E1B3 F505 0000 F0               		dc.b $F5, 5, 0,	0, $F0
0000E1B8 F505 0800 00               		dc.b $F5, 5, 8,	0, 0
0000E1BD 02                         byte_BEB7:	dc.b 2
0000E1BE F505 0004 F0               		dc.b $F5, 5, 0,	4, $F0
0000E1C3 F505 0804 00               		dc.b $F5, 5, 8,	4, 0
0000E1C8 02                         byte_BEC2:	dc.b 2
0000E1C9 F505 FFFC F0               		dc.b $F5, 5, $FF, $FC, $F0
0000E1CE F505 07FC 00               		dc.b $F5, 5, 7,	$FC, 0
0000E1D3 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0000E1D8                            		even
0000E1D8                            		even
0000E1D8                            
0000E1D8                            		include	"_incObj\33 Pushable Blocks.asm"
0000E1D8                            ; ---------------------------------------------------------------------------
0000E1D8                            ; Object 33 - pushable blocks (MZ, LZ)
0000E1D8                            ; ---------------------------------------------------------------------------
0000E1D8                            
0000E1D8                            PushBlock:
0000E1D8 7000                       		moveq	#0,d0
0000E1DA 1028 0024                  		move.b	obRoutine(a0),d0
0000E1DE 323B 0000                  		move.w	PushB_Index(pc,d0.w),d1
0000E1E2 4EFB 1000                  		jmp	PushB_Index(pc,d1.w)
0000E1E6                            ; ===========================================================================
0000E1E6 0000                       PushB_Index:	dc.w PushB_Main-PushB_Index
0000E1E8 0000                       		dc.w loc_BF6E-PushB_Index
0000E1EA 0000                       		dc.w loc_C02C-PushB_Index
0000E1EC                            
0000E1EC 1000                       PushB_Var:	dc.b $10, 0	; object width,	frame number
0000E1EE 4001                       		dc.b $40, 1
0000E1F0                            ; ===========================================================================
0000E1F0                            
0000E1F0                            PushB_Main:	; Routine 0
0000E1F0 5428 0024                  		addq.b	#2,obRoutine(a0)
0000E1F4 117C 000F 0016             		move.b	#$F,obHeight(a0)
0000E1FA 117C 000F 0017             		move.b	#$F,obWidth(a0)
0000E200 217C 0000 0000 0004        		move.l	#Map_Push,obMap(a0)
0000E208 317C 42B8 0002             		move.w	#$42B8,obGfx(a0) ; MZ specific code
0000E20E 0C38 0001 FE10             		cmpi.b	#1,(v_zone).w
0000E214 6600                       		bne.s	@notLZ
0000E216 317C 43DE 0002             		move.w	#$43DE,obGfx(a0) ; LZ specific code
0000E21C                            
0000E21C                            	@notLZ:
0000E21C 117C 0004 0001             		move.b	#4,obRender(a0)
0000E222 317C 0180 0018             		move.w	#$180,obPriority(a0)
0000E228 3168 0008 0034             		move.w	obX(a0),$34(a0)
0000E22E 3168 000C 0036             		move.w	obY(a0),$36(a0)
0000E234 7000                       		moveq	#0,d0
0000E236 1028 0028                  		move.b	obSubtype(a0),d0
0000E23A D040                       		add.w	d0,d0
0000E23C 0240 000E                  		andi.w	#$E,d0
0000E240 45FB 00AA                  		lea	PushB_Var(pc,d0.w),a2
0000E244 115A 0014                  		move.b	(a2)+,obActWid(a0)
0000E248 115A 001A                  		move.b	(a2)+,obFrame(a0)
0000E24C 4A28 0028                  		tst.b	obSubtype(a0)
0000E250 6700                       		beq.s	@chkgone
0000E252 317C C2B8 0002             		move.w	#$C2B8,obGfx(a0)
0000E258                            
0000E258                            	@chkgone:
0000E258 45F8 FC00                  		lea	(v_objstate).w,a2
0000E25C 7000                       		moveq	#0,d0
0000E25E 1028 0023                  		move.b	obRespawnNo(a0),d0
0000E262 6700                       		beq.s	loc_BF6E
0000E264 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000E26A 08F2 0000 0002             		bset	#0,2(a2,d0.w)
0000E270 6600 0000                  		bne.w	DeleteObject
0000E274                            
0000E274                            loc_BF6E:	; Routine 2
0000E274 4A28 0032                  		tst.b	$32(a0)
0000E278 6600 0000                  		bne.w	loc_C046
0000E27C 7200                       		moveq	#0,d1
0000E27E 1228 0014                  		move.b	obActWid(a0),d1
0000E282 0641 000B                  		addi.w	#$B,d1
0000E286 343C 0010                  		move.w	#$10,d2
0000E28A 363C 0011                  		move.w	#$11,d3
0000E28E 3828 0008                  		move.w	obX(a0),d4
0000E292 6100 0000                  		bsr.w	loc_C186
0000E296 0C78 0200 FE10             		cmpi.w	#(id_MZ<<8)+0,(v_zone).w ; is the level MZ act 1?
0000E29C 6600                       		bne.s	loc_BFC6	; if not, branch
0000E29E 08A8 0007 0028             		bclr	#7,obSubtype(a0)
0000E2A4 3028 0008                  		move.w	obX(a0),d0
0000E2A8 0C40 0A20                  		cmpi.w	#$A20,d0
0000E2AC 6500                       		bcs.s	loc_BFC6
0000E2AE 0C40 0AA1                  		cmpi.w	#$AA1,d0
0000E2B2 6400                       		bcc.s	loc_BFC6
0000E2B4 3038 F7A4                  		move.w	(v_obj31ypos).w,d0
0000E2B8 0440 001C                  		subi.w	#$1C,d0
0000E2BC 3140 000C                  		move.w	d0,obY(a0)
0000E2C0 08F8 0007 F7A4             		bset	#7,(v_obj31ypos).w
0000E2C6 08E8 0007 0028             		bset	#7,obSubtype(a0)
0000E2CC                            
0000E2CC                            	loc_BFC6:
0000E2E8 6000 0000                  		bra.w	DisplaySprite
0000E2EC                            ; ===========================================================================
0000E2EC                            
0000E2EC                            loc_ppppp:
0000E308 3168 0034 0008             		move.w	$34(a0),obX(a0)
0000E30E 3168 0036 000C             		move.w	$36(a0),obY(a0)
0000E314 117C 0004 0024             		move.b	#4,obRoutine(a0)
0000E31A 6000                       		bra.s	loc_C02C
0000E31C                            ; ===========================================================================
0000E31C                            
0000E31C                            loc_C016:
0000E31C 45F8 FC00                  		lea	(v_objstate).w,a2
0000E320 7000                       		moveq	#0,d0
0000E322 1028 0023                  		move.b	obRespawnNo(a0),d0
0000E326 6700                       		beq.s	loc_C028
0000E328 08B2 0000 0002             		bclr	#0,2(a2,d0.w)
0000E32E                            
0000E32E                            loc_C028:
0000E32E 6000 0000                  		bra.w	DeleteObject
0000E332                            ; ===========================================================================
0000E332                            
0000E332                            loc_C02C:	; Routine 4
0000E332 6100 0000                  		bsr.w	ChkPartiallyVisible
0000E336 6700                       		beq.s	locret_C044
0000E338 117C 0002 0024             		move.b	#2,obRoutine(a0)
0000E33E 4228 0032                  		clr.b	$32(a0)
0000E342 4268 0010                  		clr.w	obVelX(a0)
0000E346 4268 0012                  		clr.w	obVelY(a0)
0000E34A                            
0000E34A                            locret_C044:
0000E34A 4E75                       		rts	
0000E34C                            ; ===========================================================================
0000E34C                            
0000E34C                            loc_C046:
0000E34C 3F28 0008                  		move.w	obX(a0),-(sp)
0000E350 0C28 0004 0025             		cmpi.b	#4,ob2ndRout(a0)
0000E356 6400                       		bcc.s	loc_C056
0000E358 6100 0000                  		bsr.w	SpeedToPos
0000E35C                            
0000E35C                            loc_C056:
0000E35C 0828 0001 0022             		btst	#1,obStatus(a0)
0000E362 6700                       		beq.s	loc_C0A0
0000E364 0668 0018 0012             		addi.w	#$18,obVelY(a0)
0000E36A 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0000E370 4A41                       		tst.w	d1
0000E372 6A00 0000                  		bpl.w	loc_C09E
0000E376 D368 000C                  		add.w	d1,obY(a0)
0000E37A 4268 0012                  		clr.w	obVelY(a0)
0000E37E 08A8 0001 0022             		bclr	#1,obStatus(a0)
0000E384 3011                       		move.w	(a1),d0
0000E386 0240 03FF                  		andi.w	#$3FF,d0
0000E38A 0C40 016A                  		cmpi.w	#$16A,d0
0000E38E 6500                       		bcs.s	loc_C09E
0000E390 3028 0030                  		move.w	$30(a0),d0
0000E394 E640                       		asr.w	#3,d0
0000E396 3140 0010                  		move.w	d0,obVelX(a0)
0000E39A 117C 0001 0032             		move.b	#1,$32(a0)
0000E3A0 4268 000E                  		clr.w	$E(a0)
0000E3A4                            
0000E3A4                            loc_C09E:
0000E3A4 6000                       		bra.s	loc_C0E6
0000E3A6                            ; ===========================================================================
0000E3A6                            
0000E3A6                            loc_C0A0:
0000E3A6 4A68 0010                  		tst.w	obVelX(a0)
0000E3AA 6700 0000                  		beq.w	loc_C0D6
0000E3AE 6B00                       		bmi.s	loc_C0BC
0000E3B0 7600                       		moveq	#0,d3
0000E3B2 1628 0014                  		move.b	obActWid(a0),d3
0000E3B6 4EB9 0000 0000             		jsr	(ObjHitWallRight).l
0000E3BC 4A41                       		tst.w	d1		; has block touched a wall?
0000E3BE 6B00                       		bmi.s	PushB_StopPush	; if yes, branch
0000E3C0 6000                       		bra.s	loc_C0E6
0000E3C2                            ; ===========================================================================
0000E3C2                            
0000E3C2                            loc_C0BC:
0000E3C2 7600                       		moveq	#0,d3
0000E3C4 1628 0014                  		move.b	obActWid(a0),d3
0000E3C8 4643                       		not.w	d3
0000E3CA 4EB9 0000 0000             		jsr	(ObjHitWallLeft).l
0000E3D0 4A41                       		tst.w	d1		; has block touched a wall?
0000E3D2 6B00                       		bmi.s	PushB_StopPush	; if yes, branch
0000E3D4 6000                       		bra.s	loc_C0E6
0000E3D6                            ; ===========================================================================
0000E3D6                            
0000E3D6                            PushB_StopPush:
0000E3D6 4268 0010                  		clr.w	obVelX(a0)		; stop block moving
0000E3DA 6000                       		bra.s	loc_C0E6
0000E3DC                            ; ===========================================================================
0000E3DC                            
0000E3DC                            loc_C0D6:
0000E3DC 06A8 0000 2001 000C        		addi.l	#$2001,obY(a0)
0000E3E4 0C28 00A0 000F             		cmpi.b	#$A0,obY+3(a0)
0000E3EA 6400                       		bcc.s	loc_C104
0000E3EC                            
0000E3EC                            loc_C0E6:
0000E3EC 7200                       		moveq	#0,d1
0000E3EE 1228 0014                  		move.b	obActWid(a0),d1
0000E3F2 0641 000B                  		addi.w	#$B,d1
0000E3F6 343C 0010                  		move.w	#$10,d2
0000E3FA 363C 0011                  		move.w	#$11,d3
0000E3FE 381F                       		move.w	(sp)+,d4
0000E400 6100 0000                  		bsr.w	loc_C186
0000E404 6100                       		bsr.s	PushB_ChkLava
0000E406 6000 FEC4                  		bra.w	loc_BFC6
0000E40A                            ; ===========================================================================
0000E40A                            
0000E40A                            loc_C104:
0000E40A 381F                       		move.w	(sp)+,d4
0000E40C 43F8 D000                  		lea	(v_player).w,a1
0000E410 08A9 0003 0022             		bclr	#3,obStatus(a1)
0000E416 08A8 0003 0022             		bclr	#3,obStatus(a0)
0000E41C 6000 FECE                  		bra.w	loc_ppppp
0000E420                            ; ===========================================================================
0000E420                            
0000E420                            PushB_ChkLava:
0000E420 0C78 0201 FE10             		cmpi.w	#(id_MZ<<8)+1,(v_zone).w ; is the level MZ act 2?
0000E426 6600                       		bne.s	PushB_ChkLava2	; if not, branch
0000E428 343C FFE0                  		move.w	#-$20,d2
0000E42C 0C68 0DD0 0008             		cmpi.w	#$DD0,obX(a0)
0000E432 6700                       		beq.s	PushB_LoadLava
0000E434 0C68 0CC0 0008             		cmpi.w	#$CC0,obX(a0)
0000E43A 6700                       		beq.s	PushB_LoadLava
0000E43C 0C68 0BA0 0008             		cmpi.w	#$BA0,obX(a0)
0000E442 6700                       		beq.s	PushB_LoadLava
0000E444 4E75                       		rts	
0000E446                            ; ===========================================================================
0000E446                            
0000E446                            PushB_ChkLava2:
0000E446 0C78 0202 FE10             		cmpi.w	#(id_MZ<<8)+2,(v_zone).w ; is the level MZ act 3?
0000E44C 6600                       		bne.s	PushB_NoLava	; if not, branch
0000E44E 343C 0020                  		move.w	#$20,d2
0000E452 0C68 0560 0008             		cmpi.w	#$560,obX(a0)
0000E458 6700                       		beq.s	PushB_LoadLava
0000E45A 0C68 05C0 0008             		cmpi.w	#$5C0,obX(a0)
0000E460 6700                       		beq.s	PushB_LoadLava
0000E462                            
0000E462                            PushB_NoLava:
0000E462 4E75                       		rts	
0000E464                            ; ===========================================================================
0000E464                            
0000E464                            PushB_LoadLava:
0000E464 6100 0000                  		bsr.w	FindFreeObj
0000E468 6600                       		bne.s	locret_C184
0000E46A 12BC 0000                  		move.b	#id_GeyserMaker,0(a1) ; load lava geyser object
0000E46E 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000E474 D569 0008                  		add.w	d2,obX(a1)
0000E478 3368 000C 000C             		move.w	obY(a0),obY(a1)
0000E47E 0669 0010 000C             		addi.w	#$10,obY(a1)
0000E484 2348 003C                  		move.l	a0,$3C(a1)
0000E488                            
0000E488                            locret_C184:
0000E488 4E75                       		rts	
0000E48A                            ; ===========================================================================
0000E48A                            
0000E48A                            loc_C186:
0000E48A 1028 0025                  		move.b	ob2ndRout(a0),d0
0000E48E 6700 0000                  		beq.w	loc_C218
0000E492 5500                       		subq.b	#2,d0
0000E494 6600                       		bne.s	loc_C1AA
0000E496 6100 AD66                  		bsr.w	ExitPlatform
0000E49A 0829 0003 0022             		btst	#3,obStatus(a1)
0000E4A0 6600                       		bne.s	loc_C1A4
0000E4A2 4228 0025                  		clr.b	ob2ndRout(a0)
0000E4A6 4E75                       		rts	
0000E4A8                            ; ===========================================================================
0000E4A8                            
0000E4A8                            loc_C1A4:
0000E4A8 3404                       		move.w	d4,d2
0000E4AA 6000 B2B0                  		bra.w	MvSonicOnPtfm
0000E4AE                            ; ===========================================================================
0000E4AE                            
0000E4AE                            loc_C1AA:
0000E4AE 5500                       		subq.b	#2,d0
0000E4B0 6600                       		bne.s	loc_C1F2
0000E4B2 6100 0000                  		bsr.w	SpeedToPos
0000E4B6 0668 0018 0012             		addi.w	#$18,obVelY(a0)
0000E4BC 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0000E4C2 4A41                       		tst.w	d1
0000E4C4 6A00 0000                  		bpl.w	locret_C1F0
0000E4C8 D368 000C                  		add.w	d1,obY(a0)
0000E4CC 4268 0012                  		clr.w	obVelY(a0)
0000E4D0 4228 0025                  		clr.b	ob2ndRout(a0)
0000E4D4 3011                       		move.w	(a1),d0
0000E4D6 0240 03FF                  		andi.w	#$3FF,d0
0000E4DA 0C40 016A                  		cmpi.w	#$16A,d0
0000E4DE 6500                       		bcs.s	locret_C1F0
0000E4E0 3028 0030                  		move.w	$30(a0),d0
0000E4E4 E640                       		asr.w	#3,d0
0000E4E6 3140 0010                  		move.w	d0,obVelX(a0)
0000E4EA 117C 0001 0032             		move.b	#1,$32(a0)
0000E4F0 4268 000E                  		clr.w	obY+2(a0)
0000E4F4                            
0000E4F4                            locret_C1F0:
0000E4F4 4E75                       		rts	
0000E4F6                            ; ===========================================================================
0000E4F6                            
0000E4F6                            loc_C1F2:
0000E4F6 6100 0000                  		bsr.w	SpeedToPos
0000E4FA 3028 0008                  		move.w	obX(a0),d0
0000E4FE 0240 000C                  		andi.w	#$C,d0
0000E502 6600 0000                  		bne.w	locret_C2E4
0000E506 0268 FFF0 0008             		andi.w	#-$10,obX(a0)
0000E50C 3168 0010 0030             		move.w	obVelX(a0),$30(a0)
0000E512 4268 0010                  		clr.w	obVelX(a0)
0000E516 5528 0025                  		subq.b	#2,ob2ndRout(a0)
0000E51A 4E75                       		rts	
0000E51C                            ; ===========================================================================
0000E51C                            
0000E51C                            loc_C218:
0000E51C 6100 0000                  		bsr.w	Solid_ChkEnter
0000E520 4A44                       		tst.w	d4
0000E522 6700 0000                  		beq.w	locret_C2E4
0000E526 6B00 0000                  		bmi.w	locret_C2E4
0000E52A 4A28 0032                  		tst.b	$32(a0)
0000E52E 6700                       		beq.s	loc_C230
0000E530 6000 0000                  		bra.w	locret_C2E4
0000E534                            ; ===========================================================================
0000E534                            
0000E534                            loc_C230:
0000E534 4A40                       		tst.w	d0
0000E536 6700 0000                  		beq.w	locret_C2E4
0000E53A 6B00                       		bmi.s	loc_C268
0000E53C 0829 0000 0022             		btst	#0,obStatus(a1)
0000E542 6600 0000                  		bne.w	locret_C2E4
0000E546 3F00                       		move.w	d0,-(sp)
0000E548 7600                       		moveq	#0,d3
0000E54A 1628 0014                  		move.b	obActWid(a0),d3
0000E54E 4EB9 0000 0000             		jsr	(ObjHitWallRight).l
0000E554 301F                       		move.w	(sp)+,d0
0000E556 4A41                       		tst.w	d1
0000E558 6B00 0000                  		bmi.w	locret_C2E4
0000E55C 06A8 0001 0000 0008        		addi.l	#$10000,obX(a0)
0000E564 7001                       		moveq	#1,d0
0000E566 323C 0040                  		move.w	#$40,d1
0000E56A 6000                       		bra.s	loc_C294
0000E56C                            ; ===========================================================================
0000E56C                            
0000E56C                            loc_C268:
0000E56C 0829 0000 0022             		btst	#0,obStatus(a1)
0000E572 6700                       		beq.s	locret_C2E4
0000E574 3F00                       		move.w	d0,-(sp)
0000E576 7600                       		moveq	#0,d3
0000E578 1628 0014                  		move.b	obActWid(a0),d3
0000E57C 4643                       		not.w	d3
0000E57E 4EB9 0000 0000             		jsr	(ObjHitWallLeft).l
0000E584 301F                       		move.w	(sp)+,d0
0000E586 4A41                       		tst.w	d1
0000E588 6B00                       		bmi.s	locret_C2E4
0000E58A 04A8 0001 0000 0008        		subi.l	#$10000,obX(a0)
0000E592 70FF                       		moveq	#-1,d0
0000E594 323C FFC0                  		move.w	#-$40,d1
0000E598                            
0000E598                            loc_C294:
0000E598 43F8 D000                  		lea	(v_player).w,a1
0000E59C D169 0008                  		add.w	d0,obX(a1)
0000E5A0 3341 0020                  		move.w	d1,obInertia(a1)
0000E5A4 337C 0000 0010             		move.w	#0,obVelX(a1)
0000E5AA 3F00                       		move.w	d0,-(sp)
0000E5B6 301F                       		move.w	(sp)+,d0
0000E5B8 4A28 0028                  		tst.b	obSubtype(a0)
0000E5BC 6B00                       		bmi.s	locret_C2E4
0000E5BE 3F00                       		move.w	d0,-(sp)
0000E5C0 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0000E5C6 301F                       		move.w	(sp)+,d0
0000E5C8 0C41 0004                  		cmpi.w	#4,d1
0000E5CC 6F00                       		ble.s	loc_C2E0
0000E5CE 317C 0400 0010             		move.w	#$400,obVelX(a0)
0000E5D4 4A40                       		tst.w	d0
0000E5D6 6A00                       		bpl.s	loc_C2D8
0000E5D8 4468 0010                  		neg.w	obVelX(a0)
0000E5DC                            
0000E5DC                            loc_C2D8:
0000E5DC 117C 0006 0025             		move.b	#6,ob2ndRout(a0)
0000E5E2 6000                       		bra.s	locret_C2E4
0000E5E4                            ; ===========================================================================
0000E5E4                            
0000E5E4                            loc_C2E0:
0000E5E4 D368 000C                  		add.w	d1,obY(a0)
0000E5E8                            
0000E5E8                            locret_C2E4:
0000E5E8 4E75                       		rts	
0000E5E8 4E75                       		rts	
0000E5EA                            Map_Push:	include	"_maps\Pushable Blocks.asm"
0000E5EA                            ; ---------------------------------------------------------------------------
0000E5EA                            ; Sprite mappings - pushable blocks (MZ, LZ)
0000E5EA                            ; ---------------------------------------------------------------------------
0000E5EA                            Map_Push_internal:
0000E5EA 0000                       		dc.w @single-Map_Push_internal
0000E5EC 0000                       		dc.w @four-Map_Push_internal
0000E5EE 01                         @single:	dc.b 1
0000E5EF F00F 0008 F0               		dc.b $F0, $F, 0, 8, $F0	; single block
0000E5F4 04                         @four:		dc.b 4
0000E5F5 F00F 0008 C0               		dc.b $F0, $F, 0, 8, $C0	; row of 4 blocks
0000E5FA F00F 0008 E0               		dc.b $F0, $F, 0, 8, $E0
0000E5FF F00F 0008 00               		dc.b $F0, $F, 0, 8, 0
0000E604 F00F 0008 20               		dc.b $F0, $F, 0, 8, $20
0000E60A 00                         		even
0000E60A 00                         		even
0000E60A                            
0000E60A                            		include	"_incObj\34 Title Cards.asm"
0000E60A                            ; ---------------------------------------------------------------------------
0000E60A                            ; Object 34 - zone title cards
0000E60A                            ; ---------------------------------------------------------------------------
0000E60A                            
0000E60A                            TitleCard:
0000E60A 7000                       		moveq	#0,d0
0000E60C 1028 0024                  		move.b	obRoutine(a0),d0
0000E610 323B 0000                  		move.w	Card_Index(pc,d0.w),d1
0000E614 4EFB 1000                  		jmp	Card_Index(pc,d1.w)
0000E618                            ; ===========================================================================
0000E618 0000                       Card_Index:	dc.w Card_CheckSBZ3-Card_Index
0000E61A 0000                       		dc.w Card_ChkPos-Card_Index
0000E61C 0000                       		dc.w Card_Wait-Card_Index
0000E61E 0000                       		dc.w Card_Wait-Card_Index
0000E620                            
0000E620 =00000030                  card_mainX:	equ $30		; position for card to display on
0000E620 =00000032                  card_finalX:	equ $32		; position for card to finish on
0000E620                            ; ===========================================================================
0000E620                            
0000E620                            Card_CheckSBZ3:	; Routine 0
0000E620 2248                       		movea.l	a0,a1
0000E622 7000                       		moveq	#0,d0
0000E624 1038 FE10                  		move.b	(v_zone).w,d0
0000E628 0C78 0103 FE10             		cmpi.w	#(id_LZ<<8)+3,(v_zone).w ; check if level is SBZ 3
0000E62E 6600                       		bne.s	Card_CheckFZ
0000E630 7001                       		moveq	#1,d0		; load title card number 6 (FZ)
0000E632                            
0000E632                            	Card_CheckFZ:
0000E632 3400                       		move.w	d0,d2
0000E634 0C78 0502 FE10             		cmpi.w	#(id_SBZ<<8)+2,(v_zone).w ; check if level is FZ
0000E63A 6600                       		bne.s	Card_LoadConfig
0000E63C 7006                       		moveq	#6,d0		; load title card number 6 (FZ)
0000E63E 740B                       		moveq	#$B,d2		; use "FINAL" mappings
0000E640                            
0000E640                            	Card_LoadConfig:
0000E640 47F9 0000 0000             		lea	(Card_ConData).l,a3
0000E646 E948                       		lsl.w	#4,d0
0000E648 D6C0                       		adda.w	d0,a3
0000E64A 45F9 0000 0000             		lea	(Card_ItemData).l,a2
0000E650 7203                       		moveq	#3,d1
0000E652                            
0000E652                            Card_Loop:
0000E652 12BC 0000                  		move.b	#id_TitleCard,0(a1)
0000E656 3353 0008                  		move.w	(a3),obX(a1)	; load start x-position
0000E65A 335B 0032                  		move.w	(a3)+,card_finalX(a1) ; load finish x-position (same as start)
0000E65E 335B 0030                  		move.w	(a3)+,card_mainX(a1) ; load main x-position
0000E662 335A 000A                  		move.w	(a2)+,obScreenY(a1)
0000E666 135A 0024                  		move.b	(a2)+,obRoutine(a1)
0000E66A 101A                       		move.b	(a2)+,d0
0000E66C 6600                       		bne.s	Card_ActNumber
0000E66E 1002                       		move.b	d2,d0
0000E670                            
0000E670                            	Card_ActNumber:
0000E670 0C00 0007                  		cmpi.b	#7,d0
0000E674 6600                       		bne.s	Card_MakeSprite
0000E676 D038 FE11                  		add.b	(v_act).w,d0
0000E67A 0C38 0003 FE11             		cmpi.b	#3,(v_act).w
0000E680 6600                       		bne.s	Card_MakeSprite
0000E682 5300                       		subq.b	#1,d0
0000E684                            
0000E684                            	Card_MakeSprite:
0000E684 1340 001A                  		move.b	d0,obFrame(a1)	; display frame	number d0
0000E688 237C 0000 0000 0004        		move.l	#Map_Card,obMap(a1)
0000E690 337C 8580 0002             		move.w	#$8580,obGfx(a1)
0000E696 137C 0078 0014             		move.b	#$78,obActWid(a1)
0000E69C 137C 0000 0001             		move.b	#0,obRender(a1)
0000E6A2 337C 0000 0018             		move.w	#0,obPriority(a1)
0000E6A8 337C 003C 001E             		move.w	#60,obTimeFrame(a1) ; set time delay to 1 second
0000E6AE 43E9 0040                  		lea	$40(a1),a1	; next object
0000E6B2 51C9 FF9E                  		dbf	d1,Card_Loop	; repeat sequence another 3 times
0000E6B6                            
0000E6B6                            Card_ChkPos:	; Routine 2
0000E6B6 7210                       		moveq	#$10,d1		; set horizontal speed
0000E6B8 3028 0030                  		move.w	card_mainX(a0),d0
0000E6BC B068 0008                  		cmp.w	obX(a0),d0	; has item reached the target position?
0000E6C0 6700                       		beq.s	Card_NoMove	; if yes, branch
0000E6C2 6C00                       		bge.s	Card_Move
0000E6C4 4441                       		neg.w	d1
0000E6C6                            
0000E6C6                            Card_Move:
0000E6C6 D368 0008                  		add.w	d1,obX(a0)	; change item's position
0000E6CA                            
0000E6CA                            Card_NoMove:
0000E6CA 3028 0008                  		move.w	obX(a0),d0
0000E6CE 6B00                       		bmi.s	locret_C3D8
0000E6D0 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000E6D4 6400                       		bcc.s	locret_C3D8	; if yes, branch
0000E6D6 6000 0000                  		bra.w	DisplaySprite
0000E6DA                            ; ===========================================================================
0000E6DA                            
0000E6DA                            locret_C3D8:
0000E6DA 4E75                       		rts	
0000E6DC                            ; ===========================================================================
0000E6DC                            
0000E6DC                            Card_Wait:	; Routine 4/6
0000E6DC 4A68 001E                  		tst.w	obTimeFrame(a0)	; is time remaining zero?
0000E6E0 6700                       		beq.s	Card_ChkPos2	; if yes, branch
0000E6E2 5368 001E                  		subq.w	#1,obTimeFrame(a0) ; subtract 1 from time
0000E6E6 6000 0000                  		bra.w	DisplaySprite
0000E6EA                            ; ===========================================================================
0000E6EA                            
0000E6EA                            Card_ChkPos2:
0000E6EA 4A28 0001                  		tst.b	obRender(a0)
0000E6EE 6A00                       		bpl.s	Card_ChangeArt
0000E6F0 7220                       		moveq	#$20,d1
0000E6F2 3028 0032                  		move.w	card_finalX(a0),d0
0000E6F6 B068 0008                  		cmp.w	obX(a0),d0	; has item reached the finish position?
0000E6FA 6700                       		beq.s	Card_ChangeArt	; if yes, branch
0000E6FC 6C00                       		bge.s	Card_Move2
0000E6FE 4441                       		neg.w	d1
0000E700                            
0000E700                            Card_Move2:
0000E700 D368 0008                  		add.w	d1,obX(a0)	; change item's position
0000E704 3028 0008                  		move.w	obX(a0),d0
0000E708 6B00                       		bmi.s	locret_C412
0000E70A 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000E70E 6400                       		bcc.s	locret_C412	; if yes, branch
0000E710 6000 0000                  		bra.w	DisplaySprite
0000E714                            ; ===========================================================================
0000E714                            
0000E714                            locret_C412:
0000E714 4E75                       		rts	
0000E716                            ; ===========================================================================
0000E716                            
0000E716                            Card_ChangeArt:
0000E716 0C28 0004 0024             		cmpi.b	#4,obRoutine(a0)
0000E71C 6600                       		bne.s	Card_Delete
0000E71E 7000                       		moveq	#plcid_Explode,d0
0000E720 4EB9 0000 16EE             		jsr	(AddPLC).l	; load explosion patterns
0000E726 7000                       		moveq	#0,d0
0000E728 1038 FE10                  		move.b	(v_zone).w,d0
0000E72C 0640 0000                  		addi.w	#plcid_GHZAnimals,d0
0000E730 4EB9 0000 16EE             		jsr	(AddPLC).l	; load animal patterns
0000E736                            
0000E736                            Card_Delete:
0000E736 6000 0000                  		bra.w	DeleteObject
0000E73A                            ; ===========================================================================
0000E73A 00D0                       Card_ItemData:	dc.w $D0	; y-axis position
0000E73C 0200                       		dc.b 2,	0	; routine number, frame	number (changes)
0000E73E 00E4                       		dc.w $E4
0000E740 0206                       		dc.b 2,	6
0000E742 00EA                       		dc.w $EA
0000E744 0207                       		dc.b 2,	7
0000E746 00E0                       		dc.w $E0
0000E748 020A                       		dc.b 2,	$A
0000E74A                            ; ---------------------------------------------------------------------------
0000E74A                            ; Title	card configuration data
0000E74A                            ; Format:
0000E74A                            ; 4 bytes per item (YYYY XXXX)
0000E74A                            ; 4 items per level (GREEN HILL, ZONE, ACT X, oval)
0000E74A                            ; ---------------------------------------------------------------------------
0000E74A 0000 0120 FEFC 013C 0414+  Card_ConData:	dc.w 0,	$120, $FEFC, $13C, $414, $154, $214, $154 ; GHZ
0000E75A 0000 0120 FEF4 0134 040C+  		dc.w 0,	$120, $FEF4, $134, $40C, $14C, $20C, $14C ; LZ
0000E76A 0000 0120 FEE0 0120 03F8+  		dc.w 0,	$120, $FEE0, $120, $3F8, $138, $1F8, $138 ; MZ
0000E77A 0000 0120 FEFC 013C 0414+  		dc.w 0,	$120, $FEFC, $13C, $414, $154, $214, $154 ; SLZ
0000E78A 0000 0120 FF04 0144 041C+  		dc.w 0,	$120, $FF04, $144, $41C, $15C, $21C, $15C ; SYZ
0000E79A 0000 0120 FF04 0144 041C+  		dc.w 0,	$120, $FF04, $144, $41C, $15C, $21C, $15C ; SBZ
0000E7AA 0000 0120 FEE4 0124 03EC+  		dc.w 0,	$120, $FEE4, $124, $3EC, $3EC, $1EC, $12C ; FZ
0000E7BA                            ; ===========================================================================
0000E7BA                            ; ===========================================================================
0000E7BA                            		include	"_incObj\39 Game Over.asm"
0000E7BA                            ; ---------------------------------------------------------------------------
0000E7BA                            ; Object 39 - "GAME OVER" and "TIME OVER"
0000E7BA                            ; ---------------------------------------------------------------------------
0000E7BA                            
0000E7BA                            GameOverCard:
0000E7BA 7000                       		moveq	#0,d0
0000E7BC 1028 0024                  		move.b	obRoutine(a0),d0
0000E7C0 323B 0000                  		move.w	Over_Index(pc,d0.w),d1
0000E7C4 4EFB 1000                  		jmp	Over_Index(pc,d1.w)
0000E7C8                            ; ===========================================================================
0000E7C8 0000                       Over_Index:	dc.w Over_ChkPLC-Over_Index
0000E7CA 0000                       		dc.w Over_Move-Over_Index
0000E7CC 0000                       		dc.w Over_Wait-Over_Index
0000E7CE                            ; ===========================================================================
0000E7CE                            
0000E7CE                            Over_ChkPLC:	; Routine 0
0000E7CE 4AB8 F680                  		tst.l	(v_plc_buffer).w ; are the pattern load cues empty?
0000E7D2 6700                       		beq.s	Over_Main	; if yes, branch
0000E7D4 4E75                       		rts	
0000E7D6                            ; ===========================================================================
0000E7D6                            
0000E7D6                            Over_Main:
0000E7D6 5428 0024                  		addq.b	#2,obRoutine(a0)
0000E7DA 317C 0050 0008             		move.w	#$50,obX(a0)	; set x-position
0000E7E0 0828 0000 001A             		btst	#0,obFrame(a0)	; is the object	"OVER"?
0000E7E6 6700                       		beq.s	Over_1stWord	; if not, branch
0000E7E8 317C 01F0 0008             		move.w	#$1F0,obX(a0)	; set x-position for "OVER"
0000E7EE                            
0000E7EE                            	Over_1stWord:
0000E7EE 317C 00F0 000A             		move.w	#$F0,obScreenY(a0)
0000E7F4 217C 0000 0000 0004        		move.l	#Map_Over,obMap(a0)
0000E7FC 317C 855E 0002             		move.w	#$855E,obGfx(a0)
0000E802 117C 0000 0001             		move.b	#0,obRender(a0)
0000E808 317C 0000 0018             		move.w	#0,obPriority(a0)
0000E80E                            
0000E80E                            Over_Move:	; Routine 2
0000E80E 7210                       		moveq	#$10,d1		; set horizontal speed
0000E810 0C68 0120 0008             		cmpi.w	#$120,obX(a0)	; has item reached its target position?
0000E816 6700                       		beq.s	Over_SetWait	; if yes, branch
0000E818 6500                       		bcs.s	Over_UpdatePos
0000E81A 4441                       		neg.w	d1
0000E81C                            
0000E81C                            	Over_UpdatePos:
0000E81C D368 0008                  		add.w	d1,obX(a0)	; change item's position
0000E820 6000 0000                  		bra.w	DisplaySprite
0000E824                            ; ===========================================================================
0000E824                            
0000E824                            Over_SetWait:
0000E824 317C 02D0 001E             		move.w	#720,obTimeFrame(a0) ; set time delay to 12 seconds
0000E82A 5428 0024                  		addq.b	#2,obRoutine(a0)
0000E82E 4E75                       		rts	
0000E830                            ; ===========================================================================
0000E830                            
0000E830                            Over_Wait:	; Routine 4
0000E830 1038 F605                  		move.b	(v_jpadpress1).w,d0
0000E834 0200 0070                  		andi.b	#btnABC,d0	; is button A, B or C pressed?
0000E838 6600                       		bne.s	Over_ChgMode	; if yes, branch
0000E83A 0828 0000 001A             		btst	#0,obFrame(a0)
0000E840 6600                       		bne.s	Over_Display
0000E842 4A68 001E                  		tst.w	obTimeFrame(a0)	; has time delay reached zero?
0000E846 6700                       		beq.s	Over_ChgMode	; if yes, branch
0000E848 5368 001E                  		subq.w	#1,obTimeFrame(a0) ; subtract 1 from time delay
0000E84C 6000 0000                  		bra.w	DisplaySprite
0000E850                            ; ===========================================================================
0000E850                            
0000E850                            Over_ChgMode:
0000E850 4A38 FE1A                  		tst.b	(f_timeover).w	; is time over flag set?
0000E854 6600                       		bne.s	Over_ResetLvl	; if yes, branch
0000E856 11FC 0000 F600             		move.b	#id_Continue,(v_gamemode).w ; set mode to $14 (continue screen)
0000E85C 4A38 FE18                  		tst.b	(v_continues).w	; do you have any continues?
0000E860 6600                       		bne.s	Over_Display	; if yes, branch
0000E862 11FC 0000 F600             		move.b	#id_Sega,(v_gamemode).w ; set mode to 0 (Sega screen)
0000E868 6000                       		bra.s	Over_Display
0000E86A                            ; ===========================================================================
0000E86A                            
0000E86A                            Over_ResetLvl:
0000E86A 42B8 FE38                  			clr.l	(v_lamp_time).w
0000E86E 31FC 0001 FE02             		move.w	#1,(f_restart).w ; restart level
0000E874                            
0000E874                            Over_Display:
0000E874 6000 0000                  		bra.w	DisplaySprite
0000E874 6000 0000                  		bra.w	DisplaySprite
0000E878                            		include	"_incObj\3A Got Through Card.asm"
0000E878                            ; ---------------------------------------------------------------------------
0000E878                            ; Object 3A - "SONIC GOT THROUGH" title	card
0000E878                            ; ---------------------------------------------------------------------------
0000E878                            
0000E878                            GotThroughCard:
0000E878 7000                       		moveq	#0,d0
0000E87A 1028 0024                  		move.b	obRoutine(a0),d0
0000E87E 323B 0000                  		move.w	Got_Index(pc,d0.w),d1
0000E882 4EFB 1000                  		jmp	Got_Index(pc,d1.w)
0000E886                            ; ===========================================================================
0000E886 0000                       Got_Index:	dc.w Got_ChkPLC-Got_Index
0000E888 0000                       		dc.w Got_Move-Got_Index
0000E88A 0000                       		dc.w Got_Wait-Got_Index
0000E88C 0000                       		dc.w Got_TimeBonus-Got_Index
0000E88E 0000                       		dc.w Got_Wait-Got_Index
0000E890 0000                       		dc.w Got_NextLevel-Got_Index
0000E892 0000                       		dc.w Got_Wait-Got_Index
0000E894 0000                       		dc.w Got_Move2-Got_Index
0000E896 0000                       		dc.w loc_C766-Got_Index
0000E898                            
0000E898 =00000030                  got_mainX:	equ $30		; position for card to display on
0000E898 =00000032                  got_finalX:	equ $32		; position for card to finish on
0000E898                            ; ===========================================================================
0000E898                            
0000E898                            Got_ChkPLC:	; Routine 0
0000E898 4AB8 F680                  		tst.l	(v_plc_buffer).w ; are the pattern load cues empty?
0000E89C 6700                       		beq.s	Got_Main	; if yes, branch
0000E89E 4E75                       		rts	
0000E8A0                            ; ===========================================================================
0000E8A0                            
0000E8A0                            Got_Main:
0000E8A0 2248                       		movea.l	a0,a1
0000E8A2 45F9 0000 0000             		lea	(Got_Config).l,a2
0000E8A8 7206                       		moveq	#6,d1
0000E8AA                            
0000E8AA                            Got_Loop:
0000E8AA 12BC 0000                  		move.b	#id_GotThroughCard,0(a1)
0000E8AE 3352 0008                  		move.w	(a2),obX(a1)	; load start x-position
0000E8B2 335A 0032                  		move.w	(a2)+,got_finalX(a1) ; load finish x-position (same as start)
0000E8B6 335A 0030                  		move.w	(a2)+,got_mainX(a1) ; load main x-position
0000E8BA 335A 000A                  		move.w	(a2)+,obScreenY(a1) ; load y-position
0000E8BE 135A 0024                  		move.b	(a2)+,obRoutine(a1)
0000E8C2 101A                       		move.b	(a2)+,d0
0000E8C4 0C00 0006                  		cmpi.b	#6,d0
0000E8C8 6600                       		bne.s	loc_C5CA
0000E8CA D038 FE11                  		add.b	(v_act).w,d0	; add act number to frame number
0000E8CE                            
0000E8CE                            	loc_C5CA:
0000E8CE 1340 001A                  		move.b	d0,obFrame(a1)
0000E8D2 237C 0000 0000 0004        		move.l	#Map_Got,obMap(a1)
0000E8DA 337C 8580 0002             		move.w	#$8580,obGfx(a1)
0000E8E0 137C 0000 0001             		move.b	#0,obRender(a1)
0000E8E6 43E9 0040                  		lea	$40(a1),a1
0000E8EA 51C9 FFBE                  		dbf	d1,Got_Loop	; repeat 6 times
0000E8EE                            
0000E8EE                            Got_Move:	; Routine 2
0000E8EE 7210                       		moveq	#$10,d1		; set horizontal speed
0000E8F0 3028 0030                  		move.w	got_mainX(a0),d0
0000E8F4 B068 0008                  		cmp.w	obX(a0),d0	; has item reached its target position?
0000E8F8 6700                       		beq.s	loc_C61A	; if yes, branch
0000E8FA 6C00                       		bge.s	Got_ChgPos
0000E8FC 4441                       		neg.w	d1
0000E8FE                            
0000E8FE                            	Got_ChgPos:
0000E8FE D368 0008                  		add.w	d1,obX(a0)	; change item's position
0000E902                            
0000E902                            	loc_C5FE:
0000E902 3028 0008                  		move.w	obX(a0),d0
0000E906 6B00                       		bmi.s	locret_C60E
0000E908 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000E90C 6400                       		bcc.s	locret_C60E	; if yes, branch
0000E90E 6000 0000                  		bra.w	DisplaySprite
0000E912                            ; ===========================================================================
0000E912                            
0000E912                            locret_C60E:
0000E912 4E75                       		rts	
0000E914                            ; ===========================================================================
0000E914                            
0000E914                            loc_C610:
0000E914 117C 000E 0024             		move.b	#$E,obRoutine(a0)
0000E91A 6000 0000                  		bra.w	Got_Move2
0000E91E                            ; ===========================================================================
0000E91E                            
0000E91E                            loc_C61A:
0000E91E 0C38 000E D724             		cmpi.b	#$E,($FFFFD724).w
0000E924 67EE                       		beq.s	loc_C610
0000E926 0C28 0004 001A             		cmpi.b	#4,obFrame(a0)
0000E92C 66D4                       		bne.s	loc_C5FE
0000E92E 5428 0024                  		addq.b	#2,obRoutine(a0)
0000E932 317C 00B4 001E             		move.w	#180,obTimeFrame(a0) ; set time delay to 3 seconds
0000E938                            		;move.b	#id_SSRChaos,(v_objspace+$800).w ; load chaos emerald object
0000E938                            
0000E938                            Got_Wait:	; Routine 4, 8, $C
0000E938 5368 001E                  		subq.w	#1,obTimeFrame(a0) ; subtract 1 from time delay
0000E93C 6600                       		bne.s	Got_Display
0000E93E 5428 0024                  		addq.b	#2,obRoutine(a0)
0000E942                            
0000E942                            Got_Display:
0000E942 6000 0000                  		bra.w	DisplaySprite
0000E946                            ; ===========================================================================
0000E946                            
0000E946                            Got_TimeBonus:	; Routine 6
0000E946 6100 0000                  		bsr.w	DisplaySprite
0000E94A 11FC 0001 F7D6             		move.b	#1,(f_endactbonus).w ; set time/ring bonus update flag
0000E950 7000                       		moveq	#0,d0
0000E952 4A78 F7D2                  		tst.w	(v_timebonus).w	; is time bonus	= zero?
0000E956 6700                       		beq.s	Got_RingBonus	; if yes, branch
0000E958 0640 000A                  		addi.w	#10,d0		; add 10 to score
0000E95C 0478 000A F7D2             		subi.w	#10,(v_timebonus).w ; subtract 10 from time bonus
0000E962                            
0000E962                            Got_RingBonus:
0000E962 4A78 F7D4                  		tst.w	(v_ringbonus).w	; is ring bonus	= zero?
0000E966 6700                       		beq.s	Got_ChkBonus	; if yes, branch
0000E968 0640 000A                  		addi.w	#10,d0		; add 10 to score
0000E96C 0478 000A F7D4             		subi.w	#10,(v_ringbonus).w ; subtract 10 from ring bonus
0000E972                            
0000E972                            Got_ChkBonus:
0000E972 4A40                       		tst.w	d0		; is there any bonus?
0000E974 6600                       		bne.s	Got_AddBonus	; if yes, branch
0000E980 5428 0024                  		addq.b	#2,obRoutine(a0)
0000E984 0C78 0501 FE10             		cmpi.w	#(id_SBZ<<8)+1,(v_zone).w
0000E98A 6600                       		bne.s	Got_SetDelay
0000E98C 5828 0024                  		addq.b	#4,obRoutine(a0)
0000E990                            
0000E990                            Got_SetDelay:
0000E990 317C 00B4 001E             		move.w	#180,obTimeFrame(a0) ; set time delay to 3 seconds
0000E996                            
0000E996                            locret_C692:
0000E996 4E75                       		rts	
0000E998                            ; ===========================================================================
0000E998                            
0000E998                            Got_AddBonus:
0000E998 4EB9 0000 0000             		jsr	(AddPoints).l
0000E99E 1038 FE0F                  		move.b	(v_vbla_byte).w,d0
0000E9A2 0200 0003                  		andi.b	#3,d0
0000E9A6 66EE                       		bne.s	locret_C692
0000E9B2                            ; ===========================================================================
0000E9B2                            
0000E9B2                            Got_NextLevel:	; Routine $A
0000E9B2 11FC 0000 F5C2             		move.b  #0,($FFFFF5C2).w ; Clear victory animation flag
0000E9B8 11FC 0000 F5C3             		move.b  #0,(f_emeraldm).w
0000E9BE 1038 FE10                  		move.b	(v_zone).w,d0
0000E9C2 0240 0007                  		andi.w	#7,d0
0000E9C6 E748                       		lsl.w	#3,d0
0000E9C8 1238 FE11                  		move.b	(v_act).w,d1
0000E9CC 0241 0003                  		andi.w	#3,d1
0000E9D0 D241                       		add.w	d1,d1
0000E9D2 D041                       		add.w	d1,d0
0000E9D4 303B 0000                  		move.w	LevelOrder(pc,d0.w),d0 ; load level from level order array
0000E9D8 31C0 FE10                  		move.w	d0,(v_zone).w	; set level number
0000E9DC 4A40                       		tst.w	d0
0000E9DE 6600                       		bne.s	Got_ChkSS
0000E9E0 11FC 0000 F600             		move.b	#id_Sega,(v_gamemode).w
0000E9E6 6000                       		bra.s	Got_Display2
0000E9E8                            ; ===========================================================================
0000E9E8                            
0000E9E8                            Got_ChkSS:	
0000E9E8 4238 FE30                  		clr.b	(v_lastlamp).w	; clear	lamppost counter
0000E9EC 4A38 F5C3                  		tst.b	(f_emeraldm).w
0000E9F0 6700                       		beq.s	VBla_08A
0000E9F2 5238 FE57                  		addq.b	#1,(v_emeralds).w ; add 1 to number of emeralds
0000EA00 6000                       		bra.s	Got_Display2
0000EA02 11FC 0000 F5C3             		move.b  #0,(f_emeraldm).w
0000EA08                            		
0000EA08                            ; ===========================================================================
0000EA08                            
0000EA08                            VBla_08A:
0000EA08 31FC 0001 FE02             		move.w	#1,(f_restart).w ; restart level
0000EA0E                            
0000EA0E                            Got_Display2:
0000EA0E 6000 0000                  		bra.w	DisplaySprite
0000EA12                            ; ===========================================================================
0000EA12                            ; ---------------------------------------------------------------------------
0000EA12                            ; Level	order array
0000EA12                            ; ---------------------------------------------------------------------------
0000EA12                            LevelOrder:
0000EA12                            		; Green Hill Zone
0000EA12 0001                       		dc.b id_GHZ, 1	; Act 2
0000EA14 0002                       		dc.b id_GHZ, 2	; Act 2
0000EA16 0200                       		dc.b id_MZ, 0	; Act 3
0000EA18 0000                       		dc.b 0, 0
0000EA1A                            
0000EA1A                            		; Labyrinth Zone
0000EA1A 0101                       		dc.b id_LZ, 1	; Act 1
0000EA1C 0102                       		dc.b id_LZ, 2	; Act 2
0000EA1E 0000                       		dc.b id_GHZ, 0 	; Act 3
0000EA20 0502                       		dc.b id_SBZ, 2	; Scrap Brain Zone Act 3
0000EA22                            
0000EA22                            		; Marble Zone
0000EA22 0201                       		dc.b id_MZ, 1	; Act 1
0000EA24 0202                       		dc.b id_MZ, 2	; Act 2
0000EA26 0502                       		dc.b id_SBZ, 2	; Act 3
0000EA28 0000                       		dc.b 0, 0
0000EA2A                            
0000EA2A                            		; Star Light Zone
0000EA2A 0301                       		dc.b id_SLZ, 1	; Act 1
0000EA2C 0302                       		dc.b id_SLZ, 2	; Act 2
0000EA2E 0500                       		dc.b id_SBZ, 0	; Act 3
0000EA30 0000                       		dc.b 0, 0
0000EA32                            
0000EA32                            		; Spring Yard Zone
0000EA32 0502                       		dc.b id_SBZ, 2	; Act 1
0000EA34 0402                       		dc.b id_SYZ, 2	; Act 2
0000EA36 0200                       		dc.b id_MZ,	 0	; Act 3
0000EA38 0000                       		dc.b 0, 0
0000EA3A                            
0000EA3A                            		; Scrap Brain Zone
0000EA3A 0501                       		dc.b id_SBZ, 1	; Act 1
0000EA3C 0103                       		dc.b id_LZ, 3	; Act 2
0000EA3E 0000                       		dc.b 0, 0	; Final Zone
0000EA40 0000                       		dc.b 0, 0
0000EA42                            		even
0000EA42                            ; ===========================================================================
0000EA42                            
0000EA42                            Got_Move2:	; Routine $E
0000EA42 7220                       		moveq	#$20,d1		; set horizontal speed
0000EA44 3028 0032                  		move.w	got_finalX(a0),d0
0000EA48 B068 0008                  		cmp.w	obX(a0),d0	; has item reached its finish position?
0000EA4C 6700                       		beq.s	Got_SBZ2	; if yes, branch
0000EA4E 6C00                       		bge.s	Got_ChgPos2
0000EA50 4441                       		neg.w	d1
0000EA52                            
0000EA52                            	Got_ChgPos2:
0000EA52 D368 0008                  		add.w	d1,obX(a0)	; change item's position
0000EA56 3028 0008                  		move.w	obX(a0),d0
0000EA5A 6B00                       		bmi.s	locret_C748
0000EA5C 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000EA60 6400                       		bcc.s	locret_C748	; if yes, branch
0000EA62 6000 0000                  		bra.w	DisplaySprite
0000EA66                            ; ===========================================================================
0000EA66                            
0000EA66                            locret_C748:
0000EA66 4E75                       		rts	
0000EA68                            ; ===========================================================================
0000EA68                            
0000EA68                            Got_SBZ2:
0000EA68 0C28 0004 001A             		cmpi.b	#4,obFrame(a0)
0000EA6E 6600 0000                  		bne.w	DeleteObject
0000EA72 5428 0024                  		addq.b	#2,obRoutine(a0)
0000EA76 4238 F7CC                  		clr.b	(f_lockctrl).w	; unlock controls
0000EA7A 11FC 0000 F5C2             		move.b  #0,($FFFFF5C2).w ; Clear victory animation flag
0000EA8A                            ; ===========================================================================
0000EA8A                            
0000EA8A                            loc_C766:	; Routine $10
0000EA8A 5478 F72A                  		addq.w	#2,(v_limitright2).w
0000EA8E 0C78 2100 F72A             		cmpi.w	#$2100,(v_limitright2).w
0000EA94 6700 0000                  		beq.w	DeleteObject
0000EA98 4E75                       		rts	
0000EA9A                            ; ===========================================================================
0000EA9A                            		;    x-start,	x-main,	y-main,
0000EA9A                            		;				routine, frame number
0000EA9A                            
0000EA9A 0004 0124 00BC             Got_Config:	dc.w 4,		$124,	$BC			; "SONIC HAS"
0000EAA0 0200                       		dc.b 				2,	0
0000EAA2                            
0000EAA2 FEE0 0120 00D0             		dc.w -$120,	$120,	$D0			; "PASSED"
0000EAA8 0201                       		dc.b 				2,	1
0000EAAA                            
0000EAAA 040C 014C 00D6             		dc.w $40C,	$14C,	$D6			; "ACT" 1/2/3
0000EAB0 0206                       		dc.b 				2,	6
0000EAB2                            
0000EAB2 0520 0120 0112             		dc.w $520,	$120,	$112			; score
0000EAB8 0202                       		dc.b 				2,	2
0000EABA                            
0000EABA 0540 0120 00F2             		dc.w $540,	$120,	$F2			; time bonus
0000EAC0 0203                       		dc.b 				2,	3
0000EAC2                            
0000EAC2 0560 0120 0102             		dc.w $560,	$120,	$102			; ring bonus
0000EAC8 0204                       		dc.b 				2,	4
0000EACA                            
0000EACA 020C 014C 00CC             		dc.w $20C,	$14C,	$CC			; oval
0000EAD0 0205                       		dc.b 				2,	5
0000EAD0 0205                       		dc.b 				2,	5
0000EAD2                            		include	"_incObj\7E Special Stage Results.asm"
0000EAD2                            ; ---------------------------------------------------------------------------
0000EAD2                            ; Object 7E - special stage results screen
0000EAD2                            ; ---------------------------------------------------------------------------
0000EAD2                            
0000EAD2                            SSResult:
0000EAD2 7000                       		moveq	#0,d0
0000EAD4 1028 0024                  		move.b	obRoutine(a0),d0
0000EAD8 323B 0000                  		move.w	SSR_Index(pc,d0.w),d1
0000EADC 4EFB 1000                  		jmp	SSR_Index(pc,d1.w)
0000EAE0                            ; ===========================================================================
0000EAE0 0000                       SSR_Index:	dc.w SSR_ChkPLC-SSR_Index
0000EAE2 0000                       		dc.w SSR_Move-SSR_Index
0000EAE4 0000                       		dc.w SSR_Wait-SSR_Index
0000EAE6 0000                       		dc.w SSR_RingBonus-SSR_Index
0000EAE8 0000                       		dc.w SSR_Wait-SSR_Index
0000EAEA 0000                       		dc.w SSR_Exit-SSR_Index
0000EAEC 0000                       		dc.w SSR_Wait-SSR_Index
0000EAEE 0000                       		dc.w SSR_Continue-SSR_Index
0000EAF0 0000                       		dc.w SSR_Wait-SSR_Index
0000EAF2 0000                       		dc.w SSR_Exit-SSR_Index
0000EAF4 0000                       		dc.w loc_C91A-SSR_Index
0000EAF6                            
0000EAF6 =00000030                  ssr_mainX:	equ $30		; position for card to display on
0000EAF6                            ; ===========================================================================
0000EAF6                            
0000EAF6                            SSR_ChkPLC:	; Routine 0
0000EAF6 4AB8 F680                  		tst.l	(v_plc_buffer).w ; are the pattern load cues empty?
0000EAFA 6700                       		beq.s	SSR_Main	; if yes, branch
0000EAFC 4E75                       		rts	
0000EAFE                            ; ===========================================================================
0000EAFE                            
0000EAFE                            SSR_Main:
0000EAFE 2248                       		movea.l	a0,a1
0000EB00 45F9 0000 0000             		lea	(SSR_Config).l,a2
0000EB06 7203                       		moveq	#3,d1
0000EB08 0C78 0032 FE20             		cmpi.w	#50,(v_rings).w	; do you have 50 or more rings?
0000EB0E 6500                       		bcs.s	SSR_Loop	; if no, branch
0000EB10 5241                       		addq.w	#1,d1		; if yes, add 1	to d1 (number of sprites)
0000EB12                            
0000EB12                            	SSR_Loop:
0000EB12 12BC 0000                  		move.b	#id_SSResult,0(a1)
0000EB16 335A 0008                  		move.w	(a2)+,obX(a1)	; load start x-position
0000EB1A 335A 0030                  		move.w	(a2)+,ssr_mainX(a1) ; load main x-position
0000EB1E 335A 000A                  		move.w	(a2)+,obScreenY(a1) ; load y-position
0000EB22 135A 0024                  		move.b	(a2)+,obRoutine(a1)
0000EB26 135A 001A                  		move.b	(a2)+,obFrame(a1)
0000EB2A 237C 0000 0000 0004        		move.l	#Map_SSR,obMap(a1)
0000EB32 337C 8580 0002             		move.w	#$8580,obGfx(a1)
0000EB38 137C 0000 0001             		move.b	#0,obRender(a1)
0000EB3E 43E9 0040                  		lea	$40(a1),a1
0000EB42 51C9 FFCE                  		dbf	d1,SSR_Loop	; repeat sequence 3 or 4 times
0000EB46                            
0000EB46 7007                       		moveq	#7,d0
0000EB48 1238 FE57                  		move.b	(v_emeralds).w,d1
0000EB4C 6700                       		beq.s	loc_C842
0000EB4E 7000                       		moveq	#0,d0
0000EB50 0C01 0006                  		cmpi.b	#6,d1		; do you have all chaos	emeralds?
0000EB54 6600                       		bne.s	loc_C842	; if not, branch
0000EB56 7008                       		moveq	#8,d0		; load "Sonic got them all" text
0000EB58 317C 0018 0008             		move.w	#$18,obX(a0)
0000EB5E 317C 0118 0030             		move.w	#$118,ssr_mainX(a0) ; change position of text
0000EB64                            
0000EB64                            loc_C842:
0000EB64 1140 001A                  		move.b	d0,obFrame(a0)
0000EB68                            
0000EB68                            SSR_Move:	; Routine 2
0000EB68 7210                       		moveq	#$10,d1		; set horizontal speed
0000EB6A 3028 0030                  		move.w	ssr_mainX(a0),d0
0000EB6E B068 0008                  		cmp.w	obX(a0),d0	; has item reached its target position?
0000EB72 6700                       		beq.s	loc_C86C	; if yes, branch
0000EB74 6C00                       		bge.s	SSR_ChgPos
0000EB76 4441                       		neg.w	d1
0000EB78                            
0000EB78                            SSR_ChgPos:
0000EB78 D368 0008                  		add.w	d1,obX(a0)	; change item's position
0000EB7C                            
0000EB7C                            loc_C85A:
0000EB7C 3028 0008                  		move.w	obX(a0),d0
0000EB80 6B00                       		bmi.s	locret_C86A
0000EB82 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000EB86 6400                       		bcc.s	locret_C86A	; if yes, branch
0000EB88 6000 0000                  		bra.w	DisplaySprite
0000EB8C                            ; ===========================================================================
0000EB8C                            
0000EB8C                            locret_C86A:
0000EB8C 4E75                       		rts	
0000EB8E                            ; ===========================================================================
0000EB8E                            
0000EB8E                            loc_C86C:
0000EB8E 0C28 0002 001A             		cmpi.b	#2,obFrame(a0)
0000EB94 66E6                       		bne.s	loc_C85A
0000EB96 5428 0024                  		addq.b	#2,obRoutine(a0)
0000EB9A 317C 00B4 001E             		move.w	#180,obTimeFrame(a0) ; set time delay to 3 seconds
0000EBA0 11FC 0000 D800             		move.b	#id_SSRChaos,(v_objspace+$800).w ; load chaos emerald object
0000EBA6                            
0000EBA6                            SSR_Wait:	; Routine 4, 8, $C, $10
0000EBA6 5368 001E                  		subq.w	#1,obTimeFrame(a0) ; subtract 1 from time delay
0000EBAA 6600                       		bne.s	SSR_Display
0000EBAC 5428 0024                  		addq.b	#2,obRoutine(a0)
0000EBB0                            
0000EBB0                            SSR_Display:
0000EBB0 6000 0000                  		bra.w	DisplaySprite
0000EBB4                            ; ===========================================================================
0000EBB4                            
0000EBB4                            SSR_RingBonus:	; Routine 6
0000EBB4 6100 0000                  		bsr.w	DisplaySprite
0000EBB8 11FC 0001 F7D6             		move.b	#1,(f_endactbonus).w ; set ring bonus update flag
0000EBBE 4A78 F7D4                  		tst.w	(v_ringbonus).w	; is ring bonus	= zero?
0000EBC2 6700                       		beq.s	loc_C8C4	; if yes, branch
0000EBC4 0478 000A F7D4             		subi.w	#10,(v_ringbonus).w ; subtract 10 from ring bonus
0000EBCA 700A                       		moveq	#10,d0		; add 10 to score
0000EBCC 4EB9 0000 0000             		jsr	(AddPoints).l
0000EBD2 1038 FE0F                  		move.b	(v_vbla_byte).w,d0
0000EBD6 0200 0003                  		andi.b	#3,d0
0000EBDA 6600                       		bne.s	locret_C8EA
0000EBE6                            ; ===========================================================================
0000EBE6                            
0000EBE6                            loc_C8C4:
0000EBF0 5428 0024                  		addq.b	#2,obRoutine(a0)
0000EBF4 317C 00B4 001E             		move.w	#180,obTimeFrame(a0) ; set time delay to 3 seconds
0000EBFA 0C78 0032 FE20             		cmpi.w	#50,(v_rings).w	; do you have at least 50 rings?
0000EC00 6500                       		bcs.s	locret_C8EA	; if not, branch
0000EC02 317C 003C 001E             		move.w	#60,obTimeFrame(a0) ; set time delay to 1 second
0000EC08 5828 0024                  		addq.b	#4,obRoutine(a0) ; goto "SSR_Continue" routine
0000EC0C                            
0000EC0C                            locret_C8EA:
0000EC0C 4E75                       		rts	
0000EC0E                            ; ===========================================================================
0000EC0E                            
0000EC0E                            SSR_Exit:	; Routine $A, $12
0000EC0E 31FC 0001 FE02             		move.w	#1,(f_restart).w ; restart level
0000EC14 6000 0000                  		bra.w	DisplaySprite
0000EC18                            ; ===========================================================================
0000EC18                            
0000EC18                            SSR_Continue:	; Routine $E
0000EC18 11FC 0004 D6DA             		move.b	#4,(v_objspace+$6C0+obFrame).w
0000EC1E 11FC 0014 D6E4             		move.b	#$14,(v_objspace+$6C0+obRoutine).w
0000EC2E 5428 0024                  		addq.b	#2,obRoutine(a0)
0000EC32 317C 0168 001E             		move.w	#360,obTimeFrame(a0) ; set time delay to 6 seconds
0000EC38 6000 0000                  		bra.w	DisplaySprite
0000EC3C                            ; ===========================================================================
0000EC3C                            
0000EC3C                            loc_C91A:	; Routine $14
0000EC3C 1038 FE0F                  		move.b	(v_vbla_byte).w,d0
0000EC40 0200 000F                  		andi.b	#$F,d0
0000EC44 6600                       		bne.s	SSR_Display2
0000EC46 0868 0000 001A             		bchg	#0,obFrame(a0)
0000EC4C                            
0000EC4C                            SSR_Display2:
0000EC4C 6000 0000                  		bra.w	DisplaySprite
0000EC50                            ; ===========================================================================
0000EC50 0020 0120 00C4             SSR_Config:	dc.w $20, $120,	$C4	; start	x-pos, main x-pos, y-pos
0000EC56 0200                       		dc.b 2,	0		; rountine number, frame number
0000EC58 0320 0120 0118             		dc.w $320, $120, $118
0000EC5E 0201                       		dc.b 2,	1
0000EC60 0360 0120 0128             		dc.w $360, $120, $128
0000EC66 0202                       		dc.b 2,	2
0000EC68 01EC 011C 00C4             		dc.w $1EC, $11C, $C4
0000EC6E 0203                       		dc.b 2,	3
0000EC70 03A0 0120 0138             		dc.w $3A0, $120, $138
0000EC76 0206                       		dc.b 2,	6
0000EC76 0206                       		dc.b 2,	6
0000EC78                            		include	"_incObj\7F SS Result Chaos Emeralds.asm"
0000EC78                            ; ---------------------------------------------------------------------------
0000EC78                            ; Object 7F - chaos emeralds from the special stage results screen
0000EC78                            ; ---------------------------------------------------------------------------
0000EC78                            
0000EC78                            SSRChaos:
0000EC78 7000                       		moveq	#0,d0
0000EC7A 1028 0024                  		move.b	obRoutine(a0),d0
0000EC7E 323B 0000                  		move.w	SSRC_Index(pc,d0.w),d1
0000EC82 4EFB 1000                  		jmp	SSRC_Index(pc,d1.w)
0000EC86                            ; ===========================================================================
0000EC86 0000                       SSRC_Index:	dc.w SSRC_Main-SSRC_Index
0000EC88 0000                       		dc.w SSRC_Flash-SSRC_Index
0000EC8A                            
0000EC8A                            ; ---------------------------------------------------------------------------
0000EC8A                            ; X-axis positions for chaos emeralds
0000EC8A                            ; ---------------------------------------------------------------------------
0000EC8A 0110 0128 00F8 0140 00E0+  SSRC_PosData:	dc.w $110, $128, $F8, $140, $E0, $158
0000EC96                            ; ===========================================================================
0000EC96                            
0000EC96                            SSRC_Main:	; Routine 0
0000EC96 2248                       		movea.l	a0,a1
0000EC98 45F9 0000 EC8A             		lea	(SSRC_PosData).l,a2
0000EC9E 7400                       		moveq	#0,d2
0000ECA0 7200                       		moveq	#0,d1
0000ECA2 1238 FE57                  		move.b	(v_emeralds).w,d1 ; d1 is number of emeralds
0000ECA6 5301                       		subq.b	#1,d1		; subtract 1 from d1
0000ECA8 6500 0000                  		bcs.w	DeleteObject	; if you have 0	emeralds, branch
0000ECAC                            
0000ECAC                            	SSRC_Loop:
0000ECAC 12BC 0000                  		move.b	#id_SSRChaos,0(a1)
0000ECB0 335A 0008                  		move.w	(a2)+,obX(a1)	; set x-position
0000ECB4 337C 00F0 000A             		move.w	#$F0,obScreenY(a1) ; set y-position
0000ECBA 47F8 FE58                  		lea	(v_emldlist).w,a3 ; check which emeralds you have
0000ECBE 1633 2000                  		move.b	(a3,d2.w),d3
0000ECC2 1343 001A                  		move.b	d3,obFrame(a1)
0000ECC6 1343 001C                  		move.b	d3,obAnim(a1)
0000ECCA 5202                       		addq.b	#1,d2
0000ECCC 5429 0024                  		addq.b	#2,obRoutine(a1)
0000ECD0 237C 0000 0000 0004        		move.l	#Map_SSRC,obMap(a1)
0000ECD8 337C 8541 0002             		move.w	#$8541,obGfx(a1)
0000ECDE 137C 0000 0001             		move.b	#0,obRender(a1)
0000ECE4 43E9 0040                  		lea	$40(a1),a1	; next object
0000ECE8 51C9 FFC2                  		dbf	d1,SSRC_Loop	; loop for d1 number of	emeralds
0000ECEC                            
0000ECEC                            SSRC_Flash:	; Routine 2
0000ECEC 1028 001A                  		move.b	obFrame(a0),d0
0000ECF0 117C 0006 001A             		move.b	#6,obFrame(a0)	; load 6th frame (blank)
0000ECF6 0C00 0006                  		cmpi.b	#6,d0
0000ECFA 6600                       		bne.s	SSRC_Display
0000ECFC 1168 001C 001A             		move.b	obAnim(a0),obFrame(a0) ; load visible frame
0000ED02                            
0000ED02                            	SSRC_Display:
0000ED02 6000 0000                  		bra.w	DisplaySprite
0000ED02 6000 0000                  		bra.w	DisplaySprite
0000ED06                            
0000ED06                            ; ---------------------------------------------------------------------------
0000ED06                            ; Sprite mappings - zone title cards
0000ED06                            ; ---------------------------------------------------------------------------
0000ED06 0000                       Map_Card:	dc.w M_Card_GHZ-Map_Card
0000ED08 0000                       		dc.w M_Card_LZ-Map_Card
0000ED0A 0000                       		dc.w M_Card_MZ-Map_Card
0000ED0C 0000                       		dc.w M_Card_SLZ-Map_Card
0000ED0E 0000                       		dc.w M_Card_SYZ-Map_Card
0000ED10 0000                       		dc.w M_Card_SBZ-Map_Card
0000ED12 0000                       		dc.w M_Card_Zone-Map_Card
0000ED14 0000                       		dc.w M_Card_Act1-Map_Card
0000ED16 0000                       		dc.w M_Card_Act2-Map_Card
0000ED18 0000                       		dc.w M_Card_Act3-Map_Card
0000ED1A 0000                       		dc.w M_Card_Oval-Map_Card
0000ED1C 0000                       		dc.w M_Card_FZ-Map_Card
0000ED1E 09                         M_Card_GHZ:	dc.b 9 			; GREEN HILL
0000ED1F F805 0018 B4               		dc.b $F8, 5, 0,	$18, $B4
0000ED24 F805 003A C4               		dc.b $F8, 5, 0,	$3A, $C4
0000ED29 F805 0010 D4               		dc.b $F8, 5, 0,	$10, $D4
0000ED2E F805 0010 E4               		dc.b $F8, 5, 0,	$10, $E4
0000ED33 F805 002E F4               		dc.b $F8, 5, 0,	$2E, $F4
0000ED38 F805 001C 14               		dc.b $F8, 5, 0,	$1C, $14
0000ED3D F801 0020 24               		dc.b $F8, 1, 0,	$20, $24
0000ED42 F805 0026 2C               		dc.b $F8, 5, 0,	$26, $2C
0000ED47 F805 0026 3C               		dc.b $F8, 5, 0,	$26, $3C
0000ED4C                            		even
0000ED4C 09                         M_Card_LZ:	dc.b 9			; LABYRINTH
0000ED4D F805 0026 BC               		dc.b $F8, 5, 0,	$26, $BC
0000ED52 F805 0000 CC               		dc.b $F8, 5, 0,	0, $CC
0000ED57 F805 0004 DC               		dc.b $F8, 5, 0,	4, $DC
0000ED5C F805 004A EC               		dc.b $F8, 5, 0,	$4A, $EC
0000ED61 F805 003A FC               		dc.b $F8, 5, 0,	$3A, $FC
0000ED66 F801 0020 0C               		dc.b $F8, 1, 0,	$20, $C
0000ED6B F805 002E 14               		dc.b $F8, 5, 0,	$2E, $14
0000ED70 F805 0042 24               		dc.b $F8, 5, 0,	$42, $24
0000ED75 F805 001C 34               		dc.b $F8, 5, 0,	$1C, $34
0000ED7A                            		even
0000ED7A 0B                         M_Card_MZ:	dc.b $B	;  MARBLE | SCRAP RUINS
0000ED7B F805 003E 80               		dc.b $F8, 5, 0, $3E, $80	; S
0000ED80 F805 0008 90               		dc.b $F8, 5, 0, 8, $90		; C
0000ED85 F805 003A A0               		dc.b $F8, 5, 0, $3A, $A0	; R
0000ED8A F805 0000 B0               		dc.b $F8, 5, 0, 0, $B0		; A
0000ED8F F805 0036 C0               		dc.b $F8, 5, 0, $36, $C0	; P
0000ED94 F800 0056 D0               		dc.b $F8, 0, 0, $56, $D0	; Space
0000ED99 F805 003A E0               		dc.b $F8, 5, 0, $3A, $E0	; R
0000ED9E F805 0046 F0               		dc.b $F8, 5, 0, $46, $F0	; U
0000EDA3 F801 0020 00               		dc.b $F8, 1, 0, $20, $0	; I
0000EDA8 F805 002E 08               		dc.b $F8, 5, 0, $2E, $8	; N
0000EDAD F805 003E 18               		dc.b $F8, 5, 0, $3E, $18	; S
0000EDB2 09                         M_Card_SLZ:	dc.b 9			; STAR LIGHT
0000EDB3 F805 003E B4               		dc.b $F8, 5, 0,	$3E, $B4
0000EDB8 F805 0042 C4               		dc.b $F8, 5, 0,	$42, $C4
0000EDBD F805 0000 D4               		dc.b $F8, 5, 0,	0, $D4
0000EDC2 F805 003A E4               		dc.b $F8, 5, 0,	$3A, $E4
0000EDC7 F805 0026 04               		dc.b $F8, 5, 0,	$26, 4
0000EDCC F801 0020 14               		dc.b $F8, 1, 0,	$20, $14
0000EDD1 F805 0018 1C               		dc.b $F8, 5, 0,	$18, $1C
0000EDD6 F805 001C 2C               		dc.b $F8, 5, 0,	$1C, $2C
0000EDDB F805 0042 3C               		dc.b $F8, 5, 0,	$42, $3C
0000EDE0                            		even
0000EDE0 0A                         M_Card_SYZ:	dc.b $A			; SPRING YARD
0000EDE1 F805 003E AC               		dc.b $F8, 5, 0,	$3E, $AC
0000EDE6 F805 0036 BC               		dc.b $F8, 5, 0,	$36, $BC
0000EDEB F805 003A CC               		dc.b $F8, 5, 0,	$3A, $CC
0000EDF0 F801 0020 DC               		dc.b $F8, 1, 0,	$20, $DC
0000EDF5 F805 002E E4               		dc.b $F8, 5, 0,	$2E, $E4
0000EDFA F805 0018 F4               		dc.b $F8, 5, 0,	$18, $F4
0000EDFF F805 004A 14               		dc.b $F8, 5, 0,	$4A, $14
0000EE04 F805 0000 24               		dc.b $F8, 5, 0,	0, $24
0000EE09 F805 003A 34               		dc.b $F8, 5, 0,	$3A, $34
0000EE0E F805 000C 44               		dc.b $F8, 5, 0,	$C, $44
0000EE14 00                         		even
0000EE14 0A                         M_Card_SBZ:	dc.b $A			; SCRAP BRAIN
0000EE15 F805 003E AC               		dc.b $F8, 5, 0,	$3E, $AC
0000EE1A F805 0008 BC               		dc.b $F8, 5, 0,	8, $BC
0000EE1F F805 003A CC               		dc.b $F8, 5, 0,	$3A, $CC
0000EE24 F805 0000 DC               		dc.b $F8, 5, 0,	0, $DC
0000EE29 F805 0036 EC               		dc.b $F8, 5, 0,	$36, $EC
0000EE2E F805 0004 0C               		dc.b $F8, 5, 0,	4, $C
0000EE33 F805 003A 1C               		dc.b $F8, 5, 0,	$3A, $1C
0000EE38 F805 0000 2C               		dc.b $F8, 5, 0,	0, $2C
0000EE3D F801 0020 3C               		dc.b $F8, 1, 0,	$20, $3C
0000EE42 F805 002E 44               		dc.b $F8, 5, 0,	$2E, $44
0000EE48 00                         		even
0000EE48 04                         M_Card_Zone:	dc.b 4			; ZONE
0000EE49 F805 004E E0               		dc.b $F8, 5, 0,	$4E, $E0
0000EE4E F805 0032 F0               		dc.b $F8, 5, 0,	$32, $F0
0000EE53 F805 002E 00               		dc.b $F8, 5, 0,	$2E, 0
0000EE58 F805 0010 10               		dc.b $F8, 5, 0,	$10, $10
0000EE5E 00                         		even
0000EE5E 02                         M_Card_Act1:	dc.b 2			; ACT 1
0000EE5F 040C 0053 EC               		dc.b 4,	$C, 0, $53, $EC
0000EE64 F402 0057 0C               		dc.b $F4, 2, 0,	$57, $C
0000EE69 02                         M_Card_Act2:	dc.b 2			; ACT 2
0000EE6A 040C 0053 EC               		dc.b 4,	$C, 0, $53, $EC
0000EE6F F406 005A 08               		dc.b $F4, 6, 0,	$5A, 8
0000EE74 02                         M_Card_Act3:	dc.b 2			; ACT 3
0000EE75 040C 0053 EC               		dc.b 4,	$C, 0, $53, $EC
0000EE7A F406 0060 08               		dc.b $F4, 6, 0,	$60, 8
0000EE7F 0D                         M_Card_Oval:	dc.b $D			; Oval
0000EE80 E40C 0070 F4               		dc.b $E4, $C, 0, $70, $F4
0000EE85 E402 0074 14               		dc.b $E4, 2, 0,	$74, $14
0000EE8A EC04 0077 EC               		dc.b $EC, 4, 0,	$77, $EC
0000EE8F F405 0079 E4               		dc.b $F4, 5, 0,	$79, $E4
0000EE94 140C 1870 EC               		dc.b $14, $C, $18, $70,	$EC
0000EE99 0402 1874 E4               		dc.b 4,	2, $18,	$74, $E4
0000EE9E 0C04 1877 04               		dc.b $C, 4, $18, $77, 4
0000EEA3 FC05 1879 0C               		dc.b $FC, 5, $18, $79, $C
0000EEA8 EC08 007D FC               		dc.b $EC, 8, 0,	$7D, $FC
0000EEAD F40C 007C F4               		dc.b $F4, $C, 0, $7C, $F4
0000EEB2 FC08 007C F4               		dc.b $FC, 8, 0,	$7C, $F4
0000EEB7 040C 007C EC               		dc.b 4,	$C, 0, $7C, $EC
0000EEBC 0C08 007C EC               		dc.b $C, 8, 0, $7C, $EC
0000EEC2 00                         		even
0000EEC2 05                         M_Card_FZ:	dc.b 5			; FINAL
0000EEC3 F805 0014 DC               		dc.b $F8, 5, 0,	$14, $DC
0000EEC8 F801 0020 EC               		dc.b $F8, 1, 0,	$20, $EC
0000EECD F805 002E F4               		dc.b $F8, 5, 0,	$2E, $F4
0000EED2 F805 0000 04               		dc.b $F8, 5, 0,	0, 4
0000EED7 F805 0026 14               		dc.b $F8, 5, 0,	$26, $14
0000EEDC                            		even
0000EEDC                            
0000EEDC                            Map_Over:	include	"_maps\Game Over.asm"
0000EEDC                            ; ---------------------------------------------------------------------------
0000EEDC                            ; Sprite mappings - "GAME OVER"	and "TIME OVER"
0000EEDC                            ; ---------------------------------------------------------------------------
0000EEDC                            Map_Over_internal:
0000EEDC 0000                       		dc.w byte_CBAC-Map_Over_internal
0000EEDE 0000                       		dc.w byte_CBB7-Map_Over_internal
0000EEE0 0000                       		dc.w byte_CBC2-Map_Over_internal
0000EEE2 0000                       		dc.w byte_CBCD-Map_Over_internal
0000EEE4 02                         byte_CBAC:	dc.b 2			; GAME
0000EEE5 F80D 0000 B8               		dc.b $F8, $D, 0, 0, $B8
0000EEEA F80D 0008 D8               		dc.b $F8, $D, 0, 8, $D8
0000EEEF 02                         byte_CBB7:	dc.b 2			; OVER
0000EEF0 F80D 0014 08               		dc.b $F8, $D, 0, $14, 8
0000EEF5 F80D 000C 28               		dc.b $F8, $D, 0, $C, $28
0000EEFA 02                         byte_CBC2:	dc.b 2			; TIME
0000EEFB F809 001C C4               		dc.b $F8, 9, 0,	$1C, $C4
0000EF00 F80D 0008 DC               		dc.b $F8, $D, 0, 8, $DC
0000EF05 02                         byte_CBCD:	dc.b 2			; OVER
0000EF06 F80D 0014 0C               		dc.b $F8, $D, 0, $14, $C
0000EF0B F80D 000C 2C               		dc.b $F8, $D, 0, $C, $2C
0000EF10                            		even
0000EF10                            		even
0000EF10                            
0000EF10                            ; ---------------------------------------------------------------------------
0000EF10                            ; Sprite mappings - "SONIC HAS PASSED" title card
0000EF10                            ; ---------------------------------------------------------------------------
0000EF10 0000                       Map_Got:	dc.w M_Got_SonicHas-Map_Got
0000EF12 0000                       		dc.w M_Got_Passed-Map_Got
0000EF14 0000                       		dc.w M_Got_Score-Map_Got
0000EF16 0000                       		dc.w M_Got_TBonus-Map_Got
0000EF18 0000                       		dc.w M_Got_RBonus-Map_Got
0000EF1A FF6F                       		dc.w M_Card_Oval-Map_Got
0000EF1C FF4E                       		dc.w M_Card_Act1-Map_Got
0000EF1E FF59                       		dc.w M_Card_Act2-Map_Got
0000EF20 FF64                       		dc.w M_Card_Act3-Map_Got
0000EF22 08                         M_Got_SonicHas:	dc.b 8			; SONIC HAS
0000EF23 F805 003E B8               		dc.b $F8, 5, 0,	$3E, $B8
0000EF28 F805 0032 C8               		dc.b $F8, 5, 0,	$32, $C8
0000EF2D F805 002E D8               		dc.b $F8, 5, 0,	$2E, $D8
0000EF32 F801 0020 E8               		dc.b $F8, 1, 0,	$20, $E8
0000EF37 F805 0008 F0               		dc.b $F8, 5, 0,	8, $F0
0000EF3C F805 001C 10               		dc.b $F8, 5, 0,	$1C, $10
0000EF41 F805 0000 20               		dc.b $F8, 5, 0,	0, $20
0000EF46 F805 003E 30               		dc.b $F8, 5, 0,	$3E, $30
0000EF4B 06                         M_Got_Passed:	dc.b 6			; PASSED
0000EF4C F805 0036 D0               		dc.b $F8, 5, 0,	$36, $D0
0000EF51 F805 0000 E0               		dc.b $F8, 5, 0,	0, $E0
0000EF56 F805 003E F0               		dc.b $F8, 5, 0,	$3E, $F0
0000EF5B F805 003E 00               		dc.b $F8, 5, 0,	$3E, 0
0000EF60 F805 0010 10               		dc.b $F8, 5, 0,	$10, $10
0000EF65 F805 000C 20               		dc.b $F8, 5, 0,	$C, $20
0000EF6A 06                         M_Got_Score:	dc.b 6			; SCORE
0000EF6B F80D 014A B0               		dc.b $F8, $D, 1, $4A, $B0
0000EF70 F801 0162 D0               		dc.b $F8, 1, 1,	$62, $D0
0000EF75 F809 0164 18               		dc.b $F8, 9, 1,	$64, $18
0000EF7A F80D 016A 30               		dc.b $F8, $D, 1, $6A, $30
0000EF7F F704 006E CD               		dc.b $F7, 4, 0,	$6E, $CD
0000EF84 FF04 186E CD               		dc.b $FF, 4, $18, $6E, $CD
0000EF89 07                         M_Got_TBonus:	dc.b 7			; TIME BONUS
0000EF8A F80D 015A B0               		dc.b $F8, $D, 1, $5A, $B0
0000EF8F F80D 0066 D9               		dc.b $F8, $D, 0, $66, $D9
0000EF94 F801 014A F9               		dc.b $F8, 1, 1,	$4A, $F9
0000EF99 F704 006E F6               		dc.b $F7, 4, 0,	$6E, $F6
0000EF9E FF04 186E F6               		dc.b $FF, 4, $18, $6E, $F6
0000EFA3 F80D FFF0 28               		dc.b $F8, $D, $FF, $F0,	$28
0000EFA8 F801 0170 48               		dc.b $F8, 1, 1,	$70, $48
0000EFAD 07                         M_Got_RBonus:	dc.b 7			; RING BONUS
0000EFAE F80D 0152 B0               		dc.b $F8, $D, 1, $52, $B0
0000EFB3 F80D 0066 D9               		dc.b $F8, $D, 0, $66, $D9
0000EFB8 F801 014A F9               		dc.b $F8, 1, 1,	$4A, $F9
0000EFBD F704 006E F6               		dc.b $F7, 4, 0,	$6E, $F6
0000EFC2 FF04 186E F6               		dc.b $FF, 4, $18, $6E, $F6
0000EFC7 F80D FFF8 28               		dc.b $F8, $D, $FF, $F8,	$28
0000EFCC F801 0170 48               		dc.b $F8, 1, 1,	$70, $48
0000EFD2 00                         		even
0000EFD2                            ; ---------------------------------------------------------------------------
0000EFD2                            ; Sprite mappings - special stage results screen
0000EFD2                            ; ---------------------------------------------------------------------------
0000EFD2 0000                       Map_SSR:	dc.w M_SSR_Chaos-Map_SSR
0000EFD4 0000                       		dc.w M_SSR_Score-Map_SSR
0000EFD6 0000                       		dc.w byte_CD0D-Map_SSR
0000EFD8 FEAD                       		dc.w M_Card_Oval-Map_SSR
0000EFDA 0000                       		dc.w byte_CD31-Map_SSR
0000EFDC 0000                       		dc.w byte_CD46-Map_SSR
0000EFDE 0000                       		dc.w byte_CD5B-Map_SSR
0000EFE0 0000                       		dc.w byte_CD6B-Map_SSR
0000EFE2 0000                       		dc.w byte_CDA8-Map_SSR
0000EFE4 0D                         M_SSR_Chaos:	dc.b $D			; "CHAOS EMERALDS"
0000EFE5 F805 0008 90               		dc.b $F8, 5, 0,	8, $90
0000EFEA F805 001C A0               		dc.b $F8, 5, 0,	$1C, $A0
0000EFEF F805 0000 B0               		dc.b $F8, 5, 0,	0, $B0
0000EFF4 F805 0032 C0               		dc.b $F8, 5, 0,	$32, $C0
0000EFF9 F805 003E D0               		dc.b $F8, 5, 0,	$3E, $D0
0000EFFE F805 0010 F0               		dc.b $F8, 5, 0,	$10, $F0
0000F003 F805 002A 00               		dc.b $F8, 5, 0,	$2A, 0
0000F008 F805 0010 10               		dc.b $F8, 5, 0,	$10, $10
0000F00D F805 003A 20               		dc.b $F8, 5, 0,	$3A, $20
0000F012 F805 0000 30               		dc.b $F8, 5, 0,	0, $30
0000F017 F805 0026 40               		dc.b $F8, 5, 0,	$26, $40
0000F01C F805 000C 50               		dc.b $F8, 5, 0,	$C, $50
0000F021 F805 003E 60               		dc.b $F8, 5, 0,	$3E, $60
0000F026 06                         M_SSR_Score:	dc.b 6			; "SCORE"
0000F027 F80D 014A B0               		dc.b $F8, $D, 1, $4A, $B0
0000F02C F801 0162 D0               		dc.b $F8, 1, 1,	$62, $D0
0000F031 F809 0164 18               		dc.b $F8, 9, 1,	$64, $18
0000F036 F80D 016A 30               		dc.b $F8, $D, 1, $6A, $30
0000F03B F704 006E CD               		dc.b $F7, 4, 0,	$6E, $CD
0000F040 FF04 186E CD               		dc.b $FF, 4, $18, $6E, $CD
0000F045 07                         byte_CD0D:	dc.b 7
0000F046 F80D 0152 B0               		dc.b $F8, $D, 1, $52, $B0
0000F04B F80D 0066 D9               		dc.b $F8, $D, 0, $66, $D9
0000F050 F801 014A F9               		dc.b $F8, 1, 1,	$4A, $F9
0000F055 F704 006E F6               		dc.b $F7, 4, 0,	$6E, $F6
0000F05A FF04 186E F6               		dc.b $FF, 4, $18, $6E, $F6
0000F05F F80D FFF8 28               		dc.b $F8, $D, $FF, $F8,	$28
0000F064 F801 0170 48               		dc.b $F8, 1, 1,	$70, $48
0000F069 04                         byte_CD31:	dc.b 4
0000F06A F80D FFD1 B0               		dc.b $F8, $D, $FF, $D1,	$B0
0000F06F F80D FFD9 D0               		dc.b $F8, $D, $FF, $D9,	$D0
0000F074 F801 FFE1 F0               		dc.b $F8, 1, $FF, $E1, $F0
0000F079 F806 1FE3 40               		dc.b $F8, 6, $1F, $E3, $40
0000F07E 04                         byte_CD46:	dc.b 4
0000F07F F80D FFD1 B0               		dc.b $F8, $D, $FF, $D1,	$B0
0000F084 F80D FFD9 D0               		dc.b $F8, $D, $FF, $D9,	$D0
0000F089 F801 FFE1 F0               		dc.b $F8, 1, $FF, $E1, $F0
0000F08E F806 1FE9 40               		dc.b $F8, 6, $1F, $E9, $40
0000F093 03                         byte_CD5B:	dc.b 3
0000F094 F80D FFD1 B0               		dc.b $F8, $D, $FF, $D1,	$B0
0000F099 F80D FFD9 D0               		dc.b $F8, $D, $FF, $D9,	$D0
0000F09E F801 FFE1 F0               		dc.b $F8, 1, $FF, $E1, $F0
0000F0A3 0C                         byte_CD6B:	dc.b $C			; "SPECIAL STAGE"
0000F0A4 F805 003E 9C               		dc.b $F8, 5, 0,	$3E, $9C
0000F0A9 F805 0036 AC               		dc.b $F8, 5, 0,	$36, $AC
0000F0AE F805 0010 BC               		dc.b $F8, 5, 0,	$10, $BC
0000F0B3 F805 0008 CC               		dc.b $F8, 5, 0,	8, $CC
0000F0B8 F801 0020 DC               		dc.b $F8, 1, 0,	$20, $DC
0000F0BD F805 0000 E4               		dc.b $F8, 5, 0,	0, $E4
0000F0C2 F805 0026 F4               		dc.b $F8, 5, 0,	$26, $F4
0000F0C7 F805 003E 14               		dc.b $F8, 5, 0,	$3E, $14
0000F0CC F805 0042 24               		dc.b $F8, 5, 0,	$42, $24
0000F0D1 F805 0000 34               		dc.b $F8, 5, 0,	0, $34
0000F0D6 F805 0018 44               		dc.b $F8, 5, 0,	$18, $44
0000F0DB F805 0010 54               		dc.b $F8, 5, 0,	$10, $54
0000F0E0 0F                         byte_CDA8:	dc.b $F			; "SONIC GOT THEM ALL"
0000F0E1 F805 003E 88               		dc.b $F8, 5, 0,	$3E, $88
0000F0E6 F805 0032 98               		dc.b $F8, 5, 0,	$32, $98
0000F0EB F805 002E A8               		dc.b $F8, 5, 0,	$2E, $A8
0000F0F0 F801 0020 B8               		dc.b $F8, 1, 0,	$20, $B8
0000F0F5 F805 0008 C0               		dc.b $F8, 5, 0,	8, $C0
0000F0FA F805 0018 D8               		dc.b $F8, 5, 0,	$18, $D8
0000F0FF F805 0032 E8               		dc.b $F8, 5, 0,	$32, $E8
0000F104 F805 0042 F8               		dc.b $F8, 5, 0,	$42, $F8
0000F109 F805 0042 10               		dc.b $F8, 5, 0,	$42, $10
0000F10E F805 001C 20               		dc.b $F8, 5, 0,	$1C, $20
0000F113 F805 0010 30               		dc.b $F8, 5, 0,	$10, $30
0000F118 F805 002A 40               		dc.b $F8, 5, 0,	$2A, $40
0000F11D F805 0000 58               		dc.b $F8, 5, 0,	0, $58
0000F122 F805 0026 68               		dc.b $F8, 5, 0,	$26, $68
0000F127 F805 0026 78               		dc.b $F8, 5, 0,	$26, $78
0000F12C                            		even
0000F12C                            
0000F12C                            Map_SSRC:	include	"_maps\SS Result Chaos Emeralds.asm"
0000F12C                            ; ---------------------------------------------------------------------------
0000F12C                            ; Sprite mappings - chaos emeralds from	the special stage results screen
0000F12C                            ; ---------------------------------------------------------------------------
0000F12C                            Map_SSRC_internal:
0000F12C 0000                       		dc.w byte_CE02-Map_SSRC_internal
0000F12E 0000                       		dc.w byte_CE08-Map_SSRC_internal
0000F130 0000                       		dc.w byte_CE0E-Map_SSRC_internal
0000F132 0000                       		dc.w byte_CE14-Map_SSRC_internal
0000F134 0000                       		dc.w byte_CE1A-Map_SSRC_internal
0000F136 0000                       		dc.w byte_CE20-Map_SSRC_internal
0000F138 0000                       		dc.w byte_CE26-Map_SSRC_internal
0000F13A 01                         byte_CE02:	dc.b 1
0000F13B F805 2004 F8               		dc.b $F8, 5, $20, 4, $F8
0000F140 01                         byte_CE08:	dc.b 1
0000F141 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0000F146 01                         byte_CE0E:	dc.b 1
0000F147 F805 4004 F8               		dc.b $F8, 5, $40, 4, $F8
0000F14C 01                         byte_CE14:	dc.b 1
0000F14D F805 6004 F8               		dc.b $F8, 5, $60, 4, $F8
0000F152 01                         byte_CE1A:	dc.b 1
0000F153 F805 2008 F8               		dc.b $F8, 5, $20, 8, $F8
0000F158 01                         byte_CE20:	dc.b 1
0000F159 F805 200C F8               		dc.b $F8, 5, $20, $C, $F8
0000F15E 00                         byte_CE26:	dc.b 0			; Blank frame
0000F160 00                         		even
0000F160 00                         		even
0000F160                            
0000F160                            		include	"_incObj\36 Spikes.asm"
0000F160                            ; ---------------------------------------------------------------------------
0000F160                            ; Object 36 - spikes
0000F160                            ; ---------------------------------------------------------------------------
0000F160                            
0000F160                            Spikes:
0000F160 7000                       		moveq	#0,d0
0000F162 1028 0024                  		move.b	obRoutine(a0),d0
0000F166 323B 0000                  		move.w	Spik_Index(pc,d0.w),d1
0000F16A 4EFB 1000                  		jmp	Spik_Index(pc,d1.w)
0000F16E                            ; ===========================================================================
0000F16E 0000                       Spik_Index:	dc.w Spik_Main-Spik_Index
0000F170 0000                       		dc.w Spik_Solid-Spik_Index
0000F172                            
0000F172 =00000030                  spik_origX:	equ $30		; start X position
0000F172 =00000032                  spik_origY:	equ $32		; start Y position
0000F172                            
0000F172 0014                       Spik_Var:	dc.b 0,	$14		; frame	number,	object width
0000F174 0110                       		dc.b 1,	$10
0000F176 0204                       		dc.b 2,	4
0000F178 031C                       		dc.b 3,	$1C
0000F17A 0440                       		dc.b 4,	$40
0000F17C 0510                       		dc.b 5,	$10
0000F17E                            ; ===========================================================================
0000F17E                            
0000F17E                            Spik_Main:	; Routine 0
0000F17E 5428 0024                  		addq.b	#2,obRoutine(a0)
0000F182 217C 0000 0000 0004        		move.l	#Map_Spike,obMap(a0)
0000F18A 317C 051B 0002             		move.w	#$51B,obGfx(a0)
0000F190 0028 0004 0001             		ori.b	#4,obRender(a0)
0000F196 317C 0200 0018             		move.w	#$200,obPriority(a0)
0000F19C 1028 0028                  		move.b	obSubtype(a0),d0
0000F1A0 0228 000F 0028             		andi.b	#$F,obSubtype(a0)
0000F1A6 0240 00F0                  		andi.w	#$F0,d0
0000F1AA 43F9 0000 F172             		lea	(Spik_Var).l,a1
0000F1B0 E648                       		lsr.w	#3,d0
0000F1B2 D2C0                       		adda.w	d0,a1
0000F1B4 1159 001A                  		move.b	(a1)+,obFrame(a0)
0000F1B8 1159 0014                  		move.b	(a1)+,obActWid(a0)
0000F1BC 3168 0008 0030             		move.w	obX(a0),spik_origX(a0)
0000F1C2 3168 000C 0032             		move.w	obY(a0),spik_origY(a0)
0000F1C8                            
0000F1C8                            Spik_Solid:	; Routine 2
0000F1C8 6100 0000                  		bsr.w	Spik_Type0x	; make the object move
0000F1CC 343C 0004                  		move.w	#4,d2
0000F1D0 0C28 0005 001A             		cmpi.b	#5,obFrame(a0)	; is object type $5x ?
0000F1D6 6700                       		beq.s	Spik_SideWays	; if yes, branch
0000F1D8 0C28 0001 001A             		cmpi.b	#1,obFrame(a0)	; is object type $1x ?
0000F1DE 6600                       		bne.s	Spik_Upright	; if not, branch
0000F1E0 343C 0014                  		move.w	#$14,d2
0000F1E4                            
0000F1E4                            ; Spikes types $1x and $5x face	sideways
0000F1E4                            
0000F1E4                            Spik_SideWays:
0000F1E4 323C 001B                  		move.w	#$1B,d1
0000F1E8 3602                       		move.w	d2,d3
0000F1EA 5243                       		addq.w	#1,d3
0000F1EC 3828 0008                  		move.w	obX(a0),d4
0000F1F0 6100 0000                  		bsr.w	SolidObject
0000F1F4 0828 0003 0022             		btst	#3,obStatus(a0)
0000F1FA 6600                       		bne.s	Spik_Display
0000F1FC 0C44 0001                  		cmpi.w	#1,d4
0000F200 6700                       		beq.s	Spik_Hurt
0000F202 6000                       		bra.s	Spik_Display
0000F204                            ; ===========================================================================
0000F204                            
0000F204                            ; Spikes types $0x, $2x, $3x and $4x face up or	down
0000F204                            
0000F204                            Spik_Upright:
0000F204 7200                       		moveq	#0,d1
0000F206 1228 0014                  		move.b	obActWid(a0),d1
0000F20A 0641 000B                  		addi.w	#$B,d1
0000F20E 343C 0010                  		move.w	#$10,d2
0000F212 363C 0011                  		move.w	#$11,d3
0000F216 3828 0008                  		move.w	obX(a0),d4
0000F21A 6100 0000                  		bsr.w	SolidObject
0000F21E 0828 0003 0022             		btst	#3,obStatus(a0)
0000F224 6600                       		bne.s	Spik_Hurt
0000F226 4A44                       		tst.w	d4
0000F228 6A00                       		bpl.s	Spik_Display
0000F22A                            
0000F22A                            Spik_Hurt:
0000F22A 4A38 FE2D                  		tst.b	(v_invinc).w	; is Sonic invincible?
0000F22E 6600                       		bne.s	Spik_Display	; if yes, branch
0000F230 4A78 D030                  		tst.w	(v_player+$30).w ; +++ is Sonic invulnerable?
0000F234 6600                       		bne.s	Spik_Display	; +++ if yes, branch
0000F236 2F08                       		move.l	a0,-(sp)
0000F238 2448                       		movea.l	a0,a2
0000F23A 41F8 D000                  		lea	(v_player).w,a0
0000F23E 0C28 0004 0024             		cmpi.b	#4,obRoutine(a0)
0000F244 6400                       		bcc.s	loc_CF20
0000F246                            		; This fixes the infamous "spike bug"
0000F246 4A68 0030                  		tst.w	flashtime(a0)	; Is Sonic flashing after being hurt?
0000F24A 6600                       		bne.s	loc_CF20	; If so, skip getting hurt
0000F24C 4EF9 0000 00E0             		jmp	(loc_E0).l	; This is a copy of the above code that was pushed aside for this
0000F252                            loc_D5A2:
0000F252 9680                       		sub.l	d0,d3
0000F254 2143 000C                  		move.l	d3,obY(a0)
0000F258 4EB9 0000 0000             		jsr	(HurtSonic).l
0000F25E                            
0000F25E                            loc_CF20:
0000F25E 205F                       		movea.l	(sp)+,a0
0000F260                            
0000F260                            Spik_Display:
0000F260 6100 0000                  		bsr.w	DisplaySprite
0000F282 4E75                       		rts	
0000F284                            ; ===========================================================================
0000F284                            
0000F284                            Spik_Type0x:
0000F284 7000                       		moveq	#0,d0
0000F286 1028 0028                  		move.b	obSubtype(a0),d0
0000F28A D040                       		add.w	d0,d0
0000F28C 323B 0000                  		move.w	Spik_TypeIndex(pc,d0.w),d1
0000F290 4EFB 1000                  		jmp	Spik_TypeIndex(pc,d1.w)
0000F294                            ; ===========================================================================
0000F294 0000                       Spik_TypeIndex:	dc.w Spik_Type00-Spik_TypeIndex
0000F296 0000                       		dc.w Spik_Type01-Spik_TypeIndex
0000F298 0000                       		dc.w Spik_Type02-Spik_TypeIndex
0000F29A                            ; ===========================================================================
0000F29A                            
0000F29A                            Spik_Type00:
0000F29A 4E75                       		rts			; don't move the object
0000F29C                            ; ===========================================================================
0000F29C                            
0000F29C                            Spik_Type01:
0000F29C 6100 0000                  		bsr.w	Spik_Wait
0000F2A0 7000                       		moveq	#0,d0
0000F2A2 1028 0034                  		move.b	$34(a0),d0
0000F2A6 D068 0032                  		add.w	spik_origY(a0),d0
0000F2AA 3140 000C                  		move.w	d0,obY(a0)	; move the object vertically
0000F2AE 4E75                       		rts	
0000F2B0                            ; ===========================================================================
0000F2B0                            
0000F2B0                            Spik_Type02:
0000F2B0 6100 0000                  		bsr.w	Spik_Wait
0000F2B4 7000                       		moveq	#0,d0
0000F2B6 1028 0034                  		move.b	$34(a0),d0
0000F2BA D068 0030                  		add.w	spik_origX(a0),d0
0000F2BE 3140 0008                  		move.w	d0,obX(a0)	; move the object horizontally
0000F2C2 4E75                       		rts	
0000F2C4                            ; ===========================================================================
0000F2C4                            
0000F2C4                            Spik_Wait:
0000F2C4 4A68 0038                  		tst.w	$38(a0)		; is time delay	= zero?
0000F2C8 6700                       		beq.s	loc_CFA4	; if yes, branch
0000F2CA 5368 0038                  		subq.w	#1,$38(a0)	; subtract 1 from time delay
0000F2CE 6600                       		bne.s	locret_CFE6
0000F2D0 4A28 0001                  		tst.b	obRender(a0)
0000F2D4 6A00                       		bpl.s	locret_CFE6
0000F2E0 6000                       		bra.s	locret_CFE6
0000F2E2                            ; ===========================================================================
0000F2E2                            
0000F2E2                            loc_CFA4:
0000F2E2 4A68 0036                  		tst.w	$36(a0)
0000F2E6 6700                       		beq.s	loc_CFC6
0000F2E8 0468 0800 0034             		subi.w	#$800,$34(a0)
0000F2EE 6400                       		bcc.s	locret_CFE6
0000F2F0 317C 0000 0034             		move.w	#0,$34(a0)
0000F2F6 317C 0000 0036             		move.w	#0,$36(a0)
0000F2FC 317C 003C 0038             		move.w	#60,$38(a0)	; set time delay to 1 second
0000F302 6000                       		bra.s	locret_CFE6
0000F304                            ; ===========================================================================
0000F304                            
0000F304                            loc_CFC6:
0000F304 0668 0800 0034             		addi.w	#$800,$34(a0)
0000F30A 0C68 2000 0034             		cmpi.w	#$2000,$34(a0)
0000F310 6500                       		bcs.s	locret_CFE6
0000F312 317C 2000 0034             		move.w	#$2000,$34(a0)
0000F318 317C 0001 0036             		move.w	#1,$36(a0)
0000F31E 317C 003C 0038             		move.w	#60,$38(a0)	; set time delay to 1 second
0000F324                            
0000F324                            locret_CFE6:
0000F324 4E75                       		rts	
0000F324 4E75                       		rts	
0000F326                            Map_Spike:	include	"_maps\Spikes.asm"
0000F326                            ; --------------------------------------------------------------------------------
0000F326                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0000F326                            ; --------------------------------------------------------------------------------
0000F326                            
0000F326                            SME_XgeaQ:	
0000F326 0000 0000                  		dc.w SME_XgeaQ_C-SME_XgeaQ, SME_XgeaQ_1C-SME_XgeaQ	
0000F32A 0000 0000                  		dc.w SME_XgeaQ_2C-SME_XgeaQ, SME_XgeaQ_32-SME_XgeaQ	
0000F32E 0000 0000                  		dc.w SME_XgeaQ_42-SME_XgeaQ, SME_XgeaQ_61-SME_XgeaQ	
0000F332 03                         SME_XgeaQ_C:	dc.b 3	
0000F333 F003 2004 EC               		dc.b $F0, 3, $20, 4, $EC	
0000F338 F003 2004 FC               		dc.b $F0, 3, $20, 4, $FC	
0000F33D F003 2004 0C               		dc.b $F0, 3, $20, 4, $C	
0000F342 03                         SME_XgeaQ_1C:	dc.b 3	
0000F343 EC0C 2000 F0               		dc.b $EC, $C, $20, 0, $F0	
0000F348 FC0C 2000 F0               		dc.b $FC, $C, $20, 0, $F0	
0000F34D 0C0C 2000 F0               		dc.b $C, $C, $20, 0, $F0	
0000F352 01                         SME_XgeaQ_2C:	dc.b 1	
0000F353 F003 2004 FC               		dc.b $F0, 3, $20, 4, $FC	
0000F358 03                         SME_XgeaQ_32:	dc.b 3	
0000F359 F003 2004 E4               		dc.b $F0, 3, $20, 4, $E4	
0000F35E F003 2004 FC               		dc.b $F0, 3, $20, 4, $FC	
0000F363 F003 2004 14               		dc.b $F0, 3, $20, 4, $14	
0000F368 06                         SME_XgeaQ_42:	dc.b 6	
0000F369 F003 2004 C0               		dc.b $F0, 3, $20, 4, $C0	
0000F36E F003 2004 D8               		dc.b $F0, 3, $20, 4, $D8	
0000F373 F003 2004 F0               		dc.b $F0, 3, $20, 4, $F0	
0000F378 F003 2004 08               		dc.b $F0, 3, $20, 4, 8	
0000F37D F003 2004 20               		dc.b $F0, 3, $20, 4, $20	
0000F382 F003 2004 38               		dc.b $F0, 3, $20, 4, $38	
0000F387 01                         SME_XgeaQ_61:	dc.b 1	
0000F388 FC0C 2000 F0               		dc.b $FC, $C, $20, 0, $F0	
0000F38E 00                         		even
0000F38E 00                         		even
0000F38E                            		include	"_incObj\3B Purple Rock.asm"
0000F38E                            ; ---------------------------------------------------------------------------
0000F38E                            ; Object 3B - purple rock (GHZ)
0000F38E                            ; ---------------------------------------------------------------------------
0000F38E                            
0000F38E                            PurpleRock:
0000F38E 7000                       		moveq	#0,d0
0000F390 1028 0024                  		move.b	obRoutine(a0),d0
0000F394 323B 0000                  		move.w	Rock_Index(pc,d0.w),d1
0000F398 4EFB 1000                  		jmp	Rock_Index(pc,d1.w)
0000F39C                            ; ===========================================================================
0000F39C 0000                       Rock_Index:	dc.w Rock_Main-Rock_Index
0000F39E 0000                       		dc.w Rock_Solid-Rock_Index
0000F3A0                            ; ===========================================================================
0000F3A0                            
0000F3A0                            Rock_Main:	; Routine 0
0000F3A0 5428 0024                  		addq.b	#2,obRoutine(a0)
0000F3A4 217C 0000 0000 0004        		move.l	#Map_PRock,obMap(a0)
0000F3AC 317C 63D0 0002             		move.w	#$63D0,obGfx(a0)
0000F3B2 117C 0004 0001             		move.b	#4,obRender(a0)
0000F3B8 117C 0013 0014             		move.b	#$13,obActWid(a0)
0000F3BE 317C 0200 0018             		move.w	#$200,obPriority(a0)
0000F3C4                            
0000F3C4                            Rock_Solid:	; Routine 2
0000F3C4 323C 001B                  		move.w	#$1B,d1
0000F3C8 343C 0010                  		move.w	#$10,d2
0000F3CC 363C 0010                  		move.w	#$10,d3
0000F3D0 3828 0008                  		move.w	obX(a0),d4
0000F3D4 6100 0000                  		bsr.w	SolidObject
0000F3D8 6100 0000                  		bsr.w	DisplaySprite
0000F3FA 4E75                       		rts	
0000F3FA 4E75                       		rts	
0000F3FC                            		include	"_incObj\49 Waterfall Sound.asm"
0000F3FC                            ; ---------------------------------------------------------------------------
0000F3FC                            ; Object 49 - waterfall	sound effect (GHZ)
0000F3FC                            ; ---------------------------------------------------------------------------
0000F3FC                            
0000F3FC                            WaterSound:
0000F3FC 7000                       		moveq	#0,d0
0000F3FE 1028 0024                  		move.b	obRoutine(a0),d0
0000F402 323B 0000                  		move.w	WSnd_Index(pc,d0.w),d1
0000F406 4EFB 1000                  		jmp	WSnd_Index(pc,d1.w)
0000F40A                            ; ===========================================================================
0000F40A 0000                       WSnd_Index:	dc.w WSnd_Main-WSnd_Index
0000F40C 0000                       		dc.w WSnd_PlaySnd-WSnd_Index
0000F40E                            ; ===========================================================================
0000F40E                            
0000F40E                            WSnd_Main:	; Routine 0
0000F40E 5428 0024                  		addq.b	#2,obRoutine(a0)
0000F412 117C 0004 0001             		move.b	#4,obRender(a0)
0000F418                            
0000F418                            WSnd_PlaySnd:	; Routine 2
0000F418 1038 FE0F                  		move.b	(v_vbla_byte).w,d0 ; get low byte of VBlank counter
0000F41C 0200 003F                  		andi.b	#$3F,d0
0000F420 6600                       		bne.s	WSnd_ChkDel
0000F42C                            
0000F42C                            	WSnd_ChkDel:
0000F44A 4E75                       		rts	
0000F44A 4E75                       		rts	
0000F44C                            Map_PRock:	include	"_maps\Purple Rock.asm"
0000F44C                            ; ---------------------------------------------------------------------------
0000F44C                            ; Sprite mappings - purple rock	(GHZ)
0000F44C                            ; ---------------------------------------------------------------------------
0000F44C                            Map_PRock_internal:
0000F44C 0000                       		dc.w byte_D110-Map_PRock_internal
0000F44E 02                         byte_D110:	dc.b 2
0000F44F F00B 0000 E8               		dc.b $F0, $B, 0, 0, $E8
0000F454 F00B 000C 00               		dc.b $F0, $B, 0, $C, 0
0000F45A 00                         		even
0000F45A 00                         		even
0000F45A                            		include	"_incObj\3C Smashable Wall.asm"
0000F45A                            ; ---------------------------------------------------------------------------
0000F45A                            ; Object 3C - smashable	wall (GHZ, SLZ)
0000F45A                            ; ---------------------------------------------------------------------------
0000F45A                            
0000F45A                            SmashWall:
0000F45A 7000                       		moveq	#0,d0
0000F45C 1028 0024                  		move.b	obRoutine(a0),d0
0000F460 323B 0000                  		move.w	Smash_Index(pc,d0.w),d1
0000F464 4EBB 1000                  		jsr	Smash_Index(pc,d1.w)
0000F468 6000 0000                  		bra.w	RememberState
0000F46C                            ; ===========================================================================
0000F46C 0000                       Smash_Index:	dc.w Smash_Main-Smash_Index
0000F46E 0000                       		dc.w Smash_Solid-Smash_Index
0000F470 0000                       		dc.w Smash_FragMove-Smash_Index
0000F472                            
0000F472 =00000030                  smash_speed:	equ $30		; Sonic's horizontal speed
0000F472                            ; ===========================================================================
0000F472                            
0000F472                            Smash_Main:	; Routine 0
0000F472 5428 0024                  		addq.b	#2,obRoutine(a0)
0000F476 217C 0000 0000 0004        		move.l	#Map_Smash,obMap(a0)
0000F47E 317C 450F 0002             		move.w	#$450F,obGfx(a0)
0000F484 117C 0004 0001             		move.b	#4,obRender(a0)
0000F48A 117C 0010 0014             		move.b	#$10,obActWid(a0)
0000F490 317C 0200 0018             		move.w	#$200,obPriority(a0)
0000F496 1168 0028 001A             		move.b	obSubtype(a0),obFrame(a0)
0000F49C                            
0000F49C                            Smash_Solid:	; Routine 2
0000F49C 3178 D010 0030             		move.w	(v_player+obVelX).w,smash_speed(a0) ; load Sonic's horizontal speed
0000F4A2 323C 001B                  		move.w	#$1B,d1
0000F4A6 343C 0020                  		move.w	#$20,d2
0000F4AA 363C 0020                  		move.w	#$20,d3
0000F4AE 3828 0008                  		move.w	obX(a0),d4
0000F4B2 6100 0000                  		bsr.w	SolidObject	
0000F4B6 4A04                       		tst.b	d4
0000F4B8 6E00 0000                  		bgt.w	@chkroll	
0000F4BC 6700 0000                  		beq.w	@donothing								
0000F4C0 0828 0005 0022             		btst	#5,obStatus(a0)	; is Sonic pushing against the wall?
0000F4C6 6700 0000                  		beq.w	@donothing	; if yes, branch
0000F4CA                            ; ===========================================================================
0000F4CA                            
0000F4CA                            @chkroll:
0000F4CA 0C29 0000 001C             		cmpi.b	#id_Roll,obAnim(a1) ; is Sonic rolling?
0000F4D0 6600                       		bne.s	@donothing	; if not, branch	
0000F4D2 3028 0030                  		move.w	smash_speed(a0),d0
0000F4D6 6A00                       		bpl.s	@chkspeed
0000F4D8 4440                       		neg.w	d0
0000F4DA                            
0000F4DA                            	@chkspeed:
0000F4DA 0C40 0480                  		cmpi.w	#$480,d0	; is Sonic's speed $480 or higher?
0000F4DE 6500                       		bcs.s	@donothing	; if not, branch	
0000F4E0                            		
0000F4E0                            	@continue:	
0000F4E0 08A8 0005 0022             		bclr	#5,obStatus(a0)
0000F4E6 3368 0030 0010             		move.w	smash_speed(a0),obVelX(a1)
0000F4EC 49F9 0000 0000             		lea	(Smash_FragSpd1).l,a4 ;	use fragments that move	right
0000F4F2 3028 0008                  		move.w	obX(a0),d0
0000F4F6 B069 0008                  		cmp.w	obX(a1),d0	; is Sonic to the right	of the block?
0000F4FA 6500                       		bcs.s	@smash		; if yes, branch
0000F4FC 49F9 0000 0000             		lea	(Smash_FragSpd2).l,a4 ;	use fragments that move	left
0000F502                            
0000F502                            	@smash:
0000F502 3369 0010 0020             		move.w	obVelX(a1),obInertia(a1)
0000F508 08A9 0005 0022             		bclr	#5,obStatus(a1)
0000F50E 7206                       		moveq	#6,d1		; load 7 fragments
0000F510 343C 0070                  		move.w	#$70,d2
0000F514 6100                       		bsr.s	SmashObject
0000F516                            
0000F516                            @donothing:
0000F516 4E75                       		rts	
0000F518                            
0000F518                            Smash_FragMove:	; Routine 4
0000F518 588F                       		addq.l	#4,sp
0000F51A 6100 0000                  		bsr.w	SpeedToPos
0000F51E 0668 0070 0012             		addi.w	#$70,obVelY(a0)	; make fragment	fall faster
0000F524 4A28 0001                  		tst.b	obRender(a0)
0000F528 6A00 0000                  		bpl.w	DeleteObject
0000F52C 6000 0000                  		bra.w	DisplaySprite
0000F530                            
0000F530                            
0000F530                            
0000F530                            		include	"_incObj\sub SmashObject.asm"
0000F530                            ; ---------------------------------------------------------------------------
0000F530                            ; Subroutine to	smash a	block (GHZ walls and MZ	blocks)
0000F530                            ; ---------------------------------------------------------------------------
0000F530                            
0000F530                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000F530                            
0000F530                            
0000F530                            SmashObject:
0000F530 7000                       		moveq	#0,d0
0000F532 1028 001A                  		move.b	obFrame(a0),d0
0000F536 D040                       		add.w	d0,d0
0000F538 2668 0004                  		movea.l	obMap(a0),a3
0000F53C D6F3 0000                  		adda.w	(a3,d0.w),a3
0000F540 524B                       		addq.w	#1,a3
0000F542 08E8 0005 0001             		bset	#5,obRender(a0)
0000F548 1810                       		move.b	0(a0),d4
0000F54A 1A28 0001                  		move.b	obRender(a0),d5
0000F54E 2248                       		movea.l	a0,a1
0000F550 137C 0004 0024             		move.b	#4,obRoutine(a1)
0000F556 1284                       		move.b	d4,0(a1)
0000F558 234B 0004                  		move.l	a3,obMap(a1)
0000F55C 1345 0001                  		move.b	d5,obRender(a1)
0000F560 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000F566 3368 000C 000C             		move.w	obY(a0),obY(a1)
0000F56C 3368 0002 0002             		move.w	obGfx(a0),obGfx(a1)
0000F572 3368 0018 0018             		move.w	obPriority(a0),obPriority(a1)
0000F578 1368 0014 0014             		move.b	obActWid(a0),obActWid(a1)
0000F57E 335C 0010                  		move.w	(a4)+,obVelX(a1)
0000F582 335C 0012                  		move.w	(a4)+,obVelY(a1)
0000F586 5341                       		subq.w #1,d1
0000F588 43F8 D800                  		lea (v_lvlobjspace).w,a1
0000F58C 303C 005F                  		move.w #$5F,d0
0000F590                            ; ===========================================================================
0000F590                            
0000F590                            Smash_Loop:
0000F590 4A11                       		tst.b	(a1)
0000F592 6700                       		beq.s	@cont
0000F594 43E9 0040                  		lea		$40(a1),a1
0000F598 51C8 FFF6                  		dbf 	d0,Smash_Loop 
0000F59C 6600                       		bne.s	Smash_PlaySnd
0000F59E                            
0000F59E                            	@cont:
0000F59E 5A4B                       		addq.w #5,a3
0000F5A0                            
0000F5A0                            Smash_LoadFrag:				; XREF: SmashObject
0000F5A0 137C 0004 0024             		move.b	#4,obRoutine(a1)
0000F5A6 1284                       		move.b	d4,0(a1)
0000F5A8 234B 0004                  		move.l	a3,obMap(a1)
0000F5AC 1345 0001                  		move.b	d5,obRender(a1)
0000F5B0 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000F5B6 3368 000C 000C             		move.w	obY(a0),obY(a1)
0000F5BC 3368 0002 0002             		move.w	obGfx(a0),obGfx(a1)
0000F5C2 3368 0018 0018             		move.w	obPriority(a0),obPriority(a1)
0000F5C8 1368 0014 0014             		move.b	obActWid(a0),obActWid(a1)
0000F5CE 335C 0010                  		move.w	(a4)+,obVelX(a1)
0000F5D2 335C 0012                  		move.w	(a4)+,obVelY(a1)
0000F5D6 51C9 FFB8                  		dbf	d1,Smash_Loop
0000F5DA                            
0000F5DA                            Smash_PlaySnd:
0000F5DA 303C 0000                  		move.w	#sfx_WallSmash,d0
0000F5DE 4EF9 0000 1254             		jmp	(PlaySound_Special).l ; play smashing sound
0000F5E4                            
0000F5E4                            ; End of function SmashObject
0000F5E4                            ; End of function SmashObject
0000F5E4                            
0000F5E4                            ; ===========================================================================
0000F5E4                            ; Smashed block	fragment speeds
0000F5E4                            ;
0000F5E4 0400 FB00                  Smash_FragSpd1:	dc.w $400, -$500	; x-move speed,	y-move speed
0000F5E8 0600 FF00                  		dc.w $600, -$100
0000F5EC 0600 0100                  		dc.w $600, $100
0000F5F0 0400 0500                  		dc.w $400, $500
0000F5F4 0600 FA00                  		dc.w $600, -$600
0000F5F8 0800 FE00                  		dc.w $800, -$200
0000F5FC 0800 0200                  		dc.w $800, $200
0000F600 0600 0600                  		dc.w $600, $600
0000F604                            
0000F604 FA00 FA00                  Smash_FragSpd2:	dc.w -$600, -$600
0000F608 F800 FE00                  		dc.w -$800, -$200
0000F60C F800 0200                  		dc.w -$800, $200
0000F610 FA00 0600                  		dc.w -$600, $600
0000F614 FC00 FB00                  		dc.w -$400, -$500
0000F618 FA00 FF00                  		dc.w -$600, -$100
0000F61C FA00 0100                  		dc.w -$600, $100
0000F620 FC00 0500                  		dc.w -$400, $500
0000F624                            
0000F624                            Map_Smash:	include	"_maps\Smashable Walls.asm"
0000F624                            ; ---------------------------------------------------------------------------
0000F624                            ; Sprite mappings - smashable walls (GHZ, SLZ)
0000F624                            ; ---------------------------------------------------------------------------
0000F624                            Map_Smash_internal:
0000F624 0000                       		dc.w @left-Map_Smash_internal
0000F626 0000                       		dc.w @middle-Map_Smash_internal
0000F628 0000                       		dc.w @right-Map_Smash_internal
0000F62A 08                         @left:		dc.b 8
0000F62B E005 0000 F0               		dc.b $E0, 5, 0,	0, $F0
0000F630 F005 0000 F0               		dc.b $F0, 5, 0,	0, $F0
0000F635 0005 0000 F0               		dc.b 0,	5, 0, 0, $F0
0000F63A 1005 0000 F0               		dc.b $10, 5, 0,	0, $F0
0000F63F E005 0004 00               		dc.b $E0, 5, 0,	4, 0
0000F644 F005 0004 00               		dc.b $F0, 5, 0,	4, 0
0000F649 0005 0004 00               		dc.b 0,	5, 0, 4, 0
0000F64E 1005 0004 00               		dc.b $10, 5, 0,	4, 0
0000F653 08                         @middle:	dc.b 8
0000F654 E005 0004 F0               		dc.b $E0, 5, 0,	4, $F0
0000F659 F005 0004 F0               		dc.b $F0, 5, 0,	4, $F0
0000F65E 0005 0004 F0               		dc.b 0,	5, 0, 4, $F0
0000F663 1005 0004 F0               		dc.b $10, 5, 0,	4, $F0
0000F668 E005 0004 00               		dc.b $E0, 5, 0,	4, 0
0000F66D F005 0004 00               		dc.b $F0, 5, 0,	4, 0
0000F672 0005 0004 00               		dc.b 0,	5, 0, 4, 0
0000F677 1005 0004 00               		dc.b $10, 5, 0,	4, 0
0000F67C 08                         @right:		dc.b 8
0000F67D E005 0004 F0               		dc.b $E0, 5, 0,	4, $F0
0000F682 F005 0004 F0               		dc.b $F0, 5, 0,	4, $F0
0000F687 0005 0004 F0               		dc.b 0,	5, 0, 4, $F0
0000F68C 1005 0004 F0               		dc.b $10, 5, 0,	4, $F0
0000F691 E005 0008 00               		dc.b $E0, 5, 0,	8, 0
0000F696 F005 0008 00               		dc.b $F0, 5, 0,	8, 0
0000F69B 0005 0008 00               		dc.b 0,	5, 0, 8, 0
0000F6A0 1005 0008 00               		dc.b $10, 5, 0,	8, 0
0000F6A6 00                         		even
0000F6A6 00                         		even
0000F6A6                            
0000F6A6                            ; ---------------------------------------------------------------------------
0000F6A6                            ; Object code execution subroutine
0000F6A6                            ; ---------------------------------------------------------------------------
0000F6A6                            
0000F6A6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000F6A6                            
0000F6A6                            
0000F6A6                            
0000F6A6                            ExecuteObjects: ; XREF: GM_Title; et al
0000F6A6 41F8 D000                  		lea (v_objspace).w,a0 ; set address for object RAM
0000F6AA 7E7F                       		moveq #$7F,d7
0000F6AC 7000                       		moveq #0,d0
0000F6AE 0C38 0006 D024             		cmpi.b #6,(v_player+obRoutine).w
0000F6B4 6400                       		bcc.s loc_D362
0000F6B6                            
0000F6B6                            loc_D348:
0000F6B6 1010                       		move.b (a0),d0 ; load object number from RAM
0000F6B8 6700                       		beq.s loc_D358
0000F6BA D040                       		add.w d0,d0
0000F6BC D040                       		add.w d0,d0
0000F6BE 227B 0000                  		movea.l Obj_Index-4(pc,d0.w),a1
0000F6C2 4E91                       		jsr (a1) ; run the object's code
0000F6C4 7000                       		moveq #0,d0
0000F6C6                            
0000F6C6                            loc_D358:
0000F6C6 41E8 0040                  		lea $40(a0),a0 ; next object
0000F6CA 51CF FFEA                  		dbf d7,loc_D348
0000F6CE 4E75                       		rts
0000F6D0                            ; ===========================================================================
0000F6D0                            
0000F6D0                            loc_D362:
0000F6D0 7E1F                       		moveq #$1F,d7
0000F6D2 61E2                       		bsr.s loc_D348
0000F6D4 7E5F                       		moveq #$5F,d7
0000F6D6                            
0000F6D6                            loc_D368:
0000F6D6 7000                       		moveq #0,d0 ; Clear d0 quickly
0000F6D8 1010                       		move.b (a0),d0 ; get the object's ID
0000F6DA 6700                       		beq.s loc_D37C ; if it's obj00, skip it
0000F6DC 4A28 0001                  		tst.b obRender(a0) ; should we render it?
0000F6E0 6A00                       		bpl.s loc_D37C ; if not, skip it
0000F6E2 3028 0018                  		move.w obpriority(a0),d0 ; move object's priority to d0
0000F6E6 0828 0006 0001             		btst #6,obRender(a0) ; is the compound sprites flag set?
0000F6EC 6700                       		beq.s loc_D378 ; if not, branch
0000F6EE 303C 0200                  		move.w #$200,d0 ; move $200 to d0
0000F6F2                            
0000F6F2                            loc_D378:
0000F6F2 6100 0000                  		bsr.w DisplaySprite2
0000F6F6                            		
0000F6F6                            loc_D37C:
0000F6F6 41E8 0040                  		lea $40(a0),a0
0000F6FA 51CF FFDA                  		dbf d7,loc_D368
0000F6FE 4E75                       		rts
0000F700                            ; End of function ExecuteObjects
0000F700                            
0000F700                            ; ===========================================================================
0000F700                            ; ---------------------------------------------------------------------------
0000F700                            ; Object pointers
0000F700                            ; ---------------------------------------------------------------------------
0000F700                            Obj_Index:
0000F700                            		include	"_inc\Object Pointers.asm"
0000F700                            ; ---------------------------------------------------------------------------
0000F700                            ; Object pointers
0000F700                            ; ---------------------------------------------------------------------------
0000F700 0000 0000                  ptr_SonicPlayer:	dc.l SonicPlayer	; $01
0000F704 0000 0000                  ptr_Obj02:			dc.l ObjectFall
0000F708 0000 0000                  ptr_Obj03:			dc.l Obj03
0000F70C 0000 0000                  ptr_GShieldItem:	dc.l GShieldItem
0000F710 0000 0000                  ptr_Obj05:		dc.l Spindash_dust
0000F714 0000 B446                  ptr_Mozzietron:		dc.l Mozzietron
0000F718 0000 0000                  ptr_RShieldItem:	dc.l RShieldItem	
0000F71C 0000 0000                  ptr_Splash:		dc.l Splash		; $08
0000F720 0000 0000                  ptr_SonicSpecial:	dc.l SonicSpecial
0000F724 0000 0000                  ptr_DrownCount:		dc.l DrownCount
0000F728 0000 0000                  ptr_Pole:		dc.l Pole
0000F72C 0000 0000                  ptr_FlapDoor:		dc.l FlapDoor
0000F730 0000 0000                  ptr_Signpost:		dc.l Signpost
0000F734 0000 C86C                  ptr_TitleSonic:		dc.l TitleSonic
0000F738 0000 C8EC                  ptr_PSBTM:		dc.l PSBTM
0000F73C 0000 0000                  ptr_Obj10:		dc.l Obj10		; $10
0000F740 0000 8F6A                  ptr_Bridge:		dc.l Bridge
0000F744 0000 0000                  ptr_SpinningLight:	dc.l SpinningLight
0000F748 0000 0000                  ptr_LavaMaker:		dc.l LavaMaker
0000F74C 0000 0000                  ptr_LavaBall:		dc.l LavaBall
0000F750 0000 9590                  ptr_SwingingPlatform:	dc.l SwingingPlatform
0000F754 0000 0000                  ptr_Harpoon:		dc.l Harpoon
0000F758 0000 98DC                  ptr_Helix:		dc.l Helix
0000F75C 0000 9A68                  ptr_BasicPlatform:	dc.l BasicPlatform	; $18
0000F760 0000 0000                  ptr_InvStars:		dc.l InvStarsObj
0000F764 0000 9E44                  ptr_CollapseLedge:	dc.l CollapseLedge
0000F768 0000 0000                  ptr_WaterSurface:	dc.l WaterSurface
0000F76C 0000 A438                  ptr_Scenery:		dc.l Scenery
0000F770 0000 A4DA                  ptr_MagicSwitch:	dc.l MagicSwitch
0000F774 0000 A7C2                  ptr_BallHog:		dc.l BallHog
0000F778 0000 B15C                  ptr_Crabmeat:		dc.l Crabmeat
0000F77C 0000 A890                  ptr_Cannonball:		dc.l Cannonball		; $20
0000F780 0000 0000                  ptr_HUD:		dc.l HUD
0000F784 0000 B578                  ptr_BuzzBomber:		dc.l BuzzBomber
0000F788 0000 B6CA                  ptr_Missile:		dc.l Missile
0000F78C 0000 A962                  ptr_MissileDissolve:	dc.l MissileDissolve
0000F790 0000 B924                  ptr_Rings:		dc.l Rings
0000F794 0000 C16E                  ptr_Monitor:		dc.l Monitor
0000F798 0000 A9D2                  ptr_ExplosionItem:	dc.l ExplosionItem
0000F79C 0000 AB90                  ptr_Animals:		dc.l Animals		; $28
0000F7A0 0000 B07E                  ptr_Points:		dc.l Points
0000F7A4 0000 A5B0                  ptr_AutoDoor:		dc.l AutoDoor
0000F7A8 0000 CE30                  ptr_Chopper:		dc.l Chopper
0000F7AC 0000 CEEA                  ptr_Jaws:		dc.l Jaws
0000F7B0 0000 CFB4                  ptr_Burrobot:		dc.l Burrobot
0000F7B4 0000 C36C                  ptr_PowerUp:		dc.l PowerUp
0000F7B8 0000 D1C8                  ptr_LargeGrass:		dc.l LargeGrass
0000F7BC 0000 D6AA                  ptr_GlassBlock:		dc.l GlassBlock		; $30
0000F7C0 0000 D986                  ptr_ChainStomp:		dc.l ChainStomp
0000F7C4 0000 E034                  ptr_Button:		dc.l Button
0000F7C8 0000 E1D8                  ptr_PushBlock:		dc.l PushBlock
0000F7CC 0000 E60A                  ptr_TitleCard:		dc.l TitleCard
0000F7D0 0000 D4EA                  ptr_GrassFire:		dc.l GrassFire
0000F7D4 0000 F160                  ptr_Spikes:		dc.l Spikes
0000F7D8 0000 BB80                  ptr_RingLoss:		dc.l RingLoss
0000F7DC 0000 0000                  ptr_ShieldItem:		dc.l ShieldItem		; $38
0000F7E0 0000 E7BA                  ptr_GameOverCard:	dc.l GameOverCard
0000F7E4 0000 E878                  ptr_GotThroughCard:	dc.l GotThroughCard
0000F7E8 0000 F38E                  ptr_PurpleRock:		dc.l PurpleRock
0000F7EC 0000 F45A                  ptr_SmashWall:		dc.l SmashWall
0000F7F0 0000 0000                  ptr_BossGreenHill:	dc.l BossGreenHill
0000F7F4 0000 0000                  ptr_Prison:		dc.l Prison
0000F7F8 0000 AA64                  ptr_ExplosionBomb:	dc.l ExplosionBomb
0000F7FC 0000 0000                  ptr_MotoBug:		dc.l MotoBug		; $40
0000F800 0000 0000                  ptr_Springs:		dc.l Springs
0000F804 0000 0000                  ptr_Newtron:		dc.l Newtron
0000F808 0000 0000                  ptr_Roller:		dc.l Roller
0000F80C 0000 0000                  ptr_EdgeWalls:		dc.l EdgeWalls
0000F810 0000 DCA2                  ptr_SideStomp:		dc.l SideStomp
0000F814 0000 0000                  ptr_MarbleBrick:	dc.l MarbleBrick
0000F818 0000 0000                  ptr_Bumper:		dc.l Bumper
0000F81C 0000 0000                  ptr_BossBall:		dc.l BossBall		; $48
0000F820 0000 F3FC                  ptr_WaterSound:		dc.l WaterSound
0000F824 0000 0000                  ptr_VanishSonic:	dc.l VanishSonic
0000F828 0000 BE42                  ptr_GiantRing:		dc.l GiantRing
0000F82C 0000 0000                  ptr_GeyserMaker:	dc.l GeyserMaker
0000F830 0000 0000                  ptr_LavaGeyser:		dc.l LavaGeyser
0000F834 0000 0000                  ptr_SpShieldItem:	dc.l SpShieldItem
0000F838 0000 0000                  ptr_Obj4F:		dc.l Obj4F
0000F83C 0000 0000                  ptr_Yadrin:		dc.l Yadrin		; $50
0000F840 0000 0000                  ptr_SmashBlock:		dc.l SmashBlock
0000F844 0000 0000                  ptr_MovingBlock:	dc.l MovingBlock
0000F848 0000 9F54                  ptr_CollapseFloor:	dc.l CollapseFloor
0000F84C 0000 0000                  ptr_LavaTag:		dc.l LavaTag
0000F850 0000 0000                  ptr_Basaran:		dc.l Basaran
0000F854 0000 0000                  ptr_FloatingBlock:	dc.l FloatingBlock
0000F858 0000 0000                  ptr_SpikeBall:		dc.l SpikeBall
0000F85C 0000 0000                  ptr_BigSpikeBall:	dc.l BigSpikeBall	; $58
0000F860 0000 0000                  ptr_Elevator:		dc.l Elevator
0000F864 0000 0000                  ptr_CirclingPlatform:	dc.l CirclingPlatform
0000F868 0000 0000                  ptr_Staircase:		dc.l Staircase
0000F86C 0000 0000                  ptr_Pylon:		dc.l Pylon
0000F870 0000 0000                  ptr_Fan:		dc.l Fan
0000F874 0000 0000                  ptr_Seesaw:		dc.l Seesaw
0000F878 0000 0000                  ptr_Bomb:		dc.l Bomb
0000F87C 0000 0000                  ptr_Orbinaut:		dc.l Orbinaut		; $60
0000F880 0000 0000                  ptr_LabyrinthBlock:	dc.l LabyrinthBlock
0000F884 0000 0000                  ptr_Gargoyle:		dc.l Gargoyle
0000F888 0000 0000                  ptr_LabyrinthConvey:	dc.l LabyrinthConvey
0000F88C 0000 0000                  ptr_Bubble:		dc.l Bubble
0000F890 0000 0000                  ptr_Waterfall:		dc.l Waterfall
0000F894 0000 0000                  ptr_Junction:		dc.l Junction
0000F898 0000 0000                  ptr_RunningDisc:	dc.l RunningDisc
0000F89C 0000 0000                  ptr_Conveyor:		dc.l Conveyor		; $68
0000F8A0 0000 0000                  ptr_SpinPlatform:	dc.l SpinPlatform
0000F8A4 0000 0000                  ptr_Saws:		dc.l Saws
0000F8A8 0000 0000                  ptr_ScrapStomp:		dc.l ScrapStomp
0000F8AC 0000 0000                  ptr_VanishPlatform:	dc.l VanishPlatform
0000F8B0 0000 0000                  ptr_Flamethrower:	dc.l Flamethrower
0000F8B4 0000 0000                  ptr_Electro:		dc.l Electro
0000F8B8 0000 0000                  ptr_SpinConvey:		dc.l SpinConvey
0000F8BC 0000 0000                  ptr_Girder:		dc.l Girder		; $70
0000F8C0 0000 0000                  ptr_Invisibarrier:	dc.l Invisibarrier
0000F8C4 0000 0000                  ptr_Teleport:		dc.l Teleport
0000F8C8 0000 0000                  ptr_BossMarble:		dc.l BossMarble
0000F8CC 0000 0000                  ptr_BossFire:		dc.l BossFire
0000F8D0 0000 0000                  ptr_BossSpringYard:	dc.l BossSpringYard
0000F8D4 0000 0000                  ptr_BossBlock:		dc.l BossBlock
0000F8D8 0000 0000                  ptr_BossLabyrinth:	dc.l BossLabyrinth
0000F8DC 0000 0000                  ptr_Caterkiller:	dc.l Caterkiller	; $78
0000F8E0 0000 0000                  ptr_Lamppost:		dc.l Lamppost
0000F8E4 0000 0000                  ptr_BossStarLight:	dc.l BossStarLight
0000F8E8 0000 0000                  ptr_BossSpikeball:	dc.l BossSpikeball
0000F8EC 0000 BF1C                  ptr_RingFlash:		dc.l RingFlash
0000F8F0 0000 0000                  ptr_HiddenBonus:	dc.l HiddenBonus
0000F8F4 0000 EAD2                  ptr_SSResult:		dc.l SSResult
0000F8F8 0000 EC78                  ptr_SSRChaos:		dc.l SSRChaos
0000F8FC 0000 5E5A                  ptr_ContScrItem:	dc.l ContScrItem	; $80
0000F900 0000 5F72                  ptr_ContSonic:		dc.l ContSonic
0000F904 0000 0000                  ptr_ScrapEggman:	dc.l ScrapEggman
0000F908 0000 0000                  ptr_FalseFloor:		dc.l FalseFloor
0000F90C 0000 0000                  ptr_EggmanCylinder:	dc.l EggmanCylinder
0000F910 0000 0000                  ptr_BossFinal:		dc.l BossFinal
0000F914 0000 0000                  ptr_BossPlasma:		dc.l BossPlasma
0000F918 0000 63FC                  ptr_EndSonic:		dc.l EndSonic
0000F91C 0000 6556                  ptr_EndChaos:		dc.l EndChaos		; $88
0000F920 0000 6630                  ptr_EndSTH:		dc.l EndSTH
0000F924 0000 0000                  ptr_CreditsText:	dc.l CreditsText
0000F928 0000 6896                  ptr_EndEggman:		dc.l EndEggman
0000F92C 0000 6976                  ptr_TryChaos:		dc.l TryChaos
0000F930                            
0000F930                            NullObject:
0000F930                            		;jmp	(DeleteObject).l	; It would be safer to have this instruction here, but instead it just falls through to ObjectFall
0000F930                            
0000F930 =00000001                  id_SonicPlayer:		equ ((ptr_SonicPlayer-Obj_Index)/4)+1		; $01
0000F930 =00000002                  id_Obj02:		equ ((ptr_Obj02-Obj_Index)/4)+1
0000F930 =00000003                  id_Obj03:		equ ((ptr_Obj03-Obj_Index)/4)+1
0000F930 =00000004                  id_GShielditem:		equ ((ptr_GShieldItem-Obj_Index)/4)+1
0000F930 =00000005                  id_Obj05:		equ ((ptr_Obj05-Obj_Index)/4)+1
0000F930 =00000006                  id_Mozzietron:		equ ((ptr_Mozzietron-Obj_Index)/4)+1
0000F930 =00000007                  id_RShieldItem:		equ ((ptr_RShieldItem-Obj_Index)/4)+1	
0000F930 =00000008                  id_Splash:		equ ((ptr_Splash-Obj_Index)/4)+1		; $08
0000F930 =00000009                  id_SonicSpecial:	equ ((ptr_SonicSpecial-Obj_Index)/4)+1
0000F930 =0000000A                  id_DrownCount:		equ ((ptr_DrownCount-Obj_Index)/4)+1
0000F930 =0000000B                  id_Pole:		equ ((ptr_Pole-Obj_Index)/4)+1
0000F930 =0000000C                  id_FlapDoor:		equ ((ptr_FlapDoor-Obj_Index)/4)+1
0000F930 =0000000D                  id_Signpost:		equ ((ptr_Signpost-Obj_Index)/4)+1
0000F930 =0000000E                  id_TitleSonic:		equ ((ptr_TitleSonic-Obj_Index)/4)+1
0000F930 =0000000F                  id_PSBTM:		equ ((ptr_PSBTM-Obj_Index)/4)+1
0000F930 =00000010                  id_Obj10:		equ ((ptr_Obj10-Obj_Index)/4)+1			; $10
0000F930 =00000011                  id_Bridge:		equ ((ptr_Bridge-Obj_Index)/4)+1
0000F930 =00000012                  id_SpinningLight:	equ ((ptr_SpinningLight-Obj_Index)/4)+1
0000F930 =00000013                  id_LavaMaker:		equ ((ptr_LavaMaker-Obj_Index)/4)+1
0000F930 =00000014                  id_LavaBall:		equ ((ptr_LavaBall-Obj_Index)/4)+1
0000F930 =00000015                  id_SwingingPlatform:	equ ((ptr_SwingingPlatform-Obj_Index)/4)+1
0000F930 =00000016                  id_Harpoon:		equ ((ptr_Harpoon-Obj_Index)/4)+1
0000F930 =00000017                  id_Helix:		equ ((ptr_Helix-Obj_Index)/4)+1
0000F930 =00000018                  id_BasicPlatform:	equ ((ptr_BasicPlatform-Obj_Index)/4)+1		; $18
0000F930 =00000019                  id_InvStars:		equ ((ptr_InvStars-Obj_Index)/4)+1
0000F930 =0000001A                  id_CollapseLedge:	equ ((ptr_CollapseLedge-Obj_Index)/4)+1
0000F930 =0000001B                  id_WaterSurface:	equ ((ptr_WaterSurface-Obj_Index)/4)+1
0000F930 =0000001C                  id_Scenery:		equ ((ptr_Scenery-Obj_Index)/4)+1
0000F930 =0000001D                  id_MagicSwitch:		equ ((ptr_MagicSwitch-Obj_Index)/4)+1
0000F930 =0000001E                  id_BallHog:		equ ((ptr_BallHog-Obj_Index)/4)+1
0000F930 =0000001F                  id_Crabmeat:		equ ((ptr_Crabmeat-Obj_Index)/4)+1
0000F930 =00000020                  id_Cannonball:		equ ((ptr_Cannonball-Obj_Index)/4)+1		; $20
0000F930 =00000021                  id_HUD:			equ ((ptr_HUD-Obj_Index)/4)+1
0000F930 =00000022                  id_BuzzBomber:		equ ((ptr_BuzzBomber-Obj_Index)/4)+1
0000F930 =00000023                  id_Missile:		equ ((ptr_Missile-Obj_Index)/4)+1
0000F930 =00000024                  id_MissileDissolve:	equ ((ptr_MissileDissolve-Obj_Index)/4)+1
0000F930 =00000025                  id_Rings:		equ ((ptr_Rings-Obj_Index)/4)+1
0000F930 =00000026                  id_Monitor:		equ ((ptr_Monitor-Obj_Index)/4)+1
0000F930 =00000027                  id_ExplosionItem:	equ ((ptr_ExplosionItem-Obj_Index)/4)+1
0000F930 =00000028                  id_Animals:		equ ((ptr_Animals-Obj_Index)/4)+1		; $28
0000F930 =00000029                  id_Points:		equ ((ptr_Points-Obj_Index)/4)+1
0000F930 =0000002A                  id_AutoDoor:		equ ((ptr_AutoDoor-Obj_Index)/4)+1
0000F930 =0000002B                  id_Chopper:		equ ((ptr_Chopper-Obj_Index)/4)+1
0000F930 =0000002C                  id_Jaws:		equ ((ptr_Jaws-Obj_Index)/4)+1
0000F930 =0000002D                  id_Burrobot:		equ ((ptr_Burrobot-Obj_Index)/4)+1
0000F930 =0000002E                  id_PowerUp:		equ ((ptr_PowerUp-Obj_Index)/4)+1
0000F930 =0000002F                  id_LargeGrass:		equ ((ptr_LargeGrass-Obj_Index)/4)+1
0000F930 =00000030                  id_GlassBlock:		equ ((ptr_GlassBlock-Obj_Index)/4)+1		; $30
0000F930 =00000031                  id_ChainStomp:		equ ((ptr_ChainStomp-Obj_Index)/4)+1
0000F930 =00000032                  id_Button:		equ ((ptr_Button-Obj_Index)/4)+1
0000F930 =00000033                  id_PushBlock:		equ ((ptr_PushBlock-Obj_Index)/4)+1
0000F930 =00000034                  id_TitleCard:		equ ((ptr_TitleCard-Obj_Index)/4)+1
0000F930 =00000035                  id_GrassFire:		equ ((ptr_GrassFire-Obj_Index)/4)+1
0000F930 =00000036                  id_Spikes:		equ ((ptr_Spikes-Obj_Index)/4)+1
0000F930 =00000037                  id_RingLoss:		equ ((ptr_RingLoss-Obj_Index)/4)+1
0000F930 =00000038                  id_ShieldItem:		equ ((ptr_ShieldItem-Obj_Index)/4)+1		; $38
0000F930 =00000039                  id_GameOverCard:	equ ((ptr_GameOverCard-Obj_Index)/4)+1
0000F930 =0000003A                  id_GotThroughCard:	equ ((ptr_GotThroughCard-Obj_Index)/4)+1
0000F930 =0000003B                  id_PurpleRock:		equ ((ptr_PurpleRock-Obj_Index)/4)+1
0000F930 =0000003C                  id_SmashWall:		equ ((ptr_SmashWall-Obj_Index)/4)+1
0000F930 =0000003D                  id_BossGreenHill:	equ ((ptr_BossGreenHill-Obj_Index)/4)+1
0000F930 =0000003E                  id_Prison:		equ ((ptr_Prison-Obj_Index)/4)+1
0000F930 =0000003F                  id_ExplosionBomb:	equ ((ptr_ExplosionBomb-Obj_Index)/4)+1
0000F930 =00000040                  id_MotoBug:		equ ((ptr_MotoBug-Obj_Index)/4)+1		; $40
0000F930 =00000041                  id_Springs:		equ ((ptr_Springs-Obj_Index)/4)+1
0000F930 =00000042                  id_Newtron:		equ ((ptr_Newtron-Obj_Index)/4)+1
0000F930 =00000043                  id_Roller:		equ ((ptr_Roller-Obj_Index)/4)+1
0000F930 =00000044                  id_EdgeWalls:		equ ((ptr_EdgeWalls-Obj_Index)/4)+1
0000F930 =00000045                  id_SideStomp:		equ ((ptr_SideStomp-Obj_Index)/4)+1
0000F930 =00000046                  id_MarbleBrick:		equ ((ptr_MarbleBrick-Obj_Index)/4)+1
0000F930 =00000047                  id_Bumper:		equ ((ptr_Bumper-Obj_Index)/4)+1
0000F930 =00000048                  id_BossBall:		equ ((ptr_BossBall-Obj_Index)/4)+1		; $48
0000F930 =00000049                  id_WaterSound:		equ ((ptr_WaterSound-Obj_Index)/4)+1
0000F930 =0000004A                  id_VanishSonic:		equ ((ptr_VanishSonic-Obj_Index)/4)+1
0000F930 =0000004B                  id_GiantRing:		equ ((ptr_GiantRing-Obj_Index)/4)+1
0000F930 =0000004C                  id_GeyserMaker:		equ ((ptr_GeyserMaker-Obj_Index)/4)+1
0000F930 =0000004D                  id_LavaGeyser:		equ ((ptr_LavaGeyser-Obj_Index)/4)+1
0000F930 =0000004E                  id_SpShieldItem:		equ ((ptr_SpShieldItem-Obj_Index)/4)+1
0000F930 =0000004F                  id_Obj4F:		equ ((ptr_Obj4F-Obj_Index)/4)+1
0000F930 =00000050                  id_Yadrin:		equ ((ptr_Yadrin-Obj_Index)/4)+1		; $50
0000F930 =00000051                  id_SmashBlock:		equ ((ptr_SmashBlock-Obj_Index)/4)+1
0000F930 =00000052                  id_MovingBlock:		equ ((ptr_MovingBlock-Obj_Index)/4)+1
0000F930 =00000053                  id_CollapseFloor:	equ ((ptr_CollapseFloor-Obj_Index)/4)+1
0000F930 =00000054                  id_LavaTag:		equ ((ptr_LavaTag-Obj_Index)/4)+1
0000F930 =00000055                  id_Basaran:		equ ((ptr_Basaran-Obj_Index)/4)+1
0000F930 =00000056                  id_FloatingBlock:	equ ((ptr_FloatingBlock-Obj_Index)/4)+1
0000F930 =00000057                  id_SpikeBall:		equ ((ptr_SpikeBall-Obj_Index)/4)+1
0000F930 =00000058                  id_BigSpikeBall:	equ ((ptr_BigSpikeBall-Obj_Index)/4)+1		; $58
0000F930 =00000059                  id_Elevator:		equ ((ptr_Elevator-Obj_Index)/4)+1
0000F930 =0000005A                  id_CirclingPlatform:	equ ((ptr_CirclingPlatform-Obj_Index)/4)+1
0000F930 =0000005B                  id_Staircase:		equ ((ptr_Staircase-Obj_Index)/4)+1
0000F930 =0000005C                  id_Pylon:		equ ((ptr_Pylon-Obj_Index)/4)+1
0000F930 =0000005D                  id_Fan:			equ ((ptr_Fan-Obj_Index)/4)+1
0000F930 =0000005E                  id_Seesaw:		equ ((ptr_Seesaw-Obj_Index)/4)+1
0000F930 =0000005F                  id_Bomb:		equ ((ptr_Bomb-Obj_Index)/4)+1
0000F930 =00000060                  id_Orbinaut:		equ ((ptr_Orbinaut-Obj_Index)/4)+1		; $60
0000F930 =00000061                  id_LabyrinthBlock:	equ ((ptr_LabyrinthBlock-Obj_Index)/4)+1
0000F930 =00000062                  id_Gargoyle:		equ ((ptr_Gargoyle-Obj_Index)/4)+1
0000F930 =00000063                  id_LabyrinthConvey:	equ ((ptr_LabyrinthConvey-Obj_Index)/4)+1
0000F930 =00000064                  id_Bubble:		equ ((ptr_Bubble-Obj_Index)/4)+1
0000F930 =00000065                  id_Waterfall:		equ ((ptr_Waterfall-Obj_Index)/4)+1
0000F930 =00000066                  id_Junction:		equ ((ptr_Junction-Obj_Index)/4)+1
0000F930 =00000067                  id_RunningDisc:		equ ((ptr_RunningDisc-Obj_Index)/4)+1
0000F930 =00000068                  id_Conveyor:		equ ((ptr_Conveyor-Obj_Index)/4)+1		; $68
0000F930 =00000069                  id_SpinPlatform:	equ ((ptr_SpinPlatform-Obj_Index)/4)+1
0000F930 =0000006A                  id_Saws:		equ ((ptr_Saws-Obj_Index)/4)+1
0000F930 =0000006B                  id_ScrapStomp:		equ ((ptr_ScrapStomp-Obj_Index)/4)+1
0000F930 =0000006C                  id_VanishPlatform:	equ ((ptr_VanishPlatform-Obj_Index)/4)+1
0000F930 =0000006D                  id_Flamethrower:	equ ((ptr_Flamethrower-Obj_Index)/4)+1
0000F930 =0000006E                  id_Electro:		equ ((ptr_Electro-Obj_Index)/4)+1
0000F930 =0000006F                  id_SpinConvey:		equ ((ptr_SpinConvey-Obj_Index)/4)+1
0000F930 =00000070                  id_Girder:		equ ((ptr_Girder-Obj_Index)/4)+1		; $70
0000F930 =00000071                  id_Invisibarrier:	equ ((ptr_Invisibarrier-Obj_Index)/4)+1
0000F930 =00000072                  id_Teleport:		equ ((ptr_Teleport-Obj_Index)/4)+1
0000F930 =00000073                  id_BossMarble:		equ ((ptr_BossMarble-Obj_Index)/4)+1
0000F930 =00000074                  id_BossFire:		equ ((ptr_BossFire-Obj_Index)/4)+1
0000F930 =00000075                  id_BossSpringYard:	equ ((ptr_BossSpringYard-Obj_Index)/4)+1
0000F930 =00000076                  id_BossBlock:		equ ((ptr_BossBlock-Obj_Index)/4)+1
0000F930 =00000077                  id_BossLabyrinth:	equ ((ptr_BossLabyrinth-Obj_Index)/4)+1
0000F930 =00000078                  id_Caterkiller:		equ ((ptr_Caterkiller-Obj_Index)/4)+1		; $78
0000F930 =00000079                  id_Lamppost:		equ ((ptr_Lamppost-Obj_Index)/4)+1
0000F930 =0000007A                  id_BossStarLight:	equ ((ptr_BossStarLight-Obj_Index)/4)+1
0000F930 =0000007B                  id_BossSpikeball:	equ ((ptr_BossSpikeball-Obj_Index)/4)+1
0000F930 =0000007C                  id_RingFlash:		equ ((ptr_RingFlash-Obj_Index)/4)+1
0000F930 =0000007D                  id_HiddenBonus:		equ ((ptr_HiddenBonus-Obj_Index)/4)+1
0000F930 =0000007E                  id_SSResult:		equ ((ptr_SSResult-Obj_Index)/4)+1
0000F930 =0000007F                  id_SSRChaos:		equ ((ptr_SSRChaos-Obj_Index)/4)+1
0000F930 =00000080                  id_ContScrItem:		equ ((ptr_ContScrItem-Obj_Index)/4)+1		; $80
0000F930 =00000081                  id_ContSonic:		equ ((ptr_ContSonic-Obj_Index)/4)+1
0000F930 =00000082                  id_ScrapEggman:		equ ((ptr_ScrapEggman-Obj_Index)/4)+1
0000F930 =00000083                  id_FalseFloor:		equ ((ptr_FalseFloor-Obj_Index)/4)+1
0000F930 =00000084                  id_EggmanCylinder:	equ ((ptr_EggmanCylinder-Obj_Index)/4)+1
0000F930 =00000085                  id_BossFinal:		equ ((ptr_BossFinal-Obj_Index)/4)+1
0000F930 =00000086                  id_BossPlasma:		equ ((ptr_BossPlasma-Obj_Index)/4)+1
0000F930 =00000087                  id_EndSonic:		equ ((ptr_EndSonic-Obj_Index)/4)+1
0000F930 =00000088                  id_EndChaos:		equ ((ptr_EndChaos-Obj_Index)/4)+1		; $88
0000F930 =00000089                  id_EndSTH:		equ ((ptr_EndSTH-Obj_Index)/4)+1
0000F930 =0000008A                  id_CreditsText:		equ ((ptr_CreditsText-Obj_Index)/4)+1
0000F930 =0000008B                  id_EndEggman:		equ ((ptr_EndEggman-Obj_Index)/4)+1
0000F930 =0000008C                  id_TryChaos:		equ ((ptr_TryChaos-Obj_Index)/4)+1
0000F930 =0000008C                  id_TryChaos:		equ ((ptr_TryChaos-Obj_Index)/4)+1
0000F930                            
0000F930                            		include	"_incObj\sub ObjectFall.asm"
0000F930                            ; ---------------------------------------------------------------------------
0000F930                            ; Subroutine to	make an	object fall downwards, increasingly fast
0000F930                            ; ---------------------------------------------------------------------------
0000F930                            
0000F930                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000F930                            
0000F930                            
0000F930                            ObjectFall:
0000F930 0C28 0050 0012             		cmpi.b	#$50,obVelY(a0)
0000F936 6700                       		beq.s	@donothing
0000F938 3028 0010                  		move.w	obVelX(a0),d0
0000F93C 48C0                       		ext.l	d0
0000F93E E188                       		lsl.l	#8,d0
0000F940 D1A8 0008                  		add.l	d0,obX(a0)
0000F944 0C68 0FC8 0012                     cmp.w   #$FC8,obVelY(a0)   ; check if Sonic's Y speed is lower than this value
0000F94A 6F00                               ble.s   @skipline       ; if yes, branch
0000F94C 317C 0FC8 0012                     move.w  #$FC8,obVelY(a0)    ; alter Sonic's Y speed
0000F952                                @skipline:		
0000F952 3028 0012                  		move.w	obVelY(a0),d0
0000F956 0668 0038 0012             		addi.w	#$38,obVelY(a0)	; increase vertical speed
0000F95C 48C0                       		ext.l	d0
0000F95E E188                       		lsl.l	#8,d0
0000F960 D1A8 000C                  		add.l	d0,obY(a0)
0000F964 4E75                       		rts	
0000F966                            	
0000F966                            	@donothing:
0000F966 4E75                       		rts
0000F968                            
0000F968                            ; End of function ObjectFall
0000F968                            ; End of function ObjectFall
0000F968                            		include	"_incObj\sub SpeedToPos.asm"
0000F968                            ; ---------------------------------------------------------------------------
0000F968                            ; Subroutine translating object	speed to update	object position
0000F968                            ; ---------------------------------------------------------------------------
0000F968                            
0000F968                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000F968                            
0000F968                            
0000F968                            SpeedToPos:
0000F968 4CA8 0005 0010             		movem.w	obVelX(a0),d0/d2
0000F96E E188                       		lsl.l	#8,d0
0000F970 D1A8 0008                  		add.l	d0,obX(a0)
0000F974 E18A                       		lsl.l	#8,d2
0000F976 D5A8 000C                  		add.l	d2,obY(a0)
0000F97A 4E75                       		rts
0000F97C                            ; End of function SpeedToPos
0000F97C                            ; End of function SpeedToPos
0000F97C                            		include	"_incObj\sub DisplaySprite.asm"
0000F97C                            ; ---------------------------------------------------------------------------
0000F97C                            ; Subroutine to    display    a sprite/object, when a0 is the    object RAM
0000F97C                            ; ---------------------------------------------------------------------------
0000F97C                            
0000F97C                            ; ||||||||||||||| S U B    R O U T    I N E |||||||||||||||||||||||||||||||||||||||
0000F97C                            
0000F97C                            
0000F97C                            DisplaySprite:
0000F97C 43F8 AC00                          lea    (v_spritequeue).w,a1
0000F980 D2E8 0018                          adda.w  obpriority(a0),a1 ; get sprite priority
0000F984 0C51 007E                          cmpi.w    #$7E,(a1)    ; is this part of the queue full?
0000F988 6400                               bcc.s    DSpr_Full    ; if yes, branch
0000F98A 5451                               addq.w    #2,(a1)        ; increment sprite count
0000F98C D2D1                               adda.w    (a1),a1        ; jump to empty position
0000F98E 3288                               move.w    a0,(a1)        ; insert RAM address for object
0000F990                            
0000F990                                DSpr_Full:
0000F990 4E75                               rts    
0000F992                            
0000F992                            ; End of function DisplaySprite
0000F992                            
0000F992                            
0000F992                            ; ---------------------------------------------------------------------------
0000F992                            ; Subroutine to    display    a 2nd sprite/object, when a1 is    the object RAM
0000F992                            ; ---------------------------------------------------------------------------
0000F992                            
0000F992                            ; ||||||||||||||| S U B    R O U T    I N E |||||||||||||||||||||||||||||||||||||||
0000F992                            
0000F992                            
0000F992                            DisplaySprite1:
0000F992 45F8 AC00                          lea    (v_spritequeue).w,a2
0000F996 D4E9 0018                          adda.w  obpriority(a1),a2
0000F99A 0C52 007E                          cmpi.w    #$7E,(a2)
0000F99E 6400                               bcc.s    DSpr1_Full
0000F9A0 5452                               addq.w    #2,(a2)
0000F9A2 D4D2                               adda.w    (a2),a2
0000F9A4 3489                               move.w    a1,(a2)
0000F9A6                            
0000F9A6                                DSpr1_Full:
0000F9A6 4E75                               rts    
0000F9A8                            
0000F9A8                            ; End of function DisplaySprite1
0000F9A8                            
0000F9A8                            ; ---------------------------------------------------------------------------
0000F9A8                            ; Subroutine to display a sprite/object, when a0 is the object RAM
0000F9A8                            ; and d0 is already (priority/2)&$380
0000F9A8                            ; ---------------------------------------------------------------------------
0000F9A8                            
0000F9A8                            ; loc_16530:
0000F9A8                            DisplaySprite2:
0000F9A8 43F8 AC00                      lea    (v_spritequeue).w,a1
0000F9AC D2C0                           adda.w    d0,a1
0000F9AE 0C51 007E                      cmpi.w    #$7E,(a1)
0000F9B2 6400                           bhs.s    return_16542
0000F9B4 5451                           addq.w    #2,(a1)
0000F9B6 D2D1                           adda.w    (a1),a1
0000F9B8 3288                           move.w    a0,(a1)
0000F9BA                            
0000F9BA                            return_16542:
0000F9BA 4E75                           rts
0000F9BA 4E75                           rts
0000F9BC                            		include	"_incObj\sub DeleteObject.asm"
0000F9BC                            ; ---------------------------------------------------------------------------
0000F9BC                            ; Subroutine to	delete an object
0000F9BC                            ; ---------------------------------------------------------------------------
0000F9BC                            
0000F9BC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000F9BC                            
0000F9BC                            
0000F9BC                            DeleteObject:
0000F9BC 2248                       		movea.l	a0,a1		; move object RAM address to (a1)
0000F9BE                            
0000F9BE                            DeleteChild:				; child objects are already in (a1)
0000F9BE 7200                       		moveq	#0,d1
0000F9C0 700F                       		moveq	#$F,d0
0000F9C2                            
0000F9C2                            	DelObj_Loop:
0000F9C2 22C1                       		move.l	d1,(a1)+	; clear	the object RAM
0000F9C4 51C8 FFFC                  		dbf	d0,DelObj_Loop	; repeat for length of object RAM
0000F9C8 4E75                       		rts	
0000F9CA                            
0000F9CA                            ; End of function DeleteObject
0000F9CA                            ; End of function DeleteObject
0000F9CA                            
0000F9CA                            ; ===========================================================================
0000F9CA 0000 0000                  BldSpr_ScrPos:	dc.l 0				; blank
0000F9CE 00FF F700                  		dc.l v_screenposx&$FFFFFF	; main screen x-position
0000F9D2 00FF F708                  		dc.l v_bgscreenposx&$FFFFFF	; background x-position	1
0000F9D6 00FF F718                  		dc.l v_bg3screenposx&$FFFFFF	; background x-position	2
0000F9DA                            ; ---------------------------------------------------------------------------
0000F9DA                            ; Subroutine to	convert	mappings (etc) to proper Megadrive sprites
0000F9DA                            ; ---------------------------------------------------------------------------
0000F9DA                            
0000F9DA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000F9DA                            
0000F9DA                            
0000F9DA                            BuildSprites:
0000F9DA 45F8 F800                  		lea	(v_spritetablebuffer).w,a2 ; set address for sprite table
0000F9DE 7A00                       		moveq	#0,d5
0000F9E0 49F8 AC00                  		lea	(v_spritequeue).w,a4
0000F9E4 7E07                       		moveq	#7,d7
0000F9E6                            
0000F9E6                            	@priorityLoop:
0000F9E6 4A54                       		tst.w	(a4)	; are there objects left to draw?
0000F9E8 6700 0000                  		beq.w	@nextPriority	; if not, branch
0000F9EC 7C02                       		moveq	#2,d6
0000F9EE                            
0000F9EE                            	@objectLoop:
0000F9EE 3074 6000                  		movea.w	(a4,d6.w),a0	; load object ID
0000F9F2 4A10                       		tst.b	(a0)		; if null, branch
0000F9F4 6700 0000                  		beq.w	@skipObject
0000F9F8 08A8 0007 0001             		bclr	#7,obRender(a0)		; set as not visible
0000F9FE                            
0000F9FE 1028 0001                  		move.b	obRender(a0),d0
0000FA02 1800                       		move.b	d0,d4
0000FA04 0240 000C                  		andi.w	#$C,d0		; get drawing coordinates
0000FA08 6700                       		beq.s	@screenCoords	; branch if 0 (screen coordinates)
0000FA0A 227B 00BE                  		movea.l	BldSpr_ScrPos(pc,d0.w),a1
0000FA0E                            	; check object bounds
0000FA0E 7000                       		moveq	#0,d0
0000FA10 1028 0014                  		move.b	obActWid(a0),d0
0000FA14 3628 0008                  		move.w	obX(a0),d3
0000FA18 9651                       		sub.w	(a1),d3
0000FA1A 3203                       		move.w	d3,d1
0000FA1C D240                       		add.w	d0,d1
0000FA1E 6B00 0000                  		bmi.w	@skipObject	; left edge out of bounds
0000FA22 3203                       		move.w	d3,d1
0000FA24 9240                       		sub.w	d0,d1
0000FA26 0C41 0140                  		cmpi.w	#320,d1
0000FA2A 6C00                       		bge.s	@skipObject	; right edge out of bounds
0000FA2C 0643 0080                  		addi.w	#128,d3		; VDP sprites start at 128px
0000FA30                            
0000FA30 0804 0004                  		btst	#4,d4		; is assume height flag on?
0000FA34 6700                       		beq.s	@assumeHeight	; if yes, branch
0000FA36 7000                       		moveq	#0,d0
0000FA38 1028 0016                  		move.b	obHeight(a0),d0
0000FA3C 3428 000C                  		move.w	obY(a0),d2
0000FA40 9469 0004                  		sub.w	4(a1),d2
0000FA44 3202                       		move.w	d2,d1
0000FA46 D240                       		add.w	d0,d1
0000FA48 6B00                       		bmi.s	@skipObject	; top edge out of bounds
0000FA4A 3202                       		move.w	d2,d1
0000FA4C 9240                       		sub.w	d0,d1
0000FA4E 0C41 00E0                  		cmpi.w	#224,d1
0000FA52 6C00                       		bge.s	@skipObject
0000FA54 0642 0080                  		addi.w	#128,d2		; VDP sprites start at 128px
0000FA58 6000                       		bra.s	@drawObject
0000FA5A                            ; ===========================================================================
0000FA5A                            
0000FA5A                            	@screenCoords:
0000FA5A 3428 000A                  		move.w	$A(a0),d2	; special variable for screen Y
0000FA5E 3628 0008                  		move.w	obX(a0),d3
0000FA62 6000                       		bra.s	@drawObject
0000FA64                            ; ===========================================================================
0000FA64                            
0000FA64                            	@assumeHeight:
0000FA64 3428 000C                  		move.w	obY(a0),d2
0000FA68 9469 0004                  		sub.w	obMap(a1),d2
0000FA6C 0642 0080                  		addi.w	#$80,d2
0000FA70 0C42 0060                  		cmpi.w	#$60,d2
0000FA74 6500                       		blo.s	@skipObject
0000FA76 0C42 0180                  		cmpi.w	#$180,d2
0000FA7A 6400                       		bhs.s	@skipObject
0000FA7C                            
0000FA7C                            	@drawObject:
0000FA7C 2268 0004                  		movea.l	obMap(a0),a1
0000FA80 7200                       		moveq	#0,d1
0000FA82 0804 0005                  		btst	#5,d4
0000FA86 6600                       		bne.s	@drawFrame
0000FA88 1228 001A                  		move.b	$1A(a0),d1
0000FA8C D241                       		add.w	d1,d1					; MJ: changed from byte to word (we want more than 7F sprites)
0000FA8E D2F1 1000                  		adda.w	(a1,d1.w),a1
0000FA92 7200                       		moveq	#$00,d1					; MJ: clear d1 (because of our byte to word change)
0000FA94 1219                       		move.b	(a1)+,d1
0000FA96 5301                       		subq.b	#1,d1
0000FA98 6B00                       		bmi.s	@setVisible
0000FA9A                            
0000FA9A                            	@drawFrame:
0000FA9A 6100 0000                  		bsr.w	BuildSpr_Draw	; write data from sprite pieces to buffer
0000FA9E                            
0000FA9E                            	@setVisible:
0000FA9E 08E8 0007 0001             		bset	#7,obRender(a0)		; set object as visible
0000FAA4                            
0000FAA4                            	@skipObject:
0000FAA4 5446                       		addq.w	#2,d6
0000FAA6 5554                       		subq.w	#2,(a4)			; number of objects left
0000FAA8 6600 FF44                  		bne.w	@objectLoop
0000FAAC                            
0000FAAC                            	@nextPriority:
0000FAAC 49EC 0080                  		lea	$80(a4),a4
0000FAB0 51CF FF34                  		dbf	d7,@priorityLoop
0000FAB4 11C5 F62C                  		move.b	d5,(v_spritecount).w
0000FAB8 0C05 0050                  		cmpi.b	#$50,d5
0000FABC 6700                       		beq.s	@spriteLimit
0000FABE 24BC 0000 0000             		move.l	#0,(a2)
0000FAC4 4E75                       		rts	
0000FAC6                            ; ===========================================================================
0000FAC6                            
0000FAC6                            	@spriteLimit:
0000FAC6 157C 0000 FFFB             		move.b	#0,-5(a2)	; set last sprite link
0000FACC 4E75                       		rts	
0000FACE                            ; End of function BuildSprites
0000FACE                            
0000FACE                            
0000FACE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000FACE                            
0000FACE                            
0000FACE                            BuildSpr_Draw:
0000FACE 3668 0002                  		movea.w	obGfx(a0),a3
0000FAD2 0804 0000                  		btst	#0,d4
0000FAD6 6600                       		bne.s	BuildSpr_FlipX
0000FAD8 0804 0001                  		btst	#1,d4
0000FADC 6600 0000                  		bne.w	BuildSpr_FlipY
0000FAE0                            ; End of function BuildSpr_Draw
0000FAE0                            
0000FAE0                            
0000FAE0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000FAE0                            
0000FAE0                            
0000FAE0                            BuildSpr_Normal:
0000FAE0 0C05 0050                  		cmpi.b	#$50,d5		; check sprite limit
0000FAE4 6700                       		beq.s	@return
0000FAE6 1019                       		move.b	(a1)+,d0	; get y-offset
0000FAE8 4880                       		ext.w	d0
0000FAEA D042                       		add.w	d2,d0		; add y-position
0000FAEC 34C0                       		move.w	d0,(a2)+	; write to buffer
0000FAEE 14D9                       		move.b	(a1)+,(a2)+	; write sprite size
0000FAF0 5205                       		addq.b	#1,d5		; increase sprite counter
0000FAF2 14C5                       		move.b	d5,(a2)+	; set as sprite link
0000FAF4 1019                       		move.b	(a1)+,d0	; get art tile
0000FAF6 E148                       		lsl.w	#8,d0
0000FAF8 1019                       		move.b	(a1)+,d0
0000FAFA D04B                       		add.w	a3,d0		; add art tile offset
0000FAFC 34C0                       		move.w	d0,(a2)+	; write to buffer
0000FAFE 1019                       		move.b	(a1)+,d0	; get x-offset
0000FB00 4880                       		ext.w	d0
0000FB02 D043                       		add.w	d3,d0		; add x-position
0000FB04 0240 01FF                  		andi.w	#$1FF,d0	; keep within 512px
0000FB08 6600                       		bne.s	@writeX
0000FB0A 5240                       		addq.w	#1,d0
0000FB0C                            
0000FB0C                            	@writeX:
0000FB0C 34C0                       		move.w	d0,(a2)+	; write to buffer
0000FB0E 51C9 FFD0                  		dbf	d1,BuildSpr_Normal	; process next sprite piece
0000FB12                            
0000FB12                            	@return:
0000FB12 4E75                       		rts	
0000FB14                            ; End of function BuildSpr_Normal
0000FB14                            
0000FB14                            ; ===========================================================================
0000FB14                            
0000FB14                            BuildSpr_FlipX:
0000FB14 0804 0001                  		btst	#1,d4		; is object also y-flipped?
0000FB18 6600 0000                  		bne.w	BuildSpr_FlipXY	; if yes, branch
0000FB1C                            
0000FB1C                            	@loop:
0000FB1C 0C05 0050                  		cmpi.b	#$50,d5		; check sprite limit
0000FB20 6700                       		beq.s	@return
0000FB22 1019                       		move.b	(a1)+,d0	; y position
0000FB24 4880                       		ext.w	d0
0000FB26 D042                       		add.w	d2,d0
0000FB28 34C0                       		move.w	d0,(a2)+
0000FB2A 1819                       		move.b	(a1)+,d4	; size
0000FB2C 14C4                       		move.b	d4,(a2)+	
0000FB2E 5205                       		addq.b	#1,d5		; link
0000FB30 14C5                       		move.b	d5,(a2)+
0000FB32 1019                       		move.b	(a1)+,d0	; art tile
0000FB34 E148                       		lsl.w	#8,d0
0000FB36 1019                       		move.b	(a1)+,d0	
0000FB38 D04B                       		add.w	a3,d0
0000FB3A 0A40 0800                  		eori.w	#$800,d0	; toggle flip-x in VDP
0000FB3E 34C0                       		move.w	d0,(a2)+	; write to buffer
0000FB40 1019                       		move.b	(a1)+,d0	; get x-offset
0000FB42 4880                       		ext.w	d0
0000FB44 4440                       		neg.w	d0			; negate it
0000FB46 D804                       		add.b	d4,d4		; calculate flipped position by size
0000FB48 0244 0018                  		andi.w	#$18,d4
0000FB4C 5044                       		addq.w	#8,d4
0000FB4E 9044                       		sub.w	d4,d0
0000FB50 D043                       		add.w	d3,d0
0000FB52 0240 01FF                  		andi.w	#$1FF,d0	; keep within 512px
0000FB56 6600                       		bne.s	@writeX
0000FB58 5240                       		addq.w	#1,d0
0000FB5A                            
0000FB5A                            	@writeX:
0000FB5A 34C0                       		move.w	d0,(a2)+	; write to buffer
0000FB5C 51C9 FFBE                  		dbf	d1,@loop		; process next sprite piece
0000FB60                            
0000FB60                            	@return:
0000FB60 4E75                       		rts	
0000FB62                            ; ===========================================================================
0000FB62                            
0000FB62                            BuildSpr_FlipY:
0000FB62 0C05 0050                  		cmpi.b	#$50,d5		; check sprite limit
0000FB66 6700                       		beq.s	@return
0000FB68 1019                       		move.b	(a1)+,d0	; get y-offset
0000FB6A 1811                       		move.b	(a1),d4		; get size
0000FB6C 4880                       		ext.w	d0
0000FB6E 4440                       		neg.w	d0		; negate y-offset
0000FB70 E70C                       		lsl.b	#3,d4	; calculate flip offset
0000FB72 0244 0018                  		andi.w	#$18,d4
0000FB76 5044                       		addq.w	#8,d4
0000FB78 9044                       		sub.w	d4,d0
0000FB7A D042                       		add.w	d2,d0	; add y-position
0000FB7C 34C0                       		move.w	d0,(a2)+	; write to buffer
0000FB7E 14D9                       		move.b	(a1)+,(a2)+	; size
0000FB80 5205                       		addq.b	#1,d5
0000FB82 14C5                       		move.b	d5,(a2)+	; link
0000FB84 1019                       		move.b	(a1)+,d0	; art tile
0000FB86 E148                       		lsl.w	#8,d0
0000FB88 1019                       		move.b	(a1)+,d0
0000FB8A D04B                       		add.w	a3,d0
0000FB8C 0A40 1000                  		eori.w	#$1000,d0	; toggle flip-y in VDP
0000FB90 34C0                       		move.w	d0,(a2)+
0000FB92 1019                       		move.b	(a1)+,d0	; x-position
0000FB94 4880                       		ext.w	d0
0000FB96 D043                       		add.w	d3,d0
0000FB98 0240 01FF                  		andi.w	#$1FF,d0
0000FB9C 6600                       		bne.s	@writeX
0000FB9E 5240                       		addq.w	#1,d0
0000FBA0                            
0000FBA0                            	@writeX:
0000FBA0 34C0                       		move.w	d0,(a2)+	; write to buffer
0000FBA2 51C9 FFBE                  		dbf	d1,BuildSpr_FlipY	; process next sprite piece
0000FBA6                            
0000FBA6                            	@return:
0000FBA6 4E75                       		rts	
0000FBA8                            ; ===========================================================================
0000FBA8                            
0000FBA8                            BuildSpr_FlipXY:
0000FBA8 0C05 0050                  		cmpi.b	#$50,d5		; check sprite limit
0000FBAC 6700                       		beq.s	@return
0000FBAE 1019                       		move.b	(a1)+,d0	; calculated flipped y
0000FBB0 1811                       		move.b	(a1),d4
0000FBB2 4880                       		ext.w	d0
0000FBB4 4440                       		neg.w	d0
0000FBB6 E70C                       		lsl.b	#3,d4
0000FBB8 0244 0018                  		andi.w	#$18,d4
0000FBBC 5044                       		addq.w	#8,d4
0000FBBE 9044                       		sub.w	d4,d0
0000FBC0 D042                       		add.w	d2,d0
0000FBC2 34C0                       		move.w	d0,(a2)+	; write to buffer
0000FBC4 1819                       		move.b	(a1)+,d4	; size
0000FBC6 14C4                       		move.b	d4,(a2)+	; link
0000FBC8 5205                       		addq.b	#1,d5
0000FBCA 14C5                       		move.b	d5,(a2)+	; art tile
0000FBCC 1019                       		move.b	(a1)+,d0
0000FBCE E148                       		lsl.w	#8,d0
0000FBD0 1019                       		move.b	(a1)+,d0
0000FBD2 D04B                       		add.w	a3,d0
0000FBD4 0A40 1800                  		eori.w	#$1800,d0	; toggle flip-x/y in VDP
0000FBD8 34C0                       		move.w	d0,(a2)+
0000FBDA 1019                       		move.b	(a1)+,d0	; calculate flipped x
0000FBDC 4880                       		ext.w	d0
0000FBDE 4440                       		neg.w	d0
0000FBE0 D804                       		add.b	d4,d4
0000FBE2 0244 0018                  		andi.w	#$18,d4
0000FBE6 5044                       		addq.w	#8,d4
0000FBE8 9044                       		sub.w	d4,d0
0000FBEA D043                       		add.w	d3,d0
0000FBEC 0240 01FF                  		andi.w	#$1FF,d0
0000FBF0 6600                       		bne.s	@writeX
0000FBF2 5240                       		addq.w	#1,d0
0000FBF4                            
0000FBF4                            	@writeX:
0000FBF4 34C0                       		move.w	d0,(a2)+	; write to buffer
0000FBF6 51C9 FFB0                  		dbf	d1,BuildSpr_FlipXY	; process next sprite piece
0000FBFA                            
0000FBFA                            	@return:
0000FBFA 4E75                       		rts	
0000FBFC                            
0000FBFC                            		include	"_incObj\sub ChkObjectVisible.asm"
0000FBFC                            ; ---------------------------------------------------------------------------
0000FBFC                            ; Subroutine to	check if an object is off screen
0000FBFC                            
0000FBFC                            ; output:
0000FBFC                            ;	d0 = flag set if object is off screen
0000FBFC                            ; ---------------------------------------------------------------------------
0000FBFC                            
0000FBFC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000FBFC                            
0000FBFC                            
0000FBFC                            ChkObjectVisible:
0000FBFC 3028 0008                  		move.w	obX(a0),d0	; get object x-position
0000FC00 9078 F700                  		sub.w	(v_screenposx).w,d0 ; subtract screen x-position
0000FC04 6B00                       		bmi.s	@offscreen
0000FC06 0C40 0140                  		cmpi.w	#320,d0		; is object on the screen?
0000FC0A 6C00                       		bge.s	@offscreen	; if not, branch
0000FC0C                            
0000FC0C 3228 000C                  		move.w	obY(a0),d1	; get object y-position
0000FC10 9278 F704                  		sub.w	(v_screenposy).w,d1 ; subtract screen y-position
0000FC14 6B00                       		bmi.s	@offscreen
0000FC16 0C41 00E0                  		cmpi.w	#224,d1		; is object on the screen?
0000FC1A 6C00                       		bge.s	@offscreen	; if not, branch
0000FC1C                            
0000FC1C 7000                       		moveq	#0,d0		; set flag to 0
0000FC1E 4E75                       		rts	
0000FC20                            
0000FC20                            	@offscreen:
0000FC20 7001                       		moveq	#1,d0		; set flag to 1
0000FC22 4E75                       		rts	
0000FC24                            ; End of function ChkObjectVisible
0000FC24                            
0000FC24                            ; ---------------------------------------------------------------------------
0000FC24                            ; Subroutine to	check if an object is off screen
0000FC24                            ; More precise than above subroutine, taking width into account
0000FC24                            
0000FC24                            ; output:
0000FC24                            ;	d0 = flag set if object is off screen
0000FC24                            ; ---------------------------------------------------------------------------
0000FC24                            
0000FC24                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000FC24                            
0000FC24                            
0000FC24                            ChkPartiallyVisible:
0000FC24 7200                       		moveq	#0,d1
0000FC26 1228 0014                  		move.b	obActWid(a0),d1
0000FC2A 3028 0008                  		move.w	obX(a0),d0	; get object x-position
0000FC2E 9078 F700                  		sub.w	(v_screenposx).w,d0 ; subtract screen x-position
0000FC32 D041                       		add.w	d1,d0		; add object width
0000FC34 6B00                       		bmi.s	@offscreen2
0000FC36 D241                       		add.w	d1,d1
0000FC38 9041                       		sub.w	d1,d0
0000FC3A 0C40 0140                  		cmpi.w	#320,d0
0000FC3E 6C00                       		bge.s	@offscreen2
0000FC40                            
0000FC40 3228 000C                  		move.w	obY(a0),d1
0000FC44 9278 F704                  		sub.w	(v_screenposy).w,d1
0000FC48 6B00                       		bmi.s	@offscreen2
0000FC4A 0C41 00E0                  		cmpi.w	#224,d1
0000FC4E 6C00                       		bge.s	@offscreen2
0000FC50                            
0000FC50 7000                       		moveq	#0,d0
0000FC52 4E75                       		rts	
0000FC54                            
0000FC54                            	@offscreen2:
0000FC54 7001                       		moveq	#1,d0
0000FC56 4E75                       		rts	
0000FC58                            ; End of function ChkPartiallyVisible
0000FC58                            ; End of function ChkPartiallyVisible
0000FC58                            
0000FC58                            ; ---------------------------------------------------------------------------
0000FC58                            ; Subroutine to	load a level's objects
0000FC58                            ; ---------------------------------------------------------------------------
0000FC58                            
0000FC58                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000FC58                            
0000FC58                            
0000FC58                            ObjPosLoad:
0000FC58 7000                       		moveq	#0,d0
0000FC5A 1038 F76C                  		move.b	(v_opl_routine).w,d0
0000FC5E 303B 0000                  		move.w	OPL_Index(pc,d0.w),d0
0000FC62 4EFB 0000                  		jmp	OPL_Index(pc,d0.w)
0000FC66                            ; End of function ObjPosLoad
0000FC66                            
0000FC66                            ; ===========================================================================
0000FC66 0000                       OPL_Index:	dc.w OPL_Main-OPL_Index
0000FC68 0000                       		dc.w OPL_Next-OPL_Index
0000FC6A                            ; ===========================================================================
0000FC6A                            
0000FC6A                            OPL_Main:
0000FC6A 5438 F76C                  		addq.b	#2,(v_opl_routine).w
0000FC6E 3038 FE10                  		move.w	(v_zone).w,d0
0000FC72 ED08                       		lsl.b	#6,d0
0000FC74 E848                       		lsr.w	#4,d0
0000FC76 41F9 0000 0000             		lea	(ObjPos_Index).l,a0
0000FC7C 2248                       		movea.l	a0,a1
0000FC7E D0F0 0000                  		adda.w	(a0,d0.w),a0
0000FC82 21C8 F770                  		move.l	a0,(v_opl_data).w
0000FC86 21C8 F774                  		move.l	a0,(v_opl_data+4).w
0000FC8A D2F1 0002                  		adda.w	2(a1,d0.w),a1
0000FC8E 21C9 F778                  		move.l	a1,(v_opl_data+8).w
0000FC92 21C9 F77C                  		move.l	a1,(v_opl_data+$C).w
0000FC96 45F8 FC00                  		lea	(v_objstate).w,a2
0000FC9A 34FC 0101                  		move.w	#$101,(a2)+
0000FC9E 303C 005E                  		move.w	#$5E,d0
0000FCA2                            
0000FCA2                            OPL_ClrList:
0000FCA2 429A                       		clr.l	(a2)+
0000FCA4 51C8 FFFC                  		dbf	d0,OPL_ClrList	; clear	pre-destroyed object list
0000FCA8                            
0000FCA8 45F8 FC00                  		lea	(v_objstate).w,a2
0000FCAC 7400                       		moveq	#0,d2
0000FCAE 3C38 F700                  		move.w	(v_screenposx).w,d6
0000FCB2 0446 0080                  		subi.w	#$80,d6
0000FCB6 6400                       		bhs.s	loc_D93C
0000FCB8 7C00                       		moveq	#0,d6
0000FCBA                            
0000FCBA                            loc_D93C:
0000FCBA 0246 FF80                  		andi.w	#$FF80,d6
0000FCBE 2078 F770                  		movea.l	(v_opl_data).w,a0
0000FCC2                            
0000FCC2                            loc_D944:
0000FCC2 BC50                       		cmp.w	(a0),d6
0000FCC4 6300                       		bls.s	loc_D956
0000FCC6 4A28 0004                  		tst.b	4(a0)
0000FCCA 6A00                       		bpl.s	loc_D952
0000FCCC 1412                       		move.b	(a2),d2
0000FCCE 5212                       		addq.b	#1,(a2)
0000FCD0                            
0000FCD0                            loc_D952:
0000FCD0 5C48                       		addq.w	#6,a0
0000FCD2 60EE                       		bra.s	loc_D944
0000FCD4                            ; ===========================================================================
0000FCD4                            
0000FCD4                            loc_D956:
0000FCD4 21C8 F770                  		move.l	a0,(v_opl_data).w
0000FCD8 2078 F774                  		movea.l	(v_opl_data+4).w,a0
0000FCDC 0446 0080                  		subi.w	#$80,d6
0000FCE0 6500                       		blo.s	loc_D976
0000FCE2                            
0000FCE2                            loc_D964:
0000FCE2 BC50                       		cmp.w	(a0),d6
0000FCE4 6300                       		bls.s	loc_D976
0000FCE6 4A28 0004                  		tst.b	4(a0)
0000FCEA 6A00                       		bpl.s	loc_D972
0000FCEC 522A 0001                  		addq.b	#1,1(a2)
0000FCF0                            
0000FCF0                            loc_D972:
0000FCF0 5C48                       		addq.w	#6,a0
0000FCF2 60EE                       		bra.s	loc_D964
0000FCF4                            ; ===========================================================================
0000FCF4                            
0000FCF4                            loc_D976:
0000FCF4 21C8 F774                  		move.l	a0,(v_opl_data+4).w
0000FCF8 31FC FFFF F76E             		move.w	#-1,(v_opl_screen).w
0000FCFE                            
0000FCFE                            OPL_Next:
0000FCFE 45F8 FC00                  		lea	(v_objstate).w,a2
0000FD02 7400                       		moveq	#0,d2
0000FD04 3C38 F700                  		move.w	(v_screenposx).w,d6
0000FD08 0246 FF80                  		andi.w	#$FF80,d6
0000FD0C BC78 F76E                  		cmp.w	(v_opl_screen).w,d6
0000FD10 6700 0000                  		beq.w	locret_DA3A
0000FD14 6C00                       		bge.s	loc_D9F6
0000FD16 31C6 F76E                  		move.w	d6,(v_opl_screen).w
0000FD1A 2078 F774                  		movea.l	(v_opl_data+4).w,a0
0000FD1E 0446 0080                  		subi.w	#$80,d6
0000FD22 6500                       		blo.s	loc_D9D2
0000FD24                            
0000FD24                            loc_D9A6:
0000FD24 BC68 FFFA                  		cmp.w	-6(a0),d6
0000FD28 6C00                       		bge.s	loc_D9D2
0000FD2A 5D48                       		subq.w	#6,a0
0000FD2C 4A28 0004                  		tst.b	4(a0)
0000FD30 6A00                       		bpl.s	loc_D9BC
0000FD32 532A 0001                  		subq.b	#1,1(a2)
0000FD36 142A 0001                  		move.b	1(a2),d2
0000FD3A                            
0000FD3A                            loc_D9BC:
0000FD3A 6100 0000                  		bsr.w	loc_DA3C
0000FD3E 6600                       		bne.s	loc_D9C6
0000FD40 5D48                       		subq.w	#6,a0
0000FD42 60E0                       		bra.s	loc_D9A6
0000FD44                            ; ===========================================================================
0000FD44                            
0000FD44                            loc_D9C6:
0000FD44 4A28 0004                  		tst.b	4(a0)
0000FD48 6A00                       		bpl.s	loc_D9D0
0000FD4A 522A 0001                  		addq.b	#1,1(a2)
0000FD4E                            
0000FD4E                            loc_D9D0:
0000FD4E 5C48                       		addq.w	#6,a0
0000FD50                            
0000FD50                            loc_D9D2:
0000FD50 21C8 F774                  		move.l	a0,(v_opl_data+4).w
0000FD54 2078 F770                  		movea.l	(v_opl_data).w,a0
0000FD58 0646 0300                  		addi.w	#$300,d6
0000FD5C                            
0000FD5C                            loc_D9DE:
0000FD5C BC68 FFFA                  		cmp.w	-6(a0),d6
0000FD60 6E00                       		bgt.s	loc_D9F0
0000FD62 4A28 FFFE                  		tst.b	-2(a0)
0000FD66 6A00                       		bpl.s	loc_D9EC
0000FD68 5312                       		subq.b	#1,(a2)
0000FD6A                            
0000FD6A                            loc_D9EC:
0000FD6A 5D48                       		subq.w	#6,a0
0000FD6C 60EE                       		bra.s	loc_D9DE
0000FD6E                            ; ===========================================================================
0000FD6E                            
0000FD6E                            loc_D9F0:
0000FD6E 21C8 F770                  		move.l	a0,(v_opl_data).w
0000FD72 4E75                       		rts	
0000FD74                            ; ===========================================================================
0000FD74                            
0000FD74                            loc_D9F6:
0000FD74 31C6 F76E                  		move.w	d6,(v_opl_screen).w
0000FD78 2078 F770                  		movea.l	(v_opl_data).w,a0
0000FD7C 0646 0280                  		addi.w	#$280,d6
0000FD80                            
0000FD80                            loc_DA02:
0000FD80 BC50                       		cmp.w	(a0),d6
0000FD82 6300                       		bls.s	loc_DA16
0000FD84 4A28 0004                  		tst.b	4(a0)
0000FD88 6A00                       		bpl.s	loc_DA10
0000FD8A 1412                       		move.b	(a2),d2
0000FD8C 5212                       		addq.b	#1,(a2)
0000FD8E                            
0000FD8E                            loc_DA10:
0000FD8E 6100 0000                  		bsr.w	loc_DA3C
0000FD92 67EC                       		beq.s	loc_DA02
0000FD94                            
0000FD94                            loc_DA16:
0000FD94 21C8 F770                  		move.l	a0,(v_opl_data).w
0000FD98 2078 F774                  		movea.l	(v_opl_data+4).w,a0
0000FD9C 0446 0300                  		subi.w	#$300,d6
0000FDA0 6500                       		blo.s	loc_DA36
0000FDA2                            
0000FDA2                            loc_DA24:
0000FDA2 BC50                       		cmp.w	(a0),d6
0000FDA4 6300                       		bls.s	loc_DA36
0000FDA6 4A28 0004                  		tst.b	4(a0)
0000FDAA 6A00                       		bpl.s	loc_DA32
0000FDAC 522A 0001                  		addq.b	#1,1(a2)
0000FDB0                            
0000FDB0                            loc_DA32:
0000FDB0 5C48                       		addq.w	#6,a0
0000FDB2 60EE                       		bra.s	loc_DA24
0000FDB4                            ; ===========================================================================
0000FDB4                            
0000FDB4                            loc_DA36:
0000FDB4 21C8 F774                  		move.l	a0,(v_opl_data+4).w
0000FDB8                            
0000FDB8                            locret_DA3A:
0000FDB8 4E75                       		rts	
0000FDBA                            ; ===========================================================================
0000FDBA                            
0000FDBA                            loc_DA3C:
0000FDBA 4A28 0004                  		tst.b	4(a0)
0000FDBE 6A00                       		bpl.s	OPL_MakeItem
0000FDC0 08F2 0007 2002             		bset	#7,2(a2,d2.w)
0000FDC6 6700                       		beq.s	OPL_MakeItem
0000FDC8 5C48                       		addq.w	#6,a0
0000FDCA 7000                       		moveq	#0,d0
0000FDCC 4E75                       		rts	
0000FDCE                            ; ===========================================================================
0000FDCE                            
0000FDCE                            OPL_MakeItem:
0000FDCE 6100 0000                  		bsr.w	FindFreeObj
0000FDD2 6600                       		bne.s	locret_DA8A
0000FDD4 3358 0008                  		move.w	(a0)+,obX(a1)
0000FDD8 3018                       		move.w	(a0)+,d0
0000FDDA 3200                       		move.w	d0,d1
0000FDDC 0240 0FFF                  		andi.w	#$FFF,d0
0000FDE0 3340 000C                  		move.w	d0,obY(a1)
0000FDE4 E559                       		rol.w	#2,d1
0000FDE6 0201 0003                  		andi.b	#3,d1
0000FDEA 1341 0001                  		move.b	d1,obRender(a1)
0000FDEE 1341 0022                  		move.b	d1,obStatus(a1)
0000FDF2 1018                       		move.b	(a0)+,d0
0000FDF4 6A00                       		bpl.s	loc_DA80
0000FDF6 0200 007F                  		andi.b	#$7F,d0
0000FDFA 1342 0023                  		move.b	d2,obRespawnNo(a1)
0000FDFE                            
0000FDFE                            loc_DA80:
0000FDFE 1280                       		move.b	d0,0(a1)
0000FE00 1358 0028                  		move.b	(a0)+,obSubtype(a1)
0000FE04 7000                       		moveq	#0,d0
0000FE06                            
0000FE06                            locret_DA8A:
0000FE06 4E75                       		rts	
0000FE08                            
0000FE08                            		include	"_incObj\sub FindFreeObj.asm"
0000FE08                            ; ---------------------------------------------------------------------------
0000FE08                            ; Subroutine to find a free object space
0000FE08                            
0000FE08                            ; output:
0000FE08                            ;	a1 = free position in object RAM
0000FE08                            ; ---------------------------------------------------------------------------
0000FE08                            
0000FE08                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000FE08                            
0000FE08                            
0000FE08                            FindFreeObj:
0000FE08 43F8 D800                  		lea	(v_objspace+$800).w,a1 ; start address for object RAM
0000FE0C 303C 005F                  		move.w	#$5F,d0
0000FE10                            
0000FE10                            	FFree_Loop:
0000FE10 4A11                       		tst.b	(a1)		; is object RAM	slot empty?
0000FE12 6700                       		beq.s	FFree_Found	; if yes, branch
0000FE14 43E9 0040                  		lea	$40(a1),a1	; goto next object RAM slot
0000FE18 51C8 FFF6                  		dbf	d0,FFree_Loop	; repeat $5F times
0000FE1C                            
0000FE1C                            	FFree_Found:
0000FE1C 4E75                       		rts	
0000FE1E                            
0000FE1E                            ; End of function FindFreeObj
0000FE1E                            
0000FE1E                            
0000FE1E                            ; ---------------------------------------------------------------------------
0000FE1E                            ; Subroutine to find a free object space AFTER the current one
0000FE1E                            
0000FE1E                            ; output:
0000FE1E                            ;	a1 = free position in object RAM
0000FE1E                            ; ---------------------------------------------------------------------------
0000FE1E                            
0000FE1E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000FE1E                            
0000FE1E                            
0000FE1E                            FindNextFreeObj:
0000FE1E 2248                       		movea.l	a0,a1
0000FE20 303C F000                  		move.w	#$F000,d0
0000FE24 9048                       		sub.w	a0,d0
0000FE26 EC48                       		lsr.w	#6,d0
0000FE28 5340                       		subq.w	#1,d0
0000FE2A 6500                       		bcs.s	NFree_Found
0000FE2C                            
0000FE2C                            	NFree_Loop:
0000FE2C 4A11                       		tst.b	(a1)
0000FE2E 6700                       		beq.s	NFree_Found
0000FE30 43E9 0040                  		lea	$40(a1),a1
0000FE34 51C8 FFF6                  		dbf	d0,NFree_Loop
0000FE38                            
0000FE38                            	NFree_Found:
0000FE38 4E75                       		rts	
0000FE3A                            
0000FE3A                            ; End of function FindNextFreeObj
0000FE3A                            ; End of function FindNextFreeObj
0000FE3A                            		include	"_incObj\41 Springs.asm"
0000FE3A                            ; ---------------------------------------------------------------------------
0000FE3A                            ; Object 41 - springs
0000FE3A                            ; ---------------------------------------------------------------------------
0000FE3A                            
0000FE3A                            Springs:
0000FE3A 7000                       		moveq	#0,d0
0000FE3C 1028 0024                  		move.b	obRoutine(a0),d0
0000FE40 323B 0000                  		move.w	Spring_Index(pc,d0.w),d1
0000FE44 4EBB 1000                  		jsr	Spring_Index(pc,d1.w)
0000FE48 6100 FB32                  		bsr.w	DisplaySprite
0000FE6A 4E75                       		rts	
0000FE6C                            ; ===========================================================================
0000FE6C 0000                       Spring_Index:	dc.w Spring_Main-Spring_Index
0000FE6E 0000                       		dc.w Spring_Up-Spring_Index
0000FE70 0000                       		dc.w Spring_AniUp-Spring_Index
0000FE72 0000                       		dc.w Spring_ResetUp-Spring_Index
0000FE74 0000                       		dc.w Spring_LR-Spring_Index
0000FE76 0000                       		dc.w Spring_AniLR-Spring_Index
0000FE78 0000                       		dc.w Spring_ResetLR-Spring_Index
0000FE7A 0000                       		dc.w Spring_Dwn-Spring_Index
0000FE7C 0000                       		dc.w Spring_AniDwn-Spring_Index
0000FE7E 0000                       		dc.w Spring_ResetDwn-Spring_Index
0000FE80                            
0000FE80 =00000030                  spring_pow:	equ $30			; power of current spring
0000FE80                            
0000FE80 F000                       Spring_Powers:	dc.w -$1000		; power	of red spring
0000FE82 F600                       		dc.w -$A00		; power	of yellow spring
0000FE84                            ; ===========================================================================
0000FE84                            
0000FE84                            Spring_Main:	; Routine 0
0000FE84 5428 0024                  		addq.b	#2,obRoutine(a0)
0000FE88 217C 0000 0000 0004        		move.l	#Map_Spring,obMap(a0)
0000FE90 317C 0523 0002             		move.w	#$523,obGfx(a0)
0000FE96 0028 0004 0001             		ori.b	#4,obRender(a0)
0000FE9C 117C 0010 0014             		move.b	#$10,obActWid(a0)
0000FEA2 317C 0200 0018             		move.w	#$200,obPriority(a0)
0000FEA8 1028 0028                  		move.b	obSubtype(a0),d0
0000FEAC 0800 0004                  		btst	#4,d0		; does the spring face left/right?
0000FEB0 6700                       		beq.s	Spring_NotLR	; if not, branch
0000FEB2                            
0000FEB2 117C 0008 0024             		move.b	#8,obRoutine(a0) ; use "Spring_LR" routine
0000FEB8 117C 0001 001C             		move.b	#1,obAnim(a0)
0000FEBE 117C 0003 001A             		move.b	#3,obFrame(a0)
0000FEC4 317C 0533 0002             		move.w	#$533,obGfx(a0)
0000FECA 117C 0008 0014             		move.b	#8,obActWid(a0)
0000FED0                            
0000FED0                            	Spring_NotLR:
0000FED0 0800 0005                  		btst	#5,d0		; does the spring face downwards?
0000FED4 6700                       		beq.s	Spring_NotDwn	; if not, branch
0000FED6                            
0000FED6 117C 000E 0024             		move.b	#$E,obRoutine(a0) ; use "Spring_Dwn" routine
0000FEDC 08E8 0001 0022             		bset	#1,obStatus(a0)
0000FEE2                            
0000FEE2                            	Spring_NotDwn:
0000FEE2 0800 0001                  		btst	#1,d0
0000FEE6 6700                       		beq.s	loc_DB72
0000FEE8 08E8 0005 0002             		bset	#5,obGfx(a0)
0000FEEE                            
0000FEEE                            loc_DB72:
0000FEEE 0240 000F                  		andi.w	#$F,d0
0000FEF2 317B 008C 0030             		move.w	Spring_Powers(pc,d0.w),spring_pow(a0)
0000FEF8 4E75                       		rts	
0000FEFA                            ; ===========================================================================
0000FEFA                            
0000FEFA                            Spring_Up:	; Routine 2
0000FEFA 323C 001B                  		move.w	#$1B,d1
0000FEFE 343C 0008                  		move.w	#8,d2
0000FF02 363C 0010                  		move.w	#$10,d3
0000FF06 3828 0008                  		move.w	obX(a0),d4
0000FF0A 6100 0000                  		bsr.w	SolidObject
0000FF0E 4A28 0025                  		tst.b	obSolid(a0)	; is Sonic on top of the spring?
0000FF12 6600                       		bne.s	Spring_BounceUp	; if yes, branch
0000FF14 4E75                       		rts	
0000FF16                            ; ===========================================================================
0000FF16                            
0000FF16                            Spring_BounceUp:
0000FF16 5428 0024                  		addq.b	#2,obRoutine(a0)
0000FF1A 5069 000C                  		addq.w	#8,obY(a1)
0000FF1E 3368 0030 0012             		move.w	spring_pow(a0),obVelY(a1) ; move Sonic upwards
0000FF24 08E9 0001 0022             		bset	#1,obStatus(a1)
0000FF2A 08A9 0003 0022             		bclr	#3,obStatus(a1)
0000FF30 137C 0000 001C             		move.b	#id_Spring,obAnim(a1) ; use "bouncing" animation
0000FF36 137C 0002 0024             		move.b	#2,obRoutine(a1)
0000FF3C 08A8 0003 0022             		bclr	#3,obStatus(a0)
0000FF42 4228 0025                  		clr.b	obSolid(a0)
0000FF50                            
0000FF50                            Spring_AniUp:	; Routine 4
0000FF50 43F9 0000 0000             		lea	(Ani_Spring).l,a1
0000FF56 6000 CAD0                  		bra.w	AnimateSprite
0000FF5A                            ; ===========================================================================
0000FF5A                            
0000FF5A                            Spring_ResetUp:	; Routine 6
0000FF5A 117C 0001 001D             		move.b	#1,obNextAni(a0) ; reset animation
0000FF60 5928 0024                  		subq.b	#4,obRoutine(a0) ; goto "Spring_Up" routine
0000FF64 4E75                       		rts	
0000FF66                            ; ===========================================================================
0000FF66                            
0000FF66                            Spring_LR:	; Routine 8
0000FF66 323C 0013                  		move.w	#$13,d1
0000FF6A 343C 000E                  		move.w	#$E,d2
0000FF6E 363C 000F                  		move.w	#$F,d3
0000FF72 3828 0008                  		move.w	obX(a0),d4
0000FF76 6100 0000                  		bsr.w	SolidObject
0000FF7A 0C28 0002 0024             		cmpi.b	#2,obRoutine(a0)
0000FF80 6600                       		bne.s	loc_DC0C
0000FF82 117C 0008 0024             		move.b	#8,obRoutine(a0)
0000FF88                            
0000FF88                            loc_DC0C:
0000FF88 0828 0005 0022             		btst	#5,obStatus(a0)
0000FF8E 6600                       		bne.s	Spring_BounceLR
0000FF90 4E75                       		rts	
0000FF92                            ; ===========================================================================
0000FF92                            
0000FF92                            Spring_BounceLR:
0000FF92 5428 0024                  		addq.b	#2,obRoutine(a0)
0000FF96 3368 0030 0010             		move.w	spring_pow(a0),obVelX(a1) ; move Sonic to the left
0000FF9C 5069 0008                  		addq.w	#8,obX(a1)
0000FFA0 0828 0000 0022             		btst	#0,obStatus(a0)	; is object flipped?
0000FFA6 6600                       		bne.s	Spring_Flipped	; if yes, branch
0000FFA8 0469 0010 0008             		subi.w	#$10,obX(a1)
0000FFAE 4469 0010                  		neg.w	obVelX(a1)	; move Sonic to	the right
0000FFB2                            
0000FFB2                            	Spring_Flipped:
0000FFB2 337C 000F 003E             		move.w	#$F,$3E(a1)
0000FFB8 3369 0010 0020             		move.w	obVelX(a1),obInertia(a1)
0000FFBE 0869 0000 0022             		bchg	#0,obStatus(a1)
0000FFC4 0829 0002 0022             		btst	#2,obStatus(a1)
0000FFCA 6600                       		bne.s	loc_DC56
0000FFCC 137C 0000 001C             		move.b	#id_Walk,obAnim(a1)	; use walking animation
0000FFD2                            
0000FFD2                            loc_DC56:
0000FFD2 08A8 0005 0022             		bclr	#5,obStatus(a0)
0000FFD8 08A9 0005 0022             		bclr	#5,obStatus(a1)
0000FFE8                            
0000FFE8                            Spring_AniLR:	; Routine $A
0000FFE8 4278 C904                  		clr.w ($FFFFC904).w	; clear screen delay counter
0000FFEC 43F9 0000 0000             		lea	(Ani_Spring).l,a1
0000FFF2 6000 CA34                  		bra.w	AnimateSprite
0000FFF6                            ; ===========================================================================
0000FFF6                            
0000FFF6                            Spring_ResetLR:	; Routine $C
0000FFF6 117C 0002 001D             		move.b	#2,obNextAni(a0) ; reset animation
0000FFFC 5928 0024                  		subq.b	#4,obRoutine(a0) ; goto "Spring_LR" routine
00010000 4E75                       		rts	
00010002                            ; ===========================================================================
00010002                            
00010002                            Spring_Dwn:	; Routine $E
00010002 323C 001B                  		move.w	#$1B,d1
00010006 343C 0008                  		move.w	#8,d2
0001000A 363C 0010                  		move.w	#$10,d3
0001000E 3828 0008                  		move.w	obX(a0),d4
00010012 6100 0000                  		bsr.w	SolidObject
00010016 0C28 0002 0024             		cmpi.b	#2,obRoutine(a0)
0001001C 6600                       		bne.s	loc_DCA4
0001001E 117C 000E 0024             		move.b	#$E,obRoutine(a0)
00010024                            
00010024                            loc_DCA4:
00010024 4A28 0025                  		tst.b	obSolid(a0)
00010028 6600                       		bne.s	locret_DCAE
0001002A 4A44                       		tst.w	d4
0001002C 6B00                       		bmi.s	Spring_BounceDwn
0001002E                            
0001002E                            locret_DCAE:
0001002E 4E75                       		rts	
00010030                            ; ===========================================================================
00010030                            
00010030                            Spring_BounceDwn:
00010030 5428 0024                  		addq.b	#2,obRoutine(a0)
00010034 5169 000C                  		subq.w	#8,obY(a1)
00010038 3368 0030 0012             		move.w	spring_pow(a0),obVelY(a1)
0001003E 4469 0012                  		neg.w	obVelY(a1)	; move Sonic downwards
00010042 08E9 0001 0022             		bset	#1,obStatus(a1)
00010048 08A9 0003 0022             		bclr	#3,obStatus(a1)
0001004E 137C 0002 0024             		move.b	#2,obRoutine(a1)
00010054 08A8 0003 0022             		bclr	#3,obStatus(a0)
0001005A 4228 0025                  		clr.b	obSolid(a0)
00010068                            
00010068                            Spring_AniDwn:	; Routine $10
00010068 43F9 0000 0000             		lea	(Ani_Spring).l,a1
0001006E 6000 C9B8                  		bra.w	AnimateSprite
00010072                            ; ===========================================================================
00010072                            
00010072                            Spring_ResetDwn:
00010072                            		; Routine $12
00010072 117C 0001 001D             		move.b	#1,obNextAni(a0) ; reset animation
00010078 5928 0024                  		subq.b	#4,obRoutine(a0) ; goto "Spring_Dwn" routine
0001007C 4E75                       		rts	
0001007C 4E75                       		rts	
0001007E                            		include	"_anim\Springs.asm"
0001007E                            ; ---------------------------------------------------------------------------
0001007E                            ; Animation script - springs
0001007E                            ; ---------------------------------------------------------------------------
0001007E 0000                       Ani_Spring:	dc.w byte_DD02-Ani_Spring
00010080 0000                       		dc.w byte_DD0E-Ani_Spring
00010082 0001 0000 0202 0202 0202+  byte_DD02:	dc.b 0,	1, 0, 0, 2, 2, 2, 2, 2,	2, 0, afRoutine
0001008E 0004 0303 0505 0505 0505+  byte_DD0E:	dc.b 0,	4, 3, 3, 5, 5, 5, 5, 5,	5, 3, afRoutine
0001009A                            		even
0001009A                            		even
0001009A                            Map_Spring:	include	"_maps\Springs.asm"
0001009A                            ; ---------------------------------------------------------------------------
0001009A                            ; Sprite mappings - springs
0001009A                            ; ---------------------------------------------------------------------------
0001009A                            Map_Spring_internal:
0001009A 0000                       		dc.w M_Spg_Up-Map_Spring_internal
0001009C 0000                       		dc.w M_Spg_UpFlat-Map_Spring_internal
0001009E 0000                       		dc.w M_Spg_UpExt-Map_Spring_internal
000100A0 0000                       		dc.w M_Spg_Left-Map_Spring_internal
000100A2 0000                       		dc.w M_Spg_LeftFlat-Map_Spring_internal
000100A4 0000                       		dc.w M_Spg_LeftExt-Map_Spring_internal
000100A6 02                         M_Spg_Up:	dc.b 2			; facing up
000100A7 F80C 0000 F0               		dc.b $F8, $C, 0, 0, $F0
000100AC 000C 0004 F0               		dc.b 0,	$C, 0, 4, $F0
000100B1 01                         M_Spg_UpFlat:	dc.b 1			; facing up, flattened
000100B2 000C 0000 F0               		dc.b 0,	$C, 0, 0, $F0
000100B7 03                         M_Spg_UpExt:	dc.b 3			; facing up, extended
000100B8 E80C 0000 F0               		dc.b $E8, $C, 0, 0, $F0
000100BD F005 0008 F8               		dc.b $F0, 5, 0,	8, $F8
000100C2 000C 000C F0               		dc.b 0,	$C, 0, $C, $F0
000100C7 01                         M_Spg_Left:	dc.b 1			; facing left
000100C8 F007 0000 F8               		dc.b $F0, 7, 0,	0, $F8
000100CD 01                         M_Spg_LeftFlat:	dc.b 1			; facing left, flattened
000100CE F003 0004 F8               		dc.b $F0, 3, 0,	4, $F8
000100D3 04                         M_Spg_LeftExt:	dc.b 4			; facing left, extended
000100D4 F003 0004 10               		dc.b $F0, 3, 0,	4, $10
000100D9 F809 0008 F8               		dc.b $F8, 9, 0,	8, $F8
000100DE F000 0000 F8               		dc.b $F0, 0, 0,	0, $F8
000100E3 0800 0003 F8               		dc.b 8,	0, 0, 3, $F8
000100E8                            		even
000100E8                            		even
000100E8                            
000100E8                            		include	"_incObj\42 Newtron.asm"
000100E8                            ; ---------------------------------------------------------------------------
000100E8                            ; Object 42 - Newtron enemy (GHZ)
000100E8                            ; ---------------------------------------------------------------------------
000100E8                            
000100E8                            Newtron:
000100E8 7000                       		moveq	#0,d0
000100EA 1028 0024                  		move.b	obRoutine(a0),d0
000100EE 323B 0000                  		move.w	Newt_Index(pc,d0.w),d1
000100F2 4EFB 1000                  		jmp	Newt_Index(pc,d1.w)
000100F6                            ; ===========================================================================
000100F6 0000                       Newt_Index:	dc.w Newt_Main-Newt_Index
000100F8 0000                       		dc.w Newt_Action-Newt_Index
000100FA 0000                       		dc.w Newt_Delete-Newt_Index
000100FC                            ; ===========================================================================
000100FC                            
000100FC                            Newt_Main:	; Routine 0
000100FC 5428 0024                  		addq.b	#2,obRoutine(a0)
00010100 217C 0000 0000 0004        		move.l	#Map_Newt,obMap(a0)
00010108 317C 049B 0002             		move.w	#$49B,obGfx(a0)
0001010E 117C 0004 0001             		move.b	#4,obRender(a0)
00010114 317C 0200 0018             		move.w	#$200,obPriority(a0)
0001011A 117C 0014 0014             		move.b	#$14,obActWid(a0)
00010120 117C 0010 0016             		move.b	#$10,obHeight(a0)
00010126 117C 0008 0017             		move.b	#8,obWidth(a0)
0001012C                            
0001012C                            Newt_Action:	; Routine 2
0001012C 7000                       		moveq	#0,d0
0001012E 1028 0025                  		move.b	ob2ndRout(a0),d0
00010132 323B 0000                  		move.w	@index(pc,d0.w),d1
00010136 4EBB 1000                  		jsr	@index(pc,d1.w)
0001013A 43F9 0000 0000             		lea	(Ani_Newt).l,a1
00010140 6100 C8E6                  		bsr.w	AnimateSprite
00010144 6000 0000                  		bra.w	RememberState
00010148                            ; ===========================================================================
00010148 0000                       @index:		dc.w @chkdistance-@index
0001014A 0000                       		dc.w @type00-@index
0001014C 0000                       		dc.w @matchfloor-@index
0001014E 0000                       		dc.w @speed-@index
00010150 0000                       		dc.w @type01-@index
00010152                            ; ===========================================================================
00010152                            
00010152                            @chkdistance:
00010152 08E8 0000 0022             		bset	#0,obStatus(a0)
00010158 3038 D008                  		move.w	(v_player+obX).w,d0
0001015C 9068 0008                  		sub.w	obX(a0),d0
00010160 6400                       		bcc.s	@sonicisright
00010162 4440                       		neg.w	d0
00010164 08A8 0000 0022             		bclr	#0,obStatus(a0)
0001016A                            
0001016A                            	@sonicisright:
0001016A 0C40 0080                  		cmpi.w	#$80,d0		; is Sonic within $80 pixels of	the newtron?
0001016E 6400                       		bcc.s	@outofrange	; if not, branch
00010170 5428 0025                  		addq.b	#2,ob2ndRout(a0) ; goto @type00 next
00010174 117C 0001 001C             		move.b	#1,obAnim(a0)
0001017A 4A28 0028                  		tst.b	obSubtype(a0)	; check	object type
0001017E 6700                       		beq.s	@istype00	; if type is 00, branch
00010180                            
00010180 317C 249B 0002             		move.w	#$249B,obGfx(a0)
00010186 117C 0008 0025             		move.b	#8,ob2ndRout(a0) ; goto @type01 next
0001018C 117C 0004 001C             		move.b	#4,obAnim(a0)	; use different	animation
00010192                            
00010192                            	@outofrange:
00010192                            	@istype00:
00010192 4E75                       		rts	
00010194                            ; ===========================================================================
00010194                            
00010194                            @type00:
00010194 0C28 0004 001A             		cmpi.b	#4,obFrame(a0)	; has "appearing" animation finished?
0001019A 6400                       		bcc.s	@fall		; is yes, branch
0001019C 08E8 0000 0022             		bset	#0,obStatus(a0)
000101A2 3038 D008                  		move.w	(v_player+obX).w,d0
000101A6 9068 0008                  		sub.w	obX(a0),d0
000101AA 6400                       		bcc.s	@sonicisright2
000101AC 08A8 0000 0022             		bclr	#0,obStatus(a0)
000101B2                            
000101B2                            	@sonicisright2:
000101B2 4E75                       		rts	
000101B4                            ; ===========================================================================
000101B4                            
000101B4                            	@fall:
000101B4 0C28 0001 001A             		cmpi.b	#1,obFrame(a0)
000101BA 6600                       		bne.s	@loc_DE42
000101BC 117C 000C 0020             		move.b	#$C,obColType(a0)
000101C2                            
000101C2                            	@loc_DE42:
000101C2 6100 F76C                  		bsr.w	ObjectFall
000101C6 6100 0000                  		bsr.w	ObjFloorDist
000101CA 4A41                       		tst.w	d1		; has newtron hit the floor?
000101CC 6A00                       		bpl.s	@keepfalling	; if not, branch
000101CE                            
000101CE D368 000C                  		add.w	d1,obY(a0)
000101D2 317C 0000 0012             		move.w	#0,obVelY(a0)	; stop newtron falling
000101D8 5428 0025                  		addq.b	#2,ob2ndRout(a0)
000101DC 117C 0002 001C             		move.b	#2,obAnim(a0)
000101E2 0828 0005 0002             		btst	#5,obGfx(a0)
000101E8 6700                       		beq.s	@pppppppp
000101EA 5228 001C                  		addq.b	#1,obAnim(a0)
000101EE                            
000101EE                            	@pppppppp:
000101EE 117C 000D 0020             		move.b	#$D,obColType(a0)
000101F4 317C 0200 0010             		move.w	#$200,obVelX(a0) ; move newtron horizontally
000101FA 0828 0000 0022             		btst	#0,obStatus(a0)
00010200 6600                       		bne.s	@keepfalling
00010202 4468 0010                  		neg.w	obVelX(a0)
00010206                            
00010206                            	@keepfalling:
00010206 4E75                       		rts	
00010208                            ; ===========================================================================
00010208                            
00010208                            @matchfloor:
00010208 6100 F75E                  		bsr.w	SpeedToPos
0001020C 6100 0000                  		bsr.w	ObjFloorDist
00010210 0C41 FFF8                  		cmpi.w	#-8,d1
00010214 6D00                       		blt.s	@nextroutine
00010216 0C41 000C                  		cmpi.w	#$C,d1
0001021A 6C00                       		bge.s	@nextroutine
0001021C D368 000C                  		add.w	d1,obY(a0)	; match	newtron's position with floor
00010220 4E75                       		rts	
00010222                            ; ===========================================================================
00010222                            
00010222                            	@nextroutine:
00010222 5428 0025                  		addq.b	#2,ob2ndRout(a0) ; goto @speed next
00010226 4E75                       		rts	
00010228                            ; ===========================================================================
00010228                            
00010228                            @speed:
00010228 6100 F73E                  		bsr.w	SpeedToPos
0001022C 4E75                       		rts	
0001022E                            ; ===========================================================================
0001022E                            
0001022E                            @type01:
0001022E 0C28 0001 001A             		cmpi.b	#1,obFrame(a0)
00010234 6600                       		bne.s	@firemissile
00010236 117C 000C 0020             		move.b	#$C,obColType(a0)
0001023C                            
0001023C                            	@firemissile:
0001023C 0C28 0002 001A             		cmpi.b	#2,obFrame(a0)
00010242 6600                       		bne.s	@fail
00010244 4A28 0032                  		tst.b	$32(a0)
00010248 6600                       		bne.s	@fail
0001024A 117C 0001 0032             		move.b	#1,$32(a0)
00010250 6100 FBB6                  		bsr.w	FindFreeObj
00010254 6600                       		bne.s	@fail
00010256 12BC 0023                  		move.b	#id_Missile,0(a1) ; load missile object
0001025A 3368 0008 0008             		move.w	obX(a0),obX(a1)
00010260 3368 000C 000C             		move.w	obY(a0),obY(a1)
00010266 5169 000C                  		subq.w	#8,obY(a1)
0001026A 337C 0200 0010             		move.w	#$200,obVelX(a1)
00010270 303C 0014                  		move.w	#$14,d0
00010274 0828 0000 0022             		btst	#0,obStatus(a0)
0001027A 6600                       		bne.s	@noflip
0001027C 4440                       		neg.w	d0
0001027E 4469 0010                  		neg.w	obVelX(a1)
00010282                            
00010282                            	@noflip:
00010282 D169 0008                  		add.w	d0,obX(a1)
00010286 1368 0022 0022             		move.b	obStatus(a0),obStatus(a1)
0001028C 137C 0001 0028             		move.b	#1,obSubtype(a1)
00010292                            
00010292                            	@fail:
00010292 4E75                       		rts	
00010294                            ; ===========================================================================
00010294                            
00010294                            Newt_Delete:	; Routine 4
00010294 6000 F726                  		bra.w	DeleteObject
00010294 6000 F726                  		bra.w	DeleteObject
00010298                            		include	"_anim\Newtron.asm"
00010298                            ; ---------------------------------------------------------------------------
00010298                            ; Animation script - Newtron enemy
00010298                            ; ---------------------------------------------------------------------------
00010298 0000                       Ani_Newt:	dc.w A_Newt_Blank-Ani_Newt
0001029A 0000                       		dc.w A_Newt_Drop-Ani_Newt
0001029C 0000                       		dc.w A_Newt_Fly1-Ani_Newt
0001029E 0000                       		dc.w A_Newt_Fly2-Ani_Newt
000102A0 0000                       		dc.w A_Newt_Fires-Ani_Newt
000102A2 0F0A FF                    A_Newt_Blank:	dc.b $F, $A, afEnd
000102A6 00                         		even
000102A6 1300 0103 0405 FE01        A_Newt_Drop:	dc.b $13, 0, 1,	3, 4, 5, afBack, 1
000102AE 0206 07FF                  A_Newt_Fly1:	dc.b 2,	6, 7, afEnd
000102B2 0208 09FF                  A_Newt_Fly2:	dc.b 2,	8, 9, afEnd
000102B6 1300 0101 0201 0100 FC     A_Newt_Fires:	dc.b $13, 0, 1,	1, 2, 1, 1, 0, afRoutine
000102C0 00                         		even
000102C0 00                         		even
000102C0                            Map_Newt:	include	"_maps\Newtron.asm"
000102C0                            ; ---------------------------------------------------------------------------
000102C0                            ; Sprite mappings - Newtron enemy (GHZ)
000102C0                            ; ---------------------------------------------------------------------------
000102C0                            Map_Newt_internal:
000102C0 0000                       		dc.w M_Newt_Trans-Map_Newt_internal
000102C2 0000                       		dc.w M_Newt_Norm-Map_Newt_internal
000102C4 0000                       		dc.w M_Newt_Fires-Map_Newt_internal
000102C6 0000                       		dc.w M_Newt_Drop1-Map_Newt_internal
000102C8 0000                       		dc.w M_Newt_Drop2-Map_Newt_internal
000102CA 0000                       		dc.w M_Newt_Drop3-Map_Newt_internal
000102CC 0000                       		dc.w M_Newt_Fly1a-Map_Newt_internal
000102CE 0000                       		dc.w M_Newt_Fly1b-Map_Newt_internal
000102D0 0000                       		dc.w M_Newt_Fly2a-Map_Newt_internal
000102D2 0000                       		dc.w M_Newt_Fly2b-Map_Newt_internal
000102D4 0000                       		dc.w M_Newt_Blank-Map_Newt_internal
000102D6 03                         M_Newt_Trans:	dc.b 3
000102D7 EC0D 0000 EC               		dc.b $EC, $D, 0, 0, $EC	; partially visible
000102DC F400 0008 0C               		dc.b $F4, 0, 0,	8, $C
000102E1 FC0E 0009 F4               		dc.b $FC, $E, 0, 9, $F4
000102E6 03                         M_Newt_Norm:	dc.b 3
000102E7 EC06 0015 EC               		dc.b $EC, 6, 0,	$15, $EC ; visible
000102EC EC09 001B FC               		dc.b $EC, 9, 0,	$1B, $FC
000102F1 FC0A 0021 FC               		dc.b $FC, $A, 0, $21, $FC
000102F6 03                         M_Newt_Fires:	dc.b 3
000102F7 EC06 002A EC               		dc.b $EC, 6, 0,	$2A, $EC ; open mouth, firing
000102FC EC09 001B FC               		dc.b $EC, 9, 0,	$1B, $FC
00010301 FC0A 0021 FC               		dc.b $FC, $A, 0, $21, $FC
00010306 04                         M_Newt_Drop1:	dc.b 4
00010307 EC06 0030 EC               		dc.b $EC, 6, 0,	$30, $EC ; dropping
0001030C EC09 001B FC               		dc.b $EC, 9, 0,	$1B, $FC
00010311 FC09 0036 FC               		dc.b $FC, 9, 0,	$36, $FC
00010316 0C00 003C 0C               		dc.b $C, 0, 0, $3C, $C
0001031B 03                         M_Newt_Drop2:	dc.b 3
0001031C F40D 003D EC               		dc.b $F4, $D, 0, $3D, $EC
00010321 FC00 0020 0C               		dc.b $FC, 0, 0,	$20, $C
00010326 0408 0045 FC               		dc.b 4,	8, 0, $45, $FC
0001032B 02                         M_Newt_Drop3:	dc.b 2
0001032C F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
00010331 F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
00010336 03                         M_Newt_Fly1a:	dc.b 3
00010337 F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC ; flying
0001033C F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
00010341 FE00 0052 14               		dc.b $FE, 0, 0,	$52, $14
00010346 03                         M_Newt_Fly1b:	dc.b 3
00010347 F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0001034C F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
00010351 FE04 0053 14               		dc.b $FE, 4, 0,	$53, $14
00010356 03                         M_Newt_Fly2a:	dc.b 3
00010357 F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0001035C F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
00010361 FE00 E052 14               		dc.b $FE, 0, $E0, $52, $14
00010366 03                         M_Newt_Fly2b:	dc.b 3
00010367 F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0001036C F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
00010371 FE04 E053 14               		dc.b $FE, 4, $E0, $53, $14
00010376 00                         M_Newt_Blank:	dc.b 0
00010378 00                         		even
00010378 00                         		even
00010378                            		include	"_incObj\43 Roller.asm"
00010378                            ; ---------------------------------------------------------------------------
00010378                            ; Object 43 - Roller enemy (SYZ)
00010378                            ; ---------------------------------------------------------------------------
00010378                            
00010378                            Roller:
00010378 7000                       		moveq	#0,d0
0001037A 1028 0024                  		move.b	obRoutine(a0),d0
0001037E 323B 0000                  		move.w	Roll_Index(pc,d0.w),d1
00010382 4EFB 1000                  		jmp	Roll_Index(pc,d1.w)
00010386                            ; ===========================================================================
00010386 0000                       Roll_Index:	dc.w Roll_Main-Roll_Index
00010388 0000                       		dc.w Roll_Action-Roll_Index
0001038A                            ; ===========================================================================
0001038A                            
0001038A                            Roll_Main:	; Routine 0
0001038A 117C 000E 0016             		move.b	#$E,obHeight(a0)
00010390 117C 0008 0017             		move.b	#8,obWidth(a0)
00010396 6100 F598                  		bsr.w	ObjectFall
0001039A 6100 0000                  		bsr.w	ObjFloorDist
0001039E 4A41                       		tst.w	d1
000103A0 6A00                       		bpl.s	locret_E052
000103A2 D368 000C                  		add.w	d1,obY(a0)	; match	roller's position with the floor
000103A6 317C 0000 0012             		move.w	#0,obVelY(a0)
000103AC 5428 0024                  		addq.b	#2,obRoutine(a0)
000103B0 217C 0000 0000 0004        		move.l	#Map_Roll,obMap(a0)
000103B8 317C 04B8 0002             		move.w	#$4B8,obGfx(a0)
000103BE 117C 0004 0001             		move.b	#4,obRender(a0)
000103C4 317C 0200 0018             		move.w	#$200,obPriority(a0)
000103CA 117C 0010 0014             		move.b	#$10,obActWid(a0)
000103D0                            
000103D0                            	locret_E052:
000103D0 4E75                       		rts	
000103D2                            ; ===========================================================================
000103D2                            
000103D2                            Roll_Action:	; Routine 2
000103D2 7000                       		moveq	#0,d0
000103D4 1028 0025                  		move.b	ob2ndRout(a0),d0
000103D8 323B 0000                  		move.w	Roll_Index2(pc,d0.w),d1
000103DC 4EBB 1000                  		jsr	Roll_Index2(pc,d1.w)
000103E0 43F9 0000 0000             		lea	(Ani_Roll).l,a1
000103E6 6100 C640                  		bsr.w	AnimateSprite
000103EA 3028 0008                  		move.w	obX(a0),d0
000103EE 0240 FF80                  		andi.w	#$FF80,d0
000103F2 3238 F700                  		move.w	(v_screenposx).w,d1
000103F6 0441 0080                  		subi.w	#$80,d1
000103FA 0241 FF80                  		andi.w	#$FF80,d1
000103FE 9041                       		sub.w	d1,d0
00010400 0C40 0280                  		cmpi.w	#$280,d0
00010404 6E00 0000                  		bgt.w	Roll_ChkGone
00010408 6000 F572                  		bra.w	DisplaySprite
0001040C                            ; ===========================================================================
0001040C                            
0001040C                            Roll_ChkGone:
0001040C 45F8 FC00                  		lea	(v_objstate).w,a2
00010410 7000                       		moveq	#0,d0
00010412 1028 0023                  		move.b	obRespawnNo(a0),d0
00010416 6700                       		beq.s	Roll_Delete
00010418 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0001041E                            
0001041E                            Roll_Delete:
0001041E 6000 F59C                  		bra.w	DeleteObject
00010422                            ; ===========================================================================
00010422 0000                       Roll_Index2:	dc.w Roll_RollChk-Roll_Index2
00010424 0000                       		dc.w Roll_RollNoChk-Roll_Index2
00010426 0000                       		dc.w Roll_ChkJump-Roll_Index2
00010428 0000                       		dc.w Roll_MatchFloor-Roll_Index2
0001042A                            ; ===========================================================================
0001042A                            
0001042A                            Roll_RollChk:
0001042A 3038 D008                  		move.w	(v_player+obX).w,d0
0001042E 0440 0100                  		subi.w	#$100,d0
00010432 6500                       		bcs.s	loc_E0D2
00010434 9068 0008                  		sub.w	obX(a0),d0	; check	distance between Roller	and Sonic
00010438 6500                       		bcs.s	loc_E0D2
0001043A 5828 0025                  		addq.b	#4,ob2ndRout(a0)
0001043E 117C 0002 001C             		move.b	#2,obAnim(a0)
00010444 317C 0700 0010             		move.w	#$700,obVelX(a0) ; move Roller horizontally
0001044A 117C 008E 0020             		move.b	#$8E,obColType(a0) ; make Roller invincible
00010450                            
00010450                            loc_E0D2:
00010450 588F                       		addq.l	#4,sp
00010452 4E75                       		rts	
00010454                            ; ===========================================================================
00010454                            
00010454                            Roll_RollNoChk:
00010454 0C28 0002 001C             		cmpi.b	#2,obAnim(a0)
0001045A 6700                       		beq.s	loc_E0F8
0001045C 5368 0030                  		subq.w	#1,$30(a0)
00010460 6A00                       		bpl.s	locret_E0F6
00010462 117C 0001 001C             		move.b	#1,obAnim(a0)
00010468 317C 0700 0010             		move.w	#$700,obVelX(a0)
0001046E 117C 008E 0020             		move.b	#$8E,obColType(a0)
00010474                            
00010474                            locret_E0F6:
00010474 4E75                       		rts	
00010476                            ; ===========================================================================
00010476                            
00010476                            loc_E0F8:
00010476 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001047A 4E75                       		rts	
0001047C                            ; ===========================================================================
0001047C                            
0001047C                            Roll_ChkJump:
0001047C 6100 0000                  		bsr.w	Roll_Stop
00010480 6100 F4E6                  		bsr.w	SpeedToPos
00010484 6100 0000                  		bsr.w	ObjFloorDist
00010488 0C41 FFF8                  		cmpi.w	#-8,d1
0001048C 6D00                       		blt.s	Roll_Jump
0001048E 0C41 000C                  		cmpi.w	#$C,d1
00010492 6C00                       		bge.s	Roll_Jump
00010494 D368 000C                  		add.w	d1,obY(a0)
00010498 4E75                       		rts	
0001049A                            ; ===========================================================================
0001049A                            
0001049A                            Roll_Jump:
0001049A 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001049E 08E8 0000 0032             		bset	#0,$32(a0)
000104A4 6700                       		beq.s	locret_E12E
000104A6 317C FA00 0012             		move.w	#-$600,obVelY(a0)	; move Roller vertically
000104AC                            
000104AC                            locret_E12E:
000104AC 4E75                       		rts	
000104AE                            ; ===========================================================================
000104AE                            
000104AE                            Roll_MatchFloor:
000104AE 6100 F480                  		bsr.w	ObjectFall
000104B2 4A68 0012                  		tst.w	obVelY(a0)
000104B6 6B00                       		bmi.s	locret_E150
000104B8 6100 0000                  		bsr.w	ObjFloorDist
000104BC 4A41                       		tst.w	d1
000104BE 6A00                       		bpl.s	locret_E150
000104C0 D368 000C                  		add.w	d1,obY(a0)	; match	Roller's position with the floor
000104C4 5528 0025                  		subq.b	#2,ob2ndRout(a0)
000104C8 317C 0000 0012             		move.w	#0,obVelY(a0)
000104CE                            
000104CE                            locret_E150:
000104CE 4E75                       		rts	
000104D0                            
000104D0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000104D0                            
000104D0                            
000104D0                            Roll_Stop:
000104D0 4A28 0032                  		tst.b	$32(a0)
000104D4 6B00                       		bmi.s	locret_E188
000104D6 3038 D008                  		move.w	(v_player+obX).w,d0
000104DA 0440 0030                  		subi.w	#$30,d0
000104DE 9068 0008                  		sub.w	obX(a0),d0
000104E2 6400                       		bcc.s	locret_E188
000104E4 117C 0000 001C             		move.b	#0,obAnim(a0)
000104EA 117C 000E 0020             		move.b	#$E,obColType(a0)
000104F0 4268 0010                  		clr.w	obVelX(a0)
000104F4 317C 0078 0030             		move.w	#120,$30(a0)	; set waiting time to 2	seconds
000104FA 117C 0002 0025             		move.b	#2,ob2ndRout(a0)
00010500 08E8 0007 0032             		bset	#7,$32(a0)
00010506                            
00010506                            locret_E188:
00010506 4E75                       		rts	
00010508                            ; End of function Roll_Stop
00010508                            ; End of function Roll_Stop
00010508                            		include	"_anim\Roller.asm"
00010508                            ; ---------------------------------------------------------------------------
00010508                            ; Animation script - Roller enemy
00010508                            ; ---------------------------------------------------------------------------
00010508 0000                       Ani_Roll:	dc.w A_Roll_Unfold-Ani_Roll
0001050A 0000                       		dc.w A_Roll_Fold-Ani_Roll
0001050C 0000                       		dc.w A_Roll_Roll-Ani_Roll
0001050E 0F02 0100 FE01             A_Roll_Unfold:	dc.b $F, 2, 1, 0, afBack, 1
00010514 0F01 02FD 02               A_Roll_Fold:	dc.b $F, 1, 2, afChange, 2
0001051A 00                         		even
0001051A 0303 0402 FF               A_Roll_Roll:	dc.b 3,	3, 4, 2, afEnd
00010520 00                         		even
00010520 00                         		even
00010520                            Map_Roll:	include	"_maps\Roller.asm"
00010520                            ; --------------------------------------------------------------------------------
00010520                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
00010520                            ; --------------------------------------------------------------------------------
00010520                            
00010520                            SME_q3BmU:	
00010520 0000 0000                  		dc.w SME_q3BmU_A-SME_q3BmU, SME_q3BmU_15-SME_q3BmU	
00010524 0000 0000                  		dc.w SME_q3BmU_20-SME_q3BmU, SME_q3BmU_26-SME_q3BmU	
00010528 0000                       		dc.w SME_q3BmU_2C-SME_q3BmU	
0001052A 02                         SME_q3BmU_A:	dc.b 2	
0001052B DE0E 0000 F0               		dc.b $DE, $E, 0, 0, $F0	
00010530 F60E 000C F0               		dc.b $F6, $E, 0, $C, $F0	
00010535 02                         SME_q3BmU_15:	dc.b 2	
00010536 E60E 0000 F0               		dc.b $E6, $E, 0, 0, $F0	
0001053B FE0D 0018 F0               		dc.b $FE, $D, 0, $18, $F0	
00010540 01                         SME_q3BmU_20:	dc.b 1	
00010541 F00F 0020 F0               		dc.b $F0, $F, 0, $20, $F0	
00010546 01                         SME_q3BmU_26:	dc.b 1	
00010547 F00F 0030 F0               		dc.b $F0, $F, 0, $30, $F0	
0001054C 01                         SME_q3BmU_2C:	dc.b 1	
0001054D F00F 0040 F0               		dc.b $F0, $F, 0, $40, $F0	
00010552                            		even
00010552                            		even
00010552                            
00010552                            		include	"_incObj\44 GHZ Edge Walls.asm"
00010552                            ; ---------------------------------------------------------------------------
00010552                            ; Object 44 - edge walls (GHZ)
00010552                            ; ---------------------------------------------------------------------------
00010552                            
00010552                            EdgeWalls:
00010552 7000                       		moveq	#0,d0
00010554 1028 0024                  		move.b	obRoutine(a0),d0
00010558 323B 0000                  		move.w	Edge_Index(pc,d0.w),d1
0001055C 4EFB 1000                  		jmp	Edge_Index(pc,d1.w)
00010560                            ; ===========================================================================
00010560 0000                       Edge_Index:	dc.w Edge_Main-Edge_Index
00010562 0000                       		dc.w Edge_Solid-Edge_Index
00010564 0000                       		dc.w Edge_Display-Edge_Index
00010566                            ; ===========================================================================
00010566                            
00010566                            Edge_Main:	; Routine 0
00010566 5428 0024                  		addq.b	#2,obRoutine(a0)
0001056A 217C 0000 0000 0004        		move.l	#Map_Edge,obMap(a0)
00010572 317C 434C 0002             		move.w	#$434C,obGfx(a0)
00010578 0028 0004 0001             		ori.b	#4,obRender(a0)
0001057E 117C 0008 0014             		move.b	#8,obActWid(a0)
00010584 317C 0300 0018             		move.w	#$300,obPriority(a0)
0001058A 1168 0028 001A             		move.b	obSubtype(a0),obFrame(a0) ; copy object type number to frame number
00010590 08A8 0004 001A             		bclr	#4,obFrame(a0)	; clear	4th bit	(deduct	$10)
00010596 6700                       		beq.s	Edge_Solid	; make object solid if 4th bit = 0
00010598 5428 0024                  		addq.b	#2,obRoutine(a0)
0001059C 6000                       		bra.s	Edge_Display	; don't make it solid if 4th bit = 1
0001059E                            ; ===========================================================================
0001059E                            
0001059E                            Edge_Solid:	; Routine 2
0001059E 323C 0013                  		move.w	#$13,d1
000105A2 343C 0028                  		move.w	#$28,d2
000105A6 6100 A130                  		bsr.w	Obj44_SolidWall
000105AA                            
000105AA                            Edge_Display:	; Routine 4
000105AA 6100 F3D0                  		bsr.w	DisplaySprite
000105CC 4E75                       		rts	
000105CC 4E75                       		rts	
000105CE                            Map_Edge:	include	"_maps\GHZ Edge Walls.asm"
000105CE                            ; ---------------------------------------------------------------------------
000105CE                            ; Sprite mappings - walls (GHZ)
000105CE                            ; ---------------------------------------------------------------------------
000105CE                            Map_Edge_internal:
000105CE 0000                       		dc.w M_Edge_Shadow-Map_Edge_internal
000105D0 0000                       		dc.w M_Edge_Light-Map_Edge_internal
000105D2 0000                       		dc.w M_Edge_Dark-Map_Edge_internal
000105D4 04                         M_Edge_Shadow:	dc.b 4
000105D5 E005 0004 F8               		dc.b $E0, 5, 0,	4, $F8	; light with shadow
000105DA F005 0008 F8               		dc.b $F0, 5, 0,	8, $F8
000105DF 0005 0008 F8               		dc.b 0,	5, 0, 8, $F8
000105E4 1005 0008 F8               		dc.b $10, 5, 0,	8, $F8
000105E9 04                         M_Edge_Light:	dc.b 4
000105EA E005 0008 F8               		dc.b $E0, 5, 0,	8, $F8	; light with no shadow
000105EF F005 0008 F8               		dc.b $F0, 5, 0,	8, $F8
000105F4 0005 0008 F8               		dc.b 0,	5, 0, 8, $F8
000105F9 1005 0008 F8               		dc.b $10, 5, 0,	8, $F8
000105FE 04                         M_Edge_Dark:	dc.b 4
000105FF E005 0000 F8               		dc.b $E0, 5, 0,	0, $F8	; all shadow
00010604 F005 0000 F8               		dc.b $F0, 5, 0,	0, $F8
00010609 0005 0000 F8               		dc.b 0,	5, 0, 0, $F8
0001060E 1005 0000 F8               		dc.b $10, 5, 0,	0, $F8
00010614 00                         		even
00010614 00                         		even
00010614                            
00010614                            		include	"_incObj\13 Lava Ball Maker.asm"
00010614                            ; ---------------------------------------------------------------------------
00010614                            ; Object 13 - lava ball	maker (MZ, SLZ)
00010614                            ; ---------------------------------------------------------------------------
00010614                            
00010614                            LavaMaker:
00010614 7000                       		moveq	#0,d0
00010616 1028 0024                  		move.b	obRoutine(a0),d0
0001061A 323B 0000                  		move.w	LavaM_Index(pc,d0.w),d1
0001061E 4EBB 1000                  		jsr	LavaM_Index(pc,d1.w)
00010622 6000 0000                  		bra.w	LBall_ChkDel
00010626                            ; ===========================================================================
00010626 0000                       LavaM_Index:	dc.w LavaM_Main-LavaM_Index
00010628 0000                       		dc.w LavaM_MakeLava-LavaM_Index
0001062A                            ; ---------------------------------------------------------------------------
0001062A                            ;
0001062A                            ; Lava ball production rates
0001062A                            ;
0001062A 1E3C 5A78 96B4             LavaM_Rates:	dc.b 30, 60, 90, 120, 150, 180
00010630                            ; ===========================================================================
00010630                            
00010630                            LavaM_Main:	; Routine 0
00010630 5428 0024                  		addq.b	#2,obRoutine(a0)
00010634 1028 0028                  		move.b	obSubtype(a0),d0
00010638 E848                       		lsr.w	#4,d0
0001063A 0240 000F                  		andi.w	#$F,d0
0001063E 117B 00EA 001F             		move.b	LavaM_Rates(pc,d0.w),obDelayAni(a0)
00010644 1168 001F 001E             		move.b	obDelayAni(a0),obTimeFrame(a0) ; set time delay for lava balls
0001064A 0228 000F 0028             		andi.b	#$F,obSubtype(a0)
00010650                            
00010650                            LavaM_MakeLava:	; Routine 2
00010650 5328 001E                  		subq.b	#1,obTimeFrame(a0) ; subtract 1 from time delay
00010654 6600                       		bne.s	LavaM_Wait	; if time still	remains, branch
00010656 1168 001F 001E             		move.b	obDelayAni(a0),obTimeFrame(a0) ; reset time delay
0001065C 6100 F59E                  		bsr.w	ChkObjectVisible
00010660 6600                       		bne.s	LavaM_Wait
00010662 6100 F7A4                  		bsr.w	FindFreeObj
00010666 6600                       		bne.s	LavaM_Wait
00010668 12BC 0014                  		move.b	#id_LavaBall,0(a1) ; load lava ball object
0001066C 3368 0008 0008             		move.w	obX(a0),obX(a1)
00010672 3368 000C 000C             		move.w	obY(a0),obY(a1)
00010678 1368 0028 0028             		move.b	obSubtype(a0),obSubtype(a1)
0001067E                            
0001067E                            	LavaM_Wait:
0001067E 4E75                       		rts	
0001067E 4E75                       		rts	
00010680                            		include	"_incObj\14 Lava Ball.asm"
00010680                            ; ---------------------------------------------------------------------------
00010680                            ; Object 14 - lava balls (MZ, SLZ)
00010680                            ; ---------------------------------------------------------------------------
00010680                            
00010680                            LavaBall:
00010680 7000                       		moveq	#0,d0
00010682 1028 0024                  		move.b	obRoutine(a0),d0
00010686 323B 0000                  		move.w	LBall_Index(pc,d0.w),d1
0001068A 4EBB 1000                  		jsr	LBall_Index(pc,d1.w)
0001068E 6000 F2EC                  		bra.w	DisplaySprite
00010692                            ; ===========================================================================
00010692 0000                       LBall_Index:	dc.w LBall_Main-LBall_Index
00010694 0000                       		dc.w LBall_Action-LBall_Index
00010696 0000                       		dc.w LBall_Delete-LBall_Index
00010698                            
00010698 FC00 FB00 FA00 F900 FE00   LBall_Speeds:	dc.w -$400, -$500, -$600, -$700, -$200
000106A2 0200 FE00 0200 0000        		dc.w $200, -$200, $200,	0
000106AA                            ; ===========================================================================
000106AA                            
000106AA                            LBall_Main:	; Routine 0
000106AA 5428 0024                  		addq.b	#2,obRoutine(a0)
000106AE 117C 0008 0016             		move.b	#8,obHeight(a0)
000106B4 117C 0008 0017             		move.b	#8,obWidth(a0)
000106BA 217C 0000 D67A 0004        		move.l	#Map_Fire,obMap(a0)
000106C2 317C 0345 0002             		move.w	#$345,obGfx(a0)
000106C8 0C38 0003 FE10             		cmpi.b	#3,(v_zone).w	; check if level is SLZ
000106CE 6600                       		bne.s	@notSLZ
000106D0 317C 0480 0002             		move.w	#$480,obGfx(a0)	; SLZ specific code
000106D6                            
000106D6                            	@notSLZ:
000106D6 117C 0004 0001             		move.b	#4,obRender(a0)
000106DC 317C 0180 0018             		move.w	#$180,obPriority(a0)
000106E2 117C 008B 0020             		move.b	#$8B,obColType(a0)
000106E8 3168 000C 0030             		move.w	obY(a0),$30(a0)
000106EE 4A28 0029                  		tst.b	$29(a0)
000106F2 6700                       		beq.s	@speed
000106F4 5428 0018                  		addq.b	#2,obPriority(a0)
000106F8                            
000106F8                            	@speed:
000106F8 7000                       		moveq	#0,d0
000106FA 1028 0028                  		move.b	obSubtype(a0),d0
000106FE D040                       		add.w	d0,d0
00010700 317B 0096 0012             		move.w	LBall_Speeds(pc,d0.w),obVelY(a0) ; load object speed (vertical)
00010706 117C 0008 0014             		move.b	#8,obActWid(a0)
0001070C 0C28 0006 0028             		cmpi.b	#6,obSubtype(a0) ; is object type below $6 ?
00010712 6500                       		bcs.s	@sound		; if yes, branch
00010714                            
00010714 117C 0010 0014             		move.b	#$10,obActWid(a0)
0001071A 117C 0002 001C             		move.b	#2,obAnim(a0)	; use horizontal animation
00010720 3168 0012 0010             		move.w	obVelY(a0),obVelX(a0) ; set horizontal speed
00010726 317C 0000 0012             		move.w	#0,obVelY(a0)	; delete vertical speed
0001072C                            
0001072C                            	@sound:
00010736                            
00010736                            LBall_Action:	; Routine 2
00010736 7000                       		moveq	#0,d0
00010738 1028 0028                  		move.b	obSubtype(a0),d0
0001073C D040                       		add.w	d0,d0
0001073E 323B 0000                  		move.w	LBall_TypeIndex(pc,d0.w),d1
00010742 4EBB 1000                  		jsr	LBall_TypeIndex(pc,d1.w)
00010746 6100 F220                  		bsr.w	SpeedToPos
0001074A 43F9 0000 0000             		lea	(Ani_Fire).l,a1
00010750 6100 C2D6                  		bsr.w	AnimateSprite
00010754                            
00010754                            LBall_ChkDel:
00010772 4E75                       		rts	
00010774                            ; ===========================================================================
00010774 0000 0000                  LBall_TypeIndex:dc.w LBall_Type00-LBall_TypeIndex, LBall_Type00-LBall_TypeIndex
00010778 0000 0000                  		dc.w LBall_Type00-LBall_TypeIndex, LBall_Type00-LBall_TypeIndex
0001077C 0000 0000                  		dc.w LBall_Type04-LBall_TypeIndex, LBall_Type05-LBall_TypeIndex
00010780 0000 0000                  		dc.w LBall_Type06-LBall_TypeIndex, LBall_Type07-LBall_TypeIndex
00010784 0000                       		dc.w LBall_Type08-LBall_TypeIndex
00010786                            ; ===========================================================================
00010786                            ; lavaball types 00-03 fly up and fall back down
00010786                            
00010786                            LBall_Type00:
00010786 0668 0018 0012             		addi.w	#$18,obVelY(a0)	; increase object's downward speed
0001078C 3028 0030                  		move.w	$30(a0),d0
00010790 B068 000C                  		cmp.w	obY(a0),d0	; has object fallen back to its	original position?
00010794 6400                       		bcc.s	loc_E41E	; if not, branch
00010796 5428 0024                  		addq.b	#2,obRoutine(a0)	; goto "LBall_Delete" routine
0001079A                            
0001079A                            loc_E41E:
0001079A 08A8 0001 0022             		bclr	#1,obStatus(a0)
000107A0 4A68 0012                  		tst.w	obVelY(a0)
000107A4 6A00                       		bpl.s	locret_E430
000107A6 08E8 0001 0022             		bset	#1,obStatus(a0)
000107AC                            
000107AC                            locret_E430:
000107AC 4E75                       		rts	
000107AE                            ; ===========================================================================
000107AE                            ; lavaball type	04 flies up until it hits the ceiling
000107AE                            
000107AE                            LBall_Type04:
000107AE 08E8 0001 0022             		bset	#1,obStatus(a0)
000107B4 6100 0000                  		bsr.w	ObjHitCeiling
000107B8 4A41                       		tst.w	d1
000107BA 6A00                       		bpl.s	locret_E452
000107BC 117C 0008 0028             		move.b	#8,obSubtype(a0)
000107C2 117C 0001 001C             		move.b	#1,obAnim(a0)
000107C8 317C 0000 0012             		move.w	#0,obVelY(a0)	; stop the object when it touches the ceiling
000107CE                            
000107CE                            locret_E452:
000107CE 4E75                       		rts	
000107D0                            ; ===========================================================================
000107D0                            ; lavaball type	05 falls down until it hits the	floor
000107D0                            
000107D0                            LBall_Type05:
000107D0 08A8 0001 0022             		bclr	#1,obStatus(a0)
000107D6 6100 0000                  		bsr.w	ObjFloorDist
000107DA 4A41                       		tst.w	d1
000107DC 6A00                       		bpl.s	locret_E474
000107DE 117C 0008 0028             		move.b	#8,obSubtype(a0)
000107E4 117C 0001 001C             		move.b	#1,obAnim(a0)
000107EA 317C 0000 0012             		move.w	#0,obVelY(a0)	; stop the object when it touches the floor
000107F0                            
000107F0                            locret_E474:
000107F0 4E75                       		rts	
000107F2                            ; ===========================================================================
000107F2                            ; lavaball types 06-07 move sideways
000107F2                            
000107F2                            LBall_Type06:
000107F2 08E8 0000 0022             		bset	#0,obStatus(a0)
000107F8 76F8                       		moveq	#-8,d3
000107FA 6100 0000                  		bsr.w	ObjHitWallLeft
000107FE 4A41                       		tst.w	d1
00010800 6A00                       		bpl.s	locret_E498
00010802 117C 0008 0028             		move.b	#8,obSubtype(a0)
00010808 117C 0003 001C             		move.b	#3,obAnim(a0)
0001080E 317C 0000 0010             		move.w	#0,obVelX(a0)	; stop object when it touches a	wall
00010814                            
00010814                            locret_E498:
00010814 4E75                       		rts	
00010816                            ; ===========================================================================
00010816                            
00010816                            LBall_Type07:
00010816 08A8 0000 0022             		bclr	#0,obStatus(a0)
0001081C 7608                       		moveq	#8,d3
0001081E 6100 0000                  		bsr.w	ObjHitWallRight
00010822 4A41                       		tst.w	d1
00010824 6A00                       		bpl.s	locret_E4BC
00010826 117C 0008 0028             		move.b	#8,obSubtype(a0)
0001082C 117C 0003 001C             		move.b	#3,obAnim(a0)
00010832 317C 0000 0010             		move.w	#0,obVelX(a0)	; stop object when it touches a	wall
00010838                            
00010838                            locret_E4BC:
00010838 4E75                       		rts	
0001083A                            ; ===========================================================================
0001083A                            
0001083A                            LBall_Type08:
0001083A 4E75                       		rts	
0001083C                            ; ===========================================================================
0001083C                            
0001083C                            LBall_Delete:
0001083C 6000 F17E                  		bra.w	DeleteObject
0001083C 6000 F17E                  		bra.w	DeleteObject
00010840                            		include	"_anim\Fireballs.asm"
00010840                            ; ---------------------------------------------------------------------------
00010840                            ; Animation script - lava balls
00010840                            ; ---------------------------------------------------------------------------
00010840 0000                       Ani_Fire:	dc.w @vertical-Ani_Fire
00010842 0000                       		dc.w @vertcollide-Ani_Fire
00010844 0000                       		dc.w @horizontal-Ani_Fire
00010846 0000                       		dc.w @horicollide-Ani_Fire
00010848 0500 2001 21FF             @vertical:	dc.b 5,	0, $20,	1, $21,	afEnd
0001084E 0502 FC                    @vertcollide:	dc.b 5,	2, afRoutine
00010852 00                         		even
00010852 0503 4304 44FF             @horizontal:	dc.b 5,	3, $43,	4, $44,	afEnd
00010858 0505 FC                    @horicollide:	dc.b 5,	5, afRoutine
0001085C 00                         		even
0001085C 00                         		even
0001085C                            
0001085C                            		include	"_incObj\6D Flamethrower.asm"
0001085C                            ; ---------------------------------------------------------------------------
0001085C                            ; Object 6D - flame thrower (SBZ)
0001085C                            ; ---------------------------------------------------------------------------
0001085C                            
0001085C                            Flamethrower:
0001085C 7000                       		moveq	#0,d0
0001085E 1028 0024                  		move.b	obRoutine(a0),d0
00010862 323B 0000                  		move.w	Flame_Index(pc,d0.w),d1
00010866 4EFB 1000                  		jmp	Flame_Index(pc,d1.w)
0001086A                            ; ===========================================================================
0001086A 0000                       Flame_Index:	dc.w Flame_Main-Flame_Index
0001086C 0000                       		dc.w Flame_Action-Flame_Index
0001086E                            ; ===========================================================================
0001086E                            
0001086E                            Flame_Main:	; Routine 0
0001086E 5428 0024                  		addq.b	#2,obRoutine(a0)
00010872 217C 0000 0000 0004        		move.l	#Map_Flame,obMap(a0)
0001087A 317C 83D9 0002             		move.w	#$83D9,obGfx(a0)
00010880 0028 0004 0001             		ori.b	#4,obRender(a0)
00010886 317C 0080 0018             		move.w	#$80,obPriority(a0)
0001088C 3168 000C 0030             		move.w	obY(a0),$30(a0)	; store obY (gets overwritten later though)
00010892 117C 000C 0014             		move.b	#$C,obActWid(a0)
00010898 1028 0028                  		move.b	obSubtype(a0),d0
0001089C 0240 00F0                  		andi.w	#$F0,d0		; read 1st digit of object type
000108A0 D040                       		add.w	d0,d0		; multiply by 2
000108A2 3140 0030                  		move.w	d0,$30(a0)
000108A6 3140 0032                  		move.w	d0,$32(a0)	; set flaming time
000108AA 1028 0028                  		move.b	obSubtype(a0),d0
000108AE 0240 000F                  		andi.w	#$F,d0		; read 2nd digit of object type
000108B2 EB48                       		lsl.w	#5,d0		; multiply by $20
000108B4 3140 0034                  		move.w	d0,$34(a0)	; set pause time
000108B8 117C 000A 0036             		move.b	#$A,$36(a0)
000108BE 0828 0001 0022             		btst	#1,obStatus(a0)
000108C4 6700                       		beq.s	Flame_Action
000108C6 117C 0002 001C             		move.b	#2,obAnim(a0)
000108CC 117C 0015 0036             		move.b	#$15,$36(a0)
000108D2                            
000108D2                            Flame_Action:	; Routine 2
000108D2 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time
000108D6 6A00                       		bpl.s	loc_E57A	; if time remains, branch
000108D8 3168 0034 0030             		move.w	$34(a0),$30(a0)	; begin	pause time
000108DE 0868 0000 001C             		bchg	#0,obAnim(a0)
000108E4 6700                       		beq.s	loc_E57A
000108E6 3168 0032 0030             		move.w	$32(a0),$30(a0)	; begin	flaming	time
000108F6                            
000108F6                            loc_E57A:
000108F6 43F9 0000 0000             		lea	(Ani_Flame).l,a1
000108FC 6100 C12A                  		bsr.w	AnimateSprite
00010900 117C 0000 0020             		move.b	#0,obColType(a0)
00010906 1028 0036                  		move.b	$36(a0),d0
0001090A B028 001A                  		cmp.b	obFrame(a0),d0
0001090E 6600                       		bne.s	Flame_ChkDel
00010910 117C 00A3 0020             		move.b	#$A3,obColType(a0)
00010916                            
00010916                            Flame_ChkDel:
00010934 6000 F046                  		bra.w	DisplaySprite
00010934 6000 F046                  		bra.w	DisplaySprite
00010938                            		include	"_anim\Flamethrower.asm"
00010938                            ; ---------------------------------------------------------------------------
00010938                            ; Animation script - flamethrower (SBZ)
00010938                            ; ---------------------------------------------------------------------------
00010938 0000                       Ani_Flame:	dc.w @pipe1-Ani_Flame
0001093A 0000                       		dc.w @pipe2-Ani_Flame
0001093C 0000                       		dc.w @valve1-Ani_Flame
0001093E 0000                       		dc.w @valve2-Ani_Flame
00010940 0300 0102 0304 0506 0708+  @pipe1:		dc.b 3,	0, 1, 2, 3, 4, 5, 6, 7,	8, 9, $A, afBack, 2
0001094E 0009 0705 0301 00FE 01     @pipe2:		dc.b 0,	9, 7, 5, 3, 1, 0, afBack, 1
00010958 00                         		even
00010958 030B 0C0D 0E0F 1011 1213+  @valve1:	dc.b 3,	$B, $C,	$D, $E,	$F, $10, $11, $12, $13,	$14, $15, afBack, 2
00010966 0014 1211 0F0D 0BFE 01     @valve2:	dc.b 0,	$14, $12, $11, $F, $D, $B, afBack, 1
00010970 00                         		even
00010970 00                         		even
00010970                            Map_Flame:	include	"_maps\Flamethrower.asm"
00010970                            ; ---------------------------------------------------------------------------
00010970                            ; Sprite mappings - flame thrower (SBZ)
00010970                            ; ---------------------------------------------------------------------------
00010970                            Map_Flame_internal:
00010970 0000                       		dc.w @pipe1-Map_Flame_internal
00010972 0000                       		dc.w @pipe2-Map_Flame_internal
00010974 0000                       		dc.w @pipe3-Map_Flame_internal
00010976 0000                       		dc.w @pipe4-Map_Flame_internal
00010978 0000                       		dc.w @pipe5-Map_Flame_internal
0001097A 0000                       		dc.w @pipe6-Map_Flame_internal
0001097C 0000                       		dc.w @pipe7-Map_Flame_internal
0001097E 0000                       		dc.w @pipe8-Map_Flame_internal
00010980 0000                       		dc.w @pipe9-Map_Flame_internal
00010982 0000                       		dc.w @pipe10-Map_Flame_internal
00010984 0000                       		dc.w @pipe11-Map_Flame_internal
00010986 0000                       		dc.w @valve1-Map_Flame_internal
00010988 0000                       		dc.w @valve2-Map_Flame_internal
0001098A 0000                       		dc.w @valve3-Map_Flame_internal
0001098C 0000                       		dc.w @valve4-Map_Flame_internal
0001098E 0000                       		dc.w @valve5-Map_Flame_internal
00010990 0000                       		dc.w @valve6-Map_Flame_internal
00010992 0000                       		dc.w @valve7-Map_Flame_internal
00010994 0000                       		dc.w @valve8-Map_Flame_internal
00010996 0000                       		dc.w @valve9-Map_Flame_internal
00010998 0000                       		dc.w @valve10-Map_Flame_internal
0001099A 0000                       		dc.w @valve11-Map_Flame_internal
0001099C 01                         @pipe1:		dc.b 1
0001099D 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB ; broken pipe style flamethrower
000109A2 02                         @pipe2:		dc.b 2
000109A3 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
000109A8 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
000109AD 02                         @pipe3:		dc.b 2
000109AE 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
000109B3 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
000109B8 03                         @pipe4:		dc.b 3
000109B9 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
000109BE 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
000109C3 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
000109C8 03                         @pipe5:		dc.b 3
000109C9 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
000109CE 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
000109D3 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
000109D8 04                         @pipe6:		dc.b 4
000109D9 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
000109DE 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
000109E3 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
000109E8 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
000109ED 04                         @pipe7:		dc.b 4
000109EE 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
000109F3 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
000109F8 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
000109FD 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
00010A02 05                         @pipe8:		dc.b 5
00010A03 F80B 0008 F4               		dc.b $F8, $B, 0, 8, $F4
00010A08 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
00010A0D 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
00010A12 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
00010A17 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
00010A1C 05                         @pipe9:		dc.b 5
00010A1D F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
00010A22 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
00010A27 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
00010A2C 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
00010A31 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
00010A36 06                         @pipe10:	dc.b 6
00010A37 E80B 0008 F4               		dc.b $E8, $B, 0, 8, $F4
00010A3C F70B 0008 F4               		dc.b $F7, $B, 0, 8, $F4
00010A41 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
00010A46 0F06 0002 F8               		dc.b $F, 6, 0, 2, $F8
00010A4B 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
00010A50 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
00010A55 06                         @pipe11:	dc.b 6
00010A56 E70B 0808 F4               		dc.b $E7, $B, 8, 8, $F4
00010A5B F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
00010A60 0706 0802 F8               		dc.b 7,	6, 8, 2, $F8
00010A65 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
00010A6A 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
00010A6F 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
00010A74 01                         @valve1:	dc.b 1
00010A75 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9 ; valve style flamethrower
00010A7A 02                         @valve2:	dc.b 2
00010A7B 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
00010A80 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
00010A85 02                         @valve3:	dc.b 2
00010A86 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
00010A8B 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
00010A90 03                         @valve4:	dc.b 3
00010A91 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
00010A96 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
00010A9B 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
00010AA0 03                         @valve5:	dc.b 3
00010AA1 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
00010AA6 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
00010AAB 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
00010AB0 04                         @valve6:	dc.b 4
00010AB1 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
00010AB6 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
00010ABB 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
00010AC0 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
00010AC5 04                         @valve7:	dc.b 4
00010AC6 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
00010ACB 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
00010AD0 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
00010AD5 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
00010ADA 05                         @valve8:	dc.b 5
00010ADB F80B 0008 F4               		dc.b $F8, $B, 0, 8, $F4
00010AE0 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
00010AE5 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
00010AEA 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
00010AEF 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
00010AF4 05                         @valve9:	dc.b 5
00010AF5 F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
00010AFA 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
00010AFF 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
00010B04 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
00010B09 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
00010B0E 06                         @valve10:	dc.b 6
00010B0F E80B 0008 F4               		dc.b $E8, $B, 0, 8, $F4
00010B14 F70B 0008 F4               		dc.b $F7, $B, 0, 8, $F4
00010B19 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
00010B1E 0F06 0002 F8               		dc.b $F, 6, 0, 2, $F8
00010B23 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
00010B28 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
00010B2D 06                         @valve11:	dc.b 6
00010B2E E70B 0808 F4               		dc.b $E7, $B, 8, 8, $F4
00010B33 F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
00010B38 0706 0802 F8               		dc.b 7,	6, 8, 2, $F8
00010B3D 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
00010B42 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
00010B47 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
00010B4C                            		even
00010B4C                            		even
00010B4C                            
00010B4C                            		include	"_incObj\46 MZ Bricks.asm"
00010B4C                            ; ---------------------------------------------------------------------------
00010B4C                            ; Object 46 - solid blocks and blocks that fall	from the ceiling (MZ)
00010B4C                            ; ---------------------------------------------------------------------------
00010B4C                            
00010B4C                            MarbleBrick:
00010B4C 7000                       		moveq	#0,d0
00010B4E 1028 0024                  		move.b	obRoutine(a0),d0
00010B52 323B 0000                  		move.w	Brick_Index(pc,d0.w),d1
00010B56 4EFB 1000                  		jmp	Brick_Index(pc,d1.w)
00010B5A                            ; ===========================================================================
00010B5A 0000                       Brick_Index:	dc.w Brick_Main-Brick_Index
00010B5C 0000                       		dc.w Brick_Action-Brick_Index
00010B5E                            
00010B5E =00000030                  brick_origY:	equ $30
00010B5E                            ; ===========================================================================
00010B5E                            
00010B5E                            Brick_Main:	; Routine 0
00010B5E 5428 0024                  		addq.b	#2,obRoutine(a0)
00010B62 117C 000F 0016             		move.b	#$F,obHeight(a0)
00010B68 117C 000F 0017             		move.b	#$F,obWidth(a0)
00010B6E 217C 0000 0000 0004        		move.l	#Map_Brick,obMap(a0)
00010B76 317C 4000 0002             		move.w	#$4000,obGfx(a0)
00010B7C 117C 0004 0001             		move.b	#4,obRender(a0)
00010B82 317C 0180 0018             		move.w	#$180,obPriority(a0)
00010B88 117C 0010 0014             		move.b	#$10,obActWid(a0)
00010B8E 3168 000C 0030             		move.w	obY(a0),brick_origY(a0)
00010B94 317C 05C0 0032             		move.w	#$5C0,$32(a0)
00010B9A                            
00010B9A                            Brick_Action:	; Routine 2
00010B9A 4A28 0001                  		tst.b	obRender(a0)
00010B9E 6A00                       		bpl.s	@chkdel
00010BA0 7000                       		moveq	#0,d0
00010BA2 1028 0028                  		move.b	obSubtype(a0),d0 ; get object type
00010BA6 0240 0007                  		andi.w	#7,d0		; read only the	1st digit
00010BAA D040                       		add.w	d0,d0
00010BAC 323B 0000                  		move.w	Brick_TypeIndex(pc,d0.w),d1
00010BB0 4EBB 1000                  		jsr	Brick_TypeIndex(pc,d1.w)
00010BB4 323C 001B                  		move.w	#$1B,d1
00010BB8 343C 0010                  		move.w	#$10,d2
00010BBC 363C 0011                  		move.w	#$11,d3
00010BC0 3828 0008                  		move.w	obX(a0),d4
00010BC4 6100 0000                  		bsr.w	SolidObject
00010BC8                            
00010BC8                            	@chkdel:
00010BE6 6000 ED94                  			bra.w	DisplaySprite
00010BEA                            ; ===========================================================================
00010BEA 0000                       Brick_TypeIndex:dc.w Brick_Type00-Brick_TypeIndex
00010BEC 0000                       		dc.w Brick_Type01-Brick_TypeIndex
00010BEE 0000                       		dc.w Brick_Type02-Brick_TypeIndex
00010BF0 0000                       		dc.w Brick_Type03-Brick_TypeIndex
00010BF2 0000                       		dc.w Brick_Type04-Brick_TypeIndex
00010BF4                            ; ===========================================================================
00010BF4                            
00010BF4                            Brick_Type00:
00010BF4 4E75                       		rts	
00010BF6                            ; ===========================================================================
00010BF6                            
00010BF6                            Brick_Type02:
00010BF6 3038 D008                  		move.w	(v_player+obX).w,d0
00010BFA 9068 0008                  		sub.w	obX(a0),d0
00010BFE 6400                       		bcc.s	loc_E888
00010C00 4440                       		neg.w	d0
00010C02                            
00010C02                            loc_E888:
00010C02 0C40 0090                  		cmpi.w	#$90,d0		; is Sonic within $90 pixels of	the block?
00010C06 6400                       		bcc.s	Brick_Type01	; if not, resume wobbling
00010C08 117C 0003 0028             		move.b	#3,obSubtype(a0)	; if yes, make the block fall
00010C0E                            
00010C0E                            Brick_Type01:
00010C0E 7000                       		moveq	#0,d0
00010C10 1038 FE74                  		move.b	(v_oscillate+$16).w,d0
00010C14 0828 0003 0028             		btst	#3,obSubtype(a0)
00010C1A 6700                       		beq.s	loc_E8A8
00010C1C 4440                       		neg.w	d0
00010C1E 0640 0010                  		addi.w	#$10,d0
00010C22                            
00010C22                            loc_E8A8:
00010C22 3228 0030                  		move.w	brick_origY(a0),d1
00010C26 9240                       		sub.w	d0,d1
00010C28 3141 000C                  		move.w	d1,obY(a0)	; update the block's position to make it wobble
00010C2C 4E75                       		rts	
00010C2E                            ; ===========================================================================
00010C2E                            
00010C2E                            Brick_Type03:
00010C2E 6100 ED38                  		bsr.w	SpeedToPos
00010C32 0668 0018 0012             		addi.w	#$18,obVelY(a0)	; increase falling speed
00010C38 6100 0000                  		bsr.w	ObjFloorDist
00010C3C 4A41                       		tst.w	d1		; has the block	hit the	floor?
00010C3E 6A00 0000                  		bpl.w	locret_E8EE	; if not, branch
00010C42 D368 000C                  		add.w	d1,obY(a0)
00010C46 4268 0012                  		clr.w	obVelY(a0)	; stop the block falling
00010C4A 3168 000C 0030             		move.w	obY(a0),brick_origY(a0)
00010C50 117C 0004 0028             		move.b	#4,obSubtype(a0)
00010C56 3011                       		move.w	(a1),d0
00010C58 0240 03FF                  		andi.w	#$3FF,d0
00010C5C 0C40 016A                  			cmpi.w	#$16A,d0
00010C60 6400                       		bcc.s	locret_E8EE
00010C62 117C 0000 0028             		move.b	#0,obSubtype(a0)
00010C68                            
00010C68                            locret_E8EE:
00010C68 4E75                       		rts	
00010C6A                            ; ===========================================================================
00010C6A                            
00010C6A                            Brick_Type04:
00010C6A 7000                       		moveq	#0,d0
00010C6C 1038 FE70                  		move.b	(v_oscillate+$12).w,d0
00010C70 E648                       		lsr.w	#3,d0
00010C72 3228 0030                  		move.w	brick_origY(a0),d1
00010C76 9240                       		sub.w	d0,d1
00010C78 3141 000C                  		move.w	d1,obY(a0)	; make the block wobble
00010C7C 4E75                       		rts	
00010C7C 4E75                       		rts	
00010C7E                            Map_Brick:	include	"_maps\MZ Bricks.asm"
00010C7E                            ; ---------------------------------------------------------------------------
00010C7E                            ; Sprite mappings - solid blocks and blocks that fall from the ceiling (MZ)
00010C7E                            ; ---------------------------------------------------------------------------
00010C7E                            Map_Brick_internal:
00010C7E 0000                       		dc.w @brick-Map_Brick_internal
00010C80 01                         @brick:		dc.b 1
00010C81 F00F 0001 F0               		dc.b $F0, $F, 0, 1, $F0
00010C86                            		even
00010C86                            		even
00010C86                            
00010C86                            		include	"_incObj\12 Light.asm"
00010C86                            ; ---------------------------------------------------------------------------
00010C86                            ; Object 12 - lamp (SYZ)
00010C86                            ; ---------------------------------------------------------------------------
00010C86                            
00010C86                            SpinningLight:
00010C86 7000                       		moveq	#0,d0
00010C88 1028 0024                  		move.b	obRoutine(a0),d0
00010C8C 323B 0000                  		move.w	Light_Index(pc,d0.w),d1
00010C90 4EFB 1000                  		jmp	Light_Index(pc,d1.w)
00010C94                            ; ===========================================================================
00010C94 0000                       Light_Index:	dc.w Light_Main-Light_Index
00010C96 0000                       		dc.w Light_Animate-Light_Index
00010C98                            ; ===========================================================================
00010C98                            
00010C98                            Light_Main:	; Routine 0
00010C98 5428 0024                  		addq.b	#2,obRoutine(a0)
00010C9C 217C 0000 0000 0004        		move.l	#Map_Light,obMap(a0)
00010CA4 317C 0000 0002             		move.w	#0,obGfx(a0)
00010CAA 117C 0004 0001             		move.b	#4,obRender(a0)
00010CB0 117C 0010 0014             		move.b	#$10,obActWid(a0)
00010CB6 317C 0300 0018             		move.w	#$300,obPriority(a0)
00010CBC                            
00010CBC                            Light_Animate:	; Routine 2
00010CBC 5328 001E                  		subq.b	#1,obTimeFrame(a0)
00010CC0 6A00                       		bpl.s	@chkdel
00010CC2 117C 000C 001E             		move.b	#12,obTimeFrame(a0)
00010CC8 5228 001A                  		addq.b	#1,obFrame(a0)
00010CCC 0C28 0004 001A             		cmpi.b	#4,obFrame(a0)
00010CD2 6500                       		bcs.s	@chkdel
00010CD4 117C 0000 001A             		move.b	#0,obFrame(a0)
00010CDA                            
00010CDA                            	@chkdel:
00010CF8 6000 EC82                  		bra.w	DisplaySprite
00010CF8 6000 EC82                  		bra.w	DisplaySprite
00010CFC                            Map_Light	include	"_maps\Light.asm"
00010CFC                            ; --------------------------------------------------------------------------------
00010CFC                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
00010CFC                            ; --------------------------------------------------------------------------------
00010CFC                            
00010CFC                            SME_FBl1X:	
00010CFC 0000 0000                  		dc.w SME_FBl1X_8-SME_FBl1X, SME_FBl1X_22-SME_FBl1X	
00010D00 0000 0000                  		dc.w SME_FBl1X_3C-SME_FBl1X, SME_FBl1X_5B-SME_FBl1X	
00010D04 05                         SME_FBl1X_8:	dc.b 5	
00010D05 E004 006D 00               		dc.b $E0, 4, 0, $6D, 0	
00010D0A E80C 006F F8               		dc.b $E8, $C, 0, $6F, $F8	
00010D0F F00C 0073 F8               		dc.b $F0, $C, 0, $73, $F8	
00010D14 F800 0090 00               		dc.b $F8, 0, 0, $90, 0	
00010D19 F800 0890 08               		dc.b $F8, 0, 8, $90, 8	
00010D1E 05                         SME_FBl1X_22:	dc.b 5	
00010D1F E004 0077 00               		dc.b $E0, 4, 0, $77, 0	
00010D24 E804 0079 00               		dc.b $E8, 4, 0, $79, 0	
00010D29 E800 007B 10               		dc.b $E8, 0, 0, $7B, $10	
00010D2E F008 007C F8               		dc.b $F0, 8, 0, $7C, $F8	
00010D33 F804 0091 00               		dc.b $F8, 4, 0, $91, 0	
00010D38 06                         SME_FBl1X_3C:	dc.b 6	
00010D39 E000 007F 00               		dc.b $E0, 0, 0, $7F, 0	
00010D3E E000 0078 08               		dc.b $E0, 0, 0, $78, 8	
00010D43 E80C 0080 F8               		dc.b $E8, $C, 0, $80, $F8	
00010D48 F00C 0084 F8               		dc.b $F0, $C, 0, $84, $F8	
00010D4D F800 0093 08               		dc.b $F8, 0, 0, $93, 8	
00010D52 F800 0091 00               		dc.b $F8, 0, 0, $91, 0	
00010D57 05                         SME_FBl1X_5B:	dc.b 5	
00010D58 E004 0088 00               		dc.b $E0, 4, 0, $88, 0	
00010D5D E808 008A F8               		dc.b $E8, 8, 0, $8A, $F8	
00010D62 F008 008D 00               		dc.b $F0, 8, 0, $8D, 0	
00010D67 F800 0094 00               		dc.b $F8, 0, 0, $94, 0	
00010D6C F800 0890 08               		dc.b $F8, 0, 8, $90, 8	
00010D72 00                         		even
00010D72 00                         		even
00010D72                            		include	"_incObj\47 Bumper.asm"
00010D72                            ; ---------------------------------------------------------------------------
00010D72                            ; Object 47 - pinball bumper (SYZ)
00010D72                            ; ---------------------------------------------------------------------------
00010D72                            
00010D72                            Bumper:
00010D72 7000                       		moveq	#0,d0
00010D74 1028 0024                  		move.b	obRoutine(a0),d0
00010D78 323B 0000                  		move.w	Bump_Index(pc,d0.w),d1
00010D7C 4EFB 1000                  		jmp	Bump_Index(pc,d1.w)
00010D80                            ; ===========================================================================
00010D80 0000                       Bump_Index:	dc.w Bump_Main-Bump_Index
00010D82 0000                       		dc.w Bump_Hit-Bump_Index
00010D84                            ; ===========================================================================
00010D84                            
00010D84                            Bump_Main:	; Routine 0
00010D84 5428 0024                  		addq.b	#2,obRoutine(a0)
00010D88 217C 0000 0000 0004        		move.l	#Map_Bump,obMap(a0)
00010D90 317C 0380 0002             		move.w	#$380,obGfx(a0)
00010D96 117C 0004 0001             		move.b	#4,obRender(a0)
00010D9C 117C 0010 0014             		move.b	#$10,obActWid(a0)
00010DA2 317C 0080 0018             		move.w	#$80,obPriority(a0)
00010DA8 117C 00D7 0020             		move.b	#$D7,obColType(a0)
00010DAE                            
00010DAE                            Bump_Hit:	; Routine 2
00010DAE 4A28 0021                  		tst.b	obColProp(a0)	; has Sonic touched the	bumper?
00010DB2 6700 0000                  		beq.w	@display	; if not, branch
00010DB6 4228 0021                  		clr.b	obColProp(a0)
00010DBA 43F8 D000                  		lea	(v_player).w,a1
00010DBE 3228 0008                  		move.w	obX(a0),d1
00010DC2 3428 000C                  		move.w	obY(a0),d2
00010DC6 9269 0008                  		sub.w	obX(a1),d1
00010DCA 9469 000C                  		sub.w	obY(a1),d2
00010DCE 4EB9 0000 3CC8             		jsr	(CalcAngle).l
00010DD4 4EB9 0000 3A36             		jsr	(CalcSine).l
00010DDA C3FC F900                  		muls.w	#-$700,d1
00010DDE E081                       		asr.l	#8,d1
00010DE0 3341 0010                  		move.w	d1,obVelX(a1)	; bounce Sonic away
00010DE4 C1FC F900                  		muls.w	#-$700,d0
00010DE8 E080                       		asr.l	#8,d0
00010DEA 3340 0012                  		move.w	d0,obVelY(a1)	; bounce Sonic away
00010DEE 08E9 0001 0022             		bset	#1,obStatus(a1)
00010DF4 08A9 0004 0022             		bclr	#4,obStatus(a1)
00010DFA 08A9 0005 0022             		bclr	#5,obStatus(a1)
00010E00 4229 003C                  		clr.b	$3C(a1)
00010E04 117C 0001 001C             		move.b	#1,obAnim(a0)	; use "hit" animation
00010E14 45F8 FC00                  		lea	(v_objstate).w,a2
00010E18 7000                       		moveq	#0,d0
00010E1A 1028 0023                  		move.b	obRespawnNo(a0),d0
00010E1E 6700                       		beq.s	@addscore
00010E20 0C32 008A 0002             		cmpi.b	#$8A,2(a2,d0.w)	; has bumper been hit 10 times?
00010E26 6400                       		bcc.s	@display	; if yes, Sonic	gets no	points
00010E28 5232 0002                  		addq.b	#1,2(a2,d0.w)
00010E2C                            
00010E2C                            	@addscore:
00010E2C 7001                       		moveq	#1,d0
00010E2E 4EB9 0000 0000             		jsr	(AddPoints).l	; add 10 to score
00010E34 6100 EFD2                  		bsr.w	FindFreeObj
00010E38 6600                       		bne.s	@display
00010E3A 12BC 0029                  		move.b	#id_Points,0(a1) ; load points object
00010E3E 3368 0008 0008             		move.w	obX(a0),obX(a1)
00010E44 3368 000C 000C             		move.w	obY(a0),obY(a1)
00010E4A 137C 0004 001A             		move.b	#4,obFrame(a1)
00010E50                            
00010E50                            	@display:
00010E50 43F9 0000 0000             		lea	(Ani_Bump).l,a1
00010E56 6100 BBD0                  		bsr.w	AnimateSprite
00010E76 6000 EB04                  		bra.w	DisplaySprite
00010E7A                            ; ===========================================================================
00010E7A                            
00010E7A                            @resetcount:
00010E7A 45F8 FC00                  		lea	(v_objstate).w,a2
00010E7E 7000                       		moveq	#0,d0
00010E80 1028 0023                  		move.b	obRespawnNo(a0),d0
00010E84 6700                       		beq.s	@delete
00010E86 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00010E8C                            
00010E8C                            	@delete:
00010E8C 6000 EB2E                  		bra.w	DeleteObject
00010E8C 6000 EB2E                  		bra.w	DeleteObject
00010E90                            		include	"_anim\Bumper.asm"
00010E90                            ; ---------------------------------------------------------------------------
00010E90                            ; Animation script - flamethrower (SBZ)
00010E90                            ; ---------------------------------------------------------------------------
00010E90 0000                       Ani_Bump:	dc.w byte_EAF4-Ani_Bump
00010E92 0000                       		dc.w byte_EAF8-Ani_Bump
00010E94 0F00 FF                    byte_EAF4:	dc.b $F, 0, afEnd
00010E98 00                         		even
00010E98 0301 0201 02FD 00          byte_EAF8:	dc.b 3,	1, 2, 1, 2, afChange, 0
00010EA0 00                         		even
00010EA0 00                         		even
00010EA0                            Map_Bump:	include	"_maps\Bumper.asm"
00010EA0                            ; ---------------------------------------------------------------------------
00010EA0                            ; Sprite mappings - pinball bumper (SYZ)
00010EA0                            ; ---------------------------------------------------------------------------
00010EA0                            Map_Bump_internal:
00010EA0 0000                       		dc.w @normal-Map_Bump_internal
00010EA2 0000                       		dc.w @bumped1-Map_Bump_internal
00010EA4 0000                       		dc.w @bumped2-Map_Bump_internal
00010EA6 02                         @normal:	dc.b 2
00010EA7 F007 0000 F0               		dc.b $F0, 7, 0,	0, $F0
00010EAC F007 0800 00               		dc.b $F0, 7, 8,	0, 0
00010EB1 02                         @bumped1:	dc.b 2
00010EB2 F406 0008 F4               		dc.b $F4, 6, 0,	8, $F4
00010EB7 F402 0808 04               		dc.b $F4, 2, 8,	8, 4
00010EBC 02                         @bumped2:	dc.b 2
00010EBD F007 000E F0               		dc.b $F0, 7, 0,	$E, $F0
00010EC2 F007 080E 00               		dc.b $F0, 7, 8,	$E, 0
00010EC8 00                         		even
00010EC8 00                         		even
00010EC8                            
00010EC8                            		include	"_incObj\0D Signpost.asm" ; includes "GotThroughAct" subroutine
00010EC8                            ; ---------------------------------------------------------------------------
00010EC8                            ; Object 0D - signpost at the end of a level
00010EC8                            ; ---------------------------------------------------------------------------
00010EC8                            
00010EC8                            Signpost:
00010EC8 7000                       		moveq	#0,d0
00010ECA 1028 0024                  		move.b	obRoutine(a0),d0
00010ECE 323B 0000                  		move.w	Sign_Index(pc,d0.w),d1
00010ED2 4EBB 1000                  		jsr	Sign_Index(pc,d1.w)
00010ED6 43F9 0000 0000             		lea	(Ani_Sign).l,a1
00010EDC 6100 BB4A                  		bsr.w	AnimateSprite
00010EE0 6100 EA9A                  		bsr.w	DisplaySprite
00010F02 4E75                       		rts	
00010F04                            ; ===========================================================================
00010F04 0000                       Sign_Index:	dc.w Sign_Main-Sign_Index
00010F06 0000                       		dc.w Sign_Touch-Sign_Index
00010F08 0000                       		dc.w Sign_Spin-Sign_Index
00010F0A 0000                       		dc.w Sign_SonicRun-Sign_Index
00010F0C 0000                       		dc.w Sign_Exit-Sign_Index
00010F0E                            
00010F0E =00000030                  spintime:	equ $30		; time for signpost to spin
00010F0E =00000032                  sparkletime:	equ $32		; time between sparkles
00010F0E =00000034                  sparkle_id:	equ $34		; counter to keep track of sparkles
00010F0E                            ; ===========================================================================
00010F0E                            
00010F0E                            Sign_Main:	; Routine 0
00010F0E 5428 0024                  		addq.b	#2,obRoutine(a0)
00010F12 217C 0000 0000 0004        		move.l	#Map_Sign,obMap(a0)
00010F1A 317C 0680 0002             		move.w	#$680,obGfx(a0)
00010F20 117C 0004 0001             		move.b	#4,obRender(a0)
00010F26 117C 0018 0014             		move.b	#$18,obActWid(a0)
00010F2C 317C 0200 0018             		move.w	#$200,obPriority(a0)
00010F32                            
00010F32                            Sign_Touch:	; Routine 2
00010F32 3038 D008                  		move.w	(v_player+obX).w,d0
00010F36 9068 0008                  		sub.w	obX(a0),d0
00010F3A 6500                       		bcs.s	@notouch
00010F3C 0C40 0020                  		cmpi.w	#$20,d0		; is Sonic within $20 pixels of	the signpost?
00010F40 6400                       		bcc.s	@notouch	; if not, branch
00010F42 11FC 0001 F7AA             		move.b  #1,($FFFFF7AA).w ; Lock the screen
00010F52 4238 FE1E                  		clr.b	(f_timecount).w	; stop time counter
00010F56 31F8 F72A F728             		move.w	(v_limitright2).w,(v_limitleft2).w ; lock screen position
00010F5C 5428 0024                  		addq.b	#2,obRoutine(a0)
00010F60 11FC 0001 F5C2             		move.b  #1,($FFFFF5C2).w ; Set victory animation flag
00010F66                            
00010F66                            	@notouch:
00010F66 4E75                       		rts	
00010F68                            	
00010F68                            ; ===========================================================================
00010F68                            
00010F68                            Sign_Spin:	; Routine 4
00010F68 5368 0030                  		subq.w	#1,spintime(a0)	; subtract 1 from spin time
00010F6C 6A00                       		bpl.s	@chksparkle	; if time remains, branch
00010F6E 317C 003C 0030             		move.w	#60,spintime(a0) ; set spin cycle time to 1 second
00010F74 5228 001C                  		addq.b	#1,obAnim(a0)	; next spin cycle
00010F78 0C28 0003 001C             		cmpi.b	#3,obAnim(a0)	; have 3 spin cycles completed?
00010F7E 6600                       		bne.s	@chksparkle	; if not, branch
00010F80 5428 0024                  		addq.b	#2,obRoutine(a0)
00010F84                            
00010F84                            	@chksparkle:
00010F84 5368 0032                  		subq.w	#1,sparkletime(a0) ; subtract 1 from time delay
00010F88 6A00                       		bpl.s	@fail		; if time remains, branch
00010F8A 317C 000B 0032             		move.w	#$B,sparkletime(a0) ; set time between sparkles to $B frames
00010F90 7000                       		moveq	#0,d0
00010F92 1028 0034                  		move.b	sparkle_id(a0),d0 ; get sparkle id
00010F96 5428 0034                  		addq.b	#2,sparkle_id(a0) ; increment sparkle counter
00010F9A 0228 000E 0034             		andi.b	#$E,sparkle_id(a0)
00010FA0 45FB 0000                  		lea	Sign_SparkPos(pc,d0.w),a2 ; load sparkle position data
00010FA4 6100 EE62                  		bsr.w	FindFreeObj
00010FA8 6600                       		bne.s	@fail
00010FAA 12BC 0025                  		move.b	#id_Rings,0(a1)	; load rings object
00010FAE 137C 0006 0024             		move.b	#id_Ring_Sparkle,obRoutine(a1) ; jump to ring sparkle subroutine
00010FB4 101A                       		move.b	(a2)+,d0
00010FB6 4880                       		ext.w	d0
00010FB8 D068 0008                  		add.w	obX(a0),d0
00010FBC 3340 0008                  		move.w	d0,obX(a1)
00010FC0 101A                       		move.b	(a2)+,d0
00010FC2 4880                       		ext.w	d0
00010FC4 D068 000C                  		add.w	obY(a0),d0
00010FC8 3340 000C                  		move.w	d0,obY(a1)
00010FCC 237C 0000 BFD8 0004        		move.l	#Map_Ring,obMap(a1)
00010FD4 337C 2798 0002             		move.w	#$2798,obGfx(a1)
00010FDA 137C 0004 0001             		move.b	#4,obRender(a1)
00010FE0 337C 0100 0018             		move.w	#$100,obPriority(a1)
00010FE6 137C 0008 0014             		move.b	#8,obActWid(a1)
00010FEC                            
00010FEC                            	@fail:
00010FEC 4E75                       		rts	
00010FEE                            ; ===========================================================================
00010FEE E8F0                       Sign_SparkPos:	dc.b -$18,-$10		; x-position, y-position
00010FF0 0808                       		dc.b	8,   8
00010FF2 F000                       		dc.b -$10,   0
00010FF4 18F8                       		dc.b  $18,  -8
00010FF6 00F8                       		dc.b	0,  -8
00010FF8 1000                       		dc.b  $10,   0
00010FFA E808                       		dc.b -$18,   8
00010FFC 1810                       		dc.b  $18, $10
00010FFE                            ; ===========================================================================
00010FFE                            
00010FFE                            Sign_SonicRun:	; Routine 6
00010FFE 4A78 FE08                  		tst.w	(v_debuguse).w	; is debug mode	on?
00011002 6600 0000                  		bne.w	locret_ECEE	; if yes, branch
00011006 11FC 0001 F5C2             		move.b  #1,($FFFFF5C2).w ; Set victory animation flag
0001100C                            		
0001100C                            
0001100C                            	loc_EC86:
0001100C 5428 0024                  		addq.b	#2,obRoutine(a0)
00011010                            
00011010                            ; ---------------------------------------------------------------------------
00011010                            ; Subroutine to	set up bonuses at the end of an	act
00011010                            ; ---------------------------------------------------------------------------
00011010                            
00011010                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00011010                            
00011010                            
00011010                            GotThroughAct:
00011010 4A38 D5C0                  		tst.b	(v_objspace+$5C0).w
00011014 6600                       		bne.s	locret_ECEE
00011016 31F8 F72A F728             		move.w	(v_limitright2).w,(v_limitleft2).w
0001101C 4238 FE2D                  		clr.b	(v_invinc).w	; disable invincibility
00011020 4238 FE2E                  		clr.b	(v_shoes).w	; clear speed shoes
00011024 4238 FE1E                  		clr.b	(f_timecount).w	; stop time counter
00011028 11FC 003A D5C0             		move.b	#id_GotThroughCard,(v_objspace+$5C0).w
0001102E 7000                       		moveq	#plcid_TitleCard,d0
00011030 4EB9 0000 1720             		jsr	(NewPLC).l	; load title card patterns
00011036 11FC 0001 F7D6             		move.b	#1,(f_endactbonus).w
0001103C 7000                       		moveq	#0,d0
0001103E 1038 FE23                  		move.b	(v_timemin).w,d0
00011042 C0FC 003C                  		mulu.w	#60,d0		; convert minutes to seconds
00011046 7200                       		moveq	#0,d1
00011048 1238 FE24                  		move.b	(v_timesec).w,d1
0001104C D041                       		add.w	d1,d0		; add up your time
0001104E 80FC 000F                  		divu.w	#15,d0		; divide by 15
00011052 7214                       		moveq	#$14,d1
00011054 B041                       		cmp.w	d1,d0		; is time 5 minutes or higher?
00011056 6500                       		bcs.s	hastimebonus	; if not, branch
00011058 3001                       		move.w	d1,d0		; use minimum time bonus (0)
0001105A                            
0001105A                            	hastimebonus:
0001105A D040                       		add.w	d0,d0
0001105C 31FB 0000 F7D2             		move.w	TimeBonuses(pc,d0.w),(v_timebonus).w ; set time bonus
00011062 3038 FE20                  		move.w	(v_rings).w,d0	; load number of rings
00011066 C0FC 000A                  		mulu.w	#10,d0		; multiply by 10
0001106A 31C0 F7D4                  		move.w	d0,(v_ringbonus).w ; set ring bonus
00011078 11FC 0001 FE1D             		move.b	#1,(f_ringcount).w ; update rings counter
0001107E                            
0001107E                            locret_ECEE:
0001107E 4E75                       		rts	
00011080                            
00011080                            ; End of function GotThroughAct
00011080                            
00011080                            ; ===========================================================================
00011080 1388 1388 03E8 01F4 0190+  TimeBonuses:	dc.w 5000, 5000, 1000, 500, 400, 400, 300, 300,	200, 200
00011094 00C8 00C8 0064 0064 0064+  		dc.w 200, 200, 100, 100, 100, 100, 50, 50, 50, 50, 0
000110AA                            ; ===========================================================================
000110AA                            
000110AA                            Sign_Exit:	; Routine 8
000110AA 4E75                       		rts	
000110AC                            
000110AC                            ; ---------------------------------------------------------------------------
000110AC                            ; Subroutine to	set up bonuses at the end of an	zone
000110AC                            ; ---------------------------------------------------------------------------
000110AC                            
000110AC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000110AC                            
000110AC                            
000110AC                            GotThroughAct1:
000110AC 4A38 D5C0                  		tst.b	(v_objspace+$5C0).w
000110B0 6600                       		bne.s	locret_ECEE1
000110B2 31F8 F72A F728             		move.w	(v_limitright2).w,(v_limitleft2).w
000110B8 4238 FE2D                  		clr.b	(v_invinc).w	; disable invincibility
000110BC 4238 FE2E                  		clr.b	(v_shoes).w	; clear speed shoes
000110C0 4238 FE1E                  		clr.b	(f_timecount).w	; stop time counter
000110C4 11FC 003A D5C0             		move.b	#id_GotThroughCard,(v_objspace+$5C0).w
000110CA 7000                       		moveq	#plcid_TitleCard,d0
000110CC 4EB9 0000 1720             		jsr	(NewPLC).l	; load title card patterns
000110D2 11FC 0001 F7D6             		move.b	#1,(f_endactbonus).w
000110D8 7000                       		moveq	#0,d0
000110DA 1038 FE23                  		move.b	(v_timemin).w,d0
000110DE C0FC 003C                  		mulu.w	#60,d0		; convert minutes to seconds
000110E2 7200                       		moveq	#0,d1
000110E4 1238 FE24                  		move.b	(v_timesec).w,d1
000110E8 D041                       		add.w	d1,d0		; add up your time
000110EA 80FC 000F                  		divu.w	#15,d0		; divide by 15
000110EE 7214                       		moveq	#$14,d1
000110F0 B041                       		cmp.w	d1,d0		; is time 5 minutes or higher?
000110F2 6500 0000                  		bcs.w	hastimebonus2	; if not, branch
000110F6 3001                       		move.w	d1,d0		; use minimum time bonus (0)
000110F8                            
000110F8                            	hastimebonus2:
000110F8 D040                       		add.w	d0,d0
000110FA 31FB 0000 F7D2             		move.w	TimeBonuses1(pc,d0.w),(v_timebonus).w ; set time bonus
00011100 3038 FE20                  		move.w	(v_rings).w,d0	; load number of rings
00011104 C0FC 000A                  		mulu.w	#10,d0		; multiply by 10
00011108 31C0 F7D4                  		move.w	d0,(v_ringbonus).w ; set ring bonus
00011116 11FC 0001 FE1D             		move.b	#1,(f_ringcount).w ; update rings counter
0001111C                            
0001111C                            locret_ECEE1:
0001111C 4E75                       		rts	
0001111E                            
0001111E                            ; End of function GotThroughAct		
0001111E                            
0001111E 1388 1388 03E8 01F4 0190+  TimeBonuses1:	dc.w 5000, 5000, 1000, 500, 400, 400, 300, 300,	200, 200
00011132 00C8 00C8 0064 0064 0064+  		dc.w 200, 200, 100, 100, 100, 100, 50, 50, 50, 50, 0
00011132 00C8 00C8 0064 0064 0064+  		dc.w 200, 200, 100, 100, 100, 100, 50, 50, 50, 50, 0
00011148                            		include	"_anim\Signpost.asm"
00011148                            ; ---------------------------------------------------------------------------
00011148                            ; Animation script - signpost
00011148                            ; ---------------------------------------------------------------------------
00011148 0000                       Ani_Sign:	dc.w @eggman-Ani_Sign
0001114A 0000                       		dc.w @spin1-Ani_Sign
0001114C 0000                       		dc.w @spin2-Ani_Sign
0001114E 0000                       		dc.w @sonic-Ani_Sign
00011150 0F00 FF                    @eggman:	dc.b $F, 0, afEnd
00011154 00                         		even
00011154 0100 0102 03FF             @spin1:		dc.b 1,	0, 1, 2, 3, afEnd
0001115A 0104 0102 03FF             @spin2:		dc.b 1,	4, 1, 2, 3, afEnd
00011160 0F04 FF                    @sonic:		dc.b $F, 4, afEnd
00011164 00                         		even
00011164 00                         		even
00011164                            Map_Sign:	include	"_maps\Signpost.asm"
00011164                            ; --------------------------------------------------------------------------------
00011164                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
00011164                            ; --------------------------------------------------------------------------------
00011164                            
00011164                            SME_KvSue:	
00011164 0000 0000                  		dc.w SME_KvSue_A-SME_KvSue, SME_KvSue_1F-SME_KvSue	
00011168 0000 0000                  		dc.w SME_KvSue_2F-SME_KvSue, SME_KvSue_3F-SME_KvSue	
0001116C 0000                       		dc.w SME_KvSue_4F-SME_KvSue	
0001116E 04                         SME_KvSue_A:	dc.b 4	
0001116F F00B 0000 E8               		dc.b $F0, $B, 0, 0, $E8	
00011174 F00B 0800 00               		dc.b $F0, $B, 8, 0, 0	
00011179 1001 0038 FC               		dc.b $10, 1, 0, $38, $FC	
0001117E 2008 003A F4               		dc.b $20, 8, 0, $3A, $F4	
00011183 03                         SME_KvSue_1F:	dc.b 3	
00011184 F00F 000C F0               		dc.b $F0, $F, 0, $C, $F0	
00011189 1001 0038 FC               		dc.b $10, 1, 0, $38, $FC	
0001118E 2008 003A F4               		dc.b $20, 8, 0, $3A, $F4	
00011193 03                         SME_KvSue_2F:	dc.b 3	
00011194 F003 001C FC               		dc.b $F0, 3, 0, $1C, $FC	
00011199 1001 0838 FC               		dc.b $10, 1, 8, $38, $FC	
0001119E 2008 003A F4               		dc.b $20, 8, 0, $3A, $F4	
000111A3 03                         SME_KvSue_3F:	dc.b 3	
000111A4 F00F 080C F0               		dc.b $F0, $F, 8, $C, $F0	
000111A9 1001 0838 FC               		dc.b $10, 1, 8, $38, $FC	
000111AE 2008 003A F4               		dc.b $20, 8, 0, $3A, $F4	
000111B3 04                         SME_KvSue_4F:	dc.b 4	
000111B4 F00B 0020 E8               		dc.b $F0, $B, 0, $20, $E8	
000111B9 F00B 002C 00               		dc.b $F0, $B, 0, $2C, 0	
000111BE 1001 0038 FC               		dc.b $10, 1, 0, $38, $FC	
000111C3 2008 003A F4               		dc.b $20, 8, 0, $3A, $F4	
000111C8                            		even
000111C8                            		even
000111C8                            
000111C8                            		include	"_incObj\4C & 4D Lava Geyser Maker.asm"
000111C8                            ; ---------------------------------------------------------------------------
000111C8                            ; Object 4C - lava geyser / lavafall producer (MZ)
000111C8                            ; ---------------------------------------------------------------------------
000111C8                            
000111C8                            GeyserMaker:
000111C8 7000                       		moveq	#0,d0
000111CA 1028 0024                  		move.b	obRoutine(a0),d0
000111CE 323B 0000                  		move.w	GMake_Index(pc,d0.w),d1
000111D2 4EBB 1000                  		jsr	GMake_Index(pc,d1.w)
000111D6 6000 0000                  		bra.w	Geyser_ChkDel
000111DA                            ; ===========================================================================
000111DA 0000                       GMake_Index:	dc.w GMake_Main-GMake_Index
000111DC 0000                       		dc.w GMake_Wait-GMake_Index
000111DE 0000                       		dc.w GMake_ChkType-GMake_Index
000111E0 0000                       		dc.w GMake_MakeLava-GMake_Index
000111E2 0000                       		dc.w GMake_Display-GMake_Index
000111E4 0000                       		dc.w GMake_Delete-GMake_Index
000111E6                            
000111E6 =00000034                  gmake_time:	equ $34		; time delay (2 bytes)
000111E6 =00000032                  gmake_timer:	equ $32		; current time remaining (2 bytes)
000111E6 =0000003C                  gmake_parent:	equ $3C		; address of parent object
000111E6                            ; ===========================================================================
000111E6                            
000111E6                            GMake_Main:	; Routine 0
000111E6 5428 0024                  		addq.b	#2,obRoutine(a0)
000111EA 217C 0000 0000 0004        		move.l	#Map_Geyser,obMap(a0)
000111F2 317C E3A8 0002             		move.w	#$E3A8,obGfx(a0)
000111F8 117C 0004 0001             		move.b	#4,obRender(a0)
000111FE 317C 0080 0018             		move.w	#$80,obPriority(a0)
00011204 117C 0038 0014             		move.b	#$38,obActWid(a0)
0001120A 317C 0078 0034             		move.w	#120,gmake_time(a0) ; set time delay to 2 seconds
00011210                            
00011210                            GMake_Wait:	; Routine 2
00011210 5368 0032                  		subq.w	#1,gmake_timer(a0) ; decrement timer
00011214 6A00                       		bpl.s	@cancel		; if time remains, branch
00011216                            
00011216 3168 0034 0032             		move.w	gmake_time(a0),gmake_timer(a0) ; reset timer
0001121C 3038 D00C                  		move.w	(v_player+obY).w,d0
00011220 3228 000C                  		move.w	obY(a0),d1
00011224 B041                       		cmp.w	d1,d0
00011226 6400                       		bcc.s	@cancel
00011228 0441 0170                  		subi.w	#$170,d1
0001122C B041                       		cmp.w	d1,d0
0001122E 6500                       		bcs.s	@cancel
00011230 5428 0024                  		addq.b	#2,obRoutine(a0) ; if Sonic is within range, goto GMake_ChkType
00011234                            
00011234                            	@cancel:
00011234 4E75                       		rts	
00011236                            ; ===========================================================================
00011236                            
00011236                            GMake_MakeLava:	; Routine 6
00011236 5428 0024                  		addq.b	#2,obRoutine(a0)
0001123A 6100 EBE2                  		bsr.w	FindNextFreeObj
0001123E 6600                       		bne.s	@fail
00011240 12BC 004D                  		move.b	#id_LavaGeyser,0(a1) ; load lavafall object
00011244 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001124A 3368 000C 000C             		move.w	obY(a0),obY(a1)
00011250 1368 0028 0028             		move.b	obSubtype(a0),obSubtype(a1)
00011256 2348 003C                  		move.l	a0,gmake_parent(a1)
0001125A                            
0001125A                            	@fail:
0001125A 117C 0001 001C             		move.b	#1,obAnim(a0)
00011260 4A28 0028                  		tst.b	obSubtype(a0)	; is object type 0 (geyser) ?
00011264 6700                       		beq.s	@isgeyser	; if yes, branch
00011266 117C 0004 001C             		move.b	#4,obAnim(a0)
0001126C 6000                       		bra.s	GMake_Display
0001126E                            ; ===========================================================================
0001126E                            
0001126E                            	@isgeyser:
0001126E 2268 003C                  		movea.l	gmake_parent(a0),a1 ; get parent object address
00011272 08E9 0001 0022             		bset	#1,obStatus(a1)
00011278 337C FA80 0012             		move.w	#-$580,obVelY(a1)
0001127E 6000                       		bra.s	GMake_Display
00011280                            ; ===========================================================================
00011280                            
00011280                            GMake_ChkType:	; Routine 4
00011280 4A28 0028                  		tst.b	obSubtype(a0)	; is object type 00 (geyser) ?
00011284 6700                       		beq.s	GMake_Display	; if yes, branch
00011286 5428 0024                  		addq.b	#2,obRoutine(a0)
0001128A 4E75                       		rts	
0001128C                            ; ===========================================================================
0001128C                            
0001128C                            GMake_Display:	; Routine 8
0001128C 43F9 0000 0000             		lea	(Ani_Geyser).l,a1
00011292 6100 B794                  		bsr.w	AnimateSprite
00011296 6100 E6E4                  		bsr.w	DisplaySprite
0001129A 4E75                       		rts	
0001129C                            ; ===========================================================================
0001129C                            
0001129C                            GMake_Delete:	; Routine $A
0001129C 117C 0000 001C             		move.b	#0,obAnim(a0)
000112A2 117C 0002 0024             		move.b	#2,obRoutine(a0)
000112A8 4A28 0028                  		tst.b	obSubtype(a0)
000112AC 6700 E70E                  		beq.w	DeleteObject
000112B0 4E75                       		rts	
000112B2                            
000112B2                            
000112B2                            ; ---------------------------------------------------------------------------
000112B2                            ; Object 4D - lava geyser / lavafall (MZ)
000112B2                            ; ---------------------------------------------------------------------------
000112B2                            
000112B2                            LavaGeyser:
000112B2 7000                       		moveq	#0,d0
000112B4 1028 0024                  		move.b	obRoutine(a0),d0
000112B8 323B 0000                  		move.w	Geyser_Index(pc,d0.w),d1
000112BC 4EBB 1000                  		jsr	Geyser_Index(pc,d1.w)
000112C0 6000 E6BA                  		bra.w	DisplaySprite
000112C4                            ; ===========================================================================
000112C4 0000                       Geyser_Index:	dc.w Geyser_Main-Geyser_Index
000112C6 0000                       		dc.w Geyser_Action-Geyser_Index
000112C8 0000                       		dc.w loc_EFFC-Geyser_Index
000112CA 0000                       		dc.w Geyser_Delete-Geyser_Index
000112CC                            
000112CC FB00 0000                  Geyser_Speeds:	dc.w $FB00, 0
000112D0                            ; ===========================================================================
000112D0                            
000112D0                            Geyser_Main:	; Routine 0
000112D0 5428 0024                  		addq.b	#2,obRoutine(a0)
000112D4 3168 000C 0030             		move.w	obY(a0),$30(a0)
000112DA 4A28 0028                  		tst.b	obSubtype(a0)
000112DE 6700                       		beq.s	@isgeyser
000112E0 0468 0250 000C             		subi.w	#$250,obY(a0)
000112E6                            
000112E6                            	@isgeyser:
000112E6 7000                       		moveq	#0,d0
000112E8 1028 0028                  		move.b	obSubtype(a0),d0
000112EC D040                       		add.w	d0,d0
000112EE 317B 00DC 0012             		move.w	Geyser_Speeds(pc,d0.w),obVelY(a0)
000112F4 2248                       		movea.l	a0,a1
000112F6 7201                       		moveq	#1,d1
000112F8 6100                       		bsr.s	@makelava
000112FA 6000                       		bra.s	@activate
000112FC                            ; ===========================================================================
000112FC                            
000112FC                            	@loop:
000112FC 6100 EB20                  		bsr.w	FindNextFreeObj
00011300 6600                       		bne.s	@fail
00011302                            
00011302                            @makelava:
00011302 12BC 004D                  		move.b	#id_LavaGeyser,0(a1)
00011306 237C 0000 0000 0004        		move.l	#Map_Geyser,obMap(a1)
0001130E 337C 63A8 0002             		move.w	#$63A8,obGfx(a1)
00011314 137C 0004 0001             		move.b	#4,obRender(a1)
0001131A 137C 0020 0014             		move.b	#$20,obActWid(a1)
00011320 3368 0008 0008             		move.w	obX(a0),obX(a1)
00011326 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001132C 1368 0028 0028             		move.b	obSubtype(a0),obSubtype(a1)
00011332 337C 0080 0018             		move.w	#$80,obPriority(a1)
00011338 137C 0005 001C             		move.b	#5,obAnim(a1)
0001133E 4A28 0028                  		tst.b	obSubtype(a0)
00011342 6700                       		beq.s	@fail
00011344 137C 0002 001C             		move.b	#2,obAnim(a1)
0001134A                            
0001134A                            	@fail:
0001134A 51C9 FFB0                  		dbf	d1,@loop
0001134E 4E75                       		rts	
00011350                            ; ===========================================================================
00011350                            
00011350                            @activate:
00011350 0669 0060 000C             		addi.w	#$60,obY(a1)
00011356 3368 0030 0030             		move.w	$30(a0),$30(a1)
0001135C 0669 0060 0030             		addi.w	#$60,$30(a1)
00011362 137C 0093 0020             		move.b	#$93,obColType(a1)
00011368 137C 0080 0016             		move.b	#$80,obHeight(a1)
0001136E 08E9 0004 0001             		bset	#4,obRender(a1)
00011374 5829 0024                  		addq.b	#4,obRoutine(a1)
00011378 2348 003C                  		move.l	a0,$3C(a1)
0001137C 4A28 0028                  		tst.b	obSubtype(a0)
00011380 6700                       		beq.s	@sound
00011382 7200                       		moveq	#0,d1
00011384 6100 FF76                  		bsr.w	@loop
00011388 5429 0024                  		addq.b	#2,obRoutine(a1)
0001138C 08E9 0004 0002             		bset	#4,obGfx(a1)
00011392 0669 0100 000C             		addi.w	#$100,obY(a1)
00011398 337C 0000 0018             		move.w	#0,obPriority(a1)
0001139E 3368 0030 0030             		move.w	$30(a0),$30(a1)
000113A4 2368 003C 003C             		move.l	$3C(a0),$3C(a1)
000113AA 117C 0000 0028             		move.b	#0,obSubtype(a0)
000113B0                            
000113B0                            	@sound:
000113BA                            
000113BA                            Geyser_Action:	; Routine 2
000113BA 7000                       		moveq	#0,d0
000113BC 1028 0028                  		move.b	obSubtype(a0),d0
000113C0 D040                       		add.w	d0,d0
000113C2 323B 0000                  		move.w	Geyser_Types(pc,d0.w),d1
000113C6 4EBB 1000                  		jsr	Geyser_Types(pc,d1.w)
000113CA 6100 E59C                  		bsr.w	SpeedToPos
000113CE 43F9 0000 0000             		lea	(Ani_Geyser).l,a1
000113D4 6100 B652                  		bsr.w	AnimateSprite
000113D8                            
000113D8                            Geyser_ChkDel:
000113F6 4E75                       		rts	
000113F8                            ; ===========================================================================
000113F8 0000                       Geyser_Types:	dc.w Geyser_Type00-Geyser_Types
000113FA 0000                       		dc.w Geyser_Type01-Geyser_Types
000113FC                            ; ===========================================================================
000113FC                            
000113FC                            Geyser_Type00:
000113FC 0668 0018 0012             		addi.w	#$18,obVelY(a0)	; increase object's falling speed
00011402 3028 0030                  		move.w	$30(a0),d0
00011406 B068 000C                  		cmp.w	obY(a0),d0
0001140A 6400                       		bcc.s	locret_EFDA
0001140C 5828 0024                  		addq.b	#4,obRoutine(a0)
00011410 2268 003C                  		movea.l	$3C(a0),a1
00011414 137C 0003 001C             		move.b	#3,obAnim(a1)
0001141A                            
0001141A                            locret_EFDA:
0001141A 4E75                       		rts	
0001141C                            ; ===========================================================================
0001141C                            
0001141C                            Geyser_Type01:
0001141C 0668 0018 0012             		addi.w	#$18,obVelY(a0)	; increase object's falling speed
00011422 3028 0030                  		move.w	$30(a0),d0
00011426 B068 000C                  		cmp.w	obY(a0),d0
0001142A 6400                       		bcc.s	locret_EFFA
0001142C 5828 0024                  		addq.b	#4,obRoutine(a0)
00011430 2268 003C                  		movea.l	$3C(a0),a1
00011434 137C 0001 001C             		move.b	#1,obAnim(a1)
0001143A                            
0001143A                            locret_EFFA:
0001143A 4E75                       		rts	
0001143C                            ; ===========================================================================
0001143C                            
0001143C                            loc_EFFC:	; Routine 4
0001143C 2268 003C                  		movea.l	$3C(a0),a1
00011440 0C29 0006 0024             		cmpi.b	#6,obRoutine(a1)
00011446 6700 0000                  		beq.w	Geyser_Delete
0001144A 3029 000C                  		move.w	obY(a1),d0
0001144E 0640 0060                  		addi.w	#$60,d0
00011452 3140 000C                  		move.w	d0,obY(a0)
00011456 9068 0030                  		sub.w	$30(a0),d0
0001145A 4440                       		neg.w	d0
0001145C 7208                       		moveq	#8,d1
0001145E 0C40 0040                  		cmpi.w	#$40,d0
00011462 6C00                       		bge.s	loc_F026
00011464 720B                       		moveq	#$B,d1
00011466                            
00011466                            loc_F026:
00011466 0C40 0080                  		cmpi.w	#$80,d0
0001146A 6F00                       		ble.s	loc_F02E
0001146C 720E                       		moveq	#$E,d1
0001146E                            
0001146E                            loc_F02E:
0001146E 5328 001E                  		subq.b	#1,obTimeFrame(a0)
00011472 6A00                       		bpl.s	loc_F04C
00011474 117C 0007 001E             		move.b	#7,obTimeFrame(a0)
0001147A 5228 001B                  		addq.b	#1,obAniFrame(a0)
0001147E 0C28 0002 001B             		cmpi.b	#2,obAniFrame(a0)
00011484 6500                       		bcs.s	loc_F04C
00011486 117C 0000 001B             		move.b	#0,obAniFrame(a0)
0001148C                            
0001148C                            loc_F04C:
0001148C 1028 001B                  		move.b	obAniFrame(a0),d0
00011490 D001                       		add.b	d1,d0
00011492 1140 001A                  		move.b	d0,obFrame(a0)
00011496 6000 FF40                  		bra.w	Geyser_ChkDel
0001149A                            ; ===========================================================================
0001149A                            
0001149A                            Geyser_Delete:	; Routine 6
0001149A 6000 E520                  		bra.w	DeleteObject
0001149A 6000 E520                  		bra.w	DeleteObject
0001149E                            		include	"_incObj\54 Lava Tag.asm"
0001149E                            ; ---------------------------------------------------------------------------
0001149E                            ; Object 54 - invisible	lava tag (MZ)
0001149E                            ; ---------------------------------------------------------------------------
0001149E                            
0001149E                            LavaTag:
0001149E 0C28 0002 0028             		cmpi.b	#2,obSubtype(a0)	;TIS
000114A4 6E00 0000                  		bgt	WaterTag	;TIS
000114A8 7000                       		moveq	#0,d0
000114AA 1028 0024                  		move.b	obRoutine(a0),d0
000114AE 323B 0000                  		move.w	LTag_Index(pc,d0.w),d1
000114B2 4EFB 1000                  		jmp	LTag_Index(pc,d1.w)
000114B6                            ; ===========================================================================
000114B6 0000                       LTag_Index:	dc.w LTag_Main-LTag_Index
000114B8 0000                       		dc.w LTag_ChkDel-LTag_Index
000114BA                            
000114BA 9694 95                    LTag_ColTypes:	dc.b $96, $94, $95
000114BE 00                         		even
000114BE                            ; ===========================================================================
000114BE                            
000114BE                            LTag_Main:	; Routine 0
000114BE 5428 0024                  		addq.b	#2,obRoutine(a0)
000114C2 7000                       		moveq	#0,d0
000114C4 1028 0028                  		move.b	obSubtype(a0),d0
000114C8 117B 00F0 0020             		move.b	LTag_ColTypes(pc,d0.w),obColType(a0)
000114CE 217C 0000 0000 0004        		move.l	#Map_LTag,obMap(a0)
000114D6 117C 0084 0001             		move.b	#$84,obRender(a0)
000114DC                            
000114DC                            LTag_ChkDel:	; Routine 2
000114DC 3028 0008                  		move.w	obX(a0),d0
000114E0 0240 FF80                  		andi.w	#$FF80,d0
000114E4 3238 F700                  		move.w	(v_screenposx).w,d1
000114E8 0441 0080                  		subi.w	#$80,d1
000114EC 0241 FF80                  		andi.w	#$FF80,d1
000114F0 9041                       		sub.w	d1,d0
000114F2 6B00 E4C8                  		bmi.w	DeleteObject
000114F6 0C40 0280                  		cmpi.w	#$280,d0
000114FA 6200 E4C0                  		bhi.w	DeleteObject
000114FE 4E75                       		rts
00011500                            
00011500                            
00011500                            ; ---------------------------------------------------------------------------
00011500                            ; Object 54a - invisible	water tag (MZ) - TIS
00011500                            ; ---------------------------------------------------------------------------
00011500                            
00011500                            WaterTag:	
00011500 7000                       		moveq	#0,d0
00011502 1028 0024                  		move.b	obRoutine(a0),d0
00011506 323B 0000                  		move.w	WTag_Index(pc,d0.w),d1
0001150A 4EFB 1000                  		jmp	WTag_Index(pc,d1.w)
0001150E                            ; ===========================================================================
0001150E 0000                       WTag_Index:	dc.w WTag_Main-WTag_Index
00011510 0000                       		dc.w WTag_ChkDel-WTag_Index
00011512                            
00011512 9694 95                    WTag_ColTypes:	dc.b $96, $94, $95
00011516 00                         		even
00011516                            ; ===========================================================================
00011516                            
00011516                            
00011516                            WTag_Main:	; Routine 0
00011516 5428 0024                  		addq.b	#2,obRoutine(a0)
0001151A 7000                       		moveq	#0,d0
0001151C                            		;move.b	obSubtype(a0),d0
0001151C                            		;move.b	WTag_ColTypes(pc,d0.w),obColType(a0)
0001151C 0400 00F0                  		sub.b	#$F0,d0
00011520 1178 0096 0020             		move.b	$96,obColType(a0)							
00011526                            		;move.l	#Map_LTag,obMap(a0)
00011526                            		;move.b	#$84,obRender(a0)
00011526                            
00011526                            WTag_ChkDel:	; Routine 2
00011526 3028 0008                  		move.w	obX(a0),d0
0001152A 0240 FF80                  		andi.w	#$FF80,d0
0001152E 3238 F700                  		move.w	(v_screenposx).w,d1
00011532 0441 0080                  		subi.w	#$80,d1
00011536 0241 FF80                  		andi.w	#$FF80,d1
0001153A 9041                       		sub.w	d1,d0
0001153C 6B00 E47E                  		bmi.w	DeleteObject
00011540 0C40 0280                  		cmpi.w	#$280,d0
00011544 6200 E476                  		bhi.w	DeleteObject
00011548 4E75                       		rts
0001154A                            
0001154A                            
0001154A                            Map_LTag:	include	"_maps\Lava Tag.asm"
0001154A                            ; ---------------------------------------------------------------------------
0001154A                            ; Sprite mappings - invisible lava tag (MZ)
0001154A                            ; ---------------------------------------------------------------------------
0001154A                            Map_LTag_internal:
0001154A 0000                       		dc.w @0-Map_LTag_internal
0001154C 00                         @0:		dc.b 0		; no sprite, because the tag is invisible!
0001154E 00                         		even
0001154E 00                         		even
0001154E                            		include	"_anim\Lava Geyser.asm"
0001154E                            ; ---------------------------------------------------------------------------
0001154E                            ; Animation script - geyser of lava (MZ)
0001154E                            ; ---------------------------------------------------------------------------
0001154E 0000                       Ani_Geyser:	dc.w @bubble1-Ani_Geyser
00011550 0000                       		dc.w @bubble2-Ani_Geyser
00011552 0000                       		dc.w @end-Ani_Geyser
00011554 0000                       		dc.w @bubble3-Ani_Geyser
00011556 0000                       		dc.w @blank-Ani_Geyser
00011558 0000                       		dc.w @bubble4-Ani_Geyser
0001155A 0200 0100 0104 0504 05FC   @bubble1:	dc.b 2,	0, 1, 0, 1, 4, 5, 4, 5,	afRoutine
00011564 0202 03FF                  @bubble2:	dc.b 2,	2, 3, afEnd
00011568 0206 07FF                  @end:		dc.b 2,	6, 7, afEnd
0001156C 0202 0300 0100 01FC        @bubble3:	dc.b 2,	2, 3, 0, 1, 0, 1, afRoutine
00011574 0F13 FF                    @blank:		dc.b $F, $13, afEnd
00011578 00                         		even
00011578 0211 12FF                  @bubble4:	dc.b 2,	$11, $12, afEnd
0001157C                            		even
0001157C                            		even
0001157C                            Map_Geyser:	include	"_maps\Lava Geyser.asm"
0001157C                            ; ---------------------------------------------------------------------------
0001157C                            ; Sprite mappings - lava geyser / lava that falls from the ceiling (MZ)
0001157C                            ; ---------------------------------------------------------------------------
0001157C                            Map_Geyser_internal:
0001157C 0000                       		dc.w @bubble1-Map_Geyser_internal
0001157E 0000                       		dc.w @bubble2-Map_Geyser_internal
00011580 0000                       		dc.w @bubble3-Map_Geyser_internal
00011582 0000                       		dc.w @bubble4-Map_Geyser_internal
00011584 0000                       		dc.w @bubble5-Map_Geyser_internal
00011586 0000                       		dc.w @bubble6-Map_Geyser_internal
00011588 0000                       		dc.w @end1-Map_Geyser_internal
0001158A 0000                       		dc.w @end2-Map_Geyser_internal
0001158C 0000                       		dc.w @medcolumn1-Map_Geyser_internal
0001158E 0000                       		dc.w @medcolumn2-Map_Geyser_internal
00011590 0000                       		dc.w @medcolumn3-Map_Geyser_internal
00011592 0000                       		dc.w @shortcolumn1-Map_Geyser_internal
00011594 0000                       		dc.w @shortcolumn2-Map_Geyser_internal
00011596 0000                       		dc.w @shortcolumn3-Map_Geyser_internal
00011598 0000                       		dc.w @longcolumn1-Map_Geyser_internal
0001159A 0000                       		dc.w @longcolumn2-Map_Geyser_internal
0001159C 0000                       		dc.w @longcolumn3-Map_Geyser_internal
0001159E 0000                       		dc.w @bubble7-Map_Geyser_internal
000115A0 0000                       		dc.w @bubble8-Map_Geyser_internal
000115A2 0000                       		dc.w @blank-Map_Geyser_internal
000115A4 02                         @bubble1:	dc.b 2
000115A5 EC0B 0000 E8               		dc.b $EC, $B, 0, 0, $E8
000115AA EC0B 0800 00               		dc.b $EC, $B, 8, 0, 0
000115AF 02                         @bubble2:	dc.b 2
000115B0 EC0B 0018 E8               		dc.b $EC, $B, 0, $18, $E8
000115B5 EC0B 0818 00               		dc.b $EC, $B, 8, $18, 0
000115BA 04                         @bubble3:	dc.b 4
000115BB EC0B 0000 C8               		dc.b $EC, $B, 0, 0, $C8
000115C0 F40E 000C E0               		dc.b $F4, $E, 0, $C, $E0
000115C5 F40E 080C 00               		dc.b $F4, $E, 8, $C, 0
000115CA EC0B 0800 20               		dc.b $EC, $B, 8, 0, $20
000115CF 04                         @bubble4:	dc.b 4
000115D0 EC0B 0018 C8               		dc.b $EC, $B, 0, $18, $C8
000115D5 F40E 0024 E0               		dc.b $F4, $E, 0, $24, $E0
000115DA F40E 0824 00               		dc.b $F4, $E, 8, $24, 0
000115DF EC0B 0818 20               		dc.b $EC, $B, 8, $18, $20
000115E4 06                         @bubble5:	dc.b 6
000115E5 EC0B 0000 C8               		dc.b $EC, $B, 0, 0, $C8
000115EA F40E 000C E0               		dc.b $F4, $E, 0, $C, $E0
000115EF F40E 080C 00               		dc.b $F4, $E, 8, $C, 0
000115F4 EC0B 0800 20               		dc.b $EC, $B, 8, 0, $20
000115F9 E80E 0090 E0               		dc.b $E8, $E, 0, $90, $E0
000115FE E80E 0890 00               		dc.b $E8, $E, 8, $90, 0
00011603 06                         @bubble6:	dc.b 6
00011604 EC0B 0018 C8               		dc.b $EC, $B, 0, $18, $C8
00011609 F40E 0024 E0               		dc.b $F4, $E, 0, $24, $E0
0001160E F40E 0824 00               		dc.b $F4, $E, 8, $24, 0
00011613 EC0B 0818 20               		dc.b $EC, $B, 8, $18, $20
00011618 E80E 0890 E0               		dc.b $E8, $E, 8, $90, $E0
0001161D E80E 0090 00               		dc.b $E8, $E, 0, $90, 0
00011622 02                         @end1:		dc.b 2
00011623 E00F 0030 E0               		dc.b $E0, $F, 0, $30, $E0
00011628 E00F 0830 00               		dc.b $E0, $F, 8, $30, 0
0001162D 02                         @end2:		dc.b 2
0001162E E00F 0830 E0               		dc.b $E0, $F, 8, $30, $E0
00011633 E00F 0030 00               		dc.b $E0, $F, 0, $30, 0
00011638 0A                         @medcolumn1:	dc.b $A
00011639 900F 0040 E0               		dc.b $90, $F, 0, $40, $E0
0001163E 900F 0840 00               		dc.b $90, $F, 8, $40, 0
00011643 B00F 0040 E0               		dc.b $B0, $F, 0, $40, $E0
00011648 B00F 0840 00               		dc.b $B0, $F, 8, $40, 0
0001164D D00F 0040 E0               		dc.b $D0, $F, 0, $40, $E0
00011652 D00F 0840 00               		dc.b $D0, $F, 8, $40, 0
00011657 F00F 0040 E0               		dc.b $F0, $F, 0, $40, $E0
0001165C F00F 0840 00               		dc.b $F0, $F, 8, $40, 0
00011661 100F 0040 E0               		dc.b $10, $F, 0, $40, $E0
00011666 100F 0840 00               		dc.b $10, $F, 8, $40, 0
0001166B 0A                         @medcolumn2:	dc.b $A
0001166C 900F 0050 E0               		dc.b $90, $F, 0, $50, $E0
00011671 900F 0850 00               		dc.b $90, $F, 8, $50, 0
00011676 B00F 0050 E0               		dc.b $B0, $F, 0, $50, $E0
0001167B B00F 0850 00               		dc.b $B0, $F, 8, $50, 0
00011680 D00F 0050 E0               		dc.b $D0, $F, 0, $50, $E0
00011685 D00F 0850 00               		dc.b $D0, $F, 8, $50, 0
0001168A F00F 0050 E0               		dc.b $F0, $F, 0, $50, $E0
0001168F F00F 0850 00               		dc.b $F0, $F, 8, $50, 0
00011694 100F 0050 E0               		dc.b $10, $F, 0, $50, $E0
00011699 100F 0850 00               		dc.b $10, $F, 8, $50, 0
0001169E 0A                         @medcolumn3:	dc.b $A
0001169F 900F 0060 E0               		dc.b $90, $F, 0, $60, $E0
000116A4 900F 0860 00               		dc.b $90, $F, 8, $60, 0
000116A9 B00F 0060 E0               		dc.b $B0, $F, 0, $60, $E0
000116AE B00F 0860 00               		dc.b $B0, $F, 8, $60, 0
000116B3 D00F 0060 E0               		dc.b $D0, $F, 0, $60, $E0
000116B8 D00F 0860 00               		dc.b $D0, $F, 8, $60, 0
000116BD F00F 0060 E0               		dc.b $F0, $F, 0, $60, $E0
000116C2 F00F 0860 00               		dc.b $F0, $F, 8, $60, 0
000116C7 100F 0060 E0               		dc.b $10, $F, 0, $60, $E0
000116CC 100F 0860 00               		dc.b $10, $F, 8, $60, 0
000116D1 06                         @shortcolumn1:	dc.b 6
000116D2 900F 0040 E0               		dc.b $90, $F, 0, $40, $E0
000116D7 900F 0840 00               		dc.b $90, $F, 8, $40, 0
000116DC B00F 0040 E0               		dc.b $B0, $F, 0, $40, $E0
000116E1 B00F 0840 00               		dc.b $B0, $F, 8, $40, 0
000116E6 D00F 0040 E0               		dc.b $D0, $F, 0, $40, $E0
000116EB D00F 0840 00               		dc.b $D0, $F, 8, $40, 0
000116F0 06                         @shortcolumn2:	dc.b 6
000116F1 900F 0050 E0               		dc.b $90, $F, 0, $50, $E0
000116F6 900F 0850 00               		dc.b $90, $F, 8, $50, 0
000116FB B00F 0050 E0               		dc.b $B0, $F, 0, $50, $E0
00011700 B00F 0850 00               		dc.b $B0, $F, 8, $50, 0
00011705 D00F 0050 E0               		dc.b $D0, $F, 0, $50, $E0
0001170A D00F 0850 00               		dc.b $D0, $F, 8, $50, 0
0001170F 06                         @shortcolumn3:	dc.b 6
00011710 900F 0060 E0               		dc.b $90, $F, 0, $60, $E0
00011715 900F 0860 00               		dc.b $90, $F, 8, $60, 0
0001171A B00F 0060 E0               		dc.b $B0, $F, 0, $60, $E0
0001171F B00F 0860 00               		dc.b $B0, $F, 8, $60, 0
00011724 D00F 0060 E0               		dc.b $D0, $F, 0, $60, $E0
00011729 D00F 0860 00               		dc.b $D0, $F, 8, $60, 0
0001172E 10                         @longcolumn1:	dc.b $10
0001172F 900F 0040 E0               		dc.b $90, $F, 0, $40, $E0
00011734 900F 0840 00               		dc.b $90, $F, 8, $40, 0
00011739 B00F 0040 E0               		dc.b $B0, $F, 0, $40, $E0
0001173E B00F 0840 00               		dc.b $B0, $F, 8, $40, 0
00011743 D00F 0040 E0               		dc.b $D0, $F, 0, $40, $E0
00011748 D00F 0840 00               		dc.b $D0, $F, 8, $40, 0
0001174D F00F 0040 E0               		dc.b $F0, $F, 0, $40, $E0
00011752 F00F 0840 00               		dc.b $F0, $F, 8, $40, 0
00011757 100F 0040 E0               		dc.b $10, $F, 0, $40, $E0
0001175C 100F 0840 00               		dc.b $10, $F, 8, $40, 0
00011761 300F 0040 E0               		dc.b $30, $F, 0, $40, $E0
00011766 300F 0840 00               		dc.b $30, $F, 8, $40, 0
0001176B 500F 0040 E0               		dc.b $50, $F, 0, $40, $E0
00011770 500F 0840 00               		dc.b $50, $F, 8, $40, 0
00011775 700F 0040 E0               		dc.b $70, $F, 0, $40, $E0
0001177A 700F 0840 00               		dc.b $70, $F, 8, $40, 0
0001177F 10                         @longcolumn2:	dc.b $10
00011780 900F 0050 E0               		dc.b $90, $F, 0, $50, $E0
00011785 900F 0850 00               		dc.b $90, $F, 8, $50, 0
0001178A B00F 0050 E0               		dc.b $B0, $F, 0, $50, $E0
0001178F B00F 0850 00               		dc.b $B0, $F, 8, $50, 0
00011794 D00F 0050 E0               		dc.b $D0, $F, 0, $50, $E0
00011799 D00F 0850 00               		dc.b $D0, $F, 8, $50, 0
0001179E F00F 0050 E0               		dc.b $F0, $F, 0, $50, $E0
000117A3 F00F 0850 00               		dc.b $F0, $F, 8, $50, 0
000117A8 100F 0050 E0               		dc.b $10, $F, 0, $50, $E0
000117AD 100F 0850 00               		dc.b $10, $F, 8, $50, 0
000117B2 300F 0050 E0               		dc.b $30, $F, 0, $50, $E0
000117B7 300F 0850 00               		dc.b $30, $F, 8, $50, 0
000117BC 500F 0050 E0               		dc.b $50, $F, 0, $50, $E0
000117C1 500F 0850 00               		dc.b $50, $F, 8, $50, 0
000117C6 700F 0050 E0               		dc.b $70, $F, 0, $50, $E0
000117CB 700F 0850 00               		dc.b $70, $F, 8, $50, 0
000117D0 10                         @longcolumn3:	dc.b $10
000117D1 900F 0060 E0               		dc.b $90, $F, 0, $60, $E0
000117D6 900F 0860 00               		dc.b $90, $F, 8, $60, 0
000117DB B00F 0060 E0               		dc.b $B0, $F, 0, $60, $E0
000117E0 B00F 0860 00               		dc.b $B0, $F, 8, $60, 0
000117E5 D00F 0060 E0               		dc.b $D0, $F, 0, $60, $E0
000117EA D00F 0860 00               		dc.b $D0, $F, 8, $60, 0
000117EF F00F 0060 E0               		dc.b $F0, $F, 0, $60, $E0
000117F4 F00F 0860 00               		dc.b $F0, $F, 8, $60, 0
000117F9 100F 0060 E0               		dc.b $10, $F, 0, $60, $E0
000117FE 100F 0860 00               		dc.b $10, $F, 8, $60, 0
00011803 300F 0060 E0               		dc.b $30, $F, 0, $60, $E0
00011808 300F 0860 00               		dc.b $30, $F, 8, $60, 0
0001180D 500F 0060 E0               		dc.b $50, $F, 0, $60, $E0
00011812 500F 0860 00               		dc.b $50, $F, 8, $60, 0
00011817 700F 0060 E0               		dc.b $70, $F, 0, $60, $E0
0001181C 700F 0860 00               		dc.b $70, $F, 8, $60, 0
00011821 06                         @bubble7:	dc.b 6
00011822 E00B 0000 C8               		dc.b $E0, $B, 0, 0, $C8
00011827 E80E 000C E0               		dc.b $E8, $E, 0, $C, $E0
0001182C E80E 080C 00               		dc.b $E8, $E, 8, $C, 0
00011831 E00B 0800 20               		dc.b $E0, $B, 8, 0, $20
00011836 D80E 0090 E0               		dc.b $D8, $E, 0, $90, $E0
0001183B D80E 0890 00               		dc.b $D8, $E, 8, $90, 0
00011840 06                         @bubble8:	dc.b 6
00011841 E00B 0018 C8               		dc.b $E0, $B, 0, $18, $C8
00011846 E80E 0024 E0               		dc.b $E8, $E, 0, $24, $E0
0001184B E80E 0824 00               		dc.b $E8, $E, 8, $24, 0
00011850 E00B 0818 20               		dc.b $E0, $B, 8, $18, $20
00011855 D80E 0890 E0               		dc.b $D8, $E, 8, $90, $E0
0001185A D80E 0090 00               		dc.b $D8, $E, 0, $90, 0
0001185F 00                         @blank:	dc.b 0
00011860                            		even
00011860                            		even
00011860                            
00011860                            		include	"_incObj\40 Moto Bug.asm" ; includes "_incObj\sub RememberState.asm"
00011860                            ; ---------------------------------------------------------------------------
00011860                            ; Object 40 - Moto Bug enemy (GHZ)
00011860                            ; ---------------------------------------------------------------------------
00011860                            
00011860                            MotoBug:
00011860 7000                       		moveq	#0,d0
00011862 1028 0024                  		move.b	obRoutine(a0),d0
00011866 323B 0000                  		move.w	Moto_Index(pc,d0.w),d1
0001186A 4EFB 1000                  		jmp	Moto_Index(pc,d1.w)
0001186E                            ; ===========================================================================
0001186E 0000                       Moto_Index:	dc.w Moto_Main-Moto_Index
00011870 0000                       		dc.w Moto_Action-Moto_Index
00011872 0000                       		dc.w Moto_Animate-Moto_Index
00011874 0000                       		dc.w Moto_Delete-Moto_Index
00011876                            ; ===========================================================================
00011876                            
00011876                            Moto_Main:	; Routine 0
00011876 217C 0000 0000 0004        		move.l	#Map_Moto,obMap(a0)
0001187E 317C 04F0 0002             		move.w	#$4F0,obGfx(a0)
00011884 117C 0004 0001             		move.b	#4,obRender(a0)
0001188A 317C 0200 0018             		move.w	#$200,obPriority(a0)
00011890 117C 0014 0014             		move.b	#$14,obActWid(a0)
00011896 4A28 001C                  		tst.b	obAnim(a0)	; is object a smoke trail?
0001189A 6600                       		bne.s	@smoke		; if yes, branch
0001189C 117C 000E 0016             		move.b	#$E,obHeight(a0)
000118A2 117C 0008 0017             		move.b	#8,obWidth(a0)
000118A8 117C 000C 0020             		move.b	#$C,obColType(a0)
000118AE 6100 E080                  		bsr.w	ObjectFall
000118B2 4EB9 0000 0000             		jsr	(ObjFloorDist).l
000118B8 4A41                       		tst.w	d1
000118BA 6A00                       		bpl.s	@notonfloor
000118BC D368 000C                  		add.w	d1,obY(a0)	; match	object's position with the floor
000118C0 317C 0000 0012             		move.w	#0,obVelY(a0)
000118C6 5428 0024                  		addq.b	#2,obRoutine(a0) ; goto Moto_Action next
000118CA 0868 0000 0022             		bchg	#0,obStatus(a0)
000118D0                            
000118D0                            	@notonfloor:
000118D0 4E75                       		rts	
000118D2                            ; ===========================================================================
000118D2                            
000118D2                            @smoke:
000118D2 5828 0024                  		addq.b	#4,obRoutine(a0) ; goto Moto_Animate next
000118D6 6000 0000                  		bra.w	Moto_Animate
000118DA                            ; ===========================================================================
000118DA                            
000118DA                            Moto_Action:	; Routine 2
000118DA 7000                       		moveq	#0,d0
000118DC 1028 0025                  		move.b	ob2ndRout(a0),d0
000118E0 323B 0000                  		move.w	Moto_ActIndex(pc,d0.w),d1
000118E4 4EBB 1000                  		jsr	Moto_ActIndex(pc,d1.w)
000118E8 43F9 0000 0000             		lea	(Ani_Moto).l,a1
000118EE 6100 B138                  		bsr.w	AnimateSprite
000118F2                            
000118F2                            		include	"_incObj\sub RememberState.asm" ; Moto_Action terminates in this file
000118F2                            ; ---------------------------------------------------------------------------
000118F2                            ; Subroutine to remember whether an object is destroyed/collected
000118F2                            ; ---------------------------------------------------------------------------
000118F2                            
000118F2                            RememberState:
00011910 6000 E06A                  		bra.w	DisplaySprite
00011914                            
00011914                            	@offscreen:
00011914 45F8 FC00                  		lea	(v_objstate).w,a2
00011918 7000                       		moveq	#0,d0
0001191A 1028 0023                  		move.b	obRespawnNo(a0),d0
0001191E 6700                       		beq.s	@delete
00011920 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00011926                            
00011926                            	@delete:
00011926 6000 E094                  		bra.w	DeleteObject
00011926 6000 E094                  		bra.w	DeleteObject
0001192A                            
0001192A                            ; ===========================================================================
0001192A 0000                       Moto_ActIndex:	dc.w @move-Moto_ActIndex
0001192C 0000                       		dc.w @findfloor-Moto_ActIndex
0001192E                            
0001192E =00000030                  @time:		equ $30
0001192E =00000033                  @smokedelay:	equ $33
0001192E                            ; ===========================================================================
0001192E                            
0001192E                            @move:
0001192E 5368 0030                  		subq.w	#1,@time(a0)	; subtract 1 from pause	time
00011932 6A00                       		bpl.s	@wait		; if time remains, branch
00011934 5428 0025                  		addq.b	#2,ob2ndRout(a0)
00011938 317C FF00 0010             		move.w	#-$100,obVelX(a0) ; move object to the left
0001193E 117C 0001 001C             		move.b	#1,obAnim(a0)
00011944 0868 0000 0022             		bchg	#0,obStatus(a0)
0001194A 6600                       		bne.s	@wait
0001194C 4468 0010                  		neg.w	obVelX(a0)	; change direction
00011950                            
00011950                            	@wait:
00011950 4E75                       		rts	
00011952                            ; ===========================================================================
00011952                            
00011952                            @findfloor:
00011952 6100 E014                  		bsr.w	SpeedToPos
00011956 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0001195C 0C41 FFF8                  		cmpi.w	#-8,d1
00011960 6D00                       		blt.s	@pause
00011962 0C41 000C                  		cmpi.w	#$C,d1
00011966 6C00                       		bge.s	@pause
00011968 D368 000C                  		add.w	d1,obY(a0)	; match	object's position with the floor
0001196C 5328 0033                  		subq.b	#1,@smokedelay(a0)
00011970 6A00                       		bpl.s	@nosmoke
00011972 117C 000F 0033             		move.b	#$F,@smokedelay(a0)
00011978 6100 E48E                  		bsr.w	FindFreeObj
0001197C 6600                       		bne.s	@nosmoke
0001197E 12BC 0040                  		move.b	#id_MotoBug,0(a1) ; load exhaust smoke object
00011982 3368 0008 0008             		move.w	obX(a0),obX(a1)
00011988 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001198E 1368 0022 0022             		move.b	obStatus(a0),obStatus(a1)
00011994 137C 0002 001C             		move.b	#2,obAnim(a1)
0001199A                            
0001199A                            	@nosmoke:
0001199A 4E75                       		rts	
0001199C                            
0001199C                            @pause:
0001199C 5528 0025                  		subq.b	#2,ob2ndRout(a0)
000119A0 317C 003B 0030             		move.w	#59,@time(a0)	; set pause time to 1 second
000119A6 317C 0000 0010             		move.w	#0,obVelX(a0)	; stop the object moving
000119AC 117C 0000 001C             		move.b	#0,obAnim(a0)
000119B2 4E75                       		rts	
000119B4                            ; ===========================================================================
000119B4                            
000119B4                            Moto_Animate:	; Routine 4
000119B4 43F9 0000 0000             		lea	(Ani_Moto).l,a1
000119BA 6100 B06C                  		bsr.w	AnimateSprite
000119BE 6000 DFBC                  		bra.w	DisplaySprite
000119C2                            ; ===========================================================================
000119C2                            
000119C2                            Moto_Delete:	; Routine 6
000119C2 6000 DFF8                  		bra.w	DeleteObject
000119C2 6000 DFF8                  		bra.w	DeleteObject
000119C6                            		include	"_anim\Moto Bug.asm"
000119C6                            ; ---------------------------------------------------------------------------
000119C6                            ; Animation script - Motobug enemy
000119C6                            ; ---------------------------------------------------------------------------
000119C6 0000                       Ani_Moto:	dc.w @stand-Ani_Moto
000119C8 0000                       		dc.w @walk-Ani_Moto
000119CA 0000                       		dc.w @smoke-Ani_Moto
000119CC                            
000119CC 0F02 FF                    @stand:		dc.b $F, 2, afEnd
000119D0 00                         		even
000119D0 0700 0100 02FF             @walk:		dc.b 7,	0, 1, 0, 2, afEnd
000119D6 0103 0603 0604 0604 0604+  @smoke:		dc.b 1,	3, 6, 3, 6, 4, 6, 4, 6,	4, 6, 5, afRoutine
000119E4 00                         		even
000119E4 00                         		even
000119E4                            Map_Moto:	include	"_maps\Moto Bug.asm"
000119E4                            ; --------------------------------------------------------------------------------
000119E4                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
000119E4                            ; --------------------------------------------------------------------------------
000119E4                            
000119E4                            SME_TTY9T:	
000119E4 0000 0000                  		dc.w SME_TTY9T_E-SME_TTY9T, SME_TTY9T_23-SME_TTY9T	
000119E8 0000 0000                  		dc.w SME_TTY9T_38-SME_TTY9T, SME_TTY9T_52-SME_TTY9T	
000119EC 0000 0000                  		dc.w SME_TTY9T_58-SME_TTY9T, SME_TTY9T_5E-SME_TTY9T	
000119F0 0000                       		dc.w SME_TTY9T_64-SME_TTY9T	
000119F2 04                         SME_TTY9T_E:	dc.b 4	
000119F3 F00D 2000 EC               		dc.b $F0, $D, $20, 0, $EC	
000119F8 000C 2008 EC               		dc.b 0, $C, $20, 8, $EC	
000119FD F801 200C 0C               		dc.b $F8, 1, $20, $C, $C	
00011A02 0808 200E F4               		dc.b 8, 8, $20, $E, $F4	
00011A07 04                         SME_TTY9T_23:	dc.b 4	
00011A08 F10D 2000 EC               		dc.b $F1, $D, $20, 0, $EC	
00011A0D 010C 2008 EC               		dc.b 1, $C, $20, 8, $EC	
00011A12 F901 200C 0C               		dc.b $F9, 1, $20, $C, $C	
00011A17 0908 2011 F4               		dc.b 9, 8, $20, $11, $F4	
00011A1C 05                         SME_TTY9T_38:	dc.b 5	
00011A1D F00D 2000 EC               		dc.b $F0, $D, $20, 0, $EC	
00011A22 000C 2014 EC               		dc.b 0, $C, $20, $14, $EC	
00011A27 F801 200C 0C               		dc.b $F8, 1, $20, $C, $C	
00011A2C 0804 2018 EC               		dc.b 8, 4, $20, $18, $EC	
00011A31 0804 2012 FC               		dc.b 8, 4, $20, $12, $FC	
00011A36 01                         SME_TTY9T_52:	dc.b 1	
00011A37 FA00 001A 10               		dc.b $FA, 0, 0, $1A, $10	
00011A3C 01                         SME_TTY9T_58:	dc.b 1	
00011A3D FA00 001B 10               		dc.b $FA, 0, 0, $1B, $10	
00011A42 01                         SME_TTY9T_5E:	dc.b 1	
00011A43 FA00 001C 10               		dc.b $FA, 0, 0, $1C, $10	
00011A48 00                         SME_TTY9T_64:	dc.b 0	
00011A4A 00                         		even
00011A4A 00                         		even
00011A4A                            		include	"_incObj\4F.asm"
00011A4A                            ; ---------------------------------------------------------------------------
00011A4A                            ; Object 4F - Splats
00011A4A                            ; ---------------------------------------------------------------------------
00011A4A                            
00011A4A                            Obj4F:
00011A4A 7000                                       moveq   #0,d0
00011A4C 1028 0024                                  move.b  $24(a0),d0
00011A50 323B 0000                                  move.w  ObjSplats_Index(pc,d0.w),d1
00011A54 4EFB 1000                                  jmp     ObjSplats_Index(pc,d1.w)
00011A58                            ; ---------------------------------------------------------------------------
00011A58 0000                       ObjSplats_Index:dc.w ObjSplats_Init-*
00011A5A 0000                                       dc.w loc_D246-ObjSplats_Index
00011A5C 0000                                       dc.w ObjSplats_Bounce-ObjSplats_Index
00011A5E 0000                                       dc.w loc_D2C8-ObjSplats_Index
00011A60                            ; ---------------------------------------------------------------------------
00011A60                            
00011A60                            ObjSplats_Init:
00011A60 5428 0024                                  addq.b  #2,$24(a0)
00011A64 217C 0000 0000 0004                        move.l  #Map_Splats,4(a0)
00011A6C 317C 24E4 0002                             move.w  #$24E4,2(a0)
00011A72 117C 0004 0001                             move.b  #4,1(a0)
00011A78 117C 0004 0014                             move.b  #4,obActWid(a0)
00011A7E 317C 0200 0018             				move.w	#$200,obPriority(a0)
00011A84 117C 0014 0016                             move.b  #$14,$16(a0)
00011A8A 117C 0002 0020                             move.b  #2,$20(a0)
00011A90 4A28 0028                                  tst.b   $28(a0)
00011A94 6700                                       beq.s   loc_D246
00011A96 343C 0300                                  move.w  #$300,d2
00011A9A 6000                                       bra.s   ObjSplats_FaceRight
00011A9C                            ; ---------------------------------------------------------------------------
00011A9C                            
00011A9C                            loc_D246:
00011A9C 343C 00E0                                  move.w  #$E0,d2
00011AA0                            
00011AA0                            ObjSplats_FaceRight:
00011AA0 323C 0100                                  move.w  #$100,d1
00011AA4 08E8 0000 0001                             bset    #0,1(a0)
00011AAA 3038 D008                                  move.w  ($FFFFD008).w,d0
00011AAE 9068 0008                                  sub.w   8(a0),d0
00011AB2 6400                                       bcc.s   ObjSplats_Move
00011AB4 4440                                       neg.w   d0
00011AB6 4441                                       neg.w   d1
00011AB8 08A8 0000 0001                             bclr    #0,1(a0)
00011ABE                            
00011ABE                            ObjSplats_Move:
00011ABE B042                                       cmp.w   d2,d0
00011AC0 6400                                       bcc.s   ObjSplats_Bounce
00011AC2 3141 0010                                  move.w  d1,$10(a0)
00011AC6 5428 0024                                  addq.b  #2,$24(a0)
00011ACA                            
00011ACA                            ObjSplats_Bounce:
00011ACA 6100 DE64                                  bsr.w   ObjectFall
00011ACE 117C 0001 001A                             move.b  #1,$1A(a0)
00011AD4 4A68 0012                                  tst.w   $12(a0)
00011AD8 6B00                                       bmi.s   ObjSplats_Turn
00011ADA 117C 0000 001A                             move.b  #0,$1A(a0)
00011AE0 6100 0000                                  bsr.w   ObjFloorDist
00011AE4 4A41                                       tst.w   d1
00011AE6 6A00                                       bpl.s   ObjSplats_Turn
00011AE8 3011                                       move.w  (a1),d0
00011AEA 0240 03FF                                  andi.w  #$3FF,d0
00011AEE 0C40 02D2                                  cmpi.w  #$2D2,d0
00011AF2 6500                                       bcs.s   ObjSplats_Fall
00011AF4 5428 0024                                  addq.b  #2,$24(a0)
00011AF8 6000                                       bra.s   ObjSplats_Turn
00011AFA                            ; ---------------------------------------------------------------------------
00011AFA                            
00011AFA                            ObjSplats_Fall:
00011AFA D368 000C                                  add.w   d1,$C(a0)
00011AFE 317C FC00 0012                             move.w  #$FC00,$12(a0)
00011B04                            
00011B04                            ObjSplats_Turn:
00011B04 6100 0000                                  bsr.w   Yad_ChkWall
00011B08 6700                                       beq.s   loc_D2C4
00011B0A 4468 0010                                  neg.w   $10(a0)
00011B0E 0868 0000 0001                             bchg    #0,1(a0)
00011B14 0868 0000 0022                             bchg    #0,$22(a0)
00011B1A                            
00011B1A                            loc_D2C4:
00011B1A 6000 FDD6                                  bra.w   RememberState
00011B1E                            ; ---------------------------------------------------------------------------
00011B1E                            
00011B1E                            loc_D2C8:
00011B1E 6100 DE10                                  bsr.w   ObjectFall
00011B22 6100 DE58                                  bsr.w   DisplaySprite
00011B26 4A28 0001                                  tst.b   1(a0)
00011B2A 6A00 DE90                                  bpl.w   DeleteObject
00011B2E 4E75                                       rts
00011B2E 4E75                                       rts
00011B30                            Map_Splats:	include	"_maps\Splats.asm"
00011B30 0000                       Map_Splats_internal:     dc.w unk_D310-*
00011B32 0000                                       dc.w unk_D31B-Map_Splats_internal
00011B34 02                         unk_D310:       dc.b   2
00011B35 EC0B 0000 F40C 0800 0CF4                   dc.b $EC, $B, 0, 0, $F4, $C, 8, 0, $C, $F4
00011B3F 02                         unk_D31B:       dc.b   2
00011B40 EC0B 000F F40C 0400 1BFB                   dc.b $EC, $B, 0, $F, $F4, $C, 4, 0, $1B, $FB
00011B40 EC0B 000F F40C 0400 1BFB                   dc.b $EC, $B, 0, $F, $F4, $C, 4, 0, $1B, $FB
00011B4A                            
00011B4A                            		include	"_incObj\50 Yadrin.asm"
00011B4A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00011B4A                            
00011B4A                            
00011B4A                            Yad_ChkWall:
00011B4A 3038 FE04                  		move.w	(v_framecount).w,d0
00011B4E D047                       		add.w	d7,d0
00011B50 0240 0003                  		andi.w	#3,d0
00011B54 6600                       		bne.s	loc_F836
00011B56 7600                       		moveq	#0,d3
00011B58 1628 0014                  		move.b	obActWid(a0),d3
00011B5C 4A68 0010                  		tst.w	obVelX(a0)
00011B60 6B00                       		bmi.s	loc_F82C
00011B62 6100 0000                  		bsr.w	ObjHitWallRight
00011B66 4A41                       		tst.w	d1
00011B68 6A00                       		bpl.s	loc_F836
00011B6A                            
00011B6A                            loc_F828:
00011B6A 7001                       		moveq	#1,d0
00011B6C 4E75                       		rts	
00011B6E                            ; ===========================================================================
00011B6E                            
00011B6E                            loc_F82C:
00011B6E 4643                       		not.w	d3
00011B70 6100 0000                  		bsr.w	ObjHitWallLeft
00011B74 4A41                       		tst.w	d1
00011B76 6BF2                       		bmi.s	loc_F828
00011B78                            
00011B78                            loc_F836:
00011B78 7000                       		moveq	#0,d0
00011B7A 4E75                       		rts	
00011B7C                            ; End of function Yad_ChkWall
00011B7C                            
00011B7C                            ; ===========================================================================
00011B7C                            ; ---------------------------------------------------------------------------
00011B7C                            ; Object 50 - Yadrin enemy (SYZ)
00011B7C                            ; ---------------------------------------------------------------------------
00011B7C                            
00011B7C                            Yadrin:
00011B7C 7000                       		moveq	#0,d0
00011B7E 1028 0024                  		move.b	obRoutine(a0),d0
00011B82 323B 0000                  		move.w	Yad_Index(pc,d0.w),d1
00011B86 4EFB 1000                  		jmp	Yad_Index(pc,d1.w)
00011B8A                            ; ===========================================================================
00011B8A 0000                       Yad_Index:	dc.w Yad_Main-Yad_Index
00011B8C 0000                       		dc.w Yad_Action-Yad_Index
00011B8E                            
00011B8E =00000030                  yad_timedelay:	equ $30
00011B8E                            ; ===========================================================================
00011B8E                            
00011B8E                            Yad_Main:	; Routine 0
00011B8E 217C 0000 0000 0004        		move.l	#Map_Yad,obMap(a0)
00011B96 317C 247B 0002             		move.w	#$247B,obGfx(a0)
00011B9C 117C 0004 0001             		move.b	#4,obRender(a0)
00011BA2 317C 0200 0018             		move.w	#$200,obPriority(a0)
00011BA8 117C 0014 0014             		move.b	#$14,obActWid(a0)
00011BAE 117C 0011 0016             		move.b	#$11,obHeight(a0)
00011BB4 117C 0008 0017             		move.b	#8,obWidth(a0)
00011BBA 117C 00CC 0020             		move.b	#$CC,obColType(a0)
00011BC0 6100 DD6E                  		bsr.w	ObjectFall
00011BC4 6100 0000                  		bsr.w	ObjFloorDist
00011BC8 4A41                       		tst.w	d1
00011BCA 6A00                       		bpl.s	locret_F89E
00011BCC D368 000C                  		add.w	d1,obY(a0)	; match	object's position with the floor
00011BD0 317C 0000 0012             		move.w	#0,obVelY(a0)
00011BD6 5428 0024                  		addq.b	#2,obRoutine(a0)
00011BDA 0868 0000 0022             		bchg	#0,obStatus(a0)
00011BE0                            
00011BE0                            	locret_F89E:
00011BE0 4E75                       		rts	
00011BE2                            ; ===========================================================================
00011BE2                            
00011BE2                            Yad_Action:	; Routine 2
00011BE2 7000                       		moveq	#0,d0
00011BE4 1028 0025                  		move.b	ob2ndRout(a0),d0
00011BE8 323B 0000                  		move.w	Yad_Index2(pc,d0.w),d1
00011BEC 4EBB 1000                  		jsr	Yad_Index2(pc,d1.w)
00011BF0 43F9 0000 0000             		lea	(Ani_Yad).l,a1
00011BF6 6100 AE30                  		bsr.w	AnimateSprite
00011BFA 6000 FCF6                  		bra.w	RememberState
00011BFE                            ; ===========================================================================
00011BFE 0000                       Yad_Index2:	dc.w Yad_Move-Yad_Index2
00011C00 0000                       		dc.w Yad_FixToFloor-Yad_Index2
00011C02                            ; ===========================================================================
00011C02                            
00011C02                            Yad_Move:
00011C02 5368 0030                  		subq.w	#1,yad_timedelay(a0) ; subtract 1 from pause time
00011C06 6A00                       		bpl.s	locret_F8E2	; if time remains, branch
00011C08 5428 0025                  		addq.b	#2,ob2ndRout(a0)
00011C0C 317C FF00 0010             		move.w	#-$100,obVelX(a0) ; move object
00011C12 117C 0001 001C             		move.b	#1,obAnim(a0)
00011C18 0868 0000 0022             		bchg	#0,obStatus(a0)
00011C1E 6600                       		bne.s	locret_F8E2
00011C20 4468 0010                  		neg.w	obVelX(a0)	; change direction
00011C24                            
00011C24                            	locret_F8E2:
00011C24 4E75                       		rts	
00011C26                            ; ===========================================================================
00011C26                            
00011C26                            Yad_FixToFloor:
00011C26 6100 DD40                  		bsr.w	SpeedToPos
00011C2A 6100 0000                  		bsr.w	ObjFloorDist
00011C2E 0C41 FFF8                  		cmpi.w	#-8,d1
00011C32 6D00                       		blt.s	Yad_Pause
00011C34 0C41 000C                  		cmpi.w	#$C,d1
00011C38 6C00                       		bge.s	Yad_Pause
00011C3A D368 000C                  		add.w	d1,obY(a0)	; match	object's position to the floor
00011C3E 6100 FF0A                  		bsr.w	Yad_ChkWall
00011C42 6600                       		bne.s	Yad_Pause
00011C44 4E75                       		rts	
00011C46                            ; ===========================================================================
00011C46                            
00011C46                            Yad_Pause:
00011C46 5528 0025                  		subq.b	#2,ob2ndRout(a0)
00011C4A 317C 003B 0030             		move.w	#59,yad_timedelay(a0) ; set pause time to 1 second
00011C50 317C 0000 0010             		move.w	#0,obVelX(a0)
00011C56 117C 0000 001C             		move.b	#0,obAnim(a0)
00011C5C 4E75                       		rts	
00011C5C 4E75                       		rts	
00011C5E                            		include	"_anim\Yadrin.asm"
00011C5E                            ; ---------------------------------------------------------------------------
00011C5E                            ; Animation script - Yadrin enemy
00011C5E                            ; ---------------------------------------------------------------------------
00011C5E 0000                       Ani_Yad:	dc.w @stand-Ani_Yad
00011C60 0000                       		dc.w @walk-Ani_Yad
00011C62                            
00011C62 0800 FF                    @stand:		dc.b 8,	0, afEnd
00011C66 00                         		even
00011C66 0800 0002 0000 0101 0103+  @walk:		dc.b 8, 0, 0, 2, 0, 0, 1, 1, 1, 3, 1, 1, 1, afEnd
00011C74                            		even
00011C74                            		even
00011C74                            Map_Yad:	include	"_maps\Yadrin.asm"
00011C74                            ; --------------------------------------------------------------------------------
00011C74                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
00011C74                            ; --------------------------------------------------------------------------------
00011C74                            
00011C74                            SME_4WhIu:	
00011C74 0000 0000                  		dc.w SME_4WhIu_C-SME_4WhIu, SME_4WhIu_3A-SME_4WhIu	
00011C78 0000 0000                  		dc.w SME_4WhIu_68-SME_4WhIu, SME_4WhIu_A5-SME_4WhIu	
00011C7C 0000 0000                  		dc.w SME_4WhIu_E2-SME_4WhIu, SME_4WhIu_FC-SME_4WhIu	
00011C80 09                         SME_4WhIu_C:	dc.b 9	
00011C81 F308 6000 F4               		dc.b $F3, 8, $60, 0, $F4	
00011C86 EB04 600F FC               		dc.b $EB, 4, $60, $F, $FC	
00011C8B 0309 6031 FC               		dc.b 3, 9, $60, $31, $FC	
00011C90 FB06 6003 EC               		dc.b $FB, 6, $60, 3, $EC	
00011C95 FB00 6009 FC               		dc.b $FB, 0, $60, 9, $FC	
00011C9A FB00 600C 04               		dc.b $FB, 0, $60, $C, 4	
00011C9F FB00 6012 0C               		dc.b $FB, 0, $60, $12, $C	
00011CA4 F300 600A EC               		dc.b $F3, 0, $60, $A, $EC	
00011CA9 EB00 600D F4               		dc.b $EB, 0, $60, $D, $F4	
00011CAE 09                         SME_4WhIu_3A:	dc.b 9	
00011CAF F308 6037 EC               		dc.b $F3, 8, $60, $37, $EC	
00011CB4 FB00 6012 0C               		dc.b $FB, 0, $60, $12, $C	
00011CB9 FB06 6003 EC               		dc.b $FB, 6, $60, 3, $EC	
00011CBE FB00 6009 FC               		dc.b $FB, 0, $60, 9, $FC	
00011CC3 FB00 600C 04               		dc.b $FB, 0, $60, $C, 4	
00011CC8 0309 6031 FC               		dc.b 3, 9, $60, $31, $FC	
00011CCD F300 603A 04               		dc.b $F3, 0, $60, $3A, 4	
00011CD2 EB04 603B F4               		dc.b $EB, 4, $60, $3B, $F4	
00011CD7 EB00 6022 04               		dc.b $EB, 0, $60, $22, 4	
00011CDC 0C                         SME_4WhIu_68:	dc.b $C	
00011CDD EB04 600F FC               		dc.b $EB, 4, $60, $F, $FC	
00011CE2 FB00 601D FC               		dc.b $FB, 0, $60, $1D, $FC	
00011CE7 FB00 6020 04               		dc.b $FB, 0, $60, $20, 4	
00011CEC 0309 6031 FC               		dc.b 3, 9, $60, $31, $FC	
00011CF1 FB00 6012 0C               		dc.b $FB, 0, $60, $12, $C	
00011CF6 F300 600A EC               		dc.b $F3, 0, $60, $A, $EC	
00011CFB EB00 600D F4               		dc.b $EB, 0, $60, $D, $F4	
00011D00 FB01 6017 EC               		dc.b $FB, 1, $60, $17, $EC	
00011D05 FB01 601A F4               		dc.b $FB, 1, $60, $1A, $F4	
00011D0A F308 6000 F4               		dc.b $F3, 8, $60, 0, $F4	
00011D0F 0B00 6008 F4               		dc.b $B, 0, $60, 8, $F4	
00011D14 0B00 6005 EC               		dc.b $B, 0, $60, 5, $EC	
00011D19 0C                         SME_4WhIu_A5:	dc.b $C	
00011D1A F308 6037 EC               		dc.b $F3, 8, $60, $37, $EC	
00011D1F FB00 6012 0C               		dc.b $FB, 0, $60, $12, $C	
00011D24 FB00 6009 FC               		dc.b $FB, 0, $60, 9, $FC	
00011D29 FB00 600C 04               		dc.b $FB, 0, $60, $C, 4	
00011D2E 0309 6031 FC               		dc.b 3, 9, $60, $31, $FC	
00011D33 F300 603A 04               		dc.b $F3, 0, $60, $3A, 4	
00011D38 EB04 603B F4               		dc.b $EB, 4, $60, $3B, $F4	
00011D3D EB00 6022 04               		dc.b $EB, 0, $60, $22, 4	
00011D42 FB01 6017 EC               		dc.b $FB, 1, $60, $17, $EC	
00011D47 FB01 601A F4               		dc.b $FB, 1, $60, $1A, $F4	
00011D4C 0B00 6005 EC               		dc.b $B, 0, $60, 5, $EC	
00011D51 0B00 6008 F4               		dc.b $B, 0, $60, 8, $F4	
00011D56 05                         SME_4WhIu_E2:	dc.b 5	
00011D57 F409 0023 F4               		dc.b $F4, 9, 0, $23, $F4	
00011D5C 040D 0029 EC               		dc.b 4, $D, 0, $29, $EC	
00011D61 EC04 000F FC               		dc.b $EC, 4, 0, $F, $FC	
00011D66 F402 0011 0C               		dc.b $F4, 2, 0, $11, $C	
00011D6B 0409 0031 FC               		dc.b 4, 9, 0, $31, $FC	
00011D70 05                         SME_4WhIu_FC:	dc.b 5	
00011D71 F409 0023 F4               		dc.b $F4, 9, 0, $23, $F4	
00011D76 040D 0029 EC               		dc.b 4, $D, 0, $29, $EC	
00011D7B EC04 000F FC               		dc.b $EC, 4, 0, $F, $FC	
00011D80 F402 0011 0C               		dc.b $F4, 2, 0, $11, $C	
00011D85 0409 0037 FC               		dc.b 4, 9, 0, $37, $FC	
00011D8A                            		even
00011D8A                            		even
00011D8A                            
00011D8A                            		include	"_incObj\sub SolidObject.asm"
00011D8A                            ; ---------------------------------------------------------------------------
00011D8A                            ; Solid	object subroutine (includes spikes, blocks, rocks etc)
00011D8A                            ;
00011D8A                            ; input:
00011D8A                            ;	d1 = width
00011D8A                            ;	d2 = height / 2 (when jumping)
00011D8A                            ;	d3 = height / 2 (when walking)
00011D8A                            ;	d4 = x-axis position
00011D8A                            ; ---------------------------------------------------------------------------
00011D8A                            
00011D8A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00011D8A                            
00011D8A                            
00011D8A                            SolidObject:
00011D8A 4A28 0025                  		tst.b	obSolid(a0)	; is Sonic standing on the object?
00011D8E 6700 0000                  		beq.w	Solid_ChkEnter	; if not, branch
00011D92 3401                       		move.w	d1,d2
00011D94 D442                       		add.w	d2,d2
00011D96 43F8 D000                  		lea	(v_player).w,a1
00011D9A 0829 0001 0022             		btst	#1,obStatus(a1)	; is Sonic in the air?
00011DA0 6600                       		bne.s	@leave		; if yes, branch
00011DA2 3029 0008                  		move.w	obX(a1),d0
00011DA6 9068 0008                  		sub.w	obX(a0),d0
00011DAA D041                       		add.w	d1,d0
00011DAC 6B00                       		bmi.s	@leave		; if Sonic moves off the left, branch
00011DAE B042                       		cmp.w	d2,d0		; has Sonic moved off the right?
00011DB0 6500                       		bcs.s	@stand		; if not, branch
00011DB2                            
00011DB2                            	@leave:
00011DB2 08A9 0003 0022             		bclr	#3,obStatus(a1)	; clear Sonic's standing flag
00011DB8 08A8 0003 0022             		bclr	#3,obStatus(a0)	; clear object's standing flag
00011DBE 4228 0025                  		clr.b	obSolid(a0)
00011DC2 7800                       		moveq	#0,d4
00011DC4 4E75                       		rts	
00011DC6                            
00011DC6                            	@stand:
00011DC6 3404                       		move.w	d4,d2
00011DC8 4EB9 0000 975C             		jsr	MvSonicOnPtfm
00011DCE 7800                       		moveq	#0,d4
00011DD0 4E75                       		rts	
00011DD2                            ; ===========================================================================
00011DD2                            
00011DD2                            SolidObject71:
00011DD2 4A28 0025                  		tst.b	obSolid(a0)
00011DD6 6700 0000                  		beq.w	loc_FAD0
00011DDA 3401                       		move.w	d1,d2
00011DDC D442                       		add.w	d2,d2
00011DDE 43F8 D000                  		lea	(v_player).w,a1
00011DE2 0829 0001 0022             		btst	#1,obStatus(a1)
00011DE8 6600                       		bne.s	@leave
00011DEA 3029 0008                  		move.w	obX(a1),d0
00011DEE 9068 0008                  		sub.w	obX(a0),d0
00011DF2 D041                       		add.w	d1,d0
00011DF4 6B00                       		bmi.s	@leave
00011DF6 B042                       		cmp.w	d2,d0
00011DF8 6500                       		bcs.s	@stand
00011DFA                            
00011DFA                            	@leave:
00011DFA 08A9 0003 0022             		bclr	#3,obStatus(a1)
00011E00 08A8 0003 0022             		bclr	#3,obStatus(a0)
00011E06 4228 0025                  		clr.b	obSolid(a0)
00011E0A 7800                       		moveq	#0,d4
00011E0C 4E75                       		rts	
00011E0E                            
00011E0E                            	@stand:
00011E0E 3404                       		move.w	d4,d2
00011E10 4EB9 0000 975C             		jsr	MvSonicOnPtfm
00011E16 7800                       		moveq	#0,d4
00011E18 4E75                       		rts	
00011E1A                            ; ===========================================================================
00011E1A                            
00011E1A                            SolidObject2F:
00011E1A 43F8 D000                  		lea	(v_player).w,a1
00011E1E 4A28 0001                  		tst.b	obRender(a0)
00011E22 6A00 0000                  		bpl.w	Solid_Ignore
00011E26 3029 0008                  		move.w	obX(a1),d0
00011E2A 9068 0008                  		sub.w	obX(a0),d0
00011E2E D041                       		add.w	d1,d0
00011E30 6B00 0000                  		bmi.w	Solid_Ignore
00011E34 3601                       		move.w	d1,d3
00011E36 D643                       		add.w	d3,d3
00011E38 B043                       		cmp.w	d3,d0
00011E3A 6200 0000                  		bhi.w	Solid_Ignore
00011E3E 3A00                       		move.w	d0,d5
00011E40 0828 0000 0001             		btst	#0,obRender(a0)	; is object horizontally flipped?
00011E46 6700                       		beq.s	@notflipped	; if not, branch
00011E48 4645                       		not.w	d5
00011E4A DA43                       		add.w	d3,d5
00011E4C                            
00011E4C                            	@notflipped:
00011E4C E24D                       		lsr.w	#1,d5
00011E4E 7600                       		moveq	#0,d3
00011E50 1632 5000                  		move.b	(a2,d5.w),d3
00011E54 9612                       		sub.b	(a2),d3
00011E56 3A28 000C                  		move.w	obY(a0),d5
00011E5A 9A43                       		sub.w	d3,d5
00011E5C 1629 0016                  		move.b	obHeight(a1),d3
00011E60 4883                       		ext.w	d3
00011E62 D443                       		add.w	d3,d2
00011E64 3629 000C                  		move.w	obY(a1),d3
00011E68 9645                       		sub.w	d5,d3
00011E6A 5843                       		addq.w	#4,d3
00011E6C D642                       		add.w	d2,d3
00011E6E 6B00 0000                  		bmi.w	Solid_Ignore
00011E72 3802                       		move.w	d2,d4
00011E74 D844                       		add.w	d4,d4
00011E76 B644                       		cmp.w	d4,d3
00011E78 6400 0000                  		bcc.w	Solid_Ignore
00011E7C 6000 0000                  		bra.w	loc_FB0E
00011E80                            ; ===========================================================================
00011E80                            
00011E80                            Solid_ChkEnter:
00011E80 4A28 0001                  		tst.b	obRender(a0)
00011E84 6A00 0000                  		bpl.w	Solid_Ignore
00011E88                            
00011E88                            loc_FAD0:
00011E88 43F8 D000                  		lea	(v_player).w,a1
00011E8C 3029 0008                  		move.w	obX(a1),d0
00011E90 9068 0008                  		sub.w	obX(a0),d0
00011E94 D041                       		add.w	d1,d0
00011E96 6B00 0000                  		bmi.w	Solid_Ignore	; if Sonic moves off the left, branch
00011E9A 3601                       		move.w	d1,d3
00011E9C D643                       		add.w	d3,d3
00011E9E B043                       		cmp.w	d3,d0		; has Sonic moved off the right?
00011EA0 6200 0000                  		bhi.w	Solid_Ignore	; if yes, branch
00011EA4 1629 0016                  		move.b	obHeight(a1),d3
00011EA8 4883                       		ext.w	d3
00011EAA D443                       		add.w	d3,d2
00011EAC 3629 000C                  		move.w	obY(a1),d3
00011EB0 9668 000C                  		sub.w	obY(a0),d3
00011EB4 5843                       		addq.w	#4,d3
00011EB6 D642                       		add.w	d2,d3
00011EB8 6B00 0000                  		bmi.w	Solid_Ignore	; if Sonic moves above, branch
00011EBC 3802                       		move.w	d2,d4
00011EBE D844                       		add.w	d4,d4
00011EC0 B644                       		cmp.w	d4,d3		; has Sonic moved below?
00011EC2 6400 0000                  		bcc.w	Solid_Ignore	; if yes, branch
00011EC6                            
00011EC6                            loc_FB0E:
00011EC6 4A38 F7C8                  		tst.b	(f_lockmulti).w	; are controls locked?
00011ECA 6B00 0000                  		bmi.w	Solid_Ignore	; if yes, branch
00011ECE 0C38 0006 D024             		cmpi.b	#6,(v_player+obRoutine).w ; is Sonic dying?
00011ED4 6400 0000                  			bcc.w	Solid_Debug
00011ED8 4A78 FE08                  		tst.w	(v_debuguse).w	; is debug mode being used?
00011EDC 6600 0000                  		bne.w	Solid_Debug	; if yes, branch
00011EE0 3A00                       		move.w	d0,d5
00011EE2 B240                       		cmp.w	d0,d1		; is Sonic right of centre of object?
00011EE4 6400                       		bcc.s	@isright	; if yes, branch
00011EE6 D241                       		add.w	d1,d1
00011EE8 9041                       		sub.w	d1,d0
00011EEA 3A00                       		move.w	d0,d5
00011EEC 4445                       		neg.w	d5
00011EEE                            
00011EEE                            	@isright:
00011EEE 3203                       		move.w	d3,d1
00011EF0 B443                       		cmp.w	d3,d2		; is Sonic below centre of object?
00011EF2 6400                       		bcc.s	@isbelow	; if yes, branch
00011EF4                            
00011EF4 5943                       		subq.w	#4,d3
00011EF6 9644                       		sub.w	d4,d3
00011EF8 3203                       		move.w	d3,d1
00011EFA 4441                       		neg.w	d1
00011EFC                            
00011EFC                            	@isbelow:
00011EFC BA41                       		cmp.w	d1,d5
00011EFE 6200 0000                  		bhi.w	Solid_TopBottom	; if Sonic hits top or bottom, branch
00011F02 0C41 0004                  		cmpi.w	#4,d1
00011F06 6300                       		bls.s	Solid_SideAir
00011F08 4A40                       		tst.w	d0		; where is Sonic?
00011F0A 6700                       		beq.s	Solid_Centre	; if inside the object, branch
00011F0C 6B00                       		bmi.s	Solid_Right	; if right of the object, branch
00011F0E 4A69 0010                  		tst.w	obVelX(a1)	; is Sonic moving left?
00011F12 6B00                       		bmi.s	Solid_Centre	; if yes, branch
00011F14 6000                       		bra.s	Solid_Left
00011F16                            ; ===========================================================================
00011F16                            
00011F16                            Solid_Right:
00011F16 4A69 0010                  		tst.w	obVelX(a1)	; is Sonic moving right?
00011F1A 6A00                       		bpl.s	Solid_Centre	; if yes, branch
00011F1C                            
00011F1C                            Solid_Left:
00011F1C 337C 0000 0020             		move.w	#0,obInertia(a1)
00011F22 337C 0000 0010             		move.w	#0,obVelX(a1)	; stop Sonic moving
00011F28                            
00011F28                            Solid_Centre:
00011F28 9169 0008                  		sub.w	d0,obX(a1)	; correct Sonic's position
00011F2C 0829 0001 0022             		btst	#1,obStatus(a1)	; is Sonic in the air?
00011F32 6600                       		bne.s	Solid_SideAir	; if yes, branch
00011F34 08E9 0005 0022             		bset	#5,obStatus(a1)	; make Sonic push object
00011F3A 08E8 0005 0022             		bset	#5,obStatus(a0)	; make object be pushed
00011F40 7801                       		moveq	#1,d4		; return side collision
00011F42 4E75                       		rts	
00011F44                            ; ===========================================================================
00011F44                            
00011F44                            Solid_SideAir:
00011F44 6100                       		bsr.s	Solid_NotPushing
00011F46 7801                       		moveq	#1,d4		; return side collision
00011F48 4E75                       		rts	
00011F4A                            ; ===========================================================================
00011F4A                            
00011F4A                            Solid_Ignore:
00011F4A 0828 0005 0022             		btst	#5,obStatus(a0)	; is Sonic pushing?
00011F50 6700                       		beq.s	Solid_Debug	; if not, branch
00011F52 0C29 0000 001C             		cmpi.b	#id_Roll,obAnim(a1)	; is Sonic in his jumping/rolling animation?
00011F58 6700                       		beq.s	Solid_NotPushing	; if so, branch
00011F5A 0C29 0000 001C             		cmpi.b	#id_Drown,obAnim(a1)	; is Sonic in his drowning animation?
00011F60 6700                       		beq.s	Solid_NotPushing	; if so, branch
00011F62 0C29 0000 001C             		cmpi.b	#id_Hurt,obAnim(a1)	; is Sonic in his hurt animation?
00011F68 6700                       		beq.s	Solid_NotPushing	; if so, branch
00011F6A 337C 0000 001C             		move.w	#id_Run,obAnim(a1) ; use running animation
00011F70                            
00011F70                            
00011F70                            Solid_NotPushing:
00011F70 08A8 0005 0022             		bclr	#5,obStatus(a0)	; clear pushing flag
00011F76 08A9 0005 0022             		bclr	#5,obStatus(a1)	; clear Sonic's pushing flag
00011F7C                            
00011F7C                            Solid_Debug:
00011F7C 7800                       		moveq	#0,d4		; return no collision
00011F7E 4E75                       		rts	
00011F80                            ; ===========================================================================
00011F80                            
00011F80                            Solid_TopBottom:
00011F80 4A43                       		tst.w	d3		; is Sonic below the object?
00011F82 6B00                       		bmi.s	Solid_Below	; if yes, branch
00011F84 0C43 0010                  		cmpi.w	#$10,d3		; has Sonic landed on the object?
00011F88 6500                       		bcs.s	Solid_Landed	; if yes, branch
00011F8A 60BE                       		bra.s	Solid_Ignore
00011F8C                            ; ===========================================================================
00011F8C                            
00011F8C                            Solid_Below:
00011F8C 4A69 0012                  		tst.w	obVelY(a1)	; is Sonic moving vertically?
00011F90 6700                       		beq.s	Solid_Squash	; if not, branch
00011F92 6A00                       		bpl.s	Solid_TopBtmAir	; if moving downwards, branch
00011F94 4A43                       		tst.w	d3		; is Sonic above the object?
00011F96 6A00                       		bpl.s	Solid_TopBtmAir	; if yes, branch
00011F98 9769 000C                  		sub.w	d3,obY(a1)	; correct Sonic's position
00011F9C 337C 0000 0012             		move.w	#0,obVelY(a1)	; stop Sonic moving
00011FA2                            
00011FA2                            Solid_TopBtmAir:
00011FA2 78FF                       		moveq	#-1,d4
00011FA4 4E75                       		rts	
00011FA6                            ; ===========================================================================
00011FA6                            
00011FA6                            Solid_Squash:
00011FA6 0829 0001 0022             		btst	#1,obStatus(a1)	; is Sonic in the air?
00011FAC 66F4                       		bne.s	Solid_TopBtmAir	; if yes, branch
00011FAE 2F08                       		move.l	a0,-(sp)
00011FB0 2049                       		movea.l	a1,a0
00011FB2 4EB9 0000 0000             		jsr	(KillSonic).l	; kill Sonic
00011FB8 205F                       		movea.l	(sp)+,a0
00011FBA 78FF                       		moveq	#-1,d4
00011FBC 4E75                       		rts	
00011FBE                            ; ===========================================================================
00011FBE                            
00011FBE                            Solid_Landed:
00011FBE 5943                       		subq.w	#4,d3
00011FC0 7200                       		moveq	#0,d1
00011FC2 1228 0014                  		move.b	obActWid(a0),d1
00011FC6 3401                       		move.w	d1,d2
00011FC8 D442                       		add.w	d2,d2
00011FCA D269 0008                  		add.w	obX(a1),d1
00011FCE 9268 0008                  		sub.w	obX(a0),d1
00011FD2 6B00                       		bmi.s	Solid_Miss	; if Sonic is right of object, branch
00011FD4 B242                       		cmp.w	d2,d1		; is Sonic left of object?
00011FD6 6400                       		bcc.s	Solid_Miss	; if yes, branch
00011FD8 4A69 0012                  		tst.w	obVelY(a1)	; is Sonic moving upwards?
00011FDC 6B00                       		bmi.s	Solid_Miss	; if yes, branch
00011FDE 9769 000C                  		sub.w	d3,obY(a1)	; correct Sonic's position
00011FE2 5369 000C                  		subq.w	#1,obY(a1)
00011FE6 6100                       		bsr.s	Solid_ResetFloor
00011FE8 117C 0002 0025             		move.b	#2,obSolid(a0) ; set standing flags
00011FEE 08E8 0003 0022             		bset	#3,obStatus(a0)
00011FF4 78FF                       		moveq	#-1,d4		; return top/bottom collision
00011FF6 4E75                       		rts	
00011FF8                            ; ===========================================================================
00011FF8                            
00011FF8                            Solid_Miss:
00011FF8 7800                       		moveq	#0,d4
00011FFA 4E75                       		rts	
00011FFC                            ; End of function SolidObject
00011FFC                            
00011FFC                            
00011FFC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00011FFC                            
00011FFC                            
00011FFC                            Solid_ResetFloor:
00011FFC 0829 0003 0022             		btst	#3,obStatus(a1)	; is Sonic standing on something?
00012002 6700                       		beq.s	@notonobj	; if not, branch
00012004                            
00012004 7000                       		moveq	#0,d0
00012006 1029 003D                  		move.b	$3D(a1),d0	; get object being stood on
0001200A ED48                       		lsl.w	#6,d0
0001200C 0680 00FF D000             		addi.l	#(v_objspace&$FFFFFF),d0
00012012 2440                       		movea.l	d0,a2
00012014 08AA 0003 0022             		bclr	#3,obStatus(a2)	; clear object's standing flags
0001201A 422A 0025                  		clr.b	obSolid(a2)
0001201E                            
0001201E                            	@notonobj:
0001201E 3008                       		move.w	a0,d0
00012020 0440 D000                  		subi.w	#$D000,d0
00012024 EC48                       		lsr.w	#6,d0
00012026 0240 007F                  		andi.w	#$7F,d0
0001202A 1340 003D                  		move.b	d0,$3D(a1)	; set object being stood on
0001202E 137C 0000 0026             		move.b	#0,obAngle(a1)	; clear Sonic's angle
00012034 337C 0000 0012             		move.w	#0,obVelY(a1)	; stop Sonic
0001203A 3369 0010 0020             		move.w	obVelX(a1),obInertia(a1)
00012040 0829 0001 0022             		btst	#1,obStatus(a1)	; is Sonic in the air?
00012046 6700                       		beq.s	@notinair	; if not, branch
00012048 2F08                       		move.l	a0,-(sp)
0001204A 2049                       		movea.l	a1,a0
0001204C 4EB9 0000 0000             		jsr	(Sonic_ResetOnFloor).l ; reset Sonic as if on floor
00012052 205F                       		movea.l	(sp)+,a0
00012054                            
00012054                            	@notinair:
00012054 08E9 0003 0022             		bset	#3,obStatus(a1)	; set object standing flag
0001205A 08E8 0003 0022             		bset	#3,obStatus(a0)	; set Sonic standing on object flag
00012060 4E75                       		rts	
00012062                            ; End of function Solid_ResetFloor
00012062                            ; End of function Solid_ResetFloor
00012062                            
00012062                            		include	"_incObj\51 Smashable Green Block.asm"
00012062                            ; ---------------------------------------------------------------------------
00012062                            ; Object 51 - smashable	green block (MZ)
00012062                            ; ---------------------------------------------------------------------------
00012062                            
00012062                            SmashBlock:
00012062 7000                       		moveq	#0,d0
00012064 1028 0024                  		move.b	obRoutine(a0),d0
00012068 323B 0000                  		move.w	Smab_Index(pc,d0.w),d1
0001206C 4EBB 1000                  		jsr	Smab_Index(pc,d1.w)
00012070 6000 F880                  		bra.w	RememberState
00012074                            ; ===========================================================================
00012074 0000                       Smab_Index:	dc.w Smab_Main-Smab_Index
00012076 0000                       		dc.w Smab_Solid-Smab_Index
00012078 0000                       		dc.w Smab_Points-Smab_Index
0001207A                            ; ===========================================================================
0001207A                            
0001207A                            Smab_Main:	; Routine 0
0001207A 5428 0024                  		addq.b	#2,obRoutine(a0)
0001207E 217C 0000 0000 0004        		move.l	#Map_Smab,obMap(a0)
00012086 317C 42B8 0002             		move.w	#$42B8,obGfx(a0)
0001208C 117C 0004 0001             		move.b	#4,obRender(a0)
00012092 117C 0010 0014             		move.b	#$10,obActWid(a0)
00012098 317C 0200 0018             		move.w	#$200,obPriority(a0)
0001209E 1168 0028 001A             		move.b	obSubtype(a0),obFrame(a0)
000120A4                            
000120A4                            Smab_Solid:	; Routine 2
000120A4                            
000120A4 =00000032                  sonicAniFrame:	equ $32		; Sonic's current animation number
000120A4 =00000034                  @count:		equ $34		; number of blocks hit + previous stuff
000120A4                            
000120A4 3178 F7D0 0034             		move.w	(v_itembonus).w,$34(a0)
000120AA 1178 D01C 0032             		move.b	(v_player+obAnim).w,sonicAniFrame(a0) ; load Sonic's animation number
000120B0 323C 001B                  		move.w	#$1B,d1
000120B4 343C 0010                  		move.w	#$10,d2
000120B8 363C 0011                  		move.w	#$11,d3
000120BC 3828 0008                  		move.w	obX(a0),d4
000120C0 6100 FCC8                  		bsr.w	SolidObject
000120C4 0828 0003 0022             		btst	#3,obStatus(a0)	; has Sonic landed on the block?
000120CA 6600                       		bne.s	@smash		; if yes, branch
000120CC                            
000120CC                            	@notspinning:
000120CC 4E75                       		rts	
000120CE                            ; ===========================================================================
000120CE                            
000120CE                            @smash:
000120CE 0C28 0000 0032             		cmpi.b	#id_Roll,sonicAniFrame(a0) ; is Sonic rolling/jumping?
000120D4 66F6                       		bne.s	@notspinning	; if not, branch
000120D6 31E8 0034 F7D0             		move.w	@count(a0),(v_itembonus).w
000120DC 08E9 0002 0022             		bset	#2,obStatus(a1)
000120E2 137C 000E 0016             		move.b	#$E,obHeight(a1)
000120E8 137C 0007 0017             		move.b	#7,obWidth(a1)
000120EE 137C 0000 001C             		move.b	#id_Roll,obAnim(a1) ; make Sonic roll
000120F4 337C FD00 0012             		move.w	#-$300,obVelY(a1) ; rebound Sonic
000120FA 08E9 0001 0022             		bset	#1,obStatus(a1)
00012100 08A9 0003 0022             		bclr	#3,obStatus(a1)
00012106 137C 0002 0024             		move.b	#2,obRoutine(a1)
0001210C 08A8 0003 0022             		bclr	#3,obStatus(a0)
00012112 4228 0025                  		clr.b	obSolid(a0)
00012116 117C 0001 001A             		move.b	#1,obFrame(a0)
0001211C 49F9 0000 0000             		lea	(Smab_Speeds).l,a4 ; load broken fragment speed data
00012122 7203                       		moveq	#3,d1		; set number of	fragments to 4
00012124 343C 0038                  		move.w	#$38,d2
00012128 6100 D406                  		bsr.w	SmashObject
0001212C 6100 DCDA                  		bsr.w	FindFreeObj
00012130 6600                       		bne.s	Smab_Points
00012132 12BC 0029                  		move.b	#id_Points,0(a1) ; load points object
00012136 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001213C 3368 000C 000C             		move.w	obY(a0),obY(a1)
00012142 3438 F7D0                  		move.w	(v_itembonus).w,d2
00012146 5478 F7D0                  		addq.w	#2,(v_itembonus).w ; increment bonus counter
0001214A 0C42 0006                  		cmpi.w	#6,d2		; have fewer than 3 blocks broken?
0001214E 6500                       		bcs.s	@bonus		; if yes, branch
00012150 7406                       		moveq	#6,d2		; set cap for points
00012152                            
00012152                            	@bonus:
00012152 7000                       		moveq	#0,d0
00012154 303B 2000                  		move.w	Smab_Scores(pc,d2.w),d0
00012158 0C78 0020 F7D0             		cmpi.w	#$20,(v_itembonus).w ; have 16 blocks been smashed?
0001215E 6500                       		bcs.s	@givepoints	; if not, branch
00012160 303C 03E8                  		move.w	#1000,d0	; give higher points for 16th block
00012164 740A                       		moveq	#10,d2
00012166                            
00012166                            	@givepoints:
00012166 4EB9 0000 0000             		jsr	(AddPoints).l
0001216C E24A                       		lsr.w	#1,d2
0001216E 1342 001A                  		move.b	d2,obFrame(a1)
00012172                            
00012172                            Smab_Points:	; Routine 4
00012172 6100 D7F4                  		bsr.w	SpeedToPos
00012176 0668 0038 0012             		addi.w	#$38,obVelY(a0)
0001217C 6100 D7FE                  		bsr.w	DisplaySprite
00012180 4A28 0001                  		tst.b	obRender(a0)
00012184 6A00 D836                  		bpl.w	DeleteObject
00012188 4E75                       		rts	
0001218A                            ; ===========================================================================
0001218A FE00 FE00                  Smab_Speeds:	dc.w -$200, -$200	; x-speed, y-speed
0001218E FF00 FF00                  		dc.w -$100, -$100
00012192 0200 FE00                  		dc.w $200, -$200
00012196 0100 FF00                  		dc.w $100, -$100
0001219A                            
0001219A 000A 0014 0032 0064        Smab_Scores:	dc.w 10, 20, 50, 100
0001219A 000A 0014 0032 0064        Smab_Scores:	dc.w 10, 20, 50, 100
000121A2                            Map_Smab:	include	"_maps\Smashable Green Block.asm"
000121A2                            ; ---------------------------------------------------------------------------
000121A2                            ; Sprite mappings - smashable green block (MZ)
000121A2                            ; ---------------------------------------------------------------------------
000121A2                            Map_Smab_internal:
000121A2 0000                       		dc.w @two-Map_Smab_internal
000121A4 0000                       		dc.w @four-Map_Smab_internal
000121A6 02                         @two:		dc.b 2
000121A7 F00D 0000 F0               		dc.b $F0, $D, 0, 0, $F0	; two fragments, arranged vertically
000121AC 000D 0000 F0               		dc.b 0,	$D, 0, 0, $F0
000121B1 04                         @four:		dc.b 4
000121B2 F005 8000 F0               		dc.b $F0, 5, $80, 0, $F0 ; four fragments
000121B7 0005 8000 F0               		dc.b 0,	5, $80,	0, $F0
000121BC F005 8000 00               		dc.b $F0, 5, $80, 0, 0
000121C1 0005 8000 00               		dc.b 0,	5, $80,	0, 0
000121C6                            		even
000121C6                            		even
000121C6                            
000121C6                            		include	"_incObj\52 Moving Blocks.asm"
000121C6                            ; ---------------------------------------------------------------------------
000121C6                            ; Object 52 - moving platform blocks (MZ, LZ, SBZ)
000121C6                            ; ---------------------------------------------------------------------------
000121C6                            
000121C6                            MovingBlock:
000121C6 7000                       		moveq	#0,d0
000121C8 1028 0024                  		move.b	obRoutine(a0),d0
000121CC 323B 0000                  		move.w	MBlock_Index(pc,d0.w),d1
000121D0 4EFB 1000                  		jmp	MBlock_Index(pc,d1.w)
000121D4                            ; ===========================================================================
000121D4 0000                       MBlock_Index:	dc.w MBlock_Main-MBlock_Index
000121D6 0000                       		dc.w MBlock_Platform-MBlock_Index
000121D8 0000                       		dc.w MBlock_StandOn-MBlock_Index
000121DA                            
000121DA =00000030                  mblock_origX:	equ $30
000121DA =00000032                  mblock_origY:	equ $32
000121DA                            
000121DA 1000                       MBlock_Var:	dc.b $10, 0		; object width,	frame number
000121DC 2001                       		dc.b $20, 1
000121DE 2002                       		dc.b $20, 2
000121E0 4003                       		dc.b $40, 3
000121E2 3004                       		dc.b $30, 4
000121E4                            ; ===========================================================================
000121E4                            
000121E4                            MBlock_Main:	; Routine 0
000121E4 5428 0024                  		addq.b	#2,obRoutine(a0)
000121E8 217C 0000 0000 0004        		move.l	#Map_MBlock,obMap(a0)
000121F0 317C 42B8 0002             		move.w	#$42B8,obGfx(a0)
000121F6 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w ; check if level is LZ
000121FC 6600                       		bne.s	loc_FE44
000121FE 217C 0000 0000 0004        		move.l	#Map_MBlockLZ,obMap(a0) ; LZ specific code
00012206 317C 43BC 0002             		move.w	#$43BC,obGfx(a0)
0001220C 117C 0007 0016             		move.b	#7,obHeight(a0)
00012212                            
00012212                            loc_FE44:
00012212 0C38 0005 FE10             		cmpi.b	#id_SBZ,(v_zone).w ; check if level is SBZ
00012218 6600                       		bne.s	loc_FE60
0001221A 317C 22C0 0002             		move.w	#$22C0,obGfx(a0) ; SBZ specific code (object 5228)
00012220 0C28 0028 0028             		cmpi.b	#$28,obSubtype(a0) ; is object 5228 ?
00012226 6700                       		beq.s	loc_FE60	; if yes, branch
00012228 317C 4460 0002             		move.w	#$4460,obGfx(a0) ; SBZ specific code (object 523x)
0001222E                            
0001222E                            loc_FE60:
0001222E 117C 0004 0001             		move.b	#4,obRender(a0)
00012234 7000                       		moveq	#0,d0
00012236 1028 0028                  		move.b	obSubtype(a0),d0
0001223A E648                       		lsr.w	#3,d0
0001223C 0240 001E                  		andi.w	#$1E,d0
00012240 45FB 0098                  		lea	MBlock_Var(pc,d0.w),a2
00012244 115A 0014                  		move.b	(a2)+,obActWid(a0)
00012248 115A 001A                  		move.b	(a2)+,obFrame(a0)
0001224C 317C 0200 0018             		move.w	#$200,obPriority(a0)
00012252 3168 0008 0030             		move.w	obX(a0),mblock_origX(a0)
00012258 3168 000C 0032             		move.w	obY(a0),mblock_origY(a0)
0001225E 0228 000F 0028             		andi.b	#$F,obSubtype(a0)
00012264                            
00012264                            MBlock_Platform: ; Routine 2
00012264 6100 0000                  		bsr.w	MBlock_Move
00012268 7200                       		moveq	#0,d1
0001226A 1228 0014                  		move.b	obActWid(a0),d1
0001226E 4EB9 0000 908A             		jsr	(PlatformObject).l
00012274 6000                       		bra.s	MBlock_ChkDel
00012276                            ; ===========================================================================
00012276                            
00012276                            MBlock_StandOn:	; Routine 4
00012276 7200                       		moveq	#0,d1
00012278 1228 0014                  		move.b	obActWid(a0),d1
0001227C 4EB9 0000 91FE             		jsr	(ExitPlatform).l
00012282 3F28 0008                  		move.w	obX(a0),-(sp)
00012286 6100 0000                  		bsr.w	MBlock_Move
0001228A 341F                       		move.w	(sp)+,d2
0001228C 4EB9 0000 9768             		jsr	(MvSonicOnPtfm2).l
00012292                            
00012292                            MBlock_ChkDel:
000122B0 6000 D6CA                  		bra.w	DisplaySprite
000122B4                            ; ===========================================================================
000122B4                            
000122B4                            MBlock_Move:
000122B4 7000                       		moveq	#0,d0
000122B6 1028 0028                  		move.b	obSubtype(a0),d0
000122BA 0240 000F                  		andi.w	#$F,d0
000122BE D040                       		add.w	d0,d0
000122C0 323B 0000                  		move.w	MBlock_TypeIndex(pc,d0.w),d1
000122C4 4EFB 1000                  		jmp	MBlock_TypeIndex(pc,d1.w)
000122C8                            ; ===========================================================================
000122C8 0000 0000                  MBlock_TypeIndex:dc.w MBlock_Type00-MBlock_TypeIndex, MBlock_Type01-MBlock_TypeIndex
000122CC 0000 0000                  		dc.w MBlock_Type02-MBlock_TypeIndex, MBlock_Type03-MBlock_TypeIndex
000122D0 0000 0000                  		dc.w MBlock_Type02-MBlock_TypeIndex, MBlock_Type05-MBlock_TypeIndex
000122D4 0000 0000                  		dc.w MBlock_Type06-MBlock_TypeIndex, MBlock_Type07-MBlock_TypeIndex
000122D8 0000 0000                  		dc.w MBlock_Type08-MBlock_TypeIndex, MBlock_Type02-MBlock_TypeIndex
000122DC 0000                       		dc.w MBlock_Type0A-MBlock_TypeIndex
000122DE                            ; ===========================================================================
000122DE                            
000122DE                            MBlock_Type00:
000122DE 4E75                       		rts	
000122E0                            ; ===========================================================================
000122E0                            
000122E0                            MBlock_Type01:
000122E0 1038 FE6C                  		move.b	(v_oscillate+$E).w,d0
000122E4 323C 0060                  		move.w	#$60,d1
000122E8 0828 0000 0022             		btst	#0,obStatus(a0)
000122EE 6700                       		beq.s	loc_FF26
000122F0 4440                       		neg.w	d0
000122F2 D041                       		add.w	d1,d0
000122F4                            
000122F4                            loc_FF26:
000122F4 3228 0030                  		move.w	mblock_origX(a0),d1
000122F8 9240                       		sub.w	d0,d1
000122FA 3141 0008                  		move.w	d1,obX(a0)
000122FE 4E75                       		rts	
00012300                            ; ===========================================================================
00012300                            
00012300                            MBlock_Type02:
00012300 0C28 0004 0024             		cmpi.b	#4,obRoutine(a0) ; is Sonic standing on the platform?
00012306 6600                       		bne.s	MBlock_02_Wait
00012308 5228 0028                  		addq.b	#1,obSubtype(a0) ; if yes, add 1 to type
0001230C                            
0001230C                            MBlock_02_Wait:
0001230C 4E75                       		rts	
0001230E                            ; ===========================================================================
0001230E                            
0001230E                            MBlock_Type03:
0001230E 7600                       		moveq	#0,d3
00012310 1628 0014                  		move.b	obActWid(a0),d3
00012314 6100 0000                  		bsr.w	ObjHitWallRight
00012318 4A41                       		tst.w	d1		; has the platform hit a wall?
0001231A 6B00                       		bmi.s	MBlock_03_End	; if yes, branch
0001231C 5268 0008                  		addq.w	#1,obX(a0)	; move platform	to the right
00012320 3168 0008 0030             		move.w	obX(a0),mblock_origX(a0)
00012326 4E75                       		rts	
00012328                            ; ===========================================================================
00012328                            
00012328                            MBlock_03_End:
00012328 4228 0028                  		clr.b	obSubtype(a0)	; change to type 00 (non-moving	type)
0001232C 4E75                       		rts	
0001232E                            ; ===========================================================================
0001232E                            
0001232E                            MBlock_Type05:
0001232E 7600                       		moveq	#0,d3
00012330 1628 0014                  		move.b	obActWid(a0),d3
00012334 6100 0000                  		bsr.w	ObjHitWallRight
00012338 4A41                       		tst.w	d1		; has the platform hit a wall?
0001233A 6B00                       		bmi.s	MBlock_05_End	; if yes, branch
0001233C 5268 0008                  		addq.w	#1,obX(a0)	; move platform	to the right
00012340 3168 0008 0030             		move.w	obX(a0),mblock_origX(a0)
00012346 4E75                       		rts	
00012348                            ; ===========================================================================
00012348                            
00012348                            MBlock_05_End:
00012348 5228 0028                  		addq.b	#1,obSubtype(a0) ; change to type 06 (falling)
0001234C 4E75                       		rts	
0001234E                            ; ===========================================================================
0001234E                            
0001234E                            MBlock_Type06:
0001234E 6100 D618                  		bsr.w	SpeedToPos
00012352 0668 0018 0012             		addi.w	#$18,obVelY(a0)	; make the platform fall
00012358 6100 0000                  		bsr.w	ObjFloorDist
0001235C 4A41                       		tst.w	d1		; has platform hit the floor?
0001235E 6A00 0000                  		bpl.w	locret_FFA0	; if not, branch
00012362 D368 000C                  		add.w	d1,obY(a0)
00012366 4268 0012                  		clr.w	obVelY(a0)	; stop platform	falling
0001236A 4228 0028                  		clr.b	obSubtype(a0)	; change to type 00 (non-moving)
0001236E                            
0001236E                            locret_FFA0:
0001236E 4E75                       		rts	
00012370                            ; ===========================================================================
00012370                            
00012370                            MBlock_Type07:
00012370 4A38 F7E2                  		tst.b	(f_switch+2).w	; has switch number 02 been pressed?
00012374 6700                       		beq.s	MBlock_07_ChkDel
00012376 5728 0028                  		subq.b	#3,obSubtype(a0) ; if yes, change object type to 04
0001237A                            
0001237A                            MBlock_07_ChkDel:
0001237A 588F                       		addq.l	#4,sp
0001239A 4E75                       		rts	
0001239C                            ; ===========================================================================
0001239C                            
0001239C                            MBlock_Type08:
0001239C 1038 FE7C                  		move.b	(v_oscillate+$1E).w,d0
000123A0 323C 0080                  		move.w	#$80,d1
000123A4 0828 0000 0022             		btst	#0,obStatus(a0)
000123AA 6700                       		beq.s	loc_FFE2
000123AC 4440                       		neg.w	d0
000123AE D041                       		add.w	d1,d0
000123B0                            
000123B0                            loc_FFE2:
000123B0 3228 0032                  		move.w	mblock_origY(a0),d1
000123B4 9240                       		sub.w	d0,d1
000123B6 3141 000C                  		move.w	d1,obY(a0)
000123BA 4E75                       		rts	
000123BC                            ; ===========================================================================
000123BC                            
000123BC                            MBlock_Type0A:
000123BC 7600                       		moveq	#0,d3
000123BE 1628 0014                  		move.b	obActWid(a0),d3
000123C2 D643                       		add.w	d3,d3
000123C4 7208                       		moveq	#8,d1
000123C6 0828 0000 0022             		btst	#0,obStatus(a0)
000123CC 6700                       		beq.s	loc_10004
000123CE 4441                       		neg.w	d1
000123D0 4443                       		neg.w	d3
000123D2                            
000123D2                            loc_10004:
000123D2 4A68 0036                  		tst.w	$36(a0)		; is platform set to move back?
000123D6 6600                       		bne.s	MBlock_0A_Back	; if yes, branch
000123D8 3028 0008                  		move.w	obX(a0),d0
000123DC 9068 0030                  		sub.w	mblock_origX(a0),d0
000123E0 B043                       		cmp.w	d3,d0
000123E2 6700                       		beq.s	MBlock_0A_Wait
000123E4 D368 0008                  		add.w	d1,obX(a0)	; move platform
000123E8 317C 012C 0034             		move.w	#300,$34(a0)	; set time delay to 5 seconds
000123EE 4E75                       		rts	
000123F0                            ; ===========================================================================
000123F0                            
000123F0                            MBlock_0A_Wait:
000123F0 5368 0034                  		subq.w	#1,$34(a0)	; subtract 1 from time delay
000123F4 6600                       		bne.s	locret_1002E	; if time remains, branch
000123F6 317C 0001 0036             		move.w	#1,$36(a0)	; set platform to move back to its original position
000123FC                            
000123FC                            locret_1002E:
000123FC 4E75                       		rts	
000123FE                            ; ===========================================================================
000123FE                            
000123FE                            MBlock_0A_Back:
000123FE 3028 0008                  		move.w	obX(a0),d0
00012402 9068 0030                  		sub.w	mblock_origX(a0),d0
00012406 6700                       		beq.s	MBlock_0A_Reset
00012408 9368 0008                  		sub.w	d1,obX(a0)	; return platform to its original position
0001240C 4E75                       		rts	
0001240E                            ; ===========================================================================
0001240E                            
0001240E                            MBlock_0A_Reset:
0001240E 4268 0036                  		clr.w	$36(a0)
00012412 5328 0028                  		subq.b	#1,obSubtype(a0)
00012416 4E75                       		rts	
00012416 4E75                       		rts	
00012418                            Map_MBlock:	include	"_maps\Moving Blocks (MZ and SBZ).asm"
00012418                            ; ---------------------------------------------------------------------------
00012418                            ; Sprite mappings - moving blocks (MZ, SBZ)
00012418                            ; ---------------------------------------------------------------------------
00012418                            Map_MBlock_internal:
00012418 0000                       		dc.w @mz1-Map_MBlock_internal
0001241A 0000                       		dc.w @mz2-Map_MBlock_internal
0001241C 0000                       		dc.w @sbz-Map_MBlock_internal
0001241E 0000                       		dc.w @sbzwide-Map_MBlock_internal
00012420 0000                       		dc.w @mz3-Map_MBlock_internal
00012422 01                         @mz1:		dc.b 1
00012423 F80F 0008 F0               		dc.b $F8, $F, 0, 8, $F0
00012428 02                         @mz2:		dc.b 2
00012429 F80F 0008 E0               		dc.b $F8, $F, 0, 8, $E0
0001242E F80F 0008 00               		dc.b $F8, $F, 0, 8, 0
00012433 04                         @sbz:		dc.b 4
00012434 F80C 2000 E0               		dc.b $F8, $C, $20, 0, $E0
00012439 000D 0004 E0               		dc.b 0,	$D, 0, 4, $E0
0001243E F80C 2000 00               		dc.b $F8, $C, $20, 0, 0
00012443 000D 0004 00               		dc.b 0,	$D, 0, 4, 0
00012448 04                         @sbzwide:	dc.b 4
00012449 F80E 0000 C0               		dc.b $F8, $E, 0, 0, $C0
0001244E F80E 0003 E0               		dc.b $F8, $E, 0, 3, $E0
00012453 F80E 0003 00               		dc.b $F8, $E, 0, 3, 0
00012458 F80E 0800 20               		dc.b $F8, $E, 8, 0, $20
0001245D 03                         @mz3:		dc.b 3
0001245E F80F 0008 D0               		dc.b $F8, $F, 0, 8, $D0
00012463 F80F 0008 F0               		dc.b $F8, $F, 0, 8, $F0
00012468 F80F 0008 10               		dc.b $F8, $F, 0, 8, $10
0001246E 00                         		even
0001246E 00                         		even
0001246E                            Map_MBlockLZ:	include	"_maps\Moving Blocks (LZ).asm"
0001246E                            ; ---------------------------------------------------------------------------
0001246E                            ; Sprite mappings - moving block (LZ)
0001246E                            ; ---------------------------------------------------------------------------
0001246E                            Map_MBlockLZ_internal:
0001246E 0000                       		dc.w @0-Map_MBlockLZ_internal
00012470 01                         @0:		dc.b 1
00012471 F80D 0000 F0               		dc.b $F8, $D, 0, 0, $F0
00012476                            		even
00012476                            		even
00012476                            
00012476                            		include	"_incObj\55 Basaran.asm"
00012476                            ; ---------------------------------------------------------------------------
00012476                            ; Object 55 - Basaran enemy (MZ)
00012476                            ; ---------------------------------------------------------------------------
00012476                            
00012476                            Basaran:
00012476 7000                       		moveq	#0,d0
00012478 1028 0024                  		move.b	obRoutine(a0),d0
0001247C 323B 0000                  		move.w	Bas_Index(pc,d0.w),d1
00012480 4EFB 1000                  		jmp	Bas_Index(pc,d1.w)
00012484                            ; ===========================================================================
00012484 0000                       Bas_Index:	dc.w Bas_Main-Bas_Index
00012486 0000                       		dc.w Bas_Action-Bas_Index
00012488                            ; ===========================================================================
00012488                            
00012488                            Bas_Main:	; Routine 0
00012488 5428 0024                  		addq.b	#2,obRoutine(a0)
0001248C 217C 0000 0000 0004        		move.l	#Map_Bas,obMap(a0)
00012494 317C 84B8 0002             		move.w	#$84B8,obGfx(a0)
0001249A 117C 0004 0001             		move.b	#4,obRender(a0)
000124A0 117C 000C 0016             		move.b	#$C,obHeight(a0)
000124A6 317C 0100 0018             		move.w	#$100,obPriority(a0)
000124AC 117C 000B 0020             		move.b	#$B,obColType(a0)
000124B2 117C 0010 0014             		move.b	#$10,obActWid(a0)
000124B8                            
000124B8                            Bas_Action:	; Routine 2
000124B8 7000                       		moveq	#0,d0
000124BA 1028 0025                  		move.b	ob2ndRout(a0),d0
000124BE 323B 0000                  		move.w	@index(pc,d0.w),d1
000124C2 4EBB 1000                  		jsr	@index(pc,d1.w)
000124C6 43F9 0000 0000             		lea	(Ani_Bas).l,a1
000124CC 6100 A55A                  		bsr.w	AnimateSprite
000124D0 6000 F420                  		bra.w	RememberState
000124D4                            ; ===========================================================================
000124D4 0000                       @index:		dc.w @dropcheck-@index
000124D6 0000                       		dc.w @dropfly-@index
000124D8 0000                       		dc.w @flapsound-@index
000124DA 0000                       		dc.w @flyup-@index
000124DC                            ; ===========================================================================
000124DC                            
000124DC                            @dropcheck:
000124DC 343C 0080                  		move.w	#$80,d2
000124E0 6100 0000                  		bsr.w	@chkdistance	; is Sonic < $80 pixels from basaran?
000124E4 6400                       		bcc.s	@nodrop		; if not, branch
000124E6 3038 D00C                  		move.w	(v_player+obY).w,d0
000124EA 3140 0036                  		move.w	d0,$36(a0)
000124EE 9068 000C                  		sub.w	obY(a0),d0
000124F2 6500                       		bcs.s	@nodrop
000124F4 0C40 0080                  		cmpi.w	#$80,d0		; is Sonic < $80 pixels from basaran?
000124F8 6400                       		bcc.s	@nodrop		; if not, branch
000124FA 4A78 FE08                  		tst.w	(v_debuguse).w	; is debug mode	on?
000124FE 6600                       		bne.s	@nodrop		; if yes, branch
00012500                            
00012500 1038 FE0F                  		move.b	(v_vbla_byte).w,d0
00012504 D007                       		add.b	d7,d0
00012506 0200 0007                  		andi.b	#7,d0
0001250A 6600                       		bne.s	@nodrop
0001250C 117C 0001 001C             		move.b	#1,obAnim(a0)
00012512 5428 0025                  		addq.b	#2,ob2ndRout(a0)
00012516                            
00012516                            	@nodrop:
00012516 4E75                       		rts	
00012518                            ; ===========================================================================
00012518                            
00012518                            @dropfly:
00012518 6100 D44E                  		bsr.w	SpeedToPos
0001251C 0668 0018 0012             		addi.w	#$18,obVelY(a0)	; make basaran fall
00012522 343C 0080                  		move.w	#$80,d2
00012526 6100 0000                  		bsr.w	@chkdistance
0001252A 3028 0036                  		move.w	$36(a0),d0
0001252E 9068 000C                  		sub.w	obY(a0),d0
00012532 6500                       		bcs.s	@chkdel
00012534 0C40 0010                  		cmpi.w	#$10,d0		; is basaran close to Sonic vertically?
00012538 6400                       		bcc.s	@dropmore	; if not, branch
0001253A 3141 0010                  		move.w	d1,obVelX(a0)	; make basaran fly horizontally
0001253E 317C 0000 0012             		move.w	#0,obVelY(a0)	; stop basaran falling
00012544 117C 0002 001C             		move.b	#2,obAnim(a0)
0001254A 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001254E                            
0001254E                            	@dropmore:
0001254E 4E75                       		rts	
00012550                            
00012550                            	@chkdel:
00012550 4A28 0001                  		tst.b	obRender(a0)
00012554 6A00 D466                  		bpl.w	DeleteObject
00012558 4E75                       		rts	
0001255A                            ; ===========================================================================
0001255A                            
0001255A                            @flapsound:
0001255A 1038 FE0F                  		move.b	(v_vbla_byte).w,d0
0001255E 0200 000F                  		andi.b	#$F,d0
00012562 6600                       		bne.s	@nosound
0001256E                            
0001256E                            	@nosound:
0001256E 6100 D3F8                  		bsr.w	SpeedToPos
00012572 3038 D008                  		move.w	(v_player+obX).w,d0
00012576 9068 0008                  		sub.w	obX(a0),d0
0001257A 6400                       		bcc.s	@isright	; if Sonic is right of basaran, branch
0001257C 4440                       		neg.w	d0
0001257E                            
0001257E                            	@isright:
0001257E 0C40 0080                  		cmpi.w	#$80,d0		; is Sonic within $80 pixels of basaran?
00012582 6500                       		bcs.s	@dontflyup	; if yes, branch
00012584 1038 FE0F                  		move.b	(v_vbla_byte).w,d0
00012588 D007                       		add.b	d7,d0
0001258A 0200 0007                  		andi.b	#7,d0
0001258E 6600                       		bne.s	@dontflyup
00012590 5428 0025                  		addq.b	#2,ob2ndRout(a0)
00012594                            
00012594                            @dontflyup:
00012594 4E75                       		rts	
00012596                            ; ===========================================================================
00012596                            
00012596                            @flyup:
00012596 6100 D3D0                  		bsr.w	SpeedToPos
0001259A 0468 0018 0012             		subi.w	#$18,obVelY(a0)	; make basaran fly upwards
000125A0 6100 0000                  		bsr.w	ObjHitCeiling
000125A4 4A41                       		tst.w	d1		; has basaran hit the ceiling?
000125A6 6A00                       		bpl.s	@noceiling	; if not, branch
000125A8 9368 000C                  		sub.w	d1,obY(a0)
000125AC 0268 FFF8 0008             		andi.w	#$FFF8,obX(a0)
000125B2 4268 0010                  		clr.w	obVelX(a0)	; stop basaran moving
000125B6 4268 0012                  		clr.w	obVelY(a0)
000125BA 4228 001C                  		clr.b	obAnim(a0)
000125BE 4228 0025                  		clr.b	ob2ndRout(a0)
000125C2                            
000125C2                            	@noceiling:
000125C2 4E75                       		rts	
000125C4                            ; ===========================================================================
000125C4                            
000125C4                            ; Subroutine to check Sonic's distance from the basaran
000125C4                            
000125C4                            ; input:
000125C4                            ;	d2 = distance to compare
000125C4                            
000125C4                            ; output:
000125C4                            ;	d0 = distance between Sonic and basaran
000125C4                            ;	d1 = speed/direction for basaran to fly
000125C4                            
000125C4                            @chkdistance:
000125C4 323C 0100                  		move.w	#$100,d1
000125C8 08E8 0000 0022             		bset	#0,obStatus(a0)
000125CE 3038 D008                  		move.w	(v_player+obX).w,d0
000125D2 9068 0008                  		sub.w	obX(a0),d0
000125D6 6400                       		bcc.s	@right		; if Sonic is right of basaran, branch
000125D8 4440                       		neg.w	d0
000125DA 4441                       		neg.w	d1
000125DC 08A8 0000 0022             		bclr	#0,obStatus(a0)
000125E2                            
000125E2                            	@right:
000125E2 B042                       		cmp.w	d2,d0
000125E4 4E75                       		rts	
000125E6                            ; ===========================================================================
000125E6                            ; unused crap
000125E6 6100 D380                  		bsr.w	SpeedToPos
000125EA 6100 D390                  		bsr.w	DisplaySprite
000125EE 4A28 0001                  		tst.b	obRender(a0)
000125F2 6A00 D3C8                  		bpl.w	DeleteObject
000125F6 4E75                       		rts	
000125F6 4E75                       		rts	
000125F8                            		include	"_anim\Basaran.asm"
000125F8                            ; ---------------------------------------------------------------------------
000125F8                            ; Animation script - Basaran enemy
000125F8                            ; ---------------------------------------------------------------------------
000125F8 0000                       Ani_Bas:	dc.w @still-Ani_Bas
000125FA 0000                       		dc.w @fall-Ani_Bas
000125FC 0000                       		dc.w @fly-Ani_Bas
000125FE 0F00 FF                    @still:		dc.b $F, 0, afEnd
00012602 00                         		even
00012602 0F01 FF                    @fall:		dc.b $F, 1, afEnd
00012606 00                         		even
00012606 0301 0203 02FF             @fly:		dc.b 3,	1, 2, 3, 2, afEnd
0001260C                            		even
0001260C                            		even
0001260C                            Map_Bas:	include	"_maps\Basaran.asm"
0001260C                            ; --------------------------------------------------------------------------------
0001260C                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0001260C                            ; --------------------------------------------------------------------------------
0001260C                            
0001260C                            SME_RhYYA:	
0001260C 0000 0000                  		dc.w SME_RhYYA_8-SME_RhYYA, SME_RhYYA_E-SME_RhYYA	
00012610 0000 0000                  		dc.w SME_RhYYA_1E-SME_RhYYA, SME_RhYYA_33-SME_RhYYA	
00012614 01                         SME_RhYYA_8:	dc.b 1	
00012615 F406 2000 F8               		dc.b $F4, 6, $20, 0, $F8	
0001261A 03                         SME_RhYYA_E:	dc.b 3	
0001261B F20E 2006 F4               		dc.b $F2, $E, $20, 6, $F4	
00012620 0A04 2012 FC               		dc.b $A, 4, $20, $12, $FC	
00012625 0200 2027 0C               		dc.b 2, 0, $20, $27, $C	
0001262A 04                         SME_RhYYA_1E:	dc.b 4	
0001262B F804 2014 F8               		dc.b $F8, 4, $20, $14, $F8	
00012630 000C 2016 F0               		dc.b 0, $C, $20, $16, $F0	
00012635 0804 201A 00               		dc.b 8, 4, $20, $1A, 0	
0001263A 0000 2028 0C               		dc.b 0, 0, $20, $28, $C	
0001263F 04                         SME_RhYYA_33:	dc.b 4	
00012640 F609 201C F5               		dc.b $F6, 9, $20, $1C, $F5	
00012645 0608 2022 F4               		dc.b 6, 8, $20, $22, $F4	
0001264A 0E04 2025 F4               		dc.b $E, 4, $20, $25, $F4	
0001264F FE00 2027 0C               		dc.b $FE, 0, $20, $27, $C	
00012654                            		even
00012654                            		even
00012654                            
00012654                            		include	"_incObj\56 Floating Blocks and Doors.asm"
00012654                            ; ---------------------------------------------------------------------------
00012654                            ; Object 56 - floating blocks (SYZ/SLZ), large doors (LZ)
00012654                            ; ---------------------------------------------------------------------------
00012654                            
00012654                            FloatingBlock:
00012654 7000                       		moveq	#0,d0
00012656 1028 0024                  		move.b	obRoutine(a0),d0
0001265A 323B 0000                  		move.w	FBlock_Index(pc,d0.w),d1
0001265E 4EFB 1000                  		jmp	FBlock_Index(pc,d1.w)
00012662                            ; ===========================================================================
00012662 0000                       FBlock_Index:	dc.w FBlock_Main-FBlock_Index
00012664 0000                       		dc.w FBlock_Action-FBlock_Index
00012666                            
00012666 =00000034                  fb_origX:	equ $34		; original x-axis position
00012666 =00000030                  fb_origY:	equ $30		; original y-axis position
00012666 =0000003A                  fb_height:	equ $3A		; total object height
00012666 =0000003C                  fb_type:		equ $3C		; subtype (2nd digit only)
00012666                            
00012666                            FBlock_Var:	; width/2, height/2
00012666 1010                       		dc.b  $10, $10	; subtype 0x/8x
00012668 2020                       		dc.b  $20, $20	; subtype 1x/9x
0001266A 1020                       		dc.b  $10, $20	; subtype 2x/Ax
0001266C 201A                       		dc.b  $20, $1A	; subtype 3x/Bx
0001266E 1027                       		dc.b  $10, $27	; subtype 4x/Cx
00012670 1010                       		dc.b  $10, $10	; subtype 5x/Dx
00012672 0820                       		dc.b	8, $20	; subtype 6x/Ex
00012674 4010                       		dc.b  $40, $10	; subtype 7x/Fx
00012676                            ; ===========================================================================
00012676                            
00012676                            FBlock_Main:	; Routine 0
00012676 5428 0024                  		addq.b	#2,obRoutine(a0)
0001267A 217C 0000 0000 0004        		move.l	#Map_FBlock,obMap(a0)
00012682 317C 4000 0002             		move.w	#$4000,obGfx(a0)
00012688 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w ; check if level is LZ
0001268E 6600                       		bne.s	@notLZ
00012690 317C 43C4 0002             		move.w	#$43C4,obGfx(a0) ; LZ specific code
00012696                            
00012696                            	@notLZ:
00012696 117C 0004 0001             		move.b	#4,obRender(a0)
0001269C 317C 0180 0018             		move.w	#$180,obPriority(a0)
000126A2 7000                       		moveq	#0,d0
000126A4 1028 0028                  		move.b	obSubtype(a0),d0 ; get subtype
000126A8 E648                       		lsr.w	#3,d0
000126AA 0240 000E                  		andi.w	#$E,d0		; read only the 1st digit
000126AE 45FB 00B6                  		lea	FBlock_Var(pc,d0.w),a2 ; get size data
000126B2 115A 0014                  		move.b	(a2)+,obActWid(a0)
000126B6 1152 0016                  		move.b	(a2),obHeight(a0)
000126BA E248                       		lsr.w	#1,d0
000126BC 1140 001A                  		move.b	d0,obFrame(a0)
000126C0 3168 0008 0034             		move.w	obX(a0),fb_origX(a0)
000126C6 3168 000C 0030             		move.w	obY(a0),fb_origY(a0)
000126CC 7000                       		moveq	#0,d0
000126CE 1012                       		move.b	(a2),d0
000126D0 D040                       		add.w	d0,d0
000126D2 3140 003A                  		move.w	d0,fb_height(a0)
000126D6 0C28 0037 0028             			cmpi.b	#$37,obSubtype(a0)
000126DC 6600                       			bne.s	@dontdelete
000126DE 0C68 1BB8 0008             			cmpi.w	#$1BB8,obX(a0)
000126E4 6600                       			bne.s	@notatpos
000126E6 4A38 F7CE                  			tst.b	($FFFFF7CE).w
000126EA 6700                       			beq.s	@dontdelete
000126EC 4EF9 0000 F9BC             			jmp	(DeleteObject).l
000126F2                            	@notatpos:
000126F2 4228 0028                  			clr.b	obSubtype(a0)
000126F6 4A38 F7CE                  			tst.b	($FFFFF7CE).w
000126FA 6600                       			bne.s	@dontdelete
000126FC 4EF9 0000 F9BC             			jmp	(DeleteObject).l
00012702                            	@dontdelete:
00012702 7000                       		moveq	#0,d0
00012704 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w ; check if level is LZ
0001270A 6700                       		beq.s	@stillnotLZ
0001270C 1028 0028                  		move.b	obSubtype(a0),d0 ; SYZ/SLZ specific code
00012710 0240 000F                  		andi.w	#$F,d0
00012714 5140                       		subq.w	#8,d0
00012716 6500                       		bcs.s	@stillnotLZ
00012718 E548                       		lsl.w	#2,d0
0001271A 45F8 FE8A                  		lea	(v_oscillate+$2C).w,a2
0001271E 45F2 0000                  		lea	(a2,d0.w),a2
00012722 4A52                       		tst.w	(a2)
00012724 6A00                       		bpl.s	@stillnotLZ
00012726 0868 0000 0022             		bchg	#0,obStatus(a0)
0001272C                            
0001272C                            	@stillnotLZ:
0001272C 1028 0028                  		move.b	obSubtype(a0),d0
00012730 6A00                       		bpl.s	FBlock_Action
00012732 0200 000F                  		andi.b	#$F,d0
00012736 1140 003C                  		move.b	d0,fb_type(a0)
0001273A 117C 0005 0028             		move.b	#5,obSubtype(a0)
00012740 0C28 0007 001A             		cmpi.b	#7,obFrame(a0)
00012746 6600                       		bne.s	@chkstate
00012748 117C 000C 0028             		move.b	#$C,obSubtype(a0)
0001274E 317C 0080 003A             		move.w	#$80,fb_height(a0)
00012754                            
00012754                            @chkstate:
00012754 45F8 FC00                  		lea	(v_objstate).w,a2
00012758 7000                       		moveq	#0,d0
0001275A 1028 0023                  		move.b	obRespawnNo(a0),d0
0001275E 6700                       		beq.s	FBlock_Action
00012760 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00012766 0832 0000 0002             		btst	#0,2(a2,d0.w)
0001276C 6700                       		beq.s	FBlock_Action
0001276E 5228 0028                  		addq.b	#1,obSubtype(a0)
00012772 4268 003A                  		clr.w	fb_height(a0)
00012776                            
00012776                            FBlock_Action:	; Routine 2
00012776 3F28 0008                  		move.w	obX(a0),-(sp)
0001277A 7000                       		moveq	#0,d0
0001277C 1028 0028                  		move.b	obSubtype(a0),d0 ; get object subtype
00012780 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
00012784 D040                       		add.w	d0,d0
00012786 323B 0000                  		move.w	@index(pc,d0.w),d1
0001278A 4EBB 1000                  		jsr	@index(pc,d1.w)	; move block subroutines
0001278E 381F                       		move.w	(sp)+,d4
00012790 4A28 0001                  		tst.b	obRender(a0)
00012794 6A00                       		bpl.s	@chkdel
00012796 7200                       		moveq	#0,d1
00012798 1228 0014                  		move.b	obActWid(a0),d1
0001279C 0641 000B                  		addi.w	#$B,d1
000127A0 7400                       		moveq	#0,d2
000127A2 1428 0016                  		move.b	obHeight(a0),d2
000127A6 3602                       		move.w	d2,d3
000127A8 5243                       		addq.w	#1,d3
000127AA 6100 F5DE                  		bsr.w	SolidObject
000127AE                            
000127AE                            	@chkdel:
000127CA                            		@display:
000127CA 6000 D1B0                  			bra.w	DisplaySprite
000127CE                            		@chkdel2:
000127CE 0C28 0037 0028             			cmpi.b	#$37,obSubtype(a0)
000127D4 6600                       			bne.s	@delete
000127D6 4A28 0038                  			tst.b	$38(a0)
000127DA 66EE                       			bne.s	@display
000127DC                            		@delete:
000127DC 4EF9 0000 F9BC             			jmp	(DeleteObject).l
000127E2                            ; ===========================================================================
000127E2 0000 0000                  @index:		dc.w @type00-@index, @type01-@index
000127E6 0000 0000                  		dc.w @type02-@index, @type03-@index
000127EA 0000 0000                  		dc.w @type04-@index, @type05-@index
000127EE 0000 0000                  		dc.w @type06-@index, @type07-@index
000127F2 0000 0000                  		dc.w @type08-@index, @type09-@index
000127F6 0000 0000                  		dc.w @type0A-@index, @type0B-@index
000127FA 0000 0000                  		dc.w @type0C-@index, @type0D-@index
000127FE                            ; ===========================================================================
000127FE                            
000127FE                            @type00:
000127FE                            ; doesn't move
000127FE 4E75                       		rts	
00012800                            ; ===========================================================================
00012800                            
00012800                            @type01:
00012800                            ; moves side-to-side
00012800 323C 0040                  		move.w	#$40,d1		; set move distance
00012804 7000                       		moveq	#0,d0
00012806 1038 FE68                  		move.b	(v_oscillate+$A).w,d0
0001280A 6000                       		bra.s	@moveLR
0001280C                            ; ===========================================================================
0001280C                            
0001280C                            @type02:
0001280C                            ; moves side-to-side
0001280C 323C 0080                  		move.w	#$80,d1		; set move distance
00012810 7000                       		moveq	#0,d0
00012812 1038 FE7C                  		move.b	(v_oscillate+$1E).w,d0
00012816                            
00012816                            	@moveLR:
00012816 0828 0000 0022             		btst	#0,obStatus(a0)
0001281C 6700                       		beq.s	@noflip
0001281E 4440                       		neg.w	d0
00012820 D041                       		add.w	d1,d0
00012822                            
00012822                            	@noflip:
00012822 3228 0034                  		move.w	fb_origX(a0),d1
00012826 9240                       		sub.w	d0,d1
00012828 3141 0008                  		move.w	d1,obX(a0)	; move object horizontally
0001282C 4E75                       		rts	
0001282E                            ; ===========================================================================
0001282E                            
0001282E                            @type03:
0001282E                            ; moves up/down
0001282E 323C 0040                  		move.w	#$40,d1		; set move distance
00012832 7000                       		moveq	#0,d0
00012834 1038 FE68                  		move.b	(v_oscillate+$A).w,d0
00012838 6000                       		bra.s	@moveUD
0001283A                            ; ===========================================================================
0001283A                            
0001283A                            @type04:
0001283A                            ; moves up/down
0001283A 323C 0080                  		move.w	#$80,d1		; set move distance
0001283E 7000                       		moveq	#0,d0
00012840 1038 FE7C                  		move.b	(v_oscillate+$1E).w,d0
00012844                            
00012844                            	@moveUD:
00012844 0828 0000 0022             		btst	#0,obStatus(a0)
0001284A 6700                       		beq.s	@noflip04
0001284C 4440                       		neg.w	d0
0001284E D041                       		add.w	d1,d0
00012850                            
00012850                            	@noflip04:
00012850 3228 0030                  		move.w	fb_origY(a0),d1
00012854 9240                       		sub.w	d0,d1
00012856 3141 000C                  		move.w	d1,obY(a0)	; move object vertically
0001285A 4E75                       		rts	
0001285C                            ; ===========================================================================
0001285C                            
0001285C                            @type05:
0001285C                            ; moves up when a switch is pressed
0001285C 4A28 0038                  		tst.b	$38(a0)
00012860 6600                       		bne.s	@loc_104A4
00012862 0C78 0100 FE10             		cmpi.w	#(id_LZ<<8)+0,(v_zone).w ; is level LZ1 ?
00012868 6600                       		bne.s	@aaa		; if not, branch
0001286A 0C28 0003 003C             		cmpi.b	#3,fb_type(a0)
00012870 6600                       		bne.s	@aaa
00012872 4238 F7C9                  		clr.b	(f_wtunnelallow).w
00012876 3038 D008                  		move.w	(v_player+obX).w,d0
0001287A B068 0008                  		cmp.w	obX(a0),d0
0001287E 6400                       		bcc.s	@aaa
00012880 11FC 0001 F7C9             		move.b	#1,(f_wtunnelallow).w
00012886                            
00012886                            	@aaa:
00012886 45F8 F7E0                  		lea	(f_switch).w,a2
0001288A 7000                       		moveq	#0,d0
0001288C 1028 003C                  		move.b	fb_type(a0),d0
00012890 0832 0000 0000             		btst	#0,(a2,d0.w)
00012896 6700                       		beq.s	@loc_104AE
00012898 0C78 0100 FE10             		cmpi.w	#(id_LZ<<8)+0,(v_zone).w ; is level LZ1 ?
0001289E 6600                       		bne.s	@loc_1049E	; if not, branch
000128A0 0C00 0003                  		cmpi.b	#3,d0
000128A4 6600                       		bne.s	@loc_1049E
000128A6 4238 F7C9                  		clr.b	(f_wtunnelallow).w
000128AA                            
000128AA                            @loc_1049E:
000128AA 117C 0001 0038             		move.b	#1,$38(a0)
000128B0                            
000128B0                            @loc_104A4:
000128B0 4A68 003A                  		tst.w	fb_height(a0)
000128B4 6700                       		beq.s	@loc_104C8
000128B6 5568 003A                  		subq.w	#2,fb_height(a0)
000128BA                            
000128BA                            @loc_104AE:
000128BA 3028 003A                  		move.w	fb_height(a0),d0
000128BE 0828 0000 0022             		btst	#0,$22(a0)
000128C4 6700                       		beq.s	@loc_104BC
000128C6 4440                       		neg.w	d0
000128C8                            
000128C8                            @loc_104BC:
000128C8 3228 0030                  		move.w	fb_origY(a0),d1
000128CC D240                       		add.w	d0,d1
000128CE 3141 000C                  		move.w	d1,obY(a0)
000128D2 4E75                       		rts	
000128D4                            ; ===========================================================================
000128D4                            
000128D4                            @loc_104C8:
000128D4 5228 0028                  		addq.b	#1,$28(a0)
000128D8 4228 0038                  		clr.b	$38(a0)
000128DC 45F8 FC00                  		lea	(v_objstate).w,a2
000128E0 7000                       		moveq	#0,d0
000128E2 1028 0023                  		move.b	obRespawnNo(a0),d0
000128E6 67D2                       		beq.s	@loc_104AE
000128E8 08F2 0000 0002             		bset	#0,2(a2,d0.w)
000128EE 60CA                       		bra.s	@loc_104AE
000128F0                            ; ===========================================================================
000128F0                            
000128F0                            @type06:
000128F0 4A28 0038                  		tst.b	$38(a0)
000128F4 6600                       		bne.s	@loc_10500
000128F6 45F8 F7E0                  		lea	(f_switch).w,a2
000128FA 7000                       		moveq	#0,d0
000128FC 1028 003C                  		move.b	fb_type(a0),d0
00012900 4A32 0000                  		tst.b	(a2,d0.w)
00012904 6A00                       		bpl.s	@loc_10512
00012906 117C 0001 0038             		move.b	#1,$38(a0)
0001290C                            
0001290C                            @loc_10500:
0001290C 7000                       		moveq	#0,d0
0001290E 1028 0016                  		move.b	obHeight(a0),d0
00012912 D040                       		add.w	d0,d0
00012914 B068 003A                  		cmp.w	fb_height(a0),d0
00012918 6700                       		beq.s	@loc_1052C
0001291A 5468 003A                  		addq.w	#2,fb_height(a0)
0001291E                            
0001291E                            @loc_10512:
0001291E 3028 003A                  		move.w	fb_height(a0),d0
00012922 0828 0000 0022             		btst	#0,obStatus(a0)
00012928 6700                       		beq.s	@loc_10520
0001292A 4440                       		neg.w	d0
0001292C                            
0001292C                            @loc_10520:
0001292C 3228 0030                  		move.w	fb_origY(a0),d1
00012930 D240                       		add.w	d0,d1
00012932 3141 000C                  		move.w	d1,obY(a0)
00012936 4E75                       		rts	
00012938                            ; ===========================================================================
00012938                            
00012938                            @loc_1052C:
00012938 5328 0028                  		subq.b	#1,obSubtype(a0)
0001293C 4228 0038                  		clr.b	$38(a0)
00012940 45F8 FC00                  		lea	(v_objstate).w,a2
00012944 7000                       		moveq	#0,d0
00012946 1028 0023                  		move.b	obRespawnNo(a0),d0
0001294A 67D2                       		beq.s	@loc_10512
0001294C 08B2 0000 0002             		bclr	#0,2(a2,d0.w)
00012952 60CA                       		bra.s	@loc_10512
00012954                            ; ===========================================================================
00012954                            
00012954                            @type07:
00012954 4A28 0038                  		tst.b	$38(a0)
00012958 6600                       		bne.s	@loc_1055E
0001295A 4A38 F7EF                  		tst.b	(f_switch+$F).w	; has switch number $F been pressed?
0001295E 6700                       		beq.s	@locret_10578
00012960 117C 0001 0038             		move.b	#1,$38(a0)
00012966 4268 003A                  		clr.w	fb_height(a0)
0001296A                            
0001296A                            @loc_1055E:
0001296A 5268 0008                  		addq.w	#1,obX(a0)
0001296E 3168 0008 0034             		move.w	obX(a0),fb_origX(a0)
00012974 5268 003A                  		addq.w	#1,fb_height(a0)
00012978 0C68 0380 003A             		cmpi.w	#$380,fb_height(a0)
0001297E 6600                       		bne.s	@locret_10578
00012980 11FC 0001 F7CE             			move.b	#1,($FFFFF7CE).w
00012986 4228 0038                  			clr.b	$38(a0)
0001298A 4228 0028                  		clr.b	obSubtype(a0)
0001298E                            
0001298E                            @locret_10578:
0001298E 4E75                       		rts	
00012990                            ; ===========================================================================
00012990                            
00012990                            @type0C:
00012990 4A28 0038                  		tst.b	$38(a0)
00012994 6600                       		bne.s	@loc_10598
00012996 45F8 F7E0                  		lea	(f_switch).w,a2
0001299A 7000                       		moveq	#0,d0
0001299C 1028 003C                  		move.b	fb_type(a0),d0
000129A0 0832 0000 0000             		btst	#0,(a2,d0.w)
000129A6 6700                       		beq.s	@loc_105A2
000129A8 117C 0001 0038             		move.b	#1,$38(a0)
000129AE                            
000129AE                            @loc_10598:
000129AE 4A68 003A                  		tst.w	fb_height(a0)
000129B2 6700                       		beq.s	@loc_105C0
000129B4 5568 003A                  		subq.w	#2,fb_height(a0)
000129B8                            
000129B8                            @loc_105A2:
000129B8 3028 003A                  		move.w	fb_height(a0),d0
000129BC 0828 0000 0022             		btst	#0,obStatus(a0)
000129C2 6700                       		beq.s	@loc_105B4
000129C4 4440                       		neg.w	d0
000129C6 0640 0080                  		addi.w	#$80,d0
000129CA                            
000129CA                            @loc_105B4:
000129CA 3228 0034                  		move.w	fb_origX(a0),d1
000129CE D240                       		add.w	d0,d1
000129D0 3141 0008                  		move.w	d1,obX(a0)
000129D4 4E75                       		rts	
000129D6                            ; ===========================================================================
000129D6                            
000129D6                            @loc_105C0:
000129D6 5228 0028                  		addq.b	#1,obSubtype(a0)
000129DA 4228 0038                  		clr.b	$38(a0)
000129DE 45F8 FC00                  		lea	(v_objstate).w,a2
000129E2 7000                       		moveq	#0,d0
000129E4 1028 0023                  		move.b	obRespawnNo(a0),d0
000129E8 67CE                       		beq.s	@loc_105A2
000129EA 08F2 0000 0002             		bset	#0,2(a2,d0.w)
000129F0 60C6                       		bra.s	@loc_105A2
000129F2                            ; ===========================================================================
000129F2                            
000129F2                            @type0D:
000129F2 4A28 0038                  		tst.b	$38(a0)
000129F6 6600                       		bne.s	@loc_105F8
000129F8 45F8 F7E0                  		lea	(f_switch).w,a2
000129FC 7000                       		moveq	#0,d0
000129FE 1028 003C                  		move.b	fb_type(a0),d0
00012A02 4A32 0000                  		tst.b	(a2,d0.w)
00012A06 6A00                       		bpl.s	@wtf
00012A08 117C 0001 0038             		move.b	#1,$38(a0)
00012A0E                            
00012A0E                            @loc_105F8:
00012A0E 303C 0080                  		move.w	#$80,d0
00012A12 B068 003A                  		cmp.w	fb_height(a0),d0
00012A16 6700                       		beq.s	@loc_10624
00012A18 5468 003A                  		addq.w	#2,fb_height(a0)
00012A1C                            
00012A1C                            @wtf:
00012A1C 3028 003A                  		move.w	fb_height(a0),d0
00012A20 0828 0000 0022             		btst	#0,obStatus(a0)
00012A26 6700                       		beq.s	@loc_10618
00012A28 4440                       		neg.w	d0
00012A2A 0640 0080                  		addi.w	#$80,d0
00012A2E                            
00012A2E                            @loc_10618:
00012A2E 3228 0034                  		move.w	fb_origX(a0),d1
00012A32 D240                       		add.w	d0,d1
00012A34 3141 0008                  		move.w	d1,obX(a0)
00012A38 4E75                       		rts	
00012A3A                            ; ===========================================================================
00012A3A                            
00012A3A                            @loc_10624:
00012A3A 5328 0028                  		subq.b	#1,obSubtype(a0)
00012A3E 4228 0038                  		clr.b	$38(a0)
00012A42 45F8 FC00                  		lea	(v_objstate).w,a2
00012A46 7000                       		moveq	#0,d0
00012A48 1028 0023                  		move.b	obRespawnNo(a0),d0
00012A4C 67CE                       		beq.s	@wtf
00012A4E 08B2 0000 0002             		bclr	#0,2(a2,d0.w)
00012A54 60C6                       		bra.s	@wtf
00012A56                            ; ===========================================================================
00012A56                            
00012A56                            @type08:
00012A56 323C 0010                  		move.w	#$10,d1
00012A5A 7000                       		moveq	#0,d0
00012A5C 1038 FE88                  		move.b	(v_oscillate+$2A).w,d0
00012A60 E248                       		lsr.w	#1,d0
00012A62 3638 FE8A                  		move.w	(v_oscillate+$2C).w,d3
00012A66 6000                       		bra.s	@square
00012A68                            ; ===========================================================================
00012A68                            
00012A68                            @type09:
00012A68 323C 0030                  		move.w	#$30,d1
00012A6C 7000                       		moveq	#0,d0
00012A6E 1038 FE8C                  		move.b	(v_oscillate+$2E).w,d0
00012A72 3638 FE8E                  		move.w	(v_oscillate+$30).w,d3
00012A76 6000                       		bra.s	@square
00012A78                            ; ===========================================================================
00012A78                            
00012A78                            @type0A:
00012A78 323C 0050                  		move.w	#$50,d1
00012A7C 7000                       		moveq	#0,d0
00012A7E 1038 FE90                  		move.b	(v_oscillate+$32).w,d0
00012A82 3638 FE92                  		move.w	(v_oscillate+$34).w,d3
00012A86 6000                       		bra.s	@square
00012A88                            ; ===========================================================================
00012A88                            
00012A88                            @type0B:
00012A88 323C 0070                  		move.w	#$70,d1
00012A8C 7000                       		moveq	#0,d0
00012A8E 1038 FE94                  		move.b	(v_oscillate+$36).w,d0
00012A92 3638 FE96                  		move.w	(v_oscillate+$38).w,d3
00012A96                            
00012A96                            @square:
00012A96 4A43                       		tst.w	d3
00012A98 6600                       		bne.s	@loc_1068E
00012A9A 5228 0022                  		addq.b	#1,obStatus(a0)
00012A9E 0228 0003 0022             		andi.b	#3,obStatus(a0)
00012AA4                            
00012AA4                            @loc_1068E:
00012AA4 1428 0022                  		move.b	obStatus(a0),d2
00012AA8 0202 0003                  		andi.b	#3,d2
00012AAC 6600                       		bne.s	@loc_106AE
00012AAE 9041                       		sub.w	d1,d0
00012AB0 D068 0034                  		add.w	fb_origX(a0),d0
00012AB4 3140 0008                  		move.w	d0,obX(a0)
00012AB8 4441                       		neg.w	d1
00012ABA D268 0030                  		add.w	fb_origY(a0),d1
00012ABE 3141 000C                  		move.w	d1,obY(a0)
00012AC2 4E75                       		rts	
00012AC4                            ; ===========================================================================
00012AC4                            
00012AC4                            @loc_106AE:
00012AC4 5302                       		subq.b	#1,d2
00012AC6 6600                       		bne.s	@loc_106CC
00012AC8 5341                       		subq.w	#1,d1
00012ACA 9041                       		sub.w	d1,d0
00012ACC 4440                       		neg.w	d0
00012ACE D068 0030                  		add.w	fb_origY(a0),d0
00012AD2 3140 000C                  		move.w	d0,obY(a0)
00012AD6 5241                       		addq.w	#1,d1
00012AD8 D268 0034                  		add.w	fb_origX(a0),d1
00012ADC 3141 0008                  		move.w	d1,obX(a0)
00012AE0 4E75                       		rts	
00012AE2                            ; ===========================================================================
00012AE2                            
00012AE2                            @loc_106CC:
00012AE2 5302                       		subq.b	#1,d2
00012AE4 6600                       		bne.s	@loc_106EA
00012AE6 5341                       		subq.w	#1,d1
00012AE8 9041                       		sub.w	d1,d0
00012AEA 4440                       		neg.w	d0
00012AEC D068 0034                  		add.w	fb_origX(a0),d0
00012AF0 3140 0008                  		move.w	d0,obX(a0)
00012AF4 5241                       		addq.w	#1,d1
00012AF6 D268 0030                  		add.w	fb_origY(a0),d1
00012AFA 3141 000C                  		move.w	d1,obY(a0)
00012AFE 4E75                       		rts	
00012B00                            ; ===========================================================================
00012B00                            
00012B00                            @loc_106EA:
00012B00 9041                       		sub.w	d1,d0
00012B02 D068 0030                  		add.w	fb_origY(a0),d0
00012B06 3140 000C                  		move.w	d0,obY(a0)
00012B0A 4441                       		neg.w	d1
00012B0C D268 0034                  		add.w	fb_origX(a0),d1
00012B10 3141 0008                  		move.w	d1,obX(a0)
00012B14 4E75                       		rts	
00012B14 4E75                       		rts	
00012B16                            Map_FBlock:	include	"_maps\Floating Blocks and Doors.asm"
00012B16                            ; ---------------------------------------------------------------------------
00012B16                            ; Sprite mappings - moving blocks (SYZ/SLZ/LZ)
00012B16                            ; ---------------------------------------------------------------------------
00012B16                            Map_FBlock_internal:
00012B16 0000                       		dc.w @syz1x1-Map_FBlock_internal
00012B18 0000                       		dc.w @syz2x2-Map_FBlock_internal
00012B1A 0000                       		dc.w @syz1x2-Map_FBlock_internal
00012B1C 0000                       		dc.w @syzrect2x2-Map_FBlock_internal
00012B1E 0000                       		dc.w @syzrect1x3-Map_FBlock_internal
00012B20 0000                       		dc.w @slz-Map_FBlock_internal
00012B22 0000                       		dc.w @lzvert-Map_FBlock_internal
00012B24 0000                       		dc.w @lzhoriz-Map_FBlock_internal
00012B26 01                         @syz1x1:	dc.b 1
00012B27 F00F 0061 F0               		dc.b $F0, $F, 0, $61, $F0 ; SYZ - 1x1 square block
00012B2C 04                         @syz2x2:	dc.b 4
00012B2D E00F 0061 E0               		dc.b $E0, $F, 0, $61, $E0 ; SYZ - 2x2 square blocks
00012B32 E00F 0061 00               		dc.b $E0, $F, 0, $61, 0
00012B37 000F 0061 E0               		dc.b 0,	$F, 0, $61, $E0
00012B3C 000F 0061 00               		dc.b 0,	$F, 0, $61, 0
00012B41 02                         @syz1x2:	dc.b 2
00012B42 E00F 0061 F0               		dc.b $E0, $F, 0, $61, $F0 ; SYZ - 1x2 square blocks
00012B47 000F 0061 F0               		dc.b 0,	$F, 0, $61, $F0
00012B4C 04                         @syzrect2x2:	dc.b 4
00012B4D E60F 0081 E0               		dc.b $E6, $F, 0, $81, $E0 ; SYZ - 2x2 rectangular blocks
00012B52 E60F 0081 00               		dc.b $E6, $F, 0, $81, 0
00012B57 000F 0081 E0               		dc.b 0,	$F, 0, $81, $E0
00012B5C 000F 0081 00               		dc.b 0,	$F, 0, $81, 0
00012B61 03                         @syzrect1x3:	dc.b 3
00012B62 D90F 0081 F0               		dc.b $D9, $F, 0, $81, $F0 ; SYZ - 1x3 rectangular blocks
00012B67 F30F 0081 F0               		dc.b $F3, $F, 0, $81, $F0
00012B6C 0D0F 0081 F0               		dc.b $D, $F, 0,	$81, $F0
00012B71 01                         @slz:		dc.b 1
00012B72 F00F 0021 F0               		dc.b $F0, $F, 0, $21, $F0 ; SLZ - 1x1 square block
00012B77 02                         @lzvert:	dc.b 2
00012B78 E007 0000 F8               		dc.b $E0, 7, 0,	0, $F8	; LZ - small vertical door
00012B7D 0007 1000 F8               		dc.b 0,	7, $10,	0, $F8
00012B82 04                         @lzhoriz:	dc.b 4
00012B83 F00F 0022 C0               		dc.b $F0, $F, 0, $22, $C0 ; LZ - large horizontal door
00012B88 F00F 0022 E0               		dc.b $F0, $F, 0, $22, $E0
00012B8D F00F 0022 00               		dc.b $F0, $F, 0, $22, 0
00012B92 F00F 0022 20               		dc.b $F0, $F, 0, $22, $20
00012B98 00                         		even
00012B98 00                         		even
00012B98                            
00012B98                            		include	"_incObj\57 Spiked Ball and Chain.asm"
00012B98                            ; ---------------------------------------------------------------------------
00012B98                            ; Object 57 - spiked balls (SYZ, LZ)
00012B98                            ; ---------------------------------------------------------------------------
00012B98                            
00012B98                            SpikeBall:
00012B98 7000                       		moveq	#0,d0
00012B9A 1028 0024                  		move.b	obRoutine(a0),d0
00012B9E 323B 0000                  		move.w	SBall_Index(pc,d0.w),d1
00012BA2 4EFB 1000                  		jmp	SBall_Index(pc,d1.w)
00012BA6                            ; ===========================================================================
00012BA6 0000                       SBall_Index:	dc.w SBall_Main-SBall_Index
00012BA8 0000                       		dc.w SBall_Move-SBall_Index
00012BAA 0000                       		dc.w SBall_Display-SBall_Index
00012BAC                            
00012BAC =00000029                  sball_childs:	equ $29		; number of child objects (1 byte)
00012BAC                            		; $30-$37	; object RAM numbers of childs (1 byte each)
00012BAC =0000003A                  sball_origX:	equ $3A		; centre x-axis position (2 bytes)
00012BAC =00000038                  sball_origY:	equ $38		; centre y-axis position (2 bytes)
00012BAC =0000003C                  sball_radius:	equ $3C		; radius (1 byte)
00012BAC =0000003E                  sball_speed:	equ $3E		; rate of spin (2 bytes)
00012BAC                            ; ===========================================================================
00012BAC                            
00012BAC                            SBall_Main:	; Routine 0
00012BAC 5428 0024                  		addq.b	#2,obRoutine(a0)
00012BB0 217C 0000 0000 0004        		move.l	#Map_SBall,obMap(a0)
00012BB8 317C 03BA 0002             		move.w	#$3BA,obGfx(a0)
00012BBE 117C 0004 0001             		move.b	#4,obRender(a0)
00012BC4 317C 0200 0018             		move.w	#$200,obPriority(a0)
00012BCA 117C 0008 0014             		move.b	#8,obActWid(a0)
00012BD0 3168 0008 003A             		move.w	obX(a0),sball_origX(a0)
00012BD6 3168 000C 0038             		move.w	obY(a0),sball_origY(a0)
00012BDC 117C 0098 0020             		move.b	#$98,obColType(a0) ; SYZ specific code (chain hurts Sonic)
00012BE2 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w ; check if level is LZ
00012BE8 6600                       		bne.s	@notlz
00012BEA                            
00012BEA 117C 0000 0020             		move.b	#0,obColType(a0) ; LZ specific code (chain doesn't hurt)
00012BF0 317C 0310 0002             		move.w	#$310,obGfx(a0)
00012BF6 217C 0000 0000 0004        		move.l	#Map_SBall2,obMap(a0)
00012BFE                            
00012BFE                            	@notlz:
00012BFE 1228 0028                  		move.b	obSubtype(a0),d1 ; get object type
00012C02 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
00012C06 4881                       		ext.w	d1
00012C08 E741                       		asl.w	#3,d1		; multiply by 8
00012C0A 3141 003E                  		move.w	d1,sball_speed(a0) ; set object twirl speed
00012C0E 1028 0022                  		move.b	obStatus(a0),d0
00012C12 E418                       		ror.b	#2,d0
00012C14 0200 00C0                  		andi.b	#$C0,d0
00012C18 1140 0026                  		move.b	d0,obAngle(a0)
00012C1C 45E8 0029                  		lea	sball_childs(a0),a2
00012C20 1228 0028                  		move.b	obSubtype(a0),d1 ; get object type
00012C24 0241 0007                  		andi.w	#7,d1		; read only the	2nd digit
00012C28 14FC 0000                  		move.b	#0,(a2)+
00012C2C 3601                       		move.w	d1,d3
00012C2E E94B                       		lsl.w	#4,d3
00012C30 1143 003C                  		move.b	d3,sball_radius(a0)
00012C34 5341                       		subq.w	#1,d1		; set chain length (type-1)
00012C36 6500                       		bcs.s	@fail
00012C38 0828 0003 0028             		btst	#3,obSubtype(a0)
00012C3E 6700                       		beq.s	@makechain
00012C40 5341                       		subq.w	#1,d1
00012C42 6500                       		bcs.s	@fail
00012C44                            
00012C44                            @makechain:
00012C44 6100 D1C2                  		bsr.w	FindFreeObj
00012C48 6600                       		bne.s	@fail
00012C4A 5228 0029                  		addq.b	#1,sball_childs(a0) ; increment child object counter
00012C4E 3A09                       		move.w	a1,d5		; get child object RAM address
00012C50 0445 D000                  		subi.w	#$D000,d5	; subtract $D000
00012C54 EC4D                       		lsr.w	#6,d5		; divide by $40
00012C56 0245 007F                  		andi.w	#$7F,d5
00012C5A 14C5                       		move.b	d5,(a2)+	; copy child RAM number
00012C5C 137C 0004 0024             		move.b	#4,obRoutine(a1)
00012C62 1290                       		move.b	0(a0),0(a1)
00012C64 2368 0004 0004             		move.l	obMap(a0),obMap(a1)
00012C6A 3368 0002 0002             		move.w	obGfx(a0),obGfx(a1)
00012C70 1368 0001 0001             		move.b	obRender(a0),obRender(a1)
00012C76 3368 0018 0018             		move.w	obPriority(a0),obPriority(a1)
00012C7C 1368 0014 0014             		move.b	obActWid(a0),obActWid(a1)
00012C82 1368 0020 0020             		move.b	obColType(a0),obColType(a1)
00012C88 0403 0010                  		subi.b	#$10,d3
00012C8C 1343 003C                  		move.b	d3,sball_radius(a1)
00012C90 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w ; check if level is LZ
00012C96 6600                       		bne.s	@notlzagain
00012C98                            
00012C98 4A03                       		tst.b	d3
00012C9A 6600                       		bne.s	@notlzagain
00012C9C 137C 0002 001A             		move.b	#2,obFrame(a1)	; use different frame for LZ chain
00012CA2                            
00012CA2                            	@notlzagain:
00012CA2 51C9 FFA0                  		dbf	d1,@makechain ; repeat for length of chain
00012CA6                            
00012CA6                            	@fail:
00012CA6 3A08                       		move.w	a0,d5
00012CA8 0445 D000                  		subi.w	#$D000,d5
00012CAC EC4D                       		lsr.w	#6,d5
00012CAE 0245 007F                  		andi.w	#$7F,d5
00012CB2 14C5                       		move.b	d5,(a2)+
00012CB4 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w ; check if level is LZ
00012CBA 6600                       		bne.s	SBall_Move
00012CBC                            
00012CBC 117C 008B 0020             		move.b	#$8B,obColType(a0) ; if yes, make last spikeball larger
00012CC2 117C 0001 001A             		move.b	#1,obFrame(a0)	; use different	frame
00012CC8                            
00012CC8                            SBall_Move:	; Routine 2
00012CC8 6100 0000                  		bsr.w	@movesub
00012CCC 6000 0000                  		bra.w	@chkdel
00012CD0                            ; ===========================================================================
00012CD0                            
00012CD0                            @movesub:
00012CD0 3028 003E                  		move.w	sball_speed(a0),d0
00012CD4 D168 0026                  		add.w	d0,obAngle(a0)
00012CD8 1028 0026                  		move.b	obAngle(a0),d0
00012CDC 4EB9 0000 3A36             		jsr	(CalcSine).l
00012CE2 3428 0038                  		move.w	sball_origY(a0),d2
00012CE6 3628 003A                  		move.w	sball_origX(a0),d3
00012CEA 45E8 0029                  		lea	sball_childs(a0),a2
00012CEE 7C00                       		moveq	#0,d6
00012CF0 1C1A                       		move.b	(a2)+,d6
00012CF2                            
00012CF2                            	@loop:
00012CF2 7800                       		moveq	#0,d4
00012CF4 181A                       		move.b	(a2)+,d4
00012CF6 ED4C                       		lsl.w	#6,d4
00012CF8 0684 00FF D000             		addi.l	#v_objspace&$FFFFFF,d4
00012CFE 2244                       		movea.l	d4,a1
00012D00 7800                       		moveq	#0,d4
00012D02 1829 003C                  		move.b	sball_radius(a1),d4
00012D06 2A04                       		move.l	d4,d5
00012D08 C9C0                       		muls.w	d0,d4
00012D0A E084                       		asr.l	#8,d4
00012D0C CBC1                       		muls.w	d1,d5
00012D0E E085                       		asr.l	#8,d5
00012D10 D842                       		add.w	d2,d4
00012D12 DA43                       		add.w	d3,d5
00012D14 3344 000C                  		move.w	d4,obY(a1)
00012D18 3345 0008                  		move.w	d5,obX(a1)
00012D1C 51CE FFD4                  		dbf	d6,@loop
00012D20 4E75                       		rts	
00012D22                            ; ===========================================================================
00012D22                            
00012D22                            @chkdel:
00012D40 6000 CC3A                  		bra.w	DisplaySprite
00012D44                            ; ===========================================================================
00012D44                            
00012D44                            @delete:
00012D44 7400                       		moveq	#0,d2
00012D46 45E8 0029                  		lea	sball_childs(a0),a2
00012D4A 141A                       		move.b	(a2)+,d2
00012D4C                            
00012D4C                            	@deleteloop:
00012D4C 7000                       		moveq	#0,d0
00012D4E 101A                       		move.b	(a2)+,d0
00012D50 ED48                       		lsl.w	#6,d0
00012D52 0680 00FF D000             		addi.l	#v_objspace&$FFFFFF,d0
00012D58 2240                       		movea.l	d0,a1
00012D5A 6100 CC62                  		bsr.w	DeleteChild
00012D5E 51CA FFEC                  		dbf	d2,@deleteloop ; delete all pieces of	chain
00012D62                            
00012D62 4E75                       		rts	
00012D64                            ; ===========================================================================
00012D64                            
00012D64                            SBall_Display:	; Routine 4
00012D64 6000 CC16                  		bra.w	DisplaySprite
00012D64 6000 CC16                  		bra.w	DisplaySprite
00012D68                            Map_SBall:	include	"_maps\Spiked Ball and Chain (SYZ).asm"
00012D68                            ; ---------------------------------------------------------------------------
00012D68                            ; Sprite mappings - chain of spiked balls (SYZ)
00012D68                            ; ---------------------------------------------------------------------------
00012D68                            Map_SBall_internal:
00012D68 0000                       		dc.w @0-Map_SBall_internal
00012D6A 01                         @0:		dc.b 1
00012D6B F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00012D70                            		even
00012D70                            		even
00012D70                            Map_SBall2:	include	"_maps\Spiked Ball and Chain (LZ).asm"
00012D70                            ; ---------------------------------------------------------------------------
00012D70                            ; Sprite mappings - spiked ball	on a chain (LZ)
00012D70                            ; ---------------------------------------------------------------------------
00012D70                            Map_SBall2_internal:
00012D70 0000                       		dc.w @chain-Map_SBall2_internal
00012D72 0000                       		dc.w @spikeball-Map_SBall2_internal
00012D74 0000                       		dc.w @base-Map_SBall2_internal
00012D76 01                         @chain:		dc.b 1
00012D77 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8	; chain link
00012D7C 01                         @spikeball:	dc.b 1
00012D7D F00F 0004 F0               		dc.b $F0, $F, 0, 4, $F0	; spikeball
00012D82 01                         @base:		dc.b 1
00012D83 F805 0014 F8               		dc.b $F8, 5, 0,	$14, $F8 ; wall attachment
00012D88                            		even
00012D88                            		even
00012D88                            		include	"_incObj\58 Big Spiked Ball.asm"
00012D88                            ; ---------------------------------------------------------------------------
00012D88                            ; Object 58 - giant spiked balls (SYZ)
00012D88                            ; ---------------------------------------------------------------------------
00012D88                            
00012D88                            BigSpikeBall:
00012D88 7000                       		moveq	#0,d0
00012D8A 1028 0024                  		move.b	obRoutine(a0),d0
00012D8E 323B 0000                  		move.w	BBall_Index(pc,d0.w),d1
00012D92 4EFB 1000                  		jmp	BBall_Index(pc,d1.w)
00012D96                            ; ===========================================================================
00012D96 0000                       BBall_Index:	dc.w BBall_Main-BBall_Index
00012D98 0000                       		dc.w BBall_Move-BBall_Index
00012D9A                            
00012D9A =0000003A                  bball_origX:	equ $3A		; original x-axis position
00012D9A =00000038                  bball_origY:	equ $38		; original y-axis position
00012D9A =0000003C                  bball_radius:	equ $3C		; radius of circle
00012D9A =0000003E                  bball_speed:	equ $3E		; speed
00012D9A                            ; ===========================================================================
00012D9A                            
00012D9A                            BBall_Main:	; Routine 0
00012D9A 5428 0024                  		addq.b	#2,obRoutine(a0)
00012D9E 217C 0000 0000 0004        		move.l	#Map_BBall,obMap(a0)
00012DA6 317C 0396 0002             		move.w	#$396,obGfx(a0)
00012DAC 117C 0004 0001             		move.b	#4,obRender(a0)
00012DB2 317C 0200 0018             		move.w	#$200,obPriority(a0)
00012DB8 117C 0018 0014             		move.b	#$18,obActWid(a0)
00012DBE 3168 0008 003A             		move.w	obX(a0),bball_origX(a0)
00012DC4 3168 000C 0038             		move.w	obY(a0),bball_origY(a0)
00012DCA 117C 0086 0020             		move.b	#$86,obColType(a0)
00012DD0 1228 0028                  		move.b	obSubtype(a0),d1 ; get object type
00012DD4 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
00012DD8 4881                       		ext.w	d1
00012DDA E741                       		asl.w	#3,d1		; multiply by 8
00012DDC 3141 003E                  		move.w	d1,bball_speed(a0) ; set object speed
00012DE0 1028 0022                  		move.b	obStatus(a0),d0
00012DE4 E418                       		ror.b	#2,d0
00012DE6 0200 00C0                  		andi.b	#$C0,d0
00012DEA 1140 0026                  		move.b	d0,obAngle(a0)
00012DEE 117C 0050 003C             		move.b	#$50,bball_radius(a0) ; set radius of circle motion
00012DF4                            
00012DF4                            BBall_Move:	; Routine 2
00012DF4 7000                       		moveq	#0,d0
00012DF6 1028 0028                  		move.b	obSubtype(a0),d0 ; get object type
00012DFA 0240 0007                  		andi.w	#7,d0		; read only the	2nd digit
00012DFE D040                       		add.w	d0,d0
00012E00 323B 0000                  		move.w	@index(pc,d0.w),d1
00012E04 4EBB 1000                  		jsr	@index(pc,d1.w)
00012E26 6000 CB54                  		bra.w	DisplaySprite
00012E2A                            ; ===========================================================================
00012E2A 0000                       @index:		dc.w @type00-@index
00012E2C 0000                       		dc.w @type01-@index
00012E2E 0000                       		dc.w @type02-@index
00012E30 0000                       		dc.w @type03-@index
00012E32                            ; ===========================================================================
00012E32                            
00012E32                            @type00:
00012E32 4E75                       		rts	
00012E34                            ; ===========================================================================
00012E34                            
00012E34                            @type01:
00012E34 323C 0060                  		move.w	#$60,d1
00012E38 7000                       		moveq	#0,d0
00012E3A 1038 FE6C                  		move.b	(v_oscillate+$E).w,d0
00012E3E 0828 0000 0022             		btst	#0,obStatus(a0)
00012E44 6700                       		beq.s	@noflip1
00012E46 4440                       		neg.w	d0
00012E48 D041                       		add.w	d1,d0
00012E4A                            
00012E4A                            	@noflip1:
00012E4A 3228 003A                  		move.w	bball_origX(a0),d1
00012E4E 9240                       		sub.w	d0,d1
00012E50 3141 0008                  		move.w	d1,obX(a0)	; move object horizontally
00012E54 4E75                       		rts	
00012E56                            ; ===========================================================================
00012E56                            
00012E56                            @type02:
00012E56 323C 0060                  		move.w	#$60,d1
00012E5A 7000                       		moveq	#0,d0
00012E5C 1038 FE6C                  		move.b	(v_oscillate+$E).w,d0
00012E60 0828 0000 0022             		btst	#0,obStatus(a0)
00012E66 6700                       		beq.s	@noflip2
00012E68 4440                       		neg.w	d0
00012E6A 0640 0080                  		addi.w	#$80,d0
00012E6E                            
00012E6E                            	@noflip2:
00012E6E 3228 0038                  		move.w	bball_origY(a0),d1
00012E72 9240                       		sub.w	d0,d1
00012E74 3141 000C                  		move.w	d1,obY(a0)	; move object vertically
00012E78 4E75                       		rts	
00012E7A                            ; ===========================================================================
00012E7A                            
00012E7A                            @type03:
00012E7A 3028 003E                  		move.w	bball_speed(a0),d0
00012E7E D168 0026                  		add.w	d0,obAngle(a0)
00012E82 1028 0026                  		move.b	obAngle(a0),d0
00012E86 4EB9 0000 3A36             		jsr	(CalcSine).l
00012E8C 3428 0038                  		move.w	bball_origY(a0),d2
00012E90 3628 003A                  		move.w	bball_origX(a0),d3
00012E94 7800                       		moveq	#0,d4
00012E96 1828 003C                  		move.b	bball_radius(a0),d4
00012E9A 2A04                       		move.l	d4,d5
00012E9C C9C0                       		muls.w	d0,d4
00012E9E E084                       		asr.l	#8,d4
00012EA0 CBC1                       		muls.w	d1,d5
00012EA2 E085                       		asr.l	#8,d5
00012EA4 D842                       		add.w	d2,d4
00012EA6 DA43                       		add.w	d3,d5
00012EA8 3144 000C                  		move.w	d4,obY(a0)	; move object circularly
00012EAC 3145 0008                  		move.w	d5,obX(a0)
00012EB0 4E75                       		rts	
00012EB0 4E75                       		rts	
00012EB2                            Map_BBall:	include	"_maps\Big Spiked Ball.asm"
00012EB2                            ; --------------------------------------------------------------------------------
00012EB2                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
00012EB2                            ; --------------------------------------------------------------------------------
00012EB2                            
00012EB2                            SME_u_DKx:	
00012EB2 0000 0000                  		dc.w SME_u_DKx_6-SME_u_DKx, SME_u_DKx_20-SME_u_DKx	
00012EB6 0000                       		dc.w SME_u_DKx_26-SME_u_DKx	
00012EB8 05                         SME_u_DKx_6:	dc.b 5	
00012EB9 E804 0000 F8               		dc.b $E8, 4, 0, 0, $F8	
00012EBE F00F 0002 F0               		dc.b $F0, $F, 0, 2, $F0	
00012EC3 F801 0012 E8               		dc.b $F8, 1, 0, $12, $E8	
00012EC8 F801 0014 10               		dc.b $F8, 1, 0, $14, $10	
00012ECD 1004 0016 F8               		dc.b $10, 4, 0, $16, $F8	
00012ED2 01                         SME_u_DKx_20:	dc.b 1	
00012ED3 F805 0020 F8               		dc.b $F8, 5, 0, $20, $F8	
00012ED8 02                         SME_u_DKx_26:	dc.b 2	
00012ED9 F80D 0018 F0               		dc.b $F8, $D, 0, $18, $F0	
00012EDE E80D 1018 F0               		dc.b $E8, $D, $10, $18, $F0	
00012EE4 00                         		even
00012EE4 00                         		even
00012EE4                            		include	"_incObj\59 SLZ Elevators.asm"
00012EE4                            ; ---------------------------------------------------------------------------
00012EE4                            ; Object 59 - platforms	that move when you stand on them (SLZ)
00012EE4                            ; ---------------------------------------------------------------------------
00012EE4                            
00012EE4                            Elevator:
00012EE4 7000                       		moveq	#0,d0
00012EE6 1028 0024                  		move.b	obRoutine(a0),d0
00012EEA 323B 0000                  		move.w	Elev_Index(pc,d0.w),d1
00012EEE 4EBB 1000                  		jsr	Elev_Index(pc,d1.w)
00012F10 6000 CA6A                  		bra.w	DisplaySprite
00012F14                            ; ===========================================================================
00012F14 0000                       Elev_Index:	dc.w Elev_Main-Elev_Index
00012F16 0000                       		dc.w Elev_Platform-Elev_Index
00012F18 0000                       		dc.w Elev_Action-Elev_Index
00012F1A 0000                       		dc.w Elev_MakeMulti-Elev_Index
00012F1C                            
00012F1C =00000032                  elev_origX:	equ $32		; original x-axis position
00012F1C =00000030                  elev_origY:	equ $30		; original y-axis position
00012F1C =0000003C                  elev_dist:	equ $3C		; distance to move (2 bytes)
00012F1C                            
00012F1C 2800                       Elev_Var1:	dc.b $28, 0		; width, frame number
00012F1E                            
00012F1E 1001                       Elev_Var2:	dc.b $10, 1		; distance to move, action type
00012F20 2001                       		dc.b $20, 1
00012F22 3401                       		dc.b $34, 1
00012F24 1003                       		dc.b $10, 3
00012F26 2003                       		dc.b $20, 3
00012F28 3403                       		dc.b $34, 3
00012F2A 1401                       		dc.b $14, 1
00012F2C 2401                       		dc.b $24, 1
00012F2E 2C01                       		dc.b $2C, 1
00012F30 1403                       		dc.b $14, 3
00012F32 2403                       		dc.b $24, 3
00012F34 2C03                       		dc.b $2C, 3
00012F36 2005                       		dc.b $20, 5
00012F38 2007                       		dc.b $20, 7
00012F3A 3009                       		dc.b $30, 9
00012F3C                            ; ===========================================================================
00012F3C                            
00012F3C                            Elev_Main:	; Routine 0
00012F3C 5428 0024                  		addq.b	#2,obRoutine(a0)
00012F40 7000                       		moveq	#0,d0
00012F42 1028 0028                  		move.b	obSubtype(a0),d0
00012F46 6A00                       		bpl.s	@normal		; branch for types 00-7F
00012F48 5828 0024                  		addq.b	#4,obRoutine(a0) ; goto Elev_MakeMulti next
00012F4C 0240 007F                  		andi.w	#$7F,d0
00012F50 C0FC 0006                  		mulu.w	#6,d0
00012F54 3140 003C                  		move.w	d0,elev_dist(a0)
00012F58 3140 003E                  		move.w	d0,$3E(a0)
00012F5C 588F                       		addq.l	#4,sp
00012F5E 4E75                       		rts	
00012F60                            ; ===========================================================================
00012F60                            
00012F60                            	@normal:
00012F60 E648                       		lsr.w	#3,d0
00012F62 0240 001E                  		andi.w	#$1E,d0
00012F66 45FB 00B4                  		lea	Elev_Var1(pc,d0.w),a2
00012F6A 115A 0014                  		move.b	(a2)+,obActWid(a0) ; set width
00012F6E 115A 001A                  		move.b	(a2)+,obFrame(a0) ; set frame
00012F72 7000                       		moveq	#0,d0
00012F74 1028 0028                  		move.b	obSubtype(a0),d0
00012F78 D040                       		add.w	d0,d0
00012F7A 0240 001E                  		andi.w	#$1E,d0
00012F7E 45FB 009E                  		lea	Elev_Var2(pc,d0.w),a2
00012F82 101A                       		move.b	(a2)+,d0
00012F84 E548                       		lsl.w	#2,d0
00012F86 3140 003C                  		move.w	d0,elev_dist(a0)	; set distance to move
00012F8A 115A 0028                  		move.b	(a2)+,obSubtype(a0)	; set type
00012F8E 217C 0000 0000 0004        		move.l	#Map_Elev,obMap(a0)
00012F96 317C 4000 0002             		move.w	#$4000,obGfx(a0)
00012F9C 117C 0004 0001             		move.b	#4,obRender(a0)
00012FA2 317C 0200 0018             		move.w	#$200,obPriority(a0)
00012FA8 3168 0008 0032             		move.w	obX(a0),elev_origX(a0)
00012FAE 3168 000C 0030             		move.w	obY(a0),elev_origY(a0)
00012FB4                            
00012FB4                            Elev_Platform:	; Routine 2
00012FB4 7200                       		moveq	#0,d1
00012FB6 1228 0014                  		move.b	obActWid(a0),d1
00012FBA 4EB9 0000 908A             		jsr	(PlatformObject).l
00012FC0 6000 0000                  		bra.w	Elev_Types
00012FC4                            ; ===========================================================================
00012FC4                            
00012FC4                            Elev_Action:	; Routine 4
00012FC4 7200                       		moveq	#0,d1
00012FC6 1228 0014                  		move.b	obActWid(a0),d1
00012FCA 4EB9 0000 91FE             		jsr	(ExitPlatform).l
00012FD0 3F28 0008                  		move.w	obX(a0),-(sp)
00012FD4 6100 0000                  		bsr.w	Elev_Types
00012FD8 341F                       		move.w	(sp)+,d2
00012FDA 4A10                       		tst.b	0(a0)
00012FDC 6700                       		beq.s	@deleted
00012FDE 4EF9 0000 9768             		jmp	(MvSonicOnPtfm2).l
00012FE4                            
00012FE4                            	@deleted:
00012FE4 4E75                       		rts	
00012FE6                            ; ===========================================================================
00012FE6                            
00012FE6                            Elev_Types:
00012FE6 7000                       		moveq	#0,d0
00012FE8 1028 0028                  		move.b	obSubtype(a0),d0
00012FEC 0240 000F                  		andi.w	#$F,d0
00012FF0 D040                       		add.w	d0,d0
00012FF2 323B 0000                  		move.w	@index(pc,d0.w),d1
00012FF6 4EFB 1000                  		jmp	@index(pc,d1.w)
00012FFA                            ; ===========================================================================
00012FFA 0000 0000                  @index:		dc.w @type00-@index, @type01-@index
00012FFE 0000 0000                  		dc.w @type02-@index, @type01-@index
00013002 0000 0000                  		dc.w @type04-@index, @type01-@index
00013006 0000 0000                  		dc.w @type06-@index, @type01-@index
0001300A 0000 0000                  		dc.w @type08-@index, @type09-@index
0001300E                            ; ===========================================================================
0001300E                            
0001300E                            @type00:
0001300E 4E75                       		rts	
00013010                            ; ===========================================================================
00013010                            
00013010                            @type01:
00013010 0C28 0004 0024             		cmpi.b	#4,obRoutine(a0) ; check if Sonic is standing on the object
00013016 6600                       		bne.s	@notstanding
00013018 5228 0028                  		addq.b	#1,obSubtype(a0) ; if yes, add 1 to type
0001301C                            
0001301C                            	@notstanding:
0001301C 4E75                       		rts	
0001301E                            ; ===========================================================================
0001301E                            
0001301E                            @type02:
0001301E 6100 0000                  		bsr.w	Elev_Move
00013022 3028 0034                  		move.w	$34(a0),d0
00013026 4440                       		neg.w	d0
00013028 D068 0030                  		add.w	elev_origY(a0),d0
0001302C 3140 000C                  		move.w	d0,obY(a0)
00013030 4E75                       		rts	
00013032                            ; ===========================================================================
00013032                            
00013032                            @type04:
00013032 6100 0000                  		bsr.w	Elev_Move
00013036 3028 0034                  		move.w	$34(a0),d0
0001303A D068 0030                  		add.w	elev_origY(a0),d0
0001303E 3140 000C                  		move.w	d0,obY(a0)
00013042 4E75                       		rts	
00013044                            ; ===========================================================================
00013044                            
00013044                            @type06:
00013044 6100 0000                  		bsr.w	Elev_Move
00013048 3028 0034                  		move.w	$34(a0),d0
0001304C E240                       		asr.w	#1,d0
0001304E 4440                       		neg.w	d0
00013050 D068 0030                  		add.w	elev_origY(a0),d0
00013054 3140 000C                  		move.w	d0,obY(a0)
00013058 3028 0034                  		move.w	$34(a0),d0
0001305C D068 0032                  		add.w	elev_origX(a0),d0
00013060 3140 0008                  		move.w	d0,obX(a0)
00013064 4E75                       		rts	
00013066                            ; ===========================================================================
00013066                            
00013066                            @type08:
00013066 6100 0000                  		bsr.w	Elev_Move
0001306A 3028 0034                  		move.w	$34(a0),d0
0001306E E240                       		asr.w	#1,d0
00013070 D068 0030                  		add.w	elev_origY(a0),d0
00013074 3140 000C                  		move.w	d0,obY(a0)
00013078 3028 0034                  		move.w	$34(a0),d0
0001307C 4440                       		neg.w	d0
0001307E D068 0032                  		add.w	elev_origX(a0),d0
00013082 3140 0008                  		move.w	d0,obX(a0)
00013086 4E75                       		rts	
00013088                            ; ===========================================================================
00013088                            
00013088                            @type09:
00013088 6100 0000                  		bsr.w	Elev_Move
0001308C 3028 0034                  		move.w	$34(a0),d0
00013090 4440                       		neg.w	d0
00013092 D068 0030                  		add.w	elev_origY(a0),d0
00013096 3140 000C                  		move.w	d0,obY(a0)
0001309A 4A28 0028                  		tst.b	obSubtype(a0)
0001309E 6700 0000                  		beq.w	@typereset
000130A2 4E75                       		rts	
000130A4                            ; ===========================================================================
000130A4                            
000130A4                            	@typereset:
000130A4 0828 0003 0022             		btst	#3,obStatus(a0)
000130AA 6700                       		beq.s	@delete
000130AC 08E9 0001 0022             		bset	#1,obStatus(a1)
000130B2 08A9 0003 0022             		bclr	#3,obStatus(a1)
000130B8 137C 0002 0024             		move.b	#2,obRoutine(a1)
000130BE                            
000130BE                            	@delete:
000130BE 6000 C8FC                  		bra.w	DeleteObject
000130C2                            
000130C2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000130C2                            
000130C2                            
000130C2                            Elev_Move:
000130C2 3028 0038                  		move.w	$38(a0),d0
000130C6 4A28 003A                  		tst.b	$3A(a0)
000130CA 6600                       		bne.s	loc_10CC8
000130CC 0C40 0800                  		cmpi.w	#$800,d0
000130D0 6400                       		bcc.s	loc_10CD0
000130D2 0640 0010                  		addi.w	#$10,d0
000130D6 6000                       		bra.s	loc_10CD0
000130D8                            ; ===========================================================================
000130D8                            
000130D8                            loc_10CC8:
000130D8 4A40                       		tst.w	d0
000130DA 6700                       		beq.s	loc_10CD0
000130DC 0440 0010                  		subi.w	#$10,d0
000130E0                            
000130E0                            loc_10CD0:
000130E0 3140 0038                  		move.w	d0,$38(a0)
000130E4 48C0                       		ext.l	d0
000130E6 E180                       		asl.l	#8,d0
000130E8 D0A8 0034                  		add.l	$34(a0),d0
000130EC 2140 0034                  		move.l	d0,$34(a0)
000130F0 4840                       		swap	d0
000130F2 3428 003C                  		move.w	elev_dist(a0),d2
000130F6 B042                       		cmp.w	d2,d0
000130F8 6300                       		bls.s	loc_10CF0
000130FA 117C 0001 003A             		move.b	#1,$3A(a0)
00013100                            
00013100                            loc_10CF0:
00013100 D442                       		add.w	d2,d2
00013102 B042                       		cmp.w	d2,d0
00013104 6600                       		bne.s	locret_10CFA
00013106 4228 0028                  		clr.b	obSubtype(a0)
0001310A                            
0001310A                            locret_10CFA:
0001310A 4E75                       		rts	
0001310C                            ; End of function Elev_Move
0001310C                            
0001310C                            ; ===========================================================================
0001310C                            
0001310C                            Elev_MakeMulti:	; Routine 6
0001310C 5368 003C                  		subq.w	#1,elev_dist(a0)
00013110 6600                       		bne.s	@chkdel
00013112 3168 003E 003C             		move.w	$3E(a0),elev_dist(a0)
00013118 6100 CCEE                  		bsr.w	FindFreeObj
0001311C 6600                       		bne.s	@chkdel
0001311E 12BC 0059                  		move.b	#id_Elevator,0(a1) ; duplicate the object
00013122 3368 0008 0008             		move.w	obX(a0),obX(a1)
00013128 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001312E 137C 000E 0028             		move.b	#$E,obSubtype(a1)
00013134                            
00013134                            @chkdel:
00013134 588F                       		addq.l	#4,sp
00013154 4E75                       		rts	
00013154 4E75                       		rts	
00013156                            Map_Elev:	include	"_maps\SLZ Elevators.asm"
00013156                            ; ---------------------------------------------------------------------------
00013156                            ; Sprite mappings - platforms that move	when you stand on them (SLZ)
00013156                            ; ---------------------------------------------------------------------------
00013156                            Map_Elev_internal:
00013156 0000                       		dc.w @elevator-Map_Elev_internal
00013158 03                         @elevator:	dc.b 3
00013159 F80F 0041 D8               		dc.b $F8, $F, 0, $41, $D8
0001315E F80F 0041 F8               		dc.b $F8, $F, 0, $41, $F8
00013163 F807 0041 18               		dc.b $F8, 7, 0,	$41, $18
00013168                            		even
00013168                            		even
00013168                            		include	"_incObj\5A SLZ Circling Platform.asm"
00013168                            ; ---------------------------------------------------------------------------
00013168                            ; Object 5A - platforms	moving in circles (SLZ)
00013168                            ; ---------------------------------------------------------------------------
00013168                            
00013168                            CirclingPlatform:
00013168 7000                       		moveq	#0,d0
0001316A 1028 0024                  		move.b	obRoutine(a0),d0
0001316E 323B 0000                  		move.w	Circ_Index(pc,d0.w),d1
00013172 4EBB 1000                  		jsr	Circ_Index(pc,d1.w)
00013194 6000 C7E6                  		bra.w	DisplaySprite
00013198                            ; ===========================================================================
00013198 0000                       Circ_Index:	dc.w Circ_Main-Circ_Index
0001319A 0000                       		dc.w Circ_Platform-Circ_Index
0001319C 0000                       		dc.w Circ_Action-Circ_Index
0001319E                            
0001319E =00000032                  circ_origX:	equ $32		; original x-axis position
0001319E =00000030                  circ_origY:	equ $30		; original y-axis position
0001319E                            ; ===========================================================================
0001319E                            
0001319E                            Circ_Main:	; Routine 0
0001319E 5428 0024                  		addq.b	#2,obRoutine(a0)
000131A2 217C 0000 0000 0004        		move.l	#Map_Circ,obMap(a0)
000131AA 317C 4000 0002             		move.w	#$4000,obGfx(a0)
000131B0 117C 0004 0001             		move.b	#4,obRender(a0)
000131B6 317C 0200 0018             		move.w	#$200,obPriority(a0)
000131BC 117C 0018 0014             		move.b	#$18,obActWid(a0)
000131C2 3168 0008 0032             		move.w	obX(a0),circ_origX(a0)
000131C8 3168 000C 0030             		move.w	obY(a0),circ_origY(a0)
000131CE                            
000131CE                            Circ_Platform:	; Routine 2
000131CE 7200                       		moveq	#0,d1
000131D0 1228 0014                  		move.b	obActWid(a0),d1
000131D4 4EB9 0000 908A             		jsr	(PlatformObject).l
000131DA 6000 0000                  		bra.w	Circ_Types
000131DE                            ; ===========================================================================
000131DE                            
000131DE                            Circ_Action:	; Routine 4
000131DE 7200                       		moveq	#0,d1
000131E0 1228 0014                  		move.b	obActWid(a0),d1
000131E4 4EB9 0000 91FE             		jsr	(ExitPlatform).l
000131EA 3F28 0008                  		move.w	obX(a0),-(sp)
000131EE 6100 0000                  		bsr.w	Circ_Types
000131F2 341F                       		move.w	(sp)+,d2
000131F4 4EF9 0000 9768             		jmp	(MvSonicOnPtfm2).l
000131FA                            ; ===========================================================================
000131FA                            
000131FA                            Circ_Types:
000131FA 7000                       		moveq	#0,d0
000131FC 1028 0028                  		move.b	obSubtype(a0),d0
00013200 0240 000C                  		andi.w	#$C,d0
00013204 E248                       		lsr.w	#1,d0
00013206 323B 0000                  		move.w	@index(pc,d0.w),d1
0001320A 4EFB 1000                  		jmp	@index(pc,d1.w)
0001320E                            ; ===========================================================================
0001320E 0000                       @index:		dc.w @type00-@index
00013210 0000                       		dc.w @type04-@index
00013212                            ; ===========================================================================
00013212                            
00013212                            @type00:
00013212 1238 FE80                  		move.b	(v_oscillate+$22).w,d1 ; get rotating value
00013216 0401 0050                  		subi.b	#$50,d1		; set radius of circle
0001321A 4881                       		ext.w	d1
0001321C 1438 FE84                  		move.b	(v_oscillate+$26).w,d2
00013220 0402 0050                  		subi.b	#$50,d2
00013224 4882                       		ext.w	d2
00013226 0828 0000 0028             		btst	#0,obSubtype(a0)
0001322C 6700                       		beq.s	@noshift00a
0001322E 4441                       		neg.w	d1
00013230 4442                       		neg.w	d2
00013232                            
00013232                            	@noshift00a:
00013232 0828 0001 0028             		btst	#1,obSubtype(a0)
00013238 6700                       		beq.s	@noshift00b
0001323A 4441                       		neg.w	d1
0001323C C342                       		exg	d1,d2
0001323E                            
0001323E                            	@noshift00b:
0001323E D268 0032                  		add.w	circ_origX(a0),d1
00013242 3141 0008                  		move.w	d1,obX(a0)
00013246 D468 0030                  		add.w	circ_origY(a0),d2
0001324A 3142 000C                  		move.w	d2,obY(a0)
0001324E 4E75                       		rts	
00013250                            ; ===========================================================================
00013250                            
00013250                            @type04:
00013250 1238 FE80                  		move.b	(v_oscillate+$22).w,d1
00013254 0401 0050                  		subi.b	#$50,d1
00013258 4881                       		ext.w	d1
0001325A 1438 FE84                  		move.b	(v_oscillate+$26).w,d2
0001325E 0402 0050                  		subi.b	#$50,d2
00013262 4882                       		ext.w	d2
00013264 0828 0000 0028             		btst	#0,obSubtype(a0)
0001326A 6700                       		beq.s	@noshift04a
0001326C 4441                       		neg.w	d1
0001326E 4442                       		neg.w	d2
00013270                            
00013270                            	@noshift04a:
00013270 0828 0001 0028             		btst	#1,obSubtype(a0)
00013276 6700                       		beq.s	@noshift04b
00013278 4441                       		neg.w	d1
0001327A C342                       		exg	d1,d2
0001327C                            
0001327C                            	@noshift04b:
0001327C 4441                       		neg.w	d1
0001327E D268 0032                  		add.w	circ_origX(a0),d1
00013282 3141 0008                  		move.w	d1,obX(a0)
00013286 D468 0030                  		add.w	circ_origY(a0),d2
0001328A 3142 000C                  		move.w	d2,obY(a0)
0001328E 4E75                       		rts	
0001328E 4E75                       		rts	
00013290                            Map_Circ:	include	"_maps\SLZ Circling Platform.asm"
00013290                            ; ---------------------------------------------------------------------------
00013290                            ; Sprite mappings - platforms that move	in circles (SLZ)
00013290                            ; ---------------------------------------------------------------------------
00013290                            Map_Circ_internal:
00013290 0000                       		dc.w @platform-Map_Circ_internal
00013292 02                         @platform:	dc.b 2
00013293 F809 0051 E8               		dc.b $F8, 9, 0,	$51, $E8
00013298 F809 0851 00               		dc.b $F8, 9, 8,	$51, 0
0001329E 00                         		even
0001329E 00                         		even
0001329E                            		include	"_incObj\5B Staircase.asm"
0001329E                            ; ---------------------------------------------------------------------------
0001329E                            ; Object 5B - blocks that form a staircase (SLZ)
0001329E                            ; ---------------------------------------------------------------------------
0001329E                            
0001329E                            Staircase:
0001329E 7000                       		moveq	#0,d0
000132A0 1028 0024                  		move.b	obRoutine(a0),d0
000132A4 323B 0000                  		move.w	Stair_Index(pc,d0.w),d1
000132A8 4EBB 1000                  		jsr	Stair_Index(pc,d1.w)
000132CA 6000 C6B0                  		bra.w	DisplaySprite
000132CE                            ; ===========================================================================
000132CE 0000                       Stair_Index:	dc.w Stair_Main-Stair_Index
000132D0 0000                       		dc.w Stair_Move-Stair_Index
000132D2 0000                       		dc.w Stair_Solid-Stair_Index
000132D4                            
000132D4 =00000030                  stair_origX:	equ $30		; original x-axis position
000132D4 =00000032                  stair_origY:	equ $32		; original y-axis position
000132D4                            
000132D4 =0000003C                  stair_parent:	equ $3C		; address of parent object (4 bytes)
000132D4                            ; ===========================================================================
000132D4                            
000132D4                            Stair_Main:	; Routine 0
000132D4 5428 0024                  		addq.b	#2,obRoutine(a0)
000132D8 7638                       		moveq	#$38,d3
000132DA 7801                       		moveq	#1,d4
000132DC 0828 0000 0022             		btst	#0,obStatus(a0)	; is object flipped?
000132E2 6700                       		beq.s	@notflipped	; if not, branch
000132E4 763B                       		moveq	#$3B,d3
000132E6 78FF                       		moveq	#-1,d4
000132E8                            
000132E8                            	@notflipped:
000132E8 3428 0008                  		move.w	obX(a0),d2
000132EC 2248                       		movea.l	a0,a1
000132EE 7203                       		moveq	#3,d1
000132F0 6000                       		bra.s	@makeblocks
000132F2                            ; ===========================================================================
000132F2                            
000132F2                            @loop:
000132F2 6100 CB2A                  		bsr.w	FindNextFreeObj
000132F6 6600 0000                  		bne.w	@fail
000132FA 137C 0004 0024             		move.b	#4,obRoutine(a1)
00013300                            
00013300                            @makeblocks:
00013300 12BC 005B                  		move.b	#id_Staircase,0(a1) ; load another block object
00013304 237C 0000 0000 0004        		move.l	#Map_Stair,obMap(a1)
0001330C 337C 4000 0002             		move.w	#$4000,obGfx(a1)
00013312 137C 0004 0001             		move.b	#4,obRender(a1)
00013318 337C 0180 0018             		move.w	#$180,obPriority(a1)
0001331E 137C 0010 0014             		move.b	#$10,obActWid(a1)
00013324 1368 0028 0028             		move.b	obSubtype(a0),obSubtype(a1)
0001332A 3342 0008                  		move.w	d2,obX(a1)
0001332E 3368 000C 000C             		move.w	obY(a0),obY(a1)
00013334 3368 0008 0030             		move.w	obX(a0),stair_origX(a1)
0001333A 3369 000C 0032             		move.w	obY(a1),stair_origY(a1)
00013340 0642 0020                  		addi.w	#$20,d2
00013344 1343 0037                  		move.b	d3,$37(a1)
00013348 2348 003C                  		move.l	a0,stair_parent(a1)
0001334C D604                       		add.b	d4,d3
0001334E 51C9 FFA2                  		dbf	d1,@loop	; repeat sequence 3 times
00013352                            
00013352                            	@fail:
00013352                            
00013352                            Stair_Move:	; Routine 2
00013352 7000                       		moveq	#0,d0
00013354 1028 0028                  		move.b	obSubtype(a0),d0
00013358 0240 0007                  		andi.w	#7,d0
0001335C D040                       		add.w	d0,d0
0001335E 323B 0000                  		move.w	Stair_TypeIndex(pc,d0.w),d1
00013362 4EBB 1000                  		jsr	Stair_TypeIndex(pc,d1.w)
00013366                            
00013366                            Stair_Solid:	; Routine 4
00013366 2468 003C                  		movea.l	stair_parent(a0),a2
0001336A 7000                       		moveq	#0,d0
0001336C 1028 0037                  		move.b	$37(a0),d0
00013370 1032 0000                  		move.b	(a2,d0.w),d0
00013374 D068 0032                  		add.w	stair_origY(a0),d0
00013378 3140 000C                  		move.w	d0,obY(a0)
0001337C 7200                       		moveq	#0,d1
0001337E 1228 0014                  		move.b	obActWid(a0),d1
00013382 0641 000B                  		addi.w	#$B,d1
00013386 343C 0010                  		move.w	#$10,d2
0001338A 363C 0011                  		move.w	#$11,d3
0001338E 3828 0008                  		move.w	obX(a0),d4
00013392 6100 E9F6                  		bsr.w	SolidObject
00013396 4A04                       		tst.b	d4
00013398 6A00                       		bpl.s	loc_10F92
0001339A 1544 0036                  		move.b	d4,$36(a2)
0001339E                            
0001339E                            loc_10F92:
0001339E 0828 0003 0022             		btst	#3,obStatus(a0)
000133A4 6700                       		beq.s	locret_10FA0
000133A6 157C 0001 0036             		move.b	#1,$36(a2)
000133AC                            
000133AC                            locret_10FA0:
000133AC 4E75                       		rts	
000133AE                            ; ===========================================================================
000133AE 0000                       Stair_TypeIndex:dc.w Stair_Type00-Stair_TypeIndex
000133B0 0000                       		dc.w Stair_Type01-Stair_TypeIndex
000133B2 0000                       		dc.w Stair_Type02-Stair_TypeIndex
000133B4 0000                       		dc.w Stair_Type01-Stair_TypeIndex
000133B6                            ; ===========================================================================
000133B6                            
000133B6                            Stair_Type00:
000133B6 4A68 0034                  		tst.w	$34(a0)
000133BA 6600                       		bne.s	loc_10FC0
000133BC 0C28 0001 0036             		cmpi.b	#1,$36(a0)
000133C2 6600                       		bne.s	locret_10FBE
000133C4 317C 001E 0034             		move.w	#$1E,$34(a0)
000133CA                            
000133CA                            locret_10FBE:
000133CA 4E75                       		rts	
000133CC                            ; ===========================================================================
000133CC                            
000133CC                            loc_10FC0:
000133CC 5368 0034                  		subq.w	#1,$34(a0)
000133D0 66F8                       		bne.s	locret_10FBE
000133D2 5228 0028                  		addq.b	#1,obSubtype(a0) ; add 1 to type
000133D6 4E75                       		rts	
000133D8                            ; ===========================================================================
000133D8                            
000133D8                            Stair_Type02:
000133D8 4A68 0034                  		tst.w	$34(a0)
000133DC 6600                       		bne.s	loc_10FE0
000133DE 4A28 0036                  		tst.b	$36(a0)
000133E2 6A00                       		bpl.s	locret_10FDE
000133E4 317C 003C 0034             		move.w	#$3C,$34(a0)
000133EA                            
000133EA                            locret_10FDE:
000133EA 4E75                       		rts	
000133EC                            ; ===========================================================================
000133EC                            
000133EC                            loc_10FE0:
000133EC 5368 0034                  		subq.w	#1,$34(a0)
000133F0 6600                       		bne.s	loc_10FEC
000133F2 5228 0028                  		addq.b	#1,obSubtype(a0) ; add 1 to type
000133F6 4E75                       		rts	
000133F8                            ; ===========================================================================
000133F8                            
000133F8                            loc_10FEC:
000133F8 43E8 0038                  		lea	$38(a0),a1
000133FC 3028 0034                  		move.w	$34(a0),d0
00013400 E408                       		lsr.b	#2,d0
00013402 0200 0001                  		andi.b	#1,d0
00013406 12C0                       		move.b	d0,(a1)+
00013408 0A00 0001                  		eori.b	#1,d0
0001340C 12C0                       		move.b	d0,(a1)+
0001340E 0A00 0001                  		eori.b	#1,d0
00013412 12C0                       		move.b	d0,(a1)+
00013414 0A00 0001                  		eori.b	#1,d0
00013418 12C0                       		move.b	d0,(a1)+
0001341A 4E75                       		rts	
0001341C                            ; ===========================================================================
0001341C                            
0001341C                            Stair_Type01:
0001341C 43E8 0038                  		lea	$38(a0),a1
00013420 0C11 0080                  		cmpi.b	#$80,(a1)
00013424 6700                       		beq.s	locret_11038
00013426 5211                       		addq.b	#1,(a1)
00013428 7200                       		moveq	#0,d1
0001342A 1219                       		move.b	(a1)+,d1
0001342C 4841                       		swap	d1
0001342E E289                       		lsr.l	#1,d1
00013430 2401                       		move.l	d1,d2
00013432 E289                       		lsr.l	#1,d1
00013434 2601                       		move.l	d1,d3
00013436 D682                       		add.l	d2,d3
00013438 4841                       		swap	d1
0001343A 4842                       		swap	d2
0001343C 4843                       		swap	d3
0001343E 12C3                       		move.b	d3,(a1)+
00013440 12C2                       		move.b	d2,(a1)+
00013442 12C1                       		move.b	d1,(a1)+
00013444                            
00013444                            locret_11038:
00013444 4E75                       		rts	
00013446 4E75                       		rts	
00013446 4E75                       		rts	
00013448                            Map_Stair:	include	"_maps\Staircase.asm"
00013448                            ; ---------------------------------------------------------------------------
00013448                            ; Sprite mappings - blocks that	form a staircase (SLZ)
00013448                            ; ---------------------------------------------------------------------------
00013448                            Map_Stair_internal:
00013448 0000                       		dc.w @block-Map_Stair_internal
0001344A 01                         @block:		dc.b 1
0001344B F00F 0021 F0               		dc.b $F0, $F, 0, $21, $F0
00013450                            		even
00013450                            		even
00013450                            		include	"_incObj\5C Pylon.asm"
00013450                            ; ---------------------------------------------------------------------------
00013450                            ; Object 5C - metal pylons in foreground (SLZ)
00013450                            ; ---------------------------------------------------------------------------
00013450                            
00013450                            Pylon:
00013450 7000                       		moveq	#0,d0
00013452 1028 0024                  		move.b	obRoutine(a0),d0
00013456 323B 0000                  		move.w	Pyl_Index(pc,d0.w),d1
0001345A 4EFB 1000                  		jmp	Pyl_Index(pc,d1.w)
0001345E                            ; ===========================================================================
0001345E 0000                       Pyl_Index:	dc.w Pyl_Main-Pyl_Index
00013460 0000                       		dc.w Pyl_Display-Pyl_Index
00013462                            ; ===========================================================================
00013462                            
00013462                            Pyl_Main:	; Routine 0
00013462 5428 0024                  		addq.b	#2,obRoutine(a0)
00013466 217C 0000 0000 0004        		move.l	#Map_Pylon,obMap(a0)
0001346E 317C 83CC 0002             		move.w	#$83CC,obGfx(a0)
00013474 117C 0010 0014             		move.b	#$10,obActWid(a0)
0001347A                            
0001347A                            Pyl_Display:	; Routine 2
0001347A 2238 F700                  		move.l	(v_screenposx).w,d1
0001347E D281                       		add.l	d1,d1
00013480 4841                       		swap	d1
00013482 4441                       		neg.w	d1
00013484 3141 0008                  		move.w	d1,obX(a0)
00013488 2238 F704                  		move.l	(v_screenposy).w,d1
0001348C D281                       		add.l	d1,d1
0001348E 4841                       		swap	d1
00013490 0241 003F                  		andi.w	#$3F,d1
00013494 4441                       		neg.w	d1
00013496 0641 0100                  		addi.w	#$100,d1
0001349A 3141 000A                  		move.w	d1,obScreenY(a0)
0001349E 6000 C4DC                  		bra.w	DisplaySprite
0001349E 6000 C4DC                  		bra.w	DisplaySprite
000134A2                            Map_Pylon:	include	"_maps\Pylon.asm"
000134A2                            ; ---------------------------------------------------------------------------
000134A2                            ; Sprite mappings - metal pylons in foreground (SLZ)
000134A2                            ; ---------------------------------------------------------------------------
000134A2                            Map_Pylon_internal:
000134A2 0000                       		dc.w @pylon-Map_Pylon_internal
000134A4 09                         @pylon:		dc.b 9
000134A5 800F 0000 F0               		dc.b $80, $F, 0, 0, $F0
000134AA A00F 1000 F0               		dc.b $A0, $F, $10, 0, $F0
000134AF C00F 0000 F0               		dc.b $C0, $F, 0, 0, $F0
000134B4 E00F 1000 F0               		dc.b $E0, $F, $10, 0, $F0
000134B9 000F 0000 F0               		dc.b 0,	$F, 0, 0, $F0
000134BE 200F 1000 F0               		dc.b $20, $F, $10, 0, $F0
000134C3 400F 0000 F0               		dc.b $40, $F, 0, 0, $F0
000134C8 600F 1000 F0               		dc.b $60, $F, $10, 0, $F0
000134CD 7F0F 0000 F0               		dc.b $7F, $F, 0, 0, $F0
000134D2                            		even
000134D2                            		even
000134D2                            
000134D2                            		include	"_incObj\1B Water Surface.asm"
000134D2                            ; ---------------------------------------------------------------------------
000134D2                            ; Object 1B - water surface (LZ)
000134D2                            ; ---------------------------------------------------------------------------
000134D2                            
000134D2                            WaterSurface:
000134D2 7000                       		moveq	#0,d0
000134D4 1028 0024                  		move.b	obRoutine(a0),d0
000134D8 323B 0000                  		move.w	Surf_Index(pc,d0.w),d1
000134DC 4EFB 1000                  		jmp	Surf_Index(pc,d1.w)
000134E0                            ; ===========================================================================
000134E0 0000                       Surf_Index:	dc.w Surf_Main-Surf_Index
000134E2 0000                       		dc.w Surf_Action-Surf_Index
000134E4                            
000134E4 =00000030                  surf_origX:	equ $30		; original x-axis position
000134E4 =00000032                  surf_freeze:	equ $32		; flag to freeze animation
000134E4                            ; ===========================================================================
000134E4                            
000134E4                            Surf_Main:	; Routine 0
000134E4 5428 0024                  		addq.b	#2,obRoutine(a0)
000134E8 217C 0000 0000 0004        		move.l	#Map_Surf,obMap(a0)
000134F0 317C C300 0002             		move.w	#$C300,obGfx(a0)
000134F6 117C 0004 0001             		move.b	#4,obRender(a0)
000134FC 117C 0080 0014             		move.b	#$80,obActWid(a0)
00013502 3168 0008 0030             		move.w	obX(a0),surf_origX(a0)
00013508                            
00013508                            Surf_Action:	; Routine 2
00013508 3238 F700                  		move.w	(v_screenposx).w,d1
0001350C 0241 FFE0                  		andi.w	#$FFE0,d1
00013510 D268 0030                  		add.w	surf_origX(a0),d1
00013514 0838 0000 FE05             		btst	#0,(v_framebyte).w
0001351A 6700                       		beq.s	@even		; branch on even frames
0001351C 0641 0020                  		addi.w	#$20,d1
00013520                            
00013520                            	@even:
00013520 3141 0008                  		move.w	d1,obX(a0)	; match	obj x-position to screen position
00013524 3238 F646                  		move.w	(v_waterpos1).w,d1
00013528 3141 000C                  		move.w	d1,obY(a0)	; match	obj y-position to water	height
0001352C 4A28 0032                  		tst.b	surf_freeze(a0)
00013530 6600                       		bne.s	@stopped
00013532 0838 0007 F605             		btst	#bitStart,(v_jpadpress1).w ; is Start button pressed?
00013538 6700                       		beq.s	@animate	; if not, branch
0001353A 5628 001A                  		addq.b	#3,obFrame(a0)	; use different	frames
0001353E 117C 0001 0032             		move.b	#1,surf_freeze(a0) ; stop animation
00013544 6000                       		bra.s	@display
00013546                            ; ===========================================================================
00013546                            
00013546                            @stopped:
00013546 4A78 F63A                  		tst.w	(f_pause).w	; is the game paused?
0001354A 6600                       		bne.s	@display	; if yes, branch
0001354C 117C 0000 0032             		move.b	#0,surf_freeze(a0) ; resume animation
00013552 5728 001A                  		subq.b	#3,obFrame(a0)	; use normal frames
00013556                            
00013556                            @animate:
00013556 5328 001E                  		subq.b	#1,obTimeFrame(a0)
0001355A 6A00                       		bpl.s	@display
0001355C 117C 0007 001E             		move.b	#7,obTimeFrame(a0)
00013562 5228 001A                  		addq.b	#1,obFrame(a0)
00013566 0C28 0003 001A             		cmpi.b	#3,obFrame(a0)
0001356C 6500                       		bcs.s	@display
0001356E 117C 0000 001A             		move.b	#0,obFrame(a0)
00013574                            
00013574                            @display:
00013574 6000 C406                  		bra.w	DisplaySprite
00013574 6000 C406                  		bra.w	DisplaySprite
00013578                            Map_Surf:	include	"_maps\Water Surface.asm"
00013578                            ; --------------------------------------------------------------------------------
00013578                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
00013578                            ; --------------------------------------------------------------------------------
00013578                            
00013578                            SME_LGSi8:	
00013578 0000 0000                  		dc.w SME_LGSi8_C-SME_LGSi8, SME_LGSi8_1C-SME_LGSi8	
0001357C 0000 0000                  		dc.w SME_LGSi8_2C-SME_LGSi8, SME_LGSi8_3C-SME_LGSi8	
00013580 0000 0000                  		dc.w SME_LGSi8_5B-SME_LGSi8, SME_LGSi8_7A-SME_LGSi8	
00013584 03                         SME_LGSi8_C:	dc.b 3	
00013585 F80D 0000 A0               		dc.b $F8, $D, 0, 0, $A0	
0001358A F80D 0000 E0               		dc.b $F8, $D, 0, 0, $E0	
0001358F F80D 0000 20               		dc.b $F8, $D, 0, 0, $20	
00013594 03                         SME_LGSi8_1C:	dc.b 3	
00013595 F80D 0008 A0               		dc.b $F8, $D, 0, 8, $A0	
0001359A F80D 0008 E0               		dc.b $F8, $D, 0, 8, $E0	
0001359F F80D 0008 20               		dc.b $F8, $D, 0, 8, $20	
000135A4 03                         SME_LGSi8_2C:	dc.b 3	
000135A5 F80D 0800 A0               		dc.b $F8, $D, 8, 0, $A0	
000135AA F80D 0800 E0               		dc.b $F8, $D, 8, 0, $E0	
000135AF F80D 0800 20               		dc.b $F8, $D, 8, 0, $20	
000135B4 06                         SME_LGSi8_3C:	dc.b 6	
000135B5 F80D 0000 A0               		dc.b $F8, $D, 0, 0, $A0	
000135BA F80D 0000 C0               		dc.b $F8, $D, 0, 0, $C0	
000135BF F80D 0000 E0               		dc.b $F8, $D, 0, 0, $E0	
000135C4 F80D 0000 00               		dc.b $F8, $D, 0, 0, 0	
000135C9 F80D 0000 20               		dc.b $F8, $D, 0, 0, $20	
000135CE F80D 0000 40               		dc.b $F8, $D, 0, 0, $40	
000135D3 06                         SME_LGSi8_5B:	dc.b 6	
000135D4 F80D 0008 A0               		dc.b $F8, $D, 0, 8, $A0	
000135D9 F80D 0008 C0               		dc.b $F8, $D, 0, 8, $C0	
000135DE F80D 0008 E0               		dc.b $F8, $D, 0, 8, $E0	
000135E3 F80D 0008 00               		dc.b $F8, $D, 0, 8, 0	
000135E8 F80D 0008 20               		dc.b $F8, $D, 0, 8, $20	
000135ED F80D 0008 40               		dc.b $F8, $D, 0, 8, $40	
000135F2 06                         SME_LGSi8_7A:	dc.b 6	
000135F3 F80D 0800 A0               		dc.b $F8, $D, 8, 0, $A0	
000135F8 F80D 0800 C0               		dc.b $F8, $D, 8, 0, $C0	
000135FD F80D 0800 E0               		dc.b $F8, $D, 8, 0, $E0	
00013602 F80D 0800 00               		dc.b $F8, $D, 8, 0, 0	
00013607 F80D 0800 20               		dc.b $F8, $D, 8, 0, $20	
0001360C F80D 0800 40               		dc.b $F8, $D, 8, 0, $40	
00013612 00                         		even
00013612 00                         		even
00013612                            		include	"_incObj\0B Pole that Breaks.asm"
00013612                            ; ---------------------------------------------------------------------------
00013612                            ; Object 0B - pole that	breaks (LZ)
00013612                            ; ---------------------------------------------------------------------------
00013612                            
00013612                            Pole:
00013612 7000                       		moveq	#0,d0
00013614 1028 0024                  		move.b	obRoutine(a0),d0
00013618 323B 0000                  		move.w	Pole_Index(pc,d0.w),d1
0001361C 4EFB 1000                  		jmp	Pole_Index(pc,d1.w)
00013620                            ; ===========================================================================
00013620 0000                       Pole_Index:	dc.w Pole_Main-Pole_Index
00013622 0000                       		dc.w Pole_Action-Pole_Index
00013624 0000                       		dc.w Pole_Display-Pole_Index
00013626                            
00013626 =00000030                  pole_time:	equ $30		; time between grabbing the pole & breaking
00013626 =00000032                  pole_grabbed:	equ $32		; flag set when Sonic grabs the pole
00013626                            ; ===========================================================================
00013626                            
00013626                            Pole_Main:	; Routine 0
00013626 5428 0024                  		addq.b	#2,obRoutine(a0)
0001362A 217C 0000 0000 0004        		move.l	#Map_Pole,obMap(a0)
00013632 317C 43DE 0002             		move.w	#$43DE,obGfx(a0)
00013638 117C 0004 0001             		move.b	#4,obRender(a0)
0001363E 117C 0008 0014             		move.b	#8,obActWid(a0)
00013644 317C 0200 0018             		move.w	#$200,obPriority(a0)
0001364A 117C 00E1 0020             		move.b	#$E1,obColType(a0)
00013650 7000                       		moveq	#0,d0
00013652 1028 0028                  		move.b	obSubtype(a0),d0 ; get object type
00013656 C0FC 003C                  		mulu.w	#60,d0		; multiply by 60 (1 second)
0001365A 3140 0030                  		move.w	d0,pole_time(a0) ; set breakage time
0001365E                            
0001365E                            Pole_Action:	; Routine 2
0001365E 4A28 0032                  		tst.b	pole_grabbed(a0) ; has pole already been grabbed?
00013662 6700                       		beq.s	@grab		; if not, branch
00013664 4A68 0030                  		tst.w	pole_time(a0)
00013668 6700                       		beq.s	@moveup
0001366A 5368 0030                  		subq.w	#1,pole_time(a0) ; decrement time until break
0001366E 6600                       		bne.s	@moveup
00013670 117C 0001 001A             		move.b	#1,obFrame(a0)	; break	the pole
00013676 6000                       		bra.s	@release
00013678                            ; ===========================================================================
00013678                            
00013678                            @moveup:
00013678 43F8 D000                  		lea	(v_player).w,a1
0001367C 3028 000C                  		move.w	obY(a0),d0
00013680 0440 0018                  		subi.w	#$18,d0
00013684 0838 0000 F604             		btst	#bitUp,(v_jpadhold1).w ; is "up" pressed?
0001368A 6700                       		beq.s	@movedown	; if not, branch
0001368C 5369 000C                  		subq.w	#1,obY(a1)	; move Sonic up
00013690 B069 000C                  		cmp.w	obY(a1),d0
00013694 6500                       		bcs.s	@movedown
00013696 3340 000C                  		move.w	d0,obY(a1)
0001369A                            
0001369A                            @movedown:
0001369A 0640 0024                  		addi.w	#$24,d0
0001369E 0838 0001 F604             		btst	#bitDn,(v_jpadhold1).w ; is "down" pressed?
000136A4 6700                       		beq.s	@letgo		; if not, branch
000136A6 5269 000C                  		addq.w	#1,obY(a1)	; move Sonic down
000136AA B069 000C                  		cmp.w	obY(a1),d0
000136AE 6400                       		bcc.s	@letgo
000136B0 3340 000C                  		move.w	d0,obY(a1)
000136B4                            
000136B4                            @letgo:
000136B4 1038 F603                  		move.b	(v_jpadpress2).w,d0
000136B8 0240 0070                  		andi.w	#btnABC,d0	; is A/B/C pressed?
000136BC 6700                       		beq.s	Pole_Display	; if not, branch
000136BE                            
000136BE                            @release:
000136BE 4228 0020                  		clr.b	obColType(a0)
000136C2 5428 0024                  		addq.b	#2,obRoutine(a0) ; goto Pole_Display next
000136C6 4238 F7C8                  		clr.b	(f_lockmulti).w
000136CA 4238 F7C9                  		clr.b	(f_wtunnelallow).w
000136CE 4228 0032                  		clr.b	pole_grabbed(a0)
000136D2 6000                       		bra.s	Pole_Display
000136D4                            ; ===========================================================================
000136D4                            
000136D4                            @grab:
000136D4 4A28 0021                  		tst.b	obColProp(a0)	; has Sonic touched the	pole?
000136D8 6700                       		beq.s	Pole_Display	; if not, branch
000136DA 43F8 D000                  		lea	(v_player).w,a1
000136DE 3028 0008                  		move.w	obX(a0),d0
000136E2 0640 0014                  		addi.w	#$14,d0
000136E6 B069 0008                  		cmp.w	obX(a1),d0
000136EA 6400                       		bcc.s	Pole_Display
000136EC 4228 0021                  		clr.b	obColProp(a0)
000136F0 0C29 0004 0024             		cmpi.b	#4,obRoutine(a1)
000136F6 6400                       		bcc.s	Pole_Display
000136F8 4269 0010                  		clr.w	obVelX(a1)	; stop Sonic moving
000136FC 4269 0012                  		clr.w	obVelY(a1)	; stop Sonic moving
00013700 3028 0008                  		move.w	obX(a0),d0
00013704 0640 0014                  		addi.w	#$14,d0
00013708 3340 0008                  		move.w	d0,obX(a1)
0001370C 08A9 0000 0022             		bclr	#0,obStatus(a1)
00013712 137C 0000 001C             		move.b	#id_Hang,obAnim(a1) ; set Sonic's animation to "hanging" ($11)
00013718 11FC 0001 F7C8             		move.b	#1,(f_lockmulti).w ; lock controls
0001371E 11FC 0001 F7C9             		move.b	#1,(f_wtunnelallow).w ; disable wind tunnel
00013724 117C 0001 0032             		move.b	#1,pole_grabbed(a0) ; begin countdown to breakage
0001372A                            
0001372A                            Pole_Display:	; Routine 4
0001372A 6000 E1C6                  		bra.w	RememberState
0001372A 6000 E1C6                  		bra.w	RememberState
0001372E                            Map_Pole:	include	"_maps\Pole that Breaks.asm"
0001372E                            ; ---------------------------------------------------------------------------
0001372E                            ; Sprite mappings - pole that breaks (LZ)
0001372E                            ; ---------------------------------------------------------------------------
0001372E                            Map_Pole_internal:
0001372E 0000                       		dc.w @normal-Map_Pole_internal
00013730 0000                       		dc.w @broken-Map_Pole_internal
00013732 02                         @normal:	dc.b 2			; normal pole
00013733 E003 0000 FC               		dc.b $E0, 3, 0,	0, $FC
00013738 0003 1000 FC               		dc.b 0,	3, $10,	0, $FC
0001373D 04                         @broken:	dc.b 4			; broken pole
0001373E E001 0000 FC               		dc.b $E0, 1, 0,	0, $FC
00013743 F005 0004 FC               		dc.b $F0, 5, 0,	4, $FC
00013748 0005 1004 FC               		dc.b 0,	5, $10,	4, $FC
0001374D 1001 1000 FC               		dc.b $10, 1, $10, 0, $FC
00013752                            		even
00013752                            		even
00013752                            		include	"_incObj\0C Flapping Door.asm"
00013752                            ; ---------------------------------------------------------------------------
00013752                            ; Object 0C - flapping door (LZ)
00013752                            ; ---------------------------------------------------------------------------
00013752                            
00013752                            FlapDoor:
00013752 7000                       		moveq	#0,d0
00013754 1028 0024                  		move.b	obRoutine(a0),d0
00013758 323B 0000                  		move.w	Flap_Index(pc,d0.w),d1
0001375C 4EFB 1000                  		jmp	Flap_Index(pc,d1.w)
00013760                            ; ===========================================================================
00013760 0000                       Flap_Index:	dc.w Flap_Main-Flap_Index
00013762 0000                       		dc.w Flap_OpenClose-Flap_Index
00013764                            
00013764 =00000032                  flap_time:	equ $32		; time between opening/closing
00013764 =00000030                  flap_wait:	equ $30		; time until change
00013764                            ; ===========================================================================
00013764                            
00013764                            Flap_Main:	; Routine 0
00013764 5428 0024                  		addq.b	#2,obRoutine(a0)
00013768 217C 0000 0000 0004        		move.l	#Map_Flap,obMap(a0)
00013770 317C 4328 0002             		move.w	#$4328,obGfx(a0)
00013776 0028 0004 0001             		ori.b	#4,obRender(a0)
0001377C 117C 0028 0014             		move.b	#$28,obActWid(a0)
00013782 7000                       		moveq	#0,d0
00013784 1028 0028                  		move.b	obSubtype(a0),d0 ; get object type
00013788 C0FC 003C                  		mulu.w	#60,d0		; multiply by 60 (1 second)
0001378C 3140 0032                  		move.w	d0,flap_time(a0) ; set flap delay time
00013790                            
00013790                            Flap_OpenClose:	; Routine 2
00013790 5368 0030                  		subq.w	#1,flap_wait(a0) ; decrement time delay
00013794 6A00                       		bpl.s	@wait		; if time remains, branch
00013796 3168 0032 0030             		move.w	flap_time(a0),flap_wait(a0) ; reset time delay
0001379C 0868 0000 001C             		bchg	#0,obAnim(a0)	; open/close door
000137A2 4A28 0001                  		tst.b	obRender(a0)
000137A6 6A00                       		bpl.s	@nosound
000137B2                            
000137B2                            	@wait:
000137B2                            	@nosound:
000137B2 43F9 0000 0000             		lea	(Ani_Flap).l,a1
000137B8 6100 926E                  		bsr.w	AnimateSprite
000137BC 4238 F7C9                  		clr.b	(f_wtunnelallow).w ; enable wind tunnel
000137C0 4A28 001A                  		tst.b	obFrame(a0)	; is the door open?
000137C4 6600                       		bne.s	@display	; if yes, branch
000137C6 3038 D008                  		move.w	(v_player+obX).w,d0
000137CA B068 0008                  		cmp.w	obX(a0),d0	; has Sonic passed through the door?
000137CE 6400                       		bcc.s	@display	; if yes, branch
000137D0 11FC 0001 F7C9             		move.b	#1,(f_wtunnelallow).w ; disable wind tunnel
000137D6 323C 0013                  		move.w	#$13,d1
000137DA 343C 0020                  		move.w	#$20,d2
000137DE 3602                       		move.w	d2,d3
000137E0 5243                       		addq.w	#1,d3
000137E2 3828 0008                  		move.w	obX(a0),d4
000137E6 6100 E5A2                  		bsr.w	SolidObject	; make the door	solid
000137EA                            
000137EA                            	@display:
000137EA 6000 E106                  		bra.w	RememberState
000137EA 6000 E106                  		bra.w	RememberState
000137EE                            		include	"_anim\Flapping Door.asm"
000137EE                            ; ---------------------------------------------------------------------------
000137EE                            ; Animation script - flapping door (LZ)
000137EE                            ; ---------------------------------------------------------------------------
000137EE 0000                       Ani_Flap:	dc.w @opening-Ani_Flap
000137F0 0000                       		dc.w @closing-Ani_Flap
000137F2 0300 0102 FE01             @opening:	dc.b 3,	0, 1, 2, afBack, 1
000137F8 0302 0100 FE01             @closing:	dc.b 3,	2, 1, 0, afBack, 1
000137FE                            		even
000137FE                            		even
000137FE                            Map_Flap:	include	"_maps\Flapping Door.asm"
000137FE                            ; ---------------------------------------------------------------------------
000137FE                            ; Sprite mappings - flapping door (LZ)
000137FE                            ; ---------------------------------------------------------------------------
000137FE                            Map_Flap_internal:
000137FE 0000                       		dc.w @closed-Map_Flap_internal
00013800 0000                       		dc.w @halfway-Map_Flap_internal
00013802 0000                       		dc.w @open-Map_Flap_internal
00013804 02                         @closed:	dc.b 2
00013805 E007 0000 F8               		dc.b $E0, 7, 0,	0, $F8
0001380A 0007 1000 F8               		dc.b 0,	7, $10,	0, $F8
0001380F 02                         @halfway:	dc.b 2
00013810 DA0F 0008 FB               		dc.b $DA, $F, 0, 8, $FB
00013815 060F 1008 FB               		dc.b 6,	$F, $10, 8, $FB
0001381A 02                         @open:		dc.b 2
0001381B D80D 0018 00               		dc.b $D8, $D, 0, $18, 0
00013820 180D 1018 00               		dc.b $18, $D, $10, $18,	0
00013826 00                         		even
00013826 00                         		even
00013826                            
00013826                            		include	"_incObj\71 Invisible Barriers.asm"
00013826                            ; ---------------------------------------------------------------------------
00013826                            ; Object 71 - invisible	solid barriers
00013826                            ; ---------------------------------------------------------------------------
00013826                            
00013826                            Invisibarrier:
00013826 7000                       		moveq	#0,d0
00013828 1028 0024                  		move.b	obRoutine(a0),d0
0001382C 323B 0000                  		move.w	Invis_Index(pc,d0.w),d1
00013830 4EFB 1000                  		jmp	Invis_Index(pc,d1.w)
00013834                            ; ===========================================================================
00013834 0000                       Invis_Index:	dc.w Invis_Main-Invis_Index
00013836 0000                       		dc.w Invis_Solid-Invis_Index
00013838                            
00013838 =00000016                  invis_height:	equ $16		; height in pixels
00013838                            ; ===========================================================================
00013838                            
00013838                            Invis_Main:	; Routine 0
00013838 5428 0024                  		addq.b	#2,obRoutine(a0)
0001383C 217C 0000 0000 0004        		move.l	#Map_Invis,obMap(a0)
00013844 317C 8680 0002             		move.w	#$8680,obGfx(a0)
0001384A 0028 0004 0001             		ori.b	#4,obRender(a0)
00013850 1028 0028                  		move.b	obSubtype(a0),d0 ; get object type
00013854 1200                       		move.b	d0,d1
00013856 0240 00F0                  		andi.w	#$F0,d0		; read only the	1st byte
0001385A 0640 0010                  		addi.w	#$10,d0
0001385E E248                       		lsr.w	#1,d0
00013860 1140 0014                  		move.b	d0,obActWid(a0)	; set object width
00013864 0241 000F                  		andi.w	#$F,d1		; read only the	2nd byte
00013868 5241                       		addq.w	#1,d1
0001386A E749                       		lsl.w	#3,d1
0001386C 1141 0016                  		move.b	d1,invis_height(a0) ; set object height
00013870                            
00013870                            Invis_Solid:	; Routine 2
00013870 6100 C38A                  		bsr.w	ChkObjectVisible
00013874 6600                       		bne.s	@chkdel
00013876 7200                       		moveq	#0,d1
00013878 1228 0014                  		move.b	obActWid(a0),d1
0001387C 0641 000B                  		addi.w	#$B,d1
00013880 7400                       		moveq	#0,d2
00013882 1428 0016                  		move.b	invis_height(a0),d2
00013886 3602                       		move.w	d2,d3
00013888 5243                       		addq.w	#1,d3
0001388A 3828 0008                  		move.w	obX(a0),d4
0001388E 6100 E542                  		bsr.w	SolidObject71
00013892                            
00013892                            @chkdel:
000138AE 4A78 FE08                  		tst.w	(v_debuguse).w	; are you using	debug mode?
000138B2 6700                       		beq.s	@nodisplay	; if not, branch
000138B4 4EF9 0000 F97C             		jmp	(DisplaySprite).l	; if yes, display the object
000138BA                            
000138BA                            	@nodisplay:
000138BA 4E75                       		rts	
000138BC                            
000138BC                            	@delete:
000138BC 4EF9 0000 F9BC             		jmp	(DeleteObject).l
000138BC 4EF9 0000 F9BC             		jmp	(DeleteObject).l
000138C2                            Map_Invis:	include	"_maps\Invisible Barriers.asm"
000138C2                            ; --------------------------------------------------------------------------------
000138C2                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
000138C2                            ; --------------------------------------------------------------------------------
000138C2                            
000138C2                            SME_t60cE:	
000138C2 0000 0000                  		dc.w SME_t60cE_6-SME_t60cE, SME_t60cE_1B-SME_t60cE	
000138C6 0000                       		dc.w SME_t60cE_30-SME_t60cE	
000138C8 04                         SME_t60cE_6:	dc.b 4	
000138C9 0005 0028 F0               		dc.b 0, 5, 0, $28, $F0	
000138CE 0005 0028 00               		dc.b 0, 5, 0, $28, 0	
000138D3 F005 0028 00               		dc.b $F0, 5, 0, $28, 0	
000138D8 F005 0028 F0               		dc.b $F0, 5, 0, $28, $F0	
000138DD 04                         SME_t60cE_1B:	dc.b 4	
000138DE E005 0028 C0               		dc.b $E0, 5, 0, $28, $C0	
000138E3 E005 0028 30               		dc.b $E0, 5, 0, $28, $30	
000138E8 1005 0028 30               		dc.b $10, 5, 0, $28, $30	
000138ED 1005 0028 C0               		dc.b $10, 5, 0, $28, $C0	
000138F2 04                         SME_t60cE_30:	dc.b 4	
000138F3 E005 0028 80               		dc.b $E0, 5, 0, $28, $80	
000138F8 E005 0028 70               		dc.b $E0, 5, 0, $28, $70	
000138FD 1005 0028 70               		dc.b $10, 5, 0, $28, $70	
00013902 1005 0028 80               		dc.b $10, 5, 0, $28, $80	
00013908 00                         		even
00013908 00                         		even
00013908                            
00013908                            		include	"_incObj\5D Fan.asm"
00013908                            ; ---------------------------------------------------------------------------
00013908                            ; Object 5D - fans (SLZ)
00013908                            ; ---------------------------------------------------------------------------
00013908                            
00013908                            Fan:
00013908 7000                       		moveq	#0,d0
0001390A 1028 0024                  		move.b	obRoutine(a0),d0
0001390E 323B 0000                  		move.w	Fan_Index(pc,d0.w),d1
00013912 4EFB 1000                  		jmp	Fan_Index(pc,d1.w)
00013916                            ; ===========================================================================
00013916 0000                       Fan_Index:	dc.w Fan_Main-Fan_Index
00013918 0000                       		dc.w Fan_Delay-Fan_Index
0001391A                            
0001391A =00000030                  fan_time:	equ $30		; time between switching on/off
0001391A =00000032                  fan_switch:	equ $32		; on/off switch
0001391A                            ; ===========================================================================
0001391A                            
0001391A                            Fan_Main:	; Routine 0
0001391A 5428 0024                  		addq.b	#2,obRoutine(a0)
0001391E 217C 0000 0000 0004        		move.l	#Map_Fan,obMap(a0)
00013926 317C 43A0 0002             		move.w	#$43A0,obGfx(a0)
0001392C 0028 0004 0001             		ori.b	#4,obRender(a0)
00013932 117C 0010 0014             		move.b	#$10,obActWid(a0)
00013938 317C 0200 0018             		move.w	#$200,obPriority(a0)
0001393E                            
0001393E                            Fan_Delay:	; Routine 2
0001393E 0828 0001 0028             		btst	#1,obSubtype(a0) ; is object type 02/03 (always on)?
00013944 6600                       		bne.s	@blow		; if yes, branch
00013946 5368 0030                  		subq.w	#1,fan_time(a0)	; subtract 1 from time delay
0001394A 6A00                       		bpl.s	@blow		; if time remains, branch
0001394C 317C 0078 0030             		move.w	#120,fan_time(a0) ; set delay to 2 seconds
00013952 0868 0000 0032             		bchg	#0,fan_switch(a0) ; switch fan on/off
00013958 6700                       		beq.s	@blow		; if fan is off, branch
0001395A 317C 00B4 0030             		move.w	#180,fan_time(a0) ; set delay to 3 seconds
00013960                            
00013960                            @blow:
00013960 4A28 0032                  		tst.b	fan_switch(a0)	; is fan switched on?
00013964 6600 0000                  		bne.w	@chkdel		; if not, branch
00013968 43F8 D000                  		lea	(v_player).w,a1
0001396C 3029 0008                  		move.w	obX(a1),d0
00013970 9068 0008                  		sub.w	obX(a0),d0
00013974 0828 0000 0022             		btst	#0,obStatus(a0)	; is fan facing right?
0001397A 6600                       		bne.s	@chksonic	; if yes, branch
0001397C 4440                       		neg.w	d0
0001397E                            
0001397E                            @chksonic:
0001397E 0640 0050                  		addi.w	#$50,d0
00013982 0C40 00F0                  		cmpi.w	#$F0,d0		; is Sonic more	than $A0 pixels	from the fan?
00013986 6400                       		bcc.s	@animate	; if yes, branch
00013988 3229 000C                  		move.w	obY(a1),d1
0001398C 0641 0060                  		addi.w	#$60,d1
00013990 9268 000C                  		sub.w	obY(a0),d1
00013994 6500                       		bcs.s	@animate	; branch if Sonic is too low
00013996 0C41 0070                  		cmpi.w	#$70,d1
0001399A 6400                       		bcc.s	@animate	; branch if Sonic is too high
0001399C 0440 0050                  		subi.w	#$50,d0		; is Sonic more than $50 pixels from the fan?
000139A0 6400                       		bcc.s	@faraway	; if yes, branch
000139A2 4640                       		not.w	d0
000139A4 D040                       		add.w	d0,d0
000139A6                            
000139A6                            	@faraway:
000139A6 0640 0060                  		addi.w	#$60,d0
000139AA 0828 0000 0022             		btst	#0,obStatus(a0)	; is fan facing right?
000139B0 6600                       		bne.s	@right		; if yes, branch
000139B2 4440                       		neg.w	d0
000139B4                            
000139B4                            	@right:
000139B4 4400                       		neg.b	d0
000139B6 E840                       		asr.w	#4,d0
000139B8 0828 0000 0028             		btst	#0,obSubtype(a0)
000139BE 6700                       		beq.s	@movesonic
000139C0 4440                       		neg.w	d0
000139C2                            
000139C2                            	@movesonic:
000139C2 D169 0008                  		add.w	d0,obX(a1)	; push Sonic away from the fan
000139C6                            
000139C6                            @animate:
000139C6 5328 001E                  		subq.b	#1,obTimeFrame(a0)
000139CA 6A00                       		bpl.s	@chkdel
000139CC 117C 0000 001E             		move.b	#0,obTimeFrame(a0)
000139D2 5228 001B                  		addq.b	#1,obAniFrame(a0)
000139D6 0C28 0003 001B             		cmpi.b	#3,obAniFrame(a0)
000139DC 6500                       		bcs.s	@noreset
000139DE 117C 0000 001B             		move.b	#0,obAniFrame(a0) ; reset after 4 frames
000139E4                            
000139E4                            	@noreset:
000139E4 7000                       		moveq	#0,d0
000139E6 0828 0000 0028             		btst	#0,obSubtype(a0)
000139EC 6700                       		beq.s	@noflip
000139EE 7002                       		moveq	#2,d0
000139F0                            
000139F0                            	@noflip:
000139F0 D028 001B                  		add.b	obAniFrame(a0),d0
000139F4 1140 001A                  		move.b	d0,obFrame(a0)
000139F8                            
000139F8                            @chkdel:
000139F8 6100 BF82                  		bsr.w	DisplaySprite
00013A1A 4E75                       		rts	
00013A1A 4E75                       		rts	
00013A1C                            Map_Fan:	include	"_maps\Fan.asm"
00013A1C                            ; ---------------------------------------------------------------------------
00013A1C                            ; Sprite mappings - fans (SLZ)
00013A1C                            ; ---------------------------------------------------------------------------
00013A1C                            Map_Fan_internal:
00013A1C 0000                       		dc.w @fan1-Map_Fan_internal
00013A1E 0000                       		dc.w @fan2-Map_Fan_internal
00013A20 0000                       		dc.w @fan3-Map_Fan_internal
00013A22 0000                       		dc.w @fan2-Map_Fan_internal
00013A24 0000                       		dc.w @fan1-Map_Fan_internal
00013A26 02                         @fan1:		dc.b 2
00013A27 F009 0000 F8               		dc.b $F0, 9, 0,	0, $F8
00013A2C 000D 0006 F0               		dc.b 0,	$D, 0, 6, $F0
00013A31 02                         @fan2:		dc.b 2
00013A32 F00D 000E F0               		dc.b $F0, $D, 0, $E, $F0
00013A37 000D 0016 F0               		dc.b 0,	$D, 0, $16, $F0
00013A3C 02                         @fan3:		dc.b 2
00013A3D F00D 001E F0               		dc.b $F0, $D, 0, $1E, $F0
00013A42 0009 0026 F8               		dc.b 0,	9, 0, $26, $F8
00013A48 00                         		even
00013A48 00                         		even
00013A48                            		include	"_incObj\5E Seesaw.asm"
00013A48                            ; ---------------------------------------------------------------------------
00013A48                            ; Object 5E - seesaws (SLZ)
00013A48                            ; ---------------------------------------------------------------------------
00013A48                            
00013A48                            Seesaw:
00013A48 7000                       		moveq	#0,d0
00013A4A 1028 0024                  		move.b	obRoutine(a0),d0
00013A4E 323B 0000                  		move.w	See_Index(pc,d0.w),d1
00013A52 4EBB 1000                  		jsr	See_Index(pc,d1.w)
00013A56 3028 0000                  		move.w	see_origX(a0),d0
00013A5A 0240 FF80                  		andi.w	#$FF80,d0
00013A5E 3238 F700                  		move.w	(v_screenposx).w,d1
00013A62 0441 0080                  		subi.w	#$80,d1
00013A66 0241 FF80                  		andi.w	#$FF80,d1
00013A6A 9041                       		sub.w	d1,d0
00013A6C 6B00 BF4E                  		bmi.w	DeleteObject
00013A70 0C40 0280                  		cmpi.w	#$280,d0
00013A74 6200 BF46                  		bhi.w	DeleteObject
00013A78 6000 BF02                  		bra.w	DisplaySprite
00013A7C                            ; ===========================================================================
00013A7C 0000                       See_Index:	dc.w See_Main-See_Index
00013A7E 0000                       		dc.w See_Slope-See_Index
00013A80 0000                       		dc.w See_Slope2-See_Index
00013A82 0000                       		dc.w See_Spikeball-See_Index
00013A84 0000                       		dc.w See_MoveSpike-See_Index
00013A86 0000                       		dc.w See_SpikeFall-See_Index
00013A88                            
00013A88 =00000030                  see_origX:	equ $30		; original x-axis position
00013A88 =00000034                  see_origY:	equ $34		; original y-axis position
00013A88 =00000038                  see_speed:	equ $38		; speed of collision
00013A88 =0000003A                  see_frame:	equ $3A		; 
00013A88 =0000003C                  see_parent:	equ $3C		; RAM address of parent object
00013A88                            ; ===========================================================================
00013A88                            
00013A88                            See_Main:	; Routine 0
00013A88 5428 0024                  		addq.b	#2,obRoutine(a0)
00013A8C 217C 0000 0000 0004        		move.l	#Map_Seesaw,obMap(a0)
00013A94 317C 0374 0002             		move.w	#$374,obGfx(a0)
00013A9A 0028 0004 0001             		ori.b	#4,obRender(a0)
00013AA0 117C 0004 0018             		move.b	#4,obPriority(a0)
00013AA6 117C 0030 0014             		move.b	#$30,obActWid(a0)
00013AAC 3168 0008 0030             		move.w	obX(a0),see_origX(a0)
00013AB2 4A28 0028                  		tst.b	obSubtype(a0)	; is object type 00 ?
00013AB6 6600                       		bne.s	@noball		; if not, branch
00013AB8                            
00013AB8 6100 C364                  		bsr.w	FindNextFreeObj
00013ABC 6600                       		bne.s	@noball
00013ABE 12BC 005E                  		move.b	#id_Seesaw,0(a1) ; load spikeball object
00013AC2 5C29 0024                  		addq.b	#6,obRoutine(a1) ; use See_Spikeball routine
00013AC6 3368 0008 0008             		move.w	obX(a0),obX(a1)
00013ACC 3368 000C 000C             		move.w	obY(a0),obY(a1)
00013AD2 1368 0022 0022             		move.b	obStatus(a0),obStatus(a1)
00013AD8 2348 003C                  		move.l	a0,see_parent(a1)
00013ADC                            
00013ADC                            	@noball:
00013ADC 0828 0000 0022             		btst	#0,obStatus(a0)	; is seesaw flipped?
00013AE2 6700                       		beq.s	@noflip		; if not, branch
00013AE4 117C 0002 001A             		move.b	#2,obFrame(a0)	; use different frame
00013AEA                            
00013AEA                            	@noflip:
00013AEA 1168 001A 003A             		move.b	obFrame(a0),see_frame(a0)
00013AF0                            
00013AF0                            See_Slope:	; Routine 2
00013AF0 1228 003A                  		move.b	see_frame(a0),d1
00013AF4 6100 0000                  		bsr.w	See_ChgFrame
00013AF8 45F9 0000 0000             		lea	(See_DataSlope).l,a2
00013AFE 0828 0000 001A             		btst	#0,obFrame(a0)	; is seesaw flat?
00013B04 6700                       		beq.s	@notflat	; if not, branch
00013B06 45F9 0000 0000             		lea	(See_DataFlat).l,a2
00013B0C                            
00013B0C                            	@notflat:
00013B0C 43F8 D000                  		lea	(v_player).w,a1
00013B10 3169 0012 0038             		move.w	obVelY(a1),see_speed(a0)
00013B16 323C 0030                  		move.w	#$30,d1
00013B1A 4EB9 0000 915E             		jsr	(SlopeObject).l
00013B20 4E75                       		rts	
00013B22                            ; ===========================================================================
00013B22                            
00013B22                            See_Slope2:	; Routine 4
00013B22 6100 0000                  		bsr.w	See_ChkSide
00013B26 45F9 0000 0000             		lea	(See_DataSlope).l,a2
00013B2C 0828 0000 001A             		btst	#0,obFrame(a0)	; is seesaw flat?
00013B32 6700                       		beq.s	@notflat	; if not, branch
00013B34 45F9 0000 0000             		lea	(See_DataFlat).l,a2
00013B3A                            
00013B3A                            	@notflat:
00013B3A 323C 0030                  		move.w	#$30,d1
00013B3E 4EB9 0000 91FE             		jsr	(ExitPlatform).l
00013B44 323C 0030                  		move.w	#$30,d1
00013B48 3428 0008                  		move.w	obX(a0),d2
00013B4C 4EB9 0000 A198             		jsr	(SlopeObject2).l
00013B52 4E75                       		rts	
00013B54                            ; ===========================================================================
00013B54                            
00013B54                            See_ChkSide:
00013B54 7202                       		moveq	#2,d1
00013B56 43F8 D000                  		lea	(v_player).w,a1
00013B5A 3028 0008                  		move.w	obX(a0),d0
00013B5E 9069 0008                  		sub.w	obX(a1),d0	; is Sonic on the left side of the seesaw?
00013B62 6400                       		bcc.s	@leftside	; if yes, branch
00013B64 4440                       		neg.w	d0
00013B66 7200                       		moveq	#0,d1
00013B68                            
00013B68                            	@leftside:
00013B68 0C40 0008                  		cmpi.w	#8,d0
00013B6C 6400                       		bcc.s	See_ChgFrame
00013B6E 7201                       		moveq	#1,d1
00013B70                            
00013B70                            See_ChgFrame:
00013B70 1028 001A                  		move.b	obFrame(a0),d0
00013B74 B001                       		cmp.b	d1,d0		; does frame need to change?
00013B76 6700                       		beq.s	@noflip		; if not, branch
00013B78 6400                       		bcc.s	@loc_11772
00013B7A 5400                       		addq.b	#2,d0
00013B7C                            
00013B7C                            	@loc_11772:
00013B7C 5300                       		subq.b	#1,d0
00013B7E 1140 001A                  		move.b	d0,obFrame(a0)
00013B82 1141 003A                  		move.b	d1,see_frame(a0)
00013B86 08A8 0000 0001             		bclr	#0,obRender(a0)
00013B8C 0828 0001 001A             		btst	#1,obFrame(a0)
00013B92 6700                       		beq.s	@noflip
00013B94 08E8 0000 0001             		bset	#0,obRender(a0)
00013B9A                            
00013B9A                            	@noflip:
00013B9A 4E75                       		rts	
00013B9C                            ; ===========================================================================
00013B9C                            
00013B9C                            See_Spikeball:	; Routine 6
00013B9C 5428 0024                  		addq.b	#2,obRoutine(a0)
00013BA0 217C 0000 0000 0004        		move.l	#Map_SSawBall,obMap(a0)
00013BA8 317C 04F0 0002             		move.w	#$4F0,obGfx(a0)
00013BAE 0028 0004 0001             		ori.b	#4,obRender(a0)
00013BB4 117C 0004 0018             		move.b	#4,obPriority(a0)
00013BBA 117C 008B 0020             		move.b	#$8B,obColType(a0)
00013BC0 117C 000C 0014             		move.b	#$C,obActWid(a0)
00013BC6 3168 0008 0030             		move.w	obX(a0),see_origX(a0)
00013BCC 0668 0028 0008             		addi.w	#$28,obX(a0)
00013BD2 3168 000C 0034             		move.w	obY(a0),see_origY(a0)
00013BD8 117C 0001 001A             		move.b	#1,obFrame(a0)
00013BDE 0828 0000 0022             		btst	#0,obStatus(a0)	; is seesaw flipped?
00013BE4 6700                       		beq.s	See_MoveSpike	; if not, branch
00013BE6 0468 0050 0008             		subi.w	#$50,obX(a0)	; move spikeball to the other side
00013BEC 117C 0002 003A             		move.b	#2,see_frame(a0)
00013BF2                            
00013BF2                            See_MoveSpike:	; Routine 8
00013BF2 2268 003C                  		movea.l	see_parent(a0),a1
00013BF6 7000                       		moveq	#0,d0
00013BF8 1028 003A                  		move.b	see_frame(a0),d0
00013BFC 9029 003A                  		sub.b	see_frame(a1),d0
00013C00 6700                       		beq.s	loc_1183E
00013C02 6400                       		bcc.s	loc_117FC
00013C04 4400                       		neg.b	d0
00013C06                            
00013C06                            loc_117FC:
00013C06 323C F7E8                  		move.w	#-$818,d1
00013C0A 343C FEEC                  		move.w	#-$114,d2
00013C0E 0C00 0001                  		cmpi.b	#1,d0
00013C12 6700                       		beq.s	loc_11822
00013C14 323C F510                  		move.w	#-$AF0,d1
00013C18 343C FF34                  		move.w	#-$CC,d2
00013C1C 0C69 0A00 0038             		cmpi.w	#$A00,$38(a1)
00013C22 6D00                       		blt.s	loc_11822
00013C24 323C F200                  		move.w	#-$E00,d1
00013C28 343C FF60                  		move.w	#-$A0,d2
00013C2C                            
00013C2C                            loc_11822:
00013C2C 3141 0012                  		move.w	d1,obVelY(a0)
00013C30 3142 0010                  		move.w	d2,obVelX(a0)
00013C34 3028 0008                  		move.w	obX(a0),d0
00013C38 9068 0030                  		sub.w	see_origX(a0),d0
00013C3C 6400                       		bcc.s	loc_11838
00013C3E 4468 0010                  		neg.w	obVelX(a0)
00013C42                            
00013C42                            loc_11838:
00013C42 5428 0024                  		addq.b	#2,obRoutine(a0)
00013C46 6000                       		bra.s	See_SpikeFall
00013C48                            ; ===========================================================================
00013C48                            
00013C48                            loc_1183E:
00013C48 45F9 0000 0000             		lea	(See_Speeds).l,a2
00013C4E 7000                       		moveq	#0,d0
00013C50 1029 001A                  		move.b	obFrame(a1),d0
00013C54 343C 0028                  		move.w	#$28,d2
00013C58 3228 0008                  		move.w	obX(a0),d1
00013C5C 9268 0030                  		sub.w	see_origX(a0),d1
00013C60 6400                       		bcc.s	loc_1185C
00013C62 4442                       		neg.w	d2
00013C64 5440                       		addq.w	#2,d0
00013C66                            
00013C66                            loc_1185C:
00013C66 D040                       		add.w	d0,d0
00013C68 3228 0034                  		move.w	see_origY(a0),d1
00013C6C D272 0000                  		add.w	(a2,d0.w),d1
00013C70 3141 000C                  		move.w	d1,obY(a0)
00013C74 D468 0030                  		add.w	see_origX(a0),d2
00013C78 3142 0008                  		move.w	d2,obX(a0)
00013C7C 4268 000E                  		clr.w	obY+2(a0)
00013C80 4268 000A                  		clr.w	obX+2(a0)
00013C84 4E75                       		rts	
00013C86                            ; ===========================================================================
00013C86                            
00013C86                            See_SpikeFall:	; Routine $A
00013C86 4A68 0012                  		tst.w	obVelY(a0)	; is spikeball falling down?
00013C8A 6A00                       		bpl.s	loc_1189A	; if yes, branch
00013C8C 6100 BCA2                  		bsr.w	ObjectFall
00013C90 3028 0034                  		move.w	see_origY(a0),d0
00013C94 0440 002F                  		subi.w	#$2F,d0
00013C98 B068 000C                  		cmp.w	obY(a0),d0
00013C9C 6E00                       		bgt.s	locret_11898
00013C9E 6100 BC90                  		bsr.w	ObjectFall
00013CA2                            
00013CA2                            locret_11898:
00013CA2 4E75                       		rts	
00013CA4                            ; ===========================================================================
00013CA4                            
00013CA4                            loc_1189A:
00013CA4 6100 BC8A                  		bsr.w	ObjectFall
00013CA8 2268 003C                  		movea.l	see_parent(a0),a1
00013CAC 45F9 0000 0000             		lea	(See_Speeds).l,a2
00013CB2 7000                       		moveq	#0,d0
00013CB4 1029 001A                  		move.b	obFrame(a1),d0
00013CB8 3228 0008                  		move.w	obX(a0),d1
00013CBC 9268 0030                  		sub.w	see_origX(a0),d1
00013CC0 6400                       		bcc.s	loc_118BA
00013CC2 5440                       		addq.w	#2,d0
00013CC4                            
00013CC4                            loc_118BA:
00013CC4 D040                       		add.w	d0,d0
00013CC6 3228 0034                  		move.w	see_origY(a0),d1
00013CCA D272 0000                  		add.w	(a2,d0.w),d1
00013CCE B268 000C                  		cmp.w	obY(a0),d1
00013CD2 6E00                       		bgt.s	locret_11938
00013CD4 2268 003C                  		movea.l	see_parent(a0),a1
00013CD8 7202                       		moveq	#2,d1
00013CDA 4A68 0010                  		tst.w	obVelX(a0)
00013CDE 6B00                       		bmi.s	See_Spring
00013CE0 7200                       		moveq	#0,d1
00013CE2                            
00013CE2                            See_Spring:
00013CE2 1341 003A                  		move.b	d1,$3A(a1)
00013CE6 1141 003A                  		move.b	d1,see_frame(a0)
00013CEA B229 001A                  		cmp.b	obFrame(a1),d1
00013CEE 6700                       		beq.s	loc_1192C
00013CF0 08A9 0003 0022             		bclr	#3,obStatus(a1)
00013CF6 6700                       		beq.s	loc_1192C
00013CF8 4229 0025                  		clr.b	ob2ndRout(a1)
00013CFC 137C 0002 0024             		move.b	#2,obRoutine(a1)
00013D02 45F8 D000                  		lea	(v_player).w,a2
00013D06 3568 0012 0012             		move.w	obVelY(a0),obVelY(a2)
00013D0C 446A 0012                  		neg.w	obVelY(a2)
00013D10 08EA 0001 0022             		bset	#1,obStatus(a2)
00013D16 08AA 0003 0022             		bclr	#3,obStatus(a2)
00013D1C 422A 003C                  		clr.b	$3C(a2)
00013D20 157C 0000 001C             		move.b	#id_Spring,obAnim(a2) ; change Sonic's animation to "spring" ($10)
00013D26 157C 0002 0024             		move.b	#2,obRoutine(a2)
00013D36                            
00013D36                            loc_1192C:
00013D36 4268 0010                  		clr.w	obVelX(a0)
00013D3A 4268 0012                  		clr.w	obVelY(a0)
00013D3E 5528 0024                  		subq.b	#2,obRoutine(a0)
00013D42                            
00013D42                            locret_11938:
00013D42 4E75                       		rts	
00013D44                            ; ===========================================================================
00013D44 FFF8 FFE4 FFD1 FFE4 FFF8   See_Speeds:	dc.w -8, -$1C, -$2F, -$1C, -8
00013D4E                            
00013D4E                            See_DataSlope:	incbin	"misc\slzssaw1.bin"
00013D7E                            		even
00013D7E                            See_DataFlat:	incbin	"misc\slzssaw2.bin"
00013DAE                            		even
00013DAE                            		even
00013DAE                            Map_Seesaw:	include	"_maps\Seesaw.asm"
00013DAE                            ; ---------------------------------------------------------------------------
00013DAE                            ; Sprite mappings - seesaws (SLZ)
00013DAE                            ; ---------------------------------------------------------------------------
00013DAE                            Map_Seesaw_internal:
00013DAE 0000                       		dc.w @sloping-Map_Seesaw_internal
00013DB0 0000                       		dc.w @flat-Map_Seesaw_internal
00013DB2 0000                       		dc.w @sloping-Map_Seesaw_internal
00013DB4 0000                       		dc.w @flat-Map_Seesaw_internal
00013DB6 07                         @sloping:	dc.b 7
00013DB7 D406 0000 D3               		dc.b $D4, 6, 0,	0, $D3
00013DBC DC06 0006 E3               		dc.b $DC, 6, 0,	6, $E3
00013DC1 E404 000C F3               		dc.b $E4, 4, 0,	$C, $F3
00013DC6 EC0D 000E F3               		dc.b $EC, $D, 0, $E, $F3
00013DCB FC08 0016 FB               		dc.b $FC, 8, 0,	$16, $FB
00013DD0 F406 0006 13               		dc.b $F4, 6, 0,	6, $13
00013DD5 FC05 0019 23               		dc.b $FC, 5, 0,	$19, $23
00013DDA 04                         @flat:		dc.b 4
00013DDB E60A 001D D0               		dc.b $E6, $A, 0, $1D, $D0
00013DE0 E60A 0023 E8               		dc.b $E6, $A, 0, $23, $E8
00013DE5 E60A 0823 00               		dc.b $E6, $A, 8, $23, 0
00013DEA E60A 081D 18               		dc.b $E6, $A, 8, $1D, $18
00013DF0 00                         		even
00013DF0 00                         		even
00013DF0                            Map_SSawBall:	include	"_maps\Seesaw Ball.asm"
00013DF0                            ; ---------------------------------------------------------------------------
00013DF0                            ; Sprite mappings - spiked balls on the	seesaws	(SLZ)
00013DF0                            ; ---------------------------------------------------------------------------
00013DF0                            Map_SSawBall_internal:
00013DF0 0000                       		dc.w @red-Map_SSawBall_internal
00013DF2 0000                       		dc.w @silver-Map_SSawBall_internal
00013DF4 01                         @red:		dc.b 1
00013DF5 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
00013DFA 01                         @silver:	dc.b 1
00013DFB F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
00013E00                            		even
00013E00                            		even
00013E00                            		include	"_incObj\5F Bomb Enemy.asm"
00013E00                            ; ---------------------------------------------------------------------------
00013E00                            ; Object 5F - walking bomb enemy (SLZ, SBZ)
00013E00                            ; ---------------------------------------------------------------------------
00013E00                            
00013E00                            Bomb:
00013E00 7000                       		moveq	#0,d0
00013E02 1028 0024                  		move.b	obRoutine(a0),d0
00013E06 323B 0000                  		move.w	Bom_Index(pc,d0.w),d1
00013E0A 4EFB 1000                  		jmp	Bom_Index(pc,d1.w)
00013E0E                            ; ===========================================================================
00013E0E 0000                       Bom_Index:	dc.w Bom_Main-Bom_Index
00013E10 0000                       		dc.w Bom_Action-Bom_Index
00013E12 0000                       		dc.w Bom_Display-Bom_Index
00013E14 0000                       		dc.w Bom_End-Bom_Index
00013E16                            
00013E16 =00000030                  bom_time:	equ $30		; time of fuse
00013E16 =00000034                  bom_origY:	equ $34		; original y-axis position
00013E16 =0000003C                  bom_parent:	equ $3C		; address of parent object
00013E16                            ; ===========================================================================
00013E16                            
00013E16                            Bom_Main:	; Routine 0
00013E16 5428 0024                  		addq.b	#2,obRoutine(a0)
00013E1A 217C 0000 0000 0004        		move.l	#Map_Bomb,obMap(a0)
00013E22 317C 0400 0002             		move.w	#$400,obGfx(a0)
00013E28 0028 0004 0001             		ori.b	#4,obRender(a0)
00013E2E 317C 0180 0018             		move.w	#$180,obPriority(a0)
00013E34 117C 000C 0014             		move.b	#$C,obActWid(a0)
00013E3A 1028 0028                  		move.b	obSubtype(a0),d0
00013E3E 6700                       		beq.s	loc_11A3C
00013E40 1140 0024                  		move.b	d0,obRoutine(a0)
00013E44 4E75                       		rts	
00013E46                            ; ===========================================================================
00013E46                            
00013E46                            loc_11A3C:
00013E46 117C 009A 0020             		move.b	#$9A,obColType(a0)
00013E4C 0868 0000 0022             		bchg	#0,obStatus(a0)
00013E52                            
00013E52                            Bom_Action:	; Routine 2
00013E52 7000                       		moveq	#0,d0
00013E54 1028 0025                  		move.b	ob2ndRout(a0),d0
00013E58 323B 0000                  		move.w	@index(pc,d0.w),d1
00013E5C 4EBB 1000                  		jsr	@index(pc,d1.w)
00013E60 43F9 0000 0000             		lea	(Ani_Bomb).l,a1
00013E66 6100 8BC0                  		bsr.w	AnimateSprite
00013E6A 6000 DA86                  		bra.w	RememberState
00013E6E                            ; ===========================================================================
00013E6E 0000                       @index:		dc.w @walk-@index
00013E70 0000                       		dc.w @wait-@index
00013E72 0000                       		dc.w @explode-@index
00013E74                            ; ===========================================================================
00013E74                            
00013E74                            @walk:
00013E74 6100 0000                  		bsr.w	@chksonic
00013E78 5368 0030                  		subq.w	#1,bom_time(a0)	; subtract 1 from time delay
00013E7C 6A00                       		bpl.s	@noflip		; if time remains, branch
00013E7E 5428 0025                  		addq.b	#2,ob2ndRout(a0) ; goto @wait
00013E82 317C 05FF 0030             		move.w	#1535,bom_time(a0) ; set time delay to 25 seconds
00013E88 317C 0010 0010             		move.w	#$10,obVelX(a0)
00013E8E 117C 0001 001C             		move.b	#1,obAnim(a0)	; use walking animation
00013E94 0868 0000 0022             		bchg	#0,obStatus(a0)
00013E9A 6700                       		beq.s	@noflip
00013E9C 4468 0010                  		neg.w	obVelX(a0)	; change direction
00013EA0                            
00013EA0                            	@noflip:
00013EA0 4E75                       		rts	
00013EA2                            ; ===========================================================================
00013EA2                            
00013EA2                            @wait:
00013EA2 6100 0000                  		bsr.w	@chksonic
00013EA6 5368 0030                  		subq.w	#1,bom_time(a0)	; subtract 1 from time delay
00013EAA 6B00                       		bmi.s	@stopwalking	; if time expires, branch
00013EAC 6100 BABA                  		bsr.w	SpeedToPos
00013EB0 4E75                       		rts	
00013EB2                            ; ===========================================================================
00013EB2                            
00013EB2                            	@stopwalking:
00013EB2 5528 0025                  		subq.b	#2,ob2ndRout(a0)
00013EB6 317C 00B3 0030             		move.w	#179,bom_time(a0) ; set time delay to 3 seconds
00013EBC 4268 0010                  		clr.w	obVelX(a0)	; stop walking
00013EC0 117C 0000 001C             		move.b	#0,obAnim(a0)	; use waiting animation
00013EC6 4E75                       		rts	
00013EC8                            ; ===========================================================================
00013EC8                            
00013EC8                            @explode:
00013EC8 5368 0030                  		subq.w	#1,bom_time(a0)	; subtract 1 from time delay
00013ECC 6A00                       		bpl.s	@noexplode	; if time remains, branch
00013ECE 10BC 003F                  		move.b	#id_ExplosionBomb,0(a0) ; change bomb into an explosion
00013ED2 117C 0000 0024             		move.b	#0,obRoutine(a0)
00013ED8                            
00013ED8                            	@noexplode:
00013ED8 4E75                       		rts	
00013EDA                            ; ===========================================================================
00013EDA                            
00013EDA                            @chksonic:
00013EDA 3038 D008                  		move.w	(v_player+obX).w,d0
00013EDE 9068 0008                  		sub.w	obX(a0),d0
00013EE2 6400                       		bcc.s	@isleft
00013EE4 4440                       		neg.w	d0
00013EE6                            
00013EE6                            	@isleft:
00013EE6 0C40 0060                  		cmpi.w	#$60,d0		; is Sonic within $60 pixels?
00013EEA 6400                       		bcc.s	@outofrange	; if not, branch
00013EEC 3038 D00C                  		move.w	(v_player+obY).w,d0
00013EF0 9068 000C                  		sub.w	obY(a0),d0
00013EF4 6400                       		bcc.s	@isabove
00013EF6 4440                       		neg.w	d0
00013EF8                            
00013EF8                            	@isabove:
00013EF8 0C40 0060                  		cmpi.w	#$60,d0
00013EFC 6400                       		bcc.s	@outofrange
00013EFE 4A78 FE08                  		tst.w	(v_debuguse).w
00013F02 6600                       		bne.s	@outofrange
00013F04                            
00013F04 117C 0004 0025             		move.b	#4,ob2ndRout(a0)
00013F0A 317C 008F 0030             		move.w	#143,bom_time(a0) ; set fuse time
00013F10 4268 0010                  		clr.w	obVelX(a0)
00013F14 117C 0002 001C             		move.b	#2,obAnim(a0)	; use activated animation
00013F1A 6100 BF02                  		bsr.w	FindNextFreeObj
00013F1E 6600                       		bne.s	@outofrange
00013F20 12BC 005F                  		move.b	#id_Bomb,0(a1)	; load fuse object
00013F24 3368 0008 0008             		move.w	obX(a0),obX(a1)
00013F2A 3368 000C 000C             		move.w	obY(a0),obY(a1)
00013F30 3368 000C 0034             		move.w	obY(a0),bom_origY(a1)
00013F36 1368 0022 0022             		move.b	obStatus(a0),obStatus(a1)
00013F3C 137C 0004 0028             		move.b	#4,obSubtype(a1)
00013F42 137C 0003 001C             		move.b	#3,obAnim(a1)
00013F48 337C 0010 0012             		move.w	#$10,obVelY(a1)
00013F4E 0828 0001 0022             		btst	#1,obStatus(a0)	; is bomb upside-down?
00013F54 6700                       		beq.s	@normal		; if not, branch
00013F56 4469 0012                  		neg.w	obVelY(a1)	; reverse direction for fuse
00013F5A                            
00013F5A                            	@normal:
00013F5A 337C 008F 0030             		move.w	#143,bom_time(a1) ; set fuse time
00013F60 2348 003C                  		move.l	a0,bom_parent(a1)
00013F64                            
00013F64                            @outofrange:
00013F64 4E75                       		rts	
00013F66                            ; ===========================================================================
00013F66                            
00013F66                            Bom_Display:	; Routine 4
00013F66 6100                       		bsr.s	loc_11B70
00013F68 43F9 0000 0000             		lea	(Ani_Bomb).l,a1
00013F6E 6100 8AB8                  		bsr.w	AnimateSprite
00013F72 6000 D97E                  		bra.w	RememberState
00013F76                            ; ===========================================================================
00013F76                            
00013F76                            loc_11B70:
00013F76 5368 0030                  		subq.w	#1,bom_time(a0)
00013F7A 6B00                       		bmi.s	loc_11B7C
00013F7C 6100 B9EA                  		bsr.w	SpeedToPos
00013F80 4E75                       		rts	
00013F82                            ; ===========================================================================
00013F82                            
00013F82                            loc_11B7C:
00013F82 4268 0030                  		clr.w	bom_time(a0)
00013F86 4228 0024                  		clr.b	obRoutine(a0)
00013F8A 3168 0034 000C             		move.w	bom_origY(a0),obY(a0)
00013F90 7203                       		moveq	#3,d1
00013F92 2248                       		movea.l	a0,a1
00013F94 45F9 0000 0000             		lea	(Bom_ShrSpeed).l,a2 ; load shrapnel speed data
00013F9A 6000                       		bra.s	@makeshrapnel
00013F9C                            ; ===========================================================================
00013F9C                            
00013F9C                            	@loop:
00013F9C 6100 BE80                  		bsr.w	FindNextFreeObj
00013FA0 6600                       		bne.s	@fail
00013FA2                            
00013FA2                            @makeshrapnel:
00013FA2 12BC 005F                  		move.b	#id_Bomb,0(a1)	; load shrapnel	object
00013FA6 3368 0008 0008             		move.w	obX(a0),obX(a1)
00013FAC 3368 000C 000C             		move.w	obY(a0),obY(a1)
00013FB2 137C 0006 0028             		move.b	#6,obSubtype(a1)
00013FB8 137C 0004 001C             		move.b	#4,obAnim(a1)
00013FBE 335A 0010                  		move.w	(a2)+,obVelX(a1)
00013FC2 335A 0012                  		move.w	(a2)+,obVelY(a1)
00013FC6 137C 0098 0020             		move.b	#$98,obColType(a1)
00013FCC 08E9 0007 0001             		bset	#7,obRender(a1)
00013FD2                            
00013FD2                            	@fail:
00013FD2 51C9 FFC8                  		dbf	d1,@loop	; repeat 3 more	times
00013FD6                            
00013FD6 117C 0006 0024             		move.b	#6,obRoutine(a0)
00013FDC                            
00013FDC                            Bom_End:	; Routine 6
00013FDC 6100 B98A                  		bsr.w	SpeedToPos
00013FE0 0668 0018 0012             		addi.w	#$18,obVelY(a0)
00013FE6 43F9 0000 0000             		lea	(Ani_Bomb).l,a1
00013FEC 6100 8A3A                  		bsr.w	AnimateSprite
00013FF0 4A28 0001                  		tst.b	obRender(a0)
00013FF4 6A00 B9C6                  		bpl.w	DeleteObject
00013FF8 6000 B982                  		bra.w	DisplaySprite
00013FFC                            ; ===========================================================================
00013FFC FE00 FD00 FF00 FE00 0200+  Bom_ShrSpeed:	dc.w -$200, -$300, -$100, -$200, $200, -$300, $100, -$200
00013FFC FE00 FD00 FF00 FE00 0200+  Bom_ShrSpeed:	dc.w -$200, -$300, -$100, -$200, $200, -$300, $100, -$200
0001400C                            		include	"_anim\Bomb Enemy.asm"
0001400C                            ; ---------------------------------------------------------------------------
0001400C                            ; Animation script - Bomb enemy
0001400C                            ; ---------------------------------------------------------------------------
0001400C 0000                       Ani_Bomb:	dc.w @stand-Ani_Bomb
0001400E 0000                       		dc.w @walk-Ani_Bomb
00014010 0000                       		dc.w @activated-Ani_Bomb
00014012 0000                       		dc.w @fuse-Ani_Bomb
00014014 0000                       		dc.w @shrapnel-Ani_Bomb
00014016 1301 00FF                  @stand:		dc.b $13, 1, 0,	afEnd
0001401A 1305 0403 02FF             @walk:		dc.b $13, 5, 4,	3, 2, afEnd
00014020 1307 06FF                  @activated:	dc.b $13, 7, 6,	afEnd
00014024 0308 09FF                  @fuse:		dc.b 3,	8, 9, afEnd
00014028 030A 0BFF                  @shrapnel:	dc.b 3,	$A, $B,	afEnd
0001402C                            		even
0001402C                            		even
0001402C                            Map_Bomb:	include	"_maps\Bomb Enemy.asm"
0001402C                            ; ---------------------------------------------------------------------------
0001402C                            ; Sprite mappings - walking bomb enemy (SLZ, SBZ)
0001402C                            ; ---------------------------------------------------------------------------
0001402C                            Map_Bomb_internal:
0001402C 0000                       		dc.w @stand1-Map_Bomb_internal
0001402E 0000                       		dc.w @stand2-Map_Bomb_internal
00014030 0000                       		dc.w @walk1-Map_Bomb_internal
00014032 0000                       		dc.w @walk2-Map_Bomb_internal
00014034 0000                       		dc.w @walk3-Map_Bomb_internal
00014036 0000                       		dc.w @walk4-Map_Bomb_internal
00014038 0000                       		dc.w @activate1-Map_Bomb_internal
0001403A 0000                       		dc.w @activate2-Map_Bomb_internal
0001403C 0000                       		dc.w @fuse1-Map_Bomb_internal
0001403E 0000                       		dc.w @fuse2-Map_Bomb_internal
00014040 0000                       		dc.w @shrapnel1-Map_Bomb_internal
00014042 0000                       		dc.w @shrapnel2-Map_Bomb_internal
00014044 03                         @stand1:	dc.b 3
00014045 F10A 0000 F4               		dc.b $F1, $A, 0, 0, $F4	; bomb standing still
0001404A 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
0001404F E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
00014054 03                         @stand2:	dc.b 3
00014055 F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
0001405A 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
0001405F E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
00014064 03                         @walk1:		dc.b 3
00014065 F00A 0000 F4               		dc.b $F0, $A, 0, 0, $F4	; bomb walking
0001406A 0808 0015 F4               		dc.b 8,	8, 0, $15, $F4
0001406F E601 0021 FC               		dc.b $E6, 1, 0,	$21, $FC
00014074 03                         @walk2:		dc.b 3
00014075 F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
0001407A 0908 0018 F4               		dc.b 9,	8, 0, $18, $F4
0001407F E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
00014084 03                         @walk3:		dc.b 3
00014085 F00A 0000 F4               		dc.b $F0, $A, 0, 0, $F4
0001408A 0808 001B F4               		dc.b 8,	8, 0, $1B, $F4
0001408F E601 0021 FC               		dc.b $E6, 1, 0,	$21, $FC
00014094 03                         @walk4:		dc.b 3
00014095 F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
0001409A 0908 001E F4               		dc.b 9,	8, 0, $1E, $F4
0001409F E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
000140A4 02                         @activate1:	dc.b 2
000140A5 F10A 0000 F4               		dc.b $F1, $A, 0, 0, $F4	; bomb during detonation countdown
000140AA 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
000140AF 02                         @activate2:	dc.b 2
000140B0 F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
000140B5 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
000140BA 01                         @fuse1:		dc.b 1
000140BB E701 0023 FC               		dc.b $E7, 1, 0,	$23, $FC ; fuse	(just before it	explodes)
000140C0 01                         @fuse2:		dc.b 1
000140C1 E701 0025 FC               		dc.b $E7, 1, 0,	$25, $FC
000140C6 01                         @shrapnel1:	dc.b 1
000140C7 FC00 0027 FC               		dc.b $FC, 0, 0,	$27, $FC ; shrapnel (after it exploded)
000140CC 01                         @shrapnel2:	dc.b 1
000140CD FC00 0028 FC               		dc.b $FC, 0, 0,	$28, $FC
000140D2                            		even
000140D2                            		even
000140D2                            
000140D2                            		include	"_incObj\60 Orbinaut.asm"
000140D2                            ; ---------------------------------------------------------------------------
000140D2                            ; Object 60 - Orbinaut enemy (LZ, SLZ, SBZ)
000140D2                            ; ---------------------------------------------------------------------------
000140D2                            
000140D2                            Orbinaut:
000140D2 7000                       		moveq	#0,d0
000140D4 1028 0024                  		move.b	obRoutine(a0),d0
000140D8 323B 0000                  		move.w	Orb_Index(pc,d0.w),d1
000140DC 4EFB 1000                  		jmp	Orb_Index(pc,d1.w)
000140E0                            ; ===========================================================================
000140E0 0000                       Orb_Index:	dc.w Orb_Main-Orb_Index
000140E2 0000                       		dc.w Orb_ChkSonic-Orb_Index
000140E4 0000                       		dc.w Orb_Display-Orb_Index
000140E6 0000                       		dc.w Orb_MoveOrb-Orb_Index
000140E8 0000                       		dc.w Orb_ChkDel2-Orb_Index
000140EA                            
000140EA =0000003C                  orb_parent:	equ $3C		; address of parent object
000140EA                            ; ===========================================================================
000140EA                            
000140EA                            Orb_Main:	; Routine 0
000140EA 217C 0000 0000 0004        		move.l	#Map_Orb,obMap(a0)
000140F2 317C 0429 0002             		move.w	#$429,obGfx(a0)	; SBZ specific code
000140F8 0C38 0005 FE10             		cmpi.b	#id_SBZ,(v_zone).w ; check if level is SBZ
000140FE 6700                       		beq.s	@isscrap
00014100 317C 2429 0002             		move.w	#$2429,obGfx(a0) ; SLZ specific code
00014106                            
00014106                            	@isscrap:
00014106 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w ; check if level is LZ
0001410C 6600                       		bne.s	@notlabyrinth
0001410E 317C 0467 0002             		move.w	#$467,obGfx(a0)	; LZ specific code
00014114                            
00014114                            	@notlabyrinth:
00014114 0028 0004 0001             		ori.b	#4,obRender(a0)
0001411A 317C 0200 0018             		move.w	#$200,obPriority(a0)
00014120 117C 000B 0020             		move.b	#$B,obColType(a0)
00014126 117C 000C 0014             		move.b	#$C,obActWid(a0)
0001412C 7400                       		moveq	#0,d2
0001412E 45E8 0037                  		lea	$37(a0),a2
00014132 264A                       		movea.l	a2,a3
00014134 524A                       		addq.w	#1,a2
00014136 7203                       		moveq	#3,d1
00014138                            
00014138                            @makesatellites:
00014138 6100 BCE4                  		bsr.w	FindNextFreeObj
0001413C 6600                       		bne.s	@fail
0001413E 5213                       		addq.b	#1,(a3)
00014140 3A09                       		move.w	a1,d5
00014142 0445 D000                  		subi.w	#$D000,d5
00014146 EC4D                       		lsr.w	#6,d5
00014148 0245 007F                  		andi.w	#$7F,d5
0001414C 14C5                       		move.b	d5,(a2)+
0001414E 1290                       		move.b	0(a0),0(a1)	; load spiked orb object
00014150 137C 0006 0024             		move.b	#6,obRoutine(a1) ; use Orb_MoveOrb routine
00014156 2368 0004 0004             		move.l	obMap(a0),obMap(a1)
0001415C 3368 0002 0002             		move.w	obGfx(a0),obGfx(a1)
00014162 0029 0004 0001             		ori.b	#4,obRender(a1)
00014168 337C 0200 0018             		move.w	#$200,obPriority(a1)
0001416E 137C 0008 0014             		move.b	#8,obActWid(a1)
00014174 137C 0003 001A             		move.b	#3,obFrame(a1)
0001417A 137C 0098 0020             		move.b	#$98,obColType(a1)
00014180 1342 0026                  		move.b	d2,obAngle(a1)
00014184 0602 0040                  		addi.b	#$40,d2
00014188 2348 003C                  		move.l	a0,orb_parent(a1)
0001418C 51C9 FFAA                  		dbf	d1,@makesatellites ; repeat sequence 3 more times
00014190                            
00014190                            	@fail:
00014190 7001                       		moveq	#1,d0
00014192 0828 0000 0022             		btst	#0,obStatus(a0)	; is orbinaut facing left?
00014198 6700                       		beq.s	@noflip		; if not, branch
0001419A 4440                       		neg.w	d0
0001419C                            
0001419C                            	@noflip:
0001419C 1140 0036                  		move.b	d0,$36(a0)
000141A0 1168 0028 0024             		move.b	obSubtype(a0),obRoutine(a0) ; if type is 02, skip Orb_ChkSonic
000141A6 5428 0024                  		addq.b	#2,obRoutine(a0)
000141AA 317C FFC0 0010             		move.w	#-$40,obVelX(a0) ; move orbinaut to the left
000141B0 0828 0000 0022             		btst	#0,obStatus(a0)	; is orbinaut facing left??
000141B6 6700                       		beq.s	@noflip2	; if not, branch
000141B8 4468 0010                  		neg.w	obVelX(a0)	; move orbinaut	to the right
000141BC                            
000141BC                            	@noflip2:
000141BC 4E75                       		rts	
000141BE                            ; ===========================================================================
000141BE                            
000141BE                            Orb_ChkSonic:	; Routine 2
000141BE 3038 D008                  		move.w	(v_player+obX).w,d0
000141C2 9068 0008                  		sub.w	obX(a0),d0	; is Sonic to the right of the orbinaut?
000141C6 6400                       		bcc.s	@isright	; if yes, branch
000141C8 4440                       		neg.w	d0
000141CA                            
000141CA                            	@isright:
000141CA 0C40 00A0                  		cmpi.w	#$A0,d0		; is Sonic within $A0 pixels of	orbinaut?
000141CE 6400                       		bcc.s	@animate	; if not, branch
000141D0 3038 D00C                  		move.w	(v_player+obY).w,d0
000141D4 9068 000C                  		sub.w	obY(a0),d0	; is Sonic above the orbinaut?
000141D8 6400                       		bcc.s	@isabove	; if yes, branch
000141DA 4440                       		neg.w	d0
000141DC                            
000141DC                            	@isabove:
000141DC 0C40 0050                  		cmpi.w	#$50,d0		; is Sonic within $50 pixels of	orbinaut?
000141E0 6400                       		bcc.s	@animate	; if not, branch
000141E2 4A78 FE08                  		tst.w	(v_debuguse).w	; is debug mode	on?
000141E6 6600                       		bne.s	@animate	; if yes, branch
000141E8 117C 0001 001C             		move.b	#1,obAnim(a0)	; use "angry" animation
000141EE                            
000141EE                            @animate:
000141EE 43F9 0000 0000             		lea	(Ani_Orb).l,a1
000141F4 6100 8832                  		bsr.w	AnimateSprite
000141F8 6000 0000                  		bra.w	Orb_ChkDel
000141FC                            ; ===========================================================================
000141FC                            
000141FC                            Orb_Display:	; Routine 4
000141FC 6100 B76A                  		bsr.w	SpeedToPos
00014200                            
00014200                            Orb_ChkDel:
0001421E 6000 B75C                  		bra.w	DisplaySprite
00014222                            
00014222                            @chkgone:
00014222 45F8 FC00                  		lea	(v_objstate).w,a2
00014226 7000                       		moveq	#0,d0
00014228 1028 0023                  		move.b	obRespawnNo(a0),d0
0001422C 6700                       		beq.s	loc_11E34
0001422E 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00014234                            
00014234                            loc_11E34:
00014234 45E8 0037                  		lea	$37(a0),a2
00014238 7400                       		moveq	#0,d2
0001423A 141A                       		move.b	(a2)+,d2
0001423C 5342                       		subq.w	#1,d2
0001423E 6500                       		bcs.s	Orb_Delete
00014240                            
00014240                            loc_11E40:
00014240 7000                       		moveq	#0,d0
00014242 101A                       		move.b	(a2)+,d0
00014244 ED48                       		lsl.w	#6,d0
00014246 0680 00FF D000             		addi.l	#v_objspace&$FFFFFF,d0
0001424C 2240                       		movea.l	d0,a1
0001424E 6100 B76E                  		bsr.w	DeleteChild
00014252 51CA FFEC                  		dbf	d2,loc_11E40
00014256                            
00014256                            Orb_Delete:
00014256 6000 B764                  		bra.w	DeleteObject
0001425A                            ; ===========================================================================
0001425A                            
0001425A                            Orb_MoveOrb:	; Routine 6
0001425A 2268 003C                  		movea.l	orb_parent(a0),a1
0001425E 0C11 0060                  		cmpi.b	#id_Orbinaut,0(a1) ; does parent object still exist?
00014262 6600 B758                  		bne.w	DeleteObject	; if not, delete
00014266 0C29 0002 001A             		cmpi.b	#2,obFrame(a1)	; is orbinaut angry?
0001426C 6600                       		bne.s	@circle		; if not, branch
0001426E 0C28 0040 0026             		cmpi.b	#$40,obAngle(a0) ; is spikeorb directly under the orbinaut?
00014274 6600                       		bne.s	@circle		; if not, branch
00014276 5428 0024                  		addq.b	#2,obRoutine(a0)
0001427A 5329 0037                  		subq.b	#1,$37(a1)
0001427E 6600                       		bne.s	@fire
00014280 5429 0024                  		addq.b	#2,obRoutine(a1)
00014284                            
00014284                            	@fire:
00014284 317C FE00 0010             		move.w	#-$200,obVelX(a0) ; move orb to the left (quickly)
0001428A 0829 0000 0022             		btst	#0,obStatus(a1)
00014290 6700                       		beq.s	@noflip
00014292 4468 0010                  		neg.w	obVelX(a0)
00014296                            
00014296                            	@noflip:
00014296 6000 B6E4                  		bra.w	DisplaySprite
0001429A                            ; ===========================================================================
0001429A                            
0001429A                            @circle:
0001429A 1028 0026                  		move.b	obAngle(a0),d0
0001429E 4EB9 0000 3A36             		jsr	(CalcSine).l
000142A4 E841                       		asr.w	#4,d1
000142A6 D269 0008                  		add.w	obX(a1),d1
000142AA 3141 0008                  		move.w	d1,obX(a0)
000142AE E840                       		asr.w	#4,d0
000142B0 D069 000C                  		add.w	obY(a1),d0
000142B4 3140 000C                  		move.w	d0,obY(a0)
000142B8 1029 0036                  		move.b	$36(a1),d0
000142BC D128 0026                  		add.b	d0,obAngle(a0)
000142C0 6000 B6BA                  		bra.w	DisplaySprite
000142C4                            ; ===========================================================================
000142C4                            
000142C4                            Orb_ChkDel2:	; Routine 8
000142C4 6100 B6A2                  		bsr.w	SpeedToPos
000142C8 4A28 0001                  		tst.b	obRender(a0)
000142CC 6A00 B6EE                  		bpl.w	DeleteObject
000142D0 6000 B6AA                  		bra.w	DisplaySprite
000142D0 6000 B6AA                  		bra.w	DisplaySprite
000142D4                            		include	"_anim\Orbinaut.asm"
000142D4                            ; ---------------------------------------------------------------------------
000142D4                            ; Animation script - Orbinaut enemy
000142D4                            ; ---------------------------------------------------------------------------
000142D4 0000                       Ani_Orb:	dc.w @normal-Ani_Orb
000142D6 0000                       		dc.w @angers-Ani_Orb
000142D8 0F00 FF                    @normal:	dc.b $F, 0, afEnd
000142DC 00                         		even
000142DC 0F01 02FE 01               @angers:	dc.b $F, 1, 2, afBack, 1
000142E2 00                         		even
000142E2 00                         		even
000142E2                            Map_Orb:	include	"_maps\Orbinaut.asm"
000142E2                            ; ---------------------------------------------------------------------------
000142E2                            ; Sprite mappings - Orbinaut enemy (LZ,	SLZ, SBZ)
000142E2                            ; ---------------------------------------------------------------------------
000142E2                            Map_Orb_internal:
000142E2 0000                       		dc.w @normal-Map_Orb_internal
000142E4 0000                       		dc.w @medium-Map_Orb_internal
000142E6 0000                       		dc.w @angry-Map_Orb_internal
000142E8 0000                       		dc.w @spikeball-Map_Orb_internal
000142EA 01                         @normal:	dc.b 1
000142EB F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
000142F0 01                         @medium:	dc.b 1
000142F1 F40A 2009 F4               		dc.b $F4, $A, $20, 9, $F4
000142F6 01                         @angry:		dc.b 1
000142F7 F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
000142FC 01                         @spikeball:	dc.b 1
000142FD F805 001B F8               		dc.b $F8, 5, 0,	$1B, $F8
00014302                            		even
00014302                            		even
00014302                            
00014302                            		include	"_incObj\16 Harpoon.asm"
00014302                            ; ---------------------------------------------------------------------------
00014302                            ; Object 16 - harpoon (LZ)
00014302                            ; ---------------------------------------------------------------------------
00014302                            
00014302                            Harpoon:
00014302 7000                       		moveq	#0,d0
00014304 1028 0024                  		move.b	obRoutine(a0),d0
00014308 323B 0000                  		move.w	Harp_Index(pc,d0.w),d1
0001430C 4EFB 1000                  		jmp	Harp_Index(pc,d1.w)
00014310                            ; ===========================================================================
00014310 0000                       Harp_Index:	dc.w Harp_Main-Harp_Index
00014312 0000                       		dc.w Harp_Move-Harp_Index
00014314 0000                       		dc.w Harp_Wait-Harp_Index
00014316                            
00014316 =00000030                  harp_time:	equ $30		; time between stabbing/retracting
00014316                            ; ===========================================================================
00014316                            
00014316                            Harp_Main:	; Routine 0
00014316 5428 0024                  		addq.b	#2,obRoutine(a0)
0001431A 217C 0000 0000 0004        		move.l	#Map_Harp,obMap(a0)
00014322 317C 03CC 0002             		move.w	#$3CC,obGfx(a0)
00014328 0028 0004 0001             		ori.b	#4,obRender(a0)
0001432E 317C 0200 0018             		move.w	#$200,obPriority(a0)
00014334 1168 0028 001C             		move.b	obSubtype(a0),obAnim(a0) ; get type (vert/horiz)
0001433A 117C 0014 0014             		move.b	#$14,obActWid(a0)
00014340 317C 003C 0030             		move.w	#60,harp_time(a0) ; set time to 1 second
00014346                            
00014346                            Harp_Move:	; Routine 2
00014346 43F9 0000 0000             		lea	(Ani_Harp).l,a1
0001434C 6100 86DA                  		bsr.w	AnimateSprite
00014350 7000                       		moveq	#0,d0
00014352 1028 001A                  		move.b	obFrame(a0),d0	; get frame number
00014356 117B 0000 0020             		move.b	@types(pc,d0.w),obColType(a0) ; get collision type
0001435C 6000 D594                  		bra.w	RememberState
00014360                            
00014360                            	@types:
00014360 9B9C 9D9E 9FA0             		dc.b $9B, $9C, $9D, $9E, $9F, $A0
00014366                            		even
00014366                            
00014366                            Harp_Wait:	; Routine 4
00014366 5368 0030                  		subq.w	#1,harp_time(a0) ; decrement timer
0001436A 6A00                       		bpl.s	@chkdel		; branch if time remains
0001436C 317C 003C 0030             		move.w	#60,harp_time(a0) ; reset timer
00014372 5528 0024                  		subq.b	#2,obRoutine(a0) ; run "Harp_Move" subroutine
00014376 0868 0000 001C             		bchg	#0,obAnim(a0)	; reverse animation
0001437C                            
0001437C                            	@chkdel:
0001437C 6000 D574                  		bra.w	RememberState
0001437C 6000 D574                  		bra.w	RememberState
00014380                            		include	"_anim\Harpoon.asm"
00014380                            ; ---------------------------------------------------------------------------
00014380                            ; Animation script - harpoon (LZ)
00014380                            ; ---------------------------------------------------------------------------
00014380 0000                       Ani_Harp:	dc.w @h_extending-Ani_Harp
00014382 0000                       		dc.w @h_retracting-Ani_Harp
00014384 0000                       		dc.w @v_extending-Ani_Harp
00014386 0000                       		dc.w @v_retracting-Ani_Harp
00014388 0301 02FC                  @h_extending:	dc.b 3,	1, 2, afRoutine
0001438C 0301 00FC                  @h_retracting:	dc.b 3,	1, 0, afRoutine
00014390 0304 05FC                  @v_extending:	dc.b 3,	4, 5, afRoutine
00014394 0304 03FC                  @v_retracting:	dc.b 3,	4, 3, afRoutine
00014398                            		even
00014398                            		even
00014398                            Map_Harp:	include	"_maps\Harpoon.asm"
00014398                            ; ---------------------------------------------------------------------------
00014398                            ; Sprite mappings - harpoon (LZ)
00014398                            ; ---------------------------------------------------------------------------
00014398                            Map_Harp_internal:
00014398 0000                       		dc.w @h_retracted-Map_Harp_internal
0001439A 0000                       		dc.w @h_middle-Map_Harp_internal
0001439C 0000                       		dc.w @h_extended-Map_Harp_internal
0001439E 0000                       		dc.w @v_retracted-Map_Harp_internal
000143A0 0000                       		dc.w @v_middle-Map_Harp_internal
000143A2 0000                       		dc.w @v_extended-Map_Harp_internal
000143A4 01                         @h_retracted:	dc.b 1
000143A5 FC04 0000 F8               		dc.b $FC, 4, 0,	0, $F8
000143AA 01                         @h_middle:	dc.b 1
000143AB FC0C 0002 F8               		dc.b $FC, $C, 0, 2, $F8
000143B0 02                         @h_extended:	dc.b 2
000143B1 FC08 0006 F8               		dc.b $FC, 8, 0,	6, $F8
000143B6 FC08 0003 10               		dc.b $FC, 8, 0,	3, $10
000143BB 01                         @v_retracted:	dc.b 1
000143BC F801 0009 FC               		dc.b $F8, 1, 0,	9, $FC
000143C1 01                         @v_middle:	dc.b 1
000143C2 E803 000B FC               		dc.b $E8, 3, 0,	$B, $FC
000143C7 02                         @v_extended:	dc.b 2
000143C8 D802 000B FC               		dc.b $D8, 2, 0,	$B, $FC
000143CD F002 000F FC               		dc.b $F0, 2, 0,	$F, $FC
000143D2                            		even
000143D2                            		even
000143D2                            		include	"_incObj\61 LZ Blocks.asm"
000143D2                            ; ---------------------------------------------------------------------------
000143D2                            ; Object 61 - blocks (LZ)
000143D2                            ; ---------------------------------------------------------------------------
000143D2                            
000143D2                            LabyrinthBlock:
000143D2 7000                       		moveq	#0,d0
000143D4 1028 0024                  		move.b	obRoutine(a0),d0
000143D8 323B 0000                  		move.w	LBlk_Index(pc,d0.w),d1
000143DC 4EFB 1000                  		jmp	LBlk_Index(pc,d1.w)
000143E0                            ; ===========================================================================
000143E0 0000                       LBlk_Index:	dc.w LBlk_Main-LBlk_Index
000143E2 0000                       		dc.w LBlk_Action-LBlk_Index
000143E4                            
000143E4 1010                       LBlk_Var:	dc.b $10, $10		; width, height
000143E6 200C                       		dc.b $20, $C
000143E8 1010                       		dc.b $10, $10
000143EA 1010                       		dc.b $10, $10
000143EC                            
000143EC =00000016                  lblk_height:	equ $16		; block height
000143EC =00000034                  lblk_origX:	equ $34		; original x-axis position
000143EC =00000030                  lblk_origY:	equ $30		; original y-axis position
000143EC =00000036                  lblk_time:	equ $36		; time delay for block movement
000143EC =00000038                  lblk_untouched:	equ $38		; flag block as untouched
000143EC                            ; ===========================================================================
000143EC                            
000143EC                            LBlk_Main:	; Routine 0
000143EC 5428 0024                  		addq.b	#2,obRoutine(a0)
000143F0 217C 0000 0000 0004        		move.l	#Map_LBlock,obMap(a0)
000143F8 317C 43E6 0002             		move.w	#$43E6,obGfx(a0)
000143FE 117C 0004 0001             		move.b	#4,obRender(a0)
00014404 317C 0180 0018             		move.w	#$180,obPriority(a0)
0001440A 7000                       		moveq	#0,d0
0001440C 1028 0028                  		move.b	obSubtype(a0),d0 ; get block type
00014410 E648                       		lsr.w	#3,d0		; read only the 1st digit
00014412 0240 000E                  		andi.w	#$E,d0
00014416 45FB 00CC                  		lea	LBlk_Var(pc,d0.w),a2
0001441A 115A 0014                  		move.b	(a2)+,obActWid(a0) ; set width
0001441E 1152 0016                  		move.b	(a2),lblk_height(a0) ; set height
00014422 E248                       		lsr.w	#1,d0
00014424 1140 001A                  		move.b	d0,obFrame(a0)
00014428 3168 0008 0034             		move.w	obX(a0),lblk_origX(a0)
0001442E 3168 000C 0030             		move.w	obY(a0),lblk_origY(a0)
00014434 1028 0028                  		move.b	obSubtype(a0),d0 ; get block type
00014438 0200 000F                  		andi.b	#$F,d0		; read only the 2nd digit
0001443C 6700                       		beq.s	LBlk_Action	; branch if 0
0001443E 0C00 0007                  		cmpi.b	#7,d0
00014442 6700                       		beq.s	LBlk_Action	; branch if 7
00014444 117C 0001 0038             		move.b	#1,lblk_untouched(a0)
0001444A                            
0001444A                            LBlk_Action:	; Routine 2
0001444A 3F28 0008                  		move.w	obX(a0),-(sp)
0001444E 7000                       		moveq	#0,d0
00014450 1028 0028                  		move.b	obSubtype(a0),d0
00014454 0240 000F                  		andi.w	#$F,d0
00014458 D040                       		add.w	d0,d0
0001445A 323B 0000                  		move.w	@index(pc,d0.w),d1
0001445E 4EBB 1000                  		jsr	@index(pc,d1.w)
00014462 381F                       		move.w	(sp)+,d4
00014464 4A28 0001                  		tst.b	obRender(a0)
00014468 6A00                       		bpl.s	@chkdel
0001446A 7200                       		moveq	#0,d1
0001446C 1228 0014                  		move.b	obActWid(a0),d1
00014470 0641 000B                  		addi.w	#$B,d1
00014474 7400                       		moveq	#0,d2
00014476 1428 0016                  		move.b	lblk_height(a0),d2
0001447A 3602                       		move.w	d2,d3
0001447C 5243                       		addq.w	#1,d3
0001447E 6100 D90A                  		bsr.w	SolidObject
00014482 1144 003F                  		move.b	d4,$3F(a0)
00014486 6100 0000                  		bsr.w	loc_12180
0001448A                            
0001448A                            @chkdel:
000144A8 6000 B4D2                  		bra.w	DisplaySprite
000144AC                            ; ===========================================================================
000144AC 0000 0000                  @index:		dc.w @type00-@index, @type01-@index
000144B0 0000 0000                  		dc.w @type02-@index, @type03-@index
000144B4 0000 0000                  		dc.w @type04-@index, @type05-@index
000144B8 0000 0000                  		dc.w @type06-@index, @type07-@index
000144BC                            ; ===========================================================================
000144BC                            
000144BC                            @type00:
000144BC 4E75                       		rts	
000144BE                            ; ===========================================================================
000144BE                            
000144BE                            @type01:
000144BE                            @type03:
000144BE 4A68 0036                  		tst.w	lblk_time(a0)	; does time remain?
000144C2 6600                       		bne.s	@wait01		; if yes, branch
000144C4 0828 0003 0022             		btst	#3,obStatus(a0)	; is Sonic standing on the object?
000144CA 6700                       		beq.s	@donothing01	; if not, branch
000144CC 317C 001E 0036             		move.w	#30,lblk_time(a0) ; wait for half second
000144D2                            
000144D2                            	@donothing01:
000144D2 4E75                       		rts	
000144D4                            ; ===========================================================================
000144D4                            
000144D4                            	@wait01:
000144D4 5368 0036                  		subq.w	#1,lblk_time(a0); decrement waiting time
000144D8 66F8                       		bne.s	@donothing01	; if time remains, branch
000144DA 5228 0028                  		addq.b	#1,obSubtype(a0) ; goto @type02 or @type04
000144DE 4228 0038                  		clr.b	lblk_untouched(a0) ; flag block as touched
000144E2 4E75                       		rts	
000144E4                            ; ===========================================================================
000144E4                            
000144E4                            @type02:
000144E4                            @type06:
000144E4 6100 B482                  		bsr.w	SpeedToPos
000144E8 5068 0012                  		addq.w	#8,obVelY(a0)	; make block fall
000144EC 6100 0000                  		bsr.w	ObjFloorDist
000144F0 4A41                       		tst.w	d1		; has block hit the floor?
000144F2 6A00 0000                  		bpl.w	@nofloor02	; if not, branch
000144F6 5241                       		addq.w	#1,d1
000144F8 D368 000C                  		add.w	d1,obY(a0)
000144FC 4268 0012                  		clr.w	obVelY(a0)	; stop when it touches the floor
00014500 4228 0028                  		clr.b	obSubtype(a0)	; set type to 00 (non-moving type)
00014504                            
00014504                            	@nofloor02:
00014504 4E75                       		rts	
00014506                            ; ===========================================================================
00014506                            
00014506                            @type04:
00014506 6100 B460                  		bsr.w	SpeedToPos
0001450A 5168 0012                  		subq.w	#8,obVelY(a0)	; make block rise
0001450E 6100 0000                  		bsr.w	ObjHitCeiling
00014512 4A41                       		tst.w	d1		; has block hit the ceiling?
00014514 6A00 0000                  		bpl.w	@noceiling04	; if not, branch
00014518 9368 000C                  		sub.w	d1,obY(a0)
0001451C 4268 0012                  		clr.w	obVelY(a0)	; stop when it touches the ceiling
00014520 4228 0028                  		clr.b	obSubtype(a0)	; set type to 00 (non-moving type)
00014524                            
00014524                            	@noceiling04:
00014524 4E75                       		rts	
00014526                            ; ===========================================================================
00014526                            
00014526                            @type05:
00014526 0C28 0001 003F             		cmpi.b	#1,$3F(a0)	; is Sonic touching the	block?
0001452C 6600                       		bne.s	@notouch05	; if not, branch
0001452E 5228 0028                  		addq.b	#1,obSubtype(a0) ; goto @type06
00014532 4228 0038                  		clr.b	lblk_untouched(a0)
00014536                            
00014536                            	@notouch05:
00014536 4E75                       		rts	
00014538                            ; ===========================================================================
00014538                            
00014538                            @type07:
00014538 3038 F646                  		move.w	(v_waterpos1).w,d0
0001453C 9068 000C                  		sub.w	obY(a0),d0	; is block level with water?
00014540 6700                       		beq.s	@stop07		; if yes, branch
00014542 6400                       		bcc.s	@fall07		; branch if block is above water
00014544 0C40 FFFE                  		cmpi.w	#-2,d0
00014548 6C00                       		bge.s	@loc_1214E
0001454A 70FE                       		moveq	#-2,d0
0001454C                            
0001454C                            	@loc_1214E:
0001454C D168 000C                  		add.w	d0,obY(a0)	; make the block rise with water level
00014550 6100 0000                  		bsr.w	ObjHitCeiling
00014554 4A41                       		tst.w	d1		; has block hit the ceiling?
00014556 6A00 0000                  		bpl.w	@noceiling07	; if not, branch
0001455A 9368 000C                  		sub.w	d1,obY(a0)	; stop block
0001455E                            
0001455E                            	@noceiling07:
0001455E 4E75                       		rts	
00014560                            ; ===========================================================================
00014560                            
00014560                            @fall07:
00014560 0C40 0002                  		cmpi.w	#2,d0
00014564 6F00                       		ble.s	@loc_1216A
00014566 7002                       		moveq	#2,d0
00014568                            
00014568                            	@loc_1216A:
00014568 D168 000C                  		add.w	d0,obY(a0)	; make the block sink with water level
0001456C 6100 0000                  		bsr.w	ObjFloorDist
00014570 4A41                       		tst.w	d1
00014572 6A00 0000                  		bpl.w	@stop07
00014576 5241                       		addq.w	#1,d1
00014578 D368 000C                  		add.w	d1,obY(a0)
0001457C                            
0001457C                            	@stop07:
0001457C 4E75                       		rts	
0001457E                            ; ===========================================================================
0001457E                            
0001457E                            loc_12180:
0001457E 4A28 0038                  		tst.b	lblk_untouched(a0) ; has block been stood on or touched?
00014582 6700                       		beq.s	locret_121C0	; if yes, branch
00014584 0828 0003 0022             		btst	#3,obStatus(a0)	; is Sonic standing on it now?
0001458A 6600                       		bne.s	loc_1219A	; if yes, branch
0001458C 4A28 003E                  		tst.b	$3E(a0)
00014590 6700                       		beq.s	locret_121C0
00014592 5928 003E                  		subq.b	#4,$3E(a0)
00014596 6000                       		bra.s	loc_121A6
00014598                            ; ===========================================================================
00014598                            
00014598                            loc_1219A:
00014598 0C28 0040 003E             		cmpi.b	#$40,$3E(a0)
0001459E 6700                       		beq.s	locret_121C0
000145A0 5828 003E                  		addq.b	#4,$3E(a0)
000145A4                            
000145A4                            loc_121A6:
000145A4 1028 003E                  		move.b	$3E(a0),d0
000145A8 4EB9 0000 3A36             		jsr	(CalcSine).l
000145AE 323C 0400                  		move.w	#$400,d1
000145B2 C1C1                       		muls.w	d1,d0
000145B4 4840                       		swap	d0
000145B6 D068 0030                  		add.w	lblk_origY(a0),d0
000145BA 3140 000C                  		move.w	d0,obY(a0)
000145BE                            
000145BE                            locret_121C0:
000145BE 4E75                       		rts	
000145BE 4E75                       		rts	
000145C0                            Map_LBlock:	include	"_maps\LZ Blocks.asm"
000145C0                            Map_6865:
000145C0 0000                       Map_6865_0: 	dc.w Map_6865_8-Map_6865
000145C2 0000                       Map_6865_2: 	dc.w Map_6865_E-Map_6865
000145C4 0000                       Map_6865_4: 	dc.w Map_6865_19-Map_6865
000145C6 0000                       Map_6865_6: 	dc.w Map_6865_1F-Map_6865
000145C8 01                         Map_6865_8: 	dc.b $1
000145C9 F00F 2000 F0               	dc.b $F0, $F, $20, $0, $F0
000145CE 02                         Map_6865_E: 	dc.b $2
000145CF F40E 0069 E0               	dc.b $F4, $E, $0, $69, $E0
000145D4 F40E 0075 00               	dc.b $F4, $E, $0, $75, $0
000145D9 01                         Map_6865_19: 	dc.b $1
000145DA F00F 011A F0               	dc.b $F0, $F, $1, $1A, $F0
000145DF 01                         Map_6865_1F: 	dc.b $1
000145E0 F00F FDFA F0               	dc.b $F0, $F, $FD, $FA, $F0
000145E6 00                         	even
000145E6 00                         	even
000145E6                            		include	"_incObj\62 Gargoyle.asm"
000145E6                            ; ---------------------------------------------------------------------------
000145E6                            ; Object 62 - gargoyle head (LZ)
000145E6                            ; ---------------------------------------------------------------------------
000145E6                            
000145E6                            Gargoyle:
000145E6 7000                       		moveq	#0,d0
000145E8 1028 0024                  		move.b	obRoutine(a0),d0
000145EC 323B 0000                  		move.w	Gar_Index(pc,d0.w),d1
000145F0 4EBB 1000                  		jsr	Gar_Index(pc,d1.w)
000145F4 6000 D2FC                  		bra.w	RememberState
000145F8                            ; ===========================================================================
000145F8 0000                       Gar_Index:	dc.w Gar_Main-Gar_Index
000145FA 0000                       		dc.w Gar_MakeFire-Gar_Index
000145FC 0000                       		dc.w Gar_FireBall-Gar_Index
000145FE 0000                       		dc.w Gar_AniFire-Gar_Index
00014600                            
00014600 1E3C 5A78 96B4 D2F0        Gar_SpitRate:	dc.b 30, 60, 90, 120, 150, 180,	210, 240
00014608                            ; ===========================================================================
00014608                            
00014608                            Gar_Main:	; Routine 0
00014608 5428 0024                  		addq.b	#2,obRoutine(a0)
0001460C 217C 0000 0000 0004        		move.l	#Map_Gar,obMap(a0)
00014614 317C 42E9 0002             		move.w	#$42E9,obGfx(a0)
0001461A 0028 0004 0001             		ori.b	#4,obRender(a0)
00014620 317C 0180 0018             		move.w	#$180,obPriority(a0)
00014626 117C 0010 0014             		move.b	#$10,obActWid(a0)
0001462C 1028 0028                  		move.b	obSubtype(a0),d0 ; get object type
00014630 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
00014634 117B 00CA 001F             		move.b	Gar_SpitRate(pc,d0.w),obDelayAni(a0) ; set fireball spit rate
0001463A 1168 001F 001E             		move.b	obDelayAni(a0),obTimeFrame(a0)
00014640 0228 000F 0028             		andi.b	#$F,obSubtype(a0)
00014646                            
00014646                            Gar_MakeFire:	; Routine 2
00014646 5328 001E                  		subq.b	#1,obTimeFrame(a0) ; decrement timer
0001464A 6600                       		bne.s	@nofire		; if time remains, branch
0001464C                            
0001464C 1168 001F 001E             		move.b	obDelayAni(a0),obTimeFrame(a0) ; reset timer
00014652 6100 B5A8                  		bsr.w	ChkObjectVisible
00014656 6600                       		bne.s	@nofire
00014658 6100 B7AE                  		bsr.w	FindFreeObj
0001465C 6600                       		bne.s	@nofire
0001465E 12BC 0062                  		move.b	#id_Gargoyle,0(a1) ; load fireball object
00014662 5829 0024                  		addq.b	#4,obRoutine(a1) ; use Gar_FireBall routine
00014666 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001466C 3368 000C 000C             		move.w	obY(a0),obY(a1)
00014672 1368 0001 0001             		move.b	obRender(a0),obRender(a1)
00014678 1368 0022 0022             		move.b	obStatus(a0),obStatus(a1)
0001467E                            
0001467E                            	@nofire:
0001467E 4E75                       		rts	
00014680                            ; ===========================================================================
00014680                            
00014680                            Gar_FireBall:	; Routine 4
00014680 5428 0024                  		addq.b	#2,obRoutine(a0)
00014684 117C 0008 0016             		move.b	#8,obHeight(a0)
0001468A 117C 0008 0017             		move.b	#8,obWidth(a0)
00014690 217C 0000 0000 0004        		move.l	#Map_Gar,obMap(a0)
00014698 317C 02E9 0002             		move.w	#$2E9,obGfx(a0)
0001469E 0028 0004 0001             		ori.b	#4,obRender(a0)
000146A4 317C 0200 0018             		move.w	#$200,obPriority(a0)
000146AA 117C 0098 0020             		move.b	#$98,obColType(a0)
000146B0 117C 0008 0014             		move.b	#8,obActWid(a0)
000146B6 117C 0002 001A             		move.b	#2,obFrame(a0)
000146BC 5068 000C                  		addq.w	#8,obY(a0)
000146C0 317C 0200 0010             		move.w	#$200,obVelX(a0)
000146C6 0828 0000 0022             		btst	#0,obStatus(a0)	; is gargoyle facing left?
000146CC 6600                       		bne.s	@noflip		; if not, branch
000146CE 4468 0010                  		neg.w	obVelX(a0)
000146D2                            
000146D2                            	@noflip:
000146DC                            
000146DC                            Gar_AniFire:	; Routine 6
000146DC 1038 FE05                  		move.b	(v_framebyte).w,d0
000146E0 0200 0007                  		andi.b	#7,d0
000146E4 6600                       		bne.s	@nochg
000146E6 0868 0000 001A             		bchg	#0,obFrame(a0)	; change every 8 frames
000146EC                            
000146EC                            	@nochg:
000146EC 6100 B27A                  		bsr.w	SpeedToPos
000146F0 0828 0000 0022             		btst	#0,obStatus(a0) ; is fireball moving left?
000146F6 6600                       		bne.s	@isright	; if not, branch
000146F8 76F8                       		moveq	#-8,d3
000146FA 6100 0000                  		bsr.w	ObjHitWallLeft
000146FE 4A41                       		tst.w	d1
00014700 6B00 B2BA                  		bmi.w	DeleteObject	; delete if the	fireball hits a	wall
00014704 4E75                       		rts	
00014706                            
00014706                            	@isright:
00014706 7608                       		moveq	#8,d3
00014708 6100 0000                  		bsr.w	ObjHitWallRight
0001470C 4A41                       		tst.w	d1
0001470E 6B00 B2AC                  		bmi.w	DeleteObject
00014712 4E75                       		rts	
00014712 4E75                       		rts	
00014714                            Map_Gar:	include	"_maps\Gargoyle.asm"
00014714                            ; ---------------------------------------------------------------------------
00014714                            ; Sprite mappings - gargoyle head (LZ)
00014714                            ; ---------------------------------------------------------------------------
00014714                            Map_Gar_internal:
00014714 0000                       		dc.w @head-Map_Gar_internal
00014716 0000                       		dc.w @head-Map_Gar_internal
00014718 0000                       		dc.w @fireball1-Map_Gar_internal
0001471A 0000                       		dc.w @fireball2-Map_Gar_internal
0001471C 03                         @head:		dc.b 3
0001471D F004 0000 00               		dc.b $F0, 4, 0,	0, 0
00014722 F80D 0002 F0               		dc.b $F8, $D, 0, 2, $F0
00014727 0808 000A F8               		dc.b 8,	8, 0, $A, $F8
0001472C 01                         @fireball1:	dc.b 1
0001472D FC04 000D F8               		dc.b $FC, 4, 0,	$D, $F8
00014732 01                         @fireball2:	dc.b 1
00014733 FC04 000F F8               		dc.b $FC, 4, 0,	$F, $F8
00014738                            		even
00014738                            		even
00014738                            		include	"_incObj\63 LZ Conveyor.asm"
00014738                            ; ---------------------------------------------------------------------------
00014738                            ; Object 63 - platforms	on a conveyor belt (LZ)
00014738                            ; ---------------------------------------------------------------------------
00014738                            
00014738                            LabyrinthConvey:
00014738 7000                       		moveq	#0,d0
0001473A 1028 0024                  		move.b	obRoutine(a0),d0
0001473E 323B 0000                  		move.w	LCon_Index(pc,d0.w),d1
00014742 4EBB 1000                  		jsr	LCon_Index(pc,d1.w)
00014762                            
00014762                            LCon_Display:
00014762 6000 B218                  		bra.w	DisplaySprite
00014766                            ; ===========================================================================
00014766                            
00014766                            loc_1236A:
00014766 0C38 0002 FE11             		cmpi.b	#2,(v_act).w
0001476C 6600                       		bne.s	loc_12378
0001476E 0C40 FF80                  		cmpi.w	#-$80,d0
00014772 64EE                       		bcc.s	LCon_Display
00014774                            
00014774                            loc_12378:
00014774 1028 002F                  		move.b	$2F(a0),d0
00014778 6A00 B242                  		bpl.w	DeleteObject
0001477C 0240 007F                  		andi.w	#$7F,d0
00014780 45F8 F7C1                  		lea	(v_obj63).w,a2
00014784 08B2 0000 0000             		bclr	#0,(a2,d0.w)
0001478A 6000 B230                  		bra.w	DeleteObject
0001478E                            ; ===========================================================================
0001478E 0000                       LCon_Index:	dc.w LCon_Main-LCon_Index
00014790 0000                       		dc.w loc_124B2-LCon_Index
00014792 0000                       		dc.w loc_124C2-LCon_Index
00014794 0000                       		dc.w loc_124DE-LCon_Index
00014796                            ; ===========================================================================
00014796                            
00014796                            LCon_Main:	; Routine 0
00014796 1028 0028                  		move.b	obSubtype(a0),d0
0001479A 6B00 0000                  		bmi.w	loc_12460
0001479E 5428 0024                  		addq.b	#2,obRoutine(a0)
000147A2 217C 0000 0000 0004        		move.l	#Map_LConv,obMap(a0)
000147AA 317C 43F6 0002             		move.w	#$43F6,obGfx(a0)
000147B0 0028 0004 0001             		ori.b	#4,obRender(a0)
000147B6 117C 0010 0014             		move.b	#$10,obActWid(a0)
000147BC 317C 0200 0018             		move.w	#$200,obPriority(a0)
000147C2 0C28 007F 0028             		cmpi.b	#$7F,obSubtype(a0)
000147C8 6600                       		bne.s	loc_123E2
000147CA 5828 0024                  		addq.b	#4,obRoutine(a0)
000147CE 317C 03F6 0002             		move.w	#$3F6,obGfx(a0)
000147D4 317C 0080 0018             		move.w	#$80,obPriority(a0)
000147DA 6000 0000                  		bra.w	loc_124DE
000147DE                            ; ===========================================================================
000147DE                            
000147DE                            loc_123E2:
000147DE 117C 0004 001A             		move.b	#4,obFrame(a0)
000147E4 7000                       		moveq	#0,d0
000147E6 1028 0028                  		move.b	obSubtype(a0),d0
000147EA 3200                       		move.w	d0,d1
000147EC E648                       		lsr.w	#3,d0
000147EE 0240 001E                  		andi.w	#$1E,d0
000147F2 45FA 0000                  		lea	LCon_Data(pc),a2
000147F6 D4F2 0000                  		adda.w	(a2,d0.w),a2
000147FA 315A 0038                  		move.w	(a2)+,$38(a0)
000147FE 315A 0030                  		move.w	(a2)+,$30(a0)
00014802 214A 003C                  		move.l	a2,$3C(a0)
00014806 0241 000F                  		andi.w	#$F,d1
0001480A E549                       		lsl.w	#2,d1
0001480C 1141 0038                  		move.b	d1,$38(a0)
00014810 117C 0004 003A             		move.b	#4,$3A(a0)
00014816 4A38 F7C0                  		tst.b	(f_conveyrev).w
0001481A 6700                       		beq.s	loc_1244C
0001481C 117C 0001 003B             		move.b	#1,$3B(a0)
00014822 4428 003A                  		neg.b	$3A(a0)
00014826 7200                       		moveq	#0,d1
00014828 1228 0038                  		move.b	$38(a0),d1
0001482C D228 003A                  		add.b	$3A(a0),d1
00014830 B228 0039                  		cmp.b	$39(a0),d1
00014834 6500                       		bcs.s	loc_12448
00014836 1001                       		move.b	d1,d0
00014838 7200                       		moveq	#0,d1
0001483A 4A00                       		tst.b	d0
0001483C 6A00                       		bpl.s	loc_12448
0001483E 1228 0039                  		move.b	$39(a0),d1
00014842 5901                       		subq.b	#4,d1
00014844                            
00014844                            loc_12448:
00014844 1141 0038                  		move.b	d1,$38(a0)
00014848                            
00014848                            loc_1244C:
00014848 3172 1000 0034             		move.w	(a2,d1.w),$34(a0)
0001484E 3172 1002 0036             		move.w	2(a2,d1.w),$36(a0)
00014854 6100 0000                  		bsr.w	LCon_ChangeDir
00014858 6000 0000                  		bra.w	loc_124B2
0001485C                            ; ===========================================================================
0001485C                            
0001485C                            loc_12460:
0001485C 1140 002F                  		move.b	d0,$2F(a0)
00014860 0240 007F                  		andi.w	#$7F,d0
00014864 45F8 F7C1                  		lea	(v_obj63).w,a2
00014868 08F2 0000 0000             		bset	#0,(a2,d0.w)
0001486E 6600 B14C                  		bne.w	DeleteObject
00014872 D040                       		add.w	d0,d0
00014874 0240 001E                  		andi.w	#$1E,d0
00014878 0640 0000                  		addi.w	#ObjPosLZPlatform_Index-ObjPos_Index,d0
0001487C 45F9 0000 0000             		lea	(ObjPos_Index).l,a2
00014882 D4F2 0000                  		adda.w	(a2,d0.w),a2
00014886 321A                       		move.w	(a2)+,d1
00014888 2248                       		movea.l	a0,a1
0001488A 6000                       		bra.s	LCon_MakePtfms
0001488C                            ; ===========================================================================
0001488C                            
0001488C                            LCon_Loop:
0001488C 6100 B57A                  		bsr.w	FindFreeObj
00014890 6600                       		bne.s	loc_124AA
00014892                            
00014892                            LCon_MakePtfms:
00014892 12BC 0063                  		move.b	#id_LabyrinthConvey,0(a1)
00014896 335A 0008                  		move.w	(a2)+,obX(a1)
0001489A 335A 000C                  		move.w	(a2)+,obY(a1)
0001489E 301A                       		move.w	(a2)+,d0
000148A0 1340 0028                  		move.b	d0,obSubtype(a1)
000148A4                            
000148A4                            loc_124AA:
000148A4 51C9 FFE6                  		dbf	d1,LCon_Loop
000148A8                            
000148A8 588F                       		addq.l	#4,sp
000148AA 4E75                       		rts	
000148AC                            ; ===========================================================================
000148AC                            
000148AC                            loc_124B2:	; Routine 2
000148AC 7200                       		moveq	#0,d1
000148AE 1228 0014                  		move.b	obActWid(a0),d1
000148B2 4EB9 0000 908A             		jsr	(PlatformObject).l
000148B8 6000 0000                  		bra.w	sub_12502
000148BC                            ; ===========================================================================
000148BC                            
000148BC                            loc_124C2:	; Routine 4
000148BC 7200                       		moveq	#0,d1
000148BE 1228 0014                  		move.b	obActWid(a0),d1
000148C2 4EB9 0000 91FE             		jsr	(ExitPlatform).l
000148C8 3F28 0008                  		move.w	obX(a0),-(sp)
000148CC 6100 0000                  		bsr.w	sub_12502
000148D0 341F                       		move.w	(sp)+,d2
000148D2 4EF9 0000 9768             		jmp	(MvSonicOnPtfm2).l
000148D8                            ; ===========================================================================
000148D8                            
000148D8                            loc_124DE:	; Routine 6
000148D8 3038 FE04                  		move.w	(v_framecount).w,d0
000148DC 0240 0003                  		andi.w	#3,d0
000148E0 6600                       		bne.s	loc_124FC
000148E2 7201                       		moveq	#1,d1
000148E4 4A38 F7C0                  		tst.b	(f_conveyrev).w
000148E8 6700                       		beq.s	loc_124F2
000148EA 4401                       		neg.b	d1
000148EC                            
000148EC                            loc_124F2:
000148EC D328 001A                  		add.b	d1,obFrame(a0)
000148F0 0228 0003 001A             		andi.b	#3,obFrame(a0)
000148F6                            
000148F6                            loc_124FC:
000148F6 588F                       		addq.l	#4,sp
000148F8 6000 CFF8                  		bra.w	RememberState
000148FC                            
000148FC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000148FC                            
000148FC                            
000148FC                            sub_12502:
000148FC 4A38 F7EE                  		tst.b	(f_switch+$E).w
00014900 6700                       		beq.s	loc_12520
00014902 4A28 003B                  		tst.b	$3B(a0)
00014906 6600                       		bne.s	loc_12520
00014908 117C 0001 003B             		move.b	#1,$3B(a0)
0001490E 11FC 0001 F7C0             		move.b	#1,(f_conveyrev).w
00014914 4428 003A                  		neg.b	$3A(a0)
00014918 6000                       		bra.s	loc_12534
0001491A                            ; ===========================================================================
0001491A                            
0001491A                            loc_12520:
0001491A 3028 0008                  		move.w	obX(a0),d0
0001491E B068 0034                  		cmp.w	$34(a0),d0
00014922 6600                       		bne.s	loc_1256A
00014924 3028 000C                  		move.w	obY(a0),d0
00014928 B068 0036                  		cmp.w	$36(a0),d0
0001492C 6600                       		bne.s	loc_1256A
0001492E                            
0001492E                            loc_12534:
0001492E 7200                       		moveq	#0,d1
00014930 1228 0038                  		move.b	$38(a0),d1
00014934 D228 003A                  		add.b	$3A(a0),d1
00014938 B228 0039                  		cmp.b	$39(a0),d1
0001493C 6500                       		bcs.s	loc_12552
0001493E 1001                       		move.b	d1,d0
00014940 7200                       		moveq	#0,d1
00014942 4A00                       		tst.b	d0
00014944 6A00                       		bpl.s	loc_12552
00014946 1228 0039                  		move.b	$39(a0),d1
0001494A 5901                       		subq.b	#4,d1
0001494C                            
0001494C                            loc_12552:
0001494C 1141 0038                  		move.b	d1,$38(a0)
00014950 2268 003C                  		movea.l	$3C(a0),a1
00014954 3171 1000 0034             		move.w	(a1,d1.w),$34(a0)
0001495A 3171 1002 0036             		move.w	2(a1,d1.w),$36(a0)
00014960 6100 0000                  		bsr.w	LCon_ChangeDir
00014964                            
00014964                            loc_1256A:
00014964 6100 B002                  		bsr.w	SpeedToPos
00014968 4E75                       		rts	
0001496A                            ; End of function sub_12502
0001496A                            
0001496A                            
0001496A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001496A                            
0001496A                            
0001496A                            LCon_ChangeDir:
0001496A 7000                       		moveq	#0,d0
0001496C 343C FF00                  		move.w	#-$100,d2
00014970 3028 0008                  		move.w	obX(a0),d0
00014974 9068 0034                  		sub.w	$34(a0),d0
00014978 6400                       		bcc.s	loc_12584
0001497A 4440                       		neg.w	d0
0001497C 4442                       		neg.w	d2
0001497E                            
0001497E                            loc_12584:
0001497E 7200                       		moveq	#0,d1
00014980 363C FF00                  		move.w	#-$100,d3
00014984 3228 000C                  		move.w	obY(a0),d1
00014988 9268 0036                  		sub.w	$36(a0),d1
0001498C 6400                       		bcc.s	loc_12598
0001498E 4441                       		neg.w	d1
00014990 4443                       		neg.w	d3
00014992                            
00014992                            loc_12598:
00014992 B240                       		cmp.w	d0,d1
00014994 6500                       		bcs.s	loc_125C2
00014996 3028 0008                  		move.w	obX(a0),d0
0001499A 9068 0034                  		sub.w	$34(a0),d0
0001499E 6700                       		beq.s	loc_125AE
000149A0 48C0                       		ext.l	d0
000149A2 E180                       		asl.l	#8,d0
000149A4 81C1                       		divs.w	d1,d0
000149A6 4440                       		neg.w	d0
000149A8                            
000149A8                            loc_125AE:
000149A8 3140 0010                  		move.w	d0,obVelX(a0)
000149AC 3143 0012                  		move.w	d3,obVelY(a0)
000149B0 4840                       		swap	d0
000149B2 3140 000A                  		move.w	d0,obX+2(a0)
000149B6 4268 000E                  		clr.w	obY+2(a0)
000149BA 4E75                       		rts	
000149BC                            ; ===========================================================================
000149BC                            
000149BC                            loc_125C2:
000149BC 3228 000C                  		move.w	obY(a0),d1
000149C0 9268 0036                  		sub.w	$36(a0),d1
000149C4 6700                       		beq.s	loc_125D4
000149C6 48C1                       		ext.l	d1
000149C8 E181                       		asl.l	#8,d1
000149CA 83C0                       		divs.w	d0,d1
000149CC 4441                       		neg.w	d1
000149CE                            
000149CE                            loc_125D4:
000149CE 3141 0012                  		move.w	d1,obVelY(a0)
000149D2 3142 0010                  		move.w	d2,obVelX(a0)
000149D6 4841                       		swap	d1
000149D8 3141 000E                  		move.w	d1,obY+2(a0)
000149DC 4268 000A                  		clr.w	obX+2(a0)
000149E0 4E75                       		rts	
000149E2                            ; End of function LCon_ChangeDir
000149E2                            
000149E2                            ; ===========================================================================
000149E2 0000                       LCon_Data:	dc.w word_125F4-LCon_Data
000149E4 0000                       		dc.w word_12610-LCon_Data
000149E6 0000                       		dc.w word_12628-LCon_Data
000149E8 0000                       		dc.w word_1263C-LCon_Data
000149EA 0000                       		dc.w word_12650-LCon_Data
000149EC 0000                       		dc.w word_12668-LCon_Data
000149EE 0018 1070 1078 021A 10BE+  word_125F4:	dc.w $18, $1070, $1078,	$21A, $10BE, $260, $10BE, $393
000149FE 108C 03C5 1022 0390 1022+  		dc.w $108C, $3C5, $1022, $390, $1022, $244
00014A0A 0014 1280 127E 0280 12CE+  word_12610:	dc.w $14, $1280, $127E,	$280, $12CE, $2D0, $12CE, $46E
00014A1A 1232 0420 1232 02CC        		dc.w $1232, $420, $1232, $2CC
00014A22 0010 0D68 0D22 0482 0D22+  word_12628:	dc.w $10, $D68,	$D22, $482, $D22, $5DE,	$DAE, $5DE, $DAE, $482
00014A36 0010 0DA0 0D62 03A2 0DEE+  word_1263C:	dc.w $10, $DA0,	$D62, $3A2, $DEE, $3A2,	$DEE, $4DE, $D62, $4DE
00014A4A 0014 0D00 0CAC 0242 0DDE+  word_12650:	dc.w $14, $D00,	$CAC, $242, $DDE, $242,	$DDE, $3DE, $C52, $3DE,	$C52, $29C
00014A62 0010 1300 1252 020A 13DE+  word_12668:	dc.w $10, $1300, $1252,	$20A, $13DE, $20A, $13DE, $2BE,	$1252, $2BE
00014A62 0010 1300 1252 020A 13DE+  word_12668:	dc.w $10, $1300, $1252,	$20A, $13DE, $20A, $13DE, $2BE,	$1252, $2BE
00014A76                            Map_LConv:	include	"_maps\LZ Conveyor.asm"
00014A76                            ; ---------------------------------------------------------------------------
00014A76                            ; Sprite mappings - platforms on a conveyor belt (LZ)
00014A76                            ; ---------------------------------------------------------------------------
00014A76                            Map_LConv_internal:
00014A76 0000                       		dc.w @wheel1-Map_LConv_internal
00014A78 0000                       		dc.w @wheel2-Map_LConv_internal
00014A7A 0000                       		dc.w @wheel3-Map_LConv_internal
00014A7C 0000                       		dc.w @wheel4-Map_LConv_internal
00014A7E 0000                       		dc.w @platform-Map_LConv_internal
00014A80 01                         @wheel1:	dc.b 1
00014A81 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
00014A86 01                         @wheel2:	dc.b 1
00014A87 F00F 0010 F0               		dc.b $F0, $F, 0, $10, $F0
00014A8C 01                         @wheel3:	dc.b 1
00014A8D F00F 0020 F0               		dc.b $F0, $F, 0, $20, $F0
00014A92 01                         @wheel4:	dc.b 1
00014A93 F00F 0030 F0               		dc.b $F0, $F, 0, $30, $F0
00014A98 01                         @platform:	dc.b 1
00014A99 F80D 0040 F0               		dc.b $F8, $D, 0, $40, $F0
00014A9E                            		even
00014A9E                            		even
00014A9E                            		include	"_incObj\64 Bubbles.asm"
00014A9E                            ; ---------------------------------------------------------------------------
00014A9E                            ; Object 64 - bubbles (LZ)
00014A9E                            ; ---------------------------------------------------------------------------
00014A9E                            
00014A9E                            Bubble:
00014A9E 7000                       		moveq	#0,d0
00014AA0 1028 0024                  		move.b	obRoutine(a0),d0
00014AA4 323B 0000                  		move.w	Bub_Index(pc,d0.w),d1
00014AA8 4EFB 1000                  		jmp	Bub_Index(pc,d1.w)
00014AAC                            ; ===========================================================================
00014AAC 0000                       Bub_Index:	dc.w Bub_Main-Bub_Index
00014AAE 0000                       		dc.w Bub_Animate-Bub_Index
00014AB0 0000                       		dc.w Bub_ChkWater-Bub_Index
00014AB2 0000                       		dc.w Bub_Display-Bub_Index
00014AB4 0000                       		dc.w Bub_Delete-Bub_Index
00014AB6 0000                       		dc.w Bub_BblMaker-Bub_Index
00014AB8                            
00014AB8 =0000002E                  bub_inhalable:	equ $2E		; flag set when bubble is collectable
00014AB8 =00000030                  bub_origX:	equ $30		; original x-axis position
00014AB8 =00000032                  bub_time:	equ $32		; time until next bubble spawn
00014AB8 =00000033                  bub_freq:	equ $33		; frequency of bubble spawn
00014AB8                            ; ===========================================================================
00014AB8                            
00014AB8                            Bub_Main:	; Routine 0
00014AB8 5428 0024                  		addq.b	#2,obRoutine(a0)
00014ABC 217C 0000 0000 0004        		move.l	#Map_Bub,obMap(a0)
00014AC4 317C 8348 0002             		move.w	#$8348,obGfx(a0)
00014ACA 117C 0084 0001             		move.b	#$84,obRender(a0)
00014AD0 117C 0010 0014             		move.b	#$10,obActWid(a0)
00014AD6 317C 0080 0018             		move.w	#$80,obPriority(a0)
00014ADC 1028 0028                  		move.b	obSubtype(a0),d0 ; get bubble type
00014AE0 6A00                       		bpl.s	@bubble		; if type is $0-$7F, branch
00014AE2                            
00014AE2 5028 0024                  		addq.b	#8,obRoutine(a0) ; goto Bub_BblMaker next
00014AE6 0240 007F                  		andi.w	#$7F,d0		; read only last 7 bits	(deduct	$80)
00014AEA 1140 0032                  		move.b	d0,bub_time(a0)
00014AEE 1140 0033                  		move.b	d0,bub_freq(a0)	; set bubble frequency
00014AF2 117C 0006 001C             		move.b	#6,obAnim(a0)
00014AF8 6000 0000                  		bra.w	Bub_BblMaker
00014AFC                            ; ===========================================================================
00014AFC                            
00014AFC                            @bubble:
00014AFC 1140 001C                  		move.b	d0,obAnim(a0)
00014B00 3168 0008 0030             		move.w	obX(a0),bub_origX(a0)
00014B06 317C FF78 0012             		move.w	#-$88,obVelY(a0) ; float bubble upwards
00014B0C 4EB9 0000 3A10             		jsr	(RandomNumber).l
00014B12 1140 0026                  		move.b	d0,obAngle(a0)
00014B16                            
00014B16                            Bub_Animate:	; Routine 2
00014B16 43F9 0000 0000             		lea	(Ani_Bub).l,a1
00014B1C 4EB9 0000 CA28             		jsr	(AnimateSprite).l
00014B22 0C28 0006 001A             		cmpi.b	#6,obFrame(a0)	; is bubble full-size?
00014B28 6600                       		bne.s	Bub_ChkWater	; if not, branch
00014B2A                            
00014B2A 117C 0001 002E             		move.b	#1,bub_inhalable(a0) ; set "inhalable" flag
00014B30                            
00014B30                            Bub_ChkWater:	; Routine 4
00014B30 3038 F646                  		move.w	(v_waterpos1).w,d0
00014B34 B068 000C                  		cmp.w	obY(a0),d0	; is bubble underwater?
00014B38 6500                       		bcs.s	@wobble		; if yes, branch
00014B3A                            
00014B3A                            @burst:
00014B3A 117C 0006 0024             		move.b	#6,obRoutine(a0) ; goto Bub_Display next
00014B40 5628 001C                  		addq.b	#3,obAnim(a0)	; run "bursting" animation
00014B44 6000 0000                  		bra.w	Bub_Display
00014B48                            ; ===========================================================================
00014B48                            
00014B48                            @wobble:
00014B48 1028 0026                  		move.b	obAngle(a0),d0
00014B4C 5228 0026                  		addq.b	#1,obAngle(a0)
00014B50 0240 007F                  		andi.w	#$7F,d0
00014B54 43F9 0000 0000             		lea	(Drown_WobbleData).l,a1
00014B5A 1031 0000                  		move.b	(a1,d0.w),d0
00014B5E 4880                       		ext.w	d0
00014B60 D068 0030                  		add.w	bub_origX(a0),d0
00014B64 3140 0008                  		move.w	d0,obX(a0)	; change bubble's x-axis position
00014B68 4A28 002E                  		tst.b	bub_inhalable(a0)
00014B6C 6700                       		beq.s	@display
00014B6E 6100 0000                  		bsr.w	Bub_ChkSonic	; has Sonic touched the	bubble?
00014B72 6700                       		beq.s	@display	; if not, branch
00014B74                            
00014B74 6100 0000                  		bsr.w	ResumeMusic	; cancel countdown music
00014B82 43F8 D000                  		lea	(v_player).w,a1
00014B86 4269 0010                  		clr.w	obVelX(a1)
00014B8A 4269 0012                  		clr.w	obVelY(a1)
00014B8E 4269 0020                  		clr.w	obInertia(a1)	; stop Sonic
00014B92 137C 0000 001C             		move.b	#id_GetAir,obAnim(a1) ; use bubble-collecting animation
00014B98 337C 0023 003E             		move.w	#$23,$3E(a1)
00014B9E 137C 0000 003C             		move.b	#0,$3C(a1)
00014BA4 08A9 0005 0022             		bclr	#5,obStatus(a1)
00014BAA 08A9 0004 0022             		bclr	#4,obStatus(a1)
00014BB0 0829 0002 0022             		btst	#2,obStatus(a1)
00014BB6 6700 FF82                  		beq.w	@burst
00014BBA 08A9 0002 0022             		bclr	#2,obStatus(a1)
00014BC0 137C 0013 0016             		move.b	#$13,obHeight(a1)
00014BC6 137C 0009 0017             		move.b	#9,obWidth(a1)
00014BCC 5B69 000C                  		subq.w	#5,obY(a1)
00014BD0 6000 FF68                  		bra.w	@burst
00014BD4                            ; ===========================================================================
00014BD4                            
00014BD4                            @display:
00014BD4 6100 AD92                  		bsr.w	SpeedToPos
00014BD8 4A28 0001                  		tst.b	obRender(a0)
00014BDC 6A00                       		bpl.s	@delete
00014BDE 4EF9 0000 F97C             		jmp	(DisplaySprite).l
00014BE4                            
00014BE4                            	@delete:
00014BE4 4EF9 0000 F9BC             		jmp	(DeleteObject).l
00014BEA                            ; ===========================================================================
00014BEA                            
00014BEA                            Bub_Display:	; Routine 6
00014BEA 43F9 0000 0000             		lea	(Ani_Bub).l,a1
00014BF0 4EB9 0000 CA28             		jsr	(AnimateSprite).l
00014BF6 4A28 0001                  		tst.b	obRender(a0)
00014BFA 6A00                       		bpl.s	@delete
00014BFC 4EF9 0000 F97C             		jmp	(DisplaySprite).l
00014C02                            
00014C02                            	@delete:
00014C02 4EF9 0000 F9BC             		jmp	(DeleteObject).l
00014C08                            ; ===========================================================================
00014C08                            
00014C08                            Bub_Delete:	; Routine 8
00014C08 6000 ADB2                  		bra.w	DeleteObject
00014C0C                            ; ===========================================================================
00014C0C                            
00014C0C                            Bub_BblMaker:	; Routine $A
00014C0C 4A68 0036                  		tst.w	$36(a0)
00014C10 6600                       		bne.s	@loc_12874
00014C12 3038 F646                  		move.w	(v_waterpos1).w,d0
00014C16 B068 000C                  		cmp.w	obY(a0),d0	; is bubble maker underwater?
00014C1A 6400 0000                  		bcc.w	@chkdel		; if not, branch
00014C1E 4A28 0001                  		tst.b	obRender(a0)
00014C22 6A00 0000                  		bpl.w	@chkdel
00014C26 5368 0038                  		subq.w	#1,$38(a0)
00014C2A 6A00 0000                  		bpl.w	@loc_12914
00014C2E 317C 0001 0036             		move.w	#1,$36(a0)
00014C34                            
00014C34                            	@tryagain:
00014C34 4EB9 0000 3A10             		jsr	(RandomNumber).l
00014C3A 3200                       		move.w	d0,d1
00014C3C 0240 0007                  		andi.w	#7,d0
00014C40 0C40 0006                  		cmpi.w	#6,d0		; random number over 6?
00014C44 64EE                       		bcc.s	@tryagain	; if yes, branch
00014C46                            
00014C46 1140 0034                  		move.b	d0,$34(a0)
00014C4A 0241 000C                  		andi.w	#$C,d1
00014C4E 43F9 0000 0000             		lea	(Bub_BblTypes).l,a1
00014C54 D2C1                       		adda.w	d1,a1
00014C56 2149 003C                  		move.l	a1,$3C(a0)
00014C5A 5328 0032                  		subq.b	#1,bub_time(a0)
00014C5E 6A00                       		bpl.s	@loc_12872
00014C60 1168 0033 0032             		move.b	bub_freq(a0),bub_time(a0)
00014C66 08E8 0007 0036             		bset	#7,$36(a0)
00014C6C                            
00014C6C                            @loc_12872:
00014C6C 6000                       		bra.s	@loc_1287C
00014C6E                            ; ===========================================================================
00014C6E                            
00014C6E                            @loc_12874:
00014C6E 5368 0038                  		subq.w	#1,$38(a0)
00014C72 6A00 0000                  		bpl.w	@loc_12914
00014C76                            
00014C76                            @loc_1287C:
00014C76 4EB9 0000 3A10             		jsr	(RandomNumber).l
00014C7C 0240 001F                  		andi.w	#$1F,d0
00014C80 3140 0038                  		move.w	d0,$38(a0)
00014C84 6100 B182                  		bsr.w	FindFreeObj
00014C88 6600                       		bne.s	@fail
00014C8A 12BC 0064                  		move.b	#id_Bubble,0(a1) ; load bubble object
00014C8E 3368 0008 0008             		move.w	obX(a0),obX(a1)
00014C94 4EB9 0000 3A10             		jsr	(RandomNumber).l
00014C9A 0240 000F                  		andi.w	#$F,d0
00014C9E 5140                       		subq.w	#8,d0
00014CA0 D169 0008                  		add.w	d0,obX(a1)
00014CA4 3368 000C 000C             		move.w	obY(a0),obY(a1)
00014CAA 7000                       		moveq	#0,d0
00014CAC 1028 0034                  		move.b	$34(a0),d0
00014CB0 2468 003C                  		movea.l	$3C(a0),a2
00014CB4 1372 0000 0028             		move.b	(a2,d0.w),obSubtype(a1)
00014CBA 0828 0007 0036             		btst	#7,$36(a0)
00014CC0 6700                       		beq.s	@fail
00014CC2 4EB9 0000 3A10             		jsr	(RandomNumber).l
00014CC8 0240 0003                  		andi.w	#3,d0
00014CCC 6600                       		bne.s	@loc_buh
00014CCE 08E8 0006 0036             		bset	#6,$36(a0)
00014CD4 6600                       		bne.s	@fail
00014CD6 137C 0002 0028             		move.b	#2,obSubtype(a1)
00014CDC                            
00014CDC                            @loc_buh:
00014CDC 4A28 0034                  		tst.b	$34(a0)
00014CE0 6600                       		bne.s	@fail
00014CE2 08E8 0006 0036             		bset	#6,$36(a0)
00014CE8 6600                       		bne.s	@fail
00014CEA 137C 0002 0028             		move.b	#2,obSubtype(a1)
00014CF0                            
00014CF0                            	@fail:
00014CF0 5328 0034                  		subq.b	#1,$34(a0)
00014CF4 6A00                       		bpl.s	@loc_12914
00014CF6 4EB9 0000 3A10             		jsr	(RandomNumber).l
00014CFC 0240 007F                  		andi.w	#$7F,d0
00014D00 0640 0080                  		addi.w	#$80,d0
00014D04 D168 0038                  		add.w	d0,$38(a0)
00014D08 4268 0036                  		clr.w	$36(a0)
00014D0C                            
00014D0C                            @loc_12914:
00014D0C 43F9 0000 0000             		lea	(Ani_Bub).l,a1
00014D12 4EB9 0000 CA28             		jsr	(AnimateSprite).l
00014D18                            
00014D18                            @chkdel:
00014D36 3038 F646                  		move.w	(v_waterpos1).w,d0
00014D3A B068 000C                  		cmp.w	obY(a0),d0
00014D3E 6500 AC3C                  		bcs.w	DisplaySprite
00014D42 4E75                       		rts	
00014D44                            ; ===========================================================================
00014D44                            ; bubble production sequence
00014D44                            
00014D44                            ; 0 = small bubble, 1 =	large bubble
00014D44                            
00014D44 0001 0000 0000 0100 0000+  Bub_BblTypes:	dc.b 0,	1, 0, 0, 0, 0, 1, 0, 0,	0, 0, 1, 0, 1, 0, 0, 1,	0
00014D56                            
00014D56                            ; ===========================================================================
00014D56                            
00014D56                            Bub_ChkSonic:
00014D56 4A38 F7C8                  		tst.b	(f_lockmulti).w
00014D5A 6B00                       		bmi.s	@loc_12998
00014D5C 43F8 D000                  		lea	(v_player).w,a1
00014D60 3029 0008                  		move.w	obX(a1),d0
00014D64 3228 0008                  		move.w	obX(a0),d1
00014D68 0441 0010                  		subi.w	#$10,d1
00014D6C B240                       		cmp.w	d0,d1
00014D6E 6400                       		bcc.s	@loc_12998
00014D70 0641 0020                  		addi.w	#$20,d1
00014D74 B240                       		cmp.w	d0,d1
00014D76 6500                       		bcs.s	@loc_12998
00014D78 3029 000C                  		move.w	obY(a1),d0
00014D7C 3228 000C                  		move.w	obY(a0),d1
00014D80 B240                       		cmp.w	d0,d1
00014D82 6400                       		bcc.s	@loc_12998
00014D84 0641 0010                  		addi.w	#$10,d1
00014D88 B240                       		cmp.w	d0,d1
00014D8A 6500                       		bcs.s	@loc_12998
00014D8C 7001                       		moveq	#1,d0
00014D8E 4E75                       		rts	
00014D90                            ; ===========================================================================
00014D90                            
00014D90                            @loc_12998:
00014D90 7000                       		moveq	#0,d0
00014D92 4E75                       		rts	
00014D92 4E75                       		rts	
00014D94                            		include	"_anim\Bubbles.asm"
00014D94                            ; ---------------------------------------------------------------------------
00014D94                            ; Animation script - bubbles (LZ)
00014D94                            ; ---------------------------------------------------------------------------
00014D94 0000                       Ani_Bub:	dc.w @small-Ani_Bub
00014D96 0000                       		dc.w @medium-Ani_Bub
00014D98 0000                       		dc.w @large-Ani_Bub
00014D9A 0000                       		dc.w @incroutine-Ani_Bub
00014D9C 0000                       		dc.w @incroutine-Ani_Bub
00014D9E 0000                       		dc.w @burst-Ani_Bub
00014DA0 0000                       		dc.w @bubmaker-Ani_Bub
00014DA2 0D00 0102 FC               @small:		dc.b $D, 0, 1, 2, afRoutine ; small bubble forming
00014DA8 00                         		even
00014DA8 0D01 0203 04FC             @medium:	dc.b $D, 1, 2, 3, 4, afRoutine ; medium bubble forming
00014DAE 0D02 0304 0506 FC          @large:		dc.b $D, 2, 3, 4, 5, 6,	afRoutine ; full size bubble forming
00014DB6 00                         		even
00014DB6 04FC                       @incroutine:	dc.b 4,	afRoutine	; increment routine counter (no animation)
00014DB8 0406 0708 FC               @burst:		dc.b 4,	6, 7, 8, afRoutine ; large bubble bursts
00014DBE 00                         		even
00014DBE 0E13 1415 FF               @bubmaker:	dc.b $E, $13, $14, $15,	afEnd ; bubble maker on the floor
00014DC4 00                         		even
00014DC4 00                         		even
00014DC4                            Map_Bub:	include	"_maps\Bubbles.asm"
00014DC4                            ; ---------------------------------------------------------------------------
00014DC4                            ; Sprite mappings - bubbles (LZ)
00014DC4                            ; ---------------------------------------------------------------------------
00014DC4                            Map_Bub_internal:
00014DC4 0000                       		dc.w @bubble1-Map_Bub_internal
00014DC6 0000                       		dc.w @bubble2-Map_Bub_internal
00014DC8 0000                       		dc.w @bubble3-Map_Bub_internal
00014DCA 0000                       		dc.w @bubble4-Map_Bub_internal
00014DCC 0000                       		dc.w @bubble5-Map_Bub_internal
00014DCE 0000                       		dc.w @bubble6-Map_Bub_internal
00014DD0 0000                       		dc.w @bubblefull-Map_Bub_internal
00014DD2 0000                       		dc.w @burst1-Map_Bub_internal
00014DD4 0000                       		dc.w @burst2-Map_Bub_internal
00014DD6 0000                       		dc.w @zero_sm-Map_Bub_internal
00014DD8 0000                       		dc.w @five_sm-Map_Bub_internal
00014DDA 0000                       		dc.w @three_sm-Map_Bub_internal
00014DDC 0000                       		dc.w @one_sm-Map_Bub_internal
00014DDE 0000                       		dc.w @zero-Map_Bub_internal
00014DE0 0000                       		dc.w @five-Map_Bub_internal
00014DE2 0000                       		dc.w @four-Map_Bub_internal
00014DE4 0000                       		dc.w @three-Map_Bub_internal
00014DE6 0000                       		dc.w @two-Map_Bub_internal
00014DE8 0000                       		dc.w @one-Map_Bub_internal
00014DEA 0000                       		dc.w @bubmaker1-Map_Bub_internal
00014DEC 0000                       		dc.w @bubmaker2-Map_Bub_internal
00014DEE 0000                       		dc.w @bubmaker3-Map_Bub_internal
00014DF0 0000                       		dc.w @blank-Map_Bub_internal
00014DF2 01                         @bubble1:	dc.b 1
00014DF3 FC00 0000 FC               		dc.b $FC, 0, 0,	0, $FC	; bubbles, increasing in size
00014DF8 01                         @bubble2:	dc.b 1
00014DF9 FC00 0001 FC               		dc.b $FC, 0, 0,	1, $FC
00014DFE 01                         @bubble3:	dc.b 1
00014DFF FC00 0002 FC               		dc.b $FC, 0, 0,	2, $FC
00014E04 01                         @bubble4:	dc.b 1
00014E05 F805 0003 F8               		dc.b $F8, 5, 0,	3, $F8
00014E0A 01                         @bubble5:	dc.b 1
00014E0B F805 0007 F8               		dc.b $F8, 5, 0,	7, $F8
00014E10 01                         @bubble6:	dc.b 1
00014E11 F40A 000B F4               		dc.b $F4, $A, 0, $B, $F4
00014E16 01                         @bubblefull:	dc.b 1
00014E17 F00F 0014 F0               		dc.b $F0, $F, 0, $14, $F0
00014E1C 04                         @burst1:	dc.b 4
00014E1D F005 0024 F0               		dc.b $F0, 5, 0,	$24, $F0 ; large bubble bursting
00014E22 F005 0824 00               		dc.b $F0, 5, 8,	$24, 0
00014E27 0005 1024 F0               		dc.b 0,	5, $10,	$24, $F0
00014E2C 0005 1824 00               		dc.b 0,	5, $18,	$24, 0
00014E31 04                         @burst2:	dc.b 4
00014E32 F005 0028 F0               		dc.b $F0, 5, 0,	$28, $F0
00014E37 F005 0828 00               		dc.b $F0, 5, 8,	$28, 0
00014E3C 0005 1028 F0               		dc.b 0,	5, $10,	$28, $F0
00014E41 0005 1828 00               		dc.b 0,	5, $18,	$28, 0
00014E46 01                         @zero_sm:	dc.b 1
00014E47 F406 002C F8               		dc.b $F4, 6, 0,	$2C, $F8 ; small, partially-formed countdown numbers
00014E4C 01                         @five_sm:	dc.b 1
00014E4D F406 0032 F8               		dc.b $F4, 6, 0,	$32, $F8
00014E52 01                         @three_sm:	dc.b 1
00014E53 F406 0038 F8               		dc.b $F4, 6, 0,	$38, $F8
00014E58 01                         @one_sm:	dc.b 1
00014E59 F406 003E F8               		dc.b $F4, 6, 0,	$3E, $F8
00014E5E 01                         @zero:		dc.b 1
00014E5F F406 2044 F8               		dc.b $F4, 6, $20, $44, $F8 ; fully-formed countdown numbers
00014E64 01                         @five:		dc.b 1
00014E65 F406 204A F8               		dc.b $F4, 6, $20, $4A, $F8
00014E6A 01                         @four:		dc.b 1
00014E6B F406 2050 F8               		dc.b $F4, 6, $20, $50, $F8
00014E70 01                         @three:		dc.b 1
00014E71 F406 2056 F8               		dc.b $F4, 6, $20, $56, $F8
00014E76 01                         @two:		dc.b 1
00014E77 F406 205C F8               		dc.b $F4, 6, $20, $5C, $F8
00014E7C 01                         @one:		dc.b 1
00014E7D F406 2062 F8               		dc.b $F4, 6, $20, $62, $F8
00014E82 01                         @bubmaker1:	dc.b 1
00014E83 F805 0068 F8               		dc.b $F8, 5, 0,	$68, $F8
00014E88 01                         @bubmaker2:	dc.b 1
00014E89 F805 006C F8               		dc.b $F8, 5, 0,	$6C, $F8
00014E8E 01                         @bubmaker3:	dc.b 1
00014E8F F805 0070 F8               		dc.b $F8, 5, 0,	$70, $F8
00014E94 00                         @blank:		dc.b 0
00014E96 00                         		even
00014E96 00                         		even
00014E96                            		include	"_incObj\65 Waterfalls.asm"
00014E96                            ; ---------------------------------------------------------------------------
00014E96                            ; Object 65 - waterfalls (LZ)
00014E96                            ; ---------------------------------------------------------------------------
00014E96                            
00014E96                            Waterfall:
00014E96 7000                       		moveq	#0,d0
00014E98 1028 0024                  		move.b	obRoutine(a0),d0
00014E9C 323B 0000                  		move.w	WFall_Index(pc,d0.w),d1
00014EA0 4EFB 1000                  		jmp	WFall_Index(pc,d1.w)
00014EA4                            ; ===========================================================================
00014EA4 0000                       WFall_Index:	dc.w WFall_Main-WFall_Index
00014EA6 0000                       		dc.w WFall_Animate-WFall_Index
00014EA8 0000                       		dc.w WFall_ChkDel-WFall_Index
00014EAA 0000                       		dc.w WFall_OnWater-WFall_Index
00014EAC 0000                       		dc.w loc_12B36-WFall_Index
00014EAE                            ; ===========================================================================
00014EAE                            
00014EAE                            WFall_Main:	; Routine 0
00014EAE 5828 0024                  		addq.b	#4,obRoutine(a0)
00014EB2 217C 0000 0000 0004        		move.l	#Map_WFall,obMap(a0)
00014EBA 317C 4259 0002             		move.w	#$4259,obGfx(a0)
00014EC0 0028 0004 0001             		ori.b	#4,obRender(a0)
00014EC6 117C 0018 0014             		move.b	#$18,obActWid(a0)
00014ECC 317C 0080 0018             		move.w	#$80,obPriority(a0)
00014ED2 1028 0028                  		move.b	obSubtype(a0),d0 ; get object type
00014ED6 6A00                       		bpl.s	@under80	; branch if $00-$7F
00014ED8 08E8 0007 0002             		bset	#7,obGfx(a0)
00014EDE                            
00014EDE                            	@under80:
00014EDE 0200 000F                  		andi.b	#$F,d0		; read only the	2nd digit
00014EE2 1140 001A                  		move.b	d0,obFrame(a0)	; set frame number
00014EE6 0C00 0009                  		cmpi.b	#9,d0		; is object type $x9 ?
00014EEA 6600                       		bne.s	WFall_ChkDel	; if not, branch
00014EEC                            
00014EEC 4228 0018                  		clr.b	obPriority(a0)	; object is in front of Sonic
00014EF0 5528 0024                  		subq.b	#2,obRoutine(a0) ; goto WFall_Animate next
00014EF4 0828 0006 0028             		btst	#6,obSubtype(a0) ; is object type $49 ?
00014EFA 6700                       		beq.s	@not49		; if not, branch
00014EFC                            
00014EFC 117C 0006 0024             		move.b	#6,obRoutine(a0) ; goto WFall_OnWater next
00014F02                            
00014F02                            	@not49:
00014F02 0828 0005 0028             		btst	#5,obSubtype(a0) ; is object type $A9 ?
00014F08 6700                       		beq.s	WFall_Animate	; if not, branch
00014F0A 117C 0008 0024             		move.b	#8,obRoutine(a0) ; goto loc_12B36 next
00014F10                            
00014F10                            WFall_Animate:	; Routine 2
00014F10 43F9 0000 0000             		lea	(Ani_WFall).l,a1
00014F16 4EB9 0000 CA28             		jsr	(AnimateSprite).l
00014F1C                            
00014F1C                            WFall_ChkDel:	; Routine 4
00014F1C 6000 C9D4                  		bra.w	RememberState
00014F20                            ; ===========================================================================
00014F20                            
00014F20                            WFall_OnWater:	; Routine 6
00014F20 3038 F646                  		move.w	(v_waterpos1).w,d0
00014F24 0440 0010                  		subi.w	#$10,d0
00014F28 3140 000C                  		move.w	d0,obY(a0)	; match	object position	to water height
00014F2C 60E2                       		bra.s	WFall_Animate
00014F2E                            ; ===========================================================================
00014F2E                            
00014F2E                            loc_12B36:	; Routine 8
00014F2E 08A8 0007 0002             		bclr	#7,obGfx(a0)
00014F34 0C38 0007 A506             		cmpi.b	#7,(v_lvllayout+$106).w
00014F3A 6600                       		bne.s	@animate
00014F3C 08E8 0007 0002             		bset	#7,obGfx(a0)
00014F42                            
00014F42                            	@animate:
00014F42 60CC                       		bra.s	WFall_Animate
00014F42 60CC                       		bra.s	WFall_Animate
00014F44                            		include	"_anim\Waterfalls.asm"
00014F44                            ; ---------------------------------------------------------------------------
00014F44                            ; Animation script - waterfall (LZ)
00014F44                            ; ---------------------------------------------------------------------------
00014F44 0000                       Ani_WFall:	dc.w @splash-Ani_WFall
00014F46 0509 0A0B FF               @splash:	dc.b 5,	9, $A, $B, afEnd
00014F4C 00                         		even
00014F4C 00                         		even
00014F4C                            Map_WFall	include	"_maps\Waterfalls.asm"
00014F4C                            ; ---------------------------------------------------------------------------
00014F4C                            ; Sprite mappings - waterfalls (LZ)
00014F4C                            ; ---------------------------------------------------------------------------
00014F4C                            Map_WFall_internal:
00014F4C 0000                       		dc.w @vertnarrow-Map_WFall_internal
00014F4E 0000                       		dc.w @cornerwide-Map_WFall_internal
00014F50 0000                       		dc.w @cornermedium-Map_WFall_internal
00014F52 0000                       		dc.w @cornernarrow-Map_WFall_internal
00014F54 0000                       		dc.w @cornermedium2-Map_WFall_internal
00014F56 0000                       		dc.w @cornernarrow2-Map_WFall_internal
00014F58 0000                       		dc.w @cornernarrow3-Map_WFall_internal
00014F5A 0000                       		dc.w @vertwide-Map_WFall_internal
00014F5C 0000                       		dc.w @diagonal-Map_WFall_internal
00014F5E 0000                       		dc.w @splash1-Map_WFall_internal
00014F60 0000                       		dc.w @splash2-Map_WFall_internal
00014F62 0000                       		dc.w @splash3-Map_WFall_internal
00014F64 01                         @vertnarrow:	dc.b 1
00014F65 F007 0000 F8               		dc.b $F0, 7, 0,	0, $F8
00014F6A 02                         @cornerwide:	dc.b 2
00014F6B F804 0008 FC               		dc.b $F8, 4, 0,	8, $FC
00014F70 0008 000A F4               		dc.b 0,	8, 0, $A, $F4
00014F75 02                         @cornermedium:	dc.b 2
00014F76 F800 0008 00               		dc.b $F8, 0, 0,	8, 0
00014F7B 0004 000D F8               		dc.b 0,	4, 0, $D, $F8
00014F80 01                         @cornernarrow:	dc.b 1
00014F81 F801 000F 00               		dc.b $F8, 1, 0,	$F, 0
00014F86 02                         @cornermedium2:	dc.b 2
00014F87 F800 0008 00               		dc.b $F8, 0, 0,	8, 0
00014F8C 0004 000D F8               		dc.b 0,	4, 0, $D, $F8
00014F91 01                         @cornernarrow2:	dc.b 1
00014F92 F801 0011 00               		dc.b $F8, 1, 0,	$11, 0
00014F97 01                         @cornernarrow3:	dc.b 1
00014F98 F801 0013 00               		dc.b $F8, 1, 0,	$13, 0
00014F9D 01                         @vertwide:	dc.b 1
00014F9E F007 0015 F8               		dc.b $F0, 7, 0,	$15, $F8
00014FA3 02                         @diagonal:	dc.b 2
00014FA4 F80C 001D F6               		dc.b $F8, $C, 0, $1D, $F6
00014FA9 000C 0021 E8               		dc.b 0,	$C, 0, $21, $E8
00014FAE 02                         @splash1:	dc.b 2
00014FAF F00B 0025 E8               		dc.b $F0, $B, 0, $25, $E8
00014FB4 F00B 0031 00               		dc.b $F0, $B, 0, $31, 0
00014FB9 02                         @splash2:	dc.b 2
00014FBA F00B 003D E8               		dc.b $F0, $B, 0, $3D, $E8
00014FBF F00B 0049 00               		dc.b $F0, $B, 0, $49, 0
00014FC4 02                         @splash3:	dc.b 2
00014FC5 F00B 0055 E8               		dc.b $F0, $B, 0, $55, $E8
00014FCA F00B 0061 00               		dc.b $F0, $B, 0, $61, 0
00014FD0 00                         		even
00014FD0 00                         		even
00014FD0                            
00014FD0                            
00014FD0                            SpinDash_dust:
00014FD0                            Sprite_1DD20:				; DATA XREF: ROM:0001600C?o
00014FD0 7000                       		moveq	#0,d0
00014FD2 1028 0024                  		move.b	$24(a0),d0
00014FD6 323B 0000                  		move	off_1DD2E(pc,d0.w),d1
00014FDA 4EFB 1000                  		jmp	off_1DD2E(pc,d1.w)
00014FDE                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
00014FDE 0000                       off_1DD2E:	dc loc_1DD36-off_1DD2E; 0 ; DATA XREF: h+6DBA?o h+6DBC?o ...
00014FE0 0000                       		dc loc_1DD90-off_1DD2E; 1
00014FE2 0000                       		dc loc_1DE46-off_1DD2E; 2
00014FE4 0000                       		dc loc_1DE4A-off_1DD2E; 3
00014FE6                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
00014FE6                            
00014FE6                            loc_1DD36:				; DATA XREF: h+6DBA?o
00014FE6 5428 0024                  		addq.b	#2,$24(a0)
00014FEA 217C 0000 0000 0004        		move.l	#MapUnc_1DF5E,4(a0)
00014FF2 0028 0004 0001             		or.b	#4,1(a0)
00014FF8 317C 0080 0018             		move.w	#$80,obPriority(a0)
00014FFE 117C 0010 0014             		move.b	#$10,obActWid(a0)
00015004 317C 07AC 0002             		move	#$7AC,2(a0)
0001500A 317C D000 003E             		move	#-$3000,$3E(a0)
00015010 317C F580 003C             		move	#$F580,$3C(a0)
00015016 B0FC D1C0                  		cmp	#-$2E40,a0
0001501A 6700                       		beq.s	loc_1DD8C
0001501C 117C 0001 0034             		move.b	#1,$34(a0)
00015022                            ;		cmp	#2,($FFFFFF70).w
00015022                            ;		beq.s	loc_1DD8C
00015022                            ;		move	#$48C,2(a0)
00015022                            ;		move	#-$4FC0,$3E(a0)
00015022                            ;		move	#-$6E80,$3C(a0)
00015022                            
00015022                            loc_1DD8C:				; CODE XREF: h+6DF6?j h+6E04?j
00015022                            ;		bsr.w	sub_16D6E
00015022                            
00015022                            loc_1DD90:				; DATA XREF: h+6DBA?o
00015022 3468 003E                  		movea.w	$3E(a0),a2
00015026 7000                       		moveq	#0,d0
00015028 1028 001C                  		move.b	$1C(a0),d0
0001502C D040                       		add	d0,d0
0001502E 323B 0000                  		move	off_1DDA4(pc,d0.w),d1
00015032 4EFB 1000                  		jmp	off_1DDA4(pc,d1.w)
00015036                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
00015036 0000                       off_1DDA4:	dc loc_1DE28-off_1DDA4; 0 ; DATA XREF: h+6E30?o h+6E32?o ...
00015038 0000                       		dc loc_1DDAC-off_1DDA4; 1
0001503A 0000                       		dc loc_1DDCC-off_1DDA4; 2
0001503C 0000                       		dc loc_1DE20-off_1DDA4; 3
0001503E                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
0001503E                            
0001503E                            loc_1DDAC:				; DATA XREF: h+6E30?o
0001503E 3178 F646 000C             		move	($FFFFF646).w,$C(a0)
00015044 4A28 001D                  		tst.b	$1D(a0)
00015048 6600                       		bne.s	loc_1DE28
0001504A 316A 0008 0008             		move	8(a2),8(a0)
00015050 117C 0000 0022             		move.b	#0,$22(a0)
00015056 0268 7FFF 0002             		and	#$7FFF,2(a0)
0001505C 6000                       		bra.s	loc_1DE28
0001505E                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
0001505E                            
0001505E                            loc_1DDCC:				; DATA XREF: h+6E30?o
0001505E                            ;		cmp.b	#$C,$28(a2)
0001505E                            ;		bcs.s	loc_1DE3E
0001505E 0C2A 0004 0024             		cmp.b	#4,$24(a2)
00015064 6400                       		bcc.s	loc_1DE3E
00015066 4A2A 0039                  		tst.b	$39(a2)
0001506A 6700                       		beq.s	loc_1DE3E
0001506C 316A 0008 0008             		move	8(a2),8(a0)
00015072 316A 000C 000C             		move	$C(a2),$C(a0)
00015078 116A 0022 0022             		move.b	$22(a2),$22(a0)
0001507E 0228 0001 0022             		and.b	#1,$22(a0)
00015084 4A28 0034                  		tst.b	$34(a0)
00015088 6700                       		beq.s	loc_1DE06
0001508A 5968 000C                  		sub	#4,$C(a0)
0001508E                            
0001508E                            loc_1DE06:				; CODE XREF: h+6E8A?j
0001508E 4A28 001D                  		tst.b	$1D(a0)
00015092 6600                       		bne.s	loc_1DE28
00015094 0268 7FFF 0002             		and	#$7FFF,2(a0)
0001509A 4A6A 0002                  		tst	2(a2)
0001509E 6A00                       		bpl.s	loc_1DE28
000150A0 0068 8000 0002             		or	#-$8000,2(a0)
000150A6                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
000150A6                            
000150A6                            loc_1DE20:				; DATA XREF: h+6E30?o
000150A6                            loc_1DE28:				; CODE XREF: h+6E42?j h+6E56?j ...
000150A6 43F9 0000 0000             		lea	(off_1DF38).l,a1
000150AC 4EB9 0000 CA28             		jsr	AnimateSprite
000150B2 6100 0000                  		bsr.w	loc_1DEE4
000150B6 4EFA A8C4                  		jmp	DisplaySprite
000150BA                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
000150BA                            
000150BA                            loc_1DE3E:				; CODE XREF: h+6E5E?j h+6E66?j ...
000150BA 117C 0000 001C             		move.b	#0,$1C(a0)
000150C0 4E75                       		rts	
000150C2                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
000150C2                            
000150C2                            loc_1DE46:				; DATA XREF: h+6DBA?o
000150C2 6000 A8F8                  		bra.w	DeleteObject
000150C6                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
000150C6                            
000150C6                            
000150C6                            
000150C6                            loc_1DE4A:
000150C6 3468 003E                  	movea.w	$3E(a0),a2
000150CA 7210                       	moveq	#$10,d1
000150CC 0C2A 000D 001C             	cmp.b	#$D,$1C(a2)
000150D2 6700                       	beq.s	loc_1DE64
000150D4 7206                       	moveq	#$6,d1
000150D6 0C2A 0003 0021             	cmp.b	#$3,$21(a2)
000150DC 6700                       	beq.s	loc_1DE64
000150DE 117C 0002 0024             	move.b	#2,$24(a0)
000150E4 117C 0000 0032             	move.b	#0,$32(a0)
000150EA 4E75                       	rts
000150EC                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
000150EC                            
000150EC                            loc_1DE64:				; CODE XREF: h+6EE0?j
000150EC 5328 0032                  		subq.b	#1,$32(a0)
000150F0 6A00                       		bpl.s	loc_1DEE0
000150F2 117C 0003 0032             		move.b	#3,$32(a0)
000150F8 4EBA AD0E                  		jsr	FindFreeObj
000150FC 6600                       		bne.s	loc_1DEE0
000150FE 1290                       		move.b	0(a0),0(a1)
00015100 336A 0008 0008             		move	8(a2),8(a1)
00015106 336A 000C 000C             		move	$C(a2),$C(a1)
0001510C 4A28 0034                  		tst.b	$34(a0)
00015110 6700                       		beq.s	loc_1DE9A
00015112 5941                       		sub	#4,d1
00015114                            
00015114                            loc_1DE9A:				; CODE XREF: h+6F1E?j
00015114 D369 000C                  		add	d1,$C(a1)
00015118 137C 0000 0022             		move.b	#0,$22(a1)
0001511E 137C 0003 001C             		move.b	#3,$1C(a1)
00015124 5429 0024                  		addq.b	#2,$24(a1)
00015128 2368 0004 0004             		move.l	4(a0),4(a1)
0001512E 1368 0001 0001             		move.b	1(a0),1(a1)
00015134 337C 0080 0018             		move.w	#$80,obPriority(a1)
0001513A 137C 0004 0014             		move.b	#4,obActWid(a1)
00015140 3368 0002 0002             		move	2(a0),2(a1)
00015146 3368 003E 003E             		move	$3E(a0),$3E(a1)
0001514C 0269 7FFF 0002             		and	#$7FFF,2(a1)
00015152 4A6A 0002                  		tst	2(a2)
00015156 6A00                       		bpl.s	loc_1DEE0
00015158 0069 8000 0002             		or	#-$8000,2(a1)
0001515E                            
0001515E                            loc_1DEE0:				; CODE XREF: h+6EF4?j h+6F00?j ...
0001515E 6100                       		bsr.s	loc_1DEE4
00015160 4E75                       		rts	
00015162                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
00015162                            
00015162                            loc_1DEE4:				; CODE XREF: h+6EC0?p h+6F6C?p
00015162 7000                       		moveq	#0,d0
00015164 1028 001A                  		move.b	$1A(a0),d0
00015168 B028 0030                  		cmp.b	$30(a0),d0
0001516C 6700 0000                  		beq.w	locret_1DF36
00015170 1140 0030                  		move.b	d0,$30(a0)
00015174 45F9 0000 0000             		lea	(off_1E074).l,a2
0001517A D040                       		add	d0,d0
0001517C D4F2 0000                  		add	(a2,d0.w),a2
00015180 3A1A                       		move	(a2)+,d5
00015182 5345                       		subq	#1,d5
00015184 6B00 0000                  		bmi.w	locret_1DF36
00015188 3828 003C                  		move $3C(a0),d4
0001518C                            
0001518C                            loc_1DF0A:				; CODE XREF: h+6FBE?j
0001518C 7200                       		moveq	#0,d1
0001518E 321A                       		move	(a2)+,d1
00015190 3601                       		move	d1,d3
00015192 E04B                       		lsr.w	#8,d3
00015194 0243 00F0                  		and	#$F0,d3	; 'ð'
00015198 0643 0010                  		add	#$10,d3
0001519C 0241 0FFF                  		and	#$FFF,d1
000151A0 EB89                       		lsl.l	#5,d1
000151A2 0681 0000 0000             		add.l	#Art_Dust,d1
000151A8 3404                       		move	d4,d2
000151AA D843                       		add	d3,d4
000151AC D843                       		add	d3,d4
000151AE 4EB9 0000 142A             		jsr	(QueueDMATransfer).l
000151B4 51CD FFD6                  		dbf	d5,loc_1DF0A
000151B8 4E75                           rts
000151BA                            
000151BA                            locret_1DF36:				; CODE XREF: h+6F7A?j h+6F90?j
000151BA 4E75                       		rts	
000151BC                            ; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
000151BC 0000                       off_1DF38:	dc byte_1DF40-off_1DF38; 0 ; DATA XREF: h+6EB4?o h+6FC4?o ...
000151BE 0000                       		dc byte_1DF43-off_1DF38; 1
000151C0 0000                       		dc byte_1DF4F-off_1DF38; 2
000151C2 0000                       		dc byte_1DF58-off_1DF38; 3
000151C4 1F00 FF                    byte_1DF40:	dc.b $1F,  0,$FF	; 0 ; DATA XREF: h+6FC4?o
000151C7 0301 0203 0405 0607 0809+  byte_1DF43:	dc.b   3,  1,  2,  3,  4,  5,  6,  7,  8,  9,$FD,  0; 0	; DATA XREF: h+6FC4?o
000151D3 010A 0B0C 0D0E 0F10 FF     byte_1DF4F:	dc.b   1, $A, $B, $C, $D, $E, $F,$10,$FF; 0 ; DATA XREF: h+6FC4?o
000151DC 0311 1213 14FC             byte_1DF58:	dc.b   3,$11,$12,$13,$14,$FC; 0	; DATA XREF: h+6FC4?o
000151E2                            ; -------------------------------------------------------------------------------
000151E2                            ; Unknown Sprite Mappings
000151E2                            ; -------------------------------------------------------------------------------
000151E2                            MapUnc_1DF5E:
000151E2 0000                       	dc word_1DF8A-MapUnc_1DF5E; 0
000151E4 0000                       	dc word_1DF8C-MapUnc_1DF5E; 1
000151E6 0000                       	dc word_1DF96-MapUnc_1DF5E; 2
000151E8 0000                       	dc word_1DFA0-MapUnc_1DF5E; 3
000151EA 0000                       	dc word_1DFAA-MapUnc_1DF5E; 4
000151EC 0000                       	dc word_1DFB4-MapUnc_1DF5E; 5
000151EE 0000                       	dc word_1DFBE-MapUnc_1DF5E; 6
000151F0 0000                       	dc word_1DFC8-MapUnc_1DF5E; 7
000151F2 0000                       	dc word_1DFD2-MapUnc_1DF5E; 8
000151F4 0000                       	dc word_1DFDC-MapUnc_1DF5E; 9
000151F6 0000                       	dc word_1DFE6-MapUnc_1DF5E; 10
000151F8 0000                       	dc word_1DFF0-MapUnc_1DF5E; 11
000151FA 0000                       	dc word_1DFFA-MapUnc_1DF5E; 12
000151FC 0000                       	dc word_1E004-MapUnc_1DF5E; 13
000151FE 0000                       	dc word_1E016-MapUnc_1DF5E; 14
00015200 0000                       	dc word_1E028-MapUnc_1DF5E; 15
00015202 0000                       	dc word_1E03A-MapUnc_1DF5E; 16
00015204 0000                       	dc word_1E04C-MapUnc_1DF5E; 17
00015206 0000                       	dc word_1E056-MapUnc_1DF5E; 18
00015208 0000                       	dc word_1E060-MapUnc_1DF5E; 19
0001520A 0000                       	dc word_1E06A-MapUnc_1DF5E; 20
0001520C 0000                       	dc word_1DF8A-MapUnc_1DF5E; 21
0001520E 00                         word_1DF8A:	dc.b 0
0001520F 01                         word_1DF8C:	dc.b 1
00015210 F20D 0000 F0               	dc.b $F2, $0D, $0, 0,$F0; 0
00015215 01                         word_1DF96:	dc.b 1
00015216 E20F 0000 F0               	dc.b $E2, $0F, $0, 0,$F0; 0
0001521B 01                         word_1DFA0:	dc.b 1
0001521C E20F 0000 F0               	dc.b $E2, $0F, $0, 0,$F0; 0
00015221 01                         word_1DFAA:	dc.b 1
00015222 E20F 0000 F0               	dc.b $E2, $0F, $0, 0,$F0; 0
00015227 01                         word_1DFB4:	dc.b 1
00015228 E20F 0000 F0               	dc.b $E2, $0F, $0, 0,$F0; 0
0001522D 01                         word_1DFBE:	dc.b 1
0001522E E20F 0000 F0               	dc.b $E2, $0F, $0, 0,$F0; 0
00015233 01                         word_1DFC8:	dc.b 1
00015234 F20D 0000 F0               	dc.b $F2, $0D, $0, 0,$F0; 0
00015239 01                         word_1DFD2:	dc.b 1
0001523A F20D 0000 F0               	dc.b $F2, $0D, $0, 0,$F0; 0
0001523F 01                         word_1DFDC:	dc.b 1
00015240 F20D 0000 F0               	dc.b $F2, $0D, $0, 0,$F0; 0
00015245 01                         word_1DFE6:	dc.b 1
00015246 040D 0000 E0               	dc.b $4, $0D, $0, 0,$E0; 0
0001524B 01                         word_1DFF0:	dc.b 1
0001524C 040D 0000 E0               	dc.b $4, $0D, $0, 0,$E0; 0
00015251 01                         word_1DFFA:	dc.b 1
00015252 040D 0000 E0               	dc.b $4, $0D, $0, 0,$E0; 0
00015257 02                         word_1E004:	dc.b 2
00015258 F401 0000 E8               	dc.b $F4, $01, $0, 0,$E8; 0
0001525D 040D 0002 E0               	dc.b $4, $0D, $0, 2,$E0; 4
00015262 02                         word_1E016:	dc.b 2
00015263 F405 0000 E8               	dc.b $F4, $05, $0, 0,$E8; 0
00015268 040D 0004 E0               	dc.b $4, $0D, $0, 4,$E0; 4
0001526D 02                         word_1E028:	dc.b 2
0001526E F409 0000 E0               	dc.b $F4, $09, $0, 0,$E0; 0
00015273 040D 0006 E0               	dc.b $4, $0D, $0, 6,$E0; 4
00015278 02                         word_1E03A:	dc.b 2
00015279 F409 0000 E0               	dc.b $F4, $09, $0, 0,$E0; 0
0001527E 040D 0006 E0               	dc.b $4, $0D, $0, 6,$E0; 4
00015283 01                         word_1E04C:	dc.b 1
00015284 F805 0000 F8               	dc.b $F8, $05, $0, 0,$F8; 0
00015289 01                         word_1E056:	dc.b 1
0001528A F805 0004 F8               	dc.b $F8, $05, $0, 4,$F8; 0
0001528F 01                         word_1E060:	dc.b 1
00015290 F805 0008 F8               	dc.b $F8, $05, $0, 8,$F8; 0
00015295 01                         word_1E06A:	dc.b 1
00015296 F805 000C F8               	dc.b $F8, $05, $0, $C,$F8; 0
0001529B 00                         	dc.b 0
0001529C 0000                       off_1E074:	dc word_1E0A0-off_1E074; 0
0001529E 0000                       	dc word_1E0A2-off_1E074; 1
000152A0 0000                       	dc word_1E0A6-off_1E074; 2
000152A2 0000                       	dc word_1E0AA-off_1E074; 3
000152A4 0000                       	dc word_1E0AE-off_1E074; 4
000152A6 0000                       	dc word_1E0B2-off_1E074; 5
000152A8 0000                       	dc word_1E0B6-off_1E074; 6
000152AA 0000                       	dc word_1E0BA-off_1E074; 7
000152AC 0000                       	dc word_1E0BE-off_1E074; 8
000152AE 0000                       	dc word_1E0C2-off_1E074; 9
000152B0 0000                       	dc word_1E0C6-off_1E074; 10
000152B2 0000                       	dc word_1E0CA-off_1E074; 11
000152B4 0000                       	dc word_1E0CE-off_1E074; 12
000152B6 0000                       	dc word_1E0D2-off_1E074; 13
000152B8 0000                       	dc word_1E0D8-off_1E074; 14
000152BA 0000                       	dc word_1E0DE-off_1E074; 15
000152BC 0000                       	dc word_1E0E4-off_1E074; 16
000152BE 0000                       	dc word_1E0EA-off_1E074; 17
000152C0 0000                       	dc word_1E0EA-off_1E074; 18
000152C2 0000                       	dc word_1E0EA-off_1E074; 19
000152C4 0000                       	dc word_1E0EA-off_1E074; 20
000152C6 0000                       	dc word_1E0EC-off_1E074; 21
000152C8 0000                       word_1E0A0:	dc 0
000152CA 0001                       word_1E0A2:	dc 1
000152CC 7000                       	dc $7000
000152CE 0001                       word_1E0A6:	dc 1
000152D0 F008                       	dc $F008
000152D2 0001                       word_1E0AA:	dc 1
000152D4 F018                       	dc $F018
000152D6 0001                       word_1E0AE:	dc 1
000152D8 F028                       	dc $F028
000152DA 0001                       word_1E0B2:	dc 1
000152DC F038                       	dc $F038
000152DE 0001                       word_1E0B6:	dc 1
000152E0 F048                       	dc $F048
000152E2 0001                       word_1E0BA:	dc 1
000152E4 7058                       	dc $7058
000152E6 0001                       word_1E0BE:	dc 1
000152E8 7060                       	dc $7060
000152EA 0001                       word_1E0C2:	dc 1
000152EC 7068                       	dc $7068
000152EE 0001                       word_1E0C6:	dc 1
000152F0 7070                       	dc $7070
000152F2 0001                       word_1E0CA:	dc 1
000152F4 7078                       	dc $7078
000152F6 0001                       word_1E0CE:	dc 1
000152F8 7080                       	dc $7080
000152FA 0002                       word_1E0D2:	dc 2
000152FC 1088                       	dc $1088
000152FE 708A                       	dc $708A
00015300 0002                       word_1E0D8:	dc 2
00015302 3092                       	dc $3092
00015304 7096                       	dc $7096
00015306 0002                       word_1E0DE:	dc 2
00015308 509E                       	dc $509E
0001530A 70A4                       	dc $70A4
0001530C 0002                       word_1E0E4:	dc 2
0001530E 50AC                       	dc $50AC
00015310 70B2                       	dc $70B2
00015312 0000                       word_1E0EA:	dc 0
00015314 0001                       word_1E0EC:	dc 1
00015316 F0BA                       	dc $F0BA
00015318                            	even
00015318                            
00015318                            ; ===========================================================================
00015318                            
00015318                            LoadPlayerPal:
00015318 7000                       		moveq	#0,d0
0001531A 1038 FFBF                  		move.b	($FFFFFFBF).w,d0
0001531E 103B 0000                  		move.b	@palLUT(pc,d0.w),d0
00015322 4E75                       		rts
00015324                            
00015324                            	@palLUT:
00015324 0315 1617 18               		dc.b	palid_Sonic, palid_Sonic2, palid_Sonic3, palid_Sonic4, palid_Sonic5
00015329 191A 1B1C 1D               		dc.b	palid_Sonic6, palid_Sonic7, palid_Sonic8, palid_Sonic9, palid_Sonic10
0001532E                            
0001532E                            LoadPlayerWaterPal:
0001532E 7000                       		moveq	#0,d0
00015330 1038 FFBF                  		move.b	($FFFFFFBF).w,d0
00015334 103B 0000                  		move.b	@palLUT(pc,d0.w),d0
00015338 4E75                       		rts
0001533A                            
0001533A                            	@palLUT:
0001533A 101E 1F20 21               		dc.b	palid_SBZ3SonWat, palid_SonWater2, palid_SonWater3, palid_SonWater4, palid_SonWater5
0001533F 2223 2425 26               		dc.b	palid_SonWater6, palid_SonWater7, palid_SonWater8, palid_SonWater9, palid_SonWater10
00015344                            
00015344                            ; ---------------------------------------------------------------------------
00015344                            ; Object 01 - Sonic
00015344                            ; ---------------------------------------------------------------------------
00015344                            
00015344                            SonicPlayer:
00015344 4A78 FE08                  		tst.w	(v_debuguse).w	; is debug mode	being used?
00015348 6700                       		beq.s	Sonic_Normal	; if not, branch
0001534A 4EF9 0000 0000             		jmp	(DebugMode).l
00015350                            ; ===========================================================================
00015350                            
00015350                            Sonic_Normal:
00015350 7000                       		moveq	#0,d0
00015352 1028 0024                  		move.b	obRoutine(a0),d0
00015356 323B 0000                  		move.w	Sonic_Index(pc,d0.w),d1
0001535A 4EFB 1000                  		jmp	Sonic_Index(pc,d1.w)
0001535E                            ; ===========================================================================
0001535E 0000                       Sonic_Index:	dc.w Sonic_Main-Sonic_Index
00015360 0000                       		dc.w Sonic_Control-Sonic_Index
00015362 0000                       		dc.w Sonic_Hurt-Sonic_Index
00015364 0000                       		dc.w Sonic_Death-Sonic_Index
00015366 0000                       		dc.w Sonic_ResetLevel-Sonic_Index
00015368                            ; ===========================================================================
00015368                            
00015368                            Sonic_Main:	; Routine 0
00015368 11FC 0005 D1C0             		move.b	#5,$FFFFD1C0.w
0001536E 5428 0024                  		addq.b	#2,obRoutine(a0)
00015372 117C 0013 0016             		move.b	#$13,obHeight(a0)
00015378 117C 0009 0017             		move.b	#9,obWidth(a0)
0001537E 217C 0000 0000 0004        		move.l	#Map_Sonic,obMap(a0)
00015386 317C 0780 0002             		move.w	#$780,obGfx(a0)
0001538C 317C 0100 0018             		move.w	#$100,obPriority(a0)
00015392 117C 0018 0014             		move.b	#$18,obActWid(a0)
00015398 117C 0004 0001             		move.b	#4,obRender(a0)
0001539E 31FC 0600 F760             		move.w	#$600,(v_sonspeedmax).w ; Sonic's top speed
000153A4 31FC 000C F762             		move.w	#$C,(v_sonspeedacc).w ; Sonic's acceleration
000153AA 31FC 0080 F764             		move.w	#$80,(v_sonspeeddec).w ; Sonic's deceleration
000153B0 11FC 0005 D1C0             		move.b	#5,$FFFFD1C0.w
000153B6                            
000153B6                            Sonic_Control:    ; Routine 2
000153B6 4A38 FF8B                   		tst.b	($FFFFFF8B).w
000153BA 6700 0000                  		beq.w	@cont    
000153BE 6100                       		bsr.s    Sonic_PanCamera    ; ++add this++
000153C0                             
000153C0                            	@cont: 
000153C0 4A78 FFFA                  		tst.w    (f_debugmode).w    ; is debug cheat enabled?
000153C4 6700                       		beq.s    loc_12C58    ; if not, branch
000153C6 0838 0004 F605             		btst    #bitB,(v_jpadpress1).w ; is button B pressed?
000153CC 6700                       		beq.s    loc_12C58    ; if not, branch
000153CE 31FC 0001 FE08             		move.w    #1,(v_debuguse).w ; change Sonic into a ring/item
000153D4 4238 F7CC                  		clr.b    (f_lockctrl).w
000153D8 4E75                       		rts
000153DA                            		
000153DA                            		include    "_incObj\Sonic PanCamera.asm"    ; ++add this++
000153DA                            ; ---------------------------------------------------------------------------
000153DA                            ; Subroutine to    horizontally pan the camera view ahead of the player
000153DA                            ; (Ported from the US version of Sonic CD's "R11A__.MMD" by Nat The Porcupine)
000153DA                            ; ---------------------------------------------------------------------------
000153DA                            
000153DA                            ; ||||||||||||||| S U B    R O U T    I N E |||||||||||||||||||||||||||||||||||||||
000153DA                            
000153DA                            
000153DA                            Sonic_PanCamera:
000153DA 3238 F7A0                          move.w    (v_camera_pan).w,d1        ; get the current camera pan value
000153DE 3028 0020                          move.w    obInertia(a0),d0        ; get sonic's inertia
000153E2 6A00                               bpl.s    @abs_inertia            ; if sonic's inertia is positive, branch ahead
000153E4 4440                               neg.w    d0                        ; otherwise, we negate it to get the absolute value
000153E6                            
000153E6                                @abs_inertia:
000153E6                            
000153E6                            ; These lines were intended to prevent the Camera from panning while
000153E6                            ; going up the very first giant ramp in Palmtree Panic Zone Act 1.
000153E6                            ; However, given that no such object exists in Sonic 1, I just went
000153E6                            ; ahead and commented these out.
000153E6                            ;        btst    #1,$2C(a0)                ; is sonic going up a giant ramp in PPZ?
000153E6                            ;        beq.s    @skip                    ; if not, branch
000153E6                            ;        cmpi.w    #$1B00,obX(a0)            ; is sonic's x position lower than $1B00?
000153E6                            ;        bcs.s    @reset_pan                ; if so, branch
000153E6                            
000153E6                            ; These lines aren't part of the original routine; I added them myself.
000153E6                            ; If you've ported the Spin Dash, uncomment the following lines of code
000153E6                            ; to allow the camera to pan ahead while charging the Spin Dash:
000153E6 4A28 0039                          tst.b    $39(a0)                    ; is sonic charging up a spin dash?
000153EA 6700                               beq.s    @skip                    ; if not, branch
000153EC 0828 0000 0022                     btst    #0,obStatus(a0)            ; check the direction that sonic is facing
000153F2 6600                               bne.s    @pan_right                ; if he's facing right, pan the camera to the right
000153F4 6000                               bra.s    @pan_left                ; otherwise, pan the camera to the left
000153F6                            
000153F6                                @skip:
000153F6 0C40 0600                          cmpi.w    #$600,d0                ; is sonic's inertia greater than $600
000153FA 6500                               bcs.s    @reset_pan                ; if not, recenter the screen (if needed)
000153FC 4A68 0020                          tst.w    obInertia(a0)            ; otherwise, check the direction of inertia (by subtracting it from 0)
00015400 6A00                               bpl.s    @pan_left                ; if the result was positive, then inertia was negative, so we pan the screen left
00015402                            
00015402                                @pan_right:
00015402 5441                               addq.w    #2,d1                    ; add 2 to the pan value
00015404 0C41 00E0                          cmpi.w    #224,d1                    ; is the pan value greater than 224 pixels?
00015408 6500                               bcs.s    @update_pan                ; if not, branch
0001540A 323C 00E0                          move.w    #224,d1                    ; otherwise, cap the value at the maximum of 224 pixels
0001540E 6000                               bra.s    @update_pan                ; branch
00015410                            ; ---------------------------------------------------------------------------
00015410                            
00015410                                @pan_left:
00015410 5541                               subq.w    #2,d1                    ; subtract 2 from the pan value
00015412 0C41 0060                          cmpi.w    #96,d1                    ; is the pan value less than 96 pixels?
00015416 6400                               bcc.s    @update_pan                ; if not, branch
00015418 323C 0060                          move.w    #96,d1                    ; otherwise, cap the value at the minimum of 96 pixels
0001541C 6000                               bra.s    @update_pan                ; branch
0001541E                            ; ---------------------------------------------------------------------------
0001541E                            
0001541E                                @reset_pan:
0001541E 0C41 00A0                          cmpi.w    #160,d1                    ; is the pan value 160 pixels?
00015422 6700                               beq.s    @update_pan                ; if so, branch
00015424 6400                               bcc.s    @reset_left                ; otherwise, branch if it greater than 160
00015426                                 
00015426                                @reset_right:
00015426 5441                               addq.w    #2,d1                    ; add 2 to the pan value
00015428 6000                               bra.s    @update_pan                ; branch
0001542A                            ; ---------------------------------------------------------------------------
0001542A                            
0001542A                                @reset_left:
0001542A 5541                               subq.w    #2,d1                    ; subtract 2 from the pan value
0001542C                            
0001542C                                @update_pan:
0001542C 31C1 F7A0                          move.w    d1,(v_camera_pan).w        ; update the camera pan value
00015430 4E75                               rts                                ; return
00015432                                 
00015432                            ; End of function Sonic_PanCamera
00015432                            
00015432                            
00015432                            ; ===========================================================================
00015432                            
00015432                            loc_12C58:
00015432 4A38 F7CC                  		tst.b	(f_lockctrl).w	; are controls locked?
00015436 6600                       		bne.s	loc_12C64	; if yes, branch
00015438 31F8 F604 F602             		move.w	(v_jpadhold1).w,(v_jpadhold2).w ; enable joypad control
0001543E                            
0001543E                            loc_12C64:
0001543E 0838 0000 F7C8             		btst	#0,(f_lockmulti).w ; are controls locked?
00015444 6600                       		bne.s	loc_12C7E	; if yes, branch
00015446 7000                       		moveq	#0,d0
00015448 1028 0022                  		move.b	obStatus(a0),d0
0001544C 0240 0006                  		andi.w	#6,d0
00015450 323B 0000                  		move.w	Sonic_Modes(pc,d0.w),d1
00015454 4EBB 1000                  		jsr	Sonic_Modes(pc,d1.w)
00015458                            
00015458                            loc_12C7E:
00015458 6100                       		bsr.s	Sonic_Display
0001545A 6100 0000                  		bsr.w	Sonic_RecordPosition
0001545E 6100 0000                  		bsr.w	Sonic_Water
00015462 1178 F768 0036             		move.b	(v_anglebuffer).w,$36(a0)
00015468 1178 F76A 0037             		move.b	($FFFFF76A).w,$37(a0)
0001546E 4A38 F7C7                  		tst.b	(f_wtunnelmode).w
00015472 6700                       		beq.s	loc_12CA6
00015474 4A28 001C                  		tst.b	obAnim(a0)
00015478 6600                       		bne.s	loc_12CA6
0001547A 1168 001D 001C             		move.b	obNextAni(a0),obAnim(a0)
00015480                            
00015480                            loc_12CA6:
00015480 6100 0000                  		bsr.w	Sonic_Animate
00015484 4A38 F7C8                  		tst.b	(f_lockmulti).w
00015488 6B00                       		bmi.s	loc_12CB6
0001548A 4EB9 0000 0000             		jsr	(ReactToItem).l
00015490                            
00015490                            loc_12CB6:
00015490 6100 0000                  		bsr.w	Sonic_Loops
00015494 6100 0000                  		bsr.w	Sonic_LoadGfx
00015498 4E75                       		rts	
0001549A                            ; ===========================================================================
0001549A 0000                       Sonic_Modes:	dc.w Sonic_MdNormal-Sonic_Modes
0001549C 0000                       		dc.w Sonic_MdJump-Sonic_Modes
0001549E 0000                       		dc.w Sonic_MdRoll-Sonic_Modes
000154A0 0000                       		dc.w Sonic_MdJump2-Sonic_Modes
000154A2                            ; ---------------------------------------------------------------------------
000154A2                            ; Music	to play	after invincibility wears off
000154A2                            ; ---------------------------------------------------------------------------
000154A2                            MusicList2:
000154A2 00                         		dc.b bgm_GHZ
000154A3 00                         		dc.b bgm_LZ
000154A4 00                         		dc.b bgm_MZ
000154A5 00                         		dc.b bgm_SLZ
000154A6 00                         		dc.b bgm_SYZ
000154A7 00                         		dc.b bgm_SBZ
000154A8                            		; The ending doesn't get an entry
000154A8                            		even
000154A8                            
000154A8                            		include	"_incObj\Sonic Display.asm"
000154A8                            ; ---------------------------------------------------------------------------
000154A8                            ; Subroutine to display Sonic and set music
000154A8                            ; ---------------------------------------------------------------------------
000154A8                            
000154A8                            Sonic_Display:
000154A8 3028 0030                  		move.w    flashtime(a0),d0
000154AC 6700                       		beq.s    @showAfterImage
000154AE 5368 0030                  		subq.w    #1,flashtime(a0)
000154B2 E648                               	lsr.w    #3,d0
000154B4 6400                               	bcc.s    @chkinvincible
000154B6                            
000154B6                            	@showAfterImage:
000154B6 3028 0020                          	move.w    obInertia(a0),d0            ; get inertia
000154BA 4A40                       		tst.w    d0                    ; is inertia greater than 0?
000154BC 6C00                       		bge.s    @AfterImage_Start    ; if yes, don't negate it
000154BE 4440                       		neg        d0                    ; if not, negate it
000154C0                            
000154C0                            	@AfterImage_Start:        
000154C0 4A38 FE2E                  		tst.b	(v_shoes).w	; does Sonic have speed	shoes?
000154C4 6700                       		beq.s	@display	; if not, don't show the After Image
000154C6                            		;cmpi.w    #$900,d0	; is the sonic inertia greater than A00?
000154C6                            		;blt.s    @display	; if not, don't show the After Image
000154C6                            	
000154C6                            	@AfterImage_Start2:    
000154C6 6100 A940                          	bsr.w    FindFreeObj    ; search a free space in object RAM
000154CA 6600                               	bne.s    @display    ; if not have, don't load the After Image
000154CC 12BC 0010                          	move.b  #$10,0(a1)        ; load after-image object
000154D0 2368 0004 0004                     	move.l    obMap(a0),obMap(a1)        ; copy Sonic mappings to after-image mappings
000154D6 3368 0008 0008                     	move.w    obX(a0),obX(a1)        ; copy Sonic x-pos to after-image x-pos
000154DC 3368 000C 000C                     	move.w    obY(a0),obY(a1)    ; copy Sonic y-pos to after-image y-pos
000154E2                            
000154E2                                	@display:
000154E2 4EB9 0000 F97C                     	jsr    (DisplaySprite).l
000154E8                            
000154E8                            	@chkinvincible:
000154E8 4A38 FE2D                  		tst.b	(v_invinc).w	; does Sonic have invincibility?
000154EC 6700                       		beq.s	@chkshoes	; if not, branch
000154EE 4A68 0032                  		tst.w	invtime(a0)	; check	time remaining for invinciblity
000154F2 6700                       		beq.s	@chkshoes	; if no	time remains, branch
000154F4 5368 0032                  		subq.w	#1,invtime(a0)	; subtract 1 from time
000154F8 6600                       		bne.s	@chkshoes
000154FA 4A38 F7AA                  		tst.b	(f_lockscreen).w
000154FE 6600                       		bne.s	@removeinvincible
00015500 0C78 000C FE14             		cmpi.w	#$C,(v_air).w
00015506 6500                       		bcs.s	@removeinvincible
00015508 1038 F5C6                  		move.b  (v_Saved_music),d0    ; loads song number from RAM
0001550C 4EB9 0000 124E                     	jsr	(PlaySound).l    ; play normal music
00015512                            
00015512                            	@removeinvincible:
00015512 11FC 0000 FE2D             		move.b	#0,(v_invinc).w ; cancel invincibility
00015518                            
00015518                            	@chkshoes:
00015518 4A38 FE2E                  		tst.b	(v_shoes).w	; does Sonic have speed	shoes?
0001551C 6700                       		beq.s	@exit		; if not, branch
0001551E 4A68 0034                  		tst.w	shoetime(a0)	; check	time remaining
00015522 6700                       		beq.s	@exit
00015524 5368 0034                  		subq.w	#1,shoetime(a0)	; subtract 1 from time
00015528 6600                       		bne.s	@exit
0001552A 31FC 0600 F760             		move.w	#$600,(v_sonspeedmax).w ; restore Sonic's speed
00015530 31FC 000C F762             		move.w	#$C,(v_sonspeedacc).w ; restore Sonic's acceleration
00015536 31FC 0080 F764             		move.w	#$80,(v_sonspeeddec).w ; restore Sonic's deceleration
0001553C 11FC 0000 FE2E             		move.b	#0,(v_shoes).w	; cancel speed shoes
00015542 1038 F5C6                  		move.b  (v_Saved_music),d0    ; loads song number from RAM
00015546 4EB9 0000 124E                     	jsr	(PlaySound).l    ; play normal music
0001554C                            		
0001554C                            	@exit:
0001554C 4E75                       		rts	
0001554C 4E75                       		rts	
0001554E                            		include	"_incObj\Sonic RecordPosition.asm"
0001554E                            ; ---------------------------------------------------------------------------
0001554E                            ; Subroutine to	record Sonic's previous positions for invincibility stars
0001554E                            ; ---------------------------------------------------------------------------
0001554E                            
0001554E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001554E                            
0001554E                            
0001554E                            Sonic_RecordPosition:
0001554E 3038 F7A8                  		move.w	(v_trackpos).w,d0
00015552 43F8 CB00                  		lea	(v_tracksonic).w,a1
00015556 43F1 0000                  		lea	(a1,d0.w),a1
0001555A 32E8 0008                  		move.w	obX(a0),(a1)+
0001555E 32E8 000C                  		move.w	obY(a0),(a1)+
00015562 5838 F7A9                  		addq.b	#4,(v_trackbyte).w
00015566 4E75                       		rts	
00015568                            ; End of function Sonic_RecordPosition
00015568                            ; End of function Sonic_RecordPosition
00015568                            		include	"_incObj\Sonic Water.asm"
00015568                            ; ---------------------------------------------------------------------------
00015568                            ; Subroutine for Sonic when he's underwater
00015568                            ; ---------------------------------------------------------------------------
00015568                            
00015568                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015568                            
00015568                            
00015568                            Sonic_Water:
00015568 0C38 0004 FE10             		cmpi.b	#id_SYZ,(v_zone).w	;TIS is level MZ?
0001556E 6700                       		beq.s	WaterTagforMZ	; if yes, branch
00015570 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w	; is level LZ?
00015576 6700                       		beq.s	Sonic_Water_LZ	; if yes, branch
00015578                            
00015578                            	Sonic_Water_Exit:
00015578 4E75                       		rts	
0001557A                            ; ===========================================================================
0001557A                            
0001557A                            	Sonic_Water_LZ:
0001557A 3038 F646                  		move.w	(v_waterpos1).w,d0
0001557E B068 000C                  		cmp.w	obY(a0),d0	; is Sonic above the water?
00015582 6C00 0000                  		bge.w	Abovewater	; if yes, branch
00015586 6000 0000                  		bra	WaterStatus
0001558A                            	WaterTagforMZ:
0001558A 0C38 0000 F5C4             		cmpi.b	#0,(v_tagwater).w	;TIS Lava Tag?
00015590 6700 0000                  		beq.w	Abovewater	; if yes, branch
00015594 303C 000F                  		move.w #$F,d0             ;TIS Length ($F = full line)
00015598 43F8 34A4                  		lea    (Pal_LZSonWatr2),a1  ;Palette location
0001559C 45F8 FB00                          lea    ($FFFFFB00),a2        ;RAM location ($FB00 = line 1)
000155A0 4EB8 24A4                  		jsr	Palload_Loop
000155A4                            	WaterStatus:
000155A4 08E8 0006 0022             		bset	#6,obStatus(a0)
000155AA 6600 FFCC                  		bne.w	Sonic_Water_Exit
000155AE 6100 0000                  		bsr.w	ResumeMusic
000155B2 31F8 D00C FF92             		move.w	(v_player+obY).w,(v_watersplashpos).w	;TIS copy y-pos
000155B8                            
000155B8 11FC 000A D340             		move.b	#id_DrownCount,(v_objspace+$340).w ; load bubbles object from Sonic's mouth
000155BE 11FC 0081 D368             		move.b	#$81,(v_objspace+$340+obSubtype).w
000155C4 31FC 0300 F760             		move.w	#$300,(v_sonspeedmax).w ; change Sonic's top speed
000155CA 31FC 0006 F762             		move.w	#6,(v_sonspeedacc).w ; change Sonic's acceleration
000155D0 31FC 0040 F764             		move.w	#$40,(v_sonspeeddec).w ; change Sonic's deceleration
000155D6 E0E8 0010                  		asr	obVelX(a0)
000155DA E0E8 0012                  		asr	obVelY(a0)
000155DE E0E8 0012                  		asr	obVelY(a0)	; slow Sonic
000155E2 6700 FF94                  		beq.w	Sonic_Water_Exit		; branch if Sonic stops moving
000155E6                            		;move.w	(v_player+obY).w,(v_watersplashpos).w	;TIS copy y-pos
000155E6 31FC 0100 D1DC                     move.w    #$100,($FFFFD1DC).w    ; set the spin dash dust animation to splash
000155F6 0C38 0000 F5C4             		cmpi.b	#0,(v_tagwater).w	;TIS Lava Tag?
000155FC 6600 0000                  		bne.w	@return
00015600                            		
00015600                            		
00015600                            	@return:
00015600 4E75                       		rts
00015602                            ; ===========================================================================
00015602                            
00015602                            Abovewater:
00015602 08A8 0006 0022             		bclr	#6,obStatus(a0)
00015608 6700 FF6E                  		beq.w	Sonic_Water_Exit
0001560C 6100 0000                  		bsr.w	ResumeMusic
00015610 31F8 D00C FF92             		move.w	(v_player+obY).w,(v_watersplashpos).w	;TIS copy y-pos
00015616                            
00015616 31FC 0600 F760             		move.w	#$600,(v_sonspeedmax).w ; restore Sonic's speed
0001561C 31FC 000C F762             		move.w	#$C,(v_sonspeedacc).w ; restore Sonic's acceleration
00015622 31FC 0080 F764             		move.w	#$80,(v_sonspeeddec).w ; restore Sonic's deceleration
00015628 E1E8 0012                  		asl	obVelY(a0)
0001562C 6700 FF4A                  		beq.w	Sonic_Water_Exit
00015630 31FC 0100 D1DC                     move.w    #$100,($FFFFD1DC).w    ; set the spin dash dust animation to splash
00015636 0C68 F000 0012             		cmpi.w	#-$1000,obVelY(a0)
0001563C 6E00                       		bgt.s	@belowmaxspeed
0001563E 317C F000 0012             		move.w	#-$1000,obVelY(a0) ; set maximum speed on leaving water
00015644                            
00015644                            	@belowmaxspeed:
0001564E                            ; End of function Sonic_Water
0001564E                            ; End of function Sonic_Water
0001564E                            		include "_incObj\03 Hangable Sprite.asm"
0001564E                            ; ===========================================================================
0001564E                            ; ----------------------------------------------------------------------------
0001564E                            ; Object 03 - Invisible sprite that you can hang on to
0001564E                            ; ----------------------------------------------------------------------------
0001564E                            ; Sprite_2C92C:
0001564E                            Obj03:
0001564E 7000                       	moveq    #0,d0
00015650 1028 0024                      move.b    obRoutine(a0),d0            ;just use s1 version of this variable
00015654 323B 0000                      move.w    Obj03_Index(pc,d0.w),d1
00015658 4EFB 1000                      jmp    Obj03_Index(pc,d1.w)
0001565C                            ; ===========================================================================
0001565C                            ; off_2C93A:
0001565C                            Obj03_Index:
0001565C 0000                           dc.w Obj03_Main-Obj03_Index
0001565E 0000                               dc.w Obj03_Init-Obj03_Index
00015660                            ; ===========================================================================
00015660                            ; loc_2C93E:
00015660                            Obj03_Init:
00015660 5428 0024                      addq.b    #2,obRoutine(a0)        ;just use s1 version of this variable
00015664 117C 0004 0001                 move.b    #4,obRender(a0)    ;just use s1 version of this variable
0001566A 117C 0018 0014                 move.b    #$18,obActWid(a0)    ;just use s1 version of this variable
00015670 317C 0200 0018                 move.w    #$200,obPriority(a0)            ;just use s1 version of this variable
00015676                            ; loc_2C954:
00015676                            Obj03_Main:
00015676 45E8 0030                      lea    $30(a0),a2
0001567A 43F8 D000                      lea    (v_player).w,a1 ; a1=character
0001567E 3038 F604                      move.w    (v_jpadhold1).w,d0 			;S1 has same ram address for controller as S2 just different variable name like on the line above
00015682 6100                           bsr.s    Obj03_Check
00015684                            ;    lea    (Sidekick).w,a1 ; a1=character  ;disabled
00015684                            ;    addq.w    #1,a2                          ;disabled
00015684                            ;    move.w    (Ctrl_2).w,d0                    ;disabled
00015684                            ;    bsr.s    Obj03_Check         	;disabled
00015684 4EF9 0000 0000             	jmp		bonu_chkdel
0001568A                            ; ===========================================================================
0001568A                            ; loc_2C972:
0001568A                            Obj03_Check:
0001568A 4A12                       		tst.b	(a2)
0001568C 6700                       		beq.s	loc_2C9A0
0001568E 0200 0070                  		andi.b	#btnABC,d0
00015692 6700 0000                  		beq.w	Obj03_Check_End
00015696 4238 F7C8                  		clr.b	f_lockmulti.w
0001569A 4212                       		clr.b	(a2)
0001569C 157C 0012 0002             		move.b	#$12,2(a2)
000156A2 0240 0F00                  		andi.w	#$F00,d0
000156A6 6700                       		beq.s	loc_2C954
000156A8 157C 003C 0002             		move.b	#$3C,2(a2)
000156AE                            	
000156AE                            loc_2C954:
000156AE 337C FD00 0012             		move.w	#-$300,y_vel(a1)
000156B4 6000 0000                  		bra.w	Obj03_Check_End
000156B8                            ; ===========================================================================
000156B8                            
000156B8                            loc_2C9A0:
000156B8 4A2A 0002                  		tst.b	2(a2)
000156BC 6700                       		beq.s	loc_2C972
000156BE 532A 0002                  		subq.b	#1,2(a2)
000156C2 6600 0000                  		bne.w	Obj03_Check_End
000156C6                            
000156C6                            loc_2C972:
000156C6 3029 0008                  		move.w	obX(a1),d0
000156CA 9068 0008                  		sub.w	obX(a0),d0
000156CE 0640 0018                  		addi.w	#$18,d0
000156D2 0C40 0030                  		cmpi.w	#$30,d0
000156D6 6400 0000                  		bhs.w	Obj03_Check_End
000156DA 3229 000C                  		move.w	obY(a1),d1
000156DE 9268 000C                  		sub.w	obY(a0),d1
000156E2 0C41 0010                  		cmpi.w	#$10,d1
000156E6 6400 0000                  		bhs.w	Obj03_Check_End
000156EA 4A38 F7C8                  		tst.b	f_lockmulti.w
000156EE 6B00                       		bmi.s	Obj03_Check_End
000156F0 0C29 0006 0024             		cmpi.b	#6,obRoutine(a1)
000156F6 6400                       		bhs.s	Obj03_Check_End
000156F8 4A78 FFFA                  		tst.w	(f_debugmode).w
000156FC 6600                       		bne.s	Obj03_Check_End
000156FE 4269 0010                  		clr.w	x_vel(a1)
00015702 4269 0012                  		clr.w	y_vel(a1)
00015706 4269 0020                  		clr.w	obInertia(a1)
0001570A 3368 000C 000C             		move.w	obY(a0),obY(a1)
00015710 137C 0000 001C             		move.b	#id_Hang2,obAnim(a1)
00015716 11FC 0001 F7C8             		move.b	#1,f_lockmulti.w
0001571C 14BC 0001                  		move.b	#1,(a2)
00015720                            
00015720                            ; return_2CA08:
00015720                            Obj03_Check_End:
00015720 4E75                       		rts
00015720 4E75                       		rts
00015722                            
00015722                            ; ===========================================================================
00015722                            ; ---------------------------------------------------------------------------
00015722                            ; Modes	for controlling	Sonic
00015722                            ; ---------------------------------------------------------------------------
00015722                            
00015722                            Sonic_MdNormal:
00015722 6100 0000                  		bsr.w	Sonic_Peelout
00015726 6100 0000                  		bsr.w	Sonic_SpinDash
0001572A 6100 0000                  		bsr.w	Sonic_Jump
0001572E 6100 0000                  		bsr.w	Sonic_SlopeResist
00015732 6100 0000                  		bsr.w	Sonic_Move
00015736 6100 0000                  		bsr.w	Sonic_Roll
0001573A 6100 0000                  		bsr.w	Sonic_LevelBound
0001573E 4EB9 0000 F968             		jsr	(SpeedToPos).l
00015744 6100 0000                  		bsr.w	Sonic_AnglePos
00015748 6100 0000                  		bsr.w	Sonic_SlopeRepel
0001574C 4E75                       		rts	
0001574E                            
0001574E                            ; ===========================================================================
0001574E                            
0001574E                            Sonic_MdJump:
0001574E 6100 0000                  		bsr.w   Sonic_AirRoll
00015752 6100 0000                  		bsr.w	Sonic_JumpHeight
00015756 6100 0000                  		bsr.w	Sonic_JumpDirection
0001575A 6100 0000                  		bsr.w	Sonic_LevelBound
0001575E 4EB9 0000 F930             		jsr	(ObjectFall).l
00015764 0828 0006 0022             		btst	#6,obStatus(a0)
0001576A 6700                       		beq.s	loc_12E5C
0001576C 0468 0028 0012             		subi.w	#$28,obVelY(a0)
00015772                            
00015772                            loc_12E5C:
00015772 6100 0000                  		bsr.w	Sonic_JumpAngle
00015776 6100 0000                  		bsr.w	Sonic_Floor
0001577A 4E75                       		rts	
0001577C                            ; ===========================================================================
0001577C                            
0001577C                            Sonic_MdRoll:
0001577C 6100 0000                  		bsr.w	Sonic_Jump
00015780 6100 0000                  		bsr.w	Sonic_RollRepel
00015784 6100 0000                  		bsr.w	Sonic_RollSpeed
00015788 6100 0000                  		bsr.w	Sonic_LevelBound
0001578C 4EB9 0000 F968             		jsr	(SpeedToPos).l
00015792 6100 0000                  		bsr.w	Sonic_AnglePos
00015796 6100 0000                  		bsr.w	Sonic_SlopeRepel
0001579A 4E75                       		rts	
0001579C                            ; ===========================================================================
0001579C                            
0001579C                            Sonic_MdJump2:
0001579C 6100 0000                  		bsr.w	Sonic_JumpHeight
000157A0 6100 0000                  		bsr.w	Sonic_JumpDirection
000157A4 6100 0000                  		bsr.w	Sonic_LevelBound
000157A8 4EB9 0000 F930             		jsr	(ObjectFall).l
000157AE 0828 0006 0022             		btst	#6,obStatus(a0)
000157B4 6700                       		beq.s	loc_12EA6
000157B6 0468 0028 0012             		subi.w	#$28,obVelY(a0)
000157BC                            
000157BC                            loc_12EA6:
000157BC 6100 0000                  		bsr.w	Sonic_JumpAngle
000157C0 6100 0000                  		bsr.w	Sonic_Floor
000157C4 4E75                       		rts	
000157C6                            
000157C6                            		include	"_incObj\Sonic Move.asm"
000157C6                            ; ---------------------------------------------------------------------------
000157C6                            ; Subroutine to	make Sonic walk/run
000157C6                            ; ---------------------------------------------------------------------------
000157C6                            
000157C6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000157C6                            
000157C6                            
000157C6                            Sonic_Move:
000157C6 3C38 F760                  		move.w	(v_sonspeedmax).w,d6
000157CA 3A38 F762                  		move.w	(v_sonspeedacc).w,d5
000157CE 3838 F764                  		move.w	(v_sonspeeddec).w,d4
000157D2 4A38 F7CA                  		tst.b	(f_jumponly).w
000157D6 6600 0000                  		bne.w	loc_12FEE
000157DA 4A68 003E                  		tst.w	$3E(a0)
000157DE 6600 0000                  		bne.w	Sonic_ResetScr
000157E2 0838 0002 F602             		btst	#bitL,(v_jpadhold2).w ; is left being pressed?
000157E8 6700                       		beq.s	@notleft	; if not, branch
000157EA 6100 0000                  		bsr.w	Sonic_MoveLeft
000157EE                            
000157EE                            	@notleft:
000157EE 0838 0003 F602             		btst	#bitR,(v_jpadhold2).w ; is right being pressed?
000157F4 6700                       		beq.s	@notright	; if not, branch
000157F6 6100 0000                  		bsr.w	Sonic_MoveRight
000157FA                            
000157FA                            	@notright:
000157FA 1028 0026                  		move.b	obAngle(a0),d0
000157FE 0600 0020                  		addi.b	#$20,d0
00015802 0200 00C0                  		andi.b	#$C0,d0		; is Sonic on a	slope?
00015806 6600 0000                  		bne.w	Sonic_ResetScr	; if yes, branch
0001580A 4A68 0020                  		tst.w	obInertia(a0)	; is Sonic moving?
0001580E 6600 0000                  		bne.w	Sonic_ResetScr	; if yes, branch
00015812 08A8 0005 0022             		bclr	#5,obStatus(a0)
00015818 117C 0000 001C             		move.b	#id_Wait,obAnim(a0) ; use "standing" animation
0001581E 0828 0003 0022             		btst	#3,obStatus(a0)
00015824 6700                       		beq.s	Sonic_Balance
00015826 7000                       		moveq	#0,d0
00015828 1028 003D                  		move.b	$3D(a0),d0
0001582C ED48                       		lsl.w	#6,d0
0001582E 43F8 D000                  		lea	(v_objspace).w,a1
00015832 43F1 0000                  		lea	(a1,d0.w),a1
00015836 4A29 0022                  		tst.b	obStatus(a1)
0001583A 6B00                       		bmi.s	Sonic_LookUp
0001583C 7200                       		moveq	#0,d1
0001583E 1229 0014                  		move.b	obActWid(a1),d1
00015842 3401                       		move.w	d1,d2
00015844 D442                       		add.w	d2,d2
00015846 5942                       		subq.w	#4,d2
00015848 D268 0008                  		add.w	obX(a0),d1
0001584C 9269 0008                  		sub.w	obX(a1),d1
00015850 0C41 0004                  		cmpi.w	#4,d1
00015854 6D00                       		blt.s	loc_12F6A
00015856 B242                       		cmp.w	d2,d1
00015858 6C00                       		bge.s	loc_12F5A
0001585A 6000                       		bra.s	Sonic_LookUp
0001585C                            ; ===========================================================================
0001585C                            
0001585C                            Sonic_Balance:
0001585C 4EB9 0000 0000             		jsr	(ObjFloorDist).l
00015862 0C41 000C                  		cmpi.w	#$C,d1
00015866 6D00                       		blt.s	Sonic_LookUp
00015868 0C28 0003 0036             		cmpi.b	#3,$36(a0)
0001586E 6600                       		bne.s	loc_12F62
00015870                            
00015870                            loc_12F5A:
00015870 08A8 0000 0022             		bclr	#0,obStatus(a0)
00015876 6000                       		bra.s	loc_12F70
00015878                            ; ===========================================================================
00015878                            
00015878                            loc_12F62:
00015878 0C28 0003 0037             		cmpi.b	#3,$37(a0)
0001587E 6600                       		bne.s	Sonic_LookUp
00015880                            
00015880                            loc_12F6A:
00015880 08E8 0000 0022             		bset	#0,obStatus(a0)
00015886                            
00015886                            loc_12F70:
00015886 117C 0000 001C             		move.b	#id_Balance,obAnim(a0) ; use "balancing" animation
0001588C 6000 0000                  		bra.w	Sonic_ResetScr
00015890                            ; ===========================================================================
00015890                            
00015890                            Sonic_LookUp:
00015890 0838 0000 F602             		btst	#0,($FFFFF602).w ; is up being pressed?
00015896 6700                       		beq.s	Sonic_Duck	; if not, branch
00015898 117C 0007 001C             		move.b	#7,$1C(a0)	; use "looking up" animation
0001589E 5238 C903                  		addq.b	#1,($FFFFC903).w
000158A2 0C38 0078 C903             		cmp.b	#$78,($FFFFC903).w
000158A8 6500                       		bcs.s	Sonic_ResetScr_Part2
000158AA 11FC 0078 C903             		move.b	#$78,($FFFFC903).w
000158B0 0C78 00C8 F73E             		cmpi.w	#$C8,($FFFFF73E).w
000158B6 6700                       		beq.s	loc_12FC2
000158B8 5478 F73E                  		addq.w	#2,($FFFFF73E).w
000158BC 6000                       		bra.s	loc_12FC2
000158BE                            ; ===========================================================================
000158BE                            
000158BE                            Sonic_Duck:
000158BE 0838 0001 F602             		btst	#1,($FFFFF602).w ; is down being pressed?
000158C4 6700                       		beq.s	Sonic_ResetScr	; if not, branch
000158C6 117C 0008 001C             		move.b	#8,$1C(a0)	; use "ducking"	animation
000158CC 5238 C903                  		addq.b	#1,($FFFFC903).w
000158D0 0C38 0078 C903             		cmpi.b	#$78,($FFFFC903).w
000158D6 6500                       		bcs.s	Sonic_ResetScr_Part2
000158D8 11FC 0078 C903             		move.b	#$78,($FFFFC903).w
000158DE 0C78 0008 F73E             		cmpi.w	#8,($FFFFF73E).w
000158E4 6700                       		beq.s	loc_12FC2
000158E6 5578 F73E                  		subq.w	#2,($FFFFF73E).w
000158EA 6000                       		bra.s	loc_12FC2
000158EC                            ; ===========================================================================
000158EC                            
000158EC                            Sonic_ResetScr:
000158EC 11FC 0000 C903             		move.b	#0,($FFFFC903).w
000158F2                            		
000158F2                            Sonic_ResetScr_Part2:
000158F2 0C78 0060 F73E             		cmpi.w	#$60,($FFFFF73E).w ; is	screen in its default position?
000158F8 6700                       		beq.s	loc_12FC2	; if yes, branch
000158FA 6400                       		bcc.s	loc_12FBE
000158FC 5878 F73E                  		addq.w	#4,($FFFFF73E).w ; move	screen back to default
00015900                            
00015900                            loc_12FBE:
00015900 5578 F73E                  		subq.w	#2,($FFFFF73E).w ; move	screen back to default
00015904                            
00015904                            loc_12FC2:
00015904 1038 F602                  		move.b	(v_jpadhold2).w,d0
00015908 0200 000C                  		andi.b	#btnL+btnR,d0	; is left/right	pressed?
0001590C 6600                       		bne.s	loc_12FEE	; if yes, branch
0001590E 3028 0020                  		move.w	obInertia(a0),d0
00015912 6700                       		beq.s	loc_12FEE
00015914 6B00                       		bmi.s	loc_12FE2
00015916 9045                       		sub.w	d5,d0
00015918 6400                       		bcc.s	loc_12FDC
0001591A 303C 0000                  		move.w	#0,d0
0001591E                            
0001591E                            loc_12FDC:
0001591E 3140 0020                  		move.w	d0,obInertia(a0)
00015922 6000                       		bra.s	loc_12FEE
00015924                            ; ===========================================================================
00015924                            
00015924                            loc_12FE2:
00015924 D045                       		add.w	d5,d0
00015926 6400                       		bcc.s	loc_12FEA
00015928 303C 0000                  		move.w	#0,d0
0001592C                            
0001592C                            loc_12FEA:
0001592C 3140 0020                  		move.w	d0,obInertia(a0)
00015930                            
00015930                            loc_12FEE:
00015930 4A28 0039                  		tst.b	$39(a0) 	;Peelout
00015934 6600                       		bne.s	loc_1300C 	;Peelout
00015936 1028 0026                  		move.b	obAngle(a0),d0
0001593A 4EB9 0000 3A36             		jsr	(CalcSine).l
00015940 C3E8 0020                  		muls.w	obInertia(a0),d1
00015944 E081                       		asr.l	#8,d1
00015946 3141 0010                  		move.w	d1,obVelX(a0)
0001594A C1E8 0020                  		muls.w	obInertia(a0),d0
0001594E E080                       		asr.l	#8,d0
00015950 3140 0012                  		move.w	d0,obVelY(a0)
00015954                            
00015954                            loc_1300C:
00015954 1028 0026                  		move.b	obAngle(a0),d0
00015958 0600 0040                  		addi.b	#$40,d0
0001595C 6B00                       		bmi.s	locret_1307C
0001595E 123C 0040                  		move.b	#$40,d1
00015962 4A68 0020                  		tst.w	obInertia(a0)
00015966 6700                       		beq.s	locret_1307C
00015968 6B00                       		bmi.s	loc_13024
0001596A 4441                       		neg.w	d1
0001596C                            
0001596C                            loc_13024:
0001596C 1028 0026                  		move.b	obAngle(a0),d0
00015970 D001                       		add.b	d1,d0
00015972 3F00                       		move.w	d0,-(sp)
00015974 6100 0000                  		bsr.w	Sonic_WalkSpeed
00015978 301F                       		move.w	(sp)+,d0
0001597A 4A41                       		tst.w	d1
0001597C 6A00                       		bpl.s	locret_1307C
0001597E E141                       		asl.w	#8,d1
00015980 0600 0020                  		addi.b	#$20,d0
00015984 0200 00C0                  		andi.b	#$C0,d0
00015988 6700                       		beq.s	loc_13078
0001598A 0C00 0040                  		cmpi.b	#$40,d0
0001598E 6700                       		beq.s	loc_13066
00015990 0C00 0080                  		cmpi.b	#$80,d0
00015994 6700                       		beq.s	loc_13060
00015996 D368 0010                  		add.w	d1,obVelX(a0)
0001599A 08E8 0005 0022             		bset	#5,obStatus(a0)
000159A0 317C 0000 0020             		move.w	#0,obInertia(a0)
000159A6 4E75                       		rts	
000159A8                            ; ===========================================================================
000159A8                            
000159A8                            loc_13060:
000159A8 9368 0012                  		sub.w	d1,obVelY(a0)
000159AC 4E75                       		rts	
000159AE                            ; ===========================================================================
000159AE                            
000159AE                            loc_13066:
000159AE 9368 0010                  		sub.w	d1,obVelX(a0)
000159B2 08E8 0005 0022             		bset	#5,obStatus(a0)
000159B8 317C 0000 0020             		move.w	#0,obInertia(a0)
000159BE 4E75                       		rts	
000159C0                            ; ===========================================================================
000159C0                            
000159C0                            loc_13078:
000159C0 D368 0012                  		add.w	d1,obVelY(a0)
000159C4                            
000159C4                            locret_1307C:
000159C4 4E75                       		rts	
000159C6                            ; End of function Sonic_Move
000159C6                            
000159C6                            
000159C6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000159C6                            
000159C6                            
000159C6                            Sonic_MoveLeft:
000159C6 3028 0020                  		move.w	obInertia(a0),d0
000159CA 6700                       		beq.s	loc_13086
000159CC 6A00                       		bpl.s	loc_130B2
000159CE                            
000159CE                            loc_13086:
000159CE 08E8 0000 0022             		bset	#0,$22(a0)
000159D4 6600                       		bne.s	loc_1309A
000159D6 08A8 0005 0022             		bclr	#5,$22(a0)
000159DC 117C 0001 001D             		move.b	#1,$1D(a0)
000159E2                            
000159E2                            loc_1309A:
000159E2 9045                       		sub.w	d5,d0
000159E4 3206                       		move.w	d6,d1
000159E6 4441                       		neg.w	d1
000159E8 B041                       		cmp.w	d1,d0
000159EA 6E00                       		bgt.s	loc_130A6
000159EC D045                       		add.w	d5,d0
000159EE B041                       		cmp.w	d1,d0
000159F0 6F00                       		ble.s	loc_130A6
000159F2 3001                       		move.w	d1,d0
000159F4                            
000159F4                            loc_130A6:
000159F4 3140 0020                  		move.w	d0,obInertia(a0)
000159F8 117C 0000 001C             		move.b	#0,$1C(a0); use walking animation
000159FE 4E75                       		rts
00015A00                            ; ===========================================================================
00015A00                            
00015A00                            loc_130B2:
00015A00 9044                       		sub.w	d4,d0
00015A02 6400                       		bcc.s	loc_130BA
00015A04 303C FF80                  		move.w	#-$80,d0
00015A08                            
00015A08                            loc_130BA:
00015A08 3140 0020                  		move.w	d0,obInertia(a0)
00015A0C 1228 0026                  		move.b	obAngle(a0),d1
00015A10 0601 0020                  		addi.b	#$20,d1
00015A14 0201 00C0                  		andi.b	#$C0,d1
00015A18 6600                       		bne.s	locret_130E8
00015A1A 0C40 0400                  		cmpi.w	#$400,d0
00015A1E 6D00                       		blt.s	locret_130E8
00015A20 117C 0000 001C             		move.b	#id_Stop,obAnim(a0) ; use "stopping" animation
00015A26 08A8 0000 0022             		bclr	#0,obStatus(a0)
00015A36 11FC 0006 D1E4                     move.b    #6,($FFFFD1E4).w    ; set the spin dash dust routine to skid dust
00015A3C 11FC 0015 D1DA                     move.b    #$15,($FFFFD1DA).w
00015A42                            		
00015A42                            locret_130E8:
00015A42 4E75                       		rts	
00015A44                            ; End of function Sonic_MoveLeft
00015A44                            
00015A44                            
00015A44                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015A44                            
00015A44                            
00015A44                            Sonic_MoveRight:
00015A44 3028 0020                  		move.w	obInertia(a0),d0
00015A48 6B00                       		bmi.s	loc_13118
00015A4A 08A8 0000 0022             		bclr	#0,$22(a0)
00015A50 6700                       		beq.s	loc_13104
00015A52 08A8 0005 0022             		bclr	#5,$22(a0)
00015A58 117C 0001 001D             		move.b	#1,$1D(a0)
00015A5E                            
00015A5E                            loc_13104:
00015A5E D045                       		add.w	d5,d0
00015A60 B046                       		cmp.w	d6,d0
00015A62 6D00                       		blt.s	loc_1310C
00015A64 9045                       		sub.w	d5,d0
00015A66 B046                       		cmp.w	d6,d0
00015A68 6C00                       		bge.s	loc_1310C
00015A6A 3006                       		move.w	d6,d0
00015A6C                            
00015A6C                            loc_1310C:
00015A6C 3140 0020                  		move.w	d0,obInertia(a0)
00015A70 117C 0000 001C             		move.b	#0,$1C(a0); use walking animation
00015A76 4E75                       		rts
00015A78                            ; ===========================================================================
00015A78                            
00015A78                            loc_13118:
00015A78 D044                       		add.w	d4,d0
00015A7A 6400                       		bcc.s	loc_13120
00015A7C 303C 0080                  		move.w	#$80,d0
00015A80                            
00015A80                            loc_13120:
00015A80 3140 0020                  		move.w	d0,obInertia(a0)
00015A84 1228 0026                  		move.b	obAngle(a0),d1
00015A88 0601 0020                  		addi.b	#$20,d1
00015A8C 0201 00C0                  		andi.b	#$C0,d1
00015A90 6600                       		bne.s	locret_1314E
00015A92 0C40 FC00                  		cmpi.w	#-$400,d0
00015A96 6E00                       		bgt.s	locret_1314E
00015A98 117C 0000 001C             		move.b	#id_Stop,obAnim(a0) ; use "stopping" animation
00015A9E 08E8 0000 0022             		bset	#0,obStatus(a0)
00015AAE 11FC 0006 D1E4                     move.b    #6,($FFFFD1E4).w    ; set the spin dash dust routine to skid dust
00015AB4 11FC 0015 D1DA                     move.b    #$15,($FFFFD1DA).w
00015ABA                            		
00015ABA                            locret_1314E:
00015ABA 4E75                       		rts	
00015ABC                            ; End of function Sonic_MoveRight
00015ABC                            ; End of function Sonic_MoveRight
00015ABC                            		include	"_incObj\Sonic RollSpeed.asm"
00015ABC                            ; ---------------------------------------------------------------------------
00015ABC                            ; Subroutine to	change Sonic's speed as he rolls
00015ABC                            ; ---------------------------------------------------------------------------
00015ABC                            
00015ABC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015ABC                            
00015ABC                            
00015ABC                            Sonic_RollSpeed:
00015ABC 3C38 F760                  		move.w	(v_sonspeedmax).w,d6
00015AC0 E346                       		asl.w	#1,d6
00015AC2 7A06                       		moveq	#6,d5	; natural roll deceleration = 1/2 normal acceleration
00015AC4 3838 F764                  		move.w	(v_sonspeeddec).w,d4
00015AC8 E444                       		asr.w	#2,d4
00015ACA 4A38 F7CA                  		tst.b	(f_jumponly).w
00015ACE 6600 0000                  		bne.w	loc_131CC
00015AD2 4A68 003E                  		tst.w	$3E(a0)
00015AD6 6600                       		bne.s	@notright
00015AD8 0838 0002 F602             		btst	#bitL,(v_jpadhold2).w ; is left being pressed?
00015ADE 6700                       		beq.s	@notleft	; if not, branch
00015AE0 6100 0000                  		bsr.w	Sonic_RollLeft
00015AE4                            
00015AE4                            	@notleft:
00015AE4 0838 0003 F602             		btst	#bitR,(v_jpadhold2).w ; is right being pressed?
00015AEA 6700                       		beq.s	@notright	; if not, branch
00015AEC 6100 0000                  		bsr.w	Sonic_RollRight
00015AF0                            
00015AF0                            	@notright:
00015AF0 3028 0020                  		move.w	obInertia(a0),d0
00015AF4 6700                       		beq.s	loc_131AA
00015AF6 6B00                       		bmi.s	loc_1319E
00015AF8 9045                       		sub.w	d5,d0
00015AFA 6400                       		bcc.s	loc_13198
00015AFC 303C 0000                  		move.w	#0,d0
00015B00                            
00015B00                            loc_13198:
00015B00 3140 0020                  		move.w	d0,obInertia(a0)
00015B04 6000                       		bra.s	loc_131AA
00015B06                            ; ===========================================================================
00015B06                            
00015B06                            loc_1319E:
00015B06 D045                       		add.w	d5,d0
00015B08 6400                       		bcc.s	loc_131A6
00015B0A 303C 0000                  		move.w	#0,d0
00015B0E                            
00015B0E                            loc_131A6:
00015B0E 3140 0020                  		move.w	d0,obInertia(a0)
00015B12                            
00015B12                            loc_131AA:
00015B12 4A68 0020                  		tst.w	obInertia(a0)	; is Sonic moving?
00015B16 6600                       		bne.s	loc_131CC	; if yes, branch
00015B18 08A8 0002 0022             		bclr	#2,obStatus(a0)
00015B1E 117C 0013 0016             		move.b	#$13,obHeight(a0)
00015B24 117C 0009 0017             		move.b	#9,obWidth(a0)
00015B2A 117C 0000 001C             		move.b	#id_Wait,obAnim(a0) ; use "standing" animation
00015B30 5B68 000C                  		subq.w	#5,obY(a0)
00015B34                            
00015B34                            loc_131CC:
00015B34 0C78 0060 F73E             		cmp.w	#$60,($FFFFF73E).w
00015B3A 6700                       		beq.s	@cont2
00015B3C 6400                       		bcc.s	@cont1
00015B3E 5878 F73E                  		addq.w	#4,($FFFFF73E).w
00015B42                            		
00015B42                            @cont1:
00015B42 5578 F73E                  		subq.w	#2,($FFFFF73E).w
00015B46                            		
00015B46                            @cont2:
00015B46 1028 0026                  		move.b	obAngle(a0),d0
00015B4A 4EB9 0000 3A36             		jsr	(CalcSine).l
00015B50 C1E8 0020                  		muls.w	obInertia(a0),d0
00015B54 E080                       		asr.l	#8,d0
00015B56 3140 0012                  		move.w	d0,obVelY(a0)
00015B5A C3E8 0020                  		muls.w	obInertia(a0),d1
00015B5E E081                       		asr.l	#8,d1
00015B60 0C41 1000                  		cmpi.w	#$1000,d1
00015B64 6F00                       		ble.s	loc_131F0
00015B66 323C 1000                  		move.w	#$1000,d1
00015B6A                            
00015B6A                            loc_131F0:
00015B6A 0C41 F000                  		cmpi.w	#-$1000,d1
00015B6E 6C00                       		bge.s	loc_131FA
00015B70 323C F000                  		move.w	#-$1000,d1
00015B74                            
00015B74                            loc_131FA:
00015B74 3141 0010                  		move.w	d1,obVelX(a0)
00015B78 6000 FDDA                  		bra.w	loc_1300C
00015B7C                            ; End of function Sonic_RollSpeed
00015B7C                            
00015B7C                            
00015B7C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015B7C                            
00015B7C                            
00015B7C                            Sonic_RollLeft:
00015B7C 3028 0020                  		move.w	obInertia(a0),d0
00015B80 6700                       		beq.s	loc_1320A
00015B82 6A00                       		bpl.s	loc_13218
00015B84                            
00015B84                            loc_1320A:
00015B84 08E8 0000 0022             		bset	#0,obStatus(a0)
00015B8A 117C 0000 001C             		move.b	#id_Roll,obAnim(a0) ; use "rolling" animation
00015B90 4E75                       		rts	
00015B92                            ; ===========================================================================
00015B92                            
00015B92                            loc_13218:
00015B92 9044                       		sub.w	d4,d0
00015B94 6400                       		bcc.s	loc_13220
00015B96 303C FF80                  		move.w	#-$80,d0
00015B9A                            
00015B9A                            loc_13220:
00015B9A 3140 0020                  		move.w	d0,obInertia(a0)
00015B9E 4E75                       		rts	
00015BA0                            ; End of function Sonic_RollLeft
00015BA0                            
00015BA0                            
00015BA0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015BA0                            
00015BA0                            
00015BA0                            Sonic_RollRight:
00015BA0 3028 0020                  		move.w	obInertia(a0),d0
00015BA4 6B00                       		bmi.s	loc_1323A
00015BA6 08A8 0000 0022             		bclr	#0,obStatus(a0)
00015BAC 117C 0000 001C             		move.b	#id_Roll,obAnim(a0) ; use "rolling" animation
00015BB2 4E75                       		rts	
00015BB4                            ; ===========================================================================
00015BB4                            
00015BB4                            loc_1323A:
00015BB4 D044                       		add.w	d4,d0
00015BB6 6400                       		bcc.s	loc_13242
00015BB8 303C 0080                  		move.w	#$80,d0
00015BBC                            
00015BBC                            loc_13242:
00015BBC 3140 0020                  		move.w	d0,obInertia(a0)
00015BC0 4E75                       		rts	
00015BC2                            ; End of function Sonic_RollRight
00015BC2                            ; End of function Sonic_RollRight
00015BC2                            		include	"_incObj\Sonic JumpDirection.asm"
00015BC2                            ; ---------------------------------------------------------------------------
00015BC2                            ; Subroutine to	change Sonic's direction while jumping
00015BC2                            ; ---------------------------------------------------------------------------
00015BC2                            
00015BC2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015BC2                            
00015BC2                            
00015BC2                            Sonic_JumpDirection:
00015BC2 3C38 F760                  		move.w	($FFFFF760).w,d6
00015BC6 3A38 F762                  		move.w	($FFFFF762).w,d5
00015BCA E345                       		asl.w	#1,d5
00015BCC 3028 0010                  		move.w	$10(a0),d0	
00015BD0 0838 0002 F602             		btst	#2,($FFFFF602).w; is left being pressed?	
00015BD6 6700                       		beq.s	loc_13278; if not, branch	
00015BD8 08E8 0000 0022             		bset	#0,$22(a0)	
00015BDE 9045                       		sub.w	d5,d0	
00015BE0 3206                       		move.w	d6,d1	
00015BE2 4441                       		neg.w	d1	
00015BE4 B041                       		cmp.w	d1,d0	
00015BE6 6E00                       		bgt.s	loc_13278	
00015BE8 D045                       		add.w	d5,d0		; +++ remove this frame's acceleration change
00015BEA B041                       		cmp.w	d1,d0		; +++ compare speed with top speed
00015BEC 6F00                       		ble.s	loc_13278	; +++ if speed was already greater than the maximum, branch	
00015BEE 3001                       		move.w	d1,d0
00015BF0                            
00015BF0                            loc_13278:
00015BF0 0838 0003 F602             		btst	#3,($FFFFF602).w; is right being pressed?	
00015BF6 6700                       		beq.s	Obj01_JumpMove; if not, branch	
00015BF8 08A8 0000 0022             		bclr	#0,$22(a0)	
00015BFE D045                       		add.w	d5,d0	
00015C00 B046                       		cmp.w	d6,d0	
00015C02 6D00                       		blt.s	Obj01_JumpMove
00015C04 9045                       		sub.w	d5,d0		; +++ remove this frame's acceleration change
00015C06 B046                       		cmp.w	d6,d0		; +++ compare speed with top speed
00015C08 6C00                       		bge.s	Obj01_JumpMove	; +++ if speed was already greater than the maximum, branch
00015C0A 3006                       		move.w	d6,d0
00015C0C                            
00015C0C                            Obj01_JumpMove:
00015C0C 3140 0010                  		move.w	d0,obVelX(a0)	; change Sonic's horizontal speed
00015C10                            
00015C10                            Obj01_ResetScr2:
00015C10 0C78 0060 F73E             		cmpi.w	#$60,(v_lookshift).w ; is the screen in its default position?
00015C16 6700                       		beq.s	loc_132A4	; if yes, branch
00015C18 6400                       		bcc.s	loc_132A0
00015C1A 5878 F73E                  		addq.w	#4,(v_lookshift).w
00015C1E                            
00015C1E                            loc_132A0:
00015C1E 5578 F73E                  		subq.w	#2,(v_lookshift).w
00015C22                            
00015C22                            loc_132A4:
00015C22 0C68 FC00 0012             		cmpi.w	#-$400,obVelY(a0) ; is Sonic moving faster than -$400 upwards?
00015C28 6500                       		bcs.s	locret_132D2	; if yes, branch
00015C2A 3028 0010                  		move.w	obVelX(a0),d0
00015C2E 3200                       		move.w	d0,d1
00015C30 EA41                       		asr.w	#5,d1
00015C32 6700                       		beq.s	locret_132D2
00015C34 6B00                       		bmi.s	loc_132C6
00015C36 9041                       		sub.w	d1,d0
00015C38 6400                       		bcc.s	loc_132C0
00015C3A 303C 0000                  		move.w	#0,d0
00015C3E                            
00015C3E                            loc_132C0:
00015C3E 3140 0010                  		move.w	d0,obVelX(a0)
00015C42 4E75                       		rts	
00015C44                            ; ===========================================================================
00015C44                            
00015C44                            loc_132C6:
00015C44 9041                       		sub.w	d1,d0
00015C46 6500                       		bcs.s	loc_132CE
00015C48 303C 0000                  		move.w	#0,d0
00015C4C                            
00015C4C                            loc_132CE:
00015C4C 3140 0010                  		move.w	d0,obVelX(a0)
00015C50                            
00015C50                            locret_132D2:
00015C50 4E75                       		rts	
00015C52                            ; End of function Sonic_JumpDirection
00015C52                            ; End of function Sonic_JumpDirection
00015C52                            		include "_incObj\Sonic Peelout.asm"
00015C52                            ; ---------------------------------------------------------------------------
00015C52                            ; Subroutine to make Sonic perform a peelout
00015C52                            ; ---------------------------------------------------------------------------
00015C52                            ; If you use this makes sure to search for ;Peelout in Sonic1.asm
00015C52                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015C52                            
00015C52                            Sonic_Peelout:
00015C52 0828 0001 0039             		btst	#1,$39(a0)
00015C58 6600                       		bne.s	SCDPeelout_Launch
00015C5A 0C28 0007 001C             		cmpi.b	#7,$1C(a0) ;check to see if your looking up
00015C60 6600                       		bne.s	@return
00015C62 1038 F603                  		move.b	($FFFFF603).w,d0
00015C66 0200 0070                  		andi.b	#%01110000,d0
00015C6A 6700 0000                  		beq.w	@return
00015C6E 117C 0001 001C             		move.b	#1,$1C(a0)
00015C74 317C 0000 003A             		move.w	#0,$3A(a0)
00015C7A 303C 00D2                  		move.w	#$D2,d0
00015C7E 4EB9 0000 1254             		jsr	(PlaySound_Special).l 		; Play peelout charge sound
00015C84                            	;	sfx 	sfx_PeeloutCharge 		; These are if you use AMPS
00015C84 588F                       		addq.l	#4,sp
00015C86 08E8 0001 0039             		bset	#1,$39(a0)
00015C8C                            		
00015C8C 4268 0020                  		clr.w	obInertia(a0)
00015C90                             
00015C90 6100 0000                  		bsr.w	Sonic_LevelBound
00015C94 6100 0000                  		bsr.w	Sonic_AnglePos
00015C98                             
00015C98                            	@return:
00015C98 4E75                       		rts	
00015C9A                            ; ---------------------------------------------------------------------------
00015C9A                             
00015C9A                            SCDPeelout_Launch:
00015C9A 0828 0001 0039             		btst	#1,$39(a0)
00015CA0 1038 F602                  		move.b	($FFFFF602).w,d0
00015CA4 0800 0000                  		btst	#0,d0
00015CA8 6600 0000                  		bne.w	SCDPeelout_Charge
00015CAC 08A8 0001 0039             		bclr	#1,$39(a0)	; stop Dashing
00015CB2 0C28 001E 003A             		cmpi.b	#$1E,$3A(a0)	; have we been charging long enough?
00015CB8 6600 0000                  		bne.w	SCDPeelout_Stop_Sound
00015CBC 117C 0000 001C             		move.b	#0,$1C(a0)	; launches here (peelout sprites)
00015CC2 317C 0001 0010             		move.w	#1,$10(a0)	; force X speed to nonzero for camera lag's benefit
00015CC8 3028 0020                  		move.w	obInertia(a0),d0
00015CCC 0440 0800                  		subi.w	#$800,d0
00015CD0 D040                       		add.w	d0,d0
00015CD2 0240 1F00                  		andi.w	#$1F00,d0
00015CD6 4440                       		neg.w	d0
00015CD8 0640 2000                  		addi.w	#$2000,d0
00015CDC 31C0 C904                  		move.w	d0,($FFFFC904).w
00015CE0 0828 0000 0022             		btst	#0,$22(a0)
00015CE6 6700                       		beq.s	@dontflip
00015CE8 4468 0020                  		neg.w	obInertia(a0)
00015CEC                             
00015CEC                            @dontflip:
00015CEC 08A8 0007 0022             		bclr	#7,$22(a0)
00015CF2 303C 00D3                  		move.w	#$D3,d0
00015CF6 4EB9 0000 1254             		jsr	(PlaySound_Special).l
00015CFC                            	;	sfx 	sfx_PeeloutRelease
00015CFC 1028 0026                  		move.b	obAngle(a0),d0
00015D00 4EB9 0000 3A36             		jsr	(CalcSine).l
00015D06 C3E8 0020                  		muls.w	obInertia(a0),d1
00015D0A E081                       		asr.l	#8,d1
00015D0C 3141 0010                  		move.w	d1,obVelX(a0)
00015D10 C1E8 0020                  		muls.w	obInertia(a0),d0
00015D14 E080                       		asr.l	#8,d0
00015D16 3140 0012                  		move.w	d0,obVelY(a0)	
00015D1A 6000 0000                  		bra.w	SCDPeelout_ResetScr
00015D1E                            ; ---------------------------------------------------------------------------
00015D1E                             
00015D1E                            SCDPeelout_Charge:				; If still charging the dash...
00015D1E 3238 F760                  		move.w	($FFFFF760).w,d1	; get top peelout speed
00015D22 3401                       		move.w	d1,d2
00015D24 D241                       		add.w	d1,d1
00015D26 4A38 FE2E                  		tst.b   ($FFFFFE2E).w 		; test for speed shoes
00015D2A 6700                       		beq.s	@noshoes
00015D2C E242                       		asr.w	#1,d2
00015D2E 9242                       		sub.w	d2,d1
00015D30                            
00015D30                            @noshoes:
00015D30 0668 0064 0020             		addi.w	#$64,obInertia(a0)		; increment speed
00015D36 B268 0020                  		cmp.w	obInertia(a0),d1
00015D3A 6E00                       		bgt.s	@inctimer
00015D3C 3141 0020                  		move.w	d1,obInertia(a0)
00015D40                            
00015D40                            @inctimer:
00015D40 5228 003A                  		addq.b	#1,$3A(a0)		; increment timer
00015D44 0C28 001E 003A             		cmpi.b	#$1E,$3A(a0)
00015D4A 6500                       		bcs.s	SCDPeelout_ResetScr
00015D4C 117C 001E 003A             		move.b	#$1E,$3A(a0)
00015D52 4EF9 0000 0000             		jmp 	SCDPeelout_ResetScr
00015D58                            		
00015D58                            SCDPeelout_Stop_Sound:
00015D58 303C 00D4                  		move.w	#$D4,d0
00015D5C 4EB9 0000 1254             		jsr		(PlaySound_Special).l
00015D62                            	;	sfx 	sfx_PeeloutStop
00015D62 4268 0020                  		clr.w	obInertia(a0)
00015D66                            
00015D66                            SCDPeelout_ResetScr:
00015D66 588F                       		addq.l	#4,sp			; increase stack ptr ; was 4
00015D68 0C78 0060 F73E             		cmpi.w	#$60,($FFFFF73E).w
00015D6E 6700                       		beq.s	@finish
00015D70 6400                       		bcc.s	@skip
00015D72 5878 F73E                  		addq.w	#4,($FFFFF73E).w
00015D76                             
00015D76                            	@skip:
00015D76 5578 F73E                  		subq.w	#2,($FFFFF73E).w
00015D7A                             
00015D7A                            	@finish:
00015D7A 6100 0000                  		bsr.w	Sonic_LevelBound
00015D7E 6100 0000                  		bsr.w	Sonic_AnglePos
00015D82 4E75                       		rts
00015D84                            		
00015D84                            		
00015D84                            		include "_incObj\Sonic Spindash.asm"
00015D84                            ; ---------------------------------------------------------------------------
00015D84                            ; Subroutine to make Sonic perform a spindash
00015D84                            ; ---------------------------------------------------------------------------
00015D84                             
00015D84                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015D84                             
00015D84                             
00015D84                            Sonic_SpinDash:
00015D84 4A28 0039                  		tst.b	f_spindash(a0)			; already Spin Dashing?
00015D88 6600                       		bne.s	loc2_1AC8E		; if set, branch
00015D8A 0C28 0000 001C             		cmpi.b	#id_duck,obAnim(a0)		; is anim duck
00015D90 6600                       		bne.s	locret2_1AC8C		; if not, return
00015D92 1038 F603                  		move.b	(v_jpadpress2).w,d0	; read controller
00015D96 0200 0070                  		andi.b	#$70,d0			; pressing A/B/C ?
00015D9A 6700 0000                  		beq.w	locret2_1AC8C		; if not, return
00015D9E 117C 0000 001C             		move.b	#id_spindash,obAnim(a0)		; set Spin Dash anim (9 in s2)
00015DA4 303C 00D5                  		move.w	#$D5,d0			; spin sound ($E0 in s2)
00015DA8 4EB9 0000 1254             		jsr	(PlaySound_Special).l	; play spin sound
00015DAE 588F                       		addq.l	#4,sp			; Add 4 bytes to the stack return address to skip Sonic_Jump on next rts to Obj01_MdNormal, preventing conflicts with button presses.
00015DB0 117C 0001 0039             		move.b	#1,f_spindash(a0)		; set Spin Dash flag
00015DB6 317C 0000 003A             		move.w	#0,$3A(a0)		; set charge count to 0
00015DBC                            		;cmpi.b	#$C,$28(a0)		; ??? oxygen remaining?
00015DBC                            		;bcs.s	loc2_1AC84		; ??? branch if carry
00015DBC 11FC 0002 D1DC             		move.b	#2,($FFFFD1DC).w	; Set the Spin Dash dust animation to $2.
00015DC2                            						; the smoke/dust object
00015DC2                            loc2_1AC84:
00015DC2 6100 0000                  		bsr.w	Sonic_LevelBound
00015DC6 6100 0000                  		bsr.w	Sonic_AnglePos
00015DCA                            
00015DCA                            locret2_1AC8C:
00015DCA 4E75                       		rts	
00015DCC                            ; ---------------------------------------------------------------------------
00015DCC                            
00015DCC                            loc2_1AC8E:	
00015DCC 117C 001F 001C             		move.b	#$1F,$1C(a0)
00015DD2 1038 F602                  		move.b	(v_jpadhold2).w,d0	; read controller
00015DD6 0800 0001                  		btst	#1,d0			; check down button
00015DDA 6600 0000                  		bne.w	loc2_1AD30		; if set, branch
00015DDE 117C 000E 0016             		move.b	#$E,$16(a0)		; $16(a0) is height/2
00015DE4 117C 0007 0017             		move.b	#7,$17(a0)		; $17(a0) is width/2
00015DEA 117C 0000 001C             		move.b	#id_roll,obAnim(a0)		; set animation to roll
00015DF0 5A68 000C                  		addq.w	#5,$C(a0)		; $C(a0) is Y coordinate
00015DF4 117C 0000 0039             		move.b	#0,f_spindash(a0)		; clear Spin Dash flag
00015DFA 7000                       		moveq	#0,d0
00015DFC 1028 003A                  		move.b	$3A(a0),d0		; copy charge count
00015E00 D040                       		add.w	d0,d0			; double it
00015E02 317B 0000 0020             		move.w	Dash_Speeds(pc,d0.w),obInertia(a0) ; get normal speed
00015E08 3028 0020                  		move.w	obInertia(a0),d0		; get inertia
00015E0C 0440 0800                  		subi.w	#$800,d0		; subtract $800
00015E10 D040                       		add.w	d0,d0			; double it
00015E12 0240 1F00                  		andi.w	#$1F00,d0		; mask it against $1F00
00015E16 4440                       		neg.w	d0			; negate it
00015E18 0640 2000                  		addi.w	#$2000,d0		; add $2000
00015E1C 31C0 C904                  		move.w	d0,($FFFFC904).w	; move to $EED0
00015E20 0828 0000 0022             		btst	#0,$22(a0)		; is sonic facing right?
00015E26 6700                       		beq.s	loc2_1ACF4		; if not, branch
00015E28 4468 0020                  		neg.w	obInertia(a0)			; negate inertia
00015E2C                            
00015E2C                            loc2_1ACF4:
00015E2C 08E8 0002 0022             		bset	#2,$22(a0)		; set unused (in s1) flag
00015E32 11FC 0000 D1DC             		move.b	#0,($FFFFD1DC).w	; clear Spin Dash dust animation.
00015E38 303C 00BC                  		move.w	#$BC,d0			; spin release sound
00015E3C 4EB9 0000 1254             		jsr	(PlaySound_Special).l	; play it!
00015E42 1028 0026                  		move.b	obAngle(a0),d0
00015E46 4EB9 0000 3A36             		jsr	(CalcSine).l
00015E4C C3E8 0020                  		muls.w	obInertia(a0),d1
00015E50 E081                       		asr.l	#8,d1
00015E52 3141 0010                  		move.w	d1,obVelX(a0)
00015E56 C1E8 0020                  		muls.w	obInertia(a0),d0
00015E5A E080                       		asr.l	#8,d0
00015E5C 3140 0012                  		move.w	d0,obVelY(a0)
00015E60                            	
00015E60 6000                       		bra.s	loc2_1AD78
00015E62                            ; ===========================================================================
00015E62                            Dash_Speeds:
00015E62 0600                       		dc.w  $600		; 0
00015E64 0680                       		dc.w  $680		; 1
00015E66 0700                       		dc.w  $700		; 2
00015E68 0780                       		dc.w  $780		; 3
00015E6A 0800                       		dc.w  $800		; 4
00015E6C 0880                       		dc.w  $880		; 5
00015E6E 0900                       		dc.w  $900		; 6
00015E70 0980                       		dc.w  $980		; 7
00015E72 0A00                       		dc.w  $A00		; 8
00015E74                            ; ===========================================================================
00015E74                            
00015E74                            loc2_1AD30:				; If still charging the dash...
00015E74 4A68 003A                  		tst.w	$3A(a0)		; check charge count
00015E78 6700                       		beq.s	loc2_1AD48	; if zero, branch
00015E7A 3028 003A                  		move.w	$3A(a0),d0	; otherwise put it in d0
00015E7E EA48                       		lsr.w	#5,d0		; shift right 5 (divide it by 32)
00015E80 9168 003A                  		sub.w	d0,$3A(a0)	; subtract from charge count
00015E84 6400                       		bcc.s	loc2_1AD48	; ??? branch if carry clear
00015E86 317C 0000 003A             		move.w	#0,$3A(a0)	; set charge count to 0
00015E8C                            
00015E8C                            loc2_1AD48:
00015E8C 1038 F603                  		move.b	(v_jpadpress2).w,d0	; read controller
00015E90 0200 0070                  		andi.b	#$70,d0			; pressing A/B/C?
00015E94 6700 0000                  		beq.w	loc2_1AD78		; if not, branch
00015E98 317C 1F00 001C             		move.w	#$1F00,obAnim(a0)	; reset spdsh animation
00015E9E 303C 00D5                  		move.w	#$D5,d0			; was $E0 in sonic 2
00015EA2 11FC 0002 D1DC             		move.b	#2,$FFFFD1DC.w		; Set the Spin Dash dust animation to $2.
00015EA8 4EB9 0000 1254             		jsr	(PlaySound_Special).l	; play charge sound
00015EAE 0668 0200 003A             		addi.w	#$200,$3A(a0)		; increase charge count
00015EB4 0C68 0800 003A             		cmpi.w	#$800,$3A(a0)		; check if it's maxed
00015EBA 6500                       		bcs.s	loc2_1AD78		; if not, then branch
00015EBC 317C 0800 003A             		move.w	#$800,$3A(a0)		; reset it to max
00015EC2                            
00015EC2                            loc2_1AD78:
00015EC2 588F                       		addq.l	#4,sp			; Add 4 bytes to the stack return address to skip Sonic_Jump on next rts to Obj01_MdNormal, preventing conflicts with button presses.
00015EC4 0C78 0060 F73E             		cmpi.w	#$60,($FFFFF73E).w	; $EED8 only ever seems
00015ECA 6700                       		beq.s	loc2_1AD8C		; to be used in Spin Dash
00015ECC 6400                       		bcc.s	loc2_1AD88
00015ECE 5878 F73E                  		addq.w	#4,($FFFFF73E).w
00015ED2                            
00015ED2                            loc2_1AD88:
00015ED2 5578 F73E                  		subq.w	#2,($FFFFF73E).w
00015ED6                            
00015ED6                            loc2_1AD8C:
00015ED6 6100 0000                  		bsr.w	Sonic_LevelBound
00015EDA 6100 0000                  		bsr.w	Sonic_AnglePos
00015EDE                            		;move.w	#$60,(v_lookshift).w	; reset looking up/down
00015EDE 4E75                       		rts
00015EE0                            ; End of subroutine Sonic_SpinDash
00015EE0                            ; End of subroutine Sonic_SpinDash
00015EE0                            
00015EE0                            Sonic_AirRoll:
00015EE0 0C28 0000 001C             	cmpi.b  #id_spring,$1C(a0)      ; is sonic in the spring animation?
00015EE6 6600                               bne.s   AirRoll_Return   ; if not, return
00015EE8                            
00015EE8                            AirRoll_CheckBtn:
00015EE8 1038 F603                          move.b	($FFFFF603).w,d0 ; Move $FFFFF603 to d0
00015EEC 0200 0070                          andi.b	#btnABC,d0 ; Has A/B/C been pressed?
00015EF0 6700                               beq.s	AirRoll_Return
00015EF2 117C 0000 001C             	move.b	#id_roll,$1C(a0) ; Set Sonic's animation to rolling.
00015EF8                                   ; move.w	#$BC,d0
00015EF8                                   ; jsr	(PlaySound_Special).l ;    play Sonic rolling sound
00015EF8                            
00015EF8                            AirRoll_Return:
00015EF8 4E75                               rts
00015EFA                            ; ===========================================================================
00015EFA                            ; ---------------------------------------------------------------------------
00015EFA                            ; Unused subroutine to squash Sonic
00015EFA                            ; ---------------------------------------------------------------------------
00015EFA 1028 0026                  		move.b	obAngle(a0),d0
00015EFE 0600 0020                  		addi.b	#$20,d0
00015F02 0200 00C0                  		andi.b	#$C0,d0
00015F06 6600                       		bne.s	locret_13302
00015F08 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
00015F0C 4A41                       		tst.w	d1
00015F0E 6A00                       		bpl.s	locret_13302
00015F10 317C 0000 0020             		move.w	#0,obInertia(a0) ; stop Sonic moving
00015F16 317C 0000 0010             		move.w	#0,obVelX(a0)
00015F1C 317C 0000 0012             		move.w	#0,obVelY(a0)
00015F22 117C 0000 001C             		move.b	#id_Warp3,obAnim(a0) ; use "warping" animation
00015F28                            
00015F28                            locret_13302:
00015F28 4E75                       		rts		
00015F2A                            		include	"_incObj\Sonic LevelBound.asm"
00015F2A                            ; ---------------------------------------------------------------------------
00015F2A                            ; Subroutine to	prevent	Sonic leaving the boundaries of	a level
00015F2A                            ; ---------------------------------------------------------------------------
00015F2A                            
00015F2A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015F2A                            
00015F2A                            
00015F2A                            Sonic_LevelBound:
00015F2A 2228 0008                  		move.l	obX(a0),d1
00015F2E 3028 0010                  		move.w	obVelX(a0),d0
00015F32 48C0                       		ext.l	d0
00015F34 E180                       		asl.l	#8,d0
00015F36 D280                       		add.l	d0,d1
00015F38 4841                       		swap	d1
00015F3A 3038 F728                  		move.w	(v_limitleft2).w,d0
00015F3E 0640 0010                  		addi.w	#$10,d0
00015F42 B041                       		cmp.w	d1,d0		; has Sonic touched the	side boundary?
00015F44 6200                       		bhi.s	@sides		; if yes, branch
00015F46 3038 F72A                  		move.w	(v_limitright2).w,d0
00015F4A 0640 0128                  		addi.w	#$128,d0
00015F4E 4A38 F7AA                  		tst.b	(f_lockscreen).w
00015F52 6600                       		bne.s	@screenlocked
00015F54 0640 0040                  		addi.w	#$40,d0
00015F58                            
00015F58                            	@screenlocked:
00015F58 B041                       		cmp.w	d1,d0		; has Sonic touched the	side boundary?
00015F5A 6300                       		bls.s	@sides		; if yes, branch
00015F5C                            
00015F5C                            	@chkbottom:
00015F5C 3038 F72E                  		move.w	(v_limitbtm2).w,d0
00015F60 0640 00E0                  		addi.w	#$E0,d0
00015F64 B068 000C                  		cmp.w	obY(a0),d0	; has Sonic touched the	bottom boundary?
00015F68 6D00                       		blt.s	@bottom		; if yes, branch
00015F6A 4E75                       		rts	
00015F6C                            ; ===========================================================================
00015F6C                            
00015F6C                            @bottom:
00015F6C 3038 F726                  		move.w (v_limitbtm1).w,d0 
00015F70 3238 F72E                  		move.w (v_limitbtm2).w,d1 
00015F74 B240                       		cmp.w d0,d1 ; screen still scrolling down? 
00015F76 6D00                       		blt.s @dontkill; if so, don't kill Sonic 
00015F78 0C78 0501 FE10             		cmpi.w	#(id_SBZ<<8)+1,(v_zone).w ; is level SBZ2 ?
00015F7E 6600 0000                  		bne.w	Kill_transport	; if not, kill Sonic
00015F82 0C78 2000 D008             		cmpi.w	#$2000,(v_player+obX).w
00015F88 6500 0000                  		bcs.w	Kill_transport
00015F8C 4238 FE30                  		clr.b	(v_lastlamp).w	; clear	lamppost counter
00015F90 31FC 0001 FE02             		move.w	#1,(f_restart).w ; restart the level
00015F96 31FC 0103 FE10             		move.w	#(id_LZ<<8)+3,(v_zone).w ; set level to SBZ3 (LZ4)
00015F9C 4E75                       		rts	
00015F9E                            @dontkill: 
00015F9E 4E75                       		rts
00015FA0                            ; ===========================================================================
00015FA0                            
00015FA0                            @sides:
00015FA0 3140 0008                  		move.w	d0,obX(a0)
00015FA4 317C 0000 000A             		move.w	#0,obX+2(a0)
00015FAA 317C 0000 0010             		move.w	#0,obVelX(a0)	; stop Sonic moving
00015FB0 317C 0000 0020             		move.w	#0,obInertia(a0)
00015FB6 60A4                       		bra.s	@chkbottom
00015FB8                            
00015FB8                            Kill_transport: 
00015FB8 4EF9 0000 0000                     	jmp        (KillSonic).l
00015FBE                            
00015FBE                            ; End of function Sonic_LevelBound
00015FBE                            ; End of function Sonic_LevelBound
00015FBE                            		include	"_incObj\Sonic Roll.asm"
00015FBE                            ; ---------------------------------------------------------------------------
00015FBE                            ; Subroutine allowing Sonic to roll when he's moving
00015FBE                            ; ---------------------------------------------------------------------------
00015FBE                            
00015FBE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015FBE                            
00015FBE                            
00015FBE                            Sonic_Roll:
00015FBE 4A38 F7CA                  		tst.b	(f_jumponly).w
00015FC2 6600                       		bne.s	@noroll
00015FC4 3028 0020                  		move.w	obInertia(a0),d0
00015FC8 6A00                       		bpl.s	@ispositive
00015FCA 4440                       		neg.w	d0
00015FCC                            
00015FCC                            	@ispositive:
00015FCC 0C40 0080                  		cmpi.w	#$80,d0		; is Sonic moving at $80 speed or faster?
00015FD0 6500                       		bcs.s	@noroll		; if not, branch
00015FD2 1038 F602                  		move.b	(v_jpadhold2).w,d0
00015FD6 0200 000C                  		andi.b	#btnL+btnR,d0	; is left/right	being pressed?
00015FDA 6600                       		bne.s	@noroll		; if yes, branch
00015FDC 0838 0001 F602             		btst	#bitDn,(v_jpadhold2).w ; is down being pressed?
00015FE2 6600                       		bne.s	Sonic_ChkRoll	; if yes, branch
00015FE4                            
00015FE4                            	@noroll:
00015FE4 4E75                       		rts	
00015FE6                            ; ===========================================================================
00015FE6                            
00015FE6                            Sonic_ChkRoll:
00015FE6 0828 0002 0022             		btst	#2,obStatus(a0)	; is Sonic already rolling?
00015FEC 6700                       		beq.s	@roll		; if not, branch
00015FEE 4E75                       		rts	
00015FF0                            ; ===========================================================================
00015FF0                            
00015FF0                            @roll:
00015FF0 08E8 0002 0022             		bset	#2,obStatus(a0)
00015FF6 117C 000E 0016             		move.b	#$E,obHeight(a0)
00015FFC 117C 0007 0017             		move.b	#7,obWidth(a0)
00016002 117C 0000 001C             		move.b	#id_Roll,obAnim(a0) ; use "rolling" animation
00016008 5A68 000C                  		addq.w	#5,obY(a0)
00016016 4A68 0020                  		tst.w	obInertia(a0)
0001601A 6600                       		bne.s	@ismoving
0001601C 317C 0200 0020             		move.w	#$200,obInertia(a0) ; set inertia if 0
00016022                            
00016022                            	@ismoving:
00016022 4E75                       		rts	
00016024                            ; End of function Sonic_Roll
00016024                            ; End of function Sonic_Roll
00016024                            		include	"_incObj\Sonic Jump.asm"
00016024                            ; ---------------------------------------------------------------------------
00016024                            ; Subroutine allowing Sonic to jump
00016024                            ; ---------------------------------------------------------------------------
00016024                            
00016024                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016024                            
00016024                            
00016024                            Sonic_Jump:
00016024 1038 F603                  		move.b	(v_jpadpress2).w,d0
00016028 0200 0070                  		andi.b	#btnABC,d0	; is A, B or C pressed?
0001602C 6700 0000                  		beq.w	locret_1348E	; if not, branch
00016030 7000                       		moveq	#0,d0
00016032 1028 0026                  		move.b	obAngle(a0),d0
00016036 0600 0080                  		addi.b	#$80,d0
0001603A 6100 0000                  		bsr.w	sub_14D48
0001603E 0C41 0006                  		cmpi.w	#6,d1
00016042 6D00 0000                  		blt.w	locret_1348E
00016046 343C 0680                  		move.w	#$680,d2
0001604A 0828 0006 0022             		btst	#6,obStatus(a0)
00016050 6700                       		beq.s	loc_1341C
00016052 343C 0380                  		move.w	#$380,d2
00016056                            
00016056                            loc_1341C:
00016056 7000                       		moveq	#0,d0
00016058 1028 0026                  		move.b	obAngle(a0),d0
0001605C 0400 0040                  		subi.b	#$40,d0
00016060 4EB9 0000 3A36             		jsr	(CalcSine).l
00016066 C3C2                       		muls.w	d2,d1
00016068 E081                       		asr.l	#8,d1
0001606A D368 0010                  		add.w	d1,obVelX(a0)	; make Sonic jump
0001606E C1C2                       		muls.w	d2,d0
00016070 E080                       		asr.l	#8,d0
00016072 D168 0012                  		add.w	d0,obVelY(a0)	; make Sonic jump
00016076 08E8 0001 0022             		bset	#1,obStatus(a0)
0001607C 08A8 0005 0022             		bclr	#5,obStatus(a0)
00016082 588F                       		addq.l	#4,sp
00016084 117C 0001 003C             		move.b	#1,$3C(a0)
0001608A 4228 0038                  		clr.b	$38(a0)
00016098 117C 0013 0016             		move.b	#$13,obHeight(a0)
0001609E 117C 0009 0017             		move.b	#9,obWidth(a0)
000160A4 117C 000E 0016             		move.b	#$E,obHeight(a0)
000160AA 117C 0007 0017             		move.b	#7,obWidth(a0)
000160B0                            Result_Check:
000160B0 4A38 F5C2                  		tst.b   ($FFFFF5C2).w ; Has the victory animation flag been set?
000160B4 6700                       		beq.s   NormalJump ; If not, branch
000160B6 117C 0013 001C             		move.b  #$13,$1C(a0) ; Play the victory animation
000160BC 6000                       		bra.s   cont ; Continue
000160BE                            NormalJump:
000160BE 117C 0002 001C             		move.b  #2,$1C(a0)    ; use "jumping"    animation
000160C4                            cont:
000160C4 08E8 0002 0022             		bset	#2,obStatus(a0)
000160CA 5A68 000C                  		addq.w	#5,obY(a0)
000160CE                            
000160CE                            locret_1348E:
000160CE 4E75                       		rts	
000160D0                            ; ===========================================================================
000160D0                            
000160D0                            ; End of function Sonic_Jump
000160D0                            ; End of function Sonic_Jump
000160D0                            		include	"_incObj\Sonic JumpHeight.asm"
000160D0                            ; ---------------------------------------------------------------------------
000160D0                            ; Subroutine controlling Sonic's jump height/duration
000160D0                            ; ---------------------------------------------------------------------------
000160D0                            
000160D0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000160D0                            
000160D0                            
000160D0                            Sonic_JumpHeight:
000160D0 4A28 003C                  		tst.b	$3C(a0)
000160D4 6700                       		beq.s	loc_134C4
000160D6 323C FC00                  		move.w	#-$400,d1
000160DA 0828 0006 0022             		btst	#6,obStatus(a0)
000160E0 6700                       		beq.s	loc_134AE
000160E2 323C FE00                  		move.w	#-$200,d1
000160E6                            
000160E6                            loc_134AE:
000160E6 B268 0012                  		cmp.w	obVelY(a0),d1
000160EA 6F00                       		ble.s	locret_134C2
000160EC 1038 F602                  		move.b	(v_jpadhold2).w,d0
000160F0 0200 0070                  		andi.b	#btnABC,d0	; is A, B or C pressed?
000160F4 6600                       		bne.s	locret_134C2	; if yes, branch
000160F6 3141 0012                  		move.w	d1,obVelY(a0)
000160FA                            
000160FA                            locret_134C2:
000160FA 4E75                       		rts	
000160FC                            ; ===========================================================================
000160FC                            
000160FC                            loc_134C4:
000160FC 0C68 F040 0012             		cmpi.w	#-$FC0,obVelY(a0)
00016102 6C00                       		bge.s	locret_134D2
00016104 317C F040 0012             		move.w	#-$FC0,obVelY(a0)
0001610A                            
0001610A                            locret_134D2:
0001610A 4E75                       		rts	
0001610C                            ; End of function Sonic_JumpHeight
0001610C                            ; End of function Sonic_JumpHeight
0001610C                            		include	"_incObj\Sonic SlopeResist.asm"
0001610C                            ; ---------------------------------------------------------------------------
0001610C                            ; Subroutine to	slow Sonic walking up a	slope
0001610C                            ; ---------------------------------------------------------------------------
0001610C                            
0001610C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001610C                            
0001610C                            
0001610C                            Sonic_SlopeResist:
0001610C 1028 0026                  		move.b	obAngle(a0),d0
00016110 0600 0060                  		addi.b	#$60,d0
00016114 0C00 00C0                  		cmpi.b	#$C0,d0
00016118 6400                       		bcc.s	locret_13508
0001611A 1028 0026                  		move.b	obAngle(a0),d0
0001611E 4EB9 0000 3A36             		jsr	(CalcSine).l
00016124 C1FC 0020                  		muls.w	#$20,d0
00016128 E080                       		asr.l	#8,d0
0001612A 4A68 0020                  		tst.w	obInertia(a0)
0001612E 6700                       		beq.s	locret_13508
00016130 6B00                       		bmi.s	loc_13504
00016132 4A40                       		tst.w	d0
00016134 6700                       		beq.s	locret_13502
00016136 D168 0020                  		add.w	d0,obInertia(a0) ; change Sonic's inertia
0001613A                            
0001613A                            locret_13502:
0001613A 4E75                       		rts	
0001613C                            ; ===========================================================================
0001613C                            
0001613C                            loc_13504:
0001613C D168 0020                  		add.w	d0,obInertia(a0)
00016140                            
00016140                            locret_13508:
00016140 4E75                       		rts	
00016142                            ; End of function Sonic_SlopeResist
00016142                            ; End of function Sonic_SlopeResist
00016142                            		include	"_incObj\Sonic RollRepel.asm"
00016142                            ; ---------------------------------------------------------------------------
00016142                            ; Subroutine to	push Sonic down	a slope	while he's rolling
00016142                            ; ---------------------------------------------------------------------------
00016142                            
00016142                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016142                            
00016142                            
00016142                            Sonic_RollRepel:
00016142 1028 0026                  		move.b	obAngle(a0),d0
00016146 0600 0060                  		addi.b	#$60,d0
0001614A 0C00 00C0                  		cmpi.b	#-$40,d0
0001614E 6400                       		bcc.s	locret_13544
00016150 1028 0026                  		move.b	obAngle(a0),d0
00016154 4EB9 0000 3A36             		jsr	(CalcSine).l
0001615A C1FC 0050                  		muls.w	#$50,d0
0001615E E080                       		asr.l	#8,d0
00016160 4A68 0020                  		tst.w	obInertia(a0)
00016164 6B00                       		bmi.s	loc_1353A
00016166 4A40                       		tst.w	d0
00016168 6A00                       		bpl.s	loc_13534
0001616A E480                       		asr.l	#2,d0
0001616C                            
0001616C                            loc_13534:
0001616C D168 0020                  		add.w	d0,obInertia(a0)
00016170 4E75                       		rts	
00016172                            ; ===========================================================================
00016172                            
00016172                            loc_1353A:
00016172 4A40                       		tst.w	d0
00016174 6B00                       		bmi.s	loc_13540
00016176 E480                       		asr.l	#2,d0
00016178                            
00016178                            loc_13540:
00016178 D168 0020                  		add.w	d0,obInertia(a0)
0001617C                            
0001617C                            locret_13544:
0001617C 4E75                       		rts	
0001617E                            ; End of function Sonic_RollRepel
0001617E                            ; End of function Sonic_RollRepel
0001617E                            		include	"_incObj\Sonic SlopeRepel.asm"
0001617E                            ; ---------------------------------------------------------------------------
0001617E                            ; Subroutine to	push Sonic down	a slope
0001617E                            ; ---------------------------------------------------------------------------
0001617E                            
0001617E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001617E                            
0001617E                            
0001617E                            Sonic_SlopeRepel:
0001617E 4E71                       		nop	
00016180 4A28 0038                  		tst.b	$38(a0)
00016184 6600                       		bne.s	locret_13580
00016186 4A68 003E                  		tst.w	$3E(a0)
0001618A 6600                       		bne.s	loc_13582
0001618C 1028 0026                  		move.b	obAngle(a0),d0
00016190 0600 0020                  		addi.b	#$20,d0
00016194 0200 00C0                  		andi.b	#$C0,d0
00016198 6700                       		beq.s	locret_13580
0001619A 3028 0020                  		move.w	obInertia(a0),d0
0001619E 6A00                       		bpl.s	loc_1356A
000161A0 4440                       		neg.w	d0
000161A2                            
000161A2                            loc_1356A:
000161A2 0C40 0280                  		cmpi.w	#$280,d0
000161A6 6400                       		bcc.s	locret_13580
000161A8 4268 0020                  		clr.w	obInertia(a0)
000161AC 08E8 0001 0022             		bset	#1,obStatus(a0)
000161B2 317C 001E 003E             		move.w	#$1E,$3E(a0)
000161B8                            
000161B8                            locret_13580:
000161B8 4E75                       		rts	
000161BA                            ; ===========================================================================
000161BA                            
000161BA                            loc_13582:
000161BA 5368 003E                  		subq.w	#1,$3E(a0)
000161BE 4E75                       		rts	
000161C0                            ; End of function Sonic_SlopeRepel
000161C0                            ; End of function Sonic_SlopeRepel
000161C0                            		include	"_incObj\Sonic JumpAngle.asm"
000161C0                            ; ---------------------------------------------------------------------------
000161C0                            ; Subroutine to	return Sonic's angle to 0 as he jumps
000161C0                            ; ---------------------------------------------------------------------------
000161C0                            
000161C0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000161C0                            
000161C0                            
000161C0                            Sonic_JumpAngle:
000161C0 1028 0026                  		move.b	obAngle(a0),d0	; get Sonic's angle
000161C4 6700                       		beq.s	locret_135A2	; if already 0,	branch
000161C6 6A00                       		bpl.s	loc_13598	; if higher than 0, branch
000161C8                            
000161C8 5400                       		addq.b	#2,d0		; increase angle
000161CA 6400                       		bcc.s	loc_13596
000161CC 7000                       		moveq	#0,d0
000161CE                            
000161CE                            loc_13596:
000161CE 6000                       		bra.s	loc_1359E
000161D0                            ; ===========================================================================
000161D0                            
000161D0                            loc_13598:
000161D0 5500                       		subq.b	#2,d0		; decrease angle
000161D2 6400                       		bcc.s	loc_1359E
000161D4 7000                       		moveq	#0,d0
000161D6                            
000161D6                            loc_1359E:
000161D6 1140 0026                  		move.b	d0,obAngle(a0)
000161DA                            
000161DA                            locret_135A2:
000161DA 4E75                       		rts	
000161DC                            ; End of function Sonic_JumpAngle
000161DC                            ; End of function Sonic_JumpAngle
000161DC                            		include	"_incObj\Sonic Floor.asm"
000161DC                            ; ---------------------------------------------------------------------------
000161DC                            ; Subroutine for Sonic to interact with	the floor after	jumping/falling
000161DC                            ; ---------------------------------------------------------------------------
000161DC                            
000161DC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000161DC                            
000161DC                            
000161DC                            Sonic_Floor:
000161DC 3228 0010                  		move.w	obVelX(a0),d1
000161E0 3428 0012                  		move.w	obVelY(a0),d2
000161E4 4EB9 0000 3CC8             		jsr	(CalcAngle).l
000161EA 11C0 FFEC                  		move.b	d0,($FFFFFFEC).w
000161EE 0400 0020                  		subi.b	#$20,d0
000161F2 11C0 FFED                  		move.b	d0,($FFFFFFED).w
000161F6 0200 00C0                  		andi.b	#$C0,d0
000161FA 11C0 FFEE                  		move.b	d0,($FFFFFFEE).w
000161FE 0C00 0040                  		cmpi.b	#$40,d0
00016202 6700 0000                  		beq.w	loc_13680
00016206 0C00 0080                  		cmpi.b	#$80,d0
0001620A 6700 0000                  		beq.w	loc_136E2
0001620E 0C00 00C0                  		cmpi.b	#$C0,d0
00016212 6700 0000                  		beq.w	loc_1373E
00016216 6100 0000                  		bsr.w	Sonic_HitWall
0001621A 4A41                       		tst.w	d1
0001621C 6A00                       		bpl.s	loc_135F0
0001621E 9368 0008                  		sub.w	d1,obX(a0)
00016222 317C 0000 0010             		move.w	#0,obVelX(a0)
00016228                            
00016228                            loc_135F0:
00016228 6100 0000                  		bsr.w	sub_14EB4
0001622C 4A41                       		tst.w	d1
0001622E 6A00                       		bpl.s	loc_13602
00016230 D368 0008                  		add.w	d1,obX(a0)
00016234 317C 0000 0010             		move.w	#0,obVelX(a0)
0001623A                            
0001623A                            loc_13602:
0001623A 6100 0000                  		bsr.w	Sonic_HitFloor
0001623E 11C1 FFEF                  		move.b	d1,($FFFFFFEF).w
00016242 4A41                       		tst.w	d1
00016244 6A00                       		bpl.s	locret_1367E
00016246 1428 0012                  		move.b	obVelY(a0),d2
0001624A 5002                       		addq.b	#8,d2
0001624C 4402                       		neg.b	d2
0001624E B202                       		cmp.b	d2,d1
00016250 6C00                       		bge.s	loc_1361E
00016252 B002                       		cmp.b	d2,d0
00016254 6D00                       		blt.s	locret_1367E
00016256                            
00016256                            loc_1361E:
00016256 D368 000C                  		add.w	d1,obY(a0)
0001625A 1143 0026                  		move.b	d3,obAngle(a0)
0001625E 6100 0000                  		bsr.w	Sonic_ResetOnFloor
00016262 117C 0000 001C             		move.b	#id_Walk,obAnim(a0)
00016268 1003                       		move.b	d3,d0
0001626A 0600 0020                  		addi.b	#$20,d0
0001626E 0200 0040                  		andi.b	#$40,d0
00016272 6600                       		bne.s	loc_1365C
00016274 1003                       		move.b	d3,d0
00016276 0600 0010                  		addi.b	#$10,d0
0001627A 0200 0020                  		andi.b	#$20,d0
0001627E 6700                       		beq.s	loc_1364E
00016280 E0E8 0012                  		asr	obVelY(a0)
00016284 6000                       		bra.s	loc_13670
00016286                            ; ===========================================================================
00016286                            
00016286                            loc_1364E:
00016286 317C 0000 0012             		move.w	#0,obVelY(a0)
0001628C 3168 0010 0020             		move.w	obVelX(a0),obInertia(a0)
00016292 4E75                       		rts	
00016294                            ; ===========================================================================
00016294                            
00016294                            loc_1365C:
00016294 317C 0000 0010             		move.w	#0,obVelX(a0)
0001629A 0C68 0FC0 0012             		cmpi.w	#$FC0,obVelY(a0)
000162A0 6F00                       		ble.s	loc_13670
000162A2 317C 0FC0 0012             		move.w	#$FC0,obVelY(a0)
000162A8                            
000162A8                            loc_13670:
000162A8 3168 0012 0020             		move.w	obVelY(a0),obInertia(a0)
000162AE 4A03                       		tst.b	d3
000162B0 6A00                       		bpl.s	locret_1367E
000162B2 4468 0020                  		neg.w	obInertia(a0)
000162B6                            
000162B6                            locret_1367E:
000162B6 4E75                       		rts	
000162B8                            ; ===========================================================================
000162B8                            
000162B8                            loc_13680:
000162B8 6100 0000                  		bsr.w	Sonic_HitWall
000162BC 4A41                       		tst.w	d1
000162BE 6A00                       		bpl.s	loc_1369A
000162C0 9368 0008                  		sub.w	d1,obX(a0)
000162C4 317C 0000 0010             		move.w	#0,obVelX(a0)
000162CA 3168 0012 0020             		move.w	obVelY(a0),obInertia(a0)
000162D0 4E75                       		rts	
000162D2                            ; ===========================================================================
000162D2                            
000162D2                            loc_1369A:
000162D2 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
000162D6 4A41                       		tst.w	d1
000162D8 6A00                       		bpl.s	loc_136B4
000162DA 9368 000C                  		sub.w	d1,obY(a0)
000162DE 4A68 0012                  		tst.w	obVelY(a0)
000162E2 6A00                       		bpl.s	locret_136B2
000162E4 317C 0000 0012             		move.w	#0,obVelY(a0)
000162EA                            
000162EA                            locret_136B2:
000162EA 4E75                       		rts	
000162EC                            ; ===========================================================================
000162EC                            
000162EC                            loc_136B4:
000162EC 4A68 0012                  		tst.w	obVelY(a0)
000162F0 6B00                       		bmi.s	locret_136E0
000162F2 6100 0000                  		bsr.w	Sonic_HitFloor
000162F6 4A41                       		tst.w	d1
000162F8 6A00                       		bpl.s	locret_136E0
000162FA D368 000C                  		add.w	d1,obY(a0)
000162FE 1143 0026                  		move.b	d3,obAngle(a0)
00016302 6100 0000                  		bsr.w	Sonic_ResetOnFloor
00016306 117C 0000 001C             		move.b	#id_Walk,obAnim(a0)
0001630C 317C 0000 0012             		move.w	#0,obVelY(a0)
00016312 3168 0010 0020             		move.w	obVelX(a0),obInertia(a0)
00016318                            
00016318                            locret_136E0:
00016318 4E75                       		rts	
0001631A                            ; ===========================================================================
0001631A                            
0001631A                            loc_136E2:
0001631A 6100 0000                  		bsr.w	Sonic_HitWall
0001631E 4A41                       		tst.w	d1
00016320 6A00                       		bpl.s	loc_136F4
00016322 9368 0008                  		sub.w	d1,obX(a0)
00016326 317C 0000 0010             		move.w	#0,obVelX(a0)
0001632C                            
0001632C                            loc_136F4:
0001632C 6100 0000                  		bsr.w	sub_14EB4
00016330 4A41                       		tst.w	d1
00016332 6A00                       		bpl.s	loc_13706
00016334 D368 0008                  		add.w	d1,obX(a0)
00016338 317C 0000 0010             		move.w	#0,obVelX(a0)
0001633E                            
0001633E                            loc_13706:
0001633E 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
00016342 4A41                       		tst.w	d1
00016344 6A00                       		bpl.s	locret_1373C
00016346 9368 000C                  		sub.w	d1,obY(a0)
0001634A 1003                       		move.b	d3,d0
0001634C 0600 0020                  		addi.b	#$20,d0
00016350 0200 0040                  		andi.b	#$40,d0
00016354 6600                       		bne.s	loc_13726
00016356 317C 0000 0012             		move.w	#0,obVelY(a0)
0001635C 4E75                       		rts	
0001635E                            ; ===========================================================================
0001635E                            
0001635E                            loc_13726:
0001635E 1143 0026                  		move.b	d3,obAngle(a0)
00016362 6100 0000                  		bsr.w	Sonic_ResetOnFloor
00016366 3168 0012 0020             		move.w	obVelY(a0),obInertia(a0)
0001636C 4A03                       		tst.b	d3
0001636E 6A00                       		bpl.s	locret_1373C
00016370 4468 0020                  		neg.w	obInertia(a0)
00016374                            
00016374                            locret_1373C:
00016374 4E75                       		rts	
00016376                            ; ===========================================================================
00016376                            
00016376                            loc_1373E:
00016376 6100 0000                  		bsr.w	sub_14EB4
0001637A 4A41                       		tst.w	d1
0001637C 6A00                       		bpl.s	loc_13758
0001637E D368 0008                  		add.w	d1,obX(a0)
00016382 317C 0000 0010             		move.w	#0,obVelX(a0)
00016388 3168 0012 0020             		move.w	obVelY(a0),obInertia(a0)
0001638E 4E75                       		rts	
00016390                            ; ===========================================================================
00016390                            
00016390                            loc_13758:
00016390 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
00016394 4A41                       		tst.w	d1
00016396 6A00                       		bpl.s	loc_13772
00016398 9368 000C                  		sub.w	d1,obY(a0)
0001639C 4A68 0012                  		tst.w	obVelY(a0)
000163A0 6A00                       		bpl.s	locret_13770
000163A2 317C 0000 0012             		move.w	#0,obVelY(a0)
000163A8                            
000163A8                            locret_13770:
000163A8 4E75                       		rts	
000163AA                            ; ===========================================================================
000163AA                            
000163AA                            loc_13772:
000163AA 4A68 0012                  		tst.w	obVelY(a0)
000163AE 6B00                       		bmi.s	locret_1379E
000163B0 6100 0000                  		bsr.w	Sonic_HitFloor
000163B4 4A41                       		tst.w	d1
000163B6 6A00                       		bpl.s	locret_1379E
000163B8 D368 000C                  		add.w	d1,obY(a0)
000163BC 1143 0026                  		move.b	d3,obAngle(a0)
000163C0 6100 0000                  		bsr.w	Sonic_ResetOnFloor
000163C4 117C 0000 001C             		move.b	#id_Walk,obAnim(a0)
000163CA 317C 0000 0012             		move.w	#0,obVelY(a0)
000163D0 3168 0010 0020             		move.w	obVelX(a0),obInertia(a0)
000163D6                            
000163D6                            locret_1379E:
000163D6 4E75                       		rts	
000163D8                            ; End of function Sonic_Floor
000163D8                            ; End of function Sonic_Floor
000163D8                            		include	"_incObj\Sonic ResetOnFloor.asm"
000163D8                            ; ---------------------------------------------------------------------------
000163D8                            ; Subroutine to	reset Sonic's mode when he lands on the floor
000163D8                            ; ---------------------------------------------------------------------------
000163D8                            
000163D8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000163D8                            
000163D8                            
000163D8                            Sonic_ResetOnFloor:            ; XREF: PlatformObject; et al
000163D8 08A8 0005 0022                     	bclr    #5,$22(a0)
000163DE 08A8 0001 0022                     	bclr    #1,$22(a0)
000163E4 0828 0002 0022                     	btst    #2,$22(a0)
000163EA 6700                               	beq.s    loc_137E4
000163EC 08A8 0002 0022             		bclr	#2,obStatus(a0)
000163F2 117C 0013 0016             		move.b	#$13,obHeight(a0)
000163F8 117C 0009 0017             		move.b	#9,obWidth(a0)
000163FE 117C 0000 001C             		move.b	#id_Walk,obAnim(a0) ; use running/walking animation
00016404 5B68 000C                  		subq.w	#5,obY(a0)
00016408                            
00016408                            loc_137E4:
00016408 117C 0000 003C             		move.b	#0,$3C(a0)
0001640E 31FC 0000 F7D0             		move.w	#0,(v_itembonus).w
00016414 4E75                       		rts	
00016416                            ; End of function Sonic_ResetOnFloor
00016416                            ; End of function Sonic_ResetOnFloor
00016416                            		include	"_incObj\Sonic (part 2).asm"
00016416                            ; ---------------------------------------------------------------------------
00016416                            ; Sonic	when he	gets hurt
00016416                            ; ---------------------------------------------------------------------------
00016416                            
00016416                            Sonic_Hurt:	; Routine 4
00016416 4EB9 0000 F968             		jsr	(SpeedToPos).l
0001641C 0668 0030 0012             		addi.w	#$30,obVelY(a0)
00016422 0828 0006 0022             		btst	#6,obStatus(a0)
00016428 6700                       		beq.s	loc_1380C
0001642A 0468 0020 0012             		subi.w	#$20,obVelY(a0)
00016430                            
00016430                            loc_1380C:
00016430 6100 0000                  		bsr.w	Sonic_HurtStop
00016434 6100 FAF4                  		bsr.w	Sonic_LevelBound
00016438 6100 F114                  		bsr.w	Sonic_RecordPosition
0001643C 6100 0000                  		bsr.w	Sonic_Animate
00016440 6100 0000                  		bsr.w	Sonic_LoadGfx
00016444 4EF9 0000 F97C             		jmp	(DisplaySprite).l
0001644A                            
0001644A                            ; ---------------------------------------------------------------------------
0001644A                            ; Subroutine to	stop Sonic falling after he's been hurt
0001644A                            ; ---------------------------------------------------------------------------
0001644A                            
0001644A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001644A                            
0001644A                            
0001644A                            Sonic_HurtStop:
0001644A 3038 F72E                  		move.w	(v_limitbtm2).w,d0
0001644E 0640 00E0                  		addi.w	#$E0,d0
00016452                            		;cmp.w	obY(a0),d0
00016452                            		;bcs.w	KillSonic
00016452 6100 FD88                  		bsr.w	Sonic_Floor
00016456 0828 0001 0022             		btst	#1,obStatus(a0)
0001645C 6600                       		bne.s	locret_13860
0001645E 7000                       		moveq	#0,d0
00016460 3140 0012                  		move.w	d0,obVelY(a0)
00016464 3140 0010                  		move.w	d0,obVelX(a0)
00016468 3140 0020                  		move.w	d0,obInertia(a0)
0001646C 117C 0000 001C             		move.b	#id_Walk,obAnim(a0)
00016472 5528 0024                  		subq.b	#2,obRoutine(a0)
00016476 317C 0078 0030             		move.w	#$78,$30(a0)
0001647C                            
0001647C                            locret_13860:
0001647C 4E75                       		rts	
0001647E                            ; End of function Sonic_HurtStop
0001647E                            
0001647E                            ; ---------------------------------------------------------------------------
0001647E                            ; Sonic	when he	dies
0001647E                            ; ---------------------------------------------------------------------------
0001647E                            
0001647E                            Sonic_Death:	; Routine 6
0001647E 6100 0000                  		bsr.w	GameOver
00016482 4EB9 0000 F930             		jsr	(ObjectFall).l
00016488 6100 F0C4                  		bsr.w	Sonic_RecordPosition
0001648C 6100 0000                  		bsr.w	Sonic_Animate
00016490 6100 0000                  		bsr.w	Sonic_LoadGfx
00016494 4EF9 0000 F97C             		jmp	(DisplaySprite).l
0001649A                            
0001649A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001649A                            
0001649A                            GameOver:
0001649A 3038 F72E                  		move.w	(v_limitbtm2).w,d0
0001649E 0640 0100                  		addi.w	#$100,d0
000164A2 B068 000C                  		cmp.w	obY(a0),d0
000164A6 6400 0000                  		bcc.w	locret_13900
000164AA 317C FFC8 0012             		move.w	#-$38,obVelY(a0)
000164B0 5428 0024                  		addq.b	#2,obRoutine(a0)
000164B4 4238 FE1E                  		clr.b	(f_timecount).w	; stop time counter
000164B8 5238 FE1C                  		addq.b	#1,(f_lifecount).w ; update lives counter
000164BC 5338 FE12                  		subq.b	#1,(v_lives).w	; subtract 1 from number of lives
000164C0 6600                       		bne.s	loc_138D4
000164C2 317C 0000 003A             		move.w	#0,$3A(a0)
000164C8 11FC 0039 D080             		move.b	#id_GameOverCard,(v_objspace+$80).w ; load GAME object
000164CE 11FC 0039 D0C0             		move.b	#id_GameOverCard,(v_objspace+$C0).w ; load OVER object
000164D4 11FC 0001 D0DA             		move.b	#1,(v_objspace+$C0+obFrame).w ; set OVER object to correct frame
000164DA 4238 FE1A                  		clr.b	(f_timeover).w
000164DE                            
000164DE                            loc_138C2:
000164E8 7003                       		moveq	#3,d0
000164EA 4EF9 0000 16EE             		jmp	(AddPLC).l	; load game over patterns
000164F0                            		
000164F0                            loc_138C3:
000164FA 7003                       		moveq	#3,d0
000164FC 4EF9 0000 16EE             		jmp	(AddPLC).l	; load game over patterns
00016502                            ; ===========================================================================
00016502                            
00016502                            loc_138D4:
00016502 317C 003C 003A             		move.w	#60,$3A(a0)	; set time delay to 1 second
00016508 4A38 FE1A                  		tst.b	(f_timeover).w	; is TIME OVER tag set?
0001650C 6700                       		beq.s	locret_13900	; if not, branch
0001650E 317C 0000 003A             		move.w	#0,$3A(a0)
00016514 11FC 0039 D080             		move.b	#id_GameOverCard,(v_objspace+$80).w ; load TIME object
0001651A 11FC 0039 D0C0             		move.b	#id_GameOverCard,(v_objspace+$C0).w ; load OVER object
00016520 11FC 0002 D09A             		move.b	#2,(v_objspace+$80+obFrame).w
00016526 11FC 0003 D0DA             		move.b	#3,(v_objspace+$C0+obFrame).w
0001652C 60B0                       		bra.s	loc_138C2
0001652E                            		
0001652E                            
0001652E                            ; ===========================================================================
0001652E                            
0001652E                            locret_13900:
0001652E 4E75                       		rts	
00016530                            ; End of function GameOver
00016530                            
00016530                            ; ---------------------------------------------------------------------------
00016530                            ; Sonic	when the level is restarted
00016530                            ; ---------------------------------------------------------------------------
00016530                            
00016530                            Sonic_ResetLevel:; Routine 8
00016530 4A68 003A                  		tst.w	$3A(a0)
00016534 6700                       		beq.s	locret_13914
00016536 5368 003A                  		subq.w	#1,$3A(a0)	; subtract 1 from time delay
0001653A 6600                       		bne.s	locret_13914
0001653C 31FC 0001 FE02             		move.w	#1,(f_restart).w ; restart the level
00016542                            
00016542                            	locret_13914:
00016542 4E75                       		rts	
00016542 4E75                       		rts	
00016544                            		include	"_incObj\Sonic Loops.asm"
00016544                            ; ---------------------------------------------------------------------------
00016544                            ; Subroutine to	make Sonic run around loops (GHZ/SLZ)
00016544                            ; ---------------------------------------------------------------------------
00016544                            
00016544                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016544                            
00016544                            
00016544                            Sonic_Loops:
00016544 0C38 0003 FE10             		cmpi.b	#id_SLZ,(v_zone).w ; is level SLZ ?
0001654A 6700                       		beq.s	@isstarlight	; if yes, branch
0001654C 4A38 FE10                  		tst.b	(v_zone).w	; is level GHZ ?
00016550 6600 0000                  		bne.w	@noloops	; if not, branch
00016554                            
00016554                            	@isstarlight:
00016554 3028 000C                  		move.w	obY(a0),d0
00016558 E248                       		lsr.w	#1,d0
0001655A 0240 0380                  		andi.w	#$380,d0
0001655E 1228 0008                  		move.b	obX(a0),d1
00016562 0241 007F                  		andi.w	#$7F,d1
00016566 D041                       		add.w	d1,d0
00016568 43F8 A400                  		lea	(v_lvllayout).w,a1
0001656C 1231 0000                  		move.b	(a1,d0.w),d1	; d1 is	the 256x256 tile Sonic is currently on
00016570                            
00016570 B238 F7AE                  		cmp.b	(v_256roll1).w,d1 ; is Sonic on a "roll tunnel" tile?
00016574 6700 FA70                  		beq.w	Sonic_ChkRoll	; if yes, branch
00016578 B238 F7AF                  		cmp.b	(v_256roll2).w,d1
0001657C 6700 FA68                  		beq.w	Sonic_ChkRoll
00016580                            
00016580 B238 F7AC                  		cmp.b	(v_256loop1).w,d1 ; is Sonic on a loop tile?
00016584 6700                       		beq.s	@chkifleft	; if yes, branch
00016586 B238 F7AD                  		cmp.b	(v_256loop2).w,d1
0001658A 6700                       		beq.s	@chkifinair
0001658C 08A8 0006 0001             		bclr	#6,obRender(a0) ; return Sonic to high plane
00016592 4E75                       		rts	
00016594                            ; ===========================================================================
00016594                            
00016594                            @chkifinair:
00016594 0828 0001 0022             		btst	#1,obStatus(a0)	; is Sonic in the air?
0001659A 6700                       		beq.s	@chkifleft	; if not, branch
0001659C                            
0001659C 08A8 0006 0001             		bclr	#6,obRender(a0)	; return Sonic to high plane
000165A2 4E75                       		rts	
000165A4                            ; ===========================================================================
000165A4                            
000165A4                            @chkifleft:
000165A4 3428 0008                  		move.w	obX(a0),d2
000165A8 0C02 002C                  		cmpi.b	#$2C,d2
000165AC 6400                       		bcc.s	@chkifright
000165AE                            
000165AE 08A8 0006 0001             		bclr	#6,obRender(a0)	; return Sonic to high plane
000165B4 4E75                       		rts	
000165B6                            ; ===========================================================================
000165B6                            
000165B6                            @chkifright:
000165B6 0C02 00E0                  		cmpi.b	#$E0,d2
000165BA 6500                       		bcs.s	@chkangle1
000165BC                            
000165BC 08E8 0006 0001             		bset	#6,obRender(a0)	; send Sonic to	low plane
000165C2 4E75                       		rts	
000165C4                            ; ===========================================================================
000165C4                            
000165C4                            @chkangle1:
000165C4 0828 0006 0001             		btst	#6,obRender(a0) ; is Sonic on low plane?
000165CA 6600                       		bne.s	@chkangle2	; if yes, branch
000165CC                            
000165CC 1228 0026                  		move.b	obAngle(a0),d1
000165D0 6700                       		beq.s	@done
000165D2 0C01 0080                  		cmpi.b	#$80,d1		; is Sonic upside-down?
000165D6 6200                       		bhi.s	@done		; if yes, branch
000165D8 08E8 0006 0001             		bset	#6,obRender(a0)	; send Sonic to	low plane
000165DE 4E75                       		rts	
000165E0                            ; ===========================================================================
000165E0                            
000165E0                            @chkangle2:
000165E0 1228 0026                  		move.b	obAngle(a0),d1
000165E4 0C01 0080                  		cmpi.b	#$80,d1		; is Sonic upright?
000165E8 6300                       		bls.s	@done		; if yes, branch
000165EA 08A8 0006 0001             		bclr	#6,obRender(a0)	; send Sonic to	high plane
000165F0                            
000165F0                            @noloops:
000165F0                            @done:
000165F0 4E75                       		rts	
000165F2                            ; End of function Sonic_Loops
000165F2                            ; End of function Sonic_Loops
000165F2                            		include	"_incObj\Sonic Animate.asm"
000165F2                            ; ---------------------------------------------------------------------------
000165F2                            ; Subroutine to	animate	Sonic's sprites
000165F2                            ; ---------------------------------------------------------------------------
000165F2                            
000165F2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000165F2                            
000165F2                            
000165F2                            Sonic_Animate:				; XREF: Obj01_Control; et al
000165F2 43F9 0000 0000             		lea	(Ani_Sonic).l,a1
000165F8 7000                       		moveq	#0,d0
000165FA 1028 001C                  		move.b	obAnim(a0),d0
000165FE B028 001D                  		cmp.b	obNextAni(a0),d0 ; is animation set to restart?
00016602 6700                       		beq.s	@do		; if not, branch
00016604 1140 001D                  		move.b	d0,obNextAni(a0) ; set to "no restart"
00016608 4228 001B                  		clr.b	obAniFrame(a0) ; reset animation
0001660C 4228 001E                  		clr.b	obTimeFrame(a0) ; reset frame duration
00016610                            		
00016610 08A8 0005 0022             		bclr	#5,obStatus(a0)	; clear pushing flag	;Mercury Pushing While Walking Fix	;Mercury Constants
00016616                            
00016616                            	@do:
00016616 D040                       		add.w	d0,d0
00016618 D2F1 0000                  		adda.w	(a1,d0.w),a1	; jump to appropriate animation	script
0001661C 1011                       		move.b	(a1),d0
0001661E 6B00                       		bmi.s	@walkrunroll	; if animation is walk/run/roll/jump, branch
00016620 1228 0022                  		move.b	obStatus(a0),d1
00016624 0201 0001                  		andi.b	#1,d1
00016628 0228 00FC 0001             		andi.b	#$FC,obRender(a0)
0001662E 8328 0001                  		or.b	d1,obRender(a0)
00016632 5328 001E                  		subq.b	#1,obTimeFrame(a0) ; subtract 1 from frame duration
00016636 6A00                       		bpl.s	@delay		; if time remains, branch
00016638 1140 001E                  		move.b	d0,obTimeFrame(a0) ; load frame duration
0001663C                            
0001663C                            @loadframe:
0001663C 7200                       		moveq	#0,d1
0001663E 1228 001B                  		move.b	obAniFrame(a0),d1 ; load current frame number
00016642 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number from script
00016646 0C00 00FD                  		cmp.b	#$FD,d0				; MJ: is it a flag from FD to FF?
0001664A 6400 0000                  		bhs		@end_FF				; MJ: if so, branch to flag routines
0001664E                            
0001664E                            	@next:
0001664E 1140 001A                  		move.b	d0,obFrame(a0)	; load sprite number
00016652 5228 001B                  		addq.b	#1,obAniFrame(a0) ; next frame number
00016656                            
00016656                            	@delay:
00016656 4E75                       		rts	
00016658                            ; ===========================================================================
00016658                            
00016658                            @end_FF:
00016658 5200                       		addq.b	#1,d0		; is the end flag = $FF	?
0001665A 6600                       		bne.s	@end_FE		; if not, branch
0001665C 4228 001B                  		clr.b	obAniFrame(a0) ; restart the animation
00016660 1029 0001                  		move.b	1(a1),d0	; read sprite number
00016664 60E8                       		bra.s	@next
00016666                            ; ===========================================================================
00016666                            
00016666                            @end_FE:
00016666 5200                       		addq.b	#1,d0		; is the end flag = $FE	?
00016668 6600                       		bne.s	@end_FD		; if not, branch
0001666A 1031 1002                  		move.b	2(a1,d1.w),d0	; read the next	byte in	the script
0001666E 9128 001B                  		sub.b	d0,obAniFrame(a0) ; jump back d0 bytes in the script
00016672 9200                       		sub.b	d0,d1
00016674 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number
00016678 60D4                       		bra.s	@next
0001667A                            ; ===========================================================================
0001667A                            
0001667A                            @end_FD:
0001667A 5200                       		addq.b	#1,d0		; is the end flag = $FD	?
0001667C 6600                       		bne.s	@end		; if not, branch
0001667E 1171 1002 001C             		move.b	2(a1,d1.w),obAnim(a0) ; read next byte, run that animation
00016684                            
00016684                            	@end:
00016684 4E75                       		rts	
00016686                            ; ===========================================================================
00016686                            
00016686                            @walkrunroll:
00016686 5328 001E                  		subq.b	#1,obTimeFrame(a0) ; subtract 1 from frame duration
0001668A 6ACA                       		bpl.s	@delay		; if time remains, branch
0001668C 5200                       		addq.b	#1,d0		; is animation walking/running?
0001668E 6600 0000                  		bne.w	@rolljump	; if not, branch
00016692 7200                       		moveq	#0,d1
00016694 1028 0026                  		move.b	obAngle(a0),d0	; get Sonic's angle
00016698 6B00                       		bmi.s	@ble 			; better handling of angles
0001669A 6700                       		beq.s	@ble
0001669C 5300                       		subq.b	#1,d0
0001669E                            
0001669E                            	@ble:																
0001669E 1428 0022                  		move.b	obStatus(a0),d2
000166A2 0202 0001                  		andi.b	#1,d2		; is Sonic mirrored horizontally?
000166A6 6600                       		bne.s	@flip		; if yes, branch
000166A8 4600                       		not.b	d0		; reverse angle
000166AA                            
000166AA                            	@flip:
000166AA 0600 0010                  		addi.b	#$10,d0		; add $10 to angle
000166AE 6A00                       		bpl.s	@noinvert	; if angle is $0-$7F, branch
000166B0 7203                       		moveq	#3,d1
000166B2                            
000166B2                            	@noinvert:
000166B2 0228 00FC 0001             		andi.b	#$FC,obRender(a0)
000166B8 B302                       		eor.b	d1,d2
000166BA 8528 0001                  		or.b	d2,obRender(a0)
000166BE 0828 0005 0022             		btst	#5,obStatus(a0)	; is Sonic pushing something?	;Mercury Constants
000166C4 6600 0000                  		bne.w	@push		; if yes, branch
000166C8                            
000166C8 E808                       		lsr.b	#4,d0		; divide angle by $10
000166CA 0200 0006                  		andi.b	#6,d0		; angle	must be	0, 2, 4	or 6
000166CE 3428 0020                  		move.w	obInertia(a0),d2 ; get Sonic's speed
000166D2 6A00                       		bpl.s	@nomodspeed
000166D4 4442                       		neg.w	d2		; modulus speed
000166D6                            
000166D6                            	@nomodspeed:
000166D6 43F9 0000 0000             		lea	(SonAni_MaxRun).l,a1 ; use	Dashing	animation
000166DC 0C42 0A00                  		cmpi.w	#$A00,d2	; is Sonic at Dashing speed?
000166E0 6400                       		bcc.s	@maxrunning	; if yes, branch
000166E2                            
000166E2 43F9 0000 0000             		lea	(SonAni_Run).l,a1 ; use	running	animation
000166E8 0C42 0600                  		cmpi.w	#$600,d2	; is Sonic at running speed?
000166EC 6400                       		bcc.s	@running	; if yes, branch
000166EE                            
000166EE 43F9 0000 0000             		lea	(SonAni_Walk).l,a1 ; use walking animation
000166F4                            
000166F4                            	@running:
000166F4 D000                       		add.b	d0,d0
000166F6 D000                       		add.b	d0,d0
000166F8 1600                       		move.b	d0,d3
000166FA 4442                       		neg.w	d2
000166FC 0642 0780                  		addi.w	#$780,d2
00016700 6A00                       		bpl.s	@belowmax
00016702 7400                       		moveq	#0,d2		; max animation speed
00016704 6000                       		bra.s	@belowmax
00016706                            
00016706                            	@maxrunning:
00016706 D000                       		add.b d0,d0
00016708 1600                       		move.b d0,d3
0001670A 4442                       		neg.w d2
0001670C 0642 0800                  		addi.w #$800, d2
00016710 6A00                       		bpl.s @belowmax
00016712 7400                       		moveq #0, d2 
00016714                            
00016714                            	@belowmax:
00016714 E04A                       		lsr.w	#8,d2
00016716 1142 001E                  		move.b	d2,obTimeFrame(a0) ; modify frame duration
0001671A 6100 FF20                  		bsr.w	@loadframe
0001671E D728 001A                  		add.b	d3,obFrame(a0)	; modify frame number
00016722 4E75                       		rts	
00016724                            ; ===========================================================================
00016724                            
00016724                            @rolljump:
00016724 5200                       		addq.b	#1,d0		; is animation rolling/jumping?
00016726 6600                       		bne.s	@push		; if not, branch
00016728 3428 0020                  		move.w	obInertia(a0),d2 ; get Sonic's speed
0001672C 6A00                       		bpl.s	@nomodspeed2
0001672E 4442                       		neg.w	d2
00016730                            
00016730                            	@nomodspeed2:
00016730 43F9 0000 0000             		lea	(SonAni_Roll2).l,a1 ; use fast animation
00016736 0C42 0600                  		cmpi.w	#$600,d2	; is Sonic moving fast?
0001673A 6400                       		bcc.s	@rollfast	; if yes, branch
0001673C 43F9 0000 0000             		lea	(SonAni_Roll).l,a1 ; use slower	animation
00016742                            
00016742                            	@rollfast:
00016742 4442                       		neg.w	d2
00016744 0642 0400                  		addi.w	#$400,d2
00016748 6A00                       		bpl.s	@belowmax2
0001674A 7400                       		moveq	#0,d2
0001674C                            
0001674C                            	@belowmax2:
0001674C E04A                       		lsr.w	#8,d2
0001674E 1142 001E                  		move.b	d2,obTimeFrame(a0) ; modify frame duration
00016752 1228 0022                  		move.b	obStatus(a0),d1
00016756 0201 0001                  		andi.b	#1,d1
0001675A 0228 00FC 0001             		andi.b	#$FC,obRender(a0)
00016760 8328 0001                  		or.b	d1,obRender(a0)
00016764 6000 FED6                  		bra.w	@loadframe
00016768                            ; ===========================================================================
00016768                            
00016768                            @push:
00016768 3428 0020                  		move.w	obInertia(a0),d2 ; get Sonic's speed
0001676C 6B00                       		bmi.s	@negspeed
0001676E 4442                       		neg.w	d2
00016770                            
00016770                            	@negspeed:
00016770 0642 0800                  		addi.w	#$800,d2
00016774 6A00                       		bpl.s	@belowmax3	
00016776 7400                       		moveq	#0,d2
00016778                            
00016778                            	@belowmax3:
00016778 EC4A                       		lsr.w	#6,d2
0001677A 1142 001E                  		move.b	d2,obTimeFrame(a0) ; modify frame duration
0001677E 43F9 0000 0000             		lea	(SonAni_Push).l,a1
00016784 1228 0022                  		move.b	obStatus(a0),d1
00016788 0201 0001                  		andi.b	#1,d1
0001678C 0228 00FC 0001             		andi.b	#$FC,obRender(a0)
00016792 8328 0001                  		or.b	d1,obRender(a0)
00016796 6000 FEA4                  		bra.w	@loadframe
0001679A                            
0001679A                            ; End of function Sonic_Animate
0001679A                            ; End of function Sonic_Animate
0001679A                            		include	"_anim\Sonic.asm"
0001679A                            ; ---------------------------------------------------------------------------
0001679A                            ; Animation script - Sonic
0001679A                            ; ---------------------------------------------------------------------------
0001679A                            Ani_Sonic:
0001679A                            
0001679A 0000                       ptr_Walk:	dc.w SonAni_Walk-Ani_Sonic
0001679C 0000                       ptr_Run:	dc.w SonAni_Run-Ani_Sonic
0001679E 0000                       ptr_Roll:	dc.w SonAni_Roll-Ani_Sonic
000167A0 0000                       ptr_Roll2:	dc.w SonAni_Roll2-Ani_Sonic
000167A2 0000                       ptr_Push:	dc.w SonAni_Push-Ani_Sonic
000167A4 0000                       ptr_Wait:	dc.w SonAni_Wait-Ani_Sonic
000167A6 0000                       ptr_Balance:	dc.w SonAni_Balance-Ani_Sonic
000167A8 0000                       ptr_LookUp:	dc.w SonAni_LookUp-Ani_Sonic
000167AA 0000                       ptr_Duck:	dc.w SonAni_Duck-Ani_Sonic
000167AC 0000                       ptr_Warp1:	dc.w SonAni_Warp1-Ani_Sonic
000167AE 0000                       ptr_Warp2:	dc.w SonAni_Warp2-Ani_Sonic
000167B0 0000                       ptr_Warp3:	dc.w SonAni_Warp3-Ani_Sonic
000167B2 0000                       ptr_Warp4:	dc.w SonAni_Warp4-Ani_Sonic
000167B4 0000                       ptr_Stop:	dc.w SonAni_Stop-Ani_Sonic
000167B6 0000                       ptr_Float1:	dc.w SonAni_Float1-Ani_Sonic
000167B8 0000                       ptr_Float2:	dc.w SonAni_Float2-Ani_Sonic
000167BA 0000                       ptr_Spring:	dc.w SonAni_Spring-Ani_Sonic
000167BC 0000                       ptr_Hang:	dc.w SonAni_Hang-Ani_Sonic
000167BE 0000                       ptr_Leap1:	dc.w SonAni_Leap1-Ani_Sonic
000167C0 0000                       ptr_Leap2:	dc.w SonAni_Leap2-Ani_Sonic
000167C2 0000                       ptr_Surf:	dc.w SonAni_Surf-Ani_Sonic
000167C4 0000                       ptr_GetAir:	dc.w SonAni_GetAir-Ani_Sonic
000167C6 0000                       ptr_Burnt:	dc.w SonAni_Burnt-Ani_Sonic
000167C8 0000                       ptr_Drown:	dc.w SonAni_Drown-Ani_Sonic
000167CA 0000                       ptr_Death:	dc.w SonAni_Death-Ani_Sonic
000167CC 0000                       ptr_Hurt:	dc.w SonAni_Hurt-Ani_Sonic
000167CE 0000                       ptr_WaterSlide:	dc.w SonAni_WaterSlide-Ani_Sonic
000167D0 0000                       ptr_Null:	dc.w SonAni_Null-Ani_Sonic
000167D2 0000                       ptr_Float3:	dc.w SonAni_Float3-Ani_Sonic
000167D4 0000                       ptr_Float4:	dc.w SonAni_Float4-Ani_Sonic
000167D6 0000                       ptr_MaxRun:	dc.w SonAni_MaxRun-Ani_Sonic
000167D8 0000                       ptr_Spindash:	dc.w SonAni_SpinDash-Ani_Sonic ;1F
000167DA 0000                       ptr_Hurt2:	dc.w SonAni_Hurt2-Ani_Sonic
000167DC 0000                       ptr_GetUp:	dc.w SonAni_GetUp-Ani_Sonic
000167DE 0000                       ptr_Blink:	dc.w SonAni_Blink-Ani_Sonic
000167E0 0000                       ptr_Sit:	dc.w SonAni_Sit-Ani_Sonic
000167E2 0000                       ptr_Peelout:	dc.w SonAni_Peelout-Ani_Sonic
000167E4 0000                       ptr_Hang2:	dc.w SonAni_Hang2-Ani_Sonic
000167E6                            
000167E6 FF10 1112 1314 150E 0FFF+  SonAni_Walk:	dc.b $FF, fr_walk13, fr_walk14,	fr_walk15, fr_walk16, fr_walk17, fr_walk18, fr_walk11, fr_walk12, afEnd, afEnd, afEnd, afEnd
000167F4 00                         		even
000167F4 FF2E 2F30 3132 3334 35FF+  SonAni_Run:	dc.b $FF, fr_run11,  fr_run12,  fr_run13,  fr_run14, fr_run15,  fr_run16,  fr_run17,  fr_run18, afEnd, afEnd, afEnd, afEnd
00016802 00                         		even
00016802 FE5E 5F60 6162 66          SonAni_Roll:	dc.b $FE, fr_Roll1, fr_Roll6, fr_Roll2, fr_Roll7, fr_Roll3, fr_Roll5
00016809 6364 6566 FFFF             		dc.b fr_Roll8, fr_Roll4, fr_Roll9, fr_Roll5, afEnd, afEnd
00016810 00                         		even
00016810 FE5E 5F60 6162 66          SonAni_Roll2:	dc.b $FE, fr_Roll1, fr_Roll6, fr_Roll2, fr_Roll7, fr_Roll3, fr_Roll5
00016817 6364 6566 FFFF             		dc.b fr_Roll8, fr_Roll4, fr_Roll9, fr_Roll5, afEnd, afEnd
0001681E 00                         		even
0001681E FD89 8A8B 8C8D 8E8F 90FF+  SonAni_Push:	dc.b $FD,  fr_push1,  fr_push2,  fr_push3,  fr_push4, fr_push5,  fr_push6,  fr_push7,  fr_push8, afEnd, afEnd, afEnd, afEnd
0001682C 00                         		even
0001682C                            SonAni_Wait:	
0001682C 0501 0101 0101 0101 0102+  		dc.b   5,  1,  1,  1,  1,  1,  1,  1,  1,  2,  1,  1,  1,  1,  1
0001683B 0101 0101 0101 0101 0102+  		dc.b   1,  1,  1,  1,  1,  1,  1,  1,  1,  2,  1,  1,  1,  1,  1
0001684A 0101 0101 0101 0101 0102+  		dc.b   1,  1,  1,  1,  1,  1,  1,  1,  1,  2,  1,  1,  1,  1,  1
00016859 0203 0303 0404 0505 0506+  		dc.b   2,  3,  3,  3,  4,  4,  5,  5,  5,  6,  6,  6,  7,  7,  7
00016868 0606 0607 0707 0606 0607+  		dc.b   6,  6,  6,  7,  7,  7,  6,  6,  6,  7,  7,  7,  6,  6,  6
00016877 0707 0706 0606 0707 0706+  		dc.b   7,  7,  7,  6,  6,  6,  7,  7,  7,  6,  6,  6,  7,  7,  7
00016886 0606 0607 0707 0606 0607+  		dc.b   6,  6,  6,  7,  7,  7,  6,  6,  6,  7,  7,  7,  6,  6,  6
00016895 0707 0706 0606 0707 0706+  		dc.b   7,  7,  7,  6,  6,  6,  7,  7,  7,  6,  6,  6,  7,  7,  7
000168A4 0808 0909 0A0A FE04        		dc.b   8,  8,  9,  9,  $A, $A, $FE, 4
000168AC                            		even
000168AC 0F72 7374 75FF             SonAni_Balance:	dc.b $F, fr_balance1, fr_balance2, fr_balance3, fr_balance4, afEnd
000168B2                            		even
000168B2 030C 0DFE 01               SonAni_LookUp:	dc.b $3, fr_lookup1, fr_lookup2, afBack, 1
000168B8 00                         		even
000168B8 026F 7071 FE01             SonAni_Duck:	dc.b $2, fr_duck3, fr_duck2, fr_duck, afBack, 1
000168BE                            		even
000168BE 3F67 FF                    SonAni_Warp1:	dc.b $3F, fr_warp1, afEnd
000168C2 00                         		even
000168C2 3F68 FF                    SonAni_Warp2:	dc.b $3F, fr_warp2, afEnd
000168C6 00                         		even
000168C6 3F69 FF                    SonAni_Warp3:	dc.b $3F, fr_warp3, afEnd
000168CA 00                         		even
000168CA 3F6A FF                    SonAni_Warp4:	dc.b $3F, fr_warp4, afEnd
000168CE 00                         		even
000168CE 026B 6C6C 6D6D 6E6E FD00   SonAni_Stop:	dc.b 2,	fr_stop1, fr_stop2, fr_stop2, fr_stop3, fr_stop3, fr_stop4, fr_stop4, $FD,  0
000168D8                            		even
000168D8 077C 82FE 02               SonAni_Float1:	dc.b 7,	fr_float1, fr_float4, afBack, 2
000168DE 00                         		even
000168DE 037C 7D7E 7F80 817B FF     SonAni_Float2:	dc.b 3,	fr_float1, fr_float7, fr_float2, fr_float8, fr_float5, fr_float3, fr_float6, afEnd
000168E8 00                         		even
000168E8 0783 8483 8483 84FD 00     SonAni_Spring:	dc.b 7, fr_spring, fr_spring2, fr_spring, fr_spring2, fr_spring, fr_spring2, afChange, id_Walk
000168F2 00                         		even
000168F2 0485 86FF                  SonAni_Hang:	dc.b 4,	fr_hang1, fr_hang2, afEnd
000168F6                            		even
000168F6 0F87 8787 FE01             SonAni_Leap1:	dc.b $F, fr_leap1, fr_leap1, fr_leap1,	afBack, 1
000168FC                            		even
000168FC 0F87 88FE 01               SonAni_Leap2:	dc.b $F, fr_leap1, fr_leap2, afBack, 1
00016902 00                         		even
00016902 3F91 FF                    SonAni_Surf:	dc.b $3F, fr_surf, afEnd
00016906 00                         		even
00016906 0B95 9512 13FD 00          SonAni_GetAir:	dc.b $B, fr_getair, fr_getair, fr_walk15, fr_walk16, afChange, id_Walk
0001690E 00                         		even
0001690E 2092 FF                    SonAni_Burnt:	dc.b $20, fr_burnt, afEnd
00016912 00                         		even
00016912 2F93 FF                    SonAni_Drown:	dc.b $2F, fr_drown, afEnd
00016916 00                         		even
00016916 0394 FF                    SonAni_Death:	dc.b 3,	fr_death, afEnd
0001691A 00                         		even
0001691A 0396 FF                    SonAni_Hurt:	dc.b 3,	fr_injury, afEnd
0001691E 00                         		even
0001691E                            SonAni_WaterSlide:
0001691E 0796 97FF                  		dc.b 7, fr_injury, fr_waterslide, afEnd
00016922                            		even
00016922 7700 FD00                  SonAni_Null:	dc.b $77, fr_null, afChange, id_Walk
00016926                            		even
00016926 037C 7E80 817B FF          SonAni_Float3:	dc.b 3,	fr_float1, fr_float2, fr_float5, fr_float3, fr_float6, afEnd
0001692E 00                         		even
0001692E 037C FD00                  SonAni_Float4:	dc.b 3,	fr_float1, afChange, id_Walk
00016932                            		even
00016932 FF4E 4F50 51FF FFFF FFFF+  SonAni_MaxRun:  dc.b $FF, fr_peelout11, fr_peelout12, fr_peelout13, fr_peelout14, afEnd, afEnd, afEnd, afEnd, afEnd, afEnd, afEnd, afEnd
00016940 00                         		even
00016940 009B 9C9B 9D9B 9E9B 9F9B+  SonAni_SpinDash: dc.b 0, fr_Spindash1, fr_spindash2, fr_spindash1, fr_spindash3, fr_spindash1, fr_spindash4, fr_spindash1, fr_spindash5, fr_spindash1, fr_spindash6, afEnd
0001694C                            		even
0001694C 0298 99FF                  SonAni_Hurt2:	dc.b 2, fr_skele1, fr_skele2, afEnd	
00016950                            		even
00016950 030B FD00                  SonAni_GetUp:	dc.b 3, $B,$FD,  0
00016954                            		even
00016954 0102 FD00                  SonAni_Blink:	dc.b   1,  2,$FD,  0
00016958                            		even
00016958 0808 0909 0A0A 09FE 05     SonAni_Sit:	dc.b   8, 8, 9, 9, $A, $A,  9, $FE, 5
00016962 00                         		even
00016962 000E 0E0E 0E0E 0E0F 0F     SonAni_Peelout: dc.b 	0, $E, $E, $E, $E, $E, $E, $F, $F
0001696B 0F0F 1010 1111 1213        		dc.b	$F, $F, $10, $10, $11, $11, $12, $13
00016973 1415 2E2F 3031 32          		dc.b	$14, $15, $2E, $2F, $30, $31, $32
0001697A 3334 35                    		dc.b	$33, $34, $35
0001697D 4E4F 5051 FE04 FE          		dc.b	$4E, $4F, $50,  $51, -2, 4, $FE
00016984                            		even
00016984 137A 7879 78FF             SonAni_Hang2:	dc.b $13, fr_vhang3, fr_vhang1, fr_vhang2, fr_vhang1, $FF	
0001698A                            		even
0001698A                            
0001698A                            
0001698A =00000000                  id_Walk:	equ (ptr_Walk-Ani_Sonic)/2	; 0
0001698A =00000001                  id_Run:		equ (ptr_Run-Ani_Sonic)/2	; 1
0001698A =00000002                  id_Roll:	equ (ptr_Roll-Ani_Sonic)/2	; 2
0001698A =00000003                  id_Roll2:	equ (ptr_Roll2-Ani_Sonic)/2	; 3
0001698A =00000004                  id_Push:	equ (ptr_Push-Ani_Sonic)/2	; 4
0001698A =00000005                  id_Wait:	equ (ptr_Wait-Ani_Sonic)/2	; 5
0001698A =00000006                  id_Balance:	equ (ptr_Balance-Ani_Sonic)/2	; 6
0001698A =00000007                  id_LookUp:	equ (ptr_LookUp-Ani_Sonic)/2	; 7
0001698A =00000008                  id_Duck:	equ (ptr_Duck-Ani_Sonic)/2	; 8
0001698A =00000009                  id_Warp1:	equ (ptr_Warp1-Ani_Sonic)/2	; 9
0001698A =0000000A                  id_Warp2:	equ (ptr_Warp2-Ani_Sonic)/2	; $A
0001698A =0000000B                  id_Warp3:	equ (ptr_Warp3-Ani_Sonic)/2	; $B
0001698A =0000000C                  id_Warp4:	equ (ptr_Warp4-Ani_Sonic)/2	; $C
0001698A =0000000D                  id_Stop:	equ (ptr_Stop-Ani_Sonic)/2	; $D
0001698A =0000000E                  id_Float1:	equ (ptr_Float1-Ani_Sonic)/2	; $E
0001698A =0000000F                  id_Float2:	equ (ptr_Float2-Ani_Sonic)/2	; $F
0001698A =00000010                  id_Spring:	equ (ptr_Spring-Ani_Sonic)/2	; $10
0001698A =00000011                  id_Hang:	equ (ptr_Hang-Ani_Sonic)/2	; $11
0001698A =00000012                  id_Leap1:	equ (ptr_Leap1-Ani_Sonic)/2	; $12
0001698A =00000013                  id_Leap2:	equ (ptr_Leap2-Ani_Sonic)/2	; $13
0001698A =00000014                  id_Surf:	equ (ptr_Surf-Ani_Sonic)/2	; $14
0001698A =00000015                  id_GetAir:	equ (ptr_GetAir-Ani_Sonic)/2	; $15
0001698A =00000016                  id_Burnt:	equ (ptr_Burnt-Ani_Sonic)/2	; $16
0001698A =00000017                  id_Drown:	equ (ptr_Drown-Ani_Sonic)/2	; $17
0001698A =00000018                  id_Death:	equ (ptr_Death-Ani_Sonic)/2	; $18
0001698A =00000019                  id_Hurt:	equ (ptr_Hurt-Ani_Sonic)/2	; $19
0001698A =0000001A                  id_WaterSlide:	equ (ptr_WaterSlide-Ani_Sonic)/2 ; $1A
0001698A =0000001B                  id_Null:	equ (ptr_Null-Ani_Sonic)/2	; $1B
0001698A =0000001C                  id_Float3:	equ (ptr_Float3-Ani_Sonic)/2	; $1C
0001698A =0000001D                  id_Float4:	equ (ptr_Float4-Ani_Sonic)/2	; $1D
0001698A =0000001E                  id_MaxRun:	equ (ptr_MaxRun-Ani_Sonic)/2	; $1E
0001698A =0000001F                  id_Spindash:	equ (ptr_Spindash-Ani_Sonic)/2	; $1F
0001698A =00000020                  id_Hurt2:	equ (ptr_Hurt2-Ani_Sonic)/2	; $21
0001698A =00000021                  id_GetUp:	equ (ptr_GetUp-Ani_Sonic)/2	; $22
0001698A =00000022                  id_Blink:	equ (ptr_Blink-Ani_Sonic)/2	; $23
0001698A =00000023                  id_Sit:		equ (ptr_Sit-Ani_Sonic)/2	; $24
0001698A =00000024                  id_Peelout:	equ (ptr_Peelout-Ani_Sonic)/2	; $25
0001698A =00000025                  id_Hang2:		equ	(ptr_Hang2-Ani_Sonic)/2
0001698A =00000025                  id_Hang2:		equ	(ptr_Hang2-Ani_Sonic)/2
0001698A                            		include	"_incObj\Sonic LoadGfx.asm"
0001698A                            ; ---------------------------------------------------------------------------
0001698A                            ; Sonic	graphics loading subroutine
0001698A                            ; ---------------------------------------------------------------------------
0001698A                            
0001698A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001698A                            
0001698A                            
0001698A                            Sonic_LoadGfx:			; XREF: Obj01_Control; et al
0001698A 7000                       		moveq	#0,d0
0001698C 1028 001A                  		move.b	$1A(a0),d0	; load frame number
00016990 B038 F766                  		cmp.b	($FFFFF766).w,d0
00016994 6700                       		beq.s	locret_13C96
00016996 11C0 F766                  		move.b	d0,($FFFFF766).w
0001699A 45F9 0000 0000             		lea	(SonicDynPLC).l,a2
000169A0 D040                       		add.w	d0,d0
000169A2 D4F2 0000                  		adda.w	(a2,d0.w),a2
000169A6 7A00                       		moveq	#0,d5
000169A8 1A1A                       		move.b	(a2)+,d5
000169AA 5345                       		subq.w	#1,d5
000169AC 6B00                       		bmi.s	locret_13C96
000169AE 383C F000                  		move.w	#$F000,d4
000169B2 2C3C 0000 0000             		move.l	#Art_Sonic,d6
000169B8                            
000169B8                            SPLC_ReadEntry:
000169B8 7200                       		moveq	#0,d1
000169BA 121A                       		move.b	(a2)+,d1
000169BC E149                       		lsl.w	#8,d1
000169BE 121A                       		move.b	(a2)+,d1
000169C0 3601                       		move.w	d1,d3
000169C2 E04B                       		lsr.w	#8,d3
000169C4 0243 00F0                  		andi.w	#$F0,d3
000169C8 0643 0010                  		addi.w	#$10,d3
000169CC 0241 0FFF                  		andi.w	#$FFF,d1
000169D0 EB89                       		lsl.l	#5,d1
000169D2 D286                       		add.l	d6,d1
000169D4 3404                       		move.w	d4,d2
000169D6 D843                       		add.w	d3,d4
000169D8 D843                       		add.w	d3,d4
000169DA 4EB9 0000 142A             		jsr	(QueueDMATransfer).l
000169E0 51CD FFD6                  		dbf	d5,SPLC_ReadEntry	; repeat for number of entries
000169E4                            
000169E4                            locret_13C96:
000169E4 4E75                       		rts	
000169E6                            ; End of function Sonic_LoadGfx
000169E6                            ; End of function Sonic_LoadGfx
000169E6                            
000169E6                            		include	"_incObj\0A Drowning Countdown.asm"
000169E6                            ; ---------------------------------------------------------------------------
000169E6                            ; Object 0A - drowning countdown numbers and small bubbles that float out of
000169E6                            ; Sonic's mouth (LZ)
000169E6                            ; ---------------------------------------------------------------------------
000169E6                            
000169E6                            DrownCount:
000169E6 7000                       		moveq	#0,d0
000169E8 1028 0024                  		move.b	obRoutine(a0),d0
000169EC 323B 0000                  		move.w	Drown_Index(pc,d0.w),d1
000169F0 4EFB 1000                  		jmp	Drown_Index(pc,d1.w)
000169F4                            ; ===========================================================================
000169F4                            Drown_Index:
000169F4 0000                       ptr_Drown_Main:		dc.w Drown_Main-Drown_Index
000169F6 0000                       ptr_Drown_Animate:	dc.w Drown_Animate-Drown_Index
000169F8 0000                       ptr_Drown_ChkWater:	dc.w Drown_ChkWater-Drown_Index
000169FA 0000                       ptr_Drown_Display:	dc.w Drown_Display-Drown_Index
000169FC 0000                       ptr_Drown_Delete:	dc.w Drown_Delete-Drown_Index
000169FE 0000                       ptr_Drown_Countdown:	dc.w Drown_Countdown-Drown_Index
00016A00 0000                       ptr_Drown_AirLeft:	dc.w Drown_AirLeft-Drown_Index
00016A02 0000                       			dc.w Drown_Display-Drown_Index
00016A04 0000                       			dc.w Drown_Delete-Drown_Index
00016A06                            
00016A06 =00000030                  drown_origX:		equ $30		; original x-axis position
00016A06 =00000038                  drown_time:		equ $38		; time between each number changes
00016A06                            
00016A06 =00000000                  id_Drown_Main:		equ ptr_Drown_Main-Drown_Index		; 0
00016A06 =00000002                  id_Drown_Animate:	equ ptr_Drown_Animate-Drown_Index		; 2
00016A06 =00000004                  id_Drown_ChkWater:	equ ptr_Drown_ChkWater-Drown_Index	; 4
00016A06 =00000006                  id_Drown_Display:	equ ptr_Drown_Display-Drown_Index		; 6
00016A06 =00000008                  id_Drown_Delete:		equ ptr_Drown_Delete-Drown_Index		; 8
00016A06 =0000000A                  id_Drown_Countdown:	equ ptr_Drown_Countdown-Drown_Index	; $A
00016A06 =0000000C                  id_Drown_AirLeft:	equ ptr_Drown_AirLeft-Drown_Index		; $C
00016A06                            ; ===========================================================================
00016A06                            
00016A06                            Drown_Main:	; Routine 0
00016A06 5428 0024                  		addq.b	#2,obRoutine(a0)
00016A0A 217C 0001 4DC4 0004        		move.l	#Map_Bub,obMap(a0)
00016A12 317C 8348 0002             		move.w	#$8348,obGfx(a0)
00016A18 117C 0084 0001             		move.b	#$84,obRender(a0)
00016A1E 117C 0010 0014             		move.b	#$10,obActWid(a0)
00016A24 317C 0080 0018             		move.w	#$80,obPriority(a0)
00016A2A 1028 0028                  		move.b	obSubtype(a0),d0 ; get bubble type
00016A2E 6A00                       		bpl.s	@smallbubble	; branch if $00-$7F
00016A30                            
00016A30 5028 0024                  		addq.b	#8,obRoutine(a0) ; goto Drown_Countdown next
00016A34 217C 0000 0000 0004        		move.l	#Map_Drown,obMap(a0)
00016A3C 317C 0440 0002             		move.w	#$440,obGfx(a0)
00016A42 0240 007F                  		andi.w	#$7F,d0
00016A46 1140 0033                  		move.b	d0,$33(a0)
00016A4A 6000 0000                  		bra.w	Drown_Countdown
00016A4E                            ; ===========================================================================
00016A4E                            
00016A4E                            @smallbubble:
00016A4E 1140 001C                  		move.b	d0,obAnim(a0)
00016A52 3168 0008 0030             		move.w	obX(a0),drown_origX(a0)
00016A58 317C FF78 0012             		move.w	#-$88,obVelY(a0)
00016A5E                            
00016A5E                            Drown_Animate:	; Routine 2
00016A5E 43F9 0000 0000             		lea	(Ani_Drown).l,a1
00016A64 4EB9 0000 CA28             		jsr	(AnimateSprite).l
00016A6A                            
00016A6A                            Drown_ChkWater:	; Routine 4
00016A6A 3038 F646                  		move.w	(v_waterpos1).w,d0
00016A6E B068 000C                  		cmp.w	obY(a0),d0	; has bubble reached the water surface?
00016A72 6500                       		bcs.s	@wobble		; if not, branch
00016A74                            
00016A74 117C 0006 0024             		move.b	#id_Drown_Display,obRoutine(a0) ; goto Drown_Display next
00016A7A 5E28 001C                  		addq.b	#7,obAnim(a0)
00016A7E 0C28 000D 001C             		cmpi.b	#$D,obAnim(a0)
00016A84 6700                       		beq.s	Drown_Display
00016A86 6000                       		bra.s	Drown_Display
00016A88                            ; ===========================================================================
00016A88                            
00016A88                            @wobble:
00016A88 4A38 F7C7                  		tst.b	(f_wtunnelmode).w ; is Sonic in a water tunnel?
00016A8C 6700                       		beq.s	@notunnel	; if not, branch
00016A8E 5868 0030                  		addq.w	#4,drown_origX(a0)
00016A92                            
00016A92                            	@notunnel:
00016A92 1028 0026                  		move.b	obAngle(a0),d0
00016A96 5228 0026                  		addq.b	#1,obAngle(a0)
00016A9A 0240 007F                  		andi.w	#$7F,d0
00016A9E 43F9 0000 0000             		lea	(Drown_WobbleData).l,a1
00016AA4 1031 0000                  		move.b	(a1,d0.w),d0
00016AA8 4880                       		ext.w	d0
00016AAA D068 0030                  		add.w	drown_origX(a0),d0
00016AAE 3140 0008                  		move.w	d0,obX(a0)
00016AB2 6100                       		bsr.s	Drown_ShowNumber
00016AB4 4EB9 0000 F968             		jsr	(SpeedToPos).l
00016ABA 4A28 0001                  		tst.b	obRender(a0)
00016ABE 6A00                       		bpl.s	@delete
00016AC0 4EF9 0000 F97C             		jmp	(DisplaySprite).l
00016AC6                            
00016AC6                            	@delete:
00016AC6 4EF9 0000 F9BC             		jmp	(DeleteObject).l
00016ACC                            ; ===========================================================================
00016ACC                            
00016ACC                            Drown_Display:	; Routine 6, Routine $E
00016ACC 6100                       		bsr.s	Drown_ShowNumber
00016ACE 43F9 0000 0000             		lea	(Ani_Drown).l,a1
00016AD4 4EB9 0000 CA28             		jsr	(AnimateSprite).l
00016ADA 4EF9 0000 F97C             		jmp	(DisplaySprite).l
00016AE0                            ; ===========================================================================
00016AE0                            
00016AE0                            Drown_Delete:	; Routine 8, Routine $10
00016AE0 4EF9 0000 F9BC             		jmp	(DeleteObject).l
00016AE6                            ; ===========================================================================
00016AE6                            
00016AE6                            Drown_AirLeft:	; Routine $C
00016AE6 0C78 000C FE14             		cmpi.w	#$C,(v_air).w	; check air remaining
00016AEC 6200                       		bhi.s	Drown_AirLeft_Delete		; if higher than $C, branch
00016AEE 5368 0038                  		subq.w	#1,drown_time(a0)
00016AF2 6600                       		bne.s	@display
00016AF4 117C 000E 0024             		move.b	#id_Drown_Display+8,obRoutine(a0) ; goto Drown_Display next
00016AFA 5E28 001C                  		addq.b	#7,obAnim(a0)
00016AFE 60CC                       		bra.s	Drown_Display
00016B00                            ; ===========================================================================
00016B00                            
00016B00                            	@display:
00016B00 43F9 0000 0000             		lea	(Ani_Drown).l,a1
00016B06 4EB9 0000 CA28             		jsr	(AnimateSprite).l
00016B0C 4A28 0001                  		tst.b	obRender(a0)
00016B10 6A00                       		bpl.s	Drown_AirLeft_Delete
00016B12 4EF9 0000 F97C             		jmp	(DisplaySprite).l
00016B18                            
00016B18                            Drown_AirLeft_Delete:	
00016B18 4EF9 0000 F9BC             		jmp	(DeleteObject).l
00016B1E                            ; ===========================================================================
00016B1E                            
00016B1E                            Drown_ShowNumber:
00016B1E 4A68 0038                  		tst.w	drown_time(a0)
00016B22 6700                       		beq.s	@nonumber
00016B24 5368 0038                  		subq.w	#1,drown_time(a0)	; decrement timer
00016B28 6600                       		bne.s	@nonumber	; if time remains, branch
00016B2A 0C28 0007 001C             		cmpi.b	#7,obAnim(a0)
00016B30 6400                       		bcc.s	@nonumber
00016B32                            
00016B32 317C 000F 0038             		move.w	#15,drown_time(a0)
00016B38 4268 0012                  		clr.w	obVelY(a0)
00016B3C 117C 0080 0001             		move.b	#$80,obRender(a0)
00016B42 3028 0008                  		move.w	obX(a0),d0
00016B46 9078 F700                  		sub.w	(v_screenposx).w,d0
00016B4A 0640 0080                  		addi.w	#$80,d0
00016B4E 3140 0008                  		move.w	d0,obX(a0)
00016B52 3028 000C                  		move.w	obY(a0),d0
00016B56 9078 F704                  		sub.w	(v_screenposy).w,d0
00016B5A 0640 0080                  		addi.w	#$80,d0
00016B5E 3140 000A                  		move.w	d0,obScreenY(a0)
00016B62 117C 000C 0024             		move.b	#id_Drown_AirLeft,obRoutine(a0) ; goto Drown_AirLeft next
00016B68                            
00016B68                            	@nonumber:
00016B68 4E75                       		rts	
00016B6A                            ; ===========================================================================
00016B6A                            Drown_WobbleData:
00016B6A 0000 0000 0000 0101 0101+  		dc.b 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2
00016B7A 0202 0303 0303 0303 0303+  		dc.b 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3
00016B8A 0303 0303 0303 0303 0303+  		dc.b 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2
00016B9A 0202 0202 0202 0101 0101+  		dc.b 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0
00016BAA 00FF FFFF FFFF FEFE FEFE+  		dc.b 0, -1, -1, -1, -1, -1, -2, -2, -2, -2, -2, -3, -3, -3, -3, -3
00016BBA FDFD FCFC FCFC FCFC FCFC+  		dc.b -3, -3, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4
00016BCA FCFC FCFC FCFC FCFC FCFC+  		dc.b -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -3
00016BDA FDFD FDFD FDFD FEFE FEFE+  		dc.b -3, -3, -3, -3, -3, -3, -2, -2, -2, -2, -2, -1, -1, -1, -1, -1
00016BEA 0000 0000 0000 0101 0101+  		dc.b 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2
00016BFA 0202 0303 0303 0303 0303+  		dc.b 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3
00016C0A 0303 0303 0303 0303 0303+  		dc.b 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2
00016C1A 0202 0202 0202 0101 0101+  		dc.b 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0
00016C2A 00FF FFFF FFFF FEFE FEFE+  		dc.b 0, -1, -1, -1, -1, -1, -2, -2, -2, -2, -2, -3, -3, -3, -3, -3
00016C3A FDFD FCFC FCFC FCFC FCFC+  		dc.b -3, -3, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4
00016C4A FCFC FCFC FCFC FCFC FCFC+  		dc.b -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -3
00016C5A FDFD FDFD FDFD FEFE FEFE+  		dc.b -3, -3, -3, -3, -3, -3, -2, -2, -2, -2, -2, -1, -1, -1, -1, -1
00016C6A                            ; ===========================================================================
00016C6A                            
00016C6A                            Drown_Countdown:; Routine $A
00016C6A 4A68 002C                  		tst.w	$2C(a0)
00016C6E 6600 0000                  		bne.w	@loc_13F86
00016C72 0C38 0006 D024             		cmpi.b	#6,(v_player+obRoutine).w
00016C78 6400 0000                  		bcc.w	@nocountdown
00016C7C 0838 0006 D022             		btst	#6,(v_player+obStatus).w ; is Sonic underwater?
00016C82 6700 0000                  		beq.w	@nocountdown	; if not, branch
00016C86                            
00016C86 5368 0038                  		subq.w	#1,drown_time(a0)	; decrement timer
00016C8A 6A00 0000                  		bpl.w	@nochange	; branch if time remains
00016C8E 317C 003B 0038             		move.w	#59,drown_time(a0)
00016C94 317C 0001 0036             		move.w	#1,$36(a0)
00016C9A 4EB9 0000 3A10             		jsr	(RandomNumber).l
00016CA0 0240 0001                  		andi.w	#1,d0
00016CA4 1140 0034                  		move.b	d0,$34(a0)
00016CA8 3038 FE14                  		move.w	(v_air).w,d0	; check air remaining
00016CAC 0C40 0019                  		cmpi.w	#25,d0
00016CB0 6700                       		beq.s	@warnsound	; play sound if	air is 25
00016CB2 0C40 0014                  		cmpi.w	#20,d0
00016CB6 6700                       		beq.s	@warnsound
00016CB8 0C40 000F                  		cmpi.w	#15,d0
00016CBC 6700                       		beq.s	@warnsound
00016CBE 0C40 000C                  		cmpi.w	#12,d0
00016CC2 6200                       		bhi.s	@reduceair	; if air is above 12, branch
00016CC4                            
00016CC4                            	@skipmusic:
00016CCE 5328 0032                  		subq.b	#1,$32(a0)
00016CD2 6A00                       		bpl.s	@reduceair
00016CD4 1168 0033 0032             		move.b	$33(a0),$32(a0)
00016CDA 08E8 0007 0036             		bset	#7,$36(a0)
00016CE0 6000                       		bra.s	@reduceair
00016CE2                            ; ===========================================================================
00016CE2                            
00016CE2                            @warnsound:
00016CEC                            
00016CEC                            @reduceair:
00016CEC 5378 FE14                  		subq.w	#1,(v_air).w	; subtract 1 from air remaining
00016CF0 6400 0000                  		bcc.w	@gotomakenum	; if air is above 0, branch
00016CF4                            
00016CF4                            		; Sonic drowns here
00016CF4 6100 0000                  		bsr.w	ResumeMusic
00016CF8 11FC 0081 F7C8             		move.b	#$81,(f_lockmulti).w ; lock controls
00016D08 117C 000A 0034             		move.b	#$A,$34(a0)
00016D0E 317C 0001 0036             		move.w	#1,$36(a0)
00016D14 317C 0078 002C             		move.w	#$78,$2C(a0)
00016D1A 2F08                       		move.l	a0,-(sp)
00016D1C 41F8 D000                  		lea	(v_player).w,a0
00016D20 6100 F6B6                  		bsr.w	Sonic_ResetOnFloor
00016D24 117C 0017 001C             		move.b	#id_Drown,obAnim(a0)	; use Sonic's drowning animation
00016D2A 08E8 0001 0022             		bset	#1,obStatus(a0)
00016D30 08E8 0007 0002             		bset	#7,obGfx(a0)
00016D36 317C 0000 0012             		move.w	#0,obVelY(a0)
00016D3C 317C 0000 0010             		move.w	#0,obVelX(a0)
00016D42 317C 0000 0020             		move.w	#0,obInertia(a0)
00016D48 11FC 0001 F744             		move.b	#1,(f_nobgscroll).w
00016D4E 205F                       		movea.l	(sp)+,a0
00016D50 4E75                       		rts	
00016D52                            ; ===========================================================================
00016D52                            
00016D52                            @loc_13F86:
00016D52 5368 002C                  		subq.w	#1,$2C(a0)
00016D56 6600                       		bne.s	@loc_13F94
00016D58 11FC 0006 D024             		move.b	#6,(v_player+obRoutine).w
00016D5E 4E75                       		rts	
00016D60                            ; ===========================================================================
00016D60                            
00016D60                            	@loc_13F94:
00016D60 2F08                       		move.l	a0,-(sp)
00016D62 41F8 D000                  		lea	(v_player).w,a0
00016D66 4EB9 0000 F968             		jsr	(SpeedToPos).l
00016D6C 0668 0010 0012             		addi.w	#$10,obVelY(a0)
00016D72 205F                       		movea.l	(sp)+,a0
00016D74 6000                       		bra.s	@nochange
00016D76                            ; ===========================================================================
00016D76                            
00016D76                            @gotomakenum:
00016D76 6000                       		bra.s	@makenum
00016D78                            ; ===========================================================================
00016D78                            
00016D78                            @nochange:
00016D78 4A68 0036                  		tst.w	$36(a0)
00016D7C 6700 0000                  		beq.w	@nocountdown
00016D80 5368 003A                  		subq.w	#1,$3A(a0)
00016D84 6A00 0000                  		bpl.w	@nocountdown
00016D88                            
00016D88                            @makenum:
00016D88 4EB9 0000 3A10             		jsr	(RandomNumber).l
00016D8E 0240 000F                  		andi.w	#$F,d0
00016D92 3140 003A                  		move.w	d0,$3A(a0)
00016D96 4EB9 0000 FE08             		jsr	(FindFreeObj).l
00016D9C 6600 0000                  		bne.w	@nocountdown
00016DA0 12BC 000A                  		move.b	#id_DrownCount,0(a1) ; load object
00016DA4 3378 D008 0008             		move.w	(v_player+obX).w,obX(a1) ; match X position to Sonic
00016DAA 7006                       		moveq	#6,d0
00016DAC 0838 0000 D022             		btst	#0,(v_player+obStatus).w
00016DB2 6700                       		beq.s	@noflip
00016DB4 4440                       		neg.w	d0
00016DB6 137C 0040 0026             		move.b	#$40,obAngle(a1)
00016DBC                            
00016DBC                            	@noflip:
00016DBC D169 0008                  		add.w	d0,obX(a1)
00016DC0 3378 D00C 000C             		move.w	(v_player+obY).w,obY(a1)
00016DC6 137C 0006 0028             		move.b	#6,obSubtype(a1)
00016DCC 4A68 002C                  		tst.w	$2C(a0)
00016DD0 6700 0000                  		beq.w	@loc_1403E
00016DD4 0268 0007 003A             		andi.w	#7,$3A(a0)
00016DDA 0668 0000 003A             		addi.w	#0,$3A(a0)
00016DE0 3038 D00C                  		move.w	(v_player+obY).w,d0
00016DE4 0440 000C                  		subi.w	#$C,d0
00016DE8 3340 000C                  		move.w	d0,obY(a1)
00016DEC 4EB9 0000 3A10             		jsr	(RandomNumber).l
00016DF2 1340 0026                  		move.b	d0,obAngle(a1)
00016DF6 3038 FE04                  		move.w	(v_framecount).w,d0
00016DFA 0200 0003                  		andi.b	#3,d0
00016DFE 6600                       		bne.s	@loc_14082
00016E00 137C 000E 0028             		move.b	#$E,obSubtype(a1)
00016E06 6000                       		bra.s	@loc_14082
00016E08                            ; ===========================================================================
00016E08                            
00016E08                            @loc_1403E:
00016E08 0828 0007 0036             		btst	#7,$36(a0)
00016E0E 6700                       		beq.s	@loc_14082
00016E10 3438 FE14                  		move.w	(v_air).w,d2
00016E14 E24A                       		lsr.w	#1,d2
00016E16 4EB9 0000 3A10             		jsr	(RandomNumber).l
00016E1C 0240 0003                  		andi.w	#3,d0
00016E20 6600                       		bne.s	@loc_1406A
00016E22 08E8 0006 0036             		bset	#6,$36(a0)
00016E28 6600                       		bne.s	@loc_14082
00016E2A 1342 0028                  		move.b	d2,obSubtype(a1)
00016E2E 337C 001C 0038             		move.w	#$1C,drown_time(a1)
00016E34                            
00016E34                            	@loc_1406A:
00016E34 4A28 0034                  		tst.b	$34(a0)
00016E38 6600                       		bne.s	@loc_14082
00016E3A 08E8 0006 0036             		bset	#6,$36(a0)
00016E40 6600                       		bne.s	@loc_14082
00016E42 1342 0028                  		move.b	d2,obSubtype(a1)
00016E46 337C 001C 0038             		move.w	#$1C,drown_time(a1)
00016E4C                            
00016E4C                            @loc_14082:
00016E4C 5328 0034                  		subq.b	#1,$34(a0)
00016E50 6A00                       		bpl.s	@nocountdown
00016E52 4268 0036                  		clr.w	$36(a0)
00016E56                            
00016E56                            @nocountdown:
00016E56 4E75                       		rts	
00016E56 4E75                       		rts	
00016E58                            
00016E58                            
00016E58                            ; ---------------------------------------------------------------------------
00016E58                            ; Subroutine to	play music for LZ/SBZ3 after a countdown
00016E58                            ; ---------------------------------------------------------------------------
00016E58                            
00016E58                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016E58                            
00016E58                            
00016E58                            ResumeMusic:
00016E58                            		;cmpi.w	#12,(v_air).w	; more than 12 seconds of air left?
00016E58                            		;bhi.s	@over12		; if yes, branch
00016E58                            		;move.b	(v_Saved_music),d0
00016E58                            		;tst.b	(v_invinc).w ; is Sonic invincible?
00016E58                            		;beq.s	@notinvinc ; if not, branch
00016E58                            		;move.w	#bgm_Invincible,d0
00016E58                            		;tst.b	(v_shoes).w ; is Sonic speed shoes?
00016E58                            		;beq.s	@notinvinc	; if not, branch
00016E58                            		;move.w	#bgm_Ending,d0
00016E58                            
00016E58                            	;@notinvinc:
00016E58                            		;tst.b	(f_lockscreen).w ; is Sonic at a boss?
00016E58                            		;beq.s	@playselected ; if not, branch
00016E58                            		;move.w	#bgm_Boss,d0
00016E58                            
00016E58                            	;@playselected:
00016E58                            		;jsr	(PlaySound).l
00016E58                            
00016E58                            	;@over12:
00016E58 31FC 001E FE14             		move.w	#30,(v_air).w	; reset air to 30 seconds
00016E5E 4238 D372                  		clr.b	(v_objspace+$340+$32).w
00016E62 4E75                       		rts	
00016E64                            
00016E64                            ;End of function ResumeMusic
00016E64                            
00016E64                            ; ===========================================================================
00016E64                            
00016E64                            		include	"_anim\Drowning Countdown.asm"
00016E64                            ; ---------------------------------------------------------------------------
00016E64                            ; Animation script - countdown numbers and bubbles (LZ)
00016E64                            ; ---------------------------------------------------------------------------
00016E64 0000                       Ani_Drown:	dc.w @zeroappear-Ani_Drown
00016E66 0000                       		dc.w @oneappear-Ani_Drown
00016E68 0000                       		dc.w @twoappear-Ani_Drown
00016E6A 0000                       		dc.w @threeappear-Ani_Drown
00016E6C 0000                       		dc.w @fourappear-Ani_Drown
00016E6E 0000                       		dc.w @fiveappear-Ani_Drown
00016E70 0000                       		dc.w @smallbubble-Ani_Drown
00016E72 0000                       		dc.w @zeroflash-Ani_Drown
00016E74 0000                       		dc.w @oneflash-Ani_Drown
00016E76 0000                       		dc.w @twoflash-Ani_Drown
00016E78 0000                       		dc.w @threeflash-Ani_Drown
00016E7A 0000                       		dc.w @fourflash-Ani_Drown
00016E7C 0000                       		dc.w @fiveflash-Ani_Drown
00016E7E 0000                       		dc.w @blank-Ani_Drown
00016E80 0000                       		dc.w @mediumbubble-Ani_Drown
00016E82 0500 0102 0304 090D FC     @zeroappear:	dc.b 5,	0, 1, 2, 3, 4, 9, $D, afRoutine
00016E8C 00                         		even
00016E8C 0500 0102 0304 0C12 FC     @oneappear:	dc.b 5,	0, 1, 2, 3, 4, $C, $12,	afRoutine
00016E96 00                         		even
00016E96 0500 0102 0304 0C11 FC     @twoappear:	dc.b 5,	0, 1, 2, 3, 4, $C, $11,	afRoutine
00016EA0 00                         		even
00016EA0 0500 0102 0304 0B10 FC     @threeappear:	dc.b 5,	0, 1, 2, 3, 4, $B, $10,	afRoutine
00016EAA 00                         		even
00016EAA 0500 0102 0304 090F FC     @fourappear:	dc.b 5,	0, 1, 2, 3, 4, 9, $F, afRoutine
00016EB4 00                         		even
00016EB4 0500 0102 0304 0A0E FC     @fiveappear:	dc.b 5,	0, 1, 2, 3, 4, $A, $E, afRoutine
00016EBE 00                         		even
00016EBE 0E00 0102 FC               @smallbubble:	dc.b $E, 0, 1, 2, afRoutine
00016EC4 00                         		even
00016EC4 0716 0D16 0D16 0DFC        @zeroflash:	dc.b 7,	$16, $D, $16, $D, $16, $D, afRoutine
00016ECC 0716 1216 1216 12FC        @oneflash:	dc.b 7,	$16, $12, $16, $12, $16, $12, afRoutine
00016ED4 0716 1116 1116 11FC        @twoflash:	dc.b 7,	$16, $11, $16, $11, $16, $11, afRoutine
00016EDC 0716 1016 1016 10FC        @threeflash:	dc.b 7,	$16, $10, $16, $10, $16, $10, afRoutine
00016EE4 0716 0F16 0F16 0FFC        @fourflash:	dc.b 7,	$16, $F, $16, $F, $16, $F, afRoutine
00016EEC 0716 0E16 0E16 0EFC        @fiveflash:	dc.b 7,	$16, $E, $16, $E, $16, $E, afRoutine
00016EF4 0EFC                       @blank:		dc.b $E, afRoutine
00016EF6 0E01 0203 04FC             @mediumbubble:	dc.b $E, 1, 2, 3, 4, afRoutine
00016EFC                            		even
00016EFC                            		even
00016EFC                            Map_Drown:	include	"_maps\Drowning Countdown.asm"
00016EFC                            ; ---------------------------------------------------------------------------
00016EFC                            ; Sprite mappings - drowning countdown numbers (LZ)
00016EFC                            ; ---------------------------------------------------------------------------
00016EFC                            Map_Drown_internal:
00016EFC 0000                       		dc.w @num-Map_Drown_internal
00016EFE 01                         @num:		dc.b 1
00016EFF E80E 0000 F2               		dc.b $E8, $E, 0, 0, $F2
00016F04                            		even
00016F04                            		even
00016F04                            
00016F04                            		include	"_incObj\4E Silver Shield.asm"
00016F04                            ; ---------------------------------------------------------------------------
00016F04                            ; Object 4E - Silver Shield
00016F04                            ; ---------------------------------------------------------------------------
00016F04                            
00016F04                            SpShieldItem:
00016F04 223C 0000 0000             		move.l #Unc_SpShield,d1 ; Call for Silver Shield Art
00016F0A 343C A820                  		move.w #$A820,d2 ; Load Art from this location (VRAM location*20)
00016F0E                            		; In this case, VRAM = $541*20
00016F0E 363C 0200                  		move.w #$200,d3
00016F12 4EB9 0000 142A             		jsr (QueueDMATransfer).l
00016F18                            ; ---------------------------------------------------------------------------
00016F18                            SpShieldObj_Main:
00016F18 7000                       		moveq #0,d0
00016F1A 1028 0024                  		move.b $24(a0),d0
00016F1E 323B 0000                  		move.w SpShield_Index(pc,d0.w),d1
00016F22 4EFB 1000                  		jmp SpShield_Index(pc,d1.w)
00016F26                            ; ===========================================================================
00016F26                            SpShield_Index:
00016F26 0000                       		dc.w SpShield_Init-SpShield_Index
00016F28 0000                       		dc.w SpShieldChecks-SpShield_Index
00016F2A                            ; ===========================================================================
00016F2A                            SpShield_Init:
00016F2A 5428 0024                  		addq.b #2,$24(a0)
00016F2E 217C 0000 0000 0004        		move.l #Map_Shield,$4(A0) ; Load Shield Map into place
00016F36 117C 0004 0001             		move.b #4,1(a0)
00016F3C 317C 0080 0018             		move.w #$80,$18(a0)
00016F42 117C 0018 0014             		move.b #$18,obActWid(a0)
00016F48 317C 0541 0002             		move.w #$541,2(a0) ; Set VRAM location
00016F4E 0838 0007 D002             		btst #7,($FFFFD002).w
00016F54 6700                       		beq.s SpShieldChecks
00016F56 08E8 0007 0002             		bset #7,2(a0)
00016F5C                            ; ---------------------------------------------------------------------------
00016F5C                            SpShieldChecks:
00016F5C 4A38 FE2D                  		tst.b ($FFFFFE2D).w ; Test if Sonic has a shield
00016F60 6600                       		bne.s SpSonicHasShield ; If so, branch to do nothing
00016F62 4A38 F5CA                  		tst.b (v_SpShield).w ; Test if Sonic got invisibility
00016F66 6700                       		beq.s Spjmp_DeleteObj38 ; If so, delete object temporarily
00016F68                            SpShieldProperties:
00016F68 3178 D008 0008             		move.w ($FFFFD008).w,8(a0) ; Load Main Character X-position
00016F6E 3178 D00C 000C             		move.w ($FFFFD00C).w,$C(a0) ; Load Main Character Y-position
00016F74 1178 D022 0022             		move.b ($FFFFD022).w,$22(a0) ; Something about Character status
00016F7A 43F9 0000 0000             		lea (Ani_Shield).l, a1 ; Load Animation Scripts into a1
00016F80 4EB9 0000 CA28             		jsr AnimateSprite
00016F86 4EFA 89F4                  		jmp DisplaySprite
00016F8A                            SpSonicHasShield:
00016F8A 4E75                       		rts
00016F8C                            Spjmp_DeleteObj38: ; loc_12648:
00016F8C 4EFA 8A2E                  		jmp DeleteObject
00016F8C 4EFA 8A2E                  		jmp DeleteObject
00016F90                            		include	"_incObj\04 Gold Shield.asm"
00016F90                            ; ---------------------------------------------------------------------------
00016F90                            ; Object 04 - Gold shield
00016F90                            ; ---------------------------------------------------------------------------
00016F90                            
00016F90                            GShieldItem:
00016F90 223C 0000 0000             		move.l #Unc_GShield,d1 ; Call for Gold Shield Art
00016F96 343C A820                  		move.w #$A820,d2 ; Load Art from this location (VRAM location*20)
00016F9A                            		; In this case, VRAM = $541*20
00016F9A 363C 0200                  		move.w #$200,d3
00016F9E 4EB9 0000 142A             		jsr (QueueDMATransfer).l
00016FA4                            ; ---------------------------------------------------------------------------
00016FA4                            GShieldObj_Main:
00016FA4 7000                       		moveq #0,d0
00016FA6 1028 0024                  		move.b $24(a0),d0
00016FAA 323B 0000                  		move.w GShield_Index(pc,d0.w),d1
00016FAE 4EFB 1000                  		jmp GShield_Index(pc,d1.w)
00016FB2                            ; ===========================================================================
00016FB2                            GShield_Index:
00016FB2 0000                       		dc.w GShield_Init-GShield_Index
00016FB4 0000                       		dc.w GShieldChecks-GShield_Index
00016FB6                            ; ===========================================================================
00016FB6                            GShield_Init:
00016FB6 5428 0024                  		addq.b #2,$24(a0)
00016FBA 217C 0000 0000 0004        		move.l #Map_Shield,$4(A0) ; Load Shield Map into place
00016FC2 117C 0004 0001             		move.b #4,1(a0)
00016FC8 317C 0080 0018             		move.w #$80,$18(a0)
00016FCE 117C 0018 0014             		move.b #$18,obActWid(a0)
00016FD4 317C 0541 0002             		move.w #$541,2(a0) ; Set VRAM location
00016FDA 0838 0007 D002             		btst #7,($FFFFD002).w
00016FE0 6700                       		beq.s GShieldChecks
00016FE2 08E8 0007 0002             		bset #7,2(a0)
00016FE8                            ; ---------------------------------------------------------------------------
00016FE8                            GShieldChecks:
00016FE8 4A38 FE2D                  		tst.b ($FFFFFE2D).w ; Test if Sonic has a shield
00016FEC 6600                       		bne.s GSonicHasShield ; If so, branch to do nothing
00016FEE 4A38 F5C9                  		tst.b (v_GShield).w ; Test if Sonic got invisibility
00016FF2 6700                       		beq.s Gjmp_DeleteObj38 ; If so, delete object temporarily
00016FF4                            GShieldProperties:
00016FF4 3178 D008 0008             		move.w ($FFFFD008).w,8(a0) ; Load Main Character X-position
00016FFA 3178 D00C 000C             		move.w ($FFFFD00C).w,$C(a0) ; Load Main Character Y-position
00017000 1178 D022 0022             		move.b ($FFFFD022).w,$22(a0) ; Something about Character status
00017006 43F9 0000 0000             		lea (Ani_Shield).l, a1 ; Load Animation Scripts into a1
0001700C 4EB9 0000 CA28             		jsr AnimateSprite
00017012 4EFA 8968                  		jmp DisplaySprite
00017016                            GSonicHasShield:
00017016 4E75                       		rts
00017018                            Gjmp_DeleteObj38: ; loc_12648:
00017018 4EFA 89A2                  		jmp DeleteObject
00017018 4EFA 89A2                  		jmp DeleteObject
0001701C                            		include	"_incObj\07 Red Shield.asm"
0001701C                            ; ---------------------------------------------------------------------------
0001701C                            ; Object 07 - red shield
0001701C                            ; ---------------------------------------------------------------------------
0001701C                            
0001701C                            RShieldItem:
0001701C 223C 0000 0000             		move.l #Unc_RedShield,d1 ; Call for Red Shield Art
00017022 343C A820                  		move.w #$A820,d2 ; Load Art from this location (VRAM location*20)
00017026                            		; In this case, VRAM = $541*20
00017026 363C 0200                  		move.w #$200,d3
0001702A 4EB9 0000 142A             		jsr (QueueDMATransfer).l
00017030                            ; ---------------------------------------------------------------------------
00017030                            RShieldObj_Main:
00017030 7000                       		moveq #0,d0
00017032 1028 0024                  		move.b $24(a0),d0
00017036 323B 0000                  		move.w RShield_Index(pc,d0.w),d1
0001703A 4EFB 1000                  		jmp RShield_Index(pc,d1.w)
0001703E                            ; ===========================================================================
0001703E                            RShield_Index:
0001703E 0000                       		dc.w RShield_Init-RShield_Index
00017040 0000                       		dc.w RShieldChecks-RShield_Index
00017042                            ; ===========================================================================
00017042                            RShield_Init:
00017042 5428 0024                  		addq.b #2,$24(a0)
00017046 217C 0000 0000 0004        		move.l #Map_Shield,$4(A0) ; Load Shield Map into place
0001704E 117C 0004 0001             		move.b #4,1(a0)
00017054 317C 0080 0018             		move.w #$80,$18(a0)
0001705A 117C 0018 0014             		move.b #$18,obActWid(a0)
00017060 317C 0541 0002             		move.w #$541,2(a0) ; Set VRAM location
00017066 0838 0007 D002             		btst #7,($FFFFD002).w
0001706C 6700                       		beq.s RShieldChecks
0001706E 08E8 0007 0002             		bset #7,2(a0)
00017074                            ; ---------------------------------------------------------------------------
00017074                            RShieldChecks:
00017074 4A38 FE2D                  		tst.b ($FFFFFE2D).w ; Test if Sonic has a shield
00017078 6600                       		bne.s RSonicHasShield ; If so, branch to do nothing
0001707A 4A38 F5C8                  		tst.b (v_rshield).w ; Test if Sonic got invisibility
0001707E 6700                       		beq.s Rjmp_DeleteObj38 ; If so, delete object temporarily
00017080                            RShieldProperties:
00017080 3178 D008 0008             		move.w ($FFFFD008).w,8(a0) ; Load Main Character X-position
00017086 3178 D00C 000C             		move.w ($FFFFD00C).w,$C(a0) ; Load Main Character Y-position
0001708C 1178 D022 0022             		move.b ($FFFFD022).w,$22(a0) ; Something about Character status
00017092 43F9 0000 0000             		lea (Ani_Shield).l, a1 ; Load Animation Scripts into a1
00017098 4EB9 0000 CA28             		jsr AnimateSprite
0001709E 4EFA 88DC                  		jmp DisplaySprite
000170A2                            RSonicHasShield:
000170A2 4E75                       		rts
000170A4                            Rjmp_DeleteObj38: ; loc_12648:
000170A4 4EFA 8916                  		jmp DeleteObject
000170A4 4EFA 8916                  		jmp DeleteObject
000170A8                            		include	"_incObj\38 Shield.asm"
000170A8                            ; ---------------------------------------------------------------------------
000170A8                            ; Object 38 - shield
000170A8                            ; ---------------------------------------------------------------------------
000170A8                            
000170A8                            ShieldItem:
000170A8 223C 0000 0000             		move.l #Unc_Shield,d1 ; Call for Regular Shield Art
000170AE 343C A820                  		move.w #$A820,d2 ; Load Art from this location (VRAM location*20)
000170B2                            		; In this case, VRAM = $541*20
000170B2 363C 0200                  		move.w #$200,d3
000170B6 4EB9 0000 142A             		jsr (QueueDMATransfer).l
000170BC                            ; ---------------------------------------------------------------------------
000170BC                            ShieldObj_Main:
000170BC 7000                       		moveq #0,d0
000170BE 1028 0024                  		move.b $24(a0),d0
000170C2 323B 0000                  		move.w Shield_Index(pc,d0.w),d1
000170C6 4EFB 1000                  		jmp Shield_Index(pc,d1.w)
000170CA                            ; ===========================================================================
000170CA                            Shield_Index:
000170CA 0000                       		dc.w Shield_Init-Shield_Index
000170CC 0000                       		dc.w ShieldChecks-Shield_Index
000170CE                            ; ===========================================================================
000170CE                            Shield_Init:
000170CE 5428 0024                  		addq.b #2,$24(a0)
000170D2 217C 0000 0000 0004        		move.l #Map_Shield,$4(A0) ; Load Shield Map into place
000170DA 117C 0004 0001             		move.b #4,1(a0)
000170E0 317C 0080 0018             		move.w #$80,$18(a0)
000170E6 117C 0018 0014             		move.b #$18,obActWid(a0)
000170EC 317C 0541 0002             		move.w #$541,2(a0) ; Set VRAM location
000170F2 0838 0007 D002             		btst #7,($FFFFD002).w
000170F8 6700                       		beq.s ShieldChecks
000170FA 08E8 0007 0002             		bset #7,2(a0)
00017100                            ; ---------------------------------------------------------------------------
00017100                            ShieldChecks:
00017100 4A38 FE2D                  		tst.b ($FFFFFE2D).w ; Test if Sonic has a shield
00017104 6600                       		bne.s SonicHasShield ; If so, branch to do nothing
00017106 4A38 FE2C                  		tst.b ($FFFFFE2C).w ; Test if Sonic got invisibility
0001710A 6700                       		beq.s jmp_DeleteObj38 ; If so, delete object temporarily
0001710C                            ShieldProperties:
0001710C 3178 D008 0008             		move.w ($FFFFD008).w,8(a0) ; Load Main Character X-position
00017112 3178 D00C 000C             		move.w ($FFFFD00C).w,$C(a0) ; Load Main Character Y-position
00017118 1178 D022 0022             		move.b ($FFFFD022).w,$22(a0) ; Something about Character status
0001711E 43F9 0000 0000             		lea (Ani_Shield).l, a1 ; Load Animation Scripts into a1
00017124 4EB9 0000 CA28             		jsr AnimateSprite
0001712A 4EFA 8850                  		jmp DisplaySprite
0001712E                            SonicHasShield:
0001712E 4E75                       		rts
00017130                            jmp_DeleteObj38: ; loc_12648:
00017130 4EFA 888A                  		jmp DeleteObject
00017130 4EFA 888A                  		jmp DeleteObject
00017134                            		include	"_incObj\19 Invincibility Stars.asm"		
00017134                            ; ---------------------------------------------------------------------------
00017134                            ; Object 19 - Invincibility Stars
00017134                            ; ---------------------------------------------------------------------------
00017134                            
00017134                            InvStarsObj:
00017134 223C 0000 0000             		move.l #Unc_Stars,d1
0001713A 343C A820                  		move.w #$A820,d2
0001713E 363C 0200                  		move.w #$200,d3
00017142 4EB9 0000 142A             		jsr (QueueDMATransfer).l
00017148                            Invincibility_Main:
00017148 7000                       		moveq #0,d0
0001714A 1028 0024                  		move.b $24(a0),d0
0001714E                            Invincibility_Init:
0001714E 5428 0024                  		addq.b #2,$24(a0)
00017152 217C 0000 0000 0004        		move.l #Map_Shield,4(a0) ; loads mapping
0001715A 117C 0004 0001             		move.b #4,1(a0)
00017160 317C 0080 0018             		move.w #$80,$18(a0)
00017166 117C 0010 0014             		move.b #$10,obActWid(a0)
0001716C 317C 0541 0002             		move.w #$541,2(a0) ; shield specific code
00017172                            ; ===========================================================================
00017172                            
00017172                            Obj19_Stars: ; XREF: Obj38_Index
00017172 4A38 FE2D                  		tst.b ($FFFFFE2D).w ; does Sonic have invincibility?
00017176 6700                       		beq.s Obj19_Delete2 ; if not, branch
00017178 3038 F7A8                  		move.w ($FFFFF7A8).w,d0
0001717C 1228 001C                  		move.b $1C(a0),d1
00017180 5301                       		subq.b #1,d1
00017182 6000                       		bra.s Obj19_StarTrail
00017184                            ; ===========================================================================
00017184 E909                       		lsl.b #4,d1
00017186 5801                       		addq.b #4,d1
00017188 9001                       		sub.b d1,d0
0001718A 1228 0030                  		move.b $30(a0),d1
0001718E 9001                       		sub.b d1,d0
00017190 5801                       		addq.b #4,d1
00017192 0201 000F                  		andi.b #$F,d1
00017196 1141 0030                  		move.b d1,$30(a0)
0001719A 6000                       		bra.s Obj19_StarTrail2a
0001719C                            ; ===========================================================================
0001719C                            
0001719C                            Obj19_StarTrail: ; XREF: Obj19_Stars
0001719C E709                       		lsl.b #3,d1
0001719E 1401                       		move.b d1,d2
000171A0 D201                       		add.b d1,d1
000171A2 D202                       		add.b d2,d1
000171A4 5801                       		addq.b #4,d1
000171A6 9001                       		sub.b d1,d0
000171A8 1228 0030                  		move.b $30(a0),d1
000171AC 9001                       		sub.b d1,d0
000171AE 5801                       		addq.b #4,d1
000171B0 0C01 0018                  		cmpi.b #$18,d1
000171B4 6500                       		bcs.s Obj19_StarTrail2
000171B6 7200                       		moveq #0,d1
000171B8                            
000171B8                            Obj19_StarTrail2:
000171B8 1141 0030                  		move.b d1,$30(a0)
000171BC                            
000171BC                            Obj19_StarTrail2a:
000171BC 43F8 CB00                  		lea ($FFFFCB00).w,a1
000171C0 43F1 0000                  		lea (a1,d0.w),a1
000171C4 3159 0008                  		move.w (a1)+,8(a0)
000171C8 3159 000C                  		move.w (a1)+,$C(a0)
000171CC 1178 D022 0022             		move.b ($FFFFD022).w,$22(a0)
000171D2 43F9 0000 0000             		lea (Ani_Shield).l,a1
000171D8 4EB9 0000 CA28             		jsr (AnimateSprite).l
000171DE 4EF9 0000 F97C             		jmp (DisplaySprite).l
000171E4                            ; ===========================================================================
000171E4                            
000171E4                            Obj19_Delete2: ; XREF: Obj19_Stars
000171E4 4EF9 0000 F9BC             		jmp (DeleteObject).l
000171E4 4EF9 0000 F9BC             		jmp (DeleteObject).l
000171EA                            		include	"_incObj\4A Special Stage Entry (Unused).asm"
000171EA                            ; ---------------------------------------------------------------------------
000171EA                            ; Object 4A - special stage entry from beta
000171EA                            ; ---------------------------------------------------------------------------
000171EA                            
000171EA                            VanishSonic:
000171EA 7000                       		moveq	#0,d0
000171EC 1028 0024                  		move.b	obRoutine(a0),d0
000171F0 323B 0000                  		move.w	Van_Index(pc,d0.w),d1
000171F4 4EFB 1000                  		jmp	Van_Index(pc,d1.w)
000171F8                            ; ===========================================================================
000171F8 0000                       Van_Index:	dc.w Van_Main-Van_Index
000171FA 0000                       		dc.w Van_RmvSonic-Van_Index
000171FC 0000                       		dc.w Van_LoadSonic-Van_Index
000171FE                            
000171FE =00000030                  van_time:	equ $30		; time for Sonic to disappear
000171FE                            ; ===========================================================================
000171FE                            
000171FE                            Van_Main:	; Routine 0
000171FE 4AB8 F680                  		tst.l	(v_plc_buffer).w ; are pattern load cues empty?
00017202 6700                       		beq.s	@isempty	; if yes, branch
00017204 4E75                       		rts	
00017206                            
00017206                            	@isempty:
00017206 5428 0024                  		addq.b	#2,obRoutine(a0)
0001720A 217C 0000 0000 0004        		move.l	#Map_Vanish,obMap(a0)
00017212 117C 0004 0001             		move.b	#4,obRender(a0)
00017218 317C 0080 0018             		move.w	#$80,obPriority(a0)
0001721E 117C 0038 0014             		move.b	#$38,obActWid(a0)
00017224 317C 0541 0002             		move.w	#$541,obGfx(a0)
0001722A 317C 0078 0030             		move.w	#120,van_time(a0) ; set time for Sonic's disappearance to 2 seconds
00017230                            
00017230                            Van_RmvSonic:	; Routine 2
00017230 3178 D008 0008             		move.w	(v_player+obX).w,obX(a0)
00017236 3178 D00C 000C             		move.w	(v_player+obY).w,obY(a0)
0001723C 1178 D022 0022             		move.b	(v_player+obStatus).w,obStatus(a0)
00017242 43F9 0000 0000             		lea	(Ani_Vanish).l,a1
00017248 4EB9 0000 CA28             		jsr	(AnimateSprite).l
0001724E 0C28 0002 001A             		cmpi.b	#2,obFrame(a0)
00017254 6600                       		bne.s	@display
00017256 4A38 D000                  		tst.b	(v_player).w
0001725A 6700                       		beq.s	@display
0001725C 11FC 0000 D000             		move.b	#0,(v_player).w	; remove Sonic
0001726C                            
0001726C                            	@display:
0001726C 4EF9 0000 F97C             		jmp	(DisplaySprite).l
00017272                            ; ===========================================================================
00017272                            
00017272                            Van_LoadSonic:	; Routine 4
00017272 5368 0030                  		subq.w	#1,van_time(a0)	; subtract 1 from time
00017276 6600                       		bne.s	@wait		; if time remains, branch
00017278 11FC 0001 D000             		move.b	#id_SonicPlayer,(v_player).w ; load Sonic object
0001727E 4EF9 0000 F9BC             		jmp	(DeleteObject).l
00017284                            
00017284                            	@wait:
00017284 4E75                       		rts	
00017284 4E75                       		rts	
00017286                            		include	"_incObj\08 Water Splash.asm"
00017286                            ; ---------------------------------------------------------------------------
00017286                            ; Object 08 - water splash (LZ)
00017286                            ; ---------------------------------------------------------------------------
00017286                            
00017286                            Splash:
00017286 7000                       		moveq	#0,d0
00017288 1028 0024                  		move.b	obRoutine(a0),d0
0001728C 323B 0000                  		move.w	Spla_Index(pc,d0.w),d1
00017290 4EFB 1000                  		jmp	Spla_Index(pc,d1.w)
00017294                            ; ===========================================================================
00017294 0000                       Spla_Index:	dc.w Spla_Main-Spla_Index
00017296 0000                       		dc.w Spla_Display-Spla_Index
00017298 0000                       		dc.w Spla_Delete-Spla_Index
0001729A                            ; ===========================================================================
0001729A                            
0001729A                            Spla_Main:    ; Routine 0
0001729A 5428 0024                          addq.b    #2,obRoutine(a0)
0001729E 217C 0000 0000 0004                move.l    #Map_Splash,obMap(a0)
000172A6 0028 0004 0001                     ori.b    #4,obRender(a0)
000172AC 117C 0001 0018                     move.b    #1,obPriority(a0)
000172B2 117C 0010 0014                     move.b    #$10,obActWid(a0)
000172B8 317C 4259 0002                     move.w    #$4259,obGfx(a0)
000172BE 3178 D008 0008                     move.w    (v_player+obX).w,obX(a0) ; copy x-position from Sonic
000172C4                            
000172C4                            Spla_Display:    ; Routine 2
000172C4                                    ;move.w    (v_waterpos1).w,obY(a0) ; copy y-position from water height
000172C4 3178 FF92 000C                     move.w    (v_watersplashpos).w,obY(a0) ;TIS copy y-position from player
000172CA 43F9 0000 0000                     lea    (Ani_Splash).l,a1
000172D0 4EB9 0000 CA28                     jsr    (AnimateSprite).l
000172D6 4EF9 0000 F97C                     jmp    (DisplaySprite).l
000172DC                            ; ===========================================================================
000172DC                            
000172DC                            Spla_Delete:	; Routine 4
000172DC 4EF9 0000 F9BC             		jmp	(DeleteObject).l	; delete when animation	is complete
000172DC 4EF9 0000 F9BC             		jmp	(DeleteObject).l	; delete when animation	is complete
000172E2                            		include	"_anim\Shield and Invincibility.asm"
000172E2                            ; ---------------------------------------------------------------------------
000172E2                            ; Animation script - shield and invincibility stars
000172E2                            ; ---------------------------------------------------------------------------
000172E2 0000                       Ani_Shield:	dc.w @shield-Ani_Shield
000172E4 0000                       		dc.w @stars1-Ani_Shield
000172E6 0000                       		dc.w @stars2-Ani_Shield
000172E8 0000                       		dc.w @stars3-Ani_Shield
000172EA 0000                       		dc.w @stars4-Ani_Shield
000172EC 0101 0002 0003 00FF        @shield:	dc.b 1,	1, 0, 2, 0, 3, 0, afEnd
000172F4 0504 0506 07FF             @stars1:	dc.b 5,	4, 5, 6, 7, afEnd
000172FA 0004 0400 0404 0005 0500+  @stars2:	dc.b 0,	4, 4, 0, 4, 4, 0, 5, 5,	0, 5, 5, 0, 6, 6, 0, 6
0001730B 0600 0707 0007 0700 FF     		dc.b 6,	0, 7, 7, 0, 7, 7, 0, afEnd
00017314 0004 0400 0400 0005 0500+  @stars3:	dc.b 0,	4, 4, 0, 4, 0, 0, 5, 5,	0, 5, 0, 0, 6, 6, 0, 6
00017325 0000 0707 0007 0000 FF     		dc.b 0,	0, 7, 7, 0, 7, 0, 0, afEnd
0001732E 0004 0000 0400 0005 0000+  @stars4:	dc.b 0,	4, 0, 0, 4, 0, 0, 5, 0,	0, 5, 0, 0, 6, 0, 0, 6
0001733F 0000 0700 0007 0000 FF     		dc.b 0,	0, 7, 0, 0, 7, 0, 0, afEnd
00017348                            		even
00017348                            		even
00017348                            Map_Shield:	include	"_maps\Shield and Invincibility.asm"
00017348                            ; --------------------------------------------------------------------------------
00017348                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
00017348                            ; --------------------------------------------------------------------------------
00017348                            
00017348                            SME_7M_8q:	
00017348 0000 0000                  		dc.w SME_7M_8q_10-SME_7M_8q, SME_7M_8q_11-SME_7M_8q	
0001734C 0000 0000                  		dc.w SME_7M_8q_26-SME_7M_8q, SME_7M_8q_3B-SME_7M_8q	
00017350 0000 0000                  		dc.w SME_7M_8q_50-SME_7M_8q, SME_7M_8q_65-SME_7M_8q	
00017354 0000 0000                  		dc.w SME_7M_8q_7A-SME_7M_8q, SME_7M_8q_8F-SME_7M_8q	
00017358 00                         SME_7M_8q_10:	dc.b 0	
00017359 04                         SME_7M_8q_11:	dc.b 4	
0001735A E80A 0000 E8               		dc.b $E8, $A, 0, 0, $E8	
0001735F E80A 0009 00               		dc.b $E8, $A, 0, 9, 0	
00017364 000A 1000 E8               		dc.b 0, $A, $10, 0, $E8	
00017369 000A 1009 00               		dc.b 0, $A, $10, 9, 0	
0001736E 04                         SME_7M_8q_26:	dc.b 4	
0001736F E80A 0812 E9               		dc.b $E8, $A, 8, $12, $E9	
00017374 E80A 0012 00               		dc.b $E8, $A, 0, $12, 0	
00017379 000A 1812 E9               		dc.b 0, $A, $18, $12, $E9	
0001737E 000A 1012 00               		dc.b 0, $A, $10, $12, 0	
00017383 04                         SME_7M_8q_3B:	dc.b 4	
00017384 E80A 0809 E8               		dc.b $E8, $A, 8, 9, $E8	
00017389 E80A 0800 00               		dc.b $E8, $A, 8, 0, 0	
0001738E 000A 1809 E8               		dc.b 0, $A, $18, 9, $E8	
00017393 000A 1800 00               		dc.b 0, $A, $18, 0, 0	
00017398 04                         SME_7M_8q_50:	dc.b 4	
00017399 E80A 0000 E8               		dc.b $E8, $A, 0, 0, $E8	
0001739E E80A 0009 00               		dc.b $E8, $A, 0, 9, 0	
000173A3 000A 1809 E8               		dc.b 0, $A, $18, 9, $E8	
000173A8 000A 1800 00               		dc.b 0, $A, $18, 0, 0	
000173AD 04                         SME_7M_8q_65:	dc.b 4	
000173AE E80A 0809 E8               		dc.b $E8, $A, 8, 9, $E8	
000173B3 E80A 0800 00               		dc.b $E8, $A, 8, 0, 0	
000173B8 000A 1000 E8               		dc.b 0, $A, $10, 0, $E8	
000173BD 000A 1009 00               		dc.b 0, $A, $10, 9, 0	
000173C2 04                         SME_7M_8q_7A:	dc.b 4	
000173C3 E80A 0012 E8               		dc.b $E8, $A, 0, $12, $E8	
000173C8 E80A 001B 00               		dc.b $E8, $A, 0, $1B, 0	
000173CD 000A 181B E8               		dc.b 0, $A, $18, $1B, $E8	
000173D2 000A 1812 00               		dc.b 0, $A, $18, $12, 0	
000173D7 04                         SME_7M_8q_8F:	dc.b 4	
000173D8 E80A 081B E8               		dc.b $E8, $A, 8, $1B, $E8	
000173DD E80A 0812 00               		dc.b $E8, $A, 8, $12, 0	
000173E2 000A 1012 E8               		dc.b 0, $A, $10, $12, $E8	
000173E7 000A 101B 00               		dc.b 0, $A, $10, $1B, 0	
000173EC                            		even
000173EC                            		even
000173EC                            Map_Shield2:	include	"_maps\Shield 2.asm"
000173EC                            ; --------------------------------------------------------------------------------
000173EC                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
000173EC                            ; --------------------------------------------------------------------------------
000173EC                            
000173EC                            SME_X5P7B:	
000173EC 0000 0000                  		dc.w SME_X5P7B_10-SME_X5P7B, SME_X5P7B_11-SME_X5P7B	
000173F0 0000 0000                  		dc.w SME_X5P7B_26-SME_X5P7B, SME_X5P7B_3B-SME_X5P7B	
000173F4 0000 0000                  		dc.w SME_X5P7B_50-SME_X5P7B, SME_X5P7B_65-SME_X5P7B	
000173F8 0000 0000                  		dc.w SME_X5P7B_7A-SME_X5P7B, SME_X5P7B_8F-SME_X5P7B	
000173FC 00                         SME_X5P7B_10:	dc.b 0	
000173FD 04                         SME_X5P7B_11:	dc.b 4	
000173FE E80A 2000 E8               		dc.b $E8, $A, $20, 0, $E8	
00017403 E80A 2009 00               		dc.b $E8, $A, $20, 9, 0	
00017408 000A 3000 E8               		dc.b 0, $A, $30, 0, $E8	
0001740D 000A 3009 00               		dc.b 0, $A, $30, 9, 0	
00017412 04                         SME_X5P7B_26:	dc.b 4	
00017413 E80A 2812 E9               		dc.b $E8, $A, $28, $12, $E9	
00017418 E80A 2012 00               		dc.b $E8, $A, $20, $12, 0	
0001741D 000A 3812 E9               		dc.b 0, $A, $38, $12, $E9	
00017422 000A 3012 00               		dc.b 0, $A, $30, $12, 0	
00017427 04                         SME_X5P7B_3B:	dc.b 4	
00017428 E80A 2809 E8               		dc.b $E8, $A, $28, 9, $E8	
0001742D E80A 2800 00               		dc.b $E8, $A, $28, 0, 0	
00017432 000A 3809 E8               		dc.b 0, $A, $38, 9, $E8	
00017437 000A 3800 00               		dc.b 0, $A, $38, 0, 0	
0001743C 04                         SME_X5P7B_50:	dc.b 4	
0001743D E80A 2000 E8               		dc.b $E8, $A, $20, 0, $E8	
00017442 E80A 2009 00               		dc.b $E8, $A, $20, 9, 0	
00017447 000A 3809 E8               		dc.b 0, $A, $38, 9, $E8	
0001744C 000A 3800 00               		dc.b 0, $A, $38, 0, 0	
00017451 04                         SME_X5P7B_65:	dc.b 4	
00017452 E80A 2809 E8               		dc.b $E8, $A, $28, 9, $E8	
00017457 E80A 2800 00               		dc.b $E8, $A, $28, 0, 0	
0001745C 000A 3000 E8               		dc.b 0, $A, $30, 0, $E8	
00017461 000A 3009 00               		dc.b 0, $A, $30, 9, 0	
00017466 04                         SME_X5P7B_7A:	dc.b 4	
00017467 E80A 2012 E8               		dc.b $E8, $A, $20, $12, $E8	
0001746C E80A 201B 00               		dc.b $E8, $A, $20, $1B, 0	
00017471 000A 381B E8               		dc.b 0, $A, $38, $1B, $E8	
00017476 000A 3812 00               		dc.b 0, $A, $38, $12, 0	
0001747B 04                         SME_X5P7B_8F:	dc.b 4	
0001747C E80A 281B E8               		dc.b $E8, $A, $28, $1B, $E8	
00017481 E80A 2812 00               		dc.b $E8, $A, $28, $12, 0	
00017486 000A 3012 E8               		dc.b 0, $A, $30, $12, $E8	
0001748B 000A 301B 00               		dc.b 0, $A, $30, $1B, 0	
00017490                            		even
00017490                            		even
00017490                            
00017490                            Map_Shield3:	include	"_maps\Shield 3.asm"
00017490                            ; --------------------------------------------------------------------------------
00017490                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
00017490                            ; --------------------------------------------------------------------------------
00017490                            
00017490                            SME__wWzO:	
00017490 0000 0000                  		dc.w SME__wWzO_10-SME__wWzO, SME__wWzO_11-SME__wWzO	
00017494 0000 0000                  		dc.w SME__wWzO_26-SME__wWzO, SME__wWzO_3B-SME__wWzO	
00017498 0000 0000                  		dc.w SME__wWzO_50-SME__wWzO, SME__wWzO_65-SME__wWzO	
0001749C 0000 0000                  		dc.w SME__wWzO_7A-SME__wWzO, SME__wWzO_8F-SME__wWzO	
000174A0 00                         SME__wWzO_10:	dc.b 0	
000174A1 04                         SME__wWzO_11:	dc.b 4	
000174A2 E80A 2000 E8               		dc.b $E8, $A, $20, 0, $E8	
000174A7 E80A 2009 00               		dc.b $E8, $A, $20, 9, 0	
000174AC 000A 3000 E8               		dc.b 0, $A, $30, 0, $E8	
000174B1 000A 3009 00               		dc.b 0, $A, $30, 9, 0	
000174B6 04                         SME__wWzO_26:	dc.b 4	
000174B7 E80A 2812 E9               		dc.b $E8, $A, $28, $12, $E9	
000174BC E80A 2012 00               		dc.b $E8, $A, $20, $12, 0	
000174C1 000A 3812 E9               		dc.b 0, $A, $38, $12, $E9	
000174C6 000A 3012 00               		dc.b 0, $A, $30, $12, 0	
000174CB 04                         SME__wWzO_3B:	dc.b 4	
000174CC E80A 2809 E8               		dc.b $E8, $A, $28, 9, $E8	
000174D1 E80A 2800 00               		dc.b $E8, $A, $28, 0, 0	
000174D6 000A 3809 E8               		dc.b 0, $A, $38, 9, $E8	
000174DB 000A 3800 00               		dc.b 0, $A, $38, 0, 0	
000174E0 04                         SME__wWzO_50:	dc.b 4	
000174E1 E80A 2000 E8               		dc.b $E8, $A, $20, 0, $E8	
000174E6 E80A 2009 00               		dc.b $E8, $A, $20, 9, 0	
000174EB 000A 3809 E8               		dc.b 0, $A, $38, 9, $E8	
000174F0 000A 3800 00               		dc.b 0, $A, $38, 0, 0	
000174F5 04                         SME__wWzO_65:	dc.b 4	
000174F6 E80A 2809 E8               		dc.b $E8, $A, $28, 9, $E8	
000174FB E80A 2800 00               		dc.b $E8, $A, $28, 0, 0	
00017500 000A 3000 E8               		dc.b 0, $A, $30, 0, $E8	
00017505 000A 3009 00               		dc.b 0, $A, $30, 9, 0	
0001750A 04                         SME__wWzO_7A:	dc.b 4	
0001750B E80A 2012 E8               		dc.b $E8, $A, $20, $12, $E8	
00017510 E80A 201B 00               		dc.b $E8, $A, $20, $1B, 0	
00017515 000A 381B E8               		dc.b 0, $A, $38, $1B, $E8	
0001751A 000A 3812 00               		dc.b 0, $A, $38, $12, 0	
0001751F 04                         SME__wWzO_8F:	dc.b 4	
00017520 E80A 281B E8               		dc.b $E8, $A, $28, $1B, $E8	
00017525 E80A 2812 00               		dc.b $E8, $A, $28, $12, 0	
0001752A 000A 3012 E8               		dc.b 0, $A, $30, $12, $E8	
0001752F 000A 301B 00               		dc.b 0, $A, $30, $1B, 0	
00017534                            		even
00017534                            		even
00017534                            		include	"_anim\Special Stage Entry (Unused).asm"
00017534                            ; ---------------------------------------------------------------------------
00017534                            ; Animation script - special stage entry effect from beta
00017534                            ; ---------------------------------------------------------------------------
00017534 0000                       Ani_Vanish:	dc.w @vanish-Ani_Vanish
00017536 0500 0100 0100 0701 0702+  @vanish:	dc.b 5,	0, 1, 0, 1, 0, 7, 1, 7,	2, 7, 3, 7, 4, 7, 5, 7, 6, 7, afRoutine
0001754A                            		even
0001754A                            		even
0001754A                            Map_Vanish:	include	"_maps\Special Stage Entry (Unused).asm"
0001754A                            ; ---------------------------------------------------------------------------
0001754A                            ; Sprite mappings - special stage entry	from beta
0001754A                            ; ---------------------------------------------------------------------------
0001754A                            Map_Vanish_internal:
0001754A 0000                       		dc.w @flash1-Map_Vanish_internal
0001754C 0000                       		dc.w @flash2-Map_Vanish_internal
0001754E 0000                       		dc.w @flash3-Map_Vanish_internal
00017550 0000                       		dc.w @sparkle1-Map_Vanish_internal
00017552 0000                       		dc.w @sparkle2-Map_Vanish_internal
00017554 0000                       		dc.w @sparkle3-Map_Vanish_internal
00017556 0000                       		dc.w @sparkle4-Map_Vanish_internal
00017558 0000                       		dc.w @blank-Map_Vanish_internal
0001755A 03                         @flash1:	dc.b 3
0001755B F800 0000 08               		dc.b $F8, 0, 0,	0, 8
00017560 0004 0001 00               		dc.b 0,	4, 0, 1, 0
00017565 0800 1000 08               		dc.b 8,	0, $10,	0, 8
0001756A 03                         @flash2:	dc.b 3
0001756B F00D 0003 F0               		dc.b $F0, $D, 0, 3, $F0
00017570 000C 000B F0               		dc.b 0,	$C, 0, $B, $F0
00017575 080D 1003 F0               		dc.b 8,	$D, $10, 3, $F0
0001757A 05                         @flash3:	dc.b 5
0001757B E40E 000F F4               		dc.b $E4, $E, 0, $F, $F4
00017580 EC02 001B EC               		dc.b $EC, 2, 0,	$1B, $EC
00017585 FC0C 001E F4               		dc.b $FC, $C, 0, $1E, $F4
0001758A 040E 100F F4               		dc.b 4,	$E, $10, $F, $F4
0001758F 0401 101B EC               		dc.b 4,	1, $10,	$1B, $EC
00017594 09                         @sparkle1:	dc.b 9
00017595 F008 0022 F8               		dc.b $F0, 8, 0,	$22, $F8
0001759A F80E 0025 F0               		dc.b $F8, $E, 0, $25, $F0
0001759F 1008 0031 F0               		dc.b $10, 8, 0,	$31, $F0
000175A4 0005 0034 10               		dc.b 0,	5, 0, $34, $10
000175A9 F800 0825 10               		dc.b $F8, 0, 8,	$25, $10
000175AE F000 1836 18               		dc.b $F0, 0, $18, $36, $18
000175B3 F800 1825 20               		dc.b $F8, 0, $18, $25, $20
000175B8 0000 0825 28               		dc.b 0,	0, 8, $25, $28
000175BD F800 0025 30               		dc.b $F8, 0, 0,	$25, $30
000175C2 12                         @sparkle2:	dc.b $12
000175C3 0000 1825 F0               		dc.b 0,	0, $18,	$25, $F0
000175C8 F804 0038 F8               		dc.b $F8, 4, 0,	$38, $F8
000175CD F000 0026 08               		dc.b $F0, 0, 0,	$26, 8
000175D2 0000 0025 00               		dc.b 0,	0, 0, $25, 0
000175D7 0800 1825 F8               		dc.b 8,	0, $18,	$25, $F8
000175DC 1000 1026 00               		dc.b $10, 0, $10, $26, 0
000175E1 0800 1038 08               		dc.b 8,	0, $10,	$38, 8
000175E6 F800 0029 10               		dc.b $F8, 0, 0,	$29, $10
000175EB 0000 0026 10               		dc.b 0,	0, 0, $26, $10
000175F0 0000 002D 18               		dc.b 0,	0, 0, $2D, $18
000175F5 0800 0826 18               		dc.b 8,	0, 8, $26, $18
000175FA 0800 0029 20               		dc.b 8,	0, 0, $29, $20
000175FF F800 0026 20               		dc.b $F8, 0, 0,	$26, $20
00017604 F800 002D 28               		dc.b $F8, 0, 0,	$2D, $28
00017609 0000 003A 28               		dc.b 0,	0, 0, $3A, $28
0001760E F800 1826 30               		dc.b $F8, 0, $18, $26, $30
00017613 0000 1025 38               		dc.b 0,	0, $10,	$25, $38
00017618 F800 1025 40               		dc.b $F8, 0, $10, $25, $40
0001761D 11                         @sparkle3:	dc.b $11
0001761E F800 0825 00               		dc.b $F8, 0, 8,	$25, 0
00017623 F000 0038 10               		dc.b $F0, 0, 0,	$38, $10
00017628 1000 0825 00               		dc.b $10, 0, 8,	$25, 0
0001762D 0000 1825 10               		dc.b 0,	0, $18,	$25, $10
00017632 0800 1025 18               		dc.b 8,	0, $10,	$25, $18
00017637 F800 1825 20               		dc.b $F8, 0, $18, $25, $20
0001763C 0000 1026 28               		dc.b 0,	0, $10,	$26, $28
00017641 F800 1025 30               		dc.b $F8, 0, $10, $25, $30
00017646 0000 0025 30               		dc.b 0,	0, 0, $25, $30
0001764B 0800 0825 30               		dc.b 8,	0, 8, $25, $30
00017650 0000 0826 38               		dc.b 0,	0, 8, $26, $38
00017655 0800 0029 38               		dc.b 8,	0, 0, $29, $38
0001765A F800 0826 40               		dc.b $F8, 0, 8,	$26, $40
0001765F 0000 002D 40               		dc.b 0,	0, 0, $2D, $40
00017664 F800 0825 48               		dc.b $F8, 0, 8,	$25, $48
00017669 0000 0025 48               		dc.b 0,	0, 0, $25, $48
0001766E 0000 1025 50               		dc.b 0,	0, $10,	$25, $50
00017673 09                         @sparkle4:	dc.b 9
00017674 FC00 0826 30               		dc.b $FC, 0, 8,	$26, $30
00017679 0400 0825 28               		dc.b 4,	0, 8, $25, $28
0001767E 0400 1027 38               		dc.b 4,	0, $10,	$27, $38
00017683 0400 0826 40               		dc.b 4,	0, 8, $26, $40
00017688 FC00 1025 40               		dc.b $FC, 0, $10, $25, $40
0001768D FC00 1026 48               		dc.b $FC, 0, $10, $26, $48
00017692 0C00 0827 48               		dc.b $C, 0, 8, $27, $48
00017697 0400 1826 50               		dc.b 4,	0, $18,	$26, $50
0001769C 04                         		dc.b 4
0001769D 0008 2758 00               @blank:		dc.b 0,	8, $27,	$58, 0
000176A2                            		even
000176A2                            		even
000176A2                            		include	"_anim\Water Splash.asm"
000176A2                            ; ---------------------------------------------------------------------------
000176A2                            ; Animation script - water splash (LZ)
000176A2                            ; ---------------------------------------------------------------------------
000176A2 0000                       Ani_Splash:	dc.w @splash-Ani_Splash
000176A4 0400 0102 FC               @splash:	dc.b 4,	0, 1, 2, afRoutine
000176AA 00                         		even
000176AA 00                         		even
000176AA                            Map_Splash:	include	"_maps\Water Splash.asm"
000176AA                            ; ---------------------------------------------------------------------------
000176AA                            ; Sprite mappings - water splash (LZ)
000176AA                            ; ---------------------------------------------------------------------------
000176AA                            Map_Splash_internal:
000176AA 0000                       		dc.w @splash1-Map_Splash_internal
000176AC 0000                       		dc.w @splash2-Map_Splash_internal
000176AE 0000                       		dc.w @splash3-Map_Splash_internal
000176B0 02                         @splash1:	dc.b 2
000176B1 F204 006D F8               		dc.b $F2, 4, 0,	$6D, $F8
000176B6 FA0C 006F F0               		dc.b $FA, $C, 0, $6F, $F0
000176BB 02                         @splash2:	dc.b 2
000176BC E200 0073 F8               		dc.b $E2, 0, 0,	$73, $F8
000176C1 EA0E 0074 F0               		dc.b $EA, $E, 0, $74, $F0
000176C6 01                         @splash3:	dc.b 1
000176C7 E20F 0080 F0               		dc.b $E2, $F, 0, $80, $F0
000176CC                            		even
000176CC                            		even
000176CC                            
000176CC                            		include	"_incObj\Sonic AnglePos.asm"
000176CC                            ; ---------------------------------------------------------------------------
000176CC                            ; Subroutine to	change Sonic's angle & position as he walks along the floor
000176CC                            ; ---------------------------------------------------------------------------
000176CC                            
000176CC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000176CC                            
000176CC                            
000176CC                            Sonic_AnglePos:
000176CC 0828 0003 0022             		btst	#3,obStatus(a0)
000176D2 6700                       		beq.s	loc_14602
000176D4 7000                       		moveq	#0,d0
000176D6 11C0 F768                  		move.b	d0,($FFFFF768).w
000176DA 11C0 F76A                  		move.b	d0,($FFFFF76A).w
000176DE 4E75                       		rts	
000176E0                            ; ===========================================================================
000176E0                            
000176E0                            loc_14602:
000176E0 7003                       		moveq	#3,d0
000176E2 11C0 F768                  		move.b	d0,($FFFFF768).w
000176E6 11C0 F76A                  		move.b	d0,($FFFFF76A).w
000176EA 1028 0026                  		move.b	obAngle(a0),d0
000176EE 0600 0020                  		addi.b	#$20,d0
000176F2 6A00                       		bpl.s	loc_14624
000176F4 1028 0026                  		move.b	obAngle(a0),d0
000176F8 6A00                       		bpl.s	loc_1461E
000176FA 5300                       		subq.b	#1,d0
000176FC                            
000176FC                            loc_1461E:
000176FC 0600 0020                  		addi.b	#$20,d0
00017700 6000                       		bra.s	loc_14630
00017702                            ; ===========================================================================
00017702                            
00017702                            loc_14624:
00017702 1028 0026                  		move.b	obAngle(a0),d0
00017706 6A00                       		bpl.s	loc_1462C
00017708 5200                       		addq.b	#1,d0
0001770A                            
0001770A                            loc_1462C:
0001770A 0600 001F                  		addi.b	#$1F,d0
0001770E                            
0001770E                            loc_14630:
0001770E 0200 00C0                  		andi.b	#$C0,d0
00017712 0C00 0040                  		cmpi.b	#$40,d0
00017716 6700 0000                  		beq.w	Sonic_WalkVertL
0001771A 0C00 0080                  		cmpi.b	#$80,d0
0001771E 6700 0000                  		beq.w	Sonic_WalkCeiling
00017722 0C00 00C0                  		cmpi.b	#$C0,d0
00017726 6700 0000                  		beq.w	Sonic_WalkVertR
0001772A 3428 000C                  		move.w	obY(a0),d2
0001772E 3628 0008                  		move.w	obX(a0),d3
00017732 7000                       		moveq	#0,d0
00017734 1028 0016                  		move.b	obHeight(a0),d0
00017738 4880                       		ext.w	d0
0001773A D440                       		add.w	d0,d2
0001773C 1028 0017                  		move.b	obWidth(a0),d0
00017740 4880                       		ext.w	d0
00017742 D640                       		add.w	d0,d3
00017744 49F8 F768                  		lea	($FFFFF768).w,a4
00017748 367C 0010                  		movea.w	#$10,a3
0001774C 3C3C 0000                  		move.w	#0,d6
00017750 7A0D                       		moveq	#$D,d5
00017752 6100 0000                  		bsr.w	FindFloor
00017756 3F01                       		move.w	d1,-(sp)
00017758 3428 000C                  		move.w	obY(a0),d2
0001775C 3628 0008                  		move.w	obX(a0),d3
00017760 7000                       		moveq	#0,d0
00017762 1028 0016                  		move.b	obHeight(a0),d0
00017766 4880                       		ext.w	d0
00017768 D440                       		add.w	d0,d2
0001776A 1028 0017                  		move.b	obWidth(a0),d0
0001776E 4880                       		ext.w	d0
00017770 4440                       		neg.w	d0
00017772 D640                       		add.w	d0,d3
00017774 49F8 F76A                  		lea	($FFFFF76A).w,a4
00017778 367C 0010                  		movea.w	#$10,a3
0001777C 3C3C 0000                  		move.w	#0,d6
00017780 7A0D                       		moveq	#$D,d5
00017782 6100 0000                  		bsr.w	FindFloor
00017786 301F                       		move.w	(sp)+,d0
00017788 6100 0000                  		bsr.w	Sonic_Angle
0001778C 4A41                       		tst.w	d1
0001778E 6700                       		beq.s	locret_146BE
00017790 6A00                       		bpl.s	loc_146C0
00017792 0C41 FFF2                  		cmpi.w	#-$E,d1
00017796 6D00                       		blt.s	locret_146E6
00017798 D368 000C                  		add.w	d1,obY(a0)
0001779C                            
0001779C                            locret_146BE:
0001779C 4E75                       		rts	
0001779E                            ; ===========================================================================
0001779E                            
0001779E                            loc_146C0:
0001779E 0C41 000E                  		cmpi.w	#$E,d1
000177A2 6E00                       		bgt.s	loc_146CC
000177A4                            
000177A4                            loc_146C6:
000177A4 D368 000C                  		add.w	d1,obY(a0)
000177A8 4E75                       		rts	
000177AA                            ; ===========================================================================
000177AA                            
000177AA                            loc_146CC:
000177AA 4A28 0038                  		tst.b	$38(a0)
000177AE 66F4                       		bne.s	loc_146C6
000177B0 08E8 0001 0022             		bset	#1,obStatus(a0)
000177B6 08A8 0005 0022             		bclr	#5,obStatus(a0)
000177BC 117C 0001 001D             		move.b	#1,obNextAni(a0)
000177C2 4E75                       		rts	
000177C4                            ; ===========================================================================
000177C4                            
000177C4                            locret_146E6:
000177C4 4E75                       		rts	
000177C6                            ; End of function Sonic_AnglePos
000177C6                            
000177C6                            ; ===========================================================================
000177C6 2428 0008                  		move.l	obX(a0),d2
000177CA 3028 0010                  		move.w	obVelX(a0),d0
000177CE 48C0                       		ext.l	d0
000177D0 E180                       		asl.l	#8,d0
000177D2 9480                       		sub.l	d0,d2
000177D4 2142 0008                  		move.l	d2,obX(a0)
000177D8 303C 0038                  		move.w	#$38,d0
000177DC 48C0                       		ext.l	d0
000177DE E180                       		asl.l	#8,d0
000177E0 9680                       		sub.l	d0,d3
000177E2 2143 000C                  		move.l	d3,obY(a0)
000177E6 4E75                       		rts	
000177E8                            ; ===========================================================================
000177E8                            
000177E8                            locret_1470A:
000177E8 4E75                       		rts	
000177EA                            ; ===========================================================================
000177EA 2628 000C                  		move.l	obY(a0),d3
000177EE 3028 0012                  		move.w	obVelY(a0),d0
000177F2 0440 0038                  		subi.w	#$38,d0
000177F6 3140 0012                  		move.w	d0,obVelY(a0)
000177FA 48C0                       		ext.l	d0
000177FC E180                       		asl.l	#8,d0
000177FE 9680                       		sub.l	d0,d3
00017800 2143 000C                  		move.l	d3,obY(a0)
00017804 4E75                       		rts	
00017806 4E75                       		rts	
00017808                            ; ===========================================================================
00017808 2428 0008                  		move.l	obX(a0),d2
0001780C 2628 000C                  		move.l	obY(a0),d3
00017810 3028 0010                  		move.w	obVelX(a0),d0
00017814 48C0                       		ext.l	d0
00017816 E180                       		asl.l	#8,d0
00017818 9480                       		sub.l	d0,d2
0001781A 3028 0012                  		move.w	obVelY(a0),d0
0001781E 48C0                       		ext.l	d0
00017820 E180                       		asl.l	#8,d0
00017822 9680                       		sub.l	d0,d3
00017824 2142 0008                  		move.l	d2,obX(a0)
00017828 2143 000C                  		move.l	d3,obY(a0)
0001782C 4E75                       		rts	
0001782E                            
0001782E                            ; ---------------------------------------------------------------------------
0001782E                            ; Subroutine to	change Sonic's angle as he walks along the floor
0001782E                            ; ---------------------------------------------------------------------------
0001782E                            
0001782E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001782E                            
0001782E                            
0001782E                            Sonic_Angle:
0001782E 1438 F76A                  		move.b	($FFFFF76A).w,d2
00017832 B240                       		cmp.w	d0,d1
00017834 6F00                       		ble.s	loc_1475E
00017836 1438 F768                  		move.b	($FFFFF768).w,d2
0001783A 3200                       		move.w	d0,d1
0001783C                            
0001783C                            loc_1475E:
0001783C 0802 0000                  		btst	#0,d2
00017840 6600                       		bne.s	loc_1476A
00017842 1142 0026                  		move.b	d2,obAngle(a0)
00017846 4E75                       		rts	
00017848                            ; ===========================================================================
00017848                            
00017848                            loc_1476A:
00017848 1428 0026                  		move.b	obAngle(a0),d2
0001784C 0602 0020                  		addi.b	#$20,d2
00017850 0202 00C0                  		andi.b	#$C0,d2
00017854 1142 0026                  		move.b	d2,obAngle(a0)
00017858 4E75                       		rts	
0001785A                            ; End of function Sonic_Angle
0001785A                            
0001785A                            ; ---------------------------------------------------------------------------
0001785A                            ; Subroutine allowing Sonic to walk up a vertical slope/wall to	his right
0001785A                            ; ---------------------------------------------------------------------------
0001785A                            
0001785A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001785A                            
0001785A                            
0001785A                            Sonic_WalkVertR:
0001785A 3428 000C                  		move.w	obY(a0),d2
0001785E 3628 0008                  		move.w	obX(a0),d3
00017862 7000                       		moveq	#0,d0
00017864 1028 0017                  		move.b	obWidth(a0),d0
00017868 4880                       		ext.w	d0
0001786A 4440                       		neg.w	d0
0001786C D440                       		add.w	d0,d2
0001786E 1028 0016                  		move.b	obHeight(a0),d0
00017872 4880                       		ext.w	d0
00017874 D640                       		add.w	d0,d3
00017876 49F8 F768                  		lea	($FFFFF768).w,a4
0001787A 367C 0010                  		movea.w	#$10,a3
0001787E 3C3C 0000                  		move.w	#0,d6
00017882 7A0D                       		moveq	#$D,d5
00017884 6100 0000                  		bsr.w	FindWall
00017888 3F01                       		move.w	d1,-(sp)
0001788A 3428 000C                  		move.w	obY(a0),d2
0001788E 3628 0008                  		move.w	obX(a0),d3
00017892 7000                       		moveq	#0,d0
00017894 1028 0017                  		move.b	obWidth(a0),d0
00017898 4880                       		ext.w	d0
0001789A D440                       		add.w	d0,d2
0001789C 1028 0016                  		move.b	obHeight(a0),d0
000178A0 4880                       		ext.w	d0
000178A2 D640                       		add.w	d0,d3
000178A4 49F8 F76A                  		lea	($FFFFF76A).w,a4
000178A8 367C 0010                  		movea.w	#$10,a3
000178AC 3C3C 0000                  		move.w	#0,d6
000178B0 7A0D                       		moveq	#$D,d5
000178B2 6100 0000                  		bsr.w	FindWall
000178B6 301F                       		move.w	(sp)+,d0
000178B8 6100 FF74                  		bsr.w	Sonic_Angle
000178BC 4A41                       		tst.w	d1
000178BE 6700                       		beq.s	locret_147F0
000178C0 6A00                       		bpl.s	loc_147F2
000178C2 0C41 FFF2                  		cmpi.w	#-$E,d1
000178C6 6D00 FF20                  		blt.w	locret_1470A
000178CA D368 0008                  		add.w	d1,obX(a0)
000178CE                            
000178CE                            locret_147F0:
000178CE 4E75                       		rts	
000178D0                            ; ===========================================================================
000178D0                            
000178D0                            loc_147F2:
000178D0 0C41 000E                  		cmpi.w	#$E,d1
000178D4 6E00                       		bgt.s	loc_147FE
000178D6                            
000178D6                            loc_147F8:
000178D6 D368 0008                  		add.w	d1,obX(a0)
000178DA 4E75                       		rts	
000178DC                            ; ===========================================================================
000178DC                            
000178DC                            loc_147FE:
000178DC 4A28 0038                  		tst.b	$38(a0)
000178E0 66F4                       		bne.s	loc_147F8
000178E2 08E8 0001 0022             		bset	#1,obStatus(a0)
000178E8 08A8 0005 0022             		bclr	#5,obStatus(a0)
000178EE 117C 0001 001D             		move.b	#1,obNextAni(a0)
000178F4 4E75                       		rts	
000178F6                            ; End of function Sonic_WalkVertR
000178F6                            
000178F6                            ; ---------------------------------------------------------------------------
000178F6                            ; Subroutine allowing Sonic to walk upside-down
000178F6                            ; ---------------------------------------------------------------------------
000178F6                            
000178F6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000178F6                            
000178F6                            
000178F6                            Sonic_WalkCeiling:
000178F6 3428 000C                  		move.w	obY(a0),d2
000178FA 3628 0008                  		move.w	obX(a0),d3
000178FE 7000                       		moveq	#0,d0
00017900 1028 0016                  		move.b	obHeight(a0),d0
00017904 4880                       		ext.w	d0
00017906 9440                       		sub.w	d0,d2
00017908 0A42 000F                  		eori.w	#$F,d2
0001790C 1028 0017                  		move.b	obWidth(a0),d0
00017910 4880                       		ext.w	d0
00017912 D640                       		add.w	d0,d3
00017914 49F8 F768                  		lea	($FFFFF768).w,a4
00017918 367C FFF0                  		movea.w	#-$10,a3
0001791C 3C3C 1000                  		move.w	#$1000,d6
00017920 7A0D                       		moveq	#$D,d5
00017922 6100 0000                  		bsr.w	FindFloor
00017926 3F01                       		move.w	d1,-(sp)
00017928 3428 000C                  		move.w	obY(a0),d2
0001792C 3628 0008                  		move.w	obX(a0),d3
00017930 7000                       		moveq	#0,d0
00017932 1028 0016                  		move.b	obHeight(a0),d0
00017936 4880                       		ext.w	d0
00017938 9440                       		sub.w	d0,d2
0001793A 0A42 000F                  		eori.w	#$F,d2
0001793E 1028 0017                  		move.b	obWidth(a0),d0
00017942 4880                       		ext.w	d0
00017944 9640                       		sub.w	d0,d3
00017946 49F8 F76A                  		lea	($FFFFF76A).w,a4
0001794A 367C FFF0                  		movea.w	#-$10,a3
0001794E 3C3C 1000                  		move.w	#$1000,d6
00017952 7A0D                       		moveq	#$D,d5
00017954 6100 0000                  		bsr.w	FindFloor
00017958 301F                       		move.w	(sp)+,d0
0001795A 6100 FED2                  		bsr.w	Sonic_Angle
0001795E 4A41                       		tst.w	d1
00017960 6700                       		beq.s	locret_14892
00017962 6A00                       		bpl.s	loc_14894
00017964 0C41 FFF2                  		cmpi.w	#-$E,d1
00017968 6D00 FE5A                  		blt.w	locret_146E6
0001796C 9368 000C                  		sub.w	d1,obY(a0)
00017970                            
00017970                            locret_14892:
00017970 4E75                       		rts	
00017972                            ; ===========================================================================
00017972                            
00017972                            loc_14894:
00017972 0C41 000E                  		cmpi.w	#$E,d1
00017976 6E00                       		bgt.s	loc_148A0
00017978                            
00017978                            loc_1489A:
00017978 9368 000C                  		sub.w	d1,obY(a0)
0001797C 4E75                       		rts	
0001797E                            ; ===========================================================================
0001797E                            
0001797E                            loc_148A0:
0001797E 4A28 0038                  		tst.b	$38(a0)
00017982 66F4                       		bne.s	loc_1489A
00017984 08E8 0001 0022             		bset	#1,obStatus(a0)
0001798A 08A8 0005 0022             		bclr	#5,obStatus(a0)
00017990 117C 0001 001D             		move.b	#1,obNextAni(a0)
00017996 4E75                       		rts	
00017998                            ; End of function Sonic_WalkCeiling
00017998                            
00017998                            ; ---------------------------------------------------------------------------
00017998                            ; Subroutine allowing Sonic to walk up a vertical slope/wall to	his left
00017998                            ; ---------------------------------------------------------------------------
00017998                            
00017998                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017998                            
00017998                            
00017998                            Sonic_WalkVertL:
00017998 3428 000C                  		move.w	obY(a0),d2
0001799C 3628 0008                  		move.w	obX(a0),d3
000179A0 7000                       		moveq	#0,d0
000179A2 1028 0017                  		move.b	obWidth(a0),d0
000179A6 4880                       		ext.w	d0
000179A8 9440                       		sub.w	d0,d2
000179AA 1028 0016                  		move.b	obHeight(a0),d0
000179AE 4880                       		ext.w	d0
000179B0 9640                       		sub.w	d0,d3
000179B2 0A43 000F                  		eori.w	#$F,d3
000179B6 49F8 F768                  		lea	($FFFFF768).w,a4
000179BA 367C FFF0                  		movea.w	#-$10,a3
000179BE 3C3C 0800                  		move.w	#$800,d6
000179C2 7A0D                       		moveq	#$D,d5
000179C4 6100 0000                  		bsr.w	FindWall
000179C8 3F01                       		move.w	d1,-(sp)
000179CA 3428 000C                  		move.w	obY(a0),d2
000179CE 3628 0008                  		move.w	obX(a0),d3
000179D2 7000                       		moveq	#0,d0
000179D4 1028 0017                  		move.b	obWidth(a0),d0
000179D8 4880                       		ext.w	d0
000179DA D440                       		add.w	d0,d2
000179DC 1028 0016                  		move.b	obHeight(a0),d0
000179E0 4880                       		ext.w	d0
000179E2 9640                       		sub.w	d0,d3
000179E4 0A43 000F                  		eori.w	#$F,d3
000179E8 49F8 F76A                  		lea	($FFFFF76A).w,a4
000179EC 367C FFF0                  		movea.w	#-$10,a3
000179F0 3C3C 0800                  		move.w	#$800,d6
000179F4 7A0D                       		moveq	#$D,d5
000179F6 6100 0000                  		bsr.w	FindWall
000179FA 301F                       		move.w	(sp)+,d0
000179FC 6100 FE30                  		bsr.w	Sonic_Angle
00017A00 4A41                       		tst.w	d1
00017A02 6700                       		beq.s	locret_14934
00017A04 6A00                       		bpl.s	loc_14936
00017A06 0C41 FFF2                  		cmpi.w	#-$E,d1
00017A0A 6D00 FDDC                  		blt.w	locret_1470A
00017A0E 9368 0008                  		sub.w	d1,obX(a0)
00017A12                            
00017A12                            locret_14934:
00017A12 4E75                       		rts	
00017A14                            ; ===========================================================================
00017A14                            
00017A14                            loc_14936:
00017A14 0C41 000E                  		cmpi.w	#$E,d1
00017A18 6E00                       		bgt.s	loc_14942
00017A1A                            
00017A1A                            loc_1493C:
00017A1A 9368 0008                  		sub.w	d1,obX(a0)
00017A1E 4E75                       		rts	
00017A20                            ; ===========================================================================
00017A20                            
00017A20                            loc_14942:
00017A20 4A28 0038                  		tst.b	$38(a0)
00017A24 66F4                       		bne.s	loc_1493C
00017A26 08E8 0001 0022             		bset	#1,obStatus(a0)
00017A2C 08A8 0005 0022             		bclr	#5,obStatus(a0)
00017A32 117C 0001 001D             		move.b	#1,obNextAni(a0)
00017A38 4E75                       		rts	
00017A3A                            ; End of function Sonic_WalkVertL
00017A3A                            ; End of function Sonic_WalkVertL
00017A3A                            
00017A3A                            		include	"_incObj\sub FindNearestTile.asm"
00017A3A                            ; ---------------------------------------------------------------------------
00017A3A                            ; Subroutine to	find which tile	the object is standing on
00017A3A                            
00017A3A                            ; input:
00017A3A                            ;	d2 = y-position of object's bottom edge
00017A3A                            ;	d3 = x-position of object
00017A3A                            
00017A3A                            ; output:
00017A3A                            ;	a1 = address within 256x256 mappings where object is standing
00017A3A                            ;	     (refers to a 16x16 tile number)
00017A3A                            ; ---------------------------------------------------------------------------
00017A3A                            
00017A3A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017A3A                            
00017A3A                            
00017A3A                            FindNearestTile:
00017A3A 3002                       		move.w	d2,d0		; get y-pos. of bottom edge of object
00017A3C E248                       		lsr.w	#1,d0
00017A3E 0240 0380                  		andi.w	#$380,d0
00017A42 3203                       		move.w	d3,d1		; get x-pos. of object
00017A44 E049                       		lsr.w	#8,d1
00017A46 0241 007F                  		andi.w	#$7F,d1
00017A4A D041                       		add.w	d1,d0		; combine
00017A4C 72FF                       		moveq	#-1,d1
00017A4E 43F8 A400                  		lea	(v_lvllayout).w,a1
00017A52 1231 0000                  		move.b	(a1,d0.w),d1	; get 256x256 tile number
00017A56 6700                       		beq.s	@blanktile	; branch if 0
00017A58 6B00                       		bmi.s	@specialtile	; branch if >$7F
00017A5A 5301                       		subq.b	#1,d1
00017A5C 4881                       		ext.w	d1
00017A5E EE59                       		ror.w	#7,d1
00017A60 3002                       		move.w	d2,d0
00017A62 D040                       		add.w	d0,d0
00017A64 0240 01E0                  		andi.w	#$1E0,d0
00017A68 D240                       		add.w	d0,d1
00017A6A 3003                       		move.w	d3,d0
00017A6C E648                       		lsr.w	#3,d0
00017A6E 0240 001E                  		andi.w	#$1E,d0
00017A72 D240                       		add.w	d0,d1
00017A74                            
00017A74                            @blanktile:
00017A74 2241                       		movea.l	d1,a1
00017A76 4E75                       		rts	
00017A78                            ; ===========================================================================
00017A78                            
00017A78                            @specialtile:
00017A78 0241 007F                  		andi.w	#$7F,d1
00017A7C 0828 0006 0001             		btst	#6,obRender(a0) ; is object "behind a loop"?
00017A82 6700                       		beq.s	@treatasnormal	; if not, branch
00017A84 5241                       		addq.w	#1,d1
00017A86 0C41 0029                  		cmpi.w	#$29,d1
00017A8A 6600                       		bne.s	@treatasnormal
00017A8C 323C 0051                  		move.w	#$51,d1
00017A90                            
00017A90                            	@treatasnormal:
00017A90 5301                       		subq.b	#1,d1
00017A92 EE59                       		ror.w	#7,d1
00017A94 3002                       		move.w	d2,d0
00017A96 D040                       		add.w	d0,d0
00017A98 0240 01E0                  		andi.w	#$1E0,d0
00017A9C D240                       		add.w	d0,d1
00017A9E 3003                       		move.w	d3,d0
00017AA0 E648                       		lsr.w	#3,d0
00017AA2 0240 001E                  		andi.w	#$1E,d0
00017AA6 D240                       		add.w	d0,d1
00017AA8 2241                       		movea.l	d1,a1
00017AAA 4E75                       		rts	
00017AAC                            ; End of function FindNearestTile
00017AAC                            ; End of function FindNearestTile
00017AAC                            		include	"_incObj\sub FindFloor.asm"
00017AAC                            ; ---------------------------------------------------------------------------
00017AAC                            ; Subroutine to	find the floor
00017AAC                            
00017AAC                            ; input:
00017AAC                            ;	d2 = y-position of object's bottom edge
00017AAC                            ;	d3 = x-position of object
00017AAC                            ;	d5 = bit to test for solidness
00017AAC                            
00017AAC                            ; output:
00017AAC                            ;	d1 = distance to the floor
00017AAC                            ;	a1 = address within 256x256 mappings where object is standing
00017AAC                            ;	     (refers to a 16x16 tile number)
00017AAC                            ;	(a4) = floor angle
00017AAC                            ; ---------------------------------------------------------------------------
00017AAC                            
00017AAC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017AAC                            
00017AAC                            
00017AAC                            FindFloor:
00017AAC 618C                       		bsr.s	FindNearestTile
00017AAE 3011                       		move.w	(a1),d0		; get value for solidness, orientation and 16x16 tile number
00017AB0 3800                       		move.w	d0,d4
00017AB2 0240 07FF                  		andi.w	#$7FF,d0
00017AB6 6700                       		beq.s	@isblank	; branch if tile is blank
00017AB8 0B04                       		btst	d5,d4		; is the tile solid?
00017ABA 6600                       		bne.s	@issolid	; if yes, branch
00017ABC                            
00017ABC                            @isblank:
00017ABC D44B                       		add.w	a3,d2
00017ABE 6100 0000                  		bsr.w	FindFloor2	; try tile below the nearest
00017AC2 944B                       		sub.w	a3,d2
00017AC4 0641 0010                  		addi.w	#$10,d1		; return distance to floor
00017AC8 4E75                       		rts	
00017ACA                            ; ===========================================================================
00017ACA                            
00017ACA                            @issolid:
00017ACA 2478 F796                  		movea.l	(v_collindex).w,a2
00017ACE 1032 0000                  		move.b	(a2,d0.w),d0	; get collision block number
00017AD2 0240 00FF                  		andi.w	#$FF,d0
00017AD6 67E4                       		beq.s	@isblank	; branch if 0
00017AD8 45F9 0000 0000             		lea	(AngleMap).l,a2
00017ADE 18B2 0000                  		move.b	(a2,d0.w),(a4)	; get collision angle value
00017AE2 E948                       		lsl.w	#4,d0
00017AE4 3203                       		move.w	d3,d1		; get x-pos. of object
00017AE6 0804 000B                  		btst	#$B,d4		; is block flipped horizontally?
00017AEA 6700                       		beq.s	@noflip		; if not, branch
00017AEC 4641                       		not.w	d1
00017AEE 4414                       		neg.b	(a4)
00017AF0                            
00017AF0                            	@noflip:
00017AF0 0804 000C                  		btst	#$C,d4		; is block flipped vertically?
00017AF4 6700                       		beq.s	@noflip2	; if not, branch
00017AF6 0614 0040                  		addi.b	#$40,(a4)
00017AFA 4414                       		neg.b	(a4)
00017AFC 0414 0040                  		subi.b	#$40,(a4)
00017B00                            
00017B00                            	@noflip2:
00017B00 0241 000F                  		andi.w	#$F,d1
00017B04 D240                       		add.w	d0,d1		; (block num. * $10) + x-pos. = place in array
00017B06 45F9 0000 0000             		lea	(CollArray1).l,a2
00017B0C 1032 1000                  		move.b	(a2,d1.w),d0	; get collision height
00017B10 4880                       		ext.w	d0
00017B12 BD44                       		eor.w	d6,d4
00017B14 0804 000C                  		btst	#$C,d4		; is block flipped vertically?
00017B18 6700                       		beq.s	@noflip3	; if not, branch
00017B1A 4440                       		neg.w	d0
00017B1C                            
00017B1C                            	@noflip3:
00017B1C 4A40                       		tst.w	d0
00017B1E 679C                       		beq.s	@isblank	; branch if height is 0
00017B20 6B00                       		bmi.s	@negfloor	; branch if height is negative
00017B22 0C00 0010                  		cmpi.b	#$10,d0
00017B26 6700                       		beq.s	@maxfloor	; branch if height is $10 (max)
00017B28 3202                       		move.w	d2,d1		; get y-pos. of object
00017B2A 0241 000F                  		andi.w	#$F,d1
00017B2E D041                       		add.w	d1,d0
00017B30 323C 000F                  		move.w	#$F,d1
00017B34 9240                       		sub.w	d0,d1		; return distance to floor
00017B36 4E75                       		rts	
00017B38                            ; ===========================================================================
00017B38                            
00017B38                            @negfloor:
00017B38 3202                       		move.w	d2,d1
00017B3A 0241 000F                  		andi.w	#$F,d1
00017B3E D041                       		add.w	d1,d0
00017B40 6A00 FF7A                  		bpl.w	@isblank
00017B44                            
00017B44                            @maxfloor:
00017B44 944B                       		sub.w	a3,d2
00017B46 6100 0000                  		bsr.w	FindFloor2	; try tile above the nearest
00017B4A D44B                       		add.w	a3,d2
00017B4C 0441 0010                  		subi.w	#$10,d1		; return distance to floor
00017B50 4E75                       		rts	
00017B52                            ; End of function FindFloor
00017B52                            
00017B52                            
00017B52                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017B52                            
00017B52                            
00017B52                            FindFloor2:
00017B52 6100 FEE6                  		bsr.w	FindNearestTile
00017B56 3011                       		move.w	(a1),d0
00017B58 3800                       		move.w	d0,d4
00017B5A 0240 07FF                  		andi.w	#$7FF,d0
00017B5E 6700                       		beq.s	@isblank2
00017B60 0B04                       		btst	d5,d4
00017B62 6600                       		bne.s	@issolid
00017B64                            
00017B64                            @isblank2:
00017B64 323C 000F                  		move.w	#$F,d1
00017B68 3002                       		move.w	d2,d0
00017B6A 0240 000F                  		andi.w	#$F,d0
00017B6E 9240                       		sub.w	d0,d1
00017B70 4E75                       		rts	
00017B72                            ; ===========================================================================
00017B72                            
00017B72                            @issolid:
00017B72 2478 F796                  		movea.l	(v_collindex).w,a2
00017B76 1032 0000                  		move.b	(a2,d0.w),d0
00017B7A 0240 00FF                  		andi.w	#$FF,d0
00017B7E 67E4                       		beq.s	@isblank2
00017B80 45F9 0000 0000             		lea	(AngleMap).l,a2
00017B86 18B2 0000                  		move.b	(a2,d0.w),(a4)
00017B8A E948                       		lsl.w	#4,d0
00017B8C 3203                       		move.w	d3,d1
00017B8E 0804 000B                  		btst	#$B,d4
00017B92 6700                       		beq.s	@noflip
00017B94 4641                       		not.w	d1
00017B96 4414                       		neg.b	(a4)
00017B98                            
00017B98                            	@noflip:
00017B98 0804 000C                  		btst	#$C,d4
00017B9C 6700                       		beq.s	@noflip2
00017B9E 0614 0040                  		addi.b	#$40,(a4)
00017BA2 4414                       		neg.b	(a4)
00017BA4 0414 0040                  		subi.b	#$40,(a4)
00017BA8                            
00017BA8                            	@noflip2:
00017BA8 0241 000F                  		andi.w	#$F,d1
00017BAC D240                       		add.w	d0,d1
00017BAE 45F9 0000 0000             		lea	(CollArray1).l,a2
00017BB4 1032 1000                  		move.b	(a2,d1.w),d0
00017BB8 4880                       		ext.w	d0
00017BBA BD44                       		eor.w	d6,d4
00017BBC 0804 000C                  		btst	#$C,d4
00017BC0 6700                       		beq.s	@noflip3
00017BC2 4440                       		neg.w	d0
00017BC4                            
00017BC4                            	@noflip3:
00017BC4 4A40                       		tst.w	d0
00017BC6 679C                       		beq.s	@isblank2
00017BC8 6B00                       		bmi.s	@negfloor
00017BCA 3202                       		move.w	d2,d1
00017BCC 0241 000F                  		andi.w	#$F,d1
00017BD0 D041                       		add.w	d1,d0
00017BD2 323C 000F                  		move.w	#$F,d1
00017BD6 9240                       		sub.w	d0,d1
00017BD8 4E75                       		rts	
00017BDA                            ; ===========================================================================
00017BDA                            
00017BDA                            @negfloor:
00017BDA 3202                       		move.w	d2,d1
00017BDC 0241 000F                  		andi.w	#$F,d1
00017BE0 D041                       		add.w	d1,d0
00017BE2 6A00 FF80                  		bpl.w	@isblank2
00017BE6 4641                       		not.w	d1
00017BE8 4E75                       		rts	
00017BEA                            ; End of function FindFloor2
00017BEA                            ; End of function FindFloor2
00017BEA                            		include	"_incObj\sub FindWall.asm"
00017BEA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017BEA                            
00017BEA                            
00017BEA                            FindWall:
00017BEA 6100 FE4E                  		bsr.w	FindNearestTile
00017BEE 3011                       		move.w	(a1),d0
00017BF0 3800                       		move.w	d0,d4
00017BF2 0240 07FF                  		andi.w	#$7FF,d0
00017BF6 6700                       		beq.s	loc_14B1E
00017BF8 0B04                       		btst	d5,d4
00017BFA 6600                       		bne.s	loc_14B2C
00017BFC                            
00017BFC                            loc_14B1E:
00017BFC D64B                       		add.w	a3,d3
00017BFE 6100 0000                  		bsr.w	FindWall2
00017C02 964B                       		sub.w	a3,d3
00017C04 0641 0010                  		addi.w	#$10,d1
00017C08 4E75                       		rts	
00017C0A                            ; ===========================================================================
00017C0A                            
00017C0A                            loc_14B2C:
00017C0A 2478 F796                  		movea.l	(v_collindex).w,a2
00017C0E 1032 0000                  		move.b	(a2,d0.w),d0
00017C12 0240 00FF                  		andi.w	#$FF,d0
00017C16 67E4                       		beq.s	loc_14B1E
00017C18 45F9 0000 0000             		lea	(AngleMap).l,a2
00017C1E 18B2 0000                  		move.b	(a2,d0.w),(a4)
00017C22 E948                       		lsl.w	#4,d0
00017C24 3202                       		move.w	d2,d1
00017C26 0804 000C                  		btst	#$C,d4
00017C2A 6700                       		beq.s	loc_14B5A
00017C2C 4641                       		not.w	d1
00017C2E 0614 0040                  		addi.b	#$40,(a4)
00017C32 4414                       		neg.b	(a4)
00017C34 0414 0040                  		subi.b	#$40,(a4)
00017C38                            
00017C38                            loc_14B5A:
00017C38 0804 000B                  		btst	#$B,d4
00017C3C 6700                       		beq.s	loc_14B62
00017C3E 4414                       		neg.b	(a4)
00017C40                            
00017C40                            loc_14B62:
00017C40 0241 000F                  		andi.w	#$F,d1
00017C44 D240                       		add.w	d0,d1
00017C46 45F9 0000 0000             		lea	(CollArray2).l,a2
00017C4C 1032 1000                  		move.b	(a2,d1.w),d0
00017C50 4880                       		ext.w	d0
00017C52 BD44                       		eor.w	d6,d4
00017C54 0804 000B                  		btst	#$B,d4
00017C58 6700                       		beq.s	loc_14B7E
00017C5A 4440                       		neg.w	d0
00017C5C                            
00017C5C                            loc_14B7E:
00017C5C 4A40                       		tst.w	d0
00017C5E 679C                       		beq.s	loc_14B1E
00017C60 6B00                       		bmi.s	loc_14B9A
00017C62 0C00 0010                  		cmpi.b	#$10,d0
00017C66 6700                       		beq.s	loc_14BA6
00017C68 3203                       		move.w	d3,d1
00017C6A 0241 000F                  		andi.w	#$F,d1
00017C6E D041                       		add.w	d1,d0
00017C70 323C 000F                  		move.w	#$F,d1
00017C74 9240                       		sub.w	d0,d1
00017C76 4E75                       		rts	
00017C78                            ; ===========================================================================
00017C78                            
00017C78                            loc_14B9A:
00017C78 3203                       		move.w	d3,d1
00017C7A 0241 000F                  		andi.w	#$F,d1
00017C7E D041                       		add.w	d1,d0
00017C80 6A00 FF7A                  		bpl.w	loc_14B1E
00017C84                            
00017C84                            loc_14BA6:
00017C84 964B                       		sub.w	a3,d3
00017C86 6100 0000                  		bsr.w	FindWall2
00017C8A D64B                       		add.w	a3,d3
00017C8C 0441 0010                  		subi.w	#$10,d1
00017C90 4E75                       		rts	
00017C92                            ; End of function FindWall
00017C92                            
00017C92                            
00017C92                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017C92                            
00017C92                            
00017C92                            FindWall2:
00017C92 6100 FDA6                  		bsr.w	FindNearestTile
00017C96 3011                       		move.w	(a1),d0
00017C98 3800                       		move.w	d0,d4
00017C9A 0240 07FF                  		andi.w	#$7FF,d0
00017C9E 6700                       		beq.s	loc_14BC6
00017CA0 0B04                       		btst	d5,d4
00017CA2 6600                       		bne.s	loc_14BD4
00017CA4                            
00017CA4                            loc_14BC6:
00017CA4 323C 000F                  		move.w	#$F,d1
00017CA8 3003                       		move.w	d3,d0
00017CAA 0240 000F                  		andi.w	#$F,d0
00017CAE 9240                       		sub.w	d0,d1
00017CB0 4E75                       		rts	
00017CB2                            ; ===========================================================================
00017CB2                            
00017CB2                            loc_14BD4:
00017CB2 2478 F796                  		movea.l	(v_collindex).w,a2
00017CB6 1032 0000                  		move.b	(a2,d0.w),d0
00017CBA 0240 00FF                  		andi.w	#$FF,d0
00017CBE 67E4                       		beq.s	loc_14BC6
00017CC0 45F9 0000 0000             		lea	(AngleMap).l,a2
00017CC6 18B2 0000                  		move.b	(a2,d0.w),(a4)
00017CCA E948                       		lsl.w	#4,d0
00017CCC 3202                       		move.w	d2,d1
00017CCE 0804 000C                  		btst	#$C,d4
00017CD2 6700                       		beq.s	loc_14C02
00017CD4 4641                       		not.w	d1
00017CD6 0614 0040                  		addi.b	#$40,(a4)
00017CDA 4414                       		neg.b	(a4)
00017CDC 0414 0040                  		subi.b	#$40,(a4)
00017CE0                            
00017CE0                            loc_14C02:
00017CE0 0804 000B                  		btst	#$B,d4
00017CE4 6700                       		beq.s	loc_14C0A
00017CE6 4414                       		neg.b	(a4)
00017CE8                            
00017CE8                            loc_14C0A:
00017CE8 0241 000F                  		andi.w	#$F,d1
00017CEC D240                       		add.w	d0,d1
00017CEE 45F9 0000 0000             		lea	(CollArray2).l,a2
00017CF4 1032 1000                  		move.b	(a2,d1.w),d0
00017CF8 4880                       		ext.w	d0
00017CFA BD44                       		eor.w	d6,d4
00017CFC 0804 000B                  		btst	#$B,d4
00017D00 6700                       		beq.s	loc_14C26
00017D02 4440                       		neg.w	d0
00017D04                            
00017D04                            loc_14C26:
00017D04 4A40                       		tst.w	d0
00017D06 679C                       		beq.s	loc_14BC6
00017D08 6B00                       		bmi.s	loc_14C3C
00017D0A 3203                       		move.w	d3,d1
00017D0C 0241 000F                  		andi.w	#$F,d1
00017D10 D041                       		add.w	d1,d0
00017D12 323C 000F                  		move.w	#$F,d1
00017D16 9240                       		sub.w	d0,d1
00017D18 4E75                       		rts	
00017D1A                            ; ===========================================================================
00017D1A                            
00017D1A                            loc_14C3C:
00017D1A 3203                       		move.w	d3,d1
00017D1C 0241 000F                  		andi.w	#$F,d1
00017D20 D041                       		add.w	d1,d0
00017D22 6A00 FF80                  		bpl.w	loc_14BC6
00017D26 4641                       		not.w	d1
00017D28 4E75                       		rts	
00017D2A                            ; End of function FindWall2
00017D2A                            ; End of function FindWall2
00017D2A                            
00017D2A                            ; ---------------------------------------------------------------------------
00017D2A                            ; Unused floor/wall subroutine - logs something	to do with collision
00017D2A                            ; ---------------------------------------------------------------------------
00017D2A                            
00017D2A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017D2A                            
00017D2A                            
00017D2A                            FloorLog_Unk:
00017D2A 4E75                       		rts	
00017D2C                            
00017D2C 43F9 0000 0000             		lea	(CollArray1).l,a1
00017D32 45F9 0000 0000             		lea	(CollArray1).l,a2
00017D38 363C 00FF                  		move.w	#$FF,d3
00017D3C                            
00017D3C                            loc_14C5E:
00017D3C 7A10                       		moveq	#$10,d5
00017D3E 343C 000F                  		move.w	#$F,d2
00017D42                            
00017D42                            loc_14C64:
00017D42 7800                       		moveq	#0,d4
00017D44 323C 000F                  		move.w	#$F,d1
00017D48                            
00017D48                            loc_14C6A:
00017D48 3019                       		move.w	(a1)+,d0
00017D4A EAA8                       		lsr.l	d5,d0
00017D4C D944                       		addx.w	d4,d4
00017D4E 51C9 FFF8                  		dbf	d1,loc_14C6A
00017D52                            
00017D52 34C4                       		move.w	d4,(a2)+
00017D54 92FC 0020                  		suba.w	#$20,a1
00017D58 5345                       		subq.w	#1,d5
00017D5A 51CA FFE6                  		dbf	d2,loc_14C64
00017D5E                            
00017D5E D2FC 0020                  		adda.w	#$20,a1
00017D62 51CB FFD8                  		dbf	d3,loc_14C5E
00017D66                            
00017D66 43F9 0000 0000             		lea	(CollArray1).l,a1
00017D6C 45F9 0000 0000             		lea	(CollArray2).l,a2
00017D72 6100                       		bsr.s	FloorLog_Unk2
00017D74 43F9 0000 0000             		lea	(CollArray1).l,a1
00017D7A 45F9 0000 0000             		lea	(CollArray1).l,a2
00017D80                            
00017D80                            ; End of function FloorLog_Unk
00017D80                            
00017D80                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017D80                            
00017D80                            
00017D80                            FloorLog_Unk2:
00017D80 363C 0FFF                  		move.w	#$FFF,d3
00017D84                            
00017D84                            loc_14CA6:
00017D84 7400                       		moveq	#0,d2
00017D86 323C 000F                  		move.w	#$F,d1
00017D8A 3019                       		move.w	(a1)+,d0
00017D8C 6700                       		beq.s	loc_14CD4
00017D8E 6B00                       		bmi.s	loc_14CBE
00017D90                            
00017D90                            loc_14CB2:
00017D90 E248                       		lsr.w	#1,d0
00017D92 6400                       		bhs.s	loc_14CB8
00017D94 5202                       		addq.b	#1,d2
00017D96                            
00017D96                            loc_14CB8:
00017D96 51C9 FFF8                  		dbf	d1,loc_14CB2
00017D9A                            
00017D9A 6000                       		bra.s	loc_14CD6
00017D9C                            ; ===========================================================================
00017D9C                            
00017D9C                            loc_14CBE:
00017D9C 0C40 FFFF                  		cmpi.w	#-1,d0
00017DA0 6700                       		beq.s	loc_14CD0
00017DA2                            
00017DA2                            loc_14CC4:
00017DA2 E348                       		lsl.w	#1,d0
00017DA4 6400                       		bhs.s	loc_14CCA
00017DA6 5302                       		subq.b	#1,d2
00017DA8                            
00017DA8                            loc_14CCA:
00017DA8 51C9 FFF8                  		dbf	d1,loc_14CC4
00017DAC                            
00017DAC 6000                       		bra.s	loc_14CD6
00017DAE                            ; ===========================================================================
00017DAE                            
00017DAE                            loc_14CD0:
00017DAE 303C 0010                  		move.w	#$10,d0
00017DB2                            
00017DB2                            loc_14CD4:
00017DB2 3400                       		move.w	d0,d2
00017DB4                            
00017DB4                            loc_14CD6:
00017DB4 14C2                       		move.b	d2,(a2)+
00017DB6 51CB FFCC                  		dbf	d3,loc_14CA6
00017DBA                            
00017DBA 4E75                       		rts	
00017DBC                            
00017DBC                            ; End of function FloorLog_Unk2
00017DBC                            
00017DBC                            
00017DBC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017DBC                            
00017DBC                            
00017DBC                            Sonic_WalkSpeed:
00017DBC 2628 0008                  		move.l	obX(a0),d3
00017DC0 2428 000C                  		move.l	obY(a0),d2
00017DC4 3228 0010                  		move.w	obVelX(a0),d1
00017DC8 48C1                       		ext.l	d1
00017DCA E181                       		asl.l	#8,d1
00017DCC D681                       		add.l	d1,d3
00017DCE 3228 0012                  		move.w	obVelY(a0),d1
00017DD2 48C1                       		ext.l	d1
00017DD4 E181                       		asl.l	#8,d1
00017DD6 D481                       		add.l	d1,d2
00017DD8 4842                       		swap	d2
00017DDA 4843                       		swap	d3
00017DDC 11C0 F768                  		move.b	d0,(v_anglebuffer).w
00017DE0 11C0 F76A                  		move.b	d0,($FFFFF76A).w
00017DE4 1200                       		move.b	d0,d1
00017DE6 0600 0020                  		addi.b	#$20,d0
00017DEA 6A00                       		bpl.s	loc_14D1A
00017DEC 1001                       		move.b	d1,d0
00017DEE 6A00                       		bpl.s	loc_14D14
00017DF0 5300                       		subq.b	#1,d0
00017DF2                            
00017DF2                            loc_14D14:
00017DF2 0600 0020                  		addi.b	#$20,d0
00017DF6 6000                       		bra.s	loc_14D24
00017DF8                            ; ===========================================================================
00017DF8                            
00017DF8                            loc_14D1A:
00017DF8 1001                       		move.b	d1,d0
00017DFA 6A00                       		bpl.s	loc_14D20
00017DFC 5200                       		addq.b	#1,d0
00017DFE                            
00017DFE                            loc_14D20:
00017DFE 0600 001F                  		addi.b	#$1F,d0
00017E02                            
00017E02                            loc_14D24:
00017E02 0200 00C0                  		andi.b	#$C0,d0
00017E06 6700 0000                  		beq.w	loc_14DF0
00017E0A 0C00 0080                  		cmpi.b	#$80,d0
00017E0E 6700 0000                  		beq.w	loc_14F7C
00017E12 0201 0038                  		andi.b	#$38,d1
00017E16 6600                       		bne.s	loc_14D3C
00017E18 5042                       		addq.w	#8,d2
00017E1A                            
00017E1A                            loc_14D3C:
00017E1A 0C00 0040                  		cmpi.b	#$40,d0
00017E1E 6700 0000                  		beq.w	loc_1504A
00017E22 6000 0000                  		bra.w	loc_14EBC
00017E26                            
00017E26                            ; End of function Sonic_WalkSpeed
00017E26                            
00017E26                            
00017E26                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017E26                            
00017E26                            
00017E26                            sub_14D48:
00017E26 11C0 F768                  		move.b	d0,(v_anglebuffer).w
00017E2A 11C0 F76A                  		move.b	d0,($FFFFF76A).w
00017E2E 0600 0020                  		addi.b	#$20,d0
00017E32 0200 00C0                  		andi.b	#$C0,d0
00017E36 0C00 0040                  		cmpi.b	#$40,d0
00017E3A 6700 0000                  		beq.w	loc_14FD6
00017E3E 0C00 0080                  		cmpi.b	#$80,d0
00017E42 6700 0000                  		beq.w	Sonic_DontRunOnWalls
00017E46 0C00 00C0                  		cmpi.b	#$C0,d0
00017E4A 6700 0000                  		beq.w	sub_14E50
00017E4E                            
00017E4E                            ; End of function sub_14D48
00017E4E                            
00017E4E                            ; ---------------------------------------------------------------------------
00017E4E                            ; Subroutine to	make Sonic land	on the floor after jumping
00017E4E                            ; ---------------------------------------------------------------------------
00017E4E                            
00017E4E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017E4E                            
00017E4E                            
00017E4E                            Sonic_HitFloor:
00017E4E 3428 000C                  		move.w	obY(a0),d2
00017E52 3628 0008                  		move.w	obX(a0),d3
00017E56 7000                       		moveq	#0,d0
00017E58 1028 0016                  		move.b	obHeight(a0),d0
00017E5C 4880                       		ext.w	d0
00017E5E D440                       		add.w	d0,d2
00017E60 1028 0017                  		move.b	obWidth(a0),d0
00017E64 4880                       		ext.w	d0
00017E66 D640                       		add.w	d0,d3
00017E68 49F8 F768                  		lea	(v_anglebuffer).w,a4
00017E6C 367C 0010                  		movea.w	#$10,a3
00017E70 3C3C 0000                  		move.w	#0,d6
00017E74 7A0D                       		moveq	#$D,d5
00017E76 6100 FC34                  		bsr.w	FindFloor
00017E7A 3F01                       		move.w	d1,-(sp)
00017E7C 3428 000C                  		move.w	obY(a0),d2
00017E80 3628 0008                  		move.w	obX(a0),d3
00017E84 7000                       		moveq	#0,d0
00017E86 1028 0016                  		move.b	obHeight(a0),d0
00017E8A 4880                       		ext.w	d0
00017E8C D440                       		add.w	d0,d2
00017E8E 1028 0017                  		move.b	obWidth(a0),d0
00017E92 4880                       		ext.w	d0
00017E94 9640                       		sub.w	d0,d3
00017E96 49F8 F76A                  		lea	($FFFFF76A).w,a4
00017E9A 367C 0010                  		movea.w	#$10,a3
00017E9E 3C3C 0000                  		move.w	#0,d6
00017EA2 7A0D                       		moveq	#$D,d5
00017EA4 6100 FC06                  		bsr.w	FindFloor
00017EA8 301F                       		move.w	(sp)+,d0
00017EAA 143C 0000                  		move.b	#0,d2
00017EAE                            
00017EAE                            loc_14DD0:
00017EAE 1638 F76A                  		move.b	($FFFFF76A).w,d3
00017EB2 B240                       		cmp.w	d0,d1
00017EB4 6F00                       		ble.s	loc_14DDE
00017EB6 1638 F768                  		move.b	(v_anglebuffer).w,d3
00017EBA C141                       		exg	d0,d1
00017EBC                            
00017EBC                            loc_14DDE:
00017EBC 0803 0000                  		btst	#0,d3
00017EC0 6700                       		beq.s	locret_14DE6
00017EC2 1602                       		move.b	d2,d3
00017EC4                            
00017EC4                            locret_14DE6:
00017EC4 4E75                       		rts	
00017EC6                            
00017EC6                            ; End of function Sonic_HitFloor
00017EC6                            
00017EC6                            ; ===========================================================================
00017EC6 3428 000C                  		move.w	obY(a0),d2
00017ECA 3628 0008                  		move.w	obX(a0),d3
00017ECE                            
00017ECE                            loc_14DF0:
00017ECE 0642 000A                  		addi.w	#$A,d2
00017ED2 49F8 F768                  		lea	(v_anglebuffer).w,a4
00017ED6 367C 0010                  		movea.w	#$10,a3
00017EDA 3C3C 0000                  		move.w	#0,d6
00017EDE 7A0E                       		moveq	#$E,d5
00017EE0 6100 FBCA                  		bsr.w	FindFloor
00017EE4 143C 0000                  		move.b	#0,d2
00017EE8                            
00017EE8                            loc_14E0A:
00017EE8 1638 F768                  		move.b	(v_anglebuffer).w,d3
00017EEC 0803 0000                  		btst	#0,d3
00017EF0 6700                       		beq.s	locret_14E16
00017EF2 1602                       		move.b	d2,d3
00017EF4                            
00017EF4                            locret_14E16:
00017EF4 4E75                       		rts	
00017EF6                            
00017EF6                            		include	"_incObj\sub ObjFloorDist.asm"
00017EF6                            ; ---------------------------------------------------------------------------
00017EF6                            ; Subroutine to find the distance of an object to the floor
00017EF6                            
00017EF6                            ; input:
00017EF6                            ;	d3 = x-pos. of object (ObjFloorDist2 only)
00017EF6                            
00017EF6                            ; output:
00017EF6                            ;	d1 = distance to the floor
00017EF6                            ;	d3 = floor angle
00017EF6                            ;	a1 = address within 256x256 mappings where object is standing
00017EF6                            ;	     (refers to a 16x16 tile number)
00017EF6                            ;	(a4) = floor angle
00017EF6                            ; ---------------------------------------------------------------------------
00017EF6                            
00017EF6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017EF6                            
00017EF6                            
00017EF6                            ObjFloorDist:
00017EF6 3628 0008                  		move.w	obX(a0),d3
00017EFA                            
00017EFA                            
00017EFA                            ObjFloorDist2:
00017EFA 3428 000C                  		move.w	obY(a0),d2
00017EFE 7000                       		moveq	#0,d0
00017F00 1028 0016                  		move.b	obHeight(a0),d0
00017F04 4880                       		ext.w	d0
00017F06 D440                       		add.w	d0,d2
00017F08 49F8 F768                  		lea	(v_anglebuffer).w,a4
00017F0C 18BC 0000                  		move.b	#0,(a4)
00017F10 367C 0010                  		movea.w	#$10,a3		; height of a 16x16 tile
00017F14 3C3C 0000                  		move.w	#0,d6
00017F18 7A0D                       		moveq	#$D,d5		; bit to test for solidness
00017F1A 6100 FB90                  		bsr.w	FindFloor
00017F1E 1638 F768                  		move.b	(v_anglebuffer).w,d3
00017F22 0803 0000                  		btst	#0,d3
00017F26 6700                       		beq.s	locret_14E4E
00017F28 163C 0000                  		move.b	#0,d3
00017F2C                            
00017F2C                            	locret_14E4E:
00017F2C 4E75                       		rts	
00017F2E                            
00017F2E                            ; End of function ObjFloorDist2
00017F2E                            ; End of function ObjFloorDist2
00017F2E                            
00017F2E                            
00017F2E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017F2E                            
00017F2E                            
00017F2E                            sub_14E50:
00017F2E 3428 000C                  		move.w	obY(a0),d2
00017F32 3628 0008                  		move.w	obX(a0),d3
00017F36 7000                       		moveq	#0,d0
00017F38 1028 0017                  		move.b	obWidth(a0),d0
00017F3C 4880                       		ext.w	d0
00017F3E 9440                       		sub.w	d0,d2
00017F40 1028 0016                  		move.b	obHeight(a0),d0
00017F44 4880                       		ext.w	d0
00017F46 D640                       		add.w	d0,d3
00017F48 49F8 F768                  		lea	(v_anglebuffer).w,a4
00017F4C 367C 0010                  		movea.w	#$10,a3
00017F50 3C3C 0000                  		move.w	#0,d6
00017F54 7A0E                       		moveq	#$E,d5
00017F56 6100 FC92                  		bsr.w	FindWall
00017F5A 3F01                       		move.w	d1,-(sp)
00017F5C 3428 000C                  		move.w	obY(a0),d2
00017F60 3628 0008                  		move.w	obX(a0),d3
00017F64 7000                       		moveq	#0,d0
00017F66 1028 0017                  		move.b	obWidth(a0),d0
00017F6A 4880                       		ext.w	d0
00017F6C D440                       		add.w	d0,d2
00017F6E 1028 0016                  		move.b	obHeight(a0),d0
00017F72 4880                       		ext.w	d0
00017F74 D640                       		add.w	d0,d3
00017F76 49F8 F76A                  		lea	($FFFFF76A).w,a4
00017F7A 367C 0010                  		movea.w	#$10,a3
00017F7E 3C3C 0000                  		move.w	#0,d6
00017F82 7A0E                       		moveq	#$E,d5
00017F84 6100 FC64                  		bsr.w	FindWall
00017F88 301F                       		move.w	(sp)+,d0
00017F8A 143C 00C0                  		move.b	#-$40,d2
00017F8E 6000 FF1E                  		bra.w	loc_14DD0
00017F92                            
00017F92                            ; End of function sub_14E50
00017F92                            
00017F92                            
00017F92                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017F92                            
00017F92                            
00017F92                            sub_14EB4:
00017F92 3428 000C                  		move.w	obY(a0),d2
00017F96 3628 0008                  		move.w	obX(a0),d3
00017F9A                            
00017F9A                            loc_14EBC:
00017F9A 0643 000A                  		addi.w	#$A,d3
00017F9E 49F8 F768                  		lea	(v_anglebuffer).w,a4
00017FA2 367C 0010                  		movea.w	#$10,a3
00017FA6 3C3C 0000                  		move.w	#0,d6
00017FAA 7A0E                       		moveq	#$E,d5
00017FAC 6100 FC3C                  		bsr.w	FindWall
00017FB0 143C 00C0                  		move.b	#-$40,d2
00017FB4 6000 FF32                  		bra.w	loc_14E0A
00017FB8                            
00017FB8                            ; End of function sub_14EB4
00017FB8                            
00017FB8                            ; ---------------------------------------------------------------------------
00017FB8                            ; Subroutine to	detect when an object hits a wall to its right
00017FB8                            ; ---------------------------------------------------------------------------
00017FB8                            
00017FB8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017FB8                            
00017FB8                            
00017FB8                            ObjHitWallRight:
00017FB8 D668 0008                  		add.w	obX(a0),d3
00017FBC 3428 000C                  		move.w	obY(a0),d2
00017FC0 49F8 F768                  		lea	(v_anglebuffer).w,a4
00017FC4 18BC 0000                  		move.b	#0,(a4)
00017FC8 367C 0010                  		movea.w	#$10,a3
00017FCC 3C3C 0000                  		move.w	#0,d6
00017FD0 7A0E                       		moveq	#$E,d5
00017FD2 6100 FC16                  		bsr.w	FindWall
00017FD6 1638 F768                  		move.b	(v_anglebuffer).w,d3
00017FDA 0803 0000                  		btst	#0,d3
00017FDE 6700                       		beq.s	locret_14F06
00017FE0 163C 00C0                  		move.b	#-$40,d3
00017FE4                            
00017FE4                            locret_14F06:
00017FE4 4E75                       		rts	
00017FE6                            
00017FE6                            ; End of function ObjHitWallRight
00017FE6                            
00017FE6                            ; ---------------------------------------------------------------------------
00017FE6                            ; Subroutine preventing	Sonic from running on walls and	ceilings when he
00017FE6                            ; touches them
00017FE6                            ; ---------------------------------------------------------------------------
00017FE6                            
00017FE6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017FE6                            
00017FE6                            
00017FE6                            Sonic_DontRunOnWalls:
00017FE6 3428 000C                  		move.w	obY(a0),d2
00017FEA 3628 0008                  		move.w	obX(a0),d3
00017FEE 7000                       		moveq	#0,d0
00017FF0 1028 0016                  		move.b	obHeight(a0),d0
00017FF4 4880                       		ext.w	d0
00017FF6 9440                       		sub.w	d0,d2
00017FF8 0A42 000F                  		eori.w	#$F,d2
00017FFC 1028 0017                  		move.b	obWidth(a0),d0
00018000 4880                       		ext.w	d0
00018002 D640                       		add.w	d0,d3
00018004 49F8 F768                  		lea	(v_anglebuffer).w,a4
00018008 367C FFF0                  		movea.w	#-$10,a3
0001800C 3C3C 1000                  		move.w	#$1000,d6
00018010 7A0E                       		moveq	#$E,d5
00018012 6100 FA98                  		bsr.w	FindFloor
00018016 3F01                       		move.w	d1,-(sp)
00018018 3428 000C                  		move.w	obY(a0),d2
0001801C 3628 0008                  		move.w	obX(a0),d3
00018020 7000                       		moveq	#0,d0
00018022 1028 0016                  		move.b	obHeight(a0),d0
00018026 4880                       		ext.w	d0
00018028 9440                       		sub.w	d0,d2
0001802A 0A42 000F                  		eori.w	#$F,d2
0001802E 1028 0017                  		move.b	obWidth(a0),d0
00018032 4880                       		ext.w	d0
00018034 9640                       		sub.w	d0,d3
00018036 49F8 F76A                  		lea	($FFFFF76A).w,a4
0001803A 367C FFF0                  		movea.w	#-$10,a3
0001803E 3C3C 1000                  		move.w	#$1000,d6
00018042 7A0E                       		moveq	#$E,d5
00018044 6100 FA66                  		bsr.w	FindFloor
00018048 301F                       		move.w	(sp)+,d0
0001804A 143C 0080                  		move.b	#-$80,d2
0001804E 6000 FE5E                  		bra.w	loc_14DD0
00018052                            ; End of function Sonic_DontRunOnWalls
00018052                            
00018052                            ; ===========================================================================
00018052 3428 000C                  		move.w	obY(a0),d2
00018056 3628 0008                  		move.w	obX(a0),d3
0001805A                            
0001805A                            loc_14F7C:
0001805A 0442 000A                  		subi.w	#$A,d2
0001805E 0A42 000F                  		eori.w	#$F,d2
00018062 49F8 F768                  		lea	(v_anglebuffer).w,a4
00018066 367C FFF0                  		movea.w	#-$10,a3
0001806A 3C3C 1000                  		move.w	#$1000,d6
0001806E 7A0E                       		moveq	#$E,d5
00018070 6100 FA3A                  		bsr.w	FindFloor
00018074 143C 0080                  		move.b	#-$80,d2
00018078 6000 FE6E                  		bra.w	loc_14E0A
0001807C                            
0001807C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001807C                            
0001807C                            
0001807C                            ObjHitCeiling:
0001807C 3428 000C                  		move.w	obY(a0),d2
00018080 3628 0008                  		move.w	obX(a0),d3
00018084 7000                       		moveq	#0,d0
00018086 1028 0016                  		move.b	obHeight(a0),d0
0001808A 4880                       		ext.w	d0
0001808C 9440                       		sub.w	d0,d2
0001808E 0A42 000F                  		eori.w	#$F,d2
00018092 49F8 F768                  		lea	(v_anglebuffer).w,a4
00018096 367C FFF0                  		movea.w	#-$10,a3
0001809A 3C3C 1000                  		move.w	#$1000,d6
0001809E 7A0E                       		moveq	#$E,d5
000180A0 6100 FA0A                  		bsr.w	FindFloor
000180A4 1638 F768                  		move.b	(v_anglebuffer).w,d3
000180A8 0803 0000                  		btst	#0,d3
000180AC 6700                       		beq.s	locret_14FD4
000180AE 163C 0080                  		move.b	#-$80,d3
000180B2                            
000180B2                            locret_14FD4:
000180B2 4E75                       		rts	
000180B4                            ; End of function ObjHitCeiling
000180B4                            
000180B4                            ; ===========================================================================
000180B4                            
000180B4                            loc_14FD6:
000180B4 3428 000C                  		move.w	obY(a0),d2
000180B8 3628 0008                  		move.w	obX(a0),d3
000180BC 7000                       		moveq	#0,d0
000180BE 1028 0017                  		move.b	obWidth(a0),d0
000180C2 4880                       		ext.w	d0
000180C4 9440                       		sub.w	d0,d2
000180C6 1028 0016                  		move.b	obHeight(a0),d0
000180CA 4880                       		ext.w	d0
000180CC 9640                       		sub.w	d0,d3
000180CE 0A43 000F                  		eori.w	#$F,d3
000180D2 49F8 F768                  		lea	(v_anglebuffer).w,a4
000180D6 367C FFF0                  		movea.w	#-$10,a3
000180DA 3C3C 0800                  		move.w	#$800,d6
000180DE 7A0E                       		moveq	#$E,d5
000180E0 6100 FB08                  		bsr.w	FindWall
000180E4 3F01                       		move.w	d1,-(sp)
000180E6 3428 000C                  		move.w	obY(a0),d2
000180EA 3628 0008                  		move.w	obX(a0),d3
000180EE 7000                       		moveq	#0,d0
000180F0 1028 0017                  		move.b	obWidth(a0),d0
000180F4 4880                       		ext.w	d0
000180F6 D440                       		add.w	d0,d2
000180F8 1028 0016                  		move.b	obHeight(a0),d0
000180FC 4880                       		ext.w	d0
000180FE 9640                       		sub.w	d0,d3
00018100 0A43 000F                  		eori.w	#$F,d3
00018104 49F8 F76A                  		lea	($FFFFF76A).w,a4
00018108 367C FFF0                  		movea.w	#-$10,a3
0001810C 3C3C 0800                  		move.w	#$800,d6
00018110 7A0E                       		moveq	#$E,d5
00018112 6100 FAD6                  		bsr.w	FindWall
00018116 301F                       		move.w	(sp)+,d0
00018118 143C 0040                  		move.b	#$40,d2
0001811C 6000 FD90                  		bra.w	loc_14DD0
00018120                            
00018120                            ; ---------------------------------------------------------------------------
00018120                            ; Subroutine to	stop Sonic when	he jumps at a wall
00018120                            ; ---------------------------------------------------------------------------
00018120                            
00018120                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00018120                            
00018120                            
00018120                            Sonic_HitWall:
00018120 3428 000C                  		move.w	obY(a0),d2
00018124 3628 0008                  		move.w	obX(a0),d3
00018128                            
00018128                            loc_1504A:
00018128 0443 000A                  		subi.w	#$A,d3
0001812C 0A43 000F                  		eori.w	#$F,d3
00018130 49F8 F768                  		lea	(v_anglebuffer).w,a4
00018134 367C FFF0                  		movea.w	#-$10,a3
00018138 3C3C 0800                  		move.w	#$800,d6
0001813C 7A0E                       		moveq	#$E,d5
0001813E 6100 FAAA                  		bsr.w	FindWall
00018142 143C 0040                  		move.b	#$40,d2
00018146 6000 FDA0                  		bra.w	loc_14E0A
0001814A                            ; End of function Sonic_HitWall
0001814A                            
0001814A                            ; ---------------------------------------------------------------------------
0001814A                            ; Subroutine to	detect when an object hits a wall to its left
0001814A                            ; ---------------------------------------------------------------------------
0001814A                            
0001814A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001814A                            
0001814A                            
0001814A                            ObjHitWallLeft:
0001814A D668 0008                  		add.w	obX(a0),d3
0001814E 3428 000C                  		move.w	obY(a0),d2
00018152                            		; Engine bug: colliding with left walls is erratic with this function.
00018152                            		; The cause is this: a missing instruction to flip collision on the found
00018152                            		; 16x16 block; this one:
00018152                            		;eori.w	#$F,d3
00018152 49F8 F768                  		lea	(v_anglebuffer).w,a4
00018156 18BC 0000                  		move.b	#0,(a4)
0001815A 367C FFF0                  		movea.w	#-$10,a3
0001815E 3C3C 0800                  		move.w	#$800,d6
00018162 7A0E                       		moveq	#$E,d5
00018164 6100 FA84                  		bsr.w	FindWall
00018168 1638 F768                  		move.b	(v_anglebuffer).w,d3
0001816C 0803 0000                  		btst	#0,d3
00018170 6700                       		beq.s	locret_15098
00018172 163C 0040                  		move.b	#$40,d3
00018176                            
00018176                            locret_15098:
00018176 4E75                       		rts	
00018178                            ; End of function ObjHitWallLeft
00018178                            
00018178                            ; ===========================================================================
00018178                            
00018178                            		include	"_incObj\66 Rotating Junction.asm"
00018178                            ; ---------------------------------------------------------------------------
00018178                            ; Object 66 - rotating disc junction that grabs Sonic (SBZ)
00018178                            ; ---------------------------------------------------------------------------
00018178                            
00018178                            Junction:
00018178 7000                       		moveq	#0,d0
0001817A 1028 0024                  		move.b	obRoutine(a0),d0
0001817E 323B 0000                  		move.w	Jun_Index(pc,d0.w),d1
00018182 4EFB 1000                  		jmp	Jun_Index(pc,d1.w)
00018186                            ; ===========================================================================
00018186 0000                       Jun_Index:	dc.w Jun_Main-Jun_Index
00018188 0000                       		dc.w Jun_Action-Jun_Index
0001818A 0000                       		dc.w Jun_Display-Jun_Index
0001818C 0000                       		dc.w Jun_Release-Jun_Index
0001818E                            
0001818E =00000034                  jun_frame:	equ $34		; current frame
0001818E =00000036                  jun_reverse:	equ $36		; flag set when switch is pressed
0001818E =00000038                  jun_switch:	equ $38		; which switch will reverse the disc
0001818E                            ; ===========================================================================
0001818E                            
0001818E                            Jun_Main:	; Routine 0
0001818E 5428 0024                  		addq.b	#2,obRoutine(a0)
00018192 323C 0001                  		move.w	#1,d1
00018196 2248                       		movea.l	a0,a1
00018198 6000                       		bra.s	@makeitem
0001819A                            ; ===========================================================================
0001819A                            
0001819A                            	@repeat:
0001819A 4EB9 0000 FE08             		jsr	FindFreeObj
000181A0 6600                       		bne.s	@fail
000181A2 12BC 0066                  		move.b	#id_Junction,0(a1)
000181A6 5829 0024                  		addq.b	#4,obRoutine(a1) ; goto Jun_Display next
000181AA 3368 0008 0008             		move.w	obX(a0),obX(a1)
000181B0 3368 000C 000C             		move.w	obY(a0),obY(a1)
000181B6 337C 0180 0018             		move.w	#$180,obPriority(a1)
000181BC 137C 0010 001A             		move.b	#$10,obFrame(a1) ; use large circular sprite
000181C2                            
000181C2                            @makeitem:
000181C2 237C 0000 0000 0004        		move.l	#Map_Jun,obMap(a1)
000181CA 337C 4348 0002             		move.w	#$4348,obGfx(a1)
000181D0 0029 0004 0001             		ori.b	#4,obRender(a1)
000181D6 137C 0038 0014             		move.b	#$38,obActWid(a1)
000181DC                            
000181DC                            	@fail:
000181DC 51C9 FFBC                  		dbf	d1,@repeat
000181E0                            
000181E0 117C 0030 0014             		move.b	#$30,obActWid(a0)
000181E6 317C 0200 0018             		move.w	#$200,obPriority(a0)
000181EC 317C 003C 0030             		move.w	#$3C,$30(a0)
000181F2 117C 0001 0034             		move.b	#1,jun_frame(a0)
000181F8 1168 0028 0038             		move.b	obSubtype(a0),jun_switch(a0)
000181FE                            
000181FE                            Jun_Action:	; Routine 2
000181FE 6100 0000                  		bsr.w	Jun_ChkSwitch
00018202 4A28 0001                  		tst.b	obRender(a0)
00018206 6A00 0000                  		bpl.w	Jun_Display
0001820A 323C 0030                  		move.w	#$30,d1
0001820E 3401                       		move.w	d1,d2
00018210 3602                       		move.w	d2,d3
00018212 5243                       		addq.w	#1,d3
00018214 3828 0008                  		move.w	obX(a0),d4
00018218 6100 9B70                  		bsr.w	SolidObject
0001821C 0828 0005 0022             		btst	#5,obStatus(a0)	; is Sonic pushing the disc?
00018222 6700 0000                  		beq.w	Jun_Display	; if not, branch
00018226                            
00018226 43F8 D000                  		lea	(v_player).w,a1
0001822A 720E                       		moveq	#$E,d1
0001822C 3029 0008                  		move.w	obX(a1),d0
00018230 B068 0008                  		cmp.w	obX(a0),d0	; is Sonic to the left of the disc?
00018234 6500                       		bcs.s	@isleft		; if yes, branch
00018236 7207                       		moveq	#7,d1		
00018238                            
00018238                            	@isleft:
00018238 B228 001A                  		cmp.b	obFrame(a0),d1	; is the gap next to Sonic?
0001823C 6600                       		bne.s	Jun_Display	; if not, branch
0001823E                            
0001823E 1141 0032                  		move.b	d1,$32(a0)
00018242 5828 0024                  		addq.b	#4,obRoutine(a0) ; goto Jun_Release next
00018246 11FC 0001 F7C8             		move.b	#1,(f_lockmulti).w ; lock controls
0001824C 137C 0002 001C             		move.b	#id_Roll,obAnim(a1) ; make Sonic use "rolling" animation
00018252 337C 0800 0020             		move.w	#$800,obInertia(a1)
00018258 337C 0000 0010             		move.w	#0,obVelX(a1)
0001825E 337C 0000 0012             		move.w	#0,obVelY(a1)
00018264 08A8 0005 0022             		bclr	#5,obStatus(a0)
0001826A 08A9 0005 0022             		bclr	#5,obStatus(a1)
00018270 08E9 0001 0022             		bset	#1,obStatus(a1)
00018276 3429 0008                  		move.w	obX(a1),d2
0001827A 3629 000C                  		move.w	obY(a1),d3
0001827E 6100 0000                  		bsr.w	Jun_ChgPos
00018282 D569 0008                  		add.w	d2,obX(a1)
00018286 D769 000C                  		add.w	d3,obY(a1)
0001828A E0E9 0008                  		asr	obX(a1)
0001828E E0E9 000C                  		asr	obY(a1)
00018292                            
00018292                            Jun_Display:	; Routine 4
00018292 6000 965E                  		bra.w	RememberState
00018296                            ; ===========================================================================
00018296                            
00018296                            Jun_Release:	; Routine 6
00018296 1028 001A                  		move.b	obFrame(a0),d0
0001829A 0C00 0004                  		cmpi.b	#4,d0		; is gap pointing down?
0001829E 6700                       		beq.s	@release	; if yes, branch
000182A0 0C00 0007                  		cmpi.b	#7,d0		; is gap pointing right?
000182A4 6600                       		bne.s	@dontrelease	; if not, branch
000182A6                            
000182A6                            	@release:
000182A6 B028 0032                  		cmp.b	$32(a0),d0
000182AA 6700                       		beq.s	@dontrelease
000182AC 43F8 D000                  		lea	(v_player).w,a1
000182B0 337C 0000 0010             		move.w	#0,obVelX(a1)
000182B6 337C 0800 0012             		move.w	#$800,obVelY(a1)
000182BC 0C00 0004                  		cmpi.b	#4,d0
000182C0 6700                       		beq.s	@isdown
000182C2 337C 0800 0010             		move.w	#$800,obVelX(a1)
000182C8 337C 0800 0012             		move.w	#$800,obVelY(a1)
000182CE                            
000182CE                            	@isdown:
000182CE 4238 F7C8                  		clr.b	(f_lockmulti).w	; unlock controls
000182D2 5928 0024                  		subq.b	#4,obRoutine(a0)
000182D6                            
000182D6                            	@dontrelease:
000182D6 6100                       		bsr.s	Jun_ChkSwitch
000182D8 6100                       		bsr.s	Jun_ChgPos
000182DA 6000 9616                  		bra.w	RememberState
000182DE                            
000182DE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000182DE                            
000182DE                            
000182DE                            Jun_ChkSwitch:
000182DE 45F8 F7E0                  		lea	(f_switch).w,a2
000182E2 7000                       		moveq	#0,d0
000182E4 1028 0038                  		move.b	jun_switch(a0),d0
000182E8 0832 0000 0000             		btst	#0,(a2,d0.w)	; is switch pressed?
000182EE 6700                       		beq.s	@unpressed	; if not, branch
000182F0                            
000182F0 4A28 0036                  		tst.b	jun_reverse(a0)	; has switch previously	been pressed?
000182F4 6600                       		bne.s	@animate	; if yes, branch
000182F6 4428 0034                  		neg.b	jun_frame(a0)
000182FA 117C 0001 0036             		move.b	#1,jun_reverse(a0) ; set to "previously pressed"
00018300 6000                       		bra.s	@animate
00018302                            ; ===========================================================================
00018302                            
00018302                            @unpressed:
00018302 4228 0036                  		clr.b	jun_reverse(a0)	; set to "not yet pressed"
00018306                            
00018306                            @animate:
00018306 5328 001E                  		subq.b	#1,obTimeFrame(a0) ; decrement frame timer
0001830A 6A00                       		bpl.s	@nochange	; if time remains, branch
0001830C 117C 0007 001E             		move.b	#7,obTimeFrame(a0)
00018312 1228 0034                  		move.b	jun_frame(a0),d1
00018316 1028 001A                  		move.b	obFrame(a0),d0
0001831A D001                       		add.b	d1,d0
0001831C 0200 000F                  		andi.b	#$F,d0
00018320 1140 001A                  		move.b	d0,obFrame(a0)	; update frame
00018324                            
00018324                            	@nochange:
00018324 4E75                       		rts	
00018326                            ; End of function Jun_ChkSwitch
00018326                            
00018326                            
00018326                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00018326                            
00018326                            
00018326                            Jun_ChgPos:
00018326 43F8 D000                  		lea	(v_player).w,a1
0001832A 7000                       		moveq	#0,d0
0001832C 1028 001A                  		move.b	obFrame(a0),d0
00018330 D040                       		add.w	d0,d0
00018332 45FB 0000                  		lea	@data(pc,d0.w),a2
00018336 101A                       		move.b	(a2)+,d0
00018338 4880                       		ext.w	d0
0001833A D068 0008                  		add.w	obX(a0),d0
0001833E 3340 0008                  		move.w	d0,obX(a1)
00018342 101A                       		move.b	(a2)+,d0
00018344 4880                       		ext.w	d0
00018346 D068 000C                  		add.w	obY(a0),d0
0001834A 3340 000C                  		move.w	d0,obY(a1)
0001834E 4E75                       		rts	
00018350                            
00018350                            
00018350 E000 E20E                  @data:		dc.b -$20,    0, -$1E,   $E ; disc x-pos, Sonic x-pos, disc y-pos, Sonic y-pos
00018354 E818 F21E                  		dc.b -$18,  $18,  -$E,  $1E
00018358 0020 0E1E                  		dc.b    0,  $20,   $E,  $1E
0001835C 1818 1E0E                  		dc.b  $18,  $18,  $1E,   $E
00018360 2000 1EF2                  		dc.b  $20,    0,  $1E,  -$E
00018364 18E8 0EE2                  		dc.b  $18, -$18,   $E, -$1E
00018368 00E0 F2E2                  		dc.b    0, -$20,  -$E, -$1E
0001836C E8E8 E2F2                  		dc.b -$18, -$18, -$1E,  -$E
0001836C E8E8 E2F2                  		dc.b -$18, -$18, -$1E,  -$E
00018370                            Map_Jun:	include	"_maps\Rotating Junction.asm"
00018370                            ; ---------------------------------------------------------------------------
00018370                            ; Sprite mappings - rotating disc that grabs Sonic (SBZ)
00018370                            ; ---------------------------------------------------------------------------
00018370                            Map_Jun_internal:
00018370 0000                       		dc.w @gap0-Map_Jun_internal
00018372 0000                       		dc.w @gap1-Map_Jun_internal
00018374 0000                       		dc.w @gap2-Map_Jun_internal
00018376 0000                       		dc.w @gap3-Map_Jun_internal
00018378 0000                       		dc.w @gap4-Map_Jun_internal
0001837A 0000                       		dc.w @gap5-Map_Jun_internal
0001837C 0000                       		dc.w @gap6-Map_Jun_internal
0001837E 0000                       		dc.w @gap7-Map_Jun_internal
00018380 0000                       		dc.w @gap8-Map_Jun_internal
00018382 0000                       		dc.w @gap9-Map_Jun_internal
00018384 0000                       		dc.w @gapA-Map_Jun_internal
00018386 0000                       		dc.w @gapB-Map_Jun_internal
00018388 0000                       		dc.w @gapC-Map_Jun_internal
0001838A 0000                       		dc.w @gapD-Map_Jun_internal
0001838C 0000                       		dc.w @gapE-Map_Jun_internal
0001838E 0000                       		dc.w @gapF-Map_Jun_internal
00018390 0000                       		dc.w @circle-Map_Jun_internal
00018392 06                         @gap0:		dc.b 6
00018393 E805 0022 D0               		dc.b $E8, 5, 0,	$22, $D0
00018398 0805 1022 D0               		dc.b 8,	5, $10,	$22, $D0
0001839D E80A 0000 C8               		dc.b $E8, $A, 0, 0, $C8
000183A2 E80A 0800 E0               		dc.b $E8, $A, 8, 0, $E0
000183A7 000A 1000 C8               		dc.b 0,	$A, $10, 0, $C8
000183AC 000A 1800 E0               		dc.b 0,	$A, $18, 0, $E0
000183B1 06                         @gap1:		dc.b 6
000183B2 F803 0026 D0               		dc.b $F8, 3, 0,	$26, $D0
000183B7 1805 002A D8               		dc.b $18, 5, 0,	$2A, $D8
000183BC F60A 0000 CA               		dc.b $F6, $A, 0, 0, $CA
000183C1 F60A 0800 E2               		dc.b $F6, $A, 8, 0, $E2
000183C6 0E0A 1000 CA               		dc.b $E, $A, $10, 0, $CA
000183CB 0E0A 1800 E2               		dc.b $E, $A, $18, 0, $E2
000183D0 06                         @gap2:		dc.b 6
000183D1 0006 002E D0               		dc.b 0,	6, 0, $2E, $D0
000183D6 2009 0034 E8               		dc.b $20, 9, 0,	$34, $E8
000183DB 000A 0000 D0               		dc.b 0,	$A, 0, 0, $D0
000183E0 000A 0800 E8               		dc.b 0,	$A, 8, 0, $E8
000183E5 180A 1000 D0               		dc.b $18, $A, $10, 0, $D0
000183EA 180A 1800 E8               		dc.b $18, $A, $18, 0, $E8
000183EF 06                         @gap3:		dc.b 6
000183F0 0807 003A D8               		dc.b 8,	7, 0, $3A, $D8
000183F5 2808 0042 F0               		dc.b $28, 8, 0,	$42, $F0
000183FA 060A 0000 DA               		dc.b 6,	$A, 0, 0, $DA
000183FF 060A 0800 F2               		dc.b 6,	$A, 8, 0, $F2
00018404 1E0A 1000 DA               		dc.b $1E, $A, $10, 0, $DA
00018409 1E0A 1800 F2               		dc.b $1E, $A, $18, 0, $F2
0001840E 06                         @gap4:		dc.b 6
0001840F 2005 0045 E8               		dc.b $20, 5, 0,	$45, $E8
00018414 2005 0845 08               		dc.b $20, 5, 8,	$45, 8
00018419 080A 0000 E8               		dc.b 8,	$A, 0, 0, $E8
0001841E 080A 0800 00               		dc.b 8,	$A, 8, 0, 0
00018423 200A 1000 E8               		dc.b $20, $A, $10, 0, $E8
00018428 200A 1800 00               		dc.b $20, $A, $18, 0, 0
0001842D 06                         @gap5:		dc.b 6
0001842E 2808 0842 F8               		dc.b $28, 8, 8,	$42, $F8
00018433 0807 083A 18               		dc.b 8,	7, 8, $3A, $18
00018438 060A 0000 F6               		dc.b 6,	$A, 0, 0, $F6
0001843D 060A 0800 0E               		dc.b 6,	$A, 8, 0, $E
00018442 1E0A 1000 F6               		dc.b $1E, $A, $10, 0, $F6
00018447 1E0A 1800 0E               		dc.b $1E, $A, $18, 0, $E
0001844C 06                         @gap6:		dc.b 6
0001844D 2009 0834 00               		dc.b $20, 9, 8,	$34, 0
00018452 0006 082E 20               		dc.b 0,	6, 8, $2E, $20
00018457 000A 0000 00               		dc.b 0,	$A, 0, 0, 0
0001845C 000A 0800 18               		dc.b 0,	$A, 8, 0, $18
00018461 180A 1000 00               		dc.b $18, $A, $10, 0, 0
00018466 180A 1800 18               		dc.b $18, $A, $18, 0, $18
0001846B 06                         @gap7:		dc.b 6
0001846C 1805 082A 18               		dc.b $18, 5, 8,	$2A, $18
00018471 F803 0826 28               		dc.b $F8, 3, 8,	$26, $28
00018476 F60A 0000 06               		dc.b $F6, $A, 0, 0, 6
0001847B F60A 0800 1E               		dc.b $F6, $A, 8, 0, $1E
00018480 0E0A 1000 06               		dc.b $E, $A, $10, 0, 6
00018485 0E0A 1800 1E               		dc.b $E, $A, $18, 0, $1E
0001848A 06                         @gap8:		dc.b 6
0001848B E805 0822 20               		dc.b $E8, 5, 8,	$22, $20
00018490 0805 1822 20               		dc.b 8,	5, $18,	$22, $20
00018495 E80A 0000 08               		dc.b $E8, $A, 0, 0, 8
0001849A E80A 0800 20               		dc.b $E8, $A, 8, 0, $20
0001849F 000A 1000 08               		dc.b 0,	$A, $10, 0, 8
000184A4 000A 1800 20               		dc.b 0,	$A, $18, 0, $20
000184A9 06                         @gap9:		dc.b 6
000184AA D805 182A 18               		dc.b $D8, 5, $18, $2A, $18
000184AF E803 1826 28               		dc.b $E8, 3, $18, $26, $28
000184B4 DA0A 0000 06               		dc.b $DA, $A, 0, 0, 6
000184B9 DA0A 0800 1E               		dc.b $DA, $A, 8, 0, $1E
000184BE F20A 1000 06               		dc.b $F2, $A, $10, 0, 6
000184C3 F20A 1800 1E               		dc.b $F2, $A, $18, 0, $1E
000184C8 06                         @gapA:		dc.b 6
000184C9 D009 1834 00               		dc.b $D0, 9, $18, $34, 0
000184CE E806 182E 20               		dc.b $E8, 6, $18, $2E, $20
000184D3 D00A 0000 00               		dc.b $D0, $A, 0, 0, 0
000184D8 D00A 0800 18               		dc.b $D0, $A, 8, 0, $18
000184DD E80A 1000 00               		dc.b $E8, $A, $10, 0, 0
000184E2 E80A 1800 18               		dc.b $E8, $A, $18, 0, $18
000184E7 06                         @gapB:		dc.b 6
000184E8 D008 1842 F8               		dc.b $D0, 8, $18, $42, $F8
000184ED D807 183A 18               		dc.b $D8, 7, $18, $3A, $18
000184F2 CA0A 0000 F6               		dc.b $CA, $A, 0, 0, $F6
000184F7 CA0A 0800 0E               		dc.b $CA, $A, 8, 0, $E
000184FC E20A 1000 F6               		dc.b $E2, $A, $10, 0, $F6
00018501 E20A 1800 0E               		dc.b $E2, $A, $18, 0, $E
00018506 06                         @gapC:		dc.b 6
00018507 D005 1045 E8               		dc.b $D0, 5, $10, $45, $E8
0001850C D005 1845 08               		dc.b $D0, 5, $18, $45, 8
00018511 C80A 0000 E8               		dc.b $C8, $A, 0, 0, $E8
00018516 C80A 0800 00               		dc.b $C8, $A, 8, 0, 0
0001851B E00A 1000 E8               		dc.b $E0, $A, $10, 0, $E8
00018520 E00A 1800 00               		dc.b $E0, $A, $18, 0, 0
00018525 06                         @gapD:		dc.b 6
00018526 D807 103A D8               		dc.b $D8, 7, $10, $3A, $D8
0001852B D008 1042 F0               		dc.b $D0, 8, $10, $42, $F0
00018530 CA0A 0000 DA               		dc.b $CA, $A, 0, 0, $DA
00018535 CA0A 0800 F2               		dc.b $CA, $A, 8, 0, $F2
0001853A E20A 1000 DA               		dc.b $E2, $A, $10, 0, $DA
0001853F E20A 1800 F2               		dc.b $E2, $A, $18, 0, $F2
00018544 06                         @gapE:		dc.b 6
00018545 E806 102E D0               		dc.b $E8, 6, $10, $2E, $D0
0001854A D009 1034 E8               		dc.b $D0, 9, $10, $34, $E8
0001854F D00A 0000 D0               		dc.b $D0, $A, 0, 0, $D0
00018554 D00A 0800 E8               		dc.b $D0, $A, 8, 0, $E8
00018559 E80A 1000 D0               		dc.b $E8, $A, $10, 0, $D0
0001855E E80A 1800 E8               		dc.b $E8, $A, $18, 0, $E8
00018563 06                         @gapF:		dc.b 6
00018564 E803 1026 D0               		dc.b $E8, 3, $10, $26, $D0
00018569 D805 102A D8               		dc.b $D8, 5, $10, $2A, $D8
0001856E DA0A 0000 CA               		dc.b $DA, $A, 0, 0, $CA
00018573 DA0A 0800 E2               		dc.b $DA, $A, 8, 0, $E2
00018578 F20A 1000 CA               		dc.b $F2, $A, $10, 0, $CA
0001857D F20A 1800 E2               		dc.b $F2, $A, $18, 0, $E2
00018582 0C                         @circle:	dc.b $C
00018583 C80D 0009 E0               		dc.b $C8, $D, 0, 9, $E0
00018588 D00A 0011 D0               		dc.b $D0, $A, 0, $11, $D0
0001858D E007 001A C8               		dc.b $E0, 7, 0,	$1A, $C8
00018592 C80D 0809 00               		dc.b $C8, $D, 8, 9, 0
00018597 D00A 0811 18               		dc.b $D0, $A, 8, $11, $18
0001859C E007 081A 28               		dc.b $E0, 7, 8,	$1A, $28
000185A1 0007 101A C8               		dc.b 0,	7, $10,	$1A, $C8
000185A6 180A 1011 D0               		dc.b $18, $A, $10, $11,	$D0
000185AB 280D 1009 E0               		dc.b $28, $D, $10, 9, $E0
000185B0 280D 1809 00               		dc.b $28, $D, $18, 9, 0
000185B5 180A 1811 18               		dc.b $18, $A, $18, $11,	$18
000185BA 0007 181A 28               		dc.b 0,	7, $18,	$1A, $28
000185C0 00                         		even
000185C0 00                         		even
000185C0                            		include	"_incObj\67 Running Disc.asm"
000185C0                            ; ---------------------------------------------------------------------------
000185C0                            ; Object 67 - disc that	you run	around (SBZ)
000185C0                            ; ---------------------------------------------------------------------------
000185C0                            
000185C0                            RunningDisc:
000185C0 7000                       		moveq	#0,d0
000185C2 1028 0024                  		move.b	obRoutine(a0),d0
000185C6 323B 0000                  		move.w	Disc_Index(pc,d0.w),d1
000185CA 4EFB 1000                  		jmp	Disc_Index(pc,d1.w)
000185CE                            ; ===========================================================================
000185CE 0000                       Disc_Index:	dc.w Disc_Main-Disc_Index
000185D0 0000                       		dc.w Disc_Action-Disc_Index
000185D2                            
000185D2 =00000032                  disc_origX:	equ $32		; original x-axis position
000185D2 =00000030                  disc_origY:	equ $30		; original y-axis position
000185D2                            ; ===========================================================================
000185D2                            
000185D2                            Disc_Main:	; Routine 0
000185D2 5428 0024                  		addq.b	#2,obRoutine(a0)
000185D6 217C 0000 0000 0004        		move.l	#Map_Disc,obMap(a0)
000185DE 317C C344 0002             		move.w	#$C344,obGfx(a0)
000185E4 117C 0004 0001             		move.b	#4,obRender(a0)
000185EA 317C 0200 0018             		move.w	#$200,obPriority(a0)
000185F0 117C 0008 0014             		move.b	#8,obActWid(a0)
000185F6 3168 0008 0032             		move.w	obX(a0),disc_origX(a0)
000185FC 3168 000C 0030             		move.w	obY(a0),disc_origY(a0)
00018602 117C 0018 0034             		move.b	#$18,$34(a0)
00018608 117C 0048 0038             		move.b	#$48,$38(a0)
0001860E 1228 0028                  		move.b	obSubtype(a0),d1 ; get object type
00018612 0201 000F                  		andi.b	#$F,d1		; read only the	2nd digit
00018616 6700                       		beq.s	@typeis0	; branch if 0
00018618 117C 0010 0034             		move.b	#$10,$34(a0)
0001861E 117C 0038 0038             		move.b	#$38,$38(a0)
00018624                            
00018624                            	@typeis0:
00018624 1228 0028                  		move.b	obSubtype(a0),d1 ; get object type
00018628 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
0001862C 4881                       		ext.w	d1
0001862E E741                       		asl.w	#3,d1
00018630 3141 0036                  		move.w	d1,$36(a0)
00018634 1028 0022                  		move.b	obStatus(a0),d0
00018638 E418                       		ror.b	#2,d0
0001863A 0200 00C0                  		andi.b	#$C0,d0
0001863E 1140 0026                  		move.b	d0,obAngle(a0)
00018642                            
00018642                            Disc_Action:	; Routine 2
00018642 6100 0000                  		bsr.w	Disc_MoveSonic
00018646 6100 0000                  		bsr.w	Disc_MoveSpot
0001864A 6000 0000                  		bra.w	Disc_ChkDel
0001864E                            ; ===========================================================================
0001864E                            
0001864E                            Disc_MoveSonic:
0001864E 7400                       		moveq	#0,d2
00018650 1428 0038                  		move.b	$38(a0),d2
00018654 3602                       		move.w	d2,d3
00018656 D643                       		add.w	d3,d3
00018658 43F8 D000                  		lea	(v_player).w,a1
0001865C 3029 0008                  		move.w	obX(a1),d0
00018660 9068 0032                  		sub.w	disc_origX(a0),d0
00018664 D042                       		add.w	d2,d0
00018666 B043                       		cmp.w	d3,d0
00018668 6400                       		bcc.s	loc_155A8
0001866A 3229 000C                  		move.w	obY(a1),d1
0001866E 9268 0030                  		sub.w	disc_origY(a0),d1
00018672 D242                       		add.w	d2,d1
00018674 B243                       		cmp.w	d3,d1
00018676 6400                       		bcc.s	loc_155A8
00018678 0829 0001 0022             		btst	#1,obStatus(a1)
0001867E 6700                       		beq.s	loc_155B8
00018680 4228 003A                  		clr.b	$3A(a0)
00018684 4E75                       		rts	
00018686                            ; ===========================================================================
00018686                            
00018686                            loc_155A8:
00018686 4A28 003A                  		tst.b	$3A(a0)
0001868A 6700                       		beq.s	locret_155B6
0001868C 4229 0038                  		clr.b	$38(a1)
00018690 4228 003A                  		clr.b	$3A(a0)
00018694                            
00018694                            locret_155B6:
00018694 4E75                       		rts	
00018696                            ; ===========================================================================
00018696                            
00018696                            loc_155B8:
00018696 4A28 003A                  		tst.b	$3A(a0)
0001869A 6600                       		bne.s	loc_155E2
0001869C 117C 0001 003A             		move.b	#1,$3A(a0)
000186A2 0829 0002 0022             		btst	#2,obStatus(a1)
000186A8 6600                       		bne.s	loc_155D0
000186AA 4229 001C                  		clr.b	obAnim(a1)
000186AE                            
000186AE                            loc_155D0:
000186AE 08A9 0005 0022             		bclr	#5,obStatus(a1)
000186B4 137C 0001 001D             		move.b	#1,obNextAni(a1)
000186BA 137C 0001 0038             		move.b	#1,$38(a1)
000186C0                            
000186C0                            loc_155E2:
000186C0 3029 0020                  		move.w	obInertia(a1),d0
000186C4 4A68 0036                  		tst.w	$36(a0)
000186C8 6A00                       		bpl.s	loc_15608
000186CA 0C40 FC00                  		cmpi.w	#-$400,d0
000186CE 6F00                       		ble.s	loc_155FA
000186D0 337C FC00 0020             		move.w	#-$400,obInertia(a1)
000186D6 4E75                       		rts	
000186D8                            ; ===========================================================================
000186D8                            
000186D8                            loc_155FA:
000186D8 0C40 F100                  		cmpi.w	#-$F00,d0
000186DC 6C00                       		bge.s	locret_15606
000186DE 337C F100 0020             		move.w	#-$F00,obInertia(a1)
000186E4                            
000186E4                            locret_15606:
000186E4 4E75                       		rts	
000186E6                            ; ===========================================================================
000186E6                            
000186E6                            loc_15608:
000186E6 0C40 0400                  		cmpi.w	#$400,d0
000186EA 6C00                       		bge.s	loc_15616
000186EC 337C 0400 0020             		move.w	#$400,obInertia(a1)
000186F2 4E75                       		rts	
000186F4                            ; ===========================================================================
000186F4                            
000186F4                            loc_15616:
000186F4 0C40 0F00                  		cmpi.w	#$F00,d0
000186F8 6F00                       		ble.s	locret_15622
000186FA 337C 0F00 0020             		move.w	#$F00,obInertia(a1)
00018700                            
00018700                            locret_15622:
00018700 4E75                       		rts	
00018702                            ; ===========================================================================
00018702                            
00018702                            Disc_MoveSpot:
00018702 3028 0036                  		move.w	$36(a0),d0
00018706 D168 0026                  		add.w	d0,obAngle(a0)
0001870A 1028 0026                  		move.b	obAngle(a0),d0
0001870E 4EB9 0000 3A36             		jsr	(CalcSine).l
00018714 3428 0030                  		move.w	disc_origY(a0),d2
00018718 3628 0032                  		move.w	disc_origX(a0),d3
0001871C 7800                       		moveq	#0,d4
0001871E 1828 0034                  		move.b	$34(a0),d4
00018722 E14C                       		lsl.w	#8,d4
00018724 2A04                       		move.l	d4,d5
00018726 C9C0                       		muls.w	d0,d4
00018728 4844                       		swap	d4
0001872A CBC1                       		muls.w	d1,d5
0001872C 4845                       		swap	d5
0001872E D842                       		add.w	d2,d4
00018730 DA43                       		add.w	d3,d5
00018732 3144 000C                  		move.w	d4,obY(a0)
00018736 3145 0008                  		move.w	d5,obX(a0)
0001873A 4E75                       		rts	
0001873C                            ; ===========================================================================
0001873C                            
0001873C                            Disc_ChkDel:
00018758 4EF9 0000 F97C             		jmp	(DisplaySprite).l
0001875E                            
0001875E                            	@delete:
0001875E 4EF9 0000 F9BC             		jmp	(DeleteObject).l
0001875E 4EF9 0000 F9BC             		jmp	(DeleteObject).l
00018764                            Map_Disc:	include	"_maps\Running Disc.asm"
00018764                            ; ---------------------------------------------------------------------------
00018764                            ; Sprite mappings - disc that you run around (SBZ)
00018764                            ; (It's just a small blob that moves around in a circle. The disc itself is
00018764                            ; part of the level tiles.)
00018764                            ; ---------------------------------------------------------------------------
00018764                            Map_Disc_internal:
00018764 0000                       		dc.w @spot-Map_Disc_internal
00018766 01                         @spot:		dc.b 1
00018767 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0001876C                            		even
0001876C                            		even
0001876C                            		include	"_incObj\68 Conveyor Belt.asm"
0001876C                            ; ---------------------------------------------------------------------------
0001876C                            ; Object 68 - conveyor belts (SBZ)
0001876C                            ; ---------------------------------------------------------------------------
0001876C                            
0001876C                            Conveyor:
0001876C 7000                       		moveq	#0,d0
0001876E 1028 0024                  		move.b	obRoutine(a0),d0
00018772 323B 0000                  		move.w	Conv_Index(pc,d0.w),d1
00018776 4EFB 1000                  		jmp	Conv_Index(pc,d1.w)
0001877A                            ; ===========================================================================
0001877A 0000                       Conv_Index:	dc.w Conv_Main-Conv_Index
0001877C 0000                       		dc.w Conv_Action-Conv_Index
0001877E                            
0001877E =00000036                  conv_speed:	equ $36
0001877E =00000038                  conv_width:	equ $38
0001877E                            ; ===========================================================================
0001877E                            
0001877E                            Conv_Main:	; Routine 0
0001877E 5428 0024                  		addq.b	#2,obRoutine(a0)
00018782 117C 0080 0038             		move.b	#128,conv_width(a0) ; set width to 128 pixels
00018788 1228 0028                  		move.b	obSubtype(a0),d1 ; get object type
0001878C 0201 000F                  		andi.b	#$F,d1		; read only the	2nd digit
00018790 6700                       		beq.s	@typeis0	; if zero, branch
00018792 117C 0038 0038             		move.b	#56,conv_width(a0) ; set width to 56 pixels
00018798                            
00018798                            	@typeis0:
00018798 1228 0028                  		move.b	obSubtype(a0),d1 ; get object type
0001879C 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
000187A0 4881                       		ext.w	d1
000187A2 E841                       		asr.w	#4,d1
000187A4 3141 0036                  		move.w	d1,conv_speed(a0) ; set belt speed
000187A8                            
000187A8                            Conv_Action:	; Routine 2
000187A8 6100                       		bsr.s	@movesonic
000187C6 4E75                       		rts	
000187C8                            
000187C8                            	@delete:
000187C8 4EF9 0000 F9BC             		jmp	(DeleteObject).l
000187CE                            ; ===========================================================================
000187CE                            
000187CE                            @movesonic:
000187CE 7400                       		moveq	#0,d2
000187D0 1428 0038                  		move.b	conv_width(a0),d2
000187D4 3602                       		move.w	d2,d3
000187D6 D643                       		add.w	d3,d3
000187D8 43F8 D000                  		lea	(v_player).w,a1
000187DC 3029 0008                  		move.w	obX(a1),d0
000187E0 9068 0008                  		sub.w	obX(a0),d0
000187E4 D042                       		add.w	d2,d0
000187E6 B043                       		cmp.w	d3,d0
000187E8 6400                       		bcc.s	@notonconveyor
000187EA 3229 000C                  		move.w	obY(a1),d1
000187EE 9268 000C                  		sub.w	obY(a0),d1
000187F2 0641 0030                  		addi.w	#$30,d1
000187F6 0C41 0030                  		cmpi.w	#$30,d1
000187FA 6400                       		bcc.s	@notonconveyor
000187FC 0829 0001 0022             		btst	#1,obStatus(a1)
00018802 6600                       		bne.s	@notonconveyor
00018804 3028 0036                  		move.w	conv_speed(a0),d0
00018808 D169 0008                  		add.w	d0,obX(a1)
0001880C                            
0001880C                            	@notonconveyor:
0001880C 4E75                       		rts	
0001880C 4E75                       		rts	
0001880E                            		include	"_incObj\69 SBZ Spinning Platforms.asm"
0001880E                            ; ---------------------------------------------------------------------------
0001880E                            ; Object 69 - spinning platforms and trapdoors (SBZ)
0001880E                            ; ---------------------------------------------------------------------------
0001880E                            
0001880E                            SpinPlatform:
0001880E 7000                       		moveq	#0,d0
00018810 1028 0024                  		move.b	obRoutine(a0),d0
00018814 323B 0000                  		move.w	Spin_Index(pc,d0.w),d1
00018818 4EFB 1000                  		jmp	Spin_Index(pc,d1.w)
0001881C                            ; ===========================================================================
0001881C 0000                       Spin_Index:	dc.w Spin_Main-Spin_Index
0001881E 0000                       		dc.w Spin_Trapdoor-Spin_Index
00018820 0000                       		dc.w Spin_Spinner-Spin_Index
00018822                            
00018822 =00000030                  spin_timer:	equ $30		; time counter until change
00018822 =00000032                  spin_timelen:	equ $32		; time between changes (general)
00018822                            ; ===========================================================================
00018822                            
00018822                            Spin_Main:	; Routine 0
00018822 5428 0024                  		addq.b	#2,obRoutine(a0)
00018826 217C 0000 0000 0004        		move.l	#Map_Trap,obMap(a0)
0001882E 317C 4492 0002             		move.w	#$4492,obGfx(a0)
00018834 0028 0004 0001             		ori.b	#4,obRender(a0)
0001883A 117C 0080 0014             		move.b	#$80,obActWid(a0)
00018840 7000                       		moveq	#0,d0
00018842 1028 0028                  		move.b	obSubtype(a0),d0
00018846 0240 000F                  		andi.w	#$F,d0
0001884A C0FC 003C                  		mulu.w	#$3C,d0
0001884E 3140 0032                  		move.w	d0,spin_timelen(a0)
00018852 4A28 0028                  		tst.b	obSubtype(a0)	; is subtype $8x?
00018856 6A00                       		bpl.s	Spin_Trapdoor	; if not, branch
00018858                            
00018858 5428 0024                  		addq.b	#2,obRoutine(a0) ; goto Spin_Spinner next
0001885C 217C 0000 0000 0004        		move.l	#Map_Spin,obMap(a0)
00018864 317C 04DF 0002             		move.w	#$4DF,obGfx(a0)
0001886A 117C 0010 0014             		move.b	#$10,obActWid(a0)
00018870 117C 0002 001C             		move.b	#2,obAnim(a0)
00018876 7000                       		moveq	#0,d0
00018878 1028 0028                  		move.b	obSubtype(a0),d0 ; get object type
0001887C 3200                       		move.w	d0,d1
0001887E 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
00018882 C0FC 0006                  		mulu.w	#6,d0		; multiply by 6
00018886 3140 0030                  		move.w	d0,spin_timer(a0)
0001888A 3140 0032                  		move.w	d0,spin_timelen(a0) ; set time delay
0001888E 0241 0070                  		andi.w	#$70,d1
00018892 0641 0010                  		addi.w	#$10,d1
00018896 E549                       		lsl.w	#2,d1
00018898 5341                       		subq.w	#1,d1
0001889A 3141 0036                  		move.w	d1,$36(a0)
0001889E 6000                       		bra.s	Spin_Spinner
000188A0                            ; ===========================================================================
000188A0                            
000188A0                            Spin_Trapdoor:	; Routine 2
000188A0 5368 0030                  		subq.w	#1,spin_timer(a0) ; decrement timer
000188A4 6A00                       		bpl.s	@animate	; if time remains, branch
000188A6                            
000188A6 3168 0032 0030             		move.w	spin_timelen(a0),spin_timer(a0)
000188AC 0868 0000 001C             		bchg	#0,obAnim(a0)
000188B2 4A28 0001                  		tst.b	obRender(a0)
000188B6 6A00                       		bpl.s	@animate
000188C2                            
000188C2                            	@animate:
000188C2 43F9 0000 0000             		lea	(Ani_Spin).l,a1
000188C8 4EB9 0000 CA28             		jsr	(AnimateSprite).l
000188CE 4A28 001A                  		tst.b	obFrame(a0)	; is frame number 0 displayed?
000188D2 6600                       		bne.s	@notsolid	; if not, branch
000188D4 323C 004B                  		move.w	#$4B,d1
000188D8 343C 000C                  		move.w	#$C,d2
000188DC 3602                       		move.w	d2,d3
000188DE 5243                       		addq.w	#1,d3
000188E0 3828 0008                  		move.w	obX(a0),d4
000188E4 6100 94A4                  		bsr.w	SolidObject
000188E8 6000 9008                  		bra.w	RememberState
000188EC                            ; ===========================================================================
000188EC                            
000188EC                            @notsolid:
000188EC 0828 0003 0022             		btst	#3,obStatus(a0) ; is Sonic standing on the trapdoor?
000188F2 6700                       		beq.s	@display	; if not, branch
000188F4 43F8 D000                  		lea	(v_player).w,a1
000188F8 08A9 0003 0022             		bclr	#3,obStatus(a1)
000188FE 08A8 0003 0022             		bclr	#3,obStatus(a0)
00018904 4228 0025                  		clr.b	obSolid(a0)
00018908                            
00018908                            	@display:
00018908 6000 8FE8                  		bra.w	RememberState
0001890C                            ; ===========================================================================
0001890C                            
0001890C                            Spin_Spinner:	; Routine 4
0001890C 3038 FE04                  		move.w	(v_framecount).w,d0
00018910 C068 0036                  		and.w	$36(a0),d0
00018914 6600                       		bne.s	@delay
00018916 117C 0001 0034             		move.b	#1,$34(a0)
0001891C                            
0001891C                            	@delay:
0001891C 4A28 0034                  		tst.b	$34(a0)
00018920 6700                       		beq.s	@animate
00018922 5368 0030                  		subq.w	#1,spin_timer(a0)
00018926 6A00                       		bpl.s	@animate
00018928 3168 0032 0030             		move.w	spin_timelen(a0),spin_timer(a0)
0001892E 4228 0034                  		clr.b	$34(a0)
00018932 0868 0000 001C             		bchg	#0,obAnim(a0)
00018938                            
00018938                            	@animate:
00018938 43F9 0000 0000             		lea	(Ani_Spin).l,a1
0001893E 4EB9 0000 CA28             		jsr	(AnimateSprite).l
00018944 4A28 001A                  		tst.b	obFrame(a0)	; check	if frame number	0 is displayed
00018948 6600                       		bne.s	@notsolid2	; if not, branch
0001894A 323C 001B                  		move.w	#$1B,d1
0001894E 343C 0007                  		move.w	#7,d2
00018952 3602                       		move.w	d2,d3
00018954 5243                       		addq.w	#1,d3
00018956 3828 0008                  		move.w	obX(a0),d4
0001895A 6100 942E                  		bsr.w	SolidObject
0001895E 6000 8F92                  		bra.w	RememberState
00018962                            ; ===========================================================================
00018962                            
00018962                            @notsolid2:
00018962 0828 0003 0022             		btst	#3,obStatus(a0)
00018968 6700                       		beq.s	@display
0001896A 43F8 D000                  		lea	(v_player).w,a1
0001896E 08A9 0003 0022             		bclr	#3,obStatus(a1)
00018974 08A8 0003 0022             		bclr	#3,obStatus(a0)
0001897A 4228 0025                  		clr.b	obSolid(a0)
0001897E                            
0001897E                            	@display:
0001897E 6000 8F72                  		bra.w	RememberState
0001897E 6000 8F72                  		bra.w	RememberState
00018982                            		include	"_anim\SBZ Spinning Platforms.asm"
00018982                            ; ---------------------------------------------------------------------------
00018982                            ; Animation script - trapdoor (SBZ)
00018982                            ; ---------------------------------------------------------------------------
00018982 0000                       Ani_Spin:	dc.w @trapopen-Ani_Spin
00018984 0000                       		dc.w @trapclose-Ani_Spin
00018986 0000                       		dc.w @spin1-Ani_Spin
00018988 0000                       		dc.w @spin2-Ani_Spin
0001898A 0300 0102 FE01             @trapopen:	dc.b 3,	0, 1, 2, afBack, 1
00018990 0302 0100 FE01             @trapclose:	dc.b 3,	2, 1, 0, afBack, 1
00018996 0100 0102 0304 4342 4140+  @spin1:		dc.b 1,	0, 1, 2, 3, 4, $43, $42, $41, $40, $61,	$62, $63, $64, $23, $22, $21, 0, afBack, 1
000189AA 0100 0102 0304 4342 4140+  @spin2:		dc.b 1,	0, 1, 2, 3, 4, $43, $42, $41, $40, $61,	$62, $63, $64, $23, $22, $21, 0, afBack, 1
000189BE                            		even
000189BE                            		even
000189BE                            Map_Trap:	include	"_maps\Trapdoor.asm"
000189BE                            ; ---------------------------------------------------------------------------
000189BE                            ; Sprite mappings - trapdoor (SBZ)
000189BE                            ; ---------------------------------------------------------------------------
000189BE                            Map_Trap_internal:
000189BE 0000                       		dc.w @closed-Map_Trap_internal
000189C0 0000                       		dc.w @half-Map_Trap_internal
000189C2 0000                       		dc.w @open-Map_Trap_internal
000189C4 04                         @closed:	dc.b 4
000189C5 F40E 0000 C0               		dc.b $F4, $E, 0, 0, $C0
000189CA F40E 0800 E0               		dc.b $F4, $E, 8, 0, $E0
000189CF F40E 0000 00               		dc.b $F4, $E, 0, 0, 0
000189D4 F40E 0800 20               		dc.b $F4, $E, 8, 0, $20
000189D9 08                         @half:		dc.b 8
000189DA F20F 000C B6               		dc.b $F2, $F, 0, $C, $B6
000189DF 1A0F 180C D6               		dc.b $1A, $F, $18, $C, $D6
000189E4 020A 001C D6               		dc.b 2,	$A, 0, $1C, $D6
000189E9 120A 181C BE               		dc.b $12, $A, $18, $1C,	$BE
000189EE F20F 080C 2A               		dc.b $F2, $F, 8, $C, $2A
000189F3 1A0F 100C 0A               		dc.b $1A, $F, $10, $C, $A
000189F8 020A 081C 12               		dc.b 2,	$A, 8, $1C, $12
000189FD 120A 101C 2A               		dc.b $12, $A, $10, $1C,	$2A
00018A02 04                         @open:		dc.b 4
00018A03 000B 0025 B4               		dc.b 0,	$B, 0, $25, $B4
00018A08 200B 1025 B4               		dc.b $20, $B, $10, $25,	$B4
00018A0D 000B 0025 34               		dc.b 0,	$B, 0, $25, $34
00018A12 200B 1025 34               		dc.b $20, $B, $10, $25,	$34
00018A18 00                         		even
00018A18 00                         		even
00018A18                            Map_Spin:	include	"_maps\SBZ Spinning Platforms.asm"
00018A18                            ; ---------------------------------------------------------------------------
00018A18                            ; Sprite mappings - spinning platforms (SBZ)
00018A18                            ; ---------------------------------------------------------------------------
00018A18                            Map_Spin_internal:
00018A18 0000                       		dc.w @flat-Map_Spin_internal
00018A1A 0000                       		dc.w @spin1-Map_Spin_internal
00018A1C 0000                       		dc.w @spin2-Map_Spin_internal
00018A1E 0000                       		dc.w @spin3-Map_Spin_internal
00018A20 0000                       		dc.w @spin4-Map_Spin_internal
00018A22 02                         @flat:		dc.b 2
00018A23 F805 0000 F0               		dc.b $F8, 5, 0,	0, $F0
00018A28 F805 0800 00               		dc.b $F8, 5, 8,	0, 0
00018A2D 02                         @spin1:		dc.b 2
00018A2E F00D 0014 F0               		dc.b $F0, $D, 0, $14, $F0
00018A33 000D 001C F0               		dc.b 0,	$D, 0, $1C, $F0
00018A38 02                         @spin2:		dc.b 2
00018A39 F009 0004 F0               		dc.b $F0, 9, 0,	4, $F0
00018A3E 0009 000A F8               		dc.b 0,	9, 0, $A, $F8
00018A43 02                         @spin3:		dc.b 2
00018A44 F009 0024 F0               		dc.b $F0, 9, 0,	$24, $F0
00018A49 0009 002A F8               		dc.b 0,	9, 0, $2A, $F8
00018A4E 02                         @spin4:		dc.b 2
00018A4F F005 0010 F8               		dc.b $F0, 5, 0,	$10, $F8
00018A54 0005 1010 F8               		dc.b 0,	5, $10,	$10, $F8
00018A5A 00                         		even
00018A5A 00                         		even
00018A5A                            		include	"_incObj\6A Saws and Pizza Cutters.asm"
00018A5A                            ; ---------------------------------------------------------------------------
00018A5A                            ; Object 6A - ground saws and pizza cutters (SBZ)
00018A5A                            ; ---------------------------------------------------------------------------
00018A5A                            
00018A5A                            Saws:
00018A5A 7000                       		moveq	#0,d0
00018A5C 1028 0024                  		move.b	obRoutine(a0),d0
00018A60 323B 0000                  		move.w	Saw_Index(pc,d0.w),d1
00018A64 4EFB 1000                  		jmp	Saw_Index(pc,d1.w)
00018A68                            ; ===========================================================================
00018A68 0000                       Saw_Index:	dc.w Saw_Main-Saw_Index
00018A6A 0000                       		dc.w Saw_Action-Saw_Index
00018A6C                            
00018A6C =0000003A                  saw_origX:	equ $3A		; original x-axis position
00018A6C =00000038                  saw_origY:	equ $38		; original y-axis position
00018A6C =0000003D                  saw_here:	equ $3D		; flag set when the ground saw appears
00018A6C                            ; ===========================================================================
00018A6C                            
00018A6C                            Saw_Main:	; Routine 0
00018A6C 5428 0024                  		addq.b	#2,obRoutine(a0)
00018A70 217C 0000 0000 0004        		move.l	#Map_Saw,obMap(a0)
00018A78 317C 43AD 0002             		move.w	#$43AD,obGfx(a0)
00018A7E 117C 0004 0001             		move.b	#4,obRender(a0)
00018A84 317C 0200 0018             		move.w	#$200,obPriority(a0)
00018A8A 117C 0020 0014             		move.b	#$20,obActWid(a0)
00018A90 3168 0008 003A             		move.w	obX(a0),saw_origX(a0)
00018A96 3168 000C 0038             		move.w	obY(a0),saw_origY(a0)
00018A9C 0C28 0003 0028             		cmpi.b	#3,obSubtype(a0) ; is object a ground saw?
00018AA2 6400                       		bcc.s	Saw_Action	; if yes, branch
00018AA4 117C 00A2 0020             		move.b	#$A2,obColType(a0)
00018AAA                            
00018AAA                            Saw_Action:	; Routine 2
00018AAA 7000                       		moveq	#0,d0
00018AAC 1028 0028                  		move.b	obSubtype(a0),d0
00018AB0 0240 0007                  		andi.w	#7,d0
00018AB4 D040                       		add.w	d0,d0
00018AB6 323B 0000                  		move.w	@index(pc,d0.w),d1
00018ABA 4EBB 1000                  		jsr	@index(pc,d1.w)
00018ADA 4EF9 0000 F97C             		jmp	(DisplaySprite).l
00018AE0                            
00018AE0                            	@delete:
00018AE0 4EF9 0000 F9BC             		jmp	(DeleteObject).l
00018AE6                            ; ===========================================================================
00018AE6 0000 0000 0000             @index:		dc.w @type00-@index, @type01-@index, @type02-@index ; pizza cutters
00018AEC 0000 0000                  		dc.w @type03-@index, @type04-@index ; ground saws
00018AF0                            ; ===========================================================================
00018AF0                            
00018AF0                            @type00:
00018AF0 4E75                       		rts			; doesn't move
00018AF2                            ; ===========================================================================
00018AF2                            
00018AF2                            @type01:
00018AF2 323C 0060                  		move.w	#$60,d1
00018AF6 7000                       		moveq	#0,d0
00018AF8 1038 FE6C                  		move.b	(v_oscillate+$E).w,d0
00018AFC 0828 0000 0022             		btst	#0,obStatus(a0)
00018B02 6700                       		beq.s	@noflip01
00018B04 4440                       		neg.w	d0
00018B06 D041                       		add.w	d1,d0
00018B08                            
00018B08                            	@noflip01:
00018B08 3228 003A                  		move.w	saw_origX(a0),d1
00018B0C 9240                       		sub.w	d0,d1
00018B0E 3141 0008                  		move.w	d1,obX(a0)	; move saw sideways
00018B12                            
00018B12 5328 001E                  		subq.b	#1,obTimeFrame(a0)
00018B16 6A00                       		bpl.s	@sameframe01
00018B18 117C 0002 001E             		move.b	#2,obTimeFrame(a0) ; time between frame changes
00018B1E 0868 0000 001A             		bchg	#0,obFrame(a0)	; change frame
00018B24                            
00018B24                            	@sameframe01:
00018B24 4A28 0001                  		tst.b	obRender(a0)
00018B28 6A00                       		bpl.s	@nosound01
00018B2A 3038 FE04                  		move.w	(v_framecount).w,d0
00018B2E 0240 000F                  		andi.w	#$F,d0
00018B32 6600                       		bne.s	@nosound01
00018B3E                            
00018B3E                            	@nosound01:
00018B3E 4E75                       		rts	
00018B40                            ; ===========================================================================
00018B40                            
00018B40                            @type02:
00018B40 323C 0030                  		move.w	#$30,d1
00018B44 7000                       		moveq	#0,d0
00018B46 1038 FE64                  		move.b	(v_oscillate+6).w,d0
00018B4A 0828 0000 0022             		btst	#0,obStatus(a0)
00018B50 6700                       		beq.s	@noflip02
00018B52 4440                       		neg.w	d0
00018B54 0640 0080                  		addi.w	#$80,d0
00018B58                            
00018B58                            	@noflip02:
00018B58 3228 0038                  		move.w	saw_origY(a0),d1
00018B5C 9240                       		sub.w	d0,d1
00018B5E 3141 000C                  		move.w	d1,obY(a0)	; move saw vertically
00018B62 5328 001E                  		subq.b	#1,obTimeFrame(a0)
00018B66 6A00                       		bpl.s	@sameframe02
00018B68 117C 0002 001E             		move.b	#2,obTimeFrame(a0)
00018B6E 0868 0000 001A             		bchg	#0,obFrame(a0)
00018B74                            
00018B74                            	@sameframe02:
00018B74 4A28 0001                  		tst.b	obRender(a0)
00018B78 6A00                       		bpl.s	@nosound02
00018B7A 1038 FE64                  		move.b	(v_oscillate+6).w,d0
00018B7E 0C00 0018                  		cmpi.b	#$18,d0
00018B82 6600                       		bne.s	@nosound02
00018B8E                            
00018B8E                            	@nosound02:
00018B8E 4E75                       		rts	
00018B90                            ; ===========================================================================
00018B90                            
00018B90                            @type03:
00018B90 4A28 003D                  		tst.b	saw_here(a0)	; has the saw appeared already?
00018B94 6600                       		bne.s	@here03		; if yes, branch
00018B96                            
00018B96 3038 D008                  		move.w	(v_player+obX).w,d0
00018B9A 0440 00C0                  		subi.w	#$C0,d0
00018B9E 6500                       		bcs.s	@nosaw03x
00018BA0 9068 0008                  		sub.w	obX(a0),d0
00018BA4 6500                       		bcs.s	@nosaw03x
00018BA6 3038 D00C                  		move.w	(v_player+obY).w,d0
00018BAA 0440 0080                  		subi.w	#$80,d0
00018BAE B068 000C                  		cmp.w	obY(a0),d0
00018BB2 6400                       		bcc.s	@nosaw03y
00018BB4 0640 0100                  		addi.w	#$100,d0
00018BB8 B068 000C                  		cmp.w	obY(a0),d0
00018BBC 6500                       		bcs.s	@nosaw03y
00018BBE 117C 0001 003D             		move.b	#1,saw_here(a0)
00018BC4 317C 0600 0010             		move.w	#$600,obVelX(a0) ; move object to the right
00018BCA 117C 00A2 0020             		move.b	#$A2,obColType(a0)
00018BD0 117C 0002 001A             		move.b	#2,obFrame(a0)
00018BE0                            
00018BE0                            	@nosaw03x:
00018BE0 588F                       		addq.l	#4,sp
00018BE2                            
00018BE2                            	@nosaw03y:
00018BE2 4E75                       		rts	
00018BE4                            ; ===========================================================================
00018BE4                            
00018BE4                            @here03:
00018BE4 4EB9 0000 F968             		jsr	(SpeedToPos).l
00018BEA 3168 0008 003A             		move.w	obX(a0),saw_origX(a0)
00018BF0 5328 001E                  		subq.b	#1,obTimeFrame(a0)
00018BF4 6A00                       		bpl.s	@sameframe03
00018BF6 117C 0002 001E             		move.b	#2,obTimeFrame(a0)
00018BFC 0868 0000 001A             		bchg	#0,obFrame(a0)
00018C02                            
00018C02                            	@sameframe03:
00018C02 4E75                       		rts	
00018C04                            ; ===========================================================================
00018C04                            
00018C04                            @type04:
00018C04 4A28 003D                  		tst.b	saw_here(a0)
00018C08 6600                       		bne.s	@here04
00018C0A 3038 D008                  		move.w	(v_player+obX).w,d0
00018C0E 0640 00E0                  		addi.w	#$E0,d0
00018C12 9068 0008                  		sub.w	obX(a0),d0
00018C16 6400                       		bcc.s	@nosaw04x
00018C18 3038 D00C                  		move.w	(v_player+obY).w,d0
00018C1C 0440 0080                  		subi.w	#$80,d0
00018C20 B068 000C                  		cmp.w	obY(a0),d0
00018C24 6400                       		bcc.s	@nosaw04y
00018C26 0640 0100                  		addi.w	#$100,d0
00018C2A B068 000C                  		cmp.w	obY(a0),d0
00018C2E 6500                       		bcs.s	@nosaw04y
00018C30 117C 0001 003D             		move.b	#1,saw_here(a0)
00018C36 317C FA00 0010             		move.w	#-$600,obVelX(a0) ; move object to the left
00018C3C 117C 00A2 0020             		move.b	#$A2,obColType(a0)
00018C42 117C 0002 001A             		move.b	#2,obFrame(a0)
00018C52                            
00018C52                            	@nosaw04x:
00018C52 588F                       		addq.l	#4,sp
00018C54                            
00018C54                            	@nosaw04y:
00018C54 4E75                       		rts	
00018C56                            ; ===========================================================================
00018C56                            
00018C56                            @here04:
00018C56 4EB9 0000 F968             		jsr	(SpeedToPos).l
00018C5C 3168 0008 003A             		move.w	obX(a0),saw_origX(a0)
00018C62 5328 001E                  		subq.b	#1,obTimeFrame(a0)
00018C66 6A00                       		bpl.s	@sameframe04
00018C68 117C 0002 001E             		move.b	#2,obTimeFrame(a0)
00018C6E 0868 0000 001A             		bchg	#0,obFrame(a0)
00018C74                            
00018C74                            	@sameframe04:
00018C74 4E75                       		rts	
00018C74 4E75                       		rts	
00018C76                            Map_Saw:	include	"_maps\Saws and Pizza Cutters.asm"
00018C76                            ; ---------------------------------------------------------------------------
00018C76                            ; Sprite mappings - ground saws	and pizza cutters (SBZ)
00018C76                            ; ---------------------------------------------------------------------------
00018C76                            Map_Saw_internal:
00018C76 0000                       		dc.w @pizzacutter1-Map_Saw_internal
00018C78 0000                       		dc.w @pizzacutter2-Map_Saw_internal
00018C7A 0000                       		dc.w @groundsaw1-Map_Saw_internal
00018C7C 0000                       		dc.w @groundsaw2-Map_Saw_internal
00018C7E 07                         @pizzacutter1:	dc.b 7
00018C7F C401 0020 FC               		dc.b $C4, 1, 0,	$20, $FC
00018C84 D401 0020 FC               		dc.b $D4, 1, 0,	$20, $FC
00018C89 E403 0020 FC               		dc.b $E4, 3, 0,	$20, $FC
00018C8E E00F 0000 E0               		dc.b $E0, $F, 0, 0, $E0
00018C93 E00F 0800 00               		dc.b $E0, $F, 8, 0, 0
00018C98 000F 1000 E0               		dc.b 0,	$F, $10, 0, $E0
00018C9D 000F 1800 00               		dc.b 0,	$F, $18, 0, 0
00018CA2 07                         @pizzacutter2:	dc.b 7
00018CA3 C401 0020 FC               		dc.b $C4, 1, 0,	$20, $FC
00018CA8 D401 0020 FC               		dc.b $D4, 1, 0,	$20, $FC
00018CAD E403 0020 FC               		dc.b $E4, 3, 0,	$20, $FC
00018CB2 E00F 0010 E0               		dc.b $E0, $F, 0, $10, $E0
00018CB7 E00F 0810 00               		dc.b $E0, $F, 8, $10, 0
00018CBC 000F 1010 E0               		dc.b 0,	$F, $10, $10, $E0
00018CC1 000F 1810 00               		dc.b 0,	$F, $18, $10, 0
00018CC6 04                         @groundsaw1:	dc.b 4
00018CC7 E00F 0000 E0               		dc.b $E0, $F, 0, 0, $E0
00018CCC E00F 0800 00               		dc.b $E0, $F, 8, 0, 0
00018CD1 000F 1000 E0               		dc.b 0,	$F, $10, 0, $E0
00018CD6 000F 1800 00               		dc.b 0,	$F, $18, 0, 0
00018CDB 04                         @groundsaw2:	dc.b 4
00018CDC E00F 0010 E0               		dc.b $E0, $F, 0, $10, $E0
00018CE1 E00F 0810 00               		dc.b $E0, $F, 8, $10, 0
00018CE6 000F 1010 E0               		dc.b 0,	$F, $10, $10, $E0
00018CEB 000F 1810 00               		dc.b 0,	$F, $18, $10, 0
00018CF0                            		even
00018CF0                            		even
00018CF0                            		include	"_incObj\6B SBZ Stomper and Door.asm"
00018CF0                            ; ---------------------------------------------------------------------------
00018CF0                            ; Object 6B - stomper and sliding door (SBZ)
00018CF0                            ; ---------------------------------------------------------------------------
00018CF0                            
00018CF0                            ScrapStomp:
00018CF0 7000                       		moveq	#0,d0
00018CF2 1028 0024                  		move.b	obRoutine(a0),d0
00018CF6 323B 0000                  		move.w	Sto_Index(pc,d0.w),d1
00018CFA 4EFB 1000                  		jmp	Sto_Index(pc,d1.w)
00018CFE                            ; ===========================================================================
00018CFE 0000                       Sto_Index:	dc.w Sto_Main-Sto_Index
00018D00 0000                       		dc.w Sto_Action-Sto_Index
00018D02                            
00018D02 =00000016                  sto_height:	equ $16
00018D02 =00000034                  sto_origX:	equ $34		; original x-axis position
00018D02 =00000030                  sto_origY:	equ $30		; original y-axis position
00018D02 =00000038                  sto_active:	equ $38		; flag set when a switch is pressed
00018D02                            
00018D02 400C 8001                  Sto_Var:	dc.b  $40,  $C,	$80,   1 ; width, height, ????,	type number
00018D06 1C20 3803                  		dc.b  $1C, $20,	$38,   3
00018D0A 1C20 4004                  		dc.b  $1C, $20,	$40,   4
00018D0E 1C20 6004                  		dc.b  $1C, $20,	$60,   4
00018D12 8040 0005                  		dc.b  $80, $40,	  0,   5
00018D16                            ; ===========================================================================
00018D16                            
00018D16                            Sto_Main:	; Routine 0
00018D16 5428 0024                  		addq.b	#2,obRoutine(a0)
00018D1A 7000                       		moveq	#0,d0
00018D1C 1028 0028                  		move.b	obSubtype(a0),d0
00018D20 E448                       		lsr.w	#2,d0
00018D22 0240 001C                  		andi.w	#$1C,d0
00018D26 47FB 00DA                  		lea	Sto_Var(pc,d0.w),a3
00018D2A 115B 0014                  		move.b	(a3)+,obActWid(a0)
00018D2E 115B 0016                  		move.b	(a3)+,sto_height(a0)
00018D32 E448                       		lsr.w	#2,d0
00018D34 1140 001A                  		move.b	d0,obFrame(a0)
00018D38 217C 0000 0000 0004        		move.l	#Map_Stomp,obMap(a0)
00018D40 317C 22C0 0002             		move.w	#$22C0,obGfx(a0)
00018D46 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w ; check if level is LZ/SBZ3
00018D4C 6600                       		bne.s	@isSBZ12	; if not, branch
00018D4E 08F8 0000 F7CB             		bset	#0,(v_obj6B).w
00018D54 6700                       		beq.s	@isSBZ3
00018D56                            
00018D56                            @chkdel:
00018D56 45F8 FC00                  		lea	(v_objstate).w,a2
00018D5A 7000                       		moveq	#0,d0
00018D5C 1028 0023                  		move.b	obRespawnNo(a0),d0
00018D60 6700                       		beq.s	@delete
00018D62 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00018D68                            
00018D68                            	@delete:
00018D68 4EF9 0000 F9BC             		jmp	(DeleteObject).l
00018D6E                            ; ===========================================================================
00018D6E                            
00018D6E                            @isSBZ3:
00018D6E 317C 41F0 0002             		move.w	#$41F0,obGfx(a0)
00018D74 0C68 0A80 0008             		cmpi.w	#$A80,obX(a0)
00018D7A 6600                       		bne.s	@isSBZ12
00018D7C 45F8 FC00                  		lea	(v_objstate).w,a2
00018D80 7000                       		moveq	#0,d0
00018D82 1028 0023                  		move.b	obRespawnNo(a0),d0
00018D86 6700                       		beq.s	@isSBZ12
00018D88 0832 0000 0002             		btst	#0,2(a2,d0.w)
00018D8E 6700                       		beq.s	@isSBZ12
00018D90 4238 F7CB                  		clr.b	(v_obj6B).w
00018D94 60C0                       		bra.s	@chkdel
00018D96                            ; ===========================================================================
00018D96                            
00018D96                            @isSBZ12:
00018D96 0028 0004 0001             		ori.b	#4,obRender(a0)
00018D9C 317C 0200 0018             		move.w	#$200,obPriority(a0)
00018DA2 3168 0008 0034             		move.w	obX(a0),sto_origX(a0)
00018DA8 3168 000C 0030             		move.w	obY(a0),sto_origY(a0)
00018DAE 7000                       		moveq	#0,d0
00018DB0 101B                       		move.b	(a3)+,d0
00018DB2 3140 003C                  		move.w	d0,$3C(a0)
00018DB6 7000                       		moveq	#0,d0
00018DB8 1028 0028                  		move.b	obSubtype(a0),d0
00018DBC 6A00                       		bpl.s	Sto_Action
00018DBE 0200 000F                  		andi.b	#$F,d0
00018DC2 1140 003E                  		move.b	d0,$3E(a0)
00018DC6 1153 0028                  		move.b	(a3),obSubtype(a0)
00018DCA 0C13 0005                  		cmpi.b	#5,(a3)
00018DCE 6600                       		bne.s	@chkgone
00018DD0 08E8 0004 0001             		bset	#4,obRender(a0)
00018DD6                            
00018DD6                            	@chkgone:
00018DD6 45F8 FC00                  		lea	(v_objstate).w,a2
00018DDA 7000                       		moveq	#0,d0
00018DDC 1028 0023                  		move.b	obRespawnNo(a0),d0
00018DE0 6700                       		beq.s	Sto_Action
00018DE2 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00018DE8                            
00018DE8                            Sto_Action:	; Routine 2
00018DE8 3F28 0008                  		move.w	obX(a0),-(sp)
00018DEC 7000                       		moveq	#0,d0
00018DEE 1028 0028                  		move.b	obSubtype(a0),d0
00018DF2 0240 000F                  		andi.w	#$F,d0
00018DF6 D040                       		add.w	d0,d0
00018DF8 323B 0000                  		move.w	@index(pc,d0.w),d1
00018DFC 4EBB 1000                  		jsr	@index(pc,d1.w)
00018E00 381F                       		move.w	(sp)+,d4
00018E02 4A28 0001                  		tst.b	obRender(a0)
00018E06 6A00                       		bpl.s	@chkdel
00018E08 7200                       		moveq	#0,d1
00018E0A 1228 0014                  		move.b	obActWid(a0),d1
00018E0E 0641 000B                  		addi.w	#$B,d1
00018E12 7400                       		moveq	#0,d2
00018E14 1428 0016                  		move.b	sto_height(a0),d2
00018E18 3602                       		move.w	d2,d3
00018E1A 5243                       		addq.w	#1,d3
00018E1C 6100 8F6C                  		bsr.w	SolidObject
00018E20                            
00018E20                            	@chkdel:
00018E3C 4EF9 0000 F97C             		jmp	(DisplaySprite).l
00018E42                            
00018E42                            	@chkgone:
00018E42 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w
00018E48 6600                       		bne.s	@delete
00018E4A 4238 F7CB                  		clr.b	(v_obj6B).w
00018E4E 45F8 FC00                  		lea	(v_objstate).w,a2
00018E52 7000                       		moveq	#0,d0
00018E54 1028 0023                  		move.b	obRespawnNo(a0),d0
00018E58 6700                       		beq.s	@delete
00018E5A 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00018E60                            
00018E60                            	@delete:
00018E60 4EF9 0000 F9BC             		jmp	(DeleteObject).l
00018E66                            ; ===========================================================================
00018E66 0000 0000                  @index:		dc.w @type00-@index, @type01-@index
00018E6A 0000 0000                  		dc.w @type02-@index, @type03-@index
00018E6E 0000 0000                  		dc.w @type04-@index, @type05-@index
00018E72                            ; ===========================================================================
00018E72                            
00018E72                            @type00:
00018E72 4E75                       		rts
00018E74                            ; ===========================================================================
00018E74                            
00018E74                            @type01:
00018E74 4A28 0038                  		tst.b	sto_active(a0)
00018E78 6600                       		bne.s	@isactive01
00018E7A 45F8 F7E0                  		lea	(f_switch).w,a2
00018E7E 7000                       		moveq	#0,d0
00018E80 1028 003E                  		move.b	$3E(a0),d0
00018E84 0832 0000 0000             		btst	#0,(a2,d0.w)
00018E8A 6700                       		beq.s	@loc_15DC2
00018E8C 117C 0001 0038             		move.b	#1,sto_active(a0)
00018E92                            
00018E92                            	@isactive01:
00018E92 3028 003C                  		move.w	$3C(a0),d0
00018E96 B068 003A                  		cmp.w	$3A(a0),d0
00018E9A 6700                       		beq.s	@loc_15DE0
00018E9C 5468 003A                  		addq.w	#2,$3A(a0)
00018EA0                            
00018EA0                            	@loc_15DC2:
00018EA0 3028 003A                  		move.w	$3A(a0),d0
00018EA4 0828 0000 0022             		btst	#0,obStatus(a0)
00018EAA 6700                       		beq.s	@noflip01
00018EAC 4440                       		neg.w	d0
00018EAE 0640 0080                  		addi.w	#$80,d0
00018EB2                            
00018EB2                            	@noflip01:
00018EB2 3228 0034                  		move.w	sto_origX(a0),d1
00018EB6 9240                       		sub.w	d0,d1
00018EB8 3141 0008                  		move.w	d1,obX(a0)
00018EBC 4E75                       		rts	
00018EBE                            ; ===========================================================================
00018EBE                            
00018EBE                            @loc_15DE0:
00018EBE 5228 0028                  		addq.b	#1,obSubtype(a0)
00018EC2 317C 00B4 0036             		move.w	#$B4,$36(a0)
00018EC8 4228 0038                  		clr.b	sto_active(a0)
00018ECC 45F8 FC00                  		lea	(v_objstate).w,a2
00018ED0 7000                       		moveq	#0,d0
00018ED2 1028 0023                  		move.b	obRespawnNo(a0),d0
00018ED6 67C8                       		beq.s	@loc_15DC2
00018ED8 08F2 0000 0002             		bset	#0,2(a2,d0.w)
00018EDE 60C0                       		bra.s	@loc_15DC2
00018EE0                            ; ===========================================================================
00018EE0                            
00018EE0                            @type02:
00018EE0 4A28 0038                  		tst.b	sto_active(a0)
00018EE4 6600                       		bne.s	@isactive02
00018EE6 5368 0036                  		subq.w	#1,$36(a0)
00018EEA 6600                       		bne.s	@loc_15E1E
00018EEC 117C 0001 0038             		move.b	#1,sto_active(a0)
00018EF2                            
00018EF2                            	@isactive02:
00018EF2 4A68 003A                  		tst.w	$3A(a0)
00018EF6 6700                       		beq.s	@loc_15E3C
00018EF8 5568 003A                  		subq.w	#2,$3A(a0)
00018EFC                            
00018EFC                            	@loc_15E1E:
00018EFC 3028 003A                  		move.w	$3A(a0),d0
00018F00 0828 0000 0022             		btst	#0,obStatus(a0)
00018F06 6700                       		beq.s	@noflip02
00018F08 4440                       		neg.w	d0
00018F0A 0640 0080                  		addi.w	#$80,d0
00018F0E                            
00018F0E                            	@noflip02:
00018F0E 3228 0034                  		move.w	sto_origX(a0),d1
00018F12 9240                       		sub.w	d0,d1
00018F14 3141 0008                  		move.w	d1,obX(a0)
00018F18 4E75                       		rts	
00018F1A                            ; ===========================================================================
00018F1A                            
00018F1A                            @loc_15E3C:
00018F1A 5328 0028                  		subq.b	#1,obSubtype(a0)
00018F1E 4228 0038                  		clr.b	sto_active(a0)
00018F22 45F8 FC00                  		lea	(v_objstate).w,a2
00018F26 7000                       		moveq	#0,d0
00018F28 1028 0023                  		move.b	obRespawnNo(a0),d0
00018F2C 67CE                       		beq.s	@loc_15E1E
00018F2E 08B2 0000 0002             		bclr	#0,2(a2,d0.w)
00018F34 60C6                       		bra.s	@loc_15E1E
00018F36                            ; ===========================================================================
00018F36                            
00018F36                            @type03:
00018F36 4A28 0038                  		tst.b	sto_active(a0)
00018F3A 6600                       		bne.s	@isactive03
00018F3C 4A68 003A                  		tst.w	$3A(a0)
00018F40 6700                       		beq.s	@loc_15E6A
00018F42 5368 003A                  		subq.w	#1,$3A(a0)
00018F46 6000                       		bra.s	@loc_15E8E
00018F48                            ; ===========================================================================
00018F48                            
00018F48                            @loc_15E6A:
00018F48 5368 0036                  		subq.w	#1,$36(a0)
00018F4C 6A00                       		bpl.s	@loc_15E8E
00018F4E 317C 003C 0036             		move.w	#$3C,$36(a0)
00018F54 117C 0001 0038             		move.b	#1,sto_active(a0)
00018F5A                            
00018F5A                            @isactive03:
00018F5A 5068 003A                  		addq.w	#8,$3A(a0)
00018F5E 3028 003A                  		move.w	$3A(a0),d0
00018F62 B068 003C                  		cmp.w	$3C(a0),d0
00018F66 6600                       		bne.s	@loc_15E8E
00018F68 4228 0038                  		clr.b	sto_active(a0)
00018F6C                            
00018F6C                            @loc_15E8E:
00018F6C 3028 003A                  		move.w	$3A(a0),d0
00018F70 0828 0000 0022             		btst	#0,obStatus(a0)
00018F76 6700                       		beq.s	@noflip03
00018F78 4440                       		neg.w	d0
00018F7A 0640 0038                  		addi.w	#$38,d0
00018F7E                            
00018F7E                            	@noflip03:
00018F7E 3228 0030                  		move.w	sto_origY(a0),d1
00018F82 D240                       		add.w	d0,d1
00018F84 3141 000C                  		move.w	d1,obY(a0)
00018F88 4E75                       		rts	
00018F8A                            ; ===========================================================================
00018F8A                            
00018F8A                            @type04:
00018F8A 4A28 0038                  		tst.b	sto_active(a0)
00018F8E 6600                       		bne.s	@isactive04
00018F90 4A68 003A                  		tst.w	$3A(a0)
00018F94 6700                       		beq.s	@loc_15EBE
00018F96 5168 003A                  		subq.w	#8,$3A(a0)
00018F9A 6000                       		bra.s	@loc_15EF0
00018F9C                            ; ===========================================================================
00018F9C                            
00018F9C                            @loc_15EBE:
00018F9C 5368 0036                  		subq.w	#1,$36(a0)
00018FA0 6A00                       		bpl.s	@loc_15EF0
00018FA2 317C 003C 0036             		move.w	#$3C,$36(a0)
00018FA8 117C 0001 0038             		move.b	#1,sto_active(a0)
00018FAE                            
00018FAE                            @isactive04:
00018FAE 3028 003A                  		move.w	$3A(a0),d0
00018FB2 B068 003C                  		cmp.w	$3C(a0),d0
00018FB6 6700                       		beq.s	@loc_15EE0
00018FB8 5068 003A                  		addq.w	#8,$3A(a0)
00018FBC 6000                       		bra.s	@loc_15EF0
00018FBE                            ; ===========================================================================
00018FBE                            
00018FBE                            @loc_15EE0:
00018FBE 5368 0036                  		subq.w	#1,$36(a0)
00018FC2 6A00                       		bpl.s	@loc_15EF0
00018FC4 317C 003C 0036             		move.w	#$3C,$36(a0)
00018FCA 4228 0038                  		clr.b	sto_active(a0)
00018FCE                            
00018FCE                            @loc_15EF0:
00018FCE 3028 003A                  		move.w	$3A(a0),d0
00018FD2 0828 0000 0022             		btst	#0,obStatus(a0)
00018FD8 6700                       		beq.s	@noflip04
00018FDA 4440                       		neg.w	d0
00018FDC 0640 0038                  		addi.w	#$38,d0
00018FE0                            
00018FE0                            	@noflip04:
00018FE0 3228 0030                  		move.w	sto_origY(a0),d1
00018FE4 D240                       		add.w	d0,d1
00018FE6 3141 000C                  		move.w	d1,obY(a0)
00018FEA 4E75                       		rts	
00018FEC                            ; ===========================================================================
00018FEC                            
00018FEC                            @type05:
00018FEC 4A28 0038                  		tst.b	sto_active(a0)
00018FF0 6600                       		bne.s	@loc_15F3E
00018FF2 45F8 F7E0                  		lea	(f_switch).w,a2
00018FF6 7000                       		moveq	#0,d0
00018FF8 1028 003E                  		move.b	$3E(a0),d0
00018FFC 0832 0000 0000             		btst	#0,(a2,d0.w)
00019002 6700                       		beq.s	@locret_15F5C
00019004 117C 0001 0038             		move.b	#1,sto_active(a0)
0001900A 45F8 FC00                  		lea	(v_objstate).w,a2
0001900E 7000                       		moveq	#0,d0
00019010 1028 0023                  		move.b	obRespawnNo(a0),d0
00019014 6700                       		beq.s	@loc_15F3E
00019016 08F2 0000 0002             		bset	#0,2(a2,d0.w)
0001901C                            
0001901C                            @loc_15F3E:
0001901C 04A8 0001 0000 0008        		subi.l	#$10000,obX(a0)
00019024 06A8 0000 8000 000C        		addi.l	#$8000,obY(a0)
0001902C 3168 0008 0034             		move.w	obX(a0),sto_origX(a0)
00019032 0C68 0980 0008             		cmpi.w	#$980,obX(a0)
00019038 6700                       		beq.s	@loc_15F5E
0001903A                            
0001903A                            @locret_15F5C:
0001903A 4E75                       		rts	
0001903C                            ; ===========================================================================
0001903C                            
0001903C                            @loc_15F5E:
0001903C 4228 0028                  		clr.b	obSubtype(a0)
00019040 4228 0038                  		clr.b	sto_active(a0)
00019044 4E75                       		rts	
00019044 4E75                       		rts	
00019046                            Map_Stomp:	include	"_maps\SBZ Stomper and Door.asm"
00019046                            ; ---------------------------------------------------------------------------
00019046                            ; Sprite mappings - stomper and	platforms (SBZ)
00019046                            ; ---------------------------------------------------------------------------
00019046                            Map_Stomp_internal:
00019046 0000                       		dc.w @door-Map_Stomp_internal
00019048 0000                       		dc.w @stomper-Map_Stomp_internal
0001904A 0000                       		dc.w @stomper-Map_Stomp_internal
0001904C 0000                       		dc.w @stomper-Map_Stomp_internal
0001904E 0000                       		dc.w @bigdoor-Map_Stomp_internal
00019050 04                         @door:		dc.b 4
00019051 F40E 21AF C0               		dc.b $F4, $E, $21, $AF,	$C0 ; horizontal sliding door
00019056 F40E 21B2 E0               		dc.b $F4, $E, $21, $B2,	$E0
0001905B F40E 21B2 00               		dc.b $F4, $E, $21, $B2,	0
00019060 F40E 29AF 20               		dc.b $F4, $E, $29, $AF,	$20
00019065 08                         @stomper:	dc.b 8
00019066 E00C 000C E4               		dc.b $E0, $C, 0, $C, $E4 ; stomper block with yellow/black stripes
0001906B E008 0010 04               		dc.b $E0, 8, 0,	$10, 4
00019070 E80E 2013 E4               		dc.b $E8, $E, $20, $13,	$E4
00019075 E80A 201F 04               		dc.b $E8, $A, $20, $1F,	4
0001907A 000E 2013 E4               		dc.b 0,	$E, $20, $13, $E4
0001907F 000A 201F 04               		dc.b 0,	$A, $20, $1F, 4
00019084 180C 000C E4               		dc.b $18, $C, 0, $C, $E4
00019089 1808 0010 04               		dc.b $18, 8, 0,	$10, 4
0001908E 0E                         @bigdoor:	dc.b $E
0001908F C00F 0000 80               		dc.b $C0, $F, 0, 0, $80	; huge diagonal sliding door from SBZ3
00019094 C00F 0010 A0               		dc.b $C0, $F, 0, $10, $A0
00019099 C00F 0020 C0               		dc.b $C0, $F, 0, $20, $C0
0001909E C00F 0010 E0               		dc.b $C0, $F, 0, $10, $E0
000190A3 C00F 0020 00               		dc.b $C0, $F, 0, $20, 0
000190A8 C00F 0010 20               		dc.b $C0, $F, 0, $10, $20
000190AD C00F 0030 40               		dc.b $C0, $F, 0, $30, $40
000190B2 C00D 0040 60               		dc.b $C0, $D, 0, $40, $60
000190B7 E00F 0048 80               		dc.b $E0, $F, 0, $48, $80
000190BC E00F 0048 C0               		dc.b $E0, $F, 0, $48, $C0
000190C1 E00F 0058 00               		dc.b $E0, $F, 0, $58, 0
000190C6 000F 0048 80               		dc.b 0,	$F, 0, $48, $80
000190CB 000F 0058 C0               		dc.b 0,	$F, 0, $58, $C0
000190D0 200F 0058 80               		dc.b $20, $F, 0, $58, $80
000190D6 00                         		even
000190D6 00                         		even
000190D6                            		include	"_incObj\6C SBZ Vanishing Platforms.asm"
000190D6                            ; ---------------------------------------------------------------------------
000190D6                            ; Object 6C - vanishing	platforms (SBZ)
000190D6                            ; ---------------------------------------------------------------------------
000190D6                            
000190D6                            VanishPlatform:
000190D6 7000                       		moveq	#0,d0
000190D8 1028 0024                  		move.b	obRoutine(a0),d0
000190DC 323B 0000                  		move.w	VanP_Index(pc,d0.w),d1
000190E0 4EFB 1000                  		jmp	VanP_Index(pc,d1.w)
000190E4                            ; ===========================================================================
000190E4 0000                       VanP_Index:	dc.w VanP_Main-VanP_Index
000190E6 0000                       		dc.w VanP_Vanish-VanP_Index
000190E8 0000                       		dc.w VanP_Appear-VanP_Index
000190EA 0000                       		dc.w loc_16068-VanP_Index
000190EC                            
000190EC =00000030                  vanp_timer:	equ $30		; counter for time until event
000190EC =00000032                  vanp_timelen:	equ $32		; time between events (general)
000190EC                            ; ===========================================================================
000190EC                            
000190EC                            VanP_Main:	; Routine 0
000190EC 5C28 0024                  		addq.b	#6,obRoutine(a0)
000190F0 217C 0000 0000 0004        		move.l	#Map_VanP,obMap(a0)
000190F8 317C 44C3 0002             		move.w	#$44C3,obGfx(a0)
000190FE 0028 0004 0001             		ori.b	#4,obRender(a0)
00019104 117C 0010 0014             		move.b	#$10,obActWid(a0)
0001910A 317C 0200 0018             		move.w	#$200,obPriority(a0)
00019110 7000                       		moveq	#0,d0
00019112 1028 0028                  		move.b	obSubtype(a0),d0 ; get object type
00019116 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
0001911A 5240                       		addq.w	#1,d0		; add 1
0001911C EF48                       		lsl.w	#7,d0		; multiply by $80
0001911E 3200                       		move.w	d0,d1
00019120 5340                       		subq.w	#1,d0
00019122 3140 0030                  		move.w	d0,vanp_timer(a0)
00019126 3140 0032                  		move.w	d0,vanp_timelen(a0)
0001912A 7000                       		moveq	#0,d0
0001912C 1028 0028                  		move.b	obSubtype(a0),d0 ; get object type
00019130 0240 00F0                  		andi.w	#$F0,d0		; read only the	1st digit
00019134 0641 0080                  		addi.w	#$80,d1
00019138 C0C1                       		mulu.w	d1,d0
0001913A E088                       		lsr.l	#8,d0
0001913C 3140 0036                  		move.w	d0,$36(a0)
00019140 5341                       		subq.w	#1,d1
00019142 3141 0038                  		move.w	d1,$38(a0)
00019146                            
00019146                            loc_16068:	; Routine 6
00019146 3038 FE04                  		move.w	(v_framecount).w,d0
0001914A 9068 0036                  		sub.w	$36(a0),d0
0001914E C068 0038                  		and.w	$38(a0),d0
00019152 6600                       		bne.s	@animate
00019154 5928 0024                  		subq.b	#4,obRoutine(a0) ; goto VanP_Vanish next
00019158 6000                       		bra.s	VanP_Vanish
0001915A                            ; ===========================================================================
0001915A                            
0001915A                            @animate:
0001915A 43F9 0000 0000             		lea	(Ani_Van).l,a1
00019160 4EB9 0000 CA28             		jsr	(AnimateSprite).l
00019166 6000 878A                  		bra.w	RememberState
0001916A                            ; ===========================================================================
0001916A                            
0001916A                            VanP_Vanish:	; Routine 2
0001916A                            VanP_Appear:	; Routine 4
0001916A 5368 0030                  		subq.w	#1,vanp_timer(a0)
0001916E 6A00                       		bpl.s	@wait
00019170 317C 007F 0030             		move.w	#127,vanp_timer(a0)
00019176 4A28 001C                  		tst.b	obAnim(a0)	; is platform vanishing?
0001917A 6700                       		beq.s	@isvanishing	; if yes, branch
0001917C 3168 0032 0030             		move.w	vanp_timelen(a0),vanp_timer(a0)
00019182                            
00019182                            	@isvanishing:
00019182 0868 0000 001C             		bchg	#0,obAnim(a0)
00019188                            
00019188                            	@wait:
00019188 43F9 0000 0000             		lea	(Ani_Van).l,a1
0001918E 4EB9 0000 CA28             		jsr	(AnimateSprite).l
00019194 0828 0001 001A             		btst	#1,obFrame(a0)	; has platform vanished?
0001919A 6600                       		bne.s	@notsolid	; if yes, branch
0001919C 0C28 0002 0024             		cmpi.b	#2,obRoutine(a0)
000191A2 6600                       		bne.s	@loc_160D6
000191A4 7200                       		moveq	#0,d1
000191A6 1228 0014                  		move.b	obActWid(a0),d1
000191AA 4EB9 0000 908A             		jsr	(PlatformObject).l
000191B0 6000 8740                  		bra.w	RememberState
000191B4                            ; ===========================================================================
000191B4                            
000191B4                            @loc_160D6:
000191B4 7200                       		moveq	#0,d1
000191B6 1228 0014                  		move.b	obActWid(a0),d1
000191BA 4EB9 0000 91FE             		jsr	(ExitPlatform).l
000191C0 3428 0008                  		move.w	obX(a0),d2
000191C4 4EB9 0000 9768             		jsr	(MvSonicOnPtfm2).l
000191CA 6000 8726                  		bra.w	RememberState
000191CE                            ; ===========================================================================
000191CE                            
000191CE                            @notsolid:
000191CE 0828 0003 0022             		btst	#3,obStatus(a0)
000191D4 6700                       		beq.s	@display
000191D6 43F8 D000                  		lea	(v_player).w,a1
000191DA 08A9 0003 0022             		bclr	#3,obStatus(a1)
000191E0 08A8 0003 0022             		bclr	#3,obStatus(a0)
000191E6 117C 0002 0024             		move.b	#2,obRoutine(a0)
000191EC 4228 0025                  		clr.b	obSolid(a0)
000191F0                            
000191F0                            	@display:
000191F0 6000 8700                  		bra.w	RememberState
000191F0 6000 8700                  		bra.w	RememberState
000191F4                            		include	"_anim\SBZ Vanishing Platforms.asm"
000191F4                            ; ---------------------------------------------------------------------------
000191F4                            ; Animation script - vanishing platforms (SBZ)
000191F4                            ; ---------------------------------------------------------------------------
000191F4 0000                       Ani_Van:	dc.w @vanish-Ani_Van
000191F6 0000                       		dc.w @appear-Ani_Van
000191F8 0700 0102 03FE 01          @vanish:	dc.b 7,	0, 1, 2, 3, afBack, 1
00019200 00                         		even
00019200 0703 0201 00FE 01          @appear:	dc.b 7,	3, 2, 1, 0, afBack, 1
00019208 00                         		even
00019208 00                         		even
00019208                            Map_VanP:	include	"_maps\SBZ Vanishing Platforms.asm"
00019208                            ; ---------------------------------------------------------------------------
00019208                            ; Sprite mappings - vanishing platforms	(SBZ)
00019208                            ; ---------------------------------------------------------------------------
00019208                            Map_VanP_internal:
00019208 0000                       		dc.w @whole-Map_VanP_internal
0001920A 0000                       		dc.w @half-Map_VanP_internal
0001920C 0000                       		dc.w @quarter-Map_VanP_internal
0001920E 0000                       		dc.w @gone-Map_VanP_internal
00019210 01                         @whole:		dc.b 1
00019211 F80F 0000 F0               		dc.b $F8, $F, 0, 0, $F0
00019216 01                         @half:		dc.b 1
00019217 F807 0010 F8               		dc.b $F8, 7, 0,	$10, $F8
0001921C 01                         @quarter:	dc.b 1
0001921D F803 0018 FC               		dc.b $F8, 3, 0,	$18, $FC
00019222 00                         @gone:		dc.b 0
00019224 00                         		even
00019224 00                         		even
00019224                            		include	"_incObj\6E Electrocuter.asm"
00019224                            ; ---------------------------------------------------------------------------
00019224                            ; Object 6E - electrocution orbs (SBZ)
00019224                            ; ---------------------------------------------------------------------------
00019224                            
00019224                            Electro:
00019224 7000                       		moveq	#0,d0
00019226 1028 0024                  		move.b	obRoutine(a0),d0
0001922A 323B 0000                  		move.w	Elec_Index(pc,d0.w),d1
0001922E 4EFB 1000                  		jmp	Elec_Index(pc,d1.w)
00019232                            ; ===========================================================================
00019232 0000                       Elec_Index:	dc.w Elec_Main-Elec_Index
00019234 0000                       		dc.w Elec_Shock-Elec_Index
00019236                            
00019236 =00000034                  elec_freq:	equ $34		; frequency
00019236                            ; ===========================================================================
00019236                            
00019236                            Elec_Main:	; Routine 0
00019236 5428 0024                  		addq.b	#2,obRoutine(a0)
0001923A 217C 0000 0000 0004        		move.l	#Map_Elec,obMap(a0)
00019242 317C 047E 0002             		move.w	#$47E,obGfx(a0)
00019248 0028 0004 0001             		ori.b	#4,obRender(a0)
0001924E 117C 0028 0014             		move.b	#$28,obActWid(a0)
00019254 7000                       		moveq	#0,d0
00019256 1028 0028                  		move.b	obSubtype(a0),d0 ; read object type
0001925A E948                       		lsl.w	#4,d0		; multiply by $10
0001925C 5340                       		subq.w	#1,d0
0001925E 3140 0034                  		move.w	d0,elec_freq(a0)
00019262                            
00019262                            Elec_Shock:	; Routine 2
00019262 3038 FE04                  		move.w	(v_framecount).w,d0
00019266 C068 0034                  		and.w	elec_freq(a0),d0 ; is it time to zap?
0001926A 6600                       		bne.s	@animate	; if not, branch
0001926C                            
0001926C 117C 0001 001C             		move.b	#1,obAnim(a0)	; run "zap" animation
00019272 4A28 0001                  		tst.b	obRender(a0)
00019276 6A00                       		bpl.s	@animate
00019282                            
00019282                            	@animate:
00019282 43F9 0000 0000             		lea	(Ani_Elec).l,a1
00019288 4EB9 0000 CA28             		jsr	(AnimateSprite).l
0001928E 117C 0000 0020             		move.b	#0,obColType(a0)
00019294 0C28 0004 001A             		cmpi.b	#4,obFrame(a0)	; is 4th frame displayed?
0001929A 6600                       		bne.s	@display	; if not, branch
0001929C 117C 00A4 0020             		move.b	#$A4,obColType(a0) ; if yes, make object hurt Sonic
000192A2                            
000192A2                            	@display:
000192A2 6000 864E                  		bra.w	RememberState
000192A2 6000 864E                  		bra.w	RememberState
000192A6                            		include	"_anim\Electrocuter.asm"
000192A6                            ; ---------------------------------------------------------------------------
000192A6                            ; Animation script - electrocution orbs (SBZ)
000192A6                            ; ---------------------------------------------------------------------------
000192A6 0000                       Ani_Elec:	dc.w byte_161CC-Ani_Elec
000192A8 0000                       		dc.w byte_161D0-Ani_Elec
000192AA 0700 FF                    byte_161CC:	dc.b 7,	0, afEnd
000192AE 00                         		even
000192AE 0001 0101 0203 0304 0404+  byte_161D0:	dc.b 0,	1, 1, 1, 2, 3, 3, 4, 4,	4, 5, 5, 5, 0, afChange, 0
000192BE                            		even
000192BE                            		even
000192BE                            Map_Elec:	include	"_maps\Electrocuter.asm"
000192BE                            ; --------------------------------------------------------------------------------
000192BE                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
000192BE                            ; --------------------------------------------------------------------------------
000192BE                            
000192BE                            SME_KiF9w:	
000192BE 0000 0000                  		dc.w SME_KiF9w_C-SME_KiF9w, SME_KiF9w_17-SME_KiF9w	
000192C2 0000 0000                  		dc.w SME_KiF9w_27-SME_KiF9w, SME_KiF9w_41-SME_KiF9w	
000192C6 0000 0000                  		dc.w SME_KiF9w_56-SME_KiF9w, SME_KiF9w_75-SME_KiF9w	
000192CA 02                         SME_KiF9w_C:	dc.b 2	
000192CB F804 2000 F8               		dc.b $F8, 4, $20, 0, $F8	
000192D0 0006 2002 F8               		dc.b 0, 6, $20, 2, $F8	
000192D5 03                         SME_KiF9w_17:	dc.b 3	
000192D6 F805 2008 F8               		dc.b $F8, 5, $20, 8, $F8	
000192DB F804 0000 F8               		dc.b $F8, 4, 0, 0, $F8	
000192E0 0006 2002 F8               		dc.b 0, 6, $20, 2, $F8	
000192E5 05                         SME_KiF9w_27:	dc.b 5	
000192E6 F805 2008 F8               		dc.b $F8, 5, $20, 8, $F8	
000192EB F804 0000 F8               		dc.b $F8, 4, 0, 0, $F8	
000192F0 0006 2002 F8               		dc.b 0, 6, $20, 2, $F8	
000192F5 F60D 200C 08               		dc.b $F6, $D, $20, $C, 8	
000192FA F60D 280C DC               		dc.b $F6, $D, $28, $C, $DC	
000192FF 04                         SME_KiF9w_41:	dc.b 4	
00019300 F804 2000 F8               		dc.b $F8, 4, $20, 0, $F8	
00019305 0006 2002 F8               		dc.b 0, 6, $20, 2, $F8	
0001930A F60D 200C 08               		dc.b $F6, $D, $20, $C, 8	
0001930F F60D 280C DC               		dc.b $F6, $D, $28, $C, $DC	
00019314 06                         SME_KiF9w_56:	dc.b 6	
00019315 F805 2008 F8               		dc.b $F8, 5, $20, 8, $F8	
0001931A 0006 2002 F8               		dc.b 0, 6, $20, 2, $F8	
0001931F F60D 300C 08               		dc.b $F6, $D, $30, $C, 8	
00019324 F60D 380C DC               		dc.b $F6, $D, $38, $C, $DC	
00019329 F60D 200C 24               		dc.b $F6, $D, $20, $C, $24	
0001932E F60D 280C C0               		dc.b $F6, $D, $28, $C, $C0	
00019333 04                         SME_KiF9w_75:	dc.b 4	
00019334 F804 2000 F8               		dc.b $F8, 4, $20, 0, $F8	
00019339 0006 2002 F8               		dc.b 0, 6, $20, 2, $F8	
0001933E F60D 300C 24               		dc.b $F6, $D, $30, $C, $24	
00019343 F60D 380C C0               		dc.b $F6, $D, $38, $C, $C0	
00019348                            		even
00019348                            		even
00019348                            		include	"_incObj\6F SBZ Spin Platform Conveyor.asm"
00019348                            ; ---------------------------------------------------------------------------
00019348                            ; Object 6F - spinning platforms that move around a conveyor belt (SBZ)
00019348                            ; ---------------------------------------------------------------------------
00019348                            
00019348                            SpinConvey:
00019348 7000                       		moveq	#0,d0
0001934A 1028 0024                  		move.b	obRoutine(a0),d0
0001934E 323B 0000                  		move.w	SpinC_Index(pc,d0.w),d1
00019352 4EBB 1000                  		jsr	SpinC_Index(pc,d1.w)
00019372                            
00019372                            SpinC_Display:
00019372 4EF9 0000 F97C             		jmp	(DisplaySprite).l
00019378                            ; ===========================================================================
00019378                            
00019378                            loc_1629A:
00019378 0C38 0002 FE11             		cmpi.b	#2,(v_act).w	; check if act is 3
0001937E 6600                       		bne.s	SpinC_Act1or2	; if not, branch
00019380 0C40 FF80                  		cmpi.w	#-$80,d0
00019384 64EC                       		bcc.s	SpinC_Display
00019386                            
00019386                            SpinC_Act1or2:
00019386 1028 002F                  		move.b	$2F(a0),d0
0001938A 6A00                       		bpl.s	SpinC_Delete
0001938C 0240 007F                  		andi.w	#$7F,d0
00019390 45F8 F7C1                  		lea	(v_obj63).w,a2
00019394 08B2 0000 0000             		bclr	#0,(a2,d0.w)
0001939A                            
0001939A                            SpinC_Delete:
0001939A 4EF9 0000 F9BC             		jmp	(DeleteObject).l
000193A0                            ; ===========================================================================
000193A0 0000                       SpinC_Index:	dc.w SpinC_Main-SpinC_Index
000193A2 0000                       		dc.w loc_163D8-SpinC_Index
000193A4                            ; ===========================================================================
000193A4                            
000193A4                            SpinC_Main:	; Routine 0
000193A4 1028 0028                  		move.b	obSubtype(a0),d0
000193A8 6B00 0000                  		bmi.w	loc_16380
000193AC 5428 0024                  		addq.b	#2,obRoutine(a0)
000193B0 217C 0001 8A18 0004        		move.l	#Map_Spin,obMap(a0)
000193B8 317C 04DF 0002             		move.w	#$4DF,obGfx(a0)
000193BE 117C 0010 0014             		move.b	#$10,obActWid(a0)
000193C4 0028 0004 0001             		ori.b	#4,obRender(a0)
000193CA 317C 0200 0018             		move.w	#$200,obPriority(a0)
000193D0 7000                       		moveq	#0,d0
000193D2 1028 0028                  		move.b	obSubtype(a0),d0
000193D6 3200                       		move.w	d0,d1
000193D8 E648                       		lsr.w	#3,d0
000193DA 0240 001E                  		andi.w	#$1E,d0
000193DE 45FA 0000                  		lea	off_164A6(pc),a2
000193E2 D4F2 0000                  		adda.w	(a2,d0.w),a2
000193E6 315A 0038                  		move.w	(a2)+,$38(a0)
000193EA 315A 0030                  		move.w	(a2)+,$30(a0)
000193EE 214A 003C                  		move.l	a2,$3C(a0)
000193F2 0241 000F                  		andi.w	#$F,d1
000193F6 E549                       		lsl.w	#2,d1
000193F8 1141 0038                  		move.b	d1,$38(a0)
000193FC 117C 0004 003A             		move.b	#4,$3A(a0)
00019402 4A38 F7C0                  		tst.b	(f_conveyrev).w
00019406 6700                       		beq.s	loc_16356
00019408 117C 0001 003B             		move.b	#1,$3B(a0)
0001940E 4428 003A                  		neg.b	$3A(a0)
00019412 7200                       		moveq	#0,d1
00019414 1228 0038                  		move.b	$38(a0),d1
00019418 D228 003A                  		add.b	$3A(a0),d1
0001941C B228 0039                  		cmp.b	$39(a0),d1
00019420 6500                       		bcs.s	loc_16352
00019422 1001                       		move.b	d1,d0
00019424 7200                       		moveq	#0,d1
00019426 4A00                       		tst.b	d0
00019428 6A00                       		bpl.s	loc_16352
0001942A 1228 0039                  		move.b	$39(a0),d1
0001942E 5901                       		subq.b	#4,d1
00019430                            
00019430                            loc_16352:
00019430 1141 0038                  		move.b	d1,$38(a0)
00019434                            
00019434                            loc_16356:
00019434 3172 1000 0034             		move.w	(a2,d1.w),$34(a0)
0001943A 3172 1002 0036             		move.w	2(a2,d1.w),$36(a0)
00019440 4A41                       		tst.w	d1
00019442 6600                       		bne.s	loc_1636C
00019444 117C 0001 001C             		move.b	#1,obAnim(a0)
0001944A                            
0001944A                            loc_1636C:
0001944A 0C41 0008                  		cmpi.w	#8,d1
0001944E 6600                       		bne.s	loc_16378
00019450 117C 0000 001C             		move.b	#0,obAnim(a0)
00019456                            
00019456                            loc_16378:
00019456 6100 B512                  		bsr.w	LCon_ChangeDir
0001945A 6000 0000                  		bra.w	loc_163D8
0001945E                            ; ===========================================================================
0001945E                            
0001945E                            loc_16380:
0001945E 1140 002F                  		move.b	d0,$2F(a0)
00019462 0240 007F                  		andi.w	#$7F,d0
00019466 45F8 F7C1                  		lea	(v_obj63).w,a2
0001946A 08F2 0000 0000             		bset	#0,(a2,d0.w)
00019470 6700                       		beq.s	loc_1639A
00019472 4EF9 0000 F9BC             		jmp	(DeleteObject).l
00019478                            ; ===========================================================================
00019478                            
00019478                            loc_1639A:
00019478 D040                       		add.w	d0,d0
0001947A 0240 001E                  		andi.w	#$1E,d0
0001947E 0640 0000                  		addi.w	#ObjPosSBZPlatform_Index-ObjPos_Index,d0
00019482 45F9 0000 0000             		lea	(ObjPos_Index).l,a2
00019488 D4F2 0000                  		adda.w	(a2,d0.w),a2
0001948C 321A                       		move.w	(a2)+,d1
0001948E 2248                       		movea.l	a0,a1
00019490 6000                       		bra.s	SpinC_LoadPform
00019492                            ; ===========================================================================
00019492                            
00019492                            SpinC_Loop:
00019492 4EB9 0000 FE08             		jsr	(FindFreeObj).l
00019498 6600                       		bne.s	loc_163D0
0001949A                            
0001949A                            SpinC_LoadPform:
0001949A 12BC 006F                  		move.b	#id_SpinConvey,0(a1)
0001949E 335A 0008                  		move.w	(a2)+,obX(a1)
000194A2 335A 000C                  		move.w	(a2)+,obY(a1)
000194A6 301A                       		move.w	(a2)+,d0
000194A8 1340 0028                  		move.b	d0,obSubtype(a1)
000194AC                            
000194AC                            loc_163D0:
000194AC 51C9 FFE4                  		dbf	d1,SpinC_Loop
000194B0                            
000194B0 588F                       		addq.l	#4,sp
000194B2 4E75                       		rts	
000194B4                            ; ===========================================================================
000194B4                            
000194B4                            loc_163D8:	; Routine 2
000194B4 43F9 0000 0000             		lea	(Ani_SpinConvey).l,a1
000194BA 4EB9 0000 CA28             		jsr	(AnimateSprite).l
000194C0 4A28 001A                  		tst.b	obFrame(a0)
000194C4 6600                       		bne.s	loc_16404
000194C6 3F28 0008                  		move.w	obX(a0),-(sp)
000194CA 6100 0000                  		bsr.w	loc_16424
000194CE 323C 001B                  		move.w	#$1B,d1
000194D2 343C 0007                  		move.w	#7,d2
000194D6 3602                       		move.w	d2,d3
000194D8 5243                       		addq.w	#1,d3
000194DA 381F                       		move.w	(sp)+,d4
000194DC 6000 88AC                  		bra.w	SolidObject
000194E0                            ; ===========================================================================
000194E0                            
000194E0                            loc_16404:
000194E0 0828 0003 0022             		btst	#3,obStatus(a0)
000194E6 6700                       		beq.s	loc_16420
000194E8 43F8 D000                  		lea	(v_objspace).w,a1
000194EC 08A9 0003 0022             		bclr	#3,obStatus(a1)
000194F2 08A8 0003 0022             		bclr	#3,obStatus(a0)
000194F8 4228 0025                  		clr.b	obSolid(a0)
000194FC                            
000194FC                            loc_16420:
000194FC 6000 0000                  		bra.w	loc_16424
00019500                            
00019500                            loc_16424:
00019500 3028 0008                  		move.w	obX(a0),d0
00019504 B068 0034                  		cmp.w	$34(a0),d0
00019508 6600                       		bne.s	loc_16484
0001950A 3028 000C                  		move.w	obY(a0),d0
0001950E B068 0036                  		cmp.w	$36(a0),d0
00019512 6600                       		bne.s	loc_16484
00019514 7200                       		moveq	#0,d1
00019516 1228 0038                  		move.b	$38(a0),d1
0001951A D228 003A                  		add.b	$3A(a0),d1
0001951E B228 0039                  		cmp.b	$39(a0),d1
00019522 6500                       		bcs.s	loc_16456
00019524 1001                       		move.b	d1,d0
00019526 7200                       		moveq	#0,d1
00019528 4A00                       		tst.b	d0
0001952A 6A00                       		bpl.s	loc_16456
0001952C 1228 0039                  		move.b	$39(a0),d1
00019530 5901                       		subq.b	#4,d1
00019532                            
00019532                            loc_16456:
00019532 1141 0038                  		move.b	d1,$38(a0)
00019536 2268 003C                  		movea.l	$3C(a0),a1
0001953A 3171 1000 0034             		move.w	(a1,d1.w),$34(a0)
00019540 3171 1002 0036             		move.w	2(a1,d1.w),$36(a0)
00019546 4A41                       		tst.w	d1
00019548 6600                       		bne.s	loc_16474
0001954A 117C 0001 001C             		move.b	#1,obAnim(a0)
00019550                            
00019550                            loc_16474:
00019550 0C41 0008                  		cmpi.w	#8,d1
00019554 6600                       		bne.s	loc_16480
00019556 117C 0000 001C             		move.b	#0,obAnim(a0)
0001955C                            
0001955C                            loc_16480:
0001955C 6100 B40C                  		bsr.w	LCon_ChangeDir
00019560                            
00019560                            loc_16484:
00019560 4EF9 0000 F968             		jmp	(SpeedToPos).l
00019560 4EF9 0000 F968             		jmp	(SpeedToPos).l
00019566                            		include	"_anim\SBZ Spin Platform Conveyor.asm"
00019566                            ; ---------------------------------------------------------------------------
00019566                            ; Animation script - platform on conveyor belt (SBZ)
00019566                            ; ---------------------------------------------------------------------------
00019566 0000                       Ani_SpinConvey:	dc.w @spin-Ani_SpinConvey
00019568 0000                       		dc.w @still-Ani_SpinConvey
0001956A 0000 0102 0304 4342 4140+  @spin:		dc.b 0,	0, 1, 2, 3, 4, $43, $42, $41, $40, $61,	$62, $63
00019577 6423 2221 00FF             		dc.b $64, $23, $22, $21, 0, afEnd
0001957E 00                         		even
0001957E 0F00 FF                    @still:		dc.b $F, 0, afEnd
00019582 00                         		even
00019582 00                         		even
00019582                            
00019582 0000 0000 0000             off_164A6:	dc.w word_164B2-off_164A6, word_164C6-off_164A6, word_164DA-off_164A6
00019588 0000 0000 0000             		dc.w word_164EE-off_164A6, word_16502-off_164A6, word_16516-off_164A6
0001958E 0010 0E80 0E14 0370 0EEF+  word_164B2:	dc.w $10, $E80,	$E14, $370, $EEF, $302,	$EEF, $340, $E14, $3AE
000195A2 0010 0F80 0F14 02E0 0FEF+  word_164C6:	dc.w $10, $F80,	$F14, $2E0, $FEF, $272,	$FEF, $2B0, $F14, $31E
000195B6 0010 1080 1014 0270 10EF+  word_164DA:	dc.w $10, $1080, $1014,	$270, $10EF, $202, $10EF, $240,	$1014, $2AE
000195CA 0010 0F80 0F14 0570 0FEF+  word_164EE:	dc.w $10, $F80,	$F14, $570, $FEF, $502,	$FEF, $540, $F14, $5AE
000195DE 0010 1B80 1B14 0670 1BEF+  word_16502:	dc.w $10, $1B80, $1B14,	$670, $1BEF, $602, $1BEF, $640,	$1B14, $6AE
000195F2 0010 1C80 1C14 05E0 1CEF+  word_16516:	dc.w $10, $1C80, $1C14,	$5E0, $1CEF, $572, $1CEF, $5B0,	$1C14, $61E
00019606                            ; ===========================================================================
00019606                            
00019606                            		include	"_incObj\70 Girder Block.asm"
00019606                            ; ---------------------------------------------------------------------------
00019606                            ; Object 70 - large girder block (SBZ)
00019606                            ; ---------------------------------------------------------------------------
00019606                            
00019606                            Girder:
00019606 7000                       		moveq	#0,d0
00019608 1028 0024                  		move.b	obRoutine(a0),d0
0001960C 323B 0000                  		move.w	Gird_Index(pc,d0.w),d1
00019610 4EFB 1000                  		jmp	Gird_Index(pc,d1.w)
00019614                            ; ===========================================================================
00019614 0000                       Gird_Index:	dc.w Gird_Main-Gird_Index
00019616 0000                       		dc.w Gird_Action-Gird_Index
00019618                            
00019618 =00000016                  gird_height:	equ $16
00019618 =00000032                  gird_origX:	equ $32		; original x-axis position
00019618 =00000030                  gird_origY:	equ $30		; original y-axis position
00019618 =00000034                  gird_time:	equ $34		; duration for movement in a direction
00019618 =00000038                  gird_set:	equ $38		; which movement settings to use (0/8/16/24)
00019618 =0000003A                  gird_delay:	equ $3A		; delay for movement
00019618                            ; ===========================================================================
00019618                            
00019618                            Gird_Main:	; Routine 0
00019618 5428 0024                  		addq.b	#2,obRoutine(a0)
0001961C 217C 0000 0000 0004        		move.l	#Map_Gird,obMap(a0)
00019624 317C 42F0 0002             		move.w	#$42F0,obGfx(a0)
0001962A 0028 0004 0001             		ori.b	#4,obRender(a0)
00019630 317C 0200 0018             		move.w	#$200,obPriority(a0)
00019636 117C 0060 0014             		move.b	#$60,obActWid(a0)
0001963C 117C 0018 0016             		move.b	#$18,gird_height(a0)
00019642 3168 0008 0032             		move.w	obX(a0),gird_origX(a0)
00019648 3168 000C 0030             		move.w	obY(a0),gird_origY(a0)
0001964E 6100 0000                  		bsr.w	Gird_ChgMove
00019652                            
00019652                            Gird_Action:	; Routine 2
00019652 3F28 0008                  		move.w	obX(a0),-(sp)
00019656 4A68 003A                  		tst.w	gird_delay(a0)
0001965A 6700                       		beq.s	@beginmove
0001965C 5368 003A                  		subq.w	#1,gird_delay(a0)
00019660 6600                       		bne.s	@solid
00019662                            
00019662                            	@beginmove:
00019662 4EB9 0000 F968             		jsr	(SpeedToPos).l
00019668 5368 0034                  		subq.w	#1,gird_time(a0) ; decrement movement duration
0001966C 6600                       		bne.s	@solid		; if time remains, branch
0001966E 6100 0000                  		bsr.w	Gird_ChgMove	; if time is zero, branch
00019672                            
00019672                            	@solid:
00019672 381F                       		move.w	(sp)+,d4
00019674 4A28 0001                  		tst.b	obRender(a0)
00019678 6A00                       		bpl.s	@chkdel
0001967A 7200                       		moveq	#0,d1
0001967C 1228 0014                  		move.b	obActWid(a0),d1
00019680 0641 000B                  		addi.w	#$B,d1
00019684 7400                       		moveq	#0,d2
00019686 1428 0016                  		move.b	gird_height(a0),d2
0001968A 3602                       		move.w	d2,d3
0001968C 5243                       		addq.w	#1,d3
0001968E 6100 86FA                  		bsr.w	SolidObject
00019692                            
00019692                            	@chkdel:
000196AE 4EF9 0000 F97C             		jmp	(DisplaySprite).l
000196B4                            
000196B4                            	@delete:
000196B4 4EF9 0000 F9BC             		jmp	(DeleteObject).l
000196BA                            ; ===========================================================================
000196BA                            
000196BA                            Gird_ChgMove:
000196BA 1028 0038                  		move.b	gird_set(a0),d0
000196BE 0240 0018                  		andi.w	#$18,d0
000196C2 43F9 0000 0000             		lea	(@settings).l,a1
000196C8 43F1 0000                  		lea	(a1,d0.w),a1
000196CC 3159 0010                  		move.w	(a1)+,obVelX(a0)
000196D0 3159 0012                  		move.w	(a1)+,obVelY(a0)
000196D4 3159 0034                  		move.w	(a1)+,gird_time(a0)
000196D8 5028 0038                  		addq.b	#8,gird_set(a0)	; use next settings
000196DC 317C 0007 003A             		move.w	#7,gird_delay(a0)
000196E2 4E75                       		rts	
000196E4                            ; ===========================================================================
000196E4                            @settings:	;   x-speed, y-speed, duration
000196E4 0100 0000 0060 0000        		dc.w   $100,	 0,   $60,     0 ; right
000196EC 0000 0100 0030 0000        		dc.w	  0,  $100,   $30,     0 ; down
000196F4 FF00 FFC0 0060 0000        		dc.w  -$100,  -$40,   $60,     0 ; up/left
000196FC 0000 FF00 0018 0000        		dc.w	  0, -$100,   $18,     0 ; up
000196FC 0000 FF00 0018 0000        		dc.w	  0, -$100,   $18,     0 ; up
00019704                            Map_Gird:	include	"_maps\Girder Block.asm"
00019704                            ; ---------------------------------------------------------------------------
00019704                            ; Sprite mappings - large girder block (SBZ)
00019704                            ; ---------------------------------------------------------------------------
00019704                            Map_Gird_internal:
00019704 0000                       		dc.w @girder-Map_Gird_internal
00019706 0C                         @girder:	dc.b $C
00019707 E80E 0000 A0               		dc.b $E8, $E, 0, 0, $A0
0001970C 000E 1000 A0               		dc.b 0,	$E, $10, 0, $A0
00019711 E80E 0006 C0               		dc.b $E8, $E, 0, 6, $C0
00019716 000E 1006 C0               		dc.b 0,	$E, $10, 6, $C0
0001971B E80E 0006 E0               		dc.b $E8, $E, 0, 6, $E0
00019720 000E 1006 E0               		dc.b 0,	$E, $10, 6, $E0
00019725 E80E 0006 00               		dc.b $E8, $E, 0, 6, 0
0001972A 000E 1006 00               		dc.b 0,	$E, $10, 6, 0
0001972F E80E 0006 20               		dc.b $E8, $E, 0, 6, $20
00019734 000E 1006 20               		dc.b 0,	$E, $10, 6, $20
00019739 E80E 0006 40               		dc.b $E8, $E, 0, 6, $40
0001973E 000E 1006 40               		dc.b 0,	$E, $10, 6, $40
00019744 00                         		even
00019744 00                         		even
00019744                            		include	"_incObj\72 Teleporter.asm"
00019744                            ; ---------------------------------------------------------------------------
00019744                            ; Object 72 - teleporter (SBZ)
00019744                            ; ---------------------------------------------------------------------------
00019744                            
00019744                            Teleport:
00019744 7000                       		moveq	#0,d0
00019746 1028 0024                  		move.b	obRoutine(a0),d0
0001974A 323B 0000                  		move.w	Tele_Index(pc,d0.w),d1
0001974E 4EBB 1000                  		jsr	Tele_Index(pc,d1.w)
0001976E 4E75                       		rts	
00019770                            
00019770                            	@delete:
00019770 4EF9 0000 F9BC             		jmp	(DeleteObject).l
00019776                            ; ===========================================================================
00019776 0000                       Tele_Index:	dc.w Tele_Main-Tele_Index
00019778 0000                       		dc.w loc_166C8-Tele_Index
0001977A 0000                       		dc.w loc_1675E-Tele_Index
0001977C 0000                       		dc.w loc_16798-Tele_Index
0001977E                            ; ===========================================================================
0001977E                            
0001977E                            Tele_Main:	; Routine 0
0001977E 5428 0024                  		addq.b	#2,obRoutine(a0)
00019782 1028 0028                  		move.b	obSubtype(a0),d0
00019786 D040                       		add.w	d0,d0
00019788 0240 001E                  		andi.w	#$1E,d0
0001978C 45FA 0000                  		lea	Tele_Data(pc),a2
00019790 D4F2 0000                  		adda.w	(a2,d0.w),a2
00019794 315A 003A                  		move.w	(a2)+,$3A(a0)
00019798 214A 003C                  		move.l	a2,$3C(a0)
0001979C 315A 0036                  		move.w	(a2)+,$36(a0)
000197A0 315A 0038                  		move.w	(a2)+,$38(a0)
000197A4                            
000197A4                            loc_166C8:	; Routine 2
000197A4 43F8 D000                  		lea	(v_player).w,a1
000197A8 3029 0008                  		move.w	obX(a1),d0
000197AC 9068 0008                  		sub.w	obX(a0),d0
000197B0 0828 0000 0022             		btst	#0,obStatus(a0)
000197B6 6700                       		beq.s	loc_166E0
000197B8 0640 000F                  		addi.w	#$F,d0
000197BC                            
000197BC                            loc_166E0:
000197BC 0C40 0010                  		cmpi.w	#$10,d0
000197C0 6400                       		bcc.s	locret_1675C
000197C2 3229 000C                  		move.w	obY(a1),d1
000197C6 9268 000C                  		sub.w	obY(a0),d1
000197CA 0641 0020                  		addi.w	#$20,d1
000197CE 0C41 0040                  		cmpi.w	#$40,d1
000197D2 6400                       		bcc.s	locret_1675C
000197D4 4A38 F7C8                  		tst.b	(f_lockmulti).w
000197D8 6600                       		bne.s	locret_1675C
000197DA 0C28 0007 0028             		cmpi.b	#7,obSubtype(a0)
000197E0 6600                       		bne.s	loc_1670E
000197E2 0C78 0032 FE20             		cmpi.w	#50,(v_rings).w
000197E8 6500                       		bcs.s	locret_1675C
000197EA                            
000197EA                            loc_1670E:
000197EA 5428 0024                  		addq.b	#2,obRoutine(a0)
000197EE 11FC 0081 F7C8             		move.b	#$81,(f_lockmulti).w ; lock controls
000197F4 137C 0002 001C             		move.b	#id_Roll,obAnim(a1) ; use Sonic's rolling animation
000197FA 337C 0800 0020             		move.w	#$800,obInertia(a1)
00019800 337C 0000 0010             		move.w	#0,obVelX(a1)
00019806 337C 0000 0012             		move.w	#0,obVelY(a1)
0001980C 08A8 0005 0022             		bclr	#5,obStatus(a0)
00019812 08A9 0005 0022             		bclr	#5,obStatus(a1)
00019818 08E9 0001 0022             		bset	#1,obStatus(a1)
0001981E 3368 0008 0008             		move.w	obX(a0),obX(a1)
00019824 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001982A 4228 0032                  		clr.b	$32(a0)
00019838                            
00019838                            locret_1675C:
00019838 4E75                       		rts	
0001983A                            ; ===========================================================================
0001983A                            
0001983A                            loc_1675E:	; Routine 4
0001983A 43F8 D000                  		lea	(v_player).w,a1
0001983E 1028 0032                  		move.b	$32(a0),d0
00019842 5428 0032                  		addq.b	#2,$32(a0)
00019846 4EB9 0000 3A36             		jsr	(CalcSine).l
0001984C EA40                       		asr.w	#5,d0
0001984E 3428 000C                  		move.w	obY(a0),d2
00019852 9440                       		sub.w	d0,d2
00019854 3342 000C                  		move.w	d2,obY(a1)
00019858 0C28 0080 0032             		cmpi.b	#$80,$32(a0)
0001985E 6600                       		bne.s	locret_16796
00019860 6100 0000                  		bsr.w	sub_1681C
00019864 5428 0024                  		addq.b	#2,obRoutine(a0)
00019872                            
00019872                            locret_16796:
00019872 4E75                       		rts	
00019874                            ; ===========================================================================
00019874                            
00019874                            loc_16798:	; Routine 6
00019874 588F                       		addq.l	#4,sp
00019876 43F8 D000                  		lea	(v_player).w,a1
0001987A 5328 002E                  		subq.b	#1,$2E(a0)
0001987E 6A00                       		bpl.s	loc_167DA
00019880 3368 0036 0008             		move.w	$36(a0),obX(a1)
00019886 3368 0038 000C             		move.w	$38(a0),obY(a1)
0001988C 7200                       		moveq	#0,d1
0001988E 1228 003A                  		move.b	$3A(a0),d1
00019892 5801                       		addq.b	#4,d1
00019894 B228 003B                  		cmp.b	$3B(a0),d1
00019898 6500                       		bcs.s	loc_167C2
0001989A 7200                       		moveq	#0,d1
0001989C 6000                       		bra.s	loc_16800
0001989E                            ; ===========================================================================
0001989E                            
0001989E                            loc_167C2:
0001989E 1141 003A                  		move.b	d1,$3A(a0)
000198A2 2468 003C                  		movea.l	$3C(a0),a2
000198A6 3172 1000 0036             		move.w	(a2,d1.w),$36(a0)
000198AC 3172 1002 0038             		move.w	2(a2,d1.w),$38(a0)
000198B2 6000 0000                  		bra.w	sub_1681C
000198B6                            ; ===========================================================================
000198B6                            
000198B6                            loc_167DA:
000198B6 2429 0008                  		move.l	obX(a1),d2
000198BA 2629 000C                  		move.l	obY(a1),d3
000198BE 3029 0010                  		move.w	obVelX(a1),d0
000198C2 48C0                       		ext.l	d0
000198C4 E180                       		asl.l	#8,d0
000198C6 D480                       		add.l	d0,d2
000198C8 3029 0012                  		move.w	obVelY(a1),d0
000198CC 48C0                       		ext.l	d0
000198CE E180                       		asl.l	#8,d0
000198D0 D680                       		add.l	d0,d3
000198D2 2342 0008                  		move.l	d2,obX(a1)
000198D6 2343 000C                  		move.l	d3,obY(a1)
000198DA 4E75                       		rts	
000198DC                            ; ===========================================================================
000198DC                            
000198DC                            loc_16800:
000198DC 0269 07FF 000C             		andi.w	#$7FF,obY(a1)
000198E2 4228 0024                  		clr.b	obRoutine(a0)
000198E6 4238 F7C8                  		clr.b	(f_lockmulti).w
000198EA 337C 0000 0010             		move.w	#0,obVelX(a1)
000198F0 337C 0200 0012             		move.w	#$200,obVelY(a1)
000198F6 4E75                       		rts	
000198F8                            
000198F8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000198F8                            
000198F8                            
000198F8                            sub_1681C:
000198F8 7000                       		moveq	#0,d0
000198FA 343C 1000                  		move.w	#$1000,d2
000198FE 3028 0036                  		move.w	$36(a0),d0
00019902 9069 0008                  		sub.w	obX(a1),d0
00019906 6C00                       		bge.s	loc_16830
00019908 4440                       		neg.w	d0
0001990A 4442                       		neg.w	d2
0001990C                            
0001990C                            loc_16830:
0001990C 7200                       		moveq	#0,d1
0001990E 363C 1000                  		move.w	#$1000,d3
00019912 3228 0038                  		move.w	$38(a0),d1
00019916 9269 000C                  		sub.w	obY(a1),d1
0001991A 6C00                       		bge.s	loc_16844
0001991C 4441                       		neg.w	d1
0001991E 4443                       		neg.w	d3
00019920                            
00019920                            loc_16844:
00019920 B240                       		cmp.w	d0,d1
00019922 6500                       		bcs.s	loc_1687A
00019924 7200                       		moveq	#0,d1
00019926 3228 0038                  		move.w	$38(a0),d1
0001992A 9269 000C                  		sub.w	obY(a1),d1
0001992E 4841                       		swap	d1
00019930 83C3                       		divs.w	d3,d1
00019932 7000                       		moveq	#0,d0
00019934 3028 0036                  		move.w	$36(a0),d0
00019938 9069 0008                  		sub.w	obX(a1),d0
0001993C 6700                       		beq.s	loc_16866
0001993E 4840                       		swap	d0
00019940 81C1                       		divs.w	d1,d0
00019942                            
00019942                            loc_16866:
00019942 3340 0010                  		move.w	d0,obVelX(a1)
00019946 3343 0012                  		move.w	d3,obVelY(a1)
0001994A 4A41                       		tst.w	d1
0001994C 6A00                       		bpl.s	loc_16874
0001994E 4441                       		neg.w	d1
00019950                            
00019950                            loc_16874:
00019950 3141 002E                  		move.w	d1,$2E(a0)
00019954 4E75                       		rts	
00019956                            ; ===========================================================================
00019956                            
00019956                            loc_1687A:
00019956 7000                       		moveq	#0,d0
00019958 3028 0036                  		move.w	$36(a0),d0
0001995C 9069 0008                  		sub.w	obX(a1),d0
00019960 4840                       		swap	d0
00019962 81C2                       		divs.w	d2,d0
00019964 7200                       		moveq	#0,d1
00019966 3228 0038                  		move.w	$38(a0),d1
0001996A 9269 000C                  		sub.w	obY(a1),d1
0001996E 6700                       		beq.s	loc_16898
00019970 4841                       		swap	d1
00019972 83C0                       		divs.w	d0,d1
00019974                            
00019974                            loc_16898:
00019974 3341 0012                  		move.w	d1,obVelY(a1)
00019978 3342 0010                  		move.w	d2,obVelX(a1)
0001997C 4A40                       		tst.w	d0
0001997E 6A00                       		bpl.s	loc_168A6
00019980 4440                       		neg.w	d0
00019982                            
00019982                            loc_168A6:
00019982 3140 002E                  		move.w	d0,$2E(a0)
00019986 4E75                       		rts	
00019988                            ; End of function sub_1681C
00019988                            
00019988                            ; ===========================================================================
00019988 0000 0000 0000             Tele_Data:	dc.w @type00-Tele_Data, @type01-Tele_Data, @type02-Tele_Data
0001998E 0000 0000 0000             		dc.w @type03-Tele_Data, @type04-Tele_Data, @type05-Tele_Data
00019994 0000 0000                  		dc.w @type06-Tele_Data, @type07-Tele_Data
00019998 0004 0794 098C             @type00:	dc.w 4,	$794, $98C
0001999E 0004 0094 038C             @type01:	dc.w 4,	$94, $38C
000199A4 001C 0794 02E8             @type02:	dc.w $1C, $794,	$2E8
000199AA 07A4 02C0 07D0             		dc.w $7A4, $2C0, $7D0
000199B0 02AC 0858 02AC             		dc.w $2AC, $858, $2AC
000199B6 0884 0298 0894             		dc.w $884, $298, $894
000199BC 0270 0894 0190             		dc.w $270, $894, $190
000199C2 0004 0894 0690             @type03:	dc.w 4,	$894, $690
000199C8 001C 1194 0470             @type04:	dc.w $1C, $1194, $470
000199CE 1184 0498 1158             		dc.w $1184, $498, $1158
000199D4 04AC 0FD0 04AC             		dc.w $4AC, $FD0, $4AC
000199DA 0FA4 04C0 0F94             		dc.w $FA4, $4C0, $F94
000199E0 04E8 0F94 0590             		dc.w $4E8, $F94, $590
000199E6 0004 1294 0490             @type05:	dc.w 4,	$1294, $490
000199EC 001C 1594 FFE8             @type06:	dc.w $1C, $1594, $FFE8
000199F2 1584 FFC0 1560             		dc.w $1584, $FFC0, $1560
000199F8 FFAC 14D0 FFAC             		dc.w $FFAC, $14D0, $FFAC
000199FE 14A4 FF98 1494             		dc.w $14A4, $FF98, $1494
00019A04 FF70 1494 FD90             		dc.w $FF70, $1494, $FD90
00019A0A 0004 0894 0090             @type07:	dc.w 4,	$894, $90
00019A0A 0004 0894 0090             @type07:	dc.w 4,	$894, $90
00019A10                            
00019A10                            		include	"_incObj\78 Caterkiller.asm"
00019A10                            ; ---------------------------------------------------------------------------
00019A10                            ; Object 78 - Caterkiller enemy	(MZ, SBZ)
00019A10                            ; ---------------------------------------------------------------------------
00019A10                            
00019A10                            Caterkiller:
00019A10 7000                       		moveq	#0,d0
00019A12 1028 0024                  		move.b	obRoutine(a0),d0
00019A16 323B 0000                  		move.w	Cat_Index(pc,d0.w),d1
00019A1A 4EFB 1000                  		jmp	Cat_Index(pc,d1.w)
00019A1E                            ; ===========================================================================
00019A1E 0000                       Cat_Index:	dc.w Cat_Main-Cat_Index
00019A20 0000                       		dc.w Cat_Head-Cat_Index
00019A22 0000                       		dc.w Cat_BodySeg1-Cat_Index
00019A24 0000                       		dc.w Cat_BodySeg2-Cat_Index
00019A26 0000                       		dc.w Cat_BodySeg1-Cat_Index
00019A28 0000                       		dc.w Cat_Delete-Cat_Index
00019A2A 0000                       		dc.w loc_16CC0-Cat_Index
00019A2C                            
00019A2C =0000003C                  cat_parent:	equ $3C		; address of parent object
00019A2C                            ; ===========================================================================
00019A2C                            
00019A2C                            locret_16950:
00019A2C 4E75                       		rts	
00019A2E                            ; ===========================================================================
00019A2E                            
00019A2E                            Cat_Main:	; Routine 0
00019A2E 117C 0007 0016             		move.b	#7,obHeight(a0)
00019A34 117C 0008 0017             		move.b	#8,obWidth(a0)
00019A3A 4EB9 0000 F930             		jsr	(ObjectFall).l
00019A40 4EB9 0001 7EF6             		jsr	(ObjFloorDist).l
00019A46 4A41                       		tst.w	d1
00019A48 6AE2                       		bpl.s	locret_16950
00019A4A D368 000C                  		add.w	d1,obY(a0)
00019A4E 4268 0012                  		clr.w	obVelY(a0)
00019A52 5428 0024                  		addq.b	#2,obRoutine(a0)
00019A56 217C 0000 0000 0004        		move.l	#Map_Cat,obMap(a0)
00019A5E 317C 22B0 0002             		move.w	#$22B0,obGfx(a0)
00019A64 0C38 0005 FE10             		cmpi.b	#id_SBZ,(v_zone).w ; if level is SBZ, branch
00019A6A 6700                       		beq.s	@isscrapbrain
00019A6C 317C 24FF 0002             		move.w	#$24FF,obGfx(a0) ; MZ specific code
00019A72                            
00019A72                            	@isscrapbrain:
00019A72 0228 0003 0001             		andi.b	#3,obRender(a0)
00019A78 0028 0004 0001             		ori.b	#4,obRender(a0)
00019A7E 1168 0001 0022             		move.b	obRender(a0),obStatus(a0)
00019A84 317C 0200 0018             		move.w	#$200,obPriority(a0)
00019A8A 117C 0008 0014             		move.b	#8,obActWid(a0)
00019A90 117C 000B 0020             		move.b	#$B,obColType(a0)
00019A96 3428 0008                  		move.w	obX(a0),d2
00019A9A 7A0C                       		moveq	#$C,d5
00019A9C 0828 0000 0022             		btst	#0,obStatus(a0)
00019AA2 6700                       		beq.s	@noflip
00019AA4 4445                       		neg.w	d5
00019AA6                            
00019AA6                            	@noflip:
00019AA6 1C3C 0004                  		move.b	#4,d6
00019AAA 7600                       		moveq	#0,d3
00019AAC 7804                       		moveq	#4,d4
00019AAE 2448                       		movea.l	a0,a2
00019AB0 7202                       		moveq	#2,d1
00019AB2                            
00019AB2                            Cat_Loop:
00019AB2 4EB9 0000 FE1E             		jsr	(FindNextFreeObj).l
00019AB8 6600 0000                  			bne.w	Cat_ChkGone
00019ABC 12BC 0078                  		move.b	#id_Caterkiller,0(a1) ; load body segment object
00019AC0 1346 0024                  		move.b	d6,obRoutine(a1) ; goto Cat_BodySeg1 or Cat_BodySeg2 next
00019AC4 5406                       		addq.b	#2,d6		; alternate between the two
00019AC6 2368 0004 0004             		move.l	obMap(a0),obMap(a1)
00019ACC 3368 0002 0002             		move.w	obGfx(a0),obGfx(a1)
00019AD2 337C 0280 0018             		move.w	#$280,obPriority(a1)
00019AD8 137C 0008 0014             		move.b	#8,obActWid(a1)
00019ADE 137C 00CB 0020             		move.b	#$CB,obColType(a1)
00019AE4 D445                       		add.w	d5,d2
00019AE6 3342 0008                  		move.w	d2,obX(a1)
00019AEA 3368 000C 000C             		move.w	obY(a0),obY(a1)
00019AF0 1368 0022 0022             		move.b	obStatus(a0),obStatus(a1)
00019AF6 1368 0022 0001             		move.b	obStatus(a0),obRender(a1)
00019AFC 137C 0008 001A             		move.b	#8,obFrame(a1)
00019B02 234A 003C                  		move.l	a2,cat_parent(a1)
00019B06 1344 003C                  		move.b	d4,cat_parent(a1)
00019B0A 5804                       		addq.b	#4,d4
00019B0C 2449                       		movea.l	a1,a2
00019B0E                            
00019B0E                            	@fail:
00019B0E 51C9 FFA2                  		dbf	d1,Cat_Loop	; repeat sequence 2 more times
00019B12                            
00019B12 117C 0007 002A             		move.b	#7,$2A(a0)
00019B18 4228 003C                  		clr.b	cat_parent(a0)
00019B1C                            
00019B1C                            Cat_Head:	; Routine 2
00019B1C 4A28 0022                  		tst.b	obStatus(a0)
00019B20 6B00 0000                  		bmi.w	loc_16C96
00019B24 7000                       		moveq	#0,d0
00019B26 1028 0025                  		move.b	ob2ndRout(a0),d0
00019B2A 323B 0000                  		move.w	Cat_Index2(pc,d0.w),d1
00019B2E 4EBB 1000                  		jsr	Cat_Index2(pc,d1.w)
00019B32 1228 002B                  		move.b	$2B(a0),d1
00019B36 6A00                       		bpl.s	@display
00019B38 43F9 0000 0000             		lea	(Ani_Cat).l,a1
00019B3E 1028 0026                  		move.b	obAngle(a0),d0
00019B42 0240 007F                  		andi.w	#$7F,d0
00019B46 5828 0026                  		addq.b	#4,obAngle(a0)
00019B4A 1031 0000                  		move.b	(a1,d0.w),d0
00019B4E 6A00                       		bpl.s	@animate
00019B50 08A8 0007 002B             		bclr	#7,$2B(a0)
00019B56 6000                       		bra.s	@display
00019B58                            
00019B58                            	@animate:
00019B58 0201 0010                  		andi.b	#$10,d1
00019B5C D001                       		add.b	d1,d0
00019B5E 1140 001A                  		move.b	d0,obFrame(a0)
00019B62                            
00019B62                            	@display:
00019B80 4EF9 0000 F97C             		jmp	(DisplaySprite).l
00019B86                            
00019B86                            	Cat_ChkGone:
00019B86 45F8 FC00                  		lea	(v_objstate).w,a2
00019B8A 7000                       		moveq	#0,d0
00019B8C 1028 0023                  		move.b	obRespawnNo(a0),d0
00019B90 6700                       		beq.s	@delete
00019B92 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00019B98                            
00019B98                            	@delete:
00019B98 117C 000A 0024             		move.b	#$A,obRoutine(a0)	; goto Cat_Delete next
00019B9E 4E75                       		rts	
00019BA0                            ; ===========================================================================
00019BA0                            
00019BA0                            Cat_Delete:	; Routine $A
00019BA0 4EF9 0000 F9BC             		jmp	(DeleteObject).l
00019BA6                            ; ===========================================================================
00019BA6 0000                       Cat_Index2:	dc.w @wait-Cat_Index2
00019BA8 0000                       		dc.w loc_16B02-Cat_Index2
00019BAA                            ; ===========================================================================
00019BAA                            
00019BAA                            @wait:
00019BAA 5328 002A                  		subq.b	#1,$2A(a0)
00019BAE 6B00                       		bmi.s	@move
00019BB0 4E75                       		rts	
00019BB2                            ; ===========================================================================
00019BB2                            
00019BB2                            @move:
00019BB2 5428 0025                  		addq.b	#2,ob2ndRout(a0)
00019BB6 117C 0010 002A             		move.b	#$10,$2A(a0)
00019BBC 317C FF40 0010             		move.w	#-$C0,obVelX(a0)
00019BC2 317C 0040 001C             		move.w	#$40,obAnim(a0)
00019BC8 0868 0004 002B             		bchg	#4,$2B(a0)
00019BCE 6600                       		bne.s	loc_16AFC
00019BD0 4268 0010                  		clr.w	obVelX(a0)
00019BD4 4468 001C                  		neg.w	obAnim(a0)
00019BD8                            
00019BD8                            loc_16AFC:
00019BD8 08E8 0007 002B             		bset	#7,$2B(a0)
00019BDE                            
00019BDE                            loc_16B02:
00019BDE 5328 002A                  		subq.b	#1,$2A(a0)
00019BE2 6B00                       		bmi.s	@loc_16B5E
00019BE4 4A68 0010                  			tst.w	obVelX(a0)
00019BE8 6700                       			beq.s	@notmoving
00019BEA 2428 0008                  			move.l	obX(a0),d2
00019BEE 2602                       			move.l	d2,d3
00019BF0 3028 0010                  		move.w	obVelX(a0),d0
00019BF4 0828 0000 0022             		btst	#0,obStatus(a0)
00019BFA 6700                       		beq.s	@noflip
00019BFC 4440                       		neg.w	d0
00019BFE                            
00019BFE                            	@noflip:
00019BFE 48C0                       		ext.l	d0
00019C00 E180                       		asl.l	#8,d0
00019C02 D480                       		add.l	d0,d2
00019C04 2142 0008                  		move.l	d2,obX(a0)
00019C08 4843                       			swap	d3
00019C0A B668 0008                  			cmp.w	obX(a0),d3
00019C0E 6700                       			beq.s	@notmoving
00019C10 4EB9 0001 7EF6             			jsr	(ObjFloorDist).l
00019C16 0C41 FFF8                  			cmpi.w	#-8,d1
00019C1A 6D00                       			blt.s	@loc_16B70
00019C1C 0C41 000C                  			cmpi.w	#$C,d1
00019C20 6C00                       			bge.s	@loc_16B70
00019C22 D368 000C                  			add.w	d1,obY(a0)
00019C26 7000                       		moveq	#0,d0
00019C28 1028 003C                  		move.b	cat_parent(a0),d0
00019C2C 5228 003C                  		addq.b	#1,cat_parent(a0)
00019C30 0228 000F 003C             		andi.b	#$F,cat_parent(a0)
00019C36 1181 002C                  		move.b	d1,$2C(a0,d0.w)
00019C3A                            
00019C3A                            	@notmoving:
00019C3A 4E75                       		rts	
00019C3C                            ; ===========================================================================
00019C3C                            
00019C3C                            @loc_16B5E:
00019C3C 5528 0025                  		subq.b	#2,ob2ndRout(a0)
00019C40 117C 0007 002A             		move.b	#7,$2A(a0)
00019C46 4268 0010                  			clr.w	obVelX(a0)
00019C4A 4268 001C                  			clr.w	obAnim(a0)
00019C4E 4E75                       		rts	
00019C50                            ; ===========================================================================
00019C50                            
00019C50                            @loc_16B70:
00019C50 7000                       			moveq	#0,d0
00019C52 1028 003C                  			move.b	cat_parent(a0),d0
00019C56 11BC 0080 002C             			move.b	#$80,$2C(a0,d0)
00019C5C 4468 000A                  			neg.w	obX+2(a0)
00019C60 6700                       			beq.s	@loc_1730A
00019C62 0828 0000 0022             			btst	#0,obStatus(a0)
00019C68 6700                       			beq.s	@loc_1730A
00019C6A 5368 0008                  			subq.w	#1,obX(a0)
00019C6E 5228 003C                  			addq.b	#1,cat_parent(a0)
00019C72 7000                       			moveq	#0,d0
00019C74 1028 003C                  			move.b	cat_parent(a0),d0
00019C78 4230 002C                  			clr.b	$2C(a0,d0)
00019C7C                            	@loc_1730A:
00019C7C 0868 0000 0022             			bchg	#0,obStatus(a0)
00019C82 1168 0022 0001             			move.b	obStatus(a0),obRender(a0)
00019C88 5228 003C                  		addq.b	#1,cat_parent(a0)
00019C8C 0228 000F 003C             		andi.b	#$F,cat_parent(a0)
00019C92 4E75                       		rts	
00019C94                            ; ===========================================================================
00019C94                            
00019C94                            Cat_BodySeg2:	; Routine 6
00019C94 2268 003C                  		movea.l	cat_parent(a0),a1
00019C98 1169 002B 002B             		move.b	$2B(a1),$2B(a0)
00019C9E 6A00                       		bpl.s	Cat_BodySeg1
00019CA0 43F9 0000 0000             		lea	(Ani_Cat).l,a1
00019CA6 1028 0026                  		move.b	obAngle(a0),d0
00019CAA 0240 007F                  		andi.w	#$7F,d0
00019CAE 5828 0026                  		addq.b	#4,obAngle(a0)
00019CB2 4A31 0004                  		tst.b	4(a1,d0.w)
00019CB6 6A00                       		bpl.s	Cat_AniBody
00019CB8 5828 0026                  		addq.b	#4,obAngle(a0)
00019CBC                            
00019CBC                            Cat_AniBody:
00019CBC 1031 0000                  		move.b	(a1,d0.w),d0
00019CC0 5000                       		addq.b	#8,d0
00019CC2 1140 001A                  		move.b	d0,obFrame(a0)
00019CC6                            
00019CC6                            Cat_BodySeg1:	; Routine 4, 8
00019CC6 2268 003C                  		movea.l	cat_parent(a0),a1
00019CCA 4A28 0022                  		tst.b	obStatus(a0)
00019CCE 6B00 0000                  		bmi.w	loc_16C90
00019CD2 1169 002B 002B             		move.b	$2B(a1),$2B(a0)
00019CD8 1169 0025 0025             		move.b	ob2ndRout(a1),ob2ndRout(a0)
00019CDE 6700 0000                  		beq.w	loc_16C64
00019CE2 3169 001C 001C             		move.w	obAnim(a1),obAnim(a0)
00019CE8 3029 0010                  		move.w	obVelX(a1),d0
00019CEC D068 001C                  			add.w	obAnim(a0),d0
00019CF0 3140 0010                  		move.w	d0,obVelX(a0)
00019CF4 2428 0008                  		move.l	obX(a0),d2
00019CF8 2602                       		move.l	d2,d3
00019CFA 3028 0010                  		move.w	obVelX(a0),d0
00019CFE 0828 0000 0022             		btst	#0,obStatus(a0)
00019D04 6700                       		beq.s	loc_16C0C
00019D06 4440                       		neg.w	d0
00019D08                            
00019D08                            loc_16C0C:
00019D08 48C0                       		ext.l	d0
00019D0A E180                       		asl.l	#8,d0
00019D0C D480                       		add.l	d0,d2
00019D0E 2142 0008                  		move.l	d2,obX(a0)
00019D12 4843                       		swap	d3
00019D14 B668 0008                  		cmp.w	obX(a0),d3
00019D18 6700                       		beq.s	loc_16C64
00019D1A 7000                       		moveq	#0,d0
00019D1C 1028 003C                  		move.b	cat_parent(a0),d0
00019D20 1231 002C                  		move.b	$2C(a1,d0.w),d1
00019D24 0C01 0080                  		cmpi.b	#$80,d1
00019D28 6600                       		bne.s	loc_16C50
00019D2A 1181 002C                  			move.b	d1,$2C(a0,d0)
00019D2E 4468 000A                  			neg.w	obX+2(a0)
00019D32 6700                       			beq.s	locj_173E4
00019D34 0828 0000 0022             			btst	#0,obStatus(a0)
00019D3A 6700                       			beq.s	locj_173E4
00019D3C 0C68 FF40 0010             			cmpi.w	#-$C0,obVelX(a0)
00019D42 6600                       			bne.s	locj_173E4
00019D44 5368 0008                  			subq.w	#1,obX(a0)
00019D48 5228 003C                  			addq.b	#1,cat_parent(a0)
00019D4C 7000                       			moveq	#0,d0
00019D4E 1028 003C                  			move.b	cat_parent(a0),d0
00019D52 4230 002C                  			clr.b	$2C(a0,d0)
00019D56                            	locj_173E4:
00019D56 0868 0000 0022             		bchg	#0,obStatus(a0)
00019D5C 1168 0022 0001             		move.b	obStatus(a0),1(a0)
00019D62 5228 003C                  		addq.b	#1,cat_parent(a0)
00019D66 0228 000F 003C             		andi.b	#$F,cat_parent(a0)
00019D6C 6000                       		bra.s	loc_16C64
00019D6E                            ; ===========================================================================
00019D6E                            
00019D6E                            loc_16C50:
00019D6E 4881                       		ext.w	d1
00019D70 D368 000C                  		add.w	d1,obY(a0)
00019D74 5228 003C                  		addq.b	#1,cat_parent(a0)
00019D78 0228 000F 003C             		andi.b	#$F,cat_parent(a0)
00019D7E 1181 002C                  		move.b	d1,$2C(a0,d0.w)
00019D82                            
00019D82                            loc_16C64:
00019D82 0C29 000C 0024             		cmpi.b	#$C,obRoutine(a1)
00019D88 6700                       		beq.s	loc_16C90
00019D8A 0C11 0027                  		cmpi.b	#id_ExplosionItem,0(a1)
00019D8E 6700                       		beq.s	loc_16C7C
00019D90 0C29 000A 0024             		cmpi.b	#$A,obRoutine(a1)
00019D96 6600                       		bne.s	loc_16C82
00019D98                            
00019D98                            loc_16C7C:
00019D98 4229 0020                  		clr.b    $20(a1)
00019D9C 117C 000A 0024             		move.b	#$A,obRoutine(a0)
00019DA2                            
00019DA2                            loc_16C82:
00019DA2 4EF9 0000 F97C             		jmp	(DisplaySprite).l
00019DA8                            
00019DA8                            ; ===========================================================================
00019DA8 FE00 FE80 0180 0200        Cat_FragSpeed:	dc.w -$200, -$180, $180, $200
00019DB0                            ; ===========================================================================
00019DB0                            
00019DB0                            loc_16C90:
00019DB0 08E9 0007 0022             		bset	#7,obStatus(a1)
00019DB6                            
00019DB6                            loc_16C96:
00019DB6 7000                       		moveq	#0,d0
00019DB8 1028 0024                  		move.b	obRoutine(a0),d0
00019DBC 303B 00E8                  		move.w	Cat_FragSpeed-2(pc,d0.w),d0
00019DC0 0828 0000 0022             		btst	#0,obStatus(a0)
00019DC6 6700                       		beq.s	loc_16CAA
00019DC8 4440                       		neg.w	d0
00019DCA                            
00019DCA                            loc_16CAA:
00019DCA 3140 0010                  		move.w	d0,obVelX(a0)
00019DCE 317C FC00 0012             		move.w	#-$400,obVelY(a0)
00019DD4 117C 000C 0024             		move.b	#$C,obRoutine(a0)
00019DDA 0228 00F8 001A             		andi.b	#$F8,obFrame(a0)
00019DE0                            
00019DE0                            loc_16CC0:	; Routine $C
00019DE0 4EB9 0000 F930             		jsr	(ObjectFall).l
00019DE6 4A68 0012                  		tst.w	obVelY(a0)
00019DEA 6B00                       		bmi.s	loc_16CE0
00019DEC 4EB9 0001 7EF6             		jsr	(ObjFloorDist).l
00019DF2 4A41                       		tst.w	d1
00019DF4 6A00                       		bpl.s	loc_16CE0
00019DF6 D368 000C                  		add.w	d1,obY(a0)
00019DFA 317C FC00 0012             		move.w	#-$400,obVelY(a0)
00019E00                            
00019E00                            loc_16CE0:
00019E00 4A28 0001                  		tst.b	obRender(a0)
00019E04 6A00 FD80                  		bpl.w	Cat_ChkGone
00019E08 4EF9 0000 F97C             		jmp	(DisplaySprite).l
00019E08 4EF9 0000 F97C             		jmp	(DisplaySprite).l
00019E0E                            		include	"_anim\Caterkiller.asm"
00019E0E                            ; ---------------------------------------------------------------------------
00019E0E                            ; Animation script - Caterkiller enemy (uses non-standard format)
00019E0E                            ; ---------------------------------------------------------------------------
00019E0E 0000 0000 0000 0000 0000+  Ani_Cat:	dc.b 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 1
00019E1E 0101 0101 0101 0202 0202+  		dc.b 1,	1, 1, 1, 1, 1, 2, 2, 2,	2, 2, 3, 3, 3, 3, 3
00019E2E 0404 0404 0404 0505 0505+  		dc.b 4,	4, 4, 4, 4, 4, 5, 5, 5,	5, 5, 6, 6, 6, 6, 6
00019E3E 0606 0707 0707 0707 0707+  		dc.b 6,	6, 7, 7, 7, 7, 7, 7, 7,	7, 7, 7, $FF, 7, 7, $FF
00019E4E 0707 0707 0707 0707 0707+  		dc.b 7,	7, 7, 7, 7, 7, 7, 7, 7,	7, 7, 7, 7, 7, 7, 6
00019E5E 0606 0606 0606 0505 0505+  		dc.b 6,	6, 6, 6, 6, 6, 5, 5, 5,	5, 5, 4, 4, 4, 4, 4
00019E6E 0403 0303 0303 0202 0202+  		dc.b 4,	3, 3, 3, 3, 3, 2, 2, 2,	2, 2, 1, 1, 1, 1, 1
00019E7E 0101 0000 0000 0000 0000+  		dc.b 1,	1, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, $FF, 0, 0, $FF
00019E8E                            		even
00019E8E                            		even
00019E8E                            Map_Cat:	include	"_maps\Caterkiller.asm"
00019E8E                            ; ---------------------------------------------------------------------------
00019E8E                            ; Sprite mappings - Caterkiller	enemy (MZ, SBZ)
00019E8E                            ; ---------------------------------------------------------------------------
00019E8E                            Map_Cat_internal:
00019E8E 0000                       		dc.w byte_16D9E-Map_Cat_internal
00019E90 0000                       		dc.w byte_16DA4-Map_Cat_internal
00019E92 0000                       		dc.w byte_16DAA-Map_Cat_internal
00019E94 0000                       		dc.w byte_16DB0-Map_Cat_internal
00019E96 0000                       		dc.w byte_16DB6-Map_Cat_internal
00019E98 0000                       		dc.w byte_16DBC-Map_Cat_internal
00019E9A 0000                       		dc.w byte_16DC2-Map_Cat_internal
00019E9C 0000                       		dc.w byte_16DC8-Map_Cat_internal
00019E9E 0000                       		dc.w byte_16DCE-Map_Cat_internal
00019EA0 0000                       		dc.w byte_16DD4-Map_Cat_internal
00019EA2 0000                       		dc.w byte_16DDA-Map_Cat_internal
00019EA4 0000                       		dc.w byte_16DE0-Map_Cat_internal
00019EA6 0000                       		dc.w byte_16DE6-Map_Cat_internal
00019EA8 0000                       		dc.w byte_16DEC-Map_Cat_internal
00019EAA 0000                       		dc.w byte_16DF2-Map_Cat_internal
00019EAC 0000                       		dc.w byte_16DF8-Map_Cat_internal
00019EAE 0000                       		dc.w byte_16DFE-Map_Cat_internal
00019EB0 0000                       		dc.w byte_16E04-Map_Cat_internal
00019EB2 0000                       		dc.w byte_16E0A-Map_Cat_internal
00019EB4 0000                       		dc.w byte_16E10-Map_Cat_internal
00019EB6 0000                       		dc.w byte_16E16-Map_Cat_internal
00019EB8 0000                       		dc.w byte_16E1C-Map_Cat_internal
00019EBA 0000                       		dc.w byte_16E22-Map_Cat_internal
00019EBC 0000                       		dc.w byte_16E28-Map_Cat_internal
00019EBE 01                         byte_16D9E:	dc.b 1
00019EBF F206 0000 F8               		dc.b $F2, 6, 0,	0, $F8
00019EC4 01                         byte_16DA4:	dc.b 1
00019EC5 F106 0000 F8               		dc.b $F1, 6, 0,	0, $F8
00019ECA 01                         byte_16DAA:	dc.b 1
00019ECB F006 0000 F8               		dc.b $F0, 6, 0,	0, $F8
00019ED0 01                         byte_16DB0:	dc.b 1
00019ED1 EF06 0000 F8               		dc.b $EF, 6, 0,	0, $F8
00019ED6 01                         byte_16DB6:	dc.b 1
00019ED7 EE06 0000 F8               		dc.b $EE, 6, 0,	0, $F8
00019EDC 01                         byte_16DBC:	dc.b 1
00019EDD ED06 0000 F8               		dc.b $ED, 6, 0,	0, $F8
00019EE2 01                         byte_16DC2:	dc.b 1
00019EE3 EC06 0000 F8               		dc.b $EC, 6, 0,	0, $F8
00019EE8 01                         byte_16DC8:	dc.b 1
00019EE9 EB06 0000 F8               		dc.b $EB, 6, 0,	0, $F8
00019EEE 01                         byte_16DCE:	dc.b 1
00019EEF F805 000C F8               		dc.b $F8, 5, 0,	$C, $F8
00019EF4 01                         byte_16DD4:	dc.b 1
00019EF5 F705 000C F8               		dc.b $F7, 5, 0,	$C, $F8
00019EFA 01                         byte_16DDA:	dc.b 1
00019EFB F605 000C F8               		dc.b $F6, 5, 0,	$C, $F8
00019F00 01                         byte_16DE0:	dc.b 1
00019F01 F505 000C F8               		dc.b $F5, 5, 0,	$C, $F8
00019F06 01                         byte_16DE6:	dc.b 1
00019F07 F405 000C F8               		dc.b $F4, 5, 0,	$C, $F8
00019F0C 01                         byte_16DEC:	dc.b 1
00019F0D F305 000C F8               		dc.b $F3, 5, 0,	$C, $F8
00019F12 01                         byte_16DF2:	dc.b 1
00019F13 F205 000C F8               		dc.b $F2, 5, 0,	$C, $F8
00019F18 01                         byte_16DF8:	dc.b 1
00019F19 F105 000C F8               		dc.b $F1, 5, 0,	$C, $F8
00019F1E 01                         byte_16DFE:	dc.b 1
00019F1F F206 0006 F8               		dc.b $F2, 6, 0,	6, $F8
00019F24 01                         byte_16E04:	dc.b 1
00019F25 F106 0006 F8               		dc.b $F1, 6, 0,	6, $F8
00019F2A 01                         byte_16E0A:	dc.b 1
00019F2B F006 0006 F8               		dc.b $F0, 6, 0,	6, $F8
00019F30 01                         byte_16E10:	dc.b 1
00019F31 EF06 0006 F8               		dc.b $EF, 6, 0,	6, $F8
00019F36 01                         byte_16E16:	dc.b 1
00019F37 EE06 0006 F8               		dc.b $EE, 6, 0,	6, $F8
00019F3C 01                         byte_16E1C:	dc.b 1
00019F3D ED06 0006 F8               		dc.b $ED, 6, 0,	6, $F8
00019F42 01                         byte_16E22:	dc.b 1
00019F43 EC06 0006 F8               		dc.b $EC, 6, 0,	6, $F8
00019F48 01                         byte_16E28:	dc.b 1
00019F49 EB06 0006 F8               		dc.b $EB, 6, 0,	6, $F8
00019F4E                            		even
00019F4E                            		even
00019F4E                            
00019F4E                            		include	"_incObj\79 Lamppost.asm"
00019F4E                            ; ---------------------------------------------------------------------------
00019F4E                            ; Object 79 - lamppost
00019F4E                            ; ---------------------------------------------------------------------------
00019F4E                            
00019F4E                            Lamppost:
00019F4E 7000                       		moveq	#0,d0
00019F50 1028 0024                  		move.b	obRoutine(a0),d0
00019F54 323B 0000                  		move.w	Lamp_Index(pc,d0.w),d1
00019F58 4EBB 1000                  		jsr	Lamp_Index(pc,d1.w)
00019F5C 4EF9 0001 18F2             		jmp	(RememberState).l
00019F62                            ; ===========================================================================
00019F62 0000                       Lamp_Index:	dc.w Lamp_Main-Lamp_Index
00019F64 0000                       		dc.w Lamp_Blue-Lamp_Index
00019F66 0000                       		dc.w Lamp_Finish-Lamp_Index
00019F68 0000                       		dc.w Lamp_Twirl-Lamp_Index
00019F6A                            
00019F6A =00000030                  lamp_origX:	equ $30		; original x-axis position
00019F6A =00000032                  lamp_origY:	equ $32		; original y-axis position
00019F6A =00000036                  lamp_time:	equ $36		; length of time to twirl the lamp
00019F6A                            ; ===========================================================================
00019F6A                            
00019F6A                            Lamp_Main:	; Routine 0
00019F6A 5428 0024                  		addq.b	#2,obRoutine(a0)
00019F6E 217C 0000 0000 0004        		move.l	#Map_Lamp,obMap(a0)
00019F76 317C 06C0 0002             		move.w	#($D800/$20),2(a0)
00019F7C 117C 0004 0001             		move.b	#4,obRender(a0)
00019F82 117C 0008 0014             		move.b	#8,obActWid(a0)
00019F88 317C 0280 0018             		move.w	#$280,obPriority(a0)
00019F8E 45F8 FC00                  		lea	(v_objstate).w,a2
00019F92 7000                       		moveq	#0,d0
00019F94 1028 0023                  		move.b	obRespawnNo(a0),d0
00019F98 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00019F9E 0832 0000 0002             		btst	#0,2(a2,d0.w)
00019FA4 6600                       		bne.s	@red
00019FA6 1238 FE30                  		move.b	(v_lastlamp).w,d1
00019FAA 0201 007F                  		andi.b	#$7F,d1
00019FAE 1428 0028                  		move.b	obSubtype(a0),d2 ; get lamppost number
00019FB2 0202 007F                  		andi.b	#$7F,d2
00019FB6 B202                       		cmp.b	d2,d1		; is this a "new" lamppost?
00019FB8 6500                       		bcs.s	Lamp_Blue	; if yes, branch
00019FBA                            
00019FBA                            @red:
00019FBA 08F2 0000 0002             		bset	#0,2(a2,d0.w)
00019FC0 117C 0004 0024             		move.b	#4,obRoutine(a0) ; goto Lamp_Finish next
00019FC6 117C 0003 001A             		move.b	#3,obFrame(a0)
00019FCC 4E75                       		rts	
00019FCE                            
00019FCE                            ; ===========================================================================
00019FCE                            
00019FCE                            Lamp_Blue:	; Routine 2
00019FCE 4A78 FE08                  		tst.w	(v_debuguse).w	; is debug mode	being used?
00019FD2 6600 0000                  		bne.w	@donothing	; if yes, branch
00019FD6 4A38 F7C8                  		tst.b	(f_lockmulti).w
00019FDA 6B00 0000                  		bmi.w	@donothing
00019FDE 1238 FE30                  		move.b	(v_lastlamp).w,d1
00019FE2 0201 007F                  		andi.b	#$7F,d1
00019FE6 1428 0028                  		move.b	obSubtype(a0),d2
00019FEA 0202 007F                  		andi.b	#$7F,d2
00019FEE B202                       		cmp.b	d2,d1		; is this a "new" lamppost?
00019FF0 6500                       		bcs.s	@chkhit		; if yes, branch
00019FF2 45F8 FC00                  		lea	(v_objstate).w,a2
00019FF6 7000                       		moveq	#0,d0
00019FF8 1028 0023                  		move.b	obRespawnNo(a0),d0
00019FFC 08F2 0000 0002             		bset	#0,2(a2,d0.w)
0001A002 117C 0004 0024             		move.b	#4,obRoutine(a0)
0001A008 117C 0003 001A             		move.b	#3,obFrame(a0)
0001A00E 6000 0000                  		bra.w	@donothing
0001A012                            ; ===========================================================================
0001A012                            
0001A012                            @chkhit:
0001A012 3038 D008                  		move.w	(v_player+obX).w,d0
0001A016 9068 0008                  		sub.w	obX(a0),d0
0001A01A 5040                       		addq.w	#8,d0
0001A01C 0C40 0010                  		cmpi.w	#$10,d0
0001A020 6400 0000                  		bcc.w	@donothing
0001A024 3038 D00C                  		move.w	(v_player+obY).w,d0
0001A028 9068 000C                  		sub.w	obY(a0),d0
0001A02C 0640 0040                  		addi.w	#$40,d0
0001A030 0C40 0068                  		cmpi.w	#$68,d0
0001A034 6400                       		bcc.s	@donothing
0001A036                            
0001A040 5428 0024                  		addq.b	#2,obRoutine(a0)
0001A044 4EB9 0000 FE08             		jsr	(FindFreeObj).l
0001A04A 6600                       		bne.s	@fail
0001A04C 12BC 0079                  		move.b	#id_Lamppost,0(a1)	; load twirling	lamp object
0001A050 137C 0006 0024             		move.b	#6,obRoutine(a1) ; goto Lamp_Twirl next
0001A056 3368 0008 0030             		move.w	obX(a0),lamp_origX(a1)
0001A05C 3368 000C 0032             		move.w	obY(a0),lamp_origY(a1)
0001A062 0469 0018 0032             		subi.w	#$18,lamp_origY(a1)
0001A068 237C 0000 0000 0004        		move.l	#Map_Lamp,obMap(a1)
0001A070 337C 06C0 0002             		move.w	#($D800/$20),2(a1)
0001A076 137C 0004 0001             		move.b	#4,obRender(a1)
0001A07C 137C 0008 0014             		move.b	#8,obActWid(a1)
0001A082 337C 0200 0018             		move.w	#$200,obPriority(a1)
0001A088 137C 0002 001A             		move.b	#2,obFrame(a1)	; use "ball only" frame
0001A08E 337C 0020 0036             		move.w	#$20,lamp_time(a1)
0001A094                            
0001A094                            	@fail:
0001A094 117C 0001 001A             		move.b	#1,obFrame(a0)	; use "post only" frame
0001A09A 6100 0000                  		bsr.w	Lamp_StoreInfo
0001A09E 45F8 FC00                  		lea	(v_objstate).w,a2
0001A0A2 7000                       		moveq	#0,d0
0001A0A4 1028 0023                  		move.b	obRespawnNo(a0),d0
0001A0A8 08F2 0000 0002             		bset	#0,2(a2,d0.w)
0001A0AE                            
0001A0AE                            	@donothing:
0001A0AE 4E75                       		rts	
0001A0B0                            ; ===========================================================================
0001A0B0                            
0001A0B0                            Lamp_Finish:	; Routine 4	
0001A0B0 4E75                       		rts	
0001A0B2                            ; ===========================================================================
0001A0B2                            
0001A0B2                            Lamp_Twirl:	; Routine 6
0001A0B2 5368 0036                  		subq.w	#1,lamp_time(a0) ; decrement timer
0001A0B6 6A00                       		bpl.s	@continue	; if time remains, keep twirling
0001A0B8 117C 0004 0024             		move.b	#4,obRoutine(a0) ; goto Lamp_Finish next
0001A0BE                            
0001A0BE                            	@continue:
0001A0BE 1028 0026                  		move.b	obAngle(a0),d0
0001A0C2 0428 0010 0026             		subi.b	#$10,obAngle(a0)
0001A0C8 0400 0040                  		subi.b	#$40,d0
0001A0CC 4EB9 0000 3A36             		jsr	(CalcSine).l
0001A0D2 C3FC 0C00                  		muls.w	#$C00,d1
0001A0D6 4841                       		swap	d1
0001A0D8 D268 0030                  		add.w	lamp_origX(a0),d1
0001A0DC 3141 0008                  		move.w	d1,obX(a0)
0001A0E0 C1FC 0C00                  		muls.w	#$C00,d0
0001A0E4 4840                       		swap	d0
0001A0E6 D068 0032                  		add.w	lamp_origY(a0),d0
0001A0EA 3140 000C                  		move.w	d0,obY(a0)
0001A0EE 4E75                       		rts	
0001A0F0                            ; ===========================================================================
0001A0F0                            ; ---------------------------------------------------------------------------
0001A0F0                            ; Subroutine to	store information when you hit a lamppost
0001A0F0                            ; ---------------------------------------------------------------------------
0001A0F0                            
0001A0F0                            Lamp_StoreInfo:
0001A0F0 11E8 0028 FE30             		move.b	obSubtype(a0),(v_lastlamp).w 	; lamppost number
0001A0F6 11F8 FE30 FE31             		move.b	(v_lastlamp).w,($FFFFFE31).w
0001A0FC 31E8 0008 FE32             		move.w	obX(a0),($FFFFFE32).w		; x-position
0001A102 31E8 000C FE34             		move.w	obY(a0),($FFFFFE34).w		; y-position
0001A108 31F8 FE20 FE36             		move.w	(v_rings).w,($FFFFFE36).w 	; rings
0001A10E 11F8 FE1B FE54             		move.b	(v_lifecount).w,($FFFFFE54).w 	; lives
0001A114 21F8 FE22 FE38             		move.l	(v_time).w,($FFFFFE38).w 	; time
0001A11A 11F8 F742 FE3C             		move.b	(v_dle_routine).w,($FFFFFE3C).w ; routine counter for dynamic level mod
0001A120 31F8 F72E FE3E             		move.w	(v_limitbtm2).w,($FFFFFE3E).w 	; lower y-boundary of level
0001A126 31F8 F700 FE40             		move.w	(v_screenposx).w,($FFFFFE40).w 	; screen x-position
0001A12C 31F8 F704 FE42             		move.w	(v_screenposy).w,($FFFFFE42).w 	; screen y-position
0001A132 31F8 F708 FE44             		move.w	(v_bgscreenposx).w,($FFFFFE44).w ; bg position
0001A138 31F8 F70C FE46             		move.w	(v_bgscreenposy).w,($FFFFFE46).w 	; bg position
0001A13E 31F8 F710 FE48             		move.w	(v_bg2screenposx).w,($FFFFFE48).w 	; bg position
0001A144 31F8 F714 FE4A             		move.w	(v_bg2screenposy).w,($FFFFFE4A).w 	; bg position
0001A14A 31F8 F718 FE4C             		move.w	(v_bg3screenposx).w,($FFFFFE4C).w 	; bg position
0001A150 31F8 F71C FE4E             		move.w	(v_bg3screenposy).w,($FFFFFE4E).w 	; bg position
0001A156 31F8 F648 FE50             		move.w	(v_waterpos2).w,($FFFFFE50).w 	; water height
0001A15C 11F8 F64D FE52             		move.b	(v_wtr_routine).w,($FFFFFE52).w ; rountine counter for water
0001A162 11F8 F64E FE53             		move.b	(f_wtr_state).w,($FFFFFE53).w 	; water direction
0001A168 11F8 F5C3 FE54             		move.b	(f_emeraldm).w,($FFFFFE54).w 	; emerald monitor
0001A16E 4E75                       		rts	
0001A170                            
0001A170                            ; ---------------------------------------------------------------------------
0001A170                            ; Subroutine to	load stored info when you start	a level	from a lamppost
0001A170                            ; ---------------------------------------------------------------------------
0001A170                            
0001A170                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001A170                            
0001A170                            
0001A170                            Lamp_LoadInfo:
0001A170 11F8 FE31 FE30             		move.b	($FFFFFE31).w,(v_lastlamp).w
0001A176 31F8 FE32 D008             		move.w	($FFFFFE32).w,(v_player+obX).w
0001A17C 31F8 FE34 D00C             		move.w	($FFFFFE34).w,(v_player+obY).w
0001A182 31F8 FE36 FE20             		move.w	($FFFFFE36).w,(v_rings).w
0001A188 11F8 FE54 FE1B             		move.b	($FFFFFE54).w,(v_lifecount).w
0001A18E 4278 FE20                  		clr.w	(v_rings).w
0001A192 4238 FE1B                  		clr.b	(v_lifecount).w
0001A196 21F8 FE38 FE22             		move.l	($FFFFFE38).w,(v_time).w
0001A19C 11FC 003B FE25             		move.b	#59,(v_timecent).w
0001A1A2 5338 FE24                  		subq.b	#1,(v_timesec).w
0001A1A6 11F8 FE3C F742             		move.b	($FFFFFE3C).w,(v_dle_routine).w
0001A1AC 11F8 FE52 F64D             		move.b	($FFFFFE52).w,(v_wtr_routine).w
0001A1B2 31F8 FE3E F72E             		move.w	($FFFFFE3E).w,(v_limitbtm2).w
0001A1B8 31F8 FE3E F726             		move.w	($FFFFFE3E).w,(v_limitbtm1).w
0001A1BE 31F8 FE40 F700             		move.w	($FFFFFE40).w,(v_screenposx).w
0001A1C4 31F8 FE42 F704             		move.w	($FFFFFE42).w,(v_screenposy).w
0001A1CA 31F8 FE44 F708             		move.w	($FFFFFE44).w,(v_bgscreenposx).w
0001A1D0 31F8 FE46 F70C             		move.w	($FFFFFE46).w,(v_bgscreenposy).w
0001A1D6 31F8 FE48 F710             		move.w	($FFFFFE48).w,(v_bg2screenposx).w
0001A1DC 31F8 FE4A F714             		move.w	($FFFFFE4A).w,(v_bg2screenposy).w
0001A1E2 31F8 FE4C F718             		move.w	($FFFFFE4C).w,(v_bg3screenposx).w
0001A1E8 31F8 FE4E F71C             		move.w	($FFFFFE4E).w,(v_bg3screenposy).w
0001A1EE 11F8 FE54 F5C3             		move.b	($FFFFFE54).w,(f_emeraldm).w	;emerald monitor count
0001A1F4 0C38 0001 FE10             		cmpi.b	#1,(v_zone).w	; is this Labyrinth Zone?
0001A1FA 6600                       		bne.s	@notlabyrinth	; if not, branch
0001A1FC                            
0001A1FC 31F8 FE50 F648             		move.w	($FFFFFE50).w,(v_waterpos2).w
0001A202 11F8 FE52 F64D             		move.b	($FFFFFE52).w,(v_wtr_routine).w
0001A208 11F8 FE53 F64E             		move.b	($FFFFFE53).w,(f_wtr_state).w
0001A20E                            
0001A20E                            	@notlabyrinth:
0001A20E 4A38 FE30                  		tst.b	(v_lastlamp).w
0001A212 6A00                       		bpl.s	locret_170F6
0001A214 3038 FE32                  		move.w	($FFFFFE32).w,d0
0001A218 0440 00A0                  		subi.w	#$A0,d0
0001A21C 31C0 F728                  		move.w	d0,(v_limitleft2).w
0001A220                            
0001A220                            locret_170F6:
0001A220 4E75                       		rts	
0001A220 4E75                       		rts	
0001A222                            Map_Lamp:	include	"_maps\Lamppost.asm"
0001A222                            ; --------------------------------------------------------------------------------
0001A222                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0001A222                            ; --------------------------------------------------------------------------------
0001A222                            
0001A222                            SME_JfaKr:	
0001A222 0000 0000                  		dc.w SME_JfaKr_A-SME_JfaKr, SME_JfaKr_3D-SME_JfaKr	
0001A226 0000 0000                  		dc.w SME_JfaKr_66-SME_JfaKr, SME_JfaKr_71-SME_JfaKr	
0001A22A 0000                       		dc.w SME_JfaKr_A4-SME_JfaKr	
0001A22C 0A                         SME_JfaKr_A:	dc.b $A	
0001A22D E401 0000 F8               		dc.b $E4, 1, 0, 0, $F8	
0001A232 E401 2800 00               		dc.b $E4, 1, $28, 0, 0	
0001A237 D401 0006 F8               		dc.b $D4, 1, 0, 6, $F8	
0001A23C D401 0806 00               		dc.b $D4, 1, 8, 6, 0	
0001A241 F401 2002 F8               		dc.b $F4, 1, $20, 2, $F8	
0001A246 F401 2802 00               		dc.b $F4, 1, $28, 2, 0	
0001A24B 0400 2004 F8               		dc.b 4, 0, $20, 4, $F8	
0001A250 0400 2804 00               		dc.b 4, 0, $28, 4, 0	
0001A255 0C00 2005 F8               		dc.b $C, 0, $20, 5, $F8	
0001A25A 0C00 2805 00               		dc.b $C, 0, $28, 5, 0	
0001A25F 08                         SME_JfaKr_3D:	dc.b 8	
0001A260 E401 2000 F8               		dc.b $E4, 1, $20, 0, $F8	
0001A265 E401 2800 00               		dc.b $E4, 1, $28, 0, 0	
0001A26A F401 2002 F8               		dc.b $F4, 1, $20, 2, $F8	
0001A26F F401 2802 00               		dc.b $F4, 1, $28, 2, 0	
0001A274 0400 2004 F8               		dc.b 4, 0, $20, 4, $F8	
0001A279 0400 2804 00               		dc.b 4, 0, $28, 4, 0	
0001A27E 0C00 2005 F8               		dc.b $C, 0, $20, 5, $F8	
0001A283 0C00 2805 00               		dc.b $C, 0, $28, 5, 0	
0001A288 02                         SME_JfaKr_66:	dc.b 2	
0001A289 F801 0008 F8               		dc.b $F8, 1, 0, 8, $F8	
0001A28E F801 0808 00               		dc.b $F8, 1, 8, 8, 0	
0001A293 0A                         SME_JfaKr_71:	dc.b $A	
0001A294 E401 2000 F8               		dc.b $E4, 1, $20, 0, $F8	
0001A299 E401 2800 00               		dc.b $E4, 1, $28, 0, 0	
0001A29E F401 2002 F8               		dc.b $F4, 1, $20, 2, $F8	
0001A2A3 F401 2802 00               		dc.b $F4, 1, $28, 2, 0	
0001A2A8 0400 2004 F8               		dc.b 4, 0, $20, 4, $F8	
0001A2AD 0400 2804 00               		dc.b 4, 0, $28, 4, 0	
0001A2B2 0C00 2005 F8               		dc.b $C, 0, $20, 5, $F8	
0001A2B7 0C00 2805 00               		dc.b $C, 0, $28, 5, 0	
0001A2BC D401 0008 F8               		dc.b $D4, 1, 0, 8, $F8	
0001A2C1 D401 0808 00               		dc.b $D4, 1, 8, 8, 0	
0001A2C6 0A                         SME_JfaKr_A4:	dc.b $A	
0001A2C7 E401 2000 F8               		dc.b $E4, 1, $20, 0, $F8	
0001A2CC E401 2800 00               		dc.b $E4, 1, $28, 0, 0	
0001A2D1 F401 2002 F8               		dc.b $F4, 1, $20, 2, $F8	
0001A2D6 F401 2802 00               		dc.b $F4, 1, $28, 2, 0	
0001A2DB 0400 2004 F8               		dc.b 4, 0, $20, 4, $F8	
0001A2E0 0400 2804 00               		dc.b 4, 0, $28, 4, 0	
0001A2E5 0C00 2005 F8               		dc.b $C, 0, $20, 5, $F8	
0001A2EA 0C00 2805 00               		dc.b $C, 0, $28, 5, 0	
0001A2EF D401 0008 F8               		dc.b $D4, 1, 0, 8, $F8	
0001A2F4 D401 2808 00               		dc.b $D4, 1, $28, 8, 0	
0001A2FA 00                         		even
0001A2FA 00                         		even
0001A2FA                            		include	"_incObj\7D Hidden Bonuses.asm"
0001A2FA                            ; ---------------------------------------------------------------------------
0001A2FA                            ; Object 7D - hidden points at the end of a level
0001A2FA                            ; ---------------------------------------------------------------------------
0001A2FA                            
0001A2FA                            HiddenBonus:
0001A2FA 7000                       		moveq	#0,d0
0001A2FC 1028 0024                  		move.b	obRoutine(a0),d0
0001A300 323B 0000                  		move.w	Bonus_Index(pc,d0.w),d1
0001A304 4EFB 1000                  		jmp	Bonus_Index(pc,d1.w)
0001A308                            ; ===========================================================================
0001A308 0000                       Bonus_Index:	dc.w Bonus_Main-Bonus_Index
0001A30A 0000                       		dc.w Bonus_Display-Bonus_Index
0001A30C                            
0001A30C =00000030                  bonus_timelen:	equ $30		; length of time to display bonus sprites
0001A30C                            ; ===========================================================================
0001A30C                            
0001A30C                            Bonus_Main:	; Routine 0
0001A30C 7410                       		moveq	#$10,d2
0001A30E 3602                       		move.w	d2,d3
0001A310 D643                       		add.w	d3,d3
0001A312 43F8 D000                  		lea	(v_player).w,a1
0001A316 3029 0008                  		move.w	obX(a1),d0
0001A31A 9068 0008                  		sub.w	obX(a0),d0
0001A31E D042                       		add.w	d2,d0
0001A320 B043                       		cmp.w	d3,d0
0001A322 6400                       		bcc.s	bonu_chkdel
0001A324 3229 000C                  		move.w	obY(a1),d1
0001A328 9268 000C                  		sub.w	obY(a0),d1
0001A32C D242                       		add.w	d2,d1
0001A32E B243                       		cmp.w	d3,d1
0001A330 6400                       		bcc.s	bonu_chkdel
0001A332 4A78 FE08                  		tst.w	(v_debuguse).w
0001A336 6600                       		bne.s	bonu_chkdel
0001A338 4A38 F7CD                  		tst.b	(f_bigring).w
0001A33C 6600                       		bne.s	bonu_chkdel
0001A33E 5428 0024                  		addq.b	#2,obRoutine(a0)
0001A342 217C 0000 0000 0004        		move.l	#Map_Bonus,obMap(a0)
0001A34A 317C 84B6 0002             		move.w	#$84B6,obGfx(a0)
0001A350 0028 0004 0001             		ori.b	#4,obRender(a0)
0001A356 317C 0000 0018             		move.w	#0,obPriority(a0)
0001A35C 117C 0010 0014             		move.b	#$10,obActWid(a0)
0001A362 1168 0028 001A             		move.b	obSubtype(a0),obFrame(a0)
0001A368 317C 0077 0030             		move.w	#119,bonus_timelen(a0) ; set display time to 2 seconds
0001A378 7000                       		moveq	#0,d0
0001A37A 1028 0028                  		move.b	obSubtype(a0),d0
0001A37E D040                       		add.w	d0,d0
0001A380 303B 0000                  		move.w	obj7d_points(pc,d0.w),d0 ; load bonus points array
0001A384 4EB9 0000 0000             		jsr	(AddPoints).l
0001A38A                            
0001A38A                            bonu_chkdel:
0001A3A6 4E75                       		rts	
0001A3A8                            
0001A3A8                            	@delete:
0001A3A8 4EF9 0000 F9BC             		jmp	(DeleteObject).l
0001A3AE                            
0001A3AE                            ; ===========================================================================
0001A3AE 0000                       obj7d_points:	dc.w 0			; Bonus	points array
0001A3B0 03E8                       		dc.w 1000
0001A3B2 0064                       		dc.w 100
0001A3B4 000A                       		dc.w 10
0001A3B6                            ; ===========================================================================
0001A3B6                            
0001A3B6                            Bonus_Display:	; Routine 2
0001A3B6 5368 0030                  		subq.w	#1,bonus_timelen(a0) ; decrement display time
0001A3BA 6B00                       		bmi.s	Bonus_Display_Delete		; if time is zero, branch
0001A3D8 4EF9 0000 F97C             		jmp	(DisplaySprite).l
0001A3DE                            
0001A3DE                            Bonus_Display_Delete:	
0001A3DE 4EF9 0000 F9BC             		jmp	(DeleteObject).l
0001A3DE 4EF9 0000 F9BC             		jmp	(DeleteObject).l
0001A3E4                            Map_Bonus:	include	"_maps\Hidden Bonuses.asm"
0001A3E4                            ; ---------------------------------------------------------------------------
0001A3E4                            ; Sprite mappings - hidden points at the end of	a level
0001A3E4                            ; ---------------------------------------------------------------------------
0001A3E4                            Map_Bonus_internal:
0001A3E4 0000                       		dc.w @blank-Map_Bonus_internal
0001A3E6 0000                       		dc.w @10000-Map_Bonus_internal
0001A3E8 0000                       		dc.w @1000-Map_Bonus_internal
0001A3EA 0000                       		dc.w @100-Map_Bonus_internal
0001A3EC 00                         @blank:		dc.b 0
0001A3ED 01                         @10000:		dc.b 1
0001A3EE F40E 0000 F0               		dc.b $F4, $E, 0, 0, $F0
0001A3F3 01                         @1000:		dc.b 1
0001A3F4 F40E 000C F0               		dc.b $F4, $E, 0, $C, $F0
0001A3F9 01                         @100:		dc.b 1
0001A3FA F40E 0018 F0               		dc.b $F4, $E, 0, $18, $F0
0001A400 00                         		even
0001A400 00                         		even
0001A400                            
0001A400                            		include	"_incObj\8A Credits.asm"
0001A400                            ; ---------------------------------------------------------------------------
0001A400                            ; Object 8A - "SONIC TEAM PRESENTS" and	credits
0001A400                            ; ---------------------------------------------------------------------------
0001A400                            
0001A400                            CreditsText:
0001A400 7000                       		moveq	#0,d0
0001A402 1028 0024                  		move.b	obRoutine(a0),d0
0001A406 323B 0000                  		move.w	Cred_Index(pc,d0.w),d1
0001A40A 4EFB 1000                  		jmp	Cred_Index(pc,d1.w)
0001A40E                            ; ===========================================================================
0001A40E 0000                       Cred_Index:	dc.w Cred_Main-Cred_Index
0001A410 0000                       		dc.w Cred_Display-Cred_Index
0001A412                            ; ===========================================================================
0001A412                            
0001A412                            Cred_Main:	; Routine 0
0001A412 5428 0024                  		addq.b	#2,obRoutine(a0)
0001A416 317C 0120 0008             		move.w	#$120,obX(a0)
0001A41C 317C 00F0 000A             		move.w	#$F0,obScreenY(a0)
0001A422 217C 0000 0000 0004        		move.l	#Map_Cred,obMap(a0)
0001A42A 317C 05A0 0002             		move.w	#$5A0,obGfx(a0)
0001A430 3038 FFF4                  		move.w	(v_creditsnum).w,d0 ; load credits index number
0001A434 1140 001A                  		move.b	d0,obFrame(a0)	; display appropriate sprite
0001A438 117C 0000 0001             		move.b	#0,obRender(a0)
0001A43E 317C 0000 0018             		move.w	#0,obPriority(a0)
0001A444                            
0001A444 0C38 0000 F600             		cmpi.b	#id_Title,(v_gamemode).w ; is the mode #4 (title screen)?
0001A44A 6600                       		bne.s	Cred_Display	; if not, branch
0001A44C                            
0001A44C 317C 00A6 0002             		move.w	#$A6,obGfx(a0)
0001A452 117C 000A 001A             		move.b	#$A,obFrame(a0)	; display "SONIC TEAM PRESENTS"
0001A458 4A38 FFE3                  		tst.b	(f_creditscheat).w ; is hidden credits cheat on?
0001A45C 6700                       		beq.s	Cred_Display	; if not, branch
0001A45E 0C38 0072 F604             		cmpi.b	#btnABC+btnDn,(v_jpadhold1).w ; is A+B+C+Down being pressed? ($72)
0001A464 6600                       		bne.s	Cred_Display	; if not, branch
0001A466 31FC 0EEE FBC0             		move.w	#cWhite,(v_pal_dry_dup+$40).w ; 3rd palette, 1st entry = white
0001A46C 31FC 0880 FBC2             		move.w	#$880,(v_pal_dry_dup+$42).w ; 3rd palette, 2nd entry = cyan
0001A472 4EF9 0000 F9BC             		jmp	(DeleteObject).l
0001A478                            ; ===========================================================================
0001A478                            
0001A478                            Cred_Display:	; Routine 2
0001A478 4EF9 0000 F97C             		jmp	DisplaySprite
0001A478 4EF9 0000 F97C             		jmp	DisplaySprite
0001A47E                            Map_Cred:	include	"_maps\Credits.asm"
0001A47E                            ; ---------------------------------------------------------------------------
0001A47E                            ; Sprite mappings - "SONIC TEAM	PRESENTS" and credits
0001A47E                            ; ---------------------------------------------------------------------------
0001A47E                            Map_Cred_internal:
0001A47E 0000                       		dc.w @staff-Map_Cred_internal
0001A480 0000                       		dc.w @gameplan-Map_Cred_internal
0001A482 0000                       		dc.w @program-Map_Cred_internal
0001A484 0000                       		dc.w @character-Map_Cred_internal
0001A486 0000                       		dc.w @design-Map_Cred_internal
0001A488 0000                       		dc.w @soundproduce-Map_Cred_internal
0001A48A 0000                       		dc.w @soundprogram-Map_Cred_internal
0001A48C 0000                       		dc.w @thanks-Map_Cred_internal
0001A48E 0000                       		dc.w @presentedby-Map_Cred_internal
0001A490 0000                       		dc.w @tryagain-Map_Cred_internal
0001A492 0000                       		dc.w @sonicteam-Map_Cred_internal
0001A494 0E                         @staff:		dc.b $E			 ; SONIC TEAM STAFF
0001A495 F805 002E 88               		dc.b $F8, 5, 0,	$2E, $88
0001A49A F805 0026 98               		dc.b $F8, 5, 0,	$26, $98
0001A49F F805 001A A8               		dc.b $F8, 5, 0,	$1A, $A8
0001A4A4 F801 0046 B8               		dc.b $F8, 1, 0,	$46, $B8
0001A4A9 F805 001E C0               		dc.b $F8, 5, 0,	$1E, $C0
0001A4AE F805 003E D8               		dc.b $F8, 5, 0,	$3E, $D8
0001A4B3 F805 000E E8               		dc.b $F8, 5, 0,	$E, $E8
0001A4B8 F805 0004 F8               		dc.b $F8, 5, 0,	4, $F8
0001A4BD F809 0008 08               		dc.b $F8, 9, 0,	8, 8
0001A4C2 F805 002E 28               		dc.b $F8, 5, 0,	$2E, $28
0001A4C7 F805 003E 38               		dc.b $F8, 5, 0,	$3E, $38
0001A4CC F805 0004 48               		dc.b $F8, 5, 0,	4, $48
0001A4D1 F805 005C 58               		dc.b $F8, 5, 0,	$5C, $58
0001A4D6 F805 005C 68               		dc.b $F8, 5, 0,	$5C, $68
0001A4DB 0E                         @gameplan:	dc.b $E	;  GAME PLAN CAROL YAS | GAME PLAN SORRA    
0001A4DC 9005 0000 90               		dc.b $90, 5, 0, 0, $90		; G
0001A4E1 9005 0004 A0               		dc.b $90, 5, 0, 4, $A0		; A
0001A4E6 9009 0008 B0               		dc.b $90, 9, 0, 8, $B0		; M
0001A4EB 9005 000E C4               		dc.b $90, 5, 0, $0E, $C4	; E
0001A4F0 9000 0060 0C               		dc.b $90, 0, 0, $60, $C    ;Space
0001A4F5 9005 0012 E4               		dc.b $90, 5, 0, $12, $E4	; P
0001A4FA 9005 0016 F4               		dc.b $90, 5, 0, $16, $F4	; L
0001A4FF 9005 0004 04               		dc.b $90, 5, 0, 4, $4		; A
0001A504 9005 001A 14               		dc.b $90, 5, 0, $1A, $14	; N
0001A509                            
0001A509 B805 002E C0               		dc.b $B8, 5, 0, $2E, $C0	; S
0001A50E B805 0026 D0               		dc.b $B8, 5, 0, $26, $D0	; O
0001A513 B805 0022 E0               		dc.b $B8, 5, 0, $22, $E0	; R
0001A518 B805 0022 F0               		dc.b $B8, 5, 0, $22, $F0	; R
0001A51D B805 0004 00               		dc.b $B8, 5, 0, 4, $0		; A
0001A522 1B                         @program:	dc.b $1B	;  CHARACTER DESIGN BIGISLAND | PROGRAM ANGELKOR INVISIBLE SUN  
0001A523 9005 0012 90               		dc.b $90, 5, 0, $12, $90	; P
0001A528 9005 0022 A0               		dc.b $90, 5, 0, $22, $A0	; R
0001A52D 9005 0026 B0               		dc.b $90, 5, 0, $26, $B0	; O
0001A532 9005 0000 C0               		dc.b $90, 5, 0, 0, $C0		; G
0001A537 9005 0022 D0               		dc.b $90, 5, 0, $22, $D0	; R
0001A53C 9005 0004 E0               		dc.b $90, 5, 0, 4, $E0		; A
0001A541 9009 0008 F0               		dc.b $90, 9, 0, 8, $F0		; M
0001A546                            
0001A546 B805 0004 C0               		dc.b $B8, 5, 0, 4, $C0		; A
0001A54B B805 001A D0               		dc.b $B8, 5, 0, $1A, $D0	; N
0001A550 B805 0000 E0               		dc.b $B8, 5, 0, 0, $E0		; G
0001A555 B805 000E F0               		dc.b $B8, 5, 0, $0E, $F0	; E
0001A55A B805 0016 00               		dc.b $B8, 5, 0, $16, $0	; L
0001A55F B805 0058 10               		dc.b $B8, 5, 0, $58, $10	; K
0001A564 B805 0026 20               		dc.b $B8, 5, 0, $26, $20	; O
0001A569 B805 0022 30               		dc.b $B8, 5, 0, $22, $30	; R
0001A56E                            
0001A56E D801 0046 C0               		dc.b $D8, 1, 0, $46, $C0	; I
0001A573 D805 001A C8               		dc.b $D8, 5, 0, $1A, $C8	; N
0001A578                            
0001A578 D801 0046 E8               		dc.b $D8, 1, 0, $46, $E8	; I
0001A57D D805 002E F0               		dc.b $D8, 5, 0, $2E, $F0	; S
0001A582 D801 0046 00               		dc.b $D8, 1, 0, $46, $0	; I
0001A587 D805 0048 08               		dc.b $D8, 5, 0, $48, $8	; B
0001A58C D805 0016 18               		dc.b $D8, 5, 0, $16, $18	; L
0001A591 D805 000E 28               		dc.b $D8, 5, 0, $0E, $28	; E
0001A596                            
0001A596 F805 002E C0               		dc.b $F8, 5, 0, $2E, $C0	; S
0001A59B F805 0032 D0               		dc.b $F8, 5, 0, $32, $D0	; U
0001A5A0 F805 001A E0               		dc.b $F8, 5, 0, $1A, $E0	; N
0001A5A5 08                         @character:	dc.b $8	;  CHARACTER DESIGN BIGISLAND | ART SORRA    
0001A5A6 9005 0004 90               		dc.b $90, 5, 0, 4, $90		; A
0001A5AB 9005 0022 A0               		dc.b $90, 5, 0, $22, $A0	; R
0001A5B0 9005 003E B0               		dc.b $90, 5, 0, $3E, $B0	; T
0001A5B5                            
0001A5B5 B805 002E C0               		dc.b $B8, 5, 0, $2E, $C0	; S
0001A5BA B805 0026 D0               		dc.b $B8, 5, 0, $26, $D0	; O
0001A5BF B805 0022 E0               		dc.b $B8, 5, 0, $22, $E0	; R
0001A5C4 B805 0022 F0               		dc.b $B8, 5, 0, $22, $F0	; R
0001A5C9 B805 0004 00               		dc.b $B8, 5, 0, 4, $0
0001A5CE 0B                         @design:	dc.b $B	;  DESIGN JINYA PHENIX RIE | DESIGN SORRA    
0001A5CF 9005 0042 90               		dc.b $90, 5, 0, $42, $90	; D
0001A5D4 9005 000E A0               		dc.b $90, 5, 0, $0E, $A0	; E
0001A5D9 9005 002E B0               		dc.b $90, 5, 0, $2E, $B0	; S
0001A5DE 9001 0046 C0               		dc.b $90, 1, 0, $46, $C0	; I
0001A5E3 9005 0000 C8               		dc.b $90, 5, 0, 0, $C8		; G
0001A5E8 9005 001A D8               		dc.b $90, 5, 0, $1A, $D8	; N
0001A5ED                            
0001A5ED B805 002E C0               		dc.b $B8, 5, 0, $2E, $C0	; S
0001A5F2 B805 0026 D0               		dc.b $B8, 5, 0, $26, $D0	; O
0001A5F7 B805 0022 E0               		dc.b $B8, 5, 0, $22, $E0	; R
0001A5FC B805 0022 F0               		dc.b $B8, 5, 0, $22, $F0	; R
0001A601 B805 0004 00               		dc.b $B8, 5, 0, 4, $0		; A
0001A606 1C                         @soundproduce:	dc.b $1C	;  SOUND PRODUCE MASATO NAKAMURA | SOUND PORT MR JOKER PRODUCTION   
0001A607 9005 002E 90               		dc.b $90, 5, 0, $2E, $90	; S
0001A60C 9005 0026 A0               		dc.b $90, 5, 0, $26, $A0	; O
0001A611 9005 0032 B0               		dc.b $90, 5, 0, $32, $B0	; U
0001A616 9005 001A C0               		dc.b $90, 5, 0, $1A, $C0	; N
0001A61B 9005 0042 D0               		dc.b $90, 5, 0, $42, $D0	; D
0001A620 9000 0060 0C               		dc.b $90, 0, 0, $60, $C    ;Space
0001A625 9005 0012 F0               		dc.b $90, 5, 0, $12, $F0	; P
0001A62A 9005 0026 00               		dc.b $90, 5, 0, $26, $0	; O
0001A62F 9005 0022 10               		dc.b $90, 5, 0, $22, $10	; R
0001A634 9005 003E 20               		dc.b $90, 5, 0, $3E, $20	; T
0001A639                            
0001A639 B809 0008 C0               		dc.b $B8, 9, 0, 8, $C0		; M
0001A63E B805 0022 D4               		dc.b $B8, 5, 0, $22, $D4	; R
0001A643 B800 0060 0C               		dc.b $B8, 0, 0, $60, $C    ;Space
0001A648 B805 004C F4               		dc.b $B8, 5, 0, $4C, $F4	; J
0001A64D B805 0026 04               		dc.b $B8, 5, 0, $26, $4	; O
0001A652 B805 0058 14               		dc.b $B8, 5, 0, $58, $14	; K
0001A657 B805 000E 24               		dc.b $B8, 5, 0, $0E, $24	; E
0001A65C B805 0022 34               		dc.b $B8, 5, 0, $22, $34	; R
0001A661                            
0001A661 D805 0012 C0               		dc.b $D8, 5, 0, $12, $C0	; P
0001A666 D805 0022 D0               		dc.b $D8, 5, 0, $22, $D0	; R
0001A66B D805 0026 E0               		dc.b $D8, 5, 0, $26, $E0	; O
0001A670 D805 0042 F0               		dc.b $D8, 5, 0, $42, $F0	; D
0001A675 D805 0032 00               		dc.b $D8, 5, 0, $32, $0	; U
0001A67A D805 001E 10               		dc.b $D8, 5, 0, $1E, $10	; C
0001A67F D805 003E 20               		dc.b $D8, 5, 0, $3E, $20	; T
0001A684 D801 0046 30               		dc.b $D8, 1, 0, $46, $30	; I
0001A689 D805 0026 38               		dc.b $D8, 5, 0, $26, $38	; O
0001A68E D805 001A 48               		dc.b $D8, 5, 0, $1A, $48	; N
0001A693 17                         @soundprogram:	dc.b $17		 ; SOUND PROGRAM JIMITA	MACKY
0001A694 D005 002E 98               		dc.b $D0, 5, 0,	$2E, $98
0001A699 D005 0026 A8               		dc.b $D0, 5, 0,	$26, $A8
0001A69E D005 0032 B8               		dc.b $D0, 5, 0,	$32, $B8
0001A6A3 D005 001A C8               		dc.b $D0, 5, 0,	$1A, $C8
0001A6A8 D005 0054 D8               		dc.b $D0, 5, 0,	$54, $D8
0001A6AD D005 0012 F8               		dc.b $D0, 5, 0,	$12, $F8
0001A6B2 D005 0022 08               		dc.b $D0, 5, 0,	$22, 8
0001A6B7 D005 0026 18               		dc.b $D0, 5, 0,	$26, $18
0001A6BC D005 0000 28               		dc.b $D0, 5, 0,	0, $28
0001A6C1 D005 0022 38               		dc.b $D0, 5, 0,	$22, $38
0001A6C6 D005 0004 48               		dc.b $D0, 5, 0,	4, $48
0001A6CB D009 0008 58               		dc.b $D0, 9, 0,	8, $58
0001A6D0 0005 004C D0               		dc.b 0,	5, 0, $4C, $D0
0001A6D5 0001 0046 E0               		dc.b 0,	1, 0, $46, $E0
0001A6DA 0009 0008 E8               		dc.b 0,	9, 0, 8, $E8
0001A6DF 0001 0046 FC               		dc.b 0,	1, 0, $46, $FC
0001A6E4 0005 003E 04               		dc.b 0,	5, 0, $3E, 4
0001A6E9 0005 0004 14               		dc.b 0,	5, 0, 4, $14
0001A6EE 2009 0008 D0               		dc.b $20, 9, 0,	8, $D0
0001A6F3 2005 0004 E4               		dc.b $20, 5, 0,	4, $E4
0001A6F8 2005 001E F4               		dc.b $20, 5, 0,	$1E, $F4
0001A6FD 2005 0058 04               		dc.b $20, 5, 0,	$58, 4
0001A702 2005 002A 14               		dc.b $20, 5, 0,	$2A, $14
0001A707 11                         @thanks:	dc.b $11	;  SPECIAL THANKS FUJIO MINEGISHI PAPA | SPECIAL  THANKS YOU   
0001A708 9005 002E 90               		dc.b $90, 5, 0, $2E, $90	; S
0001A70D 9005 0012 A0               		dc.b $90, 5, 0, $12, $A0	; P
0001A712 9005 000E B0               		dc.b $90, 5, 0, $0E, $B0	; E
0001A717 9005 001E C0               		dc.b $90, 5, 0, $1E, $C0	; C
0001A71C 9001 0046 D0               		dc.b $90, 1, 0, $46, $D0	; I
0001A721 9005 0004 D8               		dc.b $90, 5, 0, 4, $D8		; A
0001A726 9005 0016 E8               		dc.b $90, 5, 0, $16, $E8	; L
0001A72B 9000 0060 0C               		dc.b $90, 0, 0, $60, $C    ;Space
0001A730                            
0001A730 B805 003E C0               		dc.b $B8, 5, 0, $3E, $C0	; T
0001A735 B805 003A D0               		dc.b $B8, 5, 0, $3A, $D0	; H
0001A73A B805 0004 E0               		dc.b $B8, 5, 0, 4, $E0		; A
0001A73F B805 001A F0               		dc.b $B8, 5, 0, $1A, $F0	; N
0001A744 B805 0058 00               		dc.b $B8, 5, 0, $58, $0	; K
0001A749 B805 002E 10               		dc.b $B8, 5, 0, $2E, $10	; S
0001A74E                            
0001A74E D805 002A C0               		dc.b $D8, 5, 0, $2A, $C0	; Y
0001A753 D805 0026 D0               		dc.b $D8, 5, 0, $26, $D0	; O
0001A758 D805 0032 E0               		dc.b $D8, 5, 0, $32, $E0	; U
0001A75D 10                         @presentedby:	dc.b $10	;  PRESENTED BY SEGA | PRESENTED BY SORRA   
0001A75E 9005 0012 90               		dc.b $90, 5, 0, $12, $90	; P
0001A763 9005 0022 A0               		dc.b $90, 5, 0, $22, $A0	; R
0001A768 9005 000E B0               		dc.b $90, 5, 0, $0E, $B0	; E
0001A76D 9005 002E C0               		dc.b $90, 5, 0, $2E, $C0	; S
0001A772 9005 000E D0               		dc.b $90, 5, 0, $0E, $D0	; E
0001A777 9005 001A E0               		dc.b $90, 5, 0, $1A, $E0	; N
0001A77C 9005 003E F0               		dc.b $90, 5, 0, $3E, $F0	; T
0001A781 9005 000E 00               		dc.b $90, 5, 0, $0E, $0	; E
0001A786 9005 0042 10               		dc.b $90, 5, 0, $42, $10	; D
0001A78B                            
0001A78B B805 0048 C0               		dc.b $B8, 5, 0, $48, $C0	; B
0001A790 B805 002A D0               		dc.b $B8, 5, 0, $2A, $D0	; Y
0001A795                            
0001A795 D805 002E C0               		dc.b $D8, 5, 0, $2E, $C0	; S
0001A79A D805 0026 D0               		dc.b $D8, 5, 0, $26, $D0	; O
0001A79F D805 0022 E0               		dc.b $D8, 5, 0, $22, $E0	; R
0001A7A4 D805 0022 F0               		dc.b $D8, 5, 0, $22, $F0	; R
0001A7A9 D805 0004 00               		dc.b $D8, 5, 0, 4, $0		; A
0001A7AE 08                         @tryagain:	dc.b 8			 ; TRY AGAIN
0001A7AF 3005 003E C0               		dc.b $30, 5, 0,	$3E, $C0
0001A7B4 3005 0022 D0               		dc.b $30, 5, 0,	$22, $D0
0001A7B9 3005 002A E0               		dc.b $30, 5, 0,	$2A, $E0
0001A7BE 3005 0004 F8               		dc.b $30, 5, 0,	4, $F8
0001A7C3 3005 0000 08               		dc.b $30, 5, 0,	0, 8
0001A7C8 3005 0004 18               		dc.b $30, 5, 0,	4, $18
0001A7CD 3001 0046 28               		dc.b $30, 1, 0,	$46, $28
0001A7D2 3005 001A 30               		dc.b $30, 5, 0,	$1A, $30
0001A7D7 0E                         @sonicteam:	dc.b $E	;  SONIC TEAM PRESENTS | SORRA PRESENTS
0001A7D8 E805 002E D0               		dc.b $E8, 5, 0, $2E, $D0	; S
0001A7DD E805 0026 E0               		dc.b $E8, 5, 0, $26, $E0	; O
0001A7E2 E805 0022 F0               		dc.b $E8, 5, 0, $22, $F0	; R
0001A7E7 E805 0022 00               		dc.b $E8, 5, 0, $22, $0	; R
0001A7EC E805 0004 10               		dc.b $E8, 5, 0, 4, $10		; A
0001A7F1 E800 0060 0C               		dc.b $E8, 0, 0, $60, $C   	 ; Space
0001A7F6                            
0001A7F6 0005 0012 C0               		dc.b 0,	5, 0, $12, $C0	; P
0001A7FB 0005 0022 D0               		dc.b 0,	5, 0, $22, $D0	; R
0001A800 0005 000E E0               		dc.b 0,	5, 0, $E, $E0	; E
0001A805 0005 002E F0               		dc.b 0,	5, 0, $2E, $F0	; S
0001A80A 0005 000E 00               		dc.b 0,	5, 0, $E, 0	; E
0001A80F 0005 001A 10               		dc.b 0,	5, 0, $1A, $10	; N
0001A814 0005 003E 20               		dc.b 0,	5, 0, $3E, $20	; T
0001A819 0005 002E 30               		dc.b 0,	5, 0, $2E, $30	; S
0001A81E                            		even
0001A81E                            		even
0001A81E                            
0001A81E                            		include	"_incObj\3D Boss - Green Hill (part 1).asm"
0001A81E                            ; ---------------------------------------------------------------------------
0001A81E                            ; Object 3D - Eggman (GHZ)
0001A81E                            ; ---------------------------------------------------------------------------
0001A81E                            
0001A81E                            BossGreenHill:
0001A81E 7000                       		moveq	#0,d0
0001A820 1028 0024                  		move.b	obRoutine(a0),d0
0001A824 323B 0000                  		move.w	BGHZ_Index(pc,d0.w),d1
0001A828 4EFB 1000                  		jmp	BGHZ_Index(pc,d1.w)
0001A82C                            ; ===========================================================================
0001A82C 0000                       BGHZ_Index:	dc.w BGHZ_Main-BGHZ_Index
0001A82E 0000                       		dc.w BGHZ_ShipMain-BGHZ_Index
0001A830 0000                       		dc.w BGHZ_FaceMain-BGHZ_Index
0001A832 0000                       		dc.w BGHZ_FlameMain-BGHZ_Index
0001A834                            
0001A834 0200                       BGHZ_ObjData:	dc.b 2,	0		; routine counter, animation
0001A836 0401                       		dc.b 4,	1
0001A838 0607                       		dc.b 6,	7
0001A83A                            ; ===========================================================================
0001A83A                            
0001A83A                            BGHZ_Main:	; Routine 0
0001A83A 45F9 0001 A834             		lea	(BGHZ_ObjData).l,a2
0001A840 2248                       		movea.l	a0,a1
0001A842 7202                       		moveq	#2,d1
0001A844 6000                       		bra.s	BGHZ_LoadBoss
0001A846                            ; ===========================================================================
0001A846                            
0001A846                            BGHZ_Loop:
0001A846 4EB9 0000 FE1E             		jsr	(FindNextFreeObj).l
0001A84C 6600                       		bne.s	loc_17772
0001A84E                            
0001A84E                            BGHZ_LoadBoss:
0001A84E 135A 0024                  		move.b	(a2)+,obRoutine(a1)
0001A852 12BC 003D                  		move.b	#id_BossGreenHill,0(a1)
0001A856 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001A85C 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001A862 237C 0000 0000 0004        		move.l	#Map_Eggman,obMap(a1)
0001A86A 337C 0400 0002             		move.w	#$400,obGfx(a1)
0001A870 137C 0004 0001             		move.b	#4,obRender(a1)
0001A876 137C 0020 0014             		move.b	#$20,obActWid(a1)
0001A87C 337C 0180 0018             		move.w	#$180,obPriority(a1)
0001A882 135A 001C                  		move.b	(a2)+,obAnim(a1)
0001A886 2348 0034                  		move.l	a0,$34(a1)
0001A88A 51C9 FFBA                  		dbf	d1,BGHZ_Loop	; repeat sequence 2 more times
0001A88E                            
0001A88E                            loc_17772:
0001A88E 3168 0008 0030             		move.w	obX(a0),$30(a0)
0001A894 3168 000C 0038             		move.w	obY(a0),$38(a0)
0001A89A 117C 000F 0020             		move.b	#$F,obColType(a0)
0001A8A0 117C 0008 0021             		move.b	#8,obColProp(a0) ; set number of hits to 8
0001A8A6                            
0001A8A6                            
0001A8A6                            BGHZ_ShipMain:	; Routine 2
0001A8A6 7000                       		moveq	#0,d0
0001A8A8 1028 0025                  		move.b	ob2ndRout(a0),d0
0001A8AC 323B 0000                  		move.w	BGHZ_ShipIndex(pc,d0.w),d1
0001A8B0 4EBB 1000                  		jsr	BGHZ_ShipIndex(pc,d1.w)
0001A8B4 43F9 0000 0000             		lea	(Ani_Eggman).l,a1
0001A8BA 4EB9 0000 CA28             		jsr	(AnimateSprite).l
0001A8C0 1028 0022                  		move.b	obStatus(a0),d0
0001A8C4 0200 0003                  		andi.b	#3,d0
0001A8C8 0228 00FC 0001             		andi.b	#$FC,obRender(a0)
0001A8CE 8128 0001                  		or.b	d0,obRender(a0)
0001A8D2 4EF9 0000 F97C             		jmp	(DisplaySprite).l
0001A8D8                            ; ===========================================================================
0001A8D8 0000                       BGHZ_ShipIndex:	dc.w BGHZ_ShipStart-BGHZ_ShipIndex
0001A8DA 0000                       		dc.w BGHZ_MakeBall-BGHZ_ShipIndex
0001A8DC 0000                       		dc.w BGHZ_ShipMove-BGHZ_ShipIndex
0001A8DE 0000                       		dc.w loc_17954-BGHZ_ShipIndex
0001A8E0 0000                       		dc.w loc_1797A-BGHZ_ShipIndex
0001A8E2 0000                       		dc.w loc_179AC-BGHZ_ShipIndex
0001A8E4 0000                       		dc.w loc_179F6-BGHZ_ShipIndex
0001A8E6                            ; ===========================================================================
0001A8E6                            
0001A8E6                            BGHZ_ShipStart:
0001A8E6 317C 0100 0012             		move.w	#$100,obVelY(a0) ; move ship down
0001A8EC 6100 0000                  		bsr.w	BossMove
0001A8F0 0C68 0338 0038             		cmpi.w	#$338,$38(a0)
0001A8F6 6600                       		bne.s	loc_177E6
0001A8F8 317C 0000 0012             		move.w	#0,obVelY(a0)	; stop ship
0001A8FE 5428 0025                  		addq.b	#2,ob2ndRout(a0) ; goto next routine
0001A902                            
0001A902                            loc_177E6:
0001A902 1028 003F                  		move.b	$3F(a0),d0
0001A906 4EB9 0000 3A36             		jsr	(CalcSine).l
0001A90C EC40                       		asr.w	#6,d0
0001A90E D068 0038                  		add.w	$38(a0),d0
0001A912 3140 000C                  		move.w	d0,obY(a0)
0001A916 3168 0030 0008             		move.w	$30(a0),obX(a0)
0001A91C 5428 003F                  		addq.b	#2,$3F(a0)
0001A920 0C28 0008 0025             		cmpi.b	#8,ob2ndRout(a0)
0001A926 6400                       		bcc.s	locret_1784A
0001A928 4A28 0022                  		tst.b	obStatus(a0)
0001A92C 6B00                       		bmi.s	loc_1784C
0001A92E 4A28 0020                  		tst.b	obColType(a0)
0001A932 6600                       		bne.s	locret_1784A
0001A934 4A28 003E                  		tst.b	$3E(a0)
0001A938 6600                       		bne.s	BGHZ_ShipFlash
0001A93A 117C 0020 003E             		move.b	#$20,$3E(a0)	; set number of	times for ship to flash
0001A94A                            
0001A94A                            BGHZ_ShipFlash:
0001A94A 43F8 FB22                  		lea	(v_pal_dry+$22).w,a1 ; load 2nd pallet, 2nd entry
0001A94E 7000                       		moveq	#0,d0		; move 0 (black) to d0
0001A950 4A51                       		tst.w	(a1)
0001A952 6600                       		bne.s	loc_1783C
0001A954 303C 0EEE                  		move.w	#cWhite,d0	; move 0EEE (white) to d0
0001A958                            
0001A958                            loc_1783C:
0001A958 3280                       		move.w	d0,(a1)		; load color stored in	d0
0001A95A 5328 003E                  		subq.b	#1,$3E(a0)
0001A95E 6600                       		bne.s	locret_1784A
0001A960 117C 000F 0020             		move.b	#$F,obColType(a0)
0001A966                            
0001A966                            locret_1784A:
0001A966 4E75                       		rts	
0001A968                            ; ===========================================================================
0001A968                            
0001A968                            loc_1784C:
0001A968 7064                       		moveq	#100,d0
0001A96A 6100 0000                  		bsr.w	AddPoints
0001A96E 117C 0008 0025             		move.b	#8,ob2ndRout(a0)
0001A974 317C 00B3 003C             		move.w	#$B3,$3C(a0)
0001A97A 4E75                       		rts	
0001A97A 4E75                       		rts	
0001A97C                            
0001A97C                            ; ---------------------------------------------------------------------------
0001A97C                            ; Defeated boss	subroutine
0001A97C                            ; ---------------------------------------------------------------------------
0001A97C                            
0001A97C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001A97C                            
0001A97C                            
0001A97C                            BossDefeated:
0001A97C 1038 FE0F                  		move.b	(v_vbla_byte).w,d0
0001A980 0200 0007                  		andi.b	#7,d0
0001A984 6600                       		bne.s	locret_178A2
0001A986 4EB9 0000 FE08             		jsr	(FindFreeObj).l
0001A98C 6600                       		bne.s	locret_178A2
0001A98E 12BC 003F                  		move.b	#id_ExplosionBomb,0(a1)	; load explosion object
0001A992 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001A998 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001A99E 4EB9 0000 3A10             		jsr	(RandomNumber).l
0001A9A4 3200                       		move.w	d0,d1
0001A9A6 7200                       		moveq	#0,d1
0001A9A8 1200                       		move.b	d0,d1
0001A9AA E409                       		lsr.b	#2,d1
0001A9AC 0441 0020                  		subi.w	#$20,d1
0001A9B0 D369 0008                  		add.w	d1,obX(a1)
0001A9B4 E048                       		lsr.w	#8,d0
0001A9B6 E608                       		lsr.b	#3,d0
0001A9B8 D169 000C                  		add.w	d0,obY(a1)
0001A9BC                            
0001A9BC                            locret_178A2:
0001A9BC 4E75                       		rts	
0001A9BE                            ; End of function BossDefeated
0001A9BE                            
0001A9BE                            ; ---------------------------------------------------------------------------
0001A9BE                            ; Subroutine to	move a boss
0001A9BE                            ; ---------------------------------------------------------------------------
0001A9BE                            
0001A9BE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001A9BE                            
0001A9BE                            
0001A9BE                            BossMove:
0001A9BE 4CA8 0005 0010             		movem.w	obVelX(a0),d0/d2
0001A9C4 E188                       		lsl.l	#8,d0
0001A9C6 D1A8 0030                  		add.l	d0,$30(a0)
0001A9CA E18A                       		lsl.l	#8,d2
0001A9CC D5A8 0038                  		add.l	d2,$38(a0)
0001A9D0 4E75                       		rts
0001A9D2                            ; End of function BossMove
0001A9D2                            
0001A9D2                            ; ===========================================================================
0001A9D2                            
0001A9D2                            		include	"_incObj\3D Boss - Green Hill (part 2).asm"
0001A9D2                            
0001A9D2                            BGHZ_MakeBall:
0001A9D2 317C FE00 0010             		move.w	#-$200,obVelX(a0)
0001A9D8 317C FFC0 0012             		move.w	#-$40,obVelY(a0)
0001A9DE 6100 FFDE                  		bsr.w	BossMove
0001A9E2 0C68 1400 0030             		cmpi.w	#$1400,$30(a0)
0001A9E8 6600                       		bne.s	loc_17916
0001A9EA 317C 0000 0010             		move.w	#0,obVelX(a0)
0001A9F0 317C 0000 0012             		move.w	#0,obVelY(a0)
0001A9F6 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001A9FA 4EB9 0000 FE1E             		jsr	(FindNextFreeObj).l
0001AA00 6600                       		bne.s	loc_17910
0001AA02 12BC 0048                  		move.b	#id_BossBall,0(a1) ; load swinging ball object
0001AA06 3368 0300 0008             		move.w	$300(a0),obX(a1)
0001AA0C 3368 0038 000C             		move.w	$38(a0),obY(a1)
0001AA12 2348 0034                  		move.l	a0,$34(a1)
0001AA16                            
0001AA16                            loc_17910:
0001AA16 317C 0077 003C             		move.w	#$77,$3C(a0)
0001AA1C                            
0001AA1C                            loc_17916:
0001AA1C 6000 FEE4                  		bra.w	loc_177E6
0001AA20                            ; ===========================================================================
0001AA20                            
0001AA20                            BGHZ_ShipMove:
0001AA20 5368 003C                  		subq.w	#1,$3C(a0)
0001AA24 6A00                       		bpl.s	BGHZ_Reverse
0001AA26 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001AA2A 317C 003F 003C             		move.w	#$3F,$3C(a0)
0001AA30 317C 0200 0010             		move.w	#$200,obVelX(a0) ; move the ship sideways
0001AA36 0C68 1400 0030             		cmpi.w	#$1400,$30(a0)
0001AA3C 6600                       		bne.s	BGHZ_Reverse
0001AA3E 317C 007F 003C             		move.w	#$7F,$3C(a0)
0001AA44 317C 0040 0010             		move.w	#$40,obVelX(a0)
0001AA4A                            
0001AA4A                            BGHZ_Reverse:
0001AA4A 0828 0000 0022             		btst	#0,obStatus(a0)
0001AA50 6600                       		bne.s	loc_17950
0001AA52 4468 0010                  		neg.w	obVelX(a0)	; reverse direction of the ship
0001AA56                            
0001AA56                            loc_17950:
0001AA56 6000 FEAA                  		bra.w	loc_177E6
0001AA5A                            ; ===========================================================================
0001AA5A                            
0001AA5A                            loc_17954:
0001AA5A 5368 003C                  		subq.w	#1,$3C(a0)
0001AA5E 6B00                       		bmi.s	loc_17960
0001AA60 6100 FF5C                  		bsr.w	BossMove
0001AA64 6000                       		bra.s	loc_17976
0001AA66                            ; ===========================================================================
0001AA66                            
0001AA66                            loc_17960:
0001AA66 0868 0000 0022             		bchg	#0,obStatus(a0)
0001AA6C 317C 003F 003C             		move.w	#$3F,$3C(a0)
0001AA72 5528 0025                  		subq.b	#2,ob2ndRout(a0)
0001AA76 317C 0000 0010             		move.w	#0,obVelX(a0)
0001AA7C                            
0001AA7C                            loc_17976:
0001AA7C 6000 FE84                  		bra.w	loc_177E6
0001AA80                            ; ===========================================================================
0001AA80                            
0001AA80                            loc_1797A:
0001AA80 5368 003C                  		subq.w	#1,$3C(a0)
0001AA84 6B00                       		bmi.s	loc_17984
0001AA86 6000 FEF4                  		bra.w	BossDefeated
0001AA8A                            ; ===========================================================================
0001AA8A                            
0001AA8A                            loc_17984:
0001AA8A 08E8 0000 0022             		bset	#0,obStatus(a0)
0001AA90 08A8 0007 0022             		bclr	#7,obStatus(a0)
0001AA96 4268 0010                  		clr.w	obVelX(a0)
0001AA9A 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001AA9E 317C FFDA 003C             		move.w	#-$26,$3C(a0)
0001AAA4 4A38 F7A7                  		tst.b	(v_bossstatus).w
0001AAA8 6600                       		bne.s	locret_179AA
0001AAAA 11FC 0001 F7A7             		move.b	#1,(v_bossstatus).w
0001AAB0                            
0001AAB0                            locret_179AA:
0001AAB0 4E75                       		rts	
0001AAB2                            ; ===========================================================================
0001AAB2                            
0001AAB2                            loc_179AC:
0001AAB2 5268 003C                  		addq.w	#1,$3C(a0)
0001AAB6 6700                       		beq.s	loc_179BC
0001AAB8 6A00                       		bpl.s	loc_179C2
0001AABA 0668 0018 0012             		addi.w	#$18,obVelY(a0)
0001AAC0 6000                       		bra.s	loc_179EE
0001AAC2                            ; ===========================================================================
0001AAC2                            
0001AAC2                            loc_179BC:
0001AAC2 4268 0012                  		clr.w	obVelY(a0)
0001AAC6 6000                       		bra.s	loc_179EE
0001AAC8                            ; ===========================================================================
0001AAC8                            
0001AAC8                            loc_179C2:
0001AAC8 0C68 0030 003C             		cmpi.w	#$30,$3C(a0)
0001AACE 6500                       		bcs.s	loc_179DA
0001AAD0 6700                       		beq.s	loc_179E0
0001AAD2 0C68 0038 003C             		cmpi.w	#$38,$3C(a0)
0001AAD8 6500                       		bcs.s	loc_179EE
0001AADA 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001AADE 6000                       		bra.s	loc_179EE
0001AAE0                            ; ===========================================================================
0001AAE0                            
0001AAE0                            loc_179DA:
0001AAE0 5168 0012                  		subq.w	#8,obVelY(a0)
0001AAE4 6000                       		bra.s	loc_179EE
0001AAE6                            ; ===========================================================================
0001AAE6                            
0001AAE6                            loc_179E0:
0001AAE6 4268 0012                          clr.w    obVelY(a0)
0001AAEA 4A38 FE2D                          tst.b     (v_invinc).w
0001AAEE 6600                               bne.s   @boss_invinc
0001AAF0 4A38 FE2E                          tst.b     (v_shoes).w
0001AAF4 6600                               bne.s   @boss_shoes
0001AAF6                            
0001AAF6 1038 F5C6                          move.b   (v_Saved_music),d0
0001AAFA 6000 0000                          bra.w      @boss_play
0001AAFE                            
0001AAFE                            @boss_invinc:
0001AAFE 103C 0000                          move.b #bgm_Invincible,d0
0001AB02                            
0001AB02                            @boss_shoes:
0001AB02 103C 0000                          move.b #bgm_Ending,d0
0001AB06                            
0001AB06                            @boss_play:
0001AB06 4EB8 124E                          jsr PlaySound
0001AB0A                            
0001AB0A                            loc_179EE:
0001AB0A 6100 FEB2                  		bsr.w	BossMove
0001AB0E 6000 FDF2                  		bra.w	loc_177E6
0001AB12                            ; ===========================================================================
0001AB12                            
0001AB12                            loc_179F6:
0001AB12 317C 0400 0010             		move.w	#$400,obVelX(a0)
0001AB18 317C FFC0 0012             		move.w	#-$40,obVelY(a0)
0001AB1E 0C78 14C0 F72A             		cmpi.w	#$14C0,(v_limitright2).w
0001AB24 6700                       		beq.s	loc_17A10
0001AB26 5478 F72A                  		addq.w	#2,(v_limitright2).w
0001AB2A 6000                       		bra.s	loc_17A16
0001AB2C                            ; ===========================================================================
0001AB2C                            
0001AB2C                            loc_17A10:
0001AB2C 4A28 0001                  		tst.b	obRender(a0)
0001AB30 6A00                       		bpl.s	BGHZ_ShipDel
0001AB32                            
0001AB32                            loc_17A16:
0001AB32 6100 FE8A                  		bsr.w	BossMove
0001AB36 6000 FDCA                  		bra.w	loc_177E6
0001AB3A                            ; ===========================================================================
0001AB3A                            
0001AB3A                            BGHZ_ShipDel:
0001AB3A 4EF9 0000 F9BC             		jmp	(DeleteObject).l
0001AB40                            ; ===========================================================================
0001AB40                            
0001AB40                            BGHZ_FaceMain:	; Routine 4
0001AB40 7000                       		moveq	#0,d0
0001AB42 7201                       		moveq	#1,d1
0001AB44 2268 0034                  		movea.l	$34(a0),a1
0001AB48 1029 0025                  		move.b	ob2ndRout(a1),d0
0001AB4C 5900                       		subq.b	#4,d0
0001AB4E 6600                       		bne.s	loc_17A3E
0001AB50 0C69 1400 0030             		cmpi.w	#$1400,$30(a1)
0001AB56 6600                       		bne.s	loc_17A46
0001AB58 7204                       		moveq	#4,d1
0001AB5A                            
0001AB5A                            loc_17A3E:
0001AB5A 5D00                       		subq.b	#6,d0
0001AB5C 6B00                       		bmi.s	loc_17A46
0001AB5E 720A                       		moveq	#$A,d1
0001AB60 6000                       		bra.s	loc_17A5A
0001AB62                            ; ===========================================================================
0001AB62                            
0001AB62                            loc_17A46:
0001AB62 4A29 0020                  		tst.b	obColType(a1)
0001AB66 6600                       		bne.s	loc_17A50
0001AB68 7205                       		moveq	#5,d1
0001AB6A 6000                       		bra.s	loc_17A5A
0001AB6C                            ; ===========================================================================
0001AB6C                            
0001AB6C                            loc_17A50:
0001AB6C 0C38 0004 D024             		cmpi.b	#4,(v_player+obRoutine).w
0001AB72 6500                       		bcs.s	loc_17A5A
0001AB74 7204                       		moveq	#4,d1
0001AB76                            
0001AB76                            loc_17A5A:
0001AB76 1141 001C                  		move.b	d1,obAnim(a0)
0001AB7A 5500                       		subq.b	#2,d0
0001AB7C 6600                       		bne.s	BGHZ_FaceDisp
0001AB7E 117C 0006 001C             		move.b	#6,obAnim(a0)
0001AB84 4A28 0001                  		tst.b	obRender(a0)
0001AB88 6A00                       		bpl.s	BGHZ_FaceDel
0001AB8A                            
0001AB8A                            BGHZ_FaceDisp:
0001AB8A 6000                       		bra.s	BGHZ_Display
0001AB8C                            ; ===========================================================================
0001AB8C                            
0001AB8C                            BGHZ_FaceDel:
0001AB8C 4EF9 0000 F9BC             		jmp	(DeleteObject).l
0001AB92                            ; ===========================================================================
0001AB92                            
0001AB92                            BGHZ_FlameMain:	; Routine 6
0001AB92 117C 0007 001C             		move.b	#7,obAnim(a0)
0001AB98 2268 0034                  		movea.l	$34(a0),a1
0001AB9C 0C29 000C 0025             		cmpi.b	#$C,ob2ndRout(a1)
0001ABA2 6600                       		bne.s	loc_17A96
0001ABA4 117C 000B 001C             		move.b	#$B,obAnim(a0)
0001ABAA 4A28 0001                  		tst.b	obRender(a0)
0001ABAE 6A00                       		bpl.s	BGHZ_FlameDel
0001ABB0 6000                       		bra.s	BGHZ_FlameDisp
0001ABB2                            ; ===========================================================================
0001ABB2                            
0001ABB2                            loc_17A96:
0001ABB2 3029 0010                  		move.w	obVelX(a1),d0
0001ABB6 6700                       		beq.s	BGHZ_FlameDisp
0001ABB8 117C 0008 001C             		move.b	#8,obAnim(a0)
0001ABBE                            
0001ABBE                            BGHZ_FlameDisp:
0001ABBE 6000                       		bra.s	BGHZ_Display
0001ABC0                            ; ===========================================================================
0001ABC0                            
0001ABC0                            BGHZ_FlameDel:
0001ABC0 4EF9 0000 F9BC             		jmp	(DeleteObject).l
0001ABC6                            ; ===========================================================================
0001ABC6                            
0001ABC6                            BGHZ_Display:
0001ABC6 2268 0034                  		movea.l	$34(a0),a1
0001ABCA 3169 0008 0008             		move.w	obX(a1),obX(a0)
0001ABD0 3169 000C 000C             		move.w	obY(a1),obY(a0)
0001ABD6 1169 0022 0022             		move.b	obStatus(a1),obStatus(a0)
0001ABDC 43F9 0000 0000             		lea	(Ani_Eggman).l,a1
0001ABE2 4EB9 0000 CA28             		jsr	(AnimateSprite).l
0001ABE8 1028 0022                  		move.b	obStatus(a0),d0
0001ABEC 0200 0003                  		andi.b	#3,d0
0001ABF0 0228 00FC 0001             		andi.b	#$FC,obRender(a0)
0001ABF6 8128 0001                  		or.b	d0,obRender(a0)
0001ABFA 4EF9 0000 F97C             		jmp	(DisplaySprite).l
0001ABFA 4EF9 0000 F97C             		jmp	(DisplaySprite).l
0001AC00                            		include	"_incObj\48 Eggman's Swinging Ball.asm"
0001AC00                            ; ---------------------------------------------------------------------------
0001AC00                            ; Object 48 - ball on a	chain that Eggman swings (GHZ)
0001AC00                            ; ---------------------------------------------------------------------------
0001AC00                            
0001AC00                            BossBall:
0001AC00 7000                       		moveq	#0,d0
0001AC02 1028 0024                  		move.b	obRoutine(a0),d0
0001AC06 323B 0000                  		move.w	GBall_Index(pc,d0.w),d1
0001AC0A 4EFB 1000                  		jmp	GBall_Index(pc,d1.w)
0001AC0E                            ; ===========================================================================
0001AC0E 0000                       GBall_Index:	dc.w GBall_Main-GBall_Index
0001AC10 0000                       		dc.w GBall_Base-GBall_Index
0001AC12 0000                       		dc.w GBall_Display2-GBall_Index
0001AC14 0000                       		dc.w loc_17C68-GBall_Index
0001AC16 0000                       		dc.w GBall_ChkVanish-GBall_Index
0001AC18                            ; ===========================================================================
0001AC18                            
0001AC18                            GBall_Main:	; Routine 0
0001AC18 5428 0024                  		addq.b	#2,obRoutine(a0)
0001AC1C 317C 4080 0026             		move.w	#$4080,obAngle(a0)
0001AC22 317C FE00 003E             		move.w	#-$200,$3E(a0)
0001AC28 217C 0000 0000 0004        		move.l	#Map_BossItems,obMap(a0)
0001AC30 317C 046C 0002             		move.w	#$46C,obGfx(a0)
0001AC36 45E8 0028                  		lea	obSubtype(a0),a2
0001AC3A 14FC 0000                  		move.b	#0,(a2)+
0001AC3E 7205                       		moveq	#5,d1
0001AC40 2248                       		movea.l	a0,a1
0001AC42 6000                       		bra.s	loc_17B60
0001AC44                            ; ===========================================================================
0001AC44                            
0001AC44                            GBall_MakeLinks:
0001AC44 4EB9 0000 FE1E             		jsr	(FindNextFreeObj).l
0001AC4A 6600                       		bne.s	GBall_MakeBall
0001AC4C 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001AC52 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001AC58 12BC 0048                  		move.b	#id_BossBall,0(a1) ; load chain link object
0001AC5C 137C 0006 0024             		move.b	#6,obRoutine(a1)
0001AC62 237C 0000 9882 0004        		move.l	#Map_Swing_GHZ,obMap(a1)
0001AC6A 337C 0380 0002             		move.w	#$380,obGfx(a1)
0001AC70 137C 0001 001A             		move.b	#1,obFrame(a1)
0001AC76 5228 0028                  		addq.b	#1,obSubtype(a0)
0001AC7A                            
0001AC7A                            loc_17B60:
0001AC7A 3A09                       		move.w	a1,d5
0001AC7C 0445 D000                  		subi.w	#$D000,d5
0001AC80 EC4D                       		lsr.w	#6,d5
0001AC82 0245 007F                  		andi.w	#$7F,d5
0001AC86 14C5                       		move.b	d5,(a2)+
0001AC88 137C 0004 0001             		move.b	#4,obRender(a1)
0001AC8E 137C 0008 0014             		move.b	#8,obActWid(a1)
0001AC94 337C 0300 0018             		move.w	#$300,obPriority(a1)
0001AC9A 2368 0034 0034             		move.l	$34(a0),$34(a1)
0001ACA0 51C9 FFA2                  		dbf	d1,GBall_MakeLinks ; repeat sequence 5 more times
0001ACA4                            
0001ACA4                            GBall_MakeBall:
0001ACA4 137C 0008 0024             		move.b	#8,obRoutine(a1)
0001ACAA 237C 0000 9DDE 0004        		move.l	#Map_GBall,obMap(a1) ; load different mappings for final link
0001ACB2 337C 43AA 0002             		move.w	#$43AA,obGfx(a1) ; use different graphics
0001ACB8 137C 0001 001A             		move.b	#1,obFrame(a1)
0001ACBE 337C 0280 0018             		move.w	#$280,obPriority(a1)
0001ACC4 137C 0081 0020             		move.b	#$81,obColType(a1) ; make object hurt Sonic
0001ACCA 4E75                       		rts	
0001ACCC                            ; ===========================================================================
0001ACCC                            
0001ACCC 0010 2030 4060             GBall_PosData:	dc.b 0,	$10, $20, $30, $40, $60	; y-position data for links and	giant ball
0001ACD2                            
0001ACD2                            ; ===========================================================================
0001ACD2                            
0001ACD2                            GBall_Base:	; Routine 2
0001ACD2 47F9 0001 ACCC             		lea	(GBall_PosData).l,a3
0001ACD8 45E8 0028                  		lea	obSubtype(a0),a2
0001ACDC 7C00                       		moveq	#0,d6
0001ACDE 1C1A                       		move.b	(a2)+,d6
0001ACE0                            
0001ACE0                            loc_17BC6:
0001ACE0 7800                       		moveq	#0,d4
0001ACE2 181A                       		move.b	(a2)+,d4
0001ACE4 ED4C                       		lsl.w	#6,d4
0001ACE6 0684 00FF D000             		addi.l	#v_objspace&$FFFFFF,d4
0001ACEC 2244                       		movea.l	d4,a1
0001ACEE 101B                       		move.b	(a3)+,d0
0001ACF0 B029 003C                  		cmp.b	$3C(a1),d0
0001ACF4 6700                       		beq.s	loc_17BE0
0001ACF6 5229 003C                  		addq.b	#1,$3C(a1)
0001ACFA                            
0001ACFA                            loc_17BE0:
0001ACFA 51CE FFE4                  		dbf	d6,loc_17BC6
0001ACFE                            
0001ACFE B029 003C                  		cmp.b	$3C(a1),d0
0001AD02 6600                       		bne.s	loc_17BFA
0001AD04 2268 0034                  		movea.l	$34(a0),a1
0001AD08 0C29 0006 0025             		cmpi.b	#6,ob2ndRout(a1)
0001AD0E 6600                       		bne.s	loc_17BFA
0001AD10 5428 0024                  		addq.b	#2,obRoutine(a0)
0001AD14                            
0001AD14                            loc_17BFA:
0001AD14 0C68 0020 0032             		cmpi.w	#$20,$32(a0)
0001AD1A 6700                       		beq.s	GBall_Display
0001AD1C 5268 0032                  		addq.w	#1,$32(a0)
0001AD20                            
0001AD20                            GBall_Display:
0001AD20 6100 0000                  		bsr.w	sub_17C2A
0001AD24 1028 0026                  		move.b	obAngle(a0),d0
0001AD28 4EB9 0000 97F4             		jsr	(Swing_Move2).l
0001AD2E 4EF9 0000 F97C             		jmp	(DisplaySprite).l
0001AD34                            ; ===========================================================================
0001AD34                            
0001AD34                            GBall_Display2:	; Routine 4
0001AD34 6100 0000                  		bsr.w	sub_17C2A
0001AD38 4EB9 0000 97B4             		jsr	(Obj48_Move).l
0001AD3E 4EF9 0000 F97C             		jmp	(DisplaySprite).l
0001AD44                            
0001AD44                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001AD44                            
0001AD44                            
0001AD44                            sub_17C2A:
0001AD44 2268 0034                  		movea.l	$34(a0),a1
0001AD48 0628 0020 001B             		addi.b	#$20,obAniFrame(a0)
0001AD4E 6400                       		bcc.s	loc_17C3C
0001AD50 0868 0000 001A             		bchg	#0,obFrame(a0)
0001AD56                            
0001AD56                            loc_17C3C:
0001AD56 3169 0008 003A             		move.w	obX(a1),$3A(a0)
0001AD5C 3029 000C                  		move.w	obY(a1),d0
0001AD60 D068 0032                  		add.w	$32(a0),d0
0001AD64 3140 0038                  		move.w	d0,$38(a0)
0001AD68 1169 0022 0022             		move.b	obStatus(a1),obStatus(a0)
0001AD6E 4A29 0022                  		tst.b	obStatus(a1)
0001AD72 6A00                       		bpl.s	locret_17C66
0001AD74 10BC 003F                  		move.b	#id_ExplosionBomb,0(a0)
0001AD78 117C 0000 0024             		move.b	#0,obRoutine(a0)
0001AD7E                            
0001AD7E                            locret_17C66:
0001AD7E 4E75                       		rts	
0001AD80                            ; End of function sub_17C2A
0001AD80                            
0001AD80                            ; ===========================================================================
0001AD80                            
0001AD80                            loc_17C68:	; Routine 6
0001AD80 2268 0034                  		movea.l	$34(a0),a1
0001AD84 4A29 0022                  		tst.b	obStatus(a1)
0001AD88 6A00                       		bpl.s	GBall_Display3
0001AD8A 10BC 003F                  		move.b	#id_ExplosionBomb,0(a0)
0001AD8E 117C 0000 0024             		move.b	#0,obRoutine(a0)
0001AD94                            
0001AD94                            GBall_Display3:
0001AD94 4EF9 0000 F97C             		jmp	(DisplaySprite).l
0001AD9A                            ; ===========================================================================
0001AD9A                            
0001AD9A                            GBall_ChkVanish:; Routine 8
0001AD9A 7000                       		moveq	#0,d0
0001AD9C 4A28 001A                  		tst.b	obFrame(a0)
0001ADA0 6600                       		bne.s	GBall_Vanish
0001ADA2 5200                       		addq.b	#1,d0
0001ADA4                            
0001ADA4                            GBall_Vanish:
0001ADA4 1140 001A                  		move.b	d0,obFrame(a0)
0001ADA8 2268 0034                  		movea.l	$34(a0),a1
0001ADAC 4A29 0022                  		tst.b	obStatus(a1)
0001ADB0 6A00                       		bpl.s	GBall_Display4
0001ADB2 117C 0000 0020             		move.b	#0,obColType(a0)
0001ADB8 6100 FBC2                  		bsr.w	BossDefeated
0001ADBC 5328 003C                  		subq.b	#1,$3C(a0)
0001ADC0 6A00                       		bpl.s	GBall_Display4
0001ADC2 10BC 003F                  		move.b	#id_ExplosionBomb,(a0)
0001ADC6 117C 0000 0024             		move.b	#0,obRoutine(a0)
0001ADCC                            
0001ADCC                            GBall_Display4:
0001ADCC 4EF9 0000 F97C             		jmp	(DisplaySprite).l
0001ADCC 4EF9 0000 F97C             		jmp	(DisplaySprite).l
0001ADD2                            		include	"_anim\Eggman.asm"
0001ADD2                            ; ---------------------------------------------------------------------------
0001ADD2                            ; Animation script - Eggman (bosses)
0001ADD2                            ; ---------------------------------------------------------------------------
0001ADD2 0000                       Ani_Eggman:	dc.w @ship-Ani_Eggman
0001ADD4 0000                       		dc.w @facenormal1-Ani_Eggman
0001ADD6 0000                       		dc.w @facenormal2-Ani_Eggman
0001ADD8 0000                       		dc.w @facenormal3-Ani_Eggman
0001ADDA 0000                       		dc.w @facelaugh-Ani_Eggman
0001ADDC 0000                       		dc.w @facehit-Ani_Eggman
0001ADDE 0000                       		dc.w @facepanic-Ani_Eggman
0001ADE0 0000                       		dc.w @blank-Ani_Eggman
0001ADE2 0000                       		dc.w @flame1-Ani_Eggman
0001ADE4 0000                       		dc.w @flame2-Ani_Eggman
0001ADE6 0000                       		dc.w @facedefeat-Ani_Eggman
0001ADE8 0000                       		dc.w @escapeflame-Ani_Eggman
0001ADEA 0F00 FF                    @ship:		dc.b $F, 0, afEnd
0001ADEE 00                         		even
0001ADEE 0501 02FF                  @facenormal1:	dc.b 5,	1, 2, afEnd
0001ADF2                            		even
0001ADF2 0301 02FF                  @facenormal2:	dc.b 3,	1, 2, afEnd
0001ADF6                            		even
0001ADF6 0101 02FF                  @facenormal3:	dc.b 1,	1, 2, afEnd
0001ADFA                            		even
0001ADFA 0403 04FF                  @facelaugh:	dc.b 4,	3, 4, afEnd
0001ADFE                            		even
0001ADFE 1F05 01FF                  @facehit:	dc.b $1F, 5, 1,	afEnd
0001AE02                            		even
0001AE02 0306 01FF                  @facepanic:	dc.b 3,	6, 1, afEnd
0001AE06                            		even
0001AE06 0F0A FF                    @blank:		dc.b $F, $A, afEnd
0001AE0A 00                         		even
0001AE0A 0308 09FF                  @flame1:	dc.b 3,	8, 9, afEnd
0001AE0E                            		even
0001AE0E 0108 09FF                  @flame2:	dc.b 1,	8, 9, afEnd
0001AE12                            		even
0001AE12 0F07 FF                    @facedefeat:	dc.b $F, 7, afEnd
0001AE16 00                         		even
0001AE16 0209 080B 0C0B 0C09 08FE+  @escapeflame:	dc.b 2,	9, 8, $B, $C, $B, $C, 9, 8, afBack, 2
0001AE22 00                         		even
0001AE22 00                         		even
0001AE22                            Map_Eggman:	include	"_maps\Eggman.asm"
0001AE22                            ; --------------------------------------------------------------------------------
0001AE22                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0001AE22                            ; --------------------------------------------------------------------------------
0001AE22                            
0001AE22                            SME_F_pyS:	
0001AE22 0000 0000                  		dc.w SME_F_pyS_1A-SME_F_pyS, SME_F_pyS_34-SME_F_pyS	
0001AE26 0000 0000                  		dc.w SME_F_pyS_44-SME_F_pyS, SME_F_pyS_54-SME_F_pyS	
0001AE2A 0000 0000                  		dc.w SME_F_pyS_69-SME_F_pyS, SME_F_pyS_7E-SME_F_pyS	
0001AE2E 0000 0000                  		dc.w SME_F_pyS_93-SME_F_pyS, SME_F_pyS_A8-SME_F_pyS	
0001AE32 0000 0000                  		dc.w SME_F_pyS_CC-SME_F_pyS, SME_F_pyS_D2-SME_F_pyS	
0001AE36 0000 0000                  		dc.w SME_F_pyS_D8-SME_F_pyS, SME_F_pyS_D9-SME_F_pyS	
0001AE3A 0000                       		dc.w SME_F_pyS_E4-SME_F_pyS	
0001AE3C 05                         SME_F_pyS_1A:	dc.b 5	
0001AE3D EC01 000A E4               		dc.b $EC, 1, 0, $A, $E4	
0001AE42 FC0E 2010 E4               		dc.b $FC, $E, $20, $10, $E4	
0001AE47 FC0E 201C 04               		dc.b $FC, $E, $20, $1C, 4	
0001AE4C 140C 2028 EC               		dc.b $14, $C, $20, $28, $EC	
0001AE51 1400 202C 0C               		dc.b $14, 0, $20, $2C, $C	
0001AE56 03                         SME_F_pyS_34:	dc.b 3	
0001AE57 E404 0000 F4               		dc.b $E4, 4, 0, 0, $F4	
0001AE5C EC0D 0002 EC               		dc.b $EC, $D, 0, 2, $EC	
0001AE61 EC05 000C 0C               		dc.b $EC, 5, 0, $C, $C	
0001AE66 03                         SME_F_pyS_44:	dc.b 3	
0001AE67 E404 0000 F4               		dc.b $E4, 4, 0, 0, $F4	
0001AE6C EC0D 0035 EC               		dc.b $EC, $D, 0, $35, $EC	
0001AE71 EC05 000C 0C               		dc.b $EC, 5, 0, $C, $C	
0001AE76 04                         SME_F_pyS_54:	dc.b 4	
0001AE77 E408 003D F4               		dc.b $E4, 8, 0, $3D, $F4	
0001AE7C EC09 0040 EC               		dc.b $EC, 9, 0, $40, $EC	
0001AE81 EC05 0046 04               		dc.b $EC, 5, 0, $46, 4	
0001AE86 EC01 000E 14               		dc.b $EC, 1, 0, $E, $14	
0001AE8B 04                         SME_F_pyS_69:	dc.b 4	
0001AE8C E408 004A F4               		dc.b $E4, 8, 0, $4A, $F4	
0001AE91 EC09 004D EC               		dc.b $EC, 9, 0, $4D, $EC	
0001AE96 EC05 0053 04               		dc.b $EC, 5, 0, $53, 4	
0001AE9B EC01 000E 14               		dc.b $EC, 1, 0, $E, $14	
0001AEA0 04                         SME_F_pyS_7E:	dc.b 4	
0001AEA1 E408 0057 F4               		dc.b $E4, 8, 0, $57, $F4	
0001AEA6 EC09 005A EC               		dc.b $EC, 9, 0, $5A, $EC	
0001AEAB EC05 0060 04               		dc.b $EC, 5, 0, $60, 4	
0001AEB0 EC01 000E 14               		dc.b $EC, 1, 0, $E, $14	
0001AEB5 04                         SME_F_pyS_93:	dc.b 4	
0001AEB6 E404 0064 04               		dc.b $E4, 4, 0, $64, 4	
0001AEBB E404 0000 F4               		dc.b $E4, 4, 0, 0, $F4	
0001AEC0 EC0D 0035 EC               		dc.b $EC, $D, 0, $35, $EC	
0001AEC5 EC05 000C 0C               		dc.b $EC, 5, 0, $C, $C	
0001AECA 07                         SME_F_pyS_A8:	dc.b 7	
0001AECB E409 0066 F4               		dc.b $E4, 9, 0, $66, $F4	
0001AED0 E408 0057 F4               		dc.b $E4, 8, 0, $57, $F4	
0001AED5 EC05 0060 04               		dc.b $EC, 5, 0, $60, 4	
0001AEDA EC01 0035 EC               		dc.b $EC, 1, 0, $35, $EC	
0001AEDF F400 005D F4               		dc.b $F4, 0, 0, $5D, $F4	
0001AEE4 F400 005F FC               		dc.b $F4, 0, 0, $5F, $FC	
0001AEE9 EC01 000E 14               		dc.b $EC, 1, 0, $E, $14	
0001AEEE 01                         SME_F_pyS_CC:	dc.b 1	
0001AEEF 0405 002D 22               		dc.b 4, 5, 0, $2D, $22	
0001AEF4 01                         SME_F_pyS_D2:	dc.b 1	
0001AEF5 0405 0031 22               		dc.b 4, 5, 0, $31, $22	
0001AEFA 00                         SME_F_pyS_D8:	dc.b 0	
0001AEFB 02                         SME_F_pyS_D9:	dc.b 2	
0001AEFC 0008 012A 22               		dc.b 0, 8, 1, $2A, $22	
0001AF01 0808 112A 22               		dc.b 8, 8, $11, $2A, $22	
0001AF06 02                         SME_F_pyS_E4:	dc.b 2	
0001AF07 F80B 012D 22               		dc.b $F8, $B, 1, $2D, $22	
0001AF0C 0001 0139 3A               		dc.b 0, 1, 1, $39, $3A	
0001AF12 00                         		even
0001AF12 00                         		even
0001AF12                            Map_BossItems:	include	"_maps\Boss Items.asm"
0001AF12                            ; ---------------------------------------------------------------------------
0001AF12                            ; Sprite mappings - extra boss items (e.g. swinging ball on a chain in GHZ)
0001AF12                            ; ---------------------------------------------------------------------------
0001AF12                            Map_BossItems_internal:
0001AF12 0000                       		dc.w @chainanchor1-Map_BossItems_internal
0001AF14 0000                       		dc.w @chainanchor2-Map_BossItems_internal
0001AF16 0000                       		dc.w @cross-Map_BossItems_internal
0001AF18 0000                       		dc.w @widepipe-Map_BossItems_internal
0001AF1A 0000                       		dc.w @pipe-Map_BossItems_internal
0001AF1C 0000                       		dc.w @spike-Map_BossItems_internal
0001AF1E 0000                       		dc.w @legmask-Map_BossItems_internal
0001AF20 0000                       		dc.w @legs-Map_BossItems_internal
0001AF22 01                         @chainanchor1:	dc.b 1
0001AF23 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8	; GHZ boss
0001AF28 02                         @chainanchor2:	dc.b 2
0001AF29 FC04 0004 F8               		dc.b $FC, 4, 0,	4, $F8	; GHZ boss
0001AF2E F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0001AF34 00                         		even
0001AF34 01                         @cross:		dc.b 1
0001AF35 FC00 0006 FC               		dc.b $FC, 0, 0,	6, $FC	; unknown
0001AF3A 01                         @widepipe:	dc.b 1
0001AF3B 1409 0007 F4               		dc.b $14, 9, 0,	7, $F4	; SLZ boss
0001AF40 01                         @pipe:		dc.b 1
0001AF41 1405 000D F8               		dc.b $14, 5, 0,	$D, $F8	; MZ boss
0001AF46 04                         @spike:		dc.b 4
0001AF47 F004 0011 F8               		dc.b $F0, 4, 0,	$11, $F8 ; SYZ boss
0001AF4C F801 0013 F8               		dc.b $F8, 1, 0,	$13, $F8
0001AF51 F801 0813 00               		dc.b $F8, 1, 8,	$13, 0
0001AF56 0804 0015 F8               		dc.b 8,	4, 0, $15, $F8
0001AF5C 00                         		even
0001AF5C 02                         @legmask:	dc.b 2
0001AF5D 0005 0017 00               		dc.b 0,	5, 0, $17, 0	; FZ post-boss: sprite covering part of legs
0001AF62 0000 001B 10               		dc.b 0,	0, 0, $1B, $10
0001AF68 00                         		even
0001AF68 02                         @legs:		dc.b 2
0001AF69 1804 001C 00               		dc.b $18, 4, 0,	$1C, 0	; FZ post-boss
0001AF6E 000B 001E 10               		dc.b 0,	$B, 0, $1E, $10
0001AF74 00                         		even
0001AF74 00                         		even
0001AF74                            		include	"_incObj\77 Boss - Labyrinth.asm"
0001AF74                            ; ---------------------------------------------------------------------------
0001AF74                            ; Object 77 - Eggman (LZ)
0001AF74                            ; ---------------------------------------------------------------------------
0001AF74                            
0001AF74                            BossLabyrinth:
0001AF74 7000                       		moveq	#0,d0
0001AF76 1028 0024                  		move.b	obRoutine(a0),d0
0001AF7A 323B 0000                  		move.w	Obj77_Index(pc,d0.w),d1
0001AF7E 4EFB 1000                  		jmp	Obj77_Index(pc,d1.w)
0001AF82                            ; ===========================================================================
0001AF82 0000                       Obj77_Index:	dc.w Obj77_Main-Obj77_Index
0001AF84 0000                       		dc.w Obj77_ShipMain-Obj77_Index
0001AF86 0000                       		dc.w Obj77_FaceMain-Obj77_Index
0001AF88 0000                       		dc.w Obj77_FlameMain-Obj77_Index
0001AF8A                            
0001AF8A 0200                       Obj77_ObjData:	dc.b 2,	0		; routine number, animation
0001AF8C 0401                       		dc.b 4,	1
0001AF8E 0607                       		dc.b 6,	7
0001AF90                            ; ===========================================================================
0001AF90                            
0001AF90                            Obj77_Main:	; Routine 0
0001AF90 317C 1E10 0008             		move.w	#$1E10,obX(a0)
0001AF96 317C 05C0 000C             		move.w	#$5C0,obY(a0)
0001AF9C 3168 0008 0030             		move.w	obX(a0),$30(a0)
0001AFA2 3168 000C 0038             		move.w	obY(a0),$38(a0)
0001AFA8 117C 000F 0020             		move.b	#$F,obColType(a0)
0001AFAE 117C 0008 0021             		move.b	#8,obColProp(a0) ; set number of hits to 8
0001AFB4 317C 0200 0018             		move.w	#$200,obPriority(a0)
0001AFBA 45FA FFCE                  		lea	Obj77_ObjData(pc),a2
0001AFBE 2248                       		movea.l	a0,a1
0001AFC0 7202                       		moveq	#2,d1
0001AFC2 6000                       		bra.s	Obj77_LoadBoss
0001AFC4                            ; ===========================================================================
0001AFC4                            
0001AFC4                            Obj77_Loop:
0001AFC4 4EB9 0000 FE1E             		jsr	(FindNextFreeObj).l
0001AFCA 6600                       		bne.s	Obj77_ShipMain
0001AFCC 12BC 0077                  		move.b	#id_BossLabyrinth,0(a1)
0001AFD0 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001AFD6 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001AFDC                            
0001AFDC                            Obj77_LoadBoss:
0001AFDC 08A8 0000 0022             		bclr	#0,obStatus(a0)
0001AFE2 4229 0025                  		clr.b	ob2ndRout(a1)
0001AFE6 135A 0024                  		move.b	(a2)+,obRoutine(a1)
0001AFEA 135A 001C                  		move.b	(a2)+,obAnim(a1)
0001AFEE 3368 0018 0018             		move.w	obPriority(a0),obPriority(a1)
0001AFF4 237C 0001 AE22 0004        		move.l	#Map_Eggman,obMap(a1)
0001AFFC 337C 0400 0002             		move.w	#$400,obGfx(a1)
0001B002 137C 0004 0001             		move.b	#4,obRender(a1)
0001B008 137C 0020 0014             		move.b	#$20,obActWid(a1)
0001B00E 2348 0034                  		move.l	a0,$34(a1)
0001B012 51C9 FFB0                  		dbf	d1,Obj77_Loop
0001B016                            
0001B016                            Obj77_ShipMain:	; Routine 2
0001B016 43F8 D000                  		lea	(v_player).w,a1
0001B01A 7000                       		moveq	#0,d0
0001B01C 1028 0025                  		move.b	ob2ndRout(a0),d0
0001B020 323B 0000                  		move.w	Obj77_ShipIndex(pc,d0.w),d1
0001B024 4EBB 1000                  		jsr	Obj77_ShipIndex(pc,d1.w)
0001B028 43F9 0001 ADD2             		lea	(Ani_Eggman).l,a1
0001B02E 4EB9 0000 CA28             		jsr	(AnimateSprite).l
0001B034 7003                       		moveq	#3,d0
0001B036 C028 0022                  		and.b	obStatus(a0),d0
0001B03A 0228 00FC 0001             		andi.b	#$FC,obRender(a0)
0001B040 8128 0001                  		or.b	d0,obRender(a0)
0001B044 4EF9 0000 F97C             		jmp	(DisplaySprite).l
0001B04A                            ; ===========================================================================
0001B04A 0000 0000                  Obj77_ShipIndex:dc.w loc_17F1E-Obj77_ShipIndex,	loc_17FA0-Obj77_ShipIndex
0001B04E 0000 0000                  		dc.w loc_17FE0-Obj77_ShipIndex,	loc_1801E-Obj77_ShipIndex
0001B052 0000 0000                  		dc.w loc_180BC-Obj77_ShipIndex,	loc_180F6-Obj77_ShipIndex
0001B056 0000 0000                  		dc.w loc_1812A-Obj77_ShipIndex,	loc_18152-Obj77_ShipIndex
0001B05A                            ; ===========================================================================
0001B05A                            
0001B05A                            loc_17F1E:
0001B05A 3029 0008                  		move.w	obX(a1),d0
0001B05E 0C40 1DA0                  		cmpi.w	#$1DA0,d0
0001B062 6500                       		bcs.s	loc_17F38
0001B064 317C FE80 0012             		move.w	#-$180,obVelY(a0)
0001B06A 317C 0060 0010             		move.w	#$60,obVelX(a0)
0001B070 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001B074                            
0001B074                            loc_17F38:
0001B074 6100 F948                  		bsr.w	BossMove
0001B078 3168 0038 000C             		move.w	$38(a0),obY(a0)
0001B07E 3168 0030 0008             		move.w	$30(a0),obX(a0)
0001B084                            
0001B084                            loc_17F48:
0001B084 4A28 003D                  		tst.b	$3D(a0)
0001B088 6600                       		bne.s	loc_17F8E
0001B08A 4A28 0022                  		tst.b	obStatus(a0)
0001B08E 6B00                       		bmi.s	loc_17F92
0001B090 4A28 0020                  		tst.b	obColType(a0)
0001B094 6600                       		bne.s	locret_17F8C
0001B096 4A28 003E                  		tst.b	$3E(a0)
0001B09A 6600                       		bne.s	loc_17F70
0001B09C 117C 0020 003E             		move.b	#$20,$3E(a0)
0001B0AC                            
0001B0AC                            loc_17F70:
0001B0AC 43F8 FB22                  		lea	(v_pal_dry+$22).w,a1
0001B0B0 7000                       		moveq	#0,d0
0001B0B2 4A51                       		tst.w	(a1)
0001B0B4 6600                       		bne.s	loc_17F7E
0001B0B6 303C 0EEE                  		move.w	#cWhite,d0
0001B0BA                            
0001B0BA                            loc_17F7E:
0001B0BA 3280                       		move.w	d0,(a1)
0001B0BC 5328 003E                  		subq.b	#1,$3E(a0)
0001B0C0 6600                       		bne.s	locret_17F8C
0001B0C2 117C 000F 0020             		move.b	#$F,obColType(a0)
0001B0C8                            
0001B0C8                            locret_17F8C:
0001B0C8 4E75                       		rts	
0001B0CA                            ; ===========================================================================
0001B0CA                            
0001B0CA                            loc_17F8E:
0001B0CA 6000 F8B0                  		bra.w	BossDefeated
0001B0CE                            ; ===========================================================================
0001B0CE                            
0001B0CE                            loc_17F92:
0001B0CE 7064                       		moveq	#100,d0
0001B0D0 6100 0000                  		bsr.w	AddPoints
0001B0D4 117C 00FF 003D             		move.b	#-1,$3D(a0)
0001B0DA 4E75                       		rts	
0001B0DC                            ; ===========================================================================
0001B0DC                            
0001B0DC                            loc_17FA0:
0001B0DC 70FE                       		moveq	#-2,d0
0001B0DE 0C68 1E48 0030             		cmpi.w	#$1E48,$30(a0)
0001B0E4 6500                       		bcs.s	loc_17FB6
0001B0E6 317C 1E48 0030             		move.w	#$1E48,$30(a0)
0001B0EC 4268 0010                  		clr.w	obVelX(a0)
0001B0F0 5240                       		addq.w	#1,d0
0001B0F2                            
0001B0F2                            loc_17FB6:
0001B0F2 0C68 0500 0038             		cmpi.w	#$500,$38(a0)
0001B0F8 6E00                       		bgt.s	loc_17FCA
0001B0FA 317C 0500 0038             		move.w	#$500,$38(a0)
0001B100 4268 0012                  		clr.w	obVelY(a0)
0001B104 5240                       		addq.w	#1,d0
0001B106                            
0001B106                            loc_17FCA:
0001B106 6600                       		bne.s	loc_17FDC
0001B108 317C 0140 0010             		move.w	#$140,obVelX(a0)
0001B10E 317C FE00 0012             		move.w	#-$200,obVelY(a0)
0001B114 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001B118                            
0001B118                            loc_17FDC:
0001B118 6000 FF5A                  		bra.w	loc_17F38
0001B11C                            ; ===========================================================================
0001B11C                            
0001B11C                            loc_17FE0:
0001B11C 70FE                       		moveq	#-2,d0
0001B11E 0C68 1E70 0030             		cmpi.w	#$1E70,$30(a0)
0001B124 6500                       		bcs.s	loc_17FF6
0001B126 317C 1E70 0030             		move.w	#$1E70,$30(a0)
0001B12C 4268 0010                  		clr.w	obVelX(a0)
0001B130 5240                       		addq.w	#1,d0
0001B132                            
0001B132                            loc_17FF6:
0001B132 0C68 04C0 0038             		cmpi.w	#$4C0,$38(a0)
0001B138 6E00                       		bgt.s	loc_1800A
0001B13A 317C 04C0 0038             		move.w	#$4C0,$38(a0)
0001B140 4268 0012                  		clr.w	obVelY(a0)
0001B144 5240                       		addq.w	#1,d0
0001B146                            
0001B146                            loc_1800A:
0001B146 6600                       		bne.s	loc_1801A
0001B148 317C FE80 0012             		move.w	#-$180,obVelY(a0)
0001B14E 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001B152 4228 003F                  		clr.b	$3F(a0)
0001B156                            
0001B156                            loc_1801A:
0001B156 6000 FF1C                  		bra.w	loc_17F38
0001B15A                            ; ===========================================================================
0001B15A                            
0001B15A                            loc_1801E:
0001B15A 0C68 0100 0038             		cmpi.w	#$100,$38(a0)
0001B160 6E00                       		bgt.s	loc_1804E
0001B162 317C 0100 0038             		move.w	#$100,$38(a0)
0001B168 317C 0140 0010             		move.w	#$140,obVelX(a0)
0001B16E 317C FF80 0012             		move.w	#-$80,obVelY(a0)
0001B174 4A28 003D                  		tst.b	$3D(a0)
0001B178 6700                       		beq.s	loc_18046
0001B17A E1E8 0010                  		asl	obVelX(a0)
0001B17E E1E8 0012                  		asl	obVelY(a0)
0001B182                            
0001B182                            loc_18046:
0001B182 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001B186 6000 FEEC                  		bra.w	loc_17F38
0001B18A                            ; ===========================================================================
0001B18A                            
0001B18A                            loc_1804E:
0001B18A 08E8 0000 0022             		bset	#0,obStatus(a0)
0001B190 5428 003F                  		addq.b	#2,$3F(a0)
0001B194 1028 003F                  		move.b	$3F(a0),d0
0001B198 4EB9 0000 3A36             		jsr	(CalcSine).l
0001B19E 4A41                       		tst.w	d1
0001B1A0 6A00                       		bpl.s	loc_1806C
0001B1A2 08A8 0000 0022             		bclr	#0,obStatus(a0)
0001B1A8                            
0001B1A8                            loc_1806C:
0001B1A8 E840                       		asr.w	#4,d0
0001B1AA 4840                       		swap	d0
0001B1AC 4240                       		clr.w	d0
0001B1AE D0A8 0030                  		add.l	$30(a0),d0
0001B1B2 4840                       		swap	d0
0001B1B4 3140 0008                  		move.w	d0,obX(a0)
0001B1B8 3028 0012                  		move.w	obVelY(a0),d0
0001B1BC 3238 D00C                  		move.w	(v_player+obY).w,d1
0001B1C0 9268 000C                  		sub.w	obY(a0),d1
0001B1C4 6500                       		bcs.s	loc_180A2
0001B1C6 0441 0048                  		subi.w	#$48,d1
0001B1CA 6500                       		bcs.s	loc_180A2
0001B1CC E240                       		asr.w	#1,d0
0001B1CE 0441 0028                  		subi.w	#$28,d1
0001B1D2 6500                       		bcs.s	loc_180A2
0001B1D4 E240                       		asr.w	#1,d0
0001B1D6 0441 0028                  		subi.w	#$28,d1
0001B1DA 6500                       		bcs.s	loc_180A2
0001B1DC 7000                       		moveq	#0,d0
0001B1DE                            
0001B1DE                            loc_180A2:
0001B1DE 48C0                       		ext.l	d0
0001B1E0 E180                       		asl.l	#8,d0
0001B1E2 4A28 003D                  		tst.b	$3D(a0)
0001B1E6 6700                       		beq.s	loc_180AE
0001B1E8 D080                       		add.l	d0,d0
0001B1EA                            
0001B1EA                            loc_180AE:
0001B1EA D1A8 0038                  		add.l	d0,$38(a0)
0001B1EE 3168 0038 000C             		move.w	$38(a0),obY(a0)
0001B1F4 6000 FE8E                  		bra.w	loc_17F48
0001B1F8                            ; ===========================================================================
0001B1F8                            
0001B1F8                            loc_180BC:
0001B1F8 70FE                       		moveq	#-2,d0
0001B1FA 0C68 1F4C 0030             		cmpi.w	#$1F4C,$30(a0)
0001B200 6500                       		bcs.s	loc_180D2
0001B202 317C 1F4C 0030             		move.w	#$1F4C,$30(a0)
0001B208 4268 0010                  		clr.w	obVelX(a0)
0001B20C 5240                       		addq.w	#1,d0
0001B20E                            
0001B20E                            loc_180D2:
0001B20E 0C68 00C0 0038             		cmpi.w	#$C0,$38(a0)
0001B214 6E00                       		bgt.s	loc_180E6
0001B216 317C 00C0 0038             		move.w	#$C0,$38(a0)
0001B21C 4268 0012                  		clr.w	obVelY(a0)
0001B220 5240                       		addq.w	#1,d0
0001B222                            
0001B222                            loc_180E6:
0001B222 6600                       		bne.s	loc_180F2
0001B224 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001B228 08A8 0000 0022             		bclr	#0,obStatus(a0)
0001B22E                            
0001B22E                            loc_180F2:
0001B22E 6000 FE44                  		bra.w	loc_17F38
0001B232                            ; ===========================================================================
0001B232                            
0001B232                            loc_180F6:
0001B232 4A28 003D                  		tst.b	$3D(a0)
0001B236 6600                       		bne.s	loc_18112
0001B238 0C69 1EC8 0008             		cmpi.w	#$1EC8,obX(a1)
0001B23E 6D00                       		blt.s	loc_18126
0001B240 0C69 00F0 000C             		cmpi.w	#$F0,obY(a1)
0001B246 6E00                       		bgt.s	loc_18126
0001B248 117C 0032 003C             		move.b	#$32,$3C(a0)
0001B24E                            
0001B24E                            loc_18112:
0001B24E 4A38 FE2D                          tst.b     (v_invinc).w
0001B252 6600                               bne.s   @boss_invinc
0001B254                            
0001B254 1038 F5C6                          move.b   (v_Saved_music),d0
0001B258 6000 0000                          bra.w      @boss_play
0001B25C                            
0001B25C                            @boss_invinc:
0001B25C 103C 0000                          move.b #bgm_Invincible,d0
0001B260                            
0001B260                            @boss_play:
0001B260 4EB8 124E                          jsr PlaySound
0001B264 4238 F7AA                          clr.b    (f_lockscreen).w
0001B268 08E8 0000 0022                     bset    #0,obStatus(a0)
0001B26E 5428 0025                          addq.b    #2,ob2ndRout(a0)
0001B272                            
0001B272                            loc_18126:
0001B272 6000 FE00                  		bra.w	loc_17F38
0001B276                            ; ===========================================================================
0001B276                            
0001B276                            loc_1812A:
0001B276 4A28 003D                  		tst.b	$3D(a0)
0001B27A 6600                       		bne.s	loc_18136
0001B27C 5328 003C                  		subq.b	#1,$3C(a0)
0001B280 6600                       		bne.s	loc_1814E
0001B282                            
0001B282                            loc_18136:
0001B282 4228 003C                  		clr.b	$3C(a0)
0001B286 317C 0400 0010             		move.w	#$400,obVelX(a0)
0001B28C 317C FFC0 0012             		move.w	#-$40,obVelY(a0)
0001B292 4228 003D                  		clr.b	$3D(a0)
0001B296 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001B29A                            
0001B29A                            loc_1814E:
0001B29A 6000 FDD8                  		bra.w	loc_17F38
0001B29E                            ; ===========================================================================
0001B29E                            
0001B29E                            loc_18152:
0001B29E 0C78 2030 F72A             		cmpi.w	#$2030,(v_limitright2).w
0001B2A4 6400                       		bcc.s	loc_18160
0001B2A6 5478 F72A                  		addq.w	#2,(v_limitright2).w
0001B2AA 6000                       		bra.s	loc_18166
0001B2AC                            ; ===========================================================================
0001B2AC                            
0001B2AC                            loc_18160:
0001B2AC 4A28 0001                  		tst.b	obRender(a0)
0001B2B0 6A00                       		bpl.s	Obj77_ShipDel
0001B2B2                            
0001B2B2                            loc_18166:
0001B2B2 6000 FDC0                  		bra.w	loc_17F38
0001B2B6                            ; ===========================================================================
0001B2B6                            
0001B2B6                            Obj77_ShipDel:
0001B2B6 4EF9 0000 F9BC             		jmp	(DeleteObject).l
0001B2BC                            ; ===========================================================================
0001B2BC                            
0001B2BC                            Obj77_FaceMain:	; Routine 4
0001B2BC 2268 0034                  		movea.l	$34(a0),a1
0001B2C0 1011                       		move.b	(a1),d0
0001B2C2 B010                       		cmp.b	(a0),d0
0001B2C4 6600                       		bne.s	Obj77_FaceDel
0001B2C6 7000                       		moveq	#0,d0
0001B2C8 1029 0025                  		move.b	ob2ndRout(a1),d0
0001B2CC 7201                       		moveq	#1,d1
0001B2CE 4A28 003D                  		tst.b	$3D(a0)
0001B2D2 6700                       		beq.s	loc_1818C
0001B2D4 720A                       		moveq	#$A,d1
0001B2D6 6000                       		bra.s	loc_181A0
0001B2D8                            ; ===========================================================================
0001B2D8                            
0001B2D8                            loc_1818C:
0001B2D8 4A29 0020                  		tst.b	obColType(a1)
0001B2DC 6600                       		bne.s	loc_18196
0001B2DE 7205                       		moveq	#5,d1
0001B2E0 6000                       		bra.s	loc_181A0
0001B2E2                            ; ===========================================================================
0001B2E2                            
0001B2E2                            loc_18196:
0001B2E2 0C38 0004 D024             		cmpi.b	#4,(v_player+obRoutine).w
0001B2E8 6500                       		bcs.s	loc_181A0
0001B2EA 7204                       		moveq	#4,d1
0001B2EC                            
0001B2EC                            loc_181A0:
0001B2EC 1141 001C                  		move.b	d1,obAnim(a0)
0001B2F0 0C00 000E                  		cmpi.b	#$E,d0
0001B2F4 6600                       		bne.s	loc_181B6
0001B2F6 117C 0006 001C             		move.b	#6,obAnim(a0)
0001B2FC 4A28 0001                  		tst.b	obRender(a0)
0001B300 6A00                       		bpl.s	Obj77_FaceDel
0001B302                            
0001B302                            loc_181B6:
0001B302 6000                       		bra.s	Obj77_Display
0001B304                            ; ===========================================================================
0001B304                            
0001B304                            Obj77_FaceDel:
0001B304 4EF9 0000 F9BC             		jmp	(DeleteObject).l
0001B30A                            ; ===========================================================================
0001B30A                            
0001B30A                            Obj77_FlameMain:; Routine 6
0001B30A 117C 0007 001C             		move.b	#7,obAnim(a0)
0001B310 2268 0034                  		movea.l	$34(a0),a1
0001B314 1011                       		move.b	(a1),d0
0001B316 B010                       		cmp.b	(a0),d0
0001B318 6600                       		bne.s	Obj77_FlameDel
0001B31A 0C29 000E 0025             		cmpi.b	#$E,ob2ndRout(a1)
0001B320 6600                       		bne.s	loc_181F0
0001B322 117C 000B 001C             		move.b	#$B,obAnim(a0)
0001B328 4A28 0001                  		tst.b	1(a0)
0001B32C 6A00                       		bpl.s	Obj77_FlameDel
0001B32E 6000                       		bra.s	loc_181F0
0001B330                            ; ===========================================================================
0001B330 4A69 0010                  		tst.w	obVelX(a1)
0001B334 6700                       		beq.s	loc_181F0
0001B336 117C 0008 001C             		move.b	#8,obAnim(a0)
0001B33C                            
0001B33C                            loc_181F0:
0001B33C 6000                       		bra.s	Obj77_Display
0001B33E                            ; ===========================================================================
0001B33E                            
0001B33E                            Obj77_FlameDel:
0001B33E 4EF9 0000 F9BC             		jmp	(DeleteObject).l
0001B344                            ; ===========================================================================
0001B344                            
0001B344                            Obj77_Display:
0001B344 43F9 0001 ADD2             		lea	(Ani_Eggman).l,a1
0001B34A 4EB9 0000 CA28             		jsr	(AnimateSprite).l
0001B350 2268 0034                  		movea.l	$34(a0),a1
0001B354 3169 0008 0008             		move.w	obX(a1),obX(a0)
0001B35A 3169 000C 000C             		move.w	obY(a1),obY(a0)
0001B360 1169 0022 0022             		move.b	obStatus(a1),obStatus(a0)
0001B366 7003                       		moveq	#3,d0
0001B368 C028 0022                  		and.b	obStatus(a0),d0
0001B36C 0228 00FC 0001             		andi.b	#$FC,obRender(a0)
0001B372 8128 0001                  		or.b	d0,obRender(a0)
0001B376 4EF9 0000 F97C             		jmp	(DisplaySprite).l
0001B376 4EF9 0000 F97C             		jmp	(DisplaySprite).l
0001B37C                            		include	"_incObj\73 Boss - Marble.asm"
0001B37C                            ; ---------------------------------------------------------------------------
0001B37C                            ; Object 73 - Eggman (MZ)
0001B37C                            ; ---------------------------------------------------------------------------
0001B37C                            
0001B37C                            BossMarble:
0001B37C 7000                       		moveq	#0,d0
0001B37E 1028 0024                  		move.b	obRoutine(a0),d0
0001B382 323B 0000                  		move.w	Obj73_Index(pc,d0.w),d1
0001B386 4EFB 1000                  		jmp	Obj73_Index(pc,d1.w)
0001B38A                            ; ===========================================================================
0001B38A 0000                       Obj73_Index:	dc.w Obj73_Main-Obj73_Index
0001B38C 0000                       		dc.w Obj73_ShipMain-Obj73_Index
0001B38E 0000                       		dc.w Obj73_FaceMain-Obj73_Index
0001B390 0000                       		dc.w Obj73_FlameMain-Obj73_Index
0001B392 0000                       		dc.w Obj73_TubeMain-Obj73_Index
0001B394                            
0001B394 0200 0200                  Obj73_ObjData:	dc.b 2,	0, $02, $00		; routine number, animation, priority (high and low bytes)
0001B398 0401 0200                  		dc.b 4,	1, $02, $00
0001B39C 0607 0200                  		dc.b 6,	7, $02, $00
0001B3A0 0800 0180                  		dc.b 8,	0, $01, $80
0001B3A4                            ; ===========================================================================
0001B3A4                            
0001B3A4                            Obj73_Main:	; Routine 0
0001B3A4 3168 0008 0030             		move.w	obX(a0),$30(a0)
0001B3AA 3168 000C 0038             		move.w	obY(a0),$38(a0)
0001B3B0 117C 000F 0020             		move.b	#$F,obColType(a0)
0001B3B6 117C 0008 0021             		move.b	#8,obColProp(a0) ; set number of hits to 8
0001B3BC 45FA FFD6                  		lea	Obj73_ObjData(pc),a2
0001B3C0 2248                       		movea.l	a0,a1
0001B3C2 7203                       		moveq	#3,d1
0001B3C4 6000                       		bra.s	Obj73_LoadBoss
0001B3C6                            ; ===========================================================================
0001B3C6                            
0001B3C6                            Obj73_Loop:
0001B3C6 4EB9 0000 FE1E             		jsr	(FindNextFreeObj).l
0001B3CC 6600                       		bne.s	Obj73_ShipMain
0001B3CE 12BC 0073                  		move.b	#id_BossMarble,0(a1)
0001B3D2 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001B3D8 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001B3DE                            
0001B3DE                            Obj73_LoadBoss:
0001B3DE 08A8 0000 0022             		bclr	#0,obStatus(a0)
0001B3E4 4229 0025                  		clr.b	ob2ndRout(a1)
0001B3E8 135A 0024                  		move.b	(a2)+,obRoutine(a1)
0001B3EC 135A 001C                  		move.b	(a2)+,obAnim(a1)
0001B3F0 335A 0018                  		move.w	(a2)+,obPriority(a1)
0001B3F4 237C 0001 AE22 0004        		move.l	#Map_Eggman,obMap(a1)
0001B3FC 337C 0400 0002             		move.w	#$400,obGfx(a1)
0001B402 137C 0004 0001             		move.b	#4,obRender(a1)
0001B408 137C 0020 0014             		move.b	#$20,obActWid(a1)
0001B40E 2348 0034                  		move.l	a0,$34(a1)
0001B412 51C9 FFB2                  		dbf	d1,Obj73_Loop	; repeat sequence 3 more times
0001B416                            
0001B416                            Obj73_ShipMain:	; Routine 2
0001B416 7000                       		moveq	#0,d0
0001B418 1028 0025                  		move.b	ob2ndRout(a0),d0
0001B41C 323B 0000                  		move.w	Obj73_ShipIndex(pc,d0.w),d1
0001B420 4EBB 1000                  		jsr	Obj73_ShipIndex(pc,d1.w)
0001B424 43F9 0001 ADD2             		lea	(Ani_Eggman).l,a1
0001B42A 4EB9 0000 CA28             		jsr	(AnimateSprite).l
0001B430 7003                       		moveq	#3,d0
0001B432 C028 0022                  		and.b	obStatus(a0),d0
0001B436 0228 00FC 0001             		andi.b	#$FC,obRender(a0)
0001B43C 8128 0001                  		or.b	d0,obRender(a0)
0001B440 4EF9 0000 F97C             		jmp	(DisplaySprite).l
0001B446                            ; ===========================================================================
0001B446 0000                       Obj73_ShipIndex:dc.w loc_18302-Obj73_ShipIndex
0001B448 0000                       		dc.w loc_183AA-Obj73_ShipIndex
0001B44A 0000                       		dc.w loc_184F6-Obj73_ShipIndex
0001B44C 0000                       		dc.w loc_1852C-Obj73_ShipIndex
0001B44E 0000                       		dc.w loc_18582-Obj73_ShipIndex
0001B450                            ; ===========================================================================
0001B450                            
0001B450                            loc_18302:
0001B450 1028 003F                  		move.b	$3F(a0),d0
0001B454 5428 003F                  		addq.b	#2,$3F(a0)
0001B458 4EB9 0000 3A36             		jsr	(CalcSine).l
0001B45E E440                       		asr.w	#2,d0
0001B460 3140 0012                  		move.w	d0,obVelY(a0)
0001B464 317C FF00 0010             		move.w	#-$100,obVelX(a0)
0001B46A 6100 F552                  		bsr.w	BossMove
0001B46E 0C68 1910 0030             		cmpi.w	#$1910,$30(a0)
0001B474 6600                       		bne.s	loc_18334
0001B476 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001B47A 4228 0028                  		clr.b	obSubtype(a0)
0001B47E 42A8 0010                  		clr.l	obVelX(a0)
0001B482                            
0001B482                            loc_18334:
0001B482 4EB9 0000 3A10             		jsr	(RandomNumber).l
0001B488 1140 0034                  		move.b	d0,$34(a0)
0001B48C                            
0001B48C                            loc_1833E:
0001B48C 3168 0038 000C             		move.w	$38(a0),obY(a0)
0001B492 3168 0030 0008             		move.w	$30(a0),obX(a0)
0001B498 0C28 0004 0025             		cmpi.b	#4,ob2ndRout(a0)
0001B49E 6400                       		bcc.s	locret_18390
0001B4A0 4A28 0022                  		tst.b	obStatus(a0)
0001B4A4 6B00                       		bmi.s	loc_18392
0001B4A6 4A28 0020                  		tst.b	obColType(a0)
0001B4AA 6600                       		bne.s	locret_18390
0001B4AC 4A28 003E                  		tst.b	$3E(a0)
0001B4B0 6600                       		bne.s	loc_18374
0001B4B2 117C 0028 003E             		move.b	#$28,$3E(a0)
0001B4C2                            
0001B4C2                            loc_18374:
0001B4C2 43F8 FB22                  		lea	(v_pal_dry+$22).w,a1
0001B4C6 7000                       		moveq	#0,d0
0001B4C8 4A51                       		tst.w	(a1)
0001B4CA 6600                       		bne.s	loc_18382
0001B4CC 303C 0EEE                  		move.w	#cWhite,d0
0001B4D0                            
0001B4D0                            loc_18382:
0001B4D0 3280                       		move.w	d0,(a1)
0001B4D2 5328 003E                  		subq.b	#1,$3E(a0)
0001B4D6 6600                       		bne.s	locret_18390
0001B4D8 117C 000F 0020             		move.b	#$F,obColType(a0)
0001B4DE                            
0001B4DE                            locret_18390:
0001B4DE 4E75                       		rts	
0001B4E0                            ; ===========================================================================
0001B4E0                            
0001B4E0                            loc_18392:
0001B4E0 7064                       		moveq	#100,d0
0001B4E2 6100 0000                  		bsr.w	AddPoints
0001B4E6 117C 0004 0025             		move.b	#4,ob2ndRout(a0)
0001B4EC 317C 00B4 003C             		move.w	#$B4,$3C(a0)
0001B4F2 4268 0010                  		clr.w	obVelX(a0)
0001B4F6 4E75                       		rts	
0001B4F8                            ; ===========================================================================
0001B4F8                            
0001B4F8                            loc_183AA:
0001B4F8 7000                       		moveq	#0,d0
0001B4FA 1028 0028                  		move.b	obSubtype(a0),d0
0001B4FE 303B 0000                  		move.w	off_183C2(pc,d0.w),d0
0001B502 4EBB 0000                  		jsr	off_183C2(pc,d0.w)
0001B506 0228 0006 0028             		andi.b	#6,obSubtype(a0)
0001B50C 6000 FF7E                  		bra.w	loc_1833E
0001B510                            ; ===========================================================================
0001B510 0000                       off_183C2:	dc.w loc_183CA-off_183C2
0001B512 0000                       		dc.w Obj73_MakeLava2-off_183C2
0001B514 0000                       		dc.w loc_183CA-off_183C2
0001B516 0000                       		dc.w Obj73_MakeLava2-off_183C2
0001B518                            ; ===========================================================================
0001B518                            
0001B518                            loc_183CA:
0001B518 4A68 0010                  		tst.w	obVelX(a0)
0001B51C 6600                       		bne.s	loc_183FE
0001B51E 7040                       		moveq	#$40,d0
0001B520 0C68 022C 0038             		cmpi.w	#$22C,$38(a0)
0001B526 6700                       		beq.s	loc_183E6
0001B528 6500                       		bcs.s	loc_183DE
0001B52A 4440                       		neg.w	d0
0001B52C                            
0001B52C                            loc_183DE:
0001B52C 3140 0012                  		move.w	d0,obVelY(a0)
0001B530 6000 F48C                  		bra.w	BossMove
0001B534                            ; ===========================================================================
0001B534                            
0001B534                            loc_183E6:
0001B534 317C 0200 0010             		move.w	#$200,obVelX(a0)
0001B53A 317C 0100 0012             		move.w	#$100,obVelY(a0)
0001B540 0828 0000 0022             		btst	#0,obStatus(a0)
0001B546 6600                       		bne.s	loc_183FE
0001B548 4468 0010                  		neg.w	obVelX(a0)
0001B54C                            
0001B54C                            loc_183FE:
0001B54C 0C28 0018 003E             		cmpi.b	#$18,$3E(a0)
0001B552 6400                       		bcc.s	Obj73_MakeLava
0001B554 6100 F468                  		bsr.w	BossMove
0001B558 5968 0012                  		subq.w	#4,obVelY(a0)
0001B55C                            
0001B55C                            Obj73_MakeLava:
0001B55C 5328 0034                  		subq.b	#1,$34(a0)
0001B560 6400                       		bcc.s	loc_1845C
0001B562 4EB9 0000 FE08             		jsr	(FindFreeObj).l
0001B568 6600                       		bne.s	loc_1844A
0001B56A 12BC 0014                  		move.b	#id_LavaBall,0(a1) ; load lava ball object
0001B56E 337C 02E8 000C             		move.w	#$2E8,obY(a1)	; set Y	position
0001B574 4EB9 0000 3A10             		jsr	(RandomNumber).l
0001B57A 0280 0000 FFFF             		andi.l	#$FFFF,d0
0001B580 80FC 0050                  		divu.w	#$50,d0
0001B584 4840                       		swap	d0
0001B586 0640 1878                  		addi.w	#$1878,d0
0001B58A 3340 0008                  		move.w	d0,obX(a1)
0001B58E EE09                       		lsr.b	#7,d1
0001B590 337C 00FF 0028             		move.w	#$FF,obSubtype(a1)
0001B596                            
0001B596                            loc_1844A:
0001B596 4EB9 0000 3A10             		jsr	(RandomNumber).l
0001B59C 0200 001F                  		andi.b	#$1F,d0
0001B5A0 0600 0040                  		addi.b	#$40,d0
0001B5A4 1140 0034                  		move.b	d0,$34(a0)
0001B5A8                            
0001B5A8                            loc_1845C:
0001B5A8 0828 0000 0022             		btst	#0,obStatus(a0)
0001B5AE 6700                       		beq.s	loc_18474
0001B5B0 0C68 1910 0030             		cmpi.w	#$1910,$30(a0)
0001B5B6 6D00                       		blt.s	locret_1849C
0001B5B8 317C 1910 0030             		move.w	#$1910,$30(a0)
0001B5BE 6000                       		bra.s	loc_18482
0001B5C0                            ; ===========================================================================
0001B5C0                            
0001B5C0                            loc_18474:
0001B5C0 0C68 1830 0030             		cmpi.w	#$1830,$30(a0)
0001B5C6 6E00                       		bgt.s	locret_1849C
0001B5C8 317C 1830 0030             		move.w	#$1830,$30(a0)
0001B5CE                            
0001B5CE                            loc_18482:
0001B5CE 4268 0010                  		clr.w	obVelX(a0)
0001B5D2 317C FE80 0012             		move.w	#-$180,obVelY(a0)
0001B5D8 0C68 022C 0038             		cmpi.w	#$22C,$38(a0)
0001B5DE 6400                       		bcc.s	loc_18498
0001B5E0 4468 0012                  		neg.w	obVelY(a0)
0001B5E4                            
0001B5E4                            loc_18498:
0001B5E4 5428 0028                  		addq.b	#2,obSubtype(a0)
0001B5E8                            
0001B5E8                            locret_1849C:
0001B5E8 4E75                       		rts	
0001B5EA                            ; ===========================================================================
0001B5EA                            
0001B5EA                            Obj73_MakeLava2:
0001B5EA 6100 F3D2                  		bsr.w	BossMove
0001B5EE 3028 0038                  		move.w	$38(a0),d0
0001B5F2 0440 022C                  		subi.w	#$22C,d0
0001B5F6 6E00                       		bgt.s	locret_184F4
0001B5F8 303C 022C                  		move.w	#$22C,d0
0001B5FC 4A68 0012                  		tst.w	obVelY(a0)
0001B600 6700                       		beq.s	loc_184EA
0001B602 4268 0012                  		clr.w	obVelY(a0)
0001B606 317C 0050 003C             		move.w	#$50,$3C(a0)
0001B60C 0868 0000 0022             		bchg	#0,obStatus(a0)
0001B612 4EB9 0000 FE08             		jsr	(FindFreeObj).l
0001B618 6600                       		bne.s	loc_184EA
0001B61A 3368 0030 0008             		move.w	$30(a0),obX(a1)
0001B620 3368 0038 000C             		move.w	$38(a0),obY(a1)
0001B626 0669 0018 000C             		addi.w	#$18,obY(a1)
0001B62C 12BC 0074                  		move.b	#id_BossFire,(a1)	; load lava ball object
0001B630 137C 0001 0028             		move.b	#1,obSubtype(a1)
0001B636                            
0001B636                            loc_184EA:
0001B636 5368 003C                  		subq.w	#1,$3C(a0)
0001B63A 6600                       		bne.s	locret_184F4
0001B63C 5428 0028                  		addq.b	#2,obSubtype(a0)
0001B640                            
0001B640                            locret_184F4:
0001B640 4E75                       		rts	
0001B642                            ; ===========================================================================
0001B642                            
0001B642                            loc_184F6:
0001B642 5368 003C                  		subq.w	#1,$3C(a0)
0001B646 6B00                       		bmi.s	loc_18500
0001B648 6000 F332                  		bra.w	BossDefeated
0001B64C                            ; ===========================================================================
0001B64C                            
0001B64C                            loc_18500:
0001B64C 08E8 0000 0022             		bset	#0,obStatus(a0)
0001B652 08A8 0007 0022             		bclr	#7,obStatus(a0)
0001B658 4268 0010                  		clr.w	obVelX(a0)
0001B65C 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001B660 317C FFDA 003C             		move.w	#-$26,$3C(a0)
0001B666 4A38 F7A7                  		tst.b	(v_bossstatus).w
0001B66A 6600                       		bne.s	locret_1852A
0001B66C 11FC 0001 F7A7             		move.b	#1,(v_bossstatus).w
0001B672 4268 0012                  		clr.w	obVelY(a0)
0001B676                            
0001B676                            locret_1852A:
0001B676 4E75                       		rts	
0001B678                            ; ===========================================================================
0001B678                            
0001B678                            loc_1852C:
0001B678 5268 003C                  		addq.w	#1,$3C(a0)
0001B67C 6700                       		beq.s	loc_18544
0001B67E 6A00                       		bpl.s	loc_1854E
0001B680 0C68 0270 0038             		cmpi.w	#$270,$38(a0)
0001B686 6400                       		bcc.s	loc_18544
0001B688 0668 0018 0012             		addi.w	#$18,obVelY(a0)
0001B68E 6000                       		bra.s	loc_1857A
0001B690                            ; ===========================================================================
0001B690                            
0001B690                            loc_18544:
0001B690 4268 0012                  		clr.w	obVelY(a0)
0001B694 4268 003C                  		clr.w	$3C(a0)
0001B698 6000                       		bra.s	loc_1857A
0001B69A                            ; ===========================================================================
0001B69A                            
0001B69A                            loc_1854E:
0001B69A 0C68 0030 003C             		cmpi.w	#$30,$3C(a0)
0001B6A0 6500                       		bcs.s	loc_18566
0001B6A2 6700                       		beq.s	loc_1856C
0001B6A4 0C68 0038 003C             		cmpi.w	#$38,$3C(a0)
0001B6AA 6500                       		bcs.s	loc_1857A
0001B6AC 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001B6B0 6000                       		bra.s	loc_1857A
0001B6B2                            ; ===========================================================================
0001B6B2                            
0001B6B2                            loc_18566:
0001B6B2 5168 0012                  		subq.w	#8,obVelY(a0)
0001B6B6 6000                       		bra.s	loc_1857A
0001B6B8                            ; ===========================================================================
0001B6B8                            
0001B6B8                            loc_1856C:
0001B6B8 4268 0012                  		clr.w	obVelY(a0)
0001B6C6                            
0001B6C6                            loc_1857A:
0001B6C6 6100 F2F6                  		bsr.w	BossMove
0001B6CA 6000 FDC0                  		bra.w	loc_1833E
0001B6CE                            ; ===========================================================================
0001B6CE                            
0001B6CE                            loc_18582:
0001B6CE 317C 0500 0010             		move.w	#$500,obVelX(a0)
0001B6D4 317C FFC0 0012             		move.w	#-$40,obVelY(a0)
0001B6DA 0C78 1960 F72A             		cmpi.w	#$1960,(v_limitright2).w
0001B6E0 6400                       		bcc.s	loc_1859C
0001B6E2 5478 F72A                  		addq.w	#2,(v_limitright2).w
0001B6E6 6000                       		bra.s	loc_185A2
0001B6E8                            ; ===========================================================================
0001B6E8                            
0001B6E8                            loc_1859C:
0001B6E8 4A28 0001                  		tst.b	obRender(a0)
0001B6EC 6A00                       		bpl.s	Obj73_ShipDel
0001B6EE                            
0001B6EE                            loc_185A2:
0001B6EE 6100 F2CE                  		bsr.w	BossMove
0001B6F2 6000 FD98                  		bra.w	loc_1833E
0001B6F6                            ; ===========================================================================
0001B6F6                            
0001B6F6                            Obj73_ShipDel:
0001B6F6 4EF9 0000 F9BC             		jmp	(DeleteObject).l
0001B6FC                            ; ===========================================================================
0001B6FC                            
0001B6FC                            Obj73_FaceMain:	; Routine 4
0001B6FC 7000                       		moveq	#0,d0
0001B6FE 7201                       		moveq	#1,d1
0001B700 2268 0034                  		movea.l	$34(a0),a1
0001B704 1029 0025                  		move.b	ob2ndRout(a1),d0
0001B708 5540                       		subq.w	#2,d0
0001B70A 6600                       		bne.s	loc_185D2
0001B70C 0829 0001 0028             		btst	#1,obSubtype(a1)
0001B712 6700                       		beq.s	loc_185DA
0001B714 4A69 0012                  		tst.w	obVelY(a1)
0001B718 6600                       		bne.s	loc_185DA
0001B71A 7204                       		moveq	#4,d1
0001B71C 6000                       		bra.s	loc_185EE
0001B71E                            ; ===========================================================================
0001B71E                            
0001B71E                            loc_185D2:
0001B71E 5500                       		subq.b	#2,d0
0001B720 6B00                       		bmi.s	loc_185DA
0001B722 720A                       		moveq	#$A,d1
0001B724 6000                       		bra.s	loc_185EE
0001B726                            ; ===========================================================================
0001B726                            
0001B726                            loc_185DA:
0001B726 4A29 0020                  		tst.b	obColType(a1)
0001B72A 6600                       		bne.s	loc_185E4
0001B72C 7205                       		moveq	#5,d1
0001B72E 6000                       		bra.s	loc_185EE
0001B730                            ; ===========================================================================
0001B730                            
0001B730                            loc_185E4:
0001B730 0C38 0004 D024             		cmpi.b	#4,(v_player+obRoutine).w
0001B736 6500                       		bcs.s	loc_185EE
0001B738 7204                       		moveq	#4,d1
0001B73A                            
0001B73A                            loc_185EE:
0001B73A 1141 001C                  		move.b	d1,obAnim(a0)
0001B73E 5900                       		subq.b	#4,d0
0001B740 6600                       		bne.s	loc_18602
0001B742 117C 0006 001C             		move.b	#6,obAnim(a0)
0001B748 4A28 0001                  		tst.b	obRender(a0)
0001B74C 6A00                       		bpl.s	Obj73_FaceDel
0001B74E                            
0001B74E                            loc_18602:
0001B74E 6000                       		bra.s	Obj73_Display
0001B750                            ; ===========================================================================
0001B750                            
0001B750                            Obj73_FaceDel:
0001B750 4EF9 0000 F9BC             		jmp	(DeleteObject).l
0001B756                            ; ===========================================================================
0001B756                            
0001B756                            Obj73_FlameMain:; Routine 6
0001B756 117C 0007 001C             		move.b	#7,obAnim(a0)
0001B75C 2268 0034                  		movea.l	$34(a0),a1
0001B760 0C29 0008 0025             		cmpi.b	#8,ob2ndRout(a1)
0001B766 6D00                       		blt.s	loc_1862A
0001B768 117C 000B 001C             		move.b	#$B,obAnim(a0)
0001B76E 4A28 0001                  		tst.b	obRender(a0)
0001B772 6A00                       		bpl.s	Obj73_FlameDel
0001B774 6000                       		bra.s	loc_18636
0001B776                            ; ===========================================================================
0001B776                            
0001B776                            loc_1862A:
0001B776 4A69 0010                  		tst.w	obVelX(a1)
0001B77A 6700                       		beq.s	loc_18636
0001B77C 117C 0008 001C             		move.b	#8,obAnim(a0)
0001B782                            
0001B782                            loc_18636:
0001B782 6000                       		bra.s	Obj73_Display
0001B784                            ; ===========================================================================
0001B784                            
0001B784                            Obj73_FlameDel:
0001B784 4EF9 0000 F9BC             		jmp	(DeleteObject).l
0001B78A                            ; ===========================================================================
0001B78A                            
0001B78A                            Obj73_Display:
0001B78A 43F9 0001 ADD2             		lea	(Ani_Eggman).l,a1
0001B790 4EB9 0000 CA28             		jsr	(AnimateSprite).l
0001B796                            
0001B796                            loc_1864A:
0001B796 2268 0034                  		movea.l	$34(a0),a1
0001B79A 3169 0008 0008             		move.w	obX(a1),obX(a0)
0001B7A0 3169 000C 000C             		move.w	obY(a1),obY(a0)
0001B7A6 1169 0022 0022             		move.b	obStatus(a1),obStatus(a0)
0001B7AC 7003                       		moveq	#3,d0
0001B7AE C028 0022                  		and.b	obStatus(a0),d0
0001B7B2 0228 00FC 0001             		andi.b	#$FC,obRender(a0)
0001B7B8 8128 0001                  		or.b	d0,obRender(a0)
0001B7BC 4EF9 0000 F97C             		jmp	(DisplaySprite).l
0001B7C2                            ; ===========================================================================
0001B7C2                            
0001B7C2                            Obj73_TubeMain:	; Routine 8
0001B7C2 2268 0034                  		movea.l	$34(a0),a1
0001B7C6 0C29 0008 0025             		cmpi.b	#8,ob2ndRout(a1)
0001B7CC 6600                       		bne.s	loc_18688
0001B7CE 4A28 0001                  		tst.b	obRender(a0)
0001B7D2 6A00                       		bpl.s	Obj73_TubeDel
0001B7D4                            
0001B7D4                            loc_18688:
0001B7D4 217C 0001 AF12 0004        		move.l	#Map_BossItems,obMap(a0)
0001B7DC 317C 246C 0002             		move.w	#$246C,obGfx(a0)
0001B7E2 117C 0004 001A             		move.b	#4,obFrame(a0)
0001B7E8 60AC                       		bra.s	loc_1864A
0001B7EA                            ; ===========================================================================
0001B7EA                            
0001B7EA                            Obj73_TubeDel:
0001B7EA 4EF9 0000 F9BC             		jmp	(DeleteObject).l
0001B7EA 4EF9 0000 F9BC             		jmp	(DeleteObject).l
0001B7F0                            		include	"_incObj\74 MZ Boss Fire.asm"
0001B7F0                            ; ---------------------------------------------------------------------------
0001B7F0                            ; Object 74 - lava that	Eggman drops (MZ)
0001B7F0                            ; ---------------------------------------------------------------------------
0001B7F0                            
0001B7F0                            BossFire:
0001B7F0 7000                       		moveq	#0,d0
0001B7F2 1028 0024                  		move.b	obRoutine(a0),d0
0001B7F6 303B 0000                  		move.w	Obj74_Index(pc,d0.w),d0
0001B7FA 4EBB 0000                  		jsr	Obj74_Index(pc,d0.w)
0001B7FE 4EF9 0000 F97C             		jmp	(DisplaySprite).l
0001B804                            ; ===========================================================================
0001B804 0000                       Obj74_Index:	dc.w Obj74_Main-Obj74_Index
0001B806 0000                       		dc.w Obj74_Action-Obj74_Index
0001B808 0000                       		dc.w loc_18886-Obj74_Index
0001B80A 0000                       		dc.w Obj74_Delete3-Obj74_Index
0001B80C                            ; ===========================================================================
0001B80C                            
0001B80C                            Obj74_Main:	; Routine 0
0001B80C 117C 0008 0016             		move.b	#8,obHeight(a0)
0001B812 117C 0008 0017             		move.b	#8,obWidth(a0)
0001B818 217C 0000 D67A 0004        		move.l	#Map_Fire,obMap(a0)
0001B820 317C 0345 0002             		move.w	#$345,obGfx(a0)
0001B826 117C 0004 0001             		move.b	#4,obRender(a0)
0001B82C 317C 0280 0018             		move.w	#$280,obPriority(a0)
0001B832 3168 000C 0038             		move.w	obY(a0),$38(a0)
0001B838 117C 0008 0014             		move.b	#8,obActWid(a0)
0001B83E 5428 0024                  		addq.b	#2,obRoutine(a0)
0001B842 4A28 0028                  		tst.b	obSubtype(a0)
0001B846 6600                       		bne.s	loc_1870A
0001B848 117C 008B 0020             		move.b	#$8B,obColType(a0)
0001B84E 5428 0024                  		addq.b	#2,obRoutine(a0)
0001B852 6000 0000                  		bra.w	loc_18886
0001B856                            ; ===========================================================================
0001B856                            
0001B856                            loc_1870A:
0001B856 117C 001E 0029             		move.b	#$1E,$29(a0)
0001B866                            
0001B866                            Obj74_Action:	; Routine 2
0001B866 7000                       		moveq	#0,d0
0001B868 1028 0025                  		move.b	ob2ndRout(a0),d0
0001B86C 303B 0000                  		move.w	Obj74_Index2(pc,d0.w),d0
0001B870 4EBB 0000                  		jsr	Obj74_Index2(pc,d0.w)
0001B874 4EB9 0000 F968             		jsr	(SpeedToPos).l
0001B87A 43F9 0001 0840             		lea	(Ani_Fire).l,a1
0001B880 4EB9 0000 CA28             		jsr	(AnimateSprite).l
0001B886 0C68 02E8 000C             		cmpi.w	#$2E8,obY(a0)
0001B88C 6200                       		bhi.s	Obj74_Delete
0001B88E 4E75                       		rts	
0001B890                            ; ===========================================================================
0001B890                            
0001B890                            Obj74_Delete:
0001B890 4EF9 0000 F9BC             		jmp	(DeleteObject).l
0001B896                            ; ===========================================================================
0001B896 0000                       Obj74_Index2:	dc.w Obj74_Drop-Obj74_Index2
0001B898 0000                       		dc.w Obj74_MakeFlame-Obj74_Index2
0001B89A 0000                       		dc.w Obj74_Duplicate-Obj74_Index2
0001B89C 0000                       		dc.w Obj74_FallEdge-Obj74_Index2
0001B89E                            ; ===========================================================================
0001B89E                            
0001B89E                            Obj74_Drop:
0001B89E 08E8 0001 0022             		bset	#1,obStatus(a0)
0001B8A4 5328 0029                  		subq.b	#1,$29(a0)
0001B8A8 6A00                       		bpl.s	locret_18780
0001B8AA 117C 008B 0020             		move.b	#$8B,obColType(a0)
0001B8B0 4228 0028                  		clr.b	obSubtype(a0)
0001B8B4 0668 0018 0012             		addi.w	#$18,obVelY(a0)
0001B8BA 08A8 0001 0022             		bclr	#1,obStatus(a0)
0001B8C0 6100 C634                  		bsr.w	ObjFloorDist
0001B8C4 4A41                       		tst.w	d1
0001B8C6 6A00                       		bpl.s	locret_18780
0001B8C8 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001B8CC                            
0001B8CC                            locret_18780:
0001B8CC 4E75                       		rts	
0001B8CE                            ; ===========================================================================
0001B8CE                            
0001B8CE                            Obj74_MakeFlame:
0001B8CE 5568 000C                  		subq.w	#2,obY(a0)
0001B8D2 08E8 0007 0002             		bset	#7,obGfx(a0)
0001B8D8 317C 00A0 0010             		move.w	#$A0,obVelX(a0)
0001B8DE 4268 0012                  		clr.w	obVelY(a0)
0001B8E2 3168 0008 0030             		move.w	obX(a0),$30(a0)
0001B8E8 3168 000C 0038             		move.w	obY(a0),$38(a0)
0001B8EE 117C 0003 0029             		move.b	#3,$29(a0)
0001B8F4 4EB9 0000 FE1E             		jsr	(FindNextFreeObj).l
0001B8FA 6600                       		bne.s	loc_187CA
0001B8FC 47D1                       		lea	(a1),a3
0001B8FE 45D0                       		lea	(a0),a2
0001B900 7003                       		moveq	#3,d0
0001B902                            
0001B902                            Obj74_Loop:
0001B902 26DA                       		move.l	(a2)+,(a3)+
0001B904 26DA                       		move.l	(a2)+,(a3)+
0001B906 26DA                       		move.l	(a2)+,(a3)+
0001B908 26DA                       		move.l	(a2)+,(a3)+
0001B90A 51C8 FFF6                  		dbf	d0,Obj74_Loop
0001B90E                            
0001B90E 4469 0010                  		neg.w	obVelX(a1)
0001B912 5429 0025                  		addq.b	#2,ob2ndRout(a1)
0001B916                            
0001B916                            loc_187CA:
0001B916 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001B91A 4E75                       		rts	
0001B91C                            
0001B91C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001B91C                            
0001B91C                            
0001B91C                            Obj74_Duplicate2:
0001B91C 4EB9 0000 FE1E             		jsr	(FindNextFreeObj).l
0001B922 6600                       		bne.s	locret_187EE
0001B924 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001B92A 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001B930 12BC 0074                  		move.b	#id_BossFire,(a1)
0001B934 337C 0067 0028             		move.w	#$67,obSubtype(a1)
0001B93A                            
0001B93A                            locret_187EE:
0001B93A 4E75                       		rts	
0001B93C                            ; End of function Obj74_Duplicate2
0001B93C                            
0001B93C                            ; ===========================================================================
0001B93C                            
0001B93C                            Obj74_Duplicate:
0001B93C 6100 C5B8                  		bsr.w	ObjFloorDist
0001B940 4A41                       		tst.w	d1
0001B942 6A00                       		bpl.s	loc_18826
0001B944 3028 0008                  		move.w	obX(a0),d0
0001B948 0C40 1940                  		cmpi.w	#$1940,d0
0001B94C 6E00                       		bgt.s	loc_1882C
0001B94E 3228 0030                  		move.w	$30(a0),d1
0001B952 B240                       		cmp.w	d0,d1
0001B954 6700                       		beq.s	loc_1881E
0001B956 0240 0010                  		andi.w	#$10,d0
0001B95A 0241 0010                  		andi.w	#$10,d1
0001B95E B240                       		cmp.w	d0,d1
0001B960 6700                       		beq.s	loc_1881E
0001B962 61B8                       		bsr.s	Obj74_Duplicate2
0001B964 3168 0008 0032             		move.w	obX(a0),$32(a0)
0001B96A                            
0001B96A                            loc_1881E:
0001B96A 3168 0008 0030             		move.w	obX(a0),$30(a0)
0001B970 4E75                       		rts	
0001B972                            ; ===========================================================================
0001B972                            
0001B972                            loc_18826:
0001B972 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001B976 4E75                       		rts	
0001B978                            ; ===========================================================================
0001B978                            
0001B978                            loc_1882C:
0001B978 5428 0024                  		addq.b	#2,obRoutine(a0)
0001B97C 4E75                       		rts	
0001B97E                            ; ===========================================================================
0001B97E                            
0001B97E                            Obj74_FallEdge:
0001B97E 08A8 0001 0022             		bclr	#1,obStatus(a0)
0001B984 0668 0024 0012             		addi.w	#$24,obVelY(a0)	; make flame fall
0001B98A 3028 0008                  		move.w	obX(a0),d0
0001B98E 9068 0032                  		sub.w	$32(a0),d0
0001B992 6A00                       		bpl.s	loc_1884A
0001B994 4440                       		neg.w	d0
0001B996                            
0001B996                            loc_1884A:
0001B996 0C40 0012                  		cmpi.w	#$12,d0
0001B99A 6600                       		bne.s	loc_18856
0001B99C 08A8 0007 0002             		bclr	#7,obGfx(a0)
0001B9A2                            
0001B9A2                            loc_18856:
0001B9A2 6100 C552                  		bsr.w	ObjFloorDist
0001B9A6 4A41                       		tst.w	d1
0001B9A8 6A00                       		bpl.s	locret_1887E
0001B9AA 5328 0029                  		subq.b	#1,$29(a0)
0001B9AE 6700                       		beq.s	Obj74_Delete2
0001B9B0 4268 0012                  		clr.w	obVelY(a0)
0001B9B4 3168 0032 0008             		move.w	$32(a0),obX(a0)
0001B9BA 3168 0038 000C             		move.w	$38(a0),obY(a0)
0001B9C0 08E8 0007 0002             		bset	#7,obGfx(a0)
0001B9C6 5528 0025                  		subq.b	#2,ob2ndRout(a0)
0001B9CA                            
0001B9CA                            locret_1887E:
0001B9CA 4E75                       		rts	
0001B9CC                            ; ===========================================================================
0001B9CC                            
0001B9CC                            Obj74_Delete2:
0001B9CC 4EF9 0000 F9BC             		jmp	(DeleteObject).l
0001B9D2                            ; ===========================================================================
0001B9D2                            
0001B9D2                            loc_18886:	; Routine 4
0001B9D2 08E8 0007 0002             		bset	#7,obGfx(a0)
0001B9D8 5328 0029                  		subq.b	#1,$29(a0)
0001B9DC 6600                       		bne.s	Obj74_Animate
0001B9DE 117C 0001 001C             		move.b	#1,obAnim(a0)
0001B9E4 5968 000C                  		subq.w	#4,obY(a0)
0001B9E8 4228 0020                  		clr.b	obColType(a0)
0001B9EC                            
0001B9EC                            Obj74_Animate:
0001B9EC 43F9 0001 0840             		lea	(Ani_Fire).l,a1
0001B9F2 4EF9 0000 CA28             		jmp	(AnimateSprite).l
0001B9F8                            ; ===========================================================================
0001B9F8                            
0001B9F8                            Obj74_Delete3:	; Routine 6
0001B9F8 4EF9 0000 F9BC             		jmp	(DeleteObject).l
0001B9F8 4EF9 0000 F9BC             		jmp	(DeleteObject).l
0001B9FE                            
0001B9FE                            	Obj7A_Delete:
0001B9FE 4EF9 0000 F9BC             		jmp	(DeleteObject).l
0001BA04                            
0001BA04                            		include	"_incObj\7A Boss - Star Light.asm"
0001BA04                            ; ---------------------------------------------------------------------------
0001BA04                            ; Object 7A - Eggman (SLZ)
0001BA04                            ; ---------------------------------------------------------------------------
0001BA04                            
0001BA04                            BossStarLight:
0001BA04 7000                       		moveq	#0,d0
0001BA06 1028 0024                  		move.b	obRoutine(a0),d0
0001BA0A 323B 0000                  		move.w	Obj7A_Index(pc,d0.w),d1
0001BA0E 4EFB 1000                  		jmp	Obj7A_Index(pc,d1.w)
0001BA12                            ; ===========================================================================
0001BA12 0000                       Obj7A_Index:	dc.w Obj7A_Main-Obj7A_Index
0001BA14 0000                       		dc.w Obj7A_ShipMain-Obj7A_Index
0001BA16 0000                       		dc.w Obj7A_FaceMain-Obj7A_Index
0001BA18 0000                       		dc.w Obj7A_FlameMain-Obj7A_Index
0001BA1A 0000                       		dc.w Obj7A_TubeMain-Obj7A_Index
0001BA1C                            
0001BA1C 0200 0200                  Obj7A_ObjData:	dc.b 2,	0, $02, $00		; routine number, animation, priority (high and low bytes)
0001BA20 0401 0200                  		dc.b 4,	1, $02, $00
0001BA24 0607 0200                  		dc.b 6,	7, $02, $00
0001BA28 0800 0180                  		dc.b 8,	0, $01, $80
0001BA2C                            ; ===========================================================================
0001BA2C                            
0001BA2C                            Obj7A_Main:
0001BA2C 317C 2188 0008             		move.w	#$2188,obX(a0)
0001BA32 317C 0228 000C             		move.w	#$228,obY(a0)
0001BA38 3168 0008 0030             		move.w	obX(a0),$30(a0)
0001BA3E 3168 000C 0038             		move.w	obY(a0),$38(a0)
0001BA44 117C 000F 0020             		move.b	#$F,obColType(a0)
0001BA4A 117C 0008 0021             		move.b	#8,obColProp(a0) ; set number of hits to 8
0001BA50 45FA FFCA                  		lea	Obj7A_ObjData(pc),a2
0001BA54 2248                       		movea.l	a0,a1
0001BA56 7203                       		moveq	#3,d1
0001BA58 6000                       		bra.s	Obj7A_LoadBoss
0001BA5A                            ; ===========================================================================
0001BA5A                            
0001BA5A                            Obj7A_Loop:
0001BA5A 4EB9 0000 FE1E             		jsr	(FindNextFreeObj).l
0001BA60 6600                       		bne.s	loc_1895C
0001BA62 12BC 007A                  		move.b	#id_BossStarLight,0(a1)
0001BA66 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001BA6C 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001BA72                            
0001BA72                            Obj7A_LoadBoss:
0001BA72 08A8 0000 0022             		bclr	#0,obStatus(a0)
0001BA78 4229 0025                  		clr.b	ob2ndRout(a1)
0001BA7C 135A 0024                  		move.b	(a2)+,obRoutine(a1)
0001BA80 135A 001C                  		move.b	(a2)+,obAnim(a1)
0001BA84 135A 0018                  		move.b	(a2)+,obPriority(a1)
0001BA88 237C 0001 AE22 0004        		move.l	#Map_Eggman,obMap(a1)
0001BA90 337C 0400 0002             		move.w	#$400,obGfx(a1)
0001BA96 137C 0004 0001             		move.b	#4,obRender(a1)
0001BA9C 137C 0020 0014             		move.b	#$20,obActWid(a1)
0001BAA2 2348 0034                  		move.l	a0,$34(a1)
0001BAA6 51C9 FFB2                  		dbf	d1,Obj7A_Loop	; repeat sequence 3 more times
0001BAAA                            
0001BAAA                            loc_1895C:
0001BAAA 43F8 D040                  		lea	(v_objspace+$40).w,a1
0001BAAE 45E8 002A                  		lea	$2A(a0),a2
0001BAB2 705E                       		moveq	#$5E,d0
0001BAB4 723E                       		moveq	#$3E,d1
0001BAB6                            
0001BAB6                            loc_18968:
0001BAB6 B011                       		cmp.b	(a1),d0
0001BAB8 6600                       		bne.s	loc_18974
0001BABA 4A29 0028                  		tst.b	obSubtype(a1)
0001BABE 6700                       		beq.s	loc_18974
0001BAC0 34C9                       		move.w	a1,(a2)+
0001BAC2                            
0001BAC2                            loc_18974:
0001BAC2 D2FC 0040                  		adda.w	#$40,a1
0001BAC6 51C9 FFEE                  		dbf	d1,loc_18968
0001BACA                            
0001BACA                            Obj7A_ShipMain:	; Routine 2
0001BACA 7000                       		moveq	#0,d0
0001BACC 1028 0025                  		move.b	ob2ndRout(a0),d0
0001BAD0 303B 0000                  		move.w	Obj7A_ShipIndex(pc,d0.w),d0
0001BAD4 4EBB 0000                  		jsr	Obj7A_ShipIndex(pc,d0.w)
0001BAD8 43F9 0001 ADD2             		lea	(Ani_Eggman).l,a1
0001BADE 4EB9 0000 CA28             		jsr	(AnimateSprite).l
0001BAE4 7003                       		moveq	#3,d0
0001BAE6 C028 0022                  		and.b	obStatus(a0),d0
0001BAEA 0228 00FC 0001             		andi.b	#$FC,obRender(a0)
0001BAF0 8128 0001                  		or.b	d0,obRender(a0)
0001BAF4 4EF9 0000 F97C             		jmp	(DisplaySprite).l
0001BAFA                            ; ===========================================================================
0001BAFA 0000                       Obj7A_ShipIndex:dc.w loc_189B8-Obj7A_ShipIndex
0001BAFC 0000                       		dc.w loc_18A5E-Obj7A_ShipIndex
0001BAFE 0000                       		dc.w Obj7A_MakeBall-Obj7A_ShipIndex
0001BB00 0000                       		dc.w loc_18B48-Obj7A_ShipIndex
0001BB02 0000                       		dc.w loc_18B80-Obj7A_ShipIndex
0001BB04 0000                       		dc.w loc_18BC6-Obj7A_ShipIndex
0001BB06                            ; ===========================================================================
0001BB06                            
0001BB06                            loc_189B8:
0001BB06 317C FF00 0010             		move.w	#-$100,obVelX(a0)
0001BB0C 0C68 2120 0030             		cmpi.w	#$2120,$30(a0)
0001BB12 6400                       		bcc.s	loc_189CA
0001BB14 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001BB18                            
0001BB18                            loc_189CA:
0001BB18 6100 EEA4                  		bsr.w	BossMove
0001BB1C 1028 003F                  		move.b	$3F(a0),d0
0001BB20 5428 003F                  		addq.b	#2,$3F(a0)
0001BB24 4EB9 0000 3A36             		jsr	(CalcSine).l
0001BB2A EC40                       		asr.w	#6,d0
0001BB2C D068 0038                  		add.w	$38(a0),d0
0001BB30 3140 000C                  		move.w	d0,obY(a0)
0001BB34 3168 0030 0008             		move.w	$30(a0),obX(a0)
0001BB3A 6000                       		bra.s	loc_189FE
0001BB3C                            ; ===========================================================================
0001BB3C                            
0001BB3C                            loc_189EE:
0001BB3C 6100 EE80                  		bsr.w	BossMove
0001BB40 3168 0038 000C             		move.w	$38(a0),obY(a0)
0001BB46 3168 0030 0008             		move.w	$30(a0),obX(a0)
0001BB4C                            
0001BB4C                            loc_189FE:
0001BB4C 0C28 0006 0025             		cmpi.b	#6,ob2ndRout(a0)
0001BB52 6400                       		bcc.s	locret_18A44
0001BB54 4A28 0022                  		tst.b	obStatus(a0)
0001BB58 6B00                       		bmi.s	loc_18A46
0001BB5A 4A28 0020                  		tst.b	obColType(a0)
0001BB5E 6600                       		bne.s	locret_18A44
0001BB60 4A28 003E                  		tst.b	$3E(a0)
0001BB64 6600                       		bne.s	loc_18A28
0001BB66 117C 0020 003E             		move.b	#$20,$3E(a0)
0001BB76                            
0001BB76                            loc_18A28:
0001BB76 43F8 FB22                  		lea	(v_pal_dry+$22).w,a1
0001BB7A 7000                       		moveq	#0,d0
0001BB7C 4A51                       		tst.w	(a1)
0001BB7E 6600                       		bne.s	loc_18A36
0001BB80 303C 0EEE                  		move.w	#cWhite,d0
0001BB84                            
0001BB84                            loc_18A36:
0001BB84 3280                       		move.w	d0,(a1)
0001BB86 5328 003E                  		subq.b	#1,$3E(a0)
0001BB8A 6600                       		bne.s	locret_18A44
0001BB8C 117C 000F 0020             		move.b	#$F,obColType(a0)
0001BB92                            
0001BB92                            locret_18A44:
0001BB92 4E75                       		rts	
0001BB94                            ; ===========================================================================
0001BB94                            
0001BB94                            loc_18A46:
0001BB94 7064                       		moveq	#100,d0
0001BB96 6100 0000                  		bsr.w	AddPoints
0001BB9A 117C 0006 0025             		move.b	#6,ob2ndRout(a0)
0001BBA0 117C 0078 003C             		move.b	#$78,$3C(a0)
0001BBA6 4268 0010                  		clr.w	obVelX(a0)
0001BBAA 4E75                       		rts	
0001BBAC                            ; ===========================================================================
0001BBAC                            
0001BBAC                            loc_18A5E:
0001BBAC 3028 0030                  		move.w	$30(a0),d0
0001BBB0 317C 0200 0010             		move.w	#$200,obVelX(a0)
0001BBB6 0828 0000 0022             		btst	#0,obStatus(a0)
0001BBBC 6600                       		bne.s	loc_18A7C
0001BBBE 4468 0010                  		neg.w	obVelX(a0)
0001BBC2 0C40 2008                  		cmpi.w	#$2008,d0
0001BBC6 6E00                       		bgt.s	loc_18A88
0001BBC8 6000                       		bra.s	loc_18A82
0001BBCA                            ; ===========================================================================
0001BBCA                            
0001BBCA                            loc_18A7C:
0001BBCA 0C40 2138                  		cmpi.w	#$2138,d0
0001BBCE 6D00                       		blt.s	loc_18A88
0001BBD0                            
0001BBD0                            loc_18A82:
0001BBD0 0868 0000 0022             		bchg	#0,obStatus(a0)
0001BBD6                            
0001BBD6                            loc_18A88:
0001BBD6 3028 0008                  		move.w	8(a0),d0
0001BBDA 72FF                       		moveq	#-1,d1
0001BBDC 7402                       		moveq	#2,d2
0001BBDE 45E8 002A                  		lea	$2A(a0),a2
0001BBE2 7828                       		moveq	#$28,d4
0001BBE4 4A68 0010                  		tst.w	obVelX(a0)
0001BBE8 6A00                       		bpl.s	loc_18A9E
0001BBEA 4444                       		neg.w	d4
0001BBEC                            
0001BBEC                            loc_18A9E:
0001BBEC 321A                       		move.w	(a2)+,d1
0001BBEE 2641                       		movea.l	d1,a3
0001BBF0 082B 0003 0022             		btst	#3,obStatus(a3)
0001BBF6 6600                       		bne.s	loc_18AB4
0001BBF8 362B 0008                  		move.w	8(a3),d3
0001BBFC D644                       		add.w	d4,d3
0001BBFE 9640                       		sub.w	d0,d3
0001BC00 6700                       		beq.s	loc_18AC0
0001BC02                            
0001BC02                            loc_18AB4:
0001BC02 51CA FFE8                  		dbf	d2,loc_18A9E
0001BC06                            
0001BC06 1142 0028                  		move.b	d2,obSubtype(a0)
0001BC0A 6000 FF0C                  		bra.w	loc_189CA
0001BC0E                            ; ===========================================================================
0001BC0E                            
0001BC0E                            loc_18AC0:
0001BC0E 1142 0028                  		move.b	d2,obSubtype(a0)
0001BC12 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001BC16 117C 0028 003C             		move.b	#$28,$3C(a0)
0001BC1C 6000 FEFA                  		bra.w	loc_189CA
0001BC20                            ; ===========================================================================
0001BC20                            
0001BC20                            Obj7A_MakeBall:
0001BC20 0C28 0028 003C             		cmpi.b	#$28,$3C(a0)
0001BC26 6600                       		bne.s	loc_18B36
0001BC28 70FF                       		moveq	#-1,d0
0001BC2A 1028 0028                  		move.b	obSubtype(a0),d0
0001BC2E 4880                       		ext.w	d0
0001BC30 6B00                       		bmi.s	loc_18B40
0001BC32 5540                       		subq.w	#2,d0
0001BC34 4440                       		neg.w	d0
0001BC36 D040                       		add.w	d0,d0
0001BC38 43E8 002A                  		lea	$2A(a0),a1
0001BC3C 3031 0000                  		move.w	(a1,d0.w),d0
0001BC40 2440                       		movea.l	d0,a2
0001BC42 43F8 D040                  		lea	(v_objspace+$40).w,a1
0001BC46 723E                       		moveq	#$3E,d1
0001BC48                            
0001BC48                            loc_18AFA:
0001BC48 B0A9 003C                  		cmp.l	$3C(a1),d0
0001BC4C 6700                       		beq.s	loc_18B40
0001BC4E D2FC 0040                  		adda.w	#$40,a1
0001BC52 51C9 FFF4                  		dbf	d1,loc_18AFA
0001BC56                            
0001BC56 2F08                       		move.l	a0,-(sp)
0001BC58 41D2                       		lea	(a2),a0
0001BC5A 4EB9 0000 FE1E             		jsr	(FindNextFreeObj).l
0001BC60 205F                       		movea.l	(sp)+,a0
0001BC62 6600                       		bne.s	loc_18B40
0001BC64 12BC 007B                  		move.b	#id_BossSpikeball,(a1) ; load spiked ball object
0001BC68 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001BC6E 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001BC74 0669 0020 000C             		addi.w	#$20,obY(a1)
0001BC7A 136A 0022 0022             		move.b	obStatus(a2),obStatus(a1)
0001BC80 234A 003C                  		move.l	a2,$3C(a1)
0001BC84                            
0001BC84                            loc_18B36:
0001BC84 5328 003C                  		subq.b	#1,$3C(a0)
0001BC88 6700                       		beq.s	loc_18B40
0001BC8A 6000 FEC0                  		bra.w	loc_189FE
0001BC8E                            ; ===========================================================================
0001BC8E                            
0001BC8E                            loc_18B40:
0001BC8E 5528 0025                  		subq.b	#2,ob2ndRout(a0)
0001BC92 6000 FE84                  		bra.w	loc_189CA
0001BC96                            ; ===========================================================================
0001BC96                            
0001BC96                            loc_18B48:
0001BC96 5328 003C                  		subq.b	#1,$3C(a0)
0001BC9A 6B00                       		bmi.s	loc_18B52
0001BC9C 6000 ECDE                  		bra.w	BossDefeated
0001BCA0                            ; ===========================================================================
0001BCA0                            
0001BCA0                            loc_18B52:
0001BCA0 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001BCA4 4268 0012                  		clr.w	obVelY(a0)
0001BCA8 08E8 0000 0022             		bset	#0,obStatus(a0)
0001BCAE 08A8 0007 0022             		bclr	#7,obStatus(a0)
0001BCB4 4268 0010                  		clr.w	obVelX(a0)
0001BCB8 117C 00E8 003C             		move.b	#-$18,$3C(a0)
0001BCBE 4A38 F7A7                  		tst.b	(v_bossstatus).w
0001BCC2 6600                       		bne.s	loc_18B7C
0001BCC4 11FC 0001 F7A7             		move.b	#1,(v_bossstatus).w
0001BCCA                            
0001BCCA                            loc_18B7C:
0001BCCA 6000 FE80                  		bra.w	loc_189FE
0001BCCE                            ; ===========================================================================
0001BCCE                            
0001BCCE                            loc_18B80:
0001BCCE 5228 003C                  		addq.b	#1,$3C(a0)
0001BCD2 6700                       		beq.s	loc_18B90
0001BCD4 6A00                       		bpl.s	loc_18B96
0001BCD6 0668 0018 0012             		addi.w	#$18,obVelY(a0)
0001BCDC 6000                       		bra.s	loc_18BC2
0001BCDE                            ; ===========================================================================
0001BCDE                            
0001BCDE                            loc_18B90:
0001BCDE 4268 0012                  		clr.w	obVelY(a0)
0001BCE2 6000                       		bra.s	loc_18BC2
0001BCE4                            ; ===========================================================================
0001BCE4                            
0001BCE4                            loc_18B96:
0001BCE4 0C28 0020 003C             		cmpi.b	#$20,$3C(a0)
0001BCEA 6500                       		bcs.s	loc_18BAE
0001BCEC 6700                       		beq.s	loc_18BB4
0001BCEE 0C28 002A 003C             		cmpi.b	#$2A,$3C(a0)
0001BCF4 6500                       		bcs.s	loc_18BC2
0001BCF6 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001BCFA 6000                       		bra.s	loc_18BC2
0001BCFC                            ; ===========================================================================
0001BCFC                            
0001BCFC                            loc_18BAE:
0001BCFC 5168 0012                  		subq.w	#8,obVelY(a0)
0001BD00 6000                       		bra.s	loc_18BC2
0001BD02                            ; ===========================================================================
0001BD02                            
0001BD02                            loc_18BB4:
0001BD02 4268 0012                          	clr.w    obVelY(a0)
0001BD06 4A38 FE2D                          	tst.b     (v_invinc).w
0001BD0A 6600                               	bne.s   @boss_invinc
0001BD0C                            
0001BD0C 1038 F5C6                          	move.b   (v_Saved_music),d0
0001BD10 6000 0000                          	bra.w      @boss_play
0001BD14                            
0001BD14                            	@boss_invinc:
0001BD14 103C 0000                          	move.b #bgm_Invincible,d0
0001BD18                            
0001BD18                            	@boss_play:
0001BD18 4EB8 124E                          	jsr PlaySound
0001BD1C                            
0001BD1C                            loc_18BC2:
0001BD1C 6000 FE1E                  		bra.w	loc_189EE
0001BD20                            ; ===========================================================================
0001BD20                            
0001BD20                            loc_18BC6:
0001BD20 317C 0400 0010             		move.w	#$400,obVelX(a0)
0001BD26 317C FFC0 0012             		move.w	#-$40,obVelY(a0)
0001BD2C 0C78 2160 F72A             		cmpi.w	#$2160,(v_limitright2).w
0001BD32 6400                       		bcc.s	loc_18BE0
0001BD34 5478 F72A                  		addq.w	#2,(v_limitright2).w
0001BD38 6000                       		bra.s	loc_18BE8
0001BD3A                            ; ===========================================================================
0001BD3A                            
0001BD3A                            loc_18BE0:
0001BD3A 4A28 0001                  		tst.b	obRender(a0)
0001BD3E 6A00 FCBE                  		bpl.w	Obj7A_Delete
0001BD42                            
0001BD42                            loc_18BE8:
0001BD42 6100 EC7A                  		bsr.w	BossMove
0001BD46 6000 FDD0                  		bra.w	loc_189CA
0001BD4A                            ; ===========================================================================
0001BD4A                            
0001BD4A                            Obj7A_FaceMain:	; Routine 4
0001BD4A 7000                       		moveq	#0,d0
0001BD4C 7201                       		moveq	#1,d1
0001BD4E 2268 0034                  		movea.l	$34(a0),a1
0001BD52 1029 0025                  		move.b	ob2ndRout(a1),d0
0001BD56 0C00 0006                  		cmpi.b	#6,d0
0001BD5A 6B00                       		bmi.s	loc_18C06
0001BD5C 720A                       		moveq	#$A,d1
0001BD5E 6000                       		bra.s	loc_18C1A
0001BD60                            ; ===========================================================================
0001BD60                            
0001BD60                            loc_18C06:
0001BD60 4A29 0020                  		tst.b	obColType(a1)
0001BD64 6600                       		bne.s	loc_18C10
0001BD66 7205                       		moveq	#5,d1
0001BD68 6000                       		bra.s	loc_18C1A
0001BD6A                            ; ===========================================================================
0001BD6A                            
0001BD6A                            loc_18C10:
0001BD6A 0C38 0004 D024             		cmpi.b	#4,(v_player+obRoutine).w
0001BD70 6500                       		bcs.s	loc_18C1A
0001BD72 7204                       		moveq	#4,d1
0001BD74                            
0001BD74                            loc_18C1A:
0001BD74 1141 001C                  		move.b	d1,obAnim(a0)
0001BD78 0C00 000A                  		cmpi.b	#$A,d0
0001BD7C 6600                       		bne.s	loc_18C32
0001BD7E 117C 0006 001C             		move.b	#6,obAnim(a0)
0001BD84 4A28 0001                  		tst.b	obRender(a0)
0001BD88 6A00 FC74                  		bpl.w	Obj7A_Delete
0001BD8C                            
0001BD8C                            loc_18C32:
0001BD8C 6000                       		bra.s	loc_18C6C
0001BD8E                            ; ===========================================================================
0001BD8E                            
0001BD8E                            Obj7A_FlameMain:; Routine 6
0001BD8E 117C 0008 001C             		move.b	#8,obAnim(a0)
0001BD94 2268 0034                  		movea.l	$34(a0),a1
0001BD98 0C29 000A 0025             		cmpi.b	#$A,ob2ndRout(a1)
0001BD9E 6600                       		bne.s	loc_18C56
0001BDA0 4A28 0001                  		tst.b	obRender(a0)
0001BDA4 6A00 FC58                  		bpl.w	Obj7A_Delete
0001BDA8 117C 000B 001C             		move.b	#$B,obAnim(a0)
0001BDAE 6000                       		bra.s	loc_18C6C
0001BDB0                            ; ===========================================================================
0001BDB0                            
0001BDB0                            loc_18C56:
0001BDB0 0C29 0008 0025             		cmpi.b	#8,ob2ndRout(a1)
0001BDB6 6E00                       		bgt.s	loc_18C6C
0001BDB8 0C29 0004 0025             		cmpi.b	#4,ob2ndRout(a1)
0001BDBE 6D00                       		blt.s	loc_18C6C
0001BDC0 117C 0007 001C             		move.b	#7,obAnim(a0)
0001BDC6                            
0001BDC6                            loc_18C6C:
0001BDC6 43F9 0001 ADD2             		lea	(Ani_Eggman).l,a1
0001BDCC 4EB9 0000 CA28             		jsr	(AnimateSprite).l
0001BDD2                            
0001BDD2                            loc_18C78:
0001BDD2 2268 0034                  		movea.l	$34(a0),a1
0001BDD6 3169 0008 0008             		move.w	obX(a1),obX(a0)
0001BDDC 3169 000C 000C             		move.w	obY(a1),obY(a0)
0001BDE2 1169 0022 0022             		move.b	obStatus(a1),obStatus(a0)
0001BDE8 7003                       		moveq	#3,d0
0001BDEA C028 0022                  		and.b	obStatus(a0),d0
0001BDEE 0228 00FC 0001             		andi.b	#$FC,obRender(a0)
0001BDF4 8128 0001                  		or.b	d0,obRender(a0)
0001BDF8 4EF9 0000 F97C             		jmp	(DisplaySprite).l
0001BDFE                            ; ===========================================================================
0001BDFE                            
0001BDFE                            Obj7A_TubeMain:	; Routine 8
0001BDFE 2268 0034                  		movea.l	$34(a0),a1
0001BE02 0C29 000A 0025             		cmpi.b	#$A,ob2ndRout(a1)
0001BE08 6600                       		bne.s	loc_18CB8
0001BE0A 4A28 0001                  		tst.b	obRender(a0)
0001BE0E 6A00 FBEE                  		bpl.w	Obj7A_Delete
0001BE12                            
0001BE12                            loc_18CB8:
0001BE12 217C 0001 AF12 0004        		move.l	#Map_BossItems,obMap(a0)
0001BE1A 317C 246C 0002             		move.w	#$246C,obGfx(a0)
0001BE20 117C 0003 001A             		move.b	#3,obFrame(a0)
0001BE26 60AA                       		bra.s	loc_18C78
0001BE26 60AA                       		bra.s	loc_18C78
0001BE28                            		include	"_incObj\7B SLZ Boss Spikeball.asm"
0001BE28                            ; ---------------------------------------------------------------------------
0001BE28                            ; Object 7B - exploding	spikeys	that Eggman drops (SLZ)
0001BE28                            ; ---------------------------------------------------------------------------
0001BE28                            
0001BE28                            BossSpikeball:
0001BE28 7000                       		moveq	#0,d0
0001BE2A 1028 0024                  		move.b	obRoutine(a0),d0
0001BE2E 303B 0000                  		move.w	Obj7B_Index(pc,d0.w),d0
0001BE32 4EBB 0000                  		jsr	Obj7B_Index(pc,d0.w)
0001BE36 3028 0030                  		move.w	$30(a0),d0
0001BE3A 0240 FF80                  		andi.w	#$FF80,d0
0001BE3E 3238 F700                  		move.w	(v_screenposx).w,d1
0001BE42 0441 0080                  		subi.w	#$80,d1
0001BE46 0241 FF80                  		andi.w	#$FF80,d1
0001BE4A 9041                       		sub.w	d1,d0
0001BE4C 6B00 FBB0                  		bmi.w	Obj7A_Delete
0001BE50 0C40 0280                  		cmpi.w	#$280,d0
0001BE54 6200 FBA8                  		bhi.w	Obj7A_Delete
0001BE58 4EF9 0000 F97C             		jmp	(DisplaySprite).l
0001BE5E                            ; ===========================================================================
0001BE5E 0000                       Obj7B_Index:	dc.w Obj7B_Main-Obj7B_Index
0001BE60 0000                       		dc.w Obj7B_Fall-Obj7B_Index
0001BE62 0000                       		dc.w loc_18DC6-Obj7B_Index
0001BE64 0000                       		dc.w loc_18EAA-Obj7B_Index
0001BE66 0000                       		dc.w Obj7B_Explode-Obj7B_Index
0001BE68 0000                       		dc.w Obj7B_MoveFrag-Obj7B_Index
0001BE6A                            ; ===========================================================================
0001BE6A                            
0001BE6A                            Obj7B_Main:	; Routine 0
0001BE6A 217C 0001 3DF0 0004        		move.l	#Map_SSawBall,obMap(a0)
0001BE72 317C 0518 0002             		move.w	#$518,obGfx(a0)
0001BE78 117C 0001 001A             		move.b	#1,obFrame(a0)
0001BE7E 0028 0004 0001             		ori.b	#4,obRender(a0)
0001BE84 317C 0200 0018             		move.w	#$200,obPriority(a0)
0001BE8A 117C 008B 0020             		move.b	#$8B,obColType(a0)
0001BE90 117C 000C 0014             		move.b	#$C,obActWid(a0)
0001BE96 2268 003C                  		movea.l	$3C(a0),a1
0001BE9A 3169 0008 0030             		move.w	obX(a1),$30(a0)
0001BEA0 3169 000C 0034             		move.w	obY(a1),$34(a0)
0001BEA6 08E8 0000 0022             		bset	#0,obStatus(a0)
0001BEAC 3028 0008                  		move.w	obX(a0),d0
0001BEB0 B069 0008                  		cmp.w	obX(a1),d0
0001BEB4 6E00                       		bgt.s	loc_18D68
0001BEB6 08A8 0000 0022             		bclr	#0,obStatus(a0)
0001BEBC 117C 0002 003A             		move.b	#2,$3A(a0)
0001BEC2                            
0001BEC2                            loc_18D68:
0001BEC2 5428 0024                  		addq.b	#2,obRoutine(a0)
0001BEC6                            
0001BEC6                            Obj7B_Fall:	; Routine 2
0001BEC6 4EB9 0000 F930             		jsr	(ObjectFall).l
0001BECC 2268 003C                  		movea.l	$3C(a0),a1
0001BED0 45F9 0000 0000             		lea	(word_19018).l,a2
0001BED6 7000                       		moveq	#0,d0
0001BED8 1029 001A                  		move.b	obFrame(a1),d0
0001BEDC 3228 0008                  		move.w	8(a0),d1
0001BEE0 9268 0030                  		sub.w	$30(a0),d1
0001BEE4 6400                       		bcc.s	loc_18D8E
0001BEE6 5440                       		addq.w	#2,d0
0001BEE8                            
0001BEE8                            loc_18D8E:
0001BEE8 D040                       		add.w	d0,d0
0001BEEA 3228 0034                  		move.w	$34(a0),d1
0001BEEE D272 0000                  		add.w	(a2,d0.w),d1
0001BEF2 B268 000C                  		cmp.w	obY(a0),d1
0001BEF6 6E00                       		bgt.s	locret_18DC4
0001BEF8 2268 003C                  		movea.l	$3C(a0),a1
0001BEFC 7202                       		moveq	#2,d1
0001BEFE 0828 0000 0022             		btst	#0,obStatus(a0)
0001BF04 6700                       		beq.s	loc_18DAE
0001BF06 7200                       		moveq	#0,d1
0001BF08                            
0001BF08                            loc_18DAE:
0001BF08 317C 00F0 0028             		move.w	#$F0,obSubtype(a0)
0001BF0E 117C 000A 001F             		move.b	#10,obDelayAni(a0)	; set frame duration to	10 frames
0001BF14 1168 001F 001E             		move.b	obDelayAni(a0),obTimeFrame(a0)
0001BF1A 6000 0000                  		bra.w	loc_18FA2
0001BF1E                            ; ===========================================================================
0001BF1E                            
0001BF1E                            locret_18DC4:
0001BF1E 4E75                       		rts	
0001BF20                            ; ===========================================================================
0001BF20                            
0001BF20                            loc_18DC6:	; Routine 4
0001BF20 2268 003C                  		movea.l	$3C(a0),a1
0001BF24 7000                       		moveq	#0,d0
0001BF26 1028 003A                  		move.b	$3A(a0),d0
0001BF2A 9029 003A                  		sub.b	$3A(a1),d0
0001BF2E 6700                       		beq.s	loc_18E2A
0001BF30 6400                       		bcc.s	loc_18DDA
0001BF32 4400                       		neg.b	d0
0001BF34                            
0001BF34                            loc_18DDA:
0001BF34 323C F7E8                  		move.w	#-$818,d1
0001BF38 343C FEEC                  		move.w	#-$114,d2
0001BF3C 0C00 0001                  		cmpi.b	#1,d0
0001BF40 6700                       		beq.s	loc_18E00
0001BF42 323C F6A0                  		move.w	#-$960,d1
0001BF46 343C FF0C                  		move.w	#-$F4,d2
0001BF4A 0C69 09C0 0038             		cmpi.w	#$9C0,$38(a1)
0001BF50 6D00                       		blt.s	loc_18E00
0001BF52 323C F5E0                  		move.w	#-$A20,d1
0001BF56 343C FF80                  		move.w	#-$80,d2
0001BF5A                            
0001BF5A                            loc_18E00:
0001BF5A 3141 0012                  		move.w	d1,obVelY(a0)
0001BF5E 3142 0010                  		move.w	d2,obVelX(a0)
0001BF62 3028 0008                  		move.w	obX(a0),d0
0001BF66 9068 0030                  		sub.w	$30(a0),d0
0001BF6A 6400                       		bcc.s	loc_18E16
0001BF6C 4468 0010                  		neg.w	obVelX(a0)
0001BF70                            
0001BF70                            loc_18E16:
0001BF70 117C 0001 001A             		move.b	#1,obFrame(a0)
0001BF76 317C 0020 0028             		move.w	#$20,obSubtype(a0)
0001BF7C 5428 0024                  		addq.b	#2,obRoutine(a0)
0001BF80 6000 0000                  		bra.w	loc_18EAA
0001BF84                            ; ===========================================================================
0001BF84                            
0001BF84                            loc_18E2A:
0001BF84 45F9 0000 0000             		lea	(word_19018).l,a2
0001BF8A 7000                       		moveq	#0,d0
0001BF8C 1029 001A                  		move.b	obFrame(a1),d0
0001BF90 343C 0028                  		move.w	#$28,d2
0001BF94 3228 0008                  		move.w	obX(a0),d1
0001BF98 9268 0030                  		sub.w	$30(a0),d1
0001BF9C 6400                       		bcc.s	loc_18E48
0001BF9E 4442                       		neg.w	d2
0001BFA0 5440                       		addq.w	#2,d0
0001BFA2                            
0001BFA2                            loc_18E48:
0001BFA2 D040                       		add.w	d0,d0
0001BFA4 3228 0034                  		move.w	$34(a0),d1
0001BFA8 D272 0000                  		add.w	(a2,d0.w),d1
0001BFAC 3141 000C                  		move.w	d1,obY(a0)
0001BFB0 D468 0030                  		add.w	$30(a0),d2
0001BFB4 3142 0008                  		move.w	d2,obX(a0)
0001BFB8 4268 000E                  		clr.w	obY+2(a0)
0001BFBC 4268 000A                  		clr.w	obX+2(a0)
0001BFC0 5368 0028                  		subq.w	#1,obSubtype(a0)
0001BFC4 6600                       		bne.s	loc_18E7A
0001BFC6 317C 0020 0028             		move.w	#$20,obSubtype(a0)
0001BFCC 117C 0008 0024             		move.b	#8,obRoutine(a0)
0001BFD2 4E75                       		rts	
0001BFD4                            ; ===========================================================================
0001BFD4                            
0001BFD4                            loc_18E7A:
0001BFD4 0C68 0078 0028             		cmpi.w	#$78,obSubtype(a0)
0001BFDA 6600                       		bne.s	loc_18E88
0001BFDC 117C 0005 001F             		move.b	#5,obDelayAni(a0)
0001BFE2                            
0001BFE2                            loc_18E88:
0001BFE2 0C68 003C 0028             		cmpi.w	#$3C,obSubtype(a0)
0001BFE8 6600                       		bne.s	loc_18E96
0001BFEA 117C 0002 001F             		move.b	#2,obDelayAni(a0)
0001BFF0                            
0001BFF0                            loc_18E96:
0001BFF0 5328 001E                  		subq.b	#1,obTimeFrame(a0)
0001BFF4 6E00                       		bgt.s	locret_18EA8
0001BFF6 0868 0000 001A             		bchg	#0,obFrame(a0)
0001BFFC 1168 001F 001E             		move.b	obDelayAni(a0),obTimeFrame(a0)
0001C002                            
0001C002                            locret_18EA8:
0001C002 4E75                       		rts	
0001C004                            ; ===========================================================================
0001C004                            
0001C004                            loc_18EAA:	; Routine 6
0001C004 43F8 D040                  		lea	(v_objspace+$40).w,a1
0001C008 707A                       		moveq	#id_BossStarLight,d0
0001C00A 7240                       		moveq	#$40,d1
0001C00C 743E                       		moveq	#$3E,d2
0001C00E                            
0001C00E                            loc_18EB4:
0001C00E B011                       		cmp.b	(a1),d0
0001C010 6700                       		beq.s	loc_18EC0
0001C012 D2C1                       		adda.w	d1,a1
0001C014 51CA FFF8                  		dbf	d2,loc_18EB4
0001C018                            
0001C018 6000                       		bra.s	loc_18F38
0001C01A                            ; ===========================================================================
0001C01A                            
0001C01A                            loc_18EC0:
0001C01A 3029 0008                  		move.w	obX(a1),d0
0001C01E 3229 000C                  		move.w	obY(a1),d1
0001C022 3428 0008                  		move.w	obX(a0),d2
0001C026 3628 000C                  		move.w	obY(a0),d3
0001C02A 45FA 0000                  		lea	byte_19022(pc),a2
0001C02E 47FA 0000                  		lea	byte_19026(pc),a3
0001C032 181A                       		move.b	(a2)+,d4
0001C034 4884                       		ext.w	d4
0001C036 D044                       		add.w	d4,d0
0001C038 181B                       		move.b	(a3)+,d4
0001C03A 4884                       		ext.w	d4
0001C03C D444                       		add.w	d4,d2
0001C03E B440                       		cmp.w	d0,d2
0001C040 6500                       		bcs.s	loc_18F38
0001C042 181A                       		move.b	(a2)+,d4
0001C044 4884                       		ext.w	d4
0001C046 D044                       		add.w	d4,d0
0001C048 181B                       		move.b	(a3)+,d4
0001C04A 4884                       		ext.w	d4
0001C04C D444                       		add.w	d4,d2
0001C04E B042                       		cmp.w	d2,d0
0001C050 6500                       		bcs.s	loc_18F38
0001C052 181A                       		move.b	(a2)+,d4
0001C054 4884                       		ext.w	d4
0001C056 D244                       		add.w	d4,d1
0001C058 181B                       		move.b	(a3)+,d4
0001C05A 4884                       		ext.w	d4
0001C05C D644                       		add.w	d4,d3
0001C05E B641                       		cmp.w	d1,d3
0001C060 6500                       		bcs.s	loc_18F38
0001C062 181A                       		move.b	(a2)+,d4
0001C064 4884                       		ext.w	d4
0001C066 D244                       		add.w	d4,d1
0001C068 181B                       		move.b	(a3)+,d4
0001C06A 4884                       		ext.w	d4
0001C06C D644                       		add.w	d4,d3
0001C06E B243                       		cmp.w	d3,d1
0001C070 6500                       		bcs.s	loc_18F38
0001C072 5428 0024                  		addq.b	#2,obRoutine(a0)
0001C076 4268 0028                  		clr.w	obSubtype(a0)
0001C07A 4229 0020                  		clr.b	obColType(a1)
0001C07E 5329 0021                  		subq.b	#1,obColProp(a1)
0001C082 6600                       		bne.s	loc_18F38
0001C084 08E9 0007 0022             		bset	#7,obStatus(a1)
0001C08A 4268 0010                  		clr.w	obVelX(a0)
0001C08E 4268 0012                  		clr.w	obVelY(a0)
0001C092                            
0001C092                            loc_18F38:
0001C092 4A68 0012                  		tst.w	obVelY(a0)
0001C096 6A00                       		bpl.s	loc_18F5C
0001C098 4EB9 0000 F930             		jsr	(ObjectFall).l
0001C09E 3028 0034                  		move.w	$34(a0),d0
0001C0A2 0440 002F                  		subi.w	#$2F,d0
0001C0A6 B068 000C                  		cmp.w	obY(a0),d0
0001C0AA 6E00                       		bgt.s	loc_18F58
0001C0AC 4EB9 0000 F930             		jsr	(ObjectFall).l
0001C0B2                            
0001C0B2                            loc_18F58:
0001C0B2 6000 FF20                  		bra.w	loc_18E7A
0001C0B6                            ; ===========================================================================
0001C0B6                            
0001C0B6                            loc_18F5C:
0001C0B6 4EB9 0000 F930             		jsr	(ObjectFall).l
0001C0BC 2268 003C                  		movea.l	$3C(a0),a1
0001C0C0 45F9 0000 0000             		lea	(word_19018).l,a2
0001C0C6 7000                       		moveq	#0,d0
0001C0C8 1029 001A                  		move.b	obFrame(a1),d0
0001C0CC 3228 0008                  		move.w	obX(a0),d1
0001C0D0 9268 0030                  		sub.w	$30(a0),d1
0001C0D4 6400                       		bcc.s	loc_18F7E
0001C0D6 5440                       		addq.w	#2,d0
0001C0D8                            
0001C0D8                            loc_18F7E:
0001C0D8 D040                       		add.w	d0,d0
0001C0DA 3228 0034                  		move.w	$34(a0),d1
0001C0DE D272 0000                  		add.w	(a2,d0.w),d1
0001C0E2 B268 000C                  		cmp.w	obY(a0),d1
0001C0E6 6ECA                       		bgt.s	loc_18F58
0001C0E8 2268 003C                  		movea.l	$3C(a0),a1
0001C0EC 7202                       		moveq	#2,d1
0001C0EE 4A68 0010                  		tst.w	obVelX(a0)
0001C0F2 6B00                       		bmi.s	loc_18F9C
0001C0F4 7200                       		moveq	#0,d1
0001C0F6                            
0001C0F6                            loc_18F9C:
0001C0F6 317C 0000 0028             		move.w	#0,obSubtype(a0)
0001C0FC                            
0001C0FC                            loc_18FA2:
0001C0FC 1341 003A                  		move.b	d1,$3A(a1)
0001C100 1141 003A                  		move.b	d1,$3A(a0)
0001C104 B229 001A                  		cmp.b	obFrame(a1),d1
0001C108 6700                       		beq.s	loc_19008
0001C10A 08A9 0003 0022             		bclr	#3,obStatus(a1)
0001C110 6700                       		beq.s	loc_19008
0001C112 4229 0025                  		clr.b	ob2ndRout(a1)
0001C116 137C 0002 0024             		move.b	#2,obRoutine(a1)
0001C11C 45F8 D000                  		lea	(v_objspace).w,a2
0001C120 3568 0012 0012             		move.w	obVelY(a0),obVelY(a2)
0001C126 446A 0012                  		neg.w	obVelY(a2)
0001C12A 0C29 0001 001A             		cmpi.b	#1,obFrame(a1)
0001C130 6600                       		bne.s	loc_18FDC
0001C132 E0EA 0012                  		asr	obVelY(a2)
0001C136                            
0001C136                            loc_18FDC:
0001C136 08EA 0001 0022             		bset	#1,obStatus(a2)
0001C13C 08AA 0003 0022             		bclr	#3,obStatus(a2)
0001C142 422A 003C                  		clr.b	$3C(a2)
0001C146 2F08                       		move.l	a0,-(sp)
0001C148 41D2                       		lea	(a2),a0
0001C14A 4EB9 0001 5FE6             		jsr	(Sonic_ChkRoll).l
0001C150 205F                       		movea.l	(sp)+,a0
0001C152 157C 0002 0024             		move.b	#2,obRoutine(a2)
0001C162                            
0001C162                            loc_19008:
0001C162 4268 0010                  		clr.w	obVelX(a0)
0001C166 4268 0012                  		clr.w	obVelY(a0)
0001C16A 5428 0024                  		addq.b	#2,obRoutine(a0)
0001C16E 6000 FE64                  		bra.w	loc_18E7A
0001C172                            ; ===========================================================================
0001C172 FFF8 FFE4 FFD1 FFE4 FFF8   word_19018:	dc.w -8, -$1C, -$2F, -$1C, -8
0001C17C                            		even
0001C17C E830 E830                  byte_19022:	dc.b $E8, $30, $E8, $30
0001C180                            		even
0001C180 08F0 08F0                  byte_19026:	dc.b 8,	$F0, 8,	$F0
0001C184                            		even
0001C184                            ; ===========================================================================
0001C184                            
0001C184                            Obj7B_Explode:	; Routine 8
0001C184 10BC 003F                  		move.b	#id_ExplosionBomb,(a0)
0001C188 4228 0024                  		clr.b	obRoutine(a0)
0001C18C 0C68 0020 0028             		cmpi.w	#$20,obSubtype(a0)
0001C192 6700                       		beq.s	Obj7B_MakeFrag
0001C194 4E75                       		rts	
0001C196                            ; ===========================================================================
0001C196                            
0001C196                            Obj7B_MakeFrag:
0001C196 3168 0034 000C             		move.w	$34(a0),obY(a0)
0001C19C 7203                       		moveq	#3,d1
0001C19E 45FA 0000                  		lea	Obj7B_FragSpeed(pc),a2
0001C1A2                            
0001C1A2                            Obj7B_Loop:
0001C1A2 4EB9 0000 FE08             		jsr	(FindFreeObj).l
0001C1A8 6600                       		bne.s	loc_1909A
0001C1AA 12BC 007B                  		move.b	#id_BossSpikeball,(a1) ; load shrapnel object
0001C1AE 137C 000A 0024             		move.b	#$A,obRoutine(a1)
0001C1B4 237C 0000 0000 0004        		move.l	#Map_BSBall,obMap(a1)
0001C1BC 337C 0180 0018             		move.w	#$180,obPriority(a1)
0001C1C2 337C 0518 0002             		move.w	#$518,obGfx(a1)
0001C1C8 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001C1CE 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001C1D4 335A 0010                  		move.w	(a2)+,obVelX(a1)
0001C1D8 335A 0012                  		move.w	(a2)+,obVelY(a1)
0001C1DC 137C 0098 0020             		move.b	#$98,obColType(a1)
0001C1E2 0029 0004 0001             		ori.b	#4,obRender(a1)
0001C1E8 08E9 0007 0001             		bset	#7,obRender(a1)
0001C1EE 137C 000C 0014             		move.b	#$C,obActWid(a1)
0001C1F4                            
0001C1F4                            loc_1909A:
0001C1F4 51C9 FFAC                  		dbf	d1,Obj7B_Loop	; repeat sequence 3 more times
0001C1F8                            
0001C1F8 4E75                       		rts	
0001C1FA                            ; ===========================================================================
0001C1FA FF00 FCC0                  Obj7B_FragSpeed:dc.w -$100, -$340	; horizontal, vertical
0001C1FE FF60 FDC0                  		dc.w -$A0, -$240
0001C202 0100 FCC0                  		dc.w $100, -$340
0001C206 00A0 FDC0                  		dc.w $A0, -$240
0001C20A                            ; ===========================================================================
0001C20A                            
0001C20A                            Obj7B_MoveFrag:	; Routine $A
0001C20A 4EB9 0000 F968             		jsr	(SpeedToPos).l
0001C210 3168 0008 0030             		move.w	obX(a0),$30(a0)
0001C216 3168 000C 0034             		move.w	obY(a0),$34(a0)
0001C21C 0668 0018 0012             		addi.w	#$18,obVelY(a0)
0001C222 7004                       		moveq	#4,d0
0001C224 C078 FE0E                  		and.w	(v_vbla_word).w,d0
0001C228 E448                       		lsr.w	#2,d0
0001C22A 1140 001A                  		move.b	d0,obFrame(a0)
0001C22E 4A28 0001                  		tst.b	1(a0)
0001C232 6A00 F7CA                  		bpl.w	Obj7A_Delete
0001C236 4E75                       		rts	
0001C236 4E75                       		rts	
0001C238                            Map_BSBall:	include	"_maps\SLZ Boss Spikeball.asm"
0001C238                            ; ---------------------------------------------------------------------------
0001C238                            ; Sprite mappings - exploding spikeys that the SLZ boss	drops
0001C238                            ; ---------------------------------------------------------------------------
0001C238                            Map_BSBall_internal:
0001C238 0000                       		dc.w @fireball1-Map_BSBall_internal
0001C23A 0000                       		dc.w @fireball2-Map_BSBall_internal
0001C23C 01                         @fireball1:	dc.b 1
0001C23D FC00 0027 FC               		dc.b $FC, 0, 0,	$27, $FC
0001C242 01                         @fireball2:	dc.b 1
0001C243 FC00 0028 FC               		dc.b $FC, 0, 0,	$28, $FC
0001C248                            		even
0001C248                            		even
0001C248                            		include	"_incObj\75 Boss - Spring Yard.asm"
0001C248                            ; ---------------------------------------------------------------------------
0001C248                            ; Object 75 - Eggman (SYZ)
0001C248                            ; ---------------------------------------------------------------------------
0001C248                            
0001C248                            BossSpringYard:
0001C248 7000                       		moveq	#0,d0
0001C24A 1028 0024                  		move.b	obRoutine(a0),d0
0001C24E 323B 0000                  		move.w	Obj75_Index(pc,d0.w),d1
0001C252 4EFB 1000                  		jmp	Obj75_Index(pc,d1.w)
0001C256                            ; ===========================================================================
0001C256 0000                       Obj75_Index:	dc.w Obj75_Main-Obj75_Index
0001C258 0000                       		dc.w Obj75_ShipMain-Obj75_Index
0001C25A 0000                       		dc.w Obj75_FaceMain-Obj75_Index
0001C25C 0000                       		dc.w Obj75_FlameMain-Obj75_Index
0001C25E 0000                       		dc.w Obj75_SpikeMain-Obj75_Index
0001C260                            
0001C260 0200 0280                  Obj75_ObjData:	dc.b 2,	0, $02, $80		; routine number, animation, priority (high and low bytes)
0001C264 0401 0280                  		dc.b 4,	1, $02, $80
0001C268 0607 0280                  		dc.b 6,	7, $02, $80
0001C26C 0800 0280                  		dc.b 8,	0, $02, $80
0001C270                            ; ===========================================================================
0001C270                            
0001C270                            Obj75_Main:	; Routine 0
0001C270 317C 2DB0 0008             		move.w	#$2DB0,obX(a0)
0001C276 317C 04DA 000C             		move.w	#$4DA,obY(a0)
0001C27C 3168 0008 0030             		move.w	obX(a0),$30(a0)
0001C282 3168 000C 0038             		move.w	obY(a0),$38(a0)
0001C288 117C 000F 0020             		move.b	#$F,obColType(a0)
0001C28E 117C 0008 0021             		move.b	#8,obColProp(a0) ; set number of hits to 8
0001C294 45FA FFCA                  		lea	Obj75_ObjData(pc),a2
0001C298 2248                       		movea.l	a0,a1
0001C29A 7203                       		moveq	#3,d1
0001C29C 6000                       		bra.s	Obj75_LoadBoss
0001C29E                            ; ===========================================================================
0001C29E                            
0001C29E                            Obj75_Loop:
0001C29E 4EB9 0000 FE1E             		jsr	(FindNextFreeObj).l
0001C2A4 6600                       		bne.s	Obj75_ShipMain
0001C2A6 12BC 0075                  		move.b	#id_BossSpringYard,(a1)
0001C2AA 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001C2B0 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001C2B6                            
0001C2B6                            Obj75_LoadBoss:
0001C2B6 08A8 0000 0022             		bclr	#0,obStatus(a0)
0001C2BC 4229 0025                  		clr.b	ob2ndRout(a1)
0001C2C0 135A 0024                  		move.b	(a2)+,obRoutine(a1)
0001C2C4 135A 001C                  		move.b	(a2)+,obAnim(a1)
0001C2C8 335A 0018                  		move.w	(a2)+,obPriority(a1)
0001C2CC 237C 0001 AE22 0004        		move.l	#Map_Eggman,obMap(a1)
0001C2D4 337C 0400 0002             		move.w	#$400,obGfx(a1)
0001C2DA 137C 0004 0001             		move.b	#4,obRender(a1)
0001C2E0 137C 0020 0014             		move.b	#$20,obActWid(a1)
0001C2E6 2348 0034                  		move.l	a0,$34(a1)
0001C2EA 51C9 FFB2                  		dbf	d1,Obj75_Loop	; repeat sequence 3 more times
0001C2EE                            
0001C2EE                            Obj75_ShipMain:	; Routine 2
0001C2EE 7000                       		moveq	#0,d0
0001C2F0 1028 0025                  		move.b	ob2ndRout(a0),d0
0001C2F4 323B 0000                  		move.w	Obj75_ShipIndex(pc,d0.w),d1
0001C2F8 4EBB 1000                  		jsr	Obj75_ShipIndex(pc,d1.w)
0001C2FC 43F9 0001 ADD2             		lea	(Ani_Eggman).l,a1
0001C302 4EB9 0000 CA28             		jsr	(AnimateSprite).l
0001C308 7003                       		moveq	#3,d0
0001C30A C028 0022                  		and.b	obStatus(a0),d0
0001C30E 0228 00FC 0001             		andi.b	#$FC,obRender(a0)
0001C314 8128 0001                  		or.b	d0,obRender(a0)
0001C318 4EF9 0000 F97C             		jmp	(DisplaySprite).l
0001C31E                            ; ===========================================================================
0001C31E 0000 0000                  Obj75_ShipIndex:dc.w loc_191CC-Obj75_ShipIndex,	loc_19270-Obj75_ShipIndex
0001C322 0000 0000                  		dc.w loc_192EC-Obj75_ShipIndex,	loc_19474-Obj75_ShipIndex
0001C326 0000 0000                  		dc.w loc_194AC-Obj75_ShipIndex,	loc_194F2-Obj75_ShipIndex
0001C32A                            ; ===========================================================================
0001C32A                            
0001C32A                            loc_191CC:
0001C32A 317C FF00 0010             		move.w	#-$100,obVelX(a0)
0001C330 0C68 2D38 0030             		cmpi.w	#$2D38,$30(a0)
0001C336 6400                       		bcc.s	loc_191DE
0001C338 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001C33C                            
0001C33C                            loc_191DE:
0001C33C 1028 003F                  		move.b	$3F(a0),d0
0001C340 5428 003F                  		addq.b	#2,$3F(a0)
0001C344 4EB9 0000 3A36             		jsr	(CalcSine).l
0001C34A E440                       		asr.w	#2,d0
0001C34C 3140 0012                  		move.w	d0,obVelY(a0)
0001C350                            
0001C350                            loc_191F2:
0001C350 6100 E66C                  		bsr.w	BossMove
0001C354 3168 0038 000C             		move.w	$38(a0),obY(a0)
0001C35A 3168 0030 0008             		move.w	$30(a0),obX(a0)
0001C360                            
0001C360                            loc_19202:
0001C360 3028 0008                  		move.w	8(a0),d0
0001C364 0440 2C00                  		subi.w	#$2C00,d0
0001C368 EA48                       		lsr.w	#5,d0
0001C36A 1140 0034                  		move.b	d0,$34(a0)
0001C36E 0C28 0006 0025             		cmpi.b	#6,ob2ndRout(a0)
0001C374 6400                       		bcc.s	locret_19256
0001C376 4A28 0022                  		tst.b	obStatus(a0)
0001C37A 6B00                       		bmi.s	loc_19258
0001C37C 4A28 0020                  		tst.b	obColType(a0)
0001C380 6600                       		bne.s	locret_19256
0001C382 4A28 003E                  		tst.b	$3E(a0)
0001C386 6600                       		bne.s	loc_1923A
0001C388 117C 0020 003E             		move.b	#$20,$3E(a0)
0001C398                            
0001C398                            loc_1923A:
0001C398 43F8 FB22                  		lea	(v_pal_dry+$22).w,a1
0001C39C 7000                       		moveq	#0,d0
0001C39E 4A51                       		tst.w	(a1)
0001C3A0 6600                       		bne.s	loc_19248
0001C3A2 303C 0EEE                  		move.w	#cWhite,d0
0001C3A6                            
0001C3A6                            loc_19248:
0001C3A6 3280                       		move.w	d0,(a1)
0001C3A8 5328 003E                  		subq.b	#1,$3E(a0)
0001C3AC 6600                       		bne.s	locret_19256
0001C3AE 117C 000F 0020             		move.b	#$F,obColType(a0)
0001C3B4                            
0001C3B4                            locret_19256:
0001C3B4 4E75                       		rts	
0001C3B6                            ; ===========================================================================
0001C3B6                            
0001C3B6                            loc_19258:
0001C3B6 7064                       		moveq	#100,d0
0001C3B8 6100 0000                  		bsr.w	AddPoints
0001C3BC 117C 0006 0025             		move.b	#6,ob2ndRout(a0)
0001C3C2 317C 00B4 003C             		move.w	#$B4,$3C(a0)
0001C3C8 4268 0010                  		clr.w	obVelX(a0)
0001C3CC 4E75                       		rts	
0001C3CE                            ; ===========================================================================
0001C3CE                            
0001C3CE                            loc_19270:
0001C3CE 3028 0030                  		move.w	$30(a0),d0
0001C3D2 317C 0140 0010             		move.w	#$140,obVelX(a0)
0001C3D8 0828 0000 0022             		btst	#0,obStatus(a0)
0001C3DE 6600                       		bne.s	loc_1928E
0001C3E0 4468 0010                  		neg.w	obVelX(a0)
0001C3E4 0C40 2C08                  		cmpi.w	#$2C08,d0
0001C3E8 6E00                       		bgt.s	loc_1929E
0001C3EA 6000                       		bra.s	loc_19294
0001C3EC                            ; ===========================================================================
0001C3EC                            
0001C3EC                            loc_1928E:
0001C3EC 0C40 2D38                  		cmpi.w	#$2D38,d0
0001C3F0 6D00                       		blt.s	loc_1929E
0001C3F2                            
0001C3F2                            loc_19294:
0001C3F2 0868 0000 0022             		bchg	#0,obStatus(a0)
0001C3F8 4228 003D                  		clr.b	$3D(a0)
0001C3FC                            
0001C3FC                            loc_1929E:
0001C3FC 0440 2C10                  		subi.w	#$2C10,d0
0001C400 0240 001F                  		andi.w	#$1F,d0
0001C404 0440 001F                  		subi.w	#$1F,d0
0001C408 6A00                       		bpl.s	loc_192AE
0001C40A 4440                       		neg.w	d0
0001C40C                            
0001C40C                            loc_192AE:
0001C40C 5340                       		subq.w	#1,d0
0001C40E 6E00                       		bgt.s	loc_192E8
0001C410 4A28 003D                  		tst.b	$3D(a0)
0001C414 6600                       		bne.s	loc_192E8
0001C416 3238 D008                  		move.w	(v_player+obX).w,d1
0001C41A 0441 2C00                  		subi.w	#$2C00,d1
0001C41E EA41                       		asr.w	#5,d1
0001C420 B228 0034                  		cmp.b	$34(a0),d1
0001C424 6600                       		bne.s	loc_192E8
0001C426 7000                       		moveq	#0,d0
0001C428 1028 0034                  		move.b	$34(a0),d0
0001C42C EB40                       		asl.w	#5,d0
0001C42E 0640 2C10                  		addi.w	#$2C10,d0
0001C432 3140 0030                  		move.w	d0,$30(a0)
0001C436 6100 0000                  		bsr.w	Obj75_FindBlocks
0001C43A 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001C43E 4268 0028                  		clr.w	obSubtype(a0)
0001C442 4268 0010                  		clr.w	obVelX(a0)
0001C446                            
0001C446                            loc_192E8:
0001C446 6000 FEF4                  		bra.w	loc_191DE
0001C44A                            ; ===========================================================================
0001C44A                            
0001C44A                            loc_192EC:
0001C44A 7000                       		moveq	#0,d0
0001C44C 1028 0028                  		move.b	obSubtype(a0),d0
0001C450 303B 0000                  		move.w	off_192FA(pc,d0.w),d0
0001C454 4EFB 0000                  		jmp	off_192FA(pc,d0.w)
0001C458                            ; ===========================================================================
0001C458 0000                       off_192FA:	dc.w loc_19302-off_192FA
0001C45A 0000                       		dc.w loc_19348-off_192FA
0001C45C 0000                       		dc.w loc_1938E-off_192FA
0001C45E 0000                       		dc.w loc_193D0-off_192FA
0001C460                            ; ===========================================================================
0001C460                            
0001C460                            loc_19302:
0001C460 317C 0180 0012             		move.w	#$180,obVelY(a0)
0001C466 3028 0038                  		move.w	$38(a0),d0
0001C46A 0C40 0556                  		cmpi.w	#$556,d0
0001C46E 6500                       		bcs.s	loc_19344
0001C470 317C 0556 0038             		move.w	#$556,$38(a0)
0001C476 4268 003C                  		clr.w	$3C(a0)
0001C47A 70FF                       		moveq	#-1,d0
0001C47C 3028 0036                  		move.w	$36(a0),d0
0001C480 6700                       		beq.s	loc_1933C
0001C482 2240                       		movea.l	d0,a1
0001C484 137C 00FF 0029             		move.b	#-1,$29(a1)
0001C48A 117C 00FF 0029             		move.b	#-1,$29(a0)
0001C490 2348 0034                  		move.l	a0,$34(a1)
0001C494 317C 0032 003C             		move.w	#$32,$3C(a0)
0001C49A                            
0001C49A                            loc_1933C:
0001C49A 4268 0012                  		clr.w	obVelY(a0)
0001C49E 5428 0028                  		addq.b	#2,obSubtype(a0)
0001C4A2                            
0001C4A2                            loc_19344:
0001C4A2 6000 FEAC                  		bra.w	loc_191F2
0001C4A6                            ; ===========================================================================
0001C4A6                            
0001C4A6                            loc_19348:
0001C4A6 5368 003C                  		subq.w	#1,$3C(a0)
0001C4AA 6A00                       		bpl.s	loc_19366
0001C4AC 5428 0028                  		addq.b	#2,obSubtype(a0)
0001C4B0 317C F800 0012             		move.w	#-$800,obVelY(a0)
0001C4B6 4A68 0036                  		tst.w	$36(a0)
0001C4BA 6600                       		bne.s	loc_19362
0001C4BC E0E8 0012                  		asr	obVelY(a0)
0001C4C0                            
0001C4C0                            loc_19362:
0001C4C0 7000                       		moveq	#0,d0
0001C4C2 6000                       		bra.s	loc_1937C
0001C4C4                            ; ===========================================================================
0001C4C4                            
0001C4C4                            loc_19366:
0001C4C4 7000                       		moveq	#0,d0
0001C4C6 0C68 001E 003C             		cmpi.w	#$1E,$3C(a0)
0001C4CC 6E00                       		bgt.s	loc_1937C
0001C4CE 7002                       		moveq	#2,d0
0001C4D0 0828 0001 003D             		btst	#1,$3D(a0)
0001C4D6 6700                       		beq.s	loc_1937C
0001C4D8 4440                       		neg.w	d0
0001C4DA                            
0001C4DA                            loc_1937C:
0001C4DA D068 0038                  		add.w	$38(a0),d0
0001C4DE 3140 000C                  		move.w	d0,obY(a0)
0001C4E2 3168 0030 0008             		move.w	$30(a0),obX(a0)
0001C4E8 6000 FE76                  		bra.w	loc_19202
0001C4EC                            ; ===========================================================================
0001C4EC                            
0001C4EC                            loc_1938E:
0001C4EC 303C 04DA                  		move.w	#$4DA,d0
0001C4F0 4A68 0036                  		tst.w	$36(a0)
0001C4F4 6700                       		beq.s	loc_1939C
0001C4F6 0440 0018                  		subi.w	#$18,d0
0001C4FA                            
0001C4FA                            loc_1939C:
0001C4FA B068 0038                  		cmp.w	$38(a0),d0
0001C4FE 6D00                       		blt.s	loc_193BE
0001C500 317C 0008 003C             		move.w	#8,$3C(a0)
0001C506 4A68 0036                  		tst.w	$36(a0)
0001C50A 6700                       		beq.s	loc_193B4
0001C50C 317C 002D 003C             		move.w	#$2D,$3C(a0)
0001C512                            
0001C512                            loc_193B4:
0001C512 5428 0028                  		addq.b	#2,obSubtype(a0)
0001C516 4268 0012                  		clr.w	obVelY(a0)
0001C51A 6000                       		bra.s	loc_193CC
0001C51C                            ; ===========================================================================
0001C51C                            
0001C51C                            loc_193BE:
0001C51C 0C68 FFC0 0012             		cmpi.w	#-$40,obVelY(a0)
0001C522 6C00                       		bge.s	loc_193CC
0001C524 0668 000C 0012             		addi.w	#$C,obVelY(a0)
0001C52A                            
0001C52A                            loc_193CC:
0001C52A 6000 FE24                  		bra.w	loc_191F2
0001C52E                            ; ===========================================================================
0001C52E                            
0001C52E                            loc_193D0:
0001C52E 5368 003C                  		subq.w	#1,$3C(a0)
0001C532 6E00                       		bgt.s	loc_19406
0001C534 6B00                       		bmi.s	loc_193EE
0001C536 70FF                       		moveq	#-1,d0
0001C538 3028 0036                  		move.w	$36(a0),d0
0001C53C 6700                       		beq.s	loc_193E8
0001C53E 2240                       		movea.l	d0,a1
0001C540 137C 000A 0029             		move.b	#$A,$29(a1)
0001C546                            
0001C546                            loc_193E8:
0001C546 4268 0036                  		clr.w	$36(a0)
0001C54A 6000                       		bra.s	loc_19406
0001C54C                            ; ===========================================================================
0001C54C                            
0001C54C                            loc_193EE:
0001C54C 0C68 FFE2 003C             		cmpi.w	#-$1E,$3C(a0)
0001C552 6600                       		bne.s	loc_19406
0001C554 4228 0029                  		clr.b	$29(a0)
0001C558 5528 0025                  		subq.b	#2,ob2ndRout(a0)
0001C55C 117C 00FF 003D             		move.b	#-1,$3D(a0)
0001C562 6000                       		bra.s	loc_19446
0001C564                            ; ===========================================================================
0001C564                            
0001C564                            loc_19406:
0001C564 7001                       		moveq	#1,d0
0001C566 4A68 0036                  		tst.w	$36(a0)
0001C56A 6700                       		beq.s	loc_19410
0001C56C 7002                       		moveq	#2,d0
0001C56E                            
0001C56E                            loc_19410:
0001C56E 0C68 04DA 0038             		cmpi.w	#$4DA,$38(a0)
0001C574 6700                       		beq.s	loc_19424
0001C576 6D00                       		blt.s	loc_1941C
0001C578 4440                       		neg.w	d0
0001C57A                            
0001C57A                            loc_1941C:
0001C57A 4A68 0036                  		tst.w	$36(a0)
0001C57E D168 0038                  		add.w	d0,$38(a0)
0001C582                            
0001C582                            loc_19424:
0001C582 7000                       		moveq	#0,d0
0001C584 4A68 0036                  		tst.w	$36(a0)
0001C588 6700                       		beq.s	loc_19438
0001C58A 7002                       		moveq	#2,d0
0001C58C 0828 0000 003D             		btst	#0,$3D(a0)
0001C592 6700                       		beq.s	loc_19438
0001C594 4440                       		neg.w	d0
0001C596                            
0001C596                            loc_19438:
0001C596 D068 0038                  		add.w	$38(a0),d0
0001C59A 3140 000C                  		move.w	d0,obY(a0)
0001C59E 3168 0030 0008             		move.w	$30(a0),8(a0)
0001C5A4                            
0001C5A4                            loc_19446:
0001C5A4 6000 FDBA                  		bra.w	loc_19202
0001C5A8                            
0001C5A8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C5A8                            
0001C5A8                            
0001C5A8                            Obj75_FindBlocks:
0001C5A8 4268 0036                  		clr.w	$36(a0)
0001C5AC 43F8 D040                  		lea	(v_objspace+$40).w,a1
0001C5B0 703E                       		moveq	#$3E,d0
0001C5B2 7276                       		moveq	#$76,d1
0001C5B4 1428 0034                  		move.b	$34(a0),d2
0001C5B8                            
0001C5B8                            Obj75_FindLoop:
0001C5B8 B211                       		cmp.b	(a1),d1		; is object a SYZ boss block?
0001C5BA 6600                       		bne.s	loc_1946A	; if not, branch
0001C5BC B429 0028                  		cmp.b	obSubtype(a1),d2
0001C5C0 6600                       		bne.s	loc_1946A
0001C5C2 3149 0036                  		move.w	a1,$36(a0)
0001C5C6 6000                       		bra.s	locret_19472
0001C5C8                            ; ===========================================================================
0001C5C8                            
0001C5C8                            loc_1946A:
0001C5C8 43E9 0040                  		lea	$40(a1),a1	; next object RAM entry
0001C5CC 51C8 FFEA                  		dbf	d0,Obj75_FindLoop
0001C5D0                            
0001C5D0                            locret_19472:
0001C5D0 4E75                       		rts	
0001C5D2                            ; End of function Obj75_FindBlocks
0001C5D2                            
0001C5D2                            ; ===========================================================================
0001C5D2                            
0001C5D2                            loc_19474:
0001C5D2 5368 003C                  		subq.w	#1,$3C(a0)
0001C5D6 6B00                       		bmi.s	loc_1947E
0001C5D8 6000 E3A2                  		bra.w	BossDefeated
0001C5DC                            ; ===========================================================================
0001C5DC                            
0001C5DC                            loc_1947E:
0001C5DC 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001C5E0 4268 0012                  		clr.w	obVelY(a0)
0001C5E4 08E8 0000 0022             		bset	#0,obStatus(a0)
0001C5EA 08A8 0007 0022             		bclr	#7,obStatus(a0)
0001C5F0 4268 0010                  		clr.w	obVelX(a0)
0001C5F4 317C FFFF 003C             		move.w	#-1,$3C(a0)
0001C5FA 4A38 F7A7                  		tst.b	(v_bossstatus).w
0001C5FE 6600                       		bne.s	loc_194A8
0001C600 11FC 0001 F7A7             		move.b	#1,(v_bossstatus).w
0001C606                            
0001C606                            loc_194A8:
0001C606 6000 FD58                  		bra.w	loc_19202
0001C60A                            ; ===========================================================================
0001C60A                            
0001C60A                            loc_194AC:
0001C60A 5268 003C                  		addq.w	#1,$3C(a0)
0001C60E 6700                       		beq.s	loc_194BC
0001C610 6A00                       		bpl.s	loc_194C2
0001C612 0668 0018 0012             		addi.w	#$18,obVelY(a0)
0001C618 6000                       		bra.s	loc_194EE
0001C61A                            ; ===========================================================================
0001C61A                            
0001C61A                            loc_194BC:
0001C61A 4268 0012                  		clr.w	obVelY(a0)
0001C61E 6000                       		bra.s	loc_194EE
0001C620                            ; ===========================================================================
0001C620                            
0001C620                            loc_194C2:
0001C620 0C68 0020 003C             		cmpi.w	#$20,$3C(a0)
0001C626 6500                       		bcs.s	loc_194DA
0001C628 6700                       		beq.s	loc_194E0
0001C62A 0C68 002A 003C             		cmpi.w	#$2A,$3C(a0)
0001C630 6500                       		bcs.s	loc_194EE
0001C632 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001C636 6000                       		bra.s	loc_194EE
0001C638                            ; ===========================================================================
0001C638                            
0001C638                            loc_194DA:
0001C638 5168 0012                  		subq.w	#8,obVelY(a0)
0001C63C 6000                       		bra.s	loc_194EE
0001C63E                            ; ===========================================================================
0001C63E                            
0001C63E                            loc_194E0:
0001C63E 4268 0012                  		clr.w    obVelY(a0)
0001C642 4A38 FE2D                          	tst.b     (v_invinc).w
0001C646 6600                               	bne.s   @boss_invinc
0001C648                            
0001C648 1038 F5C6                          	move.b   (v_Saved_music),d0
0001C64C 6000 0000                          	bra.w      @boss_play
0001C650                            
0001C650                            @boss_invinc:
0001C650 103C 0000                          	move.b #bgm_Invincible,d0
0001C654                            
0001C654                            @boss_play:
0001C654 4EB8 124E                          	jsr PlaySound
0001C658                            
0001C658                            loc_194EE:
0001C658 6000 FCF6                  		bra.w	loc_191F2
0001C65C                            ; ===========================================================================
0001C65C                            
0001C65C                            loc_194F2:
0001C65C 317C 0400 0010             		move.w	#$400,obVelX(a0)
0001C662 317C FFC0 0012             		move.w	#-$40,obVelY(a0)
0001C668 0C78 2D40 F72A             		cmpi.w	#$2D40,(v_limitright2).w
0001C66E 6400                       		bcc.s	loc_1950C
0001C670 5478 F72A                  		addq.w	#2,(v_limitright2).w
0001C674 6000                       		bra.s	loc_19512
0001C676                            ; ===========================================================================
0001C676                            
0001C676                            loc_1950C:
0001C676 4A28 0001                  		tst.b	obRender(a0)
0001C67A 6A00                       		bpl.s	Obj75_ShipDelete
0001C67C                            
0001C67C                            loc_19512:
0001C67C 6100 E340                  		bsr.w	BossMove
0001C680 6000 FCBA                  		bra.w	loc_191DE
0001C684                            ; ===========================================================================
0001C684                            
0001C684                            Obj75_ShipDelete:
0001C684 4EF9 0000 F9BC             		jmp	(DeleteObject).l
0001C68A                            ; ===========================================================================
0001C68A                            
0001C68A                            Obj75_FaceMain:	; Routine 4
0001C68A 7201                       		moveq	#1,d1
0001C68C 2268 0034                  		movea.l	$34(a0),a1
0001C690 7000                       		moveq	#0,d0
0001C692 1029 0025                  		move.b	ob2ndRout(a1),d0
0001C696 303B 0000                  		move.w	off_19546(pc,d0.w),d0
0001C69A 4EBB 0000                  		jsr	off_19546(pc,d0.w)
0001C69E 1141 001C                  		move.b	d1,obAnim(a0)
0001C6A2 1010                       		move.b	(a0),d0
0001C6A4 B011                       		cmp.b	(a1),d0
0001C6A6 6600                       		bne.s	Obj75_FaceDelete
0001C6A8 6000                       		bra.s	loc_195BE
0001C6AA                            ; ===========================================================================
0001C6AA                            
0001C6AA                            Obj75_FaceDelete:
0001C6AA 4EF9 0000 F9BC             		jmp	(DeleteObject).l
0001C6B0                            ; ===========================================================================
0001C6B0 0000 0000                  off_19546:	dc.w loc_19574-off_19546, loc_19574-off_19546
0001C6B4 0000 0000                  		dc.w loc_1955A-off_19546, loc_19552-off_19546
0001C6B8 0000 0000                  		dc.w loc_19552-off_19546, loc_19556-off_19546
0001C6BC                            ; ===========================================================================
0001C6BC                            
0001C6BC                            loc_19552:
0001C6BC 720A                       		moveq	#$A,d1
0001C6BE 4E75                       		rts	
0001C6C0                            ; ===========================================================================
0001C6C0                            
0001C6C0                            loc_19556:
0001C6C0 7206                       		moveq	#6,d1
0001C6C2 4E75                       		rts	
0001C6C4                            ; ===========================================================================
0001C6C4                            
0001C6C4                            loc_1955A:
0001C6C4 7000                       		moveq	#0,d0
0001C6C6 1029 0028                  		move.b	obSubtype(a1),d0
0001C6CA 303B 0000                  		move.w	off_19568(pc,d0.w),d0
0001C6CE 4EFB 0000                  		jmp	off_19568(pc,d0.w)
0001C6D2                            ; ===========================================================================
0001C6D2 0000 0000                  off_19568:	dc.w loc_19570-off_19568, loc_19572-off_19568
0001C6D6 0000 0000                  		dc.w loc_19570-off_19568, loc_19570-off_19568
0001C6DA                            ; ===========================================================================
0001C6DA                            
0001C6DA                            loc_19570:
0001C6DA 6000                       		bra.s	loc_19574
0001C6DC                            ; ===========================================================================
0001C6DC                            
0001C6DC                            loc_19572:
0001C6DC 7206                       		moveq	#6,d1
0001C6DE                            
0001C6DE                            loc_19574:
0001C6DE 4A29 0020                  		tst.b	obColType(a1)
0001C6E2 6600                       		bne.s	loc_1957E
0001C6E4 7205                       		moveq	#5,d1
0001C6E6 4E75                       		rts	
0001C6E8                            ; ===========================================================================
0001C6E8                            
0001C6E8                            loc_1957E:
0001C6E8 0C38 0004 D024             		cmpi.b	#4,(v_player+obRoutine).w
0001C6EE 6500                       		bcs.s	locret_19588
0001C6F0 7204                       		moveq	#4,d1
0001C6F2                            
0001C6F2                            locret_19588:
0001C6F2 4E75                       		rts	
0001C6F4                            ; ===========================================================================
0001C6F4                            
0001C6F4                            Obj75_FlameMain:; Routine 6
0001C6F4 117C 0007 001C             		move.b	#7,obAnim(a0)
0001C6FA 2268 0034                  		movea.l	$34(a0),a1
0001C6FE 0C29 000A 0025             		cmpi.b	#$A,ob2ndRout(a1)
0001C704 6600                       		bne.s	loc_195AA
0001C706 117C 000B 001C             		move.b	#$B,obAnim(a0)
0001C70C 4A28 0001                  		tst.b	1(a0)
0001C710 6A00                       		bpl.s	Obj75_FlameDelete
0001C712 6000                       		bra.s	loc_195B6
0001C714                            ; ===========================================================================
0001C714                            
0001C714                            loc_195AA:
0001C714 4A69 0010                  		tst.w	obVelX(a1)
0001C718 6700                       		beq.s	loc_195B6
0001C71A 117C 0008 001C             		move.b	#8,obAnim(a0)
0001C720                            
0001C720                            loc_195B6:
0001C720 6000                       		bra.s	loc_195BE
0001C722                            ; ===========================================================================
0001C722                            
0001C722                            Obj75_FlameDelete:
0001C722 4EF9 0000 F9BC             		jmp	(DeleteObject).l
0001C728                            ; ===========================================================================
0001C728                            
0001C728                            loc_195BE:
0001C728 43F9 0001 ADD2             		lea	(Ani_Eggman).l,a1
0001C72E 4EB9 0000 CA28             		jsr	(AnimateSprite).l
0001C734 2268 0034                  		movea.l	$34(a0),a1
0001C738 3169 0008 0008             		move.w	obX(a1),obX(a0)
0001C73E 3169 000C 000C             		move.w	obY(a1),obY(a0)
0001C744                            
0001C744                            loc_195DA:
0001C744 1169 0022 0022             		move.b	obStatus(a1),obStatus(a0)
0001C74A 7003                       		moveq	#3,d0
0001C74C C028 0022                  		and.b	obStatus(a0),d0
0001C750 0228 00FC 0001             		andi.b	#$FC,obRender(a0)
0001C756 8128 0001                  		or.b	d0,obRender(a0)
0001C75A 4EF9 0000 F97C             		jmp	(DisplaySprite).l
0001C760                            ; ===========================================================================
0001C760                            
0001C760                            Obj75_SpikeMain:; Routine 8
0001C760 217C 0001 AF12 0004        		move.l	#Map_BossItems,obMap(a0)
0001C768 317C 246C 0002             		move.w	#$246C,obGfx(a0)
0001C76E 117C 0005 001A             		move.b	#5,obFrame(a0)
0001C774 2268 0034                  		movea.l	$34(a0),a1
0001C778 0C29 000A 0025             		cmpi.b	#$A,ob2ndRout(a1)
0001C77E 6600                       		bne.s	loc_1961C
0001C780 4A28 0001                  		tst.b	obRender(a0)
0001C784 6A00                       		bpl.s	Obj75_SpikeDelete
0001C786                            
0001C786                            loc_1961C:
0001C786 3169 0008 0008             		move.w	obX(a1),obX(a0)
0001C78C 3169 000C 000C             		move.w	obY(a1),obY(a0)
0001C792 3028 003C                  		move.w	$3C(a0),d0
0001C796 0C29 0004 0025             		cmpi.b	#4,ob2ndRout(a1)
0001C79C 6600                       		bne.s	loc_19652
0001C79E 0C29 0006 0028             		cmpi.b	#6,obSubtype(a1)
0001C7A4 6700                       		beq.s	loc_1964C
0001C7A6 4A29 0028                  		tst.b	obSubtype(a1)
0001C7AA 6600                       		bne.s	loc_19658
0001C7AC 0C40 0094                  		cmpi.w	#$94,d0
0001C7B0 6C00                       		bge.s	loc_19658
0001C7B2 5E40                       		addq.w	#7,d0
0001C7B4 6000                       		bra.s	loc_19658
0001C7B6                            ; ===========================================================================
0001C7B6                            
0001C7B6                            loc_1964C:
0001C7B6 4A69 003C                  		tst.w	$3C(a1)
0001C7BA 6A00                       		bpl.s	loc_19658
0001C7BC                            
0001C7BC                            loc_19652:
0001C7BC 4A40                       		tst.w	d0
0001C7BE 6F00                       		ble.s	loc_19658
0001C7C0 5B40                       		subq.w	#5,d0
0001C7C2                            
0001C7C2                            loc_19658:
0001C7C2 3140 003C                  		move.w	d0,$3C(a0)
0001C7C6 E440                       		asr.w	#2,d0
0001C7C8 D168 000C                  		add.w	d0,obY(a0)
0001C7CC 117C 0008 0014             		move.b	#8,obActWid(a0)
0001C7D2 117C 000C 0016             		move.b	#$C,obHeight(a0)
0001C7D8 4228 0020                  		clr.b	obColType(a0)
0001C7DC 2268 0034                  		movea.l	$34(a0),a1
0001C7E0 4A29 0020                  		tst.b	obColType(a1)
0001C7E4 6700                       		beq.s	loc_19688
0001C7E6 4A29 0029                  		tst.b	$29(a1)
0001C7EA 6600                       		bne.s	loc_19688
0001C7EC 117C 0084 0020             		move.b	#$84,obColType(a0)
0001C7F2                            
0001C7F2                            loc_19688:
0001C7F2 6000 FF50                  		bra.w	loc_195DA
0001C7F6                            ; ===========================================================================
0001C7F6                            
0001C7F6                            Obj75_SpikeDelete:
0001C7F6 4EF9 0000 F9BC             		jmp	(DeleteObject).l
0001C7F6 4EF9 0000 F9BC             		jmp	(DeleteObject).l
0001C7FC                            		include	"_incObj\76 SYZ Boss Blocks.asm"
0001C7FC                            ; ---------------------------------------------------------------------------
0001C7FC                            ; Object 76 - blocks that Eggman picks up (SYZ)
0001C7FC                            ; ---------------------------------------------------------------------------
0001C7FC                            
0001C7FC                            BossBlock:
0001C7FC 7000                       		moveq	#0,d0
0001C7FE 1028 0024                  		move.b	obRoutine(a0),d0
0001C802 323B 0000                  		move.w	Obj76_Index(pc,d0.w),d1
0001C806 4EFB 1000                  		jmp	Obj76_Index(pc,d1.w)
0001C80A                            ; ===========================================================================
0001C80A 0000                       Obj76_Index:	dc.w Obj76_Main-Obj76_Index
0001C80C 0000                       		dc.w Obj76_Action-Obj76_Index
0001C80E 0000                       		dc.w loc_19762-Obj76_Index
0001C810                            ; ===========================================================================
0001C810                            
0001C810                            Obj76_Main:	; Routine 0
0001C810 7800                       		moveq	#0,d4
0001C812 3A3C 2C10                  		move.w	#$2C10,d5
0001C816 7C09                       		moveq	#9,d6
0001C818 43D0                       		lea	(a0),a1
0001C81A 6000                       		bra.s	Obj76_MakeBlock
0001C81C                            ; ===========================================================================
0001C81C                            
0001C81C                            Obj76_Loop:
0001C81C 4EB9 0000 FE08             		jsr	(FindFreeObj).l
0001C822 6600                       		bne.s	Obj76_ExitLoop
0001C824                            
0001C824                            Obj76_MakeBlock:
0001C824 12BC 0076                  		move.b	#id_BossBlock,(a1)
0001C828 237C 0000 0000 0004        		move.l	#Map_BossBlock,obMap(a1)
0001C830 337C 4000 0002             		move.w	#$4000,obGfx(a1)
0001C836 137C 0004 0001             		move.b	#4,obRender(a1)
0001C83C 137C 0010 0014             		move.b	#$10,obActWid(a1)
0001C842 137C 0010 0016             		move.b	#$10,obHeight(a1)
0001C848 337C 0180 0018             		move.w	#$180,obPriority(a1)
0001C84E 3345 0008                  		move.w	d5,obX(a1)	; set x-position
0001C852 337C 0582 000C             		move.w	#$582,obY(a1)
0001C858 3344 0028                  		move.w	d4,obSubtype(a1)
0001C85C 0644 0101                  		addi.w	#$101,d4
0001C860 0645 0020                  		addi.w	#$20,d5		; add $20 to next x-position
0001C864 5429 0024                  		addq.b	#2,obRoutine(a1)
0001C868 51CE FFB2                  		dbf	d6,Obj76_Loop	; repeat sequence 9 more times
0001C86C                            
0001C86C                            Obj76_ExitLoop:
0001C86C 4E75                       		rts	
0001C86E                            ; ===========================================================================
0001C86E                            
0001C86E                            Obj76_Action:	; Routine 2
0001C86E 1028 0029                  		move.b	$29(a0),d0
0001C872 B028 0028                  		cmp.b	obSubtype(a0),d0
0001C876 6700                       		beq.s	Obj76_Solid
0001C878 4A00                       		tst.b	d0
0001C87A 6B00                       		bmi.s	loc_19718
0001C87C                            
0001C87C                            loc_19712:
0001C87C 6100 0000                  		bsr.w	Obj76_Break
0001C880 6000                       		bra.s	Obj76_Display
0001C882                            ; ===========================================================================
0001C882                            
0001C882                            loc_19718:
0001C882 2268 0034                  		movea.l	$34(a0),a1
0001C886 4A29 0021                  		tst.b	obColProp(a1)
0001C88A 67F0                       		beq.s	loc_19712
0001C88C 3169 0008 0008             		move.w	obX(a1),obX(a0)
0001C892 3169 000C 000C             		move.w	obY(a1),obY(a0)
0001C898 0668 002C 000C             		addi.w	#$2C,obY(a0)
0001C89E B2C8                       		cmpa.w	a0,a1
0001C8A0 6500                       		bcs.s	Obj76_Display
0001C8A2 3029 0012                  		move.w	obVelY(a1),d0
0001C8A6 48C0                       		ext.l	d0
0001C8A8 E080                       		asr.l	#8,d0
0001C8AA D168 000C                  		add.w	d0,obY(a0)
0001C8AE 6000                       		bra.s	Obj76_Display
0001C8B0                            ; ===========================================================================
0001C8B0                            
0001C8B0                            Obj76_Solid:
0001C8B0 323C 001B                  		move.w	#$1B,d1
0001C8B4 343C 0010                  		move.w	#$10,d2
0001C8B8 363C 0011                  		move.w	#$11,d3
0001C8BC 3828 0008                  		move.w	obX(a0),d4
0001C8C0 4EB9 0001 1D8A             		jsr	(SolidObject).l
0001C8C6                            
0001C8C6                            Obj76_Display:
0001C8C6 4EF9 0000 F97C             		jmp	(DisplaySprite).l
0001C8CC                            ; ===========================================================================
0001C8CC                            
0001C8CC                            loc_19762:	; Routine 4
0001C8CC 4A28 0001                  		tst.b	obRender(a0)
0001C8D0 6A00                       		bpl.s	Obj76_Delete
0001C8D2 4EB9 0000 F930             		jsr	(ObjectFall).l
0001C8D8 4EF9 0000 F97C             		jmp	(DisplaySprite).l
0001C8DE                            ; ===========================================================================
0001C8DE                            
0001C8DE                            Obj76_Delete:
0001C8DE 4EF9 0000 F9BC             		jmp	(DeleteObject).l
0001C8E4                            
0001C8E4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C8E4                            
0001C8E4                            
0001C8E4                            Obj76_Break:
0001C8E4 49FA 0000                  		lea	Obj76_FragSpeed(pc),a4
0001C8E8 4BFA 0000                  		lea	Obj76_FragPos(pc),a5
0001C8EC 7801                       		moveq	#1,d4
0001C8EE 7203                       		moveq	#3,d1
0001C8F0 7438                       		moveq	#$38,d2
0001C8F2 5428 0024                  		addq.b	#2,obRoutine(a0)
0001C8F6 117C 0008 0014             		move.b	#8,obActWid(a0)
0001C8FC 117C 0008 0016             		move.b	#8,obHeight(a0)
0001C902 43D0                       		lea	(a0),a1
0001C904 6000                       		bra.s	Obj76_MakeFrag
0001C906                            ; ===========================================================================
0001C906                            
0001C906                            Obj76_LoopFrag:
0001C906 4EB9 0000 FE1E             		jsr	(FindNextFreeObj).l
0001C90C 6600                       		bne.s	loc_197D4
0001C90E                            
0001C90E                            Obj76_MakeFrag:
0001C90E 45D0                       		lea	(a0),a2
0001C910 47D1                       		lea	(a1),a3
0001C912 7603                       		moveq	#3,d3
0001C914                            
0001C914                            loc_197AA:
0001C914 26DA                       		move.l	(a2)+,(a3)+
0001C916 26DA                       		move.l	(a2)+,(a3)+
0001C918 26DA                       		move.l	(a2)+,(a3)+
0001C91A 26DA                       		move.l	(a2)+,(a3)+
0001C91C 51CB FFF6                  		dbf	d3,loc_197AA
0001C920                            
0001C920 335C 0010                  		move.w	(a4)+,obVelX(a1)
0001C924 335C 0012                  		move.w	(a4)+,obVelY(a1)
0001C928 361D                       		move.w	(a5)+,d3
0001C92A D769 0008                  		add.w	d3,obX(a1)
0001C92E 361D                       		move.w	(a5)+,d3
0001C930 D769 000C                  		add.w	d3,obY(a1)
0001C934 1344 001A                  		move.b	d4,obFrame(a1)
0001C938 5244                       		addq.w	#1,d4
0001C93A 51C9 FFCA                  		dbf	d1,Obj76_LoopFrag ; repeat sequence 3 more times
0001C93E                            
0001C93E                            loc_197D4:
0001C948                            ; End of function Obj76_Break
0001C948                            
0001C948                            ; ===========================================================================
0001C948 FE80 FE00                  Obj76_FragSpeed:dc.w -$180, -$200
0001C94C 0180 FE00                  		dc.w $180, -$200
0001C950 FF00 FF00                  		dc.w -$100, -$100
0001C954 0100 FF00                  		dc.w $100, -$100
0001C958 FFF8 FFF8                  Obj76_FragPos:	dc.w -8, -8
0001C95C 0010 0000                  		dc.w $10, 0
0001C960 0000 0010                  		dc.w 0,	$10
0001C964 0010 0010                  		dc.w $10, $10
0001C964 0010 0010                  		dc.w $10, $10
0001C968                            Map_BossBlock:	include	"_maps\SYZ Boss Blocks.asm"
0001C968                            ; ---------------------------------------------------------------------------
0001C968                            ; Sprite mappings - blocks that	Robotnik picks up (SYZ)
0001C968                            ; ---------------------------------------------------------------------------
0001C968                            Map_BossBlock_internal:
0001C968 0000                       		dc.w @wholeblock-Map_BossBlock_internal
0001C96A 0000                       		dc.w @topleft-Map_BossBlock_internal
0001C96C 0000                       		dc.w @topright-Map_BossBlock_internal
0001C96E 0000                       		dc.w @bottomleft-Map_BossBlock_internal
0001C970 0000                       		dc.w @bottomright-Map_BossBlock_internal
0001C972 02                         @wholeblock:	dc.b 2
0001C973 F00D 0071 F0               		dc.b $F0, $D, 0, $71, $F0
0001C978 000D 0079 F0               		dc.b 0,	$D, 0, $79, $F0
0001C97D 00                         		dc.b 0
0001C97E 01                         @topleft:	dc.b 1
0001C97F F805 0071 F8               		dc.b $F8, 5, 0,	$71, $F8
0001C984 01                         @topright:	dc.b 1
0001C985 F805 0075 F8               		dc.b $F8, 5, 0,	$75, $F8
0001C98A 01                         @bottomleft:	dc.b 1
0001C98B F805 0079 F8               		dc.b $F8, 5, 0,	$79, $F8
0001C990 01                         @bottomright:	dc.b 1
0001C991 F805 007D F8               		dc.b $F8, 5, 0,	$7D, $F8
0001C996                            		even
0001C996                            		even
0001C996                            
0001C996                            loc_1982C:
0001C996 4EF9 0000 F9BC             		jmp	(DeleteObject).l
0001C99C                            
0001C99C                            		include	"_incObj\82 Eggman - Scrap Brain 2.asm"
0001C99C                            ; ---------------------------------------------------------------------------
0001C99C                            ; Object 82 - Eggman (SBZ2)
0001C99C                            ; ---------------------------------------------------------------------------
0001C99C                            
0001C99C                            ScrapEggman:
0001C99C 7000                       		moveq	#0,d0
0001C99E 1028 0024                  		move.b	obRoutine(a0),d0
0001C9A2 323B 0000                  		move.w	SEgg_Index(pc,d0.w),d1
0001C9A6 4EFB 1000                  		jmp	SEgg_Index(pc,d1.w)
0001C9AA                            ; ===========================================================================
0001C9AA 0000                       SEgg_Index:	dc.w SEgg_Main-SEgg_Index
0001C9AC 0000                       		dc.w SEgg_Eggman-SEgg_Index
0001C9AE 0000                       		dc.w SEgg_Switch-SEgg_Index
0001C9B0                            
0001C9B0 0200 03                    SEgg_ObjData:	dc.b 2,	0, 3		; routine number, animation, priority
0001C9B3 0400 03                    		dc.b 4,	0, 3
0001C9B6                            ; ===========================================================================
0001C9B6                            
0001C9B6                            SEgg_Main:	; Routine 0
0001C9B6 45FA FFF8                  		lea	SEgg_ObjData(pc),a2
0001C9BA 317C 2160 0008             		move.w	#$2160,obX(a0)
0001C9C0 317C 05A4 000C             		move.w	#$5A4,obY(a0)
0001C9C6 117C 000F 0020             		move.b	#$F,obColType(a0)
0001C9CC 117C 0010 0021             		move.b	#$10,obColProp(a0)
0001C9D2 08A8 0000 0022             		bclr	#0,obStatus(a0)
0001C9D8 4228 0025                  		clr.b	ob2ndRout(a0)
0001C9DC 115A 0024                  		move.b	(a2)+,obRoutine(a0)
0001C9E0 115A 001C                  		move.b	(a2)+,obAnim(a0)
0001C9E4 115A 0018                  		move.b	(a2)+,obPriority(a0)
0001C9E8 217C 0000 0000 0004        		move.l	#Map_SEgg,obMap(a0)
0001C9F0 317C 0400 0002             		move.w	#$400,obGfx(a0)
0001C9F6 117C 0004 0001             		move.b	#4,obRender(a0)
0001C9FC 08E8 0007 0001             		bset	#7,obRender(a0)
0001CA02 117C 0020 0014             		move.b	#$20,obActWid(a0)
0001CA08 4EB9 0000 FE1E             		jsr	(FindNextFreeObj).l
0001CA0E 6600                       		bne.s	SEgg_Eggman
0001CA10 2348 0034                  		move.l	a0,$34(a1)
0001CA14 12BC 0082                  		move.b	#id_ScrapEggman,(a1) ; load switch object
0001CA18 337C 2130 0008             		move.w	#$2130,obX(a1)
0001CA1E 337C 05BC 000C             		move.w	#$5BC,obY(a1)
0001CA24 4228 0025                  		clr.b	ob2ndRout(a0)
0001CA28 135A 0024                  		move.b	(a2)+,obRoutine(a1)
0001CA2C 135A 001C                  		move.b	(a2)+,obAnim(a1)
0001CA30 135A 0018                  		move.b	(a2)+,obPriority(a1)
0001CA34 237C 0000 E1AA 0004        		move.l	#Map_But,obMap(a1)
0001CA3C 337C 04A4 0002             		move.w	#$4A4,obGfx(a1)
0001CA42 137C 0004 0001             		move.b	#4,obRender(a1)
0001CA48 08E9 0007 0001             		bset	#7,obRender(a1)
0001CA4E 137C 0010 0014             		move.b	#$10,obActWid(a1)
0001CA54 137C 0000 001A             		move.b	#0,obFrame(a1)
0001CA5A                            
0001CA5A                            SEgg_Eggman:	; Routine 2
0001CA5A 7000                       		moveq	#0,d0
0001CA5C 1028 0025                  		move.b	ob2ndRout(a0),d0
0001CA60 323B 0000                  		move.w	SEgg_EggIndex(pc,d0.w),d1
0001CA64 4EBB 1000                  		jsr	SEgg_EggIndex(pc,d1.w)
0001CA68 43FA 0000                  		lea	Ani_SEgg(pc),a1
0001CA6C 4EB9 0000 CA28             		jsr	(AnimateSprite).l
0001CA72 4EF9 0000 F97C             		jmp	(DisplaySprite).l
0001CA78                            ; ===========================================================================
0001CA78 0000                       SEgg_EggIndex:	dc.w SEgg_ChkSonic-SEgg_EggIndex
0001CA7A 0000                       		dc.w SEgg_PreLeap-SEgg_EggIndex
0001CA7C 0000                       		dc.w SEgg_Leap-SEgg_EggIndex
0001CA7E 0000                       		dc.w loc_19934-SEgg_EggIndex
0001CA80                            ; ===========================================================================
0001CA80                            
0001CA80                            SEgg_ChkSonic:
0001CA80 3028 0008                  		move.w	obX(a0),d0
0001CA84 9078 D008                  		sub.w	(v_player+obX).w,d0
0001CA88 0C40 0080                  		cmpi.w	#128,d0		; is Sonic within 128 pixels of	Eggman?
0001CA8C 6400                       		bcc.s	loc_19934	; if not, branch
0001CA8E 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001CA92 317C 00B4 003C             		move.w	#180,$3C(a0)	; set delay to 3 seconds
0001CA98 117C 0001 001C             		move.b	#1,obAnim(a0)
0001CA9E                            
0001CA9E                            loc_19934:
0001CA9E 4EF9 0000 F968             		jmp	(SpeedToPos).l
0001CAA4                            ; ===========================================================================
0001CAA4                            
0001CAA4                            SEgg_PreLeap:
0001CAA4 5368 003C                  		subq.w	#1,$3C(a0)	; subtract 1 from time delay
0001CAA8 6600                       		bne.s	loc_19954	; if time remains, branch
0001CAAA 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001CAAE 117C 0002 001C             		move.b	#2,obAnim(a0)
0001CAB4 5868 000C                  		addq.w	#4,obY(a0)
0001CAB8 317C 000F 003C             		move.w	#15,$3C(a0)
0001CABE                            
0001CABE                            loc_19954:
0001CABE 60DE                       		bra.s	loc_19934
0001CAC0                            ; ===========================================================================
0001CAC0                            
0001CAC0                            SEgg_Leap:
0001CAC0 5368 003C                  		subq.w	#1,$3C(a0)
0001CAC4 6E00                       		bgt.s	loc_199D0
0001CAC6 6600                       		bne.s	loc_1996A
0001CAC8 317C FF04 0010             		move.w	#-$FC,obVelX(a0) ; make Eggman leap
0001CACE 317C FC40 0012             		move.w	#-$3C0,obVelY(a0)
0001CAD4                            
0001CAD4                            loc_1996A:
0001CAD4 0C68 2132 0008             		cmpi.w	#$2132,obX(a0)
0001CADA 6E00                       		bgt.s	loc_19976
0001CADC 4268 0010                  		clr.w	obVelX(a0)
0001CAE0                            
0001CAE0                            loc_19976:
0001CAE0 0668 0024 0012             		addi.w	#$24,obVelY(a0)
0001CAE6 4A68 0012                  		tst.w	obVelY(a0)
0001CAEA 6B00                       		bmi.s	SEgg_FindBlocks
0001CAEC 0C68 0595 000C             		cmpi.w	#$595,obY(a0)
0001CAF2 6500                       		bcs.s	SEgg_FindBlocks
0001CAF4 317C 5357 0028             		move.w	#$5357,obSubtype(a0)
0001CAFA 0C68 059B 000C             		cmpi.w	#$59B,obY(a0)
0001CB00 6500                       		bcs.s	SEgg_FindBlocks
0001CB02 317C 059B 000C             		move.w	#$59B,obY(a0)
0001CB08 4268 0012                  		clr.w	obVelY(a0)
0001CB0C                            
0001CB0C                            SEgg_FindBlocks:
0001CB0C 3028 0010                  		move.w	obVelX(a0),d0
0001CB10 8068 0012                  		or.w	obVelY(a0),d0
0001CB14 6600                       		bne.s	loc_199D0
0001CB16 43F8 D000                  		lea	(v_objspace).w,a1 ; start at the first object RAM
0001CB1A 703E                       		moveq	#$3E,d0
0001CB1C 7240                       		moveq	#$40,d1
0001CB1E                            
0001CB1E                            SEgg_FindLoop:	
0001CB1E D2C1                       		adda.w	d1,a1		; jump to next object RAM
0001CB20 0C11 0083                  		cmpi.b	#id_FalseFloor,(a1) ; is object a block? (object $83)
0001CB24 57C8 FFF8                  		dbeq	d0,SEgg_FindLoop ; if not, repeat (max	$3E times)
0001CB28                            
0001CB28 6600                       		bne.s	loc_199D0
0001CB2A 337C 474F 0028             		move.w	#$474F,obSubtype(a1) ; set block to disintegrate
0001CB30 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001CB34 117C 0001 001C             		move.b	#1,obAnim(a0)
0001CB3A                            
0001CB3A                            loc_199D0:
0001CB3A 6000 FF62                  		bra.w	loc_19934
0001CB3E                            ; ===========================================================================
0001CB3E                            
0001CB3E                            SEgg_Switch:	; Routine 4
0001CB3E 7000                       		moveq	#0,d0
0001CB40 1028 0025                  		move.b	ob2ndRout(a0),d0
0001CB44 303B 0000                  		move.w	SEgg_SwIndex(pc,d0.w),d0
0001CB48 4EFB 0000                  		jmp	SEgg_SwIndex(pc,d0.w)
0001CB4C                            ; ===========================================================================
0001CB4C 0000                       SEgg_SwIndex:	dc.w loc_199E6-SEgg_SwIndex
0001CB4E 0000                       		dc.w SEgg_SwDisplay-SEgg_SwIndex
0001CB50                            ; ===========================================================================
0001CB50                            
0001CB50                            loc_199E6:
0001CB50 2268 0034                  		movea.l	$34(a0),a1
0001CB54 0C69 5357 0028             		cmpi.w	#$5357,obSubtype(a1)
0001CB5A 6600                       		bne.s	SEgg_SwDisplay
0001CB5C 117C 0001 001A             		move.b	#1,obFrame(a0)
0001CB62 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001CB66                            
0001CB66                            SEgg_SwDisplay:
0001CB66 4EF9 0000 F97C             		jmp	(DisplaySprite).l
0001CB66 4EF9 0000 F97C             		jmp	(DisplaySprite).l
0001CB6C                            		include	"_anim\Eggman - Scrap Brain 2 & Final.asm"
0001CB6C                            ; ---------------------------------------------------------------------------
0001CB6C                            ; Animation script - Eggman (SBZ2)
0001CB6C                            ; ---------------------------------------------------------------------------
0001CB6C 0000                       Ani_SEgg:	dc.w @stand-Ani_SEgg
0001CB6E 0000                       		dc.w @laugh-Ani_SEgg
0001CB70 0000                       		dc.w @jump1-Ani_SEgg
0001CB72 0000                       		dc.w @intube-Ani_SEgg
0001CB74 0000                       		dc.w @running-Ani_SEgg
0001CB76 0000                       		dc.w @jump2-Ani_SEgg
0001CB78 0000                       		dc.w @starjump-Ani_SEgg
0001CB7A 7E00 FF                    @stand:		dc.b $7E, 0, afEnd
0001CB7E 00                         		even
0001CB7E 0601 02FF                  @laugh:		dc.b 6,	1, 2, afEnd
0001CB82 0E03 0404 0000 00FF        @jump1:		dc.b $E, 3, 4, 4, 0, 0,	0, afEnd
0001CB8A 0005 09FF                  @intube:	dc.b 0,	5, 9, afEnd
0001CB8E 0607 0408 04FF             @running:	dc.b 6,	7, 4, 8, 4, afEnd
0001CB94 0F04 0303 FF               @jump2:		dc.b $F, 4, 3, 3, afEnd
0001CB9A 00                         		even
0001CB9A 7E06 FF                    @starjump:	dc.b $7E, 6, afEnd
0001CB9E 00                         		even
0001CB9E 00                         		even
0001CB9E                            Map_SEgg:	include	"_maps\Eggman - Scrap Brain 2.asm"
0001CB9E                            ; ---------------------------------------------------------------------------
0001CB9E                            ; Sprite mappings - Eggman (SBZ2)
0001CB9E                            ; ---------------------------------------------------------------------------
0001CB9E                            Map_SEgg_internal:
0001CB9E 0000                       		dc.w @stand-Map_SEgg_internal
0001CBA0 0000                       		dc.w @laugh1-Map_SEgg_internal
0001CBA2 0000                       		dc.w @laugh2-Map_SEgg_internal
0001CBA4 0000                       		dc.w @jump1-Map_SEgg_internal
0001CBA6 0000                       		dc.w @jump2-Map_SEgg_internal
0001CBA8 0000                       		dc.w @surprise-Map_SEgg_internal
0001CBAA 0000                       		dc.w @starjump-Map_SEgg_internal
0001CBAC 0000                       		dc.w @running1-Map_SEgg_internal
0001CBAE 0000                       		dc.w @running2-Map_SEgg_internal
0001CBB0 0000                       		dc.w @intube-Map_SEgg_internal
0001CBB2 0000                       		dc.w @cockpit-Map_SEgg_internal
0001CBB4 03                         @stand:		dc.b 3
0001CBB5 FC00 008F E8               		dc.b $FC, 0, 0,	$8F, $E8
0001CBBA E80E 0000 F0               		dc.b $E8, $E, 0, 0, $F0
0001CBBF 000F 006F F0               		dc.b 0,	$F, 0, $6F, $F0
0001CBC4 04                         @laugh1:	dc.b 4
0001CBC5 E80D 000E F0               		dc.b $E8, $D, 0, $E, $F0
0001CBCA E80E 0000 F0               		dc.b $E8, $E, 0, 0, $F0
0001CBCF 000F 006F F0               		dc.b 0,	$F, 0, $6F, $F0
0001CBD4 FC00 008F E8               		dc.b $FC, 0, 0,	$8F, $E8
0001CBD9 00                         		dc.b 0
0001CBDA 04                         @laugh2:	dc.b 4
0001CBDB E90D 000E F0               		dc.b $E9, $D, 0, $E, $F0
0001CBE0 E90E 0000 F0               		dc.b $E9, $E, 0, 0, $F0
0001CBE5 010F 007F F0               		dc.b 1,	$F, 0, $7F, $F0
0001CBEA FD00 008F E8               		dc.b $FD, 0, 0,	$8F, $E8
0001CBEF 00                         		dc.b 0
0001CBF0 04                         @jump1:		dc.b 4
0001CBF1 F40F 0820 F0               		dc.b $F4, $F, 8, $20, $F0
0001CBF6 F504 0830 10               		dc.b $F5, 4, 8,	$30, $10
0001CBFB 0809 084E F0               		dc.b 8,	9, 8, $4E, $F0
0001CC00 EC0E 0000 F0               		dc.b $EC, $E, 0, 0, $F0
0001CC05 00                         		dc.b 0
0001CC06 04                         @jump2:		dc.b 4
0001CC07 F00F 0820 F0               		dc.b $F0, $F, 8, $20, $F0
0001CC0C F104 0830 10               		dc.b $F1, 4, 8,	$30, $10
0001CC11 0806 083E F8               		dc.b 8,	6, 8, $3E, $F8
0001CC16 E80E 0000 F0               		dc.b $E8, $E, 0, 0, $F0
0001CC1B 00                         		dc.b 0
0001CC1C 04                         @surprise:	dc.b 4
0001CC1D E80D 0016 EC               		dc.b $E8, $D, 0, $16, $EC
0001CC22 E801 001E 0C               		dc.b $E8, 1, 0,	$1E, $C
0001CC27 E80E 0000 F0               		dc.b $E8, $E, 0, 0, $F0
0001CC2C 000F 006F F0               		dc.b 0,	$F, 0, $6F, $F0
0001CC31 00                         		dc.b 0
0001CC32 07                         @starjump:	dc.b 7
0001CC33 E80D 0016 EC               		dc.b $E8, $D, 0, $16, $EC
0001CC38 E801 001E 0C               		dc.b $E8, 1, 0,	$1E, $C
0001CC3D 0409 0834 00               		dc.b 4,	9, 8, $34, 0
0001CC42 0405 083A E8               		dc.b 4,	5, 8, $3A, $E8
0001CC47 F00F 0820 F0               		dc.b $F0, $F, 8, $20, $F0
0001CC4C F104 0854 10               		dc.b $F1, 4, 8,	$54, $10
0001CC51 F104 0054 E0               		dc.b $F1, 4, 0,	$54, $E0
0001CC56 05                         @running1:	dc.b 5
0001CC57 F00F 0820 F0               		dc.b $F0, $F, 8, $20, $F0
0001CC5C F104 0830 10               		dc.b $F1, 4, 8,	$30, $10
0001CC61 0409 0834 00               		dc.b 4,	9, 8, $34, 0
0001CC66 0405 083A E8               		dc.b 4,	5, 8, $3A, $E8
0001CC6B E80E 0000 F0               		dc.b $E8, $E, 0, 0, $F0
0001CC70 06                         @running2:	dc.b 6
0001CC71 EE0F 0820 F0               		dc.b $EE, $F, 8, $20, $F0
0001CC76 EF04 0830 10               		dc.b $EF, 4, 8,	$30, $10
0001CC7B 0905 0844 00               		dc.b 9,	5, 8, $44, 0
0001CC80 0301 0848 F8               		dc.b 3,	1, 8, $48, $F8
0001CC85 0B05 084A E8               		dc.b $B, 5, 8, $4A, $E8
0001CC8A E60E 0000 F0               		dc.b $E6, $E, 0, 0, $F0
0001CC8F 00                         		dc.b 0
0001CC90 08                         @intube:	dc.b 8
0001CC91 E80D 0016 EC               		dc.b $E8, $D, 0, $16, $EC ; Eggman inside tube in Final Zone
0001CC96 E801 001E 0C               		dc.b $E8, 1, 0,	$1E, $C
0001CC9B E80E 0000 F0               		dc.b $E8, $E, 0, 0, $F0
0001CCA0 000F 006F F0               		dc.b 0,	$F, 0, $6F, $F0
0001CCA5 E00D 3EF0 F0               		dc.b $E0, $D, $3E, $F0,	$F0
0001CCAA F00D 3EF0 F0               		dc.b $F0, $D, $3E, $F0,	$F0
0001CCAF 000D 3EF0 F0               		dc.b 0,	$D, $3E, $F0, $F0
0001CCB4 100D 3EF0 F0               		dc.b $10, $D, $3E, $F0,	$F0
0001CCB9 03                         @cockpit:	dc.b 3
0001CCBA EC0D 0056 E4               		dc.b $EC, $D, 0, $56, $E4 ; empty cockpit of Eggmobile in Final Zone
0001CCBF F408 005E 04               		dc.b $F4, 8, 0,	$5E, 4
0001CCC4 EC0D 0061 FC               		dc.b $EC, $D, 0, $61, $FC
0001CCCA 00                         		even
0001CCCA 00                         		even
0001CCCA                            		include	"_incObj\83 SBZ Eggman's Crumbling Floor.asm"
0001CCCA                            ; ---------------------------------------------------------------------------
0001CCCA                            ; Object 83 - blocks that disintegrate Eggman	presses	a switch (SBZ2)
0001CCCA                            ; ---------------------------------------------------------------------------
0001CCCA                            
0001CCCA                            FalseFloor:
0001CCCA 7000                       		moveq	#0,d0
0001CCCC 1028 0024                  		move.b	obRoutine(a0),d0
0001CCD0 323B 0000                  		move.w	FFloor_Index(pc,d0.w),d1
0001CCD4 4EFB 1000                  		jmp	FFloor_Index(pc,d1.w)
0001CCD8                            ; ===========================================================================
0001CCD8 0000                       FFloor_Index:	dc.w FFloor_Main-FFloor_Index
0001CCDA 0000                       		dc.w FFloor_ChkBreak-FFloor_Index
0001CCDC 0000                       		dc.w loc_19C36-FFloor_Index
0001CCDE 0000                       		dc.w loc_19C62-FFloor_Index
0001CCE0 0000                       		dc.w loc_19C72-FFloor_Index
0001CCE2 0000                       		dc.w loc_19C80-FFloor_Index
0001CCE4                            ; ===========================================================================
0001CCE4                            
0001CCE4                            FFloor_Main:	; Routine 0
0001CCE4 317C 2080 0008             		move.w	#$2080,obX(a0)
0001CCEA 317C 05D0 000C             		move.w	#$5D0,obY(a0)
0001CCF0 117C 0080 0014             		move.b	#$80,obActWid(a0)
0001CCF6 117C 0010 0016             		move.b	#$10,obHeight(a0)
0001CCFC 117C 0004 0001             		move.b	#4,obRender(a0)
0001CD02 08E8 0007 0001             		bset	#7,obRender(a0)
0001CD08 7800                       		moveq	#0,d4
0001CD0A 3A3C 2010                  		move.w	#$2010,d5
0001CD0E 7C07                       		moveq	#7,d6
0001CD10 45E8 0030                  		lea	$30(a0),a2
0001CD14                            
0001CD14                            FFloor_MakeBlock:
0001CD14 4EB9 0000 FE08             		jsr	(FindFreeObj).l
0001CD1A 6600                       		bne.s	FFloor_ExitMake
0001CD1C 34C9                       		move.w	a1,(a2)+
0001CD1E 12BC 0083                  		move.b	#id_FalseFloor,(a1) ; load block object
0001CD22 237C 0000 0000 0004        		move.l	#Map_FFloor,obMap(a1)
0001CD2A 337C 4518 0002             		move.w	#$4518,obGfx(a1)
0001CD30 137C 0004 0001             		move.b	#4,obRender(a1)
0001CD36 137C 0010 0014             		move.b	#$10,obActWid(a1)
0001CD3C 137C 0010 0016             		move.b	#$10,obHeight(a1)
0001CD42 337C 0180 0018             		move.w	#$180,obPriority(a1)
0001CD48 3345 0008                  		move.w	d5,obX(a1)	; set X	position
0001CD4C 337C 05D0 000C             		move.w	#$5D0,obY(a1)
0001CD52 0645 0020                  		addi.w	#$20,d5		; add $20 for next X position
0001CD56 137C 0008 0024             		move.b	#8,obRoutine(a1)
0001CD5C 51CE FFB6                  		dbf	d6,FFloor_MakeBlock ; repeat sequence 7 more times
0001CD60                            
0001CD60                            FFloor_ExitMake:
0001CD60 5428 0024                  		addq.b	#2,obRoutine(a0)
0001CD64 4E75                       		rts	
0001CD66                            ; ===========================================================================
0001CD66                            
0001CD66                            FFloor_ChkBreak:; Routine 2
0001CD66 0C68 474F 0028             		cmpi.w	#$474F,obSubtype(a0) ; is object set to disintegrate?
0001CD6C 6600                       		bne.s	FFloor_Solid	; if not, branch
0001CD6E 4228 001A                  		clr.b	obFrame(a0)
0001CD72 5428 0024                  		addq.b	#2,obRoutine(a0) ; next subroutine
0001CD76                            
0001CD76                            FFloor_Solid:
0001CD76 7000                       		moveq	#0,d0
0001CD78 1028 001A                  		move.b	obFrame(a0),d0
0001CD7C 4400                       		neg.b	d0
0001CD7E 4880                       		ext.w	d0
0001CD80 5040                       		addq.w	#8,d0
0001CD82 E940                       		asl.w	#4,d0
0001CD84 383C 2100                  		move.w	#$2100,d4
0001CD88 9840                       		sub.w	d0,d4
0001CD8A 1140 0014                  		move.b	d0,obActWid(a0)
0001CD8E 3144 0008                  		move.w	d4,obX(a0)
0001CD92 720B                       		moveq	#$B,d1
0001CD94 D240                       		add.w	d0,d1
0001CD96 7410                       		moveq	#$10,d2
0001CD98 7611                       		moveq	#$11,d3
0001CD9A 4EF9 0001 1D8A             		jmp	(SolidObject).l
0001CDA0                            ; ===========================================================================
0001CDA0                            
0001CDA0                            loc_19C36:	; Routine 4
0001CDA0 0428 000E 001E             		subi.b	#$E,obTimeFrame(a0)
0001CDA6 6400                       		bcc.s	FFloor_Solid2
0001CDA8 70FF                       		moveq	#-1,d0
0001CDAA 1028 001A                  		move.b	obFrame(a0),d0
0001CDAE 4880                       		ext.w	d0
0001CDB0 D040                       		add.w	d0,d0
0001CDB2 3030 0030                  		move.w	$30(a0,d0.w),d0
0001CDB6 2240                       		movea.l	d0,a1
0001CDB8 337C 474F 0028             		move.w	#$474F,obSubtype(a1)
0001CDBE 5228 001A                  		addq.b	#1,obFrame(a0)
0001CDC2 0C28 0008 001A             		cmpi.b	#8,obFrame(a0)
0001CDC8 6700                       		beq.s	loc_19C62
0001CDCA                            
0001CDCA                            FFloor_Solid2:
0001CDCA 60AA                       		bra.s	FFloor_Solid
0001CDCC                            ; ===========================================================================
0001CDCC                            
0001CDCC                            loc_19C62:	; Routine 6
0001CDCC 08A8 0003 0022             		bclr	#3,obStatus(a0)
0001CDD2 08B8 0003 D022             		bclr	#3,(v_player+obStatus).w
0001CDD8 6000 FBBC                  		bra.w	loc_1982C
0001CDDC                            ; ===========================================================================
0001CDDC                            
0001CDDC                            loc_19C72:	; Routine 8
0001CDDC 0C68 474F 0028             		cmpi.w	#$474F,obSubtype(a0) ; is object set to disintegrate?
0001CDE2 6700                       		beq.s	FFloor_Break	; if yes, branch
0001CDE4 4EF9 0000 F97C             		jmp	(DisplaySprite).l
0001CDEA                            ; ===========================================================================
0001CDEA                            
0001CDEA                            loc_19C80:	; Routine $A
0001CDEA 4A28 0001                  		tst.b	obRender(a0)
0001CDEE 6A00 FBA6                  		bpl.w	loc_1982C
0001CDF2 4EB9 0000 F930             		jsr	(ObjectFall).l
0001CDF8 4EF9 0000 F97C             		jmp	(DisplaySprite).l
0001CDFE                            ; ===========================================================================
0001CDFE                            
0001CDFE                            FFloor_Break:
0001CDFE 49FA 0000                  		lea	FFloor_FragSpeed(pc),a4
0001CE02 4BFA 0000                  		lea	FFloor_FragPos(pc),a5
0001CE06 7801                       		moveq	#1,d4
0001CE08 7203                       		moveq	#3,d1
0001CE0A 7438                       		moveq	#$38,d2
0001CE0C 5428 0024                  		addq.b	#2,obRoutine(a0)
0001CE10 117C 0008 0014             		move.b	#8,obActWid(a0)
0001CE16 117C 0008 0016             		move.b	#8,obHeight(a0)
0001CE1C 43D0                       		lea	(a0),a1
0001CE1E 6000                       		bra.s	FFloor_MakeFrag
0001CE20                            ; ===========================================================================
0001CE20                            
0001CE20                            FFloor_LoopFrag:
0001CE20 4EB9 0000 FE1E             		jsr	(FindNextFreeObj).l
0001CE26 6600                       		bne.s	FFloor_BreakSnd
0001CE28                            
0001CE28                            FFloor_MakeFrag:
0001CE28 45D0                       		lea	(a0),a2
0001CE2A 47D1                       		lea	(a1),a3
0001CE2C 7603                       		moveq	#3,d3
0001CE2E                            
0001CE2E                            loc_19CC4:
0001CE2E 26DA                       		move.l	(a2)+,(a3)+
0001CE30 26DA                       		move.l	(a2)+,(a3)+
0001CE32 26DA                       		move.l	(a2)+,(a3)+
0001CE34 26DA                       		move.l	(a2)+,(a3)+
0001CE36 51CB FFF6                  		dbf	d3,loc_19CC4
0001CE3A                            
0001CE3A 335C 0012                  		move.w	(a4)+,obVelY(a1)
0001CE3E 361D                       		move.w	(a5)+,d3
0001CE40 D769 0008                  		add.w	d3,obX(a1)
0001CE44 361D                       		move.w	(a5)+,d3
0001CE46 D769 000C                  		add.w	d3,obY(a1)
0001CE4A 1344 001A                  		move.b	d4,obFrame(a1)
0001CE4E 5244                       		addq.w	#1,d4
0001CE50 51C9 FFCE                  		dbf	d1,FFloor_LoopFrag ; repeat sequence 3 more times
0001CE54                            
0001CE54                            FFloor_BreakSnd:
0001CE5E 4EF9 0000 F97C             		jmp	(DisplaySprite).l
0001CE64                            ; ===========================================================================
0001CE64 0080 0000                  FFloor_FragSpeed:dc.w $80, 0
0001CE68 0120 00C0                  		dc.w $120, $C0
0001CE6C FFF8 FFF8                  FFloor_FragPos:	dc.w -8, -8
0001CE70 0010 0000                  		dc.w $10, 0
0001CE74 0000 0010                  		dc.w 0,	$10
0001CE78 0010 0010                  		dc.w $10, $10
0001CE78 0010 0010                  		dc.w $10, $10
0001CE7C                            Map_FFloor:	include	"_maps\SBZ Eggman's Crumbling Floor.asm"
0001CE7C                            ; ---------------------------------------------------------------------------
0001CE7C                            ; Sprite mappings - blocks that	disintegrate when Eggman presses a switch
0001CE7C                            ; ---------------------------------------------------------------------------
0001CE7C                            Map_FFloor_internal:
0001CE7C 0000                       		dc.w @wholeblock-Map_FFloor_internal
0001CE7E 0000                       		dc.w @topleft-Map_FFloor_internal
0001CE80 0000                       		dc.w @topright-Map_FFloor_internal
0001CE82 0000                       		dc.w @bottomleft-Map_FFloor_internal
0001CE84 0000                       		dc.w @bottomright-Map_FFloor_internal
0001CE86 01                         @wholeblock:	dc.b 1
0001CE87 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
0001CE8C 02                         @topleft:	dc.b 2
0001CE8D F801 0000 F8               		dc.b $F8, 1, 0,	0, $F8
0001CE92 F801 0004 00               		dc.b $F8, 1, 0,	4, 0
0001CE97 00                         		dc.b 0
0001CE98 02                         @topright:	dc.b 2
0001CE99 F801 0008 F8               		dc.b $F8, 1, 0,	8, $F8
0001CE9E F801 000C 00               		dc.b $F8, 1, 0,	$C, 0
0001CEA3 00                         		dc.b 0
0001CEA4 02                         @bottomleft:	dc.b 2
0001CEA5 F801 0002 F8               		dc.b $F8, 1, 0,	2, $F8
0001CEAA F801 0006 00               		dc.b $F8, 1, 0,	6, 0
0001CEAF 00                         		dc.b 0
0001CEB0 02                         @bottomright:	dc.b 2
0001CEB1 F801 000A F8               		dc.b $F8, 1, 0,	$A, $F8
0001CEB6 F801 000E 00               		dc.b $F8, 1, 0,	$E, 0
0001CEBC 00                         		even
0001CEBC 00                         		even
0001CEBC                            		include	"_incObj\85 Boss - Final.asm"
0001CEBC                            ; ---------------------------------------------------------------------------
0001CEBC                            ; Object 85 - Eggman (FZ)
0001CEBC                            ; ---------------------------------------------------------------------------
0001CEBC                            
0001CEBC                            Obj85_Delete:
0001CEBC 4EF9 0000 F9BC             		jmp	(DeleteObject).l
0001CEC2                            ; ===========================================================================
0001CEC2                            
0001CEC2                            BossFinal:
0001CEC2 7000                       		moveq	#0,d0
0001CEC4 1028 0024                  		move.b	obRoutine(a0),d0
0001CEC8 303B 0000                  		move.w	Obj85_Index(pc,d0.w),d0
0001CECC 4EFB 0000                  		jmp	Obj85_Index(pc,d0.w)
0001CED0                            ; ===========================================================================
0001CED0 0000                       Obj85_Index:	dc.w Obj85_Main-Obj85_Index
0001CED2 0000                       		dc.w Obj85_Eggman-Obj85_Index
0001CED4 0000                       		dc.w loc_1A38E-Obj85_Index
0001CED6 0000                       		dc.w loc_1A346-Obj85_Index
0001CED8 0000                       		dc.w loc_1A2C6-Obj85_Index
0001CEDA 0000                       		dc.w loc_1A3AC-Obj85_Index
0001CEDC 0000                       		dc.w loc_1A264-Obj85_Index
0001CEDE                            
0001CEDE 0100 0100 0470             Obj85_ObjData:	dc.w $100, $100, $470	; X pos, Y pos,	VRAM setting
0001CEE4 0001 CB9E                  		dc.l Map_SEgg		; mappings pointer
0001CEE8 25B0 0590 0300             		dc.w $25B0, $590, $300
0001CEEE 0000 0000                  		dc.l Map_EggCyl
0001CEF2 26E0 0596 03A0             		dc.w $26E0, $596, $3A0
0001CEF8 0000 0000                  		dc.l Map_FZLegs
0001CEFC 26E0 0596 0470             		dc.w $26E0, $596, $470
0001CF02 0001 CB9E                  		dc.l Map_SEgg
0001CF06 26E0 0596 0400             		dc.w $26E0, $596, $400
0001CF0C 0001 AE22                  		dc.l Map_Eggman
0001CF10 26E0 0596 0400             		dc.w $26E0, $596, $400
0001CF16 0001 AE22                  		dc.l Map_Eggman
0001CF1A                            
0001CF1A                            Obj85_ObjData2:	; routine num, animation, sprite priority (high and low bytes), width, height		
0001CF1A 0200 0200 2019             		dc.b  2, 0, $02, $00, $20, $19
0001CF20 0400 0080 1208             		dc.b  4, 0, $00, $80, $12,   8
0001CF26 0600 0180 0000             		dc.b  6, 0, $01, $80,   0,   0
0001CF2C 0800 0180 0000             		dc.b  8, 0, $01, $80,   0,   0
0001CF32 0A00 0180 2020             		dc.b $A, 0, $01, $80, $20, $20
0001CF38 0C00 0180 0000             		dc.b $C, 0, $01, $80,   0,   0
0001CF3E                            ; ===========================================================================
0001CF3E                            
0001CF3E                            Obj85_Main:	; Routine 0
0001CF3E 45FA FF9E                  		lea	Obj85_ObjData(pc),a2
0001CF42 47FA FFD6                  		lea	Obj85_ObjData2(pc),a3
0001CF46 2248                       		movea.l	a0,a1
0001CF48 7205                       		moveq	#5,d1
0001CF4A 6000                       		bra.s	Obj85_LoadBoss
0001CF4C                            ; ===========================================================================
0001CF4C                            
0001CF4C                            Obj85_Loop:
0001CF4C 4EB9 0000 FE1E             		jsr	(FindNextFreeObj).l
0001CF52 6600                       		bne.s	loc_19E20
0001CF54                            
0001CF54                            Obj85_LoadBoss:
0001CF54 12BC 0085                  		move.b	#id_BossFinal,(a1)
0001CF58 335A 0008                  		move.w	(a2)+,obX(a1)
0001CF5C 335A 000C                  		move.w	(a2)+,obY(a1)
0001CF60 335A 0002                  		move.w	(a2)+,obGfx(a1)
0001CF64 235A 0004                  		move.l	(a2)+,obMap(a1)
0001CF68 135B 0024                  		move.b	(a3)+,obRoutine(a1)
0001CF6C 135B 001C                  		move.b	(a3)+,obAnim(a1)
0001CF70 335B 0018                  		move.w	(a3)+,obPriority(a1)
0001CF74 135B 0014                  			move.b	(a3)+,obActWid(a1)
0001CF78 135B 0016                  		move.b	(a3)+,obHeight(a1)
0001CF7C 137C 0004 0001             		move.b	#4,obRender(a1)
0001CF82 08E8 0007 0001             		bset	#7,obRender(a0)
0001CF88 2348 0034                  		move.l	a0,$34(a1)
0001CF8C 51C9 FFBE                  		dbf	d1,Obj85_Loop
0001CF90                            
0001CF90                            loc_19E20:
0001CF90 45E8 0036                  		lea	$36(a0),a2
0001CF94 4EB9 0000 FE08             		jsr	(FindFreeObj).l
0001CF9A 6600                       		bne.s	loc_19E5A
0001CF9C 12BC 0086                  		move.b	#id_BossPlasma,(a1) ; load energy ball object
0001CFA0 3489                       		move.w	a1,(a2)
0001CFA2 2348 0034                  		move.l	a0,$34(a1)
0001CFA6 45E8 0038                  		lea	$38(a0),a2
0001CFAA 7400                       		moveq	#0,d2
0001CFAC 7203                       		moveq	#3,d1
0001CFAE                            
0001CFAE                            loc_19E3E:
0001CFAE 4EB9 0000 FE1E             		jsr	(FindNextFreeObj).l
0001CFB4 6600                       		bne.s	loc_19E5A
0001CFB6 34C9                       		move.w	a1,(a2)+
0001CFB8 12BC 0084                  		move.b	#id_EggmanCylinder,(a1) ; load crushing	cylinder object
0001CFBC 2348 0034                  		move.l	a0,$34(a1)
0001CFC0 1342 0028                  		move.b	d2,obSubtype(a1)
0001CFC4 5442                       		addq.w	#2,d2
0001CFC6 51C9 FFE6                  		dbf	d1,loc_19E3E
0001CFCA                            
0001CFCA                            loc_19E5A:
0001CFCA 317C 0000 0034             		move.w	#0,$34(a0)
0001CFD0 117C 0004 0021             		move.b	#4,obColProp(a0) ; set number of hits to 8
0001CFD6 317C FFFF 0030             		move.w	#-1,$30(a0)
0001CFDC                            
0001CFDC                            Obj85_Eggman:	; Routine 2
0001CFDC 7000                       		moveq	#0,d0
0001CFDE 1028 0034                  		move.b	$34(a0),d0
0001CFE2 303B 0000                  		move.w	off_19E80(pc,d0.w),d0
0001CFE6 4EBB 0000                  		jsr	off_19E80(pc,d0.w)
0001CFEA 4EF9 0000 F97C             		jmp	(DisplaySprite).l
0001CFF0                            ; ===========================================================================
0001CFF0 0000 0000                  off_19E80:	dc.w loc_19E90-off_19E80, loc_19EA8-off_19E80
0001CFF4 0000 0000                  		dc.w loc_19FE6-off_19E80, loc_1A02A-off_19E80
0001CFF8 0000 0000                  		dc.w loc_1A074-off_19E80, loc_1A112-off_19E80
0001CFFC 0000 0000                  		dc.w loc_1A192-off_19E80, loc_1A1D4-off_19E80
0001D000                            ; ===========================================================================
0001D000                            
0001D000                            loc_19E90:
0001D000 4AB8 F680                  		tst.l	(v_plc_buffer).w
0001D004 6600                       		bne.s	loc_19EA2
0001D006 0C78 2450 F700             		cmpi.w	#$2450,(v_screenposx).w
0001D00C 6500                       		bcs.s	loc_19EA2
0001D00E 5428 0034                  		addq.b	#2,$34(a0)
0001D012                            
0001D012                            loc_19EA2:
0001D012 52B8 F636                  		addq.l	#1,(v_random).w
0001D016 4E75                       		rts	
0001D018                            ; ===========================================================================
0001D018                            
0001D018                            loc_19EA8:
0001D018 4A68 0030                  		tst.w	$30(a0)
0001D01C 6A00                       		bpl.s	loc_19F10
0001D01E 4268 0030                  		clr.w	$30(a0)
0001D022 4EB9 0000 3A10             		jsr	(RandomNumber).l
0001D028 0240 000C                  		andi.w	#$C,d0
0001D02C 3200                       		move.w	d0,d1
0001D02E 5441                       		addq.w	#2,d1
0001D030 4A80                       		tst.l	d0
0001D032 6A00                       		bpl.s	loc_19EC6
0001D034 C340                       		exg	d1,d0
0001D036                            
0001D036                            loc_19EC6:
0001D036 43FA 0000                  		lea	word_19FD6(pc),a1
0001D03A 3031 0000                  		move.w	(a1,d0.w),d0
0001D03E 3231 1000                  		move.w	(a1,d1.w),d1
0001D042 3140 0030                  		move.w	d0,$30(a0)
0001D046 74FF                       		moveq	#-1,d2
0001D048 3430 0038                  		move.w	$38(a0,d0.w),d2
0001D04C 2242                       		movea.l	d2,a1
0001D04E 137C 00FF 0029             		move.b	#-1,$29(a1)
0001D054 337C FFFF 0030             		move.w	#-1,$30(a1)
0001D05A 3430 1038                  		move.w	$38(a0,d1.w),d2
0001D05E 2242                       		movea.l	d2,a1
0001D060 137C 0001 0029             		move.b	#1,$29(a1)
0001D066 337C 0000 0030             		move.w	#0,$30(a1)
0001D06C 317C 0001 0032             		move.w	#1,$32(a0)
0001D072 4228 0035                  		clr.b	$35(a0)
0001D080                            
0001D080                            loc_19F10:
0001D080 4A68 0032                  		tst.w	$32(a0)
0001D084 6B00 0000                  		bmi.w	loc_19FA6
0001D088 08A8 0000 0022             		bclr	#0,obStatus(a0)
0001D08E 3038 D008                  		move.w	(v_player+obX).w,d0
0001D092 9068 0008                  		sub.w	obX(a0),d0
0001D096 6500                       		bcs.s	loc_19F2E
0001D098 08E8 0000 0022             		bset	#0,obStatus(a0)
0001D09E                            
0001D09E                            loc_19F2E:
0001D09E 323C 002B                  		move.w	#$2B,d1
0001D0A2 343C 0014                  		move.w	#$14,d2
0001D0A6 363C 0014                  		move.w	#$14,d3
0001D0AA 3828 0008                  		move.w	obX(a0),d4
0001D0AE 4EB9 0001 1D8A             		jsr	(SolidObject).l
0001D0B4 4A44                       		tst.w	d4
0001D0B6 6E00                       		bgt.s	loc_19F50
0001D0B8                            
0001D0B8                            loc_19F48:
0001D0B8 4A28 0035                  		tst.b	$35(a0)
0001D0BC 6600                       		bne.s	loc_19F88
0001D0BE 6000                       		bra.s	loc_19F96
0001D0C0                            ; ===========================================================================
0001D0C0                            
0001D0C0                            loc_19F50:
0001D0C0 5E78 F636                  		addq.w	#7,(v_random).w
0001D0C4 0C38 0002 D01C             		cmpi.b	#id_Roll,(v_player+obAnim).w
0001D0CA 66EC                       		bne.s	loc_19F48
0001D0CC 303C 0300                  		move.w	#$300,d0
0001D0D0 0828 0000 0022             		btst	#0,obStatus(a0)
0001D0D6 6600                       		bne.s	loc_19F6A
0001D0D8 4440                       		neg.w	d0
0001D0DA                            
0001D0DA                            loc_19F6A:
0001D0DA 31C0 D010                  		move.w	d0,(v_player+obVelX).w
0001D0DE 4A28 0035                  		tst.b	$35(a0)
0001D0E2 6600                       		bne.s	loc_19F88
0001D0E4 5328 0021                  		subq.b	#1,obColProp(a0)
0001D0E8 117C 00FF 0035             		move.b	#$FF,$35(a0)
0001D0EE 4EB9 0000 0000             		jsr	(BossModeMusic).l ;	play boss damage sound
0001D0F4                            
0001D0F4                            loc_19F88:
0001D0F4 5328 0035                  		subq.b	#1,$35(a0)
0001D0F8 6700                       		beq.s	loc_19F96
0001D0FA 117C 0003 001C             		move.b	#3,obAnim(a0)
0001D100 6000                       		bra.s	loc_19F9C
0001D102                            ; ===========================================================================
0001D102                            
0001D102                            loc_19F96:
0001D102 117C 0001 001C             		move.b	#1,obAnim(a0)
0001D108                            
0001D108                            loc_19F9C:
0001D108 43FA FA62                  		lea	Ani_SEgg(pc),a1
0001D10C 4EF9 0000 CA28             		jmp	(AnimateSprite).l
0001D112                            ; ===========================================================================
0001D112                            
0001D112                            loc_19FA6:
0001D112 4A28 0021                  		tst.b	obColProp(a0)
0001D116 6700                       		beq.s	loc_19FBC
0001D118 5428 0034                  		addq.b	#2,$34(a0)
0001D11C 317C FFFF 0030             		move.w	#-1,$30(a0)
0001D122 4268 0032                  		clr.w	$32(a0)
0001D126 4E75                       		rts	
0001D128                            ; ===========================================================================
0001D128                            
0001D128                            loc_19FBC:
0001D128 7064                       			moveq	#100,d0
0001D12A 6100 0000                  			bsr.w	AddPoints
0001D12E 117C 0006 0034             		move.b	#6,$34(a0)
0001D134 317C 25C0 0008             		move.w	#$25C0,obX(a0)
0001D13A 317C 053C 000C             		move.w	#$53C,obY(a0)
0001D140 117C 0014 0016             		move.b	#$14,obHeight(a0)
0001D146 4E75                       		rts	
0001D148                            ; ===========================================================================
0001D148 0000 0002 0002 0004 0004+  word_19FD6:	dc.w 0,	2, 2, 4, 4, 6, 6, 0
0001D158                            ; ===========================================================================
0001D158                            
0001D158                            loc_19FE6:
0001D158 70FF                       		moveq	#-1,d0
0001D15A 3028 0036                  		move.w	$36(a0),d0
0001D15E 2240                       		movea.l	d0,a1
0001D160 4A68 0030                  		tst.w	$30(a0)
0001D164 6A00                       		bpl.s	loc_1A000
0001D166 4268 0030                  		clr.w	$30(a0)
0001D16A 137C 00FF 0029             		move.b	#-1,$29(a1)
0001D170 6100                       		bsr.s	loc_1A020
0001D172                            
0001D172                            loc_1A000:
0001D172 700F                       		moveq	#$F,d0
0001D174 C078 FE0E                  		and.w	(v_vbla_word).w,d0
0001D178 6600                       		bne.s	loc_1A00A
0001D17A 6100                       		bsr.s	loc_1A020
0001D17C                            
0001D17C                            loc_1A00A:
0001D17C 4A68 0032                  		tst.w	$32(a0)
0001D180 6700                       		beq.s	locret_1A01E
0001D182 5528 0034                  		subq.b	#2,$34(a0)
0001D186 317C FFFF 0030             		move.w	#-1,$30(a0)
0001D18C 4268 0032                  		clr.w	$32(a0)
0001D190                            
0001D190                            locret_1A01E:
0001D190 4E75                       		rts	
0001D192                            ; ===========================================================================
0001D192                            
0001D192                            loc_1A020:
0001D19C                            ; ===========================================================================
0001D19C                            
0001D19C                            loc_1A02A:
0001D19C 117C 0030 0014             			move.b	#$30,obActWid(a0)
0001D1A2 08E8 0000 0022             		bset	#0,obStatus(a0)
0001D1A8 4EB9 0000 F968             		jsr	(SpeedToPos).l
0001D1AE 117C 0006 001A             		move.b	#6,obFrame(a0)
0001D1B4 0668 0010 0012             		addi.w	#$10,obVelY(a0)
0001D1BA 0C68 059C 000C             		cmpi.w	#$59C,obY(a0)
0001D1C0 6500                       		bcs.s	loc_1A070
0001D1C2 317C 059C 000C             		move.w	#$59C,obY(a0)
0001D1C8 5428 0034                  		addq.b	#2,$34(a0)
0001D1CC 117C 0020 0014             			move.b	#$20,obActWid(a0)
0001D1D2 317C 0100 0010             		move.w	#$100,obVelX(a0)
0001D1D8 317C FF00 0012             		move.w	#-$100,obVelY(a0)
0001D1DE 5438 F742                  		addq.b	#2,(v_dle_routine).w
0001D1E2                            
0001D1E2                            loc_1A070:
0001D1E2 6000 0000                  		bra.w	loc_1A166
0001D1E6                            ; ===========================================================================
0001D1E6                            
0001D1E6                            loc_1A074:
0001D1E6 08E8 0000 0022             		bset	#0,obStatus(a0)
0001D1EC 117C 0004 001C             		move.b	#4,obAnim(a0)
0001D1F2 4EB9 0000 F968             		jsr	(SpeedToPos).l
0001D1F8 0668 0010 0012             		addi.w	#$10,obVelY(a0)
0001D1FE 0C68 05A3 000C             		cmpi.w	#$5A3,obY(a0)
0001D204 6500                       		bcs.s	loc_1A09A
0001D206 317C FFC0 0012             		move.w	#-$40,obVelY(a0)
0001D20C                            
0001D20C                            loc_1A09A:
0001D20C 317C 0400 0010             		move.w	#$400,obVelX(a0)
0001D212 3028 0008                  		move.w	obX(a0),d0
0001D216 9078 D008                  		sub.w	(v_player+obX).w,d0
0001D21A 6A00                       		bpl.s	loc_1A0B4
0001D21C 317C 0500 0010             		move.w	#$500,obVelX(a0)
0001D222 6000 0000                  		bra.w	loc_1A0F2
0001D226                            ; ===========================================================================
0001D226                            
0001D226                            loc_1A0B4:
0001D226 0440 0070                  		subi.w	#$70,d0
0001D22A 6500                       		bcs.s	loc_1A0F2
0001D22C 0468 0100 0010             		subi.w	#$100,obVelX(a0)
0001D232 5140                       		subq.w	#8,d0
0001D234 6500                       		bcs.s	loc_1A0F2
0001D236 0468 0100 0010             		subi.w	#$100,obVelX(a0)
0001D23C 5140                       		subq.w	#8,d0
0001D23E 6500                       		bcs.s	loc_1A0F2
0001D240 0468 0080 0010             		subi.w	#$80,obVelX(a0)
0001D246 5140                       		subq.w	#8,d0
0001D248 6500                       		bcs.s	loc_1A0F2
0001D24A 0468 0080 0010             		subi.w	#$80,obVelX(a0)
0001D250 5140                       		subq.w	#8,d0
0001D252 6500                       		bcs.s	loc_1A0F2
0001D254 0468 0080 0010             		subi.w	#$80,obVelX(a0)
0001D25A 0440 0038                  		subi.w	#$38,d0
0001D25E 6500                       		bcs.s	loc_1A0F2
0001D260 4268 0010                  		clr.w	obVelX(a0)
0001D264                            
0001D264                            loc_1A0F2:
0001D264 0C68 26A0 0008             		cmpi.w	#$26A0,obX(a0)
0001D26A 6500                       		bcs.s	loc_1A110
0001D26C 317C 26A0 0008             		move.w	#$26A0,obX(a0)
0001D272 317C 0240 0010             		move.w	#$240,obVelX(a0)
0001D278 317C FB40 0012             		move.w	#-$4C0,obVelY(a0)
0001D27E 5428 0034                  		addq.b	#2,$34(a0)
0001D282                            
0001D282                            loc_1A110:
0001D282 6000                       		bra.s	loc_1A15C
0001D284                            ; ===========================================================================
0001D284                            
0001D284                            loc_1A112:
0001D284 4EB9 0000 F968             		jsr	(SpeedToPos).l
0001D28A 0C68 26E0 0008             		cmpi.w	#$26E0,obX(a0)
0001D290 6500                       		bcs.s	loc_1A124
0001D292 4268 0010                  		clr.w	obVelX(a0)
0001D296                            
0001D296                            loc_1A124:
0001D296 0668 0034 0012             		addi.w	#$34,obVelY(a0)
0001D29C 4A68 0012                  		tst.w	obVelY(a0)
0001D2A0 6B00                       		bmi.s	loc_1A142
0001D2A2 0C68 0592 000C             		cmpi.w	#$592,obY(a0)
0001D2A8 6500                       		bcs.s	loc_1A142
0001D2AA 317C 0592 000C             		move.w	#$592,obY(a0)
0001D2B0 4268 0012                  		clr.w	obVelY(a0)
0001D2B4                            
0001D2B4                            loc_1A142:
0001D2B4 3028 0010                  		move.w	obVelX(a0),d0
0001D2B8 8068 0012                  		or.w	obVelY(a0),d0
0001D2BC 6600                       		bne.s	loc_1A15C
0001D2BE 5428 0034                  		addq.b	#2,$34(a0)
0001D2C2 317C FE80 0012             		move.w	#-$180,obVelY(a0)
0001D2C8 117C 0001 0021             		move.b	#1,obColProp(a0)
0001D2CE                            
0001D2CE                            loc_1A15C:
0001D2CE 43FA F89C                  		lea	Ani_SEgg(pc),a1
0001D2D2 4EB9 0000 CA28             		jsr	(AnimateSprite).l
0001D2D8                            
0001D2D8                            loc_1A166:
0001D2D8 0C78 2700 F72A             		cmpi.w	#$2700,(v_limitright2).w
0001D2DE 6C00                       		bge.s	loc_1A172
0001D2E0 5478 F72A                  		addq.w	#2,(v_limitright2).w
0001D2E4                            
0001D2E4                            loc_1A172:
0001D2E4 0C28 000C 0034             		cmpi.b	#$C,$34(a0)
0001D2EA 6C00                       		bge.s	locret_1A190
0001D2EC 323C 001B                  		move.w	#$1B,d1
0001D2F0 343C 0070                  		move.w	#$70,d2
0001D2F4 363C 0071                  		move.w	#$71,d3
0001D2F8 3828 0008                  		move.w	obX(a0),d4
0001D2FC 4EF9 0001 1D8A             		jmp	(SolidObject).l
0001D302                            ; ===========================================================================
0001D302                            
0001D302                            locret_1A190:
0001D302 4E75                       		rts	
0001D304                            ; ===========================================================================
0001D304                            
0001D304                            loc_1A192:
0001D304 217C 0001 AE22 0004        		move.l	#Map_Eggman,obMap(a0)
0001D30C 317C 0400 0002             		move.w	#$400,obGfx(a0)
0001D312 117C 0000 001C             		move.b	#0,obAnim(a0)
0001D318 08E8 0000 0022             		bset	#0,obStatus(a0)
0001D31E 4EB9 0000 F968             		jsr	(SpeedToPos).l
0001D324 0C68 0544 000C             		cmpi.w	#$544,obY(a0)
0001D32A 6400                       		bcc.s	loc_1A1D0
0001D32C 317C 0180 0010             		move.w	#$180,obVelX(a0)
0001D332 317C FFE8 0012             		move.w	#-$18,obVelY(a0)
0001D338 117C 000F 0020             		move.b	#$F,obColType(a0)
0001D33E 5428 0034                  		addq.b	#2,$34(a0)
0001D342                            
0001D342                            loc_1A1D0:
0001D342 6000 FF8A                  		bra.w	loc_1A15C
0001D346                            ; ===========================================================================
0001D346                            
0001D346                            loc_1A1D4:
0001D346 08E8 0000 0022             		bset	#0,obStatus(a0)
0001D34C 4EB9 0000 F968             		jsr	(SpeedToPos).l
0001D352 4A68 0030                  		tst.w	$30(a0)
0001D356 6600                       		bne.s	loc_1A1FC
0001D358 4A28 0020                  		tst.b	obColType(a0)
0001D35C 6600                       		bne.s	loc_1A216
0001D35E 317C 001E 0030             		move.w	#$1E,$30(a0)
0001D364 4EB9 0000 0000             		jsr	(BossModeMusic).l ;	play boss damage sound
0001D36A                            
0001D36A                            loc_1A1FC:
0001D36A 5368 0030                  		subq.w	#1,$30(a0)
0001D36E 6600                       		bne.s	loc_1A216
0001D370 4A28 0022                  		tst.b	obStatus(a0)
0001D374 6A00                       		bpl.s	loc_1A210
0001D376 317C 0060 0012             		move.w	#$60,obVelY(a0)
0001D37C 6000                       		bra.s	loc_1A216
0001D37E                            ; ===========================================================================
0001D37E                            
0001D37E                            loc_1A210:
0001D37E 117C 000F 0020             		move.b	#$F,obColType(a0)
0001D384                            
0001D384                            loc_1A216:
0001D384 0C78 2790 D008             		cmpi.w	#$2790,(v_player+obX).w
0001D38A 6D00                       		blt.s	loc_1A23A
0001D38C 11FC 0001 F7CC             		move.b	#1,(f_lockctrl).w
0001D392 31FC 0000 F602             		move.w	#0,(v_jpadhold2).w
0001D398 4278 D020                  		clr.w	(v_player+obInertia).w
0001D39C 4A68 0012                  		tst.w	obVelY(a0)
0001D3A0 6A00                       		bpl.s	loc_1A248
0001D3A2 31FC 0100 F602             		move.w	#$100,(v_jpadhold2).w
0001D3A8                            
0001D3A8                            loc_1A23A:
0001D3A8 0C78 27E0 D008             		cmpi.w	#$27E0,(v_player+obX).w
0001D3AE 6D00                       		blt.s	loc_1A248
0001D3B0 31FC 27E0 D008             		move.w	#$27E0,(v_player+obX).w
0001D3B6                            
0001D3B6                            loc_1A248:
0001D3B6 0C68 2900 0008             		cmpi.w	#$2900,obX(a0)
0001D3BC 6500                       		bcs.s	loc_1A260
0001D3BE 4A28 0001                  		tst.b	obRender(a0)
0001D3C2 6B00                       		bmi.s	loc_1A260
0001D3C4 11FC 0018 F600             		move.b	#$18,(v_gamemode).w
0001D3CA 6000 FAF0                  		bra.w	Obj85_Delete
0001D3CE                            ; ===========================================================================
0001D3CE                            
0001D3CE                            loc_1A260:
0001D3CE 6000 FEFE                  		bra.w	loc_1A15C
0001D3D2                            ; ===========================================================================
0001D3D2                            
0001D3D2                            loc_1A264:	; Routine 4
0001D3D2 2268 0034                  		movea.l	$34(a0),a1
0001D3D6 1011                       		move.b	(a1),d0
0001D3D8 B010                       		cmp.b	(a0),d0
0001D3DA 6600 FAE0                  		bne.w	Obj85_Delete
0001D3DE 117C 0007 001C             		move.b	#7,obAnim(a0)
0001D3E4 0C29 000C 0034             		cmpi.b	#$C,$34(a1)
0001D3EA 6C00                       		bge.s	loc_1A280
0001D3EC 6000                       		bra.s	loc_1A2A6
0001D3EE                            ; ===========================================================================
0001D3EE                            
0001D3EE                            loc_1A280:
0001D3EE 4A69 0010                  		tst.w	obVelX(a1)
0001D3F2 6700                       		beq.s	loc_1A28C
0001D3F4 117C 000B 001C             		move.b	#$B,obAnim(a0)
0001D3FA                            
0001D3FA                            loc_1A28C:
0001D3FA 43FA D9D6                  		lea	Ani_Eggman(pc),a1
0001D3FE 4EB9 0000 CA28             		jsr	(AnimateSprite).l
0001D404                            
0001D404                            loc_1A296:
0001D404 2268 0034                  		movea.l	$34(a0),a1
0001D408 3169 0008 0008             		move.w	obX(a1),obX(a0)
0001D40E 3169 000C 000C             		move.w	obY(a1),obY(a0)
0001D414                            
0001D414                            loc_1A2A6:
0001D414 2268 0034                  		movea.l	$34(a0),a1
0001D418 1169 0022 0022             		move.b	obStatus(a1),obStatus(a0)
0001D41E 7003                       		moveq	#3,d0
0001D420 C028 0022                  		and.b	obStatus(a0),d0
0001D424 0228 00FC 0001             		andi.b	#$FC,obRender(a0)
0001D42A 8128 0001                  		or.b	d0,obRender(a0)
0001D42E 4EF9 0000 F97C             		jmp	(DisplaySprite).l
0001D434                            ; ===========================================================================
0001D434                            
0001D434                            loc_1A2C6:	; Routine 6
0001D434 2268 0034                  		movea.l	$34(a0),a1
0001D438 1011                       		move.b	(a1),d0
0001D43A B010                       		cmp.b	(a0),d0
0001D43C 6600 FA7E                  		bne.w	Obj85_Delete
0001D440 0CA9 0001 AE22 0004        		cmpi.l	#Map_Eggman,obMap(a1)
0001D448 6700                       		beq.s	loc_1A2E4
0001D44A 117C 000A 001A             		move.b	#$A,obFrame(a0)
0001D450 60C2                       		bra.s	loc_1A2A6
0001D452                            ; ===========================================================================
0001D452                            
0001D452                            loc_1A2E4:
0001D452 117C 0001 001C             		move.b	#1,obAnim(a0)
0001D458 4A29 0021                  		tst.b	obColProp(a1)
0001D45C 6F00                       		ble.s	loc_1A312
0001D45E 117C 0006 001C             		move.b	#6,obAnim(a0)
0001D464 217C 0001 AE22 0004        		move.l	#Map_Eggman,obMap(a0)
0001D46C 317C 0400 0002             		move.w	#$400,obGfx(a0)
0001D472 43FA D95E                  		lea	Ani_Eggman(pc),a1
0001D476 4EB9 0000 CA28             		jsr	(AnimateSprite).l
0001D47C 6000 FF86                  		bra.w	loc_1A296
0001D480                            ; ===========================================================================
0001D480                            
0001D480                            loc_1A312:
0001D480 4A28 0001                  		tst.b	1(a0)
0001D484 6A00 FA36                  		bpl.w	Obj85_Delete
0001D488 6100 D4F2                  		bsr.w	BossDefeated
0001D48C 317C 0100 0018             		move.w	#$100,obPriority(a0)
0001D492 117C 0000 001C             		move.b	#0,obAnim(a0)
0001D498 217C 0000 0000 0004        		move.l	#Map_FZDamaged,obMap(a0)
0001D4A0 317C 03A0 0002             		move.w	#$3A0,obGfx(a0)
0001D4A6 43FA 0000                  		lea	Ani_FZEgg(pc),a1
0001D4AA 4EB9 0000 CA28             		jsr	(AnimateSprite).l
0001D4B0 6000 FF52                  		bra.w	loc_1A296
0001D4B4                            ; ===========================================================================
0001D4B4                            
0001D4B4                            loc_1A346:	; Routine 8
0001D4B4 08E8 0000 0022             		bset	#0,obStatus(a0)
0001D4BA 2268 0034                  		movea.l	$34(a0),a1
0001D4BE 0CA9 0001 AE22 0004        		cmpi.l	#Map_Eggman,obMap(a1)
0001D4C6 6700                       		beq.s	loc_1A35E
0001D4C8 6000 FF4A                  		bra.w	loc_1A2A6
0001D4CC                            ; ===========================================================================
0001D4CC                            
0001D4CC                            loc_1A35E:
0001D4CC 3169 0008 0008             		move.w	obX(a1),obX(a0)
0001D4D2 3169 000C 000C             		move.w	obY(a1),obY(a0)
0001D4D8 4A28 001E                  		tst.b	obTimeFrame(a0)
0001D4DC 6600                       		bne.s	loc_1A376
0001D4DE 117C 0014 001E             		move.b	#$14,obTimeFrame(a0)
0001D4E4                            
0001D4E4                            loc_1A376:
0001D4E4 5328 001E                  		subq.b	#1,obTimeFrame(a0)
0001D4E8 6E00                       		bgt.s	loc_1A38A
0001D4EA 5228 001A                  		addq.b	#1,obFrame(a0)
0001D4EE 0C28 0002 001A             		cmpi.b	#2,obFrame(a0)
0001D4F4 6E00 F9C6                  		bgt.w	Obj85_Delete
0001D4F8                            
0001D4F8                            loc_1A38A:
0001D4F8 6000 FF0A                  		bra.w	loc_1A296
0001D4FC                            ; ===========================================================================
0001D4FC                            
0001D4FC                            loc_1A38E:	; Routine $A
0001D4FC 117C 000B 001A             		move.b	#$B,obFrame(a0)
0001D502 3038 D008                  		move.w	(v_player+obX).w,d0
0001D506 9068 0008                  		sub.w	obX(a0),d0
0001D50A 6500                       		bcs.s	loc_1A3A6
0001D50C 4A28 0001                  		tst.b	obRender(a0)
0001D510 6A00 F9AA                  		bpl.w	Obj85_Delete
0001D514                            
0001D514                            loc_1A3A6:
0001D514 4EF9 0000 F97C             		jmp	(DisplaySprite).l
0001D51A                            ; ===========================================================================
0001D51A                            
0001D51A                            loc_1A3AC:	; Routine $C
0001D51A 117C 0000 001A             		move.b	#0,obFrame(a0)
0001D520 08E8 0000 0022             		bset	#0,obStatus(a0)
0001D526 2268 0034                  		movea.l	$34(a0),a1
0001D52A 0C29 000C 0034             		cmpi.b	#$C,$34(a1)
0001D530 6600                       		bne.s	loc_1A3D0
0001D532 0CA9 0001 AE22 0004        		cmpi.l	#Map_Eggman,obMap(a1)
0001D53A 6700 F980                  		beq.w	Obj85_Delete
0001D53E                            
0001D53E                            loc_1A3D0:
0001D53E 6000 FED4                  		bra.w	loc_1A2A6
0001D542                            		
0001D542                            BossModeMusic:
0001D542 0C28 0001 0021             		cmpi.b	#1,obColProp(a0)
0001D548 6600 0000                  		bne.w	NormalMode
0001D54C 4EF9 0000 0000             		jmp	PinchMode
0001D552                            
0001D552                            NormalMode:
0001D552 303C 00AC                  		move.w	#$AC,d0
0001D556 4EB9 0000 1254             		jsr	(PlaySound_Special).l
0001D55C 4E75                       		rts
0001D55E                            
0001D55E                            PinchMode:
0001D55E 303C 0094                  		move.w	#$94,d0
0001D562 4EB9 0000 1254             		jsr	(PlaySound_Special).l
0001D568 303C 00E2                  		move.w	#$E2,d0
0001D56C 4EB9 0000 124E             		jsr	(PlaySound).l
0001D572 4E75                       		rts		
0001D572 4E75                       		rts		
0001D574                            		include	"_anim\FZ Eggman in Ship.asm"
0001D574                            ; ---------------------------------------------------------------------------
0001D574                            ; Animation script - Eggman (FZ)
0001D574                            ; ---------------------------------------------------------------------------
0001D574 0000                       Ani_FZEgg:	dc.w byte_1A3D6-Ani_FZEgg
0001D576 0300 01FF                  byte_1A3D6:	dc.b 3,	0, 1, afEnd
0001D57A                            		even
0001D57A                            		even
0001D57A                            Map_FZDamaged:	include	"_maps\FZ Damaged Eggmobile.asm"
0001D57A                            ; ---------------------------------------------------------------------------
0001D57A                            ; Sprite mappings - Eggman in broken eggmobile (FZ)
0001D57A                            ; ---------------------------------------------------------------------------
0001D57A                            Map_FZDamaged_internal:
0001D57A 0000                       		dc.w @damage1-Map_FZDamaged_internal
0001D57C 0000                       		dc.w @damage2-Map_FZDamaged_internal
0001D57E 06                         @damage1:	dc.b 6
0001D57F E408 0020 F4               		dc.b $E4, 8, 0,	$20, $F4
0001D584 EC0D 0023 E4               		dc.b $EC, $D, 0, $23, $E4
0001D589 EC09 002B 04               		dc.b $EC, 9, 0,	$2B, 4
0001D58E FC05 203A E4               		dc.b $FC, 5, $20, $3A, $E4
0001D593 FC0E 203E 04               		dc.b $FC, $E, $20, $3E,	4
0001D598 1404 204A 04               		dc.b $14, 4, $20, $4A, 4
0001D59D 06                         @damage2:	dc.b 6
0001D59E E40A 0031 F4               		dc.b $E4, $A, 0, $31, $F4
0001D5A3 EC05 0023 E4               		dc.b $EC, 5, 0,	$23, $E4
0001D5A8 EC09 002B 04               		dc.b $EC, 9, 0,	$2B, 4
0001D5AD FC05 203A E4               		dc.b $FC, 5, $20, $3A, $E4
0001D5B2 FC0E 203E 04               		dc.b $FC, $E, $20, $3E,	4
0001D5B7 1404 204A 04               		dc.b $14, 4, $20, $4A, 4
0001D5BC                            		even
0001D5BC                            		even
0001D5BC                            Map_FZLegs:	include	"_maps\FZ Eggmobile Legs.asm"
0001D5BC                            ; ---------------------------------------------------------------------------
0001D5BC                            ; Sprite mappings - legs on Eggman's escape ship (FZ)
0001D5BC                            ; ---------------------------------------------------------------------------
0001D5BC                            Map_FZLegs_internal:
0001D5BC 0000                       		dc.w @extended-Map_FZLegs_internal
0001D5BE 0000                       		dc.w @halfway-Map_FZLegs_internal
0001D5C0 0000                       		dc.w @retracted-Map_FZLegs_internal
0001D5C2 02                         @extended:	dc.b 2
0001D5C3 140E 2800 F4               		dc.b $14, $E, $28, 0, $F4
0001D5C8 2400 280C EC               		dc.b $24, 0, $28, $C, $EC
0001D5CD 03                         @halfway:	dc.b 3
0001D5CE 0C05 280D 0C               		dc.b $C, 5, $28, $D, $C
0001D5D3 1C00 2811 0C               		dc.b $1C, 0, $28, $11, $C
0001D5D8 140D 2812 EC               		dc.b $14, $D, $28, $12,	$EC
0001D5DD 02                         @retracted:	dc.b 2
0001D5DE 0C01 281A 0C               		dc.b $C, 1, $28, $1A, $C
0001D5E3 140C 281C EC               		dc.b $14, $C, $28, $1C,	$EC
0001D5E8                            		even
0001D5E8                            		even
0001D5E8                            		include	"_incObj\84 FZ Eggman's Cylinders.asm"
0001D5E8                            ; ---------------------------------------------------------------------------
0001D5E8                            ; Object 84 - cylinder Eggman hides in (FZ)
0001D5E8                            ; ---------------------------------------------------------------------------
0001D5E8                            
0001D5E8                            Obj84_Delete:
0001D5E8 4EF9 0000 F9BC             		jmp	(DeleteObject).l
0001D5EE                            ; ===========================================================================
0001D5EE                            
0001D5EE                            EggmanCylinder:
0001D5EE 7000                       		moveq	#0,d0
0001D5F0 1028 0024                  		move.b	obRoutine(a0),d0
0001D5F4 303B 0000                  		move.w	Obj84_Index(pc,d0.w),d0
0001D5F8 4EFB 0000                  		jmp	Obj84_Index(pc,d0.w)
0001D5FC                            ; ===========================================================================
0001D5FC 0000                       Obj84_Index:	dc.w Obj84_Main-Obj84_Index
0001D5FE 0000                       		dc.w loc_1A4CE-Obj84_Index
0001D600 0000                       		dc.w loc_1A57E-Obj84_Index
0001D602                            
0001D602 24D0 0620                  Obj84_PosData:	dc.w $24D0, $620
0001D606 2550 0620                  		dc.w $2550, $620
0001D60A 2490 04C0                  		dc.w $2490, $4C0
0001D60E 2510 04C0                  		dc.w $2510, $4C0
0001D612                            ; ===========================================================================
0001D612                            
0001D612                            Obj84_Main:	; Routine
0001D612 43FA FFEE                  		lea	Obj84_PosData(pc),a1
0001D616 7000                       		moveq	#0,d0
0001D618 1028 0028                  		move.b	obSubtype(a0),d0
0001D61C D040                       		add.w	d0,d0
0001D61E D2C0                       		adda.w	d0,a1
0001D620 117C 0004 0001             		move.b	#4,obRender(a0)
0001D626 08E8 0007 0001             		bset	#7,obRender(a0)
0001D62C 08E8 0004 0001             		bset	#4,obRender(a0)
0001D632 317C 0300 0002             		move.w	#$300,obGfx(a0)
0001D638 217C 0000 0000 0004        		move.l	#Map_EggCyl,obMap(a0)
0001D640 3159 0008                  		move.w	(a1)+,obX(a0)
0001D644 3151 000C                  		move.w	(a1),obY(a0)
0001D648 3159 0038                  		move.w	(a1)+,$38(a0)
0001D64C 117C 0020 0016             		move.b	#$20,obHeight(a0)
0001D652 117C 0060 0017             		move.b	#$60,obWidth(a0)
0001D658 117C 0020 0014             		move.b	#$20,obActWid(a0)
0001D65E 117C 0060 0016             		move.b	#$60,obHeight(a0)
0001D664 317C 0180 0018             		move.w	#$180,obPriority(a0)
0001D66A 5428 0024                  		addq.b	#2,obRoutine(a0)
0001D66E                            
0001D66E                            loc_1A4CE:	; Routine 2
0001D66E 0C28 0002 0028             		cmpi.b	#2,obSubtype(a0)
0001D674 6F00                       		ble.s	loc_1A4DC
0001D676 08E8 0001 0001             		bset	#1,obRender(a0)
0001D67C                            
0001D67C                            loc_1A4DC:
0001D67C 42A8 003C                  		clr.l	$3C(a0)
0001D680 4A28 0029                  		tst.b	$29(a0)
0001D684 6700                       		beq.s	loc_1A4EA
0001D686 5428 0024                  		addq.b	#2,obRoutine(a0)
0001D68A                            
0001D68A                            loc_1A4EA:
0001D68A 2028 003C                  		move.l	$3C(a0),d0
0001D68E 2228 0038                  		move.l	$38(a0),d1
0001D692 D280                       		add.l	d0,d1
0001D694 4841                       		swap	d1
0001D696 3141 000C                  		move.w	d1,obY(a0)
0001D69A 0C28 0004 0024             		cmpi.b	#4,obRoutine(a0)
0001D6A0 6600                       		bne.s	loc_1A524
0001D6A2 4A68 0030                  		tst.w	$30(a0)
0001D6A6 6A00                       		bpl.s	loc_1A524
0001D6A8 70F6                       		moveq	#-$A,d0
0001D6AA 0C28 0002 0028             		cmpi.b	#2,obSubtype(a0)
0001D6B0 6F00                       		ble.s	loc_1A514
0001D6B2 700E                       		moveq	#$E,d0
0001D6B4                            
0001D6B4                            loc_1A514:
0001D6B4 D240                       		add.w	d0,d1
0001D6B6 2268 0034                  		movea.l	$34(a0),a1
0001D6BA 3341 000C                  		move.w	d1,obY(a1)
0001D6BE 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001D6C4                            
0001D6C4                            loc_1A524:
0001D6C4 323C 002B                  		move.w	#$2B,d1
0001D6C8 343C 0060                  		move.w	#$60,d2
0001D6CC 363C 0061                  		move.w	#$61,d3
0001D6D0 3828 0008                  		move.w	obX(a0),d4
0001D6D4 4EB9 0001 1D8A             		jsr	(SolidObject).l
0001D6DA 7000                       		moveq	#0,d0
0001D6DC 3228 003C                  		move.w	$3C(a0),d1
0001D6E0 6A00                       		bpl.s	loc_1A550
0001D6E2 4441                       		neg.w	d1
0001D6E4 5141                       		subq.w	#8,d1
0001D6E6 6500                       		bcs.s	loc_1A55C
0001D6E8 5200                       		addq.b	#1,d0
0001D6EA E841                       		asr.w	#4,d1
0001D6EC D041                       		add.w	d1,d0
0001D6EE 6000                       		bra.s	loc_1A55C
0001D6F0                            ; ===========================================================================
0001D6F0                            
0001D6F0                            loc_1A550:
0001D6F0 0441 0027                  		subi.w	#$27,d1
0001D6F4 6500                       		bcs.s	loc_1A55C
0001D6F6 5200                       		addq.b	#1,d0
0001D6F8 E841                       		asr.w	#4,d1
0001D6FA D041                       		add.w	d1,d0
0001D6FC                            
0001D6FC                            loc_1A55C:
0001D6FC 1140 001A                  		move.b	d0,obFrame(a0)
0001D700 3038 D008                  		move.w	(v_player+obX).w,d0
0001D704 9068 0008                  		sub.w	obX(a0),d0
0001D708 6B00                       		bmi.s	loc_1A578
0001D70A 0440 0140                  		subi.w	#$140,d0
0001D70E 6B00                       		bmi.s	loc_1A578
0001D710 4A28 0001                  		tst.b	obRender(a0)
0001D714 6A00 FED2                  		bpl.w	Obj84_Delete
0001D718                            
0001D718                            loc_1A578:
0001D718 4EF9 0000 F97C             		jmp	(DisplaySprite).l
0001D71E                            ; ===========================================================================
0001D71E                            
0001D71E                            loc_1A57E:	; Routine 4
0001D71E 7000                       		moveq	#0,d0
0001D720 1028 0028                  		move.b	obSubtype(a0),d0
0001D724 303B 0000                  		move.w	off_1A590(pc,d0.w),d0
0001D728 4EBB 0000                  		jsr	off_1A590(pc,d0.w)
0001D72C 6000 FF5C                  		bra.w	loc_1A4EA
0001D730                            ; ===========================================================================
0001D730 0000                       off_1A590:	dc.w loc_1A598-off_1A590
0001D732 0000                       		dc.w loc_1A598-off_1A590
0001D734 0000                       		dc.w loc_1A604-off_1A590
0001D736 0000                       		dc.w loc_1A604-off_1A590
0001D738                            ; ===========================================================================
0001D738                            
0001D738                            loc_1A598:
0001D738 4A28 0029                  		tst.b	$29(a0)
0001D73C 6600                       		bne.s	loc_1A5D4
0001D73E 2268 0034                  		movea.l	$34(a0),a1
0001D742 4A29 0021                  		tst.b	obColProp(a1)
0001D746 6600                       		bne.s	loc_1A5B4
0001D748 6100 D232                  		bsr.w	BossDefeated
0001D74C 04A8 0001 0000 003C        		subi.l	#$10000,$3C(a0)
0001D754                            
0001D754                            loc_1A5B4:
0001D754 06A8 0002 0000 003C        		addi.l	#$20000,$3C(a0)
0001D75C 6400                       		bcc.s	locret_1A602
0001D75E 42A8 003C                  		clr.l	$3C(a0)
0001D762 2268 0034                  		movea.l	$34(a0),a1
0001D766 5369 0032                  		subq.w	#1,$32(a1)
0001D76A 4269 0030                  		clr.w	$30(a1)
0001D76E 5528 0024                  		subq.b	#2,obRoutine(a0)
0001D772 4E75                       		rts	
0001D774                            ; ===========================================================================
0001D774                            
0001D774                            loc_1A5D4:
0001D774 0C68 FFF0 003C             		cmpi.w	#-$10,$3C(a0)
0001D77A 6C00                       		bge.s	loc_1A5E4
0001D77C 04A8 0002 8000 003C        		subi.l	#$28000,$3C(a0)
0001D784                            
0001D784                            loc_1A5E4:
0001D784 04A8 0000 8000 003C        		subi.l	#$8000,$3C(a0)
0001D78C 0C68 FF60 003C             		cmpi.w	#-$A0,$3C(a0)
0001D792 6E00                       		bgt.s	locret_1A602
0001D794 4268 003E                  		clr.w	$3E(a0)
0001D798 317C FF60 003C             		move.w	#-$A0,$3C(a0)
0001D79E 4228 0029                  		clr.b	$29(a0)
0001D7A2                            
0001D7A2                            locret_1A602:
0001D7A2 4E75                       		rts	
0001D7A4                            ; ===========================================================================
0001D7A4                            
0001D7A4                            loc_1A604:
0001D7A4 08E8 0001 0001             		bset	#1,obRender(a0)
0001D7AA 4A28 0029                  		tst.b	$29(a0)
0001D7AE 6600                       		bne.s	loc_1A646
0001D7B0 2268 0034                  		movea.l	$34(a0),a1
0001D7B4 4A29 0021                  		tst.b	obColProp(a1)
0001D7B8 6600                       		bne.s	loc_1A626
0001D7BA 6100 D1C0                  		bsr.w	BossDefeated
0001D7BE 06A8 0001 0000 003C        		addi.l	#$10000,$3C(a0)
0001D7C6                            
0001D7C6                            loc_1A626:
0001D7C6 04A8 0002 0000 003C        		subi.l	#$20000,$3C(a0)
0001D7CE 6400                       		bcc.s	locret_1A674
0001D7D0 42A8 003C                  		clr.l	$3C(a0)
0001D7D4 2268 0034                  		movea.l	$34(a0),a1
0001D7D8 5369 0032                  		subq.w	#1,$32(a1)
0001D7DC 4269 0030                  		clr.w	$30(a1)
0001D7E0 5528 0024                  		subq.b	#2,obRoutine(a0)
0001D7E4 4E75                       		rts	
0001D7E6                            ; ===========================================================================
0001D7E6                            
0001D7E6                            loc_1A646:
0001D7E6 0C68 0010 003C             		cmpi.w	#$10,$3C(a0)
0001D7EC 6D00                       		blt.s	loc_1A656
0001D7EE 06A8 0002 8000 003C        		addi.l	#$28000,$3C(a0)
0001D7F6                            
0001D7F6                            loc_1A656:
0001D7F6 06A8 0000 8000 003C        		addi.l	#$8000,$3C(a0)
0001D7FE 0C68 00A0 003C             		cmpi.w	#$A0,$3C(a0)
0001D804 6D00                       		blt.s	locret_1A674
0001D806 4268 003E                  		clr.w	$3E(a0)
0001D80A 317C 00A0 003C             		move.w	#$A0,$3C(a0)
0001D810 4228 0029                  		clr.b	$29(a0)
0001D814                            
0001D814                            locret_1A674:
0001D814 4E75                       		rts	
0001D814 4E75                       		rts	
0001D816                            Map_EggCyl:	include	"_maps\FZ Eggman's Cylinders.asm"
0001D816                            ; --------------------------------------------------------------------------------
0001D816                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0001D816                            ; --------------------------------------------------------------------------------
0001D816                            
0001D816                            SME_SCUpI:	
0001D816 0000 0000                  		dc.w SME_SCUpI_18-SME_SCUpI, SME_SCUpI_37-SME_SCUpI	
0001D81A 0000 0000                  		dc.w SME_SCUpI_60-SME_SCUpI, SME_SCUpI_93-SME_SCUpI	
0001D81E 0000 0000                  		dc.w SME_SCUpI_D0-SME_SCUpI, SME_SCUpI_112-SME_SCUpI	
0001D822 0000 0000                  		dc.w SME_SCUpI_159-SME_SCUpI, SME_SCUpI_1A0-SME_SCUpI	
0001D826 0000 0000                  		dc.w SME_SCUpI_1E7-SME_SCUpI, SME_SCUpI_22E-SME_SCUpI	
0001D82A 0000 0000                  		dc.w SME_SCUpI_275-SME_SCUpI, SME_SCUpI_2BC-SME_SCUpI	
0001D82E 06                         SME_SCUpI_18:	dc.b 6	
0001D82F A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0	
0001D834 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0	
0001D839 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0	
0001D83E B80F 4010 E0               		dc.b $B8, $F, $40, $10, $E0	
0001D843 B80F 4810 00               		dc.b $B8, $F, $48, $10, 0	
0001D848 A00D 4060 00               		dc.b $A0, $D, $40, $60, 0	
0001D84D 08                         SME_SCUpI_37:	dc.b 8	
0001D84E A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0	
0001D853 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0	
0001D858 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0	
0001D85D B80F 4010 E0               		dc.b $B8, $F, $40, $10, $E0	
0001D862 B80F 4810 00               		dc.b $B8, $F, $48, $10, 0	
0001D867 D80F 4020 E0               		dc.b $D8, $F, $40, $20, $E0	
0001D86C D80F 4820 00               		dc.b $D8, $F, $48, $20, 0	
0001D871 A00D 4060 00               		dc.b $A0, $D, $40, $60, 0	
0001D876 0A                         SME_SCUpI_60:	dc.b $A	
0001D877 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0	
0001D87C B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0	
0001D881 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0	
0001D886 B80F 4010 E0               		dc.b $B8, $F, $40, $10, $E0	
0001D88B B80F 4810 00               		dc.b $B8, $F, $48, $10, 0	
0001D890 D80F 4020 E0               		dc.b $D8, $F, $40, $20, $E0	
0001D895 D80F 4820 00               		dc.b $D8, $F, $48, $20, 0	
0001D89A F80F 4030 E0               		dc.b $F8, $F, $40, $30, $E0	
0001D89F F80F 4830 00               		dc.b $F8, $F, $48, $30, 0	
0001D8A4 A00D 4060 00               		dc.b $A0, $D, $40, $60, 0	
0001D8A9 0C                         SME_SCUpI_93:	dc.b $C	
0001D8AA A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0	
0001D8AF B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0	
0001D8B4 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0	
0001D8B9 B80F 4010 E0               		dc.b $B8, $F, $40, $10, $E0	
0001D8BE B80F 4810 00               		dc.b $B8, $F, $48, $10, 0	
0001D8C3 D80F 4020 E0               		dc.b $D8, $F, $40, $20, $E0	
0001D8C8 D80F 4820 00               		dc.b $D8, $F, $48, $20, 0	
0001D8CD F80F 4030 E0               		dc.b $F8, $F, $40, $30, $E0	
0001D8D2 F80F 4830 00               		dc.b $F8, $F, $48, $30, 0	
0001D8D7 180F 4040 E0               		dc.b $18, $F, $40, $40, $E0	
0001D8DC 180F 4840 00               		dc.b $18, $F, $48, $40, 0	
0001D8E1 A00D 4060 00               		dc.b $A0, $D, $40, $60, 0	
0001D8E6 0D                         SME_SCUpI_D0:	dc.b $D	
0001D8E7 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0	
0001D8EC B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0	
0001D8F1 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0	
0001D8F6 B80F 4010 E0               		dc.b $B8, $F, $40, $10, $E0	
0001D8FB B80F 4810 00               		dc.b $B8, $F, $48, $10, 0	
0001D900 D80F 4020 E0               		dc.b $D8, $F, $40, $20, $E0	
0001D905 D80F 4820 00               		dc.b $D8, $F, $48, $20, 0	
0001D90A F80F 4030 E0               		dc.b $F8, $F, $40, $30, $E0	
0001D90F F80F 4830 00               		dc.b $F8, $F, $48, $30, 0	
0001D914 180F 4040 E0               		dc.b $18, $F, $40, $40, $E0	
0001D919 180F 4840 00               		dc.b $18, $F, $48, $40, 0	
0001D91E 380F 4050 F0               		dc.b $38, $F, $40, $50, $F0	
0001D923 A00D 4060 00               		dc.b $A0, $D, $40, $60, 0	
0001D928 0E                         SME_SCUpI_112:	dc.b $E	
0001D929 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0	
0001D92E B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0	
0001D933 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0	
0001D938 B80F 4010 E0               		dc.b $B8, $F, $40, $10, $E0	
0001D93D B80F 4810 00               		dc.b $B8, $F, $48, $10, 0	
0001D942 D80F 4020 E0               		dc.b $D8, $F, $40, $20, $E0	
0001D947 D80F 4820 00               		dc.b $D8, $F, $48, $20, 0	
0001D94C F80F 4030 E0               		dc.b $F8, $F, $40, $30, $E0	
0001D951 F80F 4830 00               		dc.b $F8, $F, $48, $30, 0	
0001D956 180F 4040 E0               		dc.b $18, $F, $40, $40, $E0	
0001D95B 180F 4840 00               		dc.b $18, $F, $48, $40, 0	
0001D960 380F 4050 F0               		dc.b $38, $F, $40, $50, $F0	
0001D965 580F 4050 F0               		dc.b $58, $F, $40, $50, $F0	
0001D96A A00D 4060 00               		dc.b $A0, $D, $40, $60, 0	
0001D96F 0E                         SME_SCUpI_159:	dc.b $E	
0001D970 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0	
0001D975 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0	
0001D97A B00C 200C 00               		dc.b $B0, $C, $20, $C, 0	
0001D97F B80F 4010 E0               		dc.b $B8, $F, $40, $10, $E0	
0001D984 B80F 4810 00               		dc.b $B8, $F, $48, $10, 0	
0001D989 D80F 4020 E0               		dc.b $D8, $F, $40, $20, $E0	
0001D98E D80F 4820 00               		dc.b $D8, $F, $48, $20, 0	
0001D993 F80F 4030 E0               		dc.b $F8, $F, $40, $30, $E0	
0001D998 F80F 4830 00               		dc.b $F8, $F, $48, $30, 0	
0001D99D 180F 4040 E0               		dc.b $18, $F, $40, $40, $E0	
0001D9A2 180F 4840 00               		dc.b $18, $F, $48, $40, 0	
0001D9A7 380F 4050 F0               		dc.b $38, $F, $40, $50, $F0	
0001D9AC 580F 4050 F0               		dc.b $58, $F, $40, $50, $F0	
0001D9B1 A00D 4060 00               		dc.b $A0, $D, $40, $60, 0	
0001D9B6 0E                         SME_SCUpI_1A0:	dc.b $E	
0001D9B7 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0	
0001D9BC B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0	
0001D9C1 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0	
0001D9C6 B80F 4010 E0               		dc.b $B8, $F, $40, $10, $E0	
0001D9CB B80F 4810 00               		dc.b $B8, $F, $48, $10, 0	
0001D9D0 D80F 4020 E0               		dc.b $D8, $F, $40, $20, $E0	
0001D9D5 D80F 4820 00               		dc.b $D8, $F, $48, $20, 0	
0001D9DA F80F 4030 E0               		dc.b $F8, $F, $40, $30, $E0	
0001D9DF F80F 4830 00               		dc.b $F8, $F, $48, $30, 0	
0001D9E4 180F 4040 E0               		dc.b $18, $F, $40, $40, $E0	
0001D9E9 180F 4840 00               		dc.b $18, $F, $48, $40, 0	
0001D9EE 380F 4050 F0               		dc.b $38, $F, $40, $50, $F0	
0001D9F3 580F 4050 F0               		dc.b $58, $F, $40, $50, $F0	
0001D9F8 A00D 4060 00               		dc.b $A0, $D, $40, $60, 0	
0001D9FD 0E                         SME_SCUpI_1E7:	dc.b $E	
0001D9FE A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0	
0001DA03 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0	
0001DA08 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0	
0001DA0D B80F 4010 E0               		dc.b $B8, $F, $40, $10, $E0	
0001DA12 B80F 4810 00               		dc.b $B8, $F, $48, $10, 0	
0001DA17 D80F 4020 E0               		dc.b $D8, $F, $40, $20, $E0	
0001DA1C D80F 4820 00               		dc.b $D8, $F, $48, $20, 0	
0001DA21 F80F 4030 E0               		dc.b $F8, $F, $40, $30, $E0	
0001DA26 F80F 4830 00               		dc.b $F8, $F, $48, $30, 0	
0001DA2B 180F 4040 E0               		dc.b $18, $F, $40, $40, $E0	
0001DA30 180F 4840 00               		dc.b $18, $F, $48, $40, 0	
0001DA35 380F 4050 F0               		dc.b $38, $F, $40, $50, $F0	
0001DA3A 580F 4050 F0               		dc.b $58, $F, $40, $50, $F0	
0001DA3F A00D 4060 00               		dc.b $A0, $D, $40, $60, 0	
0001DA44 0E                         SME_SCUpI_22E:	dc.b $E	
0001DA45 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0	
0001DA4A B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0	
0001DA4F B00C 200C 00               		dc.b $B0, $C, $20, $C, 0	
0001DA54 B80F 4010 E0               		dc.b $B8, $F, $40, $10, $E0	
0001DA59 B80F 4810 00               		dc.b $B8, $F, $48, $10, 0	
0001DA5E D80F 4020 E0               		dc.b $D8, $F, $40, $20, $E0	
0001DA63 D80F 4820 00               		dc.b $D8, $F, $48, $20, 0	
0001DA68 F80F 4030 E0               		dc.b $F8, $F, $40, $30, $E0	
0001DA6D F80F 4830 00               		dc.b $F8, $F, $48, $30, 0	
0001DA72 180F 4040 E0               		dc.b $18, $F, $40, $40, $E0	
0001DA77 180F 4840 00               		dc.b $18, $F, $48, $40, 0	
0001DA7C 380F 4050 F0               		dc.b $38, $F, $40, $50, $F0	
0001DA81 580F 4050 F0               		dc.b $58, $F, $40, $50, $F0	
0001DA86 A00D 4060 00               		dc.b $A0, $D, $40, $60, 0	
0001DA8B 0E                         SME_SCUpI_275:	dc.b $E	
0001DA8C A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0	
0001DA91 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0	
0001DA96 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0	
0001DA9B B80F 4010 E0               		dc.b $B8, $F, $40, $10, $E0	
0001DAA0 B80F 4810 00               		dc.b $B8, $F, $48, $10, 0	
0001DAA5 D80F 4020 E0               		dc.b $D8, $F, $40, $20, $E0	
0001DAAA D80F 4820 00               		dc.b $D8, $F, $48, $20, 0	
0001DAAF F80F 4030 E0               		dc.b $F8, $F, $40, $30, $E0	
0001DAB4 F80F 4830 00               		dc.b $F8, $F, $48, $30, 0	
0001DAB9 180F 4040 E0               		dc.b $18, $F, $40, $40, $E0	
0001DABE 180F 4840 00               		dc.b $18, $F, $48, $40, 0	
0001DAC3 380F 4050 F0               		dc.b $38, $F, $40, $50, $F0	
0001DAC8 580F 4050 F0               		dc.b $58, $F, $40, $50, $F0	
0001DACD A00D 4060 00               		dc.b $A0, $D, $40, $60, 0	
0001DAD2 02                         SME_SCUpI_2BC:	dc.b 2	
0001DAD3 F804 0068 F0               		dc.b $F8, 4, 0, $68, $F0	
0001DAD8 000C 006A F0               		dc.b 0, $C, 0, $6A, $F0	
0001DADE 00                         		even
0001DADE 00                         		even
0001DADE                            		include	"_incObj\86 FZ Plasma Ball Launcher.asm"
0001DADE                            ; ---------------------------------------------------------------------------
0001DADE                            ; Object 86 - energy balls (FZ)
0001DADE                            ; ---------------------------------------------------------------------------
0001DADE                            
0001DADE                            BossPlasma:
0001DADE 7000                       		moveq	#0,d0
0001DAE0 1028 0024                  		move.b	obRoutine(a0),d0
0001DAE4 303B 0000                  		move.w	Obj86_Index(pc,d0.w),d0
0001DAE8 4EFB 0000                  		jmp	Obj86_Index(pc,d0.w)
0001DAEC                            ; ===========================================================================
0001DAEC 0000                       Obj86_Index:	dc.w Obj86_Main-Obj86_Index
0001DAEE 0000                       		dc.w Obj86_Generator-Obj86_Index
0001DAF0 0000                       		dc.w Obj86_MakeBalls-Obj86_Index
0001DAF2 0000                       		dc.w loc_1A962-Obj86_Index
0001DAF4 0000                       		dc.w loc_1A982-Obj86_Index
0001DAF6                            ; ===========================================================================
0001DAF6                            
0001DAF6                            Obj86_Main:	; Routine 0
0001DAF6 317C 2588 0008             		move.w	#$2588,obX(a0)
0001DAFC 317C 053C 000C             		move.w	#$53C,obY(a0)
0001DB02 317C 0300 0002             		move.w	#$300,obGfx(a0)
0001DB08 217C 0000 0000 0004        		move.l	#Map_PLaunch,obMap(a0)
0001DB10 117C 0000 001C             		move.b	#0,obAnim(a0)
0001DB16 317C 0180 0018             		move.w	#$180,obPriority(a0)
0001DB1C 117C 0008 0017             		move.b	#8,obWidth(a0)
0001DB22 117C 0008 0016             		move.b	#8,obHeight(a0)
0001DB28 117C 0004 0001             		move.b	#4,obRender(a0)
0001DB2E 08E8 0007 0001             		bset	#7,obRender(a0)
0001DB34 5428 0024                  		addq.b	#2,obRoutine(a0)
0001DB38                            
0001DB38                            Obj86_Generator:; Routine 2
0001DB38 2268 0034                  		movea.l	$34(a0),a1
0001DB3C 0C29 0006 0034             		cmpi.b	#6,$34(a1)
0001DB42 6600                       		bne.s	loc_1A850
0001DB44 10BC 003F                  		move.b	#id_ExplosionBomb,(a0)
0001DB48 117C 0000 0024             		move.b	#0,obRoutine(a0)
0001DB4E 4EF9 0000 F97C             		jmp	(DisplaySprite).l
0001DB54                            ; ===========================================================================
0001DB54                            
0001DB54                            loc_1A850:
0001DB54 117C 0000 001C             		move.b	#0,obAnim(a0)
0001DB5A 4A28 0029                  		tst.b	$29(a0)
0001DB5E 6700                       		beq.s	loc_1A86C
0001DB60 5428 0024                  		addq.b	#2,obRoutine(a0)
0001DB64 117C 0001 001C             		move.b	#1,obAnim(a0)
0001DB6A 117C 003E 0028             		move.b	#$3E,obSubtype(a0)
0001DB70                            
0001DB70                            loc_1A86C:
0001DB70 323C 0013                  		move.w	#$13,d1
0001DB74 343C 0008                  		move.w	#8,d2
0001DB78 363C 0011                  		move.w	#$11,d3
0001DB7C 3828 0008                  		move.w	obX(a0),d4
0001DB80 4EB9 0001 1D8A             		jsr	(SolidObject).l
0001DB86 3038 D008                  		move.w	(v_player+obX).w,d0
0001DB8A 9068 0008                  		sub.w	obX(a0),d0
0001DB8E 6B00                       		bmi.s	loc_1A89A
0001DB90 0440 0140                  		subi.w	#$140,d0
0001DB94 6B00                       		bmi.s	loc_1A89A
0001DB96 4A28 0001                  		tst.b	obRender(a0)
0001DB9A 6A00 FA4C                  		bpl.w	Obj84_Delete
0001DB9E                            
0001DB9E                            loc_1A89A:
0001DB9E 43FA 0000                  		lea	Ani_PLaunch(pc),a1
0001DBA2 4EB9 0000 CA28             		jsr	(AnimateSprite).l
0001DBA8 4EF9 0000 F97C             		jmp	(DisplaySprite).l
0001DBAE                            ; ===========================================================================
0001DBAE                            
0001DBAE                            Obj86_MakeBalls:; Routine 4
0001DBAE 4A28 0029                  		tst.b	$29(a0)
0001DBB2 6700 0000                  		beq.w	loc_1A954
0001DBB6 4228 0029                  		clr.b	$29(a0)
0001DBBA D068 0030                  		add.w	$30(a0),d0
0001DBBE 0240 001E                  		andi.w	#$1E,d0
0001DBC2 D4C0                       		adda.w	d0,a2
0001DBC4 5868 0030                  		addq.w	#4,$30(a0)
0001DBC8 4268 0032                  		clr.w	$32(a0)
0001DBCC 7403                       		moveq	#3,d2
0001DBCE                            
0001DBCE                            Obj86_Loop:
0001DBCE 4EB9 0000 FE1E             		jsr	(FindNextFreeObj).l
0001DBD4 6600 0000                  		bne.w	loc_1A954
0001DBD8 12BC 0086                  		move.b	#id_BossPlasma,(a1)
0001DBDC 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001DBE2 337C 053C 000C             		move.w	#$53C,obY(a1)
0001DBE8 137C 0008 0024             		move.b	#8,obRoutine(a1)
0001DBEE 337C 2300 0002             		move.w	#$2300,obGfx(a1)
0001DBF4 237C 0000 0000 0004        		move.l	#Map_Plasma,obMap(a1)
0001DBFC 137C 000C 0016             		move.b	#$C,obHeight(a1)
0001DC02 137C 000C 0017             		move.b	#$C,obWidth(a1)
0001DC08 137C 0000 0020             		move.b	#0,obColType(a1)
0001DC0E 337C 0180 0018             		move.w	#$180,obPriority(a1)
0001DC14 337C 003E 0028             		move.w	#$3E,obSubtype(a1)
0001DC1A 137C 0004 0001             		move.b	#4,obRender(a1)
0001DC20 08E9 0007 0001             		bset	#7,obRender(a1)
0001DC26 2348 0034                  		move.l	a0,$34(a1)
0001DC2A 4EB9 0000 3A10             		jsr	(RandomNumber).l
0001DC30 3228 0032                  		move.w	$32(a0),d1
0001DC34 C3FC FFB1                  		muls.w	#-$4F,d1
0001DC38 0641 2578                  		addi.w	#$2578,d1
0001DC3C 0240 001F                  		andi.w	#$1F,d0
0001DC40 0440 0010                  		subi.w	#$10,d0
0001DC44 D041                       		add.w	d1,d0
0001DC46 3340 0030                  		move.w	d0,$30(a1)
0001DC4A 5268 0032                  		addq.w	#1,$32(a0)
0001DC4E 3168 0032 0038             		move.w	$32(a0),$38(a0)
0001DC54 51CA FF78                  		dbf	d2,Obj86_Loop	; repeat sequence 3 more times
0001DC58                            
0001DC58                            loc_1A954:
0001DC58 4A68 0032                  		tst.w	$32(a0)
0001DC5C 6600                       		bne.s	loc_1A95E
0001DC5E 5428 0024                  		addq.b	#2,obRoutine(a0)
0001DC62                            
0001DC62                            loc_1A95E:
0001DC62 6000 FF0C                  		bra.w	loc_1A86C
0001DC66                            ; ===========================================================================
0001DC66                            
0001DC66                            loc_1A962:	; Routine 6
0001DC66 117C 0002 001C             		move.b	#2,obAnim(a0)
0001DC6C 4A68 0038                  		tst.w	$38(a0)
0001DC70 6600                       		bne.s	loc_1A97E
0001DC72 117C 0002 0024             		move.b	#2,obRoutine(a0)
0001DC78 2268 0034                  		movea.l	$34(a0),a1
0001DC7C 337C FFFF 0032             		move.w	#-1,$32(a1)
0001DC82                            
0001DC82                            loc_1A97E:
0001DC82 6000 FEEC                  		bra.w	loc_1A86C
0001DC86                            ; ===========================================================================
0001DC86                            
0001DC86                            loc_1A982:	; Routine 8
0001DC86 7000                       		moveq	#0,d0
0001DC88 1028 0025                  		move.b	ob2ndRout(a0),d0
0001DC8C 303B 0000                  		move.w	Obj86_Index2(pc,d0.w),d0
0001DC90 4EBB 0000                  		jsr	Obj86_Index2(pc,d0.w)
0001DC94 43FA 0000                  		lea	Ani_Plasma(pc),a1
0001DC98 4EB9 0000 CA28             		jsr	(AnimateSprite).l
0001DC9E 4EF9 0000 F97C             		jmp	(DisplaySprite).l
0001DCA4                            ; ===========================================================================
0001DCA4 0000                       Obj86_Index2:	dc.w loc_1A9A6-Obj86_Index2
0001DCA6 0000                       		dc.w loc_1A9C0-Obj86_Index2
0001DCA8 0000                       		dc.w loc_1AA1E-Obj86_Index2
0001DCAA                            ; ===========================================================================
0001DCAA                            
0001DCAA                            loc_1A9A6:
0001DCAA 3028 0030                  		move.w	$30(a0),d0
0001DCAE 9068 0008                  		sub.w	obX(a0),d0
0001DCB2 E940                       		asl.w	#4,d0
0001DCB4 3140 0010                  		move.w	d0,obVelX(a0)
0001DCB8 317C 00B4 0028             		move.w	#$B4,obSubtype(a0)
0001DCBE 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001DCC2 4E75                       		rts	
0001DCC4                            ; ===========================================================================
0001DCC4                            
0001DCC4                            loc_1A9C0:
0001DCC4 4A68 0010                  		tst.w	obVelX(a0)
0001DCC8 6700                       		beq.s	loc_1A9E6
0001DCCA 4EB9 0000 F968             		jsr	(SpeedToPos).l
0001DCD0 3028 0008                  		move.w	obX(a0),d0
0001DCD4 9068 0030                  		sub.w	$30(a0),d0
0001DCD8 6400                       		bcc.s	loc_1A9E6
0001DCDA 4268 0010                  		clr.w	obVelX(a0)
0001DCDE D168 0008                  		add.w	d0,obX(a0)
0001DCE2 2268 0034                  		movea.l	$34(a0),a1
0001DCE6 5369 0032                  		subq.w	#1,$32(a1)
0001DCEA                            
0001DCEA                            loc_1A9E6:
0001DCEA 117C 0000 001C             		move.b	#0,obAnim(a0)
0001DCF0 5368 0028                  		subq.w	#1,obSubtype(a0)
0001DCF4 6600                       		bne.s	locret_1AA1C
0001DCF6 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001DCFA 117C 0001 001C             		move.b	#1,obAnim(a0)
0001DD00 117C 009A 0020             		move.b	#$9A,obColType(a0)
0001DD06 317C 00B4 0028             		move.w	#$B4,obSubtype(a0)
0001DD0C 7000                       		moveq	#0,d0
0001DD0E 3038 D008                  		move.w	(v_player+obX).w,d0
0001DD12 9068 0008                  		sub.w	obX(a0),d0
0001DD16 3140 0010                  		move.w	d0,obVelX(a0)
0001DD1A 317C 0140 0012             		move.w	#$140,obVelY(a0)
0001DD20                            
0001DD20                            locret_1AA1C:
0001DD20 4E75                       		rts	
0001DD22                            ; ===========================================================================
0001DD22                            
0001DD22                            loc_1AA1E:
0001DD22 4EB9 0000 F968             		jsr	(SpeedToPos).l
0001DD28 0C68 05E0 000C             		cmpi.w	#$5E0,obY(a0)
0001DD2E 6400                       		bcc.s	loc_1AA34
0001DD30 5368 0028                  		subq.w	#1,obSubtype(a0)
0001DD34 6700                       		beq.s	loc_1AA34
0001DD36 4E75                       		rts	
0001DD38                            ; ===========================================================================
0001DD38                            
0001DD38                            loc_1AA34:
0001DD38 2268 0034                  		movea.l	$34(a0),a1
0001DD3C 5369 0038                  		subq.w	#1,$38(a1)
0001DD40 6000 F8A6                  		bra.w	Obj84_Delete
0001DD40 6000 F8A6                  		bra.w	Obj84_Delete
0001DD44                            		include	"_anim\Plasma Ball Launcher.asm"
0001DD44                            ; ---------------------------------------------------------------------------
0001DD44                            ; Animation script - energy ball launcher (FZ)
0001DD44                            ; ---------------------------------------------------------------------------
0001DD44 0000                       Ani_PLaunch:	dc.w @red-Ani_PLaunch
0001DD46 0000                       		dc.w @redsparking-Ani_PLaunch
0001DD48 0000                       		dc.w @whitesparking-Ani_PLaunch
0001DD4A 7E00 FF                    @red:		dc.b $7E, 0, afEnd
0001DD4E 00                         		even
0001DD4E 0100 0200 03FF             @redsparking:	dc.b 1,	0, 2, 0, 3, afEnd
0001DD54                            		even
0001DD54 0101 0201 03FF             @whitesparking:	dc.b 1,	1, 2, 1, 3, afEnd
0001DD5A                            		even
0001DD5A                            		even
0001DD5A                            Map_PLaunch:	include	"_maps\Plasma Ball Launcher.asm"
0001DD5A                            ; ---------------------------------------------------------------------------
0001DD5A                            ; Sprite mappings - energy ball	launcher (FZ)
0001DD5A                            ; ---------------------------------------------------------------------------
0001DD5A                            Map_PLaunch_internal:
0001DD5A 0000                       		dc.w @red-Map_PLaunch_internal
0001DD5C 0000                       		dc.w @white-Map_PLaunch_internal
0001DD5E 0000                       		dc.w @sparking1-Map_PLaunch_internal
0001DD60 0000                       		dc.w @sparking2-Map_PLaunch_internal
0001DD62 01                         @red:		dc.b 1
0001DD63 F805 006E F8               		dc.b $F8, 5, 0,	$6E, $F8
0001DD68 01                         @white:		dc.b 1
0001DD69 F805 0076 F8               		dc.b $F8, 5, 0,	$76, $F8
0001DD6E 01                         @sparking1:	dc.b 1
0001DD6F F805 0072 F8               		dc.b $F8, 5, 0,	$72, $F8
0001DD74 01                         @sparking2:	dc.b 1
0001DD75 F805 1072 F8               		dc.b $F8, 5, $10, $72, $F8
0001DD7A                            		even
0001DD7A                            		even
0001DD7A                            		include	"_anim\Plasma Balls.asm"
0001DD7A                            ; ---------------------------------------------------------------------------
0001DD7A                            ; Animation script - energy balls (FZ)
0001DD7A                            ; ---------------------------------------------------------------------------
0001DD7A 0000                       Ani_Plasma:	dc.w @full-Ani_Plasma
0001DD7C 0000                       		dc.w @short-Ani_Plasma
0001DD7E 0100 0A08 0A01 0A09 0A06+  @full:		dc.b 1,	0, $A, 8, $A, 1, $A, 9,	$A, 6, $A, 7, $A, 0, $A
0001DD8D 080A 010A 090A 060A 070A+  		dc.b 8,	$A, 1, $A, 9, $A, 6, $A, 7, $A,	2, $A, 3, $A, 4
0001DD9C 0A05 FF                    		dc.b $A, 5, afEnd
0001DDA0 00                         		even
0001DDA0 0006 0501 0507 0501 05FF   @short:		dc.b 0,	6, 5, 1, 5, 7, 5, 1, 5,	afEnd
0001DDAA                            		even
0001DDAA                            		even
0001DDAA                            Map_Plasma:	include	"_maps\Plasma Balls.asm"
0001DDAA                            ; ---------------------------------------------------------------------------
0001DDAA                            ; Sprite mappings - energy balls (FZ)
0001DDAA                            ; ---------------------------------------------------------------------------
0001DDAA                            Map_Plasma_internal:
0001DDAA 0000                       		dc.w @fuzzy1-Map_Plasma_internal
0001DDAC 0000                       		dc.w @fuzzy2-Map_Plasma_internal
0001DDAE 0000                       		dc.w @white1-Map_Plasma_internal
0001DDB0 0000                       		dc.w @white2-Map_Plasma_internal
0001DDB2 0000                       		dc.w @white3-Map_Plasma_internal
0001DDB4 0000                       		dc.w @white4-Map_Plasma_internal
0001DDB6 0000                       		dc.w @fuzzy3-Map_Plasma_internal
0001DDB8 0000                       		dc.w @fuzzy4-Map_Plasma_internal
0001DDBA 0000                       		dc.w @fuzzy5-Map_Plasma_internal
0001DDBC 0000                       		dc.w @fuzzy6-Map_Plasma_internal
0001DDBE 0000                       		dc.w @blank-Map_Plasma_internal
0001DDC0 02                         @fuzzy1:	dc.b 2
0001DDC1 F00D 007A F0               		dc.b $F0, $D, 0, $7A, $F0
0001DDC6 000D 187A F0               		dc.b 0,	$D, $18, $7A, $F0
0001DDCB 02                         @fuzzy2:	dc.b 2
0001DDCC F406 0082 F4               		dc.b $F4, 6, 0,	$82, $F4
0001DDD1 F402 1882 04               		dc.b $F4, 2, $18, $82, 4
0001DDD6 02                         @white1:	dc.b 2
0001DDD7 F804 0088 F8               		dc.b $F8, 4, 0,	$88, $F8
0001DDDC 0004 1088 F8               		dc.b 0,	4, $10,	$88, $F8
0001DDE1 02                         @white2:	dc.b 2
0001DDE2 F804 008A F8               		dc.b $F8, 4, 0,	$8A, $F8
0001DDE7 0004 108A F8               		dc.b 0,	4, $10,	$8A, $F8
0001DDEC 02                         @white3:	dc.b 2
0001DDED F804 008C F8               		dc.b $F8, 4, 0,	$8C, $F8
0001DDF2 0004 108C F8               		dc.b 0,	4, $10,	$8C, $F8
0001DDF7 02                         @white4:	dc.b 2
0001DDF8 F406 008E F4               		dc.b $F4, 6, 0,	$8E, $F4
0001DDFD F402 188E 04               		dc.b $F4, 2, $18, $8E, 4
0001DE02 01                         @fuzzy3:	dc.b 1
0001DE03 F805 0094 F8               		dc.b $F8, 5, 0,	$94, $F8
0001DE08 01                         @fuzzy4:	dc.b 1
0001DE09 F805 0098 F8               		dc.b $F8, 5, 0,	$98, $F8
0001DE0E 02                         @fuzzy5:	dc.b 2
0001DE0F F00D 087A F0               		dc.b $F0, $D, 8, $7A, $F0
0001DE14 000D 107A F0               		dc.b 0,	$D, $10, $7A, $F0
0001DE19 02                         @fuzzy6:	dc.b 2
0001DE1A F406 1082 F4               		dc.b $F4, 6, $10, $82, $F4
0001DE1F F402 0882 04               		dc.b $F4, 2, 8,	$82, 4
0001DE24 00                         @blank:		dc.b 0
0001DE26 00                         		even
0001DE26 00                         		even
0001DE26                            
0001DE26                            		include	"_incObj\3E Prison Capsule.asm"
0001DE26                            ; ---------------------------------------------------------------------------
0001DE26                            ; Object 3E - prison capsule
0001DE26                            ; ---------------------------------------------------------------------------
0001DE26                            
0001DE26                            Prison:
0001DE26 7000                       		moveq	#0,d0
0001DE28 1028 0024                  		move.b	obRoutine(a0),d0
0001DE2C 323B 0000                  		move.w	Pri_Index(pc,d0.w),d1
0001DE30 4EBB 1000                  		jsr	Pri_Index(pc,d1.w)
0001DE50 4EF9 0000 F97C             		jmp	(DisplaySprite).l
0001DE56                            
0001DE56                            	@delete:
0001DE56 4EF9 0000 F9BC             		jmp	(DeleteObject).l
0001DE5C                            ; ===========================================================================
0001DE5C 0000                       Pri_Index:	dc.w Pri_Main-Pri_Index
0001DE5E 0000                       		dc.w Pri_BodyMain-Pri_Index
0001DE60 0000                       		dc.w Pri_Switched-Pri_Index
0001DE62 0000                       		dc.w Pri_Explosion-Pri_Index
0001DE64 0000                       		dc.w Pri_Explosion-Pri_Index
0001DE66 0000                       		dc.w Pri_Explosion-Pri_Index
0001DE68 0000                       		dc.w Pri_Animals-Pri_Index
0001DE6A 0000                       		dc.w Pri_EndAct-Pri_Index
0001DE6C                            
0001DE6C =00000030                  pri_origY:	equ $30		; original y-axis position
0001DE6C                            
0001DE6C 0220 0400                  Pri_Var:	dc.b 2,	$20, 4,	0	; routine, width, priority, frame
0001DE70 040C 0501                  		dc.b 4,	$C, 5, 1
0001DE74 0610 0403                  		dc.b 6,	$10, 4,	3
0001DE78 0810 0305                  		dc.b 8,	$10, 3,	5
0001DE7C                            ; ===========================================================================
0001DE7C                            
0001DE7C                            Pri_Main:	; Routine 0
0001DE7C 217C 0000 0000 0004        		move.l	#Map_Pri,obMap(a0)
0001DE84 317C 049D 0002             		move.w	#$49D,obGfx(a0)
0001DE8A 117C 0004 0001             		move.b	#4,obRender(a0)
0001DE90 3168 000C 0030             		move.w	obY(a0),pri_origY(a0)
0001DE96 7000                       		moveq	#0,d0
0001DE98 1028 0028                  		move.b	obSubtype(a0),d0
0001DE9C E548                       		lsl.w	#2,d0
0001DE9E 43FB 00CC                  		lea	Pri_Var(pc,d0.w),a1
0001DEA2 1159 0024                  		move.b	(a1)+,obRoutine(a0)
0001DEA6 1159 0014                  		move.b	(a1)+,obActWid(a0)
0001DEAA 1159 0018                  		move.b	(a1)+,obPriority(a0)
0001DEAE 3028 0018                  		move.w obPriority(a0),d0 
0001DEB2 E248                       		lsr.w #1,d0 
0001DEB4 0240 0380                  		andi.w #$380,d0 
0001DEB8 3140 0018                  		move.w d0,obPriority(a0)		
0001DEBC 1159 001A                  		move.b	(a1)+,obFrame(a0)
0001DEC0 0C40 0008                  		cmpi.w	#8,d0		; is object type number	02?
0001DEC4 6600                       		bne.s	@not02		; if not, branch
0001DEC6                            
0001DEC6 117C 0006 0020             		move.b	#6,obColType(a0)
0001DECC 117C 0008 0021             		move.b	#8,obColProp(a0)
0001DED2                            
0001DED2                            	@not02:
0001DED2 4E75                       		rts	
0001DED4                            ; ===========================================================================
0001DED4                            
0001DED4                            Pri_BodyMain:	; Routine 2
0001DED4 0C38 0002 F7A7             		cmpi.b	#2,(v_bossstatus).w
0001DEDA 6700                       		beq.s	@chkopened
0001DEDC 323C 002B                  		move.w	#$2B,d1
0001DEE0 343C 0018                  		move.w	#$18,d2
0001DEE4 363C 0018                  		move.w	#$18,d3
0001DEE8 3828 0008                  		move.w	obX(a0),d4
0001DEEC 4EF9 0001 1D8A             		jmp	(SolidObject).l
0001DEF2                            ; ===========================================================================
0001DEF2                            
0001DEF2                            @chkopened:
0001DEF2 4A28 0025                  		tst.b	ob2ndRout(a0)	; has the prison been opened?
0001DEF6 6700                       		beq.s	@open		; if yes, branch
0001DEF8 4228 0025                  		clr.b	ob2ndRout(a0)
0001DEFC 08B8 0003 D022             		bclr	#3,(v_player+obStatus).w
0001DF02 08F8 0001 D022             		bset	#1,(v_player+obStatus).w
0001DF08                            
0001DF08                            	@open:
0001DF08 117C 0002 001A             		move.b	#2,obFrame(a0)	; use frame number 2 (destroyed	prison)
0001DF0E 4E75                       		rts	
0001DF10                            ; ===========================================================================
0001DF10                            
0001DF10                            Pri_Switched:	; Routine 4
0001DF10 323C 0017                  		move.w	#$17,d1
0001DF14 343C 0008                  		move.w	#8,d2
0001DF18 363C 0008                  		move.w	#8,d3
0001DF1C 3828 0008                  		move.w	obX(a0),d4
0001DF20 4EB9 0001 1D8A             		jsr	(SolidObject).l
0001DF26 43F9 0000 0000             		lea	(Ani_Pri).l,a1
0001DF2C 4EB9 0000 CA28             		jsr	(AnimateSprite).l
0001DF32 3168 0030 000C             		move.w	pri_origY(a0),obY(a0)
0001DF38 4A28 0025                  		tst.b	ob2ndRout(a0)	; has prison already been opened?
0001DF3C 6700                       		beq.s	@open2		; if yes, branch
0001DF3E                            
0001DF3E 5068 000C                  		addq.w	#8,obY(a0)
0001DF42 117C 000A 0024             		move.b	#$A,obRoutine(a0)
0001DF48 317C 003C 001E             		move.w	#60,obTimeFrame(a0) ; set time between animal spawns
0001DF4E 4238 FE1E                  		clr.b	(f_timecount).w	; stop time counter
0001DF52 4238 F7AA                  		clr.b	(f_lockscreen).w ; lock screen position
0001DF56 11FC 0001 F7CC             		move.b	#1,(f_lockctrl).w ; lock controls
0001DF5C 31FC 0800 F602             		move.w	#(btnR<<8),(v_jpadhold2).w ; make Sonic run to the right
0001DF62 4228 0025                  		clr.b	ob2ndRout(a0)
0001DF66 08B8 0003 D022             		bclr	#3,(v_player+obStatus).w
0001DF6C 08F8 0001 D022             		bset	#1,(v_player+obStatus).w
0001DF72                            
0001DF72                            	@open2:
0001DF72 4E75                       		rts	
0001DF74                            ; ===========================================================================
0001DF74                            
0001DF74                            Pri_Explosion:	; Routine 6, 8, $A
0001DF74 7007                       		moveq	#7,d0
0001DF76 C038 FE0F                  		and.b	(v_vbla_byte).w,d0
0001DF7A 6600                       		bne.s	@noexplosion
0001DF7C 4EB9 0000 FE08             		jsr	(FindFreeObj).l
0001DF82 6600                       		bne.s	@noexplosion
0001DF84 12BC 003F                  		move.b	#id_ExplosionBomb,0(a1) ; load explosion object
0001DF88 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001DF8E 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001DF94 4EB9 0000 3A10             		jsr	(RandomNumber).l
0001DF9A 7200                       		moveq	#0,d1
0001DF9C 1200                       		move.b	d0,d1
0001DF9E E409                       		lsr.b	#2,d1
0001DFA0 0441 0020                  		subi.w	#$20,d1
0001DFA4 D369 0008                  		add.w	d1,obX(a1)
0001DFA8 E048                       		lsr.w	#8,d0
0001DFAA E608                       		lsr.b	#3,d0
0001DFAC D169 000C                  		add.w	d0,obY(a1)
0001DFB0                            
0001DFB0                            	@noexplosion:
0001DFB0 5368 001E                  		subq.w	#1,obTimeFrame(a0)
0001DFB4 6700                       		beq.s	@makeanimal
0001DFB6 4E75                       		rts	
0001DFB8                            ; ===========================================================================
0001DFB8                            
0001DFB8                            @makeanimal:
0001DFB8 11FC 0002 F7A7             		move.b	#2,(v_bossstatus).w
0001DFBE 117C 000C 0024             		move.b	#$C,obRoutine(a0)	; replace explosions with animals
0001DFC4 117C 0006 001A             		move.b	#6,obFrame(a0)
0001DFCA 317C 0096 001E             		move.w	#150,obTimeFrame(a0)
0001DFD0 0668 0020 000C             		addi.w	#$20,obY(a0)
0001DFD6 7C07                       		moveq	#7,d6
0001DFD8 3A3C 009A                  		move.w	#$9A,d5
0001DFDC 78E4                       		moveq	#-$1C,d4
0001DFDE                            
0001DFDE                            	@loop:
0001DFDE 4EB9 0000 FE08             		jsr	(FindFreeObj).l
0001DFE4 6600                       		bne.s	@fail
0001DFE6 12BC 0028                  		move.b	#id_Animals,0(a1) ; load animal object
0001DFEA 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001DFF0 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001DFF6 D969 0008                  		add.w	d4,obX(a1)
0001DFFA 5E44                       		addq.w	#7,d4
0001DFFC 3345 0036                  		move.w	d5,$36(a1)
0001E000 5145                       		subq.w	#8,d5
0001E002 51CE FFDA                  		dbf	d6,@loop	; repeat 7 more	times
0001E006                            
0001E006                            	@fail:
0001E006 4E75                       		rts	
0001E008                            ; ===========================================================================
0001E008                            
0001E008                            Pri_Animals:	; Routine $C
0001E008 7007                       		moveq	#7,d0
0001E00A C038 FE0F                  		and.b	(v_vbla_byte).w,d0
0001E00E 6600                       		bne.s	@noanimal
0001E010 4EB9 0000 FE08             		jsr	(FindFreeObj).l
0001E016 6600                       		bne.s	@noanimal
0001E018 12BC 0028                  		move.b	#id_Animals,0(a1) ; load animal object
0001E01C 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001E022 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001E028 4EB9 0000 3A10             		jsr	(RandomNumber).l
0001E02E 0240 001F                  		andi.w	#$1F,d0
0001E032 5D40                       		subq.w	#6,d0
0001E034 4A41                       		tst.w	d1
0001E036 6A00                       		bpl.s	@ispositive
0001E038 4440                       		neg.w	d0
0001E03A                            
0001E03A                            	@ispositive:
0001E03A D169 0008                  		add.w	d0,obX(a1)
0001E03E 337C 000C 0036             		move.w	#$C,$36(a1)
0001E044                            
0001E044                            	@noanimal:
0001E044 5368 001E                  		subq.w	#1,obTimeFrame(a0)
0001E048 6600                       		bne.s	@wait
0001E04A 5428 0024                  		addq.b	#2,obRoutine(a0)
0001E04E 317C 00B4 001E             		move.w	#180,obTimeFrame(a0)
0001E054                            
0001E054                            	@wait:
0001E054 4E75                       		rts	
0001E056                            ; ===========================================================================
0001E056                            
0001E056                            Pri_EndAct:	; Routine $E
0001E056 703E                       		moveq	#$3E,d0
0001E058 7228                       		moveq	#id_Animals,d1
0001E05A 7440                       		moveq	#$40,d2
0001E05C 43F8 D040                  		lea	(v_objspace+$40).w,a1 ; load object RAM
0001E060                            
0001E060                            	@findanimal:
0001E060 B211                       		cmp.b	(a1),d1		; is object $28	(animal) loaded?
0001E062 6700                       		beq.s	@found		; if yes, branch
0001E064 D2C2                       		adda.w	d2,a1		; next object RAM
0001E066 51C8 FFF8                  		dbf	d0,@findanimal	; repeat $3E times
0001E06A                            
0001E06A 4EB9 0001 10AC             		jsr	(GotThroughAct1).l
0001E070 4EF9 0000 F9BC             		jmp	(DeleteObject).l
0001E076                            
0001E076                            	@found:
0001E076 4E75                       		rts	
0001E076 4E75                       		rts	
0001E078                            		include	"_anim\Prison Capsule.asm"
0001E078                            ; ---------------------------------------------------------------------------
0001E078                            ; Animation script - prison capsule
0001E078                            ; ---------------------------------------------------------------------------
0001E078 0000                       Ani_Pri:	dc.w @switchflash-Ani_Pri
0001E07A 0000                       		dc.w @switchflash-Ani_Pri
0001E07C 0201 03FF                  @switchflash:	dc.b 2,	1, 3, afEnd
0001E080                            		even
0001E080                            		even
0001E080                            Map_Pri:	include	"_maps\Prison Capsule.asm"
0001E080                            ; ---------------------------------------------------------------------------
0001E080                            ; Sprite mappings - prison capsule
0001E080                            ; ---------------------------------------------------------------------------
0001E080                            Map_Pri_internal:
0001E080 0000                       		dc.w @capsule-Map_Pri_internal
0001E082 0000                       		dc.w @switch1-Map_Pri_internal
0001E084 0000                       		dc.w @broken-Map_Pri_internal
0001E086 0000                       		dc.w @switch2-Map_Pri_internal
0001E088 0000                       		dc.w @unusedthing1-Map_Pri_internal
0001E08A 0000                       		dc.w @unusedthing2-Map_Pri_internal
0001E08C 0000                       		dc.w @blank-Map_Pri_internal
0001E08E 07                         @capsule:	dc.b 7
0001E08F E00C 2000 F0               		dc.b $E0, $C, $20, 0, $F0
0001E094 E80D 2004 E0               		dc.b $E8, $D, $20, 4, $E0
0001E099 E80D 200C 00               		dc.b $E8, $D, $20, $C, 0
0001E09E F80E 2014 E0               		dc.b $F8, $E, $20, $14,	$E0
0001E0A3 F80E 2020 00               		dc.b $F8, $E, $20, $20,	0
0001E0A8 100D 202C E0               		dc.b $10, $D, $20, $2C,	$E0
0001E0AD 100D 2034 00               		dc.b $10, $D, $20, $34,	0
0001E0B2 01                         @switch1:	dc.b 1
0001E0B3 F809 003C F4               		dc.b $F8, 9, 0,	$3C, $F4
0001E0B8 06                         @broken:	dc.b 6
0001E0B9 0008 2042 E0               		dc.b 0,	8, $20,	$42, $E0
0001E0BE 080C 2045 E0               		dc.b 8,	$C, $20, $45, $E0
0001E0C3 0004 2049 10               		dc.b 0,	4, $20,	$49, $10
0001E0C8 080C 204B 00               		dc.b 8,	$C, $20, $4B, 0
0001E0CD 100D 202C E0               		dc.b $10, $D, $20, $2C,	$E0
0001E0D2 100D 2034 00               		dc.b $10, $D, $20, $34,	0
0001E0D7 01                         @switch2:	dc.b 1
0001E0D8 F809 004F F4               		dc.b $F8, 9, 0,	$4F, $F4
0001E0DD 02                         @unusedthing1:	dc.b 2
0001E0DE E80E 2055 F0               		dc.b $E8, $E, $20, $55,	$F0
0001E0E3 000E 2061 F0               		dc.b 0,	$E, $20, $61, $F0
0001E0E8 01                         @unusedthing2:	dc.b 1
0001E0E9 F007 206D F8               		dc.b $F0, 7, $20, $6D, $F8
0001E0EE 00                         @blank:		dc.b 0
0001E0F0 00                         		even
0001E0F0 00                         		even
0001E0F0                            
0001E0F0                            		include	"_incObj\sub ReactToItem.asm"
0001E0F0                            ; ---------------------------------------------------------------------------
0001E0F0                            ; Subroutine to react to obColType(a0)
0001E0F0                            ; ---------------------------------------------------------------------------
0001E0F0                            
0001E0F0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001E0F0                            
0001E0F0                            
0001E0F0                            ReactToItem:
0001E0F0 4E71                       		nop	
0001E0F2 3428 0008                  		move.w	obX(a0),d2	; load Sonic's x-axis position
0001E0F6 3628 000C                  		move.w	obY(a0),d3	; load Sonic's y-axis position
0001E0FA 5142                       		subq.w	#8,d2
0001E0FC 7A00                       		moveq	#0,d5
0001E0FE 1A28 0016                  		move.b	obHeight(a0),d5	; load Sonic's height
0001E102 5705                       		subq.b	#3,d5
0001E104 9645                       		sub.w	d5,d3
0001E106 0C28 0071 001A             		cmpi.b	#fr_Duck,obFrame(a0) ; is Sonic ducking?
0001E10C 6600                       		bne.s	@notducking	; if not, branch
0001E10E 0643 000C                  		addi.w	#$C,d3
0001E112 7A0A                       		moveq	#$A,d5
0001E114                            
0001E114                            	@notducking:
0001E114 383C 0010                  		move.w	#$10,d4
0001E118 DA45                       		add.w	d5,d5
0001E11A 43F8 D800                  		lea	(v_objspace+$800).w,a1 ; set object RAM start address
0001E11E 3C3C 005F                  		move.w	#$5F,d6
0001E122                            
0001E122                            @loop:
0001E122 4A29 0001                  		tst.b	obRender(a1)
0001E126 6A00                       		bpl.s	@next
0001E128 1029 0020                  		move.b	obColType(a1),d0 ; load collision type
0001E12C 6600                       		bne.s	@proximity	; if nonzero, branch
0001E12E                            
0001E12E                            	@next:
0001E12E 43E9 0040                  		lea	$40(a1),a1	; next object RAM
0001E132 51CE FFEE                  		dbf	d6,@loop	; repeat $5F more times
0001E136                            
0001E136 7000                       		moveq	#0,d0
0001E138 4E75                       		rts	
0001E13A                            ; ===========================================================================
0001E13A                            @sizes:		;   width, height
0001E13A 1414                       		dc.b  $14, $14		; $01
0001E13C 0C14                       		dc.b   $C, $14		; $02
0001E13E 140C                       		dc.b  $14,  $C		; $03
0001E140 0410                       		dc.b	4, $10		; $04
0001E142 0C12                       		dc.b   $C, $12		; $05
0001E144 1010                       		dc.b  $10, $10		; $06
0001E146 0606                       		dc.b	6,   6		; $07
0001E148 180C                       		dc.b  $18,  $C		; $08
0001E14A 0C10                       		dc.b   $C, $10		; $09
0001E14C 100C                       		dc.b  $10,  $C		; $0A
0001E14E 0808                       		dc.b	8,   8		; $0B
0001E150 1410                       		dc.b  $14, $10		; $0C
0001E152 1408                       		dc.b  $14,   8		; $0D
0001E154 0E0E                       		dc.b   $E,  $E		; $0E
0001E156 1818                       		dc.b  $18, $18		; $0F
0001E158 2810                       		dc.b  $28, $10		; $10
0001E15A 1018                       		dc.b  $10, $18		; $11
0001E15C 0810                       		dc.b	8, $10		; $12
0001E15E 2070                       		dc.b  $20, $70		; $13
0001E160 4020                       		dc.b  $40, $20		; $14
0001E162 8020                       		dc.b  $80, $20		; $15
0001E164 2020                       		dc.b  $20, $20		; $16
0001E166 0808                       		dc.b	8,   8		; $17
0001E168 0404                       		dc.b	4,   4		; $18
0001E16A 2008                       		dc.b  $20,   8		; $19
0001E16C 0C0C                       		dc.b   $C,  $C		; $1A
0001E16E 0804                       		dc.b	8,   4		; $1B
0001E170 1804                       		dc.b  $18,   4		; $1C
0001E172 2804                       		dc.b  $28,   4		; $1D
0001E174 0408                       		dc.b	4,   8		; $1E
0001E176 0418                       		dc.b	4, $18		; $1F
0001E178 0428                       		dc.b	4, $28		; $20
0001E17A 0420                       		dc.b	4, $20		; $21
0001E17C 1818                       		dc.b  $18, $18		; $22
0001E17E 0C18                       		dc.b   $C, $18		; $23
0001E180 4808                       		dc.b  $48,   8		; $24
0001E182                            ; ===========================================================================
0001E182                            
0001E182                            @proximity:
0001E182 0240 003F                  		andi.w	#$3F,d0
0001E186 D040                       		add.w	d0,d0
0001E188 45FB 00AE                  		lea	@sizes-2(pc,d0.w),a2
0001E18C 7200                       		moveq	#0,d1
0001E18E 121A                       		move.b	(a2)+,d1
0001E190 3029 0008                  		move.w	obX(a1),d0
0001E194 9041                       		sub.w	d1,d0
0001E196 9042                       		sub.w	d2,d0
0001E198 6400                       		bcc.s	@outsidex	; branch if not touching
0001E19A D241                       		add.w	d1,d1
0001E19C D041                       		add.w	d1,d0
0001E19E 6500                       		bcs.s	@withinx	; branch if touching
0001E1A0 6000 FF8C                  		bra.w	@next
0001E1A4                            ; ===========================================================================
0001E1A4                            
0001E1A4                            @outsidex:
0001E1A4 6100 0000                  		bsr	React_ChkWaterTag	;TIS
0001E1A8 B044                       		cmp.w	d4,d0
0001E1AA 6200 FF82                  		bhi.w	@next
0001E1AE                            
0001E1AE                            @withinx:
0001E1AE 7200                       		moveq	#0,d1
0001E1B0 121A                       		move.b	(a2)+,d1
0001E1B2 3029 000C                  		move.w	obY(a1),d0
0001E1B6 9041                       		sub.w	d1,d0
0001E1B8 9043                       		sub.w	d3,d0
0001E1BA 6400                       		bcc.s	@outsidey	; branch if not touching
0001E1BC D241                       		add.w	d1,d1
0001E1BE D240                       		add.w	d0,d1
0001E1C0 6500                       		bcs.s	@withiny	; branch if touching
0001E1C2 6000 FF6A                  		bra.w	@next
0001E1C6                            
0001E1C6                            ; ===========================================================================
0001E1C6                            
0001E1C6                            @outsidey:
0001E1C6 6100 0000                  		bsr	React_ChkWaterTag	;TIS
0001E1CA B045                       		cmp.w	d5,d0
0001E1CC 6200 FF60                  		bhi.w	@next
0001E1D0                            
0001E1D0                            @withiny:
0001E1D0                            	@chktype:
0001E1D0 0C38 0004 FE10                     	cmpi.b	#id_SYZ,(v_zone).w   ;TIS is level GHZZ?
0001E1D6 6600 0000                          	bne	NotGHZReact  ;TIS
0001E1DA 1229 0020                          	move.b	obColType(a1),d1 ;TIS load collision type
0001E1DE 0C01 0096                          	cmpi.b	#$96,d1        ;TIS - is collision type $96?
0001E1E2 6700 0000                          	beq	React_WaterTag    ;TIS if yes, branch
0001E1E6 0C01 0094                          	cmpi.b	#$94,d1        ;TIS - is collision type $94?
0001E1EA 6700 0000                          	beq	React_WaterTag    ;TIS if yes, branch
0001E1EE 0C01 0095                          	cmpi.b	#$95,d1        ;TIS - is collision type $95?
0001E1F2 6700 0000                          	beq	React_WaterTag    ;TIS if yes, branch
0001E1F6                            NotGHZReact:                      ;TIS
0001E1F6 1229 0020                  		move.b	obColType(a1),d1 ; load collision type
0001E1FA 0201 00C0                  		andi.b	#$C0,d1        ; is obColType $40 or higher?
0001E1FE 6700 0000                  		beq.w	React_Enemy    ; if not, branch
0001E202 0C01 00C0                  		cmpi.b	#$C0,d1		; is obColType $C0 or higher?
0001E206 6700 0000                  		beq.w	React_Special	; if yes, branch
0001E20A 4A01                       		tst.b	d1		; is obColType $80-$BF?
0001E20C 6B00 0000                  		bmi.w	React_ChkHurt	; if yes, branch
0001E210                            
0001E210                            ; obColType is $40-$7F (powerups)
0001E210                            
0001E210 1029 0020                  		move.b	obColType(a1),d0
0001E214 0200 003F                  		andi.b	#$3F,d0
0001E218 0C00 0006                  		cmpi.b	#6,d0		; is collision type $46	?
0001E21C 6700                       		beq.s	React_Monitor	; if yes, branch
0001E21E 0C68 005A 0030             		cmpi.w	#90,$30(a0)	; is Sonic invincible?
0001E224 6400 0000                  		bcc.w	@invincible	; if yes, branch
0001E228 5429 0024                  		addq.b	#2,obRoutine(a1) ; advance the object's routine counter
0001E22C                            
0001E22C                            	@invincible:
0001E22C 4E75                       		rts	
0001E22E                            ; ===========================================================================
0001E22E                            
0001E22E                            React_Monitor:
0001E22E 4A68 0012                  		tst.w	obVelY(a0)	; is Sonic moving upwards?
0001E232 6A00                       		bpl.s	@movingdown	; if not, branch
0001E234                            
0001E234 3028 000C                  		move.w	obY(a0),d0
0001E238 0440 0010                  		subi.w	#$10,d0
0001E23C B069 000C                  		cmp.w	obY(a1),d0
0001E240 6500                       		bcs.s	@donothing
0001E242 4468 0012                  		neg.w	obVelY(a0)	; reverse Sonic's vertical speed
0001E246 337C FE80 0012             		move.w	#-$180,obVelY(a1)
0001E24C 4A29 0025                  		tst.b	ob2ndRout(a1)
0001E250 6600                       		bne.s	@donothing
0001E252 5829 0025                  		addq.b	#4,ob2ndRout(a1) ; advance the monitor's routine counter
0001E256 4E75                       		rts	
0001E258                            ; ===========================================================================
0001E258                            
0001E258                            @movingdown:
0001E258 0C28 0002 001C             		cmpi.b	#id_Roll,obAnim(a0) ; is Sonic rolling/jumping?
0001E25E 6600                       		bne.s	@donothing
0001E260 4468 0012                  		neg.w	obVelY(a0)	; reverse Sonic's y-motion
0001E264 5429 0024                  		addq.b	#2,obRoutine(a1) ; advance the monitor's routine counter
0001E268                            
0001E268                            	@donothing:
0001E268 4E75                       		rts	
0001E26A                            ; ===========================================================================
0001E26A                            
0001E26A                            React_Enemy:
0001E26A 4A38 FE2D                  		tst.b	(v_invinc).w	; is Sonic invincible?
0001E26E 6600                       		bne.s	@donthurtsonic	; if yes, branch
0001E270 0C28 001F 001C             		cmpi.b	#id_Spindash,obAnim(a0)	; is Sonic Spin Dashing? 
0001E276 6700 0000                  		beq.w	@donthurtsonic	; if yes, branch
0001E27A 0C28 0002 001C             		cmpi.b	#id_Roll,obAnim(a0) ; is Sonic rolling/jumping?
0001E280 6600 0000                  		bne.w	React_ChkHurt	; if not, branch
0001E284                            
0001E284                            	@donthurtsonic:
0001E284 4A29 0021                  		tst.b	obColProp(a1)
0001E288 6700                       		beq.s	breakenemy
0001E28A                            
0001E28A 4468 0010                  		neg.w	obVelX(a0)	; repel Sonic
0001E28E 4468 0012                  		neg.w	obVelY(a0)
0001E292 E0E8 0010                  		asr	obVelX(a0)
0001E296 E0E8 0012                  		asr	obVelY(a0)
0001E29A 137C 0000 0020             		move.b	#0,obColType(a1)
0001E2A0 5329 0021                  		subq.b	#1,obColProp(a1)
0001E2A4 6600                       		bne.s	@flagnotclear
0001E2A6 08E9 0007 0022             		bset	#7,obStatus(a1)
0001E2AC                            
0001E2AC                            	@flagnotclear:
0001E2AC 4E75                       		rts	
0001E2AE                            ; ===========================================================================
0001E2AE                            
0001E2AE                            breakenemy:
0001E2AE 08E9 0007 0022             		bset	#7,obStatus(a1)
0001E2B4 7000                       		moveq	#0,d0
0001E2B6 3038 F7D0                  		move.w	(v_itembonus).w,d0
0001E2BA 5478 F7D0                  		addq.w	#2,(v_itembonus).w ; add 2 to item bonus counter
0001E2BE 0C40 0006                  		cmpi.w	#6,d0
0001E2C2 6500                       		bcs.s	@bonusokay
0001E2C4 7006                       		moveq	#6,d0		; max bonus is lvl6
0001E2C6                            
0001E2C6                            	@bonusokay:
0001E2C6 3340 003E                  		move.w	d0,$3E(a1)
0001E2CA 303B 0000                  		move.w	@points(pc,d0.w),d0
0001E2CE 0C78 0020 F7D0             		cmpi.w	#$20,(v_itembonus).w ; have 16 enemies been destroyed?
0001E2D4 6500                       		bcs.s	@lessthan16	; if not, branch
0001E2D6 303C 03E8                  		move.w	#1000,d0	; fix bonus to 10000
0001E2DA 337C 000A 003E             		move.w	#$A,$3E(a1)
0001E2E0                            
0001E2E0                            	@lessthan16:
0001E2E0 6100 0000                  		bsr.w	AddPoints
0001E2E4 12BC 0027                  		move.b	#id_ExplosionItem,0(a1) ; change object to explosion
0001E2E8 137C 0000 0024             		move.b	#0,obRoutine(a1)
0001E2EE 4A68 0012                  		tst.w	obVelY(a0)
0001E2F2 6B00                       		bmi.s	@bouncedown
0001E2F4 3028 000C                  		move.w	obY(a0),d0
0001E2F8 B069 000C                  		cmp.w	obY(a1),d0
0001E2FC 6400                       		bcc.s	@bounceup
0001E2FE 4468 0012                  		neg.w	obVelY(a0)
0001E302 4E75                       		rts	
0001E304                            ; ===========================================================================
0001E304                            
0001E304                            	@bouncedown:
0001E304 0668 0100 0012             		addi.w	#$100,obVelY(a0)
0001E30A 4E75                       		rts	
0001E30C                            
0001E30C                            	@bounceup:
0001E30C 0468 0100 0012             		subi.w	#$100,obVelY(a0)
0001E312 4E75                       		rts	
0001E314                            
0001E314 000A 0014 0032 0064        @points:	dc.w 10, 20, 50, 100	; points awarded div 10
0001E31C                            
0001E31C                            ; ===========================================================================
0001E31C                            
0001E31C                            React_Caterkiller:
0001E31C 08E9 0007 0022             		bset	#7,obStatus(a1)
0001E322                            
0001E322                            React_ChkHurt:
0001E322 4A38 FE2D                  		tst.b	(v_invinc).w	; is Sonic invincible?
0001E326 6700                       		beq.s	notinvincible	; if not, branch
0001E328                            
0001E328                            	isflashing:
0001E328 70FF                       		moveq	#-1,d0
0001E32A 4E75                       		rts	
0001E32C                            ; ===========================================================================
0001E32C                            
0001E32C                            	notinvincible:
0001E32C 4E71                       		nop	
0001E32E 4A68 0030                  		tst.w	$30(a0)		; is Sonic flashing?
0001E332 66F4                       		bne.s	isflashing	; if yes, branch
0001E334 2449                       		movea.l	a1,a2
0001E336                            
0001E336                            ; End of function ReactToItem
0001E336                            ; continue straight to HurtSonic
0001E336                            
0001E336                            ; ---------------------------------------------------------------------------
0001E336                            ; Hurting Sonic	subroutine
0001E336                            ; ---------------------------------------------------------------------------
0001E336                            
0001E336                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001E336                            
0001E336                            
0001E336                            HurtSonic:
0001E336 4A38 FE2C                  		tst.b	(v_shield).w	; does Sonic have a shield?
0001E33A 6600                       		bne.s	@hasshield	; if yes, branch
0001E33C 4A38 F5C8                  		tst.b	(v_rshield).w	; does Sonic have a red shield?
0001E340 6600                       		bne.s	@hasshield	; if yes, branch
0001E342 4A38 F5C9                  		tst.b	(v_gshield).w	; does Sonic have a gold shield?
0001E346 6600                       		bne.s	@hasshield	; if yes, branch
0001E348 4A38 F5CA                  		tst.b	(v_spshield).w	; does Sonic have a silver shield?
0001E34C 6600                       		bne.s	@hasshield	; if yes, branch
0001E34E 4A78 FE20                  		tst.w	(v_rings).w	; does Sonic have any rings?
0001E352 6700 0000                  		beq.w	@norings	; if not, branch
0001E356                            
0001E356 4EB9 0000 FE08             		jsr	(FindFreeObj).l
0001E35C 6600                       		bne.s	@hasshield
0001E35E 12BC 0037                  		move.b	#id_RingLoss,0(a1) ; load bouncing multi rings object
0001E362 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001E368 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001E36E                            
0001E36E                            	@hasshield:
0001E36E 0C38 0001 FE2C             		cmpi.b	#1,(v_shield).w     ; does sonic have a Shield?
0001E374 6600                       		bne.s	@hasrshield        ; if no, check for red shield
0001E376 0C12 006E                  		cmpi.b	#$6E,(a2)     ; was damage caused by electrocuter?
0001E37A 6700 FFAC                  		beq.w	isflashing
0001E37E 0C12 0086                  		cmpi.b	#$86,(a2)     ; was damage caused by Plasma Ball Launcher?
0001E382 6700 FFA4                  		beq.w	isflashing
0001E386                            
0001E386                            	@hasrshield:
0001E386 0C38 0000 F5C8             		cmpi.b	#0,(v_rshield).w     ; does sonic not a Red Shield?
0001E38C 6700                       		beq.s	@hasspshield          ; if yes, check for gray shield
0001E38E 0C12 0014                  		cmpi.b	#$14,(a2)	; was damage caused by lava ball?
0001E392 6700 FF94                  		beq.w 	isflashing
0001E396 0C12 004C                  		cmpi.b	#$4C,(a2)	; was damage caused by lava geyser?
0001E39A 6700 FF8C                  		beq.w 	isflashing
0001E39E 0C12 004D                  		cmpi.b	#$4D,(a2)	; was damage caused by lava geyser?
0001E3A2 6700 FF84                  		beq.w 	isflashing
0001E3A6 0C12 0062                  		cmpi.b	#$62,(a2)	; was damage caused by gargoyle?
0001E3AA 6700 FF7C                  		beq.w 	isflashing
0001E3AE 0C12 0074                  		cmpi.b	#$74,(a2)	; was damage caused by MZ fire boss?
0001E3B2 6700 FF74                  		beq.w 	isflashing
0001E3B6 0C12 0035                  		cmpi.b	#$35,(a2)	; was damage caused by burning grass?
0001E3BA 6700 FF6C                  		beq.w 	isflashing
0001E3BE 0C12 006D                  		cmpi.b	#$6D,(a2)	; was damage caused by flamethrower?
0001E3C2 6700 FF64                  		beq.w 	isflashing
0001E3C6 0C12 0054                  		cmpi.b	#$54,(a2)	; was damage caused by Lava Tag/Magma?
0001E3CA 6700 FF5C                  		beq.w 	isflashing
0001E3CE                            
0001E3CE                            	@hasspshield:
0001E3CE 0C38 0001 F5CA             		cmpi.b	#1,(v_spshield).w     ; does sonic have a sp Shield?
0001E3D4 6600                       		bne.s	@hurtcont           ; if yes, make him invulnerable to metal objects
0001E3D6 0C12 0015                  		cmpi.b	#$15,(a2)	; was damage caused by SBZ Spiked Ball?
0001E3DA 6700 FF4C                  		beq.w 	isflashing
0001E3DE 0C12 0016                  		cmpi.b	#$16,(a2)	; was damage caused by LZ Harpoon?
0001E3E2 6700 FF44                  		beq.w 	isflashing
0001E3E6 0C12 0031                  		cmpi.b	#$31,(a2)	; was damage caused by Chained Stompers?
0001E3EA 6700 FF3C                  		beq.w 	isflashing
0001E3EE 0C12 0036                  		cmpi.b	#$36,(a2)	; was damage caused by Spikes?
0001E3F2 6700 FF34                  		beq.w 	isflashing
0001E3F6 0C12 007B                  		cmpi.b	#$7B,(a2)	; was damage caused by SLZ boss spikeball?
0001E3FA 6700 FF2C                  		beq.w 	isflashing
0001E3FE 0C12 0057                  		cmpi.b	#$57,(a2)	; was damage caused by Spiked Ball & Chain?
0001E402 6700 FF24                  		beq.w 	isflashing
0001E406 0C12 0058                  		cmpi.b	#$58,(a2)	; was damage caused by Big Spiked Ball?
0001E40A 6700 FF1C                  		beq.w 	isflashing
0001E40E 0C12 006A                  		cmpi.b	#$6A,(a2)	; was damage caused by Saws?
0001E412 6700 FF14                  		beq.w 	isflashing
0001E416 0C12 005E                  		cmpi.b	#$5E,(a2)	; was damage caused by Seesaw ball?
0001E41A 6700 FF0C                  		beq.w 	isflashing
0001E41E 0C12 0006                  		cmpi.b	#$06,(a2)	; was damage caused by Mozzietron?
0001E422 6700 FE8A                  		beq.w 	breakenemy
0001E426 0C12 0050                  		cmpi.b	#$50,(a2)	; was damage caused by Yadrin?
0001E42A 6700 FE82                  		beq.w 	breakenemy
0001E42E 0C12 0060                  		cmpi.b	#$60,(a2)	; was damage caused by Orbinaut?
0001E432 6700 FE7A                  		beq.w 	breakenemy
0001E436 0C12 0078                  		cmpi.b	#$78,(a2)	; was damage caused by Catterkiller?
0001E43A 6700 FE72                  		beq.w 	breakenemy
0001E43E 0C12 005F                  		cmpi.b	#$5F,(a2)	; was damage caused by Bomb enemy?
0001E442 6700 FE6A                  		beq.w 	breakenemy
0001E446                            
0001E446                            
0001E446                            	@hurtcont:
0001E446 11FC 0000 FE2C             		move.b	#0,(v_shield).w		; remove shield
0001E44C 11FC 0000 F5C9             		move.b	#0,(v_gshield).w	; remove g shield
0001E452 11FC 0000 F5CA             		move.b	#0,(v_spshield).w	; remove sp shield
0001E458                            		
0001E458 0C38 0000 F5C8             		cmpi.b	#0,(v_rshield).w ; do you have no r shield?
0001E45E 6700                       		beq.s	@hurtcont2	;if not, branch
0001E460 5338 F5C8                  		subq.b	#1,(v_rshield).w
0001E464                            		
0001E464                            	@hurtcont2:
0001E464 117C 0004 0024             		move.b	#4,obRoutine(a0)
0001E46A 4EB9 0001 63D8             		jsr		Sonic_ResetOnFloor
0001E470 08E8 0001 0022             		bset	#1,obStatus(a0)
0001E476 317C FC00 0012             		move.w	#-$400,obVelY(a0) ; make Sonic bounce away from the object
0001E47C 317C FE00 0010             		move.w	#-$200,obVelX(a0)
0001E482 0828 0006 0022             		btst	#6,obStatus(a0)	; is Sonic underwater?
0001E488 6700                       		beq.s	@isdry		; if not, branch
0001E48A                            
0001E48A 317C FE00 0012             		move.w	#-$200,obVelY(a0) ; slower bounce
0001E490 317C FF00 0010             		move.w	#-$100,obVelX(a0)
0001E496                            
0001E496                            	@isdry:
0001E496 3028 0008                  		move.w	obX(a0),d0
0001E49A B06A 0008                  		cmp.w	obX(a2),d0
0001E49E 6500                       		bcs.s	@isleft		; if Sonic is left of the object, branch
0001E4A0 4468 0010                  		neg.w	obVelX(a0)	; if Sonic is right of the object, reverse
0001E4A4                            
0001E4A4                            	@isleft:
0001E4A4 117C 0000 0039             		move.b	#0,f_spindash(a0) ; clear Spin Dash flag 
0001E4AA 317C 0000 0020             		move.w	#0,obInertia(a0) 
0001E4B0 117C 0019 001C             		move.b	#id_Hurt,obAnim(a0) 
0001E4B6 317C 0120 0030             		move.w	#$120,$30(a0)
0001E4BC 0C12 006E                  		cmpi.b	#$6E,(a2)    ; check if you were hurt by Electrocuter
0001E4C0 6700                       		beq.s	@hurtelec       ; if yes, branch
0001E4C2 0C12 0086                  		cmpi.b	#$86,(a2)    ; check if you were hurt by FZ plasma
0001E4C6 6700                       		beq.s	@hurtelec       ; if yes, branch
0001E4C8 317C 0000 0020             		move.w	#0,obInertia(a0)
0001E4CE 117C 0019 001C             		move.b	#id_Hurt,obAnim(a0)
0001E4D4 317C 0078 0030             		move.w	#120,$30(a0)	; set temp invincible time to 2 seconds
0001E4DA 303C 0000                  		move.w	#sfx_Death,d0	; load normal damage sound
0001E4DE 0C12 0036                  		cmpi.b	#id_Spikes,(a2)	; was damage caused by spikes?
0001E4E2 6600                       		bne.s	@sound		; if not, branch
0001E4E4 0C12 0016                  		cmpi.b	#id_Harpoon,(a2) ; was damage caused by LZ harpoon?
0001E4E8 6600                       		bne.s	@sound		; if not, branch
0001E4EA 303C 0000                  		move.w	#sfx_HitSpikes,d0 ; load spikes damage sound
0001E4EE                            
0001E4EE                            	@sound:
0001E4EE 4EB9 0000 1254             		jsr	(PlaySound_Special).l
0001E4F4 70FF                       		moveq	#-1,d0
0001E4F6 4E75                       		rts	
0001E4F8                            
0001E4F8                            	@hurtelec:
0001E4F8 117C 0020 001C             		move.b	#id_Hurt2,obAnim(a0)
0001E4FE 317C 0078 0030             		move.w	#120,$30(a0)	; set temp invincible time to 2 seconds
0001E504 303C 0000                  		move.w	#sfx_Death,d0	; load normal damage sound
0001E508 0C12 0036                  		cmpi.b	#id_Spikes,(a2)	; was damage caused by spikes?
0001E50C 66E0                       		bne.s	@sound		; if not, branch
0001E50E 0C12 0016                  		cmpi.b	#id_Harpoon,(a2) ; was damage caused by LZ harpoon?
0001E512 66DA                       		bne.s	@sound		; if not, branch
0001E514 303C 0000                  		move.w	#sfx_HitSpikes,d0 ; load spikes damage sound
0001E518                            ; ===========================================================================
0001E518                            
0001E518                            @norings:
0001E518 4A78 FFFA                  		tst.w	(f_debugmode).w	; is debug mode	cheat on?
0001E51C 6600 FE50                  		bne.w	@hasshield	; if yes, branch
0001E520                            
0001E520                            ; ---------------------------------------------------------------------------
0001E520                            ; Subroutine to	kill Sonic
0001E520                            ; ---------------------------------------------------------------------------
0001E520                            
0001E520                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001E520                            
0001E520                            
0001E520                            KillSonic:
0001E520 4A78 FE08                  		tst.w	(v_debuguse).w	; is debug mode	active?
0001E524 6600 0000                  		bne.w	@dontdie	; if yes, branch
0001E528 31FC 0000 FE20             		move.w	#0,(v_rings).w ; clear rings
0001E52E 11FC 0000 FE2D             		move.b	#0,(v_invinc).w	; remove invincibility
0001E534 11FC 0000 FE2E             		move.b  #0,(v_shoes).w
0001E53A 11FC 0000 F5C3             		move.b  #0,(f_emeraldm).w
0001E540 117C 0006 0024             		move.b	#6,obRoutine(a0)
0001E546 4EB9 0001 63D8             		jsr		Sonic_ResetOnFloor
0001E54C 08E8 0001 0022             		bset	#1,obStatus(a0)
0001E552 317C F900 0012             		move.w	#-$700,obVelY(a0)
0001E558 317C 0000 0010             		move.w	#0,obVelX(a0)
0001E55E 317C 0000 0020             		move.w	#0,obInertia(a0)
0001E564 3168 000C 0038             		move.w	obY(a0),$38(a0)
0001E56A 0C12 0054                  		cmpi.b	#$54,(a2)    ; check if you were killed by lava
0001E56E 6700                       		beq.s	Kill_Lava       ; if yes, branch
0001E570 0C12 006D                  		cmpi.b	#$6D,(a2)    ; check if you were killed by flamethrower
0001E574 6700                       		beq.s	Kill_Lava        ; if yes, branch
0001E576 117C 0018 001C             		move.b	#id_Death,obAnim(a0)
0001E57C 08E8 0007 0002             		bset	#7,obGfx(a0)
0001E582 303C 0000                  		move.w	#sfx_Death,d0	; play normal death sound
0001E586 0C12 0036                  		cmpi.b	#id_Spikes,(a2)	; check	if you were killed by spikes
0001E58A 6600                       		bne.s	@sound
0001E58C 303C 0000                  		move.w	#sfx_HitSpikes,d0 ; play spikes death sound
0001E590                            
0001E590                            	@sound:
0001E590 4EB9 0000 1254             		jsr	(PlaySound_Special).l
0001E596                            
0001E596                            	@dontdie:
0001E596 70FF                       		moveq	#-1,d0
0001E598 4E75                       		rts	
0001E59A                            ; End of function KillSonic
0001E59A                            Kill_Lava:	
0001E59A 08E8 0007 0002             	bset	#7,obGfx(a0)
0001E5A0 117C 0016 001C             	move.b	#$16,$1C(a0)
0001E5A6 303C 00C8                  	move.w	#$C8,d0        ; play death sound
0001E5AA 4EB9 0000 1254                 jsr		(PlaySound_Special).l
0001E5B0                            
0001E5B0                            
0001E5B0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001E5B0                            
0001E5B0                            
0001E5B0                            React_Special:
0001E5B0 1229 0020                  		move.b	obColType(a1),d1
0001E5B4 0201 003F                  		andi.b	#$3F,d1
0001E5B8 0C01 000B                  		cmpi.b	#$B,d1		; is collision type $CB	?
0001E5BC 6700                       		beq.s	@caterkiller	; if yes, branch
0001E5BE 0C01 000C                  		cmpi.b	#$C,d1		; is collision type $CC	?
0001E5C2 6700                       		beq.s	@yadrin		; if yes, branch
0001E5C4 0C01 0017                  		cmpi.b	#$17,d1		; is collision type $D7	?
0001E5C8 6700                       		beq.s	@D7orE1		; if yes, branch
0001E5CA 0C01 0021                  		cmpi.b	#$21,d1		; is collision type $E1	?
0001E5CE 6700                       		beq.s	@D7orE1		; if yes, branch
0001E5D0 4E75                       		rts	
0001E5D2                            ; ===========================================================================
0001E5D2                            
0001E5D2                            @caterkiller:
0001E5D2 6000 FD48                  		bra.w	React_Caterkiller
0001E5D6                            ; ===========================================================================
0001E5D6                            
0001E5D6                            @yadrin:
0001E5D6 9A40                       		sub.w	d0,d5
0001E5D8 0C45 0008                  		cmpi.w	#8,d5
0001E5DC 6400                       		bcc.s	@normalenemy
0001E5DE 3029 0008                  		move.w	obX(a1),d0
0001E5E2 5940                       		subq.w	#4,d0
0001E5E4 0829 0000 0022             		btst	#0,obStatus(a1)
0001E5EA 6700                       		beq.s	@noflip
0001E5EC 0440 0010                  		subi.w	#$10,d0
0001E5F0                            
0001E5F0                            	@noflip:
0001E5F0 9042                       		sub.w	d2,d0
0001E5F2 6400                       		bcc.s	@loc_1B13C
0001E5F4 0640 0018                  		addi.w	#$18,d0
0001E5F8 6500                       		bcs.s	@loc_1B140
0001E5FA 6000                       		bra.s	@normalenemy
0001E5FC                            ; ===========================================================================
0001E5FC                            
0001E5FC                            	@loc_1B13C:
0001E5FC B044                       		cmp.w	d4,d0
0001E5FE 6200                       		bhi.s	@normalenemy
0001E600                            
0001E600                            	@loc_1B140:
0001E600 6000 FD20                  		bra.w	React_ChkHurt
0001E604                            ; ===========================================================================
0001E604                            
0001E604                            	@normalenemy:
0001E604 6000 FC64                  		bra.w	React_Enemy
0001E608                            ; ===========================================================================
0001E608                            
0001E608                            @D7orE1:
0001E608 5229 0021                  		addq.b	#1,obColProp(a1)
0001E60C 4E75                       		rts	
0001E60E                            ; End of function React_Special
0001E60E                            
0001E60E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001E60E                            
0001E60E                            React_ChkWaterTag:
0001E60E 0C38 0001 F5C4             		cmpi.b	#1,(v_tagwater).w	;TIS
0001E614 6600 0000                  		bne	NotWaterTag
0001E618 11FC 0000 F5C4             		move.b	#0,(v_tagwater).w	;TIS
0001E61E                            	NotWaterTag:
0001E61E 4E75                       		rts
0001E620                            
0001E620                            React_WaterTag:
0001E620 0C38 0001 F5C4             		cmpi.b	#1,(v_tagwater).w	;TIS
0001E626 6700 0000                  		beq	SkipWaterTag
0001E62A 11FC 0001 F5C4             		move.b	#1,(v_tagwater).w	;TIS
0001E630                            	SkipWaterTag:
0001E630 4E75                       		rts
0001E630 4E75                       		rts
0001E632                            
0001E632                            ; ---------------------------------------------------------------------------
0001E632                            ; Subroutine to	show the special stage layout
0001E632                            ; ---------------------------------------------------------------------------
0001E632                            
0001E632                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001E632                            
0001E632                            
0001E632                            SS_ShowLayout:
0001E632 6100 0000                  		bsr.w	SS_AniWallsRings
0001E636 6100 0000                  		bsr.w	SS_AniItems
0001E63A 3F05                       		move.w	d5,-(sp)
0001E63C 43F8 8000                  		lea	($FFFF8000).w,a1
0001E640 1038 F780                  		move.b	(v_ssangle).w,d0
0001E644 0200 00FC                  		andi.b	#$FC,d0
0001E648 4EB9 0000 3A36             		jsr	(CalcSine).l
0001E64E 3800                       		move.w	d0,d4
0001E650 3A01                       		move.w	d1,d5
0001E652 C9FC 0018                  		muls.w	#$18,d4
0001E656 CBFC 0018                  		muls.w	#$18,d5
0001E65A 7400                       		moveq	#0,d2
0001E65C 3438 F700                  		move.w	(v_screenposx).w,d2
0001E660 84FC 0018                  		divu.w	#$18,d2
0001E664 4842                       		swap	d2
0001E666 4442                       		neg.w	d2
0001E668 0642 FF4C                  		addi.w	#-$B4,d2
0001E66C 7600                       		moveq	#0,d3
0001E66E 3638 F704                  		move.w	(v_screenposy).w,d3
0001E672 86FC 0018                  		divu.w	#$18,d3
0001E676 4843                       		swap	d3
0001E678 4443                       		neg.w	d3
0001E67A 0643 FF4C                  		addi.w	#-$B4,d3
0001E67E 3E3C 000F                  		move.w	#$F,d7
0001E682                            
0001E682                            loc_1B19E:
0001E682 48A7 E000                  		movem.w	d0-d2,-(sp)
0001E686 48A7 C000                  		movem.w	d0-d1,-(sp)
0001E68A 4440                       		neg.w	d0
0001E68C C3C2                       		muls.w	d2,d1
0001E68E C1C3                       		muls.w	d3,d0
0001E690 2C00                       		move.l	d0,d6
0001E692 DC81                       		add.l	d1,d6
0001E694 4C9F 0003                  		movem.w	(sp)+,d0-d1
0001E698 C1C2                       		muls.w	d2,d0
0001E69A C3C3                       		muls.w	d3,d1
0001E69C D280                       		add.l	d0,d1
0001E69E 2406                       		move.l	d6,d2
0001E6A0 3C3C 000F                  		move.w	#$F,d6
0001E6A4                            
0001E6A4                            loc_1B1C0:
0001E6A4 2002                       		move.l	d2,d0
0001E6A6 E080                       		asr.l	#8,d0
0001E6A8 32C0                       		move.w	d0,(a1)+
0001E6AA 2001                       		move.l	d1,d0
0001E6AC E080                       		asr.l	#8,d0
0001E6AE 32C0                       		move.w	d0,(a1)+
0001E6B0 D485                       		add.l	d5,d2
0001E6B2 D284                       		add.l	d4,d1
0001E6B4 51CE FFEE                  		dbf	d6,loc_1B1C0
0001E6B8                            
0001E6B8 4C9F 0007                  		movem.w	(sp)+,d0-d2
0001E6BC 0643 0018                  		addi.w	#$18,d3
0001E6C0 51CF FFC0                  		dbf	d7,loc_1B19E
0001E6C4                            
0001E6C4 3A1F                       		move.w	(sp)+,d5
0001E6C6 41F9 00FF 0000             		lea	($FF0000).l,a0
0001E6CC 7000                       		moveq	#0,d0
0001E6CE 3038 F704                  		move.w	(v_screenposy).w,d0
0001E6D2 80FC 0018                  		divu.w	#$18,d0
0001E6D6 C0FC 0080                  		mulu.w	#$80,d0
0001E6DA D1C0                       		adda.l	d0,a0
0001E6DC 7000                       		moveq	#0,d0
0001E6DE 3038 F700                  		move.w	(v_screenposx).w,d0
0001E6E2 80FC 0018                  		divu.w	#$18,d0
0001E6E6 D0C0                       		adda.w	d0,a0
0001E6E8 49F8 8000                  		lea	($FFFF8000).w,a4
0001E6EC 3E3C 000F                  		move.w	#$F,d7
0001E6F0                            
0001E6F0                            loc_1B20C:
0001E6F0 3C3C 000F                  		move.w	#$F,d6
0001E6F4                            
0001E6F4                            loc_1B210:
0001E6F4 7000                       		moveq	#0,d0
0001E6F6 1018                       		move.b	(a0)+,d0
0001E6F8 6700                       		beq.s	loc_1B268
0001E6FA 0C00 004E                  		cmpi.b	#$4E,d0
0001E6FE 6200                       		bhi.s	loc_1B268
0001E700 3614                       		move.w	(a4),d3
0001E702 0643 0120                  		addi.w	#$120,d3
0001E706 0C43 0070                  		cmpi.w	#$70,d3
0001E70A 6500                       		blo.s	loc_1B268
0001E70C 0C43 01D0                  		cmpi.w	#$1D0,d3
0001E710 6400                       		bhs.s	loc_1B268
0001E712 342C 0002                  		move.w	2(a4),d2
0001E716 0642 00F0                  		addi.w	#$F0,d2
0001E71A 0C42 0070                  		cmpi.w	#$70,d2
0001E71E 6500                       		blo.s	loc_1B268
0001E720 0C42 0170                  		cmpi.w	#$170,d2
0001E724 6400                       		bhs.s	loc_1B268
0001E726 4BF9 00FF 4000             		lea	($FF4000).l,a5
0001E72C E748                       		lsl.w	#3,d0
0001E72E 4BF5 0000                  		lea	(a5,d0.w),a5
0001E732 225D                       		movea.l	(a5)+,a1
0001E734 321D                       		move.w	(a5)+,d1
0001E736 D241                       		add.w	d1,d1
0001E738 D2F1 1000                  		adda.w	(a1,d1.w),a1
0001E73C 365D                       		movea.w	(a5)+,a3
0001E73E 7200                       		moveq	#0,d1
0001E740 1219                       		move.b	(a1)+,d1
0001E742 5301                       		subq.b	#1,d1
0001E744 6B00                       		bmi.s	loc_1B268
0001E746 4EB9 0000 FAE0             		jsr	(BuildSpr_Normal).l
0001E74C                            
0001E74C                            loc_1B268:
0001E74C 584C                       		addq.w	#4,a4
0001E74E 51CE FFA4                  		dbf	d6,loc_1B210
0001E752                            
0001E752 41E8 0070                  		lea	$70(a0),a0
0001E756 51CF FF98                  		dbf	d7,loc_1B20C
0001E75A                            
0001E75A 11C5 F62C                  		move.b	d5,(v_spritecount).w
0001E75E 0C05 0050                  		cmpi.b	#$50,d5
0001E762 6700                       		beq.s	loc_1B288
0001E764 24BC 0000 0000             		move.l	#0,(a2)
0001E76A 4E75                       		rts	
0001E76C                            ; ===========================================================================
0001E76C                            
0001E76C                            loc_1B288:
0001E76C 157C 0000 FFFB             		move.b	#0,-5(a2)
0001E772 4E75                       		rts	
0001E774                            ; End of function SS_ShowLayout
0001E774                            
0001E774                            ; ---------------------------------------------------------------------------
0001E774                            ; Subroutine to	animate	walls and rings	in the special stage
0001E774                            ; ---------------------------------------------------------------------------
0001E774                            
0001E774                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001E774                            
0001E774                            
0001E774                            SS_AniWallsRings:
0001E774 43F9 00FF 400C             		lea	($FF400C).l,a1
0001E77A 7000                       		moveq	#0,d0
0001E77C 1038 F780                  		move.b	(v_ssangle).w,d0
0001E780 E408                       		lsr.b	#2,d0
0001E782 0240 000F                  		andi.w	#$F,d0
0001E786 7223                       		moveq	#$23,d1
0001E788                            
0001E788                            loc_1B2A4:
0001E788 3280                       		move.w	d0,(a1)
0001E78A 5049                       		addq.w	#8,a1
0001E78C 51C9 FFFA                  		dbf	d1,loc_1B2A4
0001E790                            
0001E790 43F9 00FF 4005             		lea	($FF4005).l,a1
0001E796 5338 FEC2                  		subq.b	#1,(v_ani1_time).w
0001E79A 6A00                       		bpl.s	loc_1B2C8
0001E79C 11FC 0007 FEC2             		move.b	#7,(v_ani1_time).w
0001E7A2 5238 FEC3                  		addq.b	#1,(v_ani1_frame).w
0001E7A6 0238 0003 FEC3             		andi.b	#3,(v_ani1_frame).w
0001E7AC                            
0001E7AC                            loc_1B2C8:
0001E7AC 1378 FEC3 01D0             		move.b	(v_ani1_frame).w,$1D0(a1)
0001E7B2 5338 FEC4                  		subq.b	#1,(v_ani2_time).w
0001E7B6 6A00                       		bpl.s	loc_1B2E4
0001E7B8 11FC 0007 FEC4             		move.b	#7,(v_ani2_time).w
0001E7BE 5238 FEC5                  		addq.b	#1,(v_ani2_frame).w
0001E7C2 0238 0001 FEC5             		andi.b	#1,(v_ani2_frame).w
0001E7C8                            
0001E7C8                            loc_1B2E4:
0001E7C8 1038 FEC5                  		move.b	(v_ani2_frame).w,d0
0001E7CC 1340 0138                  		move.b	d0,$138(a1)
0001E7D0 1340 0160                  		move.b	d0,$160(a1)
0001E7D4 1340 0148                  		move.b	d0,$148(a1)
0001E7D8 1340 0150                  		move.b	d0,$150(a1)
0001E7DC 1340 01D8                  		move.b	d0,$1D8(a1)
0001E7E0 1340 01E0                  		move.b	d0,$1E0(a1)
0001E7E4 1340 01E8                  		move.b	d0,$1E8(a1)
0001E7E8 1340 01F0                  		move.b	d0,$1F0(a1)
0001E7EC 1340 01F8                  		move.b	d0,$1F8(a1)
0001E7F0 1340 0200                  		move.b	d0,$200(a1)
0001E7F4 5338 FEC6                  		subq.b	#1,(v_ani3_time).w
0001E7F8 6A00                       		bpl.s	loc_1B326
0001E7FA 11FC 0004 FEC6             		move.b	#4,(v_ani3_time).w
0001E800 5238 FEC7                  		addq.b	#1,(v_ani3_frame).w
0001E804 0238 0003 FEC7             		andi.b	#3,(v_ani3_frame).w
0001E80A                            
0001E80A                            loc_1B326:
0001E80A 1038 FEC7                  		move.b	(v_ani3_frame).w,d0
0001E80E 1340 0168                  		move.b	d0,$168(a1)
0001E812 1340 0170                  		move.b	d0,$170(a1)
0001E816 1340 0178                  		move.b	d0,$178(a1)
0001E81A 1340 0180                  		move.b	d0,$180(a1)
0001E81E 5338 FEC0                  		subq.b	#1,(v_ani0_time).w
0001E822 6A00                       		bpl.s	loc_1B350
0001E824 11FC 0007 FEC0             		move.b	#7,(v_ani0_time).w
0001E82A 5338 FEC1                  		subq.b	#1,(v_ani0_frame).w
0001E82E 0238 0007 FEC1             		andi.b	#7,(v_ani0_frame).w
0001E834                            
0001E834                            loc_1B350:
0001E834 43F9 00FF 4016             		lea	($FF4016).l,a1
0001E83A 41F9 0000 0000             		lea	(SS_WaRiVramSet).l,a0
0001E840 7000                       		moveq	#0,d0
0001E842 1038 FEC1                  		move.b	(v_ani0_frame).w,d0
0001E846 D040                       		add.w	d0,d0
0001E848 41F0 0000                  		lea	(a0,d0.w),a0
0001E84C 3290                       		move.w	(a0),(a1)
0001E84E 3368 0002 0008             		move.w	2(a0),8(a1)
0001E854 3368 0004 0010             		move.w	4(a0),$10(a1)
0001E85A 3368 0006 0018             		move.w	6(a0),$18(a1)
0001E860 3368 0008 0020             		move.w	8(a0),$20(a1)
0001E866 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001E86C 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001E872 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001E878 D0FC 0020                  		adda.w	#$20,a0
0001E87C D2FC 0048                  		adda.w	#$48,a1
0001E880 3290                       		move.w	(a0),(a1)
0001E882 3368 0002 0008             		move.w	2(a0),8(a1)
0001E888 3368 0004 0010             		move.w	4(a0),$10(a1)
0001E88E 3368 0006 0018             		move.w	6(a0),$18(a1)
0001E894 3368 0008 0020             		move.w	8(a0),$20(a1)
0001E89A 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001E8A0 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001E8A6 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001E8AC D0FC 0020                  		adda.w	#$20,a0
0001E8B0 D2FC 0048                  		adda.w	#$48,a1
0001E8B4 3290                       		move.w	(a0),(a1)
0001E8B6 3368 0002 0008             		move.w	2(a0),8(a1)
0001E8BC 3368 0004 0010             		move.w	4(a0),$10(a1)
0001E8C2 3368 0006 0018             		move.w	6(a0),$18(a1)
0001E8C8 3368 0008 0020             		move.w	8(a0),$20(a1)
0001E8CE 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001E8D4 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001E8DA 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001E8E0 D0FC 0020                  		adda.w	#$20,a0
0001E8E4 D2FC 0048                  		adda.w	#$48,a1
0001E8E8 3290                       		move.w	(a0),(a1)
0001E8EA 3368 0002 0008             		move.w	2(a0),8(a1)
0001E8F0 3368 0004 0010             		move.w	4(a0),$10(a1)
0001E8F6 3368 0006 0018             		move.w	6(a0),$18(a1)
0001E8FC 3368 0008 0020             		move.w	8(a0),$20(a1)
0001E902 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001E908 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001E90E 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001E914 D0FC 0020                  		adda.w	#$20,a0
0001E918 D2FC 0048                  		adda.w	#$48,a1
0001E91C 4E75                       		rts	
0001E91E                            ; End of function SS_AniWallsRings
0001E91E                            
0001E91E                            ; ===========================================================================
0001E91E 0142 6142 0142 0142 0142+  SS_WaRiVramSet:	dc.w $142, $6142, $142,	$142, $142, $142, $142,	$6142
0001E92E 0142 6142 0142 0142 0142+  		dc.w $142, $6142, $142,	$142, $142, $142, $142,	$6142
0001E93E 2142 0142 2142 2142 2142+  		dc.w $2142, $142, $2142, $2142,	$2142, $2142, $2142, $142
0001E94E 2142 0142 2142 2142 2142+  		dc.w $2142, $142, $2142, $2142,	$2142, $2142, $2142, $142
0001E95E 4142 2142 4142 4142 4142+  		dc.w $4142, $2142, $4142, $4142, $4142,	$4142, $4142, $2142
0001E96E 4142 2142 4142 4142 4142+  		dc.w $4142, $2142, $4142, $4142, $4142,	$4142, $4142, $2142
0001E97E 6142 4142 6142 6142 6142+  		dc.w $6142, $4142, $6142, $6142, $6142,	$6142, $6142, $4142
0001E98E 6142 4142 6142 6142 6142+  		dc.w $6142, $4142, $6142, $6142, $6142,	$6142, $6142, $4142
0001E99E                            ; ---------------------------------------------------------------------------
0001E99E                            ; Subroutine to	remove items when you collect them in the special stage
0001E99E                            ; ---------------------------------------------------------------------------
0001E99E                            
0001E99E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001E99E                            
0001E99E                            
0001E99E                            SS_RemoveCollectedItem:
0001E99E 45F9 00FF 4400             		lea	($FF4400).l,a2
0001E9A4 303C 001F                  		move.w	#$1F,d0
0001E9A8                            
0001E9A8                            loc_1B4C4:
0001E9A8 4A12                       		tst.b	(a2)
0001E9AA 6700                       		beq.s	locret_1B4CE
0001E9AC 504A                       		addq.w	#8,a2
0001E9AE 51C8 FFF8                  		dbf	d0,loc_1B4C4
0001E9B2                            
0001E9B2                            locret_1B4CE:
0001E9B2 4E75                       		rts	
0001E9B4                            ; End of function SS_RemoveCollectedItem
0001E9B4                            
0001E9B4                            ; ---------------------------------------------------------------------------
0001E9B4                            ; Subroutine to	animate	special	stage items when you touch them
0001E9B4                            ; ---------------------------------------------------------------------------
0001E9B4                            
0001E9B4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001E9B4                            
0001E9B4                            
0001E9B4                            SS_AniItems:
0001E9B4 41F9 00FF 4400             		lea	($FF4400).l,a0
0001E9BA 3E3C 001F                  		move.w	#$1F,d7
0001E9BE                            
0001E9BE                            loc_1B4DA:
0001E9BE 7000                       		moveq	#0,d0
0001E9C0 1010                       		move.b	(a0),d0
0001E9C2 6700                       		beq.s	loc_1B4E8
0001E9C4 E548                       		lsl.w	#2,d0
0001E9C6 227B 0000                  		movea.l	SS_AniIndex-4(pc,d0.w),a1
0001E9CA 4E91                       		jsr	(a1)
0001E9CC                            
0001E9CC                            loc_1B4E8:
0001E9CC 5048                       		addq.w	#8,a0
0001E9CE                            
0001E9CE                            loc_1B4EA:
0001E9CE 51CF FFEE                  		dbf	d7,loc_1B4DA
0001E9D2                            
0001E9D2 4E75                       		rts	
0001E9D4                            ; End of function SS_AniItems
0001E9D4                            
0001E9D4                            ; ===========================================================================
0001E9D4 0000 0000                  SS_AniIndex:	dc.l SS_AniRingSparks
0001E9D8 0000 0000                  		dc.l SS_AniBumper
0001E9DC 0000 0000                  		dc.l SS_Ani1Up
0001E9E0 0000 0000                  		dc.l SS_AniReverse
0001E9E4 0000 0000                  		dc.l SS_AniEmeraldSparks
0001E9E8 0000 0000                  		dc.l SS_AniGlassBlock
0001E9EC                            ; ===========================================================================
0001E9EC                            
0001E9EC                            SS_AniRingSparks:
0001E9EC 5328 0002                  		subq.b	#1,2(a0)
0001E9F0 6A00                       		bpl.s	locret_1B530
0001E9F2 117C 0005 0002             		move.b	#5,2(a0)
0001E9F8 7000                       		moveq	#0,d0
0001E9FA 1028 0003                  		move.b	3(a0),d0
0001E9FE 5228 0003                  		addq.b	#1,3(a0)
0001EA02 2268 0004                  		movea.l	4(a0),a1
0001EA06 103B 0000                  		move.b	SS_AniRingData(pc,d0.w),d0
0001EA0A 1280                       		move.b	d0,(a1)
0001EA0C 6600                       		bne.s	locret_1B530
0001EA0E 4290                       		clr.l	(a0)
0001EA10 42A8 0004                  		clr.l	4(a0)
0001EA14                            
0001EA14                            locret_1B530:
0001EA14 4E75                       		rts	
0001EA16                            ; ===========================================================================
0001EA16 4243 4445 0000             SS_AniRingData:	dc.b $42, $43, $44, $45, 0, 0
0001EA1C                            ; ===========================================================================
0001EA1C                            
0001EA1C                            SS_AniBumper:
0001EA1C 5328 0002                  		subq.b	#1,2(a0)
0001EA20 6A00                       		bpl.s	locret_1B566
0001EA22 117C 0007 0002             		move.b	#7,2(a0)
0001EA28 7000                       		moveq	#0,d0
0001EA2A 1028 0003                  		move.b	3(a0),d0
0001EA2E 5228 0003                  		addq.b	#1,3(a0)
0001EA32 2268 0004                  		movea.l	4(a0),a1
0001EA36 103B 0000                  		move.b	SS_AniBumpData(pc,d0.w),d0
0001EA3A 6600                       		bne.s	loc_1B564
0001EA3C 4290                       		clr.l	(a0)
0001EA3E 42A8 0004                  		clr.l	4(a0)
0001EA42 12BC 0025                  		move.b	#$25,(a1)
0001EA46 4E75                       		rts	
0001EA48                            ; ===========================================================================
0001EA48                            
0001EA48                            loc_1B564:
0001EA48 1280                       		move.b	d0,(a1)
0001EA4A                            
0001EA4A                            locret_1B566:
0001EA4A 4E75                       		rts	
0001EA4C                            ; ===========================================================================
0001EA4C 3233 3233 0000             SS_AniBumpData:	dc.b $32, $33, $32, $33, 0, 0
0001EA52                            ; ===========================================================================
0001EA52                            
0001EA52                            SS_Ani1Up:
0001EA52 5328 0002                  		subq.b	#1,2(a0)
0001EA56 6A00                       		bpl.s	locret_1B596
0001EA58 117C 0005 0002             		move.b	#5,2(a0)
0001EA5E 7000                       		moveq	#0,d0
0001EA60 1028 0003                  		move.b	3(a0),d0
0001EA64 5228 0003                  		addq.b	#1,3(a0)
0001EA68 2268 0004                  		movea.l	4(a0),a1
0001EA6C 103B 0000                  		move.b	SS_Ani1UpData(pc,d0.w),d0
0001EA70 1280                       		move.b	d0,(a1)
0001EA72 6600                       		bne.s	locret_1B596
0001EA74 4290                       		clr.l	(a0)
0001EA76 42A8 0004                  		clr.l	4(a0)
0001EA7A                            
0001EA7A                            locret_1B596:
0001EA7A 4E75                       		rts	
0001EA7C                            ; ===========================================================================
0001EA7C 4647 4849 0000             SS_Ani1UpData:	dc.b $46, $47, $48, $49, 0, 0
0001EA82                            ; ===========================================================================
0001EA82                            
0001EA82                            SS_AniReverse:
0001EA82 5328 0002                  		subq.b	#1,2(a0)
0001EA86 6A00                       		bpl.s	locret_1B5CC
0001EA88 117C 0007 0002             		move.b	#7,2(a0)
0001EA8E 7000                       		moveq	#0,d0
0001EA90 1028 0003                  		move.b	3(a0),d0
0001EA94 5228 0003                  		addq.b	#1,3(a0)
0001EA98 2268 0004                  		movea.l	4(a0),a1
0001EA9C 103B 0000                  		move.b	SS_AniRevData(pc,d0.w),d0
0001EAA0 6600                       		bne.s	loc_1B5CA
0001EAA2 4290                       		clr.l	(a0)
0001EAA4 42A8 0004                  		clr.l	4(a0)
0001EAA8 12BC 002B                  		move.b	#$2B,(a1)
0001EAAC 4E75                       		rts	
0001EAAE                            ; ===========================================================================
0001EAAE                            
0001EAAE                            loc_1B5CA:
0001EAAE 1280                       		move.b	d0,(a1)
0001EAB0                            
0001EAB0                            locret_1B5CC:
0001EAB0 4E75                       		rts	
0001EAB2                            ; ===========================================================================
0001EAB2 2B31 2B31 0000             SS_AniRevData:	dc.b $2B, $31, $2B, $31, 0, 0
0001EAB8                            ; ===========================================================================
0001EAB8                            
0001EAB8                            SS_AniEmeraldSparks:
0001EAB8 5328 0002                  		subq.b	#1,2(a0)
0001EABC 6A00                       		bpl.s	locret_1B60C
0001EABE 117C 0005 0002             		move.b	#5,2(a0)
0001EAC4 7000                       		moveq	#0,d0
0001EAC6 1028 0003                  		move.b	3(a0),d0
0001EACA 5228 0003                  		addq.b	#1,3(a0)
0001EACE 2268 0004                  		movea.l	4(a0),a1
0001EAD2 103B 0000                  		move.b	SS_AniEmerData(pc,d0.w),d0
0001EAD6 1280                       		move.b	d0,(a1)
0001EAD8 6600                       		bne.s	locret_1B60C
0001EADA 4290                       		clr.l	(a0)
0001EADC 42A8 0004                  		clr.l	4(a0)
0001EAE0 11FC 0004 D024             		move.b	#4,($FFFFD024).w
0001EAF0                            
0001EAF0                            locret_1B60C:
0001EAF0 4E75                       		rts	
0001EAF2                            ; ===========================================================================
0001EAF2 4647 4849 0000             SS_AniEmerData:	dc.b $46, $47, $48, $49, 0, 0
0001EAF8                            ; ===========================================================================
0001EAF8                            
0001EAF8                            SS_AniGlassBlock:
0001EAF8 5328 0002                  		subq.b	#1,2(a0)
0001EAFC 6A00                       		bpl.s	locret_1B640
0001EAFE 117C 0001 0002             		move.b	#1,2(a0)
0001EB04 7000                       		moveq	#0,d0
0001EB06 1028 0003                  		move.b	3(a0),d0
0001EB0A 5228 0003                  		addq.b	#1,3(a0)
0001EB0E 2268 0004                  		movea.l	4(a0),a1
0001EB12 103B 0000                  		move.b	SS_AniGlassData(pc,d0.w),d0
0001EB16 1280                       		move.b	d0,(a1)
0001EB18 6600                       		bne.s	locret_1B640
0001EB1A 12A8 0004                  		move.b	4(a0),(a1)
0001EB1E 4290                       		clr.l	(a0)
0001EB20 42A8 0004                  		clr.l	4(a0)
0001EB24                            
0001EB24                            locret_1B640:
0001EB24 4E75                       		rts	
0001EB26                            ; ===========================================================================
0001EB26 4B4C 4D4E 4B4C 4D4E 0000   SS_AniGlassData:dc.b $4B, $4C, $4D, $4E, $4B, $4C, $4D,	$4E, 0,	0
0001EB30                            
0001EB30                            ; ---------------------------------------------------------------------------
0001EB30                            ; Special stage	layout pointers
0001EB30                            ; ---------------------------------------------------------------------------
0001EB30                            SS_LayoutIndex:
0001EB30 0000 0000                  		dc.l SS_1
0001EB34 0000 0000                  		dc.l SS_2
0001EB38 0000 0000                  		dc.l SS_3
0001EB3C 0000 0000                  		dc.l SS_4
0001EB40 0000 0000                  		dc.l SS_5
0001EB44 0000 0000                  		dc.l SS_6
0001EB48                            		even
0001EB48                            
0001EB48                            ; ---------------------------------------------------------------------------
0001EB48                            ; Special stage start locations
0001EB48                            ; ---------------------------------------------------------------------------
0001EB48                            SS_StartLoc:	include	"_inc\Start Location Array - Special Stages.asm"
0001EB48                            ; ---------------------------------------------------------------------------
0001EB48                            ; Special stage start locations
0001EB48                            ; ---------------------------------------------------------------------------
0001EB48                            
0001EB48                            		incbin	"startpos\ss1.bin"
0001EB4C                            		incbin	"startpos\ss2.bin"
0001EB50                            		incbin	"startpos\ss3.bin"
0001EB54                            		incbin	"startpos\ss4.bin"
0001EB58                            		incbin	"startpos\ss5.bin"
0001EB5C                            		incbin	"startpos\ss6.bin"
0001EB60                            		even
0001EB60                            		even
0001EB60                            
0001EB60                            ; ---------------------------------------------------------------------------
0001EB60                            ; Subroutine to	load special stage layout
0001EB60                            ; ---------------------------------------------------------------------------
0001EB60                            
0001EB60                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001EB60                            
0001EB60                            
0001EB60                            SS_Load:
0001EB60 7000                       		moveq	#0,d0
0001EB62 1038 FE16                  		move.b	(v_lastspecial).w,d0 ; load number of last special stage entered
0001EB66 5238 FE16                  		addq.b	#1,(v_lastspecial).w
0001EB6A 0C38 0006 FE16             		cmpi.b	#6,(v_lastspecial).w
0001EB70 6500                       		blo.s	SS_ChkEmldNum
0001EB72 11FC 0000 FE16             		move.b	#0,(v_lastspecial).w ; reset if higher than 6
0001EB78                            
0001EB78                            SS_ChkEmldNum:
0001EB78 0C38 0006 FE57             		cmpi.b	#6,(v_emeralds).w ; do you have all emeralds?
0001EB7E 6700                       		beq.s	SS_LoadData	; if yes, branch
0001EB80 7200                       		moveq	#0,d1
0001EB82 1238 FE57                  		move.b	(v_emeralds).w,d1
0001EB86 5301                       		subq.b	#1,d1
0001EB88 6500                       		blo.s	SS_LoadData
0001EB8A 47F8 FE58                  		lea	(v_emldlist).w,a3 ; check which emeralds you have
0001EB8E                            
0001EB8E                            SS_ChkEmldLoop:	
0001EB8E B033 1000                  		cmp.b	(a3,d1.w),d0
0001EB92 6600                       		bne.s	SS_ChkEmldRepeat
0001EB94 60CA                       		bra.s	SS_Load
0001EB96                            ; ===========================================================================
0001EB96                            
0001EB96                            SS_ChkEmldRepeat:
0001EB96 51C9 FFF6                  		dbf	d1,SS_ChkEmldLoop
0001EB9A                            
0001EB9A                            SS_LoadData:
0001EB9A E548                       		lsl.w	#2,d0
0001EB9C 43FB 00AA                  		lea	SS_StartLoc(pc,d0.w),a1
0001EBA0 31D9 D008                  		move.w	(a1)+,(v_player+obX).w
0001EBA4 31D9 D00C                  		move.w	(a1)+,(v_player+obY).w
0001EBA8 207B 0086                  		movea.l	SS_LayoutIndex(pc,d0.w),a0
0001EBAC 43F9 00FF 4000             		lea	($FF4000).l,a1
0001EBB2 303C 0000                  		move.w	#0,d0
0001EBB6 4EB9 0000 188C             		jsr	(EniDec).l
0001EBBC 43F9 00FF 0000             		lea	($FF0000).l,a1
0001EBC2 303C 0FFF                  		move.w	#$FFF,d0
0001EBC6                            
0001EBC6                            SS_ClrRAM3:
0001EBC6 4299                       		clr.l	(a1)+
0001EBC8 51C8 FFFC                  		dbf	d0,SS_ClrRAM3
0001EBCC                            
0001EBCC 43F9 00FF 1020             		lea	($FF1020).l,a1
0001EBD2 41F9 00FF 4000             		lea	($FF4000).l,a0
0001EBD8 723F                       		moveq	#$3F,d1
0001EBDA                            
0001EBDA                            loc_1B6F6:
0001EBDA 743F                       		moveq	#$3F,d2
0001EBDC                            
0001EBDC                            loc_1B6F8:
0001EBDC 12D8                       		move.b	(a0)+,(a1)+
0001EBDE 51CA FFFC                  		dbf	d2,loc_1B6F8
0001EBE2                            
0001EBE2 43E9 0040                  		lea	$40(a1),a1
0001EBE6 51C9 FFF2                  		dbf	d1,loc_1B6F6
0001EBEA                            
0001EBEA 43F9 00FF 4008             		lea	($FF4008).l,a1
0001EBF0 41F9 0000 0000             		lea	(SS_MapIndex).l,a0
0001EBF6 724D                       		moveq	#$4D,d1
0001EBF8                            
0001EBF8                            loc_1B714:
0001EBF8 22D8                       		move.l	(a0)+,(a1)+
0001EBFA 32FC 0000                  		move.w	#0,(a1)+
0001EBFE 1368 FFFC FFFF             		move.b	-4(a0),-1(a1)
0001EC04 32D8                       		move.w	(a0)+,(a1)+
0001EC06 51C9 FFF0                  		dbf	d1,loc_1B714
0001EC0A                            
0001EC0A 43F9 00FF 4400             		lea	($FF4400).l,a1
0001EC10 323C 003F                  		move.w	#$3F,d1
0001EC14                            
0001EC14                            loc_1B730:
0001EC14                            
0001EC14 4299                       		clr.l	(a1)+
0001EC16 51C9 FFFC                  		dbf	d1,loc_1B730
0001EC1A                            
0001EC1A 4E75                       		rts	
0001EC1C                            ; End of function SS_Load
0001EC1C                            
0001EC1C                            ; ===========================================================================
0001EC1C                            
0001EC1C                            SS_MapIndex:
0001EC1C                            		include	"_inc\Special Stage Mappings & VRAM Pointers.asm"
0001EC1C                            ; ---------------------------------------------------------------------------
0001EC1C                            ; Special stage	mappings and VRAM pointers
0001EC1C                            ; ---------------------------------------------------------------------------
0001EC1C 0000 0000                  	dc.l Map_SSWalls	; address of mappings
0001EC20 0142                       	dc.w $142		; VRAM setting
0001EC22 0000 0000                  	dc.l Map_SSWalls
0001EC26 0142                       	dc.w $142
0001EC28 0000 0000                  	dc.l Map_SSWalls
0001EC2C 0142                       	dc.w $142
0001EC2E 0000 0000                  	dc.l Map_SSWalls
0001EC32 0142                       	dc.w $142
0001EC34 0000 0000                  	dc.l Map_SSWalls
0001EC38 0142                       	dc.w $142
0001EC3A 0000 0000                  	dc.l Map_SSWalls
0001EC3E 0142                       	dc.w $142
0001EC40 0000 0000                  	dc.l Map_SSWalls
0001EC44 0142                       	dc.w $142
0001EC46 0000 0000                  	dc.l Map_SSWalls
0001EC4A 0142                       	dc.w $142
0001EC4C 0000 0000                  	dc.l Map_SSWalls
0001EC50 0142                       	dc.w $142
0001EC52 0000 0000                  	dc.l Map_SSWalls
0001EC56 2142                       	dc.w $2142
0001EC58 0000 0000                  	dc.l Map_SSWalls
0001EC5C 2142                       	dc.w $2142
0001EC5E 0000 0000                  	dc.l Map_SSWalls
0001EC62 2142                       	dc.w $2142
0001EC64 0000 0000                  	dc.l Map_SSWalls
0001EC68 2142                       	dc.w $2142
0001EC6A 0000 0000                  	dc.l Map_SSWalls
0001EC6E 2142                       	dc.w $2142
0001EC70 0000 0000                  	dc.l Map_SSWalls
0001EC74 2142                       	dc.w $2142
0001EC76 0000 0000                  	dc.l Map_SSWalls
0001EC7A 2142                       	dc.w $2142
0001EC7C 0000 0000                  	dc.l Map_SSWalls
0001EC80 2142                       	dc.w $2142
0001EC82 0000 0000                  	dc.l Map_SSWalls
0001EC86 2142                       	dc.w $2142
0001EC88 0000 0000                  	dc.l Map_SSWalls
0001EC8C 4142                       	dc.w $4142
0001EC8E 0000 0000                  	dc.l Map_SSWalls
0001EC92 4142                       	dc.w $4142
0001EC94 0000 0000                  	dc.l Map_SSWalls
0001EC98 4142                       	dc.w $4142
0001EC9A 0000 0000                  	dc.l Map_SSWalls
0001EC9E 4142                       	dc.w $4142
0001ECA0 0000 0000                  	dc.l Map_SSWalls
0001ECA4 4142                       	dc.w $4142
0001ECA6 0000 0000                  	dc.l Map_SSWalls
0001ECAA 4142                       	dc.w $4142
0001ECAC 0000 0000                  	dc.l Map_SSWalls
0001ECB0 4142                       	dc.w $4142
0001ECB2 0000 0000                  	dc.l Map_SSWalls
0001ECB6 4142                       	dc.w $4142
0001ECB8 0000 0000                  	dc.l Map_SSWalls
0001ECBC 4142                       	dc.w $4142
0001ECBE 0000 0000                  	dc.l Map_SSWalls
0001ECC2 6142                       	dc.w $6142
0001ECC4 0000 0000                  	dc.l Map_SSWalls
0001ECC8 6142                       	dc.w $6142
0001ECCA 0000 0000                  	dc.l Map_SSWalls
0001ECCE 6142                       	dc.w $6142
0001ECD0 0000 0000                  	dc.l Map_SSWalls
0001ECD4 6142                       	dc.w $6142
0001ECD6 0000 0000                  	dc.l Map_SSWalls
0001ECDA 6142                       	dc.w $6142
0001ECDC 0000 0000                  	dc.l Map_SSWalls
0001ECE0 6142                       	dc.w $6142
0001ECE2 0000 0000                  	dc.l Map_SSWalls
0001ECE6 6142                       	dc.w $6142
0001ECE8 0000 0000                  	dc.l Map_SSWalls
0001ECEC 6142                       	dc.w $6142
0001ECEE 0000 0000                  	dc.l Map_SSWalls
0001ECF2 6142                       	dc.w $6142
0001ECF4 0001 0EA0                  	dc.l Map_Bump
0001ECF8 023B                       	dc.w $23B
0001ECFA 0000 0000                  	dc.l Map_SS_R
0001ECFE 0570                       	dc.w $570
0001ED00 0000 0000                  	dc.l Map_SS_R
0001ED04 0251                       	dc.w $251
0001ED06 0000 0000                  	dc.l Map_SS_R
0001ED0A 0370                       	dc.w $370
0001ED0C 0000 0000                  	dc.l Map_SS_Up
0001ED10 0263                       	dc.w $263
0001ED12 0000 0000                  	dc.l Map_SS_Down
0001ED16 0263                       	dc.w $263
0001ED18 0000 0000                  	dc.l Map_SS_R
0001ED1C 22F0                       	dc.w $22F0
0001ED1E 0000 0000                  	dc.l Map_SS_Glass
0001ED22 0470                       	dc.w $470
0001ED24 0000 0000                  	dc.l Map_SS_Glass
0001ED28 05F0                       	dc.w $5F0
0001ED2A 0000 0000                  	dc.l Map_SS_Glass
0001ED2E 65F0                       	dc.w $65F0
0001ED30 0000 0000                  	dc.l Map_SS_Glass
0001ED34 25F0                       	dc.w $25F0
0001ED36 0000 0000                  	dc.l Map_SS_Glass
0001ED3A 45F0                       	dc.w $45F0
0001ED3C 0000 0000                  	dc.l Map_SS_R
0001ED40 02F0                       	dc.w $2F0
0001ED42 0101 0EA0                  	dc.l Map_Bump+$1000000	; add frame no.	* $1000000
0001ED46 023B                       	dc.w $23B
0001ED48 0201 0EA0                  	dc.l Map_Bump+$2000000
0001ED4C 023B                       	dc.w $23B
0001ED4E 0000 0000                  	dc.l Map_SS_R
0001ED52 0797                       	dc.w $797
0001ED54 0000 0000                  	dc.l Map_SS_R
0001ED58 07A0                       	dc.w $7A0
0001ED5A 0000 0000                  	dc.l Map_SS_R
0001ED5E 07A9                       	dc.w $7A9
0001ED60 0000 0000                  	dc.l Map_SS_R
0001ED64 0797                       	dc.w $797
0001ED66 0000 0000                  	dc.l Map_SS_R
0001ED6A 07A0                       	dc.w $7A0
0001ED6C 0000 0000                  	dc.l Map_SS_R
0001ED70 07A9                       	dc.w $7A9
0001ED72 0000 BFD8                  	dc.l Map_Ring
0001ED76 2798                       	dc.w $2798
0001ED78 0000 0000                  	dc.l Map_SS_Chaos3
0001ED7C 0770                       	dc.w $770
0001ED7E 0000 0000                  	dc.l Map_SS_Chaos3
0001ED82 2770                       	dc.w $2770
0001ED84 0000 0000                  	dc.l Map_SS_Chaos3
0001ED88 4770                       	dc.w $4770
0001ED8A 0000 0000                  	dc.l Map_SS_Chaos3
0001ED8E 6770                       	dc.w $6770
0001ED90 0000 0000                  	dc.l Map_SS_Chaos1
0001ED94 0770                       	dc.w $770
0001ED96 0000 0000                  	dc.l Map_SS_Chaos2
0001ED9A 0770                       	dc.w $770
0001ED9C 0000 0000                  	dc.l Map_SS_R
0001EDA0 04F0                       	dc.w $4F0
0001EDA2 0400 BFD8                  	dc.l Map_Ring+$4000000
0001EDA6 2798                       	dc.w $2798
0001EDA8 0500 BFD8                  	dc.l Map_Ring+$5000000
0001EDAC 2798                       	dc.w $2798
0001EDAE 0600 BFD8                  	dc.l Map_Ring+$6000000
0001EDB2 2798                       	dc.w $2798
0001EDB4 0700 BFD8                  	dc.l Map_Ring+$7000000
0001EDB8 2798                       	dc.w $2798
0001EDBA 0000 0000                  	dc.l Map_SS_Glass
0001EDBE 23F0                       	dc.w $23F0
0001EDC0 0000 0000                  	dc.l Map_SS_Glass+$1000000
0001EDC4 23F0                       	dc.w $23F0
0001EDC6 0000 0000                  	dc.l Map_SS_Glass+$2000000
0001EDCA 23F0                       	dc.w $23F0
0001EDCC 0000 0000                  	dc.l Map_SS_Glass+$3000000
0001EDD0 23F0                       	dc.w $23F0
0001EDD2 0000 0000                  	dc.l Map_SS_R+$2000000
0001EDD6 04F0                       	dc.w $4F0
0001EDD8 0000 0000                  	dc.l Map_SS_Glass
0001EDDC 05F0                       	dc.w $5F0
0001EDDE 0000 0000                  	dc.l Map_SS_Glass
0001EDE2 65F0                       	dc.w $65F0
0001EDE4 0000 0000                  	dc.l Map_SS_Glass
0001EDE8 25F0                       	dc.w $25F0
0001EDEA 0000 0000                  	dc.l Map_SS_Glass
0001EDEE 45F0                       	dc.w $45F0
0001EDEE 45F0                       	dc.w $45F0
0001EDF0                            
0001EDF0                            Map_SS_R:	include	"_maps\SS R Block.asm"
0001EDF0                            ; ---------------------------------------------------------------------------
0001EDF0                            ; Sprite mappings - special stage "R" block
0001EDF0                            ; ---------------------------------------------------------------------------
0001EDF0                            Map_SS_R_internal:
0001EDF0 0000                       		dc.w byte_1B912-Map_SS_R_internal
0001EDF2 0000                       		dc.w byte_1B918-Map_SS_R_internal
0001EDF4 0000                       		dc.w byte_1B91E-Map_SS_R_internal
0001EDF6 01                         byte_1B912:	dc.b 1
0001EDF7 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0001EDFC 01                         byte_1B918:	dc.b 1
0001EDFD F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
0001EE02 00                         byte_1B91E:	dc.b 0
0001EE04 00                         		even
0001EE04 00                         		even
0001EE04                            Map_SS_Glass:	include	"_maps\SS Glass Block.asm"
0001EE04                            ; ---------------------------------------------------------------------------
0001EE04                            ; Sprite mappings - special stage breakable glass blocks and red-white blocks
0001EE04                            ; ---------------------------------------------------------------------------
0001EE04                            Map_SS_Glass_internal:
0001EE04 0000                       		dc.w byte_1B928-Map_SS_Glass_internal
0001EE06 0000                       		dc.w byte_1B92E-Map_SS_Glass_internal
0001EE08 0000                       		dc.w byte_1B934-Map_SS_Glass_internal
0001EE0A 0000                       		dc.w byte_1B93A-Map_SS_Glass_internal
0001EE0C 01                         byte_1B928:	dc.b 1
0001EE0D F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0001EE12 01                         byte_1B92E:	dc.b 1
0001EE13 F40A 0800 F4               		dc.b $F4, $A, 8, 0, $F4
0001EE18 01                         byte_1B934:	dc.b 1
0001EE19 F40A 1800 F4               		dc.b $F4, $A, $18, 0, $F4
0001EE1E 01                         byte_1B93A:	dc.b 1
0001EE1F F40A 1000 F4               		dc.b $F4, $A, $10, 0, $F4
0001EE24                            		even
0001EE24                            		even
0001EE24                            Map_SS_Up:	include	"_maps\SS UP Block.asm"
0001EE24                            ; ---------------------------------------------------------------------------
0001EE24                            ; Sprite mappings - special stage "UP" block
0001EE24                            ; ---------------------------------------------------------------------------
0001EE24                            Map_SS_Up_internal:
0001EE24 0000                       		dc.w byte_1B944-Map_SS_Up_internal
0001EE26 0000                       		dc.w byte_1B94A-Map_SS_Up_internal
0001EE28 01                         byte_1B944:	dc.b 1
0001EE29 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0001EE2E 01                         byte_1B94A:	dc.b 1
0001EE2F F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
0001EE34                            		even
0001EE34                            		even
0001EE34                            Map_SS_Down:	include	"_maps\SS DOWN Block.asm"
0001EE34                            ; ---------------------------------------------------------------------------
0001EE34                            ; Sprite mappings - special stage "DOWN" block
0001EE34                            ; ---------------------------------------------------------------------------
0001EE34                            Map_SS_Down_internal:
0001EE34 0000                       		dc.w byte_1B954-Map_SS_Down_internal
0001EE36 0000                       		dc.w byte_1B95A-Map_SS_Down_internal
0001EE38 01                         byte_1B954:	dc.b 1
0001EE39 F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
0001EE3E 01                         byte_1B95A:	dc.b 1
0001EE3F F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
0001EE44                            		even
0001EE44                            		even
0001EE44                            		include	"_maps\SS Chaos Emeralds.asm"
0001EE44                            ; ---------------------------------------------------------------------------
0001EE44                            ; Sprite mappings - special stage chaos	emeralds
0001EE44                            ; ---------------------------------------------------------------------------
0001EE44 0000                       Map_SS_Chaos1:	dc.w byte_1B96C-Map_SS_Chaos1
0001EE46 0000                       		dc.w byte_1B97E-Map_SS_Chaos1
0001EE48 0000                       Map_SS_Chaos2:	dc.w byte_1B972-Map_SS_Chaos2
0001EE4A 0000                       		dc.w byte_1B97E-Map_SS_Chaos2
0001EE4C 0000                       Map_SS_Chaos3:	dc.w byte_1B978-Map_SS_Chaos3
0001EE4E 0000                       		dc.w byte_1B97E-Map_SS_Chaos3
0001EE50 01                         byte_1B96C:	dc.b 1
0001EE51 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0001EE56 01                         byte_1B972:	dc.b 1
0001EE57 F805 2004 F8               		dc.b $F8, 5, $20, 4, $F8
0001EE5C 01                         byte_1B978:	dc.b 1
0001EE5D F805 0008 F8               		dc.b $F8, 5, 0,	8, $F8
0001EE62 01                         byte_1B97E:	dc.b 1
0001EE63 F805 000C F8               		dc.b $F8, 5, 0,	$C, $F8
0001EE68                            		even
0001EE68                            		even
0001EE68                            
0001EE68                            		include	"_incObj\09 Sonic in Special Stage.asm"
0001EE68                            ; ---------------------------------------------------------------------------
0001EE68                            ; Object 09 - Sonic (special stage)
0001EE68                            ; ---------------------------------------------------------------------------
0001EE68                            
0001EE68                            SonicSpecial:
0001EE68 4A78 FE08                  		tst.w	(v_debuguse).w	; is debug mode	being used?
0001EE6C 6700                       		beq.s	Obj09_Normal	; if not, branch
0001EE6E 6100 0000                  		bsr.w	SS_FixCamera
0001EE72 6000 0000                  		bra.w	DebugMode
0001EE76                            ; ===========================================================================
0001EE76                            
0001EE76                            Obj09_Normal:
0001EE76 7000                       		moveq	#0,d0
0001EE78 1028 0024                  		move.b	obRoutine(a0),d0
0001EE7C 323B 0000                  		move.w	Obj09_Index(pc,d0.w),d1
0001EE80 4EFB 1000                  		jmp	Obj09_Index(pc,d1.w)
0001EE84                            ; ===========================================================================
0001EE84 0000                       Obj09_Index:	dc.w Obj09_Main-Obj09_Index
0001EE86 0000                       		dc.w Obj09_ChkDebug-Obj09_Index
0001EE88 0000                       		dc.w Obj09_ExitStage-Obj09_Index
0001EE8A 0000                       		dc.w Obj09_Exit2-Obj09_Index
0001EE8C                            ; ===========================================================================
0001EE8C                            
0001EE8C                            Obj09_Main:	; Routine 0
0001EE8C 5428 0024                  		addq.b	#2,obRoutine(a0)
0001EE90 117C 000E 0016             		move.b	#$E,obHeight(a0)
0001EE96 117C 0007 0017             		move.b	#7,obWidth(a0)
0001EE9C 217C 0000 0000 0004        		move.l	#Map_Sonic,obMap(a0)
0001EEA4 317C 0780 0002             		move.w	#$780,obGfx(a0)
0001EEAA 117C 0004 0001             		move.b	#4,obRender(a0)
0001EEB0 317C 0000 0018             		move.w	#0,obPriority(a0)
0001EEB6 117C 0002 001C             		move.b	#id_Roll,obAnim(a0)
0001EEBC 08E8 0002 0022             		bset	#2,obStatus(a0)
0001EEC2 08E8 0001 0022             		bset	#1,obStatus(a0)
0001EEC8                            
0001EEC8                            Obj09_ChkDebug:	; Routine 2
0001EEC8 4A78 FFFA                  		tst.w	(f_debugmode).w	; is debug mode	cheat enabled?
0001EECC 6700                       		beq.s	Obj09_NoDebug	; if not, branch
0001EECE 0838 0004 F605             		btst	#bitB,(v_jpadpress1).w ; is button B pressed?
0001EED4 6700                       		beq.s	Obj09_NoDebug	; if not, branch
0001EED6 31FC 0001 FE08             		move.w	#1,(v_debuguse).w ; change Sonic into a ring
0001EEDC                            
0001EEDC                            Obj09_NoDebug:
0001EEDC 117C 0000 0030             		move.b	#0,$30(a0)
0001EEE2 7000                       		moveq	#0,d0
0001EEE4 1028 0022                  		move.b	obStatus(a0),d0
0001EEE8 0240 0002                  		andi.w	#2,d0
0001EEEC 323B 0000                  		move.w	Obj09_Modes(pc,d0.w),d1
0001EEF0 4EBB 1000                  		jsr	Obj09_Modes(pc,d1.w)
0001EEF4 4EB9 0001 698A             		jsr	(Sonic_LoadGfx).l
0001EEFA 4EF9 0000 F97C             		jmp	(DisplaySprite).l
0001EF00                            ; ===========================================================================
0001EF00 0000                       Obj09_Modes:	dc.w Obj09_OnWall-Obj09_Modes
0001EF02 0000                       		dc.w Obj09_InAir-Obj09_Modes
0001EF04                            ; ===========================================================================
0001EF04                            
0001EF04                            Obj09_OnWall:
0001EF04 6100 0000                  		bsr.w	Obj09_Jump
0001EF08 6100 0000                  		bsr.w	Obj09_Move
0001EF0C 6100 0000                  		bsr.w	Obj09_Fall
0001EF10 6000                       		bra.s	Obj09_Display
0001EF12                            ; ===========================================================================
0001EF12                            
0001EF12                            Obj09_InAir:
0001EF12 6100 0000                  		bsr.w	nullsub_2
0001EF16 6100 0000                  		bsr.w	Obj09_Move
0001EF1A 6100 0000                  		bsr.w	Obj09_Fall
0001EF1E                            
0001EF1E                            Obj09_Display:
0001EF1E 6100 0000                  		bsr.w	Obj09_ChkItems
0001EF22 6100 0000                  		bsr.w	Obj09_ChkItems2
0001EF26 4EB9 0000 F968             		jsr	(SpeedToPos).l
0001EF2C 6100 0000                  		bsr.w	SS_FixCamera
0001EF30 3038 F780                  		move.w	(v_ssangle).w,d0
0001EF34 D078 F782                  		add.w	(v_ssrotate).w,d0
0001EF38 31C0 F780                  		move.w	d0,(v_ssangle).w
0001EF3C 4EB9 0001 65F2             		jsr	(Sonic_Animate).l
0001EF42 4E75                       		rts	
0001EF44                            
0001EF44                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001EF44                            
0001EF44                            
0001EF44                            Obj09_Move:
0001EF44 0838 0002 F602             		btst	#bitL,(v_jpadhold2).w ; is left being pressed?
0001EF4A 6700                       		beq.s	Obj09_ChkRight	; if not, branch
0001EF4C 6100 0000                  		bsr.w	Obj09_MoveLeft
0001EF50                            
0001EF50                            Obj09_ChkRight:
0001EF50 0838 0003 F602             		btst	#bitR,(v_jpadhold2).w ; is right being pressed?
0001EF56 6700                       		beq.s	loc_1BA78	; if not, branch
0001EF58 6100 0000                  		bsr.w	Obj09_MoveRight
0001EF5C                            
0001EF5C                            loc_1BA78:
0001EF5C 1038 F602                  		move.b	(v_jpadhold2).w,d0
0001EF60 0200 000C                  		andi.b	#btnL+btnR,d0
0001EF64 6600                       		bne.s	loc_1BAA8
0001EF66 3028 0020                  		move.w	obInertia(a0),d0
0001EF6A 6700                       		beq.s	loc_1BAA8
0001EF6C 6B00                       		bmi.s	loc_1BA9A
0001EF6E 0440 000C                  		subi.w	#$C,d0
0001EF72 6400                       		bcc.s	loc_1BA94
0001EF74 303C 0000                  		move.w	#0,d0
0001EF78                            
0001EF78                            loc_1BA94:
0001EF78 3140 0020                  		move.w	d0,obInertia(a0)
0001EF7C 6000                       		bra.s	loc_1BAA8
0001EF7E                            ; ===========================================================================
0001EF7E                            
0001EF7E                            loc_1BA9A:
0001EF7E 0640 000C                  		addi.w	#$C,d0
0001EF82 6400                       		bcc.s	loc_1BAA4
0001EF84 303C 0000                  		move.w	#0,d0
0001EF88                            
0001EF88                            loc_1BAA4:
0001EF88 3140 0020                  		move.w	d0,obInertia(a0)
0001EF8C                            
0001EF8C                            loc_1BAA8:
0001EF8C 1038 F780                  		move.b	(v_ssangle).w,d0
0001EF90 0600 0020                  		addi.b	#$20,d0
0001EF94 0200 00C0                  		andi.b	#$C0,d0
0001EF98 4400                       		neg.b	d0
0001EF9A 4EB9 0000 3A36             		jsr	(CalcSine).l
0001EFA0 C3E8 0020                  		muls.w	obInertia(a0),d1
0001EFA4 D3A8 0008                  		add.l	d1,obX(a0)
0001EFA8 C1E8 0020                  		muls.w	obInertia(a0),d0
0001EFAC D1A8 000C                  		add.l	d0,obY(a0)
0001EFB0 48E7 C000                  		movem.l	d0-d1,-(sp)
0001EFB4 2428 000C                  		move.l	obY(a0),d2
0001EFB8 2628 0008                  		move.l	obX(a0),d3
0001EFBC 6100 0000                  		bsr.w	sub_1BCE8
0001EFC0 6700                       		beq.s	loc_1BAF2
0001EFC2 4CDF 0003                  		movem.l	(sp)+,d0-d1
0001EFC6 93A8 0008                  		sub.l	d1,obX(a0)
0001EFCA 91A8 000C                  		sub.l	d0,obY(a0)
0001EFCE 317C 0000 0020             		move.w	#0,obInertia(a0)
0001EFD4 4E75                       		rts	
0001EFD6                            ; ===========================================================================
0001EFD6                            
0001EFD6                            loc_1BAF2:
0001EFD6 4CDF 0003                  		movem.l	(sp)+,d0-d1
0001EFDA 4E75                       		rts	
0001EFDC                            ; End of function Obj09_Move
0001EFDC                            
0001EFDC                            
0001EFDC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001EFDC                            
0001EFDC                            
0001EFDC                            Obj09_MoveLeft:
0001EFDC 08E8 0000 0022             		bset	#0,obStatus(a0)
0001EFE2 3028 0020                  		move.w	obInertia(a0),d0
0001EFE6 6700                       		beq.s	loc_1BB06
0001EFE8 6A00                       		bpl.s	loc_1BB1A
0001EFEA                            
0001EFEA                            loc_1BB06:
0001EFEA 0440 000C                  		subi.w	#$C,d0
0001EFEE 0C40 F800                  		cmpi.w	#-$800,d0
0001EFF2 6E00                       		bgt.s	loc_1BB14
0001EFF4 303C F800                  		move.w	#-$800,d0
0001EFF8                            
0001EFF8                            loc_1BB14:
0001EFF8 3140 0020                  		move.w	d0,obInertia(a0)
0001EFFC 4E75                       		rts	
0001EFFE                            ; ===========================================================================
0001EFFE                            
0001EFFE                            loc_1BB1A:
0001EFFE 0440 0040                  		subi.w	#$40,d0
0001F002 6400                       		bcc.s	loc_1BB22
0001F004 4E71                       		nop	
0001F006                            
0001F006                            loc_1BB22:
0001F006 3140 0020                  		move.w	d0,obInertia(a0)
0001F00A 4E75                       		rts	
0001F00C                            ; End of function Obj09_MoveLeft
0001F00C                            
0001F00C                            
0001F00C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001F00C                            
0001F00C                            
0001F00C                            Obj09_MoveRight:
0001F00C 08A8 0000 0022             		bclr	#0,obStatus(a0)
0001F012 3028 0020                  		move.w	obInertia(a0),d0
0001F016 6B00                       		bmi.s	loc_1BB48
0001F018 0640 000C                  		addi.w	#$C,d0
0001F01C 0C40 0800                  		cmpi.w	#$800,d0
0001F020 6D00                       		blt.s	loc_1BB42
0001F022 303C 0800                  		move.w	#$800,d0
0001F026                            
0001F026                            loc_1BB42:
0001F026 3140 0020                  		move.w	d0,obInertia(a0)
0001F02A 6000                       		bra.s	locret_1BB54
0001F02C                            ; ===========================================================================
0001F02C                            
0001F02C                            loc_1BB48:
0001F02C 0640 0040                  		addi.w	#$40,d0
0001F030 6400                       		bcc.s	loc_1BB50
0001F032 4E71                       		nop	
0001F034                            
0001F034                            loc_1BB50:
0001F034 3140 0020                  		move.w	d0,obInertia(a0)
0001F038                            
0001F038                            locret_1BB54:
0001F038 4E75                       		rts	
0001F03A                            ; End of function Obj09_MoveRight
0001F03A                            
0001F03A                            
0001F03A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001F03A                            
0001F03A                            
0001F03A                            Obj09_Jump:
0001F03A 1038 F603                  		move.b	(v_jpadpress2).w,d0
0001F03E 0200 0070                  		andi.b	#btnABC,d0	; is A,	B or C pressed?
0001F042 6700                       		beq.s	Obj09_NoJump	; if not, branch
0001F044 1038 F780                  		move.b	(v_ssangle).w,d0
0001F048 0200 00FC                  		andi.b	#$FC,d0
0001F04C 4400                       		neg.b	d0
0001F04E 0400 0040                  		subi.b	#$40,d0
0001F052 4EB9 0000 3A36             		jsr	(CalcSine).l
0001F058 C3FC 0680                  		muls.w	#$680,d1
0001F05C E081                       		asr.l	#8,d1
0001F05E 3141 0010                  		move.w	d1,obVelX(a0)
0001F062 C1FC 0680                  		muls.w	#$680,d0
0001F066 E080                       		asr.l	#8,d0
0001F068 3140 0012                  		move.w	d0,obVelY(a0)
0001F06C 08E8 0001 0022             		bset	#1,obStatus(a0)
0001F07C                            
0001F07C                            Obj09_NoJump:
0001F07C 4E75                       		rts	
0001F07E                            ; End of function Obj09_Jump
0001F07E                            
0001F07E                            
0001F07E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001F07E                            
0001F07E                            
0001F07E                            nullsub_2:
0001F07E 4E75                       		rts	
0001F080                            ; End of function nullsub_2
0001F080                            
0001F080                            ; ===========================================================================
0001F080                            ; ---------------------------------------------------------------------------
0001F080                            ; unused subroutine to limit Sonic's upward vertical speed
0001F080                            ; ---------------------------------------------------------------------------
0001F080 323C FC00                  		move.w	#-$400,d1
0001F084 B268 0012                  		cmp.w	obVelY(a0),d1
0001F088 6F00                       		ble.s	locret_1BBB4
0001F08A 1038 F602                  		move.b	(v_jpadhold2).w,d0
0001F08E 0200 0070                  		andi.b	#btnABC,d0
0001F092 6600                       		bne.s	locret_1BBB4
0001F094 3141 0012                  		move.w	d1,obVelY(a0)
0001F098                            
0001F098                            locret_1BBB4:
0001F098 4E75                       		rts	
0001F09A                            ; ---------------------------------------------------------------------------
0001F09A                            ; Subroutine to	fix the	camera on Sonic's position (special stage)
0001F09A                            ; ---------------------------------------------------------------------------
0001F09A                            
0001F09A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001F09A                            
0001F09A                            
0001F09A                            SS_FixCamera:
0001F09A 3428 000C                  		move.w	obY(a0),d2
0001F09E 3628 0008                  		move.w	obX(a0),d3
0001F0A2 3038 F700                  		move.w	(v_screenposx).w,d0
0001F0A6 0443 00A0                  		subi.w	#$A0,d3
0001F0AA 6500                       		bcs.s	loc_1BBCE
0001F0AC 9043                       		sub.w	d3,d0
0001F0AE 9178 F700                  		sub.w	d0,(v_screenposx).w
0001F0B2                            
0001F0B2                            loc_1BBCE:
0001F0B2 3038 F704                  		move.w	(v_screenposy).w,d0
0001F0B6 0442 0070                  		subi.w	#$70,d2
0001F0BA 6500                       		bcs.s	locret_1BBDE
0001F0BC 9042                       		sub.w	d2,d0
0001F0BE 9178 F704                  		sub.w	d0,(v_screenposy).w
0001F0C2                            
0001F0C2                            locret_1BBDE:
0001F0C2 4E75                       		rts	
0001F0C4                            ; End of function SS_FixCamera
0001F0C4                            
0001F0C4                            ; ===========================================================================
0001F0C4                            
0001F0C4                            Obj09_ExitStage:
0001F0C4 0678 0040 F782             		addi.w	#$40,(v_ssrotate).w
0001F0CA 0C78 1800 F782             		cmpi.w	#$1800,(v_ssrotate).w
0001F0D0 6600                       		bne.s	loc_1BBF4
0001F0D2 11FC 0000 F600             		move.b	#id_Level,(v_gamemode).w
0001F0D8                            
0001F0D8                            loc_1BBF4:
0001F0D8 0C78 3000 F782             		cmpi.w	#$3000,(v_ssrotate).w
0001F0DE 6D00                       		blt.s	loc_1BC12
0001F0E0 31FC 0000 F782             		move.w	#0,(v_ssrotate).w
0001F0E6 31FC 4000 F780             		move.w	#$4000,(v_ssangle).w
0001F0EC 5428 0024                  		addq.b	#2,obRoutine(a0)
0001F0F0 317C 003C 0038             		move.w	#$3C,$38(a0)
0001F0F6                            
0001F0F6                            loc_1BC12:
0001F0F6 3038 F780                  		move.w	(v_ssangle).w,d0
0001F0FA D078 F782                  		add.w	(v_ssrotate).w,d0
0001F0FE 31C0 F780                  		move.w	d0,(v_ssangle).w
0001F102 4EB9 0001 65F2             		jsr	(Sonic_Animate).l
0001F108 4EB9 0001 698A             		jsr	(Sonic_LoadGfx).l
0001F10E 6100 FF8A                  		bsr.w	SS_FixCamera
0001F112 4EF9 0000 F97C             		jmp	(DisplaySprite).l
0001F118                            ; ===========================================================================
0001F118                            
0001F118                            Obj09_Exit2:
0001F118 5368 0038                  		subq.w	#1,$38(a0)
0001F11C 6600                       		bne.s	loc_1BC40
0001F11E 11FC 0000 F600             		move.b	#id_Level,(v_gamemode).w
0001F124                            
0001F124                            loc_1BC40:
0001F124 4EB9 0001 65F2             		jsr	(Sonic_Animate).l
0001F12A 4EB9 0001 698A             		jsr	(Sonic_LoadGfx).l
0001F130 6100 FF68                  		bsr.w	SS_FixCamera
0001F134 4EF9 0000 F97C             		jmp	(DisplaySprite).l
0001F13A                            
0001F13A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001F13A                            
0001F13A                            
0001F13A                            Obj09_Fall:
0001F13A 2428 000C                  		move.l	obY(a0),d2
0001F13E 2628 0008                  		move.l	obX(a0),d3
0001F142 1038 F780                  		move.b	(v_ssangle).w,d0
0001F146 0200 00FC                  		andi.b	#$FC,d0
0001F14A 4EB9 0000 3A36             		jsr	(CalcSine).l
0001F150 3828 0010                  		move.w	obVelX(a0),d4
0001F154 48C4                       		ext.l	d4
0001F156 E184                       		asl.l	#8,d4
0001F158 C1FC 002A                  		muls.w	#$2A,d0
0001F15C D084                       		add.l	d4,d0
0001F15E 3828 0012                  		move.w	obVelY(a0),d4
0001F162 48C4                       		ext.l	d4
0001F164 E184                       		asl.l	#8,d4
0001F166 C3FC 002A                  		muls.w	#$2A,d1
0001F16A D284                       		add.l	d4,d1
0001F16C D680                       		add.l	d0,d3
0001F16E 6100 0000                  		bsr.w	sub_1BCE8
0001F172 6700                       		beq.s	loc_1BCB0
0001F174 9680                       		sub.l	d0,d3
0001F176 7000                       		moveq	#0,d0
0001F178 3140 0010                  		move.w	d0,obVelX(a0)
0001F17C 08A8 0001 0022             		bclr	#1,obStatus(a0)
0001F182 D481                       		add.l	d1,d2
0001F184 6100 0000                  		bsr.w	sub_1BCE8
0001F188 6700                       		beq.s	loc_1BCC6
0001F18A 9481                       		sub.l	d1,d2
0001F18C 7200                       		moveq	#0,d1
0001F18E 3141 0012                  		move.w	d1,obVelY(a0)
0001F192 4E75                       		rts	
0001F194                            ; ===========================================================================
0001F194                            
0001F194                            loc_1BCB0:
0001F194 D481                       		add.l	d1,d2
0001F196 6100 0000                  		bsr.w	sub_1BCE8
0001F19A 6700                       		beq.s	loc_1BCD4
0001F19C 9481                       		sub.l	d1,d2
0001F19E 7200                       		moveq	#0,d1
0001F1A0 3141 0012                  		move.w	d1,obVelY(a0)
0001F1A4 08A8 0001 0022             		bclr	#1,obStatus(a0)
0001F1AA                            
0001F1AA                            loc_1BCC6:
0001F1AA E080                       		asr.l	#8,d0
0001F1AC E081                       		asr.l	#8,d1
0001F1AE 3140 0010                  		move.w	d0,obVelX(a0)
0001F1B2 3141 0012                  		move.w	d1,obVelY(a0)
0001F1B6 4E75                       		rts	
0001F1B8                            ; ===========================================================================
0001F1B8                            
0001F1B8                            loc_1BCD4:
0001F1B8 E080                       		asr.l	#8,d0
0001F1BA E081                       		asr.l	#8,d1
0001F1BC 3140 0010                  		move.w	d0,obVelX(a0)
0001F1C0 3141 0012                  		move.w	d1,obVelY(a0)
0001F1C4 08E8 0001 0022             		bset	#1,obStatus(a0)
0001F1CA 4E75                       		rts	
0001F1CC                            ; End of function Obj09_Fall
0001F1CC                            
0001F1CC                            
0001F1CC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001F1CC                            
0001F1CC                            
0001F1CC                            sub_1BCE8:
0001F1CC 43F9 00FF 0000             		lea	($FF0000).l,a1
0001F1D2 7800                       		moveq	#0,d4
0001F1D4 4842                       		swap	d2
0001F1D6 3802                       		move.w	d2,d4
0001F1D8 4842                       		swap	d2
0001F1DA 0644 0044                  		addi.w	#$44,d4
0001F1DE 88FC 0018                  		divu.w	#$18,d4
0001F1E2 C8FC 0080                  		mulu.w	#$80,d4
0001F1E6 D3C4                       		adda.l	d4,a1
0001F1E8 7800                       		moveq	#0,d4
0001F1EA 4843                       		swap	d3
0001F1EC 3803                       		move.w	d3,d4
0001F1EE 4843                       		swap	d3
0001F1F0 0644 0014                  		addi.w	#$14,d4
0001F1F4 88FC 0018                  		divu.w	#$18,d4
0001F1F8 D2C4                       		adda.w	d4,a1
0001F1FA 7A00                       		moveq	#0,d5
0001F1FC 1819                       		move.b	(a1)+,d4
0001F1FE 6100                       		bsr.s	sub_1BD30
0001F200 1819                       		move.b	(a1)+,d4
0001F202 6100                       		bsr.s	sub_1BD30
0001F204 D2FC 007E                  		adda.w	#$7E,a1
0001F208 1819                       		move.b	(a1)+,d4
0001F20A 6100                       		bsr.s	sub_1BD30
0001F20C 1819                       		move.b	(a1)+,d4
0001F20E 6100                       		bsr.s	sub_1BD30
0001F210 4A05                       		tst.b	d5
0001F212 4E75                       		rts	
0001F214                            ; End of function sub_1BCE8
0001F214                            
0001F214                            
0001F214                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001F214                            
0001F214                            
0001F214                            sub_1BD30:
0001F214 6700                       		beq.s	locret_1BD44
0001F216 0C04 0028                  		cmpi.b	#$28,d4
0001F21A 6700                       		beq.s	locret_1BD44
0001F21C 0C04 003A                  		cmpi.b	#$3A,d4
0001F220 6500                       		bcs.s	loc_1BD46
0001F222 0C04 004B                  		cmpi.b	#$4B,d4
0001F226 6400                       		bcc.s	loc_1BD46
0001F228                            
0001F228                            locret_1BD44:
0001F228 4E75                       		rts	
0001F22A                            ; ===========================================================================
0001F22A                            
0001F22A                            loc_1BD46:
0001F22A 1144 0030                  		move.b	d4,$30(a0)
0001F22E 2149 0032                  		move.l	a1,$32(a0)
0001F232 7AFF                       		moveq	#-1,d5
0001F234 4E75                       		rts	
0001F236                            ; End of function sub_1BD30
0001F236                            
0001F236                            
0001F236                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001F236                            
0001F236                            
0001F236                            Obj09_ChkItems:
0001F236 43F9 00FF 0000             		lea	($FF0000).l,a1
0001F23C 7800                       		moveq	#0,d4
0001F23E 3828 000C                  		move.w	obY(a0),d4
0001F242 0644 0050                  		addi.w	#$50,d4
0001F246 88FC 0018                  		divu.w	#$18,d4
0001F24A C8FC 0080                  		mulu.w	#$80,d4
0001F24E D3C4                       		adda.l	d4,a1
0001F250 7800                       		moveq	#0,d4
0001F252 3828 0008                  		move.w	obX(a0),d4
0001F256 0644 0020                  		addi.w	#$20,d4
0001F25A 88FC 0018                  		divu.w	#$18,d4
0001F25E D2C4                       		adda.w	d4,a1
0001F260 1811                       		move.b	(a1),d4
0001F262 6600                       		bne.s	Obj09_ChkCont
0001F264 4A28 003A                  		tst.b	$3A(a0)
0001F268 6600 0000                  		bne.w	Obj09_MakeGhostSolid
0001F26C 7800                       		moveq	#0,d4
0001F26E 4E75                       		rts	
0001F270                            ; ===========================================================================
0001F270                            
0001F270                            Obj09_ChkCont:
0001F270 0C04 003A                  		cmpi.b	#$3A,d4		; is the item a	ring?
0001F274 6600                       		bne.s	Obj09_Chk1Up
0001F276 6100 F726                  		bsr.w	SS_RemoveCollectedItem
0001F27A 6600                       		bne.s	Obj09_GetCont
0001F27C 14BC 0001                  		move.b	#1,(a2)
0001F280 2549 0004                  		move.l	a1,4(a2)
0001F284                            
0001F284                            Obj09_GetCont:
0001F284 4EB9 0000 BB40             		jsr	(CollectRing).l
0001F28A 0C78 0032 FE20             		cmpi.w	#50,(v_rings).w	; check if you have 50 rings
0001F290 6500                       		bcs.s	Obj09_NoCont
0001F292 08F8 0000 FE1B             		bset	#0,(v_lifecount).w
0001F298 6600                       		bne.s	Obj09_NoCont
0001F29A 5238 FE18                  		addq.b	#1,(v_continues).w ; add 1 to number of continues
0001F2A8                            
0001F2A8                            Obj09_NoCont:
0001F2A8 7800                       		moveq	#0,d4
0001F2AA 4E75                       		rts	
0001F2AC                            ; ===========================================================================
0001F2AC                            
0001F2AC                            Obj09_Chk1Up:
0001F2AC 0C04 0028                  		cmpi.b	#$28,d4		; is the item an extra life?
0001F2B0 6600                       		bne.s	Obj09_ChkEmer
0001F2B2 6100 F6EA                  		bsr.w	SS_RemoveCollectedItem
0001F2B6 6600                       		bne.s	Obj09_Get1Up
0001F2B8 14BC 0003                  		move.b	#3,(a2)
0001F2BC 2549 0004                  		move.l	a1,4(a2)
0001F2C0                            
0001F2C0                            Obj09_Get1Up:
0001F2C0 5238 FE12                  		addq.b	#1,(v_lives).w	; add 1 to number of lives
0001F2C4 5238 FE1C                  		addq.b	#1,(f_lifecount).w ; update the lives counter
0001F2D2 7800                       		moveq	#0,d4
0001F2D4 4E75                       		rts	
0001F2D6                            ; ===========================================================================
0001F2D6                            
0001F2D6                            Obj09_ChkEmer:
0001F2D6 0C04 003B                  		cmpi.b	#$3B,d4		; is the item an emerald?
0001F2DA 6500                       		bcs.s	Obj09_ChkGhost
0001F2DC 0C04 0040                  		cmpi.b	#$40,d4
0001F2E0 6200                       		bhi.s	Obj09_ChkGhost
0001F2E2 6100 F6BA                  		bsr.w	SS_RemoveCollectedItem
0001F2E6 6600                       		bne.s	Obj09_GetEmer
0001F2E8 14BC 0005                  		move.b	#5,(a2)
0001F2EC 2549 0004                  		move.l	a1,4(a2)
0001F2F0                            
0001F2F0                            Obj09_GetEmer:
0001F2F0 0C38 0006 FE57             		cmpi.b	#6,(v_emeralds).w ; do you have all the emeralds?
0001F2F6 6700                       		beq.s	Obj09_NoEmer	; if yes, branch
0001F2F8 0404 003B                  		subi.b	#$3B,d4
0001F2FC 7000                       		moveq	#0,d0
0001F2FE 1038 FE57                  		move.b	(v_emeralds).w,d0
0001F302 45F8 FE58                  		lea	(v_emldlist).w,a2
0001F306 1584 0000                  		move.b	d4,(a2,d0.w)
0001F30A 5238 FE57                  		addq.b	#1,(v_emeralds).w ; add 1 to number of emeralds
0001F30E                            
0001F30E                            Obj09_NoEmer:
0001F318 7800                       		moveq	#0,d4
0001F31A 4E75                       		rts	
0001F31C                            ; ===========================================================================
0001F31C                            
0001F31C                            Obj09_ChkGhost:
0001F31C 0C04 0041                  		cmpi.b	#$41,d4		; is the item a	ghost block?
0001F320 6600                       		bne.s	Obj09_ChkGhostTag
0001F322 117C 0001 003A             		move.b	#1,$3A(a0)	; mark the ghost block as "passed"
0001F328                            
0001F328                            Obj09_ChkGhostTag:
0001F328 0C04 004A                  		cmpi.b	#$4A,d4		; is the item a	switch for ghost blocks?
0001F32C 6600                       		bne.s	Obj09_NoGhost
0001F32E 0C28 0001 003A             		cmpi.b	#1,$3A(a0)	; have the ghost blocks	been passed?
0001F334 6600                       		bne.s	Obj09_NoGhost	; if not, branch
0001F336 117C 0002 003A             		move.b	#2,$3A(a0)	; mark the ghost blocks	as "solid"
0001F33C                            
0001F33C                            Obj09_NoGhost:
0001F33C 78FF                       		moveq	#-1,d4
0001F33E 4E75                       		rts	
0001F340                            ; ===========================================================================
0001F340                            
0001F340                            Obj09_MakeGhostSolid:
0001F340 0C28 0002 003A             		cmpi.b	#2,$3A(a0)	; is the ghost marked as "solid"?
0001F346 6600                       		bne.s	Obj09_GhostNotSolid ; if not, branch
0001F348 43F9 00FF 1020             		lea	($FF1020).l,a1
0001F34E 723F                       		moveq	#$3F,d1
0001F350                            
0001F350                            Obj09_GhostLoop2:
0001F350 743F                       		moveq	#$3F,d2
0001F352                            
0001F352                            Obj09_GhostLoop:
0001F352 0C11 0041                  		cmpi.b	#$41,(a1)	; is the item a	ghost block?
0001F356 6600                       		bne.s	Obj09_NoReplace	; if not, branch
0001F358 12BC 002C                  		move.b	#$2C,(a1)	; replace ghost	block with a solid block
0001F35C                            
0001F35C                            Obj09_NoReplace:
0001F35C 5249                       		addq.w	#1,a1
0001F35E 51CA FFF2                  		dbf	d2,Obj09_GhostLoop
0001F362 43E9 0040                  		lea	$40(a1),a1
0001F366 51C9 FFE8                  		dbf	d1,Obj09_GhostLoop2
0001F36A                            
0001F36A                            Obj09_GhostNotSolid:
0001F36A 4228 003A                  		clr.b	$3A(a0)
0001F36E 7800                       		moveq	#0,d4
0001F370 4E75                       		rts	
0001F372                            ; End of function Obj09_ChkItems
0001F372                            
0001F372                            
0001F372                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001F372                            
0001F372                            
0001F372                            Obj09_ChkItems2:
0001F372 1028 0030                  		move.b	$30(a0),d0
0001F376 6600                       		bne.s	Obj09_ChkBumper
0001F378 5328 0036                  		subq.b	#1,$36(a0)
0001F37C 6A00                       		bpl.s	loc_1BEA0
0001F37E 117C 0000 0036             		move.b	#0,$36(a0)
0001F384                            
0001F384                            loc_1BEA0:
0001F384 5328 0037                  		subq.b	#1,$37(a0)
0001F388 6A00                       		bpl.s	locret_1BEAC
0001F38A 117C 0000 0037             		move.b	#0,$37(a0)
0001F390                            
0001F390                            locret_1BEAC:
0001F390 4E75                       		rts	
0001F392                            ; ===========================================================================
0001F392                            
0001F392                            Obj09_ChkBumper:
0001F392 0C00 0025                  		cmpi.b	#$25,d0		; is the item a	bumper?
0001F396 6600                       		bne.s	Obj09_GOAL
0001F398 2228 0032                  		move.l	$32(a0),d1
0001F39C 0481 00FF 0001             		subi.l	#$FF0001,d1
0001F3A2 3401                       		move.w	d1,d2
0001F3A4 0241 007F                  		andi.w	#$7F,d1
0001F3A8 C2FC 0018                  		mulu.w	#$18,d1
0001F3AC 0441 0014                  		subi.w	#$14,d1
0001F3B0 EE4A                       		lsr.w	#7,d2
0001F3B2 0242 007F                  		andi.w	#$7F,d2
0001F3B6 C4FC 0018                  		mulu.w	#$18,d2
0001F3BA 0442 0044                  		subi.w	#$44,d2
0001F3BE 9268 0008                  		sub.w	obX(a0),d1
0001F3C2 9468 000C                  		sub.w	obY(a0),d2
0001F3C6 4EB9 0000 3CC8             		jsr	(CalcAngle).l
0001F3CC 4EB9 0000 3A36             		jsr	(CalcSine).l
0001F3D2 C3FC F900                  		muls.w	#-$700,d1
0001F3D6 E081                       		asr.l	#8,d1
0001F3D8 3141 0010                  		move.w	d1,obVelX(a0)
0001F3DC C1FC F900                  		muls.w	#-$700,d0
0001F3E0 E080                       		asr.l	#8,d0
0001F3E2 3140 0012                  		move.w	d0,obVelY(a0)
0001F3E6 08E8 0001 0022             		bset	#1,obStatus(a0)
0001F3EC 6100 F5B0                  		bsr.w	SS_RemoveCollectedItem
0001F3F0 6600                       		bne.s	Obj09_BumpSnd
0001F3F2 14BC 0002                  		move.b	#2,(a2)
0001F3F6 2028 0032                  		move.l	$32(a0),d0
0001F3FA 5380                       		subq.l	#1,d0
0001F3FC 2540 0004                  		move.l	d0,4(a2)
0001F400                            
0001F400                            Obj09_BumpSnd:
0001F40A                            ; ===========================================================================
0001F40A                            
0001F40A                            Obj09_GOAL:
0001F40A 0C00 0027                  		cmpi.b	#$27,d0		; is the item a	"GOAL"?
0001F40E 6600                       		bne.s	Obj09_UPblock
0001F410 5428 0024                  		addq.b	#2,obRoutine(a0) ; run routine "Obj09_ExitStage"
0001F41E 4E75                       		rts	
0001F420                            ; ===========================================================================
0001F420                            
0001F420                            Obj09_UPblock:
0001F420 0C00 0029                  		cmpi.b	#$29,d0		; is the item an "UP" block?
0001F424 6600                       		bne.s	Obj09_DOWNblock
0001F426 4A28 0036                  		tst.b	$36(a0)
0001F42A 6600 0000                  		bne.w	Obj09_NoGlass
0001F42E 117C 001E 0036             		move.b	#$1E,$36(a0)
0001F434 0838 0006 F783             		btst	#6,($FFFFF783).w
0001F43A 6700                       		beq.s	Obj09_UPsnd
0001F43C E1F8 F782                  		asl	(v_ssrotate).w	; increase stage rotation speed
0001F440 2268 0032                  		movea.l	$32(a0),a1
0001F444 5389                       		subq.l	#1,a1
0001F446 12BC 002A                  		move.b	#$2A,(a1)	; change item to a "DOWN" block
0001F44A                            
0001F44A                            Obj09_UPsnd:
0001F454                            ; ===========================================================================
0001F454                            
0001F454                            Obj09_DOWNblock:
0001F454 0C00 002A                  		cmpi.b	#$2A,d0		; is the item a	"DOWN" block?
0001F458 6600                       		bne.s	Obj09_Rblock
0001F45A 4A28 0036                  		tst.b	$36(a0)
0001F45E 6600 0000                  		bne.w	Obj09_NoGlass
0001F462 117C 001E 0036             		move.b	#$1E,$36(a0)
0001F468 0838 0006 F783             		btst	#6,(v_ssrotate+1).w
0001F46E 6600                       		bne.s	Obj09_DOWNsnd
0001F470 E0F8 F782                  		asr	(v_ssrotate).w	; reduce stage rotation speed
0001F474 2268 0032                  		movea.l	$32(a0),a1
0001F478 5389                       		subq.l	#1,a1
0001F47A 12BC 0029                  		move.b	#$29,(a1)	; change item to an "UP" block
0001F47E                            
0001F47E                            Obj09_DOWNsnd:
0001F488                            ; ===========================================================================
0001F488                            
0001F488                            Obj09_Rblock:
0001F488 0C00 002B                  		cmpi.b	#$2B,d0		; is the item an "R" block?
0001F48C 6600                       		bne.s	Obj09_ChkGlass
0001F48E 4A28 0037                  		tst.b	$37(a0)
0001F492 6600 0000                  		bne.w	Obj09_NoGlass
0001F496 117C 001E 0037             		move.b	#$1E,$37(a0)
0001F49C 6100 F500                  		bsr.w	SS_RemoveCollectedItem
0001F4A0 6600                       		bne.s	Obj09_RevStage
0001F4A2 14BC 0004                  		move.b	#4,(a2)
0001F4A6 2028 0032                  		move.l	$32(a0),d0
0001F4AA 5380                       		subq.l	#1,d0
0001F4AC 2540 0004                  		move.l	d0,4(a2)
0001F4B0                            
0001F4B0                            Obj09_RevStage:
0001F4B0 4478 F782                  		neg.w	(v_ssrotate).w	; reverse stage rotation
0001F4BE                            ; ===========================================================================
0001F4BE                            
0001F4BE                            Obj09_ChkGlass:
0001F4BE 0C00 002D                  		cmpi.b	#$2D,d0		; is the item a	glass block?
0001F4C2 6700                       		beq.s	Obj09_Glass	; if yes, branch
0001F4C4 0C00 002E                  		cmpi.b	#$2E,d0
0001F4C8 6700                       		beq.s	Obj09_Glass
0001F4CA 0C00 002F                  		cmpi.b	#$2F,d0
0001F4CE 6700                       		beq.s	Obj09_Glass
0001F4D0 0C00 0030                  		cmpi.b	#$30,d0
0001F4D4 6600                       		bne.s	Obj09_NoGlass	; if not, branch
0001F4D6                            
0001F4D6                            Obj09_Glass:
0001F4D6 6100 F4C6                  		bsr.w	SS_RemoveCollectedItem
0001F4DA 6600                       		bne.s	Obj09_GlassSnd
0001F4DC 14BC 0006                  		move.b	#6,(a2)
0001F4E0 2268 0032                  		movea.l	$32(a0),a1
0001F4E4 5389                       		subq.l	#1,a1
0001F4E6 2549 0004                  		move.l	a1,4(a2)
0001F4EA 1011                       		move.b	(a1),d0
0001F4EC 5200                       		addq.b	#1,d0		; change glass type when touched
0001F4EE 0C00 0030                  		cmpi.b	#$30,d0
0001F4F2 6300                       		bls.s	Obj09_GlassUpdate ; if glass is	still there, branch
0001F4F4 4200                       		clr.b	d0		; remove the glass block when it's destroyed
0001F4F6                            
0001F4F6                            Obj09_GlassUpdate:
0001F4F6 1540 0004                  		move.b	d0,4(a2)	; update the stage layout
0001F4FA                            
0001F4FA                            Obj09_GlassSnd:
0001F504                            ; ===========================================================================
0001F504                            
0001F504                            Obj09_NoGlass:
0001F504 4E75                       		rts	
0001F506                            ; End of function Obj09_ChkItems2
0001F506                            ; End of function Obj09_ChkItems2
0001F506                            
0001F506                            		include	"_incObj\10.asm"
0001F506                            ; ---------------------------------------------------------------------------
0001F506                            ; Object 10 - After-Image
0001F506                            ; ---------------------------------------------------------------------------
0001F506                            
0001F506                            Obj10:
0001F506 0C38 0018 D01C                   cmpi.b   #id_Death,(v_player+obAnim).w   ; is Sonic using the death animation?
0001F50C 6700 0000                        beq.w   AfterimageEnd      ; if yes, delete the After Image
0001F510                            
0001F510 7000                             moveq   #0,d0
0001F512 1028 0024                        move.b   obRoutine(a0),d0
0001F516 323B 0000                        move.w   Afterimage_Index(pc,d0.w),d1
0001F51A 4EFB 1000                        jmp	Afterimage_Index(pc,d1.w)
0001F51E                            
0001F51E                            ; ===========================================================================
0001F51E                            ;           Change the length by moving around the "No Afterimage" and "After Image Start/ After Image L Priority" sections.
0001F51E                            ; ===========================================================================
0001F51E                            Afterimage_Index:
0001F51E 0000                             dc.w NoAfterImage-Afterimage_Index
0001F520 0000                             dc.w NoAfterImage-Afterimage_Index
0001F522 0000                             dc.w NoAfterImage-Afterimage_Index
0001F524 0000                             dc.w AfterimageStart-Afterimage_Index
0001F526 0000                             dc.w NoAfterImage-Afterimage_Index
0001F528 0000                             dc.w NoAfterImage-Afterimage_Index
0001F52A 0000                             dc.w NoAfterImage-Afterimage_Index
0001F52C 0000                             dc.w AfterimageLPrio-Afterimage_Index
0001F52E 0000                             dc.w AfterimageEnd-Afterimage_Index
0001F530                            ; ===========================================================================
0001F530                            NoAfterImage:
0001F530 5428 0024                        addq.b   #2,obRoutine(a0)         ; go to next item of index, at the next frame
0001F534 4E75                             rts
0001F536                            ; ===========================================================================
0001F536                            AfterimageStart:
0001F536 117C 0002 0018                   move.b   #2,obPriority(a0)         ; set sprite priority to 2
0001F53C 6000                             bra.s   Afterimage_Show
0001F53E                            ; ===========================================================================
0001F53E                            AfterimageLPrio:
0001F53E 5228 0018                        addq.b   #1,obPriority(a0)         ; set a lower sprite priority
0001F542                            ; ===========================================================================
0001F542                            Afterimage_Show:
0001F542 5428 0024                        addq.b   #2,obRoutine(a0)            ; go to next item of index
0001F546 4EB9 0000 3A10                   jsr   (RandomNumber).l         ; get a random number
0001F54C 0200 0003                        andi.b   #3,d0               ; get a number equal or lower than 2 (0 until 2)
0001F550 6600                             bne.s   AfterimageException   ; if is not 0, branch
0001F552 4E75                             rts                        ; if it is 0, then don't show the after-image
0001F554                            
0001F554                            AfterimageException:
0001F554 3178 D002 0002                   move.w   (v_player+obGfx).w,obGfx(a0)      ; copy Sonic map to after-image map
0001F55A 1178 D001 0001                    move.b   (v_player+obRender).w,obRender(a0)      ; copy Sonic frame infos (horizontal/vertical mirror, coordinate system......)
0001F560 2178 D01A 001A                    move.l   (v_player+obFrame).w,obFrame(a0)   ; copy the Sonic animation frame
0001F566 4EF9 0000 F97C                   jmp   DisplaySprite
0001F56C                            ; ===========================================================================
0001F56C                            AfterimageEnd:
0001F56C 4EF9 0000 F9BC                   jmp   DeleteObject
0001F56C 4EF9 0000 F9BC                   jmp   DeleteObject
0001F572                            
0001F572                            		include	"_inc\AnimateLevelGfx.asm"
0001F572                            ; ---------------------------------------------------------------------------
0001F572                            ; Subroutine to	animate	level graphics
0001F572                            ; ---------------------------------------------------------------------------
0001F572                            
0001F572                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001F572                            
0001F572                            
0001F572                            AnimateLevelGfx:
0001F572                            		;tst.w	(f_pause).w	; is the game paused?
0001F572                            		;bne.s	@ispaused	; if yes, branch
0001F572 4DF9 00C0 0000             		lea	(vdp_data_port).l,a6
0001F578 6100 0000                  		bsr.w	AniArt_GiantRing
0001F57C 7000                       		moveq	#0,d0
0001F57E 1038 FE10                  		move.b	(v_zone).w,d0
0001F582 D040                       		add.w	d0,d0
0001F584 303B 0000                  		move.w	AniArt_Index(pc,d0.w),d0
0001F588 4EFB 0000                  		jmp	AniArt_Index(pc,d0.w)
0001F58C                            
0001F58C                            	@ispaused:
0001F58C 4E75                       		rts	
0001F58E                            
0001F58E                            ; ===========================================================================
0001F58E 0000 0000                  AniArt_Index:	dc.w AniArt_GHZ-AniArt_Index, AniArt_none-AniArt_Index
0001F592 0000 0000                  		dc.w AniArt_MZ-AniArt_Index, AniArt_none-AniArt_Index
0001F596 0000 0000                  		dc.w AniArt_none-AniArt_Index, AniArt_SBZ-AniArt_Index
0001F59A 0000                       		dc.w AniArt_Ending-AniArt_Index
0001F59C                            ; ===========================================================================
0001F59C                            ; ---------------------------------------------------------------------------
0001F59C                            ; Animated pattern routine - Green Hill
0001F59C                            ; ---------------------------------------------------------------------------
0001F59C                            
0001F59C                            AniArt_GHZ:
0001F59C                            
0001F59C                            AniArt_GHZ_Waterfall:
0001F59C                            
0001F59C =00000008                  @size:		equ 8	; number of tiles per frame
0001F59C                            
0001F59C 5338 F7B1                  		subq.b	#1,(v_lani0_time).w ; decrement timer
0001F5A0 6A00                       		bpl.s	AniArt_GHZ_Bigflower ; branch if not 0
0001F5A2                            
0001F5A2 11FC 0005 F7B1             		move.b	#5,(v_lani0_time).w ; time to display each frame
0001F5A8 43F9 0000 0000             		lea	(Art_GhzWater).l,a1 ; load waterfall patterns
0001F5AE 1038 F7B0                  		move.b	(v_lani0_frame).w,d0
0001F5B2 5238 F7B0                  		addq.b	#1,(v_lani0_frame).w ; increment frame counter
0001F5B6 0240 0001                  		andi.w	#1,d0		; there are only 2 frames
0001F5BA 6700                       		beq.s	@isframe0	; branch if frame 0
0001F5BC 43E9 0100                  		lea	@size*$20(a1),a1 ; use graphics for frame 1
0001F5C0                            
0001F5C0                            	@isframe0:
0001F5CA 323C 0007                  		move.w	#@size-1,d1	; number of 8x8	tiles
0001F5CE 6000 0000                  		bra.w	LoadTiles
0001F5D2                            ; ===========================================================================
0001F5D2                            
0001F5D2                            AniArt_GHZ_Bigflower:
0001F5D2                            
0001F5D2 =00000010                  @size:		equ 16	; number of tiles per frame
0001F5D2                            
0001F5D2 5338 F7B3                  		subq.b	#1,(v_lani1_time).w
0001F5D6 6A00                       		bpl.s	AniArt_GHZ_Smallflower
0001F5D8                            
0001F5D8 11FC 000F F7B3             		move.b	#$F,(v_lani1_time).w
0001F5DE 43F9 0000 0000             		lea	(Art_GhzFlower1).l,a1 ;	load big flower	patterns
0001F5E4 1038 F7B2                  		move.b	(v_lani1_frame).w,d0
0001F5E8 5238 F7B2                  		addq.b	#1,(v_lani1_frame).w
0001F5EC 0240 0001                  		andi.w	#1,d0
0001F5F0 6700                       		beq.s	@isframe0
0001F5F2 43E9 0200                  		lea	@size*$20(a1),a1
0001F5F6                            
0001F5F6                            	@isframe0:
0001F600 323C 000F                  		move.w	#@size-1,d1
0001F604 6000 0000                  		bra.w	LoadTiles
0001F608                            ; ===========================================================================
0001F608                            
0001F608                            AniArt_GHZ_Smallflower:
0001F608                            
0001F608 =0000000C                  @size:		equ 12	; number of tiles per frame
0001F608                            
0001F608 5338 F7B5                  		subq.b	#1,(v_lani2_time).w
0001F60C 6A00                       		bpl.s	@end
0001F60E                            
0001F60E 11FC 0007 F7B5             		move.b	#7,(v_lani2_time).w
0001F614 1038 F7B4                  		move.b	(v_lani2_frame).w,d0
0001F618 5238 F7B4                  		addq.b	#1,(v_lani2_frame).w ; increment frame counter
0001F61C 0240 0003                  		andi.w	#3,d0		; there are 4 frames
0001F620 103B 0000                  		move.b	@sequence(pc,d0.w),d0
0001F624 0800 0000                  		btst	#0,d0		; is frame 0 or 2? (actual frame, not frame counter)
0001F628 6600                       		bne.s	@isframe1	; if not, branch
0001F62A 11FC 007F F7B5             		move.b	#$7F,(v_lani2_time).w ; set longer duration for frames 0 and 2
0001F630                            
0001F630                            	@isframe1:
0001F630 EF48                       		lsl.w	#7,d0		; multiply frame num by $80
0001F632 3200                       		move.w	d0,d1
0001F634 D040                       		add.w	d0,d0
0001F636 D041                       		add.w	d1,d0		; multiply that by 3 (i.e. frame num times 12 * $20)
0001F642 43F9 0000 0000             		lea	(Art_GhzFlower2).l,a1 ;	load small flower patterns
0001F648 43F1 0000                  		lea	(a1,d0.w),a1	; jump to appropriate tile
0001F64C 323C 000B                  		move.w	#@size-1,d1
0001F650 6100 0000                  		bsr.w	LoadTiles
0001F654                            
0001F654                            @end:
0001F654 4E75                       		rts	
0001F656                            
0001F656 0001 0201                  @sequence:	dc.b 0,	1, 2, 1
0001F65A                            ; ===========================================================================
0001F65A                            ; ---------------------------------------------------------------------------
0001F65A                            ; Animated pattern routine - Marble
0001F65A                            ; ---------------------------------------------------------------------------
0001F65A                            
0001F65A                            AniArt_MZ:
0001F65A                            
0001F65A                            AniArt_MZ_Lava:
0001F65A                            
0001F65A =00000008                  @size:		equ 8	; number of tiles per frame
0001F65A                            
0001F65A 5338 F7B1                  		subq.b	#1,(v_lani0_time).w ; decrement timer
0001F65E 6A00                       		bpl.s	AniArt_MZ_Magma	; branch if not 0
0001F660                            
0001F660 11FC 0011 F7B1             		move.b	#$11,(v_lani0_time).w ; time to display each frame
0001F666 43F9 0000 0000             		lea	(Art_MzLava1).l,a1 ; load lava surface patterns
0001F66C 7000                       		moveq	#0,d0
0001F66E 1038 F7B0                  		move.b	(v_lani0_frame).w,d0
0001F672 5200                       		addq.b	#1,d0		; increment frame counter
0001F674 0C00 0003                  		cmpi.b	#3,d0		; there are 3 frames
0001F678 6600                       		bne.s	@frame01or2	; branch if frame 0, 1 or 2
0001F67A 7000                       		moveq	#0,d0
0001F67C                            
0001F67C                            	@frame01or2:
0001F67C 11C0 F7B0                  		move.b	d0,(v_lani0_frame).w
0001F680 C0FC 0100                  		mulu.w	#@size*$20,d0
0001F684 D2C0                       		adda.w	d0,a1		; jump to appropriate tile
0001F690 323C 0007                  		move.w	#@size-1,d1
0001F694 6100 0000                  		bsr.w	LoadTiles
0001F698                            
0001F698                            AniArt_MZ_Magma:
0001F698 5338 F7B3                  		subq.b	#1,(v_lani1_time).w ; decrement timer
0001F69C 6A00                       		bpl.s	AniArt_MZ_Torch	; branch if not 0
0001F69E                            		
0001F69E 11FC 0001 F7B3             		move.b	#1,(v_lani1_time).w ; time between each gfx change
0001F6A4 7000                       		moveq	#0,d0
0001F6A6 1038 F7B0                  		move.b	(v_lani0_frame).w,d0 ; get surface lava frame number
0001F6AA 49F9 0000 0000             		lea	(Art_MzLava2).l,a4 ; load magma gfx
0001F6B0 EE58                       		ror.w	#7,d0		; multiply frame num by $200
0001F6B2 D8C0                       		adda.w	d0,a4		; jump to appropriate tile
0001F6BE 7600                       		moveq	#0,d3
0001F6C0 1638 F7B2                  		move.b	(v_lani1_frame).w,d3
0001F6C4 5238 F7B2                  		addq.b	#1,(v_lani1_frame).w ; increment frame counter (unused)
0001F6C8 1638 FE68                  		move.b	(v_oscillate+$A).w,d3 ; get oscillating value
0001F6CC 343C 0003                  		move.w	#3,d2
0001F6D0                            
0001F6D0                            	@loop:
0001F6D0 3003                       		move.w	d3,d0
0001F6D2 D040                       		add.w	d0,d0
0001F6D4 0240 001E                  		andi.w	#$1E,d0
0001F6D8 47F9 0000 0000             		lea	(AniArt_MZextra).l,a3
0001F6DE 3033 0000                  		move.w	(a3,d0.w),d0
0001F6E2 47F3 0000                  		lea	(a3,d0.w),a3
0001F6E6 224C                       		movea.l	a4,a1
0001F6E8 323C 001F                  		move.w	#$1F,d1
0001F6EC 4E93                       		jsr	(a3)
0001F6EE 5843                       		addq.w	#4,d3
0001F6F0 51CA FFDE                  		dbf	d2,@loop
0001F6F4 4E75                       		rts	
0001F6F6                            ; ===========================================================================
0001F6F6                            
0001F6F6                            AniArt_MZ_Torch:
0001F6F6                            
0001F6F6 =00000006                  @size:		equ 6	; number of tiles per frame
0001F6F6                            
0001F6F6 5338 F7B5                  		subq.b	#1,(v_lani2_time).w ; decrement timer
0001F6FA 6A00 0000                  		bpl.w	@end		; branch if not 0
0001F6FE                            		
0001F6FE 11FC 0004 F7B5             		move.b	#4,(v_lani2_time).w ; time to display each frame
0001F704 43F9 0000 0000             		lea	(Art_MzTorch).l,a1 ; load torch	patterns
0001F70A 7000                       		moveq	#0,d0
0001F70C 1038 F7B6                  		move.b	(v_lani3_frame).w,d0
0001F710 5238 F7B6                  		addq.b	#1,(v_lani3_frame).w ; increment frame counter
0001F714 0238 0003 F7B6             		andi.b	#3,(v_lani3_frame).w ; there are 3 frames
0001F71A C0FC 00C0                  		mulu.w	#@size*$20,d0
0001F71E D2C0                       		adda.w	d0,a1		; jump to appropriate tile
0001F72A 323C 0005                  		move.w	#@size-1,d1
0001F72E 6000 0000                  		bra.w	LoadTiles
0001F732                            
0001F732                            @end:
0001F732 4E75                       		rts	
0001F734                            ; ===========================================================================
0001F734                            ; ---------------------------------------------------------------------------
0001F734                            ; Animated pattern routine - Scrap Brain
0001F734                            ; ---------------------------------------------------------------------------
0001F734                            
0001F734                            AniArt_SBZ:
0001F734                            
0001F734 =0000000C                  @size:		equ 12	; number of tiles per frame
0001F734                            
0001F734 4A38 F7B4                  		tst.b	(v_lani2_frame).w
0001F738 6700                       		beq.s	@smokepuff	; branch if counter hits 0
0001F73A                            		
0001F73A 5338 F7B4                  		subq.b	#1,(v_lani2_frame).w ; decrement counter
0001F73E 6000                       		bra.s	@chk_smokepuff2
0001F740                            ; ===========================================================================
0001F740                            
0001F740                            @smokepuff:
0001F740 5338 F7B1                  		subq.b	#1,(v_lani0_time).w ; decrement timer
0001F744 6A00                       		bpl.s	@chk_smokepuff2 ; branch if not 0
0001F746                            		
0001F746 11FC 0007 F7B1             		move.b	#7,(v_lani0_time).w ; time to display each frame
0001F74C 43F9 0000 0000             		lea	(Art_SbzSmoke).l,a1 ; load smoke patterns
0001F75C 1038 F7B0                  		move.b	(v_lani0_frame).w,d0
0001F760 5238 F7B0                  		addq.b	#1,(v_lani0_frame).w ; increment frame counter
0001F764 0240 0007                  		andi.w	#7,d0
0001F768 6700                       		beq.s	@untilnextpuff	; branch if frame 0
0001F76A 5340                       		subq.w	#1,d0
0001F76C C0FC 0180                  		mulu.w	#@size*$20,d0
0001F770 43F1 0000                  		lea	(a1,d0.w),a1
0001F774 323C 000B                  		move.w	#@size-1,d1
0001F778 6000 0000                  		bra.w	LoadTiles
0001F77C                            ; ===========================================================================
0001F77C                            
0001F77C                            @untilnextpuff:
0001F77C 11FC 00B4 F7B4             		move.b	#180,(v_lani2_frame).w ; time between smoke puffs (3 seconds)
0001F782                            
0001F782                            @clearsky:
0001F782 323C 0005                  		move.w	#(@size/2)-1,d1
0001F786 6100 0000                  		bsr.w	LoadTiles
0001F78A 43F9 0000 0000             		lea	(Art_SbzSmoke).l,a1
0001F790 323C 0005                  		move.w	#(@size/2)-1,d1
0001F794 6000 0000                  		bra.w	LoadTiles	; load blank tiles for no smoke puff
0001F798                            ; ===========================================================================
0001F798                            
0001F798                            @chk_smokepuff2:
0001F798 4A38 F7B5                  		tst.b	(v_lani2_time).w
0001F79C 6700                       		beq.s	@smokepuff2	; branch if counter hits 0
0001F79E                            		
0001F79E 5338 F7B5                  		subq.b	#1,(v_lani2_time).w ; decrement counter
0001F7A2 6000                       		bra.s	@end
0001F7A4                            ; ===========================================================================
0001F7A4                            
0001F7A4                            @smokepuff2:
0001F7A4 5338 F7B3                  		subq.b	#1,(v_lani1_time).w ; decrement timer
0001F7A8 6A00                       		bpl.s	@end		; branch if not 0
0001F7AA                            		
0001F7AA 11FC 0007 F7B3             		move.b	#7,(v_lani1_time).w ; time to display each frame
0001F7B0 43F9 0000 0000             		lea	(Art_SbzSmoke).l,a1 ; load smoke patterns
0001F7C0 1038 F7B2                  		move.b	(v_lani1_frame).w,d0
0001F7C4 5238 F7B2                  		addq.b	#1,(v_lani1_frame).w ; increment frame counter
0001F7C8 0240 0007                  		andi.w	#7,d0
0001F7CC 6700                       		beq.s	@untilnextpuff2	; branch if frame 0
0001F7CE 5340                       		subq.w	#1,d0
0001F7D0 C0FC 0180                  		mulu.w	#@size*$20,d0
0001F7D4 43F1 0000                  		lea	(a1,d0.w),a1
0001F7D8 323C 000B                  		move.w	#@size-1,d1
0001F7DC 6000 0000                  		bra.w	LoadTiles
0001F7E0                            ; ===========================================================================
0001F7E0                            
0001F7E0                            @untilnextpuff2:
0001F7E0 11FC 0078 F7B5             		move.b	#120,(v_lani2_time).w ; time between smoke puffs (2 seconds)
0001F7E6 609A                       		bra.s	@clearsky
0001F7E8                            ; ===========================================================================
0001F7E8                            
0001F7E8                            @end:
0001F7E8 4E75                       		rts	
0001F7EA                            ; ===========================================================================
0001F7EA                            ; ---------------------------------------------------------------------------
0001F7EA                            ; Animated pattern routine - ending sequence
0001F7EA                            ; ---------------------------------------------------------------------------
0001F7EA                            
0001F7EA                            AniArt_Ending:
0001F7EA                            
0001F7EA                            AniArt_Ending_BigFlower:
0001F7EA                            
0001F7EA =00000010                  @size:		equ 16	; number of tiles per frame
0001F7EA                            
0001F7EA 5338 F7B3                  		subq.b	#1,(v_lani1_time).w ; decrement timer
0001F7EE 6A00                       		bpl.s	AniArt_Ending_SmallFlower ; branch if not 0
0001F7F0                            		
0001F7F0 11FC 0007 F7B3             		move.b	#7,(v_lani1_time).w
0001F7F6 43F9 0000 0000             		lea	(Art_GhzFlower1).l,a1 ;	load big flower	patterns
0001F7FC 45F8 9400                  		lea	($FFFF9400).w,a2 ; load 2nd big flower from RAM
0001F800 1038 F7B2                  		move.b	(v_lani1_frame).w,d0
0001F804 5238 F7B2                  		addq.b	#1,(v_lani1_frame).w ; increment frame counter
0001F808 0240 0001                  		andi.w	#1,d0		; only 2 frames
0001F80C 6700                       		beq.s	@isframe0	; branch if frame 0
0001F80E 43E9 0200                  		lea	@size*$20(a1),a1
0001F812 45EA 0200                  		lea	@size*$20(a2),a2
0001F816                            
0001F816                            	@isframe0:
0001F820 323C 000F                  		move.w	#@size-1,d1
0001F824 6100 0000                  		bsr.w	LoadTiles
0001F828 224A                       		movea.l	a2,a1
0001F834 323C 000F                  		move.w	#@size-1,d1
0001F838 6000 0000                  		bra.w	LoadTiles
0001F83C                            ; ===========================================================================
0001F83C                            
0001F83C                            AniArt_Ending_SmallFlower:
0001F83C                            
0001F83C =0000000C                  @size:		equ 12	; number of tiles per frame
0001F83C                            
0001F83C 5338 F7B5                  		subq.b	#1,(v_lani2_time).w ; decrement timer
0001F840 6A00                       		bpl.s	AniArt_Ending_Flower3 ; branch if not 0
0001F842                            		
0001F842 11FC 0007 F7B5             		move.b	#7,(v_lani2_time).w
0001F848 1038 F7B4                  		move.b	(v_lani2_frame).w,d0
0001F84C 5238 F7B4                  		addq.b	#1,(v_lani2_frame).w ; increment frame counter
0001F850 0240 0007                  		andi.w	#7,d0		; max 8 frames
0001F854 103B 0000                  		move.b	@sequence(pc,d0.w),d0 ; get actual frame num from sequence data
0001F858 EF48                       		lsl.w	#7,d0		; multiply by $80
0001F85A 3200                       		move.w	d0,d1
0001F85C D040                       		add.w	d0,d0
0001F85E D041                       		add.w	d1,d0		; multiply by 3
0001F86A 43F9 0000 0000             		lea	(Art_GhzFlower2).l,a1 ;	load small flower patterns
0001F870 43F1 0000                  		lea	(a1,d0.w),a1	; jump to appropriate tile
0001F874 323C 000B                  		move.w	#@size-1,d1
0001F878 6000 0000                  		bra.w	LoadTiles
0001F87C                            ; ===========================================================================
0001F87C 0000 0001 0202 0201        @sequence:	dc.b 0,	0, 0, 1, 2, 2, 2, 1
0001F884                            ; ===========================================================================
0001F884                            
0001F884                            AniArt_Ending_Flower3:
0001F884                            
0001F884 =00000010                  @size:		equ 16	; number of tiles per frame
0001F884                            
0001F884 5338 F7B9                  		subq.b	#1,(v_lani4_time).w ; decrement timer
0001F888 6A00                       		bpl.s	AniArt_Ending_Flower4 ; branch if not 0
0001F88A                            		
0001F88A 11FC 000E F7B9             		move.b	#$E,(v_lani4_time).w
0001F890 1038 F7B8                  		move.b	(v_lani4_frame).w,d0
0001F894 5238 F7B8                  		addq.b	#1,(v_lani4_frame).w ; increment frame counter
0001F898 0240 0003                  		andi.w	#3,d0		; max 4 frames
0001F89C 103B 0000                  		move.b	AniArt_Ending_Flower3_sequence(pc,d0.w),d0 ; get actual frame num from sequence data
0001F8A0 E148                       		lsl.w	#8,d0		; multiply by $100
0001F8A2 D040                       		add.w	d0,d0		; multiply by 2
0001F8AE 43F8 9800                  		lea	($FFFF9800).w,a1 ; load	special	flower patterns	(from RAM)
0001F8B2 43F1 0000                  		lea	(a1,d0.w),a1	; jump to appropriate tile
0001F8B6 323C 000F                  		move.w	#@size-1,d1
0001F8BA 6000 0000                  		bra.w	LoadTiles
0001F8BE                            ; ===========================================================================
0001F8BE 0001 0201                  AniArt_Ending_Flower3_sequence:	dc.b 0,	1, 2, 1
0001F8C2                            ; ===========================================================================
0001F8C2                            
0001F8C2                            AniArt_Ending_Flower4:
0001F8C2                            
0001F8C2 =00000010                  @size:		equ 16	; number of tiles per frame
0001F8C2                            
0001F8C2 5338 F7BB                  		subq.b	#1,(v_lani5_time).w ; decrement timer
0001F8C6 6A00                       		bpl.s	@end		; branch if not 0
0001F8C8                            		
0001F8C8 11FC 000B F7BB             		move.b	#$B,(v_lani5_time).w
0001F8CE 1038 F7BA                  		move.b	(v_lani5_frame).w,d0
0001F8D2 5238 F7BA                  		addq.b	#1,(v_lani5_frame).w ; increment frame counter
0001F8D6 0240 0003                  		andi.w	#3,d0
0001F8DA 103B 00E2                  		move.b	AniArt_Ending_Flower3_sequence(pc,d0.w),d0 ; get actual frame num from sequence data
0001F8DE E148                       		lsl.w	#8,d0		; multiply by $100
0001F8E0 D040                       		add.w	d0,d0		; multiply by 2
0001F8EC 43F8 9E00                  		lea	($FFFF9E00).w,a1 ; load	special	flower patterns	(from RAM)
0001F8F0 43F1 0000                  		lea	(a1,d0.w),a1	; jump to appropriate tile
0001F8F4 323C 000F                  		move.w	#@size-1,d1
0001F8F8 6000 0000                  		bra.w	LoadTiles
0001F8FC                            ; ===========================================================================
0001F8FC                            
0001F8FC                            @end:
0001F8FC 4E75                       		rts	
0001F8FE                            ; ===========================================================================
0001F8FE                            
0001F8FE                            AniArt_none:
0001F8FE 4E75                       		rts	
0001F900                            
0001F900                            ; ---------------------------------------------------------------------------
0001F900                            ; Subroutine to	transfer graphics to VRAM
0001F900                            
0001F900                            ; input:
0001F900                            ;	a1 = source address
0001F900                            ;	a6 = vdp_data_port ($C00000)
0001F900                            ;	d1 = number of tiles to load (minus one)
0001F900                            ; ---------------------------------------------------------------------------
0001F900                            
0001F900                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001F900                            
0001F900                            
0001F900                            LoadTiles:
0001F900 2C99                       		move.l	(a1)+,(a6)
0001F902 2C99                       		move.l	(a1)+,(a6)
0001F904 2C99                       		move.l	(a1)+,(a6)
0001F906 2C99                       		move.l	(a1)+,(a6)
0001F908 2C99                       		move.l	(a1)+,(a6)
0001F90A 2C99                       		move.l	(a1)+,(a6)
0001F90C 2C99                       		move.l	(a1)+,(a6)
0001F90E 2C99                       		move.l	(a1)+,(a6)
0001F910 51C9 FFEE                  		dbf	d1,LoadTiles
0001F914 4E75                       		rts	
0001F916                            ; End of function LoadTiles
0001F916                            
0001F916                            ; ===========================================================================
0001F916                            ; ---------------------------------------------------------------------------
0001F916                            ; Animated pattern routine - more Marble Zone
0001F916                            ; ---------------------------------------------------------------------------
0001F916 0000 0000                  AniArt_MZextra:	dc.w loc_1C3EE-AniArt_MZextra, loc_1C3FA-AniArt_MZextra
0001F91A 0000 0000                  		dc.w loc_1C410-AniArt_MZextra, loc_1C41E-AniArt_MZextra
0001F91E 0000 0000                  		dc.w loc_1C434-AniArt_MZextra, loc_1C442-AniArt_MZextra
0001F922 0000 0000                  		dc.w loc_1C458-AniArt_MZextra, loc_1C466-AniArt_MZextra
0001F926 0000 0000                  		dc.w loc_1C47C-AniArt_MZextra, loc_1C48A-AniArt_MZextra
0001F92A 0000 0000                  		dc.w loc_1C4A0-AniArt_MZextra, loc_1C4AE-AniArt_MZextra
0001F92E 0000 0000                  		dc.w loc_1C4C4-AniArt_MZextra, loc_1C4D2-AniArt_MZextra
0001F932 0000 0000                  		dc.w loc_1C4E8-AniArt_MZextra, loc_1C4FA-AniArt_MZextra
0001F936                            ; ===========================================================================
0001F936                            
0001F936                            loc_1C3EE:
0001F936 2C91                       		move.l	(a1),(a6)
0001F938 43E9 0010                  		lea	$10(a1),a1
0001F93C 51C9 FFF8                  		dbf	d1,loc_1C3EE
0001F940 4E75                       		rts	
0001F942                            ; ===========================================================================
0001F942                            
0001F942                            loc_1C3FA:
0001F942 2029 0002                  		move.l	2(a1),d0
0001F946 1029 0001                  		move.b	1(a1),d0
0001F94A E098                       		ror.l	#8,d0
0001F94C 2C80                       		move.l	d0,(a6)
0001F94E 43E9 0010                  		lea	$10(a1),a1
0001F952 51C9 FFEE                  		dbf	d1,loc_1C3FA
0001F956 4E75                       		rts	
0001F958                            ; ===========================================================================
0001F958                            
0001F958                            loc_1C410:
0001F958 2CA9 0002                  		move.l	2(a1),(a6)
0001F95C 43E9 0010                  		lea	$10(a1),a1
0001F960 51C9 FFF6                  		dbf	d1,loc_1C410
0001F964 4E75                       		rts	
0001F966                            ; ===========================================================================
0001F966                            
0001F966                            loc_1C41E:
0001F966 2029 0004                  		move.l	4(a1),d0
0001F96A 1029 0003                  		move.b	3(a1),d0
0001F96E E098                       		ror.l	#8,d0
0001F970 2C80                       		move.l	d0,(a6)
0001F972 43E9 0010                  		lea	$10(a1),a1
0001F976 51C9 FFEE                  		dbf	d1,loc_1C41E
0001F97A 4E75                       		rts	
0001F97C                            ; ===========================================================================
0001F97C                            
0001F97C                            loc_1C434:
0001F97C 2CA9 0004                  		move.l	4(a1),(a6)
0001F980 43E9 0010                  		lea	$10(a1),a1
0001F984 51C9 FFF6                  		dbf	d1,loc_1C434
0001F988 4E75                       		rts	
0001F98A                            ; ===========================================================================
0001F98A                            
0001F98A                            loc_1C442:
0001F98A 2029 0006                  		move.l	6(a1),d0
0001F98E 1029 0005                  		move.b	5(a1),d0
0001F992 E098                       		ror.l	#8,d0
0001F994 2C80                       		move.l	d0,(a6)
0001F996 43E9 0010                  		lea	$10(a1),a1
0001F99A 51C9 FFEE                  		dbf	d1,loc_1C442
0001F99E 4E75                       		rts	
0001F9A0                            ; ===========================================================================
0001F9A0                            
0001F9A0                            loc_1C458:
0001F9A0 2CA9 0006                  		move.l	6(a1),(a6)
0001F9A4 43E9 0010                  		lea	$10(a1),a1
0001F9A8 51C9 FFF6                  		dbf	d1,loc_1C458
0001F9AC 4E75                       		rts	
0001F9AE                            ; ===========================================================================
0001F9AE                            
0001F9AE                            loc_1C466:
0001F9AE 2029 0008                  		move.l	8(a1),d0
0001F9B2 1029 0007                  		move.b	7(a1),d0
0001F9B6 E098                       		ror.l	#8,d0
0001F9B8 2C80                       		move.l	d0,(a6)
0001F9BA 43E9 0010                  		lea	$10(a1),a1
0001F9BE 51C9 FFEE                  		dbf	d1,loc_1C466
0001F9C2 4E75                       		rts	
0001F9C4                            ; ===========================================================================
0001F9C4                            
0001F9C4                            loc_1C47C:
0001F9C4 2CA9 0008                  		move.l	8(a1),(a6)
0001F9C8 43E9 0010                  		lea	$10(a1),a1
0001F9CC 51C9 FFF6                  		dbf	d1,loc_1C47C
0001F9D0 4E75                       		rts	
0001F9D2                            ; ===========================================================================
0001F9D2                            
0001F9D2                            loc_1C48A:
0001F9D2 2029 000A                  		move.l	$A(a1),d0
0001F9D6 1029 0009                  		move.b	9(a1),d0
0001F9DA E098                       		ror.l	#8,d0
0001F9DC 2C80                       		move.l	d0,(a6)
0001F9DE 43E9 0010                  		lea	$10(a1),a1
0001F9E2 51C9 FFEE                  		dbf	d1,loc_1C48A
0001F9E6 4E75                       		rts	
0001F9E8                            ; ===========================================================================
0001F9E8                            
0001F9E8                            loc_1C4A0:
0001F9E8 2CA9 000A                  		move.l	$A(a1),(a6)
0001F9EC 43E9 0010                  		lea	$10(a1),a1
0001F9F0 51C9 FFF6                  		dbf	d1,loc_1C4A0
0001F9F4 4E75                       		rts	
0001F9F6                            ; ===========================================================================
0001F9F6                            
0001F9F6                            loc_1C4AE:
0001F9F6 2029 000C                  		move.l	$C(a1),d0
0001F9FA 1029 000B                  		move.b	$B(a1),d0
0001F9FE E098                       		ror.l	#8,d0
0001FA00 2C80                       		move.l	d0,(a6)
0001FA02 43E9 0010                  		lea	$10(a1),a1
0001FA06 51C9 FFEE                  		dbf	d1,loc_1C4AE
0001FA0A 4E75                       		rts	
0001FA0C                            ; ===========================================================================
0001FA0C                            
0001FA0C                            loc_1C4C4:
0001FA0C 2CA9 000C                  		move.l	$C(a1),(a6)
0001FA10 43E9 0010                  		lea	$10(a1),a1
0001FA14 51C9 FFF6                  		dbf	d1,loc_1C4C4
0001FA18 4E75                       		rts	
0001FA1A                            ; ===========================================================================
0001FA1A                            
0001FA1A                            loc_1C4D2:
0001FA1A 2029 000C                  		move.l	$C(a1),d0
0001FA1E E198                       		rol.l	#8,d0
0001FA20 1011                       		move.b	0(a1),d0
0001FA22 2C80                       		move.l	d0,(a6)
0001FA24 43E9 0010                  		lea	$10(a1),a1
0001FA28 51C9 FFF0                  		dbf	d1,loc_1C4D2
0001FA2C 4E75                       		rts	
0001FA2E                            ; ===========================================================================
0001FA2E                            
0001FA2E                            loc_1C4E8:
0001FA2E 3CA9 000E                  		move.w	$E(a1),(a6)
0001FA32 3C91                       		move.w	0(a1),(a6)
0001FA34 43E9 0010                  		lea	$10(a1),a1
0001FA38 51C9 FFF4                  		dbf	d1,loc_1C4E8
0001FA3C 4E75                       		rts	
0001FA3E                            ; ===========================================================================
0001FA3E                            
0001FA3E                            loc_1C4FA:
0001FA3E 2011                       		move.l	0(a1),d0
0001FA40 1029 000F                  		move.b	$F(a1),d0
0001FA44 E098                       		ror.l	#8,d0
0001FA46 2C80                       		move.l	d0,(a6)
0001FA48 43E9 0010                  		lea	$10(a1),a1
0001FA4C 51C9 FFF0                  		dbf	d1,loc_1C4FA
0001FA50 4E75                       		rts	
0001FA52                            
0001FA52                            ; ---------------------------------------------------------------------------
0001FA52                            ; Animated pattern routine - giant ring
0001FA52                            ; ---------------------------------------------------------------------------
0001FA52                            
0001FA52                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001FA52                            
0001FA52                            
0001FA52                            AniArt_GiantRing:
0001FA52                            
0001FA52 =0000000E                  @size:		equ 14
0001FA52                            
0001FA52 4A78 F7BE                  		tst.w	(v_gfxbigring).w	; Is there any of the art left to load?
0001FA56 6600                       		bne.s	@loadTiles		; If so, get to work
0001FA58 4E75                       		rts	
0001FA5A                            ; ===========================================================================
0001FA5A                            ; loc_1C518:
0001FA5A                            @loadTiles:
0001FA5A 0478 01C0 F7BE             		subi.w	#@size*$20,(v_gfxbigring).w	; Count-down the 14 tiles we're going to load now
0001FA60 43F9 0000 0000             		lea	(Art_BigRing).l,a1 ; load giant	ring patterns
0001FA66 7000                       		moveq	#0,d0
0001FA68 3038 F7BE                  		move.w	(v_gfxbigring).w,d0
0001FA6C 43F1 0000                  		lea	(a1,d0.w),a1
0001FA70                            		; Turn VRAM address into VDP command
0001FA70 0640 8000                  		addi.w	#$8000,d0
0001FA74 E588                       		lsl.l	#2,d0
0001FA76 E448                       		lsr.w	#2,d0
0001FA78 0040 4000                  		ori.w	#$4000,d0
0001FA7C 4840                       		swap	d0
0001FA7E                            		; Send VDP command (write to VRAM at address contained in v_gfxbigring)
0001FA7E 2D40 0004                  		move.l	d0,4(a6)
0001FA82                            
0001FA82 323C 000D                  		move.w	#@size-1,d1
0001FA86 6000 FE78                  		bra.w	LoadTiles
0001FA8A                            
0001FA8A                            ; End of function AniArt_GiantRing
0001FA8A                            ; End of function AniArt_GiantRing
0001FA8A                            
0001FA8A                            		include	"_incObj\21 HUD.asm"
0001FA8A                            ; ---------------------------------------------------------------------------
0001FA8A                            ; Object 21 - SCORE, TIME, RINGS
0001FA8A                            ; ---------------------------------------------------------------------------
0001FA8A                            
0001FA8A                            HUD:
0001FA8A 7000                       		moveq	#0,d0
0001FA8C 1028 0024                  		move.b	obRoutine(a0),d0
0001FA90 323B 0000                  		move.w	HUD_Index(pc,d0.w),d1
0001FA94 4EFB 1000                  		jmp	HUD_Index(pc,d1.w)
0001FA98                            ; ===========================================================================
0001FA98 0000                       HUD_Index:	dc.w HUD_Main-HUD_Index
0001FA9A 0000                       		dc.w HUD_Flash-HUD_Index
0001FA9C                            ; ===========================================================================
0001FA9C                            
0001FA9C                            HUD_Main:	; Routine 0
0001FA9C 5428 0024                  		addq.b	#2,obRoutine(a0)
0001FAA0 317C 0090 0008             		move.w	#$90,obX(a0)
0001FAA6 317C 0108 000A             		move.w	#$108,obScreenY(a0)
0001FAAC 217C 0000 0000 0004        		move.l	#Map_HUD,obMap(a0)
0001FAB4 317C 06CA 0002             		move.w	#$6CA,obGfx(a0)
0001FABA 117C 0000 0001             		move.b	#0,obRender(a0)
0001FAC0 317C 0000 0018             		move.w	#0,obPriority(a0)
0001FAC6                            
0001FAC6                            HUD_Flash:	; Routine 2
0001FAC6 7000                       		moveq	#0,d0
0001FAC8 0838 0003 FE05             		btst	#3,(v_framebyte).w
0001FACE 6600                       		bne.s	@display
0001FAD0 4A78 FE20                  		tst.w	(v_rings).w	; do you have any rings?
0001FAD4 6600                       		bne.s	@norings	; if so, branch
0001FAD6 5240                       		addq.w	#1,d0		; make ring counter flash red
0001FAD8                            ; ===========================================================================
0001FAD8                            
0001FAD8                            @norings:
0001FAD8 0C38 0009 FE23             		cmpi.b	#9,(v_timemin).w ; have	9 minutes elapsed?
0001FADE 6600                       		bne.s	@display	; if not, branch
0001FAE0 5440                       		addq.w	#2,d0		; make time counter flash red
0001FAE2                            
0001FAE2                            	@display:
0001FAE2 1140 001A                  		move.b	d0,obFrame(a0)
0001FAE6 4EF9 0000 F97C             		jmp	DisplaySprite
0001FAE6 4EF9 0000 F97C             		jmp	DisplaySprite
0001FAEC                            Map_HUD:	include	"_maps\HUD.asm"
0001FAEC                            ; ---------------------------------------------------------------------------
0001FAEC                            ; Sprite mappings - SCORE, TIME, RINGS
0001FAEC                            ; ---------------------------------------------------------------------------
0001FAEC                            Map_HUD_internal:
0001FAEC 0000                       		dc.w @allyellow-Map_HUD_internal
0001FAEE 0000                       		dc.w @ringred-Map_HUD_internal
0001FAF0 0000                       		dc.w @timered-Map_HUD_internal
0001FAF2 0000                       		dc.w @allred-Map_HUD_internal
0001FAF4 0A                         @allyellow:	dc.b $A
0001FAF5 800D 8000 00               		dc.b $80, $D, $80, 0, 0
0001FAFA 800D 8018 20               		dc.b $80, $D, $80, $18,	$20
0001FAFF 800D 8020 40               		dc.b $80, $D, $80, $20,	$40
0001FB04 900D 8010 00               		dc.b $90, $D, $80, $10,	0
0001FB09 900D 8028 28               		dc.b $90, $D, $80, $28,	$28
0001FB0E A00D 8008 00               		dc.b $A0, $D, $80, 8, 0
0001FB13 A001 8000 20               		dc.b $A0, 1, $80, 0, $20
0001FB18 A009 8030 30               		dc.b $A0, 9, $80, $30, $30
0001FB1D 4005 810A 00               		dc.b $40, 5, $81, $A, 0
0001FB22 400D 810E 10               		dc.b $40, $D, $81, $E, $10
0001FB27 00                         		dc.b 0
0001FB28 0A                         @ringred:	dc.b $A
0001FB29 800D 8000 00               		dc.b $80, $D, $80, 0, 0
0001FB2E 800D 8018 20               		dc.b $80, $D, $80, $18,	$20
0001FB33 800D 8020 40               		dc.b $80, $D, $80, $20,	$40
0001FB38 900D 8010 00               		dc.b $90, $D, $80, $10,	0
0001FB3D 900D 8028 28               		dc.b $90, $D, $80, $28,	$28
0001FB42 A00D A008 00               		dc.b $A0, $D, $A0, 8, 0
0001FB47 A001 A000 20               		dc.b $A0, 1, $A0, 0, $20
0001FB4C A009 8030 30               		dc.b $A0, 9, $80, $30, $30
0001FB51 4005 810A 00               		dc.b $40, 5, $81, $A, 0
0001FB56 400D 810E 10               		dc.b $40, $D, $81, $E, $10
0001FB5B 00                         		dc.b 0
0001FB5C 0A                         @timered:	dc.b $A
0001FB5D 800D 8000 00               		dc.b $80, $D, $80, 0, 0
0001FB62 800D 8018 20               		dc.b $80, $D, $80, $18,	$20
0001FB67 800D 8020 40               		dc.b $80, $D, $80, $20,	$40
0001FB6C 900D A010 00               		dc.b $90, $D, $A0, $10,	0
0001FB71 900D 8028 28               		dc.b $90, $D, $80, $28,	$28
0001FB76 A00D 8008 00               		dc.b $A0, $D, $80, 8, 0
0001FB7B A001 8000 20               		dc.b $A0, 1, $80, 0, $20
0001FB80 A009 8030 30               		dc.b $A0, 9, $80, $30, $30
0001FB85 4005 810A 00               		dc.b $40, 5, $81, $A, 0
0001FB8A 400D 810E 10               		dc.b $40, $D, $81, $E, $10
0001FB8F 00                         		dc.b 0
0001FB90 0A                         @allred:	dc.b $A
0001FB91 800D 8000 00               		dc.b $80, $D, $80, 0, 0
0001FB96 800D 8018 20               		dc.b $80, $D, $80, $18,	$20
0001FB9B 800D 8020 40               		dc.b $80, $D, $80, $20,	$40
0001FBA0 900D A010 00               		dc.b $90, $D, $A0, $10,	0
0001FBA5 900D 8028 28               		dc.b $90, $D, $80, $28,	$28
0001FBAA A00D A008 00               		dc.b $A0, $D, $A0, 8, 0
0001FBAF A001 A000 20               		dc.b $A0, 1, $A0, 0, $20
0001FBB4 A009 8030 30               		dc.b $A0, 9, $80, $30, $30
0001FBB9 4005 810A 00               		dc.b $40, 5, $81, $A, 0
0001FBBE 400D 810E 10               		dc.b $40, $D, $81, $E, $10
0001FBC4 00                         		even
0001FBC4 00                         		even
0001FBC4                            
0001FBC4                            ; ---------------------------------------------------------------------------
0001FBC4                            ; Add points subroutine
0001FBC4                            ; ---------------------------------------------------------------------------
0001FBC4                            
0001FBC4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001FBC4                            
0001FBC4                            
0001FBC4                            AddPoints:
0001FBC4 11FC 0001 FE1F             		move.b	#1,(f_scorecount).w ; set score counter to update
0001FBCA                            
0001FBCA                            
0001FBCA 47F8 FE26                  			lea     (v_score).w,a3
0001FBCE D193                       			add.l   d0,(a3)
0001FBD0 223C 000F 423F             			move.l  #999999,d1
0001FBD6 B293                       			cmp.l   (a3),d1 ; is score below 999999?
0001FBD8 6200                       			bhi.s   @belowmax ; if yes, branch
0001FBDA 2681                       			move.l  d1,(a3) ; reset score to 999999
0001FBDC                            		@belowmax:
0001FBDC 2013                       			move.l  (a3),d0
0001FBDE B0B8 FFC0                  			cmp.l   (v_scorelife).w,d0 ; has Sonic got 50000+ points?
0001FBE2 6500                       			blo.s   @noextralife ; if not, branch
0001FBE4                            
0001FBE4 06B8 0000 1388 FFC0        			addi.l  #5000,(v_scorelife).w ; increase requirement by 50000
0001FBEC 4A38 FFF8                  			tst.b   (v_megadrive).w
0001FBF0 6B00                       			bmi.s   @noextralife ; branch if Mega Drive is Japanese
0001FBF2 5238 FE12                  			addq.b  #1,(v_lives).w ; give extra life
0001FBF6 5238 FE1C                  			addq.b  #1,(f_lifecount).w
0001FC04                            
0001FC04                            @locret_1C6B6:
0001FC04                            @noextralife:
0001FC04 4E75                       		rts	
0001FC06                            ; End of function AddPoints
0001FC06                            
0001FC06                            		include	"_inc\HUD_Update.asm"
0001FC06                            ; ---------------------------------------------------------------------------
0001FC06                            ; Subroutine to	update the HUD
0001FC06                            ; ---------------------------------------------------------------------------
0001FC06                            
0001FC06                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001FC06                            
0001FC06                            hudVRAM:	macro loc
0001FC06                            		move.l	#($40000000+((loc&$3FFF)<<16)+((loc&$C000)>>14)),d0
0001FC06                            		endm
0001FC06                            
0001FC06                            
0001FC06                            HUD_Update:
0001FC06 4A78 FFFA                  		tst.w	(f_debugmode).w	; is debug mode	on?
0001FC0A 6600 0000                  		bne.w	HudDebug	; if yes, branch
0001FC0E 4A38 FE1F                  		tst.b	(f_scorecount).w ; does the score need updating?
0001FC12 6700                       		beq.s	@chkrings	; if not, branch
0001FC14                            
0001FC14 4238 FE1F                  		clr.b	(f_scorecount).w
0001FC18 203C 5C80 0003             		hudVRAM	$DC80		; set VRAM address
0001FC1E 2238 FE26                  		move.l	(v_score).w,d1	; load score
0001FC22 6100 0000                  		bsr.w	Hud_Score
0001FC26                            
0001FC26                            	@chkrings:
0001FC26 4A38 FE1D                  		tst.b	(f_ringcount).w	; does the ring	counter	need updating?
0001FC2A 6700                       		beq.s	@chktime	; if not, branch
0001FC2C 6A00                       		bpl.s	@notzero
0001FC2E 6100 0000                  		bsr.w	Hud_LoadZero	; reset rings to 0 if Sonic is hit
0001FC32                            
0001FC32                            	@notzero:
0001FC32 4238 FE1D                  		clr.b	(f_ringcount).w
0001FC36 203C 5F40 0003             		hudVRAM	$DF40		; set VRAM address
0001FC3C 7200                       		moveq	#0,d1
0001FC3E 3238 FE20                  		move.w	(v_rings).w,d1	; load number of rings
0001FC42 6100 0000                  		bsr.w	Hud_Rings
0001FC46                            
0001FC46                            	@chktime:
0001FC46 4A38 FE1E                  		tst.b	(f_timecount).w	; does the time	need updating?
0001FC4A 6700                       		beq.s	@chklives	; if not, branch
0001FC4C 4A78 F63A                  		tst.w	(f_pause).w	; is the game paused?
0001FC50 6600                       		bne.s	@chklives	; if yes, branch
0001FC52 43F8 FE22                  		lea	(v_time).w,a1
0001FC56 0C99 0009 3B3B             		cmpi.l	#(9*$10000)+(59*$100)+59,(a1)+ ; is the time 9:59:59?
0001FC5C 6700                       		beq.s	TimeOver	; if yes, branch
0001FC5E                            
0001FC5E 5221                       		addq.b	#1,-(a1)	; increment 1/60s counter
0001FC60 0C11 003C                  		cmpi.b	#60,(a1)	; check if passed 60
0001FC64 6500                       		bcs.s	@chklives
0001FC66 12BC 0000                  		move.b	#0,(a1)
0001FC6A 5221                       		addq.b	#1,-(a1)	; increment second counter
0001FC6C 0C11 003C                  		cmpi.b	#60,(a1)	; check if passed 60
0001FC70 6500                       		bcs.s	@updatetime
0001FC72 12BC 0000                  		move.b	#0,(a1)
0001FC76 5221                       		addq.b	#1,-(a1)	; increment minute counter
0001FC78 0C11 0009                  		cmpi.b	#9,(a1)		; check if passed 9
0001FC7C 6500                       		bcs.s	@updatetime
0001FC7E 12BC 0009                  		move.b	#9,(a1)		; keep as 9
0001FC82                            
0001FC82                            	@updatetime:
0001FC82 203C 5E40 0003             		hudVRAM	$DE40
0001FC88 7200                       		moveq	#0,d1
0001FC8A 1238 FE23                  		move.b	(v_timemin).w,d1 ; load	minutes
0001FC8E 6100 0000                  		bsr.w	Hud_Mins
0001FC92 203C 5EC0 0003             		hudVRAM	$DEC0
0001FC98 7200                       		moveq	#0,d1
0001FC9A 1238 FE24                  		move.b	(v_timesec).w,d1 ; load	seconds
0001FC9E 6100 0000                  		bsr.w	Hud_Secs
0001FCA2                            
0001FCA2                            	@chklives:
0001FCA2 4A38 FE1C                  		tst.b	(f_lifecount).w ; does the lives counter need updating?
0001FCA6 6700                       		beq.s	@chkbonus	; if not, branch
0001FCA8 4238 FE1C                  		clr.b	(f_lifecount).w
0001FCAC 6100 0000                  		bsr.w	Hud_Lives
0001FCB0                            
0001FCB0                            	@chkbonus:
0001FCB0 4A38 F7D6                  		tst.b	(f_endactbonus).w ; do time/ring bonus counters need updating?
0001FCB4 6700                       		beq.s	@finish		; if not, branch
0001FCB6 4238 F7D6                  		clr.b	(f_endactbonus).w
0001FCC4 7200                       		moveq	#0,d1
0001FCC6 3238 F7D2                  		move.w	(v_timebonus).w,d1 ; load time bonus
0001FCCA 6100 0000                  		bsr.w	Hud_TimeRingBonus
0001FCCE 7200                       		moveq	#0,d1
0001FCD0 3238 F7D4                  		move.w	(v_ringbonus).w,d1 ; load ring bonus
0001FCD4 6100 0000                  		bsr.w	Hud_TimeRingBonus
0001FCD8                            
0001FCD8                            	@finish:
0001FCD8 4E75                       		rts	
0001FCDA                            ; ===========================================================================
0001FCDA                            
0001FCDA                            TimeOver:
0001FCDA 4238 FE1E                  		clr.b	(f_timecount).w
0001FCDE 41F8 D000                  		lea	(v_player).w,a0
0001FCE2 2448                       		movea.l	a0,a2
0001FCE4 6100 E83A                  		bsr.w	KillSonic
0001FCE8 11FC 0001 FE1A             		move.b	#1,(f_timeover).w
0001FCEE 4E75                       		rts	
0001FCF0                            ; ===========================================================================
0001FCF0                            
0001FCF0                            HudDebug:
0001FCF0 6100 0000                  		bsr.w	HudDb_XY
0001FCF4 4A38 FE1D                  		tst.b	(f_ringcount).w	; does the ring	counter	need updating?
0001FCF8 6700                       		beq.s	@objcounter	; if not, branch
0001FCFA 6A00                       		bpl.s	@notzero
0001FCFC 6100 0000                  		bsr.w	Hud_LoadZero	; reset rings to 0 if Sonic is hit
0001FD00                            
0001FD00                            	@notzero:
0001FD00 4238 FE1D                  		clr.b	(f_ringcount).w
0001FD04 203C 5F40 0003             		hudVRAM	$DF40		; set VRAM address
0001FD0A 7200                       		moveq	#0,d1
0001FD0C 3238 FE20                  		move.w	(v_rings).w,d1	; load number of rings
0001FD10 6100 0000                  		bsr.w	Hud_Rings
0001FD14                            
0001FD14                            	@objcounter:
0001FD14 203C 5EC0 0003             		hudVRAM	$DEC0		; set VRAM address
0001FD1A 7200                       		moveq	#0,d1
0001FD1C 1238 F62C                  		move.b	(v_spritecount).w,d1 ; load "number of objects" counter
0001FD20 6100 0000                  		bsr.w	Hud_Secs
0001FD24 4A38 FE1C                  		tst.b	(f_lifecount).w ; does the lives counter need updating?
0001FD28 6700                       		beq.s	@chkbonus	; if not, branch
0001FD2A 4238 FE1C                  		clr.b	(f_lifecount).w
0001FD2E 6100 0000                  		bsr.w	Hud_Lives
0001FD32                            
0001FD32                            	@chkbonus:
0001FD32 4A38 F7D6                  		tst.b	(f_endactbonus).w ; does the ring/time bonus counter need updating?
0001FD36 6700                       		beq.s	@finish		; if not, branch
0001FD38 4238 F7D6                  		clr.b	(f_endactbonus).w
0001FD46 7200                       		moveq	#0,d1
0001FD48 3238 F7D2                  		move.w	(v_timebonus).w,d1 ; load time bonus
0001FD4C 6100 0000                  		bsr.w	Hud_TimeRingBonus
0001FD50 7200                       		moveq	#0,d1
0001FD52 3238 F7D4                  		move.w	(v_ringbonus).w,d1 ; load ring bonus
0001FD56 6100 0000                  		bsr.w	Hud_TimeRingBonus
0001FD5A                            
0001FD5A                            	@finish:
0001FD5A 4E75                       		rts	
0001FD5C                            ; End of function HUD_Update
0001FD5C                            
0001FD5C                            ; ---------------------------------------------------------------------------
0001FD5C                            ; Subroutine to	load "0" on the	HUD
0001FD5C                            ; ---------------------------------------------------------------------------
0001FD5C                            
0001FD5C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001FD5C                            
0001FD5C                            
0001FD5C                            Hud_LoadZero:
0001FD66 45FA 0000                  		lea	Hud_TilesZero(pc),a2
0001FD6A 343C 0002                  		move.w	#2,d2
0001FD6E 6000                       		bra.s	loc_1C83E
0001FD70                            ; End of function Hud_LoadZero
0001FD70                            
0001FD70                            ; ---------------------------------------------------------------------------
0001FD70                            ; Subroutine to	load uncompressed HUD patterns ("E", "0", colon)
0001FD70                            ; ---------------------------------------------------------------------------
0001FD70                            
0001FD70                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001FD70                            
0001FD70                            
0001FD70                            Hud_Base:
0001FD70 4DF9 00C0 0000             		lea	($C00000).l,a6
0001FD76 6100 0000                  		bsr.w	Hud_Lives
0001FD84 45FA 0000                  		lea	Hud_TilesBase(pc),a2
0001FD88 343C 000E                  		move.w	#$E,d2
0001FD8C                            
0001FD8C                            loc_1C83E:
0001FD8C 43FA 0000                  		lea	Art_Hud(pc),a1
0001FD90                            
0001FD90                            loc_1C842:
0001FD90 323C 000F                  		move.w	#$F,d1
0001FD94 101A                       		move.b	(a2)+,d0
0001FD96 6B00                       		bmi.s	loc_1C85E
0001FD98 4880                       		ext.w	d0
0001FD9A EB48                       		lsl.w	#5,d0
0001FD9C 47F1 0000                  		lea	(a1,d0.w),a3
0001FDA0                            
0001FDA0                            loc_1C852:
0001FDA0 2C9B                       		move.l	(a3)+,(a6)
0001FDA2 51C9 FFFC                  		dbf	d1,loc_1C852
0001FDA6                            
0001FDA6                            loc_1C858:
0001FDA6 51CA FFE8                  		dbf	d2,loc_1C842
0001FDAA                            
0001FDAA 4E75                       		rts	
0001FDAC                            ; ===========================================================================
0001FDAC                            
0001FDAC                            loc_1C85E:
0001FDAC 2CBC 0000 0000             		move.l	#0,(a6)
0001FDB2 51C9 FFF8                  		dbf	d1,loc_1C85E
0001FDB6                            
0001FDB6 60EE                       		bra.s	loc_1C858
0001FDB8                            ; End of function Hud_Base
0001FDB8                            
0001FDB8                            ; ===========================================================================
0001FDB8 16FF FFFF FFFF FF00 0014+  Hud_TilesBase:	dc.b $16, $FF, $FF, $FF, $FF, $FF, $FF,	0, 0, $14, 0, 0
0001FDC4 FFFF 0000                  Hud_TilesZero:	dc.b $FF, $FF, 0, 0
0001FDC8                            ; ---------------------------------------------------------------------------
0001FDC8                            ; Subroutine to	load debug mode	numbers	patterns
0001FDC8                            ; ---------------------------------------------------------------------------
0001FDC8                            
0001FDC8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001FDC8                            
0001FDC8                            
0001FDC8                            HudDb_XY:
0001FDD2 3238 F700                  		move.w	(v_screenposx).w,d1 ; load camera x-position
0001FDD6 4841                       		swap	d1
0001FDD8 3238 D008                  		move.w	(v_player+obX).w,d1 ; load Sonic's x-position
0001FDDC 6100                       		bsr.s	HudDb_XY2
0001FDDE 3238 F704                  		move.w	(v_screenposy).w,d1 ; load camera y-position
0001FDE2 4841                       		swap	d1
0001FDE4 3238 D00C                  		move.w	(v_player+obY).w,d1 ; load Sonic's y-position
0001FDE8                            ; End of function HudDb_XY
0001FDE8                            
0001FDE8                            
0001FDE8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001FDE8                            
0001FDE8                            
0001FDE8                            HudDb_XY2:
0001FDE8 7C07                       		moveq	#7,d6
0001FDEA 43F9 0000 0592             		lea	(Art_Text).l,a1
0001FDF0                            
0001FDF0                            HudDb_XYLoop:
0001FDF0 E959                       		rol.w	#4,d1
0001FDF2 3401                       		move.w	d1,d2
0001FDF4 0242 000F                  		andi.w	#$F,d2
0001FDF8 0C42 000A                  		cmpi.w	#$A,d2
0001FDFC 6500                       		bcs.s	loc_1C8B2
0001FDFE 5E42                       		addq.w	#7,d2
0001FE00                            
0001FE00                            loc_1C8B2:
0001FE00 EB4A                       		lsl.w	#5,d2
0001FE02 47F1 2000                  		lea	(a1,d2.w),a3
0001FE06 2C9B                       		move.l	(a3)+,(a6)
0001FE08 2C9B                       		move.l	(a3)+,(a6)
0001FE0A 2C9B                       		move.l	(a3)+,(a6)
0001FE0C 2C9B                       		move.l	(a3)+,(a6)
0001FE0E 2C9B                       		move.l	(a3)+,(a6)
0001FE10 2C9B                       		move.l	(a3)+,(a6)
0001FE12 2C9B                       		move.l	(a3)+,(a6)
0001FE14 2C9B                       		move.l	(a3)+,(a6)
0001FE16 4841                       		swap	d1
0001FE18 51CE FFD6                  		dbf	d6,HudDb_XYLoop	; repeat 7 more	times
0001FE1C                            
0001FE1C 4E75                       		rts	
0001FE1E                            ; End of function HudDb_XY2
0001FE1E                            
0001FE1E                            ; ---------------------------------------------------------------------------
0001FE1E                            ; Subroutine to	load rings numbers patterns
0001FE1E                            ; ---------------------------------------------------------------------------
0001FE1E                            
0001FE1E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001FE1E                            
0001FE1E                            
0001FE1E                            Hud_Rings:
0001FE1E 45F9 0000 0000             		lea	(Hud_100).l,a2
0001FE24 7C02                       		moveq	#2,d6
0001FE26 6000                       		bra.s	Hud_LoadArt
0001FE28                            ; End of function Hud_Rings
0001FE28                            
0001FE28                            ; ---------------------------------------------------------------------------
0001FE28                            ; Subroutine to	load score numbers patterns
0001FE28                            ; ---------------------------------------------------------------------------
0001FE28                            
0001FE28                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001FE28                            
0001FE28                            
0001FE28                            Hud_Score:
0001FE28 45F9 0000 0000             		lea	(Hud_100000).l,a2
0001FE2E 7C05                       		moveq	#5,d6
0001FE30                            
0001FE30                            Hud_LoadArt:
0001FE30 7800                       		moveq	#0,d4
0001FE32 43FA 0000                  		lea	Art_Hud(pc),a1
0001FE36                            
0001FE36                            Hud_ScoreLoop:
0001FE36 7400                       		moveq	#0,d2
0001FE38 261A                       		move.l	(a2)+,d3
0001FE3A                            
0001FE3A                            loc_1C8EC:
0001FE3A 9283                       		sub.l	d3,d1
0001FE3C 6500                       		bcs.s	loc_1C8F4
0001FE3E 5242                       		addq.w	#1,d2
0001FE40 60F8                       		bra.s	loc_1C8EC
0001FE42                            ; ===========================================================================
0001FE42                            
0001FE42                            loc_1C8F4:
0001FE42 D283                       		add.l	d3,d1
0001FE44 4A42                       		tst.w	d2
0001FE46 6700                       		beq.s	loc_1C8FE
0001FE48 383C 0001                  		move.w	#1,d4
0001FE4C                            
0001FE4C                            loc_1C8FE:
0001FE4C 4A44                       		tst.w	d4
0001FE4E 6700                       		beq.s	loc_1C92C
0001FE50 ED4A                       		lsl.w	#6,d2
0001FE52 2D40 0004                  		move.l	d0,4(a6)
0001FE56 47F1 2000                  		lea	(a1,d2.w),a3
0001FE5A 2C9B                       		move.l	(a3)+,(a6)
0001FE5C 2C9B                       		move.l	(a3)+,(a6)
0001FE5E 2C9B                       		move.l	(a3)+,(a6)
0001FE60 2C9B                       		move.l	(a3)+,(a6)
0001FE62 2C9B                       		move.l	(a3)+,(a6)
0001FE64 2C9B                       		move.l	(a3)+,(a6)
0001FE66 2C9B                       		move.l	(a3)+,(a6)
0001FE68 2C9B                       		move.l	(a3)+,(a6)
0001FE6A 2C9B                       		move.l	(a3)+,(a6)
0001FE6C 2C9B                       		move.l	(a3)+,(a6)
0001FE6E 2C9B                       		move.l	(a3)+,(a6)
0001FE70 2C9B                       		move.l	(a3)+,(a6)
0001FE72 2C9B                       		move.l	(a3)+,(a6)
0001FE74 2C9B                       		move.l	(a3)+,(a6)
0001FE76 2C9B                       		move.l	(a3)+,(a6)
0001FE78 2C9B                       		move.l	(a3)+,(a6)
0001FE7A                            
0001FE7A                            loc_1C92C:
0001FE7A 0680 0040 0000             		addi.l	#$400000,d0
0001FE80 51CE FFB4                  		dbf	d6,Hud_ScoreLoop
0001FE84                            
0001FE84 4E75                       		rts	
0001FE86                            
0001FE86                            ; End of function Hud_Score
0001FE86                            ; End of function Hud_Score
0001FE86                            
0001FE86                            ; ---------------------------------------------------------------------------
0001FE86                            ; Subroutine to	load countdown numbers on the continue screen
0001FE86                            ; ---------------------------------------------------------------------------
0001FE86                            
0001FE86                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001FE86                            
0001FE86                            
0001FE86                            ContScrCounter:
0001FE90 4DF9 00C0 0000             		lea	(vdp_data_port).l,a6
0001FE96 45F9 0000 0000             		lea	(Hud_10).l,a2
0001FE9C 7C01                       		moveq	#1,d6
0001FE9E 7800                       		moveq	#0,d4
0001FEA0 43FA 0000                  		lea	Art_Hud(pc),a1 ; load numbers patterns
0001FEA4                            
0001FEA4                            ContScr_Loop:
0001FEA4 7400                       		moveq	#0,d2
0001FEA6 261A                       		move.l	(a2)+,d3
0001FEA8                            
0001FEA8                            loc_1C95A:
0001FEA8 9283                       		sub.l	d3,d1
0001FEAA 6500                       		blo.s	loc_1C962
0001FEAC 5242                       		addq.w	#1,d2
0001FEAE 60F8                       		bra.s	loc_1C95A
0001FEB0                            ; ===========================================================================
0001FEB0                            
0001FEB0                            loc_1C962:
0001FEB0 D283                       		add.l	d3,d1
0001FEB2 ED4A                       		lsl.w	#6,d2
0001FEB4 47F1 2000                  		lea	(a1,d2.w),a3
0001FEB8 2C9B                       		move.l	(a3)+,(a6)
0001FEBA 2C9B                       		move.l	(a3)+,(a6)
0001FEBC 2C9B                       		move.l	(a3)+,(a6)
0001FEBE 2C9B                       		move.l	(a3)+,(a6)
0001FEC0 2C9B                       		move.l	(a3)+,(a6)
0001FEC2 2C9B                       		move.l	(a3)+,(a6)
0001FEC4 2C9B                       		move.l	(a3)+,(a6)
0001FEC6 2C9B                       		move.l	(a3)+,(a6)
0001FEC8 2C9B                       		move.l	(a3)+,(a6)
0001FECA 2C9B                       		move.l	(a3)+,(a6)
0001FECC 2C9B                       		move.l	(a3)+,(a6)
0001FECE 2C9B                       		move.l	(a3)+,(a6)
0001FED0 2C9B                       		move.l	(a3)+,(a6)
0001FED2 2C9B                       		move.l	(a3)+,(a6)
0001FED4 2C9B                       		move.l	(a3)+,(a6)
0001FED6 2C9B                       		move.l	(a3)+,(a6)
0001FED8 51CE FFCA                  		dbf	d6,ContScr_Loop	; repeat 1 more	time
0001FEDC                            
0001FEDC 4E75                       		rts	
0001FEDE                            ; End of function ContScrCounter
0001FEDE                            
0001FEDE                            ; ===========================================================================
0001FEDE                            
0001FEDE                            		include	"_inc\HUD (part 2).asm"
0001FEDE                            ; ---------------------------------------------------------------------------
0001FEDE                            ; HUD counter sizes
0001FEDE                            ; ---------------------------------------------------------------------------
0001FEDE 0001 86A0                  Hud_100000:	dc.l 100000
0001FEE2 0000 2710                  Hud_10000:	dc.l 10000
0001FEE6 0000 03E8                  Hud_1000:	dc.l 1000
0001FEEA 0000 0064                  Hud_100:	dc.l 100
0001FEEE 0000 000A                  Hud_10:		dc.l 10
0001FEF2 0000 0001                  Hud_1:		dc.l 1
0001FEF6                            
0001FEF6                            ; ---------------------------------------------------------------------------
0001FEF6                            ; Subroutine to	load time numbers patterns
0001FEF6                            ; ---------------------------------------------------------------------------
0001FEF6                            
0001FEF6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001FEF6                            
0001FEF6                            
0001FEF6                            Hud_Mins:
0001FEF6 45F9 0001 FEF2             		lea	(Hud_1).l,a2
0001FEFC 7C00                       		moveq	#0,d6
0001FEFE 6000                       		bra.s	loc_1C9BA
0001FF00                            ; End of function Hud_Mins
0001FF00                            
0001FF00                            
0001FF00                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001FF00                            
0001FF00                            
0001FF00                            Hud_Secs:
0001FF00 45F9 0001 FEEE             		lea	(Hud_10).l,a2
0001FF06 7C01                       		moveq	#1,d6
0001FF08                            
0001FF08                            loc_1C9BA:
0001FF08 7800                       		moveq	#0,d4
0001FF0A 43FA 0000                  		lea	Art_Hud(pc),a1
0001FF0E                            
0001FF0E                            Hud_TimeLoop:
0001FF0E 7400                       		moveq	#0,d2
0001FF10 261A                       		move.l	(a2)+,d3
0001FF12                            
0001FF12                            loc_1C9C4:
0001FF12 9283                       		sub.l	d3,d1
0001FF14 6500                       		bcs.s	loc_1C9CC
0001FF16 5242                       		addq.w	#1,d2
0001FF18 60F8                       		bra.s	loc_1C9C4
0001FF1A                            ; ===========================================================================
0001FF1A                            
0001FF1A                            loc_1C9CC:
0001FF1A D283                       		add.l	d3,d1
0001FF1C 4A42                       		tst.w	d2
0001FF1E 6700                       		beq.s	loc_1C9D6
0001FF20 383C 0001                  		move.w	#1,d4
0001FF24                            
0001FF24                            loc_1C9D6:
0001FF24 ED4A                       		lsl.w	#6,d2
0001FF26 2D40 0004                  		move.l	d0,4(a6)
0001FF2A 47F1 2000                  		lea	(a1,d2.w),a3
0001FF2E 2C9B                       		move.l	(a3)+,(a6)
0001FF30 2C9B                       		move.l	(a3)+,(a6)
0001FF32 2C9B                       		move.l	(a3)+,(a6)
0001FF34 2C9B                       		move.l	(a3)+,(a6)
0001FF36 2C9B                       		move.l	(a3)+,(a6)
0001FF38 2C9B                       		move.l	(a3)+,(a6)
0001FF3A 2C9B                       		move.l	(a3)+,(a6)
0001FF3C 2C9B                       		move.l	(a3)+,(a6)
0001FF3E 2C9B                       		move.l	(a3)+,(a6)
0001FF40 2C9B                       		move.l	(a3)+,(a6)
0001FF42 2C9B                       		move.l	(a3)+,(a6)
0001FF44 2C9B                       		move.l	(a3)+,(a6)
0001FF46 2C9B                       		move.l	(a3)+,(a6)
0001FF48 2C9B                       		move.l	(a3)+,(a6)
0001FF4A 2C9B                       		move.l	(a3)+,(a6)
0001FF4C 2C9B                       		move.l	(a3)+,(a6)
0001FF4E 0680 0040 0000             		addi.l	#$400000,d0
0001FF54 51CE FFB8                  		dbf	d6,Hud_TimeLoop
0001FF58                            
0001FF58 4E75                       		rts	
0001FF5A                            ; End of function Hud_Secs
0001FF5A                            
0001FF5A                            ; ---------------------------------------------------------------------------
0001FF5A                            ; Subroutine to	load time/ring bonus numbers patterns
0001FF5A                            ; ---------------------------------------------------------------------------
0001FF5A                            
0001FF5A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001FF5A                            
0001FF5A                            
0001FF5A                            Hud_TimeRingBonus:
0001FF5A 45F9 0001 FEE6             		lea	(Hud_1000).l,a2
0001FF60 7C03                       		moveq	#3,d6
0001FF62 7800                       		moveq	#0,d4
0001FF64 43FA 0000                  		lea	Art_Hud(pc),a1
0001FF68                            
0001FF68                            Hud_BonusLoop:
0001FF68 7400                       		moveq	#0,d2
0001FF6A 261A                       		move.l	(a2)+,d3
0001FF6C                            
0001FF6C                            loc_1CA1E:
0001FF6C 9283                       		sub.l	d3,d1
0001FF6E 6500                       		bcs.s	loc_1CA26
0001FF70 5242                       		addq.w	#1,d2
0001FF72 60F8                       		bra.s	loc_1CA1E
0001FF74                            ; ===========================================================================
0001FF74                            
0001FF74                            loc_1CA26:
0001FF74 D283                       		add.l	d3,d1
0001FF76 4A42                       		tst.w	d2
0001FF78 6700                       		beq.s	loc_1CA30
0001FF7A 383C 0001                  		move.w	#1,d4
0001FF7E                            
0001FF7E                            loc_1CA30:
0001FF7E 4A44                       		tst.w	d4
0001FF80 6700                       		beq.s	Hud_ClrBonus
0001FF82 ED4A                       		lsl.w	#6,d2
0001FF84 47F1 2000                  		lea	(a1,d2.w),a3
0001FF88 2C9B                       		move.l	(a3)+,(a6)
0001FF8A 2C9B                       		move.l	(a3)+,(a6)
0001FF8C 2C9B                       		move.l	(a3)+,(a6)
0001FF8E 2C9B                       		move.l	(a3)+,(a6)
0001FF90 2C9B                       		move.l	(a3)+,(a6)
0001FF92 2C9B                       		move.l	(a3)+,(a6)
0001FF94 2C9B                       		move.l	(a3)+,(a6)
0001FF96 2C9B                       		move.l	(a3)+,(a6)
0001FF98 2C9B                       		move.l	(a3)+,(a6)
0001FF9A 2C9B                       		move.l	(a3)+,(a6)
0001FF9C 2C9B                       		move.l	(a3)+,(a6)
0001FF9E 2C9B                       		move.l	(a3)+,(a6)
0001FFA0 2C9B                       		move.l	(a3)+,(a6)
0001FFA2 2C9B                       		move.l	(a3)+,(a6)
0001FFA4 2C9B                       		move.l	(a3)+,(a6)
0001FFA6 2C9B                       		move.l	(a3)+,(a6)
0001FFA8                            
0001FFA8                            loc_1CA5A:
0001FFA8 51CE FFBE                  		dbf	d6,Hud_BonusLoop ; repeat 3 more times
0001FFAC                            
0001FFAC 4E75                       		rts	
0001FFAE                            ; ===========================================================================
0001FFAE                            
0001FFAE                            Hud_ClrBonus:
0001FFAE 7A0F                       		moveq	#$F,d5
0001FFB0                            
0001FFB0                            Hud_ClrBonusLoop:
0001FFB0 2CBC 0000 0000             		move.l	#0,(a6)
0001FFB6 51CD FFF8                  		dbf	d5,Hud_ClrBonusLoop
0001FFBA                            
0001FFBA 60EC                       		bra.s	loc_1CA5A
0001FFBC                            ; End of function Hud_TimeRingBonus
0001FFBC                            
0001FFBC                            ; ---------------------------------------------------------------------------
0001FFBC                            ; Subroutine to	load uncompressed lives	counter	patterns
0001FFBC                            ; ---------------------------------------------------------------------------
0001FFBC                            
0001FFBC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001FFBC                            
0001FFBC                            
0001FFBC                            Hud_Lives:
0001FFBC 203C 7BA0 0003             		hudVRAM	$FBA0		; set VRAM address
0001FFC2 7200                       		moveq	#0,d1
0001FFC4 1238 FE12                  		move.b	(v_lives).w,d1	; load number of lives
0001FFC8 45F9 0001 FEEE             		lea	(Hud_10).l,a2
0001FFCE 7C01                       		moveq	#1,d6
0001FFD0 7800                       		moveq	#0,d4
0001FFD2 43FA 0000                  		lea	Art_LivesNums(pc),a1
0001FFD6                            
0001FFD6                            Hud_LivesLoop:
0001FFD6 2D40 0004                  		move.l	d0,4(a6)
0001FFDA 7400                       		moveq	#0,d2
0001FFDC 261A                       		move.l	(a2)+,d3
0001FFDE                            
0001FFDE                            loc_1CA90:
0001FFDE 9283                       		sub.l	d3,d1
0001FFE0 6500                       		bcs.s	loc_1CA98
0001FFE2 5242                       		addq.w	#1,d2
0001FFE4 60F8                       		bra.s	loc_1CA90
0001FFE6                            ; ===========================================================================
0001FFE6                            
0001FFE6                            loc_1CA98:
0001FFE6 D283                       		add.l	d3,d1
0001FFE8 4A42                       		tst.w	d2
0001FFEA 6700                       		beq.s	loc_1CAA2
0001FFEC 383C 0001                  		move.w	#1,d4
0001FFF0                            
0001FFF0                            loc_1CAA2:
0001FFF0 4A44                       		tst.w	d4
0001FFF2 6700                       		beq.s	Hud_ClrLives
0001FFF4                            
0001FFF4                            loc_1CAA6:
0001FFF4 EB4A                       		lsl.w	#5,d2
0001FFF6 47F1 2000                  		lea	(a1,d2.w),a3
0001FFFA 2C9B                       		move.l	(a3)+,(a6)
0001FFFC 2C9B                       		move.l	(a3)+,(a6)
0001FFFE 2C9B                       		move.l	(a3)+,(a6)
00020000 2C9B                       		move.l	(a3)+,(a6)
00020002 2C9B                       		move.l	(a3)+,(a6)
00020004 2C9B                       		move.l	(a3)+,(a6)
00020006 2C9B                       		move.l	(a3)+,(a6)
00020008 2C9B                       		move.l	(a3)+,(a6)
0002000A                            
0002000A                            loc_1CABC:
0002000A 0680 0040 0000             		addi.l	#$400000,d0
00020010 51CE FFC4                  		dbf	d6,Hud_LivesLoop ; repeat 1 more time
00020014                            
00020014 4E75                       		rts	
00020016                            ; ===========================================================================
00020016                            
00020016                            Hud_ClrLives:
00020016 4A46                       		tst.w	d6
00020018 67DA                       		beq.s	loc_1CAA6
0002001A 7A07                       		moveq	#7,d5
0002001C                            
0002001C                            Hud_ClrLivesLoop:
0002001C 2CBC 0000 0000             		move.l	#0,(a6)
00020022 51CD FFF8                  		dbf	d5,Hud_ClrLivesLoop
00020026 60E2                       		bra.s	loc_1CABC
00020028                            ; End of function Hud_Lives
00020028                            ; End of function Hud_Lives
00020028                            
00020028                            Art_Hud:	incbin	"artunc\HUD Numbers.bin" ; 8x16 pixel numbers on HUD
00020328                            		even
00020328                            Art_LivesNums:	incbin	"artunc\Lives Counter Numbers.bin" ; 8x8 pixel numbers on lives counter
00020468                            		even
00020468                            
00020468                            		include	"_incObj\DebugMode.asm"
00020468                            ; ---------------------------------------------------------------------------
00020468                            ; When debug mode is currently in use
00020468                            ; ---------------------------------------------------------------------------
00020468                            
00020468                            DebugMode:
00020468 7000                       		moveq	#0,d0
0002046A 1038 FE08                  		move.b	(v_debuguse).w,d0
0002046E 323B 0000                  		move.w	Debug_Index(pc,d0.w),d1
00020472 4EFB 1000                  		jmp	Debug_Index(pc,d1.w)
00020476                            ; ===========================================================================
00020476 0000                       Debug_Index:	dc.w Debug_Main-Debug_Index
00020478 0000                       		dc.w Debug_Action-Debug_Index
0002047A                            ; ===========================================================================
0002047A                            
0002047A                            Debug_Main:	; Routine 0
0002047A 5438 FE08                  		addq.b	#2,(v_debuguse).w
0002047E 31F8 F72C FEF0             		move.w	(v_limittop2).w,(v_limittopdb).w ; buffer level x-boundary
00020484 31F8 F726 FEF2             		move.w	(v_limitbtm1).w,(v_limitbtmdb).w ; buffer level y-boundary
0002048A 31FC 0000 F72C             		move.w	#0,(v_limittop2).w
00020490 31FC 0720 F726             		move.w	#$720,(v_limitbtm1).w
00020496 0278 07FF D00C             		andi.w	#$7FF,(v_player+obY).w
0002049C 0278 07FF F704             		andi.w	#$7FF,(v_screenposy).w
000204A2 0278 03FF F70C             		andi.w	#$3FF,(v_bgscreenposy).w
000204A8 117C 0000 001A             		move.b	#0,obFrame(a0)
000204AE 117C 0000 001C             		move.b	#id_Walk,obAnim(a0)
000204B4 0C38 0000 F600             		cmpi.b	#id_Special,(v_gamemode).w ; is game mode $10 (special stage)?
000204BA 6600                       		bne.s	@islevel	; if not, branch
000204BC                            
000204BC 31FC 0000 F782             		move.w	#0,(v_ssrotate).w ; stop special stage rotating
000204C2 31FC 0000 F780             		move.w	#0,(v_ssangle).w ; make	special	stage "upright"
000204C8 7006                       		moveq	#6,d0		; use 6th debug	item list
000204CA 6000                       		bra.s	@selectlist
000204CC                            ; ===========================================================================
000204CC                            
000204CC                            @islevel:
000204CC 7000                       		moveq	#0,d0
000204CE 1038 FE10                  		move.b	(v_zone).w,d0
000204D2                            
000204D2                            @selectlist:
000204D2 45F9 0000 0000             		lea	(DebugList).l,a2
000204D8 D040                       		add.w	d0,d0
000204DA D4F2 0000                  		adda.w	(a2,d0.w),a2
000204DE 3C1A                       		move.w	(a2)+,d6
000204E0 BC38 FE06                  		cmp.b	(v_debugitem).w,d6 ; have you gone past the last item?
000204E4 6200                       		bhi.s	@noreset	; if not, branch
000204E6 11FC 0000 FE06             		move.b	#0,(v_debugitem).w ; back to start of list
000204EC                            
000204EC                            	@noreset:
000204EC 6100 0000                  		bsr.w	Debug_ShowItem
000204F0 11FC 000C FE0A             		move.b	#12,(v_debugxspeed).w
000204F6 11FC 0001 FE0B             		move.b	#1,(v_debugyspeed).w
000204FC                            
000204FC                            Debug_Action:	; Routine 2
000204FC 7006                       		moveq	#6,d0
000204FE 0C38 0000 F600             		cmpi.b	#id_Special,(v_gamemode).w
00020504 6700                       		beq.s	@isntlevel
00020506                            
00020506 7000                       		moveq	#0,d0
00020508 1038 FE10                  		move.b	(v_zone).w,d0
0002050C                            
0002050C                            	@isntlevel:
0002050C 45F9 0000 0000             		lea	(DebugList).l,a2
00020512 D040                       		add.w	d0,d0
00020514 D4F2 0000                  		adda.w	(a2,d0.w),a2
00020518 3C1A                       		move.w	(a2)+,d6
0002051A 6100 0000                  		bsr.w	Debug_Control
0002051E 4EF9 0000 F97C             		jmp	(DisplaySprite).l
00020524                            
00020524                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00020524                            
00020524                            
00020524                            Debug_Control:
00020524 7800                       		moveq	#0,d4
00020526 323C 0001                  		move.w	#1,d1
0002052A 1838 F605                  		move.b	(v_jpadpress1).w,d4
0002052E 0244 000F                  		andi.w	#btnDir,d4	; is up/down/left/right	pressed?
00020532 6600                       		bne.s	@dirpressed	; if yes, branch
00020534                            
00020534 1038 F604                  		move.b	(v_jpadhold1).w,d0
00020538 0240 000F                  		andi.w	#btnDir,d0	; is up/down/left/right	held?
0002053C 6600                       		bne.s	@dirheld	; if yes, branch
0002053E                            
0002053E 11FC 000C FE0A             		move.b	#12,(v_debugxspeed).w
00020544 11FC 000F FE0B             		move.b	#15,(v_debugyspeed).w
0002054A 6000 0000                  		bra.w	Debug_ChgItem
0002054E                            ; ===========================================================================
0002054E                            
0002054E                            @dirheld:
0002054E 5338 FE0A                  		subq.b	#1,(v_debugxspeed).w
00020552 6600                       		bne.s	loc_1D01C
00020554 11FC 0001 FE0A             		move.b	#1,(v_debugxspeed).w
0002055A 5238 FE0B                  		addq.b	#1,(v_debugyspeed).w
0002055E 6600                       		bne.s	@dirpressed
00020560 11FC 00FF FE0B             		move.b	#-1,(v_debugyspeed).w
00020566                            
00020566                            @dirpressed:
00020566 1838 F604                  		move.b	(v_jpadhold1).w,d4
0002056A                            
0002056A                            loc_1D01C:
0002056A 7200                       		moveq	#0,d1
0002056C 1238 FE0B                  		move.b	(v_debugyspeed).w,d1
00020570 5241                       		addq.w	#1,d1
00020572 4841                       		swap	d1
00020574 E881                       		asr.l	#4,d1
00020576 2428 000C                  		move.l	obY(a0),d2
0002057A 2628 0008                  		move.l	obX(a0),d3
0002057E 0804 0000                  		btst	#bitUp,d4	; is up	being pressed?
00020582 6700                       		beq.s	loc_1D03C	; if not, branch
00020584 9481                       		sub.l	d1,d2
00020586 6400                       		bcc.s	loc_1D03C
00020588 7400                       		moveq	#0,d2
0002058A                            
0002058A                            loc_1D03C:
0002058A 0804 0001                  		btst	#bitDn,d4	; is down being	pressed?
0002058E 6700                       		beq.s	loc_1D052	; if not, branch
00020590 D481                       		add.l	d1,d2
00020592 0C82 07FF 0000             		cmpi.l	#$7FF0000,d2
00020598 6500                       		bcs.s	loc_1D052
0002059A 243C 07FF 0000             		move.l	#$7FF0000,d2
000205A0                            
000205A0                            loc_1D052:
000205A0 0804 0002                  		btst	#bitL,d4
000205A4 6700                       		beq.s	loc_1D05E
000205A6 9681                       		sub.l	d1,d3
000205A8 6400                       		bcc.s	loc_1D05E
000205AA 7600                       		moveq	#0,d3
000205AC                            
000205AC                            loc_1D05E:
000205AC 0804 0003                  		btst	#bitR,d4
000205B0 6700                       		beq.s	loc_1D066
000205B2 D681                       		add.l	d1,d3
000205B4                            
000205B4                            loc_1D066:
000205B4 2142 000C                  		move.l	d2,obY(a0)
000205B8 2143 0008                  		move.l	d3,obX(a0)
000205BC                            
000205BC                            Debug_ChgItem:
000205BC 0838 0006 F604             		btst	#bitA,(v_jpadhold1).w ; is button A pressed?
000205C2 6700                       		beq.s	@createitem	; if not, branch
000205C4 0838 0005 F605             		btst	#bitC,(v_jpadpress1).w ; is button C pressed?
000205CA 6700                       		beq.s	@nextitem	; if not, branch
000205CC 5338 FE06                  		subq.b	#1,(v_debugitem).w ; go back 1 item
000205D0 6400                       		bcc.s	@display
000205D2 DD38 FE06                  		add.b	d6,(v_debugitem).w
000205D6 6000                       		bra.s	@display
000205D8                            ; ===========================================================================
000205D8                            
000205D8                            @nextitem:
000205D8 0838 0006 F605             		btst	#bitA,(v_jpadpress1).w ; is button A pressed?
000205DE 6700                       		beq.s	@createitem	; if not, branch
000205E0 5238 FE06                  		addq.b	#1,(v_debugitem).w ; go forwards 1 item
000205E4 BC38 FE06                  		cmp.b	(v_debugitem).w,d6
000205E8 6200                       		bhi.s	@display
000205EA 11FC 0000 FE06             		move.b	#0,(v_debugitem).w ; loop back to first item
000205F0                            
000205F0                            	@display:
000205F0 6000 0000                  		bra.w	Debug_ShowItem
000205F4                            ; ===========================================================================
000205F4                            
000205F4                            @createitem:
000205F4 0838 0005 F605             		btst	#bitC,(v_jpadpress1).w ; is button C pressed?
000205FA 6700                       		beq.s	@backtonormal	; if not, branch
000205FC 4EB9 0000 FE08             		jsr	(FindFreeObj).l
00020602 6600                       		bne.s	@backtonormal
00020604 3368 0008 0008             		move.w	obX(a0),obX(a1)
0002060A 3368 000C 000C             		move.w	obY(a0),obY(a1)
00020610 12A8 0004                  		move.b	4(a0),0(a1)	; create object
00020614 1368 0001 0001             		move.b	obRender(a0),obRender(a1)
0002061A 1368 0001 0022             		move.b	obRender(a0),obStatus(a1)
00020620 0229 007F 0022             		andi.b	#$7F,obStatus(a1)
00020626 7000                       		moveq	#0,d0
00020628 1038 FE06                  		move.b	(v_debugitem).w,d0
0002062C E748                       		lsl.w	#3,d0
0002062E 1372 0004 0028             		move.b	4(a2,d0.w),obSubtype(a1)
00020634 4E75                       		rts	
00020636                            ; ===========================================================================
00020636                            
00020636                            @backtonormal:
00020636 0838 0004 F605             		btst	#bitB,(v_jpadpress1).w ; is button B pressed?
0002063C 6700                       		beq.s	@stayindebug	; if not, branch
0002063E 7000                       		moveq	#0,d0
00020640 31C0 FE08                  		move.w	d0,(v_debuguse).w ; deactivate debug mode
00020644 21FC 0000 0000 D004        		move.l	#Map_Sonic,(v_player+obMap).w
0002064C 31FC 0780 D002             		move.w	#$780,(v_player+obGfx).w
00020652 11C0 D01C                  		move.b	d0,(v_player+obAnim).w
00020656 3140 000A                  		move.w	d0,obX+2(a0)
0002065A 3140 000E                  		move.w	d0,obY+2(a0)
0002065E 31F8 FEF0 F72C             		move.w	(v_limittopdb).w,(v_limittop2).w ; restore level boundaries
00020664 31F8 FEF2 F726             		move.w	(v_limitbtmdb).w,(v_limitbtm1).w
0002066A 0C38 0000 F600             		cmpi.b	#id_Special,(v_gamemode).w ; are you in the special stage?
00020670 6600                       		bne.s	@stayindebug	; if not, branch
00020672                            
00020672 4278 F780                  		clr.w	(v_ssangle).w
00020676 31FC 0040 F782             		move.w	#$40,(v_ssrotate).w ; set new level rotation speed
0002067C 21FC 0000 0000 D004        		move.l	#Map_Sonic,(v_player+obMap).w
00020684 31FC 0780 D002             		move.w	#$780,(v_player+obGfx).w
0002068A 11FC 0002 D01C             		move.b	#id_Roll,(v_player+obAnim).w
00020690 08F8 0002 D022             		bset	#2,(v_player+obStatus).w
00020696 08F8 0001 D022             		bset	#1,(v_player+obStatus).w
0002069C                            
0002069C                            	@stayindebug:
0002069C 4E75                       		rts	
0002069E                            ; End of function Debug_Control
0002069E                            
0002069E                            
0002069E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0002069E                            
0002069E                            
0002069E                            Debug_ShowItem:
0002069E 7000                       		moveq	#0,d0
000206A0 1038 FE06                  		move.b	(v_debugitem).w,d0
000206A4 E748                       		lsl.w	#3,d0
000206A6 2172 0000 0004             		move.l	(a2,d0.w),obMap(a0) ; load mappings for item
000206AC 3172 0006 0002             		move.w	6(a2,d0.w),obGfx(a0) ; load VRAM setting for item
000206B2 1172 0005 001A             		move.b	5(a2,d0.w),obFrame(a0) ; load frame number for item
000206B8 4E75                       		rts	
000206BA                            ; End of function Debug_ShowItem
000206BA                            ; End of function Debug_ShowItem
000206BA                            		include	"_inc\DebugList.asm"
000206BA                            ; ---------------------------------------------------------------------------
000206BA                            ; Debug	mode item lists
000206BA                            ; ---------------------------------------------------------------------------
000206BA                            DebugList:
000206BA 0000                       	dc.w @GHZ-DebugList
000206BC 0000                       	dc.w @LZ-DebugList
000206BE 0000                       	dc.w @MZ-DebugList
000206C0 0000                       	dc.w @SLZ-DebugList
000206C2 0000                       	dc.w @SYZ-DebugList
000206C4 0000                       	dc.w @SBZ-DebugList
000206C6 0000                       	dc.w @Ending-DebugList
000206C8                            
000206C8                            dbug:	macro map,object,subtype,frame,vram
000206C8                            	dc.l map+(object<<24)
000206C8                            	dc.b subtype,frame
000206C8                            	dc.w vram
000206C8                            	endm
000206C8                            
000206C8                            @GHZ:
000206C8 0000                       	dc.w (@GHZend-@GHZ-2)/8
000206CA                            
000206CA                            ;		mappings	object		subtype	frame	VRAM setting
000206CA 2500 BFD8 0000 27B2        	dbug 	Map_Ring,	id_Rings,	0,	0,	$27B2
000206D2 2600 C79E 0000 0680        	dbug	Map_Monitor,	id_Monitor,	0,	0,	$680
000206DA 1F00 B3B8 0000 0400        	dbug	Map_Crab,	id_Crabmeat,	0,	0,	$400
000206E2 2200 B842 0000 0444        	dbug	Map_Buzz,	id_BuzzBomber,	0,	0,	$444
000206EA 2B00 CEDA 0000 047B        	dbug	Map_Chop,	id_Chopper,	0,	0,	$47B
000206F2 3600 F326 0000 051B        	dbug	Map_Spike,	id_Spikes,	0,	0,	$51B
000206FA 1800 9D72 0000 4000        	dbug	Map_Plat_GHZ,	id_BasicPlatform, 0,	0,	$4000
00020702 3B00 F44C 0000 63D0        	dbug	Map_PRock,	id_PurpleRock,	0,	0,	$63D0
0002070A 4001 19E4 0000 04F0        	dbug	Map_Moto,	id_MotoBug,	0,	0,	$4F0
00020712 4101 009A 0000 0523        	dbug	Map_Spring,	id_Springs,	0,	0,	$523
0002071A 4201 02C0 0000 249B        	dbug	Map_Newt,	id_Newtron,	0,	0,	$249B
00020722 4401 05CE 0000 434C        	dbug	Map_Edge,	id_EdgeWalls,	0,	0,	$434C
0002072A 7901 A222 0100 07A0        	dbug	Map_Lamp,	id_Lamppost,	1,	0,	$7A0
00020732 4B00 C028 0000 2400        	dbug	Map_GRing,	id_GiantRing,	0,	0,	$2400
0002073A 7D01 A3E4 0101 84B6        	dbug	Map_Bonus,	id_HiddenBonus,	1,	1,	$84B6
00020742                            	@GHZend:
00020742                            
00020742                            @LZ:
00020742 0000                       	dc.w (@LZend-@LZ-2)/8
00020744                            
00020744                            ;		mappings	object		subtype	frame	VRAM setting
00020744 2500 BFD8 0000 27B2        	dbug	Map_Ring,	id_Rings,	0,	0,	$27B2
0002074C 2600 C79E 0000 0680        	dbug	Map_Monitor,	id_Monitor,	0,	0,	$680
00020754 4101 009A 0000 0523        	dbug	Map_Spring,	id_Springs,	0,	0,	$523
0002075C 2C00 CF80 0800 2486        	dbug	Map_Jaws,	id_Jaws,	8,	0,	$2486
00020764 2D00 D16C 0002 84A6        	dbug	Map_Burro,	id_Burrobot,	0,	2,	$84A6
0002076C 1601 4398 0000 03CC        	dbug	Map_Harp,	id_Harpoon,	0,	0,	$3CC
00020774 1601 4398 0203 03CC        	dbug	Map_Harp,	id_Harpoon,	2,	3,	$3CC
0002077C 3300 E5EA 0000 43DE        	dbug	Map_Push,	id_PushBlock,	0,	0,	$43DE
00020784 3200 E1AA 0000 0513        	dbug	Map_But,	id_Button,	0,	0,	$513
0002078C 3600 F326 0000 051B        	dbug	Map_Spike,	id_Spikes,	0,	0,	$51B
00020794 5201 246E 0400 43BC        	dbug	Map_MBlockLZ,	id_MovingBlock,	4,	0,	$43BC
0002079C 6101 45C0 0100 43E6        	dbug	Map_LBlock,	id_LabyrinthBlock, 1,	0,	$43E6
000207A4 6101 45C0 1301 43E6        	dbug	Map_LBlock,	id_LabyrinthBlock, $13,	1,	$43E6
000207AC 6101 45C0 0500 43E6        	dbug	Map_LBlock,	id_LabyrinthBlock, 5,	0,	$43E6
000207B4 6201 4714 0000 443E        	dbug	Map_Gar,	id_Gargoyle,	0,	0,	$443E
000207BC 6101 45C0 2702 43E6        	dbug	Map_LBlock,	id_LabyrinthBlock, $27,	2,	$43E6
000207C4 6101 45C0 3003 43E6        	dbug	Map_LBlock,	id_LabyrinthBlock, $30,	3,	$43E6
000207CC 6301 4A76 7F00 03F6        	dbug	Map_LConv,	id_LabyrinthConvey, $7F, 0,	$3F6
000207D4 6001 42E2 0000 0467        	dbug	Map_Orb,	id_Orbinaut,	0,	0,	$467
000207DC 6401 4DC4 8413 8348        	dbug	Map_Bub,	id_Bubble,	$84,	$13,	$8348
000207E4 6501 4F4C 0202 C259        	dbug	Map_WFall,	id_Waterfall,	2,	2,	$C259
000207EC 6501 4F4C 0909 C259        	dbug	Map_WFall,	id_Waterfall,	9,	9,	$C259
000207F4 0B01 372E 0000 43DE        	dbug	Map_Pole,	id_Pole,	0,	0,	$43DE
000207FC 0C01 37FE 0200 4328        	dbug	Map_Flap,	id_FlapDoor,	2,	0,	$4328
00020804 7901 A222 0100 07A0        	dbug	Map_Lamp,	id_Lamppost,	1,	0,	$7A0
0002080C                            	@LZend:
0002080C                            
0002080C                            @MZ:
0002080C 0000                       	dc.w (@MZend-@MZ-2)/8
0002080E                            
0002080E                            ;		mappings	object		subtype	frame	VRAM setting
0002080E 2500 BFD8 0000 27B2        	dbug	Map_Ring,	id_Rings,	0,	0,	$27B2
00020816 2600 C79E 0000 0680        	dbug	Map_Monitor,	id_Monitor,	0,	0,	$680
0002081E 2200 B842 0000 0444        	dbug	Map_Buzz,	id_BuzzBomber,	0,	0,	$444
00020826 3600 F326 0000 051B        	dbug	Map_Spike,	id_Spikes,	0,	0,	$51B
0002082E 4101 009A 0000 0523        	dbug	Map_Spring,	id_Springs,	0,	0,	$523
00020836 1300 D67A 0000 0345        	dbug	Map_Fire,	id_LavaMaker,	0,	0,	$345
0002083E 4601 0C7E 0000 4000        	dbug	Map_Brick,	id_MarbleBrick,	0,	0,	$4000
00020846 6E01 92BE 0400 047E        	dbug	Map_Elec,	id_Electro,	4,	0,	$47E
0002084E 6A01 8C76 0200 43B5        	dbug	Map_Saw,	id_Saws,	2,	0,	$43B5
00020856 3300 E5EA 0000 42B8        	dbug	Map_Push,	id_PushBlock,	0,	0,	$42B8
0002085E 1E00 AAD0 0400 2302        	dbug	Map_Hog,	id_BallHog,	4,	0,	$2302
00020866 5101 21A2 0000 42B8        	dbug	Map_Smab,	id_SmashBlock,	0,	0,	$42B8
0002086E 5201 2418 0000 02B8        	dbug	Map_MBlock,	id_MovingBlock,	0,	0,	$2B8
00020876 5300 A3B4 0000 62B8        	dbug	Map_CFlo,	id_CollapseFloor, 0,	0,	$62B8
0002087E 5401 154A 0000 8680        	dbug	Map_LTag,	id_LavaTag,	0,	0,	$8680
00020886 5501 260C 0000 04B8        	dbug	Map_Bas,	id_Basaran,	0,	0,	$4B8
0002088E 7801 9E8E 0000 24FF        	dbug	Map_Cat,	id_Caterkiller,	0,	0,	$24FF
00020896 7901 A222 0100 07A0        	dbug	Map_Lamp,	id_Lamppost,	1,	0,	$7A0
0002089E                            	@MZend:
0002089E                            
0002089E                            @SLZ:
0002089E 0000                       	dc.w (@SLZend-@SLZ-2)/8
000208A0                            
000208A0                            ;		mappings	object		subtype	frame	VRAM setting
000208A0 2500 BFD8 0000 27B2        	dbug	Map_Ring,	id_Rings,	0,	0,	$27B2
000208A8 2600 C79E 0000 0680        	dbug	Map_Monitor,	id_Monitor,	0,	0,	$680
000208B0 5901 3156 0000 4000        	dbug	Map_Elev,	id_Elevator,	0,	0,	$4000
000208B8 5300 A3B4 0002 44E0        	dbug	Map_CFlo,	id_CollapseFloor, 0,	2,	$44E0
000208C0 1800 9DD0 0000 4000        	dbug	Map_Plat_SLZ,	id_BasicPlatform, 0,	0,	$4000
000208C8 5A01 3290 0000 4000        	dbug	Map_Circ,	id_CirclingPlatform, 0,	0,	$4000
000208D0 5B01 3448 0000 4000        	dbug	Map_Stair,	id_Staircase,	0,	0,	$4000
000208D8 5D01 3A1C 0000 43A0        	dbug	Map_Fan,	id_Fan,		0,	0,	$43A0
000208E0 5E01 3DAE 0000 0374        	dbug	Map_Seesaw,	id_Seesaw,	0,	0,	$374
000208E8 4101 009A 0000 0523        	dbug	Map_Spring,	id_Springs,	0,	0,	$523
000208F0 1300 D67A 0000 0480        	dbug	Map_Fire,	id_LavaMaker,	0,	0,	$480
000208F8 1C00 A4D2 0000 44D8        	dbug	Map_Scen,	id_Scenery,	0,	0,	$44D8
00020900 5F01 402C 0000 0400        	dbug	Map_Bomb,	id_Bomb,	0,	0,	$400
00020908 6001 42E2 0000 2429        	dbug	Map_Orb,	id_Orbinaut,	0,	0,	$2429
00020910 7901 A222 0100 07A0        	dbug	Map_Lamp,	id_Lamppost,	1,	0,	$7A0
00020918                            	@SLZend:
00020918                            
00020918                            @SYZ:
00020918 0000                       	dc.w (@SYZend-@SYZ-2)/8
0002091A                            
0002091A                            ;		mappings	object		subtype	frame	VRAM setting
0002091A 2500 BFD8 0000 27B2        	dbug	Map_Ring,	id_Rings,	0,	0,	$27B2
00020922 2600 C79E 0000 0680        	dbug	Map_Monitor,	id_Monitor,	0,	0,	$680
0002092A 3600 F326 0000 051B        	dbug	Map_Spike,	id_Spikes,	0,	0,	$51B
00020932 4101 009A 0000 0523        	dbug	Map_Spring,	id_Springs,	0,	0,	$523
0002093A 4301 0520 0000 04B8        	dbug	Map_Roll,	id_Roller,	0,	0,	$4B8
00020942 1201 0CFC 0000 0000        	dbug	Map_Light,	id_SpinningLight, 0,	0,	0
0002094A 4701 0EA0 0000 0380        	dbug	Map_Bump,	id_Bumper,	0,	0,	$380
00020952 1F00 B3B8 0000 0400        	dbug	Map_Crab,	id_Crabmeat,	0,	0,	$400
0002095A 2200 B842 0000 0444        	dbug	Map_Buzz,	id_BuzzBomber,	0,	0,	$444
00020962 5001 1C74 0000 247B        	dbug	Map_Yad,	id_Yadrin,	0,	0,	$247B
0002096A 1800 9DBE 0000 4000        	dbug	Map_Plat_SYZ,	id_BasicPlatform, 0,	0,	$4000
00020972 5601 2B16 0000 4000        	dbug	Map_FBlock,	id_FloatingBlock, 0,	0,	$4000
0002097A 3200 E1AA 0000 0513        	dbug	Map_But,	id_Button,	0,	0,	$513
00020982 7801 9E8E 0000 24FF        	dbug	Map_Cat,	id_Caterkiller,	0,	0,	$24FF
0002098A 7901 A222 0100 07A0        	dbug	Map_Lamp,	id_Lamppost,	1,	0,	$7A0
00020992                            	@SYZend:
00020992                            
00020992                            @SBZ:
00020992 0000                       	dc.w (@SBZend-@SBZ-2)/8
00020994                            
00020994                            ;		mappings	object		subtype	frame	VRAM setting
00020994 2500 BFD8 0000 27B2        	dbug	Map_Ring,	id_Rings,	0,	0,	$27B2
0002099C 2600 C79E 0000 0680        	dbug	Map_Monitor,	id_Monitor,	0,	0,	$680
000209A4 5F01 402C 0000 0400        	dbug	Map_Bomb,	id_Bomb,	0,	0,	$400
000209AC 6001 42E2 0000 0429        	dbug	Map_Orb,	id_Orbinaut,	0,	0,	$429
000209B4 7801 9E8E 0000 22B0        	dbug	Map_Cat,	id_Caterkiller,	0,	0,	$22B0
000209BC 1501 2EB2 0702 4391        	dbug	Map_BBall,	id_SwingingPlatform, 7,	2,	$4391
000209C4 6701 8764 E000 C344        	dbug	Map_Disc,	id_RunningDisc,	$E0,	0,	$C344
000209CC 5201 2418 2802 22C0        	dbug	Map_MBlock,	id_MovingBlock,	$28,	2,	$22C0
000209D4 3200 E1AA 0000 0513        	dbug	Map_But,	id_Button,	0,	0,	$513
000209DC 6901 89BE 0300 4492        	dbug	Map_Trap,	id_SpinPlatform, 3,	0,	$4492
000209E4 6901 8A18 8300 04DF        	dbug	Map_Spin,	id_SpinPlatform, $83,	0,	$4DF
000209EC 6A01 8C76 0200 43B5        	dbug	Map_Saw,	id_Saws,	2,	0,	$43B5
000209F4 5300 A3B4 0000 43F5        	dbug	Map_CFlo,	id_CollapseFloor, 0,	0,	$43F5
000209FC 5201 2418 3903 4460        	dbug	Map_MBlock,	id_MovingBlock,	$39,	3,	$4460
00020A04 6B01 9046 0000 22C0        	dbug	Map_Stomp,	id_ScrapStomp,	0,	0,	$22C0
00020A0C 2A00 A662 0000 42E8        	dbug	Map_ADoor,	id_AutoDoor,	0,	0,	$42E8
00020A14 6B01 9046 1301 22C0        	dbug	Map_Stomp,	id_ScrapStomp,	$13,	1,	$22C0
00020A1C 6A01 8C76 0100 43B5        	dbug	Map_Saw,	id_Saws,	1,	0,	$43B5
00020A24 6B01 9046 2401 22C0        	dbug	Map_Stomp,	id_ScrapStomp,	$24,	1,	$22C0
00020A2C 6A01 8C76 0402 43B5        	dbug	Map_Saw,	id_Saws,	4,	2,	$43B5
00020A34 6B01 9046 3401 22C0        	dbug	Map_Stomp,	id_ScrapStomp,	$34,	1,	$22C0
00020A3C 6C01 9208 0000 44C3        	dbug	Map_VanP,	id_VanishPlatform, 0,	0,	$44C3
00020A44 6D01 0970 6400 83D9        	dbug	Map_Flame,	id_Flamethrower, $64,	0,	$83D9
00020A4C 6D01 0970 640B 83D9        	dbug	Map_Flame,	id_Flamethrower, $64,	$B,	$83D9
00020A54 6E01 92BE 0400 047E        	dbug	Map_Elec,	id_Electro,	4,	0,	$47E
00020A5C 7001 9704 0000 42F0        	dbug	Map_Gird,	id_Girder,	0,	0,	$42F0
00020A64 7101 38C2 1100 8680        	dbug	Map_Invis,	id_Invisibarrier, $11,	0,	$8680
00020A6C 1E00 AAD0 0400 2302        	dbug	Map_Hog,	id_BallHog,	4,	0,	$2302
00020A74 7901 A222 0100 07A0        	dbug	Map_Lamp,	id_Lamppost,	1,	0,	$7A0
00020A7C                            	@SBZend:
00020A7C                            
00020A7C                            @Ending:
00020A7C 0000                       	dc.w (@Endingend-@Ending-2)/8
00020A7E                            
00020A7E                            ;		mappings	object		subtype	frame	VRAM setting
00020A7E 2500 BFD8 0000 27B2        	dbug	Map_Ring,	id_Rings,	0,	0,	$27B2
00020A86 2500 BFD8 0008 27B2        	dbug	Map_Ring,	id_Rings,	0,	8,	$27B2
00020A8E                            	@Endingend:
00020A8E                            
00020A8E                            	even
00020A8E                            	even
00020A8E                            		include	"_inc\LevelHeaders.asm"
00020A8E                            ; ---------------------------------------------------------------------------
00020A8E                            ; Level Headers
00020A8E                            ; ---------------------------------------------------------------------------
00020A8E                            
00020A8E                            LevelHeaders:
00020A8E                            
00020A8E                            lhead:	macro plc1,lvlgfx,plc2,sixteen,twofivesix,music,pal
00020A8E                            	dc.l (plc1<<24)+lvlgfx
00020A8E                            	dc.l (plc2<<24)+sixteen
00020A8E                            	dc.l twofivesix
00020A8E                            	dc.b 0, music, pal, pal
00020A8E                            	endm
00020A8E                            
00020A8E                            ; 1st PLC, level gfx (unused), 2nd PLC, 16x16 data, 256x256 data,
00020A8E                            ; music (unused), palette (unused), palette
00020A8E                            
00020A8E                            ;		1st PLC				2nd PLC				256x256 data			palette
00020A8E                            ;				level gfx*			16x16 data			music*
00020A8E                            
00020A8E 0000 0000 0000 0000 0000+  	lhead	plcid_GHZ,	Nem_GHZ_2nd,	plcid_GHZ2,	Blk16_GHZ,	Blk256_GHZ,	bgm_GHZ,	palid_GHZ	; Green Hill
00020A9E 0000 0000 0000 0000 0000+  	lhead	plcid_LZ,	Nem_LZ,		plcid_LZ2,	Blk16_LZ,	Blk256_LZ,	bgm_LZ,		palid_LZ	; Labyrinth
00020AAE 0000 0000 0000 0000 0000+  	lhead	plcid_MZ,	Nem_MZ,		plcid_MZ2,	Blk16_MZ,	Blk256_MZ,	bgm_MZ,		palid_MZ	; Marble
00020ABE 0000 0000 0000 0000 0000+  	lhead	plcid_SLZ,	Nem_SLZ,	plcid_SLZ2,	Blk16_SLZ,	Blk256_SLZ,	bgm_SLZ,	palid_SLZ	; Star Light
00020ACE 0000 0000 0000 0000 0000+  	lhead	plcid_SYZ,	Nem_SYZ,	plcid_SYZ2,	Blk16_SYZ,	Blk256_SYZ,	bgm_SYZ,	palid_SYZ	; Spring Yard
00020ADE 0000 0000 0000 0000 0000+  	lhead	plcid_SBZ,	Nem_SBZ,	plcid_SBZ2,	Blk16_SBZ,	Blk256_SBZ,	bgm_SBZ,	palid_SBZ1	; Scrap Brain
00020AEE 0000 0000 0000 0000 0000+  	lhead	0,		Nem_GHZ_2nd,	0,		Blk16_GHZ,	Blk256_GHZ,	bgm_SBZ,	palid_Ending	; Ending
00020AFE                            	even
00020AFE                            
00020AFE                            ;	* music and level gfx are actually set elsewhere, so these values are useless
00020AFE                            ;	* music and level gfx are actually set elsewhere, so these values are useless
00020AFE                            		include	"_inc\Pattern Load Cues.asm"
00020AFE                            ; ---------------------------------------------------------------------------
00020AFE                            ; Pattern load cues
00020AFE                            ; ---------------------------------------------------------------------------
00020AFE                            ArtLoadCues:
00020AFE                            
00020AFE 0000                       ptr_PLC_Main:		dc.w PLC_Main-ArtLoadCues
00020B00 0000                       ptr_PLC_Main2:		dc.w PLC_Main2-ArtLoadCues
00020B02 0000                       ptr_PLC_Explode:	dc.w PLC_Explode-ArtLoadCues
00020B04 0000                       ptr_PLC_GameOver:	dc.w PLC_GameOver-ArtLoadCues
00020B06                            PLC_Levels:
00020B06 0000                       ptr_PLC_GHZ:		dc.w PLC_GHZ-ArtLoadCues
00020B08 0000                       ptr_PLC_GHZ2:		dc.w PLC_GHZ2-ArtLoadCues
00020B0A 0000                       ptr_PLC_LZ:		dc.w PLC_LZ-ArtLoadCues
00020B0C 0000                       ptr_PLC_LZ2:		dc.w PLC_LZ2-ArtLoadCues
00020B0E 0000                       ptr_PLC_MZ:		dc.w PLC_MZ-ArtLoadCues
00020B10 0000                       ptr_PLC_MZ2:		dc.w PLC_MZ2-ArtLoadCues
00020B12 0000                       ptr_PLC_SLZ:		dc.w PLC_SLZ-ArtLoadCues
00020B14 0000                       ptr_PLC_SLZ2:		dc.w PLC_SLZ2-ArtLoadCues
00020B16 0000                       ptr_PLC_SYZ:		dc.w PLC_SYZ-ArtLoadCues
00020B18 0000                       ptr_PLC_SYZ2:		dc.w PLC_SYZ2-ArtLoadCues
00020B1A 0000                       ptr_PLC_SBZ:		dc.w PLC_SBZ-ArtLoadCues
00020B1C 0000                       ptr_PLC_SBZ2:		dc.w PLC_SBZ2-ArtLoadCues
00020B1E 0000                       ptr_PLC_TitleCard:	dc.w PLC_TitleCard-ArtLoadCues
00020B20 0000                       ptr_PLC_Boss:		dc.w PLC_Boss-ArtLoadCues
00020B22 0000                       ptr_PLC_Signpost:	dc.w PLC_Signpost-ArtLoadCues
00020B24 0000                       ptr_PLC_Warp:		dc.w PLC_Warp-ArtLoadCues
00020B26 0000                       ptr_PLC_SpecialStage:	dc.w PLC_SpecialStage-ArtLoadCues
00020B28                            PLC_Animals:
00020B28 0000                       ptr_PLC_GHZAnimals:	dc.w PLC_GHZAnimals-ArtLoadCues
00020B2A 0000                       ptr_PLC_LZAnimals:	dc.w PLC_LZAnimals-ArtLoadCues
00020B2C 0000                       ptr_PLC_MZAnimals:	dc.w PLC_MZAnimals-ArtLoadCues
00020B2E 0000                       ptr_PLC_SLZAnimals:	dc.w PLC_SLZAnimals-ArtLoadCues
00020B30 0000                       ptr_PLC_SYZAnimals:	dc.w PLC_SYZAnimals-ArtLoadCues
00020B32 0000                       ptr_PLC_SBZAnimals:	dc.w PLC_SBZAnimals-ArtLoadCues
00020B34 0000                       ptr_PLC_SSResult:	dc.w PLC_SSResult-ArtLoadCues
00020B36 0000                       ptr_PLC_Ending:		dc.w PLC_Ending-ArtLoadCues
00020B38 0000                       ptr_PLC_TryAgain:	dc.w PLC_TryAgain-ArtLoadCues
00020B3A 0000                       ptr_PLC_EggmanSBZ2:	dc.w PLC_EggmanSBZ2-ArtLoadCues
00020B3C 0000                       ptr_PLC_FZBoss:		dc.w PLC_FZBoss-ArtLoadCues
00020B3E 0000                       ptr_PLC_Egg:		dc.w PLC_Egg-ArtLoadCues
00020B40                            
00020B40                            plcm:	macro gfx,vram
00020B40                            	dc.l gfx
00020B40                            	dc.w vram
00020B40                            	endm
00020B40                            
00020B40                            ; ---------------------------------------------------------------------------
00020B40                            ; Pattern load cues - standard block 1
00020B40                            ; ---------------------------------------------------------------------------
00020B40 0000                       PLC_Main:	dc.w ((PLC_Mainend-PLC_Main-2)/6)-1
00020B42 0000 0000 D800             		plcm	Nem_Lamp, $D800		; lamppost
00020B48 0000 0000 D940             		plcm	Nem_Hud, $D940		; HUD
00020B4E 0000 0000 FA80             		plcm	Nem_Lives, $FA80	; lives	counter
00020B54 0000 0000 F300             		plcm	Nem_Ring, $F300		; rings
00020B5A 0000 0000 ACA0             		plcm	Nem_Points, $ACA0 	; points from enemy
00020B60                            	PLC_Mainend:
00020B60                            ; ---------------------------------------------------------------------------
00020B60                            ; Pattern load cues - standard block 2
00020B60                            ; ---------------------------------------------------------------------------
00020B60 0000                       PLC_Main2:	dc.w ((PLC_Main2end-PLC_Main2-2)/6)-1
00020B62 0000 0000 D000             		plcm	Nem_Monitors, $D000	; monitors
00020B68                            	PLC_Main2end:
00020B68                            ; ---------------------------------------------------------------------------
00020B68                            ; Pattern load cues - explosion
00020B68                            ; ---------------------------------------------------------------------------
00020B68 0000                       PLC_Explode:	dc.w ((PLC_Explodeend-PLC_Explode-2)/6)-1
00020B6A 0000 0000 B400             		plcm	Nem_Explode, $B400	; explosion
00020B70                            	PLC_Explodeend:
00020B70                            ; ---------------------------------------------------------------------------
00020B70                            ; Pattern load cues - game/time	over
00020B70                            ; ---------------------------------------------------------------------------
00020B70 0000                       PLC_GameOver:	dc.w ((PLC_GameOverend-PLC_GameOver-2)/6)-1
00020B72 0000 0000 ABC0             		plcm	Nem_GameOver, $ABC0	; game/time over
00020B78                            	PLC_GameOverend:
00020B78                            ; ---------------------------------------------------------------------------
00020B78                            ; Pattern load cues - Green Hill
00020B78                            ; ---------------------------------------------------------------------------
00020B78 0000                       PLC_GHZ:	dc.w ((PLC_GHZ2-PLC_GHZ-2)/6)-1
00020B7A 0000 0000 0000             		plcm	Nem_GHZ_1st, 0		; GHZ main patterns
00020B80 0000 0000 39A0             		plcm	Nem_GHZ_2nd, $39A0	; GHZ secondary	patterns
00020B86 0000 0000 6B00             		plcm	Nem_Stalk, $6B00	; flower stalk
00020B8C 0000 0000 7A00             		plcm	Nem_PplRock, $7A00	; purple rock
00020B92 0000 0000 8000             		plcm	Nem_Crabmeat, $8000	; crabmeat enemy
00020B98 0000 0000 8880             		plcm	Nem_Mozzietron, $8880	; mozzietron enemy
00020B9E 0000 0000 8F60             		plcm	Nem_Chopper, $8F60	; chopper enemy
00020BA4 0000 0000 9360             		plcm	Nem_Newtron, $9360	; newtron enemy
00020BAA 0000 0000 9E00             		plcm	Nem_Motobug, $9E00	; motobug enemy
00020BB0 0000 0000 A360             		plcm	Nem_Spikes, $A360	; spikes
00020BB6 0000 0000 A460             		plcm	Nem_HSpring, $A460	; horizontal spring
00020BBC 0000 0000 A660             		plcm	Nem_VSpring, $A660	; vertical spring
00020BC2                            
00020BC2 0000                       PLC_GHZ2:	dc.w ((PLC_GHZ2end-PLC_GHZ2-2)/6)-1
00020BC4 0000 0000 7000             		plcm	Nem_Swing, $7000	; swinging platform
00020BCA 0000 0000 71C0             		plcm	Nem_Bridge, $71C0	; bridge
00020BD0 0000 0000 7300             		plcm	Nem_SpikePole, $7300	; spiked pole
00020BD6 0000 0000 7540             		plcm	Nem_Ball, $7540		; giant	ball
00020BDC 0000 0000 A1E0             		plcm	Nem_GhzWall1, $A1E0	; breakable wall
00020BE2 0000 0000 6980             		plcm	Nem_GhzWall2, $6980	; normal wall
00020BE8                            	PLC_GHZ2end:
00020BE8                            ; ---------------------------------------------------------------------------
00020BE8                            ; Pattern load cues - Labyrinth
00020BE8                            ; ---------------------------------------------------------------------------
00020BE8 0000                       PLC_LZ:		dc.w ((PLC_LZ2-PLC_LZ-2)/6)-1
00020BEA 0000 0000 0000             		plcm	Nem_LZ,0		; LZ main patterns
00020BF0                            		;plcm	Nem_LzBlock1, $3C00	; block
00020BF0                            		;plcm	Nem_LzBlock2, $3E00	; blocks
00020BF0                            		;plcm	Nem_Splash, $4B20	; waterfalls and splash
00020BF0 0000 0000 6000             		plcm	Nem_Water, $6000	; water	surface
00020BF6 0000 0000 6200             		plcm	Nem_LzSpikeBall, $6200	; spiked ball
00020BFC 0000 0000 6500             		plcm	Nem_FlapDoor, $6500	; flapping door
00020C02 0000 0000 6900             		plcm	Nem_Bubbles, $6900	; bubbles and numbers
00020C08 0000 0000 7780             		plcm	Nem_LzBlock3, $7780	; block
00020C0E 0000 0000 7880             		plcm	Nem_LzDoor1, $7880	; vertical door
00020C14 0000 0000 7980             		plcm	Nem_Harpoon, $7980	; harpoon
00020C1A 0000 0000 94C0             		plcm	Nem_Burrobot, $94C0	; burrobot enemy
00020C20                            
00020C20 0000                       PLC_LZ2:	dc.w ((PLC_LZ2end-PLC_LZ2-2)/6)-1
00020C22 0000 0000 7BC0             		plcm	Nem_LzPole, $7BC0	; pole that breaks
00020C28 0000 0000 7CC0             		plcm	Nem_LzDoor2, $7CC0	; large	horizontal door
00020C2E 0000 0000 7EC0             		plcm	Nem_LzWheel, $7EC0	; wheel
00020C34 0000 0000 5D20             		plcm	Nem_Gargoyle, $5D20	; gargoyle head
00020C3A 0000 0000 89E0             		plcm	Nem_LzPlatfm, $89E0	; rising platform
00020C40 0000 0000 8CE0             		plcm	Nem_Orbinaut, $8CE0	; orbinaut enemy
00020C46 0000 0000 90C0             		plcm	Nem_Jaws, $90C0		; jaws enemy
00020C4C 0000 0000 A1E0             		plcm	Nem_LzSwitch, $A1E0	; switch
00020C52 0000 0000 A000             		plcm	Nem_Cork, $A000		; cork block
00020C58 0000 0000 A360             		plcm	Nem_Spikes, $A360	; spikes
00020C5E 0000 0000 A460             		plcm	Nem_HSpring, $A460	; horizontal spring
00020C64 0000 0000 A660             		plcm	Nem_VSpring, $A660	; vertical spring
00020C6A                            	PLC_LZ2end:
00020C6A                            ; ---------------------------------------------------------------------------
00020C6A                            ; Pattern load cues - Marble
00020C6A                            ; ---------------------------------------------------------------------------
00020C6A 0000                       PLC_MZ:		dc.w ((PLC_MZ2-PLC_MZ-2)/6)-1
00020C6C 0000 0000 0000             		plcm	Nem_MZ,0		; MZ main patterns
00020C72 0000 0000 6040             		plcm	Nem_BallHog, $6040	; ball hog enemy
00020C78 0000 0000 68A0             		plcm	Nem_MzFire, $68A0	; fireballs
00020C7E 0000 0000 71C0             		plcm	Nem_MzGlass, $71C0	; green	glassy block
00020C84 0000 0000 75A0             		plcm	Nem_Cutter, $75A0	; pizza	cutter
00020C8A 0000 0000 8000             		plcm	Nem_Bomb, $8000
00020C90 0000 0000 8880             		plcm	Nem_Buzz, $8880		; buzz bomber enemy
00020C96 0000 0000 8FC0             		plcm	Nem_Electric, $8FC0	; electric orb
00020C9C 0000 0000 9700             		plcm	Nem_Basaran, $9700	; basaran enemy
00020CA2 0000 0000 9C80             		plcm	Nem_Splats, $9C80	; Splats
00020CA8                            
00020CA8 0000                       PLC_MZ2:	dc.w ((PLC_MZ2end-PLC_MZ2-2)/6)-1
00020CAA 0000 0000 7000             		plcm	Nem_Swing, $7000	; swinging platform
00020CB0 0000 0000 5D40             		plcm	Nem_SbzDoor1, $5D40	; door
00020CB6                            		;plcm	Nem_MzSwitch, $A260	; switch
00020CB6 0000 0000 A360             		plcm	Nem_Spikes, $A360	; spikes
00020CBC 0000 0000 A460             		plcm	Nem_HSpring, $A460	; horizontal spring
00020CC2 0000 0000 A660             		plcm	Nem_VSpring, $A660	; vertical spring
00020CC8 0000 0000 5700             		plcm	Nem_MzBlock, $5700	; green	stone block
00020CCE 0000 0000 A260             		plcm	Nem_SlzWall, $A260	; breakable wall
00020CD4                            	PLC_MZ2end:
00020CD4                            ; ---------------------------------------------------------------------------
00020CD4                            ; Pattern load cues - Star Light
00020CD4                            ; ---------------------------------------------------------------------------
00020CD4 0000                       PLC_SLZ:	dc.w ((PLC_SLZ2-PLC_SLZ-2)/6)-1
00020CD6 0000 0000 0000             		plcm	Nem_SLZ,0		; SLZ main patterns
00020CDC 0000 0000 8000             		plcm	Nem_Bomb, $8000		; bomb enemy
00020CE2 0000 0000 8520             		plcm	Nem_Orbinaut, $8520	; orbinaut enemy
00020CE8 0000 0000 9C80             		plcm	Nem_Splats, $9C80	; Splats
00020CEE 0000 0000 9000             		plcm	Nem_MzFire, $9000	; fireballs
00020CF4 0000 0000 9C00             		plcm	Nem_SlzBlock, $9C00	; block
00020CFA 0000 0000 A260             		plcm	Nem_SlzWall, $A260	; breakable wall
00020D00 0000 0000 A360             		plcm	Nem_Spikes, $A360	; spikes
00020D06 0000 0000 A460             		plcm	Nem_HSpring, $A460	; horizontal spring
00020D0C 0000 0000 A660             		plcm	Nem_VSpring, $A660	; vertical spring
00020D12                            
00020D12 0000                       PLC_SLZ2:	dc.w ((PLC_SLZ2end-PLC_SLZ2-2)/6)-1
00020D14 0000 0000 6E80             		plcm	Nem_Seesaw, $6E80	; seesaw
00020D1A 0000 0000 7400             		plcm	Nem_Fan, $7400		; fan
00020D20 0000 0000 7980             		plcm	Nem_Pylon, $7980	; foreground pylon
00020D26 0000 0000 7B80             		plcm	Nem_SlzSwing, $7B80	; swinging platform
00020D2C 0000 0000 9B00             		plcm	Nem_SlzCannon, $9B00	; fireball launcher
00020D32 0000 0000 9E00             		plcm	Nem_SlzSpike, $9E00	; spikeball
00020D38                            	PLC_SLZ2end:
00020D38                            ; ---------------------------------------------------------------------------
00020D38                            ; Pattern load cues - Spring Yard
00020D38                            ; ---------------------------------------------------------------------------
00020D38 0000                       PLC_SYZ:	dc.w ((PLC_SYZ2-PLC_SYZ-2)/6)-1
00020D3A 0000 0000 0000             		plcm	Nem_SYZ,0		; SYZ main patterns
00020D40                            		;plcm	Nem_Stomper, $5800	; moving platform and stomper
00020D40                            		;plcm	Nem_SbzDoor1, $5D40	; door
00020D40 0000 0000 6900             		plcm	Nem_Bubbles, $6900	; bubbles and numbers
00020D46 0000 0000 8880             		plcm	Nem_Buzz, $8880		; buzz bomber enemy
00020D4C 0000 0000 8F60             		plcm	Nem_Yadrin, $8F60	; yadrin enemy
00020D52 0000 0000 9700             		plcm	Nem_Roller, $9700	; roller enemy
00020D58 0000 0000 7B20             		plcm	Nem_FlamePipe, $7B20	; flaming pipe
00020D5E 0000 0000 7EA0             		plcm	Nem_SbzFloor, $7EA0	; collapsing floor
00020D64                            		;plcm	Nem_SbzBlock, $9860	; vanishing block
00020D64                            
00020D64 0000                       PLC_SYZ2:	dc.w ((PLC_SYZ2end-PLC_SYZ2-2)/6)-1
00020D66                            		;plcm	Nem_Cater, $5600	; caterkiller enemy
00020D66 0000 0000 7000             		plcm	Nem_Bumper, $7000	; bumper
00020D6C 0000 0000 72C0             		plcm	Nem_SyzSpike1, $72C0	; large	spikeball
00020D72 0000 0000 7740             		plcm	Nem_SyzSpike2, $7740	; small	spikeball
00020D78                            		;plcm	Nem_TrapDoor, $9240	; trapdoor
00020D78 0000 0000 7F20             		plcm	Nem_SbzFloor, $7F20	; collapsing floor
00020D7E                            		;plcm	Nem_SpinPform, $9BE0	; small	spinning platform
00020D7E 0000 0000 A1E0             		plcm	Nem_LzSwitch, $A1E0	; switch
00020D84 0000 0000 A360             		plcm	Nem_Spikes, $A360	; spikes
00020D8A 0000 0000 A460             		plcm	Nem_HSpring, $A460	; horizontal spring
00020D90 0000 0000 A660             		plcm	Nem_VSpring, $A660	; vertical spring
00020D96                            	PLC_SYZ2end:
00020D96                            ; ---------------------------------------------------------------------------
00020D96                            ; Pattern load cues - Scrap Brain
00020D96                            ; ---------------------------------------------------------------------------
00020D96 0000                       PLC_SBZ:	dc.w ((PLC_SBZ2-PLC_SBZ-2)/6)-1
00020D98 0000 0000 0000             		plcm	Nem_SBZ,0		; SBZ main patterns
00020D9E 0000 0000 4B20             		plcm	Nem_Splash, $4B20	; waterfalls and splash
00020DA4                            		;plcm	Nem_Stomper, $5800	; moving platform and stomper
00020DA4                            		;plcm	Nem_SbzDoor1, $5D00	; door
00020DA4                            		;plcm	Nem_Girder, $5E00	; girder
00020DA4 0000 0000 6880             		plcm	Nem_SbzWheel1, $6880	; spot on large	wheel
00020DAA 0000 0000 6900             		plcm	Nem_Bubbles, $6900	; bubbles and numbers
00020DB0                            		;plcm	Nem_SbzWheel2, $6900	; wheel	that grabs Sonic
00020DB0 0000 0000 7220             		plcm	Nem_SyzSpike1, $7220	; large	spikeball
00020DB6 0000 0000 7B20             		plcm	Nem_FlamePipe, $7B20	; flaming pipe
00020DBC 0000 0000 7EA0             		plcm	Nem_SbzFloor, $7EA0	; collapsing floor
00020DC2 0000 0000 9860             		plcm	Nem_SbzBlock, $9860	; vanishing block
00020DC8                            
00020DC8 0000                       PLC_SBZ2:	dc.w ((PLC_SBZ2end-PLC_SBZ2-2)/6)-1
00020DCA                            		;plcm	Nem_Cater, $5600	; caterkiller enemy
00020DCA 0000 0000 8000             		plcm	Nem_Bomb, $8000		; bomb enemy
00020DD0 0000 0000 8C00             		plcm	Nem_SlideFloor, $8C00	; floor	that slides away
00020DD6                            		;plcm	Nem_SbzDoor2, $8DE0	; horizontal door
00020DD6 0000 0000 8FC0             		plcm	Nem_Electric, $8FC0	; electric orb
00020DDC 0000 0000 9240             		plcm	Nem_TrapDoor, $9240	; trapdoor
00020DE2 0000 0000 7F20             		plcm	Nem_SbzFloor, $7F20	; collapsing floor
00020DE8 0000 0000 9BE0             		plcm	Nem_SpinPform, $9BE0	; small	spinning platform
00020DEE 0000 0000 A1E0             		plcm	Nem_LzSwitch, $A1E0	; switch
00020DF4 0000 0000 A360             		plcm	Nem_Spikes, $A360	; spikes
00020DFA 0000 0000 A460             		plcm	Nem_HSpring, $A460	; horizontal spring
00020E00 0000 0000 A660             		plcm	Nem_VSpring, $A660	; vertical spring
00020E06                            	PLC_SBZ2end:
00020E06                            ; ---------------------------------------------------------------------------
00020E06                            ; Pattern load cues - title card
00020E06                            ; ---------------------------------------------------------------------------
00020E06 0000                       PLC_TitleCard:	dc.w ((PLC_TitleCardend-PLC_TitleCard-2)/6)-1
00020E08 0000 0000 B000             		plcm	Nem_TitleCard, $B000
00020E0E                            	PLC_TitleCardend:
00020E0E                            ; ---------------------------------------------------------------------------
00020E0E                            ; Pattern load cues - act 3 boss
00020E0E                            ; ---------------------------------------------------------------------------
00020E0E 0000                       PLC_Boss:	dc.w ((PLC_Bossend-PLC_Boss-2)/6)-1
00020E10 0000 0000 8000             		plcm	Nem_Eggman, $8000	; Eggman main patterns
00020E16 0000 0000 8D80             		plcm	Nem_Weapons, $8D80	; Eggman's weapons
00020E1C 0000 0000 93A0             		plcm	Nem_Prison, $93A0	; prison capsule
00020E22 0000 0000 A300             		plcm	Nem_Bomb, $A300		; bomb enemy ((gets overwritten)
00020E28 0000 0000 A300             		plcm	Nem_SlzSpike, $A300	; spikeball ((SLZ boss)
00020E2E 0000 0000 A540             		plcm	Nem_Exhaust, $A540	; exhaust flame
00020E34                            	PLC_Bossend:
00020E34                            ; ---------------------------------------------------------------------------
00020E34                            ; Pattern load cues - act 1/2 signpost
00020E34                            ; ---------------------------------------------------------------------------
00020E34 0000                       PLC_Signpost:	dc.w ((PLC_Signpostend-PLC_Signpost-2)/6)-1
00020E36 0000 0000 D000             		plcm	Nem_SignPost, $D000	; signpost
00020E3C 0000 0000 96C0             		plcm	Nem_Bonus, $96C0	; hidden bonus points
00020E42 0000 0000 8C40             		plcm	Nem_BigFlash, $8C40	; giant	ring flash effect
00020E48                            		;plcm	Nem_SSEmerald, $EE00	; emeralds
00020E48                            	PLC_Signpostend:
00020E48                            ; ---------------------------------------------------------------------------
00020E48                            ; Pattern load cues - beta special stage warp effect
00020E48                            ; ---------------------------------------------------------------------------
00020E48                            PLC_Warp:
00020E48                            	PLC_Warpend:
00020E48                            ; ---------------------------------------------------------------------------
00020E48                            ; Pattern load cues - special stage
00020E48                            ; ---------------------------------------------------------------------------
00020E48 0000                       PLC_SpecialStage:	dc.w ((PLC_SpeStageend-PLC_SpecialStage-2)/6)-1
00020E4A 0000 0000 0000             		plcm	Nem_SSBgCloud, 0	; bubble and cloud background
00020E50 0000 0000 0A20             		plcm	Nem_SSBgFish, $A20	; bird and fish	background
00020E56 0000 0000 2840             		plcm	Nem_SSWalls, $2840	; walls
00020E5C 0000 0000 4760             		plcm	Nem_Bumper, $4760	; bumper
00020E62 0000 0000 4A20             		plcm	Nem_SSGOAL, $4A20	; GOAL block
00020E68 0000 0000 4C60             		plcm	Nem_SSUpDown, $4C60	; UP and DOWN blocks
00020E6E 0000 0000 5E00             		plcm	Nem_SSRBlock, $5E00	; R block
00020E74 0000 0000 6E00             		plcm	Nem_SS1UpBlock, $6E00	; 1UP block
00020E7A 0000 0000 7E00             		plcm	Nem_SSEmStars, $7E00	; emerald collection stars
00020E80 0000 0000 8E00             		plcm	Nem_SSRedWhite, $8E00	; red and white	block
00020E86 0000 0000 9E00             		plcm	Nem_SSGhost, $9E00	; ghost	block
00020E8C 0000 0000 AE00             		plcm	Nem_SSWBlock, $AE00	; W block
00020E92 0000 0000 BE00             		plcm	Nem_SSGlass, $BE00	; glass	block
00020E98 0000 0000 EE00             		plcm	Nem_SSEmerald, $EE00	; emeralds
00020E9E                            		;plcm	Nem_SSZone1, $F2E0	; ZONE 1 block
00020E9E                            		;plcm	Nem_SSZone2, $F400	; ZONE 2 block
00020E9E                            		;plcm	Nem_SSZone3, $F520	; ZONE 3 block
00020E9E                            	PLC_SpeStageend:
00020E9E                            		;plcm	Nem_SSZone4, $F2E0	; ZONE 4 block
00020E9E                            		;plcm	Nem_SSZone5, $F400	; ZONE 5 block
00020E9E                            		;plcm	Nem_SSZone6, $F520	; ZONE 6 block
00020E9E                            ; ---------------------------------------------------------------------------
00020E9E                            ; Pattern load cues - GHZ animals
00020E9E                            ; ---------------------------------------------------------------------------
00020E9E 0000                       PLC_GHZAnimals:	dc.w ((PLC_GHZAnimalsend-PLC_GHZAnimals-2)/6)-1
00020EA0 0000 0000 B000             		plcm	Nem_Rabbit, $B000	; rabbit
00020EA6 0000 0000 B240             		plcm	Nem_Flicky, $B240	; flicky
00020EAC                            	PLC_GHZAnimalsend:
00020EAC                            ; ---------------------------------------------------------------------------
00020EAC                            ; Pattern load cues - LZ animals
00020EAC                            ; ---------------------------------------------------------------------------
00020EAC 0000                       PLC_LZAnimals:	dc.w ((PLC_LZAnimalsend-PLC_LZAnimals-2)/6)-1
00020EAE 0000 0000 B000             		plcm	Nem_BlackBird, $B000	; blackbird
00020EB4 0000 0000 B240             		plcm	Nem_Seal, $B240		; seal
00020EBA                            	PLC_LZAnimalsend:
00020EBA                            ; ---------------------------------------------------------------------------
00020EBA                            ; Pattern load cues - MZ animals
00020EBA                            ; ---------------------------------------------------------------------------
00020EBA 0000                       PLC_MZAnimals:	dc.w ((PLC_MZAnimalsend-PLC_MZAnimals-2)/6)-1
00020EBC 0000 0000 B000             		plcm	Nem_Squirrel, $B000	; squirrel
00020EC2 0000 0000 B240             		plcm	Nem_Seal, $B240		; seal
00020EC8                            	PLC_MZAnimalsend:
00020EC8                            ; ---------------------------------------------------------------------------
00020EC8                            ; Pattern load cues - SLZ animals
00020EC8                            ; ---------------------------------------------------------------------------
00020EC8 0000                       PLC_SLZAnimals:	dc.w ((PLC_SLZAnimalsend-PLC_SLZAnimals-2)/6)-1
00020ECA 0000 0000 B000             		plcm	Nem_Pig, $B000		; pig
00020ED0 0000 0000 B240             		plcm	Nem_Flicky, $B240	; flicky
00020ED6                            	PLC_SLZAnimalsend:
00020ED6                            ; ---------------------------------------------------------------------------
00020ED6                            ; Pattern load cues - SYZ animals
00020ED6                            ; ---------------------------------------------------------------------------
00020ED6 0000                       PLC_SYZAnimals:	dc.w ((PLC_SYZAnimalsend-PLC_SYZAnimals-2)/6)-1
00020ED8 0000 0000 B000             		plcm	Nem_Pig, $B000		; pig
00020EDE 0000 0000 B240             		plcm	Nem_Chicken, $B240	; chicken
00020EE4                            	PLC_SYZAnimalsend:
00020EE4                            ; ---------------------------------------------------------------------------
00020EE4                            ; Pattern load cues - SBZ animals
00020EE4                            ; ---------------------------------------------------------------------------
00020EE4 0000                       PLC_SBZAnimals:	dc.w ((PLC_SBZAnimalsend-PLC_SBZAnimals-2)/6)-1
00020EE6 0000 0000 B000             		plcm	Nem_Rabbit, $B000		; rabbit
00020EEC 0000 0000 B240             		plcm	Nem_Chicken, $B240	; chicken
00020EF2                            	PLC_SBZAnimalsend:
00020EF2                            ; ---------------------------------------------------------------------------
00020EF2                            ; Pattern load cues - special stage results screen
00020EF2                            ; ---------------------------------------------------------------------------
00020EF2 0000                       PLC_SSResult:dc.w ((PLC_SpeStResultend-PLC_SSResult-2)/6)-1
00020EF4 0000 0000 A820             		plcm	Nem_ResultEm, $A820	; emeralds
00020EFA 0000 0000 AA20             		plcm	Nem_MiniSonic, $AA20	; mini Sonic
00020F00                            	PLC_SpeStResultend:
00020F00                            ; ---------------------------------------------------------------------------
00020F00                            ; Pattern load cues - ending sequence
00020F00                            ; ---------------------------------------------------------------------------
00020F00 0000                       PLC_Ending:	dc.w ((PLC_Endingend-PLC_Ending-2)/6)-1
00020F02 0000 0000 0000             		plcm	Nem_GHZ_1st,0		; GHZ main patterns
00020F08 0000 0000 39A0             		plcm	Nem_GHZ_2nd, $39A0	; GHZ secondary	patterns
00020F0E 0000 0000 6B00             		plcm	Nem_Stalk, $6B00	; flower stalk
00020F14                            		;plcm	Nem_EndFlower, $7400	; flowers
00020F14 0000 0000 78A0             		plcm	Nem_EndEm, $78A0	; emeralds
00020F1A 0000 0000 7C20             		plcm	Nem_EndSonic, $7C20	; Sonic
00020F20 0000 0000 AA60             		plcm	Nem_Rabbit, $AA60	; rabbit
00020F26 0000 0000 ACA0             		plcm	Nem_Chicken, $ACA0	; chicken
00020F2C 0000 0000 AE60             		plcm	Nem_BlackBird, $AE60	; blackbird
00020F32 0000 0000 B0A0             		plcm	Nem_Seal, $B0A0		; seal
00020F38 0000 0000 B260             		plcm	Nem_Pig, $B260		; pig
00020F3E 0000 0000 B4A0             		plcm	Nem_Flicky, $B4A0	; flicky
00020F44 0000 0000 B660             		plcm	Nem_Squirrel, $B660	; squirrel
00020F4A 0000 0000 B8A0             		plcm	Nem_EndStH, $B8A0	; "SONIC THE HEDGEHOG"
00020F50                            	PLC_Endingend:
00020F50                            ; ---------------------------------------------------------------------------
00020F50                            ; Pattern load cues - "TRY AGAIN" and "END" screens
00020F50                            ; ---------------------------------------------------------------------------
00020F50 0000                       PLC_TryAgain:	dc.w ((PLC_TryAgainend-PLC_TryAgain-2)/6)-1
00020F52 0000 0000 78A0             		plcm	Nem_EndEm, $78A0	; emeralds
00020F58 0000 0000 7C20             		plcm	Nem_TryAgain, $7C20	; Eggman
00020F5E 0000 0000 B400             		plcm	Nem_CreditText, $B400	; credits alphabet
00020F64                            	PLC_TryAgainend:
00020F64                            ; ---------------------------------------------------------------------------
00020F64                            ; Pattern load cues - Eggman on SBZ 2
00020F64                            ; ---------------------------------------------------------------------------
00020F64 0000                       PLC_EggmanSBZ2:	dc.w ((PLC_EggmanSBZ2end-PLC_EggmanSBZ2-2)/6)-1
00020F66 0000 0000 A300             		plcm	Nem_SbzBlock, $A300	; block
00020F6C 0000 0000 8000             		plcm	Nem_Sbz2Eggman, $8000	; Eggman
00020F72 0000 0000 9400             		plcm	Nem_LzSwitch, $9400	; switch
00020F78                            	PLC_EggmanSBZ2end:
00020F78                            ; ---------------------------------------------------------------------------
00020F78                            ; Pattern load cues - final boss
00020F78                            ; ---------------------------------------------------------------------------
00020F78 0000                       PLC_FZBoss:	dc.w ((PLC_FZBossend-PLC_FZBoss-2)/6)-1
00020F7A 0000 0000 7400             		plcm	Nem_FzEggman, $7400	; Eggman after boss
00020F80 0000 0000 6000             		plcm	Nem_FzBoss, $6000	; FZ boss
00020F86 0000 0000 8000             		plcm	Nem_Eggman, $8000	; Eggman main patterns
00020F8C 0000 0000 8E00             		plcm	Nem_Sbz2Eggman, $8E00	; Eggman without ship
00020F92 0000 0000 A540             		plcm	Nem_Exhaust, $A540	; exhaust flame
00020F98                            	PLC_FZBossend:
00020F98                            ; ---------------------------------------------------------------------------
00020F98                            ; Pattern load cues - Eggman
00020F98                            ; ---------------------------------------------------------------------------
00020F98 0005                       PLC_Egg:	dc.w ((PLC_Bossend-PLC_Boss-2)/6)-1
00020F9A 0000 0000 8000             		plcm	Nem_Eggman, $8000	; Eggman main patterns
00020FA0 0000 0000 8D80             		plcm	Nem_Weapons, $8D80	; Eggman's weapons
00020FA6 0000 0000 93A0             		plcm	Nem_Prison, $93A0	; prison capsule
00020FAC 0000 0000 A360             		plcm	Nem_Spikes, $A360	; spikes
00020FB2 0000 0000 A460             		plcm	Nem_HSpring, $A460	; horizontal spring
00020FB8 0000 0000 A540             		plcm	Nem_Exhaust, $A540	; exhaust flame
00020FBE                            	PLC_Eggend:
00020FBE                            		even
00020FBE                            ; ---------------------------------------------------------------------------
00020FBE                            ; Pattern load cue IDs
00020FBE                            ; ---------------------------------------------------------------------------
00020FBE =00000000                  plcid_Main:		equ (ptr_PLC_Main-ArtLoadCues)/2	; 0
00020FBE =00000001                  plcid_Main2:		equ (ptr_PLC_Main2-ArtLoadCues)/2	; 1
00020FBE =00000002                  plcid_Explode:		equ (ptr_PLC_Explode-ArtLoadCues)/2	; 2
00020FBE =00000003                  plcid_GameOver:		equ (ptr_PLC_GameOver-ArtLoadCues)/2	; 3
00020FBE =00000004                  plcid_GHZ:		equ (ptr_PLC_GHZ-ArtLoadCues)/2		; 4
00020FBE =00000005                  plcid_GHZ2:		equ (ptr_PLC_GHZ2-ArtLoadCues)/2	; 5
00020FBE =00000006                  plcid_LZ:		equ (ptr_PLC_LZ-ArtLoadCues)/2		; 6
00020FBE =00000007                  plcid_LZ2:		equ (ptr_PLC_LZ2-ArtLoadCues)/2		; 7
00020FBE =00000008                  plcid_MZ:		equ (ptr_PLC_MZ-ArtLoadCues)/2		; 8
00020FBE =00000009                  plcid_MZ2:		equ (ptr_PLC_MZ2-ArtLoadCues)/2		; 9
00020FBE =0000000A                  plcid_SLZ:		equ (ptr_PLC_SLZ-ArtLoadCues)/2		; $A
00020FBE =0000000B                  plcid_SLZ2:		equ (ptr_PLC_SLZ2-ArtLoadCues)/2	; $B
00020FBE =0000000C                  plcid_SYZ:		equ (ptr_PLC_SYZ-ArtLoadCues)/2		; $C
00020FBE =0000000D                  plcid_SYZ2:		equ (ptr_PLC_SYZ2-ArtLoadCues)/2	; $D
00020FBE =0000000E                  plcid_SBZ:		equ (ptr_PLC_SBZ-ArtLoadCues)/2		; $E
00020FBE =0000000F                  plcid_SBZ2:		equ (ptr_PLC_SBZ2-ArtLoadCues)/2	; $F
00020FBE =00000010                  plcid_TitleCard:	equ (ptr_PLC_TitleCard-ArtLoadCues)/2	; $10
00020FBE =00000011                  plcid_Boss:		equ (ptr_PLC_Boss-ArtLoadCues)/2	; $11
00020FBE =00000012                  plcid_Signpost:		equ (ptr_PLC_Signpost-ArtLoadCues)/2	; $12
00020FBE =00000013                  plcid_Warp:		equ (ptr_PLC_Warp-ArtLoadCues)/2	; $13
00020FBE =00000014                  plcid_SpecialStage:	equ (ptr_PLC_SpecialStage-ArtLoadCues)/2 ; $14
00020FBE =00000015                  plcid_GHZAnimals:	equ (ptr_PLC_GHZAnimals-ArtLoadCues)/2	; $15
00020FBE =00000016                  plcid_LZAnimals:	equ (ptr_PLC_LZAnimals-ArtLoadCues)/2	; $16
00020FBE =00000017                  plcid_MZAnimals:	equ (ptr_PLC_MZAnimals-ArtLoadCues)/2	; $17
00020FBE =00000018                  plcid_SLZAnimals:	equ (ptr_PLC_SLZAnimals-ArtLoadCues)/2	; $18
00020FBE =00000019                  plcid_SYZAnimals:	equ (ptr_PLC_SYZAnimals-ArtLoadCues)/2	; $19
00020FBE =0000001A                  plcid_SBZAnimals:	equ (ptr_PLC_SBZAnimals-ArtLoadCues)/2	; $1A
00020FBE =0000001B                  plcid_SSResult:		equ (ptr_PLC_SSResult-ArtLoadCues)/2	; $1B
00020FBE =0000001C                  plcid_Ending:		equ (ptr_PLC_Ending-ArtLoadCues)/2	; $1C
00020FBE =0000001D                  plcid_TryAgain:		equ (ptr_PLC_TryAgain-ArtLoadCues)/2	; $1D
00020FBE =0000001E                  plcid_EggmanSBZ2:	equ (ptr_PLC_EggmanSBZ2-ArtLoadCues)/2	; $1E
00020FBE =0000001F                  plcid_FZBoss:		equ (ptr_PLC_FZBoss-ArtLoadCues)/2	; $1F
00020FBE =00000020                  plcid_Egg:		equ (ptr_PLC_Egg-ArtLoadCues)/2	; $11
00020FBE =00000020                  plcid_Egg:		equ (ptr_PLC_Egg-ArtLoadCues)/2	; $11
00020FBE                            
00021000                            			dcb.b	$300,$FF
00021300                            	Nem_SegaLogo:	incbin	"artnem\Sega Logo (JP1).bin" ; large Sega logo
00021770                            			even
00021770                            	Eni_SegaLogo:	incbin	"tilemaps\Sega Logo (JP1).bin" ; large Sega logo (mappings)
0002186C                            			even
0002186C                            Eni_Title:	incbin	"tilemaps\Title Screen.bin" ; title screen foreground (mappings)
0002194C                            		even
0002194C                            Nem_TitleFg:	incbin	"artnem\Title Screen Foreground.bin"
00022DB8                            		even
00022DB8                            Nem_TitleSonic:	incbin	"artnem\Title Screen Sonic.bin"
00024852                            		even
00024852                            Nem_TitleTM:	incbin	"artnem\Title Screen TM.bin"
00024886                            		even
00024886                            Nem_TitleMenu:   incbin   "artnem\titlemenu.bin"  
00024AB6                            		even		
00024AB6                            Eni_JapNames:	incbin	"tilemaps\Hidden Japanese Credits.bin" ; Japanese credits (mappings)
00024B74                            		even
00024B74                            Nem_JapNames:	incbin	"artnem\Hidden Japanese Credits.bin"
0002501C                            		even
0002501C                            
0002501C                            Map_Sonic:	include	"_maps\Sonic.asm"
0002501C                            ; --------------------------------------------------------------------------------
0002501C                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0002501C                            ; --------------------------------------------------------------------------------
0002501C                            
0002501C                            SME_Lx_Kl:	
0002501C 0000 0000                  		dc.w SME_Lx_Kl_142-SME_Lx_Kl, SME_Lx_Kl_143-SME_Lx_Kl	
00025020 0000 0000                  		dc.w SME_Lx_Kl_158-SME_Lx_Kl, SME_Lx_Kl_186-SME_Lx_Kl	
00025024 0000 0000                  		dc.w SME_Lx_Kl_1B9-SME_Lx_Kl, SME_Lx_Kl_1CE-SME_Lx_Kl	
00025028 0000 0000                  		dc.w SME_Lx_Kl_1DE-SME_Lx_Kl, SME_Lx_Kl_1EE-SME_Lx_Kl	
0002502C 0000 0000                  		dc.w SME_Lx_Kl_203-SME_Lx_Kl, SME_Lx_Kl_20E-SME_Lx_Kl	
00025030 0000 0000                  		dc.w SME_Lx_Kl_21E-SME_Lx_Kl, SME_Lx_Kl_22E-SME_Lx_Kl	
00025034 0000 0000                  		dc.w SME_Lx_Kl_23E-SME_Lx_Kl, SME_Lx_Kl_253-SME_Lx_Kl	
00025038 0000 0000                  		dc.w SME_Lx_Kl_263-SME_Lx_Kl, SME_Lx_Kl_287-SME_Lx_Kl	
0002503C 0000 0000                  		dc.w SME_Lx_Kl_2A1-SME_Lx_Kl, SME_Lx_Kl_2AC-SME_Lx_Kl	
00025040 0000 0000                  		dc.w SME_Lx_Kl_2BC-SME_Lx_Kl, SME_Lx_Kl_2D1-SME_Lx_Kl	
00025044 0000 0000                  		dc.w SME_Lx_Kl_2DC-SME_Lx_Kl, SME_Lx_Kl_2EC-SME_Lx_Kl	
00025048 0000 0000                  		dc.w SME_Lx_Kl_306-SME_Lx_Kl, SME_Lx_Kl_320-SME_Lx_Kl	
0002504C 0000 0000                  		dc.w SME_Lx_Kl_33F-SME_Lx_Kl, SME_Lx_Kl_354-SME_Lx_Kl	
00025050 0000 0000                  		dc.w SME_Lx_Kl_364-SME_Lx_Kl, SME_Lx_Kl_37E-SME_Lx_Kl	
00025054 0000 0000                  		dc.w SME_Lx_Kl_393-SME_Lx_Kl, SME_Lx_Kl_3A3-SME_Lx_Kl	
00025058 0000 0000                  		dc.w SME_Lx_Kl_3BD-SME_Lx_Kl, SME_Lx_Kl_3D2-SME_Lx_Kl	
0002505C 0000 0000                  		dc.w SME_Lx_Kl_3DD-SME_Lx_Kl, SME_Lx_Kl_3E8-SME_Lx_Kl	
00025060 0000 0000                  		dc.w SME_Lx_Kl_402-SME_Lx_Kl, SME_Lx_Kl_417-SME_Lx_Kl	
00025064 0000 0000                  		dc.w SME_Lx_Kl_422-SME_Lx_Kl, SME_Lx_Kl_432-SME_Lx_Kl	
00025068 0000 0000                  		dc.w SME_Lx_Kl_442-SME_Lx_Kl, SME_Lx_Kl_461-SME_Lx_Kl	
0002506C 0000 0000                  		dc.w SME_Lx_Kl_480-SME_Lx_Kl, SME_Lx_Kl_495-SME_Lx_Kl	
00025070 0000 0000                  		dc.w SME_Lx_Kl_4A5-SME_Lx_Kl, SME_Lx_Kl_4BF-SME_Lx_Kl	
00025074 0000 0000                  		dc.w SME_Lx_Kl_4D4-SME_Lx_Kl, SME_Lx_Kl_4E4-SME_Lx_Kl	
00025078 0000 0000                  		dc.w SME_Lx_Kl_4FE-SME_Lx_Kl, SME_Lx_Kl_509-SME_Lx_Kl	
0002507C 0000 0000                  		dc.w SME_Lx_Kl_514-SME_Lx_Kl, SME_Lx_Kl_51F-SME_Lx_Kl	
00025080 0000 0000                  		dc.w SME_Lx_Kl_52A-SME_Lx_Kl, SME_Lx_Kl_535-SME_Lx_Kl	
00025084 0000 0000                  		dc.w SME_Lx_Kl_540-SME_Lx_Kl, SME_Lx_Kl_54B-SME_Lx_Kl	
00025088 0000 0000                  		dc.w SME_Lx_Kl_556-SME_Lx_Kl, SME_Lx_Kl_56B-SME_Lx_Kl	
0002508C 0000 0000                  		dc.w SME_Lx_Kl_57B-SME_Lx_Kl, SME_Lx_Kl_58B-SME_Lx_Kl	
00025090 0000 0000                  		dc.w SME_Lx_Kl_59B-SME_Lx_Kl, SME_Lx_Kl_5B0-SME_Lx_Kl	
00025094 0000 0000                  		dc.w SME_Lx_Kl_5C0-SME_Lx_Kl, SME_Lx_Kl_5D0-SME_Lx_Kl	
00025098 0000 0000                  		dc.w SME_Lx_Kl_5E0-SME_Lx_Kl, SME_Lx_Kl_5EB-SME_Lx_Kl	
0002509C 0000 0000                  		dc.w SME_Lx_Kl_5F6-SME_Lx_Kl, SME_Lx_Kl_601-SME_Lx_Kl	
000250A0 0000 0000                  		dc.w SME_Lx_Kl_60C-SME_Lx_Kl, SME_Lx_Kl_617-SME_Lx_Kl	
000250A4 0000 0000                  		dc.w SME_Lx_Kl_622-SME_Lx_Kl, SME_Lx_Kl_62D-SME_Lx_Kl	
000250A8 0000 0000                  		dc.w SME_Lx_Kl_638-SME_Lx_Kl, SME_Lx_Kl_64D-SME_Lx_Kl	
000250AC 0000 0000                  		dc.w SME_Lx_Kl_65D-SME_Lx_Kl, SME_Lx_Kl_668-SME_Lx_Kl	
000250B0 0000 0000                  		dc.w SME_Lx_Kl_678-SME_Lx_Kl, SME_Lx_Kl_68D-SME_Lx_Kl	
000250B4 0000 0000                  		dc.w SME_Lx_Kl_69D-SME_Lx_Kl, SME_Lx_Kl_6A8-SME_Lx_Kl	
000250B8 0000 0000                  		dc.w SME_Lx_Kl_6B8-SME_Lx_Kl, SME_Lx_Kl_6C8-SME_Lx_Kl	
000250BC 0000 0000                  		dc.w SME_Lx_Kl_6D8-SME_Lx_Kl, SME_Lx_Kl_706-SME_Lx_Kl	
000250C0 0000 0000                  		dc.w SME_Lx_Kl_734-SME_Lx_Kl, SME_Lx_Kl_744-SME_Lx_Kl	
000250C4 0000 0000                  		dc.w SME_Lx_Kl_754-SME_Lx_Kl, SME_Lx_Kl_764-SME_Lx_Kl	
000250C8 0000 0000                  		dc.w SME_Lx_Kl_77E-SME_Lx_Kl, SME_Lx_Kl_78E-SME_Lx_Kl	
000250CC 0000 0000                  		dc.w SME_Lx_Kl_79E-SME_Lx_Kl, SME_Lx_Kl_7B8-SME_Lx_Kl	
000250D0 0000 0000                  		dc.w SME_Lx_Kl_7D2-SME_Lx_Kl, SME_Lx_Kl_7E7-SME_Lx_Kl	
000250D4 0000 0000                  		dc.w SME_Lx_Kl_7FC-SME_Lx_Kl, SME_Lx_Kl_811-SME_Lx_Kl	
000250D8 0000 0000                  		dc.w SME_Lx_Kl_826-SME_Lx_Kl, SME_Lx_Kl_82C-SME_Lx_Kl	
000250DC 0000 0000                  		dc.w SME_Lx_Kl_832-SME_Lx_Kl, SME_Lx_Kl_838-SME_Lx_Kl	
000250E0 0000 0000                  		dc.w SME_Lx_Kl_83E-SME_Lx_Kl, SME_Lx_Kl_844-SME_Lx_Kl	
000250E4 0000 0000                  		dc.w SME_Lx_Kl_84A-SME_Lx_Kl, SME_Lx_Kl_850-SME_Lx_Kl	
000250E8 0000 0000                  		dc.w SME_Lx_Kl_860-SME_Lx_Kl, SME_Lx_Kl_866-SME_Lx_Kl	
000250EC 0000 0000                  		dc.w SME_Lx_Kl_871-SME_Lx_Kl, SME_Lx_Kl_877-SME_Lx_Kl	
000250F0 0000 0000                  		dc.w SME_Lx_Kl_882-SME_Lx_Kl, SME_Lx_Kl_888-SME_Lx_Kl	
000250F4 0000 0000                  		dc.w SME_Lx_Kl_89D-SME_Lx_Kl, SME_Lx_Kl_8C1-SME_Lx_Kl	
000250F8 0000 0000                  		dc.w SME_Lx_Kl_8DB-SME_Lx_Kl, SME_Lx_Kl_8EB-SME_Lx_Kl	
000250FC 0000 0000                  		dc.w SME_Lx_Kl_8F6-SME_Lx_Kl, SME_Lx_Kl_90B-SME_Lx_Kl	
00025100 0000 0000                  		dc.w SME_Lx_Kl_920-SME_Lx_Kl, SME_Lx_Kl_935-SME_Lx_Kl	
00025104 0000 0000                  		dc.w SME_Lx_Kl_963-SME_Lx_Kl, SME_Lx_Kl_973-SME_Lx_Kl	
00025108 0000 0000                  		dc.w SME_Lx_Kl_983-SME_Lx_Kl, SME_Lx_Kl_98E-SME_Lx_Kl	
0002510C 0000 0000                  		dc.w SME_Lx_Kl_98F-SME_Lx_Kl, SME_Lx_Kl_9B8-SME_Lx_Kl	
00025110 0000 0000                  		dc.w SME_Lx_Kl_9DC-SME_Lx_Kl, SME_Lx_Kl_9F1-SME_Lx_Kl	
00025114 0000 0000                  		dc.w SME_Lx_Kl_A01-SME_Lx_Kl, SME_Lx_Kl_A11-SME_Lx_Kl	
00025118 0000 0000                  		dc.w SME_Lx_Kl_A21-SME_Lx_Kl, SME_Lx_Kl_A2C-SME_Lx_Kl	
0002511C 0000 0000                  		dc.w SME_Lx_Kl_A3C-SME_Lx_Kl, SME_Lx_Kl_A4C-SME_Lx_Kl	
00025120 0000 0000                  		dc.w SME_Lx_Kl_A5C-SME_Lx_Kl, SME_Lx_Kl_A6C-SME_Lx_Kl	
00025124 0000 0000                  		dc.w SME_Lx_Kl_A81-SME_Lx_Kl, SME_Lx_Kl_AAA-SME_Lx_Kl	
00025128 0000 0000                  		dc.w SME_Lx_Kl_ABF-SME_Lx_Kl, SME_Lx_Kl_AD4-SME_Lx_Kl	
0002512C 0000 0000                  		dc.w SME_Lx_Kl_AEE-SME_Lx_Kl, SME_Lx_Kl_B08-SME_Lx_Kl	
00025130 0000 0000                  		dc.w SME_Lx_Kl_B13-SME_Lx_Kl, SME_Lx_Kl_B2D-SME_Lx_Kl	
00025134 0000 0000                  		dc.w SME_Lx_Kl_B3D-SME_Lx_Kl, SME_Lx_Kl_B57-SME_Lx_Kl	
00025138 0000 0000                  		dc.w SME_Lx_Kl_B62-SME_Lx_Kl, SME_Lx_Kl_B72-SME_Lx_Kl	
0002513C 0000 0000                  		dc.w SME_Lx_Kl_B82-SME_Lx_Kl, SME_Lx_Kl_B92-SME_Lx_Kl	
00025140 0000 0000                  		dc.w SME_Lx_Kl_B9D-SME_Lx_Kl, SME_Lx_Kl_BAD-SME_Lx_Kl	
00025144 0000 0000                  		dc.w SME_Lx_Kl_BE5-SME_Lx_Kl, SME_Lx_Kl_C04-SME_Lx_Kl	
00025148 0000 0000                  		dc.w SME_Lx_Kl_C14-SME_Lx_Kl, SME_Lx_Kl_C38-SME_Lx_Kl	
0002514C 0000 0000                  		dc.w SME_Lx_Kl_C43-SME_Lx_Kl, SME_Lx_Kl_C58-SME_Lx_Kl	
00025150 0000 0000                  		dc.w SME_Lx_Kl_C68-SME_Lx_Kl, SME_Lx_Kl_C78-SME_Lx_Kl	
00025154 0000 0000                  		dc.w SME_Lx_Kl_C8D-SME_Lx_Kl, SME_Lx_Kl_C93-SME_Lx_Kl	
00025158 0000 0000                  		dc.w SME_Lx_Kl_C99-SME_Lx_Kl, SME_Lx_Kl_C9F-SME_Lx_Kl	
0002515C 0000                       		dc.w SME_Lx_Kl_CA5-SME_Lx_Kl	
0002515E 00                         SME_Lx_Kl_142:	dc.b 0	
0002515F 04                         SME_Lx_Kl_143:	dc.b 4	
00025160 EC08 0000 F0               		dc.b $EC, 8, 0, 0, $F0	
00025165 F40D 0003 F0               		dc.b $F4, $D, 0, 3, $F0	
0002516A 0408 000B F0               		dc.b 4, 8, 0, $B, $F0	
0002516F 0C08 000E F8               		dc.b $C, 8, 0, $E, $F8	
00025174 09                         SME_Lx_Kl_158:	dc.b 9	
00025175 EC08 0000 F0               		dc.b $EC, 8, 0, 0, $F0	
0002517A 0408 0003 F0               		dc.b 4, 8, 0, 3, $F0	
0002517F 0C08 0006 F8               		dc.b $C, 8, 0, 6, $F8	
00025184 F401 0009 F0               		dc.b $F4, 1, 0, 9, $F0	
00025189 FC00 000B 00               		dc.b $FC, 0, 0, $B, 0	
0002518E F400 000C 08               		dc.b $F4, 0, 0, $C, 8	
00025193 FC00 000D F8               		dc.b $FC, 0, 0, $D, $F8	
00025198 FC00 000E 08               		dc.b $FC, 0, 0, $E, 8	
0002519D F404 000F F8               		dc.b $F4, 4, 0, $F, $F8	
000251A2 0A                         SME_Lx_Kl_186:	dc.b $A	
000251A3 EC08 0000 F0               		dc.b $EC, 8, 0, 0, $F0	
000251A8 0408 0003 F0               		dc.b 4, 8, 0, 3, $F0	
000251AD 0C08 0006 F8               		dc.b $C, 8, 0, 6, $F8	
000251B2 F401 0009 F0               		dc.b $F4, 1, 0, 9, $F0	
000251B7 FC00 000B 00               		dc.b $FC, 0, 0, $B, 0	
000251BC F400 000C 08               		dc.b $F4, 0, 0, $C, 8	
000251C1 FC00 000D 08               		dc.b $FC, 0, 0, $D, 8	
000251C6 F400 000E F8               		dc.b $F4, 0, 0, $E, $F8	
000251CB F400 000F 00               		dc.b $F4, 0, 0, $F, 0	
000251D0 FC00 0010 F8               		dc.b $FC, 0, 0, $10, $F8	
000251D5 04                         SME_Lx_Kl_1B9:	dc.b 4	
000251D6 EC0B 0000 F0               		dc.b $EC, $B, 0, 0, $F0	
000251DB F400 000C 08               		dc.b $F4, 0, 0, $C, 8	
000251E0 FC00 100D 08               		dc.b $FC, 0, $10, $D, 8	
000251E5 0C08 000E F8               		dc.b $C, 8, 0, $E, $F8	
000251EA 03                         SME_Lx_Kl_1CE:	dc.b 3	
000251EB EC09 0000 F0               		dc.b $EC, 9, 0, 0, $F0	
000251F0 FC09 0006 F0               		dc.b $FC, 9, 0, 6, $F0	
000251F5 0C08 000C F8               		dc.b $C, 8, 0, $C, $F8	
000251FA 03                         SME_Lx_Kl_1DE:	dc.b 3	
000251FB EC09 0000 F0               		dc.b $EC, 9, 0, 0, $F0	
00025200 FC09 0006 F0               		dc.b $FC, 9, 0, 6, $F0	
00025205 0C08 000C F8               		dc.b $C, 8, 0, $C, $F8	
0002520A 04                         SME_Lx_Kl_1EE:	dc.b 4	
0002520B EC09 0000 F0               		dc.b $EC, 9, 0, 0, $F0	
00025210 FC09 0006 F0               		dc.b $FC, 9, 0, 6, $F0	
00025215 0C04 000C 00               		dc.b $C, 4, 0, $C, 0	
0002521A 0C00 000E F8               		dc.b $C, 0, 0, $E, $F8	
0002521F 02                         SME_Lx_Kl_203:	dc.b 2	
00025220 F40B 0000 F0               		dc.b $F4, $B, 0, 0, $F0	
00025225 0401 000C 08               		dc.b 4, 1, 0, $C, 8	
0002522A 03                         SME_Lx_Kl_20E:	dc.b 3	
0002522B FC06 0000 F0               		dc.b $FC, 6, 0, 0, $F0	
00025230 FC02 0006 00               		dc.b $FC, 2, 0, 6, 0	
00025235 0405 0009 08               		dc.b 4, 5, 0, 9, 8	
0002523A 03                         SME_Lx_Kl_21E:	dc.b 3	
0002523B FC06 0000 F0               		dc.b $FC, 6, 0, 0, $F0	
00025240 FC02 0006 00               		dc.b $FC, 2, 0, 6, 0	
00025245 0405 0009 08               		dc.b 4, 5, 0, 9, 8	
0002524A 03                         SME_Lx_Kl_22E:	dc.b 3	
0002524B F40B 0000 F0               		dc.b $F4, $B, 0, 0, $F0	
00025250 EC08 000C F0               		dc.b $EC, 8, 0, $C, $F0	
00025255 FC02 000F 08               		dc.b $FC, 2, 0, $F, 8	
0002525A 04                         SME_Lx_Kl_23E:	dc.b 4	
0002525B 0408 0000 F0               		dc.b 4, 8, 0, 0, $F0	
00025260 0C08 0003 F8               		dc.b $C, 8, 0, 3, $F8	
00025265 EC0A 0006 F0               		dc.b $EC, $A, 0, 6, $F0	
0002526A F400 000F 08               		dc.b $F4, 0, 0, $F, 8	
0002526F 03                         SME_Lx_Kl_253:	dc.b 3	
00025270 EC0A 0000 F0               		dc.b $EC, $A, 0, 0, $F0	
00025275 0408 0009 F0               		dc.b 4, 8, 0, 9, $F0	
0002527A 0C08 000C F8               		dc.b $C, 8, 0, $C, $F8	
0002527F 07                         SME_Lx_Kl_263:	dc.b 7	
00025280 FB09 0000 ED               		dc.b $FB, 9, 0, 0, $ED	
00025285 FB06 0006 05               		dc.b $FB, 6, 0, 6, 5	
0002528A 0B04 000C ED               		dc.b $B, 4, 0, $C, $ED	
0002528F F300 000E F5               		dc.b $F3, 0, 0, $E, $F5	
00025294 EB05 000F FD               		dc.b $EB, 5, 0, $F, $FD	
00025299 EB00 0013 F5               		dc.b $EB, 0, 0, $13, $F5	
0002529E F300 0014 ED               		dc.b $F3, 0, 0, $14, $ED	
000252A3 05                         SME_Lx_Kl_287:	dc.b 5	
000252A4 FC0E 0000 F5               		dc.b $FC, $E, 0, 0, $F5	
000252A9 F400 000C F5               		dc.b $F4, 0, 0, $C, $F5	
000252AE EC05 000D FD               		dc.b $EC, 5, 0, $D, $FD	
000252B3 EC00 0011 F5               		dc.b $EC, 0, 0, $11, $F5	
000252B8 F400 0012 ED               		dc.b $F4, 0, 0, $12, $ED	
000252BD 02                         SME_Lx_Kl_2A1:	dc.b 2	
000252BE FD0A 0000 F5               		dc.b $FD, $A, 0, 0, $F5	
000252C3 ED09 0009 F5               		dc.b $ED, 9, 0, 9, $F5	
000252C8 03                         SME_Lx_Kl_2AC:	dc.b 3	
000252C9 F30F 0000 F0               		dc.b $F3, $F, 0, 0, $F0	
000252CE EB0C 0010 F0               		dc.b $EB, $C, 0, $10, $F0	
000252D3 0500 0014 10               		dc.b 5, 0, 0, $14, $10	
000252D8 04                         SME_Lx_Kl_2BC:	dc.b 4	
000252D9 EB09 0000 F5               		dc.b $EB, 9, 0, 0, $F5	
000252DE FB09 0006 ED               		dc.b $FB, 9, 0, 6, $ED	
000252E3 FB06 000C 05               		dc.b $FB, 6, 0, $C, 5	
000252E8 0B04 0012 ED               		dc.b $B, 4, 0, $12, $ED	
000252ED 02                         SME_Lx_Kl_2D1:	dc.b 2	
000252EE EC09 0000 F6               		dc.b $EC, 9, 0, 0, $F6	
000252F3 FC0E 0006 EE               		dc.b $FC, $E, 0, 6, $EE	
000252F8 03                         SME_Lx_Kl_2DC:	dc.b 3	
000252F9 ED09 0000 F6               		dc.b $ED, 9, 0, 0, $F6	
000252FE FD06 0006 F6               		dc.b $FD, 6, 0, 6, $F6	
00025303 FD00 000C 06               		dc.b $FD, 0, 0, $C, 6	
00025308 05                         SME_Lx_Kl_2EC:	dc.b 5	
00025309 FD0C 0000 F6               		dc.b $FD, $C, 0, 0, $F6	
0002530E 0509 0004 F6               		dc.b 5, 9, 0, 4, $F6	
00025313 F500 000A EE               		dc.b $F5, 0, 0, $A, $EE	
00025318 ED01 000B F6               		dc.b $ED, 1, 0, $B, $F6	
0002531D ED05 000D FE               		dc.b $ED, 5, 0, $D, $FE	
00025322 05                         SME_Lx_Kl_306:	dc.b 5	
00025323 EC09 0000 EC               		dc.b $EC, 9, 0, 0, $EC	
00025328 EC06 0006 04               		dc.b $EC, 6, 0, 6, 4	
0002532D FC08 000C EC               		dc.b $FC, 8, 0, $C, $EC	
00025332 0409 000F F4               		dc.b 4, 9, 0, $F, $F4	
00025337 1400 0015 FC               		dc.b $14, 0, 0, $15, $FC	
0002533C 06                         SME_Lx_Kl_320:	dc.b 6	
0002533D ED09 0000 ED               		dc.b $ED, 9, 0, 0, $ED	
00025342 ED01 0006 05               		dc.b $ED, 1, 0, 6, 5	
00025347 FD0C 0008 ED               		dc.b $FD, $C, 0, 8, $ED	
0002534C 0509 000C F5               		dc.b 5, 9, 0, $C, $F5	
00025351 FD05 0012 0D               		dc.b $FD, 5, 0, $12, $D	
00025356 F500 0016 15               		dc.b $F5, 0, 0, $16, $15	
0002535B 04                         SME_Lx_Kl_33F:	dc.b 4	
0002535C EE09 0000 EE               		dc.b $EE, 9, 0, 0, $EE	
00025361 EE01 0006 06               		dc.b $EE, 1, 0, 6, 6	
00025366 FE0D 0008 F6               		dc.b $FE, $D, 0, 8, $F6	
0002536B 0E08 0010 FE               		dc.b $E, 8, 0, $10, $FE	
00025370 03                         SME_Lx_Kl_354:	dc.b 3	
00025371 ED0F 0000 EF               		dc.b $ED, $F, 0, 0, $EF	
00025376 ED03 0010 0F               		dc.b $ED, 3, 0, $10, $F	
0002537B 0D0C 0014 F7               		dc.b $D, $C, 0, $14, $F7	
00025380 05                         SME_Lx_Kl_364:	dc.b 5	
00025381 EC09 0000 EC               		dc.b $EC, 9, 0, 0, $EC	
00025386 EC05 0006 04               		dc.b $EC, 5, 0, 6, 4	
0002538B FC0D 000A F4               		dc.b $FC, $D, 0, $A, $F4	
00025390 0C08 0012 F4               		dc.b $C, 8, 0, $12, $F4	
00025395 1404 0015 FC               		dc.b $14, 4, 0, $15, $FC	
0002539A 04                         SME_Lx_Kl_37E:	dc.b 4	
0002539B EC09 0000 ED               		dc.b $EC, 9, 0, 0, $ED	
000253A0 EC01 0006 05               		dc.b $EC, 1, 0, 6, 5	
000253A5 FC0D 0008 F5               		dc.b $FC, $D, 0, 8, $F5	
000253AA 0C08 0010 FD               		dc.b $C, 8, 0, $10, $FD	
000253AF 03                         SME_Lx_Kl_393:	dc.b 3	
000253B0 ED0F 0000 ED               		dc.b $ED, $F, 0, 0, $ED	
000253B5 ED03 0010 0D               		dc.b $ED, 3, 0, $10, $D	
000253BA 0D0C 0014 F5               		dc.b $D, $C, 0, $14, $F5	
000253BF 05                         SME_Lx_Kl_3A3:	dc.b 5	
000253C0 ED09 0000 EE               		dc.b $ED, 9, 0, 0, $EE	
000253C5 ED01 0006 06               		dc.b $ED, 1, 0, 6, 6	
000253CA FD00 0008 EE               		dc.b $FD, 0, 0, 8, $EE	
000253CF FD0D 0009 F6               		dc.b $FD, $D, 0, 9, $F6	
000253D4 0D08 0011 FE               		dc.b $D, 8, 0, $11, $FE	
000253D9 04                         SME_Lx_Kl_3BD:	dc.b 4	
000253DA F307 0000 ED               		dc.b $F3, 7, 0, 0, $ED	
000253DF EB09 0008 FD               		dc.b $EB, 9, 0, 8, $FD	
000253E4 FB04 000E FD               		dc.b $FB, 4, 0, $E, $FD	
000253E9 0309 0010 FD               		dc.b 3, 9, 0, $10, $FD	
000253EE 02                         SME_Lx_Kl_3D2:	dc.b 2	
000253EF F407 0000 ED               		dc.b $F4, 7, 0, 0, $ED	
000253F4 EC0B 0008 FD               		dc.b $EC, $B, 0, 8, $FD	
000253F9 02                         SME_Lx_Kl_3DD:	dc.b 2	
000253FA F40A 0000 FD               		dc.b $F4, $A, 0, 0, $FD	
000253FF F406 0009 ED               		dc.b $F4, 6, 0, 9, $ED	
00025404 05                         SME_Lx_Kl_3E8:	dc.b 5	
00025405 E900 0000 04               		dc.b $E9, 0, 0, 0, 4	
0002540A F10C 0001 F4               		dc.b $F1, $C, 0, 1, $F4	
0002540F F100 0005 EC               		dc.b $F1, 0, 0, 5, $EC	
00025414 F90E 0006 EC               		dc.b $F9, $E, 0, 6, $EC	
00025419 F902 0012 0C               		dc.b $F9, 2, 0, $12, $C	
0002541E 04                         SME_Lx_Kl_402:	dc.b 4	
0002541F F306 0000 EC               		dc.b $F3, 6, 0, 0, $EC	
00025424 EB09 0006 FC               		dc.b $EB, 9, 0, 6, $FC	
00025429 FB04 000C FC               		dc.b $FB, 4, 0, $C, $FC	
0002542E 0309 000E FC               		dc.b 3, 9, 0, $E, $FC	
00025433 02                         SME_Lx_Kl_417:	dc.b 2	
00025434 F306 0000 ED               		dc.b $F3, 6, 0, 0, $ED	
00025439 F30B 0006 FD               		dc.b $F3, $B, 0, 6, $FD	
0002543E 03                         SME_Lx_Kl_422:	dc.b 3	
0002543F F408 0000 ED               		dc.b $F4, 8, 0, 0, $ED	
00025444 FC0D 0003 ED               		dc.b $FC, $D, 0, 3, $ED	
00025449 FC01 000B 0D               		dc.b $FC, 1, 0, $B, $D	
0002544E 03                         SME_Lx_Kl_432:	dc.b 3	
0002544F F407 0000 ED               		dc.b $F4, 7, 0, 0, $ED	
00025454 EC00 0008 FD               		dc.b $EC, 0, 0, 8, $FD	
00025459 F40A 0009 FD               		dc.b $F4, $A, 0, 9, $FD	
0002545E 06                         SME_Lx_Kl_442:	dc.b 6	
0002545F FC06 0000 EE               		dc.b $FC, 6, 0, 0, $EE	
00025464 EC04 0006 F6               		dc.b $EC, 4, 0, 6, $F6	
00025469 F404 0008 EE               		dc.b $F4, 4, 0, 8, $EE	
0002546E F40A 000A FE               		dc.b $F4, $A, 0, $A, $FE	
00025473 0C00 0013 FE               		dc.b $C, 0, 0, $13, $FE	
00025478 FC00 0014 16               		dc.b $FC, 0, 0, $14, $16	
0002547D 06                         SME_Lx_Kl_461:	dc.b 6	
0002547E FC06 0000 EF               		dc.b $FC, 6, 0, 0, $EF	
00025483 E408 0006 F7               		dc.b $E4, 8, 0, 6, $F7	
00025488 EC04 0009 FF               		dc.b $EC, 4, 0, 9, $FF	
0002548D F404 000B EF               		dc.b $F4, 4, 0, $B, $EF	
00025492 F40A 000D FF               		dc.b $F4, $A, 0, $D, $FF	
00025497 0C00 0016 FF               		dc.b $C, 0, 0, $16, $FF	
0002549C 04                         SME_Lx_Kl_480:	dc.b 4	
0002549D FB06 0000 EF               		dc.b $FB, 6, 0, 0, $EF	
000254A2 F304 0006 EF               		dc.b $F3, 4, 0, 6, $EF	
000254A7 EB0A 0008 FF               		dc.b $EB, $A, 0, 8, $FF	
000254AC 0304 0011 FF               		dc.b 3, 4, 0, $11, $FF	
000254B1 03                         SME_Lx_Kl_495:	dc.b 3	
000254B2 E90F 0000 F5               		dc.b $E9, $F, 0, 0, $F5	
000254B7 F102 0010 ED               		dc.b $F1, 2, 0, $10, $ED	
000254BC 0908 0013 ED               		dc.b 9, 8, 0, $13, $ED	
000254C1 05                         SME_Lx_Kl_4A5:	dc.b 5	
000254C2 FC06 0000 EE               		dc.b $FC, 6, 0, 0, $EE	
000254C7 EC08 0006 F6               		dc.b $EC, 8, 0, 6, $F6	
000254CC F404 0009 EE               		dc.b $F4, 4, 0, 9, $EE	
000254D1 F40D 000B FE               		dc.b $F4, $D, 0, $B, $FE	
000254D6 0408 0013 FE               		dc.b 4, 8, 0, $13, $FE	
000254DB 04                         SME_Lx_Kl_4BF:	dc.b 4	
000254DC FC06 0000 EF               		dc.b $FC, 6, 0, 0, $EF	
000254E1 F404 0006 EF               		dc.b $F4, 4, 0, 6, $EF	
000254E6 EC0A 0008 FF               		dc.b $EC, $A, 0, 8, $FF	
000254EB 0404 0011 FF               		dc.b 4, 4, 0, $11, $FF	
000254F0 03                         SME_Lx_Kl_4D4:	dc.b 3	
000254F1 EB0F 0000 F0               		dc.b $EB, $F, 0, 0, $F0	
000254F6 0B08 0010 F0               		dc.b $B, 8, 0, $10, $F0	
000254FB EB01 0013 0F               		dc.b $EB, 1, 0, $13, $F	
00025500 05                         SME_Lx_Kl_4E4:	dc.b 5	
00025501 FB06 0000 EF               		dc.b $FB, 6, 0, 0, $EF	
00025506 EB0A 0006 FF               		dc.b $EB, $A, 0, 6, $FF	
0002550B F304 000F EF               		dc.b $F3, 4, 0, $F, $EF	
00025510 0304 0011 FF               		dc.b 3, 4, 0, $11, $FF	
00025515 0B00 0013 FF               		dc.b $B, 0, 0, $13, $FF	
0002551A 02                         SME_Lx_Kl_4FE:	dc.b 2	
0002551B EE09 0000 F4               		dc.b $EE, 9, 0, 0, $F4	
00025520 FE0E 0006 EC               		dc.b $FE, $E, 0, 6, $EC	
00025525 02                         SME_Lx_Kl_509:	dc.b 2	
00025526 FE0E 0000 EC               		dc.b $FE, $E, 0, 0, $EC	
0002552B EE09 000C F4               		dc.b $EE, 9, 0, $C, $F4	
00025530 02                         SME_Lx_Kl_514:	dc.b 2	
00025531 EE09 0000 F4               		dc.b $EE, 9, 0, 0, $F4	
00025536 FE0E 0006 EC               		dc.b $FE, $E, 0, 6, $EC	
0002553B 02                         SME_Lx_Kl_51F:	dc.b 2	
0002553C EE09 0000 F4               		dc.b $EE, 9, 0, 0, $F4	
00025541 FE0E 0006 EC               		dc.b $FE, $E, 0, 6, $EC	
00025546 02                         SME_Lx_Kl_52A:	dc.b 2	
00025547 EE09 0000 F4               		dc.b $EE, 9, 0, 0, $F4	
0002554C FE0E 0006 EC               		dc.b $FE, $E, 0, 6, $EC	
00025551 02                         SME_Lx_Kl_535:	dc.b 2	
00025552 EE09 0000 F4               		dc.b $EE, 9, 0, 0, $F4	
00025557 FE0E 0006 EC               		dc.b $FE, $E, 0, 6, $EC	
0002555C 02                         SME_Lx_Kl_540:	dc.b 2	
0002555D EE09 0000 F4               		dc.b $EE, 9, 0, 0, $F4	
00025562 FE0E 0006 EC               		dc.b $FE, $E, 0, 6, $EC	
00025567 02                         SME_Lx_Kl_54B:	dc.b 2	
00025568 EE09 0000 F4               		dc.b $EE, 9, 0, 0, $F4	
0002556D FE0E 0006 EC               		dc.b $FE, $E, 0, 6, $EC	
00025572 04                         SME_Lx_Kl_556:	dc.b 4	
00025573 EE09 0000 EE               		dc.b $EE, 9, 0, 0, $EE	
00025578 EE01 0006 06               		dc.b $EE, 1, 0, 6, 6	
0002557D FE0E 0008 F6               		dc.b $FE, $E, 0, 8, $F6	
00025582 FE00 0014 EE               		dc.b $FE, 0, 0, $14, $EE	
00025587 03                         SME_Lx_Kl_56B:	dc.b 3	
00025588 F60F 0000 F6               		dc.b $F6, $F, 0, 0, $F6	
0002558D EE02 0010 EE               		dc.b $EE, 2, 0, $10, $EE	
00025592 EE08 0013 F6               		dc.b $EE, 8, 0, $13, $F6	
00025597 03                         SME_Lx_Kl_57B:	dc.b 3	
00025598 EE09 0000 EE               		dc.b $EE, 9, 0, 0, $EE	
0002559D EE01 0006 06               		dc.b $EE, 1, 0, 6, 6	
000255A2 FE0E 0008 F6               		dc.b $FE, $E, 0, 8, $F6	
000255A7 03                         SME_Lx_Kl_58B:	dc.b 3	
000255A8 FE0E 0000 F6               		dc.b $FE, $E, 0, 0, $F6	
000255AD EE0D 000C EE               		dc.b $EE, $D, 0, $C, $EE	
000255B2 FE00 0014 EE               		dc.b $FE, 0, 0, $14, $EE	
000255B7 04                         SME_Lx_Kl_59B:	dc.b 4	
000255B8 EE09 0000 EE               		dc.b $EE, 9, 0, 0, $EE	
000255BD EE01 0006 06               		dc.b $EE, 1, 0, 6, 6	
000255C2 FE0E 0008 F6               		dc.b $FE, $E, 0, 8, $F6	
000255C7 FE00 0014 EE               		dc.b $FE, 0, 0, $14, $EE	
000255CC 03                         SME_Lx_Kl_5B0:	dc.b 3	
000255CD FE0E 0000 F6               		dc.b $FE, $E, 0, 0, $F6	
000255D2 EE0D 000C EE               		dc.b $EE, $D, 0, $C, $EE	
000255D7 FE00 0014 EE               		dc.b $FE, 0, 0, $14, $EE	
000255DC 03                         SME_Lx_Kl_5C0:	dc.b 3	
000255DD EE09 0000 EE               		dc.b $EE, 9, 0, 0, $EE	
000255E2 EE01 0006 06               		dc.b $EE, 1, 0, 6, 6	
000255E7 FE0E 0008 F6               		dc.b $FE, $E, 0, 8, $F6	
000255EC 03                         SME_Lx_Kl_5D0:	dc.b 3	
000255ED EE0D 0000 EE               		dc.b $EE, $D, 0, 0, $EE	
000255F2 FE0E 0008 F6               		dc.b $FE, $E, 0, 8, $F6	
000255F7 FE00 0014 EE               		dc.b $FE, 0, 0, $14, $EE	
000255FC 02                         SME_Lx_Kl_5E0:	dc.b 2	
000255FD F406 0000 EE               		dc.b $F4, 6, 0, 0, $EE	
00025602 F40B 0006 FE               		dc.b $F4, $B, 0, 6, $FE	
00025607 02                         SME_Lx_Kl_5EB:	dc.b 2	
00025608 F406 0000 EE               		dc.b $F4, 6, 0, 0, $EE	
0002560D F40B 0006 FE               		dc.b $F4, $B, 0, 6, $FE	
00025612 02                         SME_Lx_Kl_5F6:	dc.b 2	
00025613 F406 0000 EE               		dc.b $F4, 6, 0, 0, $EE	
00025618 F40B 0006 FE               		dc.b $F4, $B, 0, 6, $FE	
0002561D 02                         SME_Lx_Kl_601:	dc.b 2	
0002561E F406 0000 EE               		dc.b $F4, 6, 0, 0, $EE	
00025623 F40B 0006 FE               		dc.b $F4, $B, 0, 6, $FE	
00025628 02                         SME_Lx_Kl_60C:	dc.b 2	
00025629 F406 0000 EE               		dc.b $F4, 6, 0, 0, $EE	
0002562E F40B 0006 FE               		dc.b $F4, $B, 0, 6, $FE	
00025633 02                         SME_Lx_Kl_617:	dc.b 2	
00025634 F406 0000 EE               		dc.b $F4, 6, 0, 0, $EE	
00025639 F40B 0006 FE               		dc.b $F4, $B, 0, 6, $FE	
0002563E 02                         SME_Lx_Kl_622:	dc.b 2	
0002563F F406 0000 EE               		dc.b $F4, 6, 0, 0, $EE	
00025644 F40B 0006 FE               		dc.b $F4, $B, 0, 6, $FE	
00025649 02                         SME_Lx_Kl_62D:	dc.b 2	
0002564A F406 0000 EE               		dc.b $F4, 6, 0, 0, $EE	
0002564F F40B 0006 FE               		dc.b $F4, $B, 0, 6, $FE	
00025654 04                         SME_Lx_Kl_638:	dc.b 4	
00025655 FA06 0000 EE               		dc.b $FA, 6, 0, 0, $EE	
0002565A F204 0006 EE               		dc.b $F2, 4, 0, 6, $EE	
0002565F EA0B 0008 FE               		dc.b $EA, $B, 0, 8, $FE	
00025664 0A00 0014 FE               		dc.b $A, 0, 0, $14, $FE	
00025669 03                         SME_Lx_Kl_64D:	dc.b 3	
0002566A EA0B 0000 FE               		dc.b $EA, $B, 0, 0, $FE	
0002566F 0A08 000C EE               		dc.b $A, 8, 0, $C, $EE	
00025674 F206 000F EE               		dc.b $F2, 6, 0, $F, $EE	
00025679 02                         SME_Lx_Kl_65D:	dc.b 2	
0002567A F207 0000 EE               		dc.b $F2, 7, 0, 0, $EE	
0002567F EA0B 0008 FE               		dc.b $EA, $B, 0, 8, $FE	
00025684 03                         SME_Lx_Kl_668:	dc.b 3	
00025685 EA0B 0000 FE               		dc.b $EA, $B, 0, 0, $FE	
0002568A 0A08 000C EE               		dc.b $A, 8, 0, $C, $EE	
0002568F F206 000F EE               		dc.b $F2, 6, 0, $F, $EE	
00025694 04                         SME_Lx_Kl_678:	dc.b 4	
00025695 FA06 0000 EE               		dc.b $FA, 6, 0, 0, $EE	
0002569A F204 0006 EE               		dc.b $F2, 4, 0, 6, $EE	
0002569F EA0B 0008 FE               		dc.b $EA, $B, 0, 8, $FE	
000256A4 0A00 0014 FE               		dc.b $A, 0, 0, $14, $FE	
000256A9 03                         SME_Lx_Kl_68D:	dc.b 3	
000256AA EA0B 0000 FE               		dc.b $EA, $B, 0, 0, $FE	
000256AF 0A08 000C EE               		dc.b $A, 8, 0, $C, $EE	
000256B4 F206 000F EE               		dc.b $F2, 6, 0, $F, $EE	
000256B9 02                         SME_Lx_Kl_69D:	dc.b 2	
000256BA F207 0000 EE               		dc.b $F2, 7, 0, 0, $EE	
000256BF EA0B 0008 FE               		dc.b $EA, $B, 0, 8, $FE	
000256C4 03                         SME_Lx_Kl_6A8:	dc.b 3	
000256C5 EA0B 0000 FE               		dc.b $EA, $B, 0, 0, $FE	
000256CA 0A08 000C EE               		dc.b $A, 8, 0, $C, $EE	
000256CF F206 000F EE               		dc.b $F2, 6, 0, $F, $EE	
000256D4 03                         SME_Lx_Kl_6B8:	dc.b 3	
000256D5 F00B 0000 FB               		dc.b $F0, $B, 0, 0, $FB	
000256DA 1008 000C FB               		dc.b $10, 8, 0, $C, $FB	
000256DF F806 000F EB               		dc.b $F8, 6, 0, $F, $EB	
000256E4 03                         SME_Lx_Kl_6C8:	dc.b 3	
000256E5 F00B 0000 FB               		dc.b $F0, $B, 0, 0, $FB	
000256EA 1008 000C FB               		dc.b $10, 8, 0, $C, $FB	
000256EF F806 000F EB               		dc.b $F8, 6, 0, $F, $EB	
000256F4 09                         SME_Lx_Kl_6D8:	dc.b 9	
000256F5 1008 0000 FB               		dc.b $10, 8, 0, 0, $FB	
000256FA F806 0003 EB               		dc.b $F8, 6, 0, 3, $EB	
000256FF 1000 0009 F3               		dc.b $10, 0, 0, 9, $F3	
00025704 0001 000A FB               		dc.b 0, 1, 0, $A, $FB	
00025709 0001 000C 03               		dc.b 0, 1, 0, $C, 3	
0002570E 0001 000E 0B               		dc.b 0, 1, 0, $E, $B	
00025713 F001 0010 FB               		dc.b $F0, 1, 0, $10, $FB	
00025718 F001 0012 03               		dc.b $F0, 1, 0, $12, 3	
0002571D F001 0014 0B               		dc.b $F0, 1, 0, $14, $B	
00025722 09                         SME_Lx_Kl_706:	dc.b 9	
00025723 1008 0000 FB               		dc.b $10, 8, 0, 0, $FB	
00025728 F806 0003 EB               		dc.b $F8, 6, 0, 3, $EB	
0002572D 1000 0009 F0               		dc.b $10, 0, 0, 9, $F0	
00025732 0001 000A FB               		dc.b 0, 1, 0, $A, $FB	
00025737 0001 000C 03               		dc.b 0, 1, 0, $C, 3	
0002573C 0001 000E 0B               		dc.b 0, 1, 0, $E, $B	
00025741 F001 0010 FB               		dc.b $F0, 1, 0, $10, $FB	
00025746 F001 0012 03               		dc.b $F0, 1, 0, $12, 3	
0002574B F001 0014 0B               		dc.b $F0, 1, 0, $14, $B	
00025750 03                         SME_Lx_Kl_734:	dc.b 3	
00025751 F20F 0000 F5               		dc.b $F2, $F, 0, 0, $F5	
00025756 0201 0010 ED               		dc.b 2, 1, 0, $10, $ED	
0002575B EA0C 0012 F5               		dc.b $EA, $C, 0, $12, $F5	
00025760 03                         SME_Lx_Kl_744:	dc.b 3	
00025761 F40B 0000 EF               		dc.b $F4, $B, 0, 0, $EF	
00025766 EC07 000C 07               		dc.b $EC, 7, 0, $C, 7	
0002576B EC04 0014 F7               		dc.b $EC, 4, 0, $14, $F7	
00025770 03                         SME_Lx_Kl_754:	dc.b 3	
00025771 F30F 0000 F4               		dc.b $F3, $F, 0, 0, $F4	
00025776 EB0C 0010 F4               		dc.b $EB, $C, 0, $10, $F4	
0002577B 0300 0014 EC               		dc.b 3, 0, 0, $14, $EC	
00025780 05                         SME_Lx_Kl_764:	dc.b 5	
00025781 F10E 0000 F7               		dc.b $F1, $E, 0, 0, $F7	
00025786 090C 000C EF               		dc.b 9, $C, 0, $C, $EF	
0002578B F901 0010 EF               		dc.b $F9, 1, 0, $10, $EF	
00025790 1104 0012 F7               		dc.b $11, 4, 0, $12, $F7	
00025795 E908 0014 F7               		dc.b $E9, 8, 0, $14, $F7	
0002579A 03                         SME_Lx_Kl_77E:	dc.b 3	
0002579B ED0E 0000 EE               		dc.b $ED, $E, 0, 0, $EE	
000257A0 ED02 000C 0E               		dc.b $ED, 2, 0, $C, $E	
000257A5 0509 000F F6               		dc.b 5, 9, 0, $F, $F6	
000257AA 03                         SME_Lx_Kl_78E:	dc.b 3	
000257AB ED0E 0000 EE               		dc.b $ED, $E, 0, 0, $EE	
000257B0 ED02 000C 0E               		dc.b $ED, 2, 0, $C, $E	
000257B5 0509 000F F6               		dc.b 5, 9, 0, $F, $F6	
000257BA 05                         SME_Lx_Kl_79E:	dc.b 5	
000257BB 0509 0000 F6               		dc.b 5, 9, 0, 0, $F6	
000257C0 ED02 0006 0E               		dc.b $ED, 2, 0, 6, $E	
000257C5 0500 0009 0E               		dc.b 5, 0, 0, 9, $E	
000257CA ED06 000A FE               		dc.b $ED, 6, 0, $A, $FE	
000257CF ED06 0010 EE               		dc.b $ED, 6, 0, $10, $EE	
000257D4 05                         SME_Lx_Kl_7B8:	dc.b 5	
000257D5 ED02 0000 0E               		dc.b $ED, 2, 0, 0, $E	
000257DA 0509 0003 F6               		dc.b 5, 9, 0, 3, $F6	
000257DF 0800 0009 0E               		dc.b 8, 0, 0, 9, $E	
000257E4 ED06 000A FE               		dc.b $ED, 6, 0, $A, $FE	
000257E9 ED06 0010 EE               		dc.b $ED, 6, 0, $10, $EE	
000257EE 04                         SME_Lx_Kl_7D2:	dc.b 4	
000257EF F00E 0000 E9               		dc.b $F0, $E, 0, 0, $E9	
000257F4 0808 000C F9               		dc.b 8, 8, 0, $C, $F9	
000257F9 E808 000F F1               		dc.b $E8, 8, 0, $F, $F1	
000257FE F002 0012 09               		dc.b $F0, 2, 0, $12, 9	
00025803 04                         SME_Lx_Kl_7E7:	dc.b 4	
00025804 E60B 0000 F3               		dc.b $E6, $B, 0, 0, $F3	
00025809 0608 000C F3               		dc.b 6, 8, 0, $C, $F3	
0002580E F602 000F 0B               		dc.b $F6, 2, 0, $F, $B	
00025813 EE02 0012 EB               		dc.b $EE, 2, 0, $12, $EB	
00025818 04                         SME_Lx_Kl_7FC:	dc.b 4	
00025819 EA0F 0000 EA               		dc.b $EA, $F, 0, 0, $EA	
0002581E F202 0010 0A               		dc.b $F2, 2, 0, $10, $A	
00025823 0A00 0013 02               		dc.b $A, 0, 0, $13, 2	
00025828 0A00 0014 0A               		dc.b $A, 0, 0, $14, $A	
0002582D 04                         SME_Lx_Kl_811:	dc.b 4	
0002582E E80F 0000 ED               		dc.b $E8, $F, 0, 0, $ED	
00025833 0808 0010 F5               		dc.b 8, 8, 0, $10, $F5	
00025838 F801 0013 0D               		dc.b $F8, 1, 0, $13, $D	
0002583D F001 0015 E5               		dc.b $F0, 1, 0, $15, $E5	
00025842 01                         SME_Lx_Kl_826:	dc.b 1	
00025843 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0	
00025848 01                         SME_Lx_Kl_82C:	dc.b 1	
00025849 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0	
0002584E 01                         SME_Lx_Kl_832:	dc.b 1	
0002584F F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0	
00025854 01                         SME_Lx_Kl_838:	dc.b 1	
00025855 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0	
0002585A 01                         SME_Lx_Kl_83E:	dc.b 1	
0002585B F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0	
00025860 01                         SME_Lx_Kl_844:	dc.b 1	
00025861 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0	
00025866 01                         SME_Lx_Kl_84A:	dc.b 1	
00025867 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0	
0002586C 03                         SME_Lx_Kl_850:	dc.b 3	
0002586D F00A 0000 F0               		dc.b $F0, $A, 0, 0, $F0	
00025872 080C 0009 F0               		dc.b 8, $C, 0, 9, $F0	
00025877 F002 000D 08               		dc.b $F0, 2, 0, $D, 8	
0002587C 01                         SME_Lx_Kl_860:	dc.b 1	
0002587D F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0	
00025882 02                         SME_Lx_Kl_866:	dc.b 2	
00025883 F40E 0000 EC               		dc.b $F4, $E, 0, 0, $EC	
00025888 F402 000C 0C               		dc.b $F4, 2, 0, $C, $C	
0002588D 01                         SME_Lx_Kl_871:	dc.b 1	
0002588E F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0	
00025893 02                         SME_Lx_Kl_877:	dc.b 2	
00025894 EC0B 0000 F4               		dc.b $EC, $B, 0, 0, $F4	
00025899 0C08 000C F4               		dc.b $C, 8, 0, $C, $F4	
0002589E 01                         SME_Lx_Kl_882:	dc.b 1	
0002589F F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0	
000258A4 04                         SME_Lx_Kl_888:	dc.b 4	
000258A5 ED09 0000 F0               		dc.b $ED, 9, 0, 0, $F0	
000258AA FD0E 0006 F0               		dc.b $FD, $E, 0, 6, $F0	
000258AF F501 0012 E8               		dc.b $F5, 1, 0, $12, $E8	
000258B4 F500 0014 08               		dc.b $F5, 0, 0, $14, 8	
000258B9 07                         SME_Lx_Kl_89D:	dc.b 7	
000258BA ED09 0000 F0               		dc.b $ED, 9, 0, 0, $F0	
000258BF FD0D 0006 F0               		dc.b $FD, $D, 0, 6, $F0	
000258C4 0D04 000E 00               		dc.b $D, 4, 0, $E, 0	
000258C9 F500 0010 E8               		dc.b $F5, 0, 0, $10, $E8	
000258CE F500 0011 08               		dc.b $F5, 0, 0, $11, 8	
000258D3 0D00 0012 F8               		dc.b $D, 0, 0, $12, $F8	
000258D8 FD00 0013 E8               		dc.b $FD, 0, 0, $13, $E8	
000258DD 05                         SME_Lx_Kl_8C1:	dc.b 5	
000258DE F502 0000 F0               		dc.b $F5, 2, 0, 0, $F0	
000258E3 F50B 0003 F8               		dc.b $F5, $B, 0, 3, $F8	
000258E8 ED08 000F F0               		dc.b $ED, 8, 0, $F, $F0	
000258ED F501 0012 E8               		dc.b $F5, 1, 0, $12, $E8	
000258F2 ED00 0014 08               		dc.b $ED, 0, 0, $14, 8	
000258F7 03                         SME_Lx_Kl_8DB:	dc.b 3	
000258F8 F50B 0000 F8               		dc.b $F5, $B, 0, 0, $F8	
000258FD ED03 000C F0               		dc.b $ED, 3, 0, $C, $F0	
00025902 ED04 0010 F8               		dc.b $ED, 4, 0, $10, $F8	
00025907 02                         SME_Lx_Kl_8EB:	dc.b 2	
00025908 0C08 0000 F8               		dc.b $C, 8, 0, 0, $F8	
0002590D EC0F 0003 F0               		dc.b $EC, $F, 0, 3, $F0	
00025912 04                         SME_Lx_Kl_8F6:	dc.b 4	
00025913 F402 0000 F8               		dc.b $F4, 2, 0, 0, $F8	
00025918 F402 0003 00               		dc.b $F4, 2, 0, 3, 0	
0002591D F402 0006 08               		dc.b $F4, 2, 0, 6, 8	
00025922 0C08 0009 F8               		dc.b $C, 8, 0, 9, $F8	
00025927 04                         SME_Lx_Kl_90B:	dc.b 4	
00025928 F404 0000 03               		dc.b $F4, 4, 0, 0, 3	
0002592D FC0D 0002 F8               		dc.b $FC, $D, 0, 2, $F8	
00025932 0C08 000A F8               		dc.b $C, 8, 0, $A, $F8	
00025937 0C00 000D 10               		dc.b $C, 0, 0, $D, $10	
0002593C 04                         SME_Lx_Kl_920:	dc.b 4	
0002593D EC08 0800 E8               		dc.b $EC, 8, 8, 0, $E8	
00025942 F402 0803 00               		dc.b $F4, 2, 8, 3, 0	
00025947 F40F 0806 E0               		dc.b $F4, $F, 8, 6, $E0	
0002594C EC00 0016 00               		dc.b $EC, 0, 0, $16, 0	
00025951 09                         SME_Lx_Kl_935:	dc.b 9	
00025952 F402 0000 00               		dc.b $F4, 2, 0, 0, 0	
00025957 EC0C 0003 E8               		dc.b $EC, $C, 0, 3, $E8	
0002595C F407 0007 E0               		dc.b $F4, 7, 0, 7, $E0	
00025961 0C00 080F F8               		dc.b $C, 0, 8, $F, $F8	
00025966 F400 0010 F0               		dc.b $F4, 0, 0, $10, $F0	
0002596B F402 0011 F8               		dc.b $F4, 2, 0, $11, $F8	
00025970 0400 0014 F0               		dc.b 4, 0, 0, $14, $F0	
00025975 0C00 0015 F0               		dc.b $C, 0, 0, $15, $F0	
0002597A FC00 0016 F0               		dc.b $FC, 0, 0, $16, $F0	
0002597F 03                         SME_Lx_Kl_963:	dc.b 3	
00025980 EC0E 0800 E8               		dc.b $EC, $E, 8, 0, $E8	
00025985 040D 080C E0               		dc.b 4, $D, 8, $C, $E0	
0002598A 0C00 1814 00               		dc.b $C, 0, $18, $14, 0	
0002598F 03                         SME_Lx_Kl_973:	dc.b 3	
00025990 F40F 0000 E8               		dc.b $F4, $F, 0, 0, $E8	
00025995 0401 0010 E0               		dc.b 4, 1, 0, $10, $E0	
0002599A EC0C 0012 E8               		dc.b $EC, $C, 0, $12, $E8	
0002599F 02                         SME_Lx_Kl_983:	dc.b 2	
000259A0 F40F 0000 E8               		dc.b $F4, $F, 0, 0, $E8	
000259A5 EC0C 0010 E8               		dc.b $EC, $C, 0, $10, $E8	
000259AA 00                         SME_Lx_Kl_98E:	dc.b 0	
000259AB 08                         SME_Lx_Kl_98F:	dc.b 8	
000259AC E80C 0000 F0               		dc.b $E8, $C, 0, 0, $F0	
000259B1 E801 0004 10               		dc.b $E8, 1, 0, 4, $10	
000259B6 F002 0006 F8               		dc.b $F0, 2, 0, 6, $F8	
000259BB F001 0009 00               		dc.b $F0, 1, 0, 9, 0	
000259C0 F001 000B 08               		dc.b $F0, 1, 0, $B, 8	
000259C5 0006 000D 00               		dc.b 0, 6, 0, $D, 0	
000259CA 0801 0013 F8               		dc.b 8, 1, 0, $13, $F8	
000259CF 1000 0015 10               		dc.b $10, 0, 0, $15, $10	
000259D4 07                         SME_Lx_Kl_9B8:	dc.b 7	
000259D5 E80C 0000 F0               		dc.b $E8, $C, 0, 0, $F0	
000259DA E801 0004 10               		dc.b $E8, 1, 0, 4, $10	
000259DF F002 0006 F8               		dc.b $F0, 2, 0, 6, $F8	
000259E4 F001 0009 00               		dc.b $F0, 1, 0, 9, 0	
000259E9 F001 000B 08               		dc.b $F0, 1, 0, $B, 8	
000259EE 0006 000D 00               		dc.b 0, 6, 0, $D, 0	
000259F3 0801 0013 10               		dc.b 8, 1, 0, $13, $10	
000259F8 04                         SME_Lx_Kl_9DC:	dc.b 4	
000259F9 E80C 0000 F0               		dc.b $E8, $C, 0, 0, $F0	
000259FE F00A 0004 F8               		dc.b $F0, $A, 0, 4, $F8	
00025A03 E801 000D 10               		dc.b $E8, 1, 0, $D, $10	
00025A08 0809 000F F0               		dc.b 8, 9, 0, $F, $F0	
00025A0D 03                         SME_Lx_Kl_9F1:	dc.b 3	
00025A0E F40D 0800 FC               		dc.b $F4, $D, 8, 0, $FC	
00025A13 FC00 0808 F4               		dc.b $FC, 0, 8, 8, $F4	
00025A18 040C 0809 F4               		dc.b 4, $C, 8, 9, $F4	
00025A1D 03                         SME_Lx_Kl_A01:	dc.b 3	
00025A1E F40D 0000 FC               		dc.b $F4, $D, 0, 0, $FC	
00025A23 FC05 0008 EC               		dc.b $FC, 5, 0, 8, $EC	
00025A28 0408 000C FC               		dc.b 4, 8, 0, $C, $FC	
00025A2D 03                         SME_Lx_Kl_A11:	dc.b 3	
00025A2E F40D 0000 FC               		dc.b $F4, $D, 0, 0, $FC	
00025A33 040C 0008 F4               		dc.b 4, $C, 0, 8, $F4	
00025A38 FC00 000C F4               		dc.b $FC, 0, 0, $C, $F4	
00025A3D 02                         SME_Lx_Kl_A21:	dc.b 2	
00025A3E F40A 0000 F0               		dc.b $F4, $A, 0, 0, $F0	
00025A43 F40A 0800 08               		dc.b $F4, $A, 8, 0, 8	
00025A48 03                         SME_Lx_Kl_A2C:	dc.b 3	
00025A49 F40D 0800 F4               		dc.b $F4, $D, 8, 0, $F4	
00025A4E 040C 0808 FC               		dc.b 4, $C, 8, 8, $FC	
00025A53 FC00 080C 14               		dc.b $FC, 0, 8, $C, $14	
00025A58 03                         SME_Lx_Kl_A3C:	dc.b 3	
00025A59 F40D 0800 F4               		dc.b $F4, $D, 8, 0, $F4	
00025A5E FC05 0808 14               		dc.b $FC, 5, 8, 8, $14	
00025A63 0408 080C FC               		dc.b 4, 8, 8, $C, $FC	
00025A68 03                         SME_Lx_Kl_A4C:	dc.b 3	
00025A69 F40D 0000 F4               		dc.b $F4, $D, 0, 0, $F4	
00025A6E FC00 0008 14               		dc.b $FC, 0, 0, 8, $14	
00025A73 040C 0009 FC               		dc.b 4, $C, 0, 9, $FC	
00025A78 03                         SME_Lx_Kl_A5C:	dc.b 3	
00025A79 F40D 0000 FC               		dc.b $F4, $D, 0, 0, $FC	
00025A7E FC05 0008 EC               		dc.b $FC, 5, 0, 8, $EC	
00025A83 0408 000C FC               		dc.b 4, 8, 0, $C, $FC	
00025A88 04                         SME_Lx_Kl_A6C:	dc.b 4	
00025A89 E90B 0000 F4               		dc.b $E9, $B, 0, 0, $F4	
00025A8E 1100 000C FC               		dc.b $11, 0, 0, $C, $FC	
00025A93 0900 000D FC               		dc.b 9, 0, 0, $D, $FC	
00025A98 0900 000E 04               		dc.b 9, 0, 0, $E, 4	
00025A9D 08                         SME_Lx_Kl_A81:	dc.b 8	
00025A9E E909 0000 F4               		dc.b $E9, 9, 0, 0, $F4	
00025AA3 F901 0006 04               		dc.b $F9, 1, 0, 6, 4	
00025AA8 0900 0008 FC               		dc.b 9, 0, 0, 8, $FC	
00025AAD 1100 0009 FC               		dc.b $11, 0, 0, 9, $FC	
00025AB2 F901 000A FC               		dc.b $F9, 1, 0, $A, $FC	
00025AB7 F900 000C F4               		dc.b $F9, 0, 0, $C, $F4	
00025ABC 0100 000D F4               		dc.b 1, 0, 0, $D, $F4	
00025AC1 0900 000E 04               		dc.b 9, 0, 0, $E, 4	
00025AC6 04                         SME_Lx_Kl_AAA:	dc.b 4	
00025AC7 F80E 0000 E8               		dc.b $F8, $E, 0, 0, $E8	
00025ACC 0005 000C 08               		dc.b 0, 5, 0, $C, 8	
00025AD1 F800 0010 08               		dc.b $F8, 0, 0, $10, 8	
00025AD6 F000 0011 F8               		dc.b $F0, 0, 0, $11, $F8	
00025ADB 04                         SME_Lx_Kl_ABF:	dc.b 4	
00025ADC F80E 0000 E8               		dc.b $F8, $E, 0, 0, $E8	
00025AE1 0005 000C 08               		dc.b 0, 5, 0, $C, 8	
00025AE6 F800 0010 08               		dc.b $F8, 0, 0, $10, 8	
00025AEB F000 0011 F8               		dc.b $F0, 0, 0, $11, $F8	
00025AF0 05                         SME_Lx_Kl_AD4:	dc.b 5	
00025AF1 E80A 0000 F4               		dc.b $E8, $A, 0, 0, $F4	
00025AF6 F001 0009 0C               		dc.b $F0, 1, 0, 9, $C	
00025AFB 0009 000B F4               		dc.b 0, 9, 0, $B, $F4	
00025B00 1004 0011 F4               		dc.b $10, 4, 0, $11, $F4	
00025B05 0000 0013 EC               		dc.b 0, 0, 0, $13, $EC	
00025B0A 05                         SME_Lx_Kl_AEE:	dc.b 5	
00025B0B E80A 0000 F4               		dc.b $E8, $A, 0, 0, $F4	
00025B10 E801 0009 0C               		dc.b $E8, 1, 0, 9, $C	
00025B15 0009 000B F4               		dc.b 0, 9, 0, $B, $F4	
00025B1A 1004 0011 F4               		dc.b $10, 4, 0, $11, $F4	
00025B1F 0000 0013 EC               		dc.b 0, 0, 0, $13, $EC	
00025B24 02                         SME_Lx_Kl_B08:	dc.b 2	
00025B25 ED0A 0000 F3               		dc.b $ED, $A, 0, 0, $F3	
00025B2A 050D 0009 EB               		dc.b 5, $D, 0, 9, $EB	
00025B2F 05                         SME_Lx_Kl_B13:	dc.b 5	
00025B30 0505 0000 EB               		dc.b 5, 5, 0, 0, $EB	
00025B35 ED02 0004 F3               		dc.b $ED, 2, 0, 4, $F3	
00025B3A F503 0007 FB               		dc.b $F5, 3, 0, 7, $FB	
00025B3F ED03 000B 03               		dc.b $ED, 3, 0, $B, 3	
00025B44 ED00 000F FB               		dc.b $ED, 0, 0, $F, $FB	
00025B49 03                         SME_Lx_Kl_B2D:	dc.b 3	
00025B4A EC0A 0000 F3               		dc.b $EC, $A, 0, 0, $F3	
00025B4F 0408 0009 F3               		dc.b 4, 8, 0, 9, $F3	
00025B54 0C04 000C F3               		dc.b $C, 4, 0, $C, $F3	
00025B59 05                         SME_Lx_Kl_B3D:	dc.b 5	
00025B5A 0D00 0000 EB               		dc.b $D, 0, 0, 0, $EB	
00025B5F F503 0001 F3               		dc.b $F5, 3, 0, 1, $F3	
00025B64 F503 0005 FB               		dc.b $F5, 3, 0, 5, $FB	
00025B69 F503 0009 03               		dc.b $F5, 3, 0, 9, 3	
00025B6E ED08 000D F3               		dc.b $ED, 8, 0, $D, $F3	
00025B73 02                         SME_Lx_Kl_B57:	dc.b 2	
00025B74 ED0A 0000 F3               		dc.b $ED, $A, 0, 0, $F3	
00025B79 050D 0009 EB               		dc.b 5, $D, 0, 9, $EB	
00025B7E 03                         SME_Lx_Kl_B62:	dc.b 3	
00025B7F F50B 0000 F3               		dc.b $F5, $B, 0, 0, $F3	
00025B84 0501 000C EB               		dc.b 5, 1, 0, $C, $EB	
00025B89 ED08 000E F3               		dc.b $ED, 8, 0, $E, $F3	
00025B8E 03                         SME_Lx_Kl_B72:	dc.b 3	
00025B8F EC0A 0000 F3               		dc.b $EC, $A, 0, 0, $F3	
00025B94 0408 0009 F3               		dc.b 4, 8, 0, 9, $F3	
00025B99 0C04 000C F3               		dc.b $C, 4, 0, $C, $F3	
00025B9E 03                         SME_Lx_Kl_B82:	dc.b 3	
00025B9F F50B 0000 F3               		dc.b $F5, $B, 0, 0, $F3	
00025BA4 0501 000C EB               		dc.b 5, 1, 0, $C, $EB	
00025BA9 ED08 000E F3               		dc.b $ED, 8, 0, $E, $F3	
00025BAE 02                         SME_Lx_Kl_B92:	dc.b 2	
00025BAF EC09 0000 F0               		dc.b $EC, 9, 0, 0, $F0	
00025BB4 FC0E 0006 F0               		dc.b $FC, $E, 0, 6, $F0	
00025BB9 03                         SME_Lx_Kl_B9D:	dc.b 3	
00025BBA E80D 2000 EC               		dc.b $E8, $D, $20, 0, $EC	
00025BBF E801 2008 0C               		dc.b $E8, 1, $20, 8, $C	
00025BC4 F80B 200A F4               		dc.b $F8, $B, $20, $A, $F4	
00025BC9 0B                         SME_Lx_Kl_BAD:	dc.b $B	
00025BCA E80D 0000 EC               		dc.b $E8, $D, 0, 0, $EC	
00025BCF E801 0008 0C               		dc.b $E8, 1, 0, 8, $C	
00025BD4 1000 000A F4               		dc.b $10, 0, 0, $A, $F4	
00025BD9 0808 000B F4               		dc.b 8, 8, 0, $B, $F4	
00025BDE 1000 000E 04               		dc.b $10, 0, 0, $E, 4	
00025BE3 F800 000F FC               		dc.b $F8, 0, 0, $F, $FC	
00025BE8 F800 0010 F4               		dc.b $F8, 0, 0, $10, $F4	
00025BED F800 0011 04               		dc.b $F8, 0, 0, $11, 4	
00025BF2 0000 0012 FC               		dc.b 0, 0, 0, $12, $FC	
00025BF7 0000 0013 04               		dc.b 0, 0, 0, $13, 4	
00025BFC 0000 0014 F4               		dc.b 0, 0, 0, $14, $F4	
00025C01 06                         SME_Lx_Kl_BE5:	dc.b 6	
00025C02 E80D 0000 EC               		dc.b $E8, $D, 0, 0, $EC	
00025C07 E801 0008 0C               		dc.b $E8, 1, 0, 8, $C	
00025C0C F809 000A F4               		dc.b $F8, 9, 0, $A, $F4	
00025C11 1000 0010 F4               		dc.b $10, 0, 0, $10, $F4	
00025C16 0808 0011 F4               		dc.b 8, 8, 0, $11, $F4	
00025C1B 1000 0014 04               		dc.b $10, 0, 0, $14, 4	
00025C20 03                         SME_Lx_Kl_C04:	dc.b 3	
00025C21 EB09 0000 F4               		dc.b $EB, 9, 0, 0, $F4	
00025C26 FB0E 0006 EC               		dc.b $FB, $E, 0, 6, $EC	
00025C2B 0301 0012 0C               		dc.b 3, 1, 0, $12, $C	
00025C30 07                         SME_Lx_Kl_C14:	dc.b 7	
00025C31 F801 0000 0C               		dc.b $F8, 1, 0, 0, $C	
00025C36 080C 0002 F4               		dc.b 8, $C, 0, 2, $F4	
00025C3B F801 0006 FC               		dc.b $F8, 1, 0, 6, $FC	
00025C40 F000 0008 FC               		dc.b $F0, 0, 0, 8, $FC	
00025C45 F801 0009 EC               		dc.b $F8, 1, 0, 9, $EC	
00025C4A F002 000B F4               		dc.b $F0, 2, 0, $B, $F4	
00025C4F F002 000E 04               		dc.b $F0, 2, 0, $E, 4	
00025C54 02                         SME_Lx_Kl_C38:	dc.b 2	
00025C55 F00F 0000 EC               		dc.b $F0, $F, 0, 0, $EC	
00025C5A F802 0010 0C               		dc.b $F8, 2, 0, $10, $C	
00025C5F 04                         SME_Lx_Kl_C43:	dc.b 4	
00025C60 F80E 0000 F4               		dc.b $F8, $E, 0, 0, $F4	
00025C65 F800 000C EC               		dc.b $F8, 0, 0, $C, $EC	
00025C6A F008 000E F4               		dc.b $F0, 8, 0, $E, $F4	
00025C6F 0000 0011 EC               		dc.b 0, 0, 0, $11, $EC	
00025C74 03                         SME_Lx_Kl_C58:	dc.b 3	
00025C75 F80E 0000 F4               		dc.b $F8, $E, 0, 0, $F4	
00025C7A F801 000C EC               		dc.b $F8, 1, 0, $C, $EC	
00025C7F F008 000E F4               		dc.b $F0, 8, 0, $E, $F4	
00025C84 03                         SME_Lx_Kl_C68:	dc.b 3	
00025C85 F80E 0000 F4               		dc.b $F8, $E, 0, 0, $F4	
00025C8A F008 000C F4               		dc.b $F0, 8, 0, $C, $F4	
00025C8F F801 000F EC               		dc.b $F8, 1, 0, $F, $EC	
00025C94 04                         SME_Lx_Kl_C78:	dc.b 4	
00025C95 0002 0000 F4               		dc.b 0, 2, 0, 0, $F4	
00025C9A F803 0003 FC               		dc.b $F8, 3, 0, 3, $FC	
00025C9F F803 0007 04               		dc.b $F8, 3, 0, 7, 4	
00025CA4 F802 000B 0C               		dc.b $F8, 2, 0, $B, $C	
00025CA9 01                         SME_Lx_Kl_C8D:	dc.b 1	
00025CAA F80F 0000 F4               		dc.b $F8, $F, 0, 0, $F4	
00025CAF 01                         SME_Lx_Kl_C93:	dc.b 1	
00025CB0 F80F 0000 F4               		dc.b $F8, $F, 0, 0, $F4	
00025CB5 01                         SME_Lx_Kl_C99:	dc.b 1	
00025CB6 F80F 0000 F4               		dc.b $F8, $F, 0, 0, $F4	
00025CBB 01                         SME_Lx_Kl_C9F:	dc.b 1	
00025CBC F80F 0000 F4               		dc.b $F8, $F, 0, 0, $F4	
00025CC1 02                         SME_Lx_Kl_CA5:	dc.b 2	
00025CC2 F80B 0000 F4               		dc.b $F8, $B, 0, 0, $F4	
00025CC7 F802 000C 0C               		dc.b $F8, 2, 0, $C, $C	
00025CCC                            		even
00025CCC                            		even
00025CCC                            SonicDynPLC:	include	"_maps\Sonic - Dynamic Gfx Script.asm"
00025CCC                            ; --------------------------------------------------------------------------------
00025CCC                            ; Dynamic Pattern Loading Cues - output from SonMapEd - Sonic 1 format; --------------------------------------------------------------------------------
00025CCC                            
00025CCC                            SME_vJmm3:	
00025CCC 0000 0000                  		dc.w SME_vJmm3_142-SME_vJmm3, SME_vJmm3_143-SME_vJmm3	
00025CD0 0000 0000                  		dc.w SME_vJmm3_14C-SME_vJmm3, SME_vJmm3_15F-SME_vJmm3	
00025CD4 0000 0000                  		dc.w SME_vJmm3_174-SME_vJmm3, SME_vJmm3_17D-SME_vJmm3	
00025CD8 0000 0000                  		dc.w SME_vJmm3_184-SME_vJmm3, SME_vJmm3_18B-SME_vJmm3	
00025CDC 0000 0000                  		dc.w SME_vJmm3_194-SME_vJmm3, SME_vJmm3_199-SME_vJmm3	
00025CE0 0000 0000                  		dc.w SME_vJmm3_1A0-SME_vJmm3, SME_vJmm3_1A7-SME_vJmm3	
00025CE4 0000 0000                  		dc.w SME_vJmm3_1AE-SME_vJmm3, SME_vJmm3_1B7-SME_vJmm3	
00025CE8 0000 0000                  		dc.w SME_vJmm3_1BE-SME_vJmm3, SME_vJmm3_1CD-SME_vJmm3	
00025CEC 0000 0000                  		dc.w SME_vJmm3_1D8-SME_vJmm3, SME_vJmm3_1DF-SME_vJmm3	
00025CF0 0000 0000                  		dc.w SME_vJmm3_1E6-SME_vJmm3, SME_vJmm3_1EF-SME_vJmm3	
00025CF4 0000 0000                  		dc.w SME_vJmm3_1F4-SME_vJmm3, SME_vJmm3_1FB-SME_vJmm3	
00025CF8 0000 0000                  		dc.w SME_vJmm3_206-SME_vJmm3, SME_vJmm3_211-SME_vJmm3	
00025CFC 0000 0000                  		dc.w SME_vJmm3_21E-SME_vJmm3, SME_vJmm3_227-SME_vJmm3	
00025D00 0000 0000                  		dc.w SME_vJmm3_22E-SME_vJmm3, SME_vJmm3_239-SME_vJmm3	
00025D04 0000 0000                  		dc.w SME_vJmm3_242-SME_vJmm3, SME_vJmm3_249-SME_vJmm3	
00025D08 0000 0000                  		dc.w SME_vJmm3_254-SME_vJmm3, SME_vJmm3_25D-SME_vJmm3	
00025D0C 0000 0000                  		dc.w SME_vJmm3_262-SME_vJmm3, SME_vJmm3_267-SME_vJmm3	
00025D10 0000 0000                  		dc.w SME_vJmm3_272-SME_vJmm3, SME_vJmm3_27B-SME_vJmm3	
00025D14 0000 0000                  		dc.w SME_vJmm3_280-SME_vJmm3, SME_vJmm3_287-SME_vJmm3	
00025D18 0000 0000                  		dc.w SME_vJmm3_28E-SME_vJmm3, SME_vJmm3_29B-SME_vJmm3	
00025D1C 0000 0000                  		dc.w SME_vJmm3_2A8-SME_vJmm3, SME_vJmm3_2B1-SME_vJmm3	
00025D20 0000 0000                  		dc.w SME_vJmm3_2B8-SME_vJmm3, SME_vJmm3_2C3-SME_vJmm3	
00025D24 0000 0000                  		dc.w SME_vJmm3_2CC-SME_vJmm3, SME_vJmm3_2D3-SME_vJmm3	
00025D28 0000 0000                  		dc.w SME_vJmm3_2DE-SME_vJmm3, SME_vJmm3_2E3-SME_vJmm3	
00025D2C 0000 0000                  		dc.w SME_vJmm3_2E8-SME_vJmm3, SME_vJmm3_2ED-SME_vJmm3	
00025D30 0000 0000                  		dc.w SME_vJmm3_2F2-SME_vJmm3, SME_vJmm3_2F7-SME_vJmm3	
00025D34 0000 0000                  		dc.w SME_vJmm3_2FC-SME_vJmm3, SME_vJmm3_301-SME_vJmm3	
00025D38 0000 0000                  		dc.w SME_vJmm3_306-SME_vJmm3, SME_vJmm3_30F-SME_vJmm3	
00025D3C 0000 0000                  		dc.w SME_vJmm3_316-SME_vJmm3, SME_vJmm3_31D-SME_vJmm3	
00025D40 0000 0000                  		dc.w SME_vJmm3_324-SME_vJmm3, SME_vJmm3_32D-SME_vJmm3	
00025D44 0000 0000                  		dc.w SME_vJmm3_334-SME_vJmm3, SME_vJmm3_33B-SME_vJmm3	
00025D48 0000 0000                  		dc.w SME_vJmm3_342-SME_vJmm3, SME_vJmm3_347-SME_vJmm3	
00025D4C 0000 0000                  		dc.w SME_vJmm3_34C-SME_vJmm3, SME_vJmm3_351-SME_vJmm3	
00025D50 0000 0000                  		dc.w SME_vJmm3_356-SME_vJmm3, SME_vJmm3_35B-SME_vJmm3	
00025D54 0000 0000                  		dc.w SME_vJmm3_360-SME_vJmm3, SME_vJmm3_365-SME_vJmm3	
00025D58 0000 0000                  		dc.w SME_vJmm3_36A-SME_vJmm3, SME_vJmm3_373-SME_vJmm3	
00025D5C 0000 0000                  		dc.w SME_vJmm3_37A-SME_vJmm3, SME_vJmm3_37F-SME_vJmm3	
00025D60 0000 0000                  		dc.w SME_vJmm3_386-SME_vJmm3, SME_vJmm3_38F-SME_vJmm3	
00025D64 0000 0000                  		dc.w SME_vJmm3_396-SME_vJmm3, SME_vJmm3_39B-SME_vJmm3	
00025D68 0000 0000                  		dc.w SME_vJmm3_3A2-SME_vJmm3, SME_vJmm3_3A9-SME_vJmm3	
00025D6C 0000 0000                  		dc.w SME_vJmm3_3B0-SME_vJmm3, SME_vJmm3_3C3-SME_vJmm3	
00025D70 0000 0000                  		dc.w SME_vJmm3_3D6-SME_vJmm3, SME_vJmm3_3DD-SME_vJmm3	
00025D74 0000 0000                  		dc.w SME_vJmm3_3E4-SME_vJmm3, SME_vJmm3_3EB-SME_vJmm3	
00025D78 0000 0000                  		dc.w SME_vJmm3_3F6-SME_vJmm3, SME_vJmm3_3FD-SME_vJmm3	
00025D7C 0000 0000                  		dc.w SME_vJmm3_404-SME_vJmm3, SME_vJmm3_40F-SME_vJmm3	
00025D80 0000 0000                  		dc.w SME_vJmm3_41A-SME_vJmm3, SME_vJmm3_423-SME_vJmm3	
00025D84 0000 0000                  		dc.w SME_vJmm3_42C-SME_vJmm3, SME_vJmm3_435-SME_vJmm3	
00025D88 0000 0000                  		dc.w SME_vJmm3_43E-SME_vJmm3, SME_vJmm3_441-SME_vJmm3	
00025D8C 0000 0000                  		dc.w SME_vJmm3_444-SME_vJmm3, SME_vJmm3_447-SME_vJmm3	
00025D90 0000 0000                  		dc.w SME_vJmm3_44A-SME_vJmm3, SME_vJmm3_44D-SME_vJmm3	
00025D94 0000 0000                  		dc.w SME_vJmm3_450-SME_vJmm3, SME_vJmm3_453-SME_vJmm3	
00025D98 0000 0000                  		dc.w SME_vJmm3_45A-SME_vJmm3, SME_vJmm3_45D-SME_vJmm3	
00025D9C 0000 0000                  		dc.w SME_vJmm3_462-SME_vJmm3, SME_vJmm3_465-SME_vJmm3	
00025DA0 0000 0000                  		dc.w SME_vJmm3_46A-SME_vJmm3, SME_vJmm3_46D-SME_vJmm3	
00025DA4 0000 0000                  		dc.w SME_vJmm3_476-SME_vJmm3, SME_vJmm3_485-SME_vJmm3	
00025DA8 0000 0000                  		dc.w SME_vJmm3_490-SME_vJmm3, SME_vJmm3_497-SME_vJmm3	
00025DAC 0000 0000                  		dc.w SME_vJmm3_49C-SME_vJmm3, SME_vJmm3_4A5-SME_vJmm3	
00025DB0 0000 0000                  		dc.w SME_vJmm3_4AE-SME_vJmm3, SME_vJmm3_4B7-SME_vJmm3	
00025DB4 0000 0000                  		dc.w SME_vJmm3_4CA-SME_vJmm3, SME_vJmm3_4D1-SME_vJmm3	
00025DB8 0000 0000                  		dc.w SME_vJmm3_4D8-SME_vJmm3, SME_vJmm3_4DD-SME_vJmm3	
00025DBC 0000 0000                  		dc.w SME_vJmm3_4DE-SME_vJmm3, SME_vJmm3_4EF-SME_vJmm3	
00025DC0 0000 0000                  		dc.w SME_vJmm3_4FE-SME_vJmm3, SME_vJmm3_507-SME_vJmm3	
00025DC4 0000 0000                  		dc.w SME_vJmm3_50E-SME_vJmm3, SME_vJmm3_515-SME_vJmm3	
00025DC8 0000 0000                  		dc.w SME_vJmm3_51C-SME_vJmm3, SME_vJmm3_51F-SME_vJmm3	
00025DCC 0000 0000                  		dc.w SME_vJmm3_526-SME_vJmm3, SME_vJmm3_52D-SME_vJmm3	
00025DD0 0000 0000                  		dc.w SME_vJmm3_534-SME_vJmm3, SME_vJmm3_53B-SME_vJmm3	
00025DD4 0000 0000                  		dc.w SME_vJmm3_544-SME_vJmm3, SME_vJmm3_555-SME_vJmm3	
00025DD8 0000 0000                  		dc.w SME_vJmm3_55E-SME_vJmm3, SME_vJmm3_567-SME_vJmm3	
00025DDC 0000 0000                  		dc.w SME_vJmm3_572-SME_vJmm3, SME_vJmm3_57D-SME_vJmm3	
00025DE0 0000 0000                  		dc.w SME_vJmm3_582-SME_vJmm3, SME_vJmm3_58D-SME_vJmm3	
00025DE4 0000 0000                  		dc.w SME_vJmm3_594-SME_vJmm3, SME_vJmm3_59F-SME_vJmm3	
00025DE8 0000 0000                  		dc.w SME_vJmm3_5A4-SME_vJmm3, SME_vJmm3_5AB-SME_vJmm3	
00025DEC 0000 0000                  		dc.w SME_vJmm3_5B2-SME_vJmm3, SME_vJmm3_5B9-SME_vJmm3	
00025DF0 0000 0000                  		dc.w SME_vJmm3_5BE-SME_vJmm3, SME_vJmm3_5C5-SME_vJmm3	
00025DF4 0000 0000                  		dc.w SME_vJmm3_5DC-SME_vJmm3, SME_vJmm3_5E9-SME_vJmm3	
00025DF8 0000 0000                  		dc.w SME_vJmm3_5F0-SME_vJmm3, SME_vJmm3_5FF-SME_vJmm3	
00025DFC 0000 0000                  		dc.w SME_vJmm3_604-SME_vJmm3, SME_vJmm3_60D-SME_vJmm3	
00025E00 0000 0000                  		dc.w SME_vJmm3_614-SME_vJmm3, SME_vJmm3_61B-SME_vJmm3	
00025E04 0000 0000                  		dc.w SME_vJmm3_624-SME_vJmm3, SME_vJmm3_627-SME_vJmm3	
00025E08 0000 0000                  		dc.w SME_vJmm3_62A-SME_vJmm3, SME_vJmm3_62D-SME_vJmm3	
00025E0C 0000                       		dc.w SME_vJmm3_630-SME_vJmm3	
00025E0E 00                         SME_vJmm3_142:	dc.b 0	
00025E0F 0420 0070 0320 0B20 0E     SME_vJmm3_143:	dc.b 4, $20, 0, $70, 3, $20, $B, $20, $E	
00025E18 0920 0020 0B20 0E10 0300+  SME_vJmm3_14C:	dc.b 9, $20, 0, $20, $B, $20, $E, $10, 3, 0, 8, 0, 9, 0, 6, 0, $A, $10, $1D	
00025E2B 0A20 0020 0B20 0E10 0300+  SME_vJmm3_15F:	dc.b $A, $20, 0, $20, $B, $20, $E, $10, 3, 0, 8, 0, 9, 0, $A, 0, $1F, 0, $26, 0, $32	
00025E40 04B6 C606 D200 0920 0E     SME_vJmm3_174:	dc.b 4, $B6, $C6, 6, $D2, 0, 9, $20, $E	
00025E49 0350 1150 1720 0E          SME_vJmm3_17D:	dc.b 3, $50, $11, $50, $17, $20, $E	
00025E50 0350 2050 1720 0E          SME_vJmm3_184:	dc.b 3, $50, $20, $50, $17, $20, $E	
00025E57 0450 2050 1710 2700 0E     SME_vJmm3_18B:	dc.b 4, $50, $20, $50, $17, $10, $27, 0, $E	
00025E60 02B6 D316 DF               SME_vJmm3_194:	dc.b 2, $B6, $D3, $16, $DF	
00025E65 0356 E126 E736 EA          SME_vJmm3_199:	dc.b 3, $56, $E1, $26, $E7, $36, $EA	
00025E6C 0356 E126 E736 EE          SME_vJmm3_1A0:	dc.b 3, $56, $E1, $26, $E7, $36, $EE	
00025E73 03B6 F226 FE27 01          SME_vJmm3_1A7:	dc.b 3, $B6, $F2, $26, $FE, $27, 1	
00025E7A 0420 0B20 0E87 0A07 13     SME_vJmm3_1AE:	dc.b 4, $20, $B, $20, $E, $87, $A, 7, $13	
00025E83 0380 2920 0B20 0E          SME_vJmm3_1B7:	dc.b 3, $80, $29, $20, $B, $20, $E	
00025E8A 0750 3A50 4010 4600 3530+  SME_vJmm3_1BE:	dc.b 7, $50, $3A, $50, $40, $10, $46, 0, $35, $30, $36, 0, $34, 0, $33	
00025E99 05B0 4800 3530 3600 3400+  SME_vJmm3_1CD:	dc.b 5, $B0, $48, 0, $35, $30, $36, 0, $34, 0, $33	
00025EA4 0380 5A57 0400 09          SME_vJmm3_1D8:	dc.b 3, $80, $5A, $57, 4, 0, 9	
00025EAB 03F7 1437 2407 28          SME_vJmm3_1DF:	dc.b 3, $F7, $14, $37, $24, 7, $28	
00025EB2 0450 5450 6350 6910 6F     SME_vJmm3_1E6:	dc.b 4, $50, $54, $50, $63, $50, $69, $10, $6F	
00025EBB 0250 54B0 71               SME_vJmm3_1EF:	dc.b 2, $50, $54, $B0, $71	
00025EC0 0357 0457 2907 2F          SME_vJmm3_1F4:	dc.b 3, $57, 4, $57, $29, 7, $2F	
00025EC7 0530 7D50 8100 3310 3430+  SME_vJmm3_1FB:	dc.b 5, $30, $7D, $50, $81, 0, $33, $10, $34, $30, $36	
00025ED2 0550 8750 8D20 9350 9600+  SME_vJmm3_206:	dc.b 5, $50, $87, $50, $8D, $20, $93, $50, $96, 0, $9C	
00025EDD 0650 8710 9D30 9F50 A330+  SME_vJmm3_211:	dc.b 6, $50, $87, $10, $9D, $30, $9F, $50, $A3, $30, $A9, 0, $AD	
00025EEA 0450 AE10 B470 B620 BE     SME_vJmm3_21E:	dc.b 4, $50, $AE, $10, $B4, $70, $B6, $20, $BE	
00025EF3 03F9 7539 8539 89          SME_vJmm3_227:	dc.b 3, $F9, $75, $39, $85, $39, $89	
00025EFA 0550 C130 C770 CB20 D310+  SME_vJmm3_22E:	dc.b 5, $50, $C1, $30, $C7, $70, $CB, $20, $D3, $10, $D6	
00025F05 0450 C110 D870 DA20 E2     SME_vJmm3_239:	dc.b 4, $50, $C1, $10, $D8, $70, $DA, $20, $E2	
00025F0E 03F9 8D39 9D39 A1          SME_vJmm3_242:	dc.b 3, $F9, $8D, $39, $9D, $39, $A1	
00025F15 0550 8710 9D00 9370 E520+  SME_vJmm3_249:	dc.b 5, $50, $87, $10, $9D, 0, $93, $70, $E5, $20, $ED	
00025F20 0470 F050 F810 FE51 00     SME_vJmm3_254:	dc.b 4, $70, $F0, $50, $F8, $10, $FE, $51, 0	
00025F29 0270 F0B1 06               SME_vJmm3_25D:	dc.b 2, $70, $F0, $B1, 6	
00025F2E 0281 1858 F9               SME_vJmm3_262:	dc.b 2, $81, $18, $58, $F9	
00025F33 0508 FF39 0009 04B9 0529+  SME_vJmm3_267:	dc.b 5, 8, $FF, $39, 0, 9, 4, $B9, 5, $29, $11	
00025F3E 0451 1251 2111 2751 29     SME_vJmm3_272:	dc.b 4, $51, $12, $51, $21, $11, $27, $51, $29	
00025F47 0251 12B1 2F               SME_vJmm3_27B:	dc.b 2, $51, $12, $B1, $2F	
00025F4C 0329 1479 1719 1F          SME_vJmm3_280:	dc.b 3, $29, $14, $79, $17, $19, $1F	
00025F53 0370 F001 0681 3B          SME_vJmm3_287:	dc.b 3, $70, $F0, 1, 6, $81, $3B	
00025F5A 0651 4411 4A11 4C81 4E01+  SME_vJmm3_28E:	dc.b 6, $51, $44, $11, $4A, $11, $4C, $81, $4E, 1, $57, 1, $58	
00025F67 0651 4421 5911 5C11 5E81+  SME_vJmm3_29B:	dc.b 6, $51, $44, $21, $59, $11, $5C, $11, $5E, $81, $60, 1, $57	
00025F74 0451 6911 6F81 7111 7A     SME_vJmm3_2A8:	dc.b 4, $51, $69, $11, $6F, $81, $71, $11, $7A	
00025F7D 03F9 A529 B529 B8          SME_vJmm3_2B1:	dc.b 3, $F9, $A5, $29, $B5, $29, $B8	
00025F84 0551 7C21 8211 8571 8721+  SME_vJmm3_2B8:	dc.b 5, $51, $7C, $21, $82, $11, $85, $71, $87, $21, $8F	
00025F8F 0451 7C11 9281 9411 9D     SME_vJmm3_2C3:	dc.b 4, $51, $7C, $11, $92, $81, $94, $11, $9D	
00025F98 03F9 BB29 CB19 CE          SME_vJmm3_2CC:	dc.b 3, $F9, $BB, $29, $CB, $19, $CE	
00025F9F 0551 4481 9F11 5E11 A801+  SME_vJmm3_2D3:	dc.b 5, $51, $44, $81, $9F, $11, $5E, $11, $A8, 1, $57	
00025FAA 0251 AAB1 B0               SME_vJmm3_2DE:	dc.b 2, $51, $AA, $B1, $B0	
00025FAF 02B7 3057 3C               SME_vJmm3_2E3:	dc.b 2, $B7, $30, $57, $3C	
00025FB4 0250 54B1 BC               SME_vJmm3_2E8:	dc.b 2, $50, $54, $B1, $BC	
00025FB9 0257 3CB7 42               SME_vJmm3_2ED:	dc.b 2, $57, $3C, $B7, $42	
00025FBE 0251 AAB1 C8               SME_vJmm3_2F2:	dc.b 2, $51, $AA, $B1, $C8	
00025FC3 0257 3CB7 4E               SME_vJmm3_2F7:	dc.b 2, $57, $3C, $B7, $4E	
00025FC8 0250 54B1 D4               SME_vJmm3_2FC:	dc.b 2, $50, $54, $B1, $D4	
00025FCD 0257 3CB7 5A               SME_vJmm3_301:	dc.b 2, $57, $3C, $B7, $5A	
00025FD2 0451 E011 E6B1 E801 F4     SME_vJmm3_306:	dc.b 4, $51, $E0, $11, $E6, $B1, $E8, 1, $F4	
00025FDB 03F8 7128 8128 84          SME_vJmm3_30F:	dc.b 3, $F8, $71, $28, $81, $28, $84	
00025FE2 0351 F511 FBB1 FD          SME_vJmm3_316:	dc.b 3, $51, $F5, $11, $FB, $B1, $FD	
00025FE9 03B8 BD78 C901 F4          SME_vJmm3_31D:	dc.b 3, $B8, $BD, $78, $C9, 1, $F4	
00025FF0 0451 E012 09B2 0B01 F4     SME_vJmm3_324:	dc.b 4, $51, $E0, $12, 9, $B2, $B, 1, $F4	
00025FF9 03B8 D178 DD01 F4          SME_vJmm3_32D:	dc.b 3, $B8, $D1, $78, $DD, 1, $F4	
00026000 0351 F511 FBB2 17          SME_vJmm3_334:	dc.b 3, $51, $F5, $11, $FB, $B2, $17	
00026007 0378 E5B8 ED01 F4          SME_vJmm3_33B:	dc.b 3, $78, $E5, $B8, $ED, 1, $F4	
0002600E 0252 23B2 29               SME_vJmm3_342:	dc.b 2, $52, $23, $B2, $29	
00026013 0258 87B8 8D               SME_vJmm3_347:	dc.b 2, $58, $87, $B8, $8D	
00026018 0251 12B2 35               SME_vJmm3_34C:	dc.b 2, $51, $12, $B2, $35	
0002601D 0258 87B8 99               SME_vJmm3_351:	dc.b 2, $58, $87, $B8, $99	
00026022 0252 23B2 41               SME_vJmm3_356:	dc.b 2, $52, $23, $B2, $41	
00026027 0258 87B8 A5               SME_vJmm3_35B:	dc.b 2, $58, $87, $B8, $A5	
0002602C 0251 12B2 4D               SME_vJmm3_360:	dc.b 2, $51, $12, $B2, $4D	
00026031 0258 87B8 B1               SME_vJmm3_365:	dc.b 2, $58, $87, $B8, $B1	
00026036 0452 5912 5FB2 6102 6D     SME_vJmm3_36A:	dc.b 4, $52, $59, $12, $5F, $B2, $61, 2, $6D	
0002603F 03B9 2129 2D59 30          SME_vJmm3_373:	dc.b 3, $B9, $21, $29, $2D, $59, $30	
00026046 0272 6EB2 76               SME_vJmm3_37A:	dc.b 2, $72, $6E, $B2, $76	
0002604B 03B9 3629 4259 45          SME_vJmm3_37F:	dc.b 3, $B9, $36, $29, $42, $59, $45	
00026052 0452 5912 82B2 8402 6D     SME_vJmm3_386:	dc.b 4, $52, $59, $12, $82, $B2, $84, 2, $6D	
0002605B 03B9 4B29 5759 5A          SME_vJmm3_38F:	dc.b 3, $B9, $4B, $29, $57, $59, $5A	
00026062 0272 6EB2 90               SME_vJmm3_396:	dc.b 2, $72, $6E, $B2, $90	
00026067 03B9 6029 6C59 6F          SME_vJmm3_39B:	dc.b 3, $B9, $60, $29, $6C, $59, $6F	
0002606E 03B4 EE24 FA54 FD          SME_vJmm3_3A2:	dc.b 3, $B4, $EE, $24, $FA, $54, $FD	
00026075 03B5 0325 0F55 12          SME_vJmm3_3A9:	dc.b 3, $B5, 3, $25, $F, $55, $12	
0002607C 0925 1E55 2105 3715 1815+  SME_vJmm3_3B0:	dc.b 9, $25, $1E, $55, $21, 5, $37, $15, $18, $15, $1A, $15, $1C, $14, $EE, $14, $F2, $14, $F6	
0002608F 0925 2D55 3005 3615 2715+  SME_vJmm3_3C3:	dc.b 9, $25, $2D, $55, $30, 5, $36, $15, $27, $15, $29, $15, $2B, $15, 3, $15, 7, $15, $B	
000260A2 03F6 6416 7436 76          SME_vJmm3_3D6:	dc.b 3, $F6, $64, $16, $74, $36, $76	
000260A9 03B6 8176 8D16 95          SME_vJmm3_3DD:	dc.b 3, $B6, $81, $76, $8D, $16, $95	
000260B0 03F5 3835 4805 4C          SME_vJmm3_3E4:	dc.b 3, $F5, $38, $35, $48, 5, $4C	
000260B7 05B5 4D35 5915 5D15 5F25+  SME_vJmm3_3EB:	dc.b 5, $B5, $4D, $35, $59, $15, $5D, $15, $5F, $25, $61	
000260C2 03B5 6425 7055 73          SME_vJmm3_3F6:	dc.b 3, $B5, $64, $25, $70, $55, $73	
000260C9 03B5 7925 8555 88          SME_vJmm3_3FD:	dc.b 3, $B5, $79, $25, $85, $55, $88	
000260D0 0555 9425 9A05 AD55 8E55+  SME_vJmm3_404:	dc.b 5, $55, $94, $25, $9A, 5, $AD, $55, $8E, $55, $64	
000260DB 0525 A355 A605 AC55 9D55+  SME_vJmm3_40F:	dc.b 5, $25, $A3, $55, $A6, 5, $AC, $55, $9D, $55, $79	
000260E6 04B5 BA25 C625 C925 CC     SME_vJmm3_41A:	dc.b 4, $B5, $BA, $25, $C6, $25, $C9, $25, $CC	
000260EF 04B5 AE25 CF25 D225 D5     SME_vJmm3_423:	dc.b 4, $B5, $AE, $25, $CF, $25, $D2, $25, $D5	
000260F8 04F5 D825 E805 EB05 EC     SME_vJmm3_42C:	dc.b 4, $F5, $D8, $25, $E8, 5, $EB, 5, $EC	
00026101 04F5 ED25 FD16 0016 02     SME_vJmm3_435:	dc.b 4, $F5, $ED, $25, $FD, $16, 0, $16, 2	
0002610A 01F2 9C                    SME_vJmm3_43E:	dc.b 1, $F2, $9C	
0002610D 01F6 2B                    SME_vJmm3_441:	dc.b 1, $F6, $2B	
00026110 01F2 AC                    SME_vJmm3_444:	dc.b 1, $F2, $AC	
00026113 01F6 3B                    SME_vJmm3_447:	dc.b 1, $F6, $3B	
00026116 01F2 BC                    SME_vJmm3_44A:	dc.b 1, $F2, $BC	
00026119 01F6 4B                    SME_vJmm3_44D:	dc.b 1, $F6, $4B	
0002611C 01F2 CC                    SME_vJmm3_450:	dc.b 1, $F2, $CC	
0002611F 0386 5B36 7A26 7E          SME_vJmm3_453:	dc.b 3, $86, $5B, $36, $7A, $26, $7E	
00026126 01F2 DC                    SME_vJmm3_45A:	dc.b 1, $F2, $DC	
00026129 02B2 EC22 F8               SME_vJmm3_45D:	dc.b 2, $B2, $EC, $22, $F8	
0002612E 01F2 FB                    SME_vJmm3_462:	dc.b 1, $F2, $FB	
00026131 02B3 0B23 17               SME_vJmm3_465:	dc.b 2, $B3, $B, $23, $17	
00026136 01F3 1A                    SME_vJmm3_46A:	dc.b 1, $F3, $1A	
00026139 0453 2AB3 3018 1508 17     SME_vJmm3_46D:	dc.b 4, $53, $2A, $B3, $30, $18, $15, 8, $17	
00026142 0753 3C73 4213 4A03 4C08+  SME_vJmm3_476:	dc.b 7, $53, $3C, $73, $42, $13, $4A, 3, $4C, 8, $1A, 8, $19, 8, $18	
00026151 0528 1BB8 1E28 2A18 2D08+  SME_vJmm3_485:	dc.b 5, $28, $1B, $B8, $1E, $28, $2A, $18, $2D, 8, $2F	
0002615C 03B8 3038 3C18 40          SME_vJmm3_490:	dc.b 3, $B8, $30, $38, $3C, $18, $40	
00026163 0220 0EF4 88               SME_vJmm3_497:	dc.b 2, $20, $E, $F4, $88	
00026168 0427 6627 6927 6C20 0E     SME_vJmm3_49C:	dc.b 4, $27, $66, $27, $69, $27, $6C, $20, $E	
00026171 0413 4D73 4F23 5703 5A     SME_vJmm3_4A5:	dc.b 4, $13, $4D, $73, $4F, $23, $57, 3, $5A	
0002617A 0423 5B23 5EF3 6108 42     SME_vJmm3_4AE:	dc.b 4, $23, $5B, $23, $5E, $F3, $61, 8, $42	
00026183 0928 5338 5678 4303 6408+  SME_vJmm3_4B7:	dc.b 9, $28, $53, $38, $56, $78, $43, 3, $64, 8, $4B, $28, $4F, 8, $4D, 8, $4E, 8, $52	
00026196 03B3 7173 7D00 71          SME_vJmm3_4CA:	dc.b 3, $B3, $71, $73, $7D, 0, $71	
0002619D 03F8 5B18 6B38 6D          SME_vJmm3_4D1:	dc.b 3, $F8, $5B, $18, $6B, $38, $6D	
000261A4 02F8 0138 11               SME_vJmm3_4D8:	dc.b 2, $F8, 1, $38, $11	
000261A9 00                         SME_vJmm3_4DD:	dc.b 0	
000261AA 0839 E219 EF29 E619 E919+  SME_vJmm3_4DE:	dc.b 8, $39, $E2, $19, $EF, $29, $E6, $19, $E9, $19, $EC, $59, $F7, $19, $FD, 9, $FF	
000261BB 0739 E219 EF29 E619 E919+  SME_vJmm3_4EF:	dc.b 7, $39, $E2, $19, $EF, $29, $E6, $19, $E9, $19, $EC, $5A, 0, $1A, 6	
000261CA 0439 E289 E619 EF59 F1     SME_vJmm3_4FE:	dc.b 4, $39, $E2, $89, $E6, $19, $EF, $59, $F1	
000261D3 0373 9D03 A533 A6          SME_vJmm3_507:	dc.b 3, $73, $9D, 3, $A5, $33, $A6	
000261DA 0373 8533 8D23 91          SME_vJmm3_50E:	dc.b 3, $73, $85, $33, $8D, $23, $91	
000261E1 0376 9736 9F06 A3          SME_vJmm3_515:	dc.b 3, $76, $97, $36, $9F, 6, $A3	
000261E8 0183 94                    SME_vJmm3_51C:	dc.b 1, $83, $94	
000261EB 0376 9736 9F06 A3          SME_vJmm3_51F:	dc.b 3, $76, $97, $36, $9F, 6, $A3	
000261F2 0373 8533 8D23 91          SME_vJmm3_526:	dc.b 3, $73, $85, $33, $8D, $23, $91	
000261F9 0373 9D03 A533 A6          SME_vJmm3_52D:	dc.b 3, $73, $9D, 3, $A5, $33, $A6	
00026200 0373 AA33 B223 B6          SME_vJmm3_534:	dc.b 3, $73, $AA, $33, $B2, $23, $B6	
00026207 04B3 B903 C603 C503 C7     SME_vJmm3_53B:	dc.b 4, $B3, $B9, 3, $C6, 3, $C5, 3, $C7	
00026210 0856 1113 C303 C503 C613+  SME_vJmm3_544:	dc.b 8, $56, $11, $13, $C3, 3, $C5, 3, $C6, $13, $BF, 6, 5, 6, 6, 3, $C7	
00026221 04B3 DA33 E603 EA03 EB     SME_vJmm3_555:	dc.b 4, $B3, $DA, $33, $E6, 3, $EA, 3, $EB	
0002622A 04B3 C833 D403 D803 D9     SME_vJmm3_55E:	dc.b 4, $B3, $C8, $33, $D4, 3, $D8, 3, $D9	
00026233 0583 EC13 F553 F713 FD03+  SME_vJmm3_567:	dc.b 5, $83, $EC, $13, $F5, $53, $F7, $13, $FD, 3, $FF	
0002623E 0584 0014 0953 F713 FD03+  SME_vJmm3_572:	dc.b 5, $84, 0, $14, 9, $53, $F7, $13, $FD, 3, $FF	
00026249 0284 0B74 14               SME_vJmm3_57D:	dc.b 2, $84, $B, $74, $14	
0002624E 0534 9824 9C34 9F34 A304+  SME_vJmm3_582:	dc.b 5, $34, $98, $24, $9C, $34, $9F, $34, $A3, 4, $A7	
00026259 0384 1C24 2514 28          SME_vJmm3_58D:	dc.b 3, $84, $1C, $24, $25, $14, $28	
00026260 0504 A834 A934 AD34 B124+  SME_vJmm3_594:	dc.b 5, 4, $A8, $34, $A9, $34, $AD, $34, $B1, $24, $B5	
0002626B 0284 2A74 33               SME_vJmm3_59F:	dc.b 2, $84, $2A, $74, $33	
00026270 03B7 DF17 EB27 ED          SME_vJmm3_5A4:	dc.b 3, $B7, $DF, $17, $EB, $27, $ED	
00026277 0384 1C24 3B14 3E          SME_vJmm3_5AB:	dc.b 3, $84, $1C, $24, $3B, $14, $3E	
0002627E 03B7 F017 FC27 FE          SME_vJmm3_5B2:	dc.b 3, $B7, $F0, $17, $FC, $27, $FE	
00026285 0254 40B4 46               SME_vJmm3_5B9:	dc.b 2, $54, $40, $B4, $46	
0002628A 0374 5214 5AB4 5C          SME_vJmm3_5BE:	dc.b 3, $74, $52, $14, $5A, $B4, $5C	
00026291 0B74 6814 7004 7924 7504+  SME_vJmm3_5C5:	dc.b $B, $74, $68, $14, $70, 4, $79, $24, $75, 4, $78, 4, $73, 4, $72, 4, $74, 4, $85, 4, $87, 4, $83	
000262A8 0674 7A14 7054 8204 7924+  SME_vJmm3_5DC:	dc.b 6, $74, $7A, $14, $70, $54, $82, 4, $79, $24, $75, 4, $78	
000262B5 0354 C9B4 CF10 6D          SME_vJmm3_5E9:	dc.b 3, $54, $C9, $B4, $CF, $10, $6D	
000262BC 0714 C334 C514 BE04 BD14+  SME_vJmm3_5F0:	dc.b 7, $14, $C3, $34, $C5, $14, $BE, 4, $BD, $14, $B8, $24, $BA, $24, $C0	
000262CB 02F4 DB24 EB               SME_vJmm3_5FF:	dc.b 2, $F4, $DB, $24, $EB	
000262D0 04B6 A416 B026 B206 B1     SME_vJmm3_604:	dc.b 4, $B6, $A4, $16, $B0, $26, $B2, 6, $B1	
000262D9 03B6 B516 C126 C3          SME_vJmm3_60D:	dc.b 3, $B6, $B5, $16, $C1, $26, $C3	
000262E0 03B9 D129 DD19 E0          SME_vJmm3_614:	dc.b 3, $B9, $D1, $29, $DD, $19, $E0	
000262E7 0427 6F37 7237 7627 7A     SME_vJmm3_61B:	dc.b 4, $27, $6F, $37, $72, $37, $76, $27, $7A	
000262F0 01F7 7E                    SME_vJmm3_624:	dc.b 1, $F7, $7E	
000262F3 01F7 8E                    SME_vJmm3_627:	dc.b 1, $F7, $8E	
000262F6 01F7 9E                    SME_vJmm3_62A:	dc.b 1, $F7, $9E	
000262F9 01F7 AE                    SME_vJmm3_62D:	dc.b 1, $F7, $AE	
000262FC 01F7 BE                    SME_vJmm3_630:	dc.b 1, $F7, $BE	
00026300 00                         		even
00026300 00                         		even
00026300                            
00026300                            ; ---------------------------------------------------------------------------
00026300                            ; Uncompressed graphics	- Sonic
00026300                            ; ---------------------------------------------------------------------------
00026300                            Art_Sonic:	incbin	"artunc\Sonic.bin"	; Sonic
0003C900                            		even
0003C900                            ; ---------------------------------------------------------------------------
0003C900                            ; Compressed graphics - various
0003C900                            ; ---------------------------------------------------------------------------
0003C900                            Unc_GShield:	incbin	"artunc\Gold Shield.bin"
0003CC60                            		even
0003CC60                            Unc_RedShield:	incbin	"artunc\Red Shield.bin"
0003CFC0                            		even
0003CFC0                            Unc_SpShield:	incbin	"artunc\Gray Shield.bin"
0003D320                            		even
0003D320                            Unc_Shield:	incbin	"artunc\Shield.bin"
0003D680                            		even
0003D680                            Unc_Stars:	incbin	"artunc\Invincibility Stars.bin"
0003DB00                            		even
0003DB00                            
0003DB00                            Map_SSWalls:	include	"_maps\SS Walls.asm"
0003DB00                            ; ---------------------------------------------------------------------------
0003DB00                            ; Sprite mappings - walls of the special stage
0003DB00                            ; ---------------------------------------------------------------------------
0003DB00                            Map_SSWalls_internal:
0003DB00 0000                       		dc.w byte_2C584-Map_SSWalls_internal
0003DB02 0000                       		dc.w byte_2C58A-Map_SSWalls_internal
0003DB04 0000                       		dc.w byte_2C590-Map_SSWalls_internal
0003DB06 0000                       		dc.w byte_2C596-Map_SSWalls_internal
0003DB08 0000                       		dc.w byte_2C59C-Map_SSWalls_internal
0003DB0A 0000                       		dc.w byte_2C5A2-Map_SSWalls_internal
0003DB0C 0000                       		dc.w byte_2C5A8-Map_SSWalls_internal
0003DB0E 0000                       		dc.w byte_2C5AE-Map_SSWalls_internal
0003DB10 0000                       		dc.w byte_2C5B4-Map_SSWalls_internal
0003DB12 0000                       		dc.w byte_2C5BA-Map_SSWalls_internal
0003DB14 0000                       		dc.w byte_2C5C0-Map_SSWalls_internal
0003DB16 0000                       		dc.w byte_2C5C6-Map_SSWalls_internal
0003DB18 0000                       		dc.w byte_2C5CC-Map_SSWalls_internal
0003DB1A 0000                       		dc.w byte_2C5D2-Map_SSWalls_internal
0003DB1C 0000                       		dc.w byte_2C5D8-Map_SSWalls_internal
0003DB1E 0000                       		dc.w byte_2C5DE-Map_SSWalls_internal
0003DB20 01                         byte_2C584:	dc.b 1
0003DB21 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0003DB26 01                         byte_2C58A:	dc.b 1
0003DB27 F00F 0009 F0               		dc.b $F0, $F, 0, 9, $F0
0003DB2C 01                         byte_2C590:	dc.b 1
0003DB2D F00F 0019 F0               		dc.b $F0, $F, 0, $19, $F0
0003DB32 01                         byte_2C596:	dc.b 1
0003DB33 F00F 0029 F0               		dc.b $F0, $F, 0, $29, $F0
0003DB38 01                         byte_2C59C:	dc.b 1
0003DB39 F00F 0039 F0               		dc.b $F0, $F, 0, $39, $F0
0003DB3E 01                         byte_2C5A2:	dc.b 1
0003DB3F F00F 0049 F0               		dc.b $F0, $F, 0, $49, $F0
0003DB44 01                         byte_2C5A8:	dc.b 1
0003DB45 F00F 0059 F0               		dc.b $F0, $F, 0, $59, $F0
0003DB4A 01                         byte_2C5AE:	dc.b 1
0003DB4B F00F 0069 F0               		dc.b $F0, $F, 0, $69, $F0
0003DB50 01                         byte_2C5B4:	dc.b 1
0003DB51 F00F 0079 F0               		dc.b $F0, $F, 0, $79, $F0
0003DB56 01                         byte_2C5BA:	dc.b 1
0003DB57 F00F 0089 F0               		dc.b $F0, $F, 0, $89, $F0
0003DB5C 01                         byte_2C5C0:	dc.b 1
0003DB5D F00F 0099 F0               		dc.b $F0, $F, 0, $99, $F0
0003DB62 01                         byte_2C5C6:	dc.b 1
0003DB63 F00F 00A9 F0               		dc.b $F0, $F, 0, $A9, $F0
0003DB68 01                         byte_2C5CC:	dc.b 1
0003DB69 F00F 00B9 F0               		dc.b $F0, $F, 0, $B9, $F0
0003DB6E 01                         byte_2C5D2:	dc.b 1
0003DB6F F00F 00C9 F0               		dc.b $F0, $F, 0, $C9, $F0
0003DB74 01                         byte_2C5D8:	dc.b 1
0003DB75 F00F 00D9 F0               		dc.b $F0, $F, 0, $D9, $F0
0003DB7A 01                         byte_2C5DE:	dc.b 1
0003DB7B F00F 00E9 F0               		dc.b $F0, $F, 0, $E9, $F0
0003DB80                            		even
0003DB80                            		even
0003DB80                            
0003DB80                            ; ---------------------------------------------------------------------------
0003DB80                            ; Compressed graphics - special stage
0003DB80                            ; ---------------------------------------------------------------------------
0003DB80                            Nem_SSWalls:	incbin	"artnem\Special Walls.bin" ; special stage walls
0003E4B8                            		even
0003E4B8                            Eni_SSBg1:	incbin	"tilemaps\SS Background 1.bin" ; special stage background (mappings)
0003E5EC                            		even
0003E5EC                            Nem_SSBgFish:	incbin	"artnem\Special Birds & Fish.bin" ; special stage birds and fish background
0003F27C                            		even
0003F27C                            Eni_SSBg2:	incbin	"tilemaps\SS Background 2.bin" ; special stage background (mappings)
0003F57C                            		even
0003F57C                            Nem_SSBgCloud:	incbin	"artnem\Special Clouds.bin" ; special stage clouds background
0003FA70                            		even
0003FA70                            Nem_SSGOAL:	incbin	"artnem\Special GOAL.bin" ; special stage GOAL block
0003FB5E                            		even
0003FB5E                            Nem_SSRBlock:	incbin	"artnem\Special R.bin"	; special stage R block
0003FC2E                            		even
0003FC2E                            Nem_SS1UpBlock:	incbin	"artnem\Special 1UP.bin" ; special stage 1UP block
0003FD24                            		even
0003FD24                            Nem_SSEmStars:	incbin	"artnem\Special Emerald Twinkle.bin" ; special stage stars from a collected emerald
0003FD82                            		even
0003FD82                            Nem_SSRedWhite:	incbin	"artnem\Special Red-White.bin" ; special stage red/white block
0003FE14                            		even
0003FE14                            Nem_SSZone1:	incbin	"artnem\Special ZONE1.bin" ; special stage ZONE1 block
0003FED6                            		even
0003FED6                            Nem_SSZone2:	incbin	"artnem\Special ZONE2.bin" ; ZONE2 block
0003FFA4                            		even
0003FFA4                            Nem_SSZone3:	incbin	"artnem\Special ZONE3.bin" ; ZONE3 block
00040070                            		even
00040070                            Nem_SSZone4:	incbin	"artnem\Special ZONE4.bin" ; ZONE4 block
00040138                            		even
00040138                            Nem_SSZone5:	incbin	"artnem\Special ZONE5.bin" ; ZONE5 block
00040202                            		even
00040202                            Nem_SSZone6:	incbin	"artnem\Special ZONE6.bin" ; ZONE6 block
000402D2                            		even
000402D2                            Nem_SSUpDown:	incbin	"artnem\Special UP-DOWN.bin" ; special stage UP/DOWN block
000404C6                            		even
000404C6                            Nem_SSEmerald:	incbin	"artnem\Special Emeralds.bin" ; special stage chaos emeralds
0004062E                            		even
0004062E                            Nem_SSGhost:	incbin	"artnem\Special Ghost.bin" ; special stage ghost block
000406DE                            		even
000406DE                            Nem_SSWBlock:	incbin	"artnem\Special W.bin"	; special stage W block
000407B8                            		even
000407B8                            Nem_SSGlass:	incbin	"artnem\Special Glass.bin" ; special stage destroyable glass block
0004083C                            		even
0004083C                            Nem_ResultEm:	incbin	"artnem\Special Result Emeralds.bin" ; chaos emeralds on special stage results screen
000409BA                            		even
000409BA                            ; ---------------------------------------------------------------------------
000409BA                            ; Compressed graphics - GHZ stuff
000409BA                            ; ---------------------------------------------------------------------------
000409BA                            Nem_Stalk:	incbin	"artnem\GHZ Flower Stalk.bin"
00040A1C                            		even
00040A1C                            Nem_Swing:	incbin	"artnem\GHZ Swinging Platform.bin"
00040B36                            		even
00040B36                            Nem_Bridge:	incbin	"artnem\GHZ Bridge.bin"
00040C54                            		even
00040C54                            Nem_GhzUnkBlock:incbin	"artnem\Unused - GHZ Block.bin"
00040C9C                            		even
00040C9C                            Nem_Ball:	incbin	"artnem\GHZ Giant Ball.bin"
00040E3A                            		even
00040E3A                            Nem_Spikes:	incbin	"artnem\Spikes.bin"
00040EB6                            		even
00040EB6                            Nem_GhzLog:	incbin	"artnem\Unused - GHZ Log.bin"
000410CA                            		even
000410CA                            Nem_SpikePole:	incbin	"artnem\GHZ Spiked Log.bin"
000411F6                            		even
000411F6                            Nem_PplRock:	incbin	"artnem\GHZ Purple Rock.bin"
0004134A                            		even
0004134A                            Nem_GhzWall1:	incbin	"artnem\GHZ Breakable Wall.bin"
000413FA                            		even
000413FA                            Nem_GhzWall2:	incbin	"artnem\GHZ Edge Wall.bin"
0004145A                            		even
0004145A                            ; ---------------------------------------------------------------------------
0004145A                            ; Compressed graphics - LZ stuff
0004145A                            ; ---------------------------------------------------------------------------
0004145A                            Nem_Water:	incbin	"artnem\LZ Water Surface.bin"
00041532                            		even
00041532                            Nem_Splash:	incbin	"artnem\LZ Water & Splashes.bin"
00041D26                            		even
00041D26                            Nem_LzSpikeBall:incbin	"artnem\LZ Spiked Ball & Chain.bin"
00041EB8 00                         		even
00041EB8                            Nem_FlapDoor:	incbin	"artnem\LZ Flapping Door.bin"
00042022                            		even
00042022                            Nem_Bubbles:	incbin	"artnem\LZ Bubbles & Countdown.bin"
00042662 00                         		even
00042662                            Nem_LzBlock3:	incbin	"artnem\LZ 32x16 Block.bin"
00042704 00                         		even
00042704                            Nem_LzDoor1:	incbin	"artnem\LZ Vertical Door.bin"
00042788                            		even
00042788                            Nem_Harpoon:	incbin	"artnem\LZ Harpoon.bin"
000428E4                            		even
000428E4                            Nem_LzPole:	incbin	"artnem\LZ Breakable Pole.bin"
0004296A                            		even
0004296A                            Nem_LzDoor2:	incbin	"artnem\LZ Horizontal Door.bin"
00042AD8                            		even
00042AD8                            Nem_LzWheel:	incbin	"artnem\LZ Wheel.bin"
00042FBA                            		even
00042FBA                            Nem_Gargoyle:	incbin	"artnem\LZ Gargoyle & Fireball.bin"
0004312A                            		even
0004312A                            Nem_LzBlock2:	incbin	"artnem\LZ Blocks.bin"
000433E2                            		even
000433E2                            Nem_LzPlatfm:	incbin	"artnem\LZ Rising Platform.bin"
00043528                            		even
00043528                            Nem_Cork:	incbin	"artnem\LZ Cork.bin"
00043652                            		even
00043652                            Nem_LzBlock1:	incbin	"artnem\LZ 32x32 Block.bin"
000437D8 00                         		even
000437D8                            ; ---------------------------------------------------------------------------
000437D8                            ; Compressed graphics - MZ stuff
000437D8                            ; ---------------------------------------------------------------------------
000437D8                            Nem_MzMetal:	incbin	"artnem\MZ Metal Blocks.bin"
00043A66                            		even
00043A66                            Nem_MzSwitch:	incbin	"artnem\MZ Switch.bin"
00043B24                            		even
00043B24                            Nem_MzGlass:	incbin	"artnem\MZ Green Glass Block.bin"
00043BFC                            		even
00043BFC                            Nem_UnkGrass:	incbin	"artnem\Unused - Grass.bin"
00043C50                            		even
00043C50                            Nem_MzFire:	incbin	"artnem\Fireballs.bin"
00043F6E 00                         		even
00043F6E                            Nem_Lava:	incbin	"artnem\MZ Lava.bin"
00044884                            		even
00044884                            Nem_MzBlock:	incbin	"artnem\MZ Green Pushable Block.bin"
00044A1A                            		even
00044A1A                            Nem_MzUnkBlock:	incbin	"artnem\Unused - MZ Background.bin"
00044AA2                            		even
00044AA2                            ; ---------------------------------------------------------------------------
00044AA2                            ; Compressed graphics - SLZ stuff
00044AA2                            ; ---------------------------------------------------------------------------
00044AA2                            Nem_Seesaw:	incbin	"artnem\SLZ Seesaw.bin"
00044CDE                            		even
00044CDE                            Nem_SlzSpike:	incbin	"artnem\SLZ Little Spikeball.bin"
00044E24                            		even
00044E24                            Nem_Fan:	incbin	"artnem\SLZ Fan.bin"
00045068                            		even
00045068                            Nem_SlzWall:	incbin	"artnem\SLZ Breakable Wall.bin"
00045104 00                         		even
00045104                            Nem_Pylon:	incbin	"artnem\SLZ Pylon.bin"
000451E6                            		even
000451E6                            Nem_SlzSwing:	incbin	"artnem\SLZ Swinging Platform.bin"
000453C8                            		even
000453C8                            Nem_SlzBlock:	incbin	"artnem\SLZ 32x32 Block.bin"
000454D4                            		even
000454D4                            Nem_SlzCannon:	incbin	"artnem\SLZ Cannon.bin"
00045578                            		even
00045578                            ; ---------------------------------------------------------------------------
00045578                            ; Compressed graphics - SYZ stuff
00045578                            ; ---------------------------------------------------------------------------
00045578                            Nem_Bumper:	incbin	"artnem\SYZ Bumper.bin"
00045708                            		even
00045708                            Nem_SyzSpike2:	incbin	"artnem\SYZ Small Spikeball.bin"
0004576A                            		even
0004576A                            Nem_LzSwitch:	incbin	"artnem\Switch.bin"
0004583A 00                         		even
0004583A                            Nem_SyzSpike1:	incbin	"artnem\SYZ Large Spikeball.bin"
00045AC8                            		even
00045AC8                            ; ---------------------------------------------------------------------------
00045AC8                            ; Compressed graphics - SBZ stuff
00045AC8                            ; ---------------------------------------------------------------------------
00045AC8                            Nem_SbzWheel1:	incbin	"artnem\SBZ Running Disc.bin"
00045B1C                            		even
00045B1C                            Nem_SbzWheel2:	incbin	"artnem\SBZ Junction Wheel.bin"
00045DB8                            		even
00045DB8                            Nem_Cutter:	incbin	"artnem\SBZ Pizza Cutter.bin"
00045FA8                            		even
00045FA8                            Nem_Stomper:	incbin	"artnem\SBZ Stomper.bin"
00046146                            		even
00046146                            Nem_SpinPform:	incbin	"artnem\SBZ Spinning Platform.bin"
00046476                            		even
00046476                            Nem_TrapDoor:	incbin	"artnem\SBZ Trapdoor.bin"
00046654                            		even
00046654                            Nem_SbzFloor:	incbin	"artnem\SBZ Collapsing Floor.bin"
000466AC                            		even
000466AC                            Nem_Electric:	incbin	"artnem\SBZ Electrocuter.bin"
0004685E 00                         		even
0004685E                            Nem_SbzBlock:	incbin	"artnem\SBZ Vanishing Block.bin"
0004695C                            		even
0004695C                            Nem_FlamePipe:	incbin	"artnem\SBZ Flaming Pipe.bin"
00046AEA                            		even
00046AEA                            Nem_SbzDoor1:	incbin	"artnem\SBZ Small Vertical Door.bin"
00046B84                            		even
00046B84                            Nem_SlideFloor:	incbin	"artnem\SBZ Sliding Floor Trap.bin"
00046BDC                            		even
00046BDC                            Nem_SbzDoor2:	incbin	"artnem\SBZ Large Horizontal Door.bin"
00046CD8                            		even
00046CD8                            Nem_Girder:	incbin	"artnem\SBZ Crushing Girder.bin"
00046DEE                            		even
00046DEE                            ; ---------------------------------------------------------------------------
00046DEE                            ; Compressed graphics - enemies
00046DEE                            ; ---------------------------------------------------------------------------
00046DEE                            Nem_BallHog:	incbin	"artnem\Enemy Ball Hog.bin"
00047236 00                         		even
00047236                            Nem_Crabmeat:	incbin	"artnem\Enemy Crabmeat.bin"
00047726 00                         		even
00047726                            Nem_Mozzietron:	incbin	"artnem\Enemy Mozzietron.bin"
00047A0A 00                         		even
00047A0A                            Nem_Buzz:	incbin	"artnem\Enemy Buzz Bomber.bin"
00047D7E 00                         		even
00047D7E                            Nem_UnkExplode:	incbin	"artnem\Unused - Explosion.bin"
00047F66                            		even
00047F66                            Nem_Burrobot:	incbin	"artnem\Enemy Burrobot.bin"
00048694 00                         		even
00048694                            Nem_Chopper:	incbin	"artnem\Enemy Chopper.bin"
0004891C 00                         		even
0004891C                            Nem_Jaws:	incbin	"artnem\Enemy Jaws.bin"
00048BB8 00                         		even
00048BB8                            Nem_Roller:	incbin	"artnem\Enemy Roller.bin"
0004918C                            		even
0004918C                            Nem_Motobug:	incbin	"artnem\Enemy Motobug.bin"
0004941E                            		even
0004941E                            Nem_Newtron:	incbin	"artnem\Enemy Newtron.bin"
00049A68 00                         		even
00049A68                            Nem_Yadrin:	incbin	"artnem\Enemy Yadrin.bin"
00049EA4                            		even
00049EA4                            Nem_Basaran:	incbin	"artnem\Enemy Basaran.bin"
0004A1B2 00                         		even
0004A1B2                            Nem_Splats:	incbin	"artnem\Enemy Splats.bin"
0004A412                            		even
0004A412                            Nem_Bomb:	incbin	"artnem\Enemy Bomb.bin"
0004A710                            		even
0004A710                            Nem_Orbinaut:	incbin	"artnem\Enemy Orbinaut.bin"
0004A93C 00                         		even
0004A93C                            Nem_Cater:	incbin	"artnem\Enemy Caterkiller.bin"
0004AACA                            		even
0004AACA                            ; ---------------------------------------------------------------------------
0004AACA                            ; Compressed graphics - various
0004AACA                            ; ---------------------------------------------------------------------------
0004AACA                            Nem_TitleCard:	incbin	"artnem\Title Cards.bin"
0004B118 00                         		even
0004B118                            Nem_Hud:	incbin	"artnem\HUD.bin"	; HUD (rings, time, score)
0004B290 00                         		even
0004B290                            Nem_Lives:	incbin	"artnem\HUD - Life Counter Icon.bin"
0004B3B4                            		even
0004B3B4                            Nem_Ring:	incbin	"artnem\Rings.bin"
0004B508 00                         		even
0004B508                            Nem_Monitors:	incbin	"artnem\Monitors.bin"
0004B9B2                            		even
0004B9B2                            Nem_Explode:	incbin	"artnem\Explosion.bin"
0004C026                            		even
0004C026                            Nem_Points:	incbin	"artnem\Points.bin"	; points from destroyed enemy or object
0004C0C0 00                         		even
0004C0C0                            Nem_GameOver:	incbin	"artnem\Game Over.bin"	; game over / time over
0004C252                            		even
0004C252                            Nem_HSpring:	incbin	"artnem\Spring Horizontal.bin"
0004C370 00                         		even
0004C370                            Nem_VSpring:	incbin	"artnem\Spring Vertical.bin"
0004C45C                            		even
0004C45C                            Nem_SignPost:	incbin	"artnem\Signpost.bin"	; end of level signpost
0004C9D4 00                         		even
0004C9D4                            Nem_Lamp:	incbin	"artnem\Lamppost.bin"
0004CABE                            		even
0004CABE                            Nem_BigFlash:	incbin	"artnem\Giant Ring Flash.bin"
0004CC32                            		even
0004CC32                            Nem_Bonus:	incbin	"artnem\Hidden Bonuses.bin" ; hidden bonuses at end of a level
0004CFBA 00                         		even
0004CFBA                            ; ---------------------------------------------------------------------------
0004CFBA                            ; Compressed graphics - continue screen
0004CFBA                            ; ---------------------------------------------------------------------------
0004CFBA                            Nem_ContSonic:	incbin	"artnem\Continue Screen Sonic.bin"
0004D26A                            		even
0004D26A                            Nem_MiniSonic:	incbin	"artnem\Continue Screen Stuff.bin"
0004D4A4                            		even
0004D4A4                            ; ---------------------------------------------------------------------------
0004D4A4                            ; Compressed graphics - animals
0004D4A4                            ; ---------------------------------------------------------------------------
0004D4A4                            Nem_Rabbit:	incbin	"artnem\Animal Rabbit.bin"
0004D5FC                            		even
0004D5FC                            Nem_Chicken:	incbin	"artnem\Animal Chicken.bin"
0004D758                            		even
0004D758                            Nem_BlackBird:	incbin	"artnem\Animal Blackbird.bin"
0004D8D4                            		even
0004D8D4                            Nem_Seal:	incbin	"artnem\Animal Seal.bin"
0004D9F0                            		even
0004D9F0                            Nem_Pig:	incbin	"artnem\Animal Pig.bin"
0004DB6A                            		even
0004DB6A                            Nem_Flicky:	incbin	"artnem\Animal Flicky.bin"
0004DCA4                            		even
0004DCA4                            Nem_Squirrel:	incbin	"artnem\Animal Squirrel.bin"
0004DE00                            		even
0004DE00                            ; ---------------------------------------------------------------------------
0004DE00                            ; Compressed graphics - primary patterns and block mappings
0004DE00                            ; ---------------------------------------------------------------------------
0004DE00                            Blk16_GHZ:	incbin	"map16\GHZ.bin"
0004E802                            		even
0004E802                            Nem_GHZ_1st:	incbin	"artnem\8x8 - GHZ1.bin"	; GHZ primary patterns
000500AA                            		even
000500AA                            Nem_GHZ_2nd:	incbin	"artnem\8x8 - GHZ2.bin"	; GHZ secondary patterns
0005163A                            		even
0005163A                            Blk256_GHZ:	incbin	"map256\GHZ.bin"
00053A24                            		even
00053A24                            Blk16_TS:	incbin	"map16\TS.bin"
00053CA8                            		even
00053CA8                            Nem_TS_1st:	incbin	"artnem\8x8 - TS1.bin"	; GHZ primary patterns
00054DE6                            		even
00054DE6                            Blk256_TS:	incbin	"map256\TS.bin"
00055994                            		even
00055994                            Blk16_LZ:	incbin	"map16\LZ.bin"
00056C10                            		even
00056C10                            Nem_LZ:		incbin	"artnem\8x8 - LZ.bin"	; LZ primary patterns
0005A0E2                            		even
0005A0E2                            Blk256_LZ:	incbin	"map256\LZ.bin"
0005D5A0                            		even
0005D5A0                            Blk16_MZ:	incbin	"map16\MZ.bin"
0005DD8E                            		even
0005DD8E                            Nem_MZ:		incbin	"artnem\8x8 - MZ.bin"	; MZ primary patterns
00060826                            		even
00060826                            		incbin	"map256\MZ (JP1).bin"
000627D0                            		even
000627D0                            Blk16_SLZ:	incbin	"map16\SLZ.bin"
00062E52                            		even
00062E52                            Nem_SLZ:	incbin	"artnem\8x8 - SLZ.bin"	; SLZ primary patterns
000668BC                            		even
000668BC                            Blk256_SLZ:	incbin	"map256\SLZ.bin"
00068CC6                            		even
00068CC6                            Blk16_SYZ:	incbin	"map16\SYZ.bin"
0006984C                            		even
0006984C                            Nem_SYZ:	incbin	"artnem\8x8 - SYZ.bin"	; SYZ primary patterns
0006CC3C                            		even
0006CC3C                            Blk256_SYZ:	incbin	"map256\SYZ.bin"
0006DFEC                            		even
0006DFEC                            Blk16_SBZ:	incbin	"map16\SBZ.bin"
0006EBE6                            		even
0006EBE6                            Nem_SBZ:	incbin	"artnem\8x8 - SBZ.bin"	; SBZ primary patterns
00071428                            		even
00071428                            		incbin	"map256\SBZ (JP1).bin"
00071FB4                            		even
00071FB4                            ; ---------------------------------------------------------------------------
00071FB4                            ; Compressed graphics - bosses and ending sequence
00071FB4                            ; ---------------------------------------------------------------------------
00071FB4                            Nem_Eggman:	incbin	"artnem\Boss - Main.bin"
00072830 00                         		even
00072830                            Nem_Weapons:	incbin	"artnem\Boss - Weapons.bin"
00072B1A                            		even
00072B1A                            Nem_Prison:	incbin	"artnem\Prison Capsule.bin"
0007339E                            		even
0007339E                            Nem_Sbz2Eggman:	incbin	"artnem\Boss - Eggman in SBZ2 & FZ.bin"
00073BCA                            		even
00073BCA                            Nem_FzBoss:	incbin	"artnem\Boss - Final Zone.bin"
00074398 00                         		even
00074398                            Nem_FzEggman:	incbin	"artnem\Boss - Eggman after FZ Fight.bin"
00074918                            		even
00074918                            Nem_Exhaust:	incbin	"artnem\Boss - Exhaust Flame.bin"
00074A38                            		even
00074A38                            Nem_EndEm:	incbin	"artnem\Ending - Emeralds.bin"
00074C40 00                         		even
00074C40                            Nem_EndSonic:	incbin	"artnem\Ending - Sonic.bin"
00075E1E                            		even
00075E1E                            Nem_TryAgain:	incbin	"artnem\Ending - Try Again.bin"
00076762                            		even
00076762                            		even
00076762                            Kos_EndFlowers:	incbin	"artkos\Flowers at Ending.bin" ; ending sequence animated flowers
00076CF2                            		even
00076CF2                            Nem_EndFlower:	incbin	"artnem\Ending - Flowers.bin"
00076F7A                            		even
00076F7A                            Nem_CreditText:	incbin	"artnem\Ending - Credits.bin"
00077578                            		even
00077578                            Nem_EndStH:	incbin	"artnem\Ending - StH Logo.bin"
00077800                            		even
00077800                            
00077800 FFFF FFFF FFFF FFFF FFFF+  		dcb.b $40,$FF
00077840                            ; ---------------------------------------------------------------------------
00077840                            ; Collision data
00077840                            ; ---------------------------------------------------------------------------
00077840                            AngleMap:	incbin	"collide\Angle Map.bin"
00077940                            		even
00077940                            CollArray1:	incbin	"collide\Collision Array (Normal).bin"
00078940                            		even
00078940                            CollArray2:	incbin	"collide\Collision Array (Rotated).bin"
00079940                            		even
00079940                            Col_GHZ:	incbin	"collide\GHZ.bin"	; GHZ index
00079AFE 00                         		even
00079AFE                            Col_LZ:		incbin	"collide\LZ.bin"	; LZ index
00079DBC                            		even
00079DBC                            Col_MZ:		incbin	"collide\MZ.bin"	; MZ index
00079F36 00                         		even
00079F36                            Col_SLZ:	incbin	"collide\SLZ.bin"	; SLZ index
0007A12A                            		even
0007A12A                            Col_SYZ:	incbin	"collide\SYZ.bin"	; SYZ index
0007A316 00                         		even
0007A316                            Col_SBZ:	incbin	"collide\SBZ.bin"	; SBZ index
0007A4E6 00                         		even
0007A4E6                            ; ---------------------------------------------------------------------------
0007A4E6                            ; Special Stage layouts
0007A4E6                            ; ---------------------------------------------------------------------------
0007A4E6                            SS_1:		incbin	"sslayout\1.bin"
0007A760                            		even
0007A760                            SS_2:		incbin	"sslayout\2.bin"
0007AB72                            		even
0007AB72                            SS_3:		incbin	"sslayout\3.bin"
0007AECE                            		even
0007AECE                            SS_4:		incbin	"sslayout\4.bin"
0007B3A8                            		even
0007B3A8                            	SS_5:		incbin	"sslayout\5 (JP1).bin"
0007B858                            			even
0007B858                            	SS_6:		incbin	"sslayout\6 (JP1).bin"
0007BB4A                            		even
0007BB4A                            ; ---------------------------------------------------------------------------
0007BB4A                            ; Animated uncompressed graphics
0007BB4A                            ; ---------------------------------------------------------------------------
0007BB4A                            Art_GhzWater:	incbin	"artunc\GHZ Waterfall.bin"
0007BD4A                            		even
0007BD4A                            Art_GhzFlower1:	incbin	"artunc\GHZ Flower Large.bin"
0007C14A                            		even
0007C14A                            Art_GhzFlower2:	incbin	"artunc\GHZ Flower Small.bin"
0007C5CA                            		even
0007C5CA                            Art_MzLava1:	incbin	"artunc\MZ Lava Surface.bin"
0007C8CA                            		even
0007C8CA                            Art_MzLava2:	incbin	"artunc\MZ Lava.bin"
0007CECA                            		even
0007CECA                            Art_MzTorch:	incbin	"artunc\MZ Background Torch.bin"
0007D1CA                            		even
0007D1CA                            Art_SbzSmoke:	incbin	"artunc\SBZ Background Smoke.bin"
0007DC4A                            		even
0007DC4A                            
0007DC4A                            ; ---------------------------------------------------------------------------
0007DC4A                            ; Level	layout index
0007DC4A                            ; ---------------------------------------------------------------------------
0007DC4A                            Level_Index:
0007DC4A                            		; GHZ
0007DC4A 0000 0000 0000             		dc.w Level_GHZ1-Level_Index, Level_GHZbg-Level_Index, byte_68D70-Level_Index
0007DC50 0000 0000 0000             		dc.w Level_GHZ2-Level_Index, Level_GHZbg-Level_Index, byte_68E3C-Level_Index
0007DC56 0000 0000 0000             		dc.w Level_GHZ3-Level_Index, Level_GHZbg-Level_Index, byte_68F84-Level_Index
0007DC5C 0000 0000 0000             		dc.w byte_68F88-Level_Index, byte_68F88-Level_Index, byte_68F88-Level_Index
0007DC62                            		; LZ
0007DC62 0000 0000 0000             		dc.w Level_LZ1-Level_Index, Level_LZbg-Level_Index, byte_69190-Level_Index
0007DC68 0000 0000 0000             		dc.w Level_LZ2-Level_Index, Level_LZbg-Level_Index, byte_6922E-Level_Index
0007DC6E 0000 0000 0000             		dc.w Level_LZ3-Level_Index, Level_LZbg-Level_Index, byte_6934C-Level_Index
0007DC74 0000 0000 0000             		dc.w Level_SBZ3-Level_Index, Level_LZbg-Level_Index, byte_6940A-Level_Index
0007DC7A                            		; MZ
0007DC7A 0000 0000 0000             		dc.w Level_MZ1-Level_Index, Level_MZ1bg-Level_Index, Level_MZ1-Level_Index
0007DC80 0000 0000 0000             		dc.w Level_MZ2-Level_Index, Level_MZ2bg-Level_Index, byte_6965C-Level_Index
0007DC86 0000 0000 0000             		dc.w Level_MZ3-Level_Index, Level_MZ3bg-Level_Index, byte_697E6-Level_Index
0007DC8C 0000 0000 0000             		dc.w byte_697EA-Level_Index, byte_697EA-Level_Index, byte_697EA-Level_Index
0007DC92                            		; SLZ
0007DC92 0000 0000 0000             		dc.w Level_SLZ1-Level_Index, Level_SLZbg-Level_Index, byte_69B84-Level_Index
0007DC98 0000 0000 0000             		dc.w Level_SLZ2-Level_Index, Level_SLZbg-Level_Index, byte_69B84-Level_Index
0007DC9E 0000 0000 0000             		dc.w Level_SLZ3-Level_Index, Level_SLZbg-Level_Index, byte_69B84-Level_Index
0007DCA4 0000 0000 0000             		dc.w byte_69B84-Level_Index, byte_69B84-Level_Index, byte_69B84-Level_Index
0007DCAA                            		; SYZ
0007DCAA 0000 0000 0000             		dc.w Level_SYZ1-Level_Index, Level_SYZbg-Level_Index, byte_69C7E-Level_Index
0007DCB0 0000 0000 0000             		dc.w Level_SYZ2-Level_Index, Level_SYZbg-Level_Index, byte_69D86-Level_Index
0007DCB6 0000 0000 0000             		dc.w Level_SYZ3-Level_Index, Level_SYZbg-Level_Index, byte_69EE4-Level_Index
0007DCBC 0000 0000 0000             		dc.w byte_69EE8-Level_Index, byte_69EE8-Level_Index, byte_69EE8-Level_Index
0007DCC2                            		; SBZ
0007DCC2 0000 0000 0000             		dc.w Level_SBZ1-Level_Index, Level_SBZ1bg-Level_Index, Level_SBZ1bg-Level_Index
0007DCC8 0000 0000 0000             		dc.w Level_SBZ2-Level_Index, Level_SBZ2bg-Level_Index, Level_SBZ2bg-Level_Index
0007DCCE 0000 0000 0000             		dc.w Level_SBZ2-Level_Index, Level_SBZ2bg-Level_Index, byte_6A2F8-Level_Index
0007DCD4 0000 0000 0000             		dc.w byte_6A2FC-Level_Index, byte_6A2FC-Level_Index, byte_6A2FC-Level_Index
0007DCDA                            		; Ending
0007DCDA 0000 0000 0000             		dc.w Level_End-Level_Index, Level_GHZbg-Level_Index, byte_6A320-Level_Index
0007DCE0 0000 0000 0000             		dc.w Level_End-Level_Index, Level_GHZbg-Level_Index, byte_6A320-Level_Index
0007DCE6 0000 0000 0000             		dc.w byte_6A320-Level_Index, byte_6A320-Level_Index, byte_6A320-Level_Index
0007DCEC 0000 0000 0000             		dc.w byte_6A320-Level_Index, byte_6A320-Level_Index, byte_6A320-Level_Index
0007DCF2                            
0007DCF2                            Level_GHZ1:	incbin	"levels\ghz1.bin"
0007DF24                            		even
0007DF24 0000 0000                  byte_68D70:	dc.b 0,	0, 0, 0
0007DF28                            Level_GHZ2:	incbin	"levels\ghz2.bin"
0007E04A                            		even
0007E04A 0000 0000                  byte_68E3C:	dc.b 0,	0, 0, 0
0007E04E                            Level_GHZ3:	incbin	"levels\ghz3.bin"
0007E2D0                            		even
0007E2D0                            Level_GHZbg:	incbin	"levels\ghzbg.bin"
0007E312                            		even
0007E312 0000 0000                  byte_68F84:	dc.b 0,	0, 0, 0
0007E316 0000 0000                  byte_68F88:	dc.b 0,	0, 0, 0
0007E31A                            
0007E31A                            Level_LZ1:	incbin	"levels\lz1.bin"
0007E3DC                            		even
0007E3DC                            Level_LZbg:	incbin	"levels\lzbg.bin"
0007E4DE                            		even
0007E4DE 0000 0000                  byte_69190:	dc.b 0,	0, 0, 0
0007E4E2                            Level_LZ2:	incbin	"levels\lz2.bin"
0007E57C                            		even
0007E57C 0000 0000                  byte_6922E:	dc.b 0,	0, 0, 0
0007E580                            Level_LZ3:	incbin	"levels\lz3.bin"
0007E69A                            		even
0007E69A 0000 0000                  byte_6934C:	dc.b 0,	0, 0, 0
0007E69E                            Level_SBZ3:	incbin	"levels\sbz3.bin"
0007E758                            		even
0007E758 0000 0000                  byte_6940A:	dc.b 0,	0, 0, 0
0007E75C                            
0007E75C                            Level_MZ1:	incbin	"levels\mz1.bin"
0007E84E                            		even
0007E84E                            Level_MZ1bg:	incbin	"levels\mz1bg.bin"
0007E970                            		even
0007E970                            Level_MZ2:	incbin	"levels\mz2.bin"
0007EA62                            		even
0007EA62                            Level_MZ2bg:	incbin	"levels\mz2bg.bin"
0007EB84                            		even
0007EB84 0000 0000                  byte_6965C:	dc.b 0,	0, 0, 0
0007EB88                            Level_MZ3:	incbin	"levels\mz3.bin"
0007EBFA                            		even
0007EBFA                            Level_MZ3bg:	incbin	"levels\mz3bg.bin"
0007ED1C                            		even
0007ED1C 0000 0000                  byte_697E6:	dc.b 0,	0, 0, 0
0007ED20 0000 0000                  byte_697EA:	dc.b 0,	0, 0, 0
0007ED24                            
0007ED24                            Level_SLZ1:	incbin	"levels\slz1.bin"
0007EE36                            		even
0007EE36                            Level_SLZbg:	incbin	"levels\slzbg.bin"
0007EEB0                            		even
0007EEB0                            Level_SLZ2:	incbin	"levels\slz2.bin"
0007EFA0                            		even
0007EFA0                            Level_SLZ3:	incbin	"levels\slz3.bin"
0007F0BA                            		even
0007F0BA 0000 0000                  byte_69B84:	dc.b 0,	0, 0, 0
0007F0BE                            
0007F0BE                            Level_SYZ1:	incbin	"levels\syz1.bin"
0007F1C2                            		even
0007F1C2                            		incbin	"levels\syzbg (JP1).bin"
0007F1FC                            		even
0007F1FC 0000 0000                  byte_69C7E:	dc.b 0,	0, 0, 0
0007F200                            Level_SYZ2:	incbin	"levels\syz2.bin"
0007F304                            		even
0007F304 0000 0000                  byte_69D86:	dc.b 0,	0, 0, 0
0007F308                            Level_SYZ3:	incbin	"levels\syz3.bin"
0007F462 00                         		even
0007F462 0000 0000                  byte_69EE4:	dc.b 0,	0, 0, 0
0007F466 0000 0000                  byte_69EE8:	dc.b 0,	0, 0, 0
0007F46A                            
0007F46A                            Level_SBZ1:	incbin	"levels\sbz1.bin"
0007F58C                            		even
0007F58C                            Level_SBZ1bg:	incbin	"levels\sbz1bg.bin"
0007F5CA                            		even
0007F5CA                            Level_SBZ2:	incbin	"levels\sbz2.bin"
0007F70C                            		even
0007F70C                            Level_SBZ2bg:	incbin	"levels\sbz2bg.bin"
0007F876                            		even
0007F876 0000 0000                  byte_6A2F8:	dc.b 0,	0, 0, 0
0007F87A 0000 0000                  byte_6A2FC:	dc.b 0,	0, 0, 0
0007F87E                            Level_End:	incbin	"levels\ending.bin"
0007F8AE 00                         		even
0007F8AE 0000 0000                  byte_6A320:	dc.b 0,	0, 0, 0
0007F8B2                            
0007F8B2                            
0007F8B2                            Art_BigRing:	incbin	"artunc\Giant Ring.bin"
000804F2                            		even
000804F2                            
00080500                            
00080500                            ; ---------------------------------------------------------------------------
00080500                            ; Sprite locations index
00080500                            ; ---------------------------------------------------------------------------
00080500                            ObjPos_Index:
00080500                            		; GHZ
00080500 0000 0000                  		dc.w ObjPos_GHZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00080504 0000 0000                  		dc.w ObjPos_GHZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
00080508 0000 0000                  		dc.w ObjPos_GHZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
0008050C 0000 0000                  		dc.w ObjPos_GHZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00080510                            		; LZ
00080510 0000 0000                  		dc.w ObjPos_LZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00080514 0000 0000                  		dc.w ObjPos_LZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
00080518 0000 0000                  		dc.w ObjPos_LZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
0008051C 0000 0000                  		dc.w ObjPos_SBZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
00080520                            		; MZ
00080520 0000 0000                  		dc.w ObjPos_MZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00080524 0000 0000                  		dc.w ObjPos_MZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
00080528 0000 0000                  		dc.w ObjPos_MZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
0008052C 0000 0000                  		dc.w ObjPos_MZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00080530                            		; SLZ
00080530 0000 0000                  		dc.w ObjPos_SLZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00080534 0000 0000                  		dc.w ObjPos_SLZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
00080538 0000 0000                  		dc.w ObjPos_SLZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
0008053C 0000 0000                  		dc.w ObjPos_SLZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00080540                            		; SYZ
00080540 0000 0000                  		dc.w ObjPos_SYZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00080544 0000 0000                  		dc.w ObjPos_SYZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
00080548 0000 0000                  		dc.w ObjPos_SYZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
0008054C 0000 0000                  		dc.w ObjPos_SYZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00080550                            		; SBZ
00080550 0000 0000                  		dc.w ObjPos_SBZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00080554 0000 0000                  		dc.w ObjPos_SBZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
00080558 0000 0000                  		dc.w ObjPos_FZ-ObjPos_Index, ObjPos_Null-ObjPos_Index
0008055C 0000 0000                  		dc.w ObjPos_SBZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00080560                            		; Ending
00080560 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
00080564 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
00080568 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
0008056C 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
00080570                            		; --- Put extra object data here. ---
00080570                            ObjPosLZPlatform_Index:
00080570 0000 0000                  		dc.w ObjPos_LZ1pf1-ObjPos_Index, ObjPos_LZ1pf2-ObjPos_Index
00080574 0000 0000                  		dc.w ObjPos_LZ2pf1-ObjPos_Index, ObjPos_LZ2pf2-ObjPos_Index
00080578 0000 0000                  		dc.w ObjPos_LZ3pf1-ObjPos_Index, ObjPos_LZ3pf2-ObjPos_Index
0008057C 0000 0000                  		dc.w ObjPos_LZ1pf1-ObjPos_Index, ObjPos_LZ1pf2-ObjPos_Index
00080580                            ObjPosSBZPlatform_Index:
00080580 0000 0000                  		dc.w ObjPos_SBZ1pf1-ObjPos_Index, ObjPos_SBZ1pf2-ObjPos_Index
00080584 0000 0000                  		dc.w ObjPos_SBZ1pf3-ObjPos_Index, ObjPos_SBZ1pf4-ObjPos_Index
00080588 0000 0000                  		dc.w ObjPos_SBZ1pf5-ObjPos_Index, ObjPos_SBZ1pf6-ObjPos_Index
0008058C 0000 0000                  		dc.w ObjPos_SBZ1pf1-ObjPos_Index, ObjPos_SBZ1pf2-ObjPos_Index
00080590 FFFF 0000 0000             		dc.b $FF, $FF, 0, 0, 0,	0
00080596                            ObjPos_GHZ1:	incbin	"objpos\ghz1.bin"
00080BF6                            		even
00080BF6                            ObjPos_GHZ2:	incbin	"objpos\ghz2.bin"
00081046                            		even
00081046                            		incbin	"objpos\ghz3 (JP1).bin"
00081256                            		even
00081256                            		incbin	"objpos\lz1 (JP1).bin"
0008128C                            		even
0008128C                            ObjPos_LZ2:	incbin	"objpos\lz2.bin"
000815CE                            		even
000815CE                            		incbin	"objpos\lz3 (JP1).bin"
00081B92                            		even
00081B92                            ObjPos_SBZ3:	incbin	"objpos\sbz3.bin"
00082222                            		even
00082222                            ObjPos_LZ1pf1:	incbin	"objpos\lz1pf1.bin"
00082254                            		even
00082254                            ObjPos_LZ1pf2:	incbin	"objpos\lz1pf2.bin"
00082286                            		even
00082286                            ObjPos_LZ2pf1:	incbin	"objpos\lz2pf1.bin"
000822B8                            		even
000822B8                            ObjPos_LZ2pf2:	incbin	"objpos\lz2pf2.bin"
000822EA                            		even
000822EA                            ObjPos_LZ3pf1:	incbin	"objpos\lz3pf1.bin"
00082334                            		even
00082334                            ObjPos_LZ3pf2:	incbin	"objpos\lz3pf2.bin"
00082372                            		even
00082372                            		incbin	"objpos\mz1 (JP1).bin"
00082954                            		even
00082954                            ObjPos_MZ2:	incbin	"objpos\mz2.bin"
00082D32                            		even
00082D32                            ObjPos_MZ3:	incbin	"objpos\mz3.bin"
00082F84                            		even
00082F84                            ObjPos_SLZ1:	incbin	"objpos\slz1.bin"
000834B8                            		even
000834B8                            ObjPos_SLZ2:	incbin	"objpos\slz2.bin"
00083926                            		even
00083926                            ObjPos_SLZ3:	incbin	"objpos\slz3.bin"
00083F08                            		even
00083F08                            ObjPos_SYZ1:	incbin	"objpos\syz1.bin"
00083F62                            		even
00083F62                            ObjPos_SYZ2:	incbin	"objpos\syz2.bin"
00083F8C                            		even
00083F8C                            		incbin	"objpos\syz3 (JP1).bin"
00083FBC                            		even
00083FBC                            		incbin	"objpos\sbz1 (JP1).bin"
00084004                            		even
00084004                            ObjPos_SBZ2:	incbin	"objpos\sbz2.bin"
0008402E                            		even
0008402E                            ObjPos_FZ:	incbin	"objpos\fz.bin"
0008406A                            		even
0008406A                            ObjPos_SBZ1pf1:	incbin	"objpos\sbz1pf1.bin"
0008409C                            		even
0008409C                            ObjPos_SBZ1pf2:	incbin	"objpos\sbz1pf2.bin"
000840CE                            		even
000840CE                            ObjPos_SBZ1pf3:	incbin	"objpos\sbz1pf3.bin"
00084100                            		even
00084100                            ObjPos_SBZ1pf4:	incbin	"objpos\sbz1pf4.bin"
00084132                            		even
00084132                            ObjPos_SBZ1pf5:	incbin	"objpos\sbz1pf5.bin"
00084164                            		even
00084164                            ObjPos_SBZ1pf6:	incbin	"objpos\sbz1pf6.bin"
0008419C                            		even
0008419C                            ObjPos_End:	incbin	"objpos\ending.bin"
000842F8                            		even
000842F8 FFFF 0000 0000             ObjPos_Null:	dc.b $FF, $FF, 0, 0, 0,	0
000842FE                            
000842FE                            		dcb.b $63C,$FF
0008493A                            		;dcb.b ($10000-(*%$10000))-(EndOfRom-SoundDriver),$FF
0008493A                            
0008493A                            SoundDriver:	include "s1.sounddriver.asm"
0008493A                            ; ---------------------------------------------------------------------------
0008493A                            ; Modified (early?) SMPS 68k Type 1b
0008493A                            ; ---------------------------------------------------------------------------
0008493A                            ; Go_SoundTypes:
0008493A 0000 0000                  Go_SoundPriorities:	dc.l SoundPriorities
0008493E                            ; Go_SoundD0:
0008493E 0000 0000                  Go_SpecSoundIndex:	dc.l SpecSoundIndex
00084942 0000 0000                  Go_MusicIndex:		dc.l MusicIndex
00084946 0000 0000                  Go_SoundIndex:		dc.l SoundIndex
0008494A                            ; off_719A0:
0008494A 0000 0000                  Go_SpeedUpIndex:	dc.l SpeedUpIndex
0008494E 0000 0000                  Go_PSGIndex:		dc.l PSG_Index
00084952                            ; ---------------------------------------------------------------------------
00084952                            ; PSG instruments used in music
00084952                            ; ---------------------------------------------------------------------------
00084952                            PSG_Index:
00084952 0000 0000 0000 0000 0000+  		dc.l PSG1, PSG2, PSG3
0008495E 0000 0000 0000 0000 0000+  		dc.l PSG4, PSG5, PSG6
0008496A 0000 0000 0000 0000 0000+  		dc.l PSG7, PSG8, PSG9
00084976                            PSG1:		incbin	"sound/psg/psg1.bin"
0008498D                            PSG2:		incbin	"sound/psg/psg2.bin"
00084994                            PSG3:		incbin	"sound/psg/psg3.bin"
000849A5                            PSG4:		incbin	"sound/psg/psg4.bin"
000849B0                            PSG6:		incbin	"sound/psg/psg6.bin"
000849BF                            PSG5:		incbin	"sound/psg/psg5.bin"
000849E9                            PSG7:		incbin	"sound/psg/psg7.bin"
00084A05                            PSG8:		incbin	"sound/psg/psg8.bin"
00084A2D                            PSG9:		incbin	"sound/psg/psg9.bin"
00084A3E                            ; ---------------------------------------------------------------------------
00084A3E                            ; New tempos for songs during speed shoes
00084A3E                            ; ---------------------------------------------------------------------------
00084A3E                            ; DANGER! several songs will use the first few bytes of MusicIndex as their main
00084A3E                            ; tempos while speed shoes are active. If you don't want that, you should add
00084A3E                            ; their "correct" sped-up main tempos to the list.
00084A3E                            ; byte_71A94:
00084A3E                            SpeedUpIndex:
00084A3E 07                         		dc.b 7		; GHZ
00084A3F 72                         		dc.b $72	; LZ
00084A40 73                         		dc.b $73	; MZ
00084A41 26                         		dc.b $26	; SLZ
00084A42 15                         		dc.b $15	; SYZ
00084A43 08                         		dc.b 8		; SBZ
00084A44 FF                         		dc.b $FF	; Invincibility
00084A45 05                         		dc.b 5		; Extra Life
00084A46                            		;dc.b ?		; Special Stage
00084A46                            		;dc.b ?		; Title Screen
00084A46                            		;dc.b ?		; Ending
00084A46                            		;dc.b ?		; Boss
00084A46                            		;dc.b ?		; FZ
00084A46                            		;dc.b ?		; Sonic Got Through
00084A46                            		;dc.b ?		; Game Over
00084A46                            		;dc.b ?		; Continue Screen
00084A46                            		;dc.b ?		; Credits
00084A46                            		;dc.b ?		; Drowning
00084A46                            		;dc.b ?		; Get Emerald
00084A46                            
00084A46                            ; ---------------------------------------------------------------------------
00084A46                            ; Music	Pointers
00084A46                            ; ---------------------------------------------------------------------------
00084A46                            MusicIndex:
00084A46 0000 0000                  ptr_mus81:	dc.l Music81
00084A4A 0000 0000                  ptr_mus82:	dc.l Music82
00084A4E 0000 0000                  ptr_mus83:	dc.l Music83
00084A52 0000 0000                  ptr_mus84:	dc.l Music84
00084A56 0000 0000                  ptr_mus85:	dc.l Music85
00084A5A 0000 0000                  ptr_mus86:	dc.l Music86
00084A5E 0000 0000                  ptr_mus87:	dc.l Music87
00084A62 0000 0000                  ptr_mus88:	dc.l Music88
00084A66 0000 0000                  ptr_mus89:	dc.l Music89
00084A6A 0000 0000                  ptr_mus8A:	dc.l Music8A
00084A6E 0000 0000                  ptr_mus8B:	dc.l Music8B
00084A72 0000 0000                  ptr_mus8C:	dc.l Music8C
00084A76 0000 0000                  ptr_mus8D:	dc.l Music8D
00084A7A 0000 0000                  ptr_mus8E:	dc.l Music8E
00084A7E 0000 0000                  ptr_mus8F:	dc.l Music8F
00084A82 0000 0000                  ptr_mus90:	dc.l Music90
00084A86 0000 0000                  ptr_mus91:	dc.l Music91
00084A8A 0000 0000                  ptr_mus92:	dc.l Music92
00084A8E 0000 0000                  ptr_mus93:	dc.l Music93
00084A92 0000 0000                  ptr_mus94:	dc.l Music94
00084A96 0000 0000                  ptr_mus95:	dc.l Music95
00084A9A 0000 0000                  ptr_mus96:	dc.l Music96
00084A9E 0000 0000                  ptr_mus97:	dc.l Music97
00084AA2 0000 0000                  ptr_mus98:	dc.l Music98
00084AA6                            ptr_musend
00084AA6                            ; ---------------------------------------------------------------------------
00084AA6                            ; Priority of sound. New music or SFX must have a priority higher than or equal
00084AA6                            ; to what is stored in v_sndprio or it won't play. If bit 7 of new priority is
00084AA6                            ; set ($80 and up), the new music or SFX will not set its priority -- meaning
00084AA6                            ; any music or SFX can override it (as long as it can override whatever was
00084AA6                            ; playing before). Usually, SFX will only override SFX, special SFX ($D0-$DF)
00084AA6                            ; will only override special SFX and music will only override music.
00084AA6                            ; ---------------------------------------------------------------------------
00084AA6                            ; SoundTypes:
00084AA6                            SoundPriorities:
00084AA6 9090 9090 9090 9090 9090+  		dc.b     $90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90	; $81
00084AB5 9090 9090 9090 9090 9090+  		dc.b $90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90	; $90
00084AC5 8070 7070 7070 7070 7070+  		dc.b $80,$70,$70,$70,$70,$70,$70,$70,$70,$70,$68,$70,$70,$70,$60,$70	; $A0
00084AD5 7060 7060 7070 7070 7070+  		dc.b $70,$60,$70,$60,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70,$7F	; $B0
00084AE5 6070 7070 7070 7070 7070+  		dc.b $60,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70	; $C0
00084AF5 8080 8080 8080 8080 8080+  		dc.b $80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80	; $D0
00084B05 9090 9090 90               		dc.b $90,$90,$90,$90,$90                                            	; $E0
00084B0A                            
00084B0A                            ; ---------------------------------------------------------------------------
00084B0A                            ; Subroutine to update music more than once per frame
00084B0A                            ; (Called by horizontal & vert. interrupts)
00084B0A                            ; ---------------------------------------------------------------------------
00084B0A                            
00084B0A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00084B0A                            
00084B0A                            ; sub_71B4C:
00084B0A                            UpdateMusic:
00084B0A 33FC 0100 00A1 1100        		stopZ80
00084B12 4E71                       		nop	
00084B14 4E71                       		nop	
00084B16 4E71                       		nop	
00084B18                            ; loc_71B5A:
00084B18                            @updateloop:
00084B18 0839 0000 00A1 1100        		btst	#0,(z80_bus_request).l		; Is the z80 busy?
00084B20 66F6                       		bne.s	@updateloop			; If so, wait
00084B22                            
00084B22 0839 0007 00A0 1FFD        		btst	#7,(z80_dac_status).l		; Is DAC accepting new samples?
00084B2A 6700                       		beq.s	@driverinput			; Branch if yes
00084B2C 33FC 0000 00A1 1100        		startZ80
00084B34 4E71                       		nop	
00084B36 4E71                       		nop	
00084B38 4E71                       		nop	
00084B3A 4E71                       		nop	
00084B3C 4E71                       		nop	
00084B3E 60CA                       		bra.s	UpdateMusic
00084B40                            ; ===========================================================================
00084B40                            ; loc_71B82:
00084B40                            @driverinput:
00084B40 4DF9 00FF F000             		lea	(v_snddriver_ram&$FFFFFF).l,a6
00084B46 422E 000E                  		clr.b	f_voice_selector(a6)
00084B4A 4A2E 0003                  		tst.b	f_pausemusic(a6)		; is music paused?
00084B4E 6600 0000                  		bne.w	PauseMusic			; if yes, branch
00084B52 532E 0001                  		subq.b	#1,v_main_tempo_timeout(a6)	; Has main tempo timer expired?
00084B56 6600                       		bne.s	@skipdelay
00084B58 4EBA 0000                  		jsr	TempoWait(pc)
00084B5C                            ; loc_71B9E:
00084B5C                            @skipdelay:
00084B5C 102E 0004                  		move.b	v_fadeout_counter(a6),d0
00084B60 6700                       		beq.s	@skipfadeout
00084B62 4EBA 0000                  		jsr	DoFadeOut(pc)
00084B66                            ; loc_71BA8:
00084B66                            @skipfadeout:
00084B66 4A2E 0024                  		tst.b	f_fadein_flag(a6)
00084B6A 6700                       		beq.s	@skipfadein
00084B6C 4EBA 0000                  		jsr	DoFadeIn(pc)
00084B70                            ; loc_71BB2:
00084B70                            @skipfadein:
00084B70                            		; DANGER! The following line only checks v_soundqueue0 and v_soundqueue1, breaking v_soundqueue2.
00084B70 4A6E 000A                  		tst.w	v_soundqueue0(a6)	; is a music or sound queued for played?
00084B74 6700                       		beq.s	@nosndinput		; if not, branch
00084B76 4EBA 0000                  		jsr	CycleSoundQueue(pc)
00084B7A                            ; loc_71BBC:
00084B7A                            @nosndinput:
00084B7A 0C2E 0080 0009             		cmpi.b	#$80,v_sound_id(a6)	; is song queue set for silence (empty)?
00084B80 6700                       		beq.s	@nonewsound		; If yes, branch
00084B82 4EBA 0000                  		jsr	PlaySoundID(pc)
00084B86                            ; loc_71BC8:
00084B86                            @nonewsound:
00084B86 4A38 C901                  		tst.b	($FFFFC901).w
00084B8A 6700                       		beq.s	@cont
00084B8C 5338 C901                  		subq.b	#1,($FFFFC901).w
00084B90                            		
00084B90                            @cont:
00084B90 4BEE 0040                  		lea	v_music_dac_track(a6),a5
00084B94 4A15                       		tst.b	(a5)			; Is DAC track playing? (TrackPlaybackControl)
00084B96 6A00                       		bpl.s	@dacdone		; Branch if not
00084B98 4EBA 0000                  		jsr	DACUpdateTrack(pc)
00084B9C                            ; loc_71BD4:
00084B9C                            @dacdone:
00084B9C 422E 0008                  		clr.b	f_updating_dac(a6)
00084BA0 7E05                       		moveq	#((v_music_fm_tracks_end-v_music_fm_tracks)/TrackSz)-1,d7	; 6 FM tracks
00084BA2                            ; loc_71BDA:
00084BA2                            @bgmfmloop:
00084BA2 DAFC 0030                  		adda.w	#TrackSz,a5
00084BA6 4A15                       		tst.b	(a5)			; Is track playing? (TrackPlaybackControl)
00084BA8 6A00                       		bpl.s	@bgmfmnext		; Branch if not
00084BAA 4EBA 0000                  		jsr	FMUpdateTrack(pc)
00084BAE                            ; loc_71BE6:
00084BAE                            @bgmfmnext:
00084BAE 51CF FFF2                  		dbf	d7,@bgmfmloop
00084BB2                            
00084BB2 7E02                       		moveq	#((v_music_psg_tracks_end-v_music_psg_tracks)/TrackSz)-1,d7 ; 3 PSG tracks
00084BB4                            ; loc_71BEC:
00084BB4                            @bgmpsgloop:
00084BB4 DAFC 0030                  		adda.w	#TrackSz,a5
00084BB8 4A15                       		tst.b	(a5)			; Is track playing? (TrackPlaybackControl)
00084BBA 6A00                       		bpl.s	@bgmpsgnext		; Branch if not
00084BBC 4EBA 0000                  		jsr	PSGUpdateTrack(pc)
00084BC0                            ; loc_71BF8:
00084BC0                            @bgmpsgnext:
00084BC0 51CF FFF2                  		dbf	d7,@bgmpsgloop
00084BC4                            
00084BC4 1D7C 0080 000E             		move.b	#$80,f_voice_selector(a6)			; Now at SFX tracks
00084BCA 7E02                       		moveq	#((v_sfx_fm_tracks_end-v_sfx_fm_tracks)/TrackSz)-1,d7	; 3 FM tracks (SFX)
00084BCC                            ; loc_71C04:
00084BCC                            @sfxfmloop:
00084BCC DAFC 0030                  		adda.w	#TrackSz,a5
00084BD0 4A15                       		tst.b	(a5)			; Is track playing? (TrackPlaybackControl)
00084BD2 6A00                       		bpl.s	@sfxfmnext		; Branch if not
00084BD4 4EBA 0000                  		jsr	FMUpdateTrack(pc)
00084BD8                            ; loc_71C10:
00084BD8                            @sfxfmnext:
00084BD8 51CF FFF2                  		dbf	d7,@sfxfmloop
00084BDC                            
00084BDC 7E02                       		moveq	#((v_sfx_psg_tracks_end-v_sfx_psg_tracks)/TrackSz)-1,d7 ; 3 PSG tracks (SFX)
00084BDE                            ; loc_71C16:
00084BDE                            @sfxpsgloop:
00084BDE DAFC 0030                  		adda.w	#TrackSz,a5
00084BE2 4A15                       		tst.b	(a5)			; Is track playing? (TrackPlaybackControl)
00084BE4 6A00                       		bpl.s	@sfxpsgnext		; Branch of not
00084BE6 4EBA 0000                  		jsr	PSGUpdateTrack(pc)
00084BEA                            ; loc_71C22:
00084BEA                            @sfxpsgnext:
00084BEA 51CF FFF2                  		dbf	d7,@sfxpsgloop
00084BEE                            		
00084BEE 1D7C 0040 000E             		move.b	#$40,f_voice_selector(a6) ; Now at special SFX tracks
00084BF4 DAFC 0030                  		adda.w	#TrackSz,a5
00084BF8 4A15                       		tst.b	(a5)			; Is track playing? (TrackPlaybackControl)
00084BFA 6A00                       		bpl.s	@specfmdone		; Branch if not
00084BFC 4EBA 0000                  		jsr	FMUpdateTrack(pc)
00084C00                            ; loc_71C38:
00084C00                            @specfmdone:
00084C00 DAFC 0030                  		adda.w	#TrackSz,a5
00084C04 4A15                       		tst.b	(a5)			; Is track playing (TrackPlaybackControl)
00084C06 6A00                       		bpl.s	DoStartZ80		; Branch if not
00084C08 4EBA 0000                  		jsr	PSGUpdateTrack(pc)
00084C0C                            ; loc_71C44:
00084C0C                            DoStartZ80:
00084C0C 33FC 0000 00A1 1100        		startZ80
00084C14 0838 0006 FFF8             		btst #6,(v_megadrive).w ; is Megadrive PAL?
00084C1A 6700                       		beq.s @end ; if not, branch
00084C1C 0C38 0005 F015             		cmpi.b #$5,(v_palmuscounter).w ; 5th frame?
00084C22 6600                       		bne.s @end ; if not, branch
00084C24 11FC 0000 F015             		move.b #$0,(v_palmuscounter).w ; reset counter
00084C2A 6000 FEDE                  		bra.w UpdateMusic ; run sound driver again
00084C2E                            
00084C2E                            	@end:
00084C2E 5238 F015                  		addq.b #$1,(v_palmuscounter).w ; add 1 to frame count
00084C32 4E75                       		rts
00084C34                            ; End of function UpdateMusic
00084C34                            
00084C34                            
00084C34                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00084C34                            
00084C34                            ; sub_71C4E: UpdateDAC:
00084C34                            DACUpdateTrack:
00084C34 532D 000E                  		subq.b	#1,TrackDurationTimeout(a5)	; Has DAC sample timeout expired?
00084C38 6600                       		bne.s	@locret				; Return if not
00084C3A 1D7C 0080 0008             		move.b	#$80,f_updating_dac(a6)		; Set flag to indicate this is the DAC
00084C40                            ;DACDoNext:
00084C40 286D 0004                  		movea.l	TrackDataPointer(a5),a4	; DAC track data pointer
00084C44                            ; loc_71C5E:
00084C44                            @sampleloop:
00084C44 7A00                       		moveq	#0,d5
00084C46 1A1C                       		move.b	(a4)+,d5	; Get next SMPS unit
00084C48 0C05 00E0                  		cmpi.b	#$E0,d5		; Is it a coord. flag?
00084C4C 6500                       		blo.s	@notcoord	; Branch if not
00084C4E 4EBA 0000                  		jsr	CoordFlag(pc)
00084C52 60F0                       		bra.s	@sampleloop
00084C54                            ; ===========================================================================
00084C54                            ; loc_71C6E:
00084C54                            @notcoord:
00084C54 4A05                       		tst.b	d5			; Is it a sample?
00084C56 6A00                       		bpl.s	@gotduration		; Branch if not (duration)
00084C58 1B45 0010                  		move.b	d5,TrackSavedDAC(a5)	; Store new sample
00084C5C 1A1C                       		move.b	(a4)+,d5		; Get another byte
00084C5E 6A00                       		bpl.s	@gotduration		; Branch if it is a duration
00084C60 534C                       		subq.w	#1,a4			; Put byte back
00084C62 1B6D 000F 000E             		move.b	TrackSavedDuration(a5),TrackDurationTimeout(a5) ; Use last duration
00084C68 6000                       		bra.s	@gotsampleduration
00084C6A                            ; ===========================================================================
00084C6A                            ; loc_71C84:
00084C6A                            @gotduration:
00084C6A 4EBA 0000                  		jsr	SetDuration(pc)
00084C6E                            ; loc_71C88:
00084C6E                            @gotsampleduration:
00084C6E 2B4C 0004                  		move.l	a4,TrackDataPointer(a5) ; Save pointer
00084C72 0815 0002                  		btst	#2,(a5)			; Is track being overridden? (TrackPlaybackControl)
00084C76 6600                       		bne.s	@locret			; Return if yes
00084C78 7000                       		moveq	#0,d0
00084C7A 102D 0010                  		move.b	TrackSavedDAC(a5),d0	; Get sample
00084C7E 0C00 0080                  		cmpi.b	#$80,d0			; Is it a rest?
00084C82 6700                       		beq.s	@locret			; Return if yes
00084C84 0800 0003                  		btst	#3,d0			; Is bit 3 set (samples between $88-$8F)?
00084C88 6600                       		bne.s	@timpani		; Various timpani
00084C8A 13C0 00A0 1FFF             		move.b	d0,(z80_dac_sample).l
00084C90                            ; locret_71CAA:
00084C90                            @locret:
00084C90 4E75                       		rts	
00084C92                            ; ===========================================================================
00084C92                            ; loc_71CAC:
00084C92                            @timpani:
00084C92 0400 0088                  		subi.b	#$88,d0		; Convert into an index
00084C96 103B 0000                  		move.b	DAC_sample_rate(pc,d0.w),d0
00084C9A                            		; Warning: this affects the raw pitch of sample $83, meaning it will
00084C9A                            		; use this value from then on.
00084C9A 13C0 00A0 00EA             		move.b	d0,(z80_dac3_pitch).l
00084CA0 13FC 0083 00A0 1FFF        		move.b	#$83,(z80_dac_sample).l	; Use timpani
00084CA8 4E75                       		rts	
00084CAA                            ; End of function DACUpdateTrack
00084CAA                            
00084CAA                            ; ===========================================================================
00084CAA                            ; Note: this only defines rates for samples $88-$8D, meaning $8E-$8F are invalid.
00084CAA                            ; Also, $8C-$8D are so slow you may want to skip them.
00084CAA                            ; byte_71CC4:
00084CAA 171A 2122 FFFF             DAC_sample_rate: dc.b $17, $1A, $21, $22, $FF, $FF
00084CB0                            
00084CB0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00084CB0                            
00084CB0                            ; sub_71CCA:
00084CB0                            FMUpdateTrack:
00084CB0 532D 000E                  		subq.b	#1,TrackDurationTimeout(a5) ; Update duration timeout
00084CB4 6600                       		bne.s	@notegoing		; Branch if it hasn't expired
00084CB6 0895 0004                  		bclr	#4,(a5)			; Clear 'do not attack next note' bit (TrackPlaybackControl)
00084CBA 4EBA 0000                  		jsr	FMDoNext(pc)
00084CBE 4EBA 0000                  		jsr	FMPrepareNote(pc)
00084CC2 6000 0000                  		bra.w	FMNoteOn
00084CC6                            ; ===========================================================================
00084CC6                            ; loc_71CE0:
00084CC6                            @notegoing:
00084CC6 4EBA 0000                  		jsr	NoteTimeoutUpdate(pc)
00084CCA 4EBA 0000                  		jsr	DoModulation(pc)
00084CCE 6000 0000                  		bra.w	FMUpdateFreq
00084CD2                            ; End of function FMUpdateTrack
00084CD2                            
00084CD2                            
00084CD2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00084CD2                            
00084CD2                            ; sub_71CEC:
00084CD2                            FMDoNext:
00084CD2 286D 0004                  		movea.l	TrackDataPointer(a5),a4 ; Track data pointer
00084CD6 0895 0001                  		bclr	#1,(a5)			; Clear 'track at rest' bit (TrackPlaybackControl)
00084CDA                            ; loc_71CF4:
00084CDA                            @noteloop:
00084CDA 7A00                       		moveq	#0,d5
00084CDC 1A1C                       		move.b	(a4)+,d5	; Get byte from track
00084CDE 0C05 00E0                  		cmpi.b	#$E0,d5		; Is this a coord. flag?
00084CE2 6500                       		blo.s	@gotnote	; Branch if not
00084CE4 4EBA 0000                  		jsr	CoordFlag(pc)
00084CE8 60F0                       		bra.s	@noteloop
00084CEA                            ; ===========================================================================
00084CEA                            ; loc_71D04:
00084CEA                            @gotnote:
00084CEA 4EBA 0000                  		jsr	FMNoteOff(pc)
00084CEE 4A05                       		tst.b	d5		; Is this a note?
00084CF0 6A00                       		bpl.s	@gotduration	; Branch if not
00084CF2 4EBA 0000                  		jsr	FMSetFreq(pc)
00084CF6 1A1C                       		move.b	(a4)+,d5	; Get another byte
00084CF8 6A00                       		bpl.s	@gotduration	; Branch if it is a duration
00084CFA 534C                       		subq.w	#1,a4		; Otherwise, put it back
00084CFC 6000 0000                  		bra.w	FinishTrackUpdate
00084D00                            ; ===========================================================================
00084D00                            ; loc_71D1A:
00084D00                            @gotduration:
00084D00 4EBA 0000                  		jsr	SetDuration(pc)
00084D04 6000 0000                  		bra.w	FinishTrackUpdate
00084D08                            ; End of function FMDoNext
00084D08                            
00084D08                            
00084D08                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00084D08                            
00084D08                            ; sub_71D22:
00084D08                            FMSetFreq:
00084D08 0405 0080                  		subi.b	#$80,d5			; Make it a zero-based index
00084D0C 6700                       		beq.s	TrackSetRest
00084D0E DA2D 0008                  		add.b	TrackTranspose(a5),d5	; Add track transposition
00084D12 0245 007F                  		andi.w	#$7F,d5			; Clear high byte and sign bit
00084D16 E34D                       		lsl.w	#1,d5
00084D18 41FA 0000                  		lea	FMFrequencies(pc),a0
00084D1C 3C30 5000                  		move.w	(a0,d5.w),d6
00084D20 3B46 0010                  		move.w	d6,TrackFreq(a5)	; Store new frequency
00084D24 4E75                       		rts	
00084D26                            ; End of function FMSetFreq
00084D26                            
00084D26                            
00084D26                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00084D26                            
00084D26                            ; sub_71D40:
00084D26                            SetDuration:
00084D26 1005                       		move.b	d5,d0
00084D28 122D 0002                  		move.b	TrackTempoDivider(a5),d1	; Get dividing timing
00084D2C                            ; loc_71D46:
00084D2C                            @multloop:
00084D2C 5301                       		subq.b	#1,d1
00084D2E 6700                       		beq.s	@donemult
00084D30 D005                       		add.b	d5,d0
00084D32 60F8                       		bra.s	@multloop
00084D34                            ; ===========================================================================
00084D34                            ; loc_71D4E:
00084D34                            @donemult:
00084D34 1B40 000F                  		move.b	d0,TrackSavedDuration(a5)	; Save duration
00084D38 1B40 000E                  		move.b	d0,TrackDurationTimeout(a5)	; Save duration timeout
00084D3C 4E75                       		rts	
00084D3E                            ; End of function SetDuration
00084D3E                            
00084D3E                            ; ===========================================================================
00084D3E                            ; loc_71D58:
00084D3E                            TrackSetRest:
00084D3E 08D5 0001                  		bset	#1,(a5)		; Set 'track at rest' bit (TrackPlaybackControl)
00084D42 426D 0010                  		clr.w	TrackFreq(a5)	; Clear frequency
00084D46                            
00084D46                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00084D46                            
00084D46                            ; sub_71D60:
00084D46                            FinishTrackUpdate:
00084D46 2B4C 0004                  		move.l	a4,TrackDataPointer(a5)	; Store new track position
00084D4A 1B6D 000F 000E             		move.b	TrackSavedDuration(a5),TrackDurationTimeout(a5)	; Reset note timeout
00084D50 0815 0004                  		btst	#4,(a5)				; Is track set to not attack note? (TrackPlaybackControl)
00084D54 6600                       		bne.s	@locret				; If so, branch
00084D56 1B6D 0013 0012             		move.b	TrackNoteTimeoutMaster(a5),TrackNoteTimeout(a5)	; Reset note fill timeout
00084D5C 422D 000C                  		clr.b	TrackVolEnvIndex(a5)		; Reset PSG volume envelope index (even on FM tracks...)
00084D60 0815 0003                  		btst	#3,(a5)				; Is modulation on? (TrackPlaybackControl)
00084D64 6700                       		beq.s	@locret				; If not, return (TrackPlaybackControl)
00084D66 206D 0014                  		movea.l	TrackModulationPtr(a5),a0	; Modulation data pointer
00084D6A 1B58 0018                  		move.b	(a0)+,TrackModulationWait(a5)	; Reset wait
00084D6E 1B58 0019                  		move.b	(a0)+,TrackModulationSpeed(a5)	; Reset speed
00084D72 1B58 001A                  		move.b	(a0)+,TrackModulationDelta(a5)	; Reset delta
00084D76 1018                       		move.b	(a0)+,d0			; Get steps
00084D78 E208                       		lsr.b	#1,d0				; Halve them
00084D7A 1B40 001B                  		move.b	d0,TrackModulationSteps(a5)	; Then store
00084D7E 426D 001C                  		clr.w	TrackModulationVal(a5)		; Reset frequency change
00084D82                            ; locret_71D9C:
00084D82                            @locret:
00084D82 4E75                       		rts	
00084D84                            ; End of function FinishTrackUpdate
00084D84                            
00084D84                            
00084D84                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00084D84                            
00084D84                            ; sub_71D9E: NoteFillUpdate
00084D84                            NoteTimeoutUpdate:
00084D84 4A2D 0012                  		tst.b	TrackNoteTimeout(a5)	; Is note fill on?
00084D88 6700                       		beq.s	@locret
00084D8A 532D 0012                  		subq.b	#1,TrackNoteTimeout(a5)	; Update note fill timeout
00084D8E 6600                       		bne.s	@locret				; Return if it hasn't expired
00084D90 08D5 0001                  		bset	#1,(a5)				; Put track at rest (TrackPlaybackControl)
00084D94 4A2D 0001                  		tst.b	TrackVoiceControl(a5)		; Is this a psg track?
00084D98 6B00 0000                  		bmi.w	@psgnoteoff			; If yes, branch
00084D9C 4EBA 0000                  		jsr	FMNoteOff(pc)
00084DA0 584F                       		addq.w	#4,sp				; Do not return to caller
00084DA2 4E75                       		rts	
00084DA4                            ; ===========================================================================
00084DA4                            ; loc_71DBE:
00084DA4                            @psgnoteoff:
00084DA4 4EBA 0000                  		jsr	PSGNoteOff(pc)
00084DA8 584F                       		addq.w	#4,sp		; Do not return to caller
00084DAA                            ; locret_71DC4:
00084DAA                            @locret:
00084DAA 4E75                       		rts	
00084DAC                            ; End of function NoteTimeoutUpdate
00084DAC                            
00084DAC                            
00084DAC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00084DAC                            
00084DAC                            ; sub_71DC6:
00084DAC                            DoModulation:
00084DAC 584F                       		addq.w	#4,sp				; Do not return to caller (but see below)
00084DAE 0815 0003                  		btst	#3,(a5)				; Is modulation active? (TrackPlaybackControl)
00084DB2 6700                       		beq.s	@locret				; Return if not
00084DB4 4A2D 0018                  		tst.b	TrackModulationWait(a5)	; Has modulation wait expired?
00084DB8 6700                       		beq.s	@waitdone			; If yes, branch
00084DBA 532D 0018                  		subq.b	#1,TrackModulationWait(a5)	; Update wait timeout
00084DBE 4E75                       		rts	
00084DC0                            ; ===========================================================================
00084DC0                            ; loc_71DDA:
00084DC0                            @waitdone:
00084DC0 532D 0019                  		subq.b	#1,TrackModulationSpeed(a5)	; Update speed
00084DC4 6700                       		beq.s	@updatemodulation		; If it expired, want to update modulation
00084DC6 4E75                       		rts	
00084DC8                            ; ===========================================================================
00084DC8                            ; loc_71DE2:
00084DC8                            @updatemodulation:
00084DC8 206D 0014                  		movea.l	TrackModulationPtr(a5),a0	; Get modulation data
00084DCC 1B68 0001 0019             		move.b	1(a0),TrackModulationSpeed(a5)	; Restore modulation speed
00084DD2 4A2D 001B                  		tst.b	TrackModulationSteps(a5)	; Check number of steps
00084DD6 6600                       		bne.s	@calcfreq			; If nonzero, branch
00084DD8 1B68 0003 001B             		move.b	3(a0),TrackModulationSteps(a5)	; Restore from modulation data
00084DDE 442D 001A                  		neg.b	TrackModulationDelta(a5)	; Negate modulation delta
00084DE2 4E75                       		rts	
00084DE4                            ; ===========================================================================
00084DE4                            ; loc_71DFE:
00084DE4                            @calcfreq:
00084DE4 532D 001B                  		subq.b	#1,TrackModulationSteps(a5)	; Update modulation steps
00084DE8 1C2D 001A                  		move.b	TrackModulationDelta(a5),d6	; Get modulation delta
00084DEC 4886                       		ext.w	d6
00084DEE DC6D 001C                  		add.w	TrackModulationVal(a5),d6	; Add cumulative modulation change
00084DF2 3B46 001C                  		move.w	d6,TrackModulationVal(a5)	; Store it
00084DF6 DC6D 0010                  		add.w	TrackFreq(a5),d6		; Add note frequency to it
00084DFA 594F                       		subq.w	#4,sp		; In this case, we want to return to caller after all
00084DFC                            ; locret_71E16:
00084DFC                            @locret:
00084DFC 4E75                       		rts	
00084DFE                            ; End of function DoModulation
00084DFE                            
00084DFE                            
00084DFE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00084DFE                            
00084DFE                            ; sub_71E18:
00084DFE                            FMPrepareNote:
00084DFE 0815 0001                  		btst	#1,(a5)			; Is track resting? (TrackPlaybackControl)
00084E02 6600                       		bne.s	locret_71E48		; Return if so
00084E04 3C2D 0010                  		move.w	TrackFreq(a5),d6	; Get current note frequency
00084E08 6700                       		beq.s	FMSetRest		; Branch if zero
00084E0A                            ; loc_71E24:
00084E0A                            FMUpdateFreq:
00084E0A 102D 001E                  		move.b	TrackDetune(a5),d0 	; Get detune value
00084E0E 4880                       		ext.w	d0
00084E10 DC40                       		add.w	d0,d6			; Add note frequency
00084E12 0815 0002                  		btst	#2,(a5)			; Is track being overridden? (TrackPlaybackControl)
00084E16 6600                       		bne.s	locret_71E48		; Return if so
00084E18 3206                       		move.w	d6,d1
00084E1A E049                       		lsr.w	#8,d1
00084E1C 103C 00A4                  		move.b	#$A4,d0			; Register for upper 6 bits of frequency
00084E20 4EBA 0000                  		jsr	WriteFMIorII(pc)
00084E24 1206                       		move.b	d6,d1
00084E26 103C 00A0                  		move.b	#$A0,d0			; Register for lower 8 bits of frequency
00084E2A 4EBA 0000                  		jsr	WriteFMIorII(pc)	; (It would be better if this were a jmp)
00084E2E                            ; locret_71E48:
00084E2E                            locret_71E48:
00084E2E 4E75                       		rts	
00084E30                            ; ===========================================================================
00084E30                            ; loc_71E4A:
00084E30                            FMSetRest:
00084E30 08D5 0001                  		bset	#1,(a5)		; Set 'track at rest' bit (TrackPlaybackControl)
00084E34 4E75                       		rts	
00084E36                            ; End of function FMPrepareNote
00084E36                            
00084E36                            ; ===========================================================================
00084E36                            ; loc_71E50:
00084E36                            PauseMusic:
00084E36 6B00                       		bmi.s	@unpausemusic		; Branch if music is being unpaused
00084E38 0C2E 0002 0003             		cmpi.b	#2,f_pausemusic(a6)
00084E3E 6700 0000                  		beq.w	@unpausedallfm
00084E42 1D7C 0002 0003             		move.b	#2,f_pausemusic(a6)
00084E48 7602                       		moveq	#2,d3
00084E4A 103C 00B4                  		move.b	#$B4,d0		; Command to set AMS/FMS/panning
00084E4E 7200                       		moveq	#0,d1		; No panning, AMS or FMS
00084E50                            ; loc_71E6A:
00084E50                            @killpanloop:
00084E50 4EBA 0000                  		jsr	WriteFMI(pc)
00084E54 4EBA 0000                  		jsr	WriteFMII(pc)
00084E58 5200                       		addq.b	#1,d0
00084E5A 51CB FFF4                  		dbf	d3,@killpanloop
00084E5E                            
00084E5E 7602                       		moveq	#2,d3
00084E60 7028                       		moveq	#$28,d0		; Key on/off register
00084E62                            ; loc_71E7C:
00084E62                            @noteoffloop:
00084E62 1203                       		move.b	d3,d1		; FM1, FM2, FM3
00084E64 4EBA 0000                  		jsr	WriteFMI(pc)
00084E68 5801                       		addq.b	#4,d1		; FM4, FM5, FM6
00084E6A 4EBA 0000                  		jsr	WriteFMI(pc)
00084E6E 51CB FFF2                  		dbf	d3,@noteoffloop
00084E72                            
00084E72 4EBA 0000                  		jsr	PSGSilenceAll(pc)
00084E76 6000 FD94                  		bra.w	DoStartZ80
00084E7A                            ; ===========================================================================
00084E7A                            ; loc_71E94:
00084E7A                            @unpausemusic:
00084E7A 422E 0003                  		clr.b	f_pausemusic(a6)
00084E7E 7630                       		moveq	#TrackSz,d3
00084E80 4BEE 0040                  		lea	v_music_fmdac_tracks(a6),a5
00084E84 7806                       		moveq	#((v_music_fmdac_tracks_end-v_music_fmdac_tracks)/TrackSz)-1,d4	; 6 FM + 1 DAC tracks
00084E86                            ; loc_71EA0:
00084E86                            @bgmfmloop:
00084E86 0815 0007                  		btst	#7,(a5)			; Is track playing? (TrackPlaybackControl)
00084E8A 6700                       		beq.s	@bgmfmnext		; Branch if not
00084E8C 0815 0002                  		btst	#2,(a5)			; Is track being overridden? (TrackPlaybackControl)
00084E90 6600                       		bne.s	@bgmfmnext		; Branch if yes
00084E92 103C 00B4                  		move.b	#$B4,d0			; Command to set AMS/FMS/panning
00084E96 122D 000A                  		move.b	TrackAMSFMSPan(a5),d1	; Get value from track RAM
00084E9A 4EBA 0000                  		jsr	WriteFMIorII(pc)
00084E9E                            ; loc_71EB8:
00084E9E                            @bgmfmnext:
00084E9E DAC3                       		adda.w	d3,a5
00084EA0 51CC FFE4                  		dbf	d4,@bgmfmloop
00084EA4                            
00084EA4 4BEE 0220                  		lea	v_sfx_fm_tracks(a6),a5
00084EA8 7802                       		moveq	#((v_sfx_fm_tracks_end-v_sfx_fm_tracks)/TrackSz)-1,d4	; 3 FM tracks (SFX)
00084EAA                            ; loc_71EC4:
00084EAA                            @sfxfmloop:
00084EAA 0815 0007                  		btst	#7,(a5)			; Is track playing? (TrackPlaybackControl)
00084EAE 6700                       		beq.s	@sfxfmnext		; Branch if not
00084EB0 0815 0002                  		btst	#2,(a5)			; Is track being overridden? (TrackPlaybackControl)
00084EB4 6600                       		bne.s	@sfxfmnext		; Branch if yes
00084EB6 103C 00B4                  		move.b	#$B4,d0			; Command to set AMS/FMS/panning
00084EBA 122D 000A                  		move.b	TrackAMSFMSPan(a5),d1	; Get value from track RAM
00084EBE 4EBA 0000                  		jsr	WriteFMIorII(pc)
00084EC2                            ; loc_71EDC:
00084EC2                            @sfxfmnext:
00084EC2 DAC3                       		adda.w	d3,a5
00084EC4 51CC FFE4                  		dbf	d4,@sfxfmloop
00084EC8                            
00084EC8 4BEE 0340                  		lea	v_spcsfx_track_ram(a6),a5
00084ECC 0815 0007                  		btst	#7,(a5)			; Is track playing? (TrackPlaybackControl)
00084ED0 6700                       		beq.s	@unpausedallfm		; Branch if not
00084ED2 0815 0002                  		btst	#2,(a5)			; Is track being overridden? (TrackPlaybackControl)
00084ED6 6600                       		bne.s	@unpausedallfm		; Branch if yes
00084ED8 103C 00B4                  		move.b	#$B4,d0			; Command to set AMS/FMS/panning
00084EDC 122D 000A                  		move.b	TrackAMSFMSPan(a5),d1	; Get value from track RAM
00084EE0 4EBA 0000                  		jsr	WriteFMIorII(pc)
00084EE4                            ; loc_71EFE:
00084EE4                            @unpausedallfm:
00084EE4 6000 FD26                  		bra.w	DoStartZ80
00084EE8                            
00084EE8                            ; ---------------------------------------------------------------------------
00084EE8                            ; Subroutine to	play a sound or	music track
00084EE8                            ; ---------------------------------------------------------------------------
00084EE8                            
00084EE8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00084EE8                            
00084EE8                            ; Sound_Play:
00084EE8                            CycleSoundQueue:
00084EE8 2079 0008 493A             		movea.l	(Go_SoundPriorities).l,a0
00084EEE 43EE 000A                  		lea	v_soundqueue0(a6),a1	; load music track number
00084EF2 1616                       		move.b	v_sndprio(a6),d3	; Get priority of currently playing SFX
00084EF4 7802                       		moveq	#2,d4			; Number of queues-1 (v_soundqueue0, v_soundqueue1, v_soundqueue2)
00084EF6                            ; loc_71F12:
00084EF6                            @inputloop:
00084EF6 1011                       		move.b	(a1),d0			; move track number to d0
00084EF8 1200                       		move.b	d0,d1
00084EFA 4219                       		clr.b	(a1)+			; Clear entry
00084EFC 0400 0081                  		subi.b	#bgm__First,d0		; Make it into 0-based index
00084F00 6500                       		bcs.s	@nextinput		; If negative (i.e., it was $80 or lower), branch
00084F02 0C2E 0080 0009             		cmpi.b	#$80,v_sound_id(a6)	; Is v_sound_id a $80 (silence/empty)?
00084F08 6700                       		beq.s	@havesound		; If yes, branch
00084F0A 1D41 000A                  		move.b	d1,v_soundqueue0(a6)	; Put sound into v_soundqueue0
00084F0E 6000                       		bra.s	@nextinput
00084F10                            ; ===========================================================================
00084F10                            ; loc_71F2C:
00084F10                            @havesound:
00084F10 0240 007F                  		andi.w	#$7F,d0			; Clear high byte and sign bit
00084F14 1430 0000                  		move.b	(a0,d0.w),d2		; Get sound type
00084F18 B403                       		cmp.b	d3,d2			; Is it a lower priority sound?
00084F1A 6500                       		blo.s	@nextinput		; Branch if yes
00084F1C 1602                       		move.b	d2,d3			; Store new priority
00084F1E 1D41 0009                  		move.b	d1,v_sound_id(a6)	; Queue sound for play
00084F22                            ; loc_71F3E:
00084F22                            @nextinput:
00084F22 51CC FFD2                  		dbf	d4,@inputloop
00084F26                            
00084F26 4A03                       		tst.b	d3			; We don't want to change sound priority if it is negative
00084F28 6B00                       		bmi.s	@locret
00084F2A 1C83                       		move.b	d3,v_sndprio(a6)	; Set new sound priority
00084F2C                            ; locret_71F4A:
00084F2C                            @locret:
00084F2C 4E75                       		rts	
00084F2E                            ; End of function CycleSoundQueue
00084F2E                            
00084F2E                            
00084F2E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00084F2E                            
00084F2E                            ; Sound_ChkValue:
00084F2E                            PlaySoundID:
00084F2E 7E00                       		moveq	#0,d7
00084F30 1E2E 0009                  		move.b	v_sound_id(a6),d7
00084F34 6700 0000                  		beq.w	StopAllSound
00084F38 6A00                       		bpl.s	@locret			; If >= 0, return (not a valid sound, bgm or command)
00084F3A 1D7C 0080 0009             		move.b	#$80,v_sound_id(a6)	; reset	music flag
00084F40                            		; DANGER! Music ends at $93, yet this checks until $9F; attempting to
00084F40                            		; play sounds $94-$9F will cause a crash! Remove the '+$C' to fix this.
00084F40                            		; See LevSel_NoCheat for more.
00084F40 0C07 0000                  		cmpi.b	#bgm__Last,d7	; Is this music ($81-$9F)?
00084F44 6300 0000                  		bls.w	Sound_PlayBGM		; Branch if yes
00084F48 0C07 00A0                  		cmpi.b	#sfx__First,d7		; Is this after music but before sfx? (redundant check)
00084F4C 6500 0000                  		blo.w	@locret			; Return if yes
00084F50 0C07 0000                  		cmpi.b	#sfx__Last,d7		; Is this sfx ($A0-$CF)?
00084F54 6300 0000                  		bls.w	Sound_PlaySFX		; Branch if yes
00084F58 0C07 00D0                  		cmpi.b	#spec__First,d7		; Is this after sfx but before special sfx? (redundant check)
00084F5C 6500 0000                  		blo.w	@locret			; Return if yes
00084F60 0C07 00D1                  		cmpi.b	#$D1,d7
00084F64 6500 0000                  		bcs.w	Sound_PlaySpecial
00084F68 0C07 00DF                  		cmp.b	#$DF,d7
00084F6C 6F00 0000                  		ble.w	Sound_D1toDF
00084F70 0C07 00E0                  		cmpi.b	#flg__First,d7		; Is this after special sfx but before $E0?
00084F74 6500 0000                  		blo.w	@locret			; Return if yes
00084F78 0C07 0000                  		cmpi.b	#flg__Last,d7		; Is this $E0-$E4?
00084F7C 6300                       		bls.s	Sound_E0toE4		; Branch if yes
00084F7E                            ; locret_71F8C:
00084F7E                            @locret:
00084F7E 4E75                       		rts	
00084F80                            ; ===========================================================================
00084F80                            
00084F80                            Sound_E0toE4:
00084F80 0407 00E0                  		subi.b	#flg__First,d7
00084F84 E54F                       		lsl.w	#2,d7
00084F86 4EFB 7000                  		jmp	Sound_ExIndex(pc,d7.w)
00084F8A                            ; ===========================================================================
00084F8A                            
00084F8A                            Sound_ExIndex:
00084F8A 6000 0000                  ptr_flgE0:	bra.w	FadeOutMusic		; $E0
00084F8E 6000 0000                  ptr_flgE1:	bra.w	PlaySegaSound		; $E1
00084F92 6000 0000                  ptr_flgE2:	bra.w	SpeedUpMusic		; $E2
00084F96 6000 0000                  ptr_flgE3:	bra.w	SlowDownMusic		; $E3
00084F9A 6000 0000                  ptr_flgE4:	bra.w	StopAllSound		; $E4
00084F9E                            ptr_flgend
00084F9E                            ; ===========================================================================
00084F9E                            ; ---------------------------------------------------------------------------
00084F9E                            ; Play "Say-gaa" PCM sound
00084F9E                            ; ---------------------------------------------------------------------------
00084F9E                            ; Sound_E1: PlaySega:
00084F9E                            PlaySegaSound:
00084F9E 13FC 0088 00A0 1FFF        		move.b	#$88,(z80_dac_sample).l	; Queue Sega PCM
00084FA6 33FC 0000 00A1 1100        		startZ80
00084FAE 323C 0011                  		move.w	#$11,d1
00084FB2                            ; loc_71FC0:
00084FB2                            @busyloop_outer:
00084FB2 303C FFFF                  		move.w	#-1,d0
00084FB6                            ; loc_71FC4:
00084FB6                            @busyloop:
00084FB6 4E71                       		nop	
00084FB8 51C8 FFFC                  		dbf	d0,@busyloop
00084FBC                            
00084FBC 51C9 FFF4                  		dbf	d1,@busyloop_outer
00084FC0                            
00084FC0 584F                       		addq.w	#4,sp	; Tamper return value so we don't return to caller
00084FC2 4E75                       		rts	
00084FC4                            ; ===========================================================================
00084FC4                            ; ---------------------------------------------------------------------------
00084FC4                            ; Play music track $81-$9F
00084FC4                            ; ---------------------------------------------------------------------------
00084FC4                            ; Sound_81to9F:
00084FC4                            Sound_PlayBGM:
00084FC4 0C07 0000                  		cmpi.b	#bgm_ExtraLife,d7	; is the "extra life" music to be played?
00084FC8 6600                       		bne.s	@bgmnot1up		; if not, branch
00084FCA 4A2E 0027                  		tst.b	f_1up_playing(a6)	; Is a 1-up music playing?
00084FCE 6600 0000                  		bne.w	@locdblret		; if yes, branch
00084FD2 4BEE 0040                  		lea	v_music_track_ram(a6),a5
00084FD6 7009                       		moveq	#((v_music_track_ram_end-v_music_track_ram)/TrackSz)-1,d0	; 1 DAC + 6 FM + 3 PSG tracks
00084FD8                            ; loc_71FE6:
00084FD8                            @clearsfxloop:
00084FD8 0895 0002                  		bclr	#2,(a5)			; Clear 'SFX is overriding' bit (TrackPlaybackControl)
00084FDC DAFC 0030                  		adda.w	#TrackSz,a5
00084FE0 51C8 FFF6                  		dbf	d0,@clearsfxloop
00084FE4                            
00084FE4 4BEE 0220                  		lea	v_sfx_track_ram(a6),a5
00084FE8 7005                       		moveq	#((v_sfx_track_ram_end-v_sfx_track_ram)/TrackSz)-1,d0	; 3 FM + 3 PSG tracks (SFX)
00084FEA                            ; loc_71FF8:
00084FEA                            @cleartrackplayloop:
00084FEA 0895 0007                  		bclr	#7,(a5)			; Clear 'track is playing' bit (TrackPlaybackControl)
00084FEE DAFC 0030                  		adda.w	#TrackSz,a5
00084FF2 51C8 FFF6                  		dbf	d0,@cleartrackplayloop
00084FF6                            
00084FF6 4216                       		clr.b	v_sndprio(a6)		; Clear priority
00084FF8 204E                       		movea.l	a6,a0
00084FFA 43EE 03A0                  		lea	v_1up_ram_copy(a6),a1
00084FFE 303C 0087                  		move.w	#((v_music_track_ram_end-v_startofvariables)/4)-1,d0	; Backup $220 bytes: all variables and music track data
00085002                            ; loc_72012:
00085002                            @backupramloop:
00085002 22D8                       		move.l	(a0)+,(a1)+
00085004 51C8 FFFC                  		dbf	d0,@backupramloop
00085008                            
00085008 1D7C 0080 0027             		move.b	#$80,f_1up_playing(a6)
0008500E 4216                       		clr.b	v_sndprio(a6)		; Clear priority again (?)
00085010 6000                       		bra.s	@bgm_loadMusic
00085012                            ; ===========================================================================
00085012                            ; loc_72024:
00085012                            @bgmnot1up:
00085012 422E 0027                  		clr.b	f_1up_playing(a6)
00085016 422E 0026                  		clr.b	v_fadein_counter(a6)
0008501A                            ; loc_7202C:
0008501A                            @bgm_loadMusic:
0008501A 4EBA 0000                  		jsr	InitMusicPlayback(pc)
0008501E 2879 0008 494A             		movea.l	(Go_SpeedUpIndex).l,a4
00085024 0407 0081                  		subi.b	#bgm__First,d7
00085028 1D74 7000 0029             		move.b	(a4,d7.w),v_speeduptempo(a6)
0008502E 2879 0008 4942             		movea.l	(Go_MusicIndex).l,a4
00085034 E54F                       		lsl.w	#2,d7
00085036 2874 7000                  		movea.l	(a4,d7.w),a4		; a4 now points to (uncompressed) song data
0008503A 7000                       		moveq	#0,d0
0008503C 3014                       		move.w	(a4),d0			; load voice pointer
0008503E D08C                       		add.l	a4,d0			; It is a relative pointer
00085040 2D40 0018                  		move.l	d0,v_voice_ptr(a6)
00085044 102C 0005                  		move.b	5(a4),d0		; load tempo
00085048 1D40 0028                  		move.b	d0,v_tempo_mod(a6)
0008504C                            		;tst.b	f_speedup(a6)
0008504C                            		;beq.s	@nospeedshoes
0008504C                            		;move.b	v_speeduptempo(a6),d0
0008504C                            ; loc_72068:
0008504C                            ;@nospeedshoes:
0008504C 1D40 0002                  		move.b	d0,v_main_tempo(a6)
00085050 1D40 0001                  		move.b	d0,v_main_tempo_timeout(a6)
00085054 7200                       		moveq	#0,d1
00085056 264C                       		movea.l	a4,a3
00085058 5C4C                       		addq.w	#6,a4			; Point past header
0008505A 7E00                       		moveq	#0,d7
0008505C 1E2B 0002                  		move.b	2(a3),d7		; load number of FM+DAC tracks
00085060 6700 0000                  		beq.w	@bgm_fmdone		; branch if zero
00085064 5307                       		subq.b	#1,d7
00085066 123C 00C0                  		move.b	#$C0,d1			; Default AMS+FMS+Panning
0008506A 182B 0004                  		move.b	4(a3),d4		; load tempo dividing timing
0008506E 7C30                       		moveq	#TrackSz,d6
00085070 1A3C 0001                  		move.b	#1,d5			; Note duration for first "note"
00085074 43EE 0040                  		lea	v_music_fmdac_tracks(a6),a1
00085078 45FA 0000                  		lea	FMDACInitBytes(pc),a2
0008507C                            ; loc_72098:
0008507C                            @bmg_fmloadloop:
0008507C 08D1 0007                  		bset	#7,(a1)				; Initial playback control: set 'track playing' bit (TrackPlaybackControl)
00085080 135A 0001                  		move.b	(a2)+,TrackVoiceControl(a1)	; Voice control bits
00085084 1344 0002                  		move.b	d4,TrackTempoDivider(a1)
00085088 1346 000D                  		move.b	d6,TrackStackPointer(a1)	; set "gosub" (coord flag F8h) stack init value
0008508C 1341 000A                  		move.b	d1,TrackAMSFMSPan(a1)		; Set AMS/FMS/Panning
00085090 1345 000E                  		move.b	d5,TrackDurationTimeout(a1)	; Set duration of first "note"
00085094 7000                       		moveq	#0,d0
00085096 301C                       		move.w	(a4)+,d0			; load DAC/FM pointer
00085098 D08B                       		add.l	a3,d0				; Relative pointer
0008509A 2340 0004                  		move.l	d0,TrackDataPointer(a1)	; Store track pointer
0008509E 335C 0008                  		move.w	(a4)+,TrackTranspose(a1)	; load FM channel modifier
000850A2 D2C6                       		adda.w	d6,a1
000850A4 51CF FFD6                  		dbf	d7,@bmg_fmloadloop
000850A8                            		
000850A8 0C2B 0007 0002             		cmpi.b	#7,2(a3)	; Are 7 FM tracks defined?
000850AE 6600                       		bne.s	@silencefm6
000850B0 702B                       		moveq	#$2B,d0		; DAC enable/disable register
000850B2 7200                       		moveq	#0,d1		; Disable DAC
000850B4 4EBA 0000                  		jsr	WriteFMI(pc)
000850B8 6000 0000                  		bra.w	@bgm_fmdone
000850BC                            ; ===========================================================================
000850BC                            ; loc_720D8:
000850BC                            @silencefm6:
000850BC 7028                       		moveq	#$28,d0		; Key on/off register
000850BE 7206                       		moveq	#6,d1		; Note off on all operators of channel 6
000850C0 4EBA 0000                  		jsr	WriteFMI(pc)
000850C4 103C 0042                  		move.b	#$42,d0		; TL for operator 1 of FM6
000850C8 727F                       		moveq	#$7F,d1		; Total silence
000850CA 4EBA 0000                  		jsr	WriteFMII(pc)
000850CE 103C 004A                  		move.b	#$4A,d0		; TL for operator 3 of FM6
000850D2 727F                       		moveq	#$7F,d1		; Total silence
000850D4 4EBA 0000                  		jsr	WriteFMII(pc)
000850D8 103C 0046                  		move.b	#$46,d0		; TL for operator 2 of FM6
000850DC 727F                       		moveq	#$7F,d1		; Total silence
000850DE 4EBA 0000                  		jsr	WriteFMII(pc)
000850E2 103C 004E                  		move.b	#$4E,d0		; TL for operator 4 of FM6
000850E6 727F                       		moveq	#$7F,d1		; Total silence
000850E8 4EBA 0000                  		jsr	WriteFMII(pc)
000850EC 103C 00B6                  		move.b	#$B6,d0		; AMS/FMS/panning of FM6
000850F0 123C 00C0                  		move.b	#$C0,d1		; Stereo
000850F4 4EBA 0000                  		jsr	WriteFMII(pc)
000850F8                            ; loc_72114:
000850F8                            @bgm_fmdone:
000850F8 7E00                       		moveq	#0,d7
000850FA 1E2B 0003                  		move.b	3(a3),d7	; Load number of PSG tracks
000850FE 6700                       		beq.s	@bgm_psgdone	; branch if zero
00085100 5307                       		subq.b	#1,d7
00085102 43EE 0190                  		lea	v_music_psg_tracks(a6),a1
00085106 45FA 0000                  		lea	PSGInitBytes(pc),a2
0008510A                            ; loc_72126:
0008510A                            @bgm_psgloadloop:
0008510A 08D1 0007                  		bset	#7,(a1)				; Initial playback control: set 'track playing' bit (TrackPlaybackControl)
0008510E 135A 0001                  		move.b	(a2)+,TrackVoiceControl(a1)	; Voice control bits
00085112 1344 0002                  		move.b	d4,TrackTempoDivider(a1)
00085116 1346 000D                  		move.b	d6,TrackStackPointer(a1)	; set "gosub" (coord flag F8h) stack init value
0008511A 1345 000E                  		move.b	d5,TrackDurationTimeout(a1)	; Set duration of first "note"
0008511E 7000                       		moveq	#0,d0
00085120 301C                       		move.w	(a4)+,d0			; load PSG channel pointer
00085122 D08B                       		add.l	a3,d0				; Relative pointer
00085124 2340 0004                  		move.l	d0,TrackDataPointer(a1)	; Store track pointer
00085128 335C 0008                  		move.w	(a4)+,TrackTranspose(a1)	; load PSG modifier
0008512C 101C                       		move.b	(a4)+,d0			; load redundant byte
0008512E 135C 000B                  		move.b	(a4)+,TrackVoiceIndex(a1)	; Initial PSG tone
00085132 D2C6                       		adda.w	d6,a1
00085134 51CF FFD4                  		dbf	d7,@bgm_psgloadloop
00085138                            ; loc_72154:
00085138                            @bgm_psgdone:
00085138 43EE 0220                  		lea	v_sfx_track_ram(a6),a1
0008513C 7E05                       		moveq	#((v_sfx_track_ram_end-v_sfx_track_ram)/TrackSz)-1,d7	; 6 SFX tracks
0008513E                            ; loc_7215A:
0008513E                            @sfxstoploop:
0008513E 4A11                       		tst.b	(a1)		; Is SFX playing? (TrackPlaybackControl)
00085140 6A00 0000                  		bpl.w	@sfxnext	; Branch if not
00085144 7000                       		moveq	#0,d0
00085146 1029 0001                  		move.b	TrackVoiceControl(a1),d0 ; Get voice control bits
0008514A 6B00                       		bmi.s	@sfxpsgchannel		; Branch if this is a PSG channel
0008514C 5500                       		subq.b	#2,d0			; SFX can't have FM1 or FM2
0008514E E508                       		lsl.b	#2,d0			; Convert to index
00085150 6000                       		bra.s	@gotchannelindex
00085152                            ; ===========================================================================
00085152                            ; loc_7216E:
00085152                            @sfxpsgchannel:
00085152 E608                       		lsr.b	#3,d0		; Convert to index
00085154                            ; loc_72170:
00085154                            @gotchannelindex:
00085154 41FA 0000                  		lea	SFX_BGMChannelRAM(pc),a0
00085158 2070 0000                  		movea.l	(a0,d0.w),a0
0008515C 08D0 0002                  		bset	#2,(a0)		; Set 'SFX is overriding' bit (TrackPlaybackControl)
00085160                            ; loc_7217C:
00085160                            @sfxnext:
00085160 D2C6                       		adda.w	d6,a1
00085162 51CF FFDA                  		dbf	d7,@sfxstoploop
00085166                            
00085166 4A6E 0340                  		tst.w	v_spcsfx_fm4_track+TrackPlaybackControl(a6)	; Is special SFX being played?
0008516A 6A00                       		bpl.s	@checkspecialpsg				; Branch if not
0008516C 08EE 0002 0100             		bset	#2,v_music_fm4_track+TrackPlaybackControl(a6)	; Set 'SFX is overriding' bit
00085172                            ; loc_7218E:
00085172                            @checkspecialpsg:
00085172 4A6E 0370                  		tst.w	v_spcsfx_psg3_track+TrackPlaybackControl(a6)	; Is special SFX being played?
00085176 6A00                       		bpl.s	@sendfmnoteoff					; Branch if not
00085178 08EE 0002 01F0             		bset	#2,v_music_psg3_track+TrackPlaybackControl(a6)	; Set 'SFX is overriding' bit
0008517E                            ; loc_7219A:
0008517E                            @sendfmnoteoff:
0008517E 4BEE 0070                  		lea	v_music_fm_tracks(a6),a5
00085182 7805                       		moveq	#((v_music_fm_tracks_end-v_music_fm_tracks)/TrackSz)-1,d4	; 6 FM tracks
00085184                            ; loc_721A0:
00085184                            @fmnoteoffloop:
00085184 4EBA 0000                  		jsr	FMNoteOff(pc)
00085188 DAC6                       		adda.w	d6,a5
0008518A 51CC FFF8                  		dbf	d4,@fmnoteoffloop		; run all FM tracks
0008518E 7802                       		moveq	#((v_music_psg_tracks_end-v_music_psg_tracks)/TrackSz)-1,d4 ; 3 PSG tracks
00085190                            ; loc_721AC:
00085190                            @psgnoteoffloop:
00085190 4EBA 0000                  		jsr	PSGNoteOff(pc)
00085194 DAC6                       		adda.w	d6,a5
00085196 51CC FFF8                  		dbf	d4,@psgnoteoffloop		; run all PSG tracks
0008519A                            ; loc_721B6:
0008519A                            @locdblret:
0008519A 584F                       		addq.w	#4,sp	; Tamper with return value to not return to caller
0008519C 4E75                       		rts	
0008519E                            ; ===========================================================================
0008519E                            ; byte_721BA:
0008519E 0600 0102 0405 06          FMDACInitBytes:	dc.b 6,	0, 1, 2, 4, 5, 6	; first byte is for DAC; then notice the 0, 1, 2 then 4, 5, 6; this is the gap between parts I and II for YM2612 port writes
000851A6 00                         		even
000851A6                            ; byte_721C2:
000851A6 80A0 C0                    PSGInitBytes:	dc.b $80, $A0, $C0	; Specifically, these configure writes to the PSG port for each channel
000851AA 00                         		even
000851AA                            ; ===========================================================================
000851AA                            ; ---------------------------------------------------------------------------
000851AA                            ; Play Spin Dash sound effect
000851AA                            ; ---------------------------------------------------------------------------
000851AA                            Sound_D1toDF:
000851AA 4A2E 0027                  		tst.b	$27(a6)
000851AE 6600 0000                  		bne.w	loc_722C6
000851B2 4A2E 0004                  		tst.b	4(a6)
000851B6 6600 0000                  		bne.w	loc_722C6
000851BA 4A2E 0024                  		tst.b	$24(a6)
000851BE 6600 0000                  		bne.w	loc_722C6
000851C2 4238 C900                  		clr.b	($FFFFC900).w
000851C6 0C07 00D5                  		cmp.b	#$D5,d7		; is this the Spin Dash sound?
000851CA 6600                       		bne.s	@cont3	; if not, branch
000851CC 3F00                       		move.w	d0,-(sp)
000851CE 1038 C902                  		move.b	($FFFFC902).w,d0	; store extra frequency
000851D2 4A38 C901                  		tst.b	($FFFFC901).w	; is the Spin Dash timer active?
000851D6 6600                       		bne.s	@cont1		; if it is, branch
000851D8 103C 00FF                  		move.b	#-1,d0		; otherwise, reset frequency (becomes 0 on next line)
000851DC                            		
000851DC                            @cont1:
000851DC 5200                       		addq.b	#1,d0
000851DE 0C00 000C                  		cmp.b	#$C,d0		; has the limit been reached?
000851E2 6400                       		bcc.s	@cont2		; if it has, branch
000851E4 11C0 C902                  		move.b	d0,($FFFFC902).w	; otherwise, set new frequency
000851E8                            		
000851E8                            @cont2:
000851E8 11FC 0001 C900             		move.b	#1,($FFFFC900).w	; set flag
000851EE 11FC 003C C901             		move.b	#60,($FFFFC901).w	; set timer
000851F4 301F                       		move.w	(sp)+,d0
000851F6                            		
000851F6                            @cont3:	
000851F6 2079 0008 4946             		movea.l	(Go_SoundIndex).l,a0
000851FC 0407 00A0                  		sub.b	#$A0,d7
00085200 6000                       		bra.s	SoundEffects_Common
00085202                            ; ---------------------------------------------------------------------------
00085202                            ; Play normal sound effect
00085202                            ; ---------------------------------------------------------------------------
00085202                            ; Sound_A0toCF:
00085202                            Sound_PlaySFX:
00085202 4A2E 0027                  		tst.b	f_1up_playing(a6)	; Is 1-up playing?
00085206 6600 0000                  		bne.w	loc_722C6		; Exit is it is
0008520A 4A2E 0004                  		tst.b	v_fadeout_counter(a6)	; Is music being faded out?
0008520E 6600 0000                  		bne.w	loc_722C6		; Exit if it is
00085212 4A2E 0024                  		tst.b	f_fadein_flag(a6)	; Is music being faded in?
00085216 6600 0000                  		bne.w	loc_722C6		; Exit if it is
0008521A 4238 C900                  		clr.b	($FFFFC900).w
0008521E 0C07 0000                  		cmpi.b	#sfx_Ring,d7		; is ring sound	effect played?
00085222 6600                       		bne.s	Sound_notB5		; if not, branch
00085224 4A2E 002B                  		tst.b	v_ring_speaker(a6)	; Is the ring sound playing on right speaker?
00085228 6600                       		bne.s	loc_721EE		; Branch if not
0008522A 1E3C 0000                  		move.b	#sfx_RingLeft,d7	; play ring sound in left speaker
0008522E                            
0008522E                            loc_721EE:
0008522E 086E 0000 002B             		bchg	#0,v_ring_speaker(a6)	; change speaker
00085234                            
00085234                            Sound_notB5:
00085234 0C07 0000                  		cmpi.b	#sfx_Push,d7		; is "pushing" sound played?
00085238 6600                       		bne.s	Sound_notA7		; if not, branch
0008523A 4A2E 002C                  		tst.b	f_push_playing(a6)	; Is pushing sound already playing?
0008523E 6600 0000                  		bne.w	locret_722C4			; Return if not
00085242 1D7C 0080 002C             		move.b	#$80,f_push_playing(a6)	; Mark it as playing
00085248                            		
00085248                            Sound_notA7:
00085248 2079 0008 4946             		movea.l	(Go_SoundIndex).l,a0
0008524E 0407 00A0                  		subi.b	#sfx__First,d7		; Make it 0-based
00085252                            
00085252                            SoundEffects_Common:		
00085252 E54F                       		lsl.w	#2,d7			; Convert sfx ID into index
00085254 2670 7000                  		movea.l	(a0,d7.w),a3		; SFX data pointer
00085258 224B                       		movea.l	a3,a1
0008525A 7200                       		moveq	#0,d1
0008525C 3219                       		move.w	(a1)+,d1		; Voice pointer
0008525E D28B                       		add.l	a3,d1			; Relative pointer
00085260 1A19                       		move.b	(a1)+,d5		; Dividing timing	
00085262                            		; DANGER! there is a missing 'moveq	#0,d7' here, without which SFXes whose
00085262                            		; index entry is above $3F will cause a crash. This is actually the same way that
00085262                            		; this bug is fixed in Ristar's driver.
00085262 7E00                       		moveq	#0,d7	
00085264 1E19                       		move.b	(a1)+,d7	; Number of tracks (FM + PSG)
00085266 5307                       		subq.b	#1,d7
00085268 7C30                       		moveq	#TrackSz,d6
0008526A                            
0008526A                            loc_72228:
0008526A 7600                       		moveq	#0,d3
0008526C 1629 0001                  		move.b	1(a1),d3	; Channel assignment bits
00085270 1803                       		move.b	d3,d4
00085272 6B00                       		bmi.s	loc_72244	; Branch if PSG
00085274 5543                       		subq.w	#2,d3		; SFX can only have FM3, FM4 or FM5
00085276 E54B                       		lsl.w	#2,d3
00085278 4BFA 0000                  		lea	SFX_BGMChannelRAM(pc),a5
0008527C 2A75 3000                  		movea.l	(a5,d3.w),a5
00085280 08D5 0002                  		bset	#2,(a5)		; Mark music track as being overridden (TrackPlaybackControl)
00085284 6000                       		bra.s	loc_7226E
00085286                            ; ===========================================================================
00085286                            
00085286                            loc_72244:
00085286 E64B                       		lsr.w	#3,d3
00085288 4BFA 0000                  		lea	SFX_BGMChannelRAM(pc),a5
0008528C 2A75 3000                  		movea.l	(a5,d3.w),a5
00085290 08D5 0002                  		bset	#2,(a5)			; Mark music track as being overridden (TrackPlaybackControl)
00085294 0C04 00C0                  		cmpi.b	#$C0,d4			; Is this PSG 3?
00085298 6600                       		bne.s	loc_7226E	; Branch if not
0008529A 1004                       		move.b	d4,d0
0008529C 0000 001F                  		ori.b	#$1F,d0			; Command to silence PSG 3
000852A0 13C0 00C0 0011             		move.b	d0,(psg_input).l
000852A6 0840 0005                  		bchg	#5,d0			; Command to silence noise channel
000852AA 13C0 00C0 0011             		move.b	d0,(psg_input).l
000852B0                            
000852B0                            loc_7226E:
000852B0 4BFA 0000                  		lea	SFX_SFXChannelRAM(pc),a5
000852B4 2A75 3000                  		movea.l	(a5,d3.w),a5
000852B8 244D                       		movea.l	a5,a2
000852BA 700B                       		moveq	#(TrackSz/4)-1,d0	; $30 bytes
000852BC                            
000852BC                            loc_72276:
000852BC 429A                       		clr.l	(a2)+
000852BE 51C8 FFFC                  		dbf	d0,loc_72276
000852C2                            
000852C2 3A99                       		move.w	(a1)+,(a5)			; Initial playback control bits (TrackPlaybackControl)
000852C4 1B45 0002                  		move.b	d5,TrackTempoDivider(a5)	; Initial voice control bits
000852C8 7000                       		moveq	#0,d0
000852CA 3019                       		move.w	(a1)+,d0			; Track data pointer
000852CC D08B                       		add.l	a3,d0				; Relative pointer
000852CE 2B40 0004                  		move.l	d0,TrackDataPointer(a5)	; Store track pointer
000852D2 3B59 0008                  		move.w	(a1)+,8(a5)
000852D6 4A38 C900                  		tst.b	($FFFFC900).w	; is the Spin Dash sound playing?
000852DA 6700                       		beq.s	@cont		; if not, branch
000852DC 3F00                       		move.w	d0,-(sp)
000852DE 1038 C902                  		move.b	($FFFFC902).w,d0
000852E2 D12D 0008                  		add.b	d0,8(a5)
000852E6 301F                       		move.w	(sp)+,d0
000852E8                            		
000852E8                            @cont:
000852E8 1B7C 0001 000E             		move.b	#1,$E(a5)
000852EE 1B46 000D                  		move.b	d6,TrackStackPointer(a5)	; set "gosub" (coord flag F8h) stack init value
000852F2 4A04                       		tst.b	d4				; Is this a PSG channel?
000852F4 6B00                       		bmi.s	loc_722A8		; Branch if yes
000852F6 1B7C 00C0 000A             		move.b	#$C0,TrackAMSFMSPan(a5)	; AMS/FMS/Panning
000852FC 2B41 0020                  		move.l	d1,TrackVoicePtr(a5)		; Voice pointer
00085300                            
00085300                            loc_722A8:
00085300 51CF FF68                  		dbf	d7,loc_72228
00085304                            
00085304 4A2E 0250                  		tst.b	v_sfx_fm4_track+TrackPlaybackControl(a6)	; Is special SFX being played?
00085308 6A00                       		bpl.s	loc_722B8				; Branch if not
0008530A 08EE 0002 0340             		bset	#2,v_spcsfx_fm4_track+TrackPlaybackControl(a6)	; Set 'SFX is overriding' bit
00085310                            
00085310                            loc_722B8:
00085310 4A2E 0310                  		tst.b	v_sfx_psg3_track+TrackPlaybackControl(a6)	; Is SFX being played?
00085314 6A00                       		bpl.s	locret_722C4						; Branch if not
00085316 08EE 0002 0370             		bset	#2,v_spcsfx_psg3_track+TrackPlaybackControl(a6)	; Set 'SFX is overriding' bit
0008531C                            
0008531C                            locret_722C4:
0008531C 4E75                       		rts	
0008531E                            ; ===========================================================================
0008531E                            
0008531E                            loc_722C6:
0008531E 4216                       		clr.b	v_sndprio(a6)	; Clear priority
00085320 4E75                       		rts	
00085322                            ; ===========================================================================
00085322                            ; ---------------------------------------------------------------------------
00085322                            ; RAM addresses for FM and PSG channel variables used by the SFX
00085322                            ; ---------------------------------------------------------------------------
00085322                            ; dword_722CC: BGMChannelRAM:
00085322                            SFX_BGMChannelRAM:
00085322 00FF F0D0                  		dc.l (v_snddriver_ram+v_music_fm3_track)&$FFFFFF
00085326 0000 0000                  		dc.l 0
0008532A 00FF F100                  		dc.l (v_snddriver_ram+v_music_fm4_track)&$FFFFFF
0008532E 00FF F130                  		dc.l (v_snddriver_ram+v_music_fm5_track)&$FFFFFF
00085332 00FF F190                  		dc.l (v_snddriver_ram+v_music_psg1_track)&$FFFFFF
00085336 00FF F1C0                  		dc.l (v_snddriver_ram+v_music_psg2_track)&$FFFFFF
0008533A 00FF F1F0                  		dc.l (v_snddriver_ram+v_music_psg3_track)&$FFFFFF	; Plain PSG3
0008533E 00FF F1F0                  		dc.l (v_snddriver_ram+v_music_psg3_track)&$FFFFFF	; Noise
00085342                            ; dword_722EC: SFXChannelRAM:
00085342                            SFX_SFXChannelRAM:
00085342 00FF F220                  		dc.l (v_snddriver_ram+v_sfx_fm3_track)&$FFFFFF
00085346 0000 0000                  		dc.l 0
0008534A 00FF F250                  		dc.l (v_snddriver_ram+v_sfx_fm4_track)&$FFFFFF
0008534E 00FF F280                  		dc.l (v_snddriver_ram+v_sfx_fm5_track)&$FFFFFF
00085352 00FF F2B0                  		dc.l (v_snddriver_ram+v_sfx_psg1_track)&$FFFFFF
00085356 00FF F2E0                  		dc.l (v_snddriver_ram+v_sfx_psg2_track)&$FFFFFF
0008535A 00FF F310                  		dc.l (v_snddriver_ram+v_sfx_psg3_track)&$FFFFFF	; Plain PSG3
0008535E 00FF F310                  		dc.l (v_snddriver_ram+v_sfx_psg3_track)&$FFFFFF	; Noise
00085362                            ; ===========================================================================
00085362                            ; ---------------------------------------------------------------------------
00085362                            ; Play GHZ waterfall sound
00085362                            ; ---------------------------------------------------------------------------
00085362                            ; Sound_D0toDF:
00085362                            Sound_PlaySpecial:
00085362 4A2E 0027                  		tst.b	f_1up_playing(a6)	; Is 1-up playing?
00085366 6600 0000                  		bne.w	@locret			; Return if so
0008536A 4A2E 0004                  		tst.b	v_fadeout_counter(a6)	; Is music being faded out?
0008536E 6600 0000                  		bne.w	@locret			; Exit if it is
00085372 4A2E 0024                  		tst.b	f_fadein_flag(a6)	; Is music being faded in?
00085376 6600 0000                  		bne.w	@locret			; Exit if it is
0008537A 2079 0008 493E             		movea.l	(Go_SpecSoundIndex).l,a0
00085380 0407 00D0                  		subi.b	#spec__First,d7		; Make it 0-based
00085384 E54F                       		lsl.w	#2,d7
00085386 2670 7000                  		movea.l	(a0,d7.w),a3
0008538A 224B                       		movea.l	a3,a1
0008538C 7000                       		moveq	#0,d0
0008538E 3019                       		move.w	(a1)+,d0			; Voice pointer
00085390 D08B                       		add.l	a3,d0				; Relative pointer
00085392 2D40 0020                  		move.l	d0,v_special_voice_ptr(a6)	; Store voice pointer
00085396 1A19                       		move.b	(a1)+,d5			; Dividing timing
00085398                            		; DANGER! there is a missing 'moveq	#0,d7' here, without which special SFXes whose
00085398                            		; index entry is above $3F will cause a crash. This instance was not fixed in Ristar's driver.
00085398 7E00                       		moveq	#0,d7	
0008539A 1E19                       		move.b	(a1)+,d7			; Number of tracks (FM + PSG)
0008539C 5307                       		subq.b	#1,d7
0008539E 7C30                       		moveq	#TrackSz,d6
000853A0                            ; loc_72348:
000853A0                            @sfxloadloop:
000853A0 1829 0001                  		move.b	1(a1),d4					; Voice control bits
000853A4 6B00                       		bmi.s	@sfxoverridepsg					; Branch if PSG
000853A6 08EE 0002 0100             		bset	#2,v_music_fm4_track+TrackPlaybackControl(a6)	; Set 'SFX is overriding' bit
000853AC 4BEE 0340                  		lea	v_spcsfx_fm4_track(a6),a5
000853B0 6000                       		bra.s	@sfxinitpsg
000853B2                            ; ===========================================================================
000853B2                            ; loc_7235A:
000853B2                            @sfxoverridepsg:
000853B2 08EE 0002 01F0             		bset	#2,v_music_psg3_track+TrackPlaybackControl(a6)	; Set 'SFX is overriding' bit
000853B8 4BEE 0370                  		lea	v_spcsfx_psg3_track(a6),a5
000853BC                            ; loc_72364:
000853BC                            @sfxinitpsg:
000853BC 244D                       		movea.l	a5,a2
000853BE 700B                       		moveq	#(TrackSz/4)-1,d0	; $30 bytes
000853C0                            ; loc_72368:
000853C0                            @clearsfxtrackram:
000853C0 429A                       		clr.l	(a2)+
000853C2 51C8 FFFC                  		dbf	d0,@clearsfxtrackram
000853C6                            
000853C6 3A99                       		move.w	(a1)+,(a5)			; Initial playback control bits & voice control bits (TrackPlaybackControl)
000853C8 1B45 0002                  		move.b	d5,TrackTempoDivider(a5)
000853CC 7000                       		moveq	#0,d0
000853CE 3019                       		move.w	(a1)+,d0			; Track data pointer
000853D0 D08B                       		add.l	a3,d0				; Relative pointer
000853D2 2B40 0004                  		move.l	d0,TrackDataPointer(a5)	; Store track pointer
000853D6 3B59 0008                  		move.w	(a1)+,TrackTranspose(a5)	; load FM/PSG channel modifier
000853DA 1B7C 0001 000E             		move.b	#1,TrackDurationTimeout(a5)	; Set duration of first "note"
000853E0 1B46 000D                  		move.b	d6,TrackStackPointer(a5)	; set "gosub" (coord flag F8h) stack init value
000853E4 4A04                       		tst.b	d4				; Is this a PSG channel?
000853E6 6B00                       		bmi.s	@sfxpsginitdone			; Branch if yes
000853E8 1B7C 00C0 000A             		move.b	#$C0,TrackAMSFMSPan(a5)	; AMS/FMS/Panning
000853EE                            ; loc_72396:
000853EE                            @sfxpsginitdone:
000853EE 51CF FFB0                  		dbf	d7,@sfxloadloop
000853F2                            
000853F2 4A2E 0250                  		tst.b	v_sfx_fm4_track+TrackPlaybackControl(a6)	; Is track playing?
000853F6 6A00                       		bpl.s	@doneoverride					; Branch if not
000853F8 08EE 0002 0340             		bset	#2,v_spcsfx_fm4_track+TrackPlaybackControl(a6)	; Set 'SFX is overriding' bit
000853FE                            ; loc_723A6:
000853FE                            @doneoverride:
000853FE 4A2E 0310                  		tst.b	v_sfx_psg3_track+TrackPlaybackControl(a6)	; Is track playing?
00085402 6A00                       		bpl.s	@locret						; Branch if not
00085404 08EE 0002 0370             		bset	#2,v_spcsfx_psg3_track+TrackPlaybackControl(a6)	; Set 'SFX is overriding' bit
0008540A 0004 001F                  		ori.b	#$1F,d4						; Command to silence channel
0008540E 13C4 00C0 0011             		move.b	d4,(psg_input).l
00085414 0844 0005                  		bchg	#5,d4			; Command to silence noise channel
00085418 13C4 00C0 0011             		move.b	d4,(psg_input).l
0008541E                            ; locret_723C6:
0008541E                            @locret:
0008541E 4E75                       		rts	
00085420                            ; End of function PlaySoundID
00085420                            
00085420                            ; ===========================================================================
00085420                            ; ---------------------------------------------------------------------------
00085420                            ; Unused RAM addresses for FM and PSG channel variables used by the Special SFX
00085420                            ; ---------------------------------------------------------------------------
00085420                            ; The first block would have been used for overriding the music tracks
00085420                            ; as they have a lower priority, just as they are in Sound_PlaySFX
00085420                            ; The third block would be used to set up the Special SFX
00085420                            ; The second block, however, is for the SFX tracks, which have a higher priority
00085420                            ; and would be checked for if they're currently playing
00085420                            ; If they are, then the third block would be used again, this time to mark
00085420                            ; the new tracks as 'currently playing'
00085420                            
00085420                            ; These were actually used in Moonwalker's driver (and other SMPS 68k Type 1a drivers)
00085420                            
00085420                            ; BGMFM4PSG3RAM:
00085420                            ;SpecSFX_BGMChannelRAM:
00085420 00FF F100                  		dc.l (v_snddriver_ram+v_music_fm4_track)&$FFFFFF
00085424 00FF F1F0                  		dc.l (v_snddriver_ram+v_music_psg3_track)&$FFFFFF
00085428                            ; SFXFM4PSG3RAM:
00085428                            ;SpecSFX_SFXChannelRAM:
00085428 00FF F250                  		dc.l (v_snddriver_ram+v_sfx_fm4_track)&$FFFFFF
0008542C 00FF F310                  		dc.l (v_snddriver_ram+v_sfx_psg3_track)&$FFFFFF
00085430                            ; SpecialSFXFM4PSG3RAM:
00085430                            ;SpecSFX_SpecSFXChannelRAM:
00085430 00FF F340                  		dc.l (v_snddriver_ram+v_spcsfx_fm4_track)&$FFFFFF
00085434 00FF F370                  		dc.l (v_snddriver_ram+v_spcsfx_psg3_track)&$FFFFFF
00085438                            
00085438                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00085438                            
00085438                            ; Snd_FadeOut1: Snd_FadeOutSFX: FadeOutSFX:
00085438                            StopSFX:
00085438 4216                       		clr.b	v_sndprio(a6)		; Clear priority
0008543A 4BEE 0220                  		lea	v_sfx_track_ram(a6),a5
0008543E 7E05                       		moveq	#((v_sfx_track_ram_end-v_sfx_track_ram)/TrackSz)-1,d7	; 3 FM + 3 PSG tracks (SFX)
00085440                            ; loc_723EA:
00085440                            @trackloop:
00085440 4A15                       		tst.b	(a5)		; Is track playing? (TrackPlaybackControl)
00085442 6A00 0000                  		bpl.w	@nexttrack	; Branch if not
00085446 0895 0007                  		bclr	#7,(a5)		; Stop track (TrackPlaybackControl)
0008544A 7600                       		moveq	#0,d3
0008544C 162D 0001                  		move.b	TrackVoiceControl(a5),d3	; Get voice control bits
00085450 6B00                       		bmi.s	@trackpsg			; Branch if PSG
00085452 4EBA 0000                  		jsr	FMNoteOff(pc)
00085456 0C03 0004                  		cmpi.b	#4,d3						; Is this FM4?
0008545A 6600                       		bne.s	@getfmpointer					; Branch if not
0008545C 4A2E 0340                  		tst.b	v_spcsfx_fm4_track+TrackPlaybackControl(a6)	; Is special SFX playing?
00085460 6A00                       		bpl.s	@getfmpointer					; Branch if not
00085462                            		; DANGER! there is a missing 'movea.l	a5,a3' here, without which the
00085462                            		; code is broken. It is dangerous to do a fade out when a GHZ waterfall
00085462                            		; is playing its sound!
00085462 4BEE 0340                  		lea	v_spcsfx_fm4_track(a6),a5
00085466 226E 0020                  		movea.l	v_special_voice_ptr(a6),a1	; Get special voice pointer
0008546A 6000                       		bra.s	@gotfmpointer
0008546C                            ; ===========================================================================
0008546C                            ; loc_72416:
0008546C                            @getfmpointer:
0008546C 5503                       		subq.b	#2,d3		; SFX only has FM3 and up
0008546E E50B                       		lsl.b	#2,d3
00085470 41FA FEB0                  		lea	SFX_BGMChannelRAM(pc),a0
00085474 264D                       		movea.l	a5,a3
00085476 2A70 3000                  		movea.l	(a0,d3.w),a5
0008547A 226E 0018                  		movea.l	v_voice_ptr(a6),a1	; Get music voice pointer
0008547E                            ; loc_72428:
0008547E                            @gotfmpointer:
0008547E 0895 0002                  		bclr	#2,(a5)			; Clear 'SFX is overriding' bit (TrackPlaybackControl)
00085482 08D5 0001                  		bset	#1,(a5)			; Set 'track at rest' bit (TrackPlaybackControl)
00085486 102D 000B                  		move.b	TrackVoiceIndex(a5),d0	; Current voice
0008548A 4EBA 0000                  		jsr	SetVoice(pc)
0008548E 2A4B                       		movea.l	a3,a5
00085490 6000                       		bra.s	@nexttrack
00085492                            ; ===========================================================================
00085492                            ; loc_7243C:
00085492                            @trackpsg:
00085492 4EBA 0000                  		jsr	PSGNoteOff(pc)
00085496 41EE 0370                  		lea	v_spcsfx_psg3_track(a6),a0
0008549A 0C03 00E0                  		cmpi.b	#$E0,d3			; Is this a noise channel:
0008549E 6700                       		beq.s	@gotpsgpointer		; Branch if yes
000854A0 0C03 00C0                  		cmpi.b	#$C0,d3			; Is this PSG 3?
000854A4 6700                       		beq.s	@gotpsgpointer		; Branch if yes
000854A6 E60B                       		lsr.b	#3,d3
000854A8 41FA FE78                  		lea	SFX_BGMChannelRAM(pc),a0
000854AC 2070 3000                  		movea.l	(a0,d3.w),a0
000854B0                            ; loc_7245A:
000854B0                            @gotpsgpointer:
000854B0 0890 0002                  		bclr	#2,(a0)				; Clear 'SFX is overriding' bit (TrackPlaybackControl)
000854B4 08D0 0001                  		bset	#1,(a0)				; Set 'track at rest' bit (TrackPlaybackControl)
000854B8 0C28 00E0 0001             		cmpi.b	#$E0,TrackVoiceControl(a0)	; Is this a noise channel?
000854BE 6600                       		bne.s	@nexttrack			; Branch if not
000854C0 13E8 001F 00C0 0011        		move.b	TrackPSGNoise(a0),(psg_input).l ; Set noise type
000854C8                            ; loc_72472:
000854C8                            @nexttrack:
000854C8 DAFC 0030                  		adda.w	#TrackSz,a5
000854CC 51CF FF72                  		dbf	d7,@trackloop
000854D0                            
000854D0 4E75                       		rts	
000854D2                            ; End of function StopSFX
000854D2                            
000854D2                            
000854D2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000854D2                            
000854D2                            ; Snd_FadeOut2: FadeOutSFX2: FadeOutSpecialSFX:
000854D2                            StopSpecialSFX:
000854D2 4BEE 0340                  		lea	v_spcsfx_fm4_track(a6),a5
000854D6 4A15                       		tst.b	(a5)			; Is track playing? (TrackPlaybackControl)
000854D8 6A00                       		bpl.s	@fadedfm		; Branch if not
000854DA 0895 0007                  		bclr	#7,(a5)			; Stop track (TrackPlaybackControl)
000854DE 0815 0002                  		btst	#2,(a5)			; Is SFX overriding? (TrackPlaybackControl)
000854E2 6600                       		bne.s	@fadedfm		; Branch if not
000854E4 4EBA 0000                  		jsr	SendFMNoteOff(pc)
000854E8 4BEE 0100                  		lea	v_music_fm4_track(a6),a5
000854EC 0895 0002                  		bclr	#2,(a5)			; Clear 'SFX is overriding' bit (TrackPlaybackControl)
000854F0 08D5 0001                  		bset	#1,(a5)			; Set 'track at rest' bit (TrackPlaybackControl)
000854F4 4A15                       		tst.b	(a5)			; Is track playing? (TrackPlaybackControl)
000854F6 6A00                       		bpl.s	@fadedfm		; Branch if not
000854F8 226E 0018                  		movea.l	v_voice_ptr(a6),a1	; Voice pointer
000854FC 102D 000B                  		move.b	TrackVoiceIndex(a5),d0	; Current voice
00085500 4EBA 0000                  		jsr	SetVoice(pc)
00085504                            ; loc_724AE:
00085504                            @fadedfm:
00085504 4BEE 0370                  		lea	v_spcsfx_psg3_track(a6),a5
00085508 4A15                       		tst.b	(a5)			; Is track playing? (TrackPlaybackControl)
0008550A 6A00                       		bpl.s	@fadedpsg		; Branch if not
0008550C 0895 0007                  		bclr	#7,(a5)			; Stop track (TrackPlaybackControl)
00085510 0815 0002                  		btst	#2,(a5)			; Is SFX overriding? (TrackPlaybackControl)
00085514 6600                       		bne.s	@fadedpsg		; Return if not
00085516 4EBA 0000                  		jsr	SendPSGNoteOff(pc)
0008551A 4BEE 01F0                  		lea	v_music_psg3_track(a6),a5
0008551E 0895 0002                  		bclr	#2,(a5)			; Clear 'SFX is overriding' bit (TrackPlaybackControl)
00085522 08D5 0001                  		bset	#1,(a5)			; Set 'track at rest' bit (TrackPlaybackControl)
00085526 4A15                       		tst.b	(a5)			; Is track playing? (TrackPlaybackControl)
00085528 6A00                       		bpl.s	@fadedpsg		; Return if not
0008552A 0C2D 00E0 0001             		cmpi.b	#$E0,TrackVoiceControl(a5)	; Is this a noise channel?
00085530 6600                       		bne.s	@fadedpsg			; Return if not
00085532 13ED 001F 00C0 0011        		move.b	TrackPSGNoise(a5),(psg_input).l ; Set noise type
0008553A                            ; locret_724E4:
0008553A                            @fadedpsg:
0008553A 4E75                       		rts	
0008553C                            ; End of function StopSpecialSFX
0008553C                            
0008553C                            ; ===========================================================================
0008553C                            ; ---------------------------------------------------------------------------
0008553C                            ; Fade out music
0008553C                            ; ---------------------------------------------------------------------------
0008553C                            ; Sound_E0:
0008553C                            FadeOutMusic:
0008553C 4EBA FEFA                  		jsr	StopSFX(pc)
00085540 4EBA FF90                  		jsr	StopSpecialSFX(pc)
00085544 1D7C 0003 0006             		move.b	#3,v_fadeout_delay(a6)			; Set fadeout delay to 3
0008554A 1D7C 0028 0004             		move.b	#$28,v_fadeout_counter(a6)		; Set fadeout counter
00085550 422E 0040                  		clr.b	v_music_dac_track+TrackPlaybackControl(a6)	; Stop DAC track
00085554 422E 002A                  		clr.b	f_speedup(a6)				; Disable speed shoes tempo
00085558 4E75                       		rts	
0008555A                            
0008555A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0008555A                            
0008555A                            ; sub_72504:
0008555A                            DoFadeOut:
0008555A 102E 0006                  		move.b	v_fadeout_delay(a6),d0	; Has fadeout delay expired?
0008555E 6700                       		beq.s	@continuefade		; Branch if yes
00085560 532E 0006                  		subq.b	#1,v_fadeout_delay(a6)
00085564 4E75                       		rts	
00085566                            ; ===========================================================================
00085566                            ; loc_72510:
00085566                            @continuefade:
00085566 532E 0004                  		subq.b	#1,v_fadeout_counter(a6)	; Update fade counter
0008556A 6700 0000                  		beq.w	StopAllSound			; Branch if fade is done
0008556E 1D7C 0003 0006             		move.b	#3,v_fadeout_delay(a6)		; Reset fade delay
00085574 4BEE 0070                  		lea	v_music_fm_tracks(a6),a5
00085578 7E05                       		moveq	#((v_music_fm_tracks_end-v_music_fm_tracks)/TrackSz)-1,d7	; 6 FM tracks
0008557A                            ; loc_72524:
0008557A                            @fmloop:
0008557A 4A15                       		tst.b	(a5)			; Is track playing? (TrackPlaybackControl)
0008557C 6A00                       		bpl.s	@nextfm			; Branch if not
0008557E 522D 0009                  		addq.b	#1,TrackVolume(a5)	; Increase volume attenuation
00085582 6A00                       		bpl.s	@sendfmtl		; Branch if still positive
00085584 0895 0007                  		bclr	#7,(a5)			; Stop track (TrackPlaybackControl)
00085588 6000                       		bra.s	@nextfm
0008558A                            ; ===========================================================================
0008558A                            ; loc_72534:
0008558A                            @sendfmtl:
0008558A 4EBA 0000                  		jsr	SendVoiceTL(pc)
0008558E                            ; loc_72538:
0008558E                            @nextfm:
0008558E DAFC 0030                  		adda.w	#TrackSz,a5
00085592 51CF FFE6                  		dbf	d7,@fmloop
00085596                            
00085596 7E02                       		moveq	#((v_music_psg_tracks_end-v_music_psg_tracks)/TrackSz)-1,d7	; 3 PSG tracks
00085598                            ; loc_72542:
00085598                            @psgloop:
00085598 4A15                       		tst.b	(a5)			; Is track playing? (TrackPlaybackControl)
0008559A 6A00                       		bpl.s	@nextpsg		; branch if not
0008559C 522D 0009                  		addq.b	#1,TrackVolume(a5)	; Increase volume attenuation
000855A0 0C2D 0010 0009             		cmpi.b	#$10,TrackVolume(a5)	; Is it greater than $F?
000855A6 6500                       		blo.s	@sendpsgvol		; Branch if not
000855A8 0895 0007                  		bclr	#7,(a5)			; Stop track (TrackPlaybackControl)
000855AC 6000                       		bra.s	@nextpsg
000855AE                            ; ===========================================================================
000855AE                            ; loc_72558:
000855AE                            @sendpsgvol:
000855AE 1C2D 0009                  		move.b	TrackVolume(a5),d6	; Store new volume attenuation
000855B2 4EBA 0000                  		jsr	SetPSGVolume(pc)
000855B6                            ; loc_72560:
000855B6                            @nextpsg:
000855B6 DAFC 0030                  		adda.w	#TrackSz,a5
000855BA 51CF FFDC                  		dbf	d7,@psgloop
000855BE                            
000855BE 4E75                       		rts	
000855C0                            ; End of function DoFadeOut
000855C0                            
000855C0                            
000855C0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000855C0                            
000855C0                            ; sub_7256A:
000855C0                            FMSilenceAll:
000855C0 7602                       		moveq	#2,d3		; 3 FM channels for each YM2612 parts
000855C2 7028                       		moveq	#$28,d0		; FM key on/off register
000855C4                            ; loc_7256E:
000855C4                            @noteoffloop:
000855C4 1203                       		move.b	d3,d1
000855C6 4EBA 0000                  		jsr	WriteFMI(pc)
000855CA 5801                       		addq.b	#4,d1		; Move to YM2612 part 1
000855CC 4EBA 0000                  		jsr	WriteFMI(pc)
000855D0 51CB FFF2                  		dbf	d3,@noteoffloop
000855D4                            
000855D4 7040                       		moveq	#$40,d0		; Set TL on FM channels...
000855D6 727F                       		moveq	#$7F,d1		; ... to total attenuation...
000855D8 7802                       		moveq	#2,d4		; ... for all 3 channels...
000855DA                            ; loc_72584:
000855DA                            @channelloop:
000855DA 7603                       		moveq	#3,d3		; ... for all operators on each channel...
000855DC                            ; loc_72586:
000855DC                            @channeltlloop:
000855DC 4EBA 0000                  		jsr	WriteFMI(pc)	; ... for part 0...
000855E0 4EBA 0000                  		jsr	WriteFMII(pc)	; ... and part 1.
000855E4 5840                       		addq.w	#4,d0		; Next TL operator
000855E6 51CB FFF4                  		dbf	d3,@channeltlloop
000855EA                            
000855EA 0400 000F                  		subi.b	#$F,d0		; Move to TL operator 1 of next channel
000855EE 51CC FFEA                  		dbf	d4,@channelloop
000855F2                            
000855F2 4E75                       		rts	
000855F4                            ; End of function FMSilenceAll
000855F4                            
000855F4                            ; ===========================================================================
000855F4                            ; ---------------------------------------------------------------------------
000855F4                            ; Stop music
000855F4                            ; ---------------------------------------------------------------------------
000855F4                            ; Sound_E4: StopSoundAndMusic:
000855F4                            StopAllSound:
000855F4 702B                       		moveq	#$2B,d0		; Enable/disable DAC
000855F6 123C 0080                  		move.b	#$80,d1		; Enable DAC
000855FA 4EBA 0000                  		jsr	WriteFMI(pc)
000855FE 7027                       		moveq	#$27,d0		; Timers, FM3/FM6 mode
00085600 7200                       		moveq	#0,d1		; FM3/FM6 normal mode, disable timers
00085602 4EBA 0000                  		jsr	WriteFMI(pc)
00085606 204E                       		movea.l	a6,a0
00085608                            		; DANGER! This should be clearing all variables and track data, but misses the last $10 bytes of v_spcsfx_psg3_track.
00085608                            		; Remove the '-$10' to fix this.
00085608 303C 00E7                  		move.w	#((v_spcsfx_track_ram_end-v_startofvariables)/4)-1,d0	; Clear $390 bytes: all variables and most track data
0008560C                            ; loc_725B6:
0008560C                            @clearramloop:
0008560C 4298                       		clr.l	(a0)+
0008560E 51C8 FFFC                  		dbf	d0,@clearramloop
00085612                            
00085612 1D7C 0080 0009             		move.b	#$80,v_sound_id(a6)	; set music to $80 (silence)
00085618 4EBA FFA6                  		jsr	FMSilenceAll(pc)
0008561C 6000 0000                  		bra.w	PSGSilenceAll
00085620                            
00085620                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00085620                            
00085620                            ; sub_725CA:
00085620                            InitMusicPlayback:
00085620 204E                       		movea.l	a6,a0
00085622                            		; Save several values
00085622 1216                       		move.b	v_sndprio(a6),d1
00085624 142E 0027                  		move.b	f_1up_playing(a6),d2
00085628 162E 002A                  		move.b	f_speedup(a6),d3
0008562C 182E 0026                  		move.b	v_fadein_counter(a6),d4
00085630                            		; DANGER! Only v_soundqueue0 and v_soundqueue1 are backed up, once again breaking v_soundqueue2
00085630 3A2E 000A                  		move.w	v_soundqueue0(a6),d5
00085634 303C 0087                  		move.w	#((v_music_track_ram_end-v_startofvariables)/4)-1,d0	; Clear $220 bytes: all variables and music track data
00085638                            ; loc_725E4:
00085638                            @clearramloop:
00085638 4298                       		clr.l	(a0)+
0008563A 51C8 FFFC                  		dbf	d0,@clearramloop
0008563E                            
0008563E                            		; Restore the values saved above
0008563E 1C81                       		move.b	d1,v_sndprio(a6)
00085640 1D42 0027                  		move.b	d2,f_1up_playing(a6)
00085644 1D43 002A                  		move.b	d3,f_speedup(a6)
00085648 1D44 0026                  		move.b	d4,v_fadein_counter(a6)
0008564C 3D45 000A                  		move.w	d5,v_soundqueue0(a6)
00085650 1D7C 0080 0009             		move.b	#$80,v_sound_id(a6)	; set music to $80 (silence)
00085656                            		; DANGER! This silences ALL channels, even the ones being used
00085656                            		; by SFX, and not music! @sendfmnoteoff does this already, and
00085656                            		; doesn't affect SFX channels, either.
00085656                            		; This should be replaced with an 'rts'.
00085656 4EBA FF68                  		jsr	FMSilenceAll(pc)
0008565A 6000 0000                  		bra.w	PSGSilenceAll
0008565E                            		; DANGER! InitMusicPlayback, and Sound_PlayBGM for that matter,
0008565E                            		; don't do a very good job of setting up the music tracks.
0008565E                            		; Tracks that aren't defined in a music file's header don't have
0008565E                            		; their channels defined, meaning @sendfmnoteoff won't silence
0008565E                            		; hardware properly. In combination with removing the above
0008565E                            		; calls to FMSilenceAll/PSGSilenceAll, this will cause hanging
0008565E                            		; notes.
0008565E                            		; To fix this, I suggest using this code, instead of an 'rts':
0008565E                            		;lea	v_music_track_ram+TrackVoiceControl(a6),a1
0008565E                            		;lea	FMDACInitBytes(pc),a2
0008565E                            		;moveq	#((v_music_fmdac_tracks_end-v_music_fmdac_tracks)/TrackSz)-1,d1		; 7 DAC/FM tracks
0008565E                            		;bsr.s	@writeloop
0008565E                            		;lea	PSGInitBytes(pc),a2
0008565E                            		;moveq	#((v_music_psg_tracks_end-v_music_psg_tracks)/TrackSz)-1,d1	; 3 PSG tracks
0008565E                            
0008565E                            ;@writeloop:
0008565E                            		;move.b	(a2)+,(a1)		; Write track's channel byte
0008565E                            		;lea	TrackSz(a1),a1		; Next track
0008565E                            		;dbf	d1,@writeloop		; Loop for all DAC/FM/PSG tracks
0008565E                            
0008565E                            		;rts
0008565E                            	
0008565E                            ; End of function InitMusicPlayback
0008565E                            
0008565E                            
0008565E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0008565E                            
0008565E                            ; sub_7260C:
0008565E                            TempoWait:
0008565E 1D6E 0002 0001             		move.b	v_main_tempo(a6),v_main_tempo_timeout(a6)	; Reset main tempo timeout
00085664 41EE 004E                  		lea	v_music_track_ram+TrackDurationTimeout(a6),a0	; note timeout
00085668 7030                       		moveq	#TrackSz,d0
0008566A 7209                       		moveq	#((v_music_track_ram_end-v_music_track_ram)/TrackSz)-1,d1		; 1 DAC + 6 FM + 3 PSG tracks
0008566C                            ; loc_7261A:
0008566C                            @tempoloop:
0008566C 5210                       		addq.b	#1,(a0)	; Delay note by 1 frame
0008566E D0C0                       		adda.w	d0,a0	; Advance to next track
00085670 51C9 FFFA                  		dbf	d1,@tempoloop
00085674                            
00085674 4E75                       		rts	
00085676                            ; End of function TempoWait
00085676                            
00085676                            ; ===========================================================================
00085676                            ; ---------------------------------------------------------------------------
00085676                            ; Speed	up music
00085676                            ; ---------------------------------------------------------------------------
00085676                            ; Sound_E2:
00085676                            SpeedUpMusic:
00085676 4A2E 0027                  		tst.b	f_1up_playing(a6)
0008567A 6600                       		bne.s	@speedup_1up
0008567C 1D6E 0029 0002             		move.b	v_speeduptempo(a6),v_main_tempo(a6)
00085682 1D6E 0029 0001             		move.b	v_speeduptempo(a6),v_main_tempo_timeout(a6)
00085688 1D7C 0080 002A             		move.b	#$80,f_speedup(a6)
0008568E 4E75                       		rts	
00085690                            ; ===========================================================================
00085690                            ; loc_7263E:
00085690                            @speedup_1up:
00085690 1D6E 03C9 03A2             		move.b	v_1up_ram_copy+v_speeduptempo(a6),v_1up_ram_copy+v_main_tempo(a6)
00085696 1D6E 03C9 03A1             		move.b	v_1up_ram_copy+v_speeduptempo(a6),v_1up_ram_copy+v_main_tempo_timeout(a6)
0008569C 1D7C 0080 03CA             		move.b	#$80,v_1up_ram_copy+f_speedup(a6)
000856A2 4E75                       		rts	
000856A4                            ; ===========================================================================
000856A4                            ; ---------------------------------------------------------------------------
000856A4                            ; Change music back to normal speed
000856A4                            ; ---------------------------------------------------------------------------
000856A4                            ; Sound_E3:
000856A4                            SlowDownMusic:
000856A4 4A2E 0027                  		tst.b	f_1up_playing(a6)
000856A8 6600                       		bne.s	@slowdown_1up
000856AA 1D6E 0028 0002             		move.b	v_tempo_mod(a6),v_main_tempo(a6)
000856B0 1D6E 0028 0001             		move.b	v_tempo_mod(a6),v_main_tempo_timeout(a6)
000856B6 422E 002A                  		clr.b	f_speedup(a6)
000856BA 4E75                       		rts	
000856BC                            ; ===========================================================================
000856BC                            ; loc_7266A:
000856BC                            @slowdown_1up:
000856BC 1D6E 03C8 03A2             		move.b	v_1up_ram_copy+v_tempo_mod(a6),v_1up_ram_copy+v_main_tempo(a6)
000856C2 1D6E 03C8 03A1             		move.b	v_1up_ram_copy+v_tempo_mod(a6),v_1up_ram_copy+v_main_tempo_timeout(a6)
000856C8 422E 03CA                  		clr.b	v_1up_ram_copy+f_speedup(a6)
000856CC 4E75                       		rts	
000856CE                            
000856CE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000856CE                            
000856CE                            ; sub_7267C:
000856CE                            DoFadeIn:
000856CE 4A2E 0025                  		tst.b	v_fadein_delay(a6)	; Has fadein delay expired?
000856D2 6700                       		beq.s	@continuefade		; Branch if yes
000856D4 532E 0025                  		subq.b	#1,v_fadein_delay(a6)
000856D8 4E75                       		rts	
000856DA                            ; ===========================================================================
000856DA                            ; loc_72688:
000856DA                            @continuefade:
000856DA 4A2E 0026                  		tst.b	v_fadein_counter(a6)	; Is fade done?
000856DE 6700                       		beq.s	@fadedone		; Branch if yes
000856E0 532E 0026                  		subq.b	#1,v_fadein_counter(a6)	; Update fade counter
000856E4 1D7C 0002 0025             		move.b	#2,v_fadein_delay(a6)	; Reset fade delay
000856EA 4BEE 0070                  		lea	v_music_fm_tracks(a6),a5
000856EE 7E05                       		moveq	#((v_music_fm_tracks_end-v_music_fm_tracks)/TrackSz)-1,d7	; 6 FM tracks
000856F0                            ; loc_7269E:
000856F0                            @fmloop:
000856F0 4A15                       		tst.b	(a5)			; Is track playing? (TrackPlaybackControl)
000856F2 6A00                       		bpl.s	@nextfm			; Branch if not
000856F4 532D 0009                  		subq.b	#1,TrackVolume(a5)	; Reduce volume attenuation
000856F8 4EBA 0000                  		jsr	SendVoiceTL(pc)
000856FC                            ; loc_726AA:
000856FC                            @nextfm:
000856FC DAFC 0030                  		adda.w	#TrackSz,a5
00085700 51CF FFEE                  		dbf	d7,@fmloop
00085704 7E02                       		moveq	#((v_music_psg_tracks_end-v_music_psg_tracks)/TrackSz)-1,d7		; 3 PSG tracks
00085706                            ; loc_726B4:
00085706                            @psgloop:
00085706 4A15                       		tst.b	(a5)			; Is track playing? (TrackPlaybackControl)
00085708 6A00                       		bpl.s	@nextpsg		; Branch if not
0008570A 532D 0009                  		subq.b	#1,TrackVolume(a5)	; Reduce volume attenuation
0008570E 1C2D 0009                  		move.b	TrackVolume(a5),d6	; Get value
00085712 0C06 0010                  		cmpi.b	#$10,d6			; Is it is < $10?
00085716 6500                       		blo.s	@sendpsgvol		; Branch if yes
00085718 7C0F                       		moveq	#$F,d6			; Limit to $F (maximum attenuation)
0008571A                            ; loc_726C8:
0008571A                            @sendpsgvol:
0008571A 4EBA 0000                  		jsr	SetPSGVolume(pc)
0008571E                            ; loc_726CC:
0008571E                            @nextpsg:
0008571E DAFC 0030                  		adda.w	#TrackSz,a5
00085722 51CF FFE2                  		dbf	d7,@psgloop
00085726 4E75                       		rts	
00085728                            ; ===========================================================================
00085728                            ; loc_726D6:
00085728                            @fadedone:
00085728 08AE 0002 0040             		bclr	#2,v_music_dac_track+TrackPlaybackControl(a6)	; Clear 'SFX overriding' bit
0008572E 422E 0024                  		clr.b	f_fadein_flag(a6)				; Stop fadein
00085732 4E75                       		rts	
00085734                            ; End of function DoFadeIn
00085734                            
00085734                            ; ===========================================================================
00085734                            ; loc_726E2:
00085734                            FMNoteOn:
00085734 0815 0001                  		btst	#1,(a5)		; Is track resting? (TrackPlaybackControl)
00085738 6600                       		bne.s	@locret		; Return if so
0008573A 0815 0002                  		btst	#2,(a5)		; Is track being overridden? (TrackPlaybackControl)
0008573E 6600                       		bne.s	@locret		; Return if so
00085740 7028                       		moveq	#$28,d0		; Note on/off register
00085742 122D 0001                  		move.b	TrackVoiceControl(a5),d1 ; Get channel bits
00085746 0001 00F0                  		ori.b	#$F0,d1		; Note on on all operators
0008574A 6000 0000                  		bra.w	WriteFMI
0008574E                            ; ===========================================================================
0008574E                            ; locret_726FC:
0008574E                            @locret:
0008574E 4E75                       		rts	
00085750                            
00085750                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00085750                            
00085750                            ; sub_726FE:
00085750                            FMNoteOff:
00085750 0815 0004                  		btst	#4,(a5)		; Is 'do not attack next note' set? (TrackPlaybackControl)
00085754 6600                       		bne.s	locret_72714	; Return if yes
00085756 0815 0002                  		btst	#2,(a5)		; Is SFX overriding? (TrackPlaybackControl)
0008575A 6600                       		bne.s	locret_72714	; Return if yes
0008575C                            ; loc_7270A:
0008575C                            SendFMNoteOff:
0008575C 7028                       		moveq	#$28,d0		; Note on/off register
0008575E 122D 0001                  		move.b	TrackVoiceControl(a5),d1 ; Note off to this channel
00085762 6000 0000                  		bra.w	WriteFMI
00085766                            ; ===========================================================================
00085766                            
00085766                            locret_72714:
00085766 4E75                       		rts	
00085768                            ; End of function FMNoteOff
00085768                            
00085768                            ; ===========================================================================
00085768                            ; loc_72716:
00085768                            WriteFMIorIIMain:
00085768 0815 0002                  		btst	#2,(a5)		; Is track being overriden by sfx? (TrackPlaybackControl)
0008576C 6600                       		bne.s	@locret		; Return if yes
0008576E 6000 0000                  		bra.w	WriteFMIorII
00085772                            ; ===========================================================================
00085772                            ; locret_72720:
00085772                            @locret:
00085772 4E75                       		rts	
00085774                            
00085774                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00085774                            
00085774                            ; sub_72722:
00085774                            WriteFMIorII:
00085774 082D 0002 0001             		btst	#2,TrackVoiceControl(a5)	; Is this bound for part I or II?
0008577A 6600                       		bne.s	WriteFMIIPart			; Branch if for part II
0008577C D02D 0001                  		add.b	TrackVoiceControl(a5),d0	; Add in voice control bits
00085780                            ; End of function WriteFMIorII
00085780                            
00085780                            
00085780                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00085780                            
00085780                            ; The reason I think this is an *early* SMPS 68k Type 1b
00085780                            ; is because this subroutine is the one from Type 1a:
00085780                            ; other Type 1b drivers have a newer, optimised version.
00085780                            ; The driver itself is Type 1b, with this odd exception.
00085780                            
00085780                            ; sub_7272E:
00085780                            WriteFMI:
00085780 1439 00A0 4000             		move.b	(ym2612_a0).l,d2
00085786 0802 0007                  		btst	#7,d2		; Is FM busy?
0008578A 66F4                       		bne.s	WriteFMI	; Loop if so
0008578C 13C0 00A0 4000             		move.b	d0,(ym2612_a0).l
00085792 4E71                       		nop	
00085794 4E71                       		nop	
00085796 4E71                       		nop	
00085798                            ; loc_72746:
00085798                            @waitloop:
00085798 1439 00A0 4000             		move.b	(ym2612_a0).l,d2
0008579E 0802 0007                  		btst	#7,d2		; Is FM busy?
000857A2 66F4                       		bne.s	@waitloop	; Loop if so
000857A4                            
000857A4 13C1 00A0 4001             		move.b	d1,(ym2612_d0).l
000857AA 4E75                       		rts	
000857AC                            ; End of function WriteFMI
000857AC                            
000857AC                            ; ===========================================================================
000857AC                            ; loc_7275A:
000857AC                            WriteFMIIPart:
000857AC 142D 0001                  		move.b	TrackVoiceControl(a5),d2 ; Get voice control bits
000857B0 0882 0002                  		bclr	#2,d2			; Clear chip toggle
000857B4 D002                       		add.b	d2,d0			; Add in to destination register
000857B6                            
000857B6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000857B6                            
000857B6                            ; sub_72764:
000857B6                            WriteFMII:
000857B6 1439 00A0 4000             		move.b	(ym2612_a0).l,d2
000857BC 0802 0007                  		btst	#7,d2		; Is FM busy?
000857C0 66F4                       		bne.s	WriteFMII	; Loop if so
000857C2 13C0 00A0 4002             		move.b	d0,(ym2612_a1).l
000857C8 4E71                       		nop	
000857CA 4E71                       		nop	
000857CC 4E71                       		nop	
000857CE                            ; loc_7277C:
000857CE                            @waitloop:
000857CE 1439 00A0 4000             		move.b	(ym2612_a0).l,d2
000857D4 0802 0007                  		btst	#7,d2		; Is FM busy?
000857D8 66F4                       		bne.s	@waitloop	; Loop if so
000857DA                            
000857DA 13C1 00A0 4003             		move.b	d1,(ym2612_d1).l
000857E0 4E75                       		rts	
000857E2                            ; End of function WriteFMII
000857E2                            
000857E2                            ; ===========================================================================
000857E2                            ; ---------------------------------------------------------------------------
000857E2                            ; FM Note Values: b-0 to a#8
000857E2                            ; ---------------------------------------------------------------------------
000857E2                            ; word_72790: FM_Notes:
000857E2                            FMFrequencies:
000857E2 025E 0284 02AB 02D3 02FE+  	dc.w $025E,$0284,$02AB,$02D3,$02FE,$032D,$035C,$038F,$03C5,$03FF,$043C,$047C
000857FA 0A5E 0A84 0AAB 0AD3 0AFE+  	dc.w $0A5E,$0A84,$0AAB,$0AD3,$0AFE,$0B2D,$0B5C,$0B8F,$0BC5,$0BFF,$0C3C,$0C7C
00085812 125E 1284 12AB 12D3 12FE+  	dc.w $125E,$1284,$12AB,$12D3,$12FE,$132D,$135C,$138F,$13C5,$13FF,$143C,$147C
0008582A 1A5E 1A84 1AAB 1AD3 1AFE+  	dc.w $1A5E,$1A84,$1AAB,$1AD3,$1AFE,$1B2D,$1B5C,$1B8F,$1BC5,$1BFF,$1C3C,$1C7C
00085842 225E 2284 22AB 22D3 22FE+  	dc.w $225E,$2284,$22AB,$22D3,$22FE,$232D,$235C,$238F,$23C5,$23FF,$243C,$247C
0008585A 2A5E 2A84 2AAB 2AD3 2AFE+  	dc.w $2A5E,$2A84,$2AAB,$2AD3,$2AFE,$2B2D,$2B5C,$2B8F,$2BC5,$2BFF,$2C3C,$2C7C
00085872 325E 3284 32AB 32D3 32FE+  	dc.w $325E,$3284,$32AB,$32D3,$32FE,$332D,$335C,$338F,$33C5,$33FF,$343C,$347C
0008588A 3A5E 3A84 3AAB 3AD3 3AFE+  	dc.w $3A5E,$3A84,$3AAB,$3AD3,$3AFE,$3B2D,$3B5C,$3B8F,$3BC5,$3BFF,$3C3C,$3C7C
000858A2                            
000858A2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000858A2                            
000858A2                            ; sub_72850:
000858A2                            PSGUpdateTrack:
000858A2 532D 000E                  		subq.b	#1,TrackDurationTimeout(a5)	; Update note timeout
000858A6 6600                       		bne.s	@notegoing
000858A8 0895 0004                  		bclr	#4,(a5)				; Clear 'do not attack note' bit (TrackPlaybackControl)
000858AC 4EBA 0000                  		jsr	PSGDoNext(pc)
000858B0 4EBA 0000                  		jsr	PSGDoNoteOn(pc)
000858B4 6000 0000                  		bra.w	PSGDoVolFX
000858B8                            ; ===========================================================================
000858B8                            ; loc_72866:
000858B8                            @notegoing:
000858B8 4EBA F4CA                  		jsr	NoteTimeoutUpdate(pc)
000858BC 4EBA 0000                  		jsr	PSGUpdateVolFX(pc)
000858C0 4EBA F4EA                  		jsr	DoModulation(pc)
000858C4 4EBA 0000                  		jsr	PSGUpdateFreq(pc)	; It would be better if this were a jmp and the rts was removed
000858C8 4E75                       		rts
000858CA                            ; End of function PSGUpdateTrack
000858CA                            
000858CA                            
000858CA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000858CA                            
000858CA                            ; sub_72878:
000858CA                            PSGDoNext:
000858CA 0895 0001                  		bclr	#1,(a5)				; Clear 'track at rest' bit (TrackPlaybackControl)
000858CE 286D 0004                  		movea.l	TrackDataPointer(a5),a4	; Get track data pointer
000858D2                            ; loc_72880:
000858D2                            @noteloop:
000858D2 7A00                       		moveq	#0,d5
000858D4 1A1C                       		move.b	(a4)+,d5	; Get byte from track
000858D6 0C05 00E0                  		cmpi.b	#$E0,d5		; Is it a coord. flag?
000858DA 6500                       		blo.s	@gotnote	; Branch if not
000858DC 4EBA 0000                  		jsr	CoordFlag(pc)
000858E0 60F0                       		bra.s	@noteloop
000858E2                            ; ===========================================================================
000858E2                            ; loc_72890:
000858E2                            @gotnote:
000858E2 4A05                       		tst.b	d5		; Is it a note?
000858E4 6A00                       		bpl.s	@gotduration	; Branch if not
000858E6 4EBA 0000                  		jsr	PSGSetFreq(pc)
000858EA 1A1C                       		move.b	(a4)+,d5	; Get another byte
000858EC 4A05                       		tst.b	d5		; Is it a duration?
000858EE 6A00                       		bpl.s	@gotduration	; Branch if yes
000858F0 534C                       		subq.w	#1,a4		; Put byte back
000858F2 6000 F452                  		bra.w	FinishTrackUpdate
000858F6                            ; ===========================================================================
000858F6                            ; loc_728A4:
000858F6                            @gotduration:
000858F6 4EBA F42E                  		jsr	SetDuration(pc)
000858FA 6000 F44A                  		bra.w	FinishTrackUpdate
000858FE                            ; End of function PSGDoNext
000858FE                            
000858FE                            
000858FE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000858FE                            
000858FE                            ; sub_728AC:
000858FE                            PSGSetFreq:
000858FE 0405 0081                  		subi.b	#$81,d5		; Convert to 0-based index
00085902 6500                       		bcs.s	@restpsg	; If $80, put track at rest
00085904 DA2D 0008                  		add.b	TrackTranspose(a5),d5 ; Add in channel transposition
00085908 0245 007F                  		andi.w	#$7F,d5		; Clear high byte and sign bit
0008590C E34D                       		lsl.w	#1,d5
0008590E 41FA 0000                  		lea	PSGFrequencies(pc),a0
00085912 3B70 5000 0010             		move.w	(a0,d5.w),TrackFreq(a5)	; Set new frequency
00085918 6000 F42C                  		bra.w	FinishTrackUpdate
0008591C                            ; ===========================================================================
0008591C                            ; loc_728CA:
0008591C                            @restpsg:
0008591C 08D5 0001                  		bset	#1,(a5)			; Set 'track at rest' bit (TrackPlaybackControl)
00085920 3B7C FFFF 0010             		move.w	#-1,TrackFreq(a5)	; Invalidate note frequency
00085926 4EBA F41E                  		jsr	FinishTrackUpdate(pc)
0008592A 6000 0000                  		bra.w	PSGNoteOff
0008592E                            ; End of function PSGSetFreq
0008592E                            
0008592E                            
0008592E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0008592E                            
0008592E                            ; sub_728DC:
0008592E                            PSGDoNoteOn:
0008592E 3C2D 0010                  		move.w	TrackFreq(a5),d6	; Get note frequency
00085932 6B00                       		bmi.s	PSGSetRest		; If invalid, branch
00085934                            ; End of function PSGDoNoteOn
00085934                            
00085934                            
00085934                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00085934                            
00085934                            ; sub_728E2:
00085934                            PSGUpdateFreq:
00085934 102D 001E                  		move.b	TrackDetune(a5),d0	; Get detune value
00085938 4880                       		ext.w	d0
0008593A DC40                       		add.w	d0,d6		; Add to frequency
0008593C 0815 0002                  		btst	#2,(a5)		; Is track being overridden? (TrackPlaybackControl)
00085940 6600                       		bne.s	@locret		; Return if yes
00085942 0815 0001                  		btst	#1,(a5)		; Is track at rest? (TrackPlaybackControl)
00085946 6600                       		bne.s	@locret		; Return if yes
00085948 102D 0001                  		move.b	TrackVoiceControl(a5),d0 ; Get channel bits
0008594C 0C00 00E0                  		cmpi.b	#$E0,d0		; Is it a noise channel?
00085950 6600                       		bne.s	@notnoise	; Branch if not
00085952 103C 00C0                  		move.b	#$C0,d0		; Use PSG 3 channel bits
00085956                            ; loc_72904:
00085956                            @notnoise:
00085956 3206                       		move.w	d6,d1
00085958 0201 000F                  		andi.b	#$F,d1		; Low nibble of frequency
0008595C 8001                       		or.b	d1,d0		; Latch tone data to channel
0008595E E84E                       		lsr.w	#4,d6		; Get upper 6 bits of frequency
00085960 0206 003F                  		andi.b	#$3F,d6		; Send to latched channel
00085964 13C0 00C0 0011             		move.b	d0,(psg_input).l
0008596A 13C6 00C0 0011             		move.b	d6,(psg_input).l
00085970                            ; locret_7291E:
00085970                            @locret:
00085970 4E75                       		rts	
00085972                            ; End of function PSGUpdateFreq
00085972                            
00085972                            ; ===========================================================================
00085972                            ; loc_72920:
00085972                            PSGSetRest:
00085972 08D5 0001                  		bset	#1,(a5)	; Set 'track at rest' bit (TrackPlaybackControl)
00085976 4E75                       		rts	
00085978                            
00085978                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00085978                            
00085978                            ; sub_72926:
00085978                            PSGUpdateVolFX:
00085978 4A2D 000B                  		tst.b	TrackVoiceIndex(a5)	; Test PSG tone
0008597C 6700 0000                  		beq.w	locret_7298A		; Return if it is zero
00085980                            ; loc_7292E:
00085980                            PSGDoVolFX:	; This can actually be made a bit more efficient, see the comments for more
00085980 1C2D 0009                  		move.b	TrackVolume(a5),d6	; Get volume
00085984 7000                       		moveq	#0,d0
00085986 102D 000B                  		move.b	TrackVoiceIndex(a5),d0	; Get PSG tone
0008598A 6700                       		beq.s	SetPSGVolume
0008598C 2079 0008 494E             		movea.l	(Go_PSGIndex).l,a0
00085992 5340                       		subq.w	#1,d0
00085994 E548                       		lsl.w	#2,d0
00085996 2070 0000                  		movea.l	(a0,d0.w),a0
0008599A 102D 000C                  		move.b	TrackVolEnvIndex(a5),d0	; Get volume envelope index		; move.b	TrackVolEnvIndex(a5),d0
0008599E 1030 0000                  		move.b	(a0,d0.w),d0			; Volume envelope value			; addq.b	#1,TrackVolEnvIndex(a5)
000859A2 522D 000C                  		addq.b	#1,TrackVolEnvIndex(a5)	; Increment volume envelope index	; move.b	(a0,d0.w),d0
000859A6 0800 0007                  		btst	#7,d0				; Is volume envelope value negative?	; <-- makes this line redundant
000859AA 6700                       		beq.s	@gotflutter			; Branch if not				; but you gotta make this one a bpl
000859AC 0C00 0080                  		cmpi.b	#$80,d0				; Is it the terminator?			; Since this is the only check, you can take the optimisation a step further:
000859B0 6700                       		beq.s	VolEnvHold			; If so, branch				; Change the previous beq (bpl) to a bmi and make it branch to VolEnvHold to make these last two lines redundant
000859B2                            ; loc_72960:
000859B2                            @gotflutter:
000859B2 DC40                       		add.w	d0,d6		; Add volume envelope value to volume
000859B4 0C06 0010                  		cmpi.b	#$10,d6		; Is volume $10 or higher?
000859B8 6500                       		blo.s	SetPSGVolume	; Branch if not
000859BA 7C0F                       		moveq	#$F,d6		; Limit to silence and fall through
000859BC                            ; End of function PSGUpdateVolFX
000859BC                            
000859BC                            
000859BC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000859BC                            
000859BC                            ; sub_7296A:
000859BC                            SetPSGVolume:
000859BC 0815 0001                  		btst	#1,(a5)		; Is track at rest? (TrackPlaybackControl)
000859C0 6600                       		bne.s	locret_7298A	; Return if so
000859C2 0815 0002                  		btst	#2,(a5)		; Is SFX overriding? (TrackPlaybackControl)
000859C6 6600                       		bne.s	locret_7298A	; Return if so
000859C8 0815 0004                  		btst	#4,(a5)		; Is track set to not attack next note? (TrackPlaybackControl)
000859CC 6600                       		bne.s	PSGCheckNoteTimeout ; Branch if yes
000859CE                            ; loc_7297C:
000859CE                            PSGSendVolume:
000859CE 8C2D 0001                  		or.b	TrackVoiceControl(a5),d6 ; Add in track selector bits
000859D2 0606 0010                  		addi.b	#$10,d6			; Mark it as a volume command
000859D6 13C6 00C0 0011             		move.b	d6,(psg_input).l
000859DC                            
000859DC                            locret_7298A:
000859DC 4E75                       		rts	
000859DE                            ; ===========================================================================
000859DE                            ; loc_7298C: PSGCheckNoteFill:
000859DE                            PSGCheckNoteTimeout:
000859DE 4A2D 0013                  		tst.b	TrackNoteTimeoutMaster(a5)	; Is note timeout on?
000859E2 67EA                       		beq.s	PSGSendVolume			; Branch if not
000859E4 4A2D 0012                  		tst.b	TrackNoteTimeout(a5)		; Has note timeout expired?
000859E8 66E4                       		bne.s	PSGSendVolume			; Branch if not
000859EA 4E75                       		rts	
000859EC                            ; End of function SetPSGVolume
000859EC                            
000859EC                            ; ===========================================================================
000859EC                            ; loc_7299A: FlutterDone:
000859EC                            VolEnvHold:
000859EC 532D 000C                  		subq.b	#1,TrackVolEnvIndex(a5)	; Decrement volume envelope index
000859F0 4E75                       		rts	
000859F2                            
000859F2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000859F2                            
000859F2                            ; sub_729A0:
000859F2                            PSGNoteOff:
000859F2 0815 0002                  		btst	#2,(a5)		; Is SFX overriding? (TrackPlaybackControl)
000859F6 6600                       		bne.s	locret_729B4	; Return if so
000859F8                            ; loc_729A6:
000859F8                            SendPSGNoteOff:
000859F8 102D 0001                  		move.b	TrackVoiceControl(a5),d0	; PSG channel to change
000859FC 0000 001F                  		ori.b	#$1F,d0				; Maximum volume attenuation
00085A00 13C0 00C0 0011             		move.b	d0,(psg_input).l
00085A06                            		; DANGER! If InitMusicPlayback doesn't silence all channels, there's the
00085A06                            		; risk of music accidentally playing noise because it can't detect if
00085A06                            		; the PSG4/noise channel needs muting on track initialisation.
00085A06                            		; S&K's driver fixes it by doing this:
00085A06 0C00 00DF                  		cmpi.b	#$DF,d0				; Are stopping PSG3?
00085A0A 6600                       		bne.s	locret_729B4
00085A0C 13FC 00FF 00C0 0011        		move.b	#$FF,(psg_input).l		; If so, stop noise channel while we're at it
00085A14                            
00085A14                            locret_729B4:
00085A14 4E75                       		rts	
00085A16                            ; End of function PSGNoteOff
00085A16                            
00085A16                            
00085A16                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00085A16                            
00085A16                            ; sub_729B6:
00085A16                            PSGSilenceAll:
00085A16 41F9 00C0 0011             		lea	(psg_input).l,a0
00085A1C 10BC 009F                  		move.b	#$9F,(a0)	; Silence PSG 1
00085A20 10BC 00BF                  		move.b	#$BF,(a0)	; Silence PSG 2
00085A24 10BC 00DF                  		move.b	#$DF,(a0)	; Silence PSG 3
00085A28 10BC 00FF                  		move.b	#$FF,(a0)	; Silence noise channel
00085A2C 4E75                       		rts	
00085A2E                            ; End of function PSGSilenceAll
00085A2E                            
00085A2E                            ; ===========================================================================
00085A2E                            ; word_729CE:
00085A2E                            PSGFrequencies:
00085A2E 0356 0326 02F9 02CE 02A5+  		dc.w $356, $326, $2F9, $2CE, $2A5, $280, $25C, $23A
00085A3E 021A 01FB 01DF 01C4 01AB+  		dc.w $21A, $1FB, $1DF, $1C4, $1AB, $193, $17D, $167
00085A4E 0153 0140 012E 011D 010D+  		dc.w $153, $140, $12E, $11D, $10D,  $FE,  $EF,  $E2
00085A5E 00D6 00C9 00BE 00B4 00A9+  		dc.w  $D6,  $C9,  $BE,  $B4,  $A9,  $A0,  $97,  $8F
00085A6E 0087 007F 0078 0071 006B+  		dc.w  $87,  $7F,  $78,  $71,  $6B,  $65,  $5F,  $5A
00085A7E 0055 0050 004B 0047 0043+  		dc.w  $55,  $50,  $4B,  $47,  $43,  $40,  $3C,  $39
00085A8E 0036 0033 0030 002D 002B+  		dc.w  $36,  $33,  $30,  $2D,  $2B,  $28,  $26,  $24
00085A9E 0022 0020 001F 001D 001B+  		dc.w  $22,  $20,  $1F,  $1D,  $1B,  $1A,  $18,  $17
00085AAE 0016 0015 0013 0012 0011+  		dc.w  $16,  $15,  $13,  $12,  $11,    0
00085ABA                            
00085ABA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00085ABA                            
00085ABA                            ; sub_72A5A:
00085ABA                            CoordFlag:
00085ABA 0445 00E0                  		subi.w	#$E0,d5
00085ABE E54D                       		lsl.w	#2,d5
00085AC0 4EFB 5000                  		jmp	coordflagLookup(pc,d5.w)
00085AC4                            ; End of function CoordFlag
00085AC4                            
00085AC4                            ; ===========================================================================
00085AC4                            ; loc_72A64:
00085AC4                            coordflagLookup:
00085AC4 6000 0000                  		bra.w	cfPanningAMSFMS		; $E0
00085AC8                            ; ===========================================================================
00085AC8 6000 0000                  		bra.w	cfDetune		; $E1
00085ACC                            ; ===========================================================================
00085ACC 6000 0000                  		bra.w	cfSetCommunication	; $E2
00085AD0                            ; ===========================================================================
00085AD0 6000 0000                  		bra.w	cfJumpReturn		; $E3
00085AD4                            ; ===========================================================================
00085AD4 6000 0000                  		bra.w	cfFadeInToPrevious	; $E4
00085AD8                            ; ===========================================================================
00085AD8 6000 0000                  		bra.w	cfSetTempoDivider	; $E5
00085ADC                            ; ===========================================================================
00085ADC 6000 0000                  		bra.w	cfChangeFMVolume	; $E6
00085AE0                            ; ===========================================================================
00085AE0 6000 0000                  		bra.w	cfHoldNote		; $E7
00085AE4                            ; ===========================================================================
00085AE4 6000 0000                  		bra.w	cfNoteTimeout		; $E8
00085AE8                            ; ===========================================================================
00085AE8 6000 0000                  		bra.w	cfChangeTransposition	; $E9
00085AEC                            ; ===========================================================================
00085AEC 6000 0000                  		bra.w	cfSetTempo		; $EA
00085AF0                            ; ===========================================================================
00085AF0 6000 0000                  		bra.w	cfSetTempoDividerAll	; $EB
00085AF4                            ; ===========================================================================
00085AF4 6000 0000                  		bra.w	cfChangePSGVolume	; $EC
00085AF8                            ; ===========================================================================
00085AF8 6000 0000                  		bra.w	cfClearPush		; $ED
00085AFC                            ; ===========================================================================
00085AFC 6000 0000                  		bra.w	cfStopSpecialFM4	; $EE
00085B00                            ; ===========================================================================
00085B00 6000 0000                  		bra.w	cfSetVoice		; $EF
00085B04                            ; ===========================================================================
00085B04 6000 0000                  		bra.w	cfModulation		; $F0
00085B08                            ; ===========================================================================
00085B08 6000 0000                  		bra.w	cfEnableModulation	; $F1
00085B0C                            ; ===========================================================================
00085B0C 6000 0000                  		bra.w	cfStopTrack		; $F2
00085B10                            ; ===========================================================================
00085B10 6000 0000                  		bra.w	cfSetPSGNoise		; $F3
00085B14                            ; ===========================================================================
00085B14 6000 0000                  		bra.w	cfDisableModulation	; $F4
00085B18                            ; ===========================================================================
00085B18 6000 0000                  		bra.w	cfSetPSGTone		; $F5
00085B1C                            ; ===========================================================================
00085B1C 6000 0000                  		bra.w	cfJumpTo		; $F6
00085B20                            ; ===========================================================================
00085B20 6000 0000                  		bra.w	cfRepeatAtPos		; $F7
00085B24                            ; ===========================================================================
00085B24 6000 0000                  		bra.w	cfJumpToGosub		; $F8
00085B28                            ; ===========================================================================
00085B28 6000 0000                  		bra.w	cfOpF9			; $F9
00085B2C                            ; ===========================================================================
00085B2C                            ; loc_72ACC:
00085B2C                            cfPanningAMSFMS:
00085B2C 121C                       		move.b	(a4)+,d1		; New AMS/FMS/panning value
00085B2E 4A2D 0001                  		tst.b	TrackVoiceControl(a5)	; Is this a PSG track?
00085B32 6B00                       		bmi.s	locret_72AEA		; Return if yes
00085B34 102D 000A                  		move.b	TrackAMSFMSPan(a5),d0	; Get current AMS/FMS/panning
00085B38 0200 0037                  		andi.b	#$37,d0			; Retain bits 0-2, 3-4 if set
00085B3C 8200                       		or.b	d0,d1			; Mask in new value
00085B3E 1B41 000A                  		move.b	d1,TrackAMSFMSPan(a5)	; Store value
00085B42 103C 00B4                  		move.b	#$B4,d0			; Command to set AMS/FMS/panning
00085B46 6000 FC20                  		bra.w	WriteFMIorIIMain
00085B4A                            ; ===========================================================================
00085B4A                            
00085B4A                            locret_72AEA:
00085B4A 4E75                       		rts	
00085B4C                            ; ===========================================================================
00085B4C                            ; loc_72AEC: cfAlterNotes:
00085B4C                            cfDetune:
00085B4C 1B5C 001E                  		move.b	(a4)+,TrackDetune(a5)	; Set detune value
00085B50 4E75                       		rts	
00085B52                            ; ===========================================================================
00085B52                            ; loc_72AF2: cfUnknown1:
00085B52                            cfSetCommunication:
00085B52 1D5C 0007                  		move.b	(a4)+,v_communication_byte(a6)	; Set otherwise unused communication byte to parameter
00085B56 4E75                       		rts	
00085B58                            ; ===========================================================================
00085B58                            ; loc_72AF8:
00085B58                            cfJumpReturn:
00085B58 7000                       		moveq	#0,d0
00085B5A 102D 000D                  		move.b	TrackStackPointer(a5),d0 ; Track stack pointer
00085B5E 2875 0000                  		movea.l	(a5,d0.w),a4		; Set track return address
00085B62 2BBC 0000 0000 0000        		move.l	#0,(a5,d0.w)		; Set 'popped' value to zero
00085B6A 544C                       		addq.w	#2,a4			; Skip jump target address from gosub flag
00085B6C 5800                       		addq.b	#4,d0			; Actually 'pop' value
00085B6E 1B40 000D                  		move.b	d0,TrackStackPointer(a5) ; Set new stack pointer
00085B72 4E75                       		rts	
00085B74                            ; ===========================================================================
00085B74                            ; loc_72B14:
00085B74                            cfFadeInToPrevious:
00085B74 204E                       		movea.l	a6,a0
00085B76 43EE 03A0                  		lea	v_1up_ram_copy(a6),a1
00085B7A 303C 0087                  		move.w	#((v_music_track_ram_end-v_startofvariables)/4)-1,d0	; $220 bytes to restore: all variables and music track data
00085B7E                            ; loc_72B1E:
00085B7E                            @restoreramloop:
00085B7E 20D9                       		move.l	(a1)+,(a0)+
00085B80 51C8 FFFC                  		dbf	d0,@restoreramloop
00085B84                            
00085B84 08EE 0002 0040             		bset	#2,v_music_dac_track+TrackPlaybackControl(a6)	; Set 'SFX overriding' bit
00085B8A 264D                       		movea.l	a5,a3
00085B8C 1C3C 0028                  		move.b	#$28,d6
00085B90 9C2E 0026                  		sub.b	v_fadein_counter(a6),d6			; If fade already in progress, this adjusts track volume accordingly
00085B94 7E05                       		moveq	#((v_music_fm_tracks_end-v_music_fm_tracks)/TrackSz)-1,d7	; 6 FM tracks
00085B96 4BEE 0070                  		lea	v_music_fm_tracks(a6),a5
00085B9A                            ; loc_72B3A:
00085B9A                            @fmloop:
00085B9A 0815 0007                  		btst	#7,(a5)		; Is track playing? (TrackPlaybackControl)
00085B9E 6700                       		beq.s	@nextfm		; Branch if not
00085BA0 08D5 0001                  		bset	#1,(a5)		; Set 'track at rest' bit (TrackPlaybackControl)
00085BA4 DD2D 0009                  		add.b	d6,TrackVolume(a5) ; Apply current volume fade-in
00085BA8 0815 0002                  		btst	#2,(a5)		; Is SFX overriding? (TrackPlaybackControl)
00085BAC 6600                       		bne.s	@nextfm		; Branch if yes
00085BAE 7000                       		moveq	#0,d0
00085BB0 102D 000B                  		move.b	TrackVoiceIndex(a5),d0	; Get voice
00085BB4 226E 0018                  		movea.l	v_voice_ptr(a6),a1	; Voice pointer
00085BB8 4EBA 0000                  		jsr	SetVoice(pc)
00085BBC                            ; loc_72B5C:
00085BBC                            @nextfm:
00085BBC DAFC 0030                  		adda.w	#TrackSz,a5
00085BC0 51CF FFD8                  		dbf	d7,@fmloop
00085BC4                            
00085BC4 7E02                       		moveq	#((v_music_psg_tracks_end-v_music_psg_tracks)/TrackSz)-1,d7	; 3 PSG tracks
00085BC6                            ; loc_72B66:
00085BC6                            @psgloop:
00085BC6 0815 0007                  		btst	#7,(a5)		; Is track playing? (TrackPlaybackControl)
00085BCA 6700                       		beq.s	@nextpsg	; Branch if not
00085BCC 08D5 0001                  		bset	#1,(a5)		; Set 'track at rest' bit (TrackPlaybackControl)
00085BD0 4EBA FE20                  		jsr	PSGNoteOff(pc)
00085BD4 DD2D 0009                  		add.b	d6,TrackVolume(a5)	; Apply current volume fade-in
00085BD8                            ; loc_72B78:
00085BD8                            @nextpsg:
00085BD8 DAFC 0030                  		adda.w	#TrackSz,a5
00085BDC 51CF FFE8                  		dbf	d7,@psgloop
00085BE0                            		
00085BE0 2A4B                       		movea.l	a3,a5
00085BE2 1D7C 0080 0024             		move.b	#$80,f_fadein_flag(a6)		; Trigger fade-in
00085BE8 1D7C 0028 0026             		move.b	#$28,v_fadein_counter(a6)	; Fade-in delay
00085BEE 422E 0027                  		clr.b	f_1up_playing(a6)
00085BF2 33FC 0000 00A1 1100        		startZ80
00085BFA 504F                       		addq.w	#8,sp		; Tamper return value so we don't return to caller
00085BFC 4E75                       		rts	
00085BFE                            ; ===========================================================================
00085BFE                            ; loc_72B9E:
00085BFE                            cfSetTempoDivider:
00085BFE 1B5C 0002                  		move.b	(a4)+,TrackTempoDivider(a5)	; Set tempo divider on current track
00085C02 4E75                       		rts	
00085C04                            ; ===========================================================================
00085C04                            ; loc_72BA4: cfSetVolume:
00085C04                            cfChangeFMVolume:
00085C04 101C                       		move.b	(a4)+,d0		; Get parameter
00085C06 D12D 0009                  		add.b	d0,TrackVolume(a5)	; Add to current volume
00085C0A 6000 0000                  		bra.w	SendVoiceTL
00085C0E                            ; ===========================================================================
00085C0E                            ; loc_72BAE: cfPreventAttack:
00085C0E                            cfHoldNote:
00085C0E 08D5 0004                  		bset	#4,(a5)		; Set 'do not attack next note' bit (TrackPlaybackControl)
00085C12 4E75                       		rts	
00085C14                            ; ===========================================================================
00085C14                            ; loc_72BB4: cfNoteFill
00085C14                            cfNoteTimeout:
00085C14 1B54 0012                  		move.b	(a4),TrackNoteTimeout(a5)		; Note fill timeout
00085C18 1B5C 0013                  		move.b	(a4)+,TrackNoteTimeoutMaster(a5)	; Note fill master
00085C1C 4E75                       		rts	
00085C1E                            ; ===========================================================================
00085C1E                            ; loc_72BBE: cfAddKey:
00085C1E                            cfChangeTransposition:
00085C1E 101C                       		move.b	(a4)+,d0		; Get parameter
00085C20 D12D 0008                  		add.b	d0,TrackTranspose(a5)	; Add to transpose value
00085C24 4E75                       		rts	
00085C26                            ; ===========================================================================
00085C26                            ; loc_72BC6:
00085C26                            cfSetTempo:
00085C26 1D54 0002                  		move.b	(a4),v_main_tempo(a6)		; Set main tempo
00085C2A 1D5C 0001                  		move.b	(a4)+,v_main_tempo_timeout(a6)	; And reset timeout (!)
00085C2E 4E75                       		rts	
00085C30                            ; ===========================================================================
00085C30                            ; loc_72BD0: cfSetTempoMod:
00085C30                            cfSetTempoDividerAll:
00085C30 41EE 0040                  		lea	v_music_track_ram(a6),a0
00085C34 101C                       		move.b	(a4)+,d0			; Get new tempo divider
00085C36 7230                       		moveq	#TrackSz,d1
00085C38 7409                       		moveq	#((v_music_track_ram_end-v_music_track_ram)/TrackSz)-1,d2	; 1 DAC + 6 FM + 3 PSG tracks
00085C3A                            ; loc_72BDA:
00085C3A                            @trackloop:
00085C3A 1140 0002                  		move.b	d0,TrackTempoDivider(a0)	; Set track's tempo divider
00085C3E D0C1                       		adda.w	d1,a0
00085C40 51CA FFF8                  		dbf	d2,@trackloop
00085C44                            
00085C44 4E75                       		rts	
00085C46                            ; ===========================================================================
00085C46                            ; loc_72BE6: cfChangeVolume:
00085C46                            cfChangePSGVolume:
00085C46 101C                       		move.b	(a4)+,d0		; Get volume change
00085C48 D12D 0009                  		add.b	d0,TrackVolume(a5)	; Apply it
00085C4C 4E75                       		rts	
00085C4E                            ; ===========================================================================
00085C4E                            ; loc_72BEE:
00085C4E                            cfClearPush:
00085C4E 422E 002C                  		clr.b	f_push_playing(a6)	; Allow push sound to be played once more
00085C52 4E75                       		rts	
00085C54                            ; ===========================================================================
00085C54                            ; loc_72BF4:
00085C54                            cfStopSpecialFM4:
00085C54 0895 0007                  		bclr	#7,(a5)		; Stop track (TrackPlaybackControl)
00085C58 0895 0004                  		bclr	#4,(a5)		; Clear 'do not attack next note' bit (TrackPlaybackControl)
00085C5C 4EBA FAF2                  		jsr	FMNoteOff(pc)
00085C60 4A2E 0250                  		tst.b	v_sfx_fm4_track+TrackPlaybackControl(a6)	; Is SFX using FM4?
00085C64 6B00                       		bmi.s	@locexit					; Branch if yes
00085C66 264D                       		movea.l	a5,a3
00085C68 4BEE 0100                  		lea	v_music_fm4_track(a6),a5
00085C6C 226E 0018                  		movea.l	v_voice_ptr(a6),a1	; Voice pointer
00085C70 0895 0002                  		bclr	#2,(a5)			; Clear 'SFX is overriding' bit (TrackPlaybackControl)
00085C74 08D5 0001                  		bset	#1,(a5)			; Set 'track at rest' bit (TrackPlaybackControl)
00085C78 102D 000B                  		move.b	TrackVoiceIndex(a5),d0	; Current voice
00085C7C 4EBA 0000                  		jsr	SetVoice(pc)
00085C80 2A4B                       		movea.l	a3,a5
00085C82                            ; loc_72C22:
00085C82                            @locexit:
00085C82 504F                       		addq.w	#8,sp		; Tamper with return value so we don't return to caller
00085C84 4E75                       		rts	
00085C86                            ; ===========================================================================
00085C86                            ; loc_72C26:
00085C86                            cfSetVoice:
00085C86 7000                       		moveq	#0,d0
00085C88 101C                       		move.b	(a4)+,d0		; Get new voice
00085C8A 1B40 000B                  		move.b	d0,TrackVoiceIndex(a5)	; Store it
00085C8E 0815 0002                  		btst	#2,(a5)			; Is SFX overriding this track? (TrackPlaybackControl)
00085C92 6600 0000                  		bne.w	locret_72CAA		; Return if yes
00085C96 226E 0018                  		movea.l	v_voice_ptr(a6),a1	; Music voice pointer
00085C9A 4A2E 000E                  		tst.b	f_voice_selector(a6)	; Are we updating a music track?
00085C9E 6700                       		beq.s	SetVoice		; If yes, branch
00085CA0 226D 0020                  		movea.l	TrackVoicePtr(a5),a1	; SFX track voice pointer
00085CA4 4A2E 000E                  		tst.b	f_voice_selector(a6)	; Are we updating a SFX track?
00085CA8 6B00                       		bmi.s	SetVoice		; If yes, branch
00085CAA 226E 0020                  		movea.l	v_special_voice_ptr(a6),a1 ; Special SFX voice pointer
00085CAE                            
00085CAE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00085CAE                            
00085CAE                            ; sub_72C4E:
00085CAE                            SetVoice:
00085CAE 5340                       		subq.w	#1,d0
00085CB0 6B00                       		bmi.s	@havevoiceptr
00085CB2 323C 0019                  		move.w	#25,d1
00085CB6                            ; loc_72C56:
00085CB6                            @voicemultiply:
00085CB6 D2C1                       		adda.w	d1,a1
00085CB8 51C8 FFFC                  		dbf	d0,@voicemultiply
00085CBC                            ; loc_72C5C:
00085CBC                            @havevoiceptr:
00085CBC 1219                       		move.b	(a1)+,d1		; feedback/algorithm
00085CBE 1B41 001F                  		move.b	d1,TrackFeedbackAlgo(a5) ; Save it to track RAM
00085CC2 1801                       		move.b	d1,d4
00085CC4 103C 00B0                  		move.b	#$B0,d0			; Command to write feedback/algorithm
00085CC8 4EBA FAAA                  		jsr	WriteFMIorII(pc)
00085CCC 45FA 0000                  		lea	FMInstrumentOperatorTable(pc),a2
00085CD0 7600                       		moveq	#(FMInstrumentOperatorTable_End-FMInstrumentOperatorTable)-1,d3		; Don't want to send TL yet
00085CD2                            ; loc_72C72:
00085CD2                            @sendvoiceloop:
00085CD2 101A                       		move.b	(a2)+,d0
00085CD4 1219                       		move.b	(a1)+,d1
00085CD6 4EBA FA9C                  		jsr	WriteFMIorII(pc)
00085CDA 51CB FFF6                  		dbf	d3,@sendvoiceloop
00085CDE                            
00085CDE 7A03                       		moveq	#3,d5
00085CE0 0244 0007                  		andi.w	#7,d4			; Get algorithm
00085CE4 183B 4000                  		move.b	FMSlotMask(pc,d4.w),d4	; Get slot mask for algorithm
00085CE8 162D 0009                  		move.b	TrackVolume(a5),d3	; Track volume attenuation
00085CEC                            ; loc_72C8C:
00085CEC                            @sendtlloop:
00085CEC 101A                       		move.b	(a2)+,d0
00085CEE 1219                       		move.b	(a1)+,d1
00085CF0 E20C                       		lsr.b	#1,d4		; Is bit set for this operator in the mask?
00085CF2 6400                       		bcc.s	@sendtl		; Branch if not
00085CF4 D203                       		add.b	d3,d1		; Include additional attenuation
00085CF6                            ; loc_72C96:
00085CF6                            @sendtl:
00085CF6 4EBA FA7C                  		jsr	WriteFMIorII(pc)
00085CFA 51CD FFF0                  		dbf	d5,@sendtlloop
00085CFE                            		
00085CFE 103C 00B4                  		move.b	#$B4,d0			; Register for AMS/FMS/Panning
00085D02 122D 000A                  		move.b	TrackAMSFMSPan(a5),d1	; Value to send
00085D06 4EBA FA6C                  		jsr	WriteFMIorII(pc) 	; (It would be better if this were a jmp)
00085D0A                            
00085D0A                            locret_72CAA:
00085D0A 4E75                       		rts	
00085D0C                            ; End of function SetVoice
00085D0C                            
00085D0C                            ; ===========================================================================
00085D0C                            ; byte_72CAC:
00085D0C 0808 0808 0A0E 0E0F        FMSlotMask:	dc.b 8,	8, 8, 8, $A, $E, $E, $F
00085D14                            
00085D14                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00085D14                            
00085D14                            ; sub_72CB4:
00085D14                            SendVoiceTL:
00085D14 0815 0002                  		btst	#2,(a5)		; Is SFX overriding? (TrackPlaybackControl)
00085D18 6600                       		bne.s	@locret		; Return if so
00085D1A 7000                       		moveq	#0,d0
00085D1C 102D 000B                  		move.b	TrackVoiceIndex(a5),d0	; Current voice
00085D20 226E 0018                  		movea.l	v_voice_ptr(a6),a1	; Voice pointer
00085D24 4A2E 000E                  		tst.b	f_voice_selector(a6)
00085D28 6700                       		beq.s	@gotvoiceptr
00085D2A                            		; DANGER! This uploads the wrong voice! It should have been a5 instead
00085D2A                            		; of a6!
00085D2A 226D 0020                  		movea.l	TrackVoicePtr(a5),a1
00085D2E 4A2E 000E                  		tst.b	f_voice_selector(a6)
00085D32 6B00                       		bmi.s	@gotvoiceptr
00085D34 226E 0020                  		movea.l	v_special_voice_ptr(a6),a1
00085D38                            ; loc_72CD8:
00085D38                            @gotvoiceptr:
00085D38 5340                       		subq.w	#1,d0
00085D3A 6B00                       		bmi.s	@gotvoice
00085D3C 323C 0019                  		move.w	#25,d1
00085D40                            ; loc_72CE0:
00085D40                            @voicemultiply:
00085D40 D2C1                       		adda.w	d1,a1
00085D42 51C8 FFFC                  		dbf	d0,@voicemultiply
00085D46                            ; loc_72CE6:
00085D46                            @gotvoice:
00085D46 D2FC 0015                  		adda.w	#21,a1				; Want TL
00085D4A 45FA 0000                  		lea	FMInstrumentTLTable(pc),a2
00085D4E 102D 001F                  		move.b	TrackFeedbackAlgo(a5),d0	; Get feedback/algorithm
00085D52 0240 0007                  		andi.w	#7,d0				; Want only algorithm
00085D56 183B 00B4                  		move.b	FMSlotMask(pc,d0.w),d4		; Get slot mask
00085D5A 162D 0009                  		move.b	TrackVolume(a5),d3		; Get track volume attenuation
00085D5E 6B00                       		bmi.s	@locret				; If negative, stop
00085D60 7A00                       		moveq	#(FMInstrumentTLTable_End-FMInstrumentTLTable)-1,d5
00085D62                            ; loc_72D02:
00085D62                            @sendtlloop:
00085D62 101A                       		move.b	(a2)+,d0
00085D64 1219                       		move.b	(a1)+,d1
00085D66 E20C                       		lsr.b	#1,d4		; Is bit set for this operator in the mask?
00085D68 6400                       		bcc.s	@senttl		; Branch if not
00085D6A D203                       		add.b	d3,d1		; Include additional attenuation
00085D6C 6500                       		bcs.s	@senttl		; Branch on overflow
00085D6E 4EBA FA04                  		jsr	WriteFMIorII(pc)
00085D72                            ; loc_72D12:
00085D72                            @senttl:
00085D72 51CD FFEE                  		dbf	d5,@sendtlloop
00085D76                            ; locret_72D16:
00085D76                            @locret:
00085D76 4E75                       		rts	
00085D78                            ; End of function SendVoiceTL
00085D78                            
00085D78                            ; ===========================================================================
00085D78                            ; byte_72D18:
00085D78                            FMInstrumentOperatorTable:
00085D78 30                         		dc.b  $30		; Detune/multiple operator 1
00085D79 38                         		dc.b  $38		; Detune/multiple operator 3
00085D7A 34                         		dc.b  $34		; Detune/multiple operator 2
00085D7B 3C                         		dc.b  $3C		; Detune/multiple operator 4
00085D7C 50                         		dc.b  $50		; Rate scalling/attack rate operator 1
00085D7D 58                         		dc.b  $58		; Rate scalling/attack rate operator 3
00085D7E 54                         		dc.b  $54		; Rate scalling/attack rate operator 2
00085D7F 5C                         		dc.b  $5C		; Rate scalling/attack rate operator 4
00085D80 60                         		dc.b  $60		; Amplitude modulation/first decay rate operator 1
00085D81 68                         		dc.b  $68		; Amplitude modulation/first decay rate operator 3
00085D82 64                         		dc.b  $64		; Amplitude modulation/first decay rate operator 2
00085D83 6C                         		dc.b  $6C		; Amplitude modulation/first decay rate operator 4
00085D84 70                         		dc.b  $70		; Secondary decay rate operator 1
00085D85 78                         		dc.b  $78		; Secondary decay rate operator 3
00085D86 74                         		dc.b  $74		; Secondary decay rate operator 2
00085D87 7C                         		dc.b  $7C		; Secondary decay rate operator 4
00085D88 80                         		dc.b  $80		; Secondary amplitude/release rate operator 1
00085D89 88                         		dc.b  $88		; Secondary amplitude/release rate operator 3
00085D8A 84                         		dc.b  $84		; Secondary amplitude/release rate operator 2
00085D8B 8C                         		dc.b  $8C		; Secondary amplitude/release rate operator 4
00085D8C                            FMInstrumentOperatorTable_End
00085D8C                            ; byte_72D2C:
00085D8C                            FMInstrumentTLTable:
00085D8C 40                         		dc.b  $40		; Total level operator 1
00085D8D 48                         		dc.b  $48		; Total level operator 3
00085D8E 44                         		dc.b  $44		; Total level operator 2
00085D8F 4C                         		dc.b  $4C		; Total level operator 4
00085D90                            FMInstrumentTLTable_End
00085D90                            ; ===========================================================================
00085D90                            ; loc_72D30:
00085D90                            cfModulation:
00085D90 08D5 0003                  		bset	#3,(a5)				; Turn on modulation (TrackPlaybackControl)
00085D94 2B4C 0014                  		move.l	a4,TrackModulationPtr(a5)	; Save pointer to modulation data
00085D98 1B5C 0018                  		move.b	(a4)+,TrackModulationWait(a5)	; Modulation delay
00085D9C 1B5C 0019                  		move.b	(a4)+,TrackModulationSpeed(a5)	; Modulation speed
00085DA0 1B5C 001A                  		move.b	(a4)+,TrackModulationDelta(a5)	; Modulation delta
00085DA4 101C                       		move.b	(a4)+,d0			; Modulation steps...
00085DA6 E208                       		lsr.b	#1,d0				; ... divided by 2...
00085DA8 1B40 001B                  		move.b	d0,TrackModulationSteps(a5)	; ... before being stored
00085DAC 426D 001C                  		clr.w	TrackModulationVal(a5)		; Total accumulated modulation frequency change
00085DB0 4E75                       		rts	
00085DB2                            ; ===========================================================================
00085DB2                            ; loc_72D52:
00085DB2                            cfEnableModulation:
00085DB2 08D5 0003                  		bset	#3,(a5)		; Turn on modulation (TrackPlaybackControl)
00085DB6 4E75                       		rts	
00085DB8                            ; ===========================================================================
00085DB8                            ; loc_72D58:
00085DB8                            cfStopTrack:
00085DB8 0895 0007                  		bclr	#7,(a5)			; Stop track (TrackPlaybackControl)
00085DBC 0895 0004                  		bclr	#4,(a5)			; Clear 'do not attack next note' bit (TrackPlaybackControl)
00085DC0 4A2D 0001                  		tst.b	TrackVoiceControl(a5)	; Is this a PSG track?
00085DC4 6B00                       		bmi.s	@stoppsg		; Branch if yes
00085DC6 4A2E 0008                  		tst.b	f_updating_dac(a6)	; Is this the DAC we are updating?
00085DCA 6B00 0000                  		bmi.w	@locexit		; Exit if yes
00085DCE 4EBA F980                  		jsr	FMNoteOff(pc)
00085DD2 6000                       		bra.s	@stoppedchannel
00085DD4                            ; ===========================================================================
00085DD4                            ; loc_72D74:
00085DD4                            @stoppsg:
00085DD4 4EBA FC1C                  		jsr	PSGNoteOff(pc)
00085DD8                            ; loc_72D78:
00085DD8                            @stoppedchannel:
00085DD8 4A2E 000E                  		tst.b	f_voice_selector(a6)	; Are we updating SFX?
00085DDC 6A00 0000                  		bpl.w	@locexit		; Exit if not
00085DE0 4216                       		clr.b	v_sndprio(a6)		; Clear priority
00085DE2 7000                       		moveq	#0,d0
00085DE4 102D 0001                  		move.b	TrackVoiceControl(a5),d0 ; Get voice control bits
00085DE8 6B00                       		bmi.s	@getpsgptr		; Branch if PSG
00085DEA 41FA F536                  		lea	SFX_BGMChannelRAM(pc),a0
00085DEE 264D                       		movea.l	a5,a3
00085DF0 0C00 0004                  		cmpi.b	#4,d0			; Is this FM4?
00085DF4 6600                       		bne.s	@getpointer		; Branch if not
00085DF6 4A2E 0340                  		tst.b	v_spcsfx_fm4_track+TrackPlaybackControl(a6)	; Is special SFX playing?
00085DFA 6A00                       		bpl.s	@getpointer		; Branch if not
00085DFC 4BEE 0340                  		lea	v_spcsfx_fm4_track(a6),a5
00085E00 226E 0020                  		movea.l	v_special_voice_ptr(a6),a1	; Get voice pointer
00085E04 6000                       		bra.s	@gotpointer
00085E06                            ; ===========================================================================
00085E06                            ; loc_72DA8:
00085E06                            @getpointer:
00085E06 5500                       		subq.b	#2,d0		; SFX can only use FM3 and up
00085E08 E508                       		lsl.b	#2,d0
00085E0A 2A70 0000                  		movea.l	(a0,d0.w),a5
00085E0E 4A15                       		tst.b	(a5)			; Is track playing? (TrackPlaybackControl)
00085E10 6A00                       		bpl.s	@novoiceupd		; Branch if not
00085E12 226E 0018                  		movea.l	v_voice_ptr(a6),a1	; Get voice pointer
00085E16                            ; loc_72DB8:
00085E16                            @gotpointer:
00085E16 0895 0002                  		bclr	#2,(a5)			; Clear 'SFX overriding' bit (TrackPlaybackControl)
00085E1A 08D5 0001                  		bset	#1,(a5)			; Set 'track at rest' bit (TrackPlaybackControl)
00085E1E 102D 000B                  		move.b	TrackVoiceIndex(a5),d0	; Current voice
00085E22 4EBA FE8A                  		jsr	SetVoice(pc)
00085E26                            ; loc_72DC8:
00085E26                            @novoiceupd:
00085E26 2A4B                       		movea.l	a3,a5
00085E28 6000                       		bra.s	@locexit
00085E2A                            ; ===========================================================================
00085E2A                            ; loc_72DCC:
00085E2A                            @getpsgptr:
00085E2A 41EE 0370                  		lea	v_spcsfx_psg3_track(a6),a0
00085E2E 4A10                       		tst.b	(a0)		; Is track playing? (TrackPlaybackControl)
00085E30 6A00                       		bpl.s	@getchannelptr	; Branch if not
00085E32 0C00 00E0                  		cmpi.b	#$E0,d0		; Is it the noise channel?
00085E36 6700                       		beq.s	@gotchannelptr	; Branch if yes
00085E38 0C00 00C0                  		cmpi.b	#$C0,d0		; Is it PSG 3?
00085E3C 6700                       		beq.s	@gotchannelptr	; Branch if yes
00085E3E                            ; loc_72DE0:
00085E3E                            @getchannelptr:
00085E3E 41FA F4E2                  		lea	SFX_BGMChannelRAM(pc),a0
00085E42 E608                       		lsr.b	#3,d0
00085E44 2070 0000                  		movea.l	(a0,d0.w),a0
00085E48                            ; loc_72DEA:
00085E48                            @gotchannelptr:
00085E48 0890 0002                  		bclr	#2,(a0)				; Clear 'SFX overriding' bit (TrackPlaybackControl)
00085E4C 08D0 0001                  		bset	#1,(a0)				; Set 'track at rest' bit (TrackPlaybackControl)
00085E50 0C28 00E0 0001             		cmpi.b	#$E0,TrackVoiceControl(a0)	; Is this a noise pointer?
00085E56 6600                       		bne.s	@locexit			; Branch if not
00085E58 13E8 001F 00C0 0011        		move.b	TrackPSGNoise(a0),(psg_input).l ; Set noise tone
00085E60                            ; loc_72E02:
00085E60                            @locexit:
00085E60 504F                       		addq.w	#8,sp		; Tamper with return value so we don't go back to caller
00085E62 4E75                       		rts	
00085E64                            ; ===========================================================================
00085E64                            ; loc_72E06:
00085E64                            cfSetPSGNoise:
00085E64 1B7C 00E0 0001             		move.b	#$E0,TrackVoiceControl(a5)	; Turn channel into noise channel
00085E6A 1B5C 001F                  		move.b	(a4)+,TrackPSGNoise(a5)	; Save noise tone
00085E6E 0815 0002                  		btst	#2,(a5)				; Is track being overridden? (TrackPlaybackControl)
00085E72 6600                       		bne.s	@locret				; Return if yes
00085E74 13EC FFFF 00C0 0011        		move.b	-1(a4),(psg_input).l		; Set tone
00085E7C                            ; locret_72E1E:
00085E7C                            @locret:
00085E7C 4E75                       		rts	
00085E7E                            ; ===========================================================================
00085E7E                            ; loc_72E20:
00085E7E                            cfDisableModulation:
00085E7E 0895 0003                  		bclr	#3,(a5)		; Disable modulation (TrackPlaybackControl)
00085E82 4E75                       		rts	
00085E84                            ; ===========================================================================
00085E84                            ; loc_72E26:
00085E84                            cfSetPSGTone:
00085E84 1B5C 000B                  		move.b	(a4)+,TrackVoiceIndex(a5)	; Set current PSG tone
00085E88 4E75                       		rts	
00085E8A                            ; ===========================================================================
00085E8A                            ; loc_72E2C:
00085E8A                            cfJumpTo:
00085E8A 101C                       		move.b	(a4)+,d0	; High byte of offset
00085E8C E148                       		lsl.w	#8,d0		; Shift it into place
00085E8E 101C                       		move.b	(a4)+,d0	; Low byte of offset
00085E90 D8C0                       		adda.w	d0,a4		; Add to current position
00085E92 534C                       		subq.w	#1,a4		; Put back one byte
00085E94 4E75                       		rts	
00085E96                            ; ===========================================================================
00085E96                            ; loc_72E38:
00085E96                            cfRepeatAtPos:
00085E96 7000                       		moveq	#0,d0
00085E98 101C                       		move.b	(a4)+,d0			; Loop index
00085E9A 121C                       		move.b	(a4)+,d1			; Repeat count
00085E9C 4A35 0024                  		tst.b	TrackLoopCounters(a5,d0.w)	; Has this loop already started?
00085EA0 6600                       		bne.s	@loopexists			; Branch if yes
00085EA2 1B81 0024                  		move.b	d1,TrackLoopCounters(a5,d0.w)	; Initialize repeat count
00085EA6                            ; loc_72E48:
00085EA6                            @loopexists:
00085EA6 5335 0024                  		subq.b	#1,TrackLoopCounters(a5,d0.w)	; Decrease loop's repeat count
00085EAA 66DE                       		bne.s	cfJumpTo			; If nonzero, branch to target
00085EAC 544C                       		addq.w	#2,a4				; Skip target address
00085EAE 4E75                       		rts	
00085EB0                            ; ===========================================================================
00085EB0                            ; loc_72E52:
00085EB0                            cfJumpToGosub:
00085EB0 7000                       		moveq	#0,d0
00085EB2 102D 000D                  		move.b	TrackStackPointer(a5),d0	; Current stack pointer
00085EB6 5900                       		subq.b	#4,d0				; Add space for another target
00085EB8 2B8C 0000                  		move.l	a4,(a5,d0.w)			; Put in current address (*before* target for jump!)
00085EBC 1B40 000D                  		move.b	d0,TrackStackPointer(a5)	; Store new stack pointer
00085EC0 60C8                       		bra.s	cfJumpTo
00085EC2                            ; ===========================================================================
00085EC2                            ; loc_72E64:
00085EC2                            cfOpF9:
00085EC2 103C 0088                  		move.b	#$88,d0		; D1L/RR of Operator 3
00085EC6 123C 000F                  		move.b	#$F,d1		; Loaded with fixed value (max RR, 1TL)
00085ECA 4EBA F8B4                  		jsr	WriteFMI(pc)
00085ECE 103C 008C                  		move.b	#$8C,d0		; D1L/RR of Operator 4
00085ED2 123C 000F                  		move.b	#$F,d1		; Loaded with fixed value (max RR, 1TL)
00085ED6 6000 F8A8                  		bra.w	WriteFMI
00085EDA                            ; ===========================================================================
00085EDA                            
00085EDA                            Kos_Z80:
00085EDA                            		incbin	"sound\z80.bin", 0, $15
00085EEF 00                         		dc.b ((SegaPCM&$FF8000)/$8000)&1						; Least bit of bank ID (bit 15 of address)
00085EF0                            		incbin	"sound\z80.bin", $16, 6
00085EF6 00                         		dc.b ((SegaPCM&$FF8000)/$8000)>>1						; ... the remaining bits of bank ID (bits 16-23)
00085EF7                            		incbin	"sound\z80.bin", $1D, $93
00085F8A 0000                       		dc.w ((SegaPCM&$FF)<<8)+((SegaPCM&$7F00)>>8)|$80				; Pointer to Sega PCM, relative to start of ROM bank (i.e., little_endian($8000 + SegaPCM&$7FFF)
00085F8C                            		incbin	"sound\z80.bin", $B2, 1
00085F8D 0000                       		dc.w (((SegaPCM_End-SegaPCM)&$FF)<<8)+(((SegaPCM_End-SegaPCM)&$FF00)>>8)	; ... the size of the Sega PCM (little endian)
00085F8F                            		incbin	"sound\z80.bin", $B5, $16AB
00087630                            		even
00087630                            
00087630                            Music81:	incbin	"sound/music/Mus81 - GHZ.bin"
00088954 00                         		even
00088954                            Music82:	incbin	"sound/music/Mus82 - LZ.bin"
0008A1DC                            		even
0008A1DC                            Music83:	incbin	"sound/music/Mus83 - MZ.bin"
00091B5C 00                         		even
00091B5C                            Music84:	incbin	"sound/music/Mus84 - SLZ.bin"
00093370 00                         		even
00093370                            Music85:	incbin	"sound/music/Mus85 - SYZ.bin"
00094116                            		even
00094116                            Music86:	incbin	"sound/music/Mus86 - SBZ.bin"
000954CE                            		even
000954CE                            Music87:	incbin	"sound/music/Mus87 - Invincibility.bin"
00095DC6 00                         		even
00095DC6                            Music88:	include	"sound/music/Mus88 - Extra Life.asm"
00095DC6                            extralifejingle_Header:
00095DC6                            	smpsHeaderStartSong 1
00095DC8 0703                       	smpsHeaderChan      $07, $03
00095DCA 0100                       	smpsHeaderTempo     $01, $00
00095DCC                            
00095DD0 0000 0000                  	smpsHeaderFM        extralifejingle_FM1,	$00, $00
00095DD4 0000 0000                  	smpsHeaderFM        extralifejingle_FM2,	$00, $00
00095DD8 0000 0000                  	smpsHeaderFM        extralifejingle_FM3,	$00, $00
00095DDC 0000 0000                  	smpsHeaderFM        extralifejingle_FM4,	$00, $00
00095DE0 0000 0000                  	smpsHeaderFM        extralifejingle_FM5,	$00, $00
00095DE4 0000 0000                  	smpsHeaderFM        extralifejingle_FM6,	$00, $00
00095DFA                            
00095DFA                            ; DAC Data
00095DFA                            extralifejingle_DAC:
00095DFA 807F 55                    	dc.b	nRst, $7F, $55
00095DFD E4                         	smpsFade
00095DFE                            ; PSG1 Data
00095DFE                            extralifejingle_PSG1:
00095DFE                            ; PSG2 Data
00095DFE                            extralifejingle_PSG2:
00095DFE                            ; PSG3 Data
00095DFE                            extralifejingle_PSG3:
00095DFE F2                         	smpsStop
00095DFF                            
00095DFF                            ; FM1 Data
00095DFF                            extralifejingle_FM1:
00095DFF EF00                       	smpsSetvoice        $00
00095E01 E616                       	smpsAlterVol        $16
00095E03 E0C0                       	smpsPan             panCenter, $00
00095E05 A61A BC13 BB12 B913 B60D+  	dc.b	nCs3, $1A, nB4, $13, nBb4, $12, nAb4, $13, nF4, $0D, nG3, $2C
00095E11 AC06 800C                  	dc.b	nG3, $06, nRst, $0C
00095E15 F2                         	smpsStop
00095E16                            
00095E16                            ; FM2 Data
00095E16                            extralifejingle_FM2:
00095E16 EF01                       	smpsSetvoice        $01
00095E18 E616                       	smpsAlterVol        $16
00095E1A E0C0                       	smpsPan             panCenter, $00
00095E1C B61A AD13 AB12 AA13 A60D+  	dc.b	nF4, $1A, nAb3, $13, nFs3, $12, nF3, $13, nCs3, $0D, nA2, $2C
00095E28 A206 800C                  	dc.b	nA2, $06, nRst, $0C
00095E2C F2                         	smpsStop
00095E2D                            
00095E2D                            ; FM3 Data
00095E2D                            extralifejingle_FM3:
00095E2D EF01                       	smpsSetvoice        $01
00095E2F E616                       	smpsAlterVol        $16
00095E31 E0C0                       	smpsPan             panCenter, $00
00095E33 AD0D BC13 B9B7 B60C B20D+  	dc.b	nAb3, $0D, nB4, $13, nAb4, nFs4, nF4, $0C, nCs4, $0D, nC4, $2C
00095E3F B106 800C                  	dc.b	nC4, $06, nRst, $0C
00095E43 F2                         	smpsStop
00095E44                            
00095E44                            ; FM4 Data
00095E44                            extralifejingle_FM4:
00095E44 EF02                       	smpsSetvoice        $02
00095E46 E0C0                       	smpsPan             panCenter, $00
00095E48 8001                       	dc.b	nRst, $01
00095E4A E616                       	smpsAlterVol        $16
00095E4C BE0C B913 ABAA A60C A20D+  	dc.b	nCs5, $0C, nAb4, $13, nFs3, nF3, nCs3, $0C, nA2, $0D, nE5, $2C
00095E58 C106 800C                  	dc.b	nE5, $06, nRst, $0C
00095E5C F2                         	smpsStop
00095E5D                            
00095E5D                            ; FM5 Data
00095E5D                            extralifejingle_FM5:
00095E5D EF03                       	smpsSetvoice        $03
00095E5F E602                       	smpsAlterVol        $02
00095E61 E0C0                       	smpsPan             panCenter, $00
00095E63 8001                       	dc.b	nRst, $01
00095E65 EF05                       	smpsSetvoice        $05
00095E67 E60A                       	smpsAlterVol        $0A
00095E69 E780 0CC8 06B2 07B9 06C7+  	dc.b	smpsNoAttack, nRst, $0C, nB5, $06, nCs4, $07, nAb4, $06, nBb5, nCs4, $07
00095E75 B706 C5C8 B607 C206 B2BE+  	dc.b	nFs4, $06, nAb5, nB5, nF4, $07, nF5, $06, nCs4, nCs5, $07, nA5
00095E81 06BD C1C4 07BD 06C1 C407+  	dc.b	$06, nC5, nE5, nG5, $07, nC5, $06, nE5, nG5, $07, nC5, $06
00095E8D C1C4 80                    	dc.b	nE5, nG5, nRst
00095E90 F2                         	smpsStop
00095E91                            
00095E91                            ; FM6 Data
00095E91                            extralifejingle_FM6:
00095E91 EF04                       	smpsSetvoice        $04
00095E93 E607                       	smpsAlterVol        $07
00095E95 E0C0                       	smpsPan             panCenter, $00
00095E97 8001                       	dc.b	nRst, $01
00095E99 EF06                       	smpsSetvoice        $06
00095E9B E6F9                       	smpsAlterVol        $F9
00095E9D A658 A72C A70C 80          	dc.b	nCs3, $58, nD3, $2C, nD3, $0C, nRst
00095EA4 F2                         	smpsStop
00095EA5                            
00095EA5                            extralifejingle_Voices:
00095EA5                            ;	Voice $00
00095EA5                            ;	$3A
00095EA5                            ;	$34, $73, $74, $31, 	$1F, $1F, $1F, $1F, 	$1F, $1F, $1F, $1F
00095EA5                            ;	$00, $00, $00, $00, 	$03, $03, $03, $05, 	$22, $22, $22, $00
00095EA5                            	smpsVcAlgorithm     $02
00095EA5                            	smpsVcFeedback      $07
00095EA5                            	smpsVcUnusedBits    $00
00095EA5                            	smpsVcDetune        $03, $07, $07, $03
00095EA5                            	smpsVcCoarseFreq    $01, $04, $03, $04
00095EA5                            	smpsVcRateScale     $00, $00, $00, $00
00095EA5                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
00095EA5                            	smpsVcAmpMod        $00, $00, $00, $00
00095EA5                            	smpsVcDecayRate1    $1F, $1F, $1F, $1F
00095EA5                            	smpsVcDecayRate2    $00, $00, $00, $00
00095EA5                            	smpsVcDecayLevel    $00, $00, $00, $00
00095EA5                            	smpsVcReleaseRate   $05, $03, $03, $03
00095EBE                            
00095EBE                            ;	Voice $01
00095EBE                            ;	$3A
00095EBE                            ;	$34, $73, $74, $31, 	$1F, $1F, $1F, $1F, 	$1F, $1F, $1F, $1F
00095EBE                            ;	$00, $00, $00, $00, 	$03, $03, $03, $05, 	$22, $22, $22, $00
00095EBE                            	smpsVcAlgorithm     $02
00095EBE                            	smpsVcFeedback      $07
00095EBE                            	smpsVcUnusedBits    $00
00095EBE                            	smpsVcDetune        $03, $07, $07, $03
00095EBE                            	smpsVcCoarseFreq    $01, $04, $03, $04
00095EBE                            	smpsVcRateScale     $00, $00, $00, $00
00095EBE                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
00095EBE                            	smpsVcAmpMod        $00, $00, $00, $00
00095EBE                            	smpsVcDecayRate1    $1F, $1F, $1F, $1F
00095EBE                            	smpsVcDecayRate2    $00, $00, $00, $00
00095EBE                            	smpsVcDecayLevel    $00, $00, $00, $00
00095EBE                            	smpsVcReleaseRate   $05, $03, $03, $03
00095ED7                            
00095ED7                            ;	Voice $02
00095ED7                            ;	$3A
00095ED7                            ;	$34, $73, $74, $31, 	$1F, $1F, $1F, $1F, 	$1F, $1F, $1F, $1F
00095ED7                            ;	$00, $00, $00, $00, 	$03, $03, $03, $05, 	$22, $22, $22, $00
00095ED7                            	smpsVcAlgorithm     $02
00095ED7                            	smpsVcFeedback      $07
00095ED7                            	smpsVcUnusedBits    $00
00095ED7                            	smpsVcDetune        $03, $07, $07, $03
00095ED7                            	smpsVcCoarseFreq    $01, $04, $03, $04
00095ED7                            	smpsVcRateScale     $00, $00, $00, $00
00095ED7                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
00095ED7                            	smpsVcAmpMod        $00, $00, $00, $00
00095ED7                            	smpsVcDecayRate1    $1F, $1F, $1F, $1F
00095ED7                            	smpsVcDecayRate2    $00, $00, $00, $00
00095ED7                            	smpsVcDecayLevel    $00, $00, $00, $00
00095ED7                            	smpsVcReleaseRate   $05, $03, $03, $03
00095EF0                            
00095EF0                            ;	Voice $03
00095EF0                            ;	$00
00095EF0                            ;	$01, $0E, $00, $00, 	$1E, $1E, $1E, $1D, 	$1A, $1C, $10, $10
00095EF0                            ;	$00, $00, $00, $00, 	$FD, $FE, $F8, $F8, 	$1A, $25, $05, $00
00095EF0                            	smpsVcAlgorithm     $00
00095EF0                            	smpsVcFeedback      $00
00095EF0                            	smpsVcUnusedBits    $00
00095EF0                            	smpsVcDetune        $00, $00, $00, $00
00095EF0                            	smpsVcCoarseFreq    $00, $00, $0E, $01
00095EF0                            	smpsVcRateScale     $00, $00, $00, $00
00095EF0                            	smpsVcAttackRate    $1D, $1E, $1E, $1E
00095EF0                            	smpsVcAmpMod        $00, $00, $00, $00
00095EF0                            	smpsVcDecayRate1    $10, $10, $1C, $1A
00095EF0                            	smpsVcDecayRate2    $00, $00, $00, $00
00095EF0                            	smpsVcDecayLevel    $0F, $0F, $0F, $0F
00095EF0                            	smpsVcReleaseRate   $08, $08, $0E, $0D
00095F09                            
00095F09                            ;	Voice $04
00095F09                            ;	$03
00095F09                            ;	$66, $40, $40, $31, 	$1F, $1F, $1F, $1C, 	$0E, $05, $02, $01
00095F09                            ;	$01, $00, $04, $06, 	$AA, $6A, $16, $18, 	$2A, $1A, $20, $00
00095F09                            	smpsVcAlgorithm     $03
00095F09                            	smpsVcFeedback      $00
00095F09                            	smpsVcUnusedBits    $00
00095F09                            	smpsVcDetune        $03, $04, $04, $06
00095F09                            	smpsVcCoarseFreq    $01, $00, $00, $06
00095F09                            	smpsVcRateScale     $00, $00, $00, $00
00095F09                            	smpsVcAttackRate    $1C, $1F, $1F, $1F
00095F09                            	smpsVcAmpMod        $00, $00, $00, $00
00095F09                            	smpsVcDecayRate1    $01, $02, $05, $0E
00095F09                            	smpsVcDecayRate2    $06, $04, $00, $01
00095F09                            	smpsVcDecayLevel    $01, $01, $06, $0A
00095F09                            	smpsVcReleaseRate   $08, $06, $0A, $0A
00095F22                            
00095F22                            ;	Voice $05
00095F22                            ;	$34
00095F22                            ;	$33, $7E, $01, $74, 	$9B, $1F, $5F, $1F, 	$14, $07, $07, $08
00095F22                            ;	$00, $00, $00, $00, 	$F6, $E4, $F7, $F7, 	$19, $71, $00, $00
00095F22                            	smpsVcAlgorithm     $04
00095F22                            	smpsVcFeedback      $06
00095F22                            	smpsVcUnusedBits    $00
00095F22                            	smpsVcDetune        $07, $00, $07, $03
00095F22                            	smpsVcCoarseFreq    $04, $01, $0E, $03
00095F22                            	smpsVcRateScale     $00, $01, $00, $02
00095F22                            	smpsVcAttackRate    $1F, $1F, $1F, $1B
00095F22                            	smpsVcAmpMod        $00, $00, $00, $00
00095F22                            	smpsVcDecayRate1    $08, $07, $07, $14
00095F22                            	smpsVcDecayRate2    $00, $00, $00, $00
00095F22                            	smpsVcDecayLevel    $0F, $0F, $0E, $0F
00095F22                            	smpsVcReleaseRate   $07, $07, $04, $06
00095F3B                            
00095F3B                            ;	Voice $06
00095F3B                            ;	$30
00095F3B                            ;	$01, $00, $00, $01, 	$9F, $1F, $1F, $5C, 	$0F, $0D, $10, $14
00095F3B                            ;	$08, $18, $05, $08, 	$6F, $00, $0F, $18, 	$15, $1F, $19, $00
00095F3B                            	smpsVcAlgorithm     $00
00095F3B                            	smpsVcFeedback      $06
00095F3B                            	smpsVcUnusedBits    $00
00095F3B                            	smpsVcDetune        $00, $00, $00, $00
00095F3B                            	smpsVcCoarseFreq    $01, $00, $00, $01
00095F3B                            	smpsVcRateScale     $01, $00, $00, $02
00095F3B                            	smpsVcAttackRate    $1C, $1F, $1F, $1F
00095F3B                            	smpsVcAmpMod        $00, $00, $00, $00
00095F3B                            	smpsVcDecayRate1    $14, $10, $0D, $0F
00095F3B                            	smpsVcDecayRate2    $08, $05, $18, $08
00095F3B                            	smpsVcDecayLevel    $01, $00, $00, $06
00095F3B                            	smpsVcReleaseRate   $08, $0F, $00, $0F
00095F54                            
00095F54                            
00095F54                            		even
00095F54                            Music89:	incbin	"sound/music/Mus89 - Special Stage.bin"
000967AC 00                         		even
000967AC                            Music8A:	incbin	"sound/music/Mus8A - Title Screen.bin"
00096CCC                            		even
00096CCC                            Music8B:	incbin	"sound/music/Mus8B - Ending.bin"
00096F8E 00                         		even
00096F8E                            Music8C:	incbin	"sound/music/Mus8C - Boss.bin"
00097DE6                            		even
00097DE6                            Music8D:	incbin	"sound/music/Mus8D - FZ.bin"
00098032 00                         		even
00098032                            Music8E:	incbin	"sound/music/Mus8E - Sonic Got Through.bin"
00098368 00                         		even
00098368                            Music8F:	incbin	"sound/music/Mus8F - Game Over.bin"
00098514 00                         		even
00098514                            Music90:	incbin	"sound/music/Mus90 - Continue Screen.bin"
00098722 00                         		even
00098722                            Music91:	incbin	"sound/music/Mus91 - Credits.bin"
00098A06 00                         		even
00098A06                            Music92:	incbin	"sound/music/Mus92 - Drowning.bin"
00099136 00                         		even
00099136                            Music93:	incbin	"sound/music/Mus93 - Get Emerald.bin"
00099204                            		even
00099204                            Music94:	incbin	"sound/music/Mus94 - Final Boss Pinch.bin"
00099672 00                         		even
00099672                            Music95:		incbin	"sound/music/Mus95 - Seaside Front.bin"
0009A168                            		even
0009A168                            Music96:		incbin	"sound/music/Mus96 - TTZ BF US.bin"
0009AD4A                            		even
0009AD4A                            Music97:		incbin	"sound/music/Mus97 - Granada Game Over.bin"
0009C050 00                         		even
0009C050                            Music98:		include	"sound/music/Mus98 - Options Theme.asm"
0009C050                            PasswordEntry_Header:
0009C050                            	smpsHeaderStartSong 3
0009C052 0603                       	smpsHeaderChan      $06, $03
0009C054 0105                       	smpsHeaderTempo     $01, $05
0009C056                            
0009C05A 0000 0013                  	smpsHeaderFM        PasswordEntry_FM1,	$00, $13
0009C05E 0000 F40B                  	smpsHeaderFM        PasswordEntry_FM2,	$F4, $0B
0009C062 0000 000F                  	smpsHeaderFM        PasswordEntry_FM3,	$00, $0F
0009C066 0000 000F                  	smpsHeaderFM        PasswordEntry_FM4,	$00, $0F
0009C06A 0000 001D                  	smpsHeaderFM        PasswordEntry_FM5,	$00, $1D
0009C080                            
0009C080                            ; FM1 Data
0009C080                            PasswordEntry_FM1:
0009C080 EF00                       	smpsSetvoice        $00
0009C087                            
0009C087                            PasswordEntry_Jump00:
0009C087 CD30 CED0 D010 CE08 CD10+  	dc.b	nE6, $30, nF6, nG6, nG6, $10, nF6, $08, nE6, $10, nF6, $08
0009C093 C930 CBCD CE10 CD08 CB10+  	dc.b	nC6, $30, nD6, nE6, nF6, $10, nE6, $08, nD6, $10, nE6, $08
0009C09F C960 C830 C4C6 C210 C6C9+  	dc.b	nC6, $60, nB5, $30, nG5, nA5, nF5, $10, nA5, nC6, nB5, $30
0009C0AB C918 CB                    	dc.b	nC6, $18, nD6
0009C0AE F6FF D7                    	smpsJump            PasswordEntry_Jump00
0009C0B1                            
0009C0B1                            ; FM2 Data
0009C0B1                            PasswordEntry_FM2:
0009C0B1 EF01                       	smpsSetvoice        $01
0009C0B3                            
0009C0B3                            PasswordEntry_Jump03:
0009C0B3 B118 1818 10AC 08B1 1818+  	dc.b	nC4, $18, $18, $18, $10, nG3, $08, nC4, $18, $18, $18, nB3
0009C0BF AEAE AEAE 10B5 08AE 1818+  	dc.b	nA3, nA3, nA3, nA3, $10, nE4, $08, nA3, $18, $18, $18, nG3
0009C0CB AAAA AAAA 1008 B518 1818+  	dc.b	nF3, nF3, nF3, nF3, $10, $08, nE4, $18, $18, $18, $10, $08
0009C0D7 AC18 1818 1008 1818 AEB0   	dc.b	nG3, $18, $18, $18, $10, $08, $18, $18, nA3, nB3
0009C0E1 F6FF D0                    	smpsJump            PasswordEntry_Jump03
0009C0E4                            
0009C0E4                            ; FM3 Data
0009C0E4                            PasswordEntry_FM3:
0009C0E4 E080                       	smpsPan             panLeft, $00
0009C0E6 EF02                       	smpsSetvoice        $02
0009C0E8                            
0009C0E8                            PasswordEntry_Jump02:
0009C0E8 C104 8014 C408 8010 C208+  	dc.b	nE5, $04, nRst, $14, nG5, $08, nRst, $10, nF5, $08, nRst, $10
0009C0F4 C204 8014 C104 8014 C104+  	dc.b	nF5, $04, nRst, $14, nE5, $04, nRst, $14, nE5, $04, nRst, $0C
0009C100 C204 8014 C21C 8004 C404+  	dc.b	nF5, $04, nRst, $14, nF5, $1C, nRst, $04, nG5, $04, nRst, $14
0009C10C C408 8010 C204 8014 C204+  	dc.b	nG5, $08, nRst, $10, nF5, $04, nRst, $14, nF5, $04, nRst, $14
0009C118 C108 8010 C104 800C C204+  	dc.b	nE5, $08, nRst, $10, nE5, $04, nRst, $0C, nF5, $04, nRst, $14
0009C124 C21C 8004 C108 8010 C108+  	dc.b	nF5, $1C, nRst, $04, nE5, $08, nRst, $10, nE5, $08, nRst, $10
0009C130 BF08 8010 C20C 800C C408+  	dc.b	nD5, $08, nRst, $10, nF5, $0C, nRst, $0C, nG5, $08, nRst, $10
0009C13C C408 8010 BF08 8010 BF0C+  	dc.b	nG5, $08, nRst, $10, nD5, $08, nRst, $10, nD5, $0C, nRst, $0C
0009C148 BA08 8010 BD0C 800C BD0C+  	dc.b	nA4, $08, nRst, $10, nC5, $0C, nRst, $0C, nC5, $0C, nRst, $0C
0009C154 BD0C 800C BF08 8010 BF08+  	dc.b	nC5, $0C, nRst, $0C, nD5, $08, nRst, $10, nD5, $08, nRst, $10
0009C160 BF08 8010 BF08 8010        	dc.b	nD5, $08, nRst, $10, nD5, $08, nRst, $10
0009C168 F6FF 7E                    	smpsJump            PasswordEntry_Jump02
0009C16B                            
0009C16B                            ; FM4 Data
0009C16B                            PasswordEntry_FM4:
0009C16B E040                       	smpsPan             panRight, $00
0009C16D EF02                       	smpsSetvoice        $02
0009C16F                            
0009C16F                            PasswordEntry_Jump01:
0009C16F C404 8014 C104 8014 BF04+  	dc.b	nG5, $04, nRst, $14, nE5, $04, nRst, $14, nD5, $04, nRst, $14
0009C17B BF04 8014 BD04 8014 BD04+  	dc.b	nD5, $04, nRst, $14, nC5, $04, nRst, $14, nC5, $04, nRst, $0C
0009C187 BF04 8014 BF18 8008 C104+  	dc.b	nD5, $04, nRst, $14, nD5, $18, nRst, $08, nE5, $04, nRst, $14
0009C193 C104 8014 BF04 8014 BF04+  	dc.b	nE5, $04, nRst, $14, nD5, $04, nRst, $14, nD5, $04, nRst, $14
0009C19F BD04 8014 BD04 800C BF04+  	dc.b	nC5, $04, nRst, $14, nC5, $04, nRst, $0C, nD5, $04, nRst, $14
0009C1AB BF1C 8004 C408 8010 C408+  	dc.b	nD5, $1C, nRst, $04, nG5, $08, nRst, $10, nG5, $08, nRst, $10
0009C1B7 C208 8010 BF08 8010 BF08+  	dc.b	nF5, $08, nRst, $10, nD5, $08, nRst, $10, nD5, $08, nRst, $10
0009C1C3 BF08 8010 BC08 8010 BC0C+  	dc.b	nD5, $08, nRst, $10, nB4, $08, nRst, $10, nB4, $0C, nRst, $0C
0009C1CF BD08 8010 BA08 8010 BA08+  	dc.b	nC5, $08, nRst, $10, nA4, $08, nRst, $10, nA4, $08, nRst, $10
0009C1DB BA08 8010 BC08 8010 BC08+  	dc.b	nA4, $08, nRst, $10, nB4, $08, nRst, $10, nB4, $08, nRst, $10
0009C1E7 BC08 8010 BC08 8010        	dc.b	nB4, $08, nRst, $10, nB4, $08, nRst, $10
0009C1EF F6FF 7E                    	smpsJump            PasswordEntry_Jump01
0009C1F2                            
0009C1F2                            ; FM5 Data
0009C1F2                            PasswordEntry_FM5:
0009C1F2 EF00                       	smpsSetvoice        $00
0009C1F4 E1FB                       	smpsAlterNote       $FB
0009C1F6 800C                       	dc.b	nRst, $0C
0009C1F8 F6FE 8D                    	smpsJump            PasswordEntry_Jump00
0009C1FB                            
0009C1FB                            ; PSG1 Data
0009C1FB                            PasswordEntry_PSG1:
0009C1FB C410 C908 CD10 D038 C410+  	dc.b	nG5, $10, nC6, $08, nE6, $10, nG6, $38, nG5, $10, nC6, $08
0009C207 CD10 D038 C410 C908 CD10+  	dc.b	nE6, $10, nG6, $38, nG5, $10, nC6, $08, nE6, $10, nG6, $38
0009C213 C410 C908 CD10 D038 C410+  	dc.b	nG5, $10, nC6, $08, nE6, $10, nG6, $38, nG5, $10, nC6, $08
0009C21F CD10 D038 C410 C808 CB10+  	dc.b	nE6, $10, nG6, $38, nG5, $10, nB5, $08, nD6, $10, nG6, $38
0009C22B C210 C608 C910 CE18 C908+  	dc.b	nF5, $10, nA5, $08, nC6, $10, nF6, $18, nC6, $08, nA5, $10
0009C237 C208 C410 C808 CB10 D018+  	dc.b	nF5, $08, nG5, $10, nB5, $08, nD6, $10, nG6, $18, nD6, $08
0009C243 C810 C408                  	dc.b	nB5, $10, nG5, $08
0009C247 F6FF B2                    	smpsJump            PasswordEntry_PSG1
0009C24A                            
0009C24A                            ; PSG2 Data
0009C24A                            PasswordEntry_PSG2:
0009C24A E1FF                       	smpsAlterNote       $FF
0009C24C 800C                       	dc.b	nRst, $0C
0009C24E F6FF AB                    	smpsJump            PasswordEntry_PSG1
0009C251                            
0009C251                            ; PSG3 Data
0009C251                            PasswordEntry_PSG3:
0009C251 F502                       	smpsPSGvoice        fTone_02
0009C253 F3E7                       	smpsPSGform         $E7
0009C255 C508 80C5 C508 80C5 C508+  	dc.b	nAb5, $08, nRst, nAb5, nAb5, $08, nRst, nAb5, nAb5, $08, nRst, nAb5
0009C261 C508 80C5 C508 80C5 C508+  	dc.b	nAb5, $08, nRst, nAb5, nAb5, $08, nRst, nAb5, nAb5, $08, nRst, nAb5
0009C26D C508 80C5 C508 C5          	dc.b	nAb5, $08, nRst, nAb5, nAb5, $08, nAb5
0009C274 F503                       	smpsPSGvoice        fTone_03
0009C276 C5                         	dc.b	nAb5
0009C277 F6FF D8                    	smpsJump            PasswordEntry_PSG3
0009C27A                            
0009C27A                            ; DAC Data
0009C27A                            PasswordEntry_DAC:
0009C27A 8118 8281 8210 8108 8118+  	dc.b	dKick, $18, dSnare, dKick, dSnare, $10, dKick, $08, dKick, $18, dSnare, dKick
0009C286 0880 0881 8210 8108        	dc.b	$08, nRst, $08, dKick, dSnare, $10, dKick, $08
0009C28E F700 03FF E8               	smpsLoop            $00, $03, PasswordEntry_DAC
0009C293 8118 8281 8210 8108 8118+  	dc.b	dKick, $18, dSnare, dKick, dSnare, $10, dKick, $08, dKick, $18, dSnare, dKick
0009C29F 0880 0881 8210 8208        	dc.b	$08, nRst, $08, dKick, dSnare, $10, dSnare, $08
0009C2A7                            
0009C2A7                            PasswordEntry_Loop00:
0009C2A7 8118 8281 8210 8108 8118+  	dc.b	dKick, $18, dSnare, dKick, dSnare, $10, dKick, $08, dKick, $18, dSnare, dKick
0009C2B3 0880 0881 8210 8108        	dc.b	$08, nRst, $08, dKick, dSnare, $10, dKick, $08
0009C2BB F700 03FF E8               	smpsLoop            $00, $03, PasswordEntry_Loop00
0009C2C0 8118 8281 8210 8108 8108+  	dc.b	dKick, $18, dSnare, dKick, dSnare, $10, dKick, $08, dKick, $08, nRst, $08
0009C2CC 8182 8182 8282 8889 898A   	dc.b	dKick, dSnare, dKick, dSnare, dSnare, dSnare, dHiTimpani, dMidTimpani, dMidTimpani, dLowTimpani
0009C2D6 F6FF A2                    	smpsJump            PasswordEntry_DAC
0009C2D9                            
0009C2D9                            PasswordEntry_Voices:
0009C2D9                            ;	Voice $00
0009C2D9                            ;	$04
0009C2D9                            ;	$02, $01, $01, $00, 	$1F, $10, $1F, $12, 	$09, $03, $0B, $04
0009C2D9                            ;	$03, $00, $00, $05, 	$EF, $FF, $2F, $0F, 	$1C, $80, $19, $80
0009C2D9                            	smpsVcAlgorithm     $04
0009C2D9                            	smpsVcFeedback      $00
0009C2D9                            	smpsVcUnusedBits    $00
0009C2D9                            	smpsVcDetune        $00, $00, $00, $00
0009C2D9                            	smpsVcCoarseFreq    $00, $01, $01, $02
0009C2D9                            	smpsVcRateScale     $00, $00, $00, $00
0009C2D9                            	smpsVcAttackRate    $12, $1F, $10, $1F
0009C2D9                            	smpsVcAmpMod        $00, $00, $00, $00
0009C2D9                            	smpsVcDecayRate1    $04, $0B, $03, $09
0009C2D9                            	smpsVcDecayRate2    $05, $00, $00, $03
0009C2D9                            	smpsVcDecayLevel    $00, $02, $0F, $0E
0009C2D9                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
0009C2F2                            
0009C2F2                            ;	Voice $01
0009C2F2                            ;	$39
0009C2F2                            ;	$03, $61, $40, $00, 	$1F, $5F, $5F, $5F, 	$10, $11, $09, $09
0009C2F2                            ;	$06, $00, $00, $00, 	$C8, $F8, $F8, $F8, 	$1E, $24, $20, $80
0009C2F2                            	smpsVcAlgorithm     $01
0009C2F2                            	smpsVcFeedback      $07
0009C2F2                            	smpsVcUnusedBits    $00
0009C2F2                            	smpsVcDetune        $00, $04, $06, $00
0009C2F2                            	smpsVcCoarseFreq    $00, $00, $01, $03
0009C2F2                            	smpsVcRateScale     $01, $01, $01, $00
0009C2F2                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
0009C2F2                            	smpsVcAmpMod        $00, $00, $00, $00
0009C2F2                            	smpsVcDecayRate1    $09, $09, $11, $10
0009C2F2                            	smpsVcDecayRate2    $00, $00, $00, $06
0009C2F2                            	smpsVcDecayLevel    $0F, $0F, $0F, $0C
0009C2F2                            	smpsVcReleaseRate   $08, $08, $08, $08
0009C30B                            
0009C30B                            ;	Voice $02
0009C30B                            ;	$2C
0009C30B                            ;	$41, $00, $23, $00, 	$1F, $1F, $1F, $1F, 	$08, $0A, $0B, $0A
0009C30B                            ;	$04, $05, $00, $05, 	$45, $56, $85, $86, 	$14, $82, $18, $82
0009C30B                            	smpsVcAlgorithm     $04
0009C30B                            	smpsVcFeedback      $05
0009C30B                            	smpsVcUnusedBits    $00
0009C30B                            	smpsVcDetune        $00, $02, $00, $04
0009C30B                            	smpsVcCoarseFreq    $00, $03, $00, $01
0009C30B                            	smpsVcRateScale     $00, $00, $00, $00
0009C30B                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
0009C30B                            	smpsVcAmpMod        $00, $00, $00, $00
0009C30B                            	smpsVcDecayRate1    $0A, $0B, $0A, $08
0009C30B                            	smpsVcDecayRate2    $05, $00, $05, $04
0009C30B                            	smpsVcDecayLevel    $08, $08, $05, $04
0009C30B                            	smpsVcReleaseRate   $06, $05, $06, $05
0009C324                            
0009C324                            
0009C324                            		even		
0009C324                            ; ---------------------------------------------------------------------------
0009C324                            ; Sound	effect pointers
0009C324                            ; ---------------------------------------------------------------------------
0009C324                            SoundIndex:
0009C324 0000 0000                  ptr_sndA0:	dc.l SoundA0
0009C328 0000 0000                  ptr_sndA1:	dc.l SoundA1
0009C32C 0000 0000                  ptr_sndA2:	dc.l SoundA2
0009C330 0000 0000                  ptr_sndA3:	dc.l SoundA3
0009C334 0000 0000                  ptr_sndA4:	dc.l SoundA4
0009C338 0000 0000                  ptr_sndA5:	dc.l SoundA5
0009C33C 0000 0000                  ptr_sndA6:	dc.l SoundA6
0009C340 0000 0000                  ptr_sndA7:	dc.l SoundA7
0009C344 0000 0000                  ptr_sndA8:	dc.l SoundA8
0009C348 0000 0000                  ptr_sndA9:	dc.l SoundA9
0009C34C 0000 0000                  ptr_sndAA:	dc.l SoundAA
0009C350 0000 0000                  ptr_FireShield:	dc.l SoundAB
0009C354 0000 0000                  ptr_sndAC:	dc.l SoundAC
0009C358 0000 0000                  ptr_sndAD:	dc.l SoundAD
0009C35C 0000 0000                  ptr_sndAE:	dc.l SoundAE
0009C360 0000 0000                  ptr_sndAF:	dc.l SoundAF
0009C364 0000 0000                  ptr_sndB0:	dc.l SoundB0
0009C368 0000 0000                  ptr_sndB1:	dc.l SoundB1
0009C36C 0000 0000                  ptr_sndB2:	dc.l SoundB2
0009C370 0000 0000                  ptr_sndB3:	dc.l SoundB3
0009C374 0000 0000                  ptr_sndB4:	dc.l SoundB4
0009C378 0000 0000                  ptr_sndB5:	dc.l SoundB5
0009C37C 0000 0000                  ptr_sndB6:	dc.l SoundB6
0009C380 0000 0000                  ptr_sndB7:	dc.l SoundB7
0009C384 0000 0000                  ptr_sndB8:	dc.l SoundB8
0009C388 0000 0000                  ptr_sndB9:	dc.l SoundB9
0009C38C 0000 0000                  ptr_sndBA:	dc.l SoundBA
0009C390 0000 0000                  ptr_sndBB:	dc.l SoundBB
0009C394 0000 0000                  ptr_sndBC:	dc.l SoundBC
0009C398 0000 0000                  ptr_sndBD:	dc.l SoundBD
0009C39C 0000 0000                  ptr_sndBE:	dc.l SoundBE
0009C3A0 0000 0000                  ptr_sndBF:	dc.l SoundBF
0009C3A4 0000 0000                  ptr_sndC0:	dc.l SoundC0
0009C3A8 0000 0000                  ptr_sndC1:	dc.l SoundC1
0009C3AC 0000 0000                  ptr_sndC2:	dc.l SoundC2
0009C3B0 0000 0000                  ptr_sndC3:	dc.l SoundC3
0009C3B4 0000 0000                  ptr_sndC4:	dc.l SoundC4
0009C3B8 0000 0000                  ptr_sndC5:	dc.l SoundC5
0009C3BC 0000 0000                  ptr_sndC6:	dc.l SoundC6
0009C3C0 0000 0000                  ptr_sndC7:	dc.l SoundC7
0009C3C4 0000 0000                  ptr_sndC8:	dc.l SoundC8
0009C3C8 0000 0000                  ptr_sndC9:	dc.l SoundC9
0009C3CC 0000 0000                  ptr_sndCA:	dc.l SoundCA
0009C3D0 0000 0000                  ptr_sndCB:	dc.l SoundCB
0009C3D4 0000 0000                  ptr_sndCC:	dc.l SoundCC
0009C3D8 0000 0000                  ptr_sndCD:	dc.l SoundCD
0009C3DC 0000 0000                  ptr_sndCE:	dc.l SoundCE
0009C3E0 0000 0000                  ptr_sndCF:	dc.l SoundCF
0009C3E4                            ptr_sndend
0009C3E4                            ; ---------------------------------------------------------------------------
0009C3E4                            ; Special sound effect pointers
0009C3E4                            ; ---------------------------------------------------------------------------
0009C3E4                            SpecSoundIndex:
0009C3E4 0000 0000                  ptr_sndD0:	dc.l SoundD0
0009C3E8 0000 0000                  ptr_sndD1:	dc.l SoundD1
0009C3EC 0000 0000                  ptr_sndD2:	dc.l SoundD2
0009C3F0 0000 0000                  ptr_sndD3:	dc.l SoundD3
0009C3F4 0000 0000                  ptr_sndD4:	dc.l SoundD4
0009C3F8 0000 0000                  ptr_sndD5:	dc.l SoundD5
0009C3FC                            ptr_specend
0009C3FC                            SoundA0:	include	"sound/sfx/Jump.asm"
0009C3FC                            SndA0_Jump_Header:
0009C3FC                            	smpsHeaderStartSong 1
0009C3FE 01                         	smpsHeaderTempoSFX  $01
0009C3FF 01                         	smpsHeaderChanSFX   $01
0009C400                            
0009C406                            
0009C406                            ; PSG2 Data
0009C406                            SndA0_Jump_PSG2:
0009C406 F500                       	smpsPSGvoice        $00
0009C408 9E05                       	dc.b	nF2, $05
0009C40F A315                       	dc.b	nBb2, $15
0009C411 F2                         	smpsStop
0009C412                            
0009C412                            ; Song seems to not use any FM voices
0009C412                            SndA0_Jump_Voices:
0009C412                            SndA0_Jump_Voices:
0009C412                            		even
0009C412                            SoundA1:	incbin	"sound/sfx/SndA1 - Lamppost.bin"
0009C43C                            		even
0009C43C                            SoundA2:	include	"sound/sfx/DrowningSound.asm"
0009C43C                            SndDF_Header:
0009C43C                            	smpsHeaderStartSong 3
0009C43E 01                         	smpsHeaderTempoSFX  $01
0009C43F 01                         	smpsHeaderChanSFX   $01
0009C440                            
0009C446                            
0009C446                            ; FM5 Data
0009C446                            SndDF_FM5:
0009C446 EF00                       	smpsSetvoice        $00
0009C448                            
0009C448                            SndDF_Loop00:
0009C448 F800 00                    	smpsCall            SndDF_Call00
0009C44B E905                       	smpsAlterPitch $05
0009C44D E608                       	smpsFMAlterVol      $08
0009C44F F701 03FF F5               	smpsLoop            $01, $03, SndDF_Loop00
0009C454 E9EC                       	smpsAlterPitch $EC
0009C456 E6E0                       	smpsFMAlterVol      $E0
0009C458 F2                         	smpsStop
0009C459                            
0009C459                            SndDF_Call00:
0009C459 9902                       	dc.b	nC2, $02
0009C45B E901                       	smpsAlterPitch $01
0009C45D F700 0AFF F8               	smpsLoop            $00, $0A, SndDF_Call00
0009C462 E9F6                       	smpsAlterPitch $F6
0009C464 E3                         	smpsReturn
0009C465                            
0009C465                            SndDF_Voices:
0009C465                            ;	Voice $00
0009C465                            ;	$07
0009C465                            ;	$04, $04, $05, $04, 	$1F, $1F, $15, $15, 	$00, $00, $00, $00
0009C465                            ;	$00, $00, $00, $00, 	$1F, $1F, $1F, $1F, 	$7F, $7F, $80, $80
0009C465                            	smpsVcAlgorithm     $07
0009C465                            	smpsVcFeedback      $00
0009C465                            	smpsVcUnusedBits    $00
0009C465                            	smpsVcDetune        $00, $00, $00, $00
0009C465                            	smpsVcCoarseFreq    $04, $05, $04, $04
0009C465                            	smpsVcRateScale     $00, $00, $00, $00
0009C465                            	smpsVcAttackRate    $15, $15, $1F, $1F
0009C465                            	smpsVcAmpMod        $00, $00, $00, $00
0009C465                            	smpsVcDecayRate1    $00, $00, $00, $00
0009C465                            	smpsVcDecayRate2    $00, $00, $00, $00
0009C465                            	smpsVcDecayLevel    $01, $01, $01, $01
0009C465                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
0009C47E                            		even
0009C47E                            SoundA3:	incbin	"sound/sfx/SndA3 - Death.bin"
0009C4B0                            		even
0009C4B0                            SoundA4:	incbin	"sound/sfx/SndA4 - Skid.bin"
0009C4F4 00                         		even
0009C4F4                            SoundA5:	include	"sound/sfx/LargeRingBox.asm"
0009C4F4                            SndD2_Header:
0009C4F4                            	smpsHeaderStartSong 3
0009C4F6 01                         	smpsHeaderTempoSFX  $01
0009C4F7 01                         	smpsHeaderChanSFX   $01
0009C4F8                            
0009C4FE                            
0009C4FE                            ; FM4 Data
0009C4FE                            SndD2_FM4:
0009C4FE EF00                       	smpsSetvoice        $00
0009C505 C645                       	dc.b	nA5, $45
0009C507 F2                         	smpsStop
0009C508                            
0009C508                            SndD2_Voices:
0009C508                            ;	Voice $00
0009C508                            ;	$04
0009C508                            ;	$27, $02, $07, $47, 	$1F, $1F, $1F, $1F, 	$07, $0A, $07, $0D
0009C508                            ;	$00, $0B, $00, $0B, 	$1F, $0F, $1F, $0F, 	$1F, $80, $23, $80
0009C508                            	smpsVcAlgorithm     $04
0009C508                            	smpsVcFeedback      $00
0009C508                            	smpsVcUnusedBits    $00
0009C508                            	smpsVcDetune        $04, $00, $00, $02
0009C508                            	smpsVcCoarseFreq    $07, $07, $02, $07
0009C508                            	smpsVcRateScale     $00, $00, $00, $00
0009C508                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
0009C508                            	smpsVcAmpMod        $00, $00, $00, $00
0009C508                            	smpsVcDecayRate1    $0D, $07, $0A, $07
0009C508                            	smpsVcDecayRate2    $0B, $00, $0B, $00
0009C508                            	smpsVcDecayLevel    $00, $01, $00, $01
0009C508                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
0009C522 00                         		even
0009C522                            SoundA6:	incbin	"sound/sfx/SndA6 - Hit Spikes.bin"
0009C552                            		even
0009C552                            SoundA7:	incbin	"sound/sfx/SndA7 - Push Block.bin"
0009C582                            		even
0009C582                            SoundA8:	incbin	"sound/sfx/SndA8 - SS Goal.bin"
0009C5B6                            		even
0009C5B6                            SoundA9:	incbin	"sound/sfx/SndA9 - SS Item.bin"
0009C5C8                            		even
0009C5C8                            SoundAA:	include	"sound/sfx/Splash.asm"
0009C5C8                            SndA2_Header:
0009C5C8                            	smpsHeaderStartSong 3
0009C5CA 01                         	smpsHeaderTempoSFX  $01
0009C5CB 02                         	smpsHeaderChanSFX   $02
0009C5CC                            
0009C5D8                            
0009C5D8                            ; FM3 Data
0009C5D8                            SndA2_FM3:
0009C5D8 EF00                       	smpsSetvoice        $00
0009C5DF 8106                       	dc.b	nC0, $06
0009C5E1                            
0009C5E1                            SndA2_Loop00:
0009C5E1 810E                       	dc.b	nC0, $0E
0009C5E3 E60E                       	smpsAlterVol      $0E
0009C5E5 F700 04FF F8               	smpsLoop            $00, $04, SndA2_Loop00
0009C5EA F2                         	smpsStop
0009C5EB                            
0009C5EB                            ; FM4 Data
0009C5EB                            SndA2_FM4:
0009C5EB EF01                       	smpsSetvoice        $01
0009C5ED A606 14                    	dc.b	nCs3, $06, $14
0009C5F0 F2                         	smpsStop
0009C5F1                            
0009C5F1                            SndA2_Voices:
0009C5F1                            ;	Voice $00
0009C5F1                            ;	$F9
0009C5F1                            ;	$21, $30, $10, $32, 	$1C, $1F, $1F, $10, 	$05, $18, $09, $02
0009C5F1                            ;	$0B, $1F, $10, $05, 	$1F, $2F, $4F, $2F, 	$0C, $06, $04, $80
0009C5F1                            	smpsVcAlgorithm     $01
0009C5F1                            	smpsVcFeedback      $07
0009C5F1                            	smpsVcUnusedBits    $03
0009C5F1                            	smpsVcDetune        $03, $01, $03, $02
0009C5F1                            	smpsVcCoarseFreq    $02, $00, $00, $01
0009C5F1                            	smpsVcRateScale     $00, $00, $00, $00
0009C5F1                            	smpsVcAttackRate    $10, $1F, $1F, $1C
0009C5F1                            	smpsVcAmpMod        $00, $00, $00, $00
0009C5F1                            	smpsVcDecayRate1    $02, $09, $18, $05
0009C5F1                            	smpsVcDecayRate2    $05, $10, $1F, $0B
0009C5F1                            	smpsVcDecayLevel    $02, $04, $02, $01
0009C5F1                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
0009C60A                            
0009C60A                            ;	Voice $01
0009C60A                            ;	$00
0009C60A                            ;	$00, $03, $02, $00, 	$D9, $DF, $1F, $1F, 	$12, $11, $14, $0F
0009C60A                            ;	$0A, $00, $0A, $0D, 	$FF, $FF, $FF, $FF, 	$22, $07, $27, $80
0009C60A                            	smpsVcAlgorithm     $00
0009C60A                            	smpsVcFeedback      $00
0009C60A                            	smpsVcUnusedBits    $00
0009C60A                            	smpsVcDetune        $00, $00, $00, $00
0009C60A                            	smpsVcCoarseFreq    $00, $02, $03, $00
0009C60A                            	smpsVcRateScale     $00, $00, $03, $03
0009C60A                            	smpsVcAttackRate    $1F, $1F, $1F, $19
0009C60A                            	smpsVcAmpMod        $00, $00, $00, $00
0009C60A                            	smpsVcDecayRate1    $0F, $14, $11, $12
0009C60A                            	smpsVcDecayRate2    $0D, $0A, $00, $0A
0009C60A                            	smpsVcDecayLevel    $0F, $0F, $0F, $0F
0009C60A                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
0009C624 00                         		even
0009C624                            SoundAB:	include	"sound/sfx/FireShield.asm"
0009C624                            Sound_3E_Header:
0009C624                            	smpsHeaderStartSong 3
0009C626 01                         	smpsHeaderTempoSFX  $01
0009C627 01                         	smpsHeaderChanSFX   $01
0009C628                            
0009C62E                            
0009C62E                            ; FM5 Data
0009C62E                            Sound_3E_3F_40_41_FM5:
0009C62E EF00                       	smpsSetvoice        $00
0009C630 A305 E7A4 26               	dc.b	nBb2, $05, smpsNoAttack, nB2, $26
0009C635 F2                         	smpsStop
0009C636                            
0009C636                            Sound_3E_Voices:
0009C636                            ;	Voice $00
0009C636                            ;	$0C
0009C636                            ;	$01, $21, $31, $31, 	$1E, $0C, $0E, $1C, 	$0A, $00, $04, $00
0009C636                            ;	$08, $12, $08, $0C, 	$FF, $0F, $BF, $0F, 	$03, $80, $0D, $80
0009C636                            	smpsVcAlgorithm     $04
0009C636                            	smpsVcFeedback      $01
0009C636                            	smpsVcUnusedBits    $00
0009C636                            	smpsVcDetune        $03, $03, $02, $00
0009C636                            	smpsVcCoarseFreq    $01, $01, $01, $01
0009C636                            	smpsVcRateScale     $00, $00, $00, $00
0009C636                            	smpsVcAttackRate    $1C, $0E, $0C, $1E
0009C636                            	smpsVcAmpMod        $00, $00, $00, $00
0009C636                            	smpsVcDecayRate1    $00, $04, $00, $0A
0009C636                            	smpsVcDecayRate2    $0C, $08, $12, $08
0009C636                            	smpsVcDecayLevel    $00, $0B, $00, $0F
0009C636                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
0009C64F                            
0009C64F                            
0009C650 00                         		even
0009C650                            SoundAC:	incbin	"sound/sfx/SndAC - Hit Boss.bin"
0009C684                            		even
0009C684                            SoundAD:	incbin	"sound/sfx/SndAD - Get Bubble.bin"
0009C6BA                            		even
0009C6BA                            SoundAE:	include	"sound/sfx/Fireball.asm"
0009C6BA                            Sound_70_Header:
0009C6BA                            	smpsHeaderStartSong 3
0009C6BC 01                         	smpsHeaderTempoSFX  $01
0009C6BD 02                         	smpsHeaderChanSFX   $02
0009C6BE                            
0009C6CA                            
0009C6CA                            ; FM5 Data
0009C6CA                            Sound_70_FM5:
0009C6CA EF00                       	smpsSetvoice        $00
0009C6CC 8001                       	dc.b	nRst, $01
0009C6D3 8306 8502                  	dc.b	nD0, $06, nE0, $02
0009C6D7 F2                         	smpsStop
0009C6D8                            
0009C6D8                            ; PSG3 Data
0009C6D8                            Sound_70_PSG3:
0009C6D8 F500                       	smpsPSGvoice        sTone_0D
0009C6DA 800B                       	dc.b	nRst, $0B
0009C6DC F3E7                       	smpsPSGform         $E7
0009C6DE C501 E7                    	dc.b	(nMaxPSG1-$D)&$FF, $01, smpsNoAttack
0009C6E1                            
0009C6E1                            Sound_70_Loop00:
0009C6E1 02                         	dc.b	$02
0009C6E2 EC01                       	smpsPSGAlterVol     $01
0009C6E4 E7                         	dc.b	smpsNoAttack
0009C6E5 F700 10FF F8               	smpsLoop            $00, $10, Sound_70_Loop00
0009C6EA F2                         	smpsStop
0009C6EB                            
0009C6EB                            Sound_70_Voices:
0009C6EB                            ;	Voice $00
0009C6EB                            ;	$FA
0009C6EB                            ;	$02, $03, $00, $05, 	$12, $11, $0F, $13, 	$05, $18, $09, $02
0009C6EB                            ;	$06, $0F, $06, $02, 	$1F, $2F, $4F, $2F, 	$2F, $1A, $0E, $80
0009C6EB                            	smpsVcAlgorithm     $02
0009C6EB                            	smpsVcFeedback      $07
0009C6EB                            	smpsVcUnusedBits    $03
0009C6EB                            	smpsVcDetune        $00, $00, $00, $00
0009C6EB                            	smpsVcCoarseFreq    $05, $00, $03, $02
0009C6EB                            	smpsVcRateScale     $00, $00, $00, $00
0009C6EB                            	smpsVcAttackRate    $13, $0F, $11, $12
0009C6EB                            	smpsVcAmpMod        $00, $00, $00, $00
0009C6EB                            	smpsVcDecayRate1    $02, $09, $18, $05
0009C6EB                            	smpsVcDecayRate2    $02, $06, $0F, $06
0009C6EB                            	smpsVcDecayLevel    $02, $04, $02, $01
0009C6EB                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
0009C704                            
0009C704                            
0009C704                            		even
0009C704                            SoundAF:	incbin	"sound/sfx/SndAF - Shield.bin"
0009C732                            		even
0009C732                            SoundB0:	incbin	"sound/sfx/SndB0 - Saw.bin"
0009C764                            		even
0009C764                            SoundB1:	incbin	"sound/sfx/SndB1 - Electric.bin"
0009C790                            		even
0009C790                            SoundB2:	incbin	"sound/sfx/SndB2 - Drown Death.bin"
0009C7E0                            		even
0009C7E0                            SoundB3:	incbin	"sound/sfx/SndB3 - Flamethrower.bin"
0009C82A                            		even
0009C82A                            SoundB4:	incbin	"sound/sfx/SndB4 - Bumper.bin"
0009C886                            		even
0009C886                            SoundB5:	incbin	"sound/sfx/SndB5 - Ring.bin"
0009C8B4                            		even
0009C8B4                            SoundB6:	include	"sound/sfx/Spikes.asm"
0009C8B4                            SpikesSFX_Header:
0009C8B4                            	smpsHeaderStartSong 3
0009C8B6 01                         	smpsHeaderTempoSFX  $01
0009C8B7 02                         	smpsHeaderChanSFX   $02
0009C8B8                            
0009C8C4                            
0009C8C4                            ; FM6 Data
0009C8C4                            SndB7_FM4:
0009C8C4 EF01                       	smpsSetvoice        $01
0009C8CB B105                       	dc.b	nC4, $05
0009C8CD F1                         	smpsModOn
0009C8CE E10A                       	smpsAlterNote       $0A
0009C8D0 E601                       	smpsAlterVol        $01
0009C8D2 F2                         	smpsStop
0009C8D3                            
0009C8D3                            ; FM5 Data
0009C8D3                            SndB7_FM5:
0009C8D3 8005                       	dc.b	nRst, $05			 
0009C8D5 EF00                       	smpsSetvoice        $00
0009C8D7 DB01 8001 DB11             	dc.b	nFs7, $01, nRst, $01, nFs7, $11
0009C8DD F2                         	smpsStop
0009C8DE                            
0009C8DE                            SndB7_Voices:
0009C8DE                            ;	Voice $00
0009C8DE                            ;	$34
0009C8DE                            ;	$09, $0F, $01, $D7, 	$1F, $1F, $1F, $1F, 	$0C, $11, $09, $0F
0009C8DE                            ;	$0A, $0E, $0D, $0E, 	$35, $1A, $55, $3A, 	$0C, $80, $0F, $80
0009C8DE                            	smpsVcAlgorithm     $04
0009C8DE                            	smpsVcFeedback      $06
0009C8DE                            	smpsVcUnusedBits    $00
0009C8DE                            	smpsVcDetune        $0D, $00, $00, $00
0009C8DE                            	smpsVcCoarseFreq    $07, $01, $0F, $09
0009C8DE                            	smpsVcRateScale     $00, $00, $00, $00
0009C8DE                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
0009C8DE                            	smpsVcAmpMod        $00, $00, $00, $00
0009C8DE                            	smpsVcDecayRate1    $0F, $09, $11, $0C
0009C8DE                            	smpsVcDecayRate2    $0E, $0D, $0E, $0A
0009C8DE                            	smpsVcDecayLevel    $03, $05, $01, $03
0009C8DE                            	smpsVcReleaseRate   $0A, $05, $0A, $05
0009C8F7                            
0009C8F7                            ;	Voice $01
0009C8F7                            ;	$FA
0009C8F7                            ;	$21, $3A, $19, $30, 	$1F, $1F, $1F, $1F, 	$05, $18, $09, $02
0009C8F7                            ;	$0B, $1F, $10, $05, 	$1F, $2F, $4F, $2F, 	$0E, $07, $04, $80
0009C8F7                            	smpsVcAlgorithm     $02
0009C8F7                            	smpsVcFeedback      $07
0009C8F7                            	smpsVcUnusedBits    $03
0009C8F7                            	smpsVcDetune        $03, $01, $03, $02
0009C8F7                            	smpsVcCoarseFreq    $00, $09, $0A, $01
0009C8F7                            	smpsVcRateScale     $00, $00, $00, $00
0009C8F7                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
0009C8F7                            	smpsVcAmpMod        $00, $00, $00, $00
0009C8F7                            	smpsVcDecayRate1    $02, $09, $18, $05
0009C8F7                            	smpsVcDecayRate2    $05, $10, $1F, $0B
0009C8F7                            	smpsVcDecayLevel    $02, $04, $02, $01
0009C8F7                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
0009C910                            		even
0009C910                            SoundB7:	incbin	"sound/sfx/SndB7 - Rumbling.bin"
0009C94C                            		even
0009C94C                            SoundB8:	include	"sound/sfx/ScoreTallying.asm"
0009C94C                            SndBD_Header:
0009C94C                            	smpsHeaderStartSong 3
0009C94E 01                         	smpsHeaderTempoSFX  $01
0009C94F 01                         	smpsHeaderChanSFX   $01
0009C950                            
0009C956                            
0009C956                            ; FM6 Data
0009C956                            SndBD_FM3:
0009C956 EF00                       	smpsSetvoice        $00
0009C958                            
0009C958                            SndBD_Loop00:
0009C958 C009                       	dc.b	nEb5, $09
0009C95A F700 08FF FA               	smpsLoop            $00, $08, SndBD_Loop00
0009C95F F2                         	smpsStop
0009C960                            
0009C960                            SndBD_Voices:
0009C960                            ;	Voice $00
0009C960                            ;	$02
0009C960                            ;	$02, $51, $20, $01, 	$1E, $1E, $1E, $1E, 	$10, $0A, $14, $13
0009C960                            ;	$01, $00, $00, $00, 	$FF, $FF, $FF, $FF, 	$24, $0E, $1F, $80
0009C960                            	smpsVcAlgorithm     $02
0009C960                            	smpsVcFeedback      $00
0009C960                            	smpsVcUnusedBits    $00
0009C960                            	smpsVcDetune        $00, $02, $05, $00
0009C960                            	smpsVcCoarseFreq    $01, $00, $01, $02
0009C960                            	smpsVcRateScale     $00, $00, $00, $00
0009C960                            	smpsVcAttackRate    $1E, $1E, $1E, $1E
0009C960                            	smpsVcAmpMod        $00, $00, $00, $00
0009C960                            	smpsVcDecayRate1    $13, $14, $0A, $10
0009C960                            	smpsVcDecayRate2    $00, $00, $00, $01
0009C960                            	smpsVcDecayLevel    $0F, $0F, $0F, $0F
0009C960                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
0009C97A 00                         		even
0009C97A                            SoundB9:	include	"sound/sfx/BreakFloor.asm"
0009C97A                            Sound_59_Header:
0009C97A                            	smpsHeaderStartSong 3
0009C97C 01                         	smpsHeaderTempoSFX  $01
0009C97D 04                         	smpsHeaderChanSFX   $04
0009C97E                            
0009C996                            
0009C996                            ; FM3 Data
0009C996                            Sound_59_FM3:
0009C996 E040                       	smpsPan             panRight, $00
0009C998 8002                       	dc.b	nRst, $02
0009C99A F600 00                    	smpsJump            Sound_59_FM4
0009C99D                            
0009C99D                            ; FM5 Data
0009C99D                            Sound_59_FM5:
0009C99D E080                       	smpsPan             panLeft, $00
0009C99F 8001                       	dc.b	nRst, $01
0009C9A1                            
0009C9A1                            ; FM4 Data
0009C9A1                            Sound_59_FM4:
0009C9A1 EF00                       	smpsSetvoice        $00
0009C9A8 8110                       	dc.b	nC0, $10
0009C9AA F2                         	smpsStop
0009C9AB                            
0009C9AB                            ; PSG3 Data
0009C9AB                            Sound_59_PSG3:
0009C9B0 F3E7                       	smpsPSGform         $E7
0009C9B2                            
0009C9B2                            Sound_59_Loop00:
0009C9B2 B018 E7                    	dc.b	nB3, $18, smpsNoAttack
0009C9B5 EC03                       	smpsPSGAlterVol     $03
0009C9B7 F700 05FF F7               	smpsLoop            $00, $05, Sound_59_Loop00
0009C9BC F2                         	smpsStop
0009C9BD                            
0009C9BD                            Sound_59_Voices:
0009C9BD                            ;	Voice $00
0009C9BD                            ;	$F9
0009C9BD                            ;	$21, $30, $10, $32, 	$1F, $1F, $1F, $1F, 	$05, $18, $09, $02
0009C9BD                            ;	$0B, $1F, $10, $05, 	$1F, $2F, $4F, $2F, 	$0E, $07, $04, $80
0009C9BD                            	smpsVcAlgorithm     $01
0009C9BD                            	smpsVcFeedback      $07
0009C9BD                            	smpsVcUnusedBits    $03
0009C9BD                            	smpsVcDetune        $03, $01, $03, $02
0009C9BD                            	smpsVcCoarseFreq    $02, $00, $00, $01
0009C9BD                            	smpsVcRateScale     $00, $00, $00, $00
0009C9BD                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
0009C9BD                            	smpsVcAmpMod        $00, $00, $00, $00
0009C9BD                            	smpsVcDecayRate1    $02, $09, $18, $05
0009C9BD                            	smpsVcDecayRate2    $05, $10, $1F, $0B
0009C9BD                            	smpsVcDecayLevel    $02, $04, $02, $01
0009C9BD                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
0009C9D6                            
0009C9D6                            
0009C9D6                            		even
0009C9D6                            SoundBA:	incbin	"sound/sfx/SndBA - SS Glass.bin"
0009C9FE                            		even
0009C9FE                            SoundBB:	incbin	"sound/sfx/SndBB - Door.bin"
0009CA2A                            		even
0009CA2A                            SoundBC:	include	"sound/sfx/DashRelease.asm"
0009CA2A                            Sound_B6_Header:
0009CA2A                            	smpsHeaderStartSong 3
0009CA2C 01                         	smpsHeaderTempoSFX  $01
0009CA2D 02                         	smpsHeaderChanSFX   $02
0009CA2E                            
0009CA3A                            
0009CA3A                            ; FM5 Data
0009CA3A                            Sound_B6_FM5:
0009CA3A EF00                       	smpsSetvoice        $00
0009CA41 CD0F                       	dc.b	nE6, $0F
0009CA43 F2                         	smpsStop
0009CA44                            
0009CA44                            ; PSG3 Data
0009CA44                            Sound_B6_PSG3:
0009CA44 F507                       	smpsPSGvoice        sTone_1D
0009CA46 8006                       	dc.b	nRst, $06
0009CA4D F3E7                       	smpsPSGform         $E7
0009CA4F CD4F                       	dc.b	nE6, $4F
0009CA51 F2                         	smpsStop
0009CA52                            
0009CA52                            Sound_B6_Voices:
0009CA52                            ;	Voice $00
0009CA52                            ;	$3D
0009CA52                            ;	$09, $03, $00, $00, 	$1F, $1F, $1F, $1F, 	$10, $0C, $0C, $0C
0009CA52                            ;	$0B, $1F, $10, $05, 	$1F, $2F, $4F, $2F, 	$09, $84, $92, $8E
0009CA52                            	smpsVcAlgorithm     $05
0009CA52                            	smpsVcFeedback      $07
0009CA52                            	smpsVcUnusedBits    $00
0009CA52                            	smpsVcDetune        $00, $00, $00, $00
0009CA52                            	smpsVcCoarseFreq    $00, $00, $03, $09
0009CA52                            	smpsVcRateScale     $00, $00, $00, $00
0009CA52                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
0009CA52                            	smpsVcAmpMod        $00, $00, $00, $00
0009CA52                            	smpsVcDecayRate1    $0C, $0C, $0C, $10
0009CA52                            	smpsVcDecayRate2    $05, $10, $1F, $0B
0009CA52                            	smpsVcDecayLevel    $02, $04, $02, $01
0009CA52                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
0009CA6B                            
0009CA6B                            
0009CA6C 00                         		even
0009CA6C                            SoundBD:	incbin	"sound/sfx/SndBD - ChainStomp.bin"
0009CAC0                            		even
0009CAC0                            SoundBE:	incbin	"sound/sfx/SndBE - Roll.bin"
0009CAFA                            		even
0009CAFA                            SoundBF:	incbin	"sound/sfx/SndBF - Get Continue.bin"
0009CB6C                            		even
0009CB6C                            SoundC0:	incbin	"sound/sfx/SndC0 - Basaran Flap.bin"
0009CB9A                            		even
0009CB9A                            SoundC1:	incbin	"sound/sfx/SndC1 - Break Item.bin"
0009CBD4                            		even
0009CBD4                            SoundC2:	include	"sound/sfx/DrowningWarning.asm"
0009CBD4                            SndC1_Header:
0009CBD4                            	smpsHeaderStartSong 3
0009CBD6 01                         	smpsHeaderTempoSFX  $01
0009CBD7 01                         	smpsHeaderChanSFX   $01
0009CBD8                            
0009CBDE                            
0009CBDE                            ; FM4 Data
0009CBDE                            SndC1_FM4:
0009CBDE EF00                       	smpsSetvoice        $00
0009CBE0 D506 40                    	dc.b	nC7, $06, $40
0009CBE3 F2                         	smpsStop
0009CBE4                            
0009CBE4                            SndC1_Voices:
0009CBE4                            ;	Voice $00
0009CBE4                            ;	$38
0009CBE4                            ;	$01, $00, $00, $00, 	$1F, $1F, $1F, $1F, 	$09, $09, $09, $0B
0009CBE4                            ;	$00, $00, $00, $00, 	$FF, $FF, $FF, $FF, 	$5C, $22, $27, $80
0009CBE4                            	smpsVcAlgorithm     $00
0009CBE4                            	smpsVcFeedback      $07
0009CBE4                            	smpsVcUnusedBits    $00
0009CBE4                            	smpsVcDetune        $00, $00, $00, $00
0009CBE4                            	smpsVcCoarseFreq    $00, $00, $00, $01
0009CBE4                            	smpsVcRateScale     $00, $00, $00, $00
0009CBE4                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
0009CBE4                            	smpsVcAmpMod        $00, $00, $00, $00
0009CBE4                            	smpsVcDecayRate1    $0B, $09, $09, $09
0009CBE4                            	smpsVcDecayRate2    $00, $00, $00, $00
0009CBE4                            	smpsVcDecayLevel    $0F, $0F, $0F, $0F
0009CBE4                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
0009CBFE 00                         		even
0009CBFE                            SoundC3:	incbin	"sound/sfx/SndC3 - Giant Ring.bin"
0009CC78                            		even
0009CC78                            SoundC4:	incbin	"sound/sfx/SndC4 - Bomb.bin"
0009CCA0                            		even
0009CCA0                            SoundC5:	include	"sound/sfx/Cash Register.asm"
0009CCA0                            Sound_B0_Header:
0009CCA0                            	smpsHeaderStartSong 3
0009CCA2 01                         	smpsHeaderTempoSFX  $01
0009CCA3 03                         	smpsHeaderChanSFX   $03
0009CCA4                            
0009CCB6                            
0009CCB6                            ; FM5 Data
0009CCB6                            Sound_B0_FM5:
0009CCB6 EF00                       	smpsSetvoice        $00
0009CCB8 8A08 8002 8A08             	dc.b	nA0, $08, nRst, $02, nA0, $08
0009CCBE F2                         	smpsStop
0009CCBF                            
0009CCBF                            ; FM4 Data
0009CCBF                            Sound_B0_FM4:
0009CCBF EF01                       	smpsSetvoice        $01
0009CCC1 8012 C655                  	dc.b	nRst, $12, nA5, $55
0009CCC5 F2                         	smpsStop
0009CCC6                            
0009CCC6                            ; FM3 Data
0009CCC6                            Sound_B0_FM3:
0009CCC6 EF02                       	smpsSetvoice        $02
0009CCC8 8002 C205 0405 04          	dc.b	nRst, $02, nF5, $05, $04, $05, $04
0009CCCF F2                         	smpsStop
0009CCD0                            
0009CCD0                            Sound_B0_Voices:
0009CCD0                            ;	Voice $00
0009CCD0                            ;	$3B
0009CCD0                            ;	$03, $02, $03, $06, 	$18, $1A, $1A, $96, 	$17, $0E, $0A, $10
0009CCD0                            ;	$00, $00, $00, $00, 	$FF, $FF, $FF, $FF, 	$00, $28, $39, $80
0009CCD0                            	smpsVcAlgorithm     $03
0009CCD0                            	smpsVcFeedback      $07
0009CCD0                            	smpsVcUnusedBits    $00
0009CCD0                            	smpsVcDetune        $00, $00, $00, $00
0009CCD0                            	smpsVcCoarseFreq    $06, $03, $02, $03
0009CCD0                            	smpsVcRateScale     $02, $00, $00, $00
0009CCD0                            	smpsVcAttackRate    $16, $1A, $1A, $18
0009CCD0                            	smpsVcAmpMod        $00, $00, $00, $00
0009CCD0                            	smpsVcDecayRate1    $10, $0A, $0E, $17
0009CCD0                            	smpsVcDecayRate2    $00, $00, $00, $00
0009CCD0                            	smpsVcDecayLevel    $0F, $0F, $0F, $0F
0009CCD0                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
0009CCE9                            
0009CCE9                            ;	Voice $01
0009CCE9                            ;	$04
0009CCE9                            ;	$37, $72, $77, $49, 	$1F, $1F, $1F, $1F, 	$07, $0A, $07, $0D
0009CCE9                            ;	$00, $0B, $00, $0B, 	$1F, $0F, $1F, $0F, 	$23, $80, $23, $80
0009CCE9                            	smpsVcAlgorithm     $04
0009CCE9                            	smpsVcFeedback      $00
0009CCE9                            	smpsVcUnusedBits    $00
0009CCE9                            	smpsVcDetune        $04, $07, $07, $03
0009CCE9                            	smpsVcCoarseFreq    $09, $07, $02, $07
0009CCE9                            	smpsVcRateScale     $00, $00, $00, $00
0009CCE9                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
0009CCE9                            	smpsVcAmpMod        $00, $00, $00, $00
0009CCE9                            	smpsVcDecayRate1    $0D, $07, $0A, $07
0009CCE9                            	smpsVcDecayRate2    $0B, $00, $0B, $00
0009CCE9                            	smpsVcDecayLevel    $00, $01, $00, $01
0009CCE9                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
0009CD02                            
0009CD02                            ;	Voice $02
0009CD02                            ;	$3C
0009CD02                            ;	$0F, $00, $00, $00, 	$1F, $1A, $18, $1C, 	$17, $11, $1A, $0E
0009CD02                            ;	$00, $0F, $14, $10, 	$1F, $9F, $9F, $2F, 	$07, $80, $26, $8C
0009CD02                            	smpsVcAlgorithm     $04
0009CD02                            	smpsVcFeedback      $07
0009CD02                            	smpsVcUnusedBits    $00
0009CD02                            	smpsVcDetune        $00, $00, $00, $00
0009CD02                            	smpsVcCoarseFreq    $00, $00, $00, $0F
0009CD02                            	smpsVcRateScale     $00, $00, $00, $00
0009CD02                            	smpsVcAttackRate    $1C, $18, $1A, $1F
0009CD02                            	smpsVcAmpMod        $00, $00, $00, $00
0009CD02                            	smpsVcDecayRate1    $0E, $1A, $11, $17
0009CD02                            	smpsVcDecayRate2    $10, $14, $0F, $00
0009CD02                            	smpsVcDecayLevel    $02, $09, $09, $01
0009CD02                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
0009CD1B                            
0009CD1B                            
0009CD1C 00                         		even
0009CD1C                            SoundC6:	incbin	"sound/sfx/SndC6 - Ring Loss.bin"
0009CD5E                            		even
0009CD5E                            SoundC7:	incbin	"sound/sfx/SndC7 - Chain Rising.bin"
0009CD8C                            		even
0009CD8C                            SoundC8:	incbin	"sound/sfx/SndC8 - Burning.bin"
0009CD9E                            		even
0009CD9E                            SoundC9:	incbin	"sound/sfx/SndC9 - Hidden Bonus.bin"
0009CDCC                            		even
0009CDCC                            SoundCA:	incbin	"sound/sfx/SndCA - Enter SS.bin"
0009CDFA                            		even
0009CDFA                            SoundCB:	incbin	"sound/sfx/SndCB - Wall Smash.bin"
0009CE46                            		even
0009CE46                            SoundCC:	include	"sound/sfx/Spring.asm"
0009CE46                            Spring_Header:
0009CE46                            	smpsHeaderStartSong 1
0009CE48 01                         	smpsHeaderTempoSFX  $01
0009CE49 01                         	smpsHeaderChanSFX   $01
0009CE4A                            
0009CE50                            
0009CE50                            ; FM6 Data
0009CE50                            Spring_FM6:
0009CE50 EF00                       	smpsSetvoice        $00
0009CE52 8001                       	dc.b	nRst, $01
0009CE59 B006                       	dc.b	nB3, $06
0009CE5B F4                         	smpsModOff
0009CE5C EF01                       	smpsSetvoice        $01
0009CE5E                            
0009CE5E                            Spring_Loop00:
0009CE5E BD02                       	dc.b	nC5, $02
0009CE60 E601                       	smpsAlterVol      $01
0009CE62 E7                         	dc.b	smpsNoAttack
0009CE63 F700 19FF F7               	smpsLoop            $00, $19, Spring_Loop00
0009CE68 F2                         	smpsStop
0009CE69                            
0009CE69                            Spring_Voices:
0009CE69                            ;	Voice $00
0009CE69                            ;	$20
0009CE69                            ;	$36, $35, $30, $31, 	$DF, $DF, $9F, $9F, 	$07, $06, $09, $06
0009CE69                            ;	$07, $06, $06, $08, 	$2F, $1F, $1F, $FF, 	$16, $30, $13, $80
0009CE69                            	smpsVcAlgorithm     $00
0009CE69                            	smpsVcFeedback      $04
0009CE69                            	smpsVcUnusedBits    $00
0009CE69                            	smpsVcDetune        $03, $03, $03, $03
0009CE69                            	smpsVcCoarseFreq    $01, $00, $05, $06
0009CE69                            	smpsVcRateScale     $02, $02, $03, $03
0009CE69                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
0009CE69                            	smpsVcAmpMod        $00, $00, $00, $00
0009CE69                            	smpsVcDecayRate1    $06, $09, $06, $07
0009CE69                            	smpsVcDecayRate2    $08, $06, $06, $07
0009CE69                            	smpsVcDecayLevel    $0F, $01, $01, $02
0009CE69                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
0009CE82                            
0009CE82                            ;	Voice $01
0009CE82                            ;	$20
0009CE82                            ;	$31, $33, $30, $31, 	$9F, $9F, $9F, $9F, 	$07, $06, $09, $06
0009CE82                            ;	$07, $06, $06, $08, 	$2F, $1F, $1F, $FF, 	$19, $23, $11, $80
0009CE82                            	smpsVcAlgorithm     $00
0009CE82                            	smpsVcFeedback      $04
0009CE82                            	smpsVcUnusedBits    $00
0009CE82                            	smpsVcDetune        $03, $03, $03, $03
0009CE82                            	smpsVcCoarseFreq    $01, $00, $03, $01
0009CE82                            	smpsVcRateScale     $02, $02, $02, $02
0009CE82                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
0009CE82                            	smpsVcAmpMod        $00, $00, $00, $00
0009CE82                            	smpsVcDecayRate1    $06, $09, $06, $07
0009CE82                            	smpsVcDecayRate2    $08, $06, $06, $07
0009CE82                            	smpsVcDecayLevel    $0F, $01, $01, $02
0009CE82                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
0009CE9C 00                         		even
0009CE9C                            SoundCD:	include	"sound/sfx/Beep.asm"
0009CE9C                            Snd99_Header:
0009CE9C                            	smpsHeaderStartSong 3
0009CE9E 01                         	smpsHeaderTempoSFX  $01
0009CE9F 01                         	smpsHeaderChanSFX   $01
0009CEA0                            
0009CEA6                            
0009CEA6                            ; FM4 Data
0009CEA6                            Snd99_FM4:
0009CEA6 EF00                       	smpsSetvoice        $00
0009CEA8 B502                       	dc.b	nE4, $02
0009CEAA F2                         	smpsStop
0009CEAB                            
0009CEAB                            Snd99_Voices:
0009CEAB                            ;	Voice $00
0009CEAB                            ;	$07
0009CEAB                            ;	$0A, $0A, $0A, $0A, 	$1F, $1F, $1F, $1F, 	$00, $00, $00, $00
0009CEAB                            ;	$00, $00, $00, $00, 	$0F, $0F, $0F, $0F, 	$88, $88, $88, $88
0009CEAB                            	smpsVcAlgorithm     $07
0009CEAB                            	smpsVcFeedback      $00
0009CEAB                            	smpsVcUnusedBits    $00
0009CEAB                            	smpsVcDetune        $00, $00, $00, $00
0009CEAB                            	smpsVcCoarseFreq    $0A, $0A, $0A, $0A
0009CEAB                            	smpsVcRateScale     $00, $00, $00, $00
0009CEAB                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
0009CEAB                            	smpsVcAmpMod        $00, $00, $00, $00
0009CEAB                            	smpsVcDecayRate1    $00, $00, $00, $00
0009CEAB                            	smpsVcDecayRate2    $00, $00, $00, $00
0009CEAB                            	smpsVcDecayLevel    $00, $00, $00, $00
0009CEAB                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
0009CEC4                            		even
0009CEC4                            SoundCE:	incbin	"sound/sfx/SndCE - Ring Left Speaker.bin"
0009CEF2                            		even
0009CEF2                            SoundCF:	include	"sound/sfx/Signpost.asm"
0009CEF2                            SignpostCD_Header:
0009CEF2                            	smpsHeaderStartSong 3
0009CEF4 01                         	smpsHeaderTempoSFX  $01
0009CEF5 02                         	smpsHeaderChanSFX   $02
0009CEF6                            
0009CF02                            
0009CF02                            ; FM5 Data
0009CF02                            Snd9D_FM5:
0009CF02 8004                       	dc.b	nRst, $04
0009CF04                            
0009CF04                            ; FM4 Data
0009CF04                            Snd9D_FM4:
0009CF04 EF00                       	smpsSetvoice        $00
0009CF06                            
0009CF06                            Snd9D_Loop00:
0009CF06 B405                       	dc.b	nEb4, $05
0009CF08 E604                       	smpsFMAlterVol      $04
0009CF0A F700 08FF F8               	smpsLoop            $00, $08, Snd9D_Loop00
0009CF0F F2                         	smpsStop
0009CF10                            
0009CF10                            Snd9D_Voices:
0009CF10                            ;	Voice $00
0009CF10                            ;	$F4
0009CF10                            ;	$06, $04, $0F, $0E, 	$1F, $1F, $1F, $1F, 	$00, $00, $0B, $0B
0009CF10                            ;	$00, $00, $05, $08, 	$0F, $0F, $FF, $FF, 	$0C, $85, $00, $80
0009CF10                            	smpsVcAlgorithm     $04
0009CF10                            	smpsVcFeedback      $06
0009CF10                            	smpsVcUnusedBits    $03
0009CF10                            	smpsVcDetune        $00, $00, $00, $00
0009CF10                            	smpsVcCoarseFreq    $0E, $0F, $04, $06
0009CF10                            	smpsVcRateScale     $00, $00, $00, $00
0009CF10                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
0009CF10                            	smpsVcAmpMod        $00, $00, $00, $00
0009CF10                            	smpsVcDecayRate1    $0B, $0B, $00, $00
0009CF10                            	smpsVcDecayRate2    $08, $05, $00, $00
0009CF10                            	smpsVcDecayLevel    $0F, $0F, $00, $00
0009CF10                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
0009CF2A 00                         		even
0009CF2A                            SoundD0:	incbin	"sound/sfx/SndD0 - Waterfall.bin"
0009CF64                            		even
0009CF64                            SoundD1:	include	"sound/sfx/Lightning Shield.asm"
0009CF64                            Sound_41_Header:
0009CF64                            	smpsHeaderStartSong 3
0009CF66 01                         	smpsHeaderTempoSFX  $01
0009CF67 01                         	smpsHeaderChanSFX   $01
0009CF68                            
0009CF6E                            	
0009CF6E                            Sound41_FM5:
0009CF6E EF00                       	smpsSetvoice        $00
0009CF70 A305 E7A4 26               	dc.b	nBb2, $05, smpsNoAttack, nB2, $26
0009CF75 F2                         	smpsStop
0009CF76                            
0009CF76                            Sound_41_Voices:
0009CF76                            ;	Voice $00
0009CF76                            ;	$36
0009CF76                            ;	$07, $10, $0E, $0C, 	$1F, $1F, $1F, $1F, 	$00, $00, $00, $00
0009CF76                            ;	$00, $0D, $0D, $0E, 	$0F, $0F, $0F, $0F, 	$17, $80, $80, $80
0009CF76                            	smpsVcAlgorithm     $06
0009CF76                            	smpsVcFeedback      $06
0009CF76                            	smpsVcUnusedBits    $00
0009CF76                            	smpsVcDetune        $00, $00, $01, $00
0009CF76                            	smpsVcCoarseFreq    $0C, $0E, $00, $07
0009CF76                            	smpsVcRateScale     $00, $00, $00, $00
0009CF76                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
0009CF76                            	smpsVcAmpMod        $00, $00, $00, $00
0009CF76                            	smpsVcDecayRate1    $00, $00, $00, $00
0009CF76                            	smpsVcDecayRate2    $0E, $0D, $0D, $00
0009CF76                            	smpsVcDecayLevel    $00, $00, $00, $00
0009CF76                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
0009CF8F                            
0009CF8F                            
0009CF90 00                         		even
0009CF90                            SoundD2:	include	"sound/sfx/CD_Charge.asm"
0009CF90                            Snd9B_Header:
0009CF90                            	smpsHeaderStartSong 3
0009CF92 01                         	smpsHeaderTempoSFX  $01
0009CF93 01                         	smpsHeaderChanSFX   $01
0009CF94                            
0009CF9A                            
0009CF9A                            ; FM5 Data
0009CF9A                            Snd9B_FM5:
0009CF9A EF00                       	smpsSetvoice        $00
0009CF9C 8001                       	dc.b	nRst, $01
0009CFA3 CA25                       	dc.b	nCs6, $25
0009CFA5 F4                         	smpsModOff
0009CFA6                            
0009CFA6                            Snd9B_Loop00:
0009CFA6 E7                         	dc.b	smpsNoAttack
0009CFA7 E601                       	smpsFMAlterVol      $01
0009CFA9 D102                       	dc.b	nAb6, $02
0009CFAB F700 2AFF F7               	smpsLoop            $00, $2A, Snd9B_Loop00
0009CFB0 F2                         	smpsStop
0009CFB1                            
0009CFB1                            Snd9B_Voices:
0009CFB1                            ;	Voice $00
0009CFB1                            ;	$3C
0009CFB1                            ;	$00, $44, $02, $02, 	$1F, $1F, $1F, $15, 	$00, $1F, $00, $00
0009CFB1                            ;	$00, $00, $00, $00, 	$0F, $0F, $0F, $0F, 	$0D, $80, $28, $80
0009CFB1                            	smpsVcAlgorithm     $04
0009CFB1                            	smpsVcFeedback      $07
0009CFB1                            	smpsVcUnusedBits    $00
0009CFB1                            	smpsVcDetune        $00, $00, $04, $00
0009CFB1                            	smpsVcCoarseFreq    $02, $02, $04, $00
0009CFB1                            	smpsVcRateScale     $00, $00, $00, $00
0009CFB1                            	smpsVcAttackRate    $15, $1F, $1F, $1F
0009CFB1                            	smpsVcAmpMod        $00, $00, $00, $00
0009CFB1                            	smpsVcDecayRate1    $00, $00, $1F, $00
0009CFB1                            	smpsVcDecayRate2    $00, $00, $00, $00
0009CFB1                            	smpsVcDecayLevel    $00, $00, $00, $00
0009CFB1                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
0009CFCA                            
0009CFCA                            
0009CFCA                            		even		
0009CFCA                            SoundD3:	incbin	"sound/sfx/Peelout_Release.bin"
0009D062                            		even
0009D062                            SoundD4:	incbin	"sound/sfx/Peelout_Stop.bin"
0009D06E                            		even				
0009D06E                            SoundD5:	incbin	"sound/sfx/Spindash.bin"
0009D0AA                            		even			
0009D0AA                            		; Don't let Sega sample cross $8000-byte boundary
0009D0AA                            		; (DAC driver doesn't switch banks automatically)
000A0000                            SegaPCM:	incbin	"sound/dac/sega.pcm"
000A6978                            SegaPCM_End
000A6978                            		even
000A6978                            
000A6978                            
000A6978                            
000A6978                            
000A6978                            			include "_inc\Sonic 2 Options.asm"
000A6978                            ; ---------------------------------------------------------------------------
000A6978                            ; Common menu screen subroutine for transferring text to RAM
000A6978                            
000A6978                            ; ARGUMENTS:
000A6978                            ; d0 = starting art tile
000A6978                            ; a1 = data source
000A6978                            ; a2 = destination
000A6978                            ;
000A6978                            ; ---------------------------------------------------------------------------
000A6978                            MenuScreen:
000A6978 103C 0000                  		move.b	#bgm_Fade,d0
000A697C 4EB8 1254                  		jsr	PlaySound_Special ; fade out music
000A6980 4EB8 2186                  		jsr	PaletteFadeOut
000A6984 46FC 2700                  		move	#$2700,sr
000A6988 3038 F60C                  		move.w	($FFFFF60C).w,d0
000A698C 0200 00BF                  		andi.b	#$BF,d0
000A6990 33C0 00C0 0004             		move.w	d0,($00C00004).l
000A6996 4EB8 1184                  		jsr	ClearScreen
000A699A 4DF9 00C0 0004             		lea		($00C00004).l,a6
000A69A0 3CBC 8004                  		move.w	#$8004,(a6)
000A69A4 3CBC 8230                  		move.w	#$8230,(a6)
000A69A8 3CBC 8407                  		move.w	#$8407,(a6)
000A69AC 3CBC 8230                  		move.w	#$8230,(a6)
000A69B0 3CBC 8700                  		move.w	#$8700,(a6)
000A69B4 3CBC 8C81                  		move.w	#$8C81,(a6)
000A69B8 3CBC 9001                  		move.w	#$9001,(a6)
000A69BC                            
000A69BC                            
000A69BC 43F8 D000                  		lea	(v_objspace).w,a1
000A69C0 7000                       		moveq	#0,d0
000A69C2 323C 07FF                  		move.w	#$7FF,d1
000A69C6                            
000A69C6                            MenuScreen_ClrObjRam:
000A69C6 22C0                       		move.l	d0,(a1)+
000A69C8 51C9 FFFC                  		dbf		d1,MenuScreen_ClrObjRam
000A69CC                            
000A69CC                            ; ===========================================================================
000A69CC                            
000A69CC 31FC C800 C8FC             		ResetDMAQueue
000A69D2                            
000A69DC 41F9 0000 0000             		lea		(Nem_MenuFont).l,a0
000A69E2 4EB8 1302                  		jsr	NemDec
000A69F0 41F9 0000 0000             		lea		(Nem_MenuBox).l,a0
000A69F6 4EB8 1302                  		jsr	NemDec
000A69FA 43F9 00FF 0000             		lea	($FF0000).l,a1
000A6A00 41F9 0000 0000             		lea	(Eni_MenuBg).l,a0 ; load SONIC/MILES mappings
000A6A06 303C 6000                  		move.w	#$6000,d0
000A6A0A 4EB8 188C                  		jsr	EniDec
000A6A0E                            
000A6A0E 43F9 00FF 0000 203C 6000+  		copyTilemap	$FF0000,$E000,$27,$1B
000A6A22                            
000A6A22 6100 0000                  		bsr.w	MenuScreen_Options	; if yes, branch
000A6A26                            
000A6A26                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
000A6A26                            
000A6A26                            ; sub_8FBE:
000A6A26                            MenuScreenTextToRAM:
000A6A26 7200                       		moveq	#0,d1
000A6A28 1219                       		move.b	(a1)+,d1
000A6A2A                            
000A6A2A                            MenuScreenTextToRAM_Cont:
000A6A2A 1019                       		move.b	(a1)+,d0
000A6A2C 34C0                       		move.w	d0,(a2)+
000A6A2E 51C9 FFFA                  		dbf	d1,MenuScreenTextToRAM_Cont
000A6A32 4E75                       		rts
000A6A34                            ; End of function MenuScreenTextToRAM
000A6A34                            
000A6A34                            ; ===========================================================================
000A6A34                            ; loc_8FCC:
000A6A34                            MenuScreen_Options:
000A6A34 43F9 00FF 0000             		lea	(v_256x256).l,a1
000A6A3A 41F9 0000 0000             		lea	(Eni_MenuBox).l,a0
000A6A40 303C 0070                  		move.w	#$70,d0
000A6A44 4EB8 188C                  		jsr	EniDec
000A6A48 43F9 00FF 0160             		lea	(v_256x256+$160).l,a1
000A6A4E 41F9 0000 0000             		lea	(Eni_MenuBox).l,a0
000A6A54 303C 2070                  		move.w	#$2070,d0
000A6A58 4EB8 188C                  		jsr	EniDec
000A6A5C 4238 FF8C                  		clr.b	(Options_menu_box).w
000A6A60 6100 0000                  		bsr.w	OptionScreen_DrawSelected
000A6A64 5238 FF8C                  		addq.b	#1,(Options_menu_box).w
000A6A68 6100 0000                  		bsr.w	OptionScreen_DrawUnselected
000A6A6C 5238 FF8C                  		addq.b	#1,(Options_menu_box).w
000A6A70 6100 0000                  		bsr.w	OptionScreen_DrawUnselected
000A6A74 4238 FF8C                  		clr.b	(Options_menu_box).w
000A6A78 4238 F711                  		clr.b	($FFFFF711).w		
000A6A7C 4278 F7F0                  		clr.w	($FFFFF7F0).w					 
000A6A80                            ;-------------------------------------------------------------------------------
000A6A80 4278 F7B8                  		clr.w	($FFFFF7B8).w
000A6A84 45F9 0000 0000             		lea		(Anim_SonicMilesBG).l,a2
000A6A8A 6100 0000                  		bsr.w	Dynamic_Menu
000A6A8E                            ;-------------------------------------------------------------------------------
000A6A8E 7014                       		moveq	#palid_Options,d0
000A6A90 4EB8 2430                  		jsr		PalLoad1
000A6A94 103C 0098                  		move.b	#$98,d0
000A6A98 4EB8 1254                  		jsr	PlaySound_Special ; play options music
000A6A9C 42B8 F700                  		clr.l	(v_screenposx).w
000A6AA0 42B8 F704                  		clr.l	(v_screenposy).w
000A6AA4 11FC 0016 F62A             		move.b	#$16,(v_vbla_routine).w
000A6AAA 4EB8 3A04                  		jsr	WaitForVBla
000A6AAE 3038 F60C                  		move.w	(v_vdp_buffer1).w,d0
000A6AB2 0000 0040                  		ori.b	#$40,d0
000A6AB6 33C0 00C0 0004             		move.w	d0,(vdp_control_port).l
000A6ABC 4EB8 20E0                  		jsr	PaletteFadeIn
000A6AC0                            ; loc_9060:
000A6AC0                            OptionScreen_Main:
000A6AC0 11FC 0016 F62A             		move.b	#$16,(v_vbla_routine).w
000A6AC6 4EB8 3A04                  		jsr	WaitForVBla		
000A6ACA 4EB8 10A6                  		jsr	ReadJoypads			
000A6ACE 46FC 2700                  		move	#$2700,sr
000A6AD2 6100 0000                  		bsr.w	OptionScreen_DrawUnselected
000A6AD6 6100 0000                  		bsr.w	OptionScreen_Controls			
000A6ADA 6100 0000                  		bsr.w	OptionScreen_DrawSelected
000A6ADE 46FC 2300                  		move	#$2300,sr
000A6AE2 45F9 0000 0000             		lea		(Anim_SonicMilesBG).l,a2		
000A6AE8 6100 0000                  		bsr.w	Dynamic_Menu		
000A6AEC 0238 0080 F605             		andi.b	#btnStart,(v_jpadpress1).w ; check if Start is pressed
000A6AF2                            
000A6AF2 6600                       		bne.s	OptionScreen_Select		; if yes, branch
000A6AF4 60CA                       		bra.s	OptionScreen_Main
000A6AF6                            ; ===========================================================================
000A6AF6                            ; loc_909A:
000A6AF6                            OptionScreen_Select:
000A6AF6 1038 FF8C                  		move.b	(Options_menu_box).w,d0
000A6AFA 6600                       		bne.s	OptionScreen_Select_Not1P
000A6AFC 7000                       		moveq	#0,d0
000A6AFE 11FC 0000 F600             		move.b	#id_Title,(v_gamemode).w ; => SegaScreen
000A6B04 4E75                       		rts
000A6B06                            ; ===========================================================================
000A6B06                            ; loc_90B6:
000A6B06                            OptionScreen_Select_Not1P:
000A6B06 5300                       		subq.b	#1,d0
000A6B08 6600                       		bne.s	OptionScreen_Select_Other
000A6B0A 60B4                       		bra.s	OptionScreen_Main
000A6B0C                            ; ===========================================================================
000A6B0C                            ; loc_90D8:
000A6B0C                            OptionScreen_Select_Other:
000A6B0C 11FC 0000 F600             		move.b	#id_Sega,(v_gamemode).w ; => SegaScreen
000A6B12 4E75                       		rts
000A6B14                            
000A6B14                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
000A6B14                            
000A6B14                            ;sub_90E0:
000A6B14                            OptionScreen_Controls:
000A6B14 7400                       		moveq	#0,d2
000A6B16 1438 FF8C                  		move.b	(Options_menu_box).w,d2			
000A6B1A 1038 F605                  		move.b	(v_jpadpress1).w,d0		; Ctrl_1_Press
000A6B1E 0800 0000                  		btst	#0,d0			; is up pressed?
000A6B22 6700                       		beq.s	Option_Controls_Down	; if not, branch
000A6B24 5302                       		subq.b	#1,d2					; move up 1 selection
000A6B26 6400                       		bcc.s	Option_Controls_Down
000A6B28 143C 0002                  		move.b	#2,d2
000A6B2C                            
000A6B2C                            Option_Controls_Down:
000A6B2C 0800 0001                  		btst	#1,d0			; is down pressed?
000A6B30 6700                       		beq.s	Option_Controls_Refresh	; if not, branch
000A6B32 5202                       		addq.b	#1,d2					; move down 1 selection
000A6B34 0C02 0003                  		cmpi.b	#3,d2
000A6B38 6500                       		blo.s	Option_Controls_Refresh
000A6B3A 7400                       		moveq	#0,d2
000A6B3C                            
000A6B3C                            Option_Controls_Refresh:
000A6B3C 11C2 FF8C                  		move.b	d2,(Options_menu_box).w
000A6B40 E54A                       		lsl.w	#2,d2
000A6B42 163B 2000                  		move.b	OptionScreen_Choices(pc,d2.w),d3 ; number of choices for the option
000A6B46 227B 2000                  		movea.l	OptionScreen_Choices(pc,d2.w),a1 ; location where the choice is stored (in RAM)
000A6B4A 3411                       		move.w	(a1),d2
000A6B4C 0800 0002                  		btst	#2,d0				; is left pressed?
000A6B50 6700                       		beq.s	Option_Controls_Right		; if not, branch
000A6B52 5302                       		subq.b	#1,d2						; subtract 1 from sound test
000A6B54 6400                       		bcc.s	Option_Controls_Right
000A6B56 1403                       		move.b	d3,d2
000A6B58                            
000A6B58                            Option_Controls_Right:
000A6B58 0800 0003                  		btst	#3,d0			; is right pressed?
000A6B5C 6700                       		beq.s	Option_Controls_Button_A	; if not, branch
000A6B5E 5202                       		addq.b	#1,d2						; add 1 to sound test
000A6B60 B403                       		cmp.b	d3,d2
000A6B62 6300                       		bls.s	Option_Controls_Button_A
000A6B64 7400                       		moveq	#0,d2
000A6B66                            
000A6B66                            Option_Controls_Button_A:
000A6B66 0800 0006                  		btst	#6,d0				; is button A pressed?
000A6B6A 6700                       		beq.s	Option_Controls_Refresh2	; if not, branch
000A6B6C 0602 0010                  		addi.b	#$10,d2						; add $10 to sound test
000A6B70 B403                       		cmp.b	d3,d2
000A6B72 6300                       		bls.s	Option_Controls_Refresh2
000A6B74 7400                       		moveq	#0,d2
000A6B76                            
000A6B76                            Option_Controls_Refresh2:
000A6B76 3282                       		move.w	d2,(a1)
000A6B78                            
000A6B78                            Option_Controls_NoMove:
000A6B78 4E75                       		rts
000A6B7A                            ; End of function OptionScreen_Controls
000A6B7A                            
000A6B7A                            ; ===========================================================================
000A6B7A                            ; word_917A:
000A6B7A                            OptionScreen_Choices:
000A6B7A 09FF FFBE                  		dc.l ($A-1)<<24|($FFFFBE&$FFFFFF)
000A6B7E 01FF FF8A                  		dc.l (2-1)<<24|($FFFF8A&$FFFFFF)
000A6B82 01FF FF84                  		dc.l (2-1)<<24|($FFFF84&$FFFFFF)
000A6B86                            		even
000A6B86                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
000A6B86                            
000A6B86                            
000A6B86                            OptionScreen_DrawSelected:
000A6B86 6100 0000                  		bsr.w	loc_9268
000A6B8A 7200                       		moveq	#0,d1
000A6B8C 1238 FF8C                  		move.b	(Options_menu_box).w,d1
000A6B90 E749                       		lsl.w	#3,d1
000A6B92 47F9 0000 0000             		lea	(OptScrBoxData).l,a3
000A6B98 47F3 1000                  		lea	(a3,d1.w),a3
000A6B9C 303C 6000                  		move.w	#$6000,d0
000A6BA0 45F9 FFFF 0030             		lea	($FFFF0030).l,a2
000A6BA6 225B                       		movea.l	(a3)+,a1
000A6BA8 6100 FE7C                  		bsr.w	MenuScreenTextToRAM
000A6BAC 45F9 FFFF 00B6             		lea	($FFFF00B6).l,a2
000A6BB2 7200                       		moveq	#0,d1
000A6BB4 0C38 0002 FF8C             		cmpi.b	#2,(Options_menu_box).w
000A6BBA 6700                       		beq.s	loc_9186
000A6BBC 1238 FF8C                  		move.b	(Options_menu_box).w,d1
000A6BC0 E549                       		lsl.w	#2,d1
000A6BC2 43FA FFB6                  		lea	OptionScreen_Choices(pc),a1
000A6BC6 2271 1000                  		movea.l	(a1,d1.w),a1
000A6BCA 3211                       		move.w	(a1),d1
000A6BCC E549                       		lsl.w	#2,d1
000A6BCE                            
000A6BCE                            loc_9186:		
000A6BCE 2274 1000                  		movea.l	(a4,d1.w),a1
000A6BD2 6100 FE52                  		bsr.w	MenuScreenTextToRAM
000A6BD6                            		;cmpi.b	#2,(Options_menu_box).w
000A6BD6                            		;bne.s	loc2_9186
000A6BD6                            		;lea	($FFFF00C2).l,a2
000A6BD6                            		;bsr.w	loc_9296
000A6BD6                            
000A6BD6                            loc2_9186:		
000A6BD6 43F9 00FF 0000             		lea	(v_256x256).l,a1
000A6BDC 201B                       		move.l	(a3)+,d0
000A6BDE 7215                       		moveq	#$15,d1
000A6BE0 7407                       		moveq	#7,d2
000A6BE2 4EF8 12D8                  		jmp	TilemapToVRAM
000A6BE6                            ; ===========================================================================
000A6BE6                            
000A6BE6                            OptionScreen_DrawUnselected:
000A6BE6 6100 0000                  		bsr.w	loc_9268
000A6BEA 7200                       		moveq	#0,d1
000A6BEC 1238 FF8C                  		move.b	(Options_menu_box).w,d1
000A6BF0 E749                       		lsl.w	#3,d1
000A6BF2 47F9 0000 0000             		lea	(OptScrBoxData).l,a3
000A6BF8 47F3 1000                  		lea	(a3,d1.w),a3
000A6BFC 7000                       		moveq	#0,d0
000A6BFE 45F9 FFFF 0190             		lea	($FFFF0190).l,a2
000A6C04 225B                       		movea.l	(a3)+,a1
000A6C06 6100 FE1E                  		bsr.w	MenuScreenTextToRAM
000A6C0A 45F9 FFFF 0216             		lea	($FFFF0216).l,a2
000A6C10 7200                       		moveq	#0,d1
000A6C12 0C38 0002 FF8C             		cmpi.b	#2,(Options_menu_box).w
000A6C18 6700                       		beq.s	loc2_91F8
000A6C1A 1238 FF8C                  		move.b	(Options_menu_box).w,d1
000A6C1E E549                       		lsl.w	#2,d1
000A6C20 43FA FF58                  		lea	OptionScreen_Choices(pc),a1
000A6C24 2271 1000                  		movea.l	(a1,d1.w),a1
000A6C28 3211                       		move.w	(a1),d1
000A6C2A E549                       		lsl.w	#2,d1
000A6C2C                            
000A6C2C                            loc2_91F8		
000A6C2C 2274 1000                  		movea.l	(a4,d1.w),a1
000A6C30 6100 FDF4                  		bsr.w	MenuScreenTextToRAM
000A6C34                            		;cmpi.b	#2,(Options_menu_box).w
000A6C34                            		;bne.s	loc3_91F8
000A6C34                            		;lea	($FFFF0222).l,a2
000A6C34                            		;bsr.w	loc_9296
000A6C34                            
000A6C34                            loc3_91F8		
000A6C34 43F9 FFFF 0160             		lea	($FFFF0160).l,a1
000A6C3A 201B                       		move.l	(a3)+,d0
000A6C3C 7215                       		moveq	#$15,d1
000A6C3E 7407                       		moveq	#7,d2
000A6C40 4EF8 12D8                  		jmp	TilemapToVRAM
000A6C44                            ; ===========================================================================
000A6C44                            
000A6C44                            loc_9268:
000A6C44 49F9 0000 0000             		lea	(off_92D2).l,a4
000A6C4A 4A38 FFF8                  		tst.b	(v_megadrive).w
000A6C4E 6A00                       		bpl.s	loc2_9268
000A6C50 49F9 0000 0000             		lea	(off_92DE).l,a4
000A6C56                            
000A6C56                            loc2_9268:
000A6C56 4A38 FF8C                  		tst.b	(Options_menu_box).w
000A6C5A 6700                       		beq.s	loc3_9268
000A6C5C 49F9 0000 0000             		lea	(off_92EA).l,a4
000A6C62                            
000A6C62                            loc3_9268:
000A6C62 0C38 0002 FF8C             		cmpi.b	#2,(Options_menu_box).w
000A6C68 6600                       		bne.s	loc4_9268		; rts
000A6C6A 49F9 0000 0000             		lea	(off_92F2).l,a4
000A6C70                            
000A6C70                            loc4_9268:
000A6C70 4E75                       		rts
000A6C72                            ; ===========================================================================
000A6C72                            
000A6C72                            loc_9296:
000A6C72 4E75                       		rts
000A6C74                            
000A6C74                            Dynamic_Menu:
000A6C74 47F8 F7B8                  	lea	($FFFFF7B8).w,a3
000A6C78                            
000A6C78                            loc_3FF30:
000A6C78 3C1A                       	move.w	(a2)+,d6	; loop counter. We start off with 00 the first time.
000A6C7A                            
000A6C7A                            loc_3FF32:
000A6C7A 5313                       	subq.b	#1,(a3)		; decrement timer
000A6C7C 6400                       	bcc.s	loc_3FF78	; if time remains, branch ahead
000A6C7E 7000                       	moveq	#0,d0
000A6C80 102B 0001                  	move.b	1(a3),d0	; load animation counter from animation data table
000A6C84 B02A 0006                  	cmp.b	6(a2),d0
000A6C88 6500                       	blo.s	loc_3FF48
000A6C8A 7000                       	moveq	#0,d0
000A6C8C 1740 0001                  	move.b	d0,1(a3)	; set animation counter
000A6C90                            
000A6C90                            loc_3FF48:
000A6C90 522B 0001                  	addq.b	#1,1(a3)	; increment animation counter
000A6C94 1692                       	move.b	(a2),(a3)	; set timer
000A6C96 6A00                       	bpl.s	loc_3FF56
000A6C98 D040                       	add.w	d0,d0
000A6C9A 16B2 0009                  	move.b	9(a2,d0.w),(a3)
000A6C9E                            
000A6C9E                            loc_3FF56:
000A6C9E 1032 0008                  	move.b	8(a2,d0.w),d0
000A6CA2 EB48                       	lsl.w	#5,d0
000A6CA4 342A 0004                  	move.w	4(a2),d2
000A6CA8 2212                       	move.l	(a2),d1
000A6CAA 0281 00FF FFFF             	andi.l	#$FFFFFF,d1		; Filter out the first byte, which contains the first PLC ID, leaving the address of the zone's art in d0
000A6CB0 D280                       	add.l	d0,d1
000A6CB2 7600                       	moveq	#0,d3
000A6CB4 162A 0007                  	move.b	7(a2),d3
000A6CB8 E94B                       	lsl.w	#4,d3
000A6CBA 4EB9 0000 142A             	jsr	(QueueDMATransfer).l	; Use d1, d2, and d3 to locate the decompressed art and ready for transfer to VRAM
000A6CC0                            
000A6CC0                            loc_3FF78:
000A6CC0 102A 0006                  	move.b	6(a2),d0
000A6CC4 4A12                       	tst.b	(a2)
000A6CC6 6A00                       	bpl.s	loc_3FF82
000A6CC8 D000                       	add.b	d0,d0
000A6CCA                            
000A6CCA                            loc_3FF82:
000A6CCA 5200                       	addq.b	#1,d0
000A6CCC 0240 00FE                  	andi.w	#$FE,d0
000A6CD0 45F2 0008                  	lea	8(a2,d0.w),a2
000A6CD4 544B                       	addq.w	#2,a3
000A6CD6 51CE FFA2                  	dbf	d6,loc_3FF32
000A6CDA 4E75                       	rts
000A6CDC                            ; ------------------------------------------------------------------------
000A6CDC                            ; MENU ANIMATION SCRIPT
000A6CDC                            ; ------------------------------------------------------------------------
000A6CDC                            ;word_87C6:
000A6CDC                            Anim_SonicMilesBG:
000A6CDC 0000                       	dc.w   0
000A6CDE                            ; Sonic/Miles animated background
000A6CDE 0000 0000                  	dc.l $FF<<24|Sonic_Miles_Spr
000A6CE2 0020                       	dc.w $20
000A6CE4 06                         	dc.b 6
000A6CE5 0A                         	dc.b $A
000A6CE6 00C7                       	dc.b   0,$C7    ; "SONIC"
000A6CE8 0A05                       	dc.b  $A,  5	; 2
000A6CEA 1405                       	dc.b $14,  5	; 4
000A6CEC 1EC7                       	dc.b $1E,$C7	; "TAILS"
000A6CEE 1405                       	dc.b $14,  5	; 8
000A6CF0 0A05                       	dc.b  $A,  5	; 10	
000A6CF2                            ; ===========================================================================
000A6CF2                            ; off_92BA:
000A6CF2                            OptScrBoxData:
000A6CF2                            
000A6CF2 0000 0000                  		dc.l TextOptScr_PlayerSelect
000A6CF6 4192                       		dc.w $4192
000A6CF8 0003                       		dc.w 3
000A6CFA 0000 0000                  		dc.l TextOptScr_LivesSystem
000A6CFE 4592                       		dc.w $4592
000A6D00 0003                       		dc.w 3
000A6D02 0000 0000                  		dc.l TextOptScr_SoundTest
000A6D06 4992                       		dc.w $4992
000A6D08 0003                       		dc.w 3
000A6D0A                            
000A6D0A                            off_92D2:
000A6D0A 0000 0000                  		dc.l TextOptScr_Default
000A6D0E 0000 0000                  		dc.l TextOptScr_Original
000A6D12 0000 0000                  		dc.l TextOptScr_Beta
000A6D16 0000 0000                  		dc.l TextOptScr_Midnight
000A6D1A 0000 0000                  		dc.l TextOptScr_C2
000A6D1E 0000 0000                  		dc.l TextOptScr_Clackers
000A6D22 0000 0000                  		dc.l TextOptScr_RHS
000A6D26 0000 0000                  		dc.l TextOptScr_Socket
000A6D2A 0000 0000                  		dc.l TextOptScr_Cringe
000A6D2E 0000 0000                  		dc.l TextOptScr_Dark		
000A6D32                            off_92DE:
000A6D32 0000 0000                  		dc.l TextOptScr_Default
000A6D36 0000 0000                  		dc.l TextOptScr_Original
000A6D3A 0000 0000                  		dc.l TextOptScr_Beta
000A6D3E 0000 0000                  		dc.l TextOptScr_Midnight
000A6D42 0000 0000                  		dc.l TextOptScr_C2
000A6D46 0000 0000                  		dc.l TextOptScr_Clackers
000A6D4A 0000 0000                  		dc.l TextOptScr_RHS
000A6D4E 0000 0000                  		dc.l TextOptScr_Socket
000A6D52 0000 0000                  		dc.l TextOptScr_Cringe
000A6D56 0000 0000                  		dc.l TextOptScr_Dark	
000A6D5A                            off_92EA:
000A6D5A 0000 0000                  		dc.l TextOptScr_On
000A6D5E 0000 0000                  		dc.l TextOptScr_Off
000A6D62                            off_92F2:
000A6D62 0000 0000                  		dc.l TextOptScr_Null
000A6D66 0000 0000                  		dc.l TextOptScr_Null2
000A6D6A                            ; ===========================================================================
000A6D6A                            
000A6E89                            ; ============================================================================
000A6E89                            
000A6E89                            Sonic_Miles_Spr:incbin  "artunc/Sonic and Miles text.bin"
000A738A 00                         		even
000A738A                            Eni_MenuBg:    incbin    "tilemaps/menubgeni.bin"
000A7536                            		even
000A7536                            Nem_MenuFont:    incbin    "artnem/Standard font.bin"
000A7AA0                            		even
000A7AA0                            Nem_MenuBox:    incbin   "artnem/Menu Box.bin"
000A7B20                            		even
000A7B20                            Eni_MenuBox:    incbin    "tilemaps/menuboxeni.bin"
000A7B4C                            		even
000A7B4C                            		even
000A7B4C                            
000A7B4C                            SHC2022:    incbin "SHC22_Full_Sonic12.bin"
001253D0                                        even
001253D0                            
001253D0                            Art_Dust:	incbin	artunc\spindust.bin
00126D10                            
00126D10                            ; ===============================================================
00126D10                            ; ---------------------------------------------------------------
00126D10                            ; Error handling module
00126D10                            ; ---------------------------------------------------------------
00126D10                             
00126D10 4EBA 0000                  BusError:   jsr ErrorHandler(pc)
00126D14 4255 5320 4552 524F 5200           dc.b    "BUS ERROR",0           ; text
00126D1E 01                                 dc.b    1               ; extended stack frame
00126D20 00                                 even
00126D20                             
00126D20 4EBA 0000                  AddressError:   jsr ErrorHandler(pc)
00126D24 4144 4452 4553 5320 4552+          dc.b    "ADDRESS ERROR",0       ; text
00126D32 01                                 dc.b    1               ; extended stack frame
00126D34 00                                 even
00126D34                             
00126D34 4EBA 0000                  IllegalInstr:   jsr ErrorHandler(pc)
00126D38 494C 4C45 4741 4C20 494E+          dc.b    "ILLEGAL INSTRUCTION",0     ; text
00126D4C 00                                 dc.b    0               ; extended stack frame
00126D4E 00                                 even
00126D4E                             
00126D4E 4EBA 0000                  ZeroDivide: jsr ErrorHandler(pc)
00126D52 5A45 524F 2044 4956 4944+          dc.b    "ZERO DIVIDE",0         ; text
00126D5E 00                                 dc.b    0               ; extended stack frame
00126D60 00                                 even
00126D60                             
00126D60 4EBA 0000                  ChkInstr:   jsr ErrorHandler(pc)
00126D64 4348 4B20 494E 5354 5255+          dc.b    "CHK INSTRUCTION",0         ; text
00126D74 00                                 dc.b    0               ; extended stack frame
00126D76 00                                 even
00126D76                             
00126D76 4EBA 0000                  TrapvInstr: jsr ErrorHandler(pc)
00126D7A 5452 4150 5620 494E 5354+          dc.b    "TRAPV INSTRUCTION",0       ; text
00126D8C 00                                 dc.b    0               ; extended stack frame
00126D8E 00                                 even
00126D8E                             
00126D8E 4EBA 0000                  PrivilegeViol:  jsr ErrorHandler(pc)
00126D92 5052 4956 494C 4547 4520+          dc.b    "PRIVILEGE VIOLATION",0     ; text
00126DA6 00                                 dc.b    0               ; extended stack frame
00126DA8 00                                 even
00126DA8                             
00126DA8 4EBA 0000                  Trace:      jsr ErrorHandler(pc)
00126DAC 5452 4143 4500                     dc.b    "TRACE",0           ; text
00126DB2 00                                 dc.b    0               ; extended stack frame
00126DB4 00                                 even
00126DB4                             
00126DB4 4EBA 0000                  Line1010Emu:    jsr ErrorHandler(pc)
00126DB8 4C49 4E45 2031 3031 3020+          dc.b    "LINE 1010 EMULATOR",0      ; text
00126DCB 00                                 dc.b    0               ; extended stack frame
00126DCC                                    even
00126DCC                             
00126DCC 4EBA 0000                  Line1111Emu:    jsr ErrorHandler(pc)
00126DD0 4C49 4E45 2031 3131 3120+          dc.b    "LINE 1111 EMULATOR",0      ; text
00126DE3 00                                 dc.b    0               ; extended stack frame
00126DE4                                    even
00126DE4                             
00126DE4 4EBA 0000                  ErrorExcept:    jsr ErrorHandler(pc)
00126DE8 4552 524F 5220 4558 4345+          dc.b    "ERROR EXCEPTION",0         ; text
00126DF8 00                                 dc.b    0               ; extended stack frame
00126DFA 00                                 even
00126DFA                             
00126DFA                            ErrorHandler:   incbin  "ErrorHandler.bin"
001275DE                            
001275DE                            ; end of 'ROM'
001275DE                            		even
001275DE                            EndOfRom:
001275DE                            
001275DE                            
